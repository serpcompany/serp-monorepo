[
  {
    "owner": "nixos",
    "repo": "nix",
    "content": "TITLE: Defining a Basic Nix Expression\nDESCRIPTION: This snippet demonstrates how to define a simple Nix expression using the 'let' and 'in' keywords. It shows variable assignment and string interpolation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/constructs.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  x = \"foo\";\n  y = \"bar\";\nin\n  x + y\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Package Manager via curl\nDESCRIPTION: This command downloads and executes the Nix installation script. It requires sudo privileges to complete the installation process.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/quick-start.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -L https://nixos.org/nix/install | sh\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Derivation - Nix Language\nDESCRIPTION: Declares a basic derivation using the 'derivation' built-in function, specifying the 'name' attribute. Produces a derivation object whose path is based on the given name within the /nix/store. Requires Nix and assumes access to the derivation function.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  name = \"hello\";\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from Nixpkgs using Nix\nDESCRIPTION: This snippet demonstrates how to install a package (hello) from the default Nixpkgs repository using the Nix package manager.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-install.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile install nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Querying Closure Dependencies with nix-store --query --requisites - Console\nDESCRIPTION: This snippet demonstrates how to print the closure (all runtime dependencies) of the svn program by combining nix-store --query with --requisites and which to obtain the path. Requires Nix to be installed and accessible in PATH. Input is the path to the svn executable, output is a list of Nix store paths representing direct or indirect dependencies. Useful for deployment or dependency analysis.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/query.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --query --requisites $(which svn)\\n/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4\\n/nix/store/9lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4\\n...\n```\n\n----------------------------------------\n\nTITLE: Derivation with Named Outputs Example - Nix Language\nDESCRIPTION: Specifies explicit outputs for a derivation named 'example', causing Nix to generate differently suffixed paths for each output in the Nix store. Demonstrates store path formation conventions for both the default ('out') and named outputs. Useful for clarity and package consumers.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  name = \"example\";\n  outputs = [ \"lib\" \"dev\" \"doc\" \"out\" ];\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Basic Nix Expressions – Nix REPL – Console\nDESCRIPTION: This snippet shows how to start the Nix REPL and evaluate simple arithmetic and mapping operations. The session demonstrates integer addition and mapping a lambda across a list. Dependencies include a working Nix REPL. The user inputs Nix expressions and inspects their evaluated results.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/repl.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix repl\\n\\nnix-repl> 1 + 2\\n3\\n\\nnix-repl> map (x: x * 2) [1 2 3]\\n[ 2 4 6 ]\n```\n\n----------------------------------------\n\nTITLE: Installing Nix in Multi-user Mode\nDESCRIPTION: Command to install Nix in multi-user mode, which offers better sharing, improved isolation, and more security. This requires Linux running systemd (with SELinux disabled) or MacOS.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -L https://nixos.org/nix/install | sh -s -- --daemon\n```\n\n----------------------------------------\n\nTITLE: Selective Output Installation with outputsToInstall - nix-env Console Command - Shell\nDESCRIPTION: Demonstrates installing a Nix derivation configured to only include selected outputs in the user profile using nix-env and a file with customized outputsToInstall. Requires the modified Nix file and a working Nix installation. The profile ends up with only the specified output's files.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install --file example-outputs.nix\ninstalling 'example'\n$ ls ~/.nix-profile\nbar-file\nmanifest.nix\n```\n\n----------------------------------------\n\nTITLE: Freeing Up Storage Space with nix-collect-garbage\nDESCRIPTION: This command runs the Nix garbage collector to free up storage space by removing unused Nix store entries.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/quick-start.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-collect-garbage\n```\n\n----------------------------------------\n\nTITLE: Basic Nix Flake Structure for Hello World Package\nDESCRIPTION: A simple flake.nix example that depends on the Nixpkgs flake and provides a single package installable derivation for a Hello World application. It demonstrates the core structure with description, inputs, and outputs sections.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n{\n  description = \"A flake for building Hello World\";\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-20.03\";\n\n  outputs = { self, nixpkgs }: {\n\n    packages.x86_64-linux.default =\n      # Notice the reference to nixpkgs here.\n      with import nixpkgs { system = \"x86_64-linux\"; };\n      stdenv.mkDerivation {\n        name = \"hello\";\n        src = self;\n        buildPhase = \"gcc -o hello ./hello.c\";\n        installPhase = \"mkdir -p $out/bin; install -t $out/bin hello\";\n      };\n\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing String Interpolation in Nix\nDESCRIPTION: Demonstrates embedding expressions inside strings using the ${...} syntax. This allows construction of dynamic strings based on evaluated values, such as variables, function calls, or attribute selections. No external dependencies. Inputs are expressions, outputs are interpolated strings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n\"hello ${ { a = \\\"world\\\"; }.a }\"\n\n\"1 2 ${toString 3}\"\n\n\"${pkgs.bash}/bin/sh\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Output from a Derivation - Nix Language\nDESCRIPTION: Shows how to access a specific named output (e.g., 'dev') from a multi-output derivation by attribute selection. The first output in 'outputs' becomes the default value of the derivation. Useful for referential clarity in consuming packages.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  myPackage = derivation {\n    name = \"example\";\n    outputs = [ \"lib\" \"dev\" \"doc\" \"out\" ];\n    # ...\n  };\nin myPackage.dev\n```\n\n----------------------------------------\n\nTITLE: Rolling Back to Previous Generation Using nix-env --rollback - Console\nDESCRIPTION: This command reverts the active user environment to the previous generation by updating the profile's symlink. It requires an existing Nix setup with at least one rollback point. The output is a switch to the earlier generation, undoing the last profile change atomically.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --rollback\n```\n\n----------------------------------------\n\nTITLE: Escaping Backslash in Standard Nix Strings - Nix\nDESCRIPTION: Shows how to represent a literal backslash character within a Nix string using two backslashes. This is necessary in standard string literals to avoid interpreting the backslash as an escape sequence. Useful when special characters or path representations are required in Nix expressions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n\"\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Nix via Shell Script - Console\nDESCRIPTION: Runs a shell command using curl to download and execute the default Nix install script via sh. Requires curl and sh to be available in the environment. Installs the latest Nix version with default (recommended) options based on the host platform. The output and side effects depend on system permissions and may prompt the user for sudo or root access.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-binary.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -L https://nixos.org/nix/install | sh\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Nix Store - Nix CLI - Console\nDESCRIPTION: Queries information about a remote Nix store over SSH using the 'nix store info' command. The '--store' option specifies the remote SSH URI using the syntax ssh://username@hostname. Dependencies include having Nix installed locally, a reachable SSH server on the remote, and appropriate SSH keys in place. The command outputs information from the remote Nix store, useful for verifying connectivity and remote status.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnix store info --store ssh://username@mac\n```\n\n----------------------------------------\n\nTITLE: Comparing Installed and Available Package Versions - nix-env Command - Console/Shell\nDESCRIPTION: This command compares currently installed package versions against available versions using nix-env with --compare-versions. The output includes package names, installed and available versions, and comparison symbols, making it easy to detect upgrades, downgrades, or unavailable packages. This requires nix-env and an available package index.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --query --compare-versions\n...\nacrobat-reader-7.0 - ?      (package is not available at all)\nautoconf-2.59      = 2.59   (same version)\nfirefox-1.0.4      < 1.0.7  (a more recent version is available)\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Nix Development Shell Initialization\nDESCRIPTION: Start a shell with the build environment of the default package in the current directory's flake.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix develop\n```\n\n----------------------------------------\n\nTITLE: Defining an Attribute Set in Nix\nDESCRIPTION: This snippet shows how to create an attribute set in Nix, which is similar to a dictionary or object in other languages. It defines multiple key-value pairs within curly braces.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/constructs.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  x = 123;\n  y = 456;\n  z = \"abc\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tarball to the Nix Store Using SHA-256 Hash\nDESCRIPTION: Example of adding a local tarball to the Nix store using the SHA-256 hashing algorithm. The command returns the path where the file is stored in the Nix store after being added.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/add-fixed.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --add-fixed sha256 ./hello-2.10.tar.gz\n/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g-hello-2.10.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Short Form nix-shell with --packages - nix - console\nDESCRIPTION: This snippet demonstrates starting a nix-shell containing sqlite and libX11 with the shorter --packages flag, showing how the environment variable NIX_LDFLAGS is affected. Inputs: package names may be specified as attributes. Outputs: shell with libraries in runtime/linker paths. Limitation: must have nixpkgs in NIX_PATH for attribute resolution.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell --packages sqlite xorg.libX11\n[nix-shell]$ echo $NIX_LDFLAGS\n… -L/nix/store/j1zg5v…-sqlite-3.8.0.2/lib -L/nix/store/0gmcz9…-libX11-1.6.1/lib …\n```\n\n----------------------------------------\n\nTITLE: Using Nix Expression with mkShell - Nix - nix\nDESCRIPTION: This Nix snippet demonstrates the use of a shebang line for nix-shell with the --pure flag and defines a shell environment that includes bashInteractive as a build input. It imports a specific version of nixpkgs using fetchTarball and constructs a mkShell environment with explicit package versions. Expected input: executed as a script. Output: an interactive shell with prescribed environment. Limitation: Used for script shebangs and may not be fully reproducible if external factors change.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n#!/usr/bin/env -S nix-shell --pure\nlet\n  pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/854fdc68881791812eddd33b2fed94b954979a8e.tar.gz\") {};\nin\npkgs.mkShell {\n  buildInputs = pkgs.bashInteractive;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Registry List with Nix CLI - Console\nDESCRIPTION: This code snippet demonstrates the use of the Nix CLI to list all configured registry entries via the command 'nix registry list'. It shows sample command output, including various registry types (user, system, global) and their corresponding sources. No external dependencies are required other than having the Nix package manager installed; the command outputs each registry's details in a structured format for inspection and troubleshooting. The input is the CLI command, and the output is a human-readable list of registry mappings.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix registry list\\nuser   flake:dwarffs github:edolstra/dwarffs/d181d714fd36eb06f4992a1997cd5601e26db8f5\\nsystem flake:nixpkgs path:/nix/store/fxl9mrm5xvzam0lxi9ygdmksskx4qq8s-source?lastModified=1605220118&narHash=sha256-Und10ixH1WuW0XHYMxxuHRohKYb45R%2fT8CwZuLd2D2Q=&rev=3090c65041104931adda7625d37fa874b2b5c124\\nglobal flake:blender-bin github:edolstra/nix-warez?dir=blender\\nglobal flake:dwarffs github:edolstra/dwarffs\\n…\n```\n\n----------------------------------------\n\nTITLE: Providing Packages with nix-shell via Expression - nix - console\nDESCRIPTION: This command illustrates the use of the --expr flag to directly pass a Nix expression that brings sqlite and libX11 into the shell environment. The environment is derived from a runCommand that specifies buildInputs as a list of Nix derivations. Inputs: no pre-existing files required. Outputs: an interactive shell with the requested libraries available, facilitating environment provisioning for development.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell --expr 'with import <nixpkgs> { }; runCommand \"dummy\" { buildInputs = [ sqlite xorg.libX11 ]; } \"\"'\n```\n\n----------------------------------------\n\nTITLE: Running Vim with Arguments via Nix Flake - Console\nDESCRIPTION: Demonstrates running vim from nixpkgs with additional command-line arguments by using '--' to separate nix run flags and vim flags. This pattern allows passing standard or custom arguments directly to the run application. Required dependencies are nixed flakes and the specified package in the flake. The output is the executed app responding to provided arguments.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/run.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix run nixpkgs#vim -- --help\n```\n\n----------------------------------------\n\nTITLE: Installing Nix from a Binary Tarball - Console\nDESCRIPTION: Shows the complete workflow for downloading, extracting, and installing Nix from a binary tarball. Involves creating a temporary directory, setting variables for version and system, downloading the compressed tarball, extracting its content, running the install script inside the unpacked directory, and cleaning up by returning to the original location. Depends on standard Unix utilities such as mktemp, curl, tar, export, and popd/pushd.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-binary.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ pushd $(mktemp -d)\n$ export VERSION=2.19.2\n$ export SYSTEM=x86_64-linux\n$ curl -LO https://releases.nixos.org/nix/nix-$VERSION/nix-$VERSION-$SYSTEM.tar.xz\n$ tar xfj nix-$VERSION-$SYSTEM.tar.xz\n$ cd nix-$VERSION-$SYSTEM\n$ ./install\n$ popd\n```\n\n----------------------------------------\n\nTITLE: Evaluating Nix Flake Checks - Console Commands - Shell\nDESCRIPTION: Shows how to use the `nix flake check` command in the shell to evaluate the current directory's flake and build all checks. Prerequisites are a working Nix installation and a valid flake in the directory. The command requires no parameters by default but can be customized by additional flags. Input is from the environment and outputs are build artifacts or error diagnostics.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-check.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake check\n```\n\n----------------------------------------\n\nTITLE: Setting Builder to Absolute Path - Nix Language\nDESCRIPTION: Configures the 'builder' attribute to use an explicit binary (e.g., '/bin/bash') as the derivation's builder. The specified path must be accessible in the environment. Only works if the builder exists on the build platform.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  # ...\n  builder = \"/bin/bash\";\n  # ...\n};\n```\n\n----------------------------------------\n\nTITLE: Copying a Store Path to a Local Binary Cache Using Nix CLI - Console\nDESCRIPTION: Copies the binary of Firefox from the local Nix store to a binary cache located at /tmp/cache using the 'nix copy' command. Requires Nix installed on the system and permissions to write to the target directory. The 'file://' scheme ensures the destination is treated as a binary cache; omitting it would result in a chroot store. The command takes the output of 'type -p firefox' to resolve the Firefox path, and expects Firefox to be present in the store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --to file:///tmp/cache $(type -p firefox)\n```\n\n----------------------------------------\n\nTITLE: Python Script with nix-shell Shebang for Environment Provisioning - python\nDESCRIPTION: This Python script demonstrates how to specify nix-shell as an interpreter in the shebang, along with required packages (python3 and prettytable), so the script can import and use prettytable without any prior installation. Upon execution, nix-shell prepares the required Python environment and runs the script. Inputs: none (besides Nix, python3, and prettytable in nixpkgs); outputs: printed table. Limitation: Startup overhead due to environment provisioning.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env nix-shell\n#! nix-shell -i python3 --packages python3 python3Packages.prettytable\n\nimport prettytable\n\n# Print a simple table.\nt = prettytable.PrettyTable([\"N\", \"N^2\"])\nfor n in range(1, 10): t.add_row([n, n * n])\nprint(t)\n```\n\n----------------------------------------\n\nTITLE: Using URL-like Syntax for Flake Reference in Console\nDESCRIPTION: This example shows how to use the URL-like syntax for a flake reference in a Nix build command. It references a specific package (hello) from the NixOS/nixpkgs GitHub repository.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix build github:NixOS/nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Upgrading to a Specific Package Version by Name with nix-env - Console\nDESCRIPTION: Illustrates upgrading a package to a specific version or downgrading using the nix-env --upgrade command with the --always flag. The code example passes the derivation name and version directly, forcing an upgrade or downgrade. Requires nix to be installed and package derivations available; outputs the result of the operation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/upgrade.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --upgrade gcc-3.3.2 --always\\nupgrading `gcc-3.4' to `gcc-3.3.2'\\n\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Builder - Nix Language\nDESCRIPTION: Supplies the 'args' attribute as a list to pass command-line arguments to the builder executable (e.g., Bash), enabling commands such as inline shell scripts. Helps customize the invocation with arbitrary argument lists. Useful for scripting single-step build actions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  # ...\n  builder = \"/bin/bash\";\n  args = [ \"-c\" \"echo hello world > $out\" ];\n  # ...\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Interacting with Package Dependencies - nix-shell - console\nDESCRIPTION: This console snippet shows the step-by-step use of nix-shell to prepare and build a package (Pan). It demonstrates evaluating phase variables, changing to the source root, patching, configuring, building, and running the package binary in an interactive session. Assumes Pan and its dependencies are already present or reachable through the specified Nix expression. Inputs: nix-shell command with attribute selection; outputs: built artifacts triggered manually.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell '<nixpkgs>' --attr pan\n[nix-shell]$ eval ${unpackPhase:-unpackPhase}\n[nix-shell]$ cd $sourceRoot\n[nix-shell]$ eval ${patchPhase:-patchPhase}\n[nix-shell]$ eval ${configurePhase:-configurePhase}\n[nix-shell]$ eval ${buildPhase:-buildPhase}\n[nix-shell]$ ./pan/gui/pan\n```\n\n----------------------------------------\n\nTITLE: Variable Expression Syntax in Nix\nDESCRIPTION: Shows the basic syntax for using variables in Nix expressions. A variable is represented by an identifier and must correspond to a definition in the enclosing scope.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/variables.md#_snippet_0\n\nLANGUAGE: bnf\nCODE:\n```\nexpression → identifier\n```\n\n----------------------------------------\n\nTITLE: Specifying Flake Dependencies with URL-like Syntax\nDESCRIPTION: Example showing how to define flake inputs using the explicit attribute format, specifying dependencies on GitHub repositories and registry references. This demonstrates the detailed input specification syntax.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\n# A GitHub repository.\ninputs.import-cargo = {\n  type = \"github\";\n  owner = \"edolstra\";\n  repo = \"import-cargo\";\n};\n\n# An indirection through the flake registry.\ninputs.nixpkgs = {\n  type = \"indirect\";\n  id = \"nixpkgs\";\n};\n```\n\n----------------------------------------\n\nTITLE: Building NixOS System Configuration from Flake\nDESCRIPTION: Demonstrates building a NixOS system configuration from a flake and creating a profile symlink to the result.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# nix build --profile /nix/var/nix/profiles/system \\\n    ~/my-configurations#nixosConfigurations.machine.config.system.build.toplevel\n```\n\n----------------------------------------\n\nTITLE: Sourcing Nix Profile Script for Environment Setup - Bash\nDESCRIPTION: This snippet demonstrates how to source the Nix profile initialization script in a user's profile file (such as ~/.profile) using Bash. Sourcing this script sets the required PATH and other variables for using Nix tools. The user must have the specified profile script available at the given location, which is typically installed with Nix. Inputs: none; Action: modifies current shell environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/env-variables.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource prefix/etc/profile.d/nix.sh\n```\n\n----------------------------------------\n\nTITLE: Using Let-Expressions - Nix Language - Nix\nDESCRIPTION: The following snippet demonstrates the use of let-expressions to define local variables, which are then used in an expression following the 'in' keyword. Let-expressions add variables to the lexical scope and enable the construction of modular expressions in Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  x = \"foo\";\n  y = \"bar\";\nin x + y\n```\n\n----------------------------------------\n\nTITLE: Running the Nix Garbage Collector Using nix-store - Console\nDESCRIPTION: This snippet runs the Nix garbage collector to remove files from the Nix store that are no longer referenced by any profile generation or GC root. It is a destructive operation that reclaims disk space. Requires no arguments but can be customized with configuration file options. Input is implicit (the current store state), and output is a cleaned store with unreferenced paths deleted.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/garbage-collection.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --gc\n```\n\n----------------------------------------\n\nTITLE: Using Relative Path Inputs in Nix Flakes\nDESCRIPTION: Demonstrates how to reference flakes in the same repository using relative paths. This new feature allows referencing a flake in a subdirectory of the current flake.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.26.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\ninputs.foo.url = \"path:./foo\";\n```\n\n----------------------------------------\n\nTITLE: Using URL Shorthand Syntax for Flake Inputs\nDESCRIPTION: Simplified URL-like syntax for specifying flake inputs, which is equivalent to the more verbose attribute-based format. This demonstrates the preferred shorthand for common input types.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\ninputs.import-cargo.url = \"github:edolstra/import-cargo\";\ninputs.nixpkgs.url = \"nixpkgs\";\n```\n\n----------------------------------------\n\nTITLE: Indented String with Tabs Demonstrating Non-Stripped Prefix - Nix\nDESCRIPTION: Presents an indented string where lines are prefixed with tabs rather than spaces. Nix does not strip tab characters from the beginning of lines when processing indented strings. Essential for users working with tab-indented content such as Makefiles.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n''\n\tall:\n\t\t@echo hello\n''\n```\n\n----------------------------------------\n\nTITLE: Converting Hashes to Nix32 Encoding - Nix hash convert - Console\nDESCRIPTION: This snippet demonstrates how to convert a hexadecimal SHA1 hash to Nix's proprietary base-32 encoding (nix32) using the `nix hash convert` command-line tool. It requires Nix to be installed and available on the system. The input hash, algorithm, and target encoding are specified with the corresponding command-line options. The command outputs the hash in nix32 format.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/hash-convert.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix hash convert --hash-algo sha1 --to nix32 800d59cfcd3c05e900cb4e214be48f6b886a08df\nvw46m23bizj4n8afrc0fj19wrp7mj3c0\n```\n\n----------------------------------------\n\nTITLE: Building and Executing a Flake - Nix CLI - Console\nDESCRIPTION: Demonstrates how to build the current directory as a Nix flake and execute its result, expecting a 'Hello, world!' output. Assumes an initialized flake with a buildable default package. The 'nix build' command creates the build result in './result', and running the built binary executes the program, printing output to the console.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix build\n# ./result/bin/hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Entering a Nix Development Shell with All Dependencies (Console)\nDESCRIPTION: Shows how to use nix-shell to enter a shell where all environment variables and dependencies necessary for building Nix are set up. Requires a working Nix installation. No additional parameters yield the default environment for the current platform.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell\n```\n\n----------------------------------------\n\nTITLE: Creating and Entering a New Nix Flake - Console - Shell\nDESCRIPTION: Shows how to create a new Nix flake using the 'nix flake new' command and change into the resulting directory. No special dependencies are needed other than the Nix tool itself with flakes support enabled. The first command initializes a new flake, while the second moves into its directory. No input/output is expected beyond directory creation.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake new hello\n# cd hello\n```\n\n----------------------------------------\n\nTITLE: Referencing Multiple Outputs as Build Inputs - Nix\nDESCRIPTION: Demonstrates how to specify particular outputs of a package as build inputs by referencing them individually (e.g., pkg.lib and pkg.headers). This enables selective inclusion of needed outputs in build environments, supporting packages that split outputs for modularity or efficiency. This pattern assumes the upstream derivation defines multiple outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.2.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nbuildInputs = [ pkg.lib pkg.headers ];\n```\n\n----------------------------------------\n\nTITLE: Running nix-instantiate with Empty NIX_PATH (Bash)\nDESCRIPTION: This bash snippet shows how to run a Nix command (nix-instantiate) with an empty NIX_PATH, causing path resolution to fail. It exemplifies the behavior when required search paths are missing, which is useful for debugging path issues or understanding Nix errors. Key parameters: NIX_PATH (set to an empty string), nix-instantiate arguments. Input: None or search path; Output: Error message if search path not found. This pattern can serve to test or validate configuration issues regarding Nix environment variable setup.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/env-common.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ NIX_PATH= nix-instantiate --eval '<nixpkgs>'\nerror: file 'nixpkgs' was not found in the Nix search path (add it using $NIX_PATH or -I)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flake Inputs with Follows for Circular Dependencies - Nix\nDESCRIPTION: This Nix snippet configures a flake's inputs to enable circular dependencies using the 'follows' attribute, ensuring that the dependent flake refers to the current ('self') instance rather than fetching anew. It demonstrates how to set flake inputs to follow each other and how outputs can combine exported values from both flakes. This configuration enables cross-reference between flakes in Nix-based projects and requires Nix flakes support. Flake location placeholders must be replaced with actual sources.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_20\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs.b = ... location of flake B ...;\n  # Tell the 'b' flake not to fetch 'a' again, to ensure its 'a' is\n  # *this* 'a'.\n  inputs.b.inputs.a.follows = \"\";\n  outputs = { self, b }: {\n    foo = 123 + b.bar;\n    xyzzy = 1000;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Files to Be Deleted by the Garbage Collector Using nix-store - Console\nDESCRIPTION: This command lists the dead (unreachable/unreferenced) paths that would be removed by running the Nix garbage collector, without actually deleting them. Useful for previewing the effects of a GC run. Requires nix installed. Takes no additional inputs and simply outputs a list of candidate files/directories for deletion.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/garbage-collection.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --gc --print-dead\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Strings in Nix\nDESCRIPTION: Illustrates the syntax for multi-line strings using double single-quotes. Common leading whitespace is stripped on evaluation. Useful for embedding text blocks or configuration, evaluates to a single string with line breaks preserved. No dependencies required.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n''\n  multi\n   line\n    string\n''\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Packages by Attribute Using nix-env - Console\nDESCRIPTION: This command installs multiple packages at once (e.g., Subversion and Firefox) using nix-env. It relies on the same prerequisites as the single install command. The '--install' and '--attr' options are followed by multiple package attributes. On execution, the user's profile is updated to include both packages, and a new generation is created.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install --attr nixpkgs.subversion nixpkgs.firefox\n```\n\n----------------------------------------\n\nTITLE: Evaluating Nix Expression from File\nDESCRIPTION: Demonstrates evaluating a specific attribute from a Nix file.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/eval.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --file ./my-nixpkgs hello.name\n```\n\n----------------------------------------\n\nTITLE: Querying All Outputs of a Store Derivation Using Caret Syntax - shell-session\nDESCRIPTION: This snippet shows the use of Nix's '^*' syntax to clearly specify that information about all output paths of a derivation should be retrieved. It assumes Nix 2.13 or newer with support for output-referencing carets. Given a store path ending in .drv, the appended '^*' will output details for each build output path, addressing the previous ambiguity in .drv path interpretation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.15.md#_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix path-info /nix/store/gzaflydcr6sb3567hap9q6srzx8ggdgg-glibc-2.33-78.drv^*\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Custom Binary Cache - Bash\nDESCRIPTION: Demonstrates how to install a package using nix-env while specifying a custom binary cache URL via the --option flag. Requires Nix to be installed, and access to the given binary cache URL. The command will install Thunderbird and its dependencies using pre-built binaries, improving installation speed and reliability. Accepts any package argument, and the binary cache URL must be reachable by the client.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-env -i thunderbird --option binary-caches http://cache.nixos.org\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Nix Store with SSH Identity - Nix CLI - Console\nDESCRIPTION: Connects to a remote Nix store using a custom SSH identity file by appending the 'ssh-key' query parameter to the remote SSH URI. This is useful when a specific SSH key is needed for authentication and the key has no passphrase (or is loaded via an agent for non-interactive builds). Outputs remote store information if the SSH credentials permit access.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnix store info --store ssh://username@mac?ssh-key=/home/alice/my-key\n```\n\n----------------------------------------\n\nTITLE: Defining Flake Templates Output - Nix Language\nDESCRIPTION: Defines template output attributes within a flake's outputs using the Nix expression language. The example includes a `rust` template with `path`, `description`, and `welcomeText` attributes, and sets `default` to reuse the `rust` template. Requires knowledge of Nix expressions; typically used in the `flake.nix` file for project scaffolding or sharing starter configurations. Template authors specify metadata and copy logic for reusable project setups.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-init.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\noutputs = { self }: {\n\n  templates.rust = {\n    path = ./rust;\n    description = \"A simple Rust/Cargo project\";\n    welcomeText = ''\n      # Simple Rust/Cargo Template\n      ## Intended usage\n      The intended usage of this flake is...\n\n      ## More info\n      - [Rust language](https://www.rust-lang.org/)\n      - [Rust on the NixOS Wiki](https://wiki.nixos.org/wiki/Rust)\n      - ...\n    '';\n  };\n\n  templates.default = self.templates.rust;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Function Definition in Nix\nDESCRIPTION: Shows the fundamental pattern-body syntax for Nix functions. Functions in Nix follow the form 'pattern: body' where the pattern specifies what the argument must look like and binds variables to parts of the argument.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\npattern: body\n```\n\n----------------------------------------\n\nTITLE: Repairing Corrupted or Missing Store Paths - Bash\nDESCRIPTION: Shows how to use the nix-store command with the --repair-path and related flags to scan, verify, and repair broken store paths. This is useful for systems with potential bitrot or missing data; the commands will attempt to redownload or rebuild bad paths as needed. Requires an active Nix installation and possibly network access for redownload operations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.2.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --repair-path\n```\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --verify --check-contents --repair\n```\n\n----------------------------------------\n\nTITLE: Setting Package Priorities\nDESCRIPTION: Example showing how to set different priority levels for binutils and gcc packages to resolve file conflicts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/set-flag.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --set-flag priority 5 binutils\n$ nix-env --set-flag priority 10 gcc\n```\n\n----------------------------------------\n\nTITLE: Using External Nix File for Dependencies with Python\nDESCRIPTION: A Python script that uses an external Nix file (deps.nix) to declare its dependencies. This demonstrates separating dependency declarations from the script itself.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env nix-shell\n#! nix-shell deps.nix -i python\n```\n\n----------------------------------------\n\nTITLE: Outputting Nix Build Environment as JSON - Console\nDESCRIPTION: Demonstrates invoking the 'nix print-dev-env' command with the '--json' flag to serialize the package's build environment (variables and shell functions) into JSON format for inspection or further processing. This approach is useful for automation and tooling that integrate with Nix. Requires Nix installed and the referenced package to be available.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/print-dev-env.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix print-dev-env nixpkgs#hello --json\n```\n\n----------------------------------------\n\nTITLE: Building Store Derivations with nix-store --realise (Console)\nDESCRIPTION: This snippet demonstrates how to build a derivation using the nix-store --realise command combined with nix-instantiate to build a Nix expression. Dependencies: Nix must be installed and nix-instantiate as well as nix-store commands must be available. It expects the file test.nix to exist and produces a realised path in the Nix store as output; the command prints the store path of the resulting build. Limitations: The snippet assumes a valid, buildable Nix expression and that the user has necessary build permissions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/realise.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --realise $(nix-instantiate ./test.nix)\n/nix/store/31axcgrlbfsxzmfff1gyj1bf62hvkby2-aterm-2.3.1\n```\n\n----------------------------------------\n\nTITLE: Deleting Old Generations for All Profiles Using nix-collect-garbage - Console\nDESCRIPTION: This command invokes nix-collect-garbage with the -d flag, which deletes all old generations of all user profiles found under /nix/var/nix/profiles, then runs the garbage collector. It is a convenient way to perform a system-wide cleanup. Requires appropriate permissions and assumes nix-collect-garbage is available. Output is a streamlined Nix store releasing any space associated with unreferenced outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/garbage-collection.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ nix-collect-garbage -d\n```\n\n----------------------------------------\n\nTITLE: Hashing with Various Algorithms and Formats - Shell\nDESCRIPTION: These snippets illustrate how to use nix-hash to compute hashes using different algorithms (sha1, sha256) and output encodings (base16, base32, base64, SRI). Dependencies include the nix-hash command and valid input paths. Parameters like --type, --base16, --base32, --base64, and --sri determine the hashing algorithm and output encoding. Expected outputs are hashes represented in the selected encoding, with SRI including the algorithm prefix. Passing a directory with --flat returns an error.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-hash.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 test/\ne4fd8ba5f7bbeaea5ace89fe10255536cd60dab6\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --base16 test/\ne4fd8ba5f7bbeaea5ace89fe10255536cd60dab6\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --base32 test/\nnvd61k9nalji1zl9rrdfmsmvyyjqpzg4\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --base64 test/\n5P2Lpfe76upazon+ECVVNs1g2rY=\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --sri test/\nsha1-5P2Lpfe76upazon+ECVVNs1g2rY=\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha256 --flat test/\nerror: reading file `test/': Is a directory\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha256 --flat test/world\n5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03\n```\n\n----------------------------------------\n\nTITLE: Querying Store Path Information with Nix CLI - Console\nDESCRIPTION: Demonstrates the use of the Nix command-line interface to retrieve detailed information about a specific store path from a remote HTTP binary cache. The command uses the --store flag with a URL specifying the remote cache and outputs results in JSON format. Input parameters include the URL of the store and the store path to query. Requires a working Nix installation with network access to the specified store. The output is a JSON array describing the requested store path.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/help-stores.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --store https://cache.nixos.org/ --json \\\n  /nix/store/a7gvj343m05j2s32xcnwr35v31ynlypr-coreutils-9.1\n```\n\n----------------------------------------\n\nTITLE: Bundling Hello World with nix bundle - Shell\nDESCRIPTION: This shell snippet demonstrates how to use 'nix bundle' to package the 'hello' application from nixpkgs, then execute the self-extracting bundle. Requires nix installed and access to the 'nixpkgs' flake. The input is the package identifier, and the output is a single executable file which runs 'Hello, world!'. Limitations: Only usable on Linux systems.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/bundle.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix bundle nixpkgs#hello\\n# ./hello\\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Defining Flake Reference as Attribute Set in Nix\nDESCRIPTION: This snippet demonstrates how to define a flake reference using an attribute set in Nix. It specifies the type, owner, and repository of a GitHub-hosted flake.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  type = \"github\";\n  owner = \"NixOS\";\n  repo = \"nixpkgs\";\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Multiple Exclusions\nDESCRIPTION: Shows how to search for neovim packages while excluding multiple terms using separate exclude flags.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# nix search nixpkgs neovim --exclude 'python' --exclude 'gui'\n```\n\n----------------------------------------\n\nTITLE: Implicit Input Definition in Nix Flakes\nDESCRIPTION: Demonstrates how inputs can be implicitly defined by listing them as arguments to the outputs function, which automatically creates default registry references for them.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_14\n\nLANGUAGE: nix\nCODE:\n```\noutputs = { self, nixpkgs }: ...;\n```\n\n----------------------------------------\n\nTITLE: Debugging Let Expressions with Breakpoints - Nix\nDESCRIPTION: Provides a sample Nix let expression demonstrating the use of builtins.trace and builtins.break for setting breakpoints inside nested expressions. Required for debugging improvements and verifying access to let bindings. Inputs are trace and break expressions; output is controlled debugger entry at each breakpoint.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_3\n\nLANGUAGE: Nix\nCODE:\n```\nlet\n  a = builtins.trace \"before inner break\" (\n    builtins.break \"hello\"\n  );\n  b = builtins.trace \"before outer break\" (\n    builtins.break a\n  );\nin\n  b\n```\n\n----------------------------------------\n\nTITLE: Executing nix-store --print-env on a Derivation (Console, Bash)\nDESCRIPTION: Demonstrates how to retrieve the build environment of a specific Nix derivation using 'nix-store --print-env' combined with 'nix-instantiate' to resolve a package (firefox) from the Nixpkgs repository. This command prints environment variables, including input sources and builder arguments, in a shell-compatible 'export' format. It requires Nix to be installed with access to the chosen Nixpkgs channel, and expects a valid derivation path as input. The primary output is a set of 'export' statements suitable for sourcing in a shell.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/print-env.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --print-env $(nix-instantiate '<nixpkgs>' -A firefox)\n…\nexport src; src='/nix/store/plpj7qrwcz94z2psh6fchsi7s8yihc7k-firefox-12.0.source.tar.bz2'\nexport stdenv; stdenv='/nix/store/7c8asx3yfrg5dg1gzhzyq2236zfgibnn-stdenv'\nexport system; system='x86_64-linux'\nexport _args; _args='-e /nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25c-default-builder.sh'\n```\n\n----------------------------------------\n\nTITLE: Querying Build-time Dependencies Closure with nix-store --query --requisites and --deriver - Console\nDESCRIPTION: This snippet shows how to print the build-time dependencies of svn using nix-store --query with --requisites on the deriver of svn. It chains nix-store queries to locate the initial deriver and then obtains its dependency closure. Dependencies: Nix tooling available in PATH. Takes an executable as input and lists all necessary derivation and store paths. Useful for generating complete build dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/query.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --query --requisites $(nix-store --query --deriver $(which svn))\\n/nix/store/02iizgn86m42q905rddvg4ja975bk2i4-grep-2.5.1.tar.bz2.drv\\n/nix/store/07a2bzxmzwz5hp58nf03pahrv2ygwgs3-gcc-wrapper.sh\\n/nix/store/0ma7c9wsbaxahwwl04gbw3fcd806ski4-glibc-2.3.4.drv\\n... lots of other paths ...\n```\n\n----------------------------------------\n\nTITLE: Switching to a Specified Generation Using nix-env --switch-generation - Console\nDESCRIPTION: This snippet shows how to switch the current user environment to a specific generation by number. Dependencies are as with previous nix-env commands. The '--switch-generation' option takes a generation number, updating the generation symlink and activating that user environment. Input is the desired generation, and the effect is an atomic change in the profile.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --switch-generation 43\n```\n\n----------------------------------------\n\nTITLE: Python Script with Nix Shebang for PrettyTable Dependency\nDESCRIPTION: Example Python script using nix as an interpreter to automatically obtain Python and the prettytable package as dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env nix\n#! nix shell github:tomberek/-#python3With.prettytable --command python\n\nimport prettytable\n\n# Print a simple table.\nt = prettytable.PrettyTable([\"N\", \"N^2\"])\nfor n in range(1, 10): t.add_row([n, n * n])\nprint t\n```\n\n----------------------------------------\n\nTITLE: Querying Nix Flake Output Attributes via Console\nDESCRIPTION: Shows the output of querying a Nix flake, detailing its available output attributes such as checks, packages, hydraJobs, and overlays grouped by architecture. Intended to demonstrate the structure and content returned by referencing a flake (e.g., for 'patchelf') in the Nix ecosystem. No external dependencies besides the Nix tool itself are needed; users supply a flake reference (such as a GitHub URL), and the resulting list reveals the available derivatives and packages—optionally, the output can be rendered in JSON form using the '--json' flag.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngithub:NixOS/patchelf/f34751b88bd07d7f44f5cd3200fb4122bf916c7e\n├───checks\n│   ├───aarch64-linux\n│   │   └───build: derivation 'patchelf-0.12.20201207.f34751b'\n│   ├───i686-linux\n│   │   └───build: derivation 'patchelf-0.12.20201207.f34751b'\n│   └───x86_64-linux\n│       └───build: derivation 'patchelf-0.12.20201207.f34751b'\n├───packages\n│   ├───aarch64-linux\n│   │   └───default: package 'patchelf-0.12.20201207.f34751b'\n│   ├───i686-linux\n│   │   └───default: package 'patchelf-0.12.20201207.f34751b'\n│   └───x86_64-linux\n│       └───default: package 'patchelf-0.12.20201207.f34751b'\n├───hydraJobs\n│   ├───build\n│   │   ├───aarch64-linux: derivation 'patchelf-0.12.20201207.f34751b'\n│   │   ├───i686-linux: derivation 'patchelf-0.12.20201207.f34751b'\n│   │   └───x86_64-linux: derivation 'patchelf-0.12.20201207.f34751b'\n│   ├───coverage: derivation 'patchelf-coverage-0.12.20201207.f34751b'\n│   ├───release: derivation 'patchelf-0.12.20201207.f34751b'\n│   └───tarball: derivation 'patchelf-tarball-0.12.20201207.f34751b'\n└───overlay: Nixpkgs overlay\n```\n\n----------------------------------------\n\nTITLE: Displaying Profile Version History in Nix\nDESCRIPTION: This example demonstrates how to use the 'nix profile history' command to view the changes between different versions of a default profile. The output shows package additions, removals, and upgrades with their respective version numbers.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-history.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile history\nVersion 508 (2020-04-10):\n  flake:nixpkgs#legacyPackages.x86_64-linux.awscli: ∅ -> 1.17.13\n\nVersion 509 (2020-05-16) <- 508:\n  flake:nixpkgs#legacyPackages.x86_64-linux.awscli: 1.17.13 -> 1.18.211\n```\n\n----------------------------------------\n\nTITLE: Hashing Strings with Built-in Function in Nix - Nix\nDESCRIPTION: Demonstrates the new built-in function 'builtins.hashString' introduced in this release, allowing users to compute the hash of a string directly within the Nix expression language. Prerequisites include Nix 1.4 or newer. The function accepts a string input and produces a hash output, facilitating secure and deterministic computations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.4.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\n`builtins.hashString`\n```\n\n----------------------------------------\n\nTITLE: Interacting with Nixpkgs and Derivations – Nix REPL – Console\nDESCRIPTION: This extended snippet illustrates advanced use of Nix REPL, including loading files and expressions, working with flakes, inspecting package attributes, evaluating derivations, reading store outputs, and viewing build logs. Commands span loading various namespaces, querying package variables, defining new derivations, building and inspecting outputs, and reading generated files. Prerequisites are an initialized Nixpkgs channel/environment and understanding of Nix expressions and derivations.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/repl.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix repl --file example.nix\\nLoading Installable ''...\\nAdded 3 variables.\\n\\n# nix repl --expr '{a={b=3;c=4;};}'\\nLoading Installable ''...\\nAdded 1 variables.\\n\\n# nix repl --expr '{a={b=3;c=4;};}' a\\nLoading Installable ''...\\nAdded 1 variables.\\n\\n# nix repl --extra-experimental-features 'flakes' nixpkgs\\nLoading Installable 'flake:nixpkgs#'...\\nAdded 5 variables.\\n\\nnix-repl> legacyPackages.x86_64-linux.emacs.name\\n\"emacs-27.1\"\\n\\nnix-repl> :q\\n\\n# nix repl --expr 'import <nixpkgs>{}'\\n\\nLoading Installable ''...\\nAdded 12439 variables.\\n\\nnix-repl> emacs.name\\n\"emacs-27.1\"\\n\\nnix-repl> emacs.drvPath\\n\"/nix/store/lp0sjrhgg03y2n0l10n70rg0k7hhyz0l-emacs-27.1.drv\"\\n\\nnix-repl> drv = runCommand \"hello\" { buildInputs = [ hello ]; } \"hello; hello > $out\"\\n\\nnix-repl> :b drv\\nthis derivation produced the following outputs:\\n  out -> /nix/store/0njwbgwmkwls0w5dv9mpc1pq5fj39q0l-hello\\n\\nnix-repl> builtins.readFile drv\\n\"Hello, world!\\n\"\\n\\nnix-repl> :log drv\\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Developing and Building Within a Nix Flake Environment - Nix CLI - Console\nDESCRIPTION: Shows an interactive development workflow: entering a Nix development shell, unpacking/building/configuring the package, running its result, and installing it. Each step ('unpackPhase', 'configurePhase', 'buildPhase', 'installPhase') is part of the Nix build system phases. Assumes a standard flake structure and derivation. The sequence demonstrates both build steps and execution of the resulting program, with output verification ('Hello, world!').\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix develop\n# unpackPhase\n# cd hello-*\n# configurePhase\n# buildPhase\n# ./hello\nHello, world!\n# installPhase\n# ../outputs/out/bin/hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Implicit vs Explicit Flake Input Declaration\nDESCRIPTION: Compares the implicit way of referencing nixpkgs (which uses registry resolution) with the explicit approach that specifies the full URL. The explicit approach is recommended for better stability and reproducibility.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.26.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  outputs = { self, nixpkgs }: { ... };\n}\n```\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-24.11\";\n  outputs = { self, nixpkgs }: { ... };\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping String Interpolation Syntax\nDESCRIPTION: Examples of escaping ${} syntax in regular and indented strings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-interpolation.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n\"echo \\${PATH}\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n''\n  echo ''${PATH}\n''\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with @-patterns and Ellipsis in Nix\nDESCRIPTION: Examples of new Nix language features: @-patterns for capturing whole arguments and ellipsis (...) for flexible attribute set matching in function definitions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.12.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nf = args @ {x, y, z}: ...;\n```\n\nLANGUAGE: nix\nCODE:\n```\n{stdenv, fetchurl, fuse, ...}: ...\n```\n\n----------------------------------------\n\nTITLE: Setting Keep Flag for Firefox Package\nDESCRIPTION: Example showing how to prevent Firefox from being upgraded by setting the keep flag to true.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/set-flag.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --set-flag keep true firefox\n```\n\n----------------------------------------\n\nTITLE: Dry Run with JSON Output for a Flake\nDESCRIPTION: Illustrates how to print the store paths of the flake sources of NixOps without actually fetching them, using the dry run option and JSON output format.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-archive.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix flake archive --json --dry-run nixops\n```\n\n----------------------------------------\n\nTITLE: Using passAsFile to Handle Large String Attributes in Nix Derivation\nDESCRIPTION: Demonstrates passing large strings via files instead of environment variables by using the passAsFile attribute. This is useful for bypassing environment size limitations on most operating systems.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\npassAsFile = [\"big\"];\nbig = \"a very long string\";\n```\n\n----------------------------------------\n\nTITLE: Listing File in Nix Archive with nix nar Command (console)\nDESCRIPTION: Demonstrates using the nix nar ls command to list metadata of a specified file inside a NAR archive. This requires the Nix package manager to be installed. The example lists the file \\\"/bin/hello\\\" in the \\\"./hello.nar\\\" archive, showing permissions, size, and filename. Input parameters are the NAR file path and target archive path. Standard output displays file information line by line.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nar-ls.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix nar ls --long ./hello.nar /bin/hello\n-r-xr-xr-x                38184 hello\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flake Directory with Default Template - Nix CLI - Console\nDESCRIPTION: Demonstrates how to create a new Nix flake in the directory \\\"hello\\\" using the default template. Requires Nix with flake support enabled and appropriate permissions to create the target directory. The main parameter is the target directory name; output is a new flake-structured directory.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-new.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake new hello\n```\n\n----------------------------------------\n\nTITLE: Upgrading and Rolling Back Packages with Nix CLI - Console\nDESCRIPTION: This snippet demonstrates how to upgrade a specific package using nix-env, followed by rolling back the upgrade if needed. It requires a functional Nix installation and references a package attribute in the channel (e.g., nixpkgs.some-package). The upgrade command installs the latest version referenced by the attribute and the rollback command restores the previous package state; both operations are atomic and safe due to Nix's storage model.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/introduction.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --upgrade --attr nixpkgs.some-package\n$ nix-env --rollback\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Outputs for a Derivation - Nix\nDESCRIPTION: Shows how to declare that a Nix derivation produces multiple named outputs (e.g., lib, headers, doc). This enables finer-grained dependency and output management, as each output will be mapped to its own store path and corresponding environment variable. The outputs list must be set in the derivation, and references to outputs can use dot notation (e.g., pkg.lib). Required for advanced derivation packaging.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.2.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\noutputs = [ \"lib\" \"headers\" \"doc\" ];\n```\n\n----------------------------------------\n\nTITLE: Displaying File Contents from Nix Binary Cache using nix store cat - Shell\nDESCRIPTION: This code snippet shows how to use the nix store cat command in a shell environment to display the contents of a file located in a remote Nix binary cache. It demonstrates fetching a binary file from a specific store path via HTTPS and pipes the result into hexdump and head to inspect the first line of the file in a human-readable format. Dependencies include a Nix installation (with nix CLI), access to the specified remote binary cache, and standard Unix utilities hexdump and head; input includes the full /nix/store path to the file, while output displays the initial bytes in hexadecimal format. Some limitations are that the user must have network access to the specified cache and the file path must exist in the cache.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-cat.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store cat --store https://cache.nixos.org/ \\\n    /nix/store/0i2jd68mp5g6h2sa5k9c85rb80sn8hi9-hello-2.10/bin/hello | hexdump -C | head -n1\n00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|\n```\n\n----------------------------------------\n\nTITLE: Comparing Profile Version Closures using nix profile (CLI, console)\nDESCRIPTION: This snippet demonstrates how to use the nix profile diff-closures command to compare two versions of the NixOS system profile. It displays which packages have changed, been upgraded, downgraded, added, or removed, along with their storage space differences. Input is the path to the profile, and output includes a version-by-version diff summary, useful for understanding system changes after upgrades; no external dependencies besides Nix are required.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-diff-closures.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile diff-closures --profile /nix/var/nix/profiles/system\nVersion 13 -> 14:\n  acpi-call: 2020-04-07-5.8.13 → 2020-04-07-5.8.14\n  aws-sdk-cpp: -6723.1 KiB\n  …\n\nVersion 14 -> 15:\n  acpi-call: 2020-04-07-5.8.14 → 2020-04-07-5.8.16\n  attica: -996.2 KiB\n  breeze-icons: -78713.5 KiB\n  brotli: 1.0.7 → 1.0.9, +44.2 KiB\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packages by Pattern Matching in Nix\nDESCRIPTION: Command to upgrade all packages that match a specific regex pattern in their name, demonstrated with vim-related packages.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-upgrade.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix profile upgrade --regex '.*vim.*'\n```\n\n----------------------------------------\n\nTITLE: Escaping Double Single-Quote (''') in Indented Strings - Nix\nDESCRIPTION: Demonstrates escaping a pair of single quotes in an indented string literal via a single quote prefix. Required for producing output with embedded `''`, which would otherwise prematurely terminate the string. Applicable in scenarios requiring literal output of that token.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\n''\n  '''\n''\n```\n\n----------------------------------------\n\nTITLE: Inspecting Constant String Context with builtins.storePath in Nix\nDESCRIPTION: This Nix snippet demonstrates how to retrieve the string context of a constant store path using builtins.getContext and builtins.storePath. It shows the expected attribute set structure returned, indicating the string is treated as a store path with a constant string context. No dependencies are required other than Nix itself, and the key parameter is the store path string provided to builtins.storePath. The output is an attribute set reflecting the constant path context.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-context.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n> builtins.getContext (builtins.storePath \"/nix/store/wkhdf9jinag5750mqlax6z2zbwhqb76n-hello-2.10\")\n\n```\n\nLANGUAGE: nix\nCODE:\n```\n> {\n>   \"/nix/store/wkhdf9jinag5750mqlax6z2zbwhqb76n-hello-2.10\" = {\n>     path = true;\n>   };\n> }\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Flake Input Using URL-like Syntax in Nix\nDESCRIPTION: This snippet demonstrates how to specify a flake input using the URL-like syntax in a Nix configuration file. It sets the nixpkgs input to the NixOS/nixpkgs GitHub repository.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\ninputs.nixpkgs.url = \"github:NixOS/nixpkgs\";\n```\n\n----------------------------------------\n\nTITLE: Querying Store Paths That Depend on a Specific Library with nix-store --query --referrers - Console\nDESCRIPTION: This snippet shows how to display all Nix store paths that depend on the same OpenSSL library as svn by combining --binding and --referrers with command substitution. The example illustrates advanced use of nested nix-store queries to track library dependencies across installed packages. Requires that the target attribute (here, 'openssl') exists for the derivation. Outputs a list of referring store paths.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/query.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --query --referrers $(nix-store --query --binding openssl $(nix-store --query --deriver $(which svn)))\\n/nix/store/23ny9l9wixx21632y2wi4p585qhva1q8-sylpheed-1.0.0\\n/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4\\n/nix/store/dpmvp969yhdqs7lm2r1a3gng7pyq6vy4-subversion-1.1.3\\n/nix/store/l51240xqsgg8a7yrbqdx1rfzyv6l26fx-lynx-2.8.5\n```\n\n----------------------------------------\n\nTITLE: Exporting Nix Store Path to NAR Archive (Console)\nDESCRIPTION: This example demonstrates how to generate a Nix Archive (NAR) file containing the contents of the GNU Hello package using the 'nix store dump-path' command. It requires Nix to be installed, and the 'nixpkgs#hello' flake or equivalent package reference to resolve. The command outputs the NAR data to standard output, which is then redirected into a file named 'hello.nar'. Input: none (pulls from flake reference); Output: 'hello.nar' file. Must be run in a shell with Nix configured.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-dump-path.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store dump-path nixpkgs#hello > hello.nar\n```\n\n----------------------------------------\n\nTITLE: Setting Build Output Symlink Name with nix-build -o - Shell\nDESCRIPTION: By adding -o symlink to nix-build, this command specifies a custom name for the result symlink instead of the default 'result'. The dependency is a working nix-build and appropriate buildable expression. It takes a symlink name as argument and outputs a symlink pointing to the build output.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnix-build -o symlink\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nix on Single-User Installation (All Platforms)\nDESCRIPTION: Command to upgrade Nix on any platform using single-user installation. This simple process installs the new Nix version and certificate authority certificates.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/upgrading.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install --file '<nixpkgs>' --attr nix cacert -I nixpkgs=channel:nixpkgs-unstable\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from a Specific Nixpkgs Branch using Nix\nDESCRIPTION: This example shows how to install a package (hello) from a specific branch (release-20.09) of the Nixpkgs repository using Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-install.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix profile install nixpkgs/release-20.09#hello\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed Nix Store Paths with a Public Key - Shell/Console\nDESCRIPTION: This command verifies Nix store paths using a trusted public key derived from the secret signing key. Dependency: Nix and the proper secret key file (./secret-key) available. nix key convert-secret-to-public extracts the corresponding public key, which is passed to nix store verify using command substitution. Outputs verification results for ./result, ensuring integrity and authenticity of the store paths.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/key-generate-secret.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix store verify --trusted-public-keys $(nix key convert-secret-to-public < ./secret-key) ./result\n```\n\n----------------------------------------\n\nTITLE: Defining manifest.json Schema for Nix Profiles - JSON\nDESCRIPTION: This snippet displays an example manifest.json file tracked by the Nix package manager for a user profile, listing installed packages and their provenance metadata. To use this file, Nix should be managing a user profile with packages installed via the new CLI (nix3-profile). Relevant dependencies are the package manager's flake capability and structure compatibility with the JSON example. The JSON includes core package details: version, package array (elements) containing status, attribute path, source URLs, associated Nix store paths, and resolved flake URIs. Inputs conform to the documented attribute schema, and outputs are maintained JSON provenance records. Placeholders (\"…\") represent further entries; only validated fields should appear.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/files/manifest.json.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"elements\": [\n    {\n      \"active\": true,\n      \"attrPath\": \"legacyPackages.x86_64-linux.zoom-us\",\n      \"originalUrl\": \"flake:nixpkgs\",\n      \"storePaths\": [\n        \"/nix/store/wbhg2ga8f3h87s9h5k0slxk0m81m4cxl-zoom-us-5.3.469451.0927\"\n      ],\n      \"uri\": \"github:NixOS/nixpkgs/13d0c311e3ae923a00f734b43fd1d35b47d8943a\"\n    },\n    …\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Nix Git Repository Using Console Command\nDESCRIPTION: This snippet demonstrates how to use the 'git clone' command in a Unix-like shell to obtain the latest source code of Nix into a directory named 'nix'. The only dependency is the Git command-line tool, which must be installed and configured for internet access. The command takes the remote repository URL as input and creates a local directory containing all source files; no additional parameters are required unless customizing the target directory or branch.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/obtaining-source.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/NixOS/nix\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Nix Flake Inputs\nDESCRIPTION: Shows how to update multiple specific inputs (nixpkgs and nixpkgs-unstable) simultaneously in the flake.lock file. Updates are shown for both inputs with their respective commit hashes and dates.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-update.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix flake update nixpkgs nixpkgs-unstable\nwarning: updating lock file '/home/myself/repos/testflake/flake.lock':\n• Updated input 'nixpkgs':\n    'github:nixos/nixpkgs/8f7492cce28977fbf8bd12c72af08b1f6c7c3e49' (2024-09-14)\n  → 'github:nixos/nixpkgs/086b448a5d54fd117f4dc2dee55c9f0ff461bdc1' (2024-09-16)\n• Updated input 'nixpkgs-unstable':\n    'github:nixos/nixpkgs/345c263f2f53a3710abe117f28a5cb86d0ba4059' (2024-09-13)\n  → 'github:nixos/nixpkgs/99dc8785f6a0adac95f5e2ab05cc2e1bf666d172' (2024-09-16)\n```\n\n----------------------------------------\n\nTITLE: Defining Reciprocal Flake Input References for Cyclic Graphs - Nix\nDESCRIPTION: This Nix expression exemplifies how to set up a flake that forms a circular dependency with another by pointing the input back using the 'follows' mechanism. It sets inputs on both sides, ensuring a closed dependency graph. The output attributes expose data from the mutually-recursive flakes and demonstrate retrieval of values from the linked flake. Replace input source placeholders with actual Git or path locations. Requires Nix flakes infrastructure.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_21\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs.a = ... location of flake A ...;\n  inputs.a.inputs.b.follows = \"\";\n  outputs = { self, a }: {\n    bar = 456 + a.xyzzy;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Signing a Package Closure with Nix - Shell/Console\nDESCRIPTION: These commands showcase building the Hello package from nixpkgs and then signing its closure using the generated secret key. Requires: Nix installed and configured, and a valid ./secret-key file created beforehand. nix build nixpkgs#hello creates the result; nix store sign signs the output recursively. The --key-file and --recursive parameters specify the signing key and ensure all referenced objects are included. Outputs a signed closure in the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/key-generate-secret.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix build nixpkgs#hello\n# nix store sign --key-file ./secret-key --recursive ./result\n```\n\n----------------------------------------\n\nTITLE: Searching Packages by Name/Description\nDESCRIPTION: Demonstrates searching for packages containing 'blender' in their name or description.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix search nixpkgs blender\n* legacyPackages.x86_64-linux.blender (2.91.0)\n    3D Creation/Animation/Publishing System\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Packages with Result Symlinks\nDESCRIPTION: Illustrates building multiple packages (GNU Hello and Cowsay) and creating separate result symlinks for each.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix build nixpkgs#hello nixpkgs#cowsay\n# ls -l result*\nlrwxrwxrwx 1 … result -> /nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10\nlrwxrwxrwx 1 … result-1 -> /nix/store/rkfrm0z6x6jmi7d3gsmma4j53h15mg33-cowsay-3.03+dfsg2\n```\n\n----------------------------------------\n\nTITLE: Indended Nix String Used for Multi-line Shell Script and Interpolation - Nix\nDESCRIPTION: Showcases embedding a multi-line shell script using an indented string inside a Nix derivation, with inline variable interpolation. This example constructs a post-installation script, showing the concise handling of indentation and interpolation for scripting in packaging scenarios. Assumes a stdenv.mkDerivation context, which is common in Nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nstdenv.mkDerivation {\n...\npostInstall =\n  ''\n    mkdir $out/bin $out/etc\n    cp foo $out/bin\n    echo \"Hello World\" > $out/etc/foo.conf\n    ${if enableBar then \"cp bar $out/bin\" else \"\"}\n  '';\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Copying a Store Closure from Remote SSH Machine Using Nix CLI - Console\nDESCRIPTION: Fetches a store closure from a remote machine over SSH into the local Nix store using the '--from' flag. This requires SSH connectivity and proper permissions, as well as the target path's existence on the remote machine. The example closure is the Blender package. Inputs are the remote URI and the desired store path; output is the transferred closure to the local store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --from ssh://server /nix/store/a6cnl93nk1wxnq84brbbwr6hxw9gp2w9-blender-2.79-rc2\n```\n\n----------------------------------------\n\nTITLE: Adding Files to the Nix Store via nix-store CLI - Console\nDESCRIPTION: This snippet demonstrates how to use the nix-store CLI tool with the --add operation to add a file named foo.c to the Nix store. It shows the terminal command used and the resulting Nix store path printed to standard output. The input is any valid file path, and the output is the corresponding Nix store path; symlinks are not dereferenced during this operation. There are no external dependencies, but nix-store must be installed and available in the environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/add.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --add ./foo.c\n/nix/store/m7lrha58ph6rcnv109yzx1nk1cj7k7zf-foo.c\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache and Signing Keys in Nix.conf - Nix Config\nDESCRIPTION: These Nix configuration snippets define remote binary cache URLs, trusted public keys, and secret signing keys for secure uploading and verification. The 'substituters' entry specifies the binary cache endpoints, while 'trusted-public-keys' and 'secret-key-files' control authentication. Required by any machine that will upload or fetch from the S3 binary cache.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/post-build-hook.md#_snippet_1\n\nLANGUAGE: nix-config\nCODE:\n```\nsubstituters = https://cache.nixos.org/ s3://example-nix-cache\ntrusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= example-nix-cache-1:1/cKDz3QCCOmwcztD2eV6Coggp6rqc9DGjWv7C0G+rM=\n```\n\nLANGUAGE: nix-config\nCODE:\n```\nsecret-key-files = /etc/nix/key.private\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Bundlers as Flake Output Attributes - Nix\nDESCRIPTION: This Nix code defines a set of bundler attributes as a flake output for use with 'nix bundle'. It includes the default identity bundler, a custom 'blender_2_79' bundler that refers to a specific package, and sets 'default' to identity. Dependencies: Nix flakes, an object called 'self' with a suitable 'packages' attribute. Inputs and outputs: Accepts a derivation, returns a derivation. This structure allows users to provide multiple bundling strategies for different contexts.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/bundle.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nbundlers.x86_64-linux = rec {\\n  identity = drv: drv;\\n\\n  blender_2_79 = drv: self.packages.x86_64-linux.blender_2_79;\\n\\n  default = identity;\\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Building Store Derivations with nix-instantiate and nix-store - Shell\nDESCRIPTION: Demonstrates how to instantiate a Nix expression file into a store derivation using nix-instantiate, followed by building the resulting derivation with nix-store. Dependencies include the Nix package manager and the existence of a Nix expression file (test.nix). The first command outputs the path to the generated .drv file, and the second command realizes it into an output store path. Directory contents of the final output are listed, showing how build artifacts are stored.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-instantiate.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate test.nix (instantiate)\\n/nix/store/cigxbmvy6dzix98dxxh9b6shg7ar5bvs-perl-BerkeleyDB-0.26.drv\\n\\n$ nix-store --realise $(nix-instantiate test.nix) (build)\\n...\\n/nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk-perl-BerkeleyDB-0.26 (output path)\\n\\n$ ls -l /nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk-perl-BerkeleyDB-0.26\\ndr-xr-xr-x    2 eelco    users        4096 1970-01-01 01:00 lib\\n...\n```\n\n----------------------------------------\n\nTITLE: Viewing Build Output - cat Result - Console\nDESCRIPTION: Uses the 'cat' command to display the result of the build output (file './result'), which holds the output produced by the remote Darwin builder. This demonstrates how to access the results of remotely-executed derivations and confirms the remote environment was used for the build.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncat ./result\n```\n\n----------------------------------------\n\nTITLE: Copying GNU Hello Package to Remote Machine\nDESCRIPTION: Example showing how to build GNU Hello locally and copy it with all dependencies to a remote machine using nix-copy-closure\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-copy-closure.md#_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ storePath=\"$(nix-build '<nixpkgs>' -I nixpkgs=channel:nixpkgs-unstable -A hello --no-out-link)\"\n$ nix-copy-closure --to alice@itchy.example.org \"$storePath\"\ncopying 5 paths...\ncopying path '/nix/store/nrwkk6ak3rgkrxbqhsscb01jpzmslf2r-xgcc-13.2.0-libgcc' to 'ssh://alice@itchy.example.org'...\ncopying path '/nix/store/gm61h1y42pqyl6178g90x8zm22n6pyy5-libunistring-1.1' to 'ssh://alice@itchy.example.org'...\ncopying path '/nix/store/ddfzjdykw67s20c35i7a6624by3iz5jv-libidn2-2.3.7' to 'ssh://alice@itchy.example.org'...\ncopying path '/nix/store/apab5i73dqa09wx0q27b6fbhd1r18ihl-glibc-2.39-31' to 'ssh://alice@itchy.example.org'...\ncopying path '/nix/store/g1n2vryg06amvcc1avb2mcq36faly0mh-hello-2.12.1' to 'ssh://alice@itchy.example.org'...\n```\n\n----------------------------------------\n\nTITLE: Enabling Git LFS in a Nix Flake\nDESCRIPTION: Code showing how a flake can declare that it requires Git Large File Storage (LFS) to be enabled.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.27.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs.self.lfs = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Channel Updates Using Rollback\nDESCRIPTION: This example shows how to check the current Nixpkgs version, rollback to a previous channel generation, and verify the change in version.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-channel.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-instantiate --eval '<nixpkgs>' --attr lib.version\n\"22.11pre296212.530a53dcbc9\"\n\n$ nix-channel --rollback\nswitching from generation 483 to 482\n\n$ nix-instantiate --eval '<nixpkgs>' --attr lib.version\n\"22.11pre281526.d0419badfad\"\n```\n\n----------------------------------------\n\nTITLE: Finding All Paths Depending on a Shared Library with nix-store --query --referrers-closure - Console\nDESCRIPTION: This snippet prints all Nix store paths that directly or indirectly depend on the Glibc library used by svn. It composes several commands (ldd, grep, awk) to extract the library path, then uses nix-store --query --referrers-closure to obtain the dependent closure. Suitable for low-level system analysis and reverse dependency tracking. Requires common Unix utilities and Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/query.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --query --referrers-closure $(ldd $(which svn) | grep /libc.so | awk '{print $3}')\\n/nix/store/034a6h4vpz9kds5r6kzb9lhh81mscw43-libgnomeprintui-2.8.2\\n/nix/store/15l3yi0d45prm7a82pcrknxdh6nzmxza-gawk-3.1.4\\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching Store Path from Substituters\nDESCRIPTION: Shows how to fetch a store path from configured substituters if it doesn't already exist locally.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n# nix build /nix/store/rkfrm0z6x6jmi7d3gsmma4j53h15mg33-cowsay-3.03+dfsg2\n```\n\n----------------------------------------\n\nTITLE: Searching Current Directory Flake\nDESCRIPTION: Shows how to search all packages in the flake located in the current directory.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix search . ^\n```\n\n----------------------------------------\n\nTITLE: Importing with SRI and Classic Hashes - Nix\nDESCRIPTION: These snippets demonstrate importing a Nix fetcher module and providing either an SRI-formatted hash string or a classic sha256 hash. The SRI format specifies both hashing algorithm and value in a single parameter (\"hash\"), whereas the classic version splits them. These are used for fixed-output derivations and simplify expressing source integrity requirements. Requires Nix 2.2 or later and network access for specified URLs. Parameters include 'url' (source URI) and either 'hash' (SRI) or 'sha256' (classic); outputs are the fetched and verified resource. SRI hashes enable algorithm flexibility and reduce parameter count.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.2.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nimport <nix/fetchurl.nix> {\n  url = https://nixos.org/releases/nix/nix-2.1.3/nix-2.1.3.tar.xz;\n  hash = \"sha256-XSLa0FjVyADWWhFfkZ2iKTjFDda6mMXjoYMXLRSYQKQ=\";\n};\n```\n\nLANGUAGE: nix\nCODE:\n```\nimport <nix/fetchurl.nix> {\n  url = https://nixos.org/releases/nix/nix-2.1.3/nix-2.1.3.tar.xz;\n  sha256 = \"5d22dad058d5c800d65a115f919da22938c50dd6ba98c5e3a183172d149840a4\";\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning Nix Source Repository with Git (Console)\nDESCRIPTION: Demonstrates how to obtain the latest Nix source code from the GitHub repository using git, then change into the source directory. Assumes git is installed locally, and these commands prepare the environment for subsequent build or development steps.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/NixOS/nix.git\\n$ cd nix\n```\n\n----------------------------------------\n\nTITLE: Installing Built Nix and Validating Version (Console)\nDESCRIPTION: Performs installation of Nix (placing outputs in the designated outputs directory) and checks the installed version via ./outputs/out/bin/nix --version. Ensures build artifacts are properly installed before testing execution.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ installPhase\\n[nix-shell]$ ./outputs/out/bin/nix --version\\nnix (Nix) 2.12\n```\n\n----------------------------------------\n\nTITLE: Creating Content-Addressed Nix Store Path - Shell Example\nDESCRIPTION: This console command uses \"nix store make-content-addressed\" to rewrite a given input-addressed store path (here, \"nixpkgs#hello\") to a new content-addressed path. The process computes a hash from the contents of the closure, enabling trustless copying in subsequent operations. The output shows both the original and newly rewritten paths. Requires a working Nix installation and access to the nixpkgs package set. Input is the installable reference (e.g., nixpkgs#hello), and output is the rewritten content-addressed store path.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/make-content-addressed.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store make-content-addressed nixpkgs#hello\n…\nrewrote '/nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10' to '/nix/store/5skmmcb9svys5lj3kbsrjg7vf2irid63-hello-2.10'\n```\n\n----------------------------------------\n\nTITLE: Inspecting Output String Contexts with builtins.outputOf in Nix\nDESCRIPTION: This snippet illustrates how to inspect the string context of a derivation output using the experimental builtins.outputOf. It retrieves the context via builtins.getContext, showing the association of specific outputs (such as \\\"out\\\") with the derivation. The key dependencies are builtins.getContext and builtins.outputOf, and this feature is experimental in unstable Nix versions. Inputs include the store derivation path and an output name. Output is an attribute set detailing the derivation and its outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-context.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n> builtins.getContext\n>   (builtins.outputOf\n>     (builtins.storePath \"/nix/store/fvchh9cvcr7kdla6n860hshchsba305w-hello-2.12.drv\")\n>     \"out\")\n\n```\n\nLANGUAGE: nix\nCODE:\n```\n> {\n>   \"/nix/store/fvchh9cvcr7kdla6n860hshchsba305w-hello-2.12.drv\" = {\n>     outputs = [ \"out\" ];\n>   };\n> }\n\n```\n\n----------------------------------------\n\nTITLE: Evaluating Derivations with Nix CLI (ShellSession)\nDESCRIPTION: This snippet demonstrates the updated output behavior of the 'nix eval' command following the 2.22.0 release. The command now prints a derivation as its .drv path when evaluating a package, rather than producing an attribute set. No additional dependencies are required apart from the presence of the 'nix' CLI, and parameters include standard 'nix eval' arguments. Input is a package name (e.g., nixpkgs#bash), and the output is a derivation path. This change prevents infinite recursion in cases involving self-referential attributes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.22.md#_snippet_0\n\nLANGUAGE: ShellSession\nCODE:\n```\n$ nix eval nixpkgs#bash\n«derivation /nix/store/m32cbgbd598f4w299g0hwyv7gbw6rqcg-bash-5.2p26.drv»\n```\n\n----------------------------------------\n\nTITLE: Building With Empty Attribute Path and Output Selection - Console\nDESCRIPTION: Illustrates using an empty attribute path with the '^dev,static' syntax in conjunction with a Nix expression import. This approach is used when the attribute path is omitted but outputs need to be specified. No unique dependencies beyond the previously required ones; key output is build artifacts for selected derivation outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ nix build --impure --expr 'let pkgs = import <nixpkgs> { }; in pkgs.glibc' '^dev,static'\n```\n\n----------------------------------------\n\nTITLE: Evaluating Nix Lambda and Machine-Readable Output with nix-instantiate and nix eval - Shell\nDESCRIPTION: Presents shell-based examples of evaluating Nix expressions that result in lambdas, and the contrast in output when using nix-instantiate versus nix eval. With --eval, nix-instantiate produces styling like <LAMBDA>, while nix eval provides a more descriptive representation. The XML output shows how machine-readability is improved with the --xml flag. These examples highlight output format options and the use of built-ins for downstream automation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-instantiate.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate --eval --expr 'a: a'\\n<LAMBDA>\\n$ nix eval --expr 'a: a'\\n«lambda @ «string»:1:1»\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate --eval --xml --expr '{ foo = <CODE>; }'\\n<?xml version='1.0' encoding='utf-8'?>\\n<expr>\\n  <attrs>\\n    <attr column=\"3\" line=\"1\" name=\"foo\">\\n      <unevaluated />\\n    </attr>\\n  </attrs>\\n</expr>\n```\n\n----------------------------------------\n\nTITLE: Using Build Phases in nix-shell - Console\nDESCRIPTION: This sequence of commands is typical inside a nix-shell session started for package development. It unpacks the source, changes the directory to the extracted files, configures the build, compiles it, and runs the resulting binary. Assumes a working nix-shell environment, valid Nix expression for the package, and the presence of unpackPhase, configurePhase, and buildPhase shell functions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/introduction.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ unpackPhase\n[nix-shell]$ cd pan-*\n[nix-shell]$ configurePhase\n[nix-shell]$ buildPhase\n[nix-shell]$ ./pan/gui/pan\n```\n\n----------------------------------------\n\nTITLE: Fetching a Flake to the Local Nix Store\nDESCRIPTION: Shows how to fetch the 'dwarffs' flake and its dependencies to the local Nix store without specifying a destination.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-archive.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake archive dwarffs\n```\n\n----------------------------------------\n\nTITLE: Making Derivation Deep String Contexts with builtins.addDrvOutputDependencies in Nix\nDESCRIPTION: Here, builtins.addDrvOutputDependencies is used to transform a constant string context element pointing to a derivation into a \\\"derivation deep\\\" context. builtins.getContext is then used to inspect the resulting context, which marks that all outputs of the derivation are included. Dependencies include both builtins.storePath and builtins.addDrvOutputDependencies. The core parameter is the store path to a .drv file. The output is an attribute set with the allOutputs property set to true.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-context.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n> builtins.getContext\n>   (builtins.addDrvOutputDependencies\n>     (builtins.storePath \"/nix/store/fvchh9cvcr7kdla6n860hshchsba305w-hello-2.12.drv\"))\n\n```\n\nLANGUAGE: nix\nCODE:\n```\n> {\n>   \"/nix/store/fvchh9cvcr7kdla6n860hshchsba305w-hello-2.12.drv\" = {\n>     allOutputs = true;\n>   };\n> }\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Highest Available Version Using nix-env - Shell\nDESCRIPTION: This shell command with nix-env installs the single highest available version of the given package (pkgname), instead of installing all available versions as before. This prevents version collisions. Dependencies include a functioning Nix installation and configured package channels. It takes a package name as an argument and installs one version only.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -i pkgname\n```\n\n----------------------------------------\n\nTITLE: Importing the Basic fetchurl Function in Nix (Nix expression language)\nDESCRIPTION: This snippet demonstrates how to import and use the new basic fetchurl function for bootstrapping in Nix expressions. It allows users to specify a remote file URL along with a sha256 hash for integrity checking. Dependencies include a working Nix installation and network access. Inputs are the file URL and its SHA256 hash; the output is a derivation that fetches the content and verifies it. This method is intended for bootstrapping, not as a replacement for the more featureful fetchurl in Nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.1.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\nimport <nix/fetchurl.nix> { url =\n                    url; sha256 =\n                    \"hash\"; }\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Connection to Remote Nix Store\nDESCRIPTION: Tests whether connecting to a remote Nix store via SSH works. This command verifies SSH connectivity to a machine named 'mac1'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-info.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store info --store ssh://mac1\n```\n\n----------------------------------------\n\nTITLE: Visualizing Build-time Dependency Tree with nix-store --query --tree - Console\nDESCRIPTION: This example prints build-time dependencies of svn as a nested ASCII tree using nix-store --query --tree, operating on the derivation. Input is the result of a previous nix-store --query --deriver call; output is a visually structured tree grouping dependencies hierarchically. Requires Nix and knowledge of tree representation. Useful for analysis and visualization of dependency structure.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/query.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --query --tree $(nix-store --query --deriver $(which svn))\\n/nix/store/7i5082kfb6yjbqdbiwdhhza0am2xvh6c-subversion-1.1.4.drv\\n+---/nix/store/d8afh10z72n8l1cr5w42366abiblgn54-builder.sh\\n+---/nix/store/fmzxmpjx2lh849ph0l36snfj9zdibw67-bash-3.0.drv\\n|   +---/nix/store/570hmhmx3v57605cqg9yfvvyh0nnb8k8-bash\\n|   +---/nix/store/p3srsbd8dx44v2pg6nbnszab5mcwx03v-builder.sh\\n...\n```\n\n----------------------------------------\n\nTITLE: Defining NAR Format Structure in EBNF\nDESCRIPTION: Formal EBNF grammar specification for the Nix Archive format. Defines the structure for regular files, symlinks, and directories with ordered entries. Includes special str() function for length-prefixed and padded strings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/nix-archive.md#_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nnar = str(\"nix-archive-1\"), nar-obj;\n\nnar-obj = str(\"(\"), nar-obj-inner, str(\")\");\n\nnar-obj-inner\n  = str(\"type\"), str(\"regular\") regular\n  | str(\"type\"), str(\"symlink\") symlink\n  | str(\"type\"), str(\"directory\") directory\n  ;\n\nregular = [ str(\"executable\"), str(\"\") ], str(\"contents\"), str(contents);\n\nsymlink = str(\"target\"), str(target);\n\n(* side condition: directory entries must be ordered by their names *)\ndirectory = { directory-entry };\n\ndirectory-entry = str(\"entry\"), str(\"(\"), str(\"name\"), str(name), str(\"node\"), nar-obj, str(\")\");\n```\n\n----------------------------------------\n\nTITLE: Copying Content-Addressed Nix Store Path Without Signatures - Shell Example\nDESCRIPTION: This snippet shows the use of \"nix copy\" to transfer a content-addressed store path to another store directory without requiring any trusted public keys or signatures. Typically used after converting a path to content-addressed form, this allows trustless copying across stores. Dependencies include a Nix installation and pre-existing content-addressed store paths. Takes the source path and destination store as input, with no trusted keys needed; successful completion copies the path to the destination store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/make-content-addressed.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --to /tmp/nix --trusted-public-keys '' /nix/store/5skmmcb9svys5lj3kbsrjg7vf2irid63-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Custom Terraform Package with nix-shell\nDESCRIPTION: A Bash script using nix-shell to customize Terraform with the OpenStack plugin. This demonstrates how to pass a simple Nix expression to customize a package.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/env nix-shell\n#! nix-shell -i bash --packages 'terraform.withPlugins (plugins: [ plugins.openstack ])'\n\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Binding an Alternate Store Directory with mount (Bash/Console)\nDESCRIPTION: This pair of console commands demonstrates preparing a Nix store directory with a bind mount, recommended for safely moving /nix to another filesystem on Linux. First, it creates the /nix directory, then mounts /mnt/otherdisk/nix onto /nix with the bind option. Dependencies: root permissions, mount (Linux); Inputs: existing secondary filesystem; Outputs: /nix referring to alternate disk. Caution: Symlinks within /nix/store are discouraged; use bind mounts as shown for compatibility and reproducibility.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/env-common.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir /nix\n$ mount -o bind /mnt/otherdisk/nix /nix\n```\n\n----------------------------------------\n\nTITLE: Specifying Installation Path for Nix\nDESCRIPTION: Command-line option to specify the installation prefix path when configuring Nix during the build process. The default installation directory is '/usr/local'.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/building-source.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-Dprefix=prefix\n```\n\n----------------------------------------\n\nTITLE: Building a Flake Output Attribute with Multiple Derivation Outputs - Console\nDESCRIPTION: Uses 'nix build' with a flake output attribute, specifying '^dev,static' to select multiple derivation outputs. Assumes the existence of the referenced package and the necessary outputs ('dev', 'static') in the flake. The second step lists expected build artifacts. No external dependencies except access to a valid flake (e.g., 'nixpkgs').\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix build 'nixpkgs#glibc^dev,static'\n# ls ./result-dev/include/ ./result-static/lib/\n…\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bitwise OR Combination of Nix Build Failure Codes\nDESCRIPTION: This example shows how multiple failure codes are combined using bitwise OR operations. The binary representation shows which specific error types (timeout, hash mismatch, build failure, not deterministic) are indicated in the combined code 0b1100100.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/status-build-failure.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0b1100100\n     ^^^^\n     |||`- timeout\n     ||`-- output hash mismatch\n     |`--- build failure\n     `---- not deterministic\n```\n\n----------------------------------------\n\nTITLE: Exporting NIX_PATH for Path Lookup (Bash)\nDESCRIPTION: This bash snippet demonstrates how to set the NIX_PATH environment variable to a colon-separated list of search path entries before running Nix commands. Exporting NIX_PATH makes it available to child processes, ensuring that tools like nix-shell, nix-build, and nix-instantiate can find configuration roots or package definitions. Key parameter: The value of NIX_PATH (e.g., /home/eelco/Dev:nixos-config=/etc/nixos), where each entry can be a directory or assignment. Input: entry list; Output: adjusted environment for subsequent Nix operations. Limitation: Incorrect values or empty string may cause lookup failures.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/env-common.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export NIX_PATH=/home/eelco/Dev:nixos-config=/etc/nixos\n```\n\n----------------------------------------\n\nTITLE: Computing File Hashes and Comparing Results - Shell\nDESCRIPTION: These snippets demonstrate how to compute cryptographic hashes of a file or directory using the nix-hash command, and verify their consistency with other tools like nix-prefetch-url and md5sum. Required tools include nix-hash, nix-prefetch-url, and standard Unix shell utilities. Input parameters are file paths and various hash options; outputs are hash strings in different encodings. Limitations include error messages for invalid input types (e.g., hashing directories with --flat).\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-hash.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-prefetch-url file://<(echo test)\n1lkgqb6fclns49861dwk9rzb6xnfkxbpws74mxnx01z9qyv1pjpj\n$ nix-hash --type sha256 --flat --base32 <(echo test)\n1lkgqb6fclns49861dwk9rzb6xnfkxbpws74mxnx01z9qyv1pjpj\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir test\n$ echo \"hello\" > test/world\n\n$ nix-hash test/ (MD5 hash; default)\n8179d3caeff1869b5ba1744e5a245c04\n\n$ nix-store --dump test/ | md5sum (for comparison)\n8179d3caeff1869b5ba1744e5a245c04  -\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Settings in Nix Configuration Files - conf\nDESCRIPTION: Demonstrates how to specify boolean configuration options in a nix.conf file, as well as how to include inline comments for documentation. No dependencies are required beyond Nix itself. Each line defines a setting in 'name = value' format, and comments start with '#'. The sample sets two boolean options (keep-outputs and keep-derivations) to true.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/conf-file-prefix.md#_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nkeep-outputs = true       # Nice for developers\\nkeep-derivations = true   # Idem\n```\n\n----------------------------------------\n\nTITLE: Defining and Evaluating String Values in Nix\nDESCRIPTION: Demonstrates how to declare a simple string literal using double quotes in the Nix language. No dependencies are required. Evaluates directly to the string value enclosed and is used wherever a string is necessary.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n\"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Fetching and Parsing HTML with Perl using nix-shell\nDESCRIPTION: A simple Perl script that fetches the nixos.org webpage and prints all href attributes from anchor tags. This demonstrates basic web scraping functionality with Perl.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_11\n\nLANGUAGE: perl\nCODE:\n```\n# Fetch nixos.org and print all hrefs.\nmy $p = HTML::TokeParser::Simple->new(url => 'https://nixos.org/');\n\nwhile (my $token = $p->get_tag(\"a\")) {\n    my $href = $token->get_attr(\"href\");\n    print \"$href\\n\" if $href;\n}\n```\n\n----------------------------------------\n\nTITLE: Building from a Remote Nixpkgs Tarball with nix-build - Shell Command - Console\nDESCRIPTION: This command illustrates building the GNU Hello package by fetching a tarball from a remote GitHub URL as the Nix expression input. The snippet assumes network connectivity and sufficient permissions for accessing the remote tarball and running builds. The necessary parameters are the remote URL and the package attribute to build. The output is a symlink in the current directory pointing to the build result.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-build.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build https://github.com/NixOS/nixpkgs/archive/master.tar.gz --attr hello\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expressions in Nix\nDESCRIPTION: This example demonstrates the use of conditional expressions in Nix using the 'if-then-else' construct. It evaluates a condition and returns different values based on the result.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/constructs.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nif 1 < 2 then \"yes\" else \"no\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SourceHut Flake Reference URLs in Nix (Markdown)\nDESCRIPTION: Shows the pattern for referencing SourceHut-hosted repositories as flakes in Nix, along with notes about attributes, host specification, and branch/revision selection. The code block describes the required and optional format parts: \"sourcehut:<owner>/<repo>(/<rev-or-ref>)?(\\?<params>)?\". This snippet is descriptive and meant for use as a guide in documentation.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nsourcehut:<owner>/<repo>(/<rev-or-ref>)?(\\?<params>)?\n```\n\n----------------------------------------\n\nTITLE: Upgrading All Packages from Unlocked Flakes in Nix\nDESCRIPTION: Command to upgrade all packages that were installed using unlocked flake references in the Nix profile.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-upgrade.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile upgrade --all\n```\n\n----------------------------------------\n\nTITLE: Deleting Old Profile Generations Using nix-env - Console\nDESCRIPTION: This snippet demonstrates how to remove all non-current (old) generations of the current user profile using nix-env. This command is necessary for preparing the system for effective garbage collection by unlinking packages from older profile generations. Requires nix to be installed and in the PATH; operates on the active user environment. Input is the string 'old' and output is a profile with only the current generation retained. Run in a shell.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/garbage-collection.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --delete-generations old\n```\n\n----------------------------------------\n\nTITLE: Upgrading Specific Package by Name in Nix\nDESCRIPTION: Command to upgrade a single package by its name in the Nix profile.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-upgrade.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix profile upgrade hello\n```\n\n----------------------------------------\n\nTITLE: String Concatenation and Interpolation in Nix Expressions - Nix\nDESCRIPTION: This demonstrates how Nix expressions can use both traditional concatenation and new string interpolation features. Previously, combining strings and derivations required explicit '+' syntax; now, interpolation in the form \"...${expr}...\" is available, allowing for arbitrary expressions inside interpolation brackets. Dependencies: Nix expression language parser. Inputs are variables like 'freetype'. Output is a string with substituted values. Older approaches using '+' are deprecated.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n\"--with-freetype2-library=\" + freetype + \"/lib\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n\"--with-freetype2-library=${freetype}/lib\"\n```\n\n----------------------------------------\n\nTITLE: Searching Within Specific Attribute Path\nDESCRIPTION: Shows how to search for packages under a specific attribute path (gnome3) containing 'vala'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix search nixpkgs#gnome3 vala\n* legacyPackages.x86_64-linux.gnome3.vala (0.48.9)\n    Compiler for GObject type system\n```\n\n----------------------------------------\n\nTITLE: Defining 'output' Type for Fingerprints - ebnf\nDESCRIPTION: This EBNF snippet specifies the 'output' fingerprint variant, representing derivation outputs or compatible content-addressed objects. It consists of the fixed string 'output:' followed by an identifier naming the output (typically 'out'). It is foundational in grammar or parser generation for Nix store paths, clarifying the distinction from 'text' and 'source' types.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_4\n\nLANGUAGE: ebnf\nCODE:\n```\n| \"output:\" id\n```\n\n----------------------------------------\n\nTITLE: Testing System Build Using nixos-rebuild with Remote Nixpkgs (Bash)\nDESCRIPTION: This command line shows how to use nixos-rebuild with a remote channel tarball to test a system configuration using a specific NixOS channel revision. The -I flag specifies nixpkgs to point to the desired remote tarball; the test subcommand applies the configuration in a temporary way. Inputs: channel tarball URL; Output: system state applied from specified revision.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.9.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ nixos-rebuild test -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-unstable.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Nested Block Comment Error Example in Nix\nDESCRIPTION: Shows that block comments in Nix cannot be nested. The example produces a syntax error because the inner comment terminator is treated as terminating the outer comment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_32\n\nLANGUAGE: nix\nCODE:\n```\n/* /* nope */ */ 1\n```\n\n----------------------------------------\n\nTITLE: Parsing and Evaluating Basic Nix Expressions with nix-instantiate --parse/--eval - Shell\nDESCRIPTION: Demonstrates the use of nix-instantiate to parse and/or evaluate simple Nix arithmetic expressions, illustrating the difference between syntax parsing (--parse) and full evaluation (--eval). These commands require only the Nix toolchain. Inputs are literal arithmetic expressions; outputs vary between source representation and fully evaluated results.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-instantiate.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate --parse --expr '1 + 2'\\n1 + 2\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate --eval --expr '1 + 2'\\n3\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Nix Store Closures (Shell Session)\nDESCRIPTION: Demonstrates the process to build a package closure, export it to a block device for transport (e.g., via USB), and import it on an airgapped machine using shell commands. Dependencies include a working Nix installation with nix-build and nix-store CLI tools, as well as sudo access and the dd utility. Key parameters include a package attribute path and the block device path (/dev/usb). Expected inputs are valid Nixpkgs expressions and device paths; outputs include the serialized store objects and an executable package on the target machine. Ensure permissions for device access and sufficient storage.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/export.md#_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n[alice@itchy]$ storePath=$(nix-build '<nixpkgs>' -I nixpkgs=channel:nixpkgs-unstable -A hello --no-out-link)\n[alice@itchy]$ nix-store --export $(nix-store --query --requisites $storePath) | sudo dd of=/dev/usb\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n[bob@scratchy]$ hello=$(sudo dd if=/dev/usb | nix-store --import | tail -1)\n[bob@scratchy]$ $hello/bin/hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hooks for Automated Formatting (Console)\nDESCRIPTION: Runs pre-commit-hooks-install to set up git hooks that automatically execute formatters before each commit. This hooks into git's lifecycle to help enforce code style on every commit.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\npre-commit-hooks-install\n```\n\n----------------------------------------\n\nTITLE: Invoking Subversion Directly from Nix Store - Console\nDESCRIPTION: This snippet demonstrates how to directly invoke a package binary from its unique path in the Nix store. No additional dependencies are required beyond a working Nix installation; users must know the full path to the binary. The input is the shell command with an absolute path, and the output is the launched application or command result. This approach is generally inconvenient, as specified in the documentation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ /nix/store/dpmvp969yhdq...-subversion-1.1.3/bin/svn\n```\n\n----------------------------------------\n\nTITLE: Checking Determinism of a Build with nix-build (Console)\nDESCRIPTION: This snippet shows how to test whether a previously built Nix derivation is deterministic by invoking nix-build with the --check and -K options. Dependencies: Requires Nix and a valid nixpkgs channel or path. Key parameters: --attr specifies the attribute to build, --check triggers the determinism check, and -K keeps non-matching outputs. Input: Valid attribute name; Output: Error message if the build is non-deterministic. Only applies where deterministic checking is meaningful, and outputs must already exist for the check.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/realise.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build '<nixpkgs>' --attr hello --check -K\n```\n\n----------------------------------------\n\nTITLE: Evaluating a Nix Expression with nix-instantiate (Shell Session)\nDESCRIPTION: This shellSession command demonstrates how to evaluate a Nix expression file ('IFD.nix') using the 'nix-instantiate' command with '--eval' and '--read-write-mode' flags. Dependencies include a working Nix installation and the target file present. The primary input is the expression file, and the output will be the result of evaluation or realization as dictated by the expression. Limitations: This command should be run in a shell with sufficient permissions and Nix set up correctly.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/import-from-derivation.md#_snippet_1\n\nLANGUAGE: shellSession\nCODE:\n```\nnix-instantiate IFD.nix --eval --read-write-mode\n```\n\n----------------------------------------\n\nTITLE: Inheriting Attributes - Nix Language - Nix\nDESCRIPTION: These examples show abbreviating repeated assignment and importing attributes into a set or scope using the 'inherit' keyword. It covers both inheriting from the lexical scope and from another attribute set, clarifying equivalent expanded forms and typical use in package definitions and composition.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nlet x = 123; in\n{\n  inherit x;\n  y = 456;\n}\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet x = 123; in\n{\n  x = x;\n  y = 456;\n}\n```\n\nLANGUAGE: nix\nCODE:\n```\ngraphviz = (import ../tools/graphics/graphviz) {\n  inherit fetchurl stdenv libpng libjpeg expat x11 yacc;\n  inherit (xorg) libXaw;\n};\n\nxorg = {\n  libX11 = ...;\n  libXaw = ...;\n  ...\n}\n\nlibpng = ...;\nlibjpg = ...;\n...\n```\n\nLANGUAGE: nix\nCODE:\n```\n...\ninherit x y z;\ninherit (src-set) a b c;\n...\n```\n\nLANGUAGE: nix\nCODE:\n```\n...\nx = x; y = y; z = z;\na = src-set.a; b = src-set.b; c = src-set.c;\n...\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  x = { a = 1; b = 2; };\n  inherit (builtins) attrNames;\nin\n{\n  names = attrNames x;\n}\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  x = { a = 1; b = 2; };\nin\n{\n  names = builtins.attrNames x;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Default Package from Current Directory Flake\nDESCRIPTION: Demonstrates how to build the default package from a flake in the current directory using 'nix build'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix build\n```\n\n----------------------------------------\n\nTITLE: Using Nix Flakes with Shebang Interpreter (Shell)\nDESCRIPTION: Demonstrates how to use Nix flakes in a shebang to specify precise package versions (nixpkgs#bash, nixpkgs#hello, nixpkgs#cowsay) for shell scripts. Invokes the 'nix shell' command with flake references, allowing script reproducibility and portability by specifying fully qualified package sources. Requires Nix with flakes enabled and the specified flake references available. Inputs are script arguments; outputs are the result of running commands within the specified environment.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env nix\\n#! nix shell nixpkgs#bash nixpkgs#hello nixpkgs#cowsay --command bash\\n\\nhello | cowsay\n```\n\n----------------------------------------\n\nTITLE: Building Nix within a nix-shell Environment (Console)\nDESCRIPTION: Outlined are the Meson build steps for Nix inside a Nix-shell. The prefix is set for installation output, and each phase (configure, build) is called directly. Requires Meson and Nix environment variables to be correctly set. The custom prefix ensures artifacts are placed in a local outputs directory.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ mesonFlags+=\" --prefix=$(pwd)/outputs/out\"\\n[nix-shell]$ dontAddPrefix=1 configurePhase\\n[nix-shell]$ buildPhase\n```\n\n----------------------------------------\n\nTITLE: Prefetching a File with nix-prefetch-url - Console Usage - shell\nDESCRIPTION: This code snippet demonstrates fetching a file from a remote FTP URL using the nix-prefetch-url command. It downloads the specified file and prints its cryptographic hash in base-32 format to standard output. No additional dependencies are required beyond having Nix and nix-prefetch-url installed. The input is a URL to a file and the output is the computed hash; if the file already exists in the store with the correct hash, no download occurs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-prefetch-url.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-prefetch-url ftp://ftp.gnu.org/pub/gnu/hello/hello-2.10.tar.gz\\n0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n```\n\n----------------------------------------\n\nTITLE: Defining Identifier Syntax using Regex - Nix Language - Plain Text\nDESCRIPTION: This snippet defines the allowed structure for identifiers using a regular expression. It specifies that an identifier must start with a letter or underscore, followed by any combination of alphanumeric characters, underscores, apostrophes, or hyphens. There are no external dependencies. The expression serves as formal grammar for tokenizing or validating identifiers; inputs are ASCII character sequences and outputs are validation results. Limitations include acceptance only of ASCII characters and not Unicode.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/identifiers.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n[A-Za-z_][A-Za-z0-9_'-]*\n```\n\n----------------------------------------\n\nTITLE: Example Nix Derivation Output Path Structure\nDESCRIPTION: Demonstrates the naming pattern for different types of derivation outputs, showing how the derivation name combines with output names to form final store paths.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/outputs/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- The derivation's path will be: `/nix/store/<hash>-hello.drv`.\n\n- The store path of `out` will be: `/nix/store/<hash>-hello`.\n\n- The store path of `dev` will be: `/nix/store/<hash>-hello-dev`.\n```\n\n----------------------------------------\n\nTITLE: Testing Nix Build in nix-shell (Console)\nDESCRIPTION: Runs the checkPhase command while inside the Nix-shell, triggering the test suite relevant to the current build. Assumes the testing infrastructure is available and dependencies have been built.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ checkPhase\n```\n\n----------------------------------------\n\nTITLE: Package-Specific Development Shell\nDESCRIPTION: Start a development shell for a specific package (GNU Hello example).\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix develop nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Specifying Indirect Flake References in Nix (Markdown)\nDESCRIPTION: Demonstrates the URL syntax for indirect flake references in Nix using Markdown code block formatting. This snippet helps users understand how to write registry-based indirect references like '[flake:]<flake-id>(/<rev-or-ref>(/rev)?)?'. No special dependencies are required as this is a documentation string pattern, not actual code. Inputs include named flakes and optionally revision or reference segments; output is a syntactically valid reference. Limitations include that it is not an executable code snippet, but part of documentation.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[flake:]<flake-id>(/<rev-or-ref>(/rev)?)?\n```\n\n----------------------------------------\n\nTITLE: Complex String Interpolation with Conditional Logic\nDESCRIPTION: Shows nested string interpolation with conditional expressions for configuring Qt build flags.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-interpolation.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nconfigureFlags = \"\n  -system-zlib -system-libpng -system-libjpeg\n  ${if openglSupport then \"-dlopen-opengl\n    -L${mesa}/lib -I${mesa}/include\n    -L${libXmu}/lib -I${libXmu}/include\" else \"\"}\n  ${if threadSupport then \"-thread\" else \"-no-thread\"}\n\";\n```\n\n----------------------------------------\n\nTITLE: Instantiating Using Attribute Selection with nix-instantiate --attr - Shell\nDESCRIPTION: Shows the equivalent alternative to the previous example by selecting a named attribute from a Nix top-level expression using the --attr option. Assumes <nixpkgs> is present in the NIX_PATH and that the hello attribute exists. The output is the derivation path of the specified package.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-instantiate.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate '<nixpkgs>' --attr hello\n```\n\n----------------------------------------\n\nTITLE: Making the Nix Store Read-Only with Bind Mount - Bash\nDESCRIPTION: Demonstrates using Linux mount commands to convert the /nix/store directory into a read-only bind mount, improving safety against accidental modification. The commands must be run as root or with sufficient privileges, and are intended for Linux systems only. Nix internally manages temporary write access when necessary using a private mount namespace.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.2.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mount --bind /nix/store /nix/store\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ mount -o remount,ro,bind /nix/store\n```\n\n----------------------------------------\n\nTITLE: Working with Null Values in Nix\nDESCRIPTION: Demonstrates the null value used to indicate 'no value' or absence of data in Nix expressions. Frequently used in optionals and defaults.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Specifying File System Paths in Nix\nDESCRIPTION: Presents syntaxes for absolute, relative, and home directory-based paths, which the Nix language uses to refer to files and resources. Paths are unquoted. Dependencies are contextual (i.e., evaluation depends on filesystem and execution environment).\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n/etc\n```\n\nLANGUAGE: nix\nCODE:\n```\n./foo.png\n```\n\nLANGUAGE: nix\nCODE:\n```\n~/.config\n```\n\n----------------------------------------\n\nTITLE: Updating All Nix Flake Inputs\nDESCRIPTION: Example showing how to update all inputs in a flake.lock file, which recreates the lock file from scratch. The output shows updates to both 'nix' and 'nixpkgs' inputs with their respective GitHub commits and dates.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-update.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake update\nwarning: updating lock file '/home/myself/repos/testflake/flake.lock':\n• Updated input 'nix':\n    'github:NixOS/nix/9fab14adbc3810d5cc1f88672fde1eee4358405c' (2023-06-28)\n  → 'github:NixOS/nix/8927cba62f5afb33b01016d5c4f7f8b7d0adde3c' (2023-07-11)\n• Updated input 'nixpkgs':\n    'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)\n  → 'github:NixOS/nixpkgs/a3a3dda3bacf61e8a39258a0ed9c924eeca8e293' (2023-07-05)\n```\n\n----------------------------------------\n\nTITLE: Indented String Literal Example - Nix\nDESCRIPTION: Shows how to write a multi-line indented string in Nix using double single-quotes, which strips common indentation based on content. The resulting string preserves line breaks and client indentation rules. Useful for embedding scripts or configurations with consistent formatting inside Nix expressions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n''\nThis is the first line.\nThis is the second line.\n  This is the third line.\n''\n```\n\n----------------------------------------\n\nTITLE: Using NIX_PATH for package selection with nix command\nDESCRIPTION: Alternative approach to using the nixpkgs channel in the NIX_PATH environment variable with the nix command.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnix build -f '<nixpkgs>' hello\n```\n\n----------------------------------------\n\nTITLE: Declaring Lists in Nix\nDESCRIPTION: Illustrates creation of lists containing values or expressions. Lists may include primitives, sets, or function results, and are a fundamental data structure in Nix expressions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n[ \"foo\" \"bar\" \"baz\" ]\n\n[ 1 2 3 ]\n\n[ (f 1) { a = 1; b = 2; } [ \"c\" ] ]\n```\n\n----------------------------------------\n\nTITLE: Building All Outputs of a Package\nDESCRIPTION: Demonstrates building all outputs of the openssl package and printing the resulting store paths.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix build \"nixpkgs#openssl^*\" --print-out-paths\n/nix/store/gvad6v0cmq1qccmc4wphsazqbj0xzjsl-openssl-3.0.13-bin\n/nix/store/a07jqdrc8afnk8r6f3lnhh4gvab7chk4-openssl-3.0.13-debug\n/nix/store/yg75achq89wgqn2fi3gglgsd77kjpi03-openssl-3.0.13-dev\n/nix/store/bvdcihi8c88fw31cg6gzzmpnwglpn1jv-openssl-3.0.13-doc\n/nix/store/gjqcvq47cmxazxga0cirspm3jywkmvfv-openssl-3.0.13-man\n/nix/store/7nmrrad8skxr47f9hfl3xc0pfqmwq51b-openssl-3.0.13\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Shell using nix-shell (Shell)\nDESCRIPTION: This command launches a shell with all dependencies prepared for building Nix. It assumes a working Nix installation. The environment will be set so that build dependencies are on PATH, and this forms the basis for further build steps. No extra parameters are needed for the default environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell\n```\n\n----------------------------------------\n\nTITLE: Building a Nix Expression with nix-build - Shell Command - Console\nDESCRIPTION: This snippet shows the execution of nix-build to build the Firefox package from the Nixpkgs repository by attribute, and demonstrates inspection of results both at the symlink and content level. It requires the Nix package manager installed, a local or channel-accessible nixpkgs, and network access if nixpkgs is not cached. The primary parameters include the attribute (--attr) specifying the package to build and the path to the Nix expression. The expected output is a new store derivation and result symlink in the directory, with limitations related to store availability and garbage collection if the symlink is moved or deleted.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-build.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build '<nixpkgs>' --attr firefox\nstore derivation is /nix/store/qybprl8sz2lc...-firefox-1.5.0.7.drv\n/nix/store/d18hyl92g30l...-firefox-1.5.0.7\n\n$ ls -l result\nlrwxrwxrwx  ...  result -> /nix/store/d18hyl92g30l...-firefox-1.5.0.7\n\n$ ls ./result/bin/\nfirefox  firefox-config\n```\n\n----------------------------------------\n\nTITLE: Installing by Attribute Path - nix-env Console Command - Shell\nDESCRIPTION: Shows how to install packages using attribute paths with the nix-env --install --attr command. Requires the package attribute (e.g., gcc40mips or xorg.xorgserver) to be specified and available in the active Nix expression. Installs matching packages and outputs confirmation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_5\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install --attr gcc40mips\ninstalling `gcc-4.0.2'\n$ nix-env --install --attr xorg.xorgserver\ninstalling `xorg-server-1.2.0'\n\n```\n\n----------------------------------------\n\nTITLE: Building Specific Output of a Package\nDESCRIPTION: Shows how to build a specific output (dev) of the glibc package using 'nix build'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix build nixpkgs#glibc.dev\n# ls -ld ./result-dev\nlrwxrwxrwx 1 … ./result-dev -> /nix/store/dkm3gwl0xrx0wrw6zi5x3px3lpgjhlw4-glibc-2.32-dev\n```\n\n----------------------------------------\n\nTITLE: Python Script with Nix File for Dependencies\nDESCRIPTION: Example Python script using a separate Nix file to define its dependencies through the --file flag.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env nix\n#! nix shell --impure --file deps.nix -i python\n```\n\n----------------------------------------\n\nTITLE: Exiting nix-shell and Demonstrating Program Unavailability\nDESCRIPTION: This snippet shows how to exit the nix-shell and demonstrates that the temporarily installed programs are no longer available in the regular environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/quick-start.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell:~]$ exit\n$ lolcat\nlolcat: command not found\n```\n\n----------------------------------------\n\nTITLE: Nix List Concatenation Operator Usage - Nix - Nix Language\nDESCRIPTION: This snippet demonstrates the new '++' list concatenation operator in the Nix expression language, allowing two lists to be merged. It is introduced as of Nix 0.9 and works for generic lists. The inputs are two lists, in this case one containing [1 2 3] and another [4 5 6], and the expected output is the single list [1 2 3 4 5 6].\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.9.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n[1 2 3] ++ [4 5\n    6]\n```\n\n----------------------------------------\n\nTITLE: Building with Ccache in Flake-Enabled Nix (Console)\nDESCRIPTION: Builds Nix with the ccacheStdenv compilation environment enabled by running nix build with attribute syntax. Accelerates build times by caching compiled objects.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ nix build .#nix-ccacheStdenv\n```\n\n----------------------------------------\n\nTITLE: Spawning Shells with Specified Packages using nix-shell -p - Shell\nDESCRIPTION: Illustrates how to use nix-shell with the -p flag to start a shell containing the listed packages. The command creates an environment where 'sqlite', 'xorg.libX11', and 'hello' from Nixpkgs are available in PATH. Requires nix-shell and an accessible Nixpkgs channel with the specified packages.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.7.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell -p sqlite xorg.libX11 hello\n```\n\n----------------------------------------\n\nTITLE: Nix Expression for Python Dependencies\nDESCRIPTION: A Nix expression that declares Python and PrettyTable as dependencies for a script. This file would be referenced by a Python script to provide its runtime environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_15\n\nLANGUAGE: nix\nCODE:\n```\nwith import <nixpkgs> {};\n\nrunCommand \"dummy\" { buildInputs = [ python3 python3Packages.prettytable ]; } \"\"\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Pipe Operators in Nix REPL - Nix\nDESCRIPTION: Demonstrates chaining function application using Nix's experimental pipe operators in the interactive REPL environment. The first example pipes the value 1 through add 2 and then mul 3, resulting in 9; the second reverses the chaining using <| syntax, resulting in 7. No external dependencies aside from enabling the pipe-operators feature in configuration. Inputs are integers, outputs are calculated integers according to chained operations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/operators.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nnix-repl> 1 |> builtins.add 2 |> builtins.mul 3\n9\n\nnix-repl> builtins.add 1 <| builtins.mul 2 <| 3\n7\n```\n\n----------------------------------------\n\nTITLE: Specifying Flake Input Using Attribute Set in Nix\nDESCRIPTION: This example shows how to specify a flake input using an attribute set in a Nix configuration file. It's equivalent to the URL-like syntax, providing more detailed control over the input specification.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\ninputs.nixpkgs = {\n  type = \"github\";\n  owner = \"NixOS\";\n  repo = \"nixpkgs\";\n};\n```\n\n----------------------------------------\n\nTITLE: With-Expression Shadowing Example in Nix\nDESCRIPTION: Demonstrates that variables from outer with-expressions are shadowed by inner with-expressions. In this example, the inner binding of 'a' takes precedence.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_29\n\nLANGUAGE: nix\nCODE:\n```\nwith { a = \"outer\"; };\nwith { a = \"inner\"; };\na\n```\n\n----------------------------------------\n\nTITLE: Invoking Built-in Functions in Nix\nDESCRIPTION: Shows usage of Nix built-in functions for importing expressions and mapping functions over lists. The import built-in loads and evaluates a Nix file, while map applies a lambda to every list element. Requires the builtins set for built-in functions. Input types must match respective built-in signatures.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_14\n\nLANGUAGE: nix\nCODE:\n```\nimport ./foo.nix\n```\n\nLANGUAGE: nix\nCODE:\n```\nmap (x: x + x) [ 1 2 3 ]\n```\n\n----------------------------------------\n\nTITLE: Pinning Nixpkgs to Specific Revision\nDESCRIPTION: Pins the 'nixpkgs' flake identifier to a specific commit hash of the Nixpkgs repository. This ensures reproducibility by using exactly the same package versions.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-add.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix registry add nixpkgs github:NixOS/nixpkgs/925b70cd964ceaedee26fde9b19cc4c4f081196a\n```\n\n----------------------------------------\n\nTITLE: Example Output of Nix Build Environment in JSON - JSON\nDESCRIPTION: Provides a sample structure of the JSON output returned by the 'nix print-dev-env' command when using the '--json' flag. The JSON includes 'bashFunctions' and 'variables' with their associated types and values, showing how build hooks and environment variables are exposed. This helps users anticipate the output structure for scripting and automation. Output will vary depending on the package; the values here are illustrative.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/print-dev-env.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bashFunctions\": {\n    \"buildPhase\": \" \\n    runHook preBuild;\\n...\",\n    ...\n  },\n  \"variables\": {\n    \"src\": {\n      \"type\": \"exported\",\n      \"value\": \"/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g-hello-2.10.tar.gz\"\n    },\n    \"postUnpackHooks\": {\n      \"type\": \"array\",\n      \"value\": [\"_updateSourceDateEpochFromSourceRoot\"]\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Software in nix-shell\nDESCRIPTION: This example demonstrates how to use the temporarily installed cowsay and lolcat commands within the nix-shell environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/quick-start.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell:~]$ cowsay Hello, Nix! | lolcat\n```\n\n----------------------------------------\n\nTITLE: Explaining hashDrv for Derivation Output Hashing - Markdown\nDESCRIPTION: This Markdown snippet presents the function name 'hashDrv' as the core method for determining the hash part of an output path of a Nix derivation, referenced as Figure 5.10 in supporting documentation. It doesn't include the implementation itself, but is contextually important as it underpins the section on input addressing and derivation equivalence. There are no external dependencies except for knowledge of Nix derivation concepts, and the snippet mainly serves as documentation context for referencing how hashing mechanisms are integrated into Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/outputs/input-address.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`hashDrv`\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Evaluation and Realization in Nix (Plaintext)\nDESCRIPTION: This plaintext snippet is a step-by-step diagram that details the sequence of actions and communications between the Nix CLI, evaluator, and store when evaluating a Nix expression with Import From Derivation. It lists commands and responses occurring during evaluation, blocking, realisation, and result retrieval. Intended to illustrate system internals for readers/documenters. Inputs and Outputs: Conceptual only; not code for execution.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/import-from-derivation.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n.-------.     .-------------.                        .---------.\n|Nix CLI|     |Nix evaluator|                        |Nix store|\n'-------'     '-------------'                        '---------'\n    |                |                                    |\n    |evaluate IFD.nix|                                    |\n    |--------------->|                                    |\n    |                |                                    |\n    |  evaluate \"${readFile drv} world\"                 |\n    |                |                                    |\n    |    evaluate `readFile drv`                          |\n    |                |                                    |\n    |   evaluate `drv` as string                          |\n    |                |                                    |\n    |                |instantiate /nix/store/...-hello.drv|\n    |                |----------------------------------->|\n    |                :                                    |\n    |                :  realise /nix/store/...-hello.drv  |\n    |                :----------------------------------->|\n    |                :                                    |\n    |                                                     |--------.\n    |                :                                    |        |\n    |      (evaluation blocked)                           |  echo hello > $out\n    |                :                                    |        |\n    |                                                     |<-------'\n    |                :        /nix/store/...-hello        |\n    |                |<-----------------------------------|\n    |                |                                    |\n    |  resume `readFile /nix/store/...-hello`             |\n    |                |                                    |\n    |                |   readFile /nix/store/...-hello    |\n    |                |----------------------------------->|\n    |                |                                    |\n    |                |               hello                |\n    |                |<-----------------------------------|\n    |                |                                    |\n    |      resume \"${\"hello\"} world\"                    |\n    |                |                                    |\n    |        resume \"hello world\"                       |\n    |                |                                    |\n    | \"hello world\"  |                                    |\n    |<---------------|                                    |\n.-------.     .-------------.                        .---------.\n|Nix CLI|     |Nix evaluator|                        |Nix store|\n'-------'     '-------------'                        '---------'\n```\n\n----------------------------------------\n\nTITLE: Pinning nixpkgs to Latest Git Revision in Console\nDESCRIPTION: This snippet demonstrates how to pin the nixpkgs flake to its most recent Git revision using the nix registry pin command. It also shows the resulting entry in the user registry and the output of nix flake metadata.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-pin.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix registry pin nixpkgs\n```\n\nLANGUAGE: console\nCODE:\n```\nnix registry list | grep '^user '\nuser   flake:nixpkgs github:NixOS/nixpkgs/925b70cd964ceaedee26fde9b19cc4c4f081196a\n```\n\nLANGUAGE: console\nCODE:\n```\n# nix flake metadata nixpkgs\nResolved URL:  github:NixOS/nixpkgs/925b70cd964ceaedee26fde9b19cc4c4f081196a\nLocked URL:    github:NixOS/nixpkgs/925b70cd964ceaedee26fde9b19cc4c4f081196a\n…\n```\n\n----------------------------------------\n\nTITLE: Using Lookup Path Syntax with Nixpkgs Channel - Nix\nDESCRIPTION: This snippet demonstrates the lookup path syntax by referencing the <nixpkgs> channel in Nix. It shows how angle-bracket notation is used to resolve a top-level identifier to its corresponding path via entries in builtins.nixPath. Required dependencies include an environment with Nix installed and an available nixpkgs channel. The result is expected to be the absolute path to the nixpkgs channel; input is an identifier, and output is a resolved path string. This form does not support additional path segments beyond the top-level identifier.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/constructs/lookup-path.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n<nixpkgs>\n```\n\n----------------------------------------\n\nTITLE: Building and Checking a Derivation with nix-build - Shell\nDESCRIPTION: Demonstrates how to use nix-build to build a package from the Nixpkgs collection and subsequently verify its build determinism with --check. The first command performs a normal build; the second rebuilds the same derivation and compares outputs. On mismatch, an error reports the hash mismatch. Requires a working Nix installation and access to the specified derivation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.7.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build '<nixpkgs>' -A patchelf\n…\n$ nix-build '<nixpkgs>' -A patchelf --check\n…\nerror: derivation `/nix/store/1ipvxs…-patchelf-0.6' may not be deterministic:\n  hash mismatch in output `/nix/store/4pc1dm…-patchelf-0.6.drv'\n```\n\n----------------------------------------\n\nTITLE: Running Temporary Software with nix-shell\nDESCRIPTION: This command creates a temporary shell environment with cowsay and lolcat packages installed. It allows users to run these programs without affecting the normal system environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/quick-start.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell --packages cowsay lolcat\n```\n\n----------------------------------------\n\nTITLE: Using Git LFS with Nix Flake Prefetch Command\nDESCRIPTION: Example of enabling Large File Storage (LFS) support when fetching a Git repository using the nix flake prefetch command.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.27.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnix flake prefetch 'git+ssh://git@github.com/Apress/repo-with-large-file-storage.git?lfs=1'\n```\n\n----------------------------------------\n\nTITLE: Removing Packages by Regular Expression in Nix Profile\nDESCRIPTION: This snippet illustrates how to remove packages from the Nix profile using a regular expression. It will remove all packages that match the pattern '.*vim.*'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-remove.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix profile remove --regex '.*vim.*'\n```\n\n----------------------------------------\n\nTITLE: Specifying Remote Build Machines for Nix Builds - Nix CLI - Shell\nDESCRIPTION: This command demonstrates how to set a remote builder for Nix builds using the --option builders flag. The argument is a builder specification in the form 'ssh://hostname system-type'. The command enables remote building without needing the deprecated NIX_BUILD_HOOK variable. It requires SSH access to the remote machine.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--option builders 'ssh://my-mac x86_64-darwin'\n```\n\n----------------------------------------\n\nTITLE: Declaring Functions (Lambdas) in Nix\nDESCRIPTION: Shows function definitions using various parameter styles, including single-argument, curried, sets with required/optional attributes, variadic sets, and argument rebinding using @. Functions can be curried or assigned to variables for later use. Inputs and outputs depend on function logic; commonly used for dynamic value computation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_13\n\nLANGUAGE: nix\nCODE:\n```\nx: x + 1\n```\n\nLANGUAGE: nix\nCODE:\n```\nx: y: x + y\n```\n\nLANGUAGE: nix\nCODE:\n```\n(x: x + 1) 100\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet inc = x: x + 1; in inc (inc (inc 100))\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y }: x + y\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y ? \"bar\" }: x + y\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y, ... }: x + y\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y } @ args: x + y\n\nargs @ { x, y }: x + y\n```\n\n----------------------------------------\n\nTITLE: Copying All Store Paths From a Local Cache Using Nix CLI - Console\nDESCRIPTION: Copies all Nix store paths from a local binary cache at /tmp/cache back into the local Nix store with the '--all' flag. Assumes a pre-existing cache structure at the given path, and requires Nix installed locally. The '--from' flag accepts a URI specifying the source, defaulting to the Nix store if omitted. No specific paths are required as inputs; outputs are the transferred closures.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --all --from file:///tmp/cache\n```\n\n----------------------------------------\n\nTITLE: Using Non-Flake Repositories as Inputs in Nix Flakes\nDESCRIPTION: Example showing how to reference repositories that don't contain a flake.nix file by setting the flake attribute to false, allowing use of arbitrary repositories as source inputs.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_15\n\nLANGUAGE: nix\nCODE:\n```\ninputs.grcov = {\n  type = \"github\";\n  owner = \"mozilla\";\n  repo = \"grcov\";\n  flake = false;\n};\n\noutputs = { self, nixpkgs, grcov }: {\n  packages.x86_64-linux.grcov = stdenv.mkDerivation {\n    src = grcov;\n    ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Network Disable Flag\nDESCRIPTION: New convenience flag to disable network-related features and timeouts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.3.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--no-net\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nix Build Plan with Data Flow Diagram\nDESCRIPTION: An ASCII data flow diagram illustrating a Nix build plan. It shows how build inputs, tasks, and results are connected, with special emphasis on build inputs that serve as instructions for build tasks. The diagram demonstrates how build tasks can be chained together to produce final build results.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/architecture/architecture.md#_snippet_1\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n+--------------------------------------------------------------------+\\n| build plan                                                         |\\n|                                                                    |\\n| .-------------.                                                    |\\n| | build input |---------.                                          |\\n| '-------------'         |                                          |\\n|                    instructions                                    |\\n|                         |                                          |\\n|                         v                                          |\\n| .-------------.    .----------.                                    |\\n| | build input |-->( build task )-------.                           |\\n| '-------------'    '----------'        |                           |\\n|                                  instructions                      |\\n|                                        |                           |\\n|                                        v                           |\\n| .-------------.                  .----------.     .--------------. |\\n| | build input |---------.       ( build task )--->| build result | |\\n| '-------------'         |        '----------'     '--------------' |\\n|                    instructions        ^                           |\\n|                         |              |                           |\\n|                         v              |                           |\\n| .-------------.    .----------.        |                           |\\n| | build input |-->( build task )-------'                           |\\n| '-------------'    '----------'                                    |\\n|                         ^                                          |\\n|                         |                                          |\\n|                         |                                          |\\n| .-------------.         |                                          |\\n| | build input |---------'                                          |\\n| '-------------'                                                    |\\n|                                                                    |\\n+--------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing a diff-hook Script for Nix Build Comparison - Bash\nDESCRIPTION: This Bash script is intended as a diff-hook for Nix builds. It captures diff output for two store paths and displays the comparison results to stderr, useful for highlighting non-deterministic build artifacts as part of the Nix build process. The script relies on the diff tool and must be executable by the user or group running the build. Key parameters: $1 and $2 are the build result paths, $3 is the derivation; outputs are sent to stderr. The script assumes diff is available at /run/current-system/sw/bin/diff and expects three arguments. It should be placed and referenced as an executable in the Nix configuration.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/diff-hook.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/sh\nexec >&2\necho \"For derivation $3:\"\n/run/current-system/sw/bin/diff -r \"$1\" \"$2\"\n\n```\n\n----------------------------------------\n\nTITLE: Building a Package from Profile Using Locked Flake URL - Console\nDESCRIPTION: This console example demonstrates how to rebuild a specific package, such as 'blender-bin', directly from its locked flake URL and flake attribute using the 'nix build' command. This requires that the user has access to the specified flake (repository reference) and a functional Nix build environment. The expected output is the package build result placed in the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-list.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix build github:edolstra/nix-warez/91f2ffee657bf834e4475865ae336e2379282d34?dir=blender#packages.x86_64-linux.default\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Values in Nix\nDESCRIPTION: Shows the Nix syntax for boolean values, true and false. Used in conditional logic and comparisons. Evaluates directly without external configuration.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\ntrue, false\n```\n\n----------------------------------------\n\nTITLE: Manually Creating and Initializing a Flake Directory - Nix CLI - Console\nDESCRIPTION: Shows the equivalent step-by-step manual initialization of a Nix flake directory by making a directory, navigating into it, and running \\\"nix flake init\\\". Requires Nix with flakes enabled and shell access. Parameters include the destination directory name; the process scaffolds a flake structure manually.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-new.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# mkdir dest-dir\n# cd dest-dir\n# nix flake init\n```\n\n----------------------------------------\n\nTITLE: Creating a List in Nix\nDESCRIPTION: This snippet shows how to define a list in Nix. Lists are enclosed in square brackets and can contain elements of different types.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/constructs.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n[ 1 2 3 \"four\" true ]\n```\n\n----------------------------------------\n\nTITLE: Installing from an Inline Nix Expression - nix-env Console Command - Shell\nDESCRIPTION: Demonstrates use of nix-env with --expr for inline Nix expressions supplied via command line. The expression is a function of the default Nix expression and can select attributes programmatically. Useful for dynamic selection or parameterization of packages. The command requires a Nix file referenced by --file and a valid Nix lambda expression following --expr.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_12\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --file ./foo.nix --install --expr \\\n    'f: (f {system = \"i686-linux\";}).subversionWithJava'\n```\n\n----------------------------------------\n\nTITLE: Exploring Nix Profile Contents in Console\nDESCRIPTION: Displays the directory structure and symlinks within a specific Nix profile, showing how installed packages are linked from the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/files/profiles.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ll -R ~eelco/.local/state/nix/profiles/profile-7-link/\n/home/eelco/.local/state/nix/profiles/profile-7-link/:\ntotal 20\ndr-xr-xr-x 2 root root 4096 Jan  1  1970 bin\n-r--r--r-- 2 root root 1402 Jan  1  1970 manifest.nix\ndr-xr-xr-x 4 root root 4096 Jan  1  1970 share\n\n/home/eelco/.local/state/nix/profiles/profile-7-link/bin:\ntotal 20\nlrwxrwxrwx 5 root root 79 Jan  1  1970 chromium -> /nix/store/ijm5k0zqisvkdwjkc77mb9qzb35xfi4m-chromium-86.0.4240.111/bin/chromium\nlrwxrwxrwx 7 root root 87 Jan  1  1970 spotify -> /nix/store/w9182874m1bl56smps3m5zjj36jhp3rn-spotify-1.1.26.501.gbe11e53b-15/bin/spotify\nlrwxrwxrwx 3 root root 79 Jan  1  1970 zoom-us -> /nix/store/wbhg2ga8f3h87s9h5k0slxk0m81m4cxl-zoom-us-5.3.469451.0927/bin/zoom-us\n\n/home/eelco/.local/state/nix/profiles/profile-7-link/share/applications:\ntotal 12\nlrwxrwxrwx 4 root root 120 Jan  1  1970 chromium-browser.desktop -> /nix/store/4cf803y4vzfm3gyk3vzhzb2327v0kl8a-chromium-unwrapped-86.0.4240.111/share/applications/chromium-browser.desktop\nlrwxrwxrwx 7 root root 110 Jan  1  1970 spotify.desktop -> /nix/store/w9182874m1bl56smps3m5zjj36jhp3rn-spotify-1.1.26.501.gbe11e53b-15/share/applications/spotify.desktop\nlrwxrwxrwx 3 root root 107 Jan  1  1970 us.zoom.Zoom.desktop -> /nix/store/wbhg2ga8f3h87s9h5k0slxk0m81m4cxl-zoom-us-5.3.469451.0927/share/applications/us.zoom.Zoom.desktop\n\n…\n```\n\n----------------------------------------\n\nTITLE: Querying meta.outputsToInstall Attribute for a Package - Console\nDESCRIPTION: Shows how to query the 'meta.outputsToInstall' attribute for a Nix package using 'nix eval', which helps determine default outputs provided by commands like 'nix shell'. Requires a flake reference (e.g., 'nixpkgs#libxml2'); the output is a list of output names that will be installed by default.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n# nix eval 'nixpkgs#libxml2.meta.outputsToInstall'\n[ \"bin\" \"man\" ]\n```\n\n----------------------------------------\n\nTITLE: Perl Script with Nix Shebang for HTML Parser Dependencies\nDESCRIPTION: Example Perl script using nix as an interpreter to automatically obtain Perl and HTML parser packages as dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_8\n\nLANGUAGE: perl\nCODE:\n```\n#! /usr/bin/env nix\n#! nix shell github:tomberek/-#perlWith.HTMLTokeParserSimple.LWP --command perl -x\n\nuse HTML::TokeParser::Simple;\n\n# Fetch nixos.org and print all hrefs.\nmy $p = HTML::TokeParser::Simple->new(url => 'http://nixos.org/');\n\nwhile (my $token = $p->get_tag(\"a\")) {\n    my $href = $token->get_attr(\"href\");\n    print \"$href\\n\" if $href;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Nix Expressions with the Nix CLI - Console\nDESCRIPTION: This snippet demonstrates the use of `nix edit` to open the Nix expression for the GNU Hello package directly from the command line. The command depends on the Nix package manager and requires the package to be present in the channels or flakes. The editor used is determined by the `EDITOR` environment variable, defaulting to `cat`, and certain editors accept the line number parameter. The primary input is the package attribute (e.g., `nixpkgs#hello`), with no output except the editor session displaying the derivation source.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/edit.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix edit nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Setting Builder to Local File - Nix Language\nDESCRIPTION: Points the 'builder' attribute to a local file ('./builder.sh'), which Nix copies to the Nix store before invoking. Ensures custom scripts are available and immutable during the build step. Requires that './builder.sh' exists relative to the evaluation working directory.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  # ...\n  builder = ./builder.sh;\n  # ...\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Nix Profile Symlinks in Console\nDESCRIPTION: Shows the structure of Nix profile symlinks in a user's home directory, demonstrating how profiles are versioned and linked to the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/files/profiles.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l ~alice/.local/state/nix/profiles/profile*\nlrwxrwxrwx 1 alice users 14 Nov 25 14:35 /home/alice/.local/state/nix/profiles/profile -> profile-7-link\nlrwxrwxrwx 1 alice users 51 Oct 28 16:18 /home/alice/.local/state/nix/profiles/profile-5-link -> /nix/store/q69xad13ghpf7ir87h0b2gd28lafjj1j-profile\nlrwxrwxrwx 1 alice users 51 Oct 29 13:20 /home/alice/.local/state/nix/profiles/profile-6-link -> /nix/store/6bvhpysd7vwz7k3b0pndn7ifi5xr32dg-profile\nlrwxrwxrwx 1 alice users 51 Nov 25 14:35 /home/alice/.local/state/nix/profiles/profile-7-link -> /nix/store/mp0x6xnsg0b8qhswy6riqvimai4gm677-profile\n```\n\n----------------------------------------\n\nTITLE: Block Comment Example in Nix\nDESCRIPTION: Demonstrates block comments in Nix, which start with /* and run until the next occurrence of */. The example shows a multi-line block comment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_31\n\nLANGUAGE: nix\nCODE:\n```\n/*\nBlock comments\ncan span multiple lines.\n*/ \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Build for a Specific Architecture (Flakes, Console)\nDESCRIPTION: Shows how to build for a specific platform attribute using nix build and flake attribute syntax (e.g., .#packages.aarch64-linux.default). This approach is used with flakes and experimental features.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ nix build .#packages.aarch64-linux.default\n```\n\n----------------------------------------\n\nTITLE: Appending List Values in Nix Configuration Files - conf\nDESCRIPTION: Illustrates how to define and extend list-valued configuration settings in a nix.conf file by first setting a value and then appending to it with the extra- prefix. No additional dependencies are needed. The example sets 'substituters' to 'a b', then uses 'extra-substituters' to add 'c d', resulting in the final value 'a b c d'. Note that unknown option names are ignored with a warning.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/conf-file-prefix.md#_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nsubstituters = a b\\nextra-substituters = c d\n```\n\n----------------------------------------\n\nTITLE: Enabling UID Range for User Namespace Builds - Nix - nix\nDESCRIPTION: This snippet demonstrates how to enable a build to use a user namespace with an extended UID range by setting the 'requiredSystemFeatures' attribute in a derivation. Requires Nix 2.12 or later, and the 'auto-allocate-uids' system setting must be enabled. Key parameter: 'requiredSystemFeatures', a list which must include the string 'uid-range'. This enables containerized builds, such as those using 'systemd-nspawn', to run as root and access 65,536 available UIDs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.12.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nrequiredSystemFeatures = [ \"uid-range\" ];\n```\n\n----------------------------------------\n\nTITLE: Configuring nixfmt in flake.nix for Nix Formatting\nDESCRIPTION: This example demonstrates how to set up nixfmt as the formatter for x86_64-linux in a flake.nix file. It uses the nixfmt-rfc-style package from nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/fmt.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n# flake.nix\n{\n  outputs = { nixpkgs, self }: {\n    formatter.x86_64-linux = nixpkgs.legacyPackages.x86_64-linux.nixfmt-rfc-style;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lock File Structure for Nix Flakes - JSON\nDESCRIPTION: This snippet provides an example of a flake.lock JSON file, showcasing the graph structure used by Nix to lock flake dependencies to specific commits, channels, and metadata. The file includes nodes for each dependency, the attributes that specify locked and original state and various metadata (owner, repo, rev, narHash, etc.). The lock file is used to ensure exact, reproducible builds by mapping input names in flake.nix to locked sources, and can represent complex dependency graphs including cycles. Dependencies are required to match the format as shown and the lock file must be placed alongside flake.nix.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 7,\n  \"root\": \"n1\",\n  \"nodes\": {\n    \"n1\": {\n      \"inputs\": {\n        \"nixpkgs\": \"n2\",\n        \"import-cargo\": \"n3\",\n        \"grcov\": \"n4\"\n      }\n    },\n    \"n2\": {\n      \"inputs\": {},\n      \"locked\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"7f8d4b088e2df7fdb6b513bc2d6941f1d422a013\",\n        \"type\": \"github\",\n        \"lastModified\": 1580555482,\n        \"narHash\": \"sha256-OnpEWzNxF/AU4KlqBXM2s5PWvfI5/BS6xQrPvkF5tO8=\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"n3\": {\n      \"inputs\": {},\n      \"locked\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"import-cargo\",\n        \"rev\": \"8abf7b3a8cbe1c8a885391f826357a74d382a422\",\n        \"type\": \"github\",\n        \"lastModified\": 1567183309,\n        \"narHash\": \"sha256-wIXWOpX9rRjK5NDsL6WzuuBJl2R0kUCnlpZUrASykSc=\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"import-cargo\",\n        \"type\": \"github\"\n      }\n    },\n    \"n4\": {\n      \"inputs\": {},\n      \"locked\": {\n        \"owner\": \"mozilla\",\n        \"repo\": \"grcov\",\n        \"rev\": \"989a84bb29e95e392589c4e73c29189fd69a1d4e\",\n        \"type\": \"github\",\n        \"lastModified\": 1580729070,\n        \"narHash\": \"sha256-235uMxYlHxJ5y92EXZWAYEsEb6mm+b069GAd+BOIOxI=\"\n      },\n      \"original\": {\n        \"owner\": \"mozilla\",\n        \"repo\": \"grcov\",\n        \"type\": \"github\"\n      },\n      \"flake\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Assertions Example in Subversion Package in Nix\nDESCRIPTION: Demonstrates real-world usage of assertions in a Subversion package definition. It checks various requirements between features and dependencies, such as needing Berkeley DB for local repositories and ensuring library compatibility.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_23\n\nLANGUAGE: nix\nCODE:\n```\n{ localServer ? false\n, httpServer ? false\n, sslSupport ? false\n, pythonBindings ? false\n, javaSwigBindings ? false\n, javahlBindings ? false\n, stdenv, fetchurl\n, openssl ? null, httpd ? null, db4 ? null, expat, swig ? null, j2sdk ? null\n}:\n\nassert localServer -> db4 != null; ①\nassert httpServer -> httpd != null && httpd.expat == expat; ②\nassert sslSupport -> openssl != null && (httpServer -> httpd.openssl == openssl); ③\nassert pythonBindings -> swig != null && swig.pythonSupport;\nassert javaSwigBindings -> swig != null && swig.javaSupport;\nassert javahlBindings -> j2sdk != null;\n\nstdenv.mkDerivation {\n  name = \"subversion-1.1.1\";\n  ...\n  openssl = if sslSupport then openssl else null; ④\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Flake Metadata in JSON Format with nix flake metadata --json - Shell/Console\nDESCRIPTION: This shell snippet runs 'nix flake metadata' with the '--json' option for the 'dwarffs' flake, streams the result through 'jq .' for formatted output. The command outputs detailed flake metadata as a JSON object, containing descriptive fields, timestamps, owner/repository info, paths, and revision hashes. Dependencies include 'jq' for output formatting and Nix with flakes enabled; the flake must be accessible by reference. Input is a valid flake URL or name, and output is a fully structured JSON object for further automated processing or inspection.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-metadata.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake metadata dwarffs --json | jq .\n{\n  \"description\": \"A filesystem that fetches DWARF debug info from the Internet on demand\",\n  \"lastModified\": 1597153508,\n  \"locked\": {\n    \"lastModified\": 1597153508,\n    \"narHash\": \"sha256-VHg3MYVgQ12LeRSU2PSoDeKlSPD8PYYEFxxwkVVDRd0=\",\n    \"owner\": \"edolstra\",\n    \"repo\": \"dwarffs\",\n    \"rev\": \"d181d714fd36eb06f4992a1997cd5601e26db8f5\",\n    \"type\": \"github\"\n  },\n  \"locks\": { ... },\n  \"original\": {\n    \"id\": \"dwarffs\",\n    \"type\": \"indirect\"\n  },\n  \"originalUrl\": \"flake:dwarffs\",\n  \"path\": \"/nix/store/hang3792qwdmm2n0d9nsrs5n6bsws6kv-source\",\n  \"resolved\": {\n    \"owner\": \"edolstra\",\n    \"repo\": \"dwarffs\",\n    \"type\": \"github\"\n  },\n  \"resolvedUrl\": \"github:edolstra/dwarffs\",\n  \"revision\": \"d181d714fd36eb06f4992a1997cd5601e26db8f5\",\n  \"url\": \"github:edolstra/dwarffs/d181d714fd36eb06f4992a1997cd5601e26db8f5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Full Store Path from Hash Part using Nix CLI - Shell/Console\nDESCRIPTION: This snippet demonstrates how to use the nix command-line interface to retrieve the full Nix store path corresponding to a provided hash part. It requires the nix CLI to be installed and optionally a remote binary cache endpoint (specified using --store). The key input parameter is the hash part (32 alphanumeric characters), and the command outputs the absolute Nix store path. This is especially useful for administrators or automated scripts to map hashes to store path names for cache management. The command must be run in an environment with network access to the cache if specified.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-from-hash-part.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store path-from-hash-part --store https://cache.nixos.org/ 0i2jd68mp5g6h2sa5k9c85rb80sn8hi9\n/nix/store/0i2jd68mp5g6h2sa5k9c85rb80sn8hi9-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Output of a Package using Nix\nDESCRIPTION: This example demonstrates how to install a specific output (man) of a package (bash) from Nixpkgs using Nix. This is useful for installing only certain components of a package.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-install.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix profile install nixpkgs#bash^man\n```\n\n----------------------------------------\n\nTITLE: Starting the nix-serve HTTP server\nDESCRIPTION: Command to start the nix-serve server on a specified port (8080 in this example) to handle binary cache requests via HTTP.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/binary-cache-substituter.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-serve -p 8080\n```\n\n----------------------------------------\n\nTITLE: Writing Comments in Nix\nDESCRIPTION: Shows how to insert a single-line comment using the hash symbol (#). Comments are ignored during evaluation and can be used anywhere in Nix expressions for documentation or clarification. No dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n# Explanation\n```\n\n----------------------------------------\n\nTITLE: Configuring nixpkgs-fmt in flake.nix for Nix Formatting\nDESCRIPTION: This snippet shows how to configure nixpkgs-fmt as the formatter for x86_64-linux in a flake.nix file. It specifies the formatter in the outputs section of the flake.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/fmt.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n# flake.nix\n{\n  outputs = { nixpkgs, self }: {\n    formatter.x86_64-linux = nixpkgs.legacyPackages.x86_64-linux.nixpkgs-fmt;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluation Result of @-Pattern Default Value Example in Nix\nDESCRIPTION: Shows the evaluation result of the previous two function examples. The result shows that a takes the default value 23, while args is an empty set.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_15\n\nLANGUAGE: nix\nCODE:\n```\n[ 23 {} ]\n```\n\n----------------------------------------\n\nTITLE: Store Path Redirection\nDESCRIPTION: Redirect store paths to writable directories for development purposes.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# nix develop --redirect nixpkgs#glibc.dev ~/my-glibc/outputs/dev\n```\n\n----------------------------------------\n\nTITLE: Using Nix as a Shebang Interpreter for Shell Scripts (Shell)\nDESCRIPTION: Provides a shell script example that leverages the Nix package manager as a shebang interpreter to specify dependencies (hello, cowsay) using the 'nix shell' command. Invokes a custom command defined after the shebang, ensuring the dependencies are available to the subsequent shell commands. No external dependencies are needed beyond Nix and the referenced packages. Expected inputs are shell script lines, with outputs produced by the dependencies within the created shell.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env nix\\n#! nix shell --file ``<nixpkgs>`` hello cowsay --command bash\\n\\nhello | cowsay\n```\n\n----------------------------------------\n\nTITLE: Using the 'follows' Pattern to Reuse Flake Inputs\nDESCRIPTION: Demonstrates the 'follows' pattern for inheriting inputs from other inputs, which helps minimize duplication of dependencies by reusing the same input across multiple dependency paths.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_17\n\nLANGUAGE: nix\nCODE:\n```\ninputs.nixpkgs.follows = \"dwarffs/nixpkgs\";\n```\n\n----------------------------------------\n\nTITLE: Verifying and Repairing Nix Store Paths - Console - Shell\nDESCRIPTION: These console commands illustrate how to verify the integrity of a Nix store path and attempt to repair it if corruption is detected. The process first uses 'nix store verify' to compare the actual and expected hashes, and if a mismatch is found, instructs the user to run 'nix store repair' to redownload the correct data. Dependencies include a functional Nix installation, the presence of the specified store path, and access to substituters capable of redownloading the path. Inputs are the store path to be checked; outputs are status messages indicating verification and repair progress. The repair command is subject to limitations, such as the availability of substitute data and a risk of interruption leaving the store in an inconsistent state.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-repair.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store verify /nix/store/yb5q57zxv6hgqql42d5r8b5k5mcq6kay-hello-2.10\npath '/nix/store/yb5q57zxv6hgqql42d5r8b5k5mcq6kay-hello-2.10' was\nmodified! expected hash\n'sha256:1hd5vnh6xjk388gdk841vflicy8qv7qzj2hb7xlyh8lpb43j921l', got\n'sha256:1a25lf78x5wi6pfkrxalf0n13kdaca0bqmjqnp7wfjza2qz5ssgl'\n\n# nix store repair /nix/store/yb5q57zxv6hgqql42d5r8b5k5mcq6kay-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Running Vim from nixpkgs Flake - Console\nDESCRIPTION: Illustrates running the vim package using nix run from the nixpkgs flake. Requires the nixpkgs flake to be present, and vim should be defined as a package (not necessarily as an app). Nix executes the primary binary provided in the package, typically found as $out/bin/vim.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/run.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix run nixpkgs#vim\n```\n\n----------------------------------------\n\nTITLE: Typical Outputs Function Structure in Nix Flakes\nDESCRIPTION: The standard pattern for defining the outputs function in a flake, which receives the inputs and returns the flake's exportable values. Shows how inputs are passed as function arguments.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_13\n\nLANGUAGE: nix\nCODE:\n```\noutputs = { self, nixpkgs, import-cargo }: {\n  ... outputs ...\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Packages from Remote Nixpkgs Revision - nix-env Command - Console/Shell\nDESCRIPTION: This command allows querying of all available packages from a remote or specific revision of the Nixpkgs repository by providing a URL to the --file flag. It requires network access and a valid tarball URL. The result is a list of packages in the relevant revision, supporting remote and historical querying.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --file https://github.com/NixOS/nixpkgs/archive/master.tar.gz --query --available\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nix on Linux Multi-User Installation\nDESCRIPTION: Commands to upgrade Nix on a Linux multi-user installation. The process involves installing the new Nix version, certificate authority certificates, and restarting the Nix daemon.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/upgrading.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo su\n# nix-env --install --file '<nixpkgs>' --attr nix cacert -I nixpkgs=channel:nixpkgs-unstable\n# systemctl daemon-reload\n# systemctl restart nix-daemon\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packages using nix-env - Console\nDESCRIPTION: Demonstrates upgrading a specific package (gcc) using the nix-env --upgrade and --attr flags. Assumes nix and nix-env are installed and the nixpkgs channel is available. The command takes attribute paths as arguments and outputs the old and new package versions. Returns a log of the upgrade process as console output.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/upgrade.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --upgrade --attr nixpkgs.gcc\\nupgrading `gcc-3.3.1' to `gcc-3.4'\\n\n```\n\n----------------------------------------\n\nTITLE: Installing to an Alternate Profile Using nix-env --profile - Console\nDESCRIPTION: This command installs a package into a specified profile rather than the current one by using the '--profile' (or '-p') option. It requires Nix and access to the alternate profile path. The input is the profile path and installation arguments, and the result is an updated alternate profile with the selected package, leaving the main '~/.nix-profile' unchanged.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --profile /nix/var/nix/profiles/other-profile --install --attr nixpkgs.subversion\n```\n\n----------------------------------------\n\nTITLE: Building from Command Line Expression\nDESCRIPTION: Illustrates building an expression specified directly on the command line using '--impure' and '--expr' options.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# nix build --impure --expr \\\n    'with import <nixpkgs> {};\n     runCommand \"foo\" {\n       buildInputs = [ hello ];\n     }\n     \"hello > $out\"'\n# cat ./result\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Overriding Packages with Expressions in --packages - nix - console\nDESCRIPTION: Showcases use of the -p flag to accept both attribute names and full Nix expressions, including overriding package attributes (e.g., git with withManual=false). The command demonstrates flexibility in specifying buildInputs for the development shell. Inputs: arbitrary expressions allowed in -p; outputs: shell with customized packages.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell --packages sqlite 'git.override { withManual = false; }'\n```\n\n----------------------------------------\n\nTITLE: Redirecting Specific Branch to Local Fork\nDESCRIPTION: Adds an entry that redirects a specific branch of 'nixpkgs' to a local directory. This allows users to test modifications to packages by redirecting to their own fork.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-add.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix registry add nixpkgs/nixos-20.03 ~/Dev/nixpkgs\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for Nix Garbage Collector Roots - Console Shell\nDESCRIPTION: This shell command creates a symbolic link from a Nix store path to the gcroots directory. It ensures the specified store path and its dependencies are retained by the Nix garbage collector. Requires shell access, the existence of the source path, and appropriate permissions on the target directory. Input is a source store path and a destination identifier. Output is the creation of a symlink, which prevents GC from collecting the referenced path.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/garbage-collector-roots.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ln -s /nix/store/d718ef...-foo /nix/var/nix/gcroots/bar\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Attribute Selection in Nix\nDESCRIPTION: Demonstrates the 'or' operator in Nix expressions to provide default values when selecting attributes that might not exist.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.0.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nx.y.z or e\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Executable File Representation - Nix Model - plaintext\nDESCRIPTION: This snippet illustrates the format used to represent a regular file in the Nix file system model, indicating its size and non-executable status. No code execution is implied; instead, the entry is used for documentation or modeling purposes. The primary parameter is the file size and the boolean indicating whether the file is executable.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/file-system-object.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n50 B, executable: false\n```\n\n----------------------------------------\n\nTITLE: Enforcing Zero Dependencies with allowedReferences in Nix Derivation\nDESCRIPTION: Shows how to use allowedReferences to enforce that the output of a derivation cannot have any runtime dependencies on its inputs. This is used in NixOS to check that generated files don't have accidental dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nallowedReferences = [];\n```\n\n----------------------------------------\n\nTITLE: Querying Flake Metadata via nix flake metadata - Shell/Console\nDESCRIPTION: This shell/console example demonstrates invoking 'nix flake metadata' for the flake named 'dwarffs'. It retrieves and displays metadata such as resolved/locked URLs, description, path, revision, last modified time, and input dependencies. No external dependencies are required other than a Nix installation supporting flakes; 'dwarffs' must be registered in the flake registry or resolvable by Nix. Output fields provide key information for understanding the provenance and structure of a flake input. Expected output is human-readable, with structural tree-like representation for dependency relationships.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-metadata.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake metadata dwarffs\nResolved URL:  github:edolstra/dwarffs\nLocked URL:    github:edolstra/dwarffs/f691e2c991e75edb22836f1dbe632c40324215c5\nDescription:   A filesystem that fetches DWARF debug info from the Internet on demand\nPath:          /nix/store/769s05vjydmc2lcf6b02az28wsa9ixh1-source\nRevision:      f691e2c991e75edb22836f1dbe632c40324215c5\nLast modified: 2021-01-21 15:41:26\nInputs:\n├───nix: github:NixOS/nix/6254b1f5d298ff73127d7b0f0da48f142bdc753c\n│   ├───lowdown-src: github:kristapsdz/lowdown/1705b4a26fbf065d9574dce47a94e8c7c79e052f\n│   └───nixpkgs: github:NixOS/nixpkgs/ad0d20345219790533ebe06571f82ed6b034db31\n└───nixpkgs follows input 'nix/nixpkgs'\n```\n\n----------------------------------------\n\nTITLE: Building Nix for Alternate Platform using nix-build (Shell)\nDESCRIPTION: Runs nix-build with the --attr flag to build for a different platform such as aarch64-linux. The 'packages.aarch64-linux.default' attribute must be defined. This is useful for cross-compiling or producing binaries for non-native platforms, requiring an appropriately configured builder or emulator.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build --attr packages.aarch64-linux.default\n```\n\n----------------------------------------\n\nTITLE: Release Build using Flakes (Console)\nDESCRIPTION: Calls nix build in a flake-enabled environment to construct a release version of Nix for the local system and CPU architecture. Flakes provide improved reproducibility and dependency management.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ nix build\n```\n\n----------------------------------------\n\nTITLE: Using nix-store dump-db Command\nDESCRIPTION: Command syntax for exporting the Nix database to standard output. Can be used with optional store paths to export specific subsets of the database rather than the entire database.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/dump-db.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --dump-db [paths...]\n```\n\n----------------------------------------\n\nTITLE: Describing Directory Structure with Executables and Files - Nix Model - plaintext\nDESCRIPTION: This snippet provides an example tree structure of a directory containing several files and subdirectories as modeled in Nix. It delineates parent-child relationships, executable flags, and file sizes in a human-readable hierarchy. This is strictly for illustration; expected inputs are file/directory names, sizes, and properties, with outputs as conceptual tree representations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/file-system-object.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n├── bin\n│   └── hello: 35 KB, executable: true\n└── share\n    ├── info\n    │   └── hello.info: 36 KB, executable: false\n    └── man\n        └── man1\n            └── hello.1.gz: 790 B, executable: false\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Nix Expression Files into Attribute Set - Nix\nDESCRIPTION: This example demonstrates how nix-env merges multiple .nix files in the default expression directory into a single attribute set, where each key corresponds to the file name, and the value is the imported expression. Dependencies: Requires the Nix package manager and valid Nix expression files (here foo.nix and bar.nix) in ~/.nix-defexpr/. No parameters are necessary as the discovery and import logic is automatic, but the output is an attribute set with fields named after each .nix file found in the default expression directory. Limitations: Directories without default.nix files are traversed recursively.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/files/default-nix-expression.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\n{\n  foo = import ~/.nix-defexpr/foo.nix;\n  bar = import ~/.nix-defexpr/bar.nix;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Packages with Status - nix-env Command - Console/Shell\nDESCRIPTION: This command queries available packages and outputs their status flags using the --status option, indicating whether each derivation is installed, present, or has a substitute. It requires nix-env and optionally the --available flag to show not only installed but also available package data. The output format adds status columns with annotated comments for interpretation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --query --available --status\n-P- firefox-1.0.7   (not installed but present)\n--S GConf-2.4.0.1   (not present, but there is a substitute for fast installation)\n--S MPlayer-1.0pre3 (i.e., this is not the installed MPlayer, even though the version is the same!)\nIP- ORBit2-2.8.3    (installed and by definition present)\n…\n```\n\n----------------------------------------\n\nTITLE: Comparing Nix Store Closures Using nix store diff-closures - Console\nDESCRIPTION: This snippet provides an example usage of the 'nix store diff-closures' command in a shell environment to compare two NixOS system profiles. It demonstrates how the output highlights added, removed, or changed packages, including differences in versions and store sizes. No external dependencies are required besides Nix itself; expected input is two system profile paths, while output lists package differences with version and size changes.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/diff-closures.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store diff-closures /nix/var/nix/profiles/system-655-link /nix/var/nix/profiles/system-658-link\nacpi-call: 2020-04-07-5.8.16 → 2020-04-07-5.8.18\nbaloo-widgets: 20.08.1 → 20.08.2\nbluez-qt: +12.6 KiB\ndolphin: 20.08.1 → 20.08.2, +13.9 KiB\nkdeconnect: 20.08.2 → ∅, -6597.8 KiB\nkdeconnect-kde: ∅ → 20.08.2, +6599.7 KiB\n…\n```\n\n----------------------------------------\n\nTITLE: Installing Nix in Single-user Mode\nDESCRIPTION: Command to install Nix in single-user mode, which has fewer requirements but offers less sharing, isolation, and security. This is suitable for systems without systemd but is not supported on Mac.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/index.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ curl -L https://nixos.org/nix/install | sh -s -- --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Old nix run syntax in Nix 2.3\nDESCRIPTION: The deprecated syntax for running commands with nix run in Nix 2.3, which has been renamed to nix shell.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnix run nixpkgs.hello -c hello # Nix 2.3\n```\n\n----------------------------------------\n\nTITLE: Converting Hashes to Subresource Integrity Format - Nix hash convert - Console\nDESCRIPTION: These snippets show how to convert a SHA1 hash to the SRI (Subresource Integrity) base64 format using the `nix hash convert` command. The algorithm is specified, and optionally the `--to sri` flag can be included for clarity. Requires the Nix tool to be installed. The output provides the SRI-compliant string prefixed by the algorithm.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/hash-convert.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix hash convert --hash-algo sha1 800d59cfcd3c05e900cb4e214be48f6b886a08df\nsha1-gA1Zz808BekAy04hS+SPa4hqCN8=\n```\n\nLANGUAGE: console\nCODE:\n```\n# nix hash convert --hash-algo sha1 --to sri 800d59cfcd3c05e900cb4e214be48f6b886a08df\nsha1-gA1Zz808BekAy04hS+SPa4hqCN8=\n```\n\n----------------------------------------\n\nTITLE: Error Reporting via Standard Error in Nix Build - Shell\nDESCRIPTION: Demonstrates how Nix commands produce error details on STDERR, which do not get redirected to output files when STDOUT is redirected. The sample shows both the command invocation and the ensuing error message separated by a dashed line, including a code line and a syntactic error location. Expected behavior is that error and warning messages are human-readable and not mixed with compositional output for scripts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build > build.txt\n------------------------------------------------------------------------\n  Error! Attribute `bin` missing at (1:94) from string.\n------------------------------------------------------------------------\n\n  1| with import <nixpkgs> { }; (pkgs.runCommandCC or pkgs.runCommand) \"shell\" { buildInputs = [ (surge.bin) ]; } \"\"\n```\n\n----------------------------------------\n\nTITLE: Pinning nixpkgs in Custom Registry to Latest Git Revision in Console\nDESCRIPTION: This snippet shows how to pin the nixpkgs flake to its most recent Git revision in a custom registry file using the nix registry pin command with the --registry option.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-pin.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix registry pin --registry ./custom-flake-registry.json nixpkgs\n```\n\n----------------------------------------\n\nTITLE: Nix Signing Key Format Example - Shell/Console\nDESCRIPTION: This snippet exemplifies the format in which Nix signing keys, both secret and public, are represented. The structure consists of a key name, followed by a colon, and then a base64-encoded Ed25519 key. Required for manual inspection or distribution of keys outside automated tooling. Users must substitute their own key name and encoded data. Limitation: Example only; not usable as-is for cryptographic operations.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/key-generate-secret.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncache.example.org-0:E7lAO+MsPwTFfPXsdPtW8GKui/5ho4KQHVcAGnX+Tti1V4dUxoVoqLyWJ4YESuZJwQ67GVIksDt47og+tPVUZw==\n```\n\n----------------------------------------\n\nTITLE: VSCode nixfmt Formatter Configuration (JSON)\nDESCRIPTION: This JSON snippet configures Visual Studio Code to use nixfmt as the formatter for Nix files. The configuration should be added to '.vscode/settings.json'. It specifies the command for nixd and nil language servers to run nixfmt, and enables formatting features like 'Format Document' and format-on-save. Requires that nixfmt is installed and properly set in PATH, and may depend on relevant VSCode extensions like vscode-clangd.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"nix.formatterPath\\\": \\\"nixfmt\\\",\\n  \\\"nix.serverSettings\\\": {\\n    \\\"nixd\\\": {\\n      \\\"formatting\\\": {\\n        \\\"command\\\": [\\n          \\\"nixfmt\\\"\\n        ],\\n      },\\n    },\\n    \\\"nil\\\": {\\n      \\\"formatting\\\": {\\n        \\\"command\\\": [\\n          \\\"nixfmt\\\"\\n        ],\\n      },\\n    },\\n  },\\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Shell with GNU Hello in a Chroot Store\nDESCRIPTION: Example showing how to start an interactive bash shell in a custom Nix store with hello and bash packages available.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix shell --store ~/my-nix nixpkgs#hello nixpkgs#bashInteractive --command bash\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Nix in Flake-Enabled Environment (Shell)\nDESCRIPTION: These commands execute the configure and build phases of Nix in a development shell set up with flakes. Assumes prior invocation of 'nix develop' or 'nix develop .#env', presence of meson/ninja, and properly set environment variables. Typically followed by checkPhase for running tests.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell]$ configurePhase\\n[nix-shell]$ buildPhase\n```\n\n----------------------------------------\n\nTITLE: Basic Nix Shebang Interpreter Pattern\nDESCRIPTION: Example showing the basic syntax for using nix as a script interpreter with shebang notation to provide dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/env nix\n#! nix shell installables --command real-interpreter\n```\n\n----------------------------------------\n\nTITLE: Downloading Files and Retrieving SHA-512 Hash as JSON via nix store prefetch-file (Console)\nDESCRIPTION: Downloads a file to the Nix store while retrieving its SHA-512 hash in JSON format using the --json and --hash-type options. Requires both nix CLI and the jq utility for JSON parsing. The command accepts a file URL and outputs the hash value, making it suitable for scripts and reproducible workflows. Input is the remote file's URL; output is the base64-encoded SHA-512 hash printed to the console, suitable for further automated processing. Limitation: Output is limited to hash retrieval and depends on jq for JSON field extraction.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-prefetch-file.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix store prefetch-file --json --hash-type sha512 \\\n    https://releases.nixos.org/nix/nix-2.3.10/nix-2.3.10.tar.xz \\\n  | jq -r .hash\nsha512-6XJxfym0TNH9knxeH4ZOvns6wElFy3uahunl2hJgovACCMEMXSy42s69zWVyGJALXTI+86tpDJGlIcAySEKBbA==\n```\n\n----------------------------------------\n\nTITLE: Using nix-env with --argstr for System Specification\nDESCRIPTION: Demonstrates the use of the new --argstr option to specify the system type without requiring additional quoting.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.11.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix-env --argstr system i686-linux\n```\n\n----------------------------------------\n\nTITLE: Converting Nix Expression to JSON Output\nDESCRIPTION: Shows how to evaluate a Nix expression and output the result in JSON format.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/eval.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --json --expr '{ x = 1; }'\n{\"x\":1}\n```\n\n----------------------------------------\n\nTITLE: Declaring impure environment variables in a Nix derivation (Nix language)\nDESCRIPTION: This Nix code snippet assigns a list of environment variable names to the impureEnvVars attribute for a derivation, enabling the listed variables (e.g., proxy configuration) to be passed from the user's environment to the builder process. This pattern is intended for fixed-output derivations only, where the hash of the output is known upfront, and it is ignored for other derivation types. The variables listed must be relevant to the build (e.g., networking proxies), and supporting features (such as configurable-impure-env) may alter behavior. Required dependencies: Nix 2.x and a context where fixed-output derivations are meaningful.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\nimpureEnvVars = [ \"http_proxy\" \"https_proxy\" ... ];\n```\n\n----------------------------------------\n\nTITLE: Copying the NixOS System Closure to Another Machine via SSH Using Nix CLI - Console\nDESCRIPTION: Transfers the entire current NixOS system closure to a remote machine using SSH as the transport, leveraging the '--substitute-on-destination' flag which allows the destination machine to attempt substituting missing store paths. Requires SSH access, correct authorization, and Nix installed on both source and target. The main input is '/run/current-system'; the parameter '--to ssh://server' specifies the SSH destination. Output is the presence of the closure on the remote machine.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --substitute-on-destination --to ssh://server /run/current-system\n```\n\n----------------------------------------\n\nTITLE: Basic String Interpolation in Nix\nDESCRIPTION: Demonstrates basic string interpolation with a freetype library path example.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-interpolation.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n\"--with-freetype2-library=${freetype}/lib\"\n```\n\n----------------------------------------\n\nTITLE: Defining 'text' Type for Fingerprints in Nix Grammar - ebnf\nDESCRIPTION: This rule shows how the 'text' variant for fingerprint type is formulated, representing the Text content-addressing method. It is coded as the string 'text' optionally followed by a sequence of colon-prefixed store paths, which denote references. Intended for documentation and used when parsing or generating fingerprints for text-based store objects.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_2\n\nLANGUAGE: ebnf\nCODE:\n```\n| \"text\" { \":\" store-path }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating nix-env Incompatibility Error in Console\nDESCRIPTION: This snippet shows the error message displayed when attempting to use 'nix-env' after having used 'nix profile'. It illustrates the incompatibility between the two profile management tools.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env -f '<nixpkgs>' -iA 'hello'\nerror: nix-env\nprofile '/home/alice/.local/state/nix/profiles/profile' is incompatible with 'nix-env'; please use 'nix profile' instead\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments with --arg in Command-Line Nix - Shell\nDESCRIPTION: This command-line technique lets users override or specify function argument values when evaluating a Nix expression, useful when the top-level expression is a parametrized function. The --arg flag is followed by name-value pairs. Prerequisites: function arguments must be named in the Nix expression. Outputs: result of evaluating function with user-supplied arguments.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n--arg name value\n```\n\n----------------------------------------\n\nTITLE: Updating Single Nix Flake Input\nDESCRIPTION: Demonstrates updating a specific input (nixpkgs) in the flake.lock file. The command updates only the specified input while leaving others unchanged.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-update.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake update nixpkgs\nwarning: updating lock file '/home/myself/repos/testflake/flake.lock':\n• Updated input 'nixpkgs':\n    'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)\n  → 'github:NixOS/nixpkgs/a3a3dda3bacf61e8a39258a0ed9c924eeca8e293' (2023-07-05)\n```\n\n----------------------------------------\n\nTITLE: Rolling Back NixOS Profile to Previous Version\nDESCRIPTION: Example of rolling back the default profile to the previous version using the 'nix profile rollback' command. This shows the console output indicating a profile switch from version 519 to 518.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-rollback.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile rollback\nswitching profile from version 519 to 518\n```\n\n----------------------------------------\n\nTITLE: Defining Lists - Nix Language - Nix\nDESCRIPTION: This snippet demonstrates defining lists in the Nix language by enclosing whitespace-separated values in square brackets. It shows the inclusion of integers, paths, strings, and the result of expressions. Lists in Nix are lazy in values but strict in length, and function calls must be parenthesized if included inside the list.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[ 123 ./foo.nix \"abc\" (f { x = y; }) ]\n```\n\nLANGUAGE: nix\nCODE:\n```\n[ 123 ./foo.nix \"abc\" f { x = y; } ]\n```\n\n----------------------------------------\n\nTITLE: Switching User Profile in Nix\nDESCRIPTION: This example demonstrates how to use the nix-env --switch-profile command to change the current user profile to a specific path. It sets the ~/.nix-profile symlink to point to the specified profile.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/switch-profile.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --switch-profile ~/my-profile\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Derivation Version by Name - nix-env Console Command - Shell\nDESCRIPTION: Illustrates installing a specific version of gcc using the nix-env --install <name-version> idiom. The command accepts the derivation name, and, unless --preserve-installed is also used, removes any older installed versions. Relies on name matching and version resolution within the current Nix expression.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_6\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install gcc-3.3.2\ninstalling `gcc-3.3.2'\nuninstalling `gcc-3.1'\n\n```\n\n----------------------------------------\n\nTITLE: Using Lookup Path Syntax with Channel Subdirectory - Nix\nDESCRIPTION: This snippet illustrates the extended lookup path syntax by referencing <nixpkgs/nixos>, which accesses a subdirectory within the nixpkgs channel. The use of a forward slash allows resolution of additional path segments beyond the primary identifier. Prerequisites include a defined search path entry for nixpkgs in builtins.nixPath, and the presence of the 'nixos' subdirectory within that channel. Given the input, the mechanism returns the absolute path to the specified subdirectory. Outputs are resolved paths, and input constraints require identifiers and optional path suffixes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/constructs/lookup-path.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n<nixpkgs/nixos>\n```\n\n----------------------------------------\n\nTITLE: Using nix-store dump command\nDESCRIPTION: Command syntax for creating a NAR archive from a specified path. The archive is written to standard output and contains a canonical representation of the file system tree.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/dump.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --dump path\n```\n\n----------------------------------------\n\nTITLE: Using flake syntax to select packages in Nix\nDESCRIPTION: New syntax for selecting a package from a flake using the '#' notation with the nix command.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnix build nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Downloading Files to Nix Store via nix store prefetch-file (Console)\nDESCRIPTION: Downloads a specified file to the local Nix store using the nix store prefetch-file command. No dependencies other than the nix CLI itself are required. The command prints the destination store path and a calculated hash after completion. Input consists of a remote file URL, and output is a message containing the file's Nix store path and its cryptographic hash. Limitations: Downloaded file is immutable within the store and named after its original URL unless another name is specified via --name.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-prefetch-file.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store prefetch-file https://releases.nixos.org/nix/nix-2.3.10/nix-2.3.10.tar.xz\nDownloaded 'https://releases.nixos.org/nix/nix-2.3.10/nix-2.3.10.tar.xz' to\n'/nix/store/vbdbi42hgnc4h7pyqzp6h2yf77kw93aw-source' (hash\n'sha256-qKheVd5D0BervxMDbt+1hnTKE2aRWC8XCAwc0SeHt6s=').\n```\n\n----------------------------------------\n\nTITLE: Running Full Nix Test Suite - Shell Session\nDESCRIPTION: This command executes the full set of functional and unit tests for the Nix project using the 'checkPhase' entry point, which is typically invoked in automated packaging or as part of the standard build process. It requires the appropriate build and test dependencies to be present in the execution environment and runs all aggregated test suites.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ checkPhase\n```\n\n----------------------------------------\n\nTITLE: Referencing Derivation Outputs with placeholder Function - Nix - nix\nDESCRIPTION: This snippet demonstrates how to use the placeholder builtin function in Nix expressions to reference outputs of a derivation, such as 'out' and 'dev'. This allows you to dynamically construct configuration flags or environment variables based on evaluated store paths. No explicit dependencies are required aside from Nix; the placeholder names correspond to declared outputs in the derivation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nconfigureFlags = \"--prefix=${placeholder \\\"out\\\"} --includedir=${placeholder \\\"dev\\\"}\";\n```\n\n----------------------------------------\n\nTITLE: Installing a Package by Attribute Using nix-env - Console\nDESCRIPTION: This snippet shows how to install a package (e.g., Subversion) from the nixpkgs attribute set using the nix-env tool. Dependencies include a configured Nix environment and access to the nixpkgs expression set. The '--install' and '--attr' flags specify the operation and package, and successful execution updates the user's profile with the desired package, creating a new user environment generation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install --attr nixpkgs.subversion\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Convention Example for Nix Output - Shell\nDESCRIPTION: Provides a design example of proper verb/noun text alignment as recommended for Nix CLI output. Includes several example lines using aligned verbs and nouns and shows the use of \"|>\" to indicate additional detail lines. The snippet guides developers on formatting output to maintain consistent style across commands for improved readability.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ nix COMMAND\n   VERB_1 NOUN and other words\n  VERB__1 NOUN and other words\n       |> Some details\n```\n\n----------------------------------------\n\nTITLE: Updating Nix Flake Input in Different Directory\nDESCRIPTION: Example of updating a specific input in a flake.lock file located in a different directory using the --flake flag. Shows how to target a flake outside the current working directory.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-update.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix flake update nixpkgs --flake ~/repos/another\nwarning: updating lock file '/home/myself/repos/another/flake.lock':\n• Updated input 'nixpkgs':\n    'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)\n  → 'github:NixOS/nixpkgs/a3a3dda3bacf61e8a39258a0ed9c924eeca8e293' (2023-07-05)\n```\n\n----------------------------------------\n\nTITLE: Installing a Package by Attribute with Nix CLI - Console\nDESCRIPTION: This snippet shows how to install a package (e.g., firefox) using an attribute from the Nix Packages collection via the nix-env --install command. It resolves dependencies and either builds packages from source or fetches pre-built binaries if available in caches. Prerequisites include Nix and a referenced package attribute.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/introduction.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install --attr nixpkgs.firefox\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nix in Specific Profile\nDESCRIPTION: Command to upgrade Nix in a specific user profile. This allows targeting a particular profile path for the upgrade operation.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/upgrade-nix.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix upgrade-nix --profile ~alice/.local/state/nix/profiles/profile\n```\n\n----------------------------------------\n\nTITLE: Partial Function Application in Nix\nDESCRIPTION: Shows how to use partial parameterization by only filling some of a function's arguments. The example maps a partially applied concat function over a list of strings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nmap (concat \"foo\") [ \"bar\" \"bla\" \"abc\" ]\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Sets - Nix Language - Nix\nDESCRIPTION: These snippets illustrate the creation of attribute sets by enclosing name-value pairs within curly braces, assigning values with the equals sign, and terminating each with a semicolon. It demonstrates basic sets, nested attribute paths, implicit inheritance, various forms of attribute name definitions (including string interpolation and special values like null), and attribute selection with and without default values. Attribute sets may act as objects or be callable via __functor when applicable.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  x = 123;\n  text = \"Hello\";\n  y = f { bla = 456; };\n}\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ a.b.c = 1; a.b.d = 2; }\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ inherit (builtins) true; }\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ a = \"Foo\"; b = \"Bar\"; }.a\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ a = \"Foo\"; b = \"Bar\"; }.c or \"Xyzzy\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ a = \"Foo\"; b = \"Bar\"; }.c.d.e.f.g or \"Xyzzy\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ \"$!@#?\" = 123; }.\"$!@#?\"\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet bar = \"bar\"; in\n{ \"foo ${bar}\" = 123; }.\"foo ${bar}\"\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet bar = \"foo\"; in\n{ foo = 123; }.${bar}\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet bar = \"foo\"; in\n{ ${bar} = 123; }.foo\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ ${if foo then \"bar\" else null} = true; }\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet add = { __functor = self: x: x + self.x; };\n    inc = add // { x = 1; };\nin inc 1\n```\n\n----------------------------------------\n\nTITLE: Function Example in Nixpkgs Default Configuration\nDESCRIPTION: Example of a Nix function from Nixpkgs' top-level default.nix that demonstrates function arguments with default values. The function accepts a system parameter that defaults to the current system architecture.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/opt-common.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ # The system (e.g., `i686-linux') for which to build the packages.\n  system ? builtins.currentSystem\n  ...\n}: ...\n```\n\n----------------------------------------\n\nTITLE: Updating URL Field in Nix Derivation Specification (Diff Format)\nDESCRIPTION: This diff snippet illustrates how to update the 'url' field in the JSON derivation specification for a Nix fetch derivation. The operation changes the source URL for the fetched file, with the old and new URLs shown. The diff format enables quick recognition of additions and deletions. Any change in URL could require updating the corresponding fixed hash. Dependencies include standard diff tools and familiarity with Nix derivation structure. Input is the original JSONC; output is the modified version used by Nix's build system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/outputs/content-address.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   \"env\": {\n-    \"url\": \"http://ftp.gnu.org/pub/gnu/hello/hello-2.1.1.tar.gz\"\n+    \"url\": \"ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz\"\n     // ...\n   },\n```\n\n----------------------------------------\n\nTITLE: Recursively Listing Directory in Nix Archive as JSON (console, json)\nDESCRIPTION: Shows how to use nix nar ls to recursively list all entries within a directory inside a NAR archive and output the result in JSON format. Dependencies include the nix tool with support for the nar subcommand. The command takes the NAR file, a directory path in the archive, and prints a JSON object representing directory structure and metadata. Output is a single-line JSON object encoding file types, names, sizes, and permissions.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nar-ls.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix nar ls --json --recursive ./hello.nar /bin\n{\"type\":\"directory\",\"entries\":{\"hello\":{\"type\":\"regular\",\"size\":38184,\"executable\":true,\"narOffset\":400}}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Store Path for a Nix Package\nDESCRIPTION: This command prints the store path produced by the nixpkgs#hello package. It shows the location in the Nix store where the hello package is installed.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info nixpkgs#hello\n/nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Querying Documentation in nix-repl - Nix\nDESCRIPTION: This snippet demonstrates how to use the :doc command in the nix-repl to display documentation comments for a Nix function. It shows sample output that includes the location, description, inputs, and usage examples for lib.toFunction. Requires a working nix-repl and appropriate Nix libraries. The command outputs detailed documentation for specified functions, but has limitations such as not rendering documentation for formals or certain markdown enhancements.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.24.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nnix-repl> :doc lib.toFunction\\nFunction toFunction\\n    … defined at /home/user/h/nixpkgs/lib/trivial.nix:1072:5\\n\\n    Turns any non-callable values into constant functions. Returns\\n    callable values as is.\\n\\nInputs\\n\\n    v\\n\\n      : Any value\\n\\nExamples\\n\\n    ::: {.example}\\n\\n## lib.trivial.toFunction usage example\\n\\n      | nix-repl> lib.toFunction 1 2\\n      | 1\\n      |\\n      | nix-repl> lib.toFunction (x: x + 1) 2\\n      | 3\\n\\n    :::\n```\n\n----------------------------------------\n\nTITLE: Defining Structured Attributes in Bash Builder Environment - Shell - shell\nDESCRIPTION: This example explains how Nix serializes structured derivation attributes into a shell script (.attrs.sh) for Bash builders. It illustrates how a boolean/attribute from Nix such as 'hardening.format = true' is converted to a Bash associative array entry. Prerequisites: Bash builders and Nix's structured attribute mode. Outputs are Bash associative arrays representing the structured attributes for use in build scripts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n${hardening[format]}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nix on macOS Multi-User Installation\nDESCRIPTION: Commands to upgrade Nix on a macOS multi-user installation. The process installs the new version, removes the existing daemon, and loads the updated daemon service.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/upgrading.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo nix-env --install --file '<nixpkgs>' --attr nix cacert -I nixpkgs=channel:nixpkgs-unstable\n$ sudo launchctl remove org.nixos.nix-daemon\n$ sudo launchctl load /Library/LaunchDaemons/org.nixos.nix-daemon.plist\n```\n\n----------------------------------------\n\nTITLE: Bad Dictionary Example - Unordered Outputs\nDESCRIPTION: Example showing how converting outputs to a dictionary loses crucial ordering information, even though it's more extensible.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/json-guideline.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"outputs\": { \"bin\": {}, \"out\": {} } }\n```\n\n----------------------------------------\n\nTITLE: @-Pattern for Reference to Entire Argument in Nix\nDESCRIPTION: Shows how to use the @ symbol to refer to the whole value being matched. The args variable is bound to the entire argument set, while still matching individual attributes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nargs@{ x, y, z, ... }: z + y + x + args.a\n```\n\n----------------------------------------\n\nTITLE: Overriding Transitive Inputs in Nix Flakes\nDESCRIPTION: Shows how to override dependencies of dependencies (transitive inputs) by directly specifying alternative sources for nested inputs in a flake's dependency tree.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_16\n\nLANGUAGE: nix\nCODE:\n```\ninputs.nixops.inputs.nixpkgs = {\n  type = \"github\";\n  owner = \"my-org\";\n  repo = \"nixpkgs\";\n};\n```\n\n----------------------------------------\n\nTITLE: Uploading Package to S3 Using Specific AWS Profile - Nix Command - Console\nDESCRIPTION: This console snippet demonstrates uploading a built package ('nixpkgs.hello') to an S3-backed binary cache using the 'nix copy' command, specifying an AWS credentials profile ('cache-upload') and AWS region ('eu-west-2'). This command assumes Nix is set up with the experimental copy support and the user has write access as per provided policies. Inputs are the derivation and S3 store URL with query parameters; output is the upload operation to the target cache.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/s3-binary-cache-store.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix copy nixpkgs.hello \\\\\\n  --to 's3://example-nix-cache?profile=cache-upload&region=eu-west-2'\n```\n\n----------------------------------------\n\nTITLE: Exporting Nix Store Path from Binary Cache (Console)\nDESCRIPTION: This example shows how to export a NAR archive for a specific store path from a remote binary cache (such as https://cache.nixos.org/) using the 'nix store dump-path' command with the '--store' option. The command connects to the specified remote store, retrieves the requested store path, and writes the resulting NAR to 'glibc.nar'. Prerequisites: Nix installed, network access, and a valid store path. Input: remote store URL and store path; Output: 'glibc.nar'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-dump-path.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix store dump-path --store https://cache.nixos.org/ \\\n    /nix/store/7crrmih8c52r8fbnqb933dxrsp44md93-glibc-2.25 > glibc.nar\n```\n\n----------------------------------------\n\nTITLE: Listing Store Path Contents in Binary Cache\nDESCRIPTION: Shows how to recursively list all contents of a store path from a binary cache using nix store ls. Demonstrates the use of --store, --long and --recursive flags to show detailed file information.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-ls.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store ls --store https://cache.nixos.org/ --long --recursive /nix/store/0i2jd68mp5g6h2sa5k9c85rb80sn8hi9-hello-2.10\ndr-xr-xr-x                    0 ./bin\n-r-xr-xr-x                38184 ./bin/hello\ndr-xr-xr-x                    0 ./share\n…\n```\n\n----------------------------------------\n\nTITLE: Specifying GitLab Flake Reference URLs in Nix (Markdown)\nDESCRIPTION: Explains the URL format required to specify GitLab repositories as efficient flake sources in Nix, with information about revision/branch selection and optional self-hosted instance configuration. The snippet presents the schema: \"gitlab:<owner>/<repo>(/<rev-or-ref>)?(\\?<params>)?\". As with other similar snippets, this provides documentation guidance, not executable instructions.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\ngitlab:<owner>/<repo>(/<rev-or-ref>)?(\\?<params>)?\n```\n\n----------------------------------------\n\nTITLE: Listing All Generations Using nix-env --list-generations - Console\nDESCRIPTION: This command outputs a list of all available generations for the current profile, allowing users to review previous states. Required dependencies are minimal (Nix installation and valid profile). The command produces an enumerated list of generations and their timestamps or states.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --list-generations\n```\n\n----------------------------------------\n\nTITLE: Garbage Collecting Unused Packages with Nix - Console\nDESCRIPTION: This command runs the Nix garbage collector, deleting all packages not currently referenced by any user profile or running process. It is useful for freeing disk space after uninstalling packages or performing upgrades. Requires a proper Nix system environment; the operation is safe thanks to the referential integrity of the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/introduction.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-collect-garbage\n```\n\n----------------------------------------\n\nTITLE: Setting NixOS Auto Root Path\nDESCRIPTION: Configures an auto root path specification in NixOS using the auto? syntax to define a root path location at /foo/bar/baz\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore-tests/data/store-reference/auto_param.txt#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nauto?root=/foo/bar/baz\n```\n\n----------------------------------------\n\nTITLE: Verifying a Store Path from a Binary Cache\nDESCRIPTION: This command verifies a specific package (hello-2.10) directly from the NixOS binary cache rather than from the local Nix store. It checks the integrity and signatures of the specified path on the remote cache.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/verify.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix store verify --store https://cache.nixos.org/ \\\n    /nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Submodules in Nix Flakes\nDESCRIPTION: Code showing how to declare that a flake needs Git submodules to be enabled, eliminating the need for the caller to pass the submodules flag.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.27.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs.self.submodules = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Build Progress Output Example - Nix CLI - Console\nDESCRIPTION: Shows status feedback from Nix while remotely building a derivation on a specified remote builder. Indicates what is being built, on which builder, and gives insight into parallelism or build activity. Output is for informational purposes to reassure the user about remote build execution.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n[1/0/1 built, 0.0 MiB DL] building foo on ssh://mac\n```\n\n----------------------------------------\n\nTITLE: Command Script Execution\nDESCRIPTION: Execute a series of commands in the development shell environment.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# nix develop --command bash -c \"mkdir build && cmake .. && make\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Path Flakes in Nix (Markdown)\nDESCRIPTION: Describes how to reference flakes located at arbitrary local directories using the 'path' type in Nix. This snippet documents the 'path' URL format and the necessary absolute or relative path to a directory containing a flakes.nix file. As with other documentation snippets, this is illustrative and not executable code, showing the required format \"path:<path>(\\?<params>)?\". Inputs specify a filesystem path, and the output is an appropriate reference string. Usage is constrained by path must naming conventions and surrounding context as described in the text.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\npath:<path>(\\?<params>)?\n```\n\n----------------------------------------\n\nTITLE: Generating Binary Cache Key Pair with nix-store in Shell\nDESCRIPTION: Demonstrates how to invoke nix-store with the --generate-binary-cache-key option to create an Ed25519 key pair for securing a binary cache. Requires the Nix package manager to be installed in the system environment. The command takes three positional parameters: key name (used for key lookup on clients), secret key output file, and public key output file. The output consists of newly generated secret and public key files intended for use with Nix client and server cache validation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/generate-binary-cache-key.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnix-store --generate-binary-cache-key <key-name> <secret-key-file> <public-key-file>\n```\n\n----------------------------------------\n\nTITLE: Removing Packages with nix-env --uninstall in NixOS Console\nDESCRIPTION: Examples of using the nix-env --uninstall command to remove specific packages or all packages from the user environment. The first example removes the gcc package, while the second example uses a wildcard to remove all packages.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/uninstall.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --uninstall gcc\n$ nix-env --uninstall '.*' (remove everything)\n```\n\n----------------------------------------\n\nTITLE: Combining Overrides with 'follows' Pattern in Nix Flakes\nDESCRIPTION: Example showing how to combine overrides with the 'follows' pattern to redirect transitive dependencies to specific input sources, creating a more controlled dependency graph.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_18\n\nLANGUAGE: nix\nCODE:\n```\ninputs.nixops.inputs.nixpkgs.follows = \"dwarffs/nixpkgs\";\n```\n\n----------------------------------------\n\nTITLE: Copying a Store Path from Another Profile - nix-env Console Command - Shell\nDESCRIPTION: Shows copying an installed store path with a symbolic name (e.g., gcc) from another Nix profile into the current one using --from-profile. The command assumes the existence of the other profile and desired package within it. Facilitates profile migrations and environment sharing.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_9\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install --from-profile /nix/var/nix/profiles/foo gcc\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flake Project - Nix CLI - Shell\nDESCRIPTION: Initializes a new flake in the current directory using the default template. Requires the Nix CLI (version supporting flakes) to be installed. This command creates new template files unless files already exist, in which case it will not overwrite existing files. No parameters are required; the operation happens in the current working directory.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-init.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake init\n```\n\n----------------------------------------\n\nTITLE: Merged Result of Nested Attributes - Nix - nix\nDESCRIPTION: Illustrates the result of evaluating multiple declarations of the same attribute set in Nix when keys are dynamically constructed. Shows the properly merged attribute set as of the new behavior. Inputs are the original attribute set declarations; output is an attribute set with all keys merged. No external dependencies are required.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.17.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ nested = { bar = 2; foo = 1; }; }\n```\n\n----------------------------------------\n\nTITLE: Equivalent @-Pattern Function Without Default Value in Nix\nDESCRIPTION: Shows an equivalent function to the previous example using 'or' to provide a default value. This demonstrates how @-patterns don't include default values in the bound variable.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_14\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = args @ { ... }: [ (args.a or 23) args ];\nin\n  f {}\n```\n\n----------------------------------------\n\nTITLE: Using nix shell to run commands in the new Nix syntax\nDESCRIPTION: The new syntax using nix shell to create an environment and run a command, replacing the old nix run functionality.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnix shell nixpkgs#hello -c hello\n```\n\n----------------------------------------\n\nTITLE: Listing Available Flake Templates - Nix CLI - Shell\nDESCRIPTION: Displays all available flake templates recognized by the Nix CLI. Relies on the Nix environment being properly configured. This command outputs a tree or list of template options that can be used for initializing new flakes; no further arguments are needed.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-init.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake show templates\n```\n\n----------------------------------------\n\nTITLE: Installing nix-serve from Nixpkgs\nDESCRIPTION: Command to install the nix-serve package, which allows sharing the Nix store via HTTP as a binary cache.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/binary-cache-substituter.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install --attr nixpkgs.nix-serve\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Build for a Specific Architecture (Classic, Console)\nDESCRIPTION: Demonstrates targeting a particular architecture (e.g., aarch64-linux) using nix-build with the --attr parameter. This enables cross compilation when proper remote builders or emulation is configured.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build --attr packages.aarch64-linux.default\n```\n\n----------------------------------------\n\nTITLE: Showing Closure Sizes of NixOS System Components\nDESCRIPTION: This command displays the recursive closure sizes of every path in the current NixOS system, sorted by size. It helps identify which components take up the most space in the system closure.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --recursive --closure-size /run/current-system | sort -nk2\n/nix/store/hl5xwp9kdrd1zkm0idm3kkby9q66z404-empty                                                96\n/nix/store/27324qvqhnxj3rncazmxc4mwy79kz8ha-nameservers                                         112\n…\n/nix/store/539jkw9a8dyry7clcv60gk6na816j7y8-etc                                          5783255504\n/nix/store/zqamz3cz4dbzfihki2mk7a63mbkxz9xq-nixos-system-machine-20.09.20201112.3090c65  5887562256\n```\n\n----------------------------------------\n\nTITLE: Running Nix with User-local Chroot Store on Linux - Shell\nDESCRIPTION: This snippet demonstrates how to execute a Nix package using the user-local chroot store fallback, which occurs if the global /nix directory is unavailable and the user is not root. When running a Nix shell command, a warning is shown and output is printed if Nix switches to the user-specific chroot store directory. Users should have Nix installed and be running on a Linux system in a non-root context. Input is a standard shell command, and output includes both a warning message and the result of the program (here, 'hello').\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.10.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# ~/nix run nixpkgs#hello\\nwarning: '/nix' does not exists, so Nix will use '/home/ubuntu/.local/share/nix/root' as a chroot store\\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Nix Hash Conversion Example\nDESCRIPTION: Example showing the deprecated and new syntax for hash conversion using the convertHash builtin function. The base32 format has been renamed to nix32.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.24.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nbuiltins.convertHash { inherit hash hashAlgo; toHashFormat = \"base32\";}\n\nbuiltins.convertHash { inherit hash hashAlgo; toHashFormat = \"nix32\";}\n```\n\n----------------------------------------\n\nTITLE: Mounting OverlayFS for Nix Local Overlay Store - Shell\nDESCRIPTION: This shell snippet mounts OverlayFS with specific paths for lowerdir, upperdir, workdir, and the merged mount point. It requires root or sufficient privileges and assumes directories exist on compatible filesystems. Key parameters: lowerdir (base data), upperdir (overlay data), workdir (overlay metadata, must be on same filesystem as upperdir), and target mountpoint. Input is the mount command; output is the merged overlay directory ready for use by Nix. Modification of source directories or incorrect overlay options can result in mount failure.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/local-overlay-store.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmount -t overlay overlay \\\n  -o lowerdir=\"/mnt/example/store-a/nix/store\" \\\n  -o upperdir=\"/mnt/example/store-b\" \\\n  -o workdir=\"/mnt/example/workdir\" \\\n  \"/mnt/example/merged-store/nix/store\"\n```\n\n----------------------------------------\n\nTITLE: Starting an Alternate Compilation Environment Shell (Console)\nDESCRIPTION: Gives an example of using nix-shell with the --attr option to start a shell for a specific compilation environment (such as native-clangStdenvPackages). Allows developers to test building Nix with different compiler or environment configurations.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell --attr devShells.x86_64-linux.native-clangStdenvPackages\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Registry Entry with Nix CLI - Console\nDESCRIPTION: This code removes the entry 'nixpkgs' from a custom flake registry using the Nix CLI. It depends on Nix and a custom registry JSON file, specified via the --registry flag. The command targets 'nixpkgs' in the provided registry (./custom-flake-registry.json). No output is displayed on success, but a missing entry or registry file will result in an error.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-remove.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix registry remove --registry ./custom-flake-registry.json nixpkgs\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Flake Reference URLs in Nix (Markdown)\nDESCRIPTION: Explains the supported URL formats for referencing git repositories as flake sources in Nix. This snippet illustrates the syntax for the 'git' fetcher, allowing http(s), ssh, git, or file protocols. The code block documents the schema, which must be followed by users and tools interacting with git-backed flakes: \"git(+http|+https|+ssh|+git|+file):(//<server>)?<path>(\\?<params>)?\". This is a documentation guide and not executable code.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\ngit(+http|+https|+ssh|+git|+file):(//<server>)?<path>(\\?<params>)?\n```\n\n----------------------------------------\n\nTITLE: Accessing Nix Local Overlay Store via URI - Plaintext\nDESCRIPTION: This snippet demonstrates the usage of a store URI for accessing a Nix local-overlay store. It follows a key-value parameter format, specifying root directory, lower store path, and upper layer path. The URI must point to correctly mounted overlay stores, as the Nix tool will rely on both file layout and OverlayFS mount status. Inputs are path values; output is a valid store reference for Nix commands or config.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/local-overlay-store.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocal-overlay://?root=/mnt/example/merged-store&lower-store=/mnt/example/store-a&upper-layer=/mnt/example/store-b\n```\n\n----------------------------------------\n\nTITLE: Enumerating All Dependency Paths with Nix why-depends and --all - Console\nDESCRIPTION: This snippet invokes 'nix why-depends' with the '--all' flag to enumerate every valid path in the dependency graph from 'thunderbird' to 'libX11'. The output visualizes multiple branches through shared libraries, showing how dependencies propagate transitively. Requires the nixpkgs packages present in the Nix store; inputs are the two packages with their full attributes. Useful for comprehensively understanding all avenues of closure between components.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/why-depends.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix why-depends --all nixpkgs#thunderbird nixpkgs#xorg.libX11\\n/nix/store/qfc8729nzpdln1h0hvi1ziclsl3m84sr-thunderbird-78.5.1\\n├───lib/thunderbird/libxul.so: …6wrw-libxcb-1.14/lib:/nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0/lib:/nix/store/ssf…\\n│   → /nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0\\n├───lib/thunderbird/libxul.so: …pxyc-libXt-1.2.0/lib:/nix/store/1qj29ipxl2fyi2b13l39hdircq17gnk0-libXdamage-1.1.5/lib:/nix/store…\\n│   → /nix/store/1qj29ipxl2fyi2b13l39hdircq17gnk0-libXdamage-1.1.5\\n│   ├───lib/libXdamage.so.1.1.0: …-libXfixes-5.0.3/lib:/nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0/lib:/nix/store/9l0…\\n│   │   → /nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0\\n…\n```\n\n----------------------------------------\n\nTITLE: Using exportReferencesGraph to Access References Graph in Nix Derivation\nDESCRIPTION: This example shows how to use the exportReferencesGraph attribute to access the references graph of a derivation's inputs. The references graph of 'libfoo' will be placed in a file named 'libfoo-graph' in the temporary build directory.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  ...\n  exportReferencesGraph = [ \"libfoo-graph\" libfoo ];\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative @-Pattern Syntax in Nix\nDESCRIPTION: Shows an alternative syntax for the @-pattern where the @ symbol appears after the set pattern. This has the same effect as the previous example.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y, z, ... } @ args: z + y + x + args.a\n```\n\n----------------------------------------\n\nTITLE: Searching with OR Pattern\nDESCRIPTION: Demonstrates searching for packages matching either 'firefox' or 'chromium'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix search nixpkgs 'firefox|chromium'\n```\n\n----------------------------------------\n\nTITLE: Validating Binary Cache URL\nDESCRIPTION: Tests whether a URL is a valid Nix binary cache. This command checks if https://cache.nixos.org is a functioning binary cache that can be accessed.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-info.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix store info --store https://cache.nixos.org\n```\n\n----------------------------------------\n\nTITLE: Querying Installed Packages - nix-env Command - Console/Shell\nDESCRIPTION: This shell command retrieves and lists all packages currently installed in the active profile using nix-env. No dependencies outside of nix-env are required. The output displays package names and versions, with each package on a separate line. Input arguments can be provided to filter the results or alter display options.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --query\nbison-1.875c\ndocbook-xml-4.2\nfirefox-1.0.4\nMPlayer-1.0pre7\nORBit2-2.8.3\n…\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Package with Nix CLI - Console\nDESCRIPTION: This snippet shows how to uninstall an installed package (e.g., firefox) from the user profile using the nix-env --uninstall command. The package is not immediately deleted from the Nix store but is marked as unused for potential garbage collection. Requires a valid Nix installation and the target package should exist in the current user profile.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/introduction.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --uninstall firefox\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote SSH Store Access in Nix - Shell\nDESCRIPTION: Shows how to specify an SSH-based remote store with an explicit private key by passing query parameters in the store URL. This method allows Nix to interact with a store located on a remote machine using SSH authentication. The --store option is followed by a URL beginning with ssh://, with a query string defining the SSH key file path. Requires SSH access to the remote host and correct key permissions. This form is supported for all Nix commands requiring store specification.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/help-stores.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--store ssh://machine.example.org?ssh-key=/path/to/my/key\n```\n\n----------------------------------------\n\nTITLE: Disabling Reference Scanning with unsafeDiscardReferences in Nix Derivation\nDESCRIPTION: Shows how to use unsafeDiscardReferences with structured attributes to disable scanning an output for runtime dependencies. This is useful for self-contained filesystem images with their own embedded Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n__structuredAttrs = true;\nunsafeDiscardReferences.out = true;\n```\n\n----------------------------------------\n\nTITLE: Defining an Impure Derivation in Nix\nDESCRIPTION: This snippet demonstrates how to create an impure derivation in Nix. Impure derivations can produce different results each time they're built and have access to the network. The __impure attribute marks the derivation as impure, and the buildCommand uses the 'date' command to generate a unique output.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.8.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nstdenv.mkDerivation {\n  name = \"impure\";\n  __impure = true; # marks this derivation as impure\n  buildCommand = \"date > $out\";\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Disabling Nix Daemon Service on Linux\nDESCRIPTION: Commands to stop the Nix daemon service, disable it, and reload systemd on Linux systems using systemd.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo systemctl stop nix-daemon.service\nsudo systemctl disable nix-daemon.socket nix-daemon.service\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Listing and Extracting a File from Nix Archive Using Command-Line - Shell\nDESCRIPTION: This snippet demonstrates the use of the 'nix nar cat' command to extract a specific file ('/share/man/man1/hello.1.gz') from a given NAR archive ('./hello.nar') and decompress it using 'gunzip'. It requires the 'nix' tool and 'gunzip' to be installed on the system. The command outputs the decompressed contents of the manual page to standard output, enabling users to view documentation stored inside the archive. Input: path to NAR file and nested file path; Output: decompressed file contents.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nar-cat.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix nar cat ./hello.nar /share/man/man1/hello.1.gz | gunzip\n.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.4.\n.TH HELLO \"1\" \"November 2014\" \"hello 2.10\" \"User Commands\"\n…\n\n```\n\n----------------------------------------\n\nTITLE: Bad Dictionary Example - Non-extensible Store Types\nDESCRIPTION: Example showing a non-extensible approach where all keys must be assumed to be store types. This pattern is discouraged as it limits future extensibility.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/json-guideline.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"local\": { ... },\n  \"remote\": { ... },\n  \"http\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Attribute Sets - Nix Language - Nix\nDESCRIPTION: These examples illustrate how to declare recursive attribute sets using the 'rec' keyword, allowing attributes within the set to refer to each other. The first snippet shows a valid recursive reference, and the second demonstrates the error caused by infinite recursion where attributes continually reference each other.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nrec {\n  x = y;\n  y = 123;\n}.x\n```\n\nLANGUAGE: nix\nCODE:\n```\nrec {\n  x = y;\n  y = x;\n}.x\n```\n\n----------------------------------------\n\nTITLE: Removing All Packages from Nix Profile\nDESCRIPTION: This example shows how to remove all packages from the Nix profile using the '--all' flag. This operation will clear the entire profile.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-remove.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix profile remove --all\n```\n\n----------------------------------------\n\nTITLE: Starting a Shell with YouTube-DL from Nixpkgs Flake\nDESCRIPTION: Example showing how to start a shell with the youtube-dl package from the Nixpkgs flake and verify its version.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix shell nixpkgs#youtube-dl\n# youtube-dl --version\n2020.11.01.1\n```\n\n----------------------------------------\n\nTITLE: Building from Non-Flake Nix Expression\nDESCRIPTION: Shows how to build a specific attribute from a non-flake Nix expression file using the '--file' option.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# nix build --file release.nix build.x86_64-linux\n```\n\n----------------------------------------\n\nTITLE: Perl Script using nix-shell for Dependency Setup - perl\nDESCRIPTION: This snippet is a Perl script header using multiple nix-shell shebang lines to ensure the script is executed in a Nix environment with Perl plus specified Perl modules (HTML::TokeParser::Simple, LWP, LWP::Protocol::Https) available. It demonstrates both interpreter provisioning and runtime setup for scripts. Required dependencies: valid Nix environment, Perl and related packages in nixpkgs. Inputs: script file; outputs: Perl script runs with all dependencies satisfied.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_10\n\nLANGUAGE: perl\nCODE:\n```\n#! /usr/bin/env nix-shell\n#! nix-shell -i perl \n#! nix-shell --packages perl \n#! nix-shell --packages perlPackages.HTMLTokeParserSimple \n#! nix-shell --packages perlPackages.LWP\n#! nix-shell --packages perlPackages.LWPProtocolHttps\n\nuse HTML::TokeParser::Simple;\n```\n\n----------------------------------------\n\nTITLE: Copying Build Log from Remote Cache in Nix\nDESCRIPTION: This snippet demonstrates how to copy the build log of the 'hello' package from cache.nixos.org to the local Nix store. It uses the 'nix store copy-log' command with the '--from' flag to specify the source.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-copy-log.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store copy-log --from https://cache.nixos.org --eval-store auto nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Listing Disk Volumes on macOS\nDESCRIPTION: Command to list all disk volumes on macOS, used to identify the Nix Store volume.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndiskutil list\n```\n\n----------------------------------------\n\nTITLE: Explaining Package Self-Dependency with Nix why-depends - Console\nDESCRIPTION: Here, 'nix why-depends' is used to investigate why 'glibc' depends on itself. The snippet shows the invocation and output, which traces a self-referential path via a library file. This highlights reference tracing within a single package's store path. Requires the presence of glibc in the Nix store, and is useful for understanding the closure maintenance mechanisms in Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/why-depends.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix why-depends nixpkgs#glibc nixpkgs#glibc\\n/nix/store/9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31\\n\\u2514\\u2500\\u2500\\u2500lib/ld-2.31.so: …che       Do not use /nix/store/9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31/etc/ld.so.cache.  --…\\n    → /nix/store/9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31\n```\n\n----------------------------------------\n\nTITLE: Running Default App with Nix Flake - Console\nDESCRIPTION: Demonstrates how to execute the default application from a named flake ('blender-bin') using nix run. Requires a working Nix environment with flakes enabled and the specified flake available. Users simply call the command to launch the default app (as specified in flake outputs) from the referenced flake. No additional parameters are needed; output is the execution of the app.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/run.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix run blender-bin\n```\n\n----------------------------------------\n\nTITLE: Querying Available Packages - nix-env Command - Console/Shell\nDESCRIPTION: This command lists packages available for installation in the current Nix expression using nix-env with the --available flag. It requires access to the appropriate Nix expressions and outputs names and versions of packages not currently installed. The expected output is a list of matching package sets for further installation or investigation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --query --available\nfirefox-1.0.7\nGConf-2.4.0.1\nMPlayer-1.0pre7\nORBit2-2.8.3\n…\n```\n\n----------------------------------------\n\nTITLE: Displaying REPL Special Commands – Nix REPL – Console\nDESCRIPTION: This snippet demonstrates how to launch the Nix REPL and display all available special commands using the ':?' operator. Requires Nix and the 'nix repl' command to be available. The first command starts the REPL, and the second lists internal commands. No inputs needed beyond the default shell and installed Nix tools.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/repl.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix repl\\nnix-repl> :?\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Packages Using nix-env - Shell\nDESCRIPTION: This command queries the installed or available information of specified packages using nix-env. Passing -q followed by the package name (here 'gcc') returns details about that package. Dependencies are simply the presence of Nix and an available package database. The output will be information about 'gcc' or other named packages. Using \\* as the argument will list all derivations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -q gcc\n```\n\n----------------------------------------\n\nTITLE: Comparing Installed vs Available Versions with nix-env - Shell\nDESCRIPTION: This command uses the nix-env environment manager to query and compare installed package versions to those available in subscribed Nix channels. The -q (query) flag is combined with -c (compare-versions) and a wildcard argument, retrieving an at-a-glance status for all packages. Dependencies include an installed Nix system and proper channel subscriptions. This outputs a list comparing currently installed and available package versions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -qc \\*\n```\n\n----------------------------------------\n\nTITLE: Prefetching and Unpacking an Archive with nix-prefetch-url - Console Usage - shell\nDESCRIPTION: This snippet illustrates the use of nix-prefetch-url with both --unpack and --print-path options, fetching an archive (such as a tar.gz from GitHub), unpacking it, and storing the result in the Nix store. The command prints the hash and the resulting Nix store path of the unpacked archive. The required input is a URL to a supported archive, and the output consists of the hash and store path of the unpacked contents.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-prefetch-url.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-prefetch-url --unpack --print-path https://github.com/NixOS/patchelf/archive/0.8.tar.gz\\n079agjlv0hrv7fxnx9ngipx14gyncbkllxrp9cccnh3a50fxcmy7\\n/nix/store/19zrmhm3m40xxaw81c8cqm6aljgrnwj2-0.8.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Listing All Fetcher URLs in a Derivation Graph - Nix CLI with jq - Console\nDESCRIPTION: Shows how to extract and list all URLs fetched by fetchurl derivations in the dependency graph of firefox. The command combines ‘nix derivation show’ with -r for recursion, piped into jq for JSON filtering, uniq to deduplicate, and sort for ordering. Requires Nix, jq, and coreutils (uniq, sort) installed. Takes a package attribute reference as input and outputs a sorted list of URL strings fetched by fixed-output fetchers.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/derivation-show.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix derivation show -r nixpkgs#firefox \\\n  | jq -r '.[] | select(.outputs.out.hash and .env.urls) | .env.urls' \\\n  | uniq | sort\n```\n\n----------------------------------------\n\nTITLE: Set Pattern Function in Nix\nDESCRIPTION: Demonstrates a function that uses a set pattern to match a set containing specific attributes. This function requires exactly the attributes x, y, and z, and combines them in a specific order.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y, z }: z + y + x\n```\n\n----------------------------------------\n\nTITLE: Nix Pipe Operators Example\nDESCRIPTION: Example demonstrating the new pipe operators (<| and |>) introduced with the pipe-operators experimental feature. Shows how to chain function applications.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.24.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n1 |> builtins.add 2 |> builtins.mul 3\n\nbuiltins.add 1 <| builtins.mul 2 <| 3\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Remote Builders - Nix CLI - Console\nDESCRIPTION: Demonstrates usage of the '--builders' command line argument to pass a semicolon-separated list of multiple remote build machines, allowing distributed builds across platforms. Each builder is declared by URI and platform type. Requires SSH access to each remote builder.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n  --builders 'ssh://mac x86_64-darwin ; ssh://beastie x86_64-freebsd'\n```\n\n----------------------------------------\n\nTITLE: Instantiating Nix Expressions via Command-Line with nix-instantiate --expr - Shell\nDESCRIPTION: Illustrates how nix-instantiate can directly evaluate a Nix expression string provided via the --expr flag. The example imports the hello package from the nixpkgs channel. Requires an available nixpkgs channel via NIX_PATH and access to the Nix package manager. The resulting output is a derivation path for the requested package, which can be further built.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-instantiate.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate --expr 'with import <nixpkgs> { }; hello'\\n/nix/store/j8s4zyv75a724q38cb0r87rlczaiag4y-hello-2.8.drv\n```\n\n----------------------------------------\n\nTITLE: Overriding nixpkgs Source via -I and Providing Package - nix - console\nDESCRIPTION: This snippet shows use of the -I flag to provide a custom nixpkgs source (from a URL tarball) and starts an interactive shell with the pan package present. It demonstrates checking the version of Pan within the new environment. Inputs: pan package via nixpkgs, possibly a specific commit hash/tarball. Outputs: shell and version information.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell --packages pan -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2.tar.gz\n\n[nix-shell:~]$ pan --version\nPan 0.139\n```\n\n----------------------------------------\n\nTITLE: Checking Available Nix Version from Channel\nDESCRIPTION: Command to check which Nix version will be installed from a specific channel such as nixpkgs-unstable before performing an upgrade.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/upgrading.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell -p nix -I nixpkgs=channel:nixpkgs-unstable --run \"nix --version\"\nnix (Nix) 2.18.1\n```\n\n----------------------------------------\n\nTITLE: Multi-Output Derivation Declaration - Nix Language\nDESCRIPTION: Defines multiple outputs ('outputs' attribute) so the builder can separately produce library, development, and documentation files. Each output's path is exposed to the builder via environment variables, enabling fine-grained package splits. Ensures that consumers can pick the needed outputs independently.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  # ...\n  outputs = [ \"lib\" \"dev\" \"doc\" ];\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Nix Expression as Shebang Interpreter (Bash)\nDESCRIPTION: Illustrates embedding an inline Nix expression in a bash script, using the Nix shebang to evaluate the expression and provide a custom dependency configuration (e.g., terraform with plugins) under 'nix shell'. The snippet uses verbatim string syntax for passing the expression and supports cascading arguments. Requires Nix, a flake-enabled configuration for 'nixpkgs', and network access for fetching flakes. Key parameters are the expression string and package/plugin selection; outputs are results from downstream commands run within the provisioned environment.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/env nix\\n#! nix shell --impure --expr ``\\n#! nix with (import (builtins.getFlake \"nixpkgs\") {});\\n#! nix terraform.withPlugins (plugins: [ plugins.openstack ])\\n#! nix ``\\n#! nix --command bash\\n\\nterraform \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Installing Firefox from a Specific Channel using nix-env\nDESCRIPTION: Illustrates how to install Firefox from a specific channel (nixpkgs_unstable) using the new channel attribute system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.11.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -i -A nixpkgs_unstable.firefox\n```\n\n----------------------------------------\n\nTITLE: Displaying Store Derivation Path\nDESCRIPTION: This command prints the path of the store derivation produced by the nixpkgs#hello package. It shows where the build instructions for the hello package are stored, rather than the built package itself.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --derivation nixpkgs#hello\n/nix/store/s6rn4jz1sin56rf4qj5b5v8jxjm32hlk-hello-2.10.drv\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Nix Daemon Services on macOS\nDESCRIPTION: Commands to stop and remove Nix daemon services on macOS using launchctl.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo launchctl unload /Library/LaunchDaemons/org.nixos.nix-daemon.plist\nsudo rm /Library/LaunchDaemons/org.nixos.nix-daemon.plist\nsudo launchctl unload /Library/LaunchDaemons/org.nixos.darwin-store.plist\nsudo rm /Library/LaunchDaemons/org.nixos.darwin-store.plist\n```\n\n----------------------------------------\n\nTITLE: Making Downloaded Files Executable with fetchurl - Nix\nDESCRIPTION: Describes the enhancement to the 'corepkgs/fetchurl' function which now allows making a downloaded file executable. To use this feature, provide appropriate attributes to the fetchurl function in Nix expressions (in Nix 1.4+). The function fetches a file from a URL and sets the executable bit if requested. This change helps eliminate bootstrap binaries from Nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.4.md#_snippet_1\n\nLANGUAGE: Nix\nCODE:\n```\ncorepkgs/fetchurl\n```\n\n----------------------------------------\n\nTITLE: Specifying Target System in a Derivation - Nix Language\nDESCRIPTION: Sets the 'system' attribute to a fixed value to dictate the platform for a derivation build. Useful for cross-compilation or ensuring system compatibility. Requires Nix and the use of derivation attribute sets.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  # ...\n  system = \"x86_64-linux\";\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Non-default App from Flake - Console\nDESCRIPTION: Shows how to use nix run with a flake and a specific app output by referencing the app name (here, 'blender_2_83') after a hash. Requires the named app to exist in the flake's output attributes. The user must ensure the app specified exists using tools like nix flake show. Runs the chosen app and returns control to the user upon exit.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/run.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix run blender-bin#blender_2_83\n```\n\n----------------------------------------\n\nTITLE: Assigning a Custom Meson Build Directory (Bash)\nDESCRIPTION: Uses a shell variable to specify a custom build directory for Meson, enabling separation of build artifacts for multiple build configurations sharing the same source tree. Sets mesonBuildDir for subsequent phases.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmesonBuildDir=build-my-variant-name\n```\n\n----------------------------------------\n\nTITLE: Running Meson Test in Interactive Debug Mode (GDB) for Functional Tests - Shell Session\nDESCRIPTION: Provides a shell session example running Meson tests in '--interactive' mode to allow terminal-based debugging. Once the test reaches a 'gdb' invocation, users are dropped into the GDB debugger environment (shown by the '(gdb)' prompt), providing full debugging capabilities on the failing Nix command within the test script.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ meson test ${testName} --interactive\n...\n+ gdb blash blub\nGNU gdb (GDB) 12.1\n...\n(gdb)\n```\n\n----------------------------------------\n\nTITLE: Querying Packages by Name Pattern - nix-env Command - Console/Shell\nDESCRIPTION: This command queries all available packages whose names match a provided regular expression using nix-env. It requires nix-env and works best when the regex is carefully structured for the intended matches. The output filters packages by name, displaying matches along with versions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --query --available '.*zip.*'\nbzip2-1.0.6\ngzip-1.6\nzip-3.0\n…\n```\n\n----------------------------------------\n\nTITLE: Builder Usage of Output Variables (Autoconf-style) - Bash Script\nDESCRIPTION: Demonstrates a builder script fragment that configures output directories using environment variables passed for each output (lib, dev, doc). Typically used in packages supporting Autoconf arguments to direct installation. Expects environment variables to be set by the Nix builder prior to execution.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./configure \\\n  --libdir=$lib/lib \\\n  --includedir=$dev/include \\\n  --docdir=$doc/share/doc\n```\n\n----------------------------------------\n\nTITLE: Initializing shellHook with Environment Variables - Nix - nix\nDESCRIPTION: This Nix code defines a shellHook attribute to perform additional setup in a nix-shell environment. The shellHook prints a greeting and exports a user-specific API token as an environment variable. Dependencies include correct Nix evaluation and access to $HOME for file reading. Inputs are not required directly; outputs are side effects in the interactive shell environment. Limitations: Only affects nix-shell, not regular Nix builds.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nshellHook =\n  ''\n    echo \"Hello shell\"\n    export SOME_API_TOKEN=\"$(cat ~/.config/some-app/api-token)\"\n  '';\n```\n\n----------------------------------------\n\nTITLE: Upgrading All Possible Packages in User Environment with nix-env - Console\nDESCRIPTION: Demonstrates upgrading all installed packages that match available upgrades by invoking nix-env --upgrade with no arguments. Displays each package being upgraded with its old and new version using the standard console output format. Requires nix installed with a user environment containing upgradable packages.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/upgrade.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --upgrade\\nupgrading `hello-2.1.2' to `hello-2.1.3'\\nupgrading `mozilla-1.2' to `mozilla-1.4'\\n\n```\n\n----------------------------------------\n\nTITLE: Building All Outputs of a Derivation with nix-build - Shell Command - Console\nDESCRIPTION: This example demonstrates using nix-build to build all outputs of the OpenSSL derivation with the .all attribute, resulting in multiple symlinks (such as result, result-bin, result-man) for each output. This requires that the attribute specified produces multiple outputs, and depends on a properly configured nixpkgs. The primary parameter is the attribute path (\"--attr openssl.all\"), and the output is a set of symlinks corresponding to the outputs in the current directory.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-build.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build '<nixpkgs>' --attr openssl.all\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Operators in Nix\nDESCRIPTION: Demonstrates string and integer operations (+), comparisons (==, !=), boolean logic (!), attribute selection (.), and merging sets (//). Inputs must be of compatible types (e.g., concatenating strings or integers). Useful for expression evaluation and manipulation of values.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\n\"foo\" + \"bar\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n1 + 2\n```\n\nLANGUAGE: nix\nCODE:\n```\n\"foo\" == \"f\" + \"oo\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n\"foo\" != \"bar\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n!true\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ x = 1; y = 2; }.x\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ x = 1; y = 2; }.z or 3\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ x = 1; y = 2; } // { z = 3; }\n```\n\n----------------------------------------\n\nTITLE: Running GNU Hello with Custom Greeting\nDESCRIPTION: Example showing how to run the hello command with arguments directly without entering an interactive shell.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix shell nixpkgs#hello --command hello --greeting 'Hi everybody!'\nHi everybody!\n```\n\n----------------------------------------\n\nTITLE: Bundling with a Specific Bundler for Docker Images - Shell\nDESCRIPTION: This shell example demonstrates using 'nix bundle' with a custom bundler to produce a Docker image tarball. It specifies the '--bundler' flag with a flake reference, bundles the hello package, loads the image into Docker, and runs the hello binary in a container. Dependencies: Nix with access to required flakes, Docker installed. It showcases how bundlers extend nix bundle functionality.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/bundle.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix bundle --bundler github:NixOS/bundlers#toDockerImage nixpkgs#hello\\n# docker load < hello-2.10.tar.gz\\n# docker run hello-2.10:latest hello\\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Named Function Using Set Pattern in Nix\nDESCRIPTION: Shows how to give a name to a function by binding it to an attribute in a let expression. This example defines a concat function that takes a set with x and y attributes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_20\n\nLANGUAGE: nix\nCODE:\n```\nlet concat = { x, y }: x + y;\nin concat { x = \"foo\"; y = \"bar\"; }\n```\n\n----------------------------------------\n\nTITLE: Converting Ed25519 Secret Key to Public Key with Nix CLI - Shell\nDESCRIPTION: This shell command demonstrates converting an Ed25519 secret key to its public key using the 'nix key convert-secret-to-public' command. The secret key, provided as a string, is piped into the command via standard input, and the resulting public key is shown in standard output. This process requires the Nix tool to be installed and available in the user's environment. The command expects the input to be in the expected format (e.g., base64-encoded Ed25519 secret key with a key name prefix), and outputs the derived public key in a similar prefix format. Suitable for use on Unix-like systems.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/key-convert-secret-to-public.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# echo cache.example.org-0:E7lAO+MsPwTFfPXsdPtW8GKui/5ho4KQHVcAGnX+Tti1V4dUxoVoqLyWJ4YESuZJwQ67GVIksDt47og+tPVUZw== \\\n  | nix key convert-secret-to-public\ncache.example.org-0:tVeHVMaFaKi8lieGBErmScEOuxlSJLA7eO6IPrT1VGc=\n```\n\n----------------------------------------\n\nTITLE: Using a custom binary cache with Nix\nDESCRIPTION: Command to install a package while specifying a custom binary cache server as a substituter, allowing Nix to fetch pre-built packages from your server.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/binary-cache-substituter.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install --attr nixpkgs.firefox --substituters http://avalon:8080/\n```\n\n----------------------------------------\n\nTITLE: Getting Nixpkgs Version with Raw Output\nDESCRIPTION: Shows how to retrieve the current version of the nixpkgs flake using raw output format.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/eval.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --raw nixpkgs#lib.version\n```\n\n----------------------------------------\n\nTITLE: VSCode Configuration for nixfmt Formatter in .vscode/settings.json (JSON)\nDESCRIPTION: Contains an example of how to set up the nixfmt formatter in VSCode by adding configuration to .vscode/settings.json. Specifies the path to the formatter and sets up command arrays for different LSP servers (nixd, nil). To apply, paste into settings.json; works with format-on-save and Format Document features.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"nix.formatterPath\\\": \\\"nixfmt\\\",\\n  \\\"nix.serverSettings\\\": {\\n    \\\"nixd\\\": {\\n      \\\"formatting\\\": {\\n        \\\"command\\\": [\\n          \\\"nixfmt\\\"\\n        ],\\n      },\\n    },\\n    \\\"nil\\\": {\\n      \\\"formatting\\\": {\\n        \\\"command\\\": [\\n          \\\"nixfmt\\\"\\n        ],\\n      },\\n    },\\n  },\\n}\n```\n\n----------------------------------------\n\nTITLE: Using nix copy with System Profile Update (New Method)\nDESCRIPTION: The new streamlined approach for updating a local NixOS system profile from a remote system closure using the --profile flag with nix copy, which avoids potential garbage collection issues.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.26.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# nix copy --from ssh://server --profile /nix/var/nix/profiles/system $path\n```\n\n----------------------------------------\n\nTITLE: Escaping Nested Comments in Nix\nDESCRIPTION: Demonstrates a workaround for nested comments by escaping the inner comment terminator. This allows the outer comment to properly terminate at its own terminator.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_33\n\nLANGUAGE: nix\nCODE:\n```\n/* /* nested *\\/ */ 1\n```\n\n----------------------------------------\n\nTITLE: Using nix copy with System Profile Update (Before)\nDESCRIPTION: The previous two-step approach for updating a local NixOS system profile from a remote system closure. This approach had a potential vulnerability window for garbage collection.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.26.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# nix copy --from ssh://server $path\n# nix build --profile /nix/var/nix/profiles/system $path\n```\n\n----------------------------------------\n\nTITLE: Using Builder from Another Derivation - Nix Language\nDESCRIPTION: Assigns the 'builder' to a path inside another derivation (e.g., a Python interpreter), composing builds and leveraging Nix package dependencies. Requires the referenced derivation (such as 'pkgs.python') being imported from nixpkgs or another package set.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlet pkgs = import <nixpkgs> {}; in\nderivation {\n  # ...\n  builder = \"${pkgs.python}/bin/python\";\n  # ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Function in Nix\nDESCRIPTION: This example illustrates how to define a function in Nix. The function takes an argument 'x' and returns a string that includes the value of 'x'.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/constructs.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nx: \"Hello ${x}!\"\n```\n\n----------------------------------------\n\nTITLE: Copying a Package to a Local Binary Cache Using Nix CLI - Shell\nDESCRIPTION: This shell command uses the Nix CLI to copy the “hello” package from the nixpkgs set into a local binary cache at /tmp/binary-cache. It demonstrates use of the 'nix copy' subcommand with the --to flag to specify a file-based store. Requires Nix to be installed; the target path will be created if it doesn’t exist. The key parameter is the target URL, and the command expects that nixpkgs#hello is available either from the local store or by download.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/local-binary-cache-store.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# nix copy --to file:///tmp/binary-cache nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Reading Build Logs with nix-store --read-log (Console)\nDESCRIPTION: This snippet illustrates how to display the standard output and error logs of a previous Nix build using nix-store --read-log in combination with nix-instantiate. Dependencies: Nix and both referenced commands. Input: Path generated by nix-instantiate. Output: Build logs for the given derivation. Only applicable when a log exists for the given build.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/realise.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --read-log $(nix-instantiate ./test.nix)\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Size and Dependencies with Human Readable Format\nDESCRIPTION: This command shows a package's closure size and all its dependencies with human-readable size formatting. It recursively lists all dependencies of the rustc package with their individual and total sizes.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --recursive --size --closure-size --human-readable nixpkgs#rustc\n/nix/store/01rrgsg5zk3cds0xgdsq40zpk6g51dz9-ncurses-6.2-dev      386.7 KiB   69.1 MiB\n/nix/store/0q783wnvixpqz6dxjp16nw296avgczam-libpfm-4.11.0          5.9 MiB   37.4 MiB\n…\n```\n\n----------------------------------------\n\nTITLE: Blocking Recursive Dependencies with disallowedRequisites in Nix Derivation\nDESCRIPTION: Demonstrates using disallowedRequisites to prevent both direct and indirect runtime dependencies on a specific derivation. This ensures the output cannot depend on foobar or anything that depends on foobar.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\ndisallowedRequisites = [ foobar ];\n```\n\n----------------------------------------\n\nTITLE: Building and Running GNU Hello from Nixpkgs Flake\nDESCRIPTION: Shows how to build and run the GNU Hello package from the nixpkgs flake using 'nix build' and executing the resulting binary.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix build nixpkgs#hello\n# ./result/bin/hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Good Dictionary Example - Extensible Store Types\nDESCRIPTION: Example showing the recommended extensible approach with a dedicated storeTypes field and additional metadata. This pattern allows for future additions without breaking changes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/json-guideline.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storeTypes\": { \"local\": { ... }, ... },\n  \"pluginSupport\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Output Path - nix-env Console Command - Shell\nDESCRIPTION: Shows how to install a specific already-built output path by supplying the store hash-path to nix-env --install. Useful for installing binaries or packages whose store paths are already known and present.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_11\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install /nix/store/y3cgx0xj1p4iv9x0pnnmdhr8iyg741vk-gcc-3.4.3\n```\n\n----------------------------------------\n\nTITLE: Persistently Exporting NIX_SSL_CERT_FILE in Shell Profiles - Bash\nDESCRIPTION: This snippet ensures that the NIX_SSL_CERT_FILE variable is set for all interactive shell sessions by placing an export command in typical shell profile or rc files, such as ~/.bashrc or ~/.zshrc. It maintains a persistent configuration for the SSL certificate bundle needed by Nix. Prerequisites: The specified certificate bundle should exist. No arguments or expected outputs; ensures correct environment for Nix in future sessions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/env-variables.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport NIX_SSL_CERT_FILE=/etc/ssl/my-certificate-bundle.crt\n```\n\n----------------------------------------\n\nTITLE: Resolving Flake Directory Structure in Git - Tree Output - Markdown\nDESCRIPTION: Displays a directory tree illustrating how Nix identifies the relevant flake root and its relation to Git repositories during resolution. No direct commands are involved; the snippet visualizes a folder hierarchy with 'flake.nix' placement for context. Input: none; output: tree diagram used for documentation.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n.\n└── baz\n    ├── blah\n    │   └── file.txt\n    └── flake.nix\n```\n\n----------------------------------------\n\nTITLE: Directly Running Functional Test Shell Scripts with Debugging Tracing - Shell Session\nDESCRIPTION: Shows how to run a specific functional test shell script directly, setting 'TEST_NAME', clearing 'NIX_REMOTE', and customizing the shell prompt for line tracing via 'PS4'. The example output demonstrates use of shell tracing to inspect command-by-command progress and output, which is useful for debugging complex test scripts outside of the Meson harness.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ TEST_NAME=${testName} NIX_REMOTE='' PS4='+(${BASH_SOURCE[0]-$0}:$LINENO) tests/functional/${testName}.sh\n+(${testName}.sh:1) foo\noutput from foo\n+(${testName}.sh:2) bar\noutput from bar\n...\n```\n\n----------------------------------------\n\nTITLE: Verifying Nix Store Path Trust Status - Nix CLI - Shell\nDESCRIPTION: This command checks whether the specified Nix store paths are trusted. It validates trust by examining the number of trusted signatures, 'ultimately trusted' status, or whether the paths are content-addressed. Required dependency: a working Nix environment. Input is the store path(s) to verify, output is a trust report to stdout.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix verify\n```\n\n----------------------------------------\n\nTITLE: Building a Package from Tarball Using nix-build (Bash)\nDESCRIPTION: This shell example shows how to build a specified attribute (hello) using nix-build directly from a remote tarball, taking advantage of automatic expression tarball downloading in Nix 1.9. This enables building packages from specified Nixpkgs revisions without a local checkout. Inputs: tarball URL, attribute (-A); Output: built derivation result, typically symlinked in the local directory.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.9.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ nix-build https://github.com/NixOS/nixpkgs/archive/master.tar.gz -A hello\n```\n\n----------------------------------------\n\nTITLE: Using the -x Flag When Cherry-Picking Commits - Shell\nDESCRIPTION: Mentions the use of the '-x' flag while cherry-picking commits from other repositories in Git. The '-x' flag appends a short commit message referencing the original commit hash, aiding traceability. Contributors are further instructed to amend the commits afterward to convert commit hashes into direct URLs for clarity. Dependencies: Requires Git installed and familiarity with commit history management.\nSOURCE: https://github.com/nixos/nix/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-x\n```\n\n----------------------------------------\n\nTITLE: Initializing a Pure nix-shell with Custom Commands - bash - console\nDESCRIPTION: This example demonstrates starting a pure nix-shell environment for the 'pan' attribute from nixpkgs, exporting debug/core environment variables, and explicitly returning control for shell interaction. The use of export statements within --command allows custom variables to be set before the interactive session continues. Dependencies: relevant Nix environment and shell capabilities. Inputs: none beyond the command itself; outputs: customized shell environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell '<nixpkgs>' --attr pan --pure \\\n    --command 'export NIX_DEBUG=1; export NIX_CORES=8; return'\n```\n\n----------------------------------------\n\nTITLE: Adding Directory to Nix Store Example\nDESCRIPTION: Demonstrates how to create a directory, add a file to it, copy it to the Nix store using 'nix store add', and verify the contents. Shows that the path gets a unique hash-based identifier in the store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/add.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# mkdir dir\n# echo foo > dir/bar\n\n# nix store add ./dir\n/nix/store/6pmjx56pm94n66n4qw1nff0y1crm8nqg-dir\n\n# cat /nix/store/6pmjx56pm94n66n4qw1nff0y1crm8nqg-dir/bar\nfoo\n```\n\n----------------------------------------\n\nTITLE: Building an Inline Nix Expression with nix-build --expr - Shell Command - Console\nDESCRIPTION: This snippet demonstrates the use of the --expr argument to pass a Nix expression directly from the command line to nix-build, showing the creation of a simple build (\"foo\") that writes 'bar' to the output file. This technique is used for on-the-fly builds or quick scripts. The expected input is an expression string, dependencies are a functional Nix installation and available importable nixpkgs. The output is the evaluation of the command, creating a store path and a result symlink, with the content verified using cat.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-build.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build --expr 'with import <nixpkgs> { }; runCommand \"foo\" { } \"echo bar > $out\"'\n$ cat ./result\nbar\n```\n\n----------------------------------------\n\nTITLE: Assertion Syntax in Nix\nDESCRIPTION: Shows the syntax for assertions in Nix, which check requirements between features and dependencies. If e1 evaluates to true, e2 is returned; otherwise, evaluation aborts with a backtrace.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_22\n\nLANGUAGE: nix\nCODE:\n```\nassert e1; e2\n```\n\n----------------------------------------\n\nTITLE: Removing Registry Entry with Nix CLI - Console\nDESCRIPTION: This code demonstrates how to remove the entry 'nixpkgs' from the user registry using the Nix command-line interface. It requires Nix to be installed and available on the system. The command takes 'nixpkgs' as the registry entry identifier and does not require additional parameters. The command provides no output on success and will fail if the entry does not exist.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-remove.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix registry remove nixpkgs\n```\n\n----------------------------------------\n\nTITLE: Defining Example manifest.nix Entry - Nix - Nix\nDESCRIPTION: This snippet demonstrates the typical structure of a manifest.nix file entry generated after installing a package such as 'hello' from Nixpkgs. The entry includes comprehensive metadata about the package (e.g., license, platforms, maintainers), versions, installation outputs, the output path in the Nix store, and system compatibility attributes. There are no external dependencies beyond Nix itself; key parameters such as meta, outputs, and system specify provenance, install targets, and platform requirements. The file is expected to be a list of such attribute sets, where each set documents a single installed package for accurate query and update operations by Nix. Input is Nix data describing packages, output is a manifest aiding profile operations. Limitations are determined by the fields and values established within the Nixpkgs ecosystem.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/files/manifest.nix.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[{\n  meta = {\n    available = true;\n    broken = false;\n    changelog =\n      \"https://git.savannah.gnu.org/cgit/hello.git/plain/NEWS?h=v2.12.1\";\n    description = \"A program that produces a familiar, friendly greeting\";\n    homepage = \"https://www.gnu.org/software/hello/manual/\";\n    insecure = false;\n    license = {\n      deprecated = false;\n      free = true;\n      fullName = \"GNU General Public License v3.0 or later\";\n      redistributable = true;\n      shortName = \"gpl3Plus\";\n      spdxId = \"GPL-3.0-or-later\";\n      url = \"https://spdx.org/licenses/GPL-3.0-or-later.html\";\n    };\n    longDescription = ''\n      GNU Hello is a program that prints \"Hello, world!\" when you run it.\n      It is fully customizable.\n    '';\n    maintainers = [{\n      email = \"edolstra+nixpkgs@gmail.com\";\n      github = \"edolstra\";\n      githubId = 1148549;\n      name = \"Eelco Dolstra\";\n    }];\n    name = \"hello-2.12.1\";\n    outputsToInstall = [ \"out\" ];\n    platforms = [\n      \"i686-cygwin\"\n      \"x86_64-cygwin\"\n      \"x86_64-darwin\"\n      \"i686-darwin\"\n      \"aarch64-darwin\"\n      \"armv7a-darwin\"\n      \"i686-freebsd13\"\n      \"x86_64-freebsd13\"\n      \"aarch64-genode\"\n      \"i686-genode\"\n      \"x86_64-genode\"\n      \"x86_64-solaris\"\n      \"js-ghcjs\"\n      \"aarch64-linux\"\n      \"armv5tel-linux\"\n      \"armv6l-linux\"\n      \"armv7a-linux\"\n      \"armv7l-linux\"\n      \"i686-linux\"\n      \"m68k-linux\"\n      \"microblaze-linux\"\n      \"microblazeel-linux\"\n      \"mipsel-linux\"\n      \"mips64el-linux\"\n      \"powerpc64-linux\"\n      \"powerpc64le-linux\"\n      \"riscv32-linux\"\n      \"riscv64-linux\"\n      \"s390-linux\"\n      \"s390x-linux\"\n      \"x86_64-linux\"\n      \"mmix-mmixware\"\n      \"aarch64-netbsd\"\n      \"armv6l-netbsd\"\n      \"armv7a-netbsd\"\n      \"armv7l-netbsd\"\n      \"i686-netbsd\"\n      \"m68k-netbsd\"\n      \"mipsel-netbsd\"\n      \"powerpc-netbsd\"\n      \"riscv32-netbsd\"\n      \"riscv64-netbsd\"\n      \"x86_64-netbsd\"\n      \"aarch64_be-none\"\n      \"aarch64-none\"\n      \"arm-none\"\n      \"armv6l-none\"\n      \"avr-none\"\n      \"i686-none\"\n      \"microblaze-none\"\n      \"microblazeel-none\"\n      \"msp430-none\"\n      \"or1k-none\"\n      \"m68k-none\"\n      \"powerpc-none\"\n      \"powerpcle-none\"\n      \"riscv32-none\"\n      \"riscv64-none\"\n      \"rx-none\"\n      \"s390-none\"\n      \"s390x-none\"\n      \"vc4-none\"\n      \"x86_64-none\"\n      \"i686-openbsd\"\n      \"x86_64-openbsd\"\n      \"x86_64-redox\"\n      \"wasm64-wasi\"\n      \"wasm32-wasi\"\n      \"x86_64-windows\"\n      \"i686-windows\"\n    ];\n    position =\n      \"/nix/store/7niq32w715567hbph0q13m5lqna64c1s-nixos-unstable.tar.gz/nixos-unstable.tar.gz/pkgs/applications/misc/hello/default.nix:34\";\n    unfree = false;\n    unsupported = false;\n  };\n  name = \"hello-2.12.1\";\n  out = {\n    outPath = \"/nix/store/260q5867crm1xjs4khgqpl6vr9kywql1-hello-2.12.1\";\n  };\n  outPath = \"/nix/store/260q5867crm1xjs4khgqpl6vr9kywql1-hello-2.12.1\";\n  outputs = [ \"out\" ];\n  system = \"x86_64-linux\";\n  type = \"derivation\";\n}]\n```\n\n----------------------------------------\n\nTITLE: Building by Attribute Name Using nix-build - Shell\nDESCRIPTION: This command invokes nix-build on a specific Nix expression file and builds the derivation identified by the supplied attribute name using -A. This enables unique, unambiguous specification of which package or derivation to build. Prerequisites: a valid Nix expression referenced by path and correctly named attributes. Outputs a build result for 'foo'. Limitations: 'foo' must exist as an attribute.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnix-build pkgs/top-level/all-packages.nix -A foo\n```\n\n----------------------------------------\n\nTITLE: Evaluating Simple Nix Expression\nDESCRIPTION: Demonstrates how to evaluate a basic Nix expression directly from the command line.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/eval.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --expr '1 + 2'\n```\n\n----------------------------------------\n\nTITLE: Regenerating Characterisation Test Baselines with _NIX_TEST_ACCEPT and Meson - Shell Session\nDESCRIPTION: This snippet shows how setting the '_NIX_TEST_ACCEPT' environment variable to '1' when running Meson unit tests (here for 'nix-store-tests') causes characterisation tests to regenerate their expected results rather than perform standard test comparisons. Skipped tests indicate that baselines (\"golden masters\") have been updated—a step commonly used when intentionally updating specimen outputs after functional changes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ _NIX_TEST_ACCEPT=1 meson test nix-store-tests -v\n...\n[  SKIPPED ] WorkerProtoTest.string_read\n[  SKIPPED ] WorkerProtoTest.string_write\n[  SKIPPED ] WorkerProtoTest.storePath_read\n[  SKIPPED ] WorkerProtoTest.storePath_write\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Nix Profile Symlinks - Unix Shell - Console\nDESCRIPTION: This shell snippet demonstrates how to list all profile-related symlinks for a user in the Nix profiles directory. It shows the resolution of versioned profile symlinks and their targets within the Nix store. There are no code dependencies but assumes that the Nix package manager is installed and manages user profiles. The output provides insight into how profiles, their versions, and corresponding store locations are organized and can help with troubleshooting or understanding profile management.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profiles.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l ~alice/.local/state/nix/profiles/profile*\nlrwxrwxrwx 1 alice users 14 Nov 25 14:35 /home/alice/.local/state/nix/profiles/profile -> profile-7-link\nlrwxrwxrwx 1 alice users 51 Oct 28 16:18 /home/alice/.local/state/nix/profiles/profile-5-link -> /nix/store/q69xad13ghpf7ir87h0b2gd28lafjj1j-profile\nlrwxrwxrwx 1 alice users 51 Oct 29 13:20 /home/alice/.local/state/nix/profiles/profile-6-link -> /nix/store/6bvhpysd7vwz7k3b0pndn7ifi5xr32dg-profile\nlrwxrwxrwx 1 alice users 51 Nov 25 14:35 /home/alice/.local/state/nix/profiles/profile-7-link -> /nix/store/mp0x6xnsg0b8qhswy6riqvimai4gm677-profile\n```\n\n----------------------------------------\n\nTITLE: Renaming Flake Default Attributes in Nix 2.7\nDESCRIPTION: Migration guide showing the renaming of default flake output attributes in Nix 2.7. The old attribute names are deprecated but still functional, with warnings shown during flake checks.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.7.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\ndefaultPackage.<system> → packages.<system>.default\ndefaultApps.<system> → apps.<system>.default\ndefaultTemplate → templates.default\ndefaultBundler.<system> → bundlers.<system>.default\noverlay → overlays.default\ndevShell.<system> → devShells.<system>.default\n```\n\n----------------------------------------\n\nTITLE: Embedding Nix Evaluator Programmatically - C\nDESCRIPTION: This code demonstrates initializing the Nix evaluator and evaluating a Nix expression from C with the Nix C API, printing out the result. Dependencies include the Nix C API headers and libraries (linked via pkg-config nix-expr-c). Key parameters set up a dummy store backend and initialize the Nix evaluation context, then the code evaluates the expression builtins.nixVersion and extracts its value. The code lacks error handling and should be adapted for robustness in production environments.\nSOURCE: https://github.com/nixos/nix/blob/master/src/external-api-docs/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <nix_api_util.h>\\n#include <nix_api_expr.h>\\n#include <nix_api_value.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// NOTE: This example lacks all error handling. Production code must check for\\n// errors, as some return values will be undefined.\\n\\nvoid my_get_string_cb(const char * start, unsigned int n, void * user_data)\\n{\\n    *((char **) user_data) = strdup(start);\\n}\\n\\nint main()\\n{\\n    nix_libexpr_init(NULL);\\n\\n    Store * store = nix_store_open(NULL, \\\"dummy://\\\", NULL);\\n    EvalState * state = nix_state_create(NULL, NULL, store); // empty search path (NIX_PATH)\\n    Value * value = nix_alloc_value(NULL, state);\\n\\n    nix_expr_eval_from_string(NULL, state, \\\"builtins.nixVersion\\\", \\\".\\\", value);\\n    nix_value_force(NULL, state, value);\\n\\n    char * version;\\n    nix_get_string(NULL, value, my_get_string_cb, &version);\\n    printf(\\\"Nix version: %s\\\\n\\\", version);\\n\\n    free(version);\\n    nix_gc_decref(NULL, value);\\n    nix_state_free(state);\\n    nix_store_free(store);\\n    return 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Bad List Example - Non-extensible Outputs\nDESCRIPTION: Example showing a non-extensible way to represent outputs as a simple array. This approach doesn't allow for additional metadata per output.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/json-guideline.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"outputs\": [ \"out\" \"bin\" ] }\n```\n\n----------------------------------------\n\nTITLE: Loading Saved Build Environment\nDESCRIPTION: Load a previously saved build environment from a profile.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# nix develop /tmp/my-build-env\n```\n\n----------------------------------------\n\nTITLE: Limiting Closure Dependencies with allowedRequisites in Nix Derivation\nDESCRIPTION: Demonstrates how to use allowedRequisites to specify legal requisites for the whole closure of a derivation. This ensures that the output can only depend on foobar and that foobar itself doesn't introduce other dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nallowedRequisites = [ foobar ];\n```\n\n----------------------------------------\n\nTITLE: Using Control Structures in Nix\nDESCRIPTION: Provides syntax for conditionals (if/then/else), assertions, let-bindings, with-expressions (importing attributes), and inheritance of attributes from other sets. Useful for scalable and maintainable Nix expressions. No external dependencies required, but may reference built-in or imported values.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\nif 1 + 1 == 2 then \"yes!\" else \"no!\"\n```\n\nLANGUAGE: nix\nCODE:\n```\nassert 1 + 1 == 2; \"yes!\"\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet x = \"foo\"; y = \"bar\"; in x + y\n```\n\nLANGUAGE: nix\nCODE:\n```\nwith builtins; head [ 1 2 3 ]\n```\n\nLANGUAGE: nix\nCODE:\n```\ninherit pkgs src;\n```\n\nLANGUAGE: nix\nCODE:\n```\ninherit (pkgs) lib stdenv;\n```\n\n----------------------------------------\n\nTITLE: Printing Build Logs using nix-store (Console)\nDESCRIPTION: This snippet demonstrates invoking the 'nix-store --read-log' command on a specified binary using command substitution (\\$(which ktorrent)). The command prints the build log if available, fetched from /nix/var/log/nix/drvs, to standard output. It assumes a working Nix environment and that 'ktorrent' exists in the Nix store, with log availability depending on how the store path was created (built locally or substituted).\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/read-log.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --read-log $(which ktorrent)\nbuilding /nix/store/dhc73pvzpnzxhdgpimsd9sw39di66ph1-ktorrent-2.2.1\nunpacking sources\nunpacking source archive /nix/store/p8n1jpqs27mgkjw07pb5269717nzf5f8-ktorrent-2.2.1.tar.gz\nktorrent-2.2.1/\nktorrent-2.2.1/NEWS\n...\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Profile Generations with nix-env - Console\nDESCRIPTION: Demonstrates how to delete explicit profile generations by number using nix-env. No additional dependencies aside from a functional Nix installation are required. Arguments are specific generation numbers, and the command will delete all specified generations except the currently active one, which cannot be removed.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/delete-generations.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --delete-generations 3 4 8\n```\n\n----------------------------------------\n\nTITLE: Installing from Remote Nixpkgs Channel by Attribute Path - nix-env Console Command - Shell\nDESCRIPTION: Demonstrates installation of a package from the Nixpkgs/NixOS channel tarball hosted remotely. Combines --file with a remote tar.gz URL and --attr to select the desired derivation. Requires Internet access and valid channel reference.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_14\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --file https://github.com/NixOS/nixpkgs/archive/nixos-14.12.tar.gz --install --attr firefox\n```\n\n----------------------------------------\n\nTITLE: Nix-Shell Shebang Script Example\nDESCRIPTION: Example of a nix-shell shebang script showing the new behavior of relative path resolution. Paths are now resolved relative to the script's location rather than the current working directory.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.24.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env nix-shell\n#!nix-shell --expr 'import ./shell.nix'\n#!nix-shell --arg toolset './greeting-tools.nix'\n#!nix-shell -i bash\nhello\n```\n\n----------------------------------------\n\nTITLE: Copying Input-Addressed Nix Store Path Requiring Signature - Shell Example\nDESCRIPTION: This shell command demonstrates attempting to copy an input-addressed Nix store path with \"nix copy\". Unlike content-addressed copying, this operation fails when a required signature is missing, as the input-addressed form demands verification by a trusted key. Shown by the output error, the input path lacks a trusted signature. Requires an input-addressed installable reference and highlights the signature verification constraint for input-addressed paths.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/make-content-addressed.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --to /tmp/nix --trusted-public-keys '' nixpkgs#hello\ncannot add path '/nix/store/zy9wbxwcygrwnh8n2w9qbbcr6zk87m26-libunistring-0.9.10' because it lacks a signature by a trusted key\n```\n\n----------------------------------------\n\nTITLE: Copying Closures from a Remote Server - Nix Copy Closure - Console\nDESCRIPTION: This 'nix-copy-closure' command copies the full closure (all dependencies recursively) of a given Nix store path from a remote SSH server to the local store. It assists in bulk or recursive deployments by using SSH for transport. Prerequisites: 'nix-copy-closure' utility, SSH key access. Input: remote user/host, store path; Output: copies all referenced store files locally.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/ssh-substituter.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-copy-closure --from alice@avalon\n/nix/store/m85bxg…-firefox-34.0.5\n```\n\n----------------------------------------\n\nTITLE: Specifying Derivation Input Dependencies in Nix Derivation JSON - JSON\nDESCRIPTION: This snippet demonstrates the 'inputDrvs' field in a Nix derivation JSON, mapping dependent derivation store paths to arrays of output names needed as inputs. Each key is a store path to another derivation (.drv file), while the associated array lists the outputs required from that derivation. This structure enables Nix to track and build dependency relationships between derivations during evaluation and build phases.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/json/derivation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"/nix/store/6lkh5yi7nlb7l6dr8fljlli5zfd9hq58-curl-7.73.0.drv\\\": [\\\"dev\\\"],\\n  \\\"/nix/store/fn3kgnfzl5dzym26j8g907gq3kbm8bfh-unzip-6.0.drv\\\": [\\\"out\\\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Attribute Paths - nix-env Console Command - Shell\nDESCRIPTION: Demonstrates how to use the nix-env command with --query, --available, and --attr-path to list all possible package attribute paths. This helps users to discover unambiguous identifiers for package installation. The command requires a working Nix installation and access to the Nix package channels or expressions. No parameters are needed; output is a list of attribute paths for packages.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\nnix-env --query --available --attr-path\n```\n\n----------------------------------------\n\nTITLE: Installing from a Nix File - nix-env Console Command - Shell\nDESCRIPTION: Shows how to install a Nix derivation directly from an expression file using nix-env --install --file. The command expects a valid Nix file and installs all outputs defined in the derivation to the user's profile. Requires a working Nix environment and the specified file on disk.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install --file example.nix\ninstalling 'example'\n$ ls ~/.nix-profile\nfoo-file\nbar-file\nmanifest.nix\n```\n\n----------------------------------------\n\nTITLE: Creating Flake Lock File via Nix CLI - Console\nDESCRIPTION: Demonstrates how to generate a new flake lock file (flake.lock) in the current directory using the 'nix flake lock' command. This snippet includes both the command itself and typical output, showing added dependencies and their sources. No external dependencies beyond a working Nix installation and a flake setup are required; expected inputs include the current directory's flake.nix. Outputs consist of a lock file and a summary of locked dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-lock.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake lock\nwarning: creating lock file '/home/myself/repos/testflake/flake.lock':\n• Added input 'nix':\n    'github:NixOS/nix/9fab14adbc3810d5cc1f88672fde1eee4358405c' (2023-06-28)\n• Added input 'nixpkgs':\n    'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)\n```\n\n----------------------------------------\n\nTITLE: Building via Nix File and Expression with Selected Outputs - Console\nDESCRIPTION: Shows two alternative ways to build the 'glibc' package from the Nix package set, using -f and --expr flags with output selection ('^dev,static'). These forms require the user to have access to the Nix expressions and packages referenced. Input is a package name and output selection, result is build artifacts for the specified outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ nix build -f '<nixpkgs>' 'glibc^dev,static'\n$ nix build --impure --expr 'import <nixpkgs> { }' 'glibc^dev,static'\n```\n\n----------------------------------------\n\nTITLE: Using --regex and --all Flags with nix profile - Shell\nDESCRIPTION: Demonstrates the new explicit use of the --regex flag and the new --all flag for removing and upgrading packages in Nix profiles. Inputs are either a regex for matching or no args for upgrading all. Output is targeted package manipulation. Shell environment with Nix CLI is required.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnix profile remove --regex '.*vim.*'\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnix profile upgrade --all\n```\n\n----------------------------------------\n\nTITLE: Deleting Unreachable Paths in Nix Store\nDESCRIPTION: This command deletes all unreachable paths in the Nix store. It's used for basic garbage collection without any specific constraints.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-gc.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store gc\n```\n\n----------------------------------------\n\nTITLE: Querying Installed Packages with Meta-Information using nix-env\nDESCRIPTION: Shows how to use nix-env to query installed packages and display their meta-information in XML format.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.11.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -q --xml --meta\n```\n\n----------------------------------------\n\nTITLE: Showing a Store Derivation Using Nix CLI - Console\nDESCRIPTION: Demonstrates how to use ‘nix derivation show’ to print a specific derivation by referencing a package from the nixpkgs set (here, ‘hello’). This command outputs a JSON object representing the derivation stored in the Nix store. It requires the Nix package manager and access to a valid Nixpkgs channel or flake reference. The primary input is a package attribute or flake reference, and it outputs a formatted JSON with the derivation details.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/derivation-show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix derivation show nixpkgs#hello\n{\n  \"/nix/store/s6rn4jz1sin56rf4qj5b5v8jxjm32hlk-hello-2.10.drv\": {\n    …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Garbage Collection with nix-store --gc - Console - Shell\nDESCRIPTION: This snippet demonstrates invoking the nix-store utility with the --gc flag to delete all unreachable paths in the Nix store. The command may output the names of deleted store paths and a summary of the total bytes freed. It requires a working Nix environment and adequate permissions. The command does not take additional arguments and is used primarily for general cleanup.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/gc.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --gc\\ndeleting \\`/nix/store/kq82idx6g0nyzsp2s14gfsc38npai7lf-cairo-1.0.4.tar.gz.drv'\\n...\\n8825586 bytes freed (8.42 MiB)\\n\n```\n\n----------------------------------------\n\nTITLE: Make Variable Reference Example\nDESCRIPTION: Demonstrates using $$ syntax for Make variables in Nix strings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-interpolation.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n''\n  MAKEVAR = Hello\n  all:\n  \t@export BASHVAR=world; echo $(MAKEVAR) $${BASHVAR}\n''\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Curly (${) in Standard Nix Strings - Nix\nDESCRIPTION: Illustrates how to encode a literal `${` inside a Nix double-quoted string by escaping the dollar sign. This prevents unintended triggering of string interpolation. The snippet is necessary when the output string must include this sequence as a plain text value rather than as a variable.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n\"\\${\"\n```\n\n----------------------------------------\n\nTITLE: Locating Garbage Collector Roots Pointing to a Store Path with nix-store --query --roots - Console\nDESCRIPTION: This snippet lists all garbage collector roots that reference a store path on which svn depends using nix-store --query --roots and which. The command returns file paths pointing to GC roots, which can be useful for maintenance or cleanup of the Nix store. Requires no additional dependencies outside of Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/query.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --query --roots $(which svn)\\n/nix/var/nix/profiles/default-81-link\\n/nix/var/nix/profiles/default-82-link\\n/home/eelco/.local/state/nix/profiles/profile-97-link\n```\n\n----------------------------------------\n\nTITLE: Defining Nix Channel Subscription Format in Plaintext\nDESCRIPTION: This snippet shows the format for storing subscribed Nix channels in a plaintext file. Each line contains a URL and a name for a channel, separated by a space.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/files/channels.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<url> <name>\n...\n```\n\n----------------------------------------\n\nTITLE: Exporting a Closure with nix-store --export (Shell)\nDESCRIPTION: This snippet demonstrates how to use nix-build to generate a store path for GNU Hello, then exports all requisites (dependencies) of that path to a file using nix-store --export. Dependencies: Nix, access to the nixpkgs channel, and permissions to build and export store paths. The $storePath variable holds the result of the build, which is exported to hello.closure. Input: Nix expressions and attribute name; Output: An exported closure file.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/import.md#_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ storePath=\"$(nix-build '<nixpkgs>' -I nixpkgs=channel:nixpkgs-unstable -A hello --no-out-link)\"\n$ nix-store --export $(nix-store --query --requisites $storePath) > hello.closure\n```\n\n----------------------------------------\n\nTITLE: Installing Using Expression Argument\nDESCRIPTION: Command to install a package using a Nix expression specified as command-line argument\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-env -f .../i686-linux.nix -i -E 'x: x.firefoxWrapper'\n```\n\n----------------------------------------\n\nTITLE: Showing Human-Readable Descriptions Using nix-env - Shell\nDESCRIPTION: This command adds the --description flag to nix-env's query for available packages, displaying their human-readable meta.description fields if present. Dependencies are an updated Nix and a packages database with meta.description attributes. Outputs package names with their descriptions. Packages lacking meta.description will have none displayed.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -qa --description\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Build Log for a Local Derivation - Nix CLI - Shell\nDESCRIPTION: This shell snippet shows how to use nix-store to fetch the build log associated with the xterm package. The command uses nix-store -l and the path retrieved from which xterm, relying on the new log-server capabilities in Nix 1.8. If the log isn't available locally, it will attempt to retrieve it remotely from a configured log server. The output will either be the content of the build log or an error if logs aren't found or servers are misconfigured.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.8.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-store -l $(which xterm)\n```\n\n----------------------------------------\n\nTITLE: Cyclically Referencing Derivations - Nix - Nix Language\nDESCRIPTION: These related Nix expressions illustrate the ability to define derivations that reference each other cyclically, made possible by the new lazy behavior. 'webServer' and 'svnService' derivations each refer to the other's attributes, exemplifying flexibility for mutual dependencies. The primary requirement is Nix 0.9 or newer. This pattern is particularly useful for services with mutually dependent configuration fields and eliminates infinite recursion previously encountered.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.9.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nwebServer = derivation {\n  ...\n  hostName = \"svn.cs.uu.nl\";\n  services = [svnService];\n};\n```\n\nLANGUAGE: nix\nCODE:\n```\nsvnService = derivation {\n  ...\n  hostName = webServer.hostName;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Nix Flake Registry Entry - JSON\nDESCRIPTION: This snippet presents the expected JSON schema for a flake registry file used by the Nix package manager. The format specifies a version field and an array of flakes, each containing 'from' and 'to' objects that map symbolic flake identifiers to their actual sources (e.g., remotes like GitHub). Dependencies include Nix's flake registry resolution logic, and the 'version' field ensures compatibility. Each 'from' field should match the structure of a flake reference, while 'to' replaces it upon resolution. Inputs are registry entries in attribute representation; the output is the mapping from symbolic names to remote repositories. The snippet assumes version 2 of the schema and requires properly formatted flake references.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"version\\\": 2,\\n  \\\"flakes\\\": [\\n    {\\n      \\\"from\\\": {\\n        \\\"type\\\": \\\"indirect\\\",\\n        \\\"id\\\": \\\"nixpkgs\\\"\\n      },\\n      \\\"to\\\": {\\n        \\\"type\\\": \\\"github\\\",\\n        \\\"owner\\\": \\\"NixOS\\\",\\n        \\\"repo\\\": \\\"nixpkgs\\\"\\n      }\\n    },\\n    ...\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Secret Signing Key with Nix - Shell/Console\nDESCRIPTION: This snippet demonstrates generating a new Ed25519 secret key for Nix store signing using the nix key generate-secret command. It outputs the new key to a specified file. Dependency: Nix must be installed and set up in your environment. The --key-name parameter should be a unique identifier, typically the cache hostname with an incrementing suffix. Output is written to ./secret-key. Ensure the output file is stored securely.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/key-generate-secret.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix key generate-secret --key-name cache.example.org-1 > ./secret-key\n```\n\n----------------------------------------\n\nTITLE: Error Output for Incorrect Flake Output Types - Nix Flakes - Plaintext\nDESCRIPTION: These output examples show error messages from Nix flake operations when a flake output is not the expected type. The updated error after 2.23.0 includes more detailed type and value information, which improves debuggability for users and developers diagnosing flake output issues. No dependencies are involved, as this is output, not code. Input is a user command, output is the error message.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.23.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: flake output attribute 'nixosConfigurations.yuki.config' is not a derivation or path\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: expected flake output attribute 'nixosConfigurations.yuki.config' to be a derivation or path but found a set: { appstream = «thunk»; assertions = «thunk»; boot = { bcache = «thunk»; binfmt = «thunk»; binfmtMiscRegistrations = «thunk»; blacklistedKernelModules = «thunk»; bootMount = «thunk»; bootspec = «thunk»; cleanTmpDir = «thunk»; consoleLogLevel = «thunk»; «43 attributes elided» }; «48 attributes elided» }\n```\n\n----------------------------------------\n\nTITLE: Verifying the Entire Nix Store\nDESCRIPTION: This command verifies the integrity and authenticity of all paths in the Nix store. It checks that the contents match the NAR hash in the Nix database and that each path is trusted.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/verify.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store verify --all\n```\n\n----------------------------------------\n\nTITLE: Direct Build Phase Execution\nDESCRIPTION: Commands to directly execute specific build phases using nix develop.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix develop --unpack\n# nix develop --configure\n# nix develop --build\n# nix develop --check\n# nix develop --install\n# nix develop --installcheck\n```\n\n----------------------------------------\n\nTITLE: Sample Output Showing Darwin - Console\nDESCRIPTION: Provides the expected output ('Darwin') after running 'cat ./result' for a remote Darwin build, showing that the remote architecture differs from the local. This confirms the build's proper execution on a macOS builder.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nDarwin\n```\n\n----------------------------------------\n\nTITLE: Creating and Reading Output from a Derivation in Nix (Nix Language)\nDESCRIPTION: This Nix snippet creates a derivation named \\\"hello\\\" which builds a file with the contents \\\"hello\\\" and then reads its contents as part of a larger string (appending \\\" world\\\"). It uses the built-in functions 'derivation' and 'builtins.readFile', requiring a valid Nix environment with shell access and the current system variable. The input (\\\"drv\\\") is a derivation expression; the output is a lazily evaluated string that concatenates the built derivation's result with \\\" world\\\". Realization and reading will only occur if IFD is allowed. Limitations: Requires Nix evaluator permissions and the right configuration for IFD; relies on system tools and Nix built-ins.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/import-from-derivation.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n# IFD.nix\nlet\n  drv = derivation {\n    name = \"hello\";\n    builder = \"/bin/sh\";\n    args = [ \"-c\" \"echo -n hello > $out\" ];\n    system = builtins.currentSystem;\n  };\nin \"${builtins.readFile drv} world\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Forcing a Rebuild of the Nix Manual - Console\nDESCRIPTION: This snippet removes all generated markdown source files for the manual, deletes a specific directory, and then initiates a full manual rebuild. It uses a combination of rm, git, grep, rmdir, and make commands. This approach ensures that changes to the Makefile or source structure are reflected during a rebuild and avoids stale artifacts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nrm $(git ls-files doc/manual/ -o | grep -F '.md') && rmdir doc/manual/source/command-ref/new-cli && make manual-html -j $NIX_BUILD_CORES\n```\n\n----------------------------------------\n\nTITLE: Setting ssl-cert-file Option in Nix Configuration - Config\nDESCRIPTION: This configuration snippet shows how to specify the location of a custom SSL certificate bundle file for the Nix daemon using the nix.conf configuration file. Adding this line ensures the daemon uses the desired certificate file for secure operations. This is required only if a custom certificate is necessary, and the file path must be valid on the system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/env-variables.md#_snippet_3\n\nLANGUAGE: config\nCODE:\n```\nssl-cert-file = /etc/ssl/my-certificate-bundle.crt\n```\n\n----------------------------------------\n\nTITLE: Validating SSH and Nix Command Access - Console Shell\nDESCRIPTION: Demonstrates an expected failure when invoking 'nix' via SSH if the Nix binary is not on the PATH of a non-interactive login shell. The error presents both the remote shell output and the higher-level connection error, useful for diagnosing misconfiguration. The snippet illustrates what to expect and helps guide users to check the PATH on the remote system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nbash: nix: command not found\nerror: cannot connect to 'mac'\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Output Checks with outputChecks in Nix Derivation\nDESCRIPTION: Shows how to use outputChecks with structured attributes to define size limits and dependency restrictions for specific outputs. This example sets maximum closure size and disallowed dependencies for 'out', and maximum size for 'dev'.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n__structuredAttrs = true;\n\noutputChecks.out = {\n  # The closure of 'out' must not be larger than 256 MiB.\n  maxClosureSize = 256 * 1024 * 1024;\n\n  # It must not refer to the C compiler or to the 'dev' output.\n  disallowedRequisites = [ stdenv.cc \"dev\" ];\n};\n\noutputChecks.dev = {\n  # The 'dev' output must not be larger than 128 KiB.\n  maxSize = 128 * 1024;\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression in Nix\nDESCRIPTION: Shows the syntax for conditional expressions in Nix. The expression e1 must evaluate to a Boolean value, then either e2 or e3 is returned depending on whether e1 is true or false.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_21\n\nLANGUAGE: nix\nCODE:\n```\nif e1 then e2 else e3\n```\n\n----------------------------------------\n\nTITLE: Installing Built Store Path\nDESCRIPTION: Command to install an already built store path directly\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-env -i /nix/store/hsyj5pbn0d9i...-aterm-2.3.1\n```\n\n----------------------------------------\n\nTITLE: Defining Name Syntax Using Grammar Notation - Nix Language - Plain Text\nDESCRIPTION: This snippet specifies the syntax for a Nix 'name', stating that it can be either an identifier or a string. It is written in informal Backus-Naur Form style and provides a concise rule for name validation in the language grammar. There are no technical dependencies; inputs are identifiers or string literals and output is recognition of valid names. Limitations include reliance on definitions of constituent elements (identifier and string).\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/identifiers.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nname → identifier | string\n```\n\n----------------------------------------\n\nTITLE: Querying Packages from Specific Nix Expression - nix-env Command - Console/Shell\nDESCRIPTION: This command queries available packages defined in a specific Nix expression file using the --file flag. The nix-env tool must be present, and you must provide a valid file path. The command outputs a list of packages, allowing you to inspect custom package definitions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --file ./foo.nix --query --available\nfoo-1.2.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Alejandra in flake.nix for Nix Formatting\nDESCRIPTION: This snippet illustrates how to configure Alejandra as the formatter for x86_64-linux in a flake.nix file. It specifies the Alejandra package from nixpkgs in the outputs section.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/fmt.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n# flake.nix\n{\n  outputs = { nixpkgs, self }: {\n    formatter.x86_64-linux = nixpkgs.legacyPackages.x86_64-linux.alejandra;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Garbage Collection with Profile Deletion - Console\nDESCRIPTION: This example demonstrates how to invoke the nix-collect-garbage tool with the -d flag to delete all old generations of user profiles before removing unreachable store objects, effectively cleaning up disk space. No dependencies besides a functional Nix installation are required. Input: a nix-collect-garbage command line; Output: deleted profiles and cleaned up store objects; Use with care as deleted profiles cannot be rolled back.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-collect-garbage.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-collect-garbage -d\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Feature for Content Addressing in Nix Configuration (Config Snippet)\nDESCRIPTION: This code snippet shows how to enable the 'ca-derivations' experimental feature in the Nix configuration file. Adding the specified line to 'nix.conf' causes Nix to allow floating content-addressing for derivation outputs. This is required for using certain advanced content-addressing behaviors in Nix builds. Dependency is a recent Nix version supporting the experimental feature. No parameters required; input is the line in config, output is altered build feature availability.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/outputs/content-address.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nextra-experimental-features = ca-derivations\n```\n\n----------------------------------------\n\nTITLE: Generating Nix Archive (NAR) from Directory using nix nar pack\nDESCRIPTION: This command serializes a directory named 'foo' into a Nix Archive (NAR) file. The output is redirected to a file named 'foo.nar'. The command must be run with root privileges.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nar-dump-path.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix nar pack ./foo > foo.nar\n```\n\n----------------------------------------\n\nTITLE: Querying Build Log from Specific Binary Cache with Nix CLI - Console\nDESCRIPTION: This example uses the `--store` option with the `nix log` command to explicitly specify a remote binary cache URL. It retrieves the build log for the package (attribute) from the remote cache (here, `https://cache.nixos.org`) rather than the local store or default caches. The command requires network access and appropriate permissions, and can be used to debug or audit builds in decentralized environments.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/log.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix log --store https://cache.nixos.org nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Querying Dependencies Using Nix why-depends - Console\nDESCRIPTION: This snippet demonstrates using the 'nix why-depends' command to find a dependency path from the 'hello' package to 'glibc' in the nixpkgs repository. It shows the terminal invocation and the resulting dependency path, including which file in Hello references Glibc. No external dependencies are required other than a Nix-enabled environment with access to these packages. The command's main argument is two packages, and the output details the relationship, aiding debugging of runtime closures.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/why-depends.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix why-depends nixpkgs#hello nixpkgs#glibc\\n/nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10\\n\\u2514\\u2500\\u2500\\u2500bin/hello: …...................../nix/store/9l06v7fc38c1x3r2iydl15ksgz0ysb82-glibc-2.32/lib/ld-linux-x86-64.…\\n    → /nix/store/9l06v7fc38c1x3r2iydl15ksgz0ysb82-glibc-2.32\n```\n\n----------------------------------------\n\nTITLE: Uploading Flake Inputs to a Remote Machine\nDESCRIPTION: Demonstrates how to upload all flake inputs to a different machine for remote evaluation using SSH.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-archive.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix flake archive --to ssh://some-machine\n```\n\n----------------------------------------\n\nTITLE: Profile-Based Build Environment Recording\nDESCRIPTION: Save a build environment configuration to a profile for later use.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix develop --profile /tmp/my-build-env nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Overriding Nix Configuration Options via Command Line - Markdown\nDESCRIPTION: Describes the --option flag, which sets Nix configuration parameters using command line arguments rather than configuration files. This entry indicates how a specific configuration name and value can be passed, overriding nix.conf. Understanding the configuration file hierarchy is helpful for advanced usage.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/opt-common.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- <span id=\\\"opt-option\\\">[`--option`](#opt-option)</span> *name* *value*\\n\\n  Set the Nix configuration option *name* to *value*.\\n  This overrides settings in the Nix configuration file (see nix.conf5).\n```\n\n----------------------------------------\n\nTITLE: Defining Nix Store Path Example - Markdown\nDESCRIPTION: This snippet shows a typical absolute file path for a Nix store object as it appears on disk, exemplifying the format used to reference store objects. It requires a working Nix store and demonstrates expected input and output structure for a store path. No additional dependencies are required beyond access to a Nix environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/glossary.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> **Example**\\n>\\n> `/nix/store/a040m110amc4h71lds2jmr8qrkj2jhxd-git-2.38.1`\n```\n\n----------------------------------------\n\nTITLE: Accessing nix-store operation help and manpages - Shell\nDESCRIPTION: These examples demonstrate methods to obtain documentation for specific nix-store operations, either in the terminal using the man command or by invoking nix-store with the --help flag and an operation. Dependencies include having manpages and nix-store installed. Parameters are the specific operation names appended to the commands (such as realise). These commands display command-line help or manual documentation relevant to a selected operation. Output is displayed to the user in the terminal, with no system modification.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nman nix-store-<operation>\n\n# Example\nman nix-store-realise\n```\n\nLANGUAGE: shell\nCODE:\n```\nnix-store --help --<operation>\n\n# Example\nnix-store --help --realise\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Checks with Structured Attributes - Nix\nDESCRIPTION: These code snippets illustrate how to define per-output closure checks in a derivation using structured attributes in the Nix expression language. They serve to log output-specific build requirements, such as limiting closure size, restricting build requisites, and bounding output size. The functionality requires Nix 2.2+ and the input attribute __structuredAttrs=true for the derivation. Key parameters are outputChecks (a set keyed by output names), maxClosureSize (closure size in bytes), maxSize (raw output size in bytes), and disallowedRequisites (dependencies that must not appear in the closure). Inputs are Nix attributes; outputs are build constraints enforced during derivation evaluation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.2.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\noutputChecks.\"out\" = {\n  # The closure of 'out' must not be larger than 256 MiB.\n  maxClosureSize = 256 * 1024 * 1024;\n\n  # It must not refer to C compiler or to the 'dev' output.\n  disallowedRequisites = [ stdenv.cc \"dev\" ];\n};\n```\n\nLANGUAGE: nix\nCODE:\n```\noutputChecks.\"dev\" = {\n  # The 'dev' output must not be larger than 128 KiB.\n  maxSize = 128 * 1024;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Nix Installer Command with Custom URL (Shell)\nDESCRIPTION: This command template shows how to create a Nix installation command using a custom installer URL and Cachix cache. It's used for manual testing of CI-generated installers, replacing placeholders with actual values.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L <install_url> | sh -s -- --tarball-url-prefix https://<github-username>-nix-install-tests.cachix.org/serve\n```\n\n----------------------------------------\n\nTITLE: Copying a Package to an Amazon S3 Binary Cache Using Nix CLI - Console\nDESCRIPTION: Uploads the 'hello' package from the Nixpkgs channel to a binary cache in an Amazon S3 bucket using the 'nix copy' command. This requires Nix built with AWS support and appropriate credentials for the specified S3 bucket and region. The command's '--to' flag expects a properly formatted S3 URI, and the input is given as a flake reference. Output is the closure stored in the cloud cache.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --to s3://my-bucket?region=eu-west-1 nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Flake Path on a Remote Machine\nDESCRIPTION: Shows how to compute the store path of a flake on a remote machine using the metadata command and jq for JSON parsing.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-archive.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix flake metadata --json | jq -r '.path'\n```\n\n----------------------------------------\n\nTITLE: Defining Executable File Representation - Nix Model - plaintext\nDESCRIPTION: This snippet shows how to represent an executable file in the Nix file system object model, displaying both its size and executable flag. This entry is for descriptive use, not for programmatic execution. Inputs are file size and executable status, with outputs as part of documentation or conceptual structures.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/file-system-object.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n122 KB, executable: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nix Core Utilization Configurations in Markdown\nDESCRIPTION: This markdown table illustrates various configurations of 'max-jobs' and 'cores' settings in Nix, showing their impact on core utilization and build processes for a 24-core machine. It includes columns for 'max-jobs', 'cores', 'NIX_BUILD_CORES', 'Maximum Processes', and the resulting behavior.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/cores-vs-jobs.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `max-jobs` | `cores` | `NIX_BUILD_CORES` | Maximum Processes | Result                                                                                                                                                                                                                                                                 |\n| --------------------- | ------------------ | ----------------- | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1                     | 24                 | 24                | 24                | One derivation will be built at a time, each one can use 24 cores. Undersold if a job can't use 24 cores.                                                                                                                                                                              |\n| 4                     | 6                  | 6                 | 24                | Four derivations will be built at once, each given access to six cores.                                                                                                                                                                                                                |\n| 12                    | 6                  | 6                 | 72                | 12 derivations will be built at once, each given access to six cores. This configuration is over-sold. If all 12 derivations being built simultaneously try to use all six cores, the machine's performance will be degraded due to extensive context switching between the 12 builds. |\n| 24                    | 1                  | 1                 | 24                | 24 derivations can build at the same time, each using a single core. Never oversold, but derivations which require many cores will be very slow to compile.                                                                                                                            |\n| 24                    | 0                  | 24                | 576               | 24 derivations can build at the same time, each using all the available cores of the machine. Very likely to be oversold, and very likely to suffer context switches.                                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Deleting a Store Path using Nix CLI - Console\nDESCRIPTION: Demonstrates how to delete a specific path from the Nix store using the 'nix store delete' command. This operation removes the path only if it is not reachable from a garbage collector root, mimicking a more targeted variant of 'nix store gc'. The main dependency is the Nix command-line tool, and the path to be deleted must be supplied. Output consists of command-line effects indicating the path removal, with constraints based on reachability unless the '--ignore-liveness' flag is specified.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix store delete /nix/store/yb5q57zxv6hgqql42d5r8b5k5mcq6kay-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Link Header Example with Attributes\nDESCRIPTION: Detailed example of an HTTP Link header including rev, revCount, and narHash attributes for a specific tarball version.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/tarball-fetcher.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nLink: <https://example.org/hello/442793d9ec0584f6a6e82fa253850c8085bb150a.tar.gz?rev=442793d9ec0584f6a6e82fa253850c8085bb150a&revCount=835&narHash=sha256-GUm8Uh/U74zFCwkvt9Mri4DSM%2BmHj3tYhXUkYpiv31M%3D>; rel=\"immutable\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Package to S3-Compatible Endpoint - Nix Command - Console\nDESCRIPTION: This console example shows uploading 'nixpkgs.hello' to an S3-compatible endpoint (such as MinIO) using 'nix copy'. Additional query parameters ('scheme' and 'endpoint') in the S3 store URL specify a custom HTTPS endpoint rather than default AWS S3. It supports alternate backends with AWS S3 API compatibility and requires bucket policies/IAM access per the example policies. Inputs are the derivation and the custom store URL; process uploads to a non-AWS S3-compatible service.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/s3-binary-cache-store.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix copy nixpkgs.hello --to \\\\\\n  's3://example-nix-cache?profile=cache-upload&scheme=https&endpoint=minio.example.com'\n```\n\n----------------------------------------\n\nTITLE: Entering a Development Shell using Flakes (Console)\nDESCRIPTION: Invokes nix develop to enter a flake-enabled Nix environment with all necessary dependencies and development tools. Requires experimental 'flakes' and 'nix-command' features to be enabled in Nix configuration.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop\n```\n\n----------------------------------------\n\nTITLE: FetchGit Ref Parameter\nDESCRIPTION: New behavior for builtins.fetchGit's ref parameter that allows specifying absolute remote refs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.3.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nbuiltins.fetchGit\n```\n\n----------------------------------------\n\nTITLE: Describing Directory with Symlink and Directories - Nix Model - plaintext\nDESCRIPTION: This example showcases a directory containing a symbolic link and additional directories, formatted in Nix's hierarchical documentation style. The structure clearly indicates which entries are symlinks versus directories. Inputs include names, symlink targets, and directory markers—outputs are conceptual tree diagrams.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/file-system-object.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n├── bin -> share/go/bin\n├── nix-support/\n└── share/\n```\n\n----------------------------------------\n\nTITLE: Deleting at least 100 MiBs of Unreachable Paths with nix-store --gc --max-freed - Console - Shell\nDESCRIPTION: This snippet shows how to run nix-store's garbage collector with a minimum freed byte limit by combining --gc with --max-freed. Here, at least 100 MiB will be cleared from the Nix store before halting the process. Bash arithmetic expansion is used to calculate the number of bytes. Users should ensure they have sufficient privileges and that no critical store paths are in use.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/gc.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --gc --max-freed $((100 * 1024 * 1024))\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages in Nix Profile via Console - Console\nDESCRIPTION: This snippet illustrates how to use the 'nix profile list' command to display all packages currently installed in the user's Nix profile. The output includes the package name, flake attribute, original and locked flake URLs, and store paths for each package. No dependencies are required other than a properly installed Nix environment; outputs and fields are contextual to the user profile's state.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile list\nName:               gdb\nFlake attribute:    legacyPackages.x86_64-linux.gdb\nOriginal flake URL: flake:nixpkgs\nLocked flake URL:   github:NixOS/nixpkgs/7b38b03d76ab71bdc8dc325e3f6338d984cc35ca\nStore paths:        /nix/store/indzcw5wvlhx6vwk7k4iq29q15chvr3d-gdb-11.1\n\nName:               blender-bin\nFlake attribute:    packages.x86_64-linux.default\nOriginal flake URL: flake:blender-bin\nLocked flake URL:   github:edolstra/nix-warez/91f2ffee657bf834e4475865ae336e2379282d34?dir=blender\nStore paths:        /nix/store/i798sxl3j40wpdi1rgf391id1b5klw7g-blender-bin-3.1.2\n```\n\n----------------------------------------\n\nTITLE: Optimizing Disk Usage via nix-store Command - Console Example\nDESCRIPTION: Demonstrates running `nix-store --optimise` interactively in a terminal to reclaim disk space by hard-linking duplicate files inside the Nix store. This example requires the `nix-store` tool to be installed and accessible. It expects no parameters other than `--optimise`, and outputs a summary of space savings and deduplicated files on standard error. Input is a shell command, and output includes informational progress and statistics.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/optimise.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --optimise\nhashing files in `/nix/store/qhqx7l2f1kmwihc9bnxs7rc159hsxnf3-gcc-4.1.1'\n...\n541838819 bytes (516.74 MiB) freed by hard-linking 54143 files;\nthere are 114486 files with equal contents out of 215894 files in total\n```\n\n----------------------------------------\n\nTITLE: Using Flake References in Old CLI Commands\nDESCRIPTION: Examples demonstrating how to use flake references in the traditional Nix command line interface, including direct flake references and NIX_PATH usage.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.13.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# nix-build flake:nixpkgs -A hello\n# nix-build -I nixpkgs=flake:github:NixOS/nixpkgs/nixos-22.05 \\\n    '<nixpkgs>' -A hello\n# NIX_PATH=nixpkgs=flake:nixpkgs nix-build '<nixpkgs>' -A hello\n```\n\n----------------------------------------\n\nTITLE: Set Pattern with Ellipsis in Nix\nDESCRIPTION: Shows a set pattern with ellipsis (...) that allows additional attributes beyond the ones specified. This function works on any set that contains at least the three named attributes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y, z, ... }: z + y + x\n```\n\n----------------------------------------\n\nTITLE: Installing LLDB Debugger in Nix Shell on macOS - Console\nDESCRIPTION: This command installs Apple's LLDB debugger in the development nix-shell, intended for macOS systems where LLDB is preferred or required over GDB. Prerequisites are an active nix-shell and macOS as the operating system; the result is a shell environment with LLDB available for use.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ nix-shell -p lldb\n```\n\n----------------------------------------\n\nTITLE: Build Determinism Check Example\nDESCRIPTION: Example showing a non-deterministic build detection using nix-build with --check flag, displaying how build outputs can differ between runs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.11.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ nix-build pkgs/stdenv/linux -A stage1.pkgs.zlib --check -K\nerror: derivation '/nix/store/l54i8wlw2265…-zlib-1.2.8.drv' may not\nbe deterministic: output '/nix/store/11a27shh6n2i…-zlib-1.2.8'\ndiffers from '/nix/store/11a27shh6n2i…-zlib-1.2.8-check'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Runtime Dependency Graph with nix-store --query --graph and Graphviz - Console\nDESCRIPTION: Generates a PostScript visual graph for the runtime dependencies of the user environment by chaining nix-store --query --graph with dot. Demonstrates exporting the dependency graph in Graphviz format and converting it for visualization with gv. Requires Graphviz and Nix installed. Inputs are Nix profile links; output is a graph image.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/query.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --query --graph ~/.nix-profile | dot -Tps > graph.ps\\n$ gv graph.ps\n```\n\n----------------------------------------\n\nTITLE: Running a Nix Package in a Chroot Store via Console Command\nDESCRIPTION: Demonstrates how to execute a package (in this case, 'nixpkgs#hello') using the 'nix run' command targeting a local chrooted Nix store rooted at '/tmp/root'. Requires Nix to be installed, user to have access to the given chroot path, and Linux with mount and user namespaces enabled. The command builds or downloads the package and runs it within the specified chroot environment, resulting in execution output (e.g., 'Hello, world!'). Outputs depend on the target package's behavior and environment support.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/local-store.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix run --store /tmp/root nixpkgs#hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Building a Darwin Derivation on a Linux Machine - Nix CLI - Console\nDESCRIPTION: Builds a derivation targeting 'x86_64-darwin' from a Linux host by specifying both the expression and remote builder configuration directly on the command line. Uses '--builders' to declare the remote builder and '--expr' to provide the derivation, which runs 'uname' and outputs to the build result. Requires Nix on both hosts, SSH configuration, and correct system labels. Produces a build artifact that reflects the remote architecture.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnix build --impure \\\n --expr '(with import <nixpkgs> { system = \"x86_64-darwin\"; }; runCommand \"foo\" {} \"uname > $out\")' \\\n --builders 'ssh://mac x86_64-darwin'\n```\n\n----------------------------------------\n\nTITLE: Copying a Flake to a Binary Cache\nDESCRIPTION: Demonstrates how to copy the 'dwarffs' flake and its dependencies to a binary cache at a specified file path.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-archive.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake archive --to file:///tmp/my-cache dwarffs\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Artefacts with git clean - Console\nDESCRIPTION: The 'git clean' command is used to remove all untracked files, including those produced by test runs, from the 'tests' directory. The '-x' flag removes ignored files, and '--force' is required for the operation to proceed. This helps ensure a clean working directory before or after test runs, avoiding interference from stale artefacts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ngit clean -x --force tests\n```\n\n----------------------------------------\n\nTITLE: Building with Ccache in Classic Nix (Console)\nDESCRIPTION: Uses nix-build with the --attr parameter to build Nix using the ccacheStdenv, which applies compiler caching.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build --attr nix-ccacheStdenv\n```\n\n----------------------------------------\n\nTITLE: Checking Path Existence in Binary Cache\nDESCRIPTION: This command checks if a specific store path exists in a binary cache. It attempts to find the geeqie package in the NixOS binary cache but returns that the path is not valid since it's not present.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --recursive /nix/store/blzxgyvrk32ki6xga10phr4sby2xf25q-geeqie-1.5.1 --store https://cache.nixos.org/\npath '/nix/store/blzxgyvrk32ki6xga10phr4sby2xf25q-geeqie-1.5.1' is not valid\n\n```\n\n----------------------------------------\n\nTITLE: Starting a Shell with GNU Hello from NixOS 20.03\nDESCRIPTION: Example showing how to start a shell with the hello package from a specific NixOS release (20.03).\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix shell nixpkgs/nixos-20.03#hello\n```\n\n----------------------------------------\n\nTITLE: Running Nix Daemon with Standard I/O and Default Trust\nDESCRIPTION: Runs the Nix daemon using standard I/O for communication and forces all connections to use Nix's default trust settings.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/unix/daemon.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix daemon --stdio --default-trust\n```\n\n----------------------------------------\n\nTITLE: Updating Flake Lock File for a Different Directory - Console\nDESCRIPTION: Illustrates how to update missing inputs in a flake lock file within a specified directory using the 'nix flake lock' command. The included snippet shows the update command with output messages for newly added dependencies. This usage assumes the targeted directory contains a flake.nix file, and clarifies the need to use './another' for subdirectories. Outputs are lock file updates and notifications about the operation's effects, with the constraint that only missing inputs are added.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-lock.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake lock ~/repos/another\nwarning: updating lock file '/home/myself/repos/another/flake.lock':\n• Added input 'nixpkgs':\n    'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)\n```\n\n----------------------------------------\n\nTITLE: Using @-Pattern with Default Values Warning in Nix\nDESCRIPTION: Demonstrates that the @-pattern binds to the attribute set as passed, not including default values. The example shows that 'args' doesn't include the default value for 'a'.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_13\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = args@{ a ? 23, ... }: [ a args ];\nin\n  f {}\n```\n\n----------------------------------------\n\nTITLE: Bundling a Specific Version of Nix - Shell\nDESCRIPTION: This shell session shows bundling a specific commit of the Nix package using 'nix bundle' by referencing a GitHub URL with a hash. It bundles the Nix binary, then checks the version using './nix --version'. Prerequisites: nix with flake support, internet access to the specified GitHub repo. Outputs the bundled Nix binary. This technique allows version pinning for reproducible environments.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/bundle.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix bundle github:NixOS/nix/e3ddffb27e5fc37a209cfd843c6f7f6a9460a8ec\\n# ./nix --version\\nnix (Nix) 2.4pre20201215_e3ddffb\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Firefox Versions\nDESCRIPTION: Series of commands demonstrating how to disable an existing Firefox installation and install a new version while keeping the old one in the profile.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/set-flag.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --query\nfirefox-2.0.0.9 (the current one)\n\n$ nix-env --preserve-installed --install firefox-2.0.0.11\ninstalling `firefox-2.0.0.11'\nbuilding path(s) `/nix/store/myy0y59q3ig70dgq37jqwg1j0rsapzsl-user-environment'\ncollision between `/nix/store/...-firefox-2.0.0.11/bin/firefox'\n  and `/nix/store/...-firefox-2.0.0.9/bin/firefox'.\n(i.e., can't have two active at the same time)\n\n$ nix-env --set-flag active false firefox\nsetting flag on `firefox-2.0.0.9'\n\n$ nix-env --preserve-installed --install firefox-2.0.0.11\ninstalling `firefox-2.0.0.11'\n\n$ nix-env --query\nfirefox-2.0.0.11 (the enabled one)\nfirefox-2.0.0.9 (the disabled one)\n```\n\n----------------------------------------\n\nTITLE: Default Values in Set Patterns in Nix\nDESCRIPTION: Demonstrates how to provide default values for attributes in a set pattern. This function only requires an attribute named x, but optionally accepts y and z with default values.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y ? \"foo\", z ? \"bar\" }: z + y + x\n```\n\n----------------------------------------\n\nTITLE: Running a Group of Functional Tests with Meson --suite - Shell Session\nDESCRIPTION: Illustrates how to run a specific group of functional tests (in this case, the 'ca' group) using Meson's '--suite' argument. The example output demonstrates parallel execution of multiple tests within the group, showing status and timing information. This technique lets developers or CI pipelines efficiently validate related features together without running unrelated tests.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ meson test --suite ca\nninja: Entering directory `/home/jcericson/src/nix/master/build'\nninja: no work to do.\n[1-20/20] 🌑 nix-functional-tests:ca / ca/why-depends                                1/20 nix-functional-tests:ca / ca/nix-run                                  OK               0.16s\n[2-20/20] 🌒 nix-functional-tests:ca / ca/why-depends                                2/20 nix-functional-tests:ca / ca/import-derivation                        OK               0.17s\n```\n\n----------------------------------------\n\nTITLE: Converting Hash Formats with nix-hash - Shell\nDESCRIPTION: These snippets show how to use nix-hash to convert between hash representations, including hexadecimal, base32, base64, and SRI formats. Only the input hash string and desired conversion option (--to-base16, --to-base32, --to-base64, --to-sri) are required. The output is the hash in the target encoding. The --type parameter may be necessary for certain conversions to interpret the hash correctly.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-hash.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --to-base32 e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6\nnvd61k9nalji1zl9rrdfmsmvyyjqpzg4\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --to-base16 nvd61k9nalji1zl9rrdfmsmvyyjqpzg4\ne4fd8ba5f7bbeaea5ace89fe10255536cd60dab6\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --to-base64 e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6\n5P2Lpfe76upazon+ECVVNs1g2rY=\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --type sha1 --to-sri nvd61k9nalji1zl9rrdfmsmvyyjqpzg4\nsha1-5P2Lpfe76upazon+ECVVNs1g2rY=\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-hash --to-base16 sha1-5P2Lpfe76upazon+ECVVNs1g2rY=\ne4fd8ba5f7bbeaea5ace89fe10255536cd60dab6\n```\n\n----------------------------------------\n\nTITLE: Configuring a Build with Meson (Bash/Console)\nDESCRIPTION: Runs the configurePhase script to configure the build in the selected build directory, as part of a Meson/Nix build workflow. Assumes Meson is available and mesonBuildDir is set.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nconfigurePhase\n```\n\n----------------------------------------\n\nTITLE: Adding Nixpkgs to Custom Flake Registry\nDESCRIPTION: Adds 'nixpkgs' pointing to 'github:nixos/nixpkgs' to a custom flake registry file. This allows users to maintain separate registry configurations for different projects or environments.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-add.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnix registry add --registry ./custom-flake-registry.json nixpkgs github:nixos/nixpkgs\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Build-Time Dependencies Using Nix why-depends --derivation - Console\nDESCRIPTION: This console example demonstrates use of 'nix why-depends --derivation' to analyze the build-time reference structure between the 'geeqie' package and the 'systemd' package. The output follows the chain of derivations (.drv files) across build dependencies, tracing how systemd is involved in the closure. This is meant for packagers who need to debug build-time (not runtime) linkages. Requires Nix and the specified derivations to be available.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/why-depends.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix why-depends --derivation nixpkgs#geeqie nixpkgs#systemd\\n/nix/store/drrpq2fqlrbj98bmazrnww7hm1in3wgj-geeqie-1.4.drv\\n\\u2514\\u2500\\u2500\\u2500/: …atch.drv\",[\"out\"]),(\"/nix/store/qzh8dyq3lfbk3i1acbp7x9wh3il2imiv-gtk+3-3.24.21.drv\",[\"dev\"]),(\"…\\n    → /nix/store/qzh8dyq3lfbk3i1acbp7x9wh3il2imiv-gtk+3-3.24.21.drv\\n    \\u2514\\u2500\\u2500\\u2500/: …16.0.drv\",[\"dev\"]),(\"/nix/store/8kp79fyslf3z4m3dpvlh6w46iaadz5c2-cups-2.3.3.drv\",[\"dev\"]),(\"/nix…\\n        → /nix/store/8kp79fyslf3z4m3dpvlh6w46iaadz5c2-cups-2.3.3.drv\\n        \\u2514\\u2500\\u2500\\u2500/: ….3.1.drv\",[\"out\"]),(\"/nix/store/yd3ihapyi5wbz1kjacq9dbkaq5v5hqjg-systemd-246.4.drv\",[\"dev\"]),(\"…\\n            → /nix/store/yd3ihapyi5wbz1kjacq9dbkaq5v5hqjg-systemd-246.4.drv\n```\n\n----------------------------------------\n\nTITLE: Installing by Name (Best Version) - nix-env Console Command - Shell\nDESCRIPTION: Demonstrates installing the most recent available version of a package by name using nix-env. The command performs name matching and selects the derivation with the highest version/priority. Outputs confirmation and uninstalls prior version unless preserved.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_7\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install gcc\ninstalling `gcc-3.3.2'\n\n```\n\n----------------------------------------\n\nTITLE: Specifying GitHub Flake Reference URLs in Nix (Markdown)\nDESCRIPTION: Documents how to format GitHub repository flake references for use in Nix by providing the supported URL syntax. Attributes such as owner and repository name must be specified, and optional revision or tag references may be included. This snippet helps users form correct reference strings: \"github:<owner>/<repo>(/<rev-or-ref>)?(\\?<params>)?\". The snippet is for instructional purposes and not executable code.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\ngithub:<owner>/<repo>(/<rev-or-ref>)?(\\?<params>)?\n```\n\n----------------------------------------\n\nTITLE: Traditional Unix Build Commands\nDESCRIPTION: Standard Unix build commands that can be executed within the nix develop shell environment.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# ./configure --prefix=$out\n# make\n# make install\n```\n\n----------------------------------------\n\nTITLE: Copying Build Log via SSH in Nix\nDESCRIPTION: This snippet demonstrates how to copy a build log for a specific store derivation using SSH. It uses the 'nix store copy-log' command with the '--to' flag to specify the destination SSH server.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-copy-log.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix store copy-log --to ssh-ng://machine /nix/store/ilgm50plpmcgjhcp33z6n4qbnpqfhxym-glibc-2.33-59.drv\n```\n\n----------------------------------------\n\nTITLE: Optimizing Nix Store via Command Line\nDESCRIPTION: This command deduplicates the Nix store by scanning for regular files with identical contents and replacing them with hard links to a single instance. It helps reduce storage usage in the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/optimise-store.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnix store optimise\n```\n\n----------------------------------------\n\nTITLE: Web Scraping with Haskell using nix-shell and specific Nixpkgs branch\nDESCRIPTION: A Haskell script that fetches the nixos.org webpage and prints all href attributes from anchor tags. This demonstrates using a specific branch of Nixpkgs/NixOS and installing Haskell packages with nix-shell.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_13\n\nLANGUAGE: haskell\nCODE:\n```\n#! /usr/bin/env nix-shell\n#! nix-shell -i runghc --packages 'haskellPackages.ghcWithPackages (ps: [ps.download-curl ps.tagsoup])'\n#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixos-20.03.tar.gz\n\nimport Network.Curl.Download\nimport Text.HTML.TagSoup\nimport Data.Either\nimport Data.ByteString.Char8 (unpack)\n\n-- Fetch nixos.org and print all hrefs.\nmain = do\n  resp <- openURI \"https://nixos.org/\"\n  let tags = filter (isTagOpenName \"a\") $ parseTags $ unpack $ fromRight undefined resp\n  let tags' = map (fromAttrib \"href\") tags\n  mapM_ putStrLn $ filter (/= \"\") tags'\n```\n\n----------------------------------------\n\nTITLE: Clearing Substitutes Using nix-store - Shell\nDESCRIPTION: This command clears all configured substitute URLs in the Nix store. It is required before upgrading or performing database upgrades across Nix versions that use different Berkeley DB formats to prevent issues with substitute paths remaining from older versions. The only dependency is the Nix environment itself. The command has no parameters and outputs nothing on success.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-store --clear-substitutes\n```\n\n----------------------------------------\n\nTITLE: Running nix-store operations - Shell\nDESCRIPTION: This snippet demonstrates the usage of the nix-store command, allowing the user to invoke various operations on the Nix package store. The core command requires one operation flag (such as --realise, --gc, or --add) and may accept additional options and arguments. Prerequisites include a Nix installation, and available operations may have separate documentation. Inputs are specific operations and optional arguments; the output and effect depend on the chosen operation. The command must be run from a shell or terminal, and misuse may affect the system package store.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnix-store *operation* [*options…*] [*arguments…*]\n  [--option *name* *value*]\n  [--add-root *path*]\n```\n\n----------------------------------------\n\nTITLE: Building and Running Non-Root Nix Docker Image - Console Commands - console\nDESCRIPTION: Shows how to build a Docker image that installs Nix for a specified non-root user, then load and run the resulting image. This approach is for those needing Nix inside containers with a non-root user. Key arguments include uid, gid, uname, and gname for user identity configuration. Requires Nix and Docker for building and execution.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-docker.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix build --file docker.nix \\\n    --arg uid 1000 \\\n    --arg gid 1000 \\\n    --argstr uname user \\\n    --argstr gname user \\\n    --argstr name nix-user \\\n    --out-link nix-user.tar.gz\n$ docker load -i nix-user.tar.gz\n$ docker run -ti nix-user\n```\n\n----------------------------------------\n\nTITLE: Verifying Firefox with Signature Requirements\nDESCRIPTION: This command verifies the closure of Firefox, ensuring each path has at least 2 signatures. It recursively checks all dependencies while skipping content verification and focusing on signature validation.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/verify.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix store verify --recursive --sigs-needed 2 --no-contents $(type -p firefox)\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Curly (${) in Indented Nix Strings - Nix\nDESCRIPTION: Shows how to produce a literal `${` within an indented string by escaping using double single-quotes before the dollar. Useful for text that includes templates or shell expressions where dollar curly braces are treated as plain text. Prevents Nix from processing the content as variable interpolation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n''\n  echo ''${PATH}\n''\n```\n\n----------------------------------------\n\nTITLE: Using Current System Configuration in Derivation - Nix Language\nDESCRIPTION: Assigns the 'system' attribute to 'builtins.currentSystem', making the build system match the evaluator's system. Facilitates portable build scripts and is suitable for general purpose packages. Requires Nix's builtins.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/derivations.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nderivation {\n  # ...\n  system = builtins.currentSystem;\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Name Patterns - nix-env Command - Console/Shell\nDESCRIPTION: This command lists packages whose names contain either 'firefox' or 'chromium' using a regular expression with nix-env. Dependencies include nix-env and an available package repository. The output shows all matching packages and their versions, supporting selection across related package sets.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/query.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --query --available '.*(firefox|chromium).*'\nchromium-37.0.2062.94\nchromium-beta-38.0.2125.24\nfirefox-32.0.3\nfirefox-with-plugins-13.0.1\n…\n```\n\n----------------------------------------\n\nTITLE: Checking Out Maintenance Branch - Console\nDESCRIPTION: Switches the working git branch to a maintenance branch corresponding to a previously released version, which is required for preparing a point (patch) release. Replace XX.YY-maintenance with the appropriate version. Ensures further operations only affect the intended release series.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ git checkout XX.YY-maintenance\n```\n\n----------------------------------------\n\nTITLE: Prefetching a File and Printing Store Path with nix-prefetch-url - Console Usage - shell\nDESCRIPTION: This example shows the use of the nix-prefetch-url command with the --print-path option, fetching a file from a mirror URL. Alongside printing the cryptographic hash of the file, the command outputs the resulting path to the file in the Nix store. Requires nix-prefetch-url and access to the specified mirror. The primary input is a URL, and the output includes both the hash and the store path.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-prefetch-url.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-prefetch-url --print-path mirror://gnu/hello/hello-2.10.tar.gz\\n0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\\n/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g-hello-2.10.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Setting Release Patch Version - Console\nDESCRIPTION: Exports the desired patch version to the VERSION environment variable, which is used by subsequent release management scripts and commands. Replace XX.YY.ZZ as needed for the current release process. Ensures consistency across automated tooling steps.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ export VERSION=XX.YY.ZZ\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Overflow Error Handling in Nix (Shell)\nDESCRIPTION: This snippet shows the command-line output when evaluating an expression that causes integer overflow in the Nix language using the 'nix eval' command. As of this release, attempts to exceed the 64-bit integer range will generate a descriptive error instead of performing a silent overflow or wraparound. There are no dependencies except having the Nix command-line tool installed, and it demonstrates expected user-facing output for invalid numeric operations. The input is a Nix expression passed via '--expr', and the output is an error message.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.25.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix eval --expr '9223372036854775807 + 1'\\nerror: integer overflow in adding 9223372036854775807 + 1\n```\n\n----------------------------------------\n\nTITLE: Declaring Experimental Dynamic Derivation Structures in ATerm - Plaintext\nDESCRIPTION: Shows the ATerm serialization format for derivations associated with experimental features, using the DrvWithVersion(<version-string>, ...) expression structure. The version-string identifies the experimental feature in use (for example, \"xp-dyn-drv\" for dynamic derivations). As above, its content is the derivation data for Nix to interpret. Consuming software must check and handle this version indicator appropriately; the snippet does not operate independently but is an embedded serialization template.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/derivation-aterm.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDrvWithVersion(<version-string>, ...)\n```\n\n----------------------------------------\n\nTITLE: Removing a Package by Name in Nix Profile\nDESCRIPTION: This snippet demonstrates how to remove a specific package from the Nix profile using its name. It uses the 'hello' package as an example.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-remove.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile remove hello\n```\n\n----------------------------------------\n\nTITLE: Reviewing Nix Daemon Logs for Non-Deterministic Build Output Differences - None\nDESCRIPTION: This untyped snippet represents the output as captured in the Nix daemon log after a non-deterministic build check. It indicates the actual diff result (e.g., a changed number) produced by the diff-hook script. While not code to be executed, this output is crucial for understanding how differences are reported by Nix in the event of a reproducibility failure. Assumes the diff hook is set up and the Nix daemon is logging outputs of diff execution. Inputs are the path and context lines; outputs are diff results for the derivation under test.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/diff-hook.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\nFor derivation /nix/store/cgl13lbj1w368r5z8gywipl1ifli7dhk-unstable.drv:\n1c1\n< 8108\n---\n> 30204\n\n```\n\n----------------------------------------\n\nTITLE: Prompting User Consent for Substitutors in Nix CLI Shell Scripts\nDESCRIPTION: This shell snippet shows how the Nix tool prompts users for confirmation when using custom substitutors, highlighting security implications. The script indicates which sources ('substitutors') will be used and asks the user for permission. No special dependencies are required. The primary input is user consent ([y/N]), with output being the updated configuration if accepted. Limitations: designed for illustrative purposes and simulates CLI interaction; does not run standalone.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build --option substitutors https://cache.example.org\n------------------------------------------------------------------------\n  Warning! A security related question needs to be answered.\n------------------------------------------------------------------------\n  The following substitutors will be used to in `my-project`:\n    - https://cache.example.org\n\n  Do you allow `my-project` to use above mentioned substitutors?\n    [y/N] |> y\n```\n\n----------------------------------------\n\nTITLE: Running a Flake - Nix CLI - Console\nDESCRIPTION: Illustrates how to execute the default entrypoint or package of a flake in the current directory using 'nix run'. The command relies on the existence of an appropriate 'apps' or 'default' output in the flake. Output printed is the result of executing the flake's main program (here, 'Hello, world!').\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix run\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Next Steps Guidance After Project Initialization\nDESCRIPTION: Displays helpful next steps after project initialization to guide users through the typical workflow.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nix init --template=template#python\nInitializing project `template#python`\n          in `/home/USER/dev/new-project`\n\n  Next steps\n    |> nix develop   -- to enter development environment\n    |> nix build     -- to build your project\n```\n\n----------------------------------------\n\nTITLE: Schema Version Example - Different Schemas\nDESCRIPTION: Example showing two objects that should be considered different schema versions due to different field presence.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/json-guideline.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": {},\n  \"bar\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Profile to Contain Firefox Using nix-env --set in Console\nDESCRIPTION: This example demonstrates how to use the nix-env --set command to update a profile so that its current generation contains only Firefox. It specifies a custom profile path and sets it to contain just the Firefox package.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/set.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --profile /nix/var/nix/profiles/browser --set firefox\n```\n\n----------------------------------------\n\nTITLE: Installing All Derivations from a File - nix-env Console Command - Shell\nDESCRIPTION: Uses a glob pattern '.*' to specify installing all derivations in a Nix expression file using nix-env. Useful for bulk installing all defined outputs from a Nix file. Requires the specified file path and Nix installation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_8\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --file ~/foo.nix --install '.*'\n```\n\n----------------------------------------\n\nTITLE: Installing GDB Debugger in Nix Shell - Console\nDESCRIPTION: This command installs the GNU Debugger (GDB) inside the development nix-shell environment for interactive debugging of Nix. Prerequisites are an initialized nix-shell and network access for package installation. The input is a running nix-shell, and the command outputs an updated shell environment with GDB installed.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ nix-shell -p gdb\n```\n\n----------------------------------------\n\nTITLE: Printing Store Path of a Package\nDESCRIPTION: Demonstrates how to get the raw store path of a package (Hello) from nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/eval.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --raw nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Running GNU Hello in a Chroot Store\nDESCRIPTION: Example showing how to run the hello command in a custom Nix store location specified by the --store flag.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix shell --store ~/my-nix nixpkgs#hello --command hello\n```\n\n----------------------------------------\n\nTITLE: Performing Installation of Nix via Remote Shell Script - Shell\nDESCRIPTION: Shows how to install Nix using a remote shell script fetched with curl and executed by bash. The script is retrieved using HTTPS from the official Nix website, ensuring authenticity. Users must have bash and curl installed; running this makes system-wide changes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.7.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bash <(curl -L https://nixos.org/nix/install)\n```\n\n----------------------------------------\n\nTITLE: Formatting Codebase with Provided Formatter Script (Console)\nDESCRIPTION: Shows how to invoke the maintainers/format.sh script to apply formatting to the Nix source code, ensuring it meets project style guidelines. No arguments are required; assumes script availability and executable permissions.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n./maintainers/format.sh\n```\n\n----------------------------------------\n\nTITLE: Installing a Pinned Nix Version via Shell Script - Console\nDESCRIPTION: Sets the VERSION variable for a specific Nix release, then downloads and runs the corresponding install script. This method allows the user to install a particular version of Nix by referencing the correct path on releases.nixos.org. Dependencies include environment variable support in the current shell and the ability to run curl and sh.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-binary.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export VERSION=2.19.2 \n$ curl -L https://releases.nixos.org/nix/nix-$VERSION/install | sh\n```\n\n----------------------------------------\n\nTITLE: Querying All Derivation Outputs by Store Path - Console\nDESCRIPTION: Performs output size queries (using 'nix path-info') for a specific derivation using the '^*' wildcard syntax with a .drv file store path. No additional dependencies are needed beyond those for other output selection examples. Output includes size information for all derivation outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --closure-size '/nix/store/gzaflydcr6sb3567hap9q6srzx8ggdgg-glibc-2.33-78.drv^*'\n…\n```\n\n----------------------------------------\n\nTITLE: Validating Input Hash Format and Error Handling - Nix hash convert - Console\nDESCRIPTION: This snippet demonstrates input validation for hash conversion using `nix hash convert`. When an invalid input format is specified, the command produces a descriptive error message; when the input is correctly formatted (nix32), it converts the hash to the SRI format. The example covers both the error and successful output for the conversion. The command expects proper format via the `--from` flag, and informs the user if the provided hash does not match.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/hash-convert.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix hash convert --hash-algo sha256 --from nix32 ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0=\nerror: input hash 'ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0=' does not have the expected format '--from nix32'\n```\n\nLANGUAGE: console\nCODE:\n```\n# nix hash convert --hash-algo sha256 --from nix32 1b8m03r63zqhnjf7l5wnldhh7c134ap5vpj0850ymkq1iyzicy5s\nsha256-ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0=\n```\n\n----------------------------------------\n\nTITLE: Garbage Collection with Time-based Deletion (Bash)\nDESCRIPTION: Example of using nix-store --gc with options to delete paths not accessed in the last two months. This demonstrates the new garbage collector features for selective deletion.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.12.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-store --gc -v --max-atime $(date +%s -d \"2 months ago\")\n```\n\n----------------------------------------\n\nTITLE: Referencing inputDrvs in Nix Derivation Structures - Markdown\nDESCRIPTION: This Markdown snippet mentions 'inputDrvs', a key attribute in Nix derivation graphs. The context explains that for non-fixed-output derivations, each element in the inputDrvs attribute is processed recursively by hashDrv, with each store path converted back to its derivation representation via parseDrv. There are no code dependencies beyond understanding Nix's internal data structures like inputDrvs; the snippet simply elucidates the recursive hashing mechanics within Nix's derivation evaluation strategy.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/outputs/input-address.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n`inputDrvs`\n```\n\n----------------------------------------\n\nTITLE: Merging Nested Dynamic Attributes - Nix - nix\nDESCRIPTION: Demonstrates the legacy behavior of Nix in merging multiple dynamic declarations of an attribute set with keys constructed dynamically. Previously, this would silently discard certain values; now, it merges them as expected. No dependencies or imports are required. Inputs are Nix attribute sets with potentially repeated keys; output is the merged attribute set with dynamic keys. Developers should avoid relying on this for maintainability reasons.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.17.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  nested = {\n    foo = 1;\n  };\n  nested = {\n    ${\"ba\" + \"r\"} = 2;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox as the Only Package in a Profile using nix-env\nDESCRIPTION: Demonstrates how to use the new --set flag with nix-env to modify a profile to contain only Firefox.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.11.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -p /nix/var/nix/profiles/browser --set firefox\n```\n\n----------------------------------------\n\nTITLE: Building Release Version with Flake-Based nix build (Shell)\nDESCRIPTION: Executes 'nix build' to produce a release output using the flake-enabled workflow. This builds the default package/output for the current system, generating results in the default build directory. Requires Nix flakes and experimental commands enabled.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build\n```\n\n----------------------------------------\n\nTITLE: Lazy Derivation Construction - Nix - Nix Language\nDESCRIPTION: This Nix expression demonstrates the new lazy evaluation of the 'derivation' primitive, where the attributes are merged with additional type and path fields to defer instantiation. This enables cyclic references between derivations and more efficient evaluation by avoiding premature instantiation. The input 'attrs' is a set of attributes for the derivation, and the merged result introduces explicit 'type', 'outPath', and 'drvPath' keys, with lazy computation via a primop.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.9.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nattrs // {\n  type = \"derivation\";\n  outPath = derivation! attrs;\n  drvPath = derivation! attrs;\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Multi-User Nix Installation - Console\nDESCRIPTION: Uses bash to fetch and execute the Nix install script with the --daemon flag, instructing the script to perform a multi-user installation. Suitable for platforms that support multi-user mode (macOS, Linux with systemd and SELinux disabled). The installer may invoke sudo as required; no manual download steps needed.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-binary.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ bash <(curl -L https://nixos.org/nix/install) --daemon\n```\n\n----------------------------------------\n\nTITLE: Downloading and Unpacking a Tarball with nix flake - Console\nDESCRIPTION: This console snippet demonstrates how to use 'nix flake prefetch' to download a tarball (here, the Linux 5.10.5 kernel) and create an output link to the unpacked source. The code also shows how you can inspect the contents by reading a file from the result. Dependencies: Requires the Nix package manager with flake support. Key parameters are the source URL and the '--out-link' option to specify where to store the result. It outputs the hash and store path for provenance and reproducibility.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-prefetch.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake prefetch https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.5.tar.xz --out-link ./result\nDownloaded 'https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.5.tar.xz?narHash=sha256-3XYHZANT6AFBV0BqegkAZHbba6oeDkIUCDwbATLMhAY='\nto '/nix/store/sl5vvk8mb4ma1sjyy03kwpvkz50hd22d-source' (hash\n'sha256-3XYHZANT6AFBV0BqegkAZHbba6oeDkIUCDwbATLMhAY=').\n\n# cat ./result/README\nLinux kernel\n…\n```\n\n----------------------------------------\n\nTITLE: Finding Recently Added Paths Using JSON Output with jq\nDESCRIPTION: This command prints the 10 most recently added paths to the Nix store by combining the JSON output with jq processing. It sorts entries by registration time and extracts the paths.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --json --all | jq -r 'to_entries | sort_by(.value.registrationTime) | .[-11:-1][] | .key'\n```\n\n----------------------------------------\n\nTITLE: Generating Binary Cache Keys - Console\nDESCRIPTION: This console snippet shows how to create cryptographic signing keys for a Nix binary cache using the 'nix-store' command. It generates both a private and public key file and then displays the public key. These keys are required for signing and verifying the integrity of build outputs uploaded to the cache.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/post-build-hook.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix-store --generate-binary-cache-key example-nix-cache-1 /etc/nix/key.private /etc/nix/key.public\n# cat /etc/nix/key.public\nexample-nix-cache-1:1/cKDz3QCCOmwcztD2eV6Coggp6rqc9DGjWv7C0G+rM=\n```\n\n----------------------------------------\n\nTITLE: Disabling Reference Scanning in Structured Attribute Derivations - Nix - Nix\nDESCRIPTION: This Nix snippet shows how to use the new structured attribute capability with the 'unsafeDiscardReferences' option. When '__structuredAttrs' is set to true and 'unsafeDiscardReferences.out' is true, Nix disables the runtime dependency scan on the specified output. This is particularly useful when generating self-contained filesystem images that embed their own Nix store, as it avoids unintentionally linking to the host store. The 'discard-references' experimental feature must be enabled for this to work. Inputs are attribute settings on a derivation; the primary output is a derivation with reference scanning disabled on designated outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.14.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\n__structuredAttrs = true;\nunsafeDiscardReferences.out = true;\n```\n\n----------------------------------------\n\nTITLE: Deleting Old NixOS Profile Versions Using Command Line\nDESCRIPTION: Demonstrates how to delete profile versions older than a specified number of days using the nix profile wipe-history command. This example shows removing versions older than 100 days from a profile located at /tmp/profile.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-wipe-history.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix profile wipe-history --profile /tmp/profile --older-than 100d\nremoving profile version 515\nremoving profile version 514\n```\n\n----------------------------------------\n\nTITLE: Uploading Maintenance Release Artifacts - Console\nDESCRIPTION: Executes the upload-release.pl script for a maintenance release, optionally with the IS_LATEST flag, to transfer build outputs and register the release in public infrastructure. The command uses an evaluation ID that corresponds to a built jobset on Hydra. IS_LATEST=1 should be omitted for non-latest branches to avoid regressions.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ IS_LATEST=1 ./maintainers/upload-release.pl <EVAL-ID>\n```\n\n----------------------------------------\n\nTITLE: Keeping Most-Recent Profile Generations by Count with nix-env - Console\nDESCRIPTION: Illustrates how to keep the most recent N generations while deleting older ones using the \"+<number>\" syntax. Requires nix-env and an existing profile with sufficient generations. The parameter \"+5\" means all but the five most recent generations are deleted. Only applicable to the current or specified profile, and does not affect the currently active generation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/delete-generations.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --delete-generations +5\n```\n\n----------------------------------------\n\nTITLE: Switching Profiles Using nix-env --switch-profile - Console\nDESCRIPTION: These commands change the active user profile by updating the '~/.nix-profile' symlink to point to the specified profile path. Dependencies include valid profile locations and a configured Nix environment. If the profile doesn't exist, it is created. Inputs are the target profile paths, and the output is a profile switch enabling per-user or custom environment management.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --switch-profile /nix/var/nix/profiles/my-profile\n\n$ nix-env --switch-profile /nix/var/nix/profiles/default\n```\n\n----------------------------------------\n\nTITLE: Verifying Store Path Integrity Using nix-store --verify-path - Shell/CLI\nDESCRIPTION: This example demonstrates how to use the nix-store --verify-path command in combination with nix-store --query and $(which svn) to verify the cryptographic integrity of the svn command and all its dependencies. The command performs nested queries to find the store path for svn, determines all its package requisites, and checks each one for changes, printing warnings and setting the exit code if discrepancies are found. This method requires the Nix package manager to be installed and properly configured, with svn available in the user's environment. The output will indicate if any path has changed according to the Nix database.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/verify-path.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --verify-path $(nix-store --query --requisites $(which svn))\n```\n\n----------------------------------------\n\nTITLE: Using new nix run to execute default commands\nDESCRIPTION: The new simplified nix run syntax that automatically runs a command with the same name as the package.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnix run nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Referencing Deep Attribute Names with Dotted Key Paths in nix-instantiate - Shell\nDESCRIPTION: Demonstrates the use of dot-separated attribute names—including quoted attributes—in the -A flag for nix-instantiate. The referenced attribute ('config.systemd.units.\"nscd.service\".text') is retrieved from the specified Nix expression file. Supports advanced attribute selection for deep or non-standard keys.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.7.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-instantiate --eval '<nixos>' -A 'config.systemd.units.\"nscd.service\".text'\n```\n\n----------------------------------------\n\nTITLE: Deleting Old Berkeley DB Files in Nix Store (Bash)\nDESCRIPTION: Commands to remove old Berkeley DB files after converting to the new Nix store metadata schema. This should be executed in the /nix/var/nix/db directory.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.12.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /nix/var/nix/db\n$ rm __db* log.* derivers references referrers reserved validpaths DB_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Launching a Shell with Specified Nixpkgs Using nix-shell and NIX_PATH (Bash)\nDESCRIPTION: This command uses nix-shell and the NIX_PATH override (-I) to select a specific version of Nixpkgs from a remote tarball, then launch a shell environment with the 'pan' package available. This demonstrates mixing environment variables and command-line options for precise dependency and environment control. Requires internet access and Nix 1.9+. Inputs: package (-p), tarball override (-I); Output: fully provisioned shell.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.9.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ nix-shell -p pan -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Deleting Limited Amount of Garbage in Nix Store\nDESCRIPTION: This command deletes up to 1 gigabyte of garbage from the Nix store. It allows for more controlled garbage collection by specifying a maximum amount to delete.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-gc.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix store gc --max 1G\n```\n\n----------------------------------------\n\nTITLE: Nix Expression for Python with PrettyTable Package\nDESCRIPTION: Nix expression file that defines a Python environment with the prettytable package installed, referenced by the previous example.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\nwith import <nixpkgs> {};\npython3.withPackages (ps: with ps; [ prettytable ])\n```\n\n----------------------------------------\n\nTITLE: Evaluation Result of @-Pattern Binding in Default Value in Nix\nDESCRIPTION: Shows the evaluation result of the previous function example. The result shows that x takes the value of args.a (which is 1).\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_19\n\nLANGUAGE: nix\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Interpolating Paths as Strings in Nix Expressions - Nix\nDESCRIPTION: Explains the change in language semantics where expressions of the form '\\\"${./path} ...\\\"' now evaluate to strings instead of paths. In Nix 1.4 and later, interpolated paths yield a string value, which may affect scripts relying on path types. This impacts the way values are interpreted downstream wherever this interpolation is used.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.4.md#_snippet_2\n\nLANGUAGE: Nix\nCODE:\n```\n\"${./path}\n        ...\"\n```\n\n----------------------------------------\n\nTITLE: Updating Release Notes for Maintenance Release - Console\nDESCRIPTION: Runs the release-notes generator script while on a maintenance branch to update the release notes for the new point release. Output is used as the basis for communicating changes and preparing official change logs. Requires './maintainers/release-notes' script and an exported VERSION.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ./maintainers/release-notes\n```\n\n----------------------------------------\n\nTITLE: Setting Nixpkgs to Specific Branch\nDESCRIPTION: Sets the 'nixpkgs' flake identifier to a specific branch (nixos-20.03) of the Nixpkgs repository. This allows users to pin their environment to a specific release branch.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/registry-add.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix registry add nixpkgs github:NixOS/nixpkgs/nixos-20.03\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building dwarffs Flake Example\nDESCRIPTION: Series of console commands showing how to clone the dwarffs flake repository into a local directory and build it using Nix. The example demonstrates clone destination specification and build execution.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-clone.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix flake clone dwarffs --dest dwarffs\n# cd dwarffs\n# nix build\n```\n\n----------------------------------------\n\nTITLE: Adding experimental-features to nix.conf for enabling nix command\nDESCRIPTION: Configuration setting needed in nix.conf to enable the 'nix' command, which is now marked as an experimental feature.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nexperimental-features = nix-command\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Path Reference in Markdown\nDESCRIPTION: Link references to GitHub workflow files showing the backport and installer test configurations.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/backporting.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`installer_test`]: https://github.com/NixOS/nix/blob/895dfc656a21f6252ddf48df0d1f215effa04ecb/.github/workflows/ci.yml#L70-L91\n```\n\n----------------------------------------\n\nTITLE: Standard Build Phase Commands\nDESCRIPTION: Common build phase commands that can be executed within the nix develop shell.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/develop.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# configurePhase\n# buildPhase\n# installPhase\n```\n\n----------------------------------------\n\nTITLE: Searching with Multiple Patterns\nDESCRIPTION: Shows how to search for packages containing 'git' and either 'frontend' or 'gui'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix search nixpkgs git 'frontend|gui'\n```\n\n----------------------------------------\n\nTITLE: Evaluating Nix Expressions with XML Output using nix-instantiate --eval --xml - Shell\nDESCRIPTION: Shows how to evaluate a Nix expression and obtain the result as an XML-formatted abstract syntax tree by adding the --xml flag. The XML schema corresponds to Nix's internal representation and can aid in machine processing or further parsing. This scenario assumes Nix is installed and focuses on representing results beyond the default textual form.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-instantiate.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate --eval --xml --expr '1 + 2'\\n<?xml version='1.0' encoding='utf-8'?>\\n<expr>\\n  <int value=\"3\" />\\n</expr>\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Nix Installer Script - Console\nDESCRIPTION: Fetches the Nix installer script and executes it with the --help flag to display available command-line flags and options. Useful for users seeking to understand installation parameters and possible customizations. Requires curl and sh; works on all supported Unix-like systems.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-binary.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ curl -L https://nixos.org/nix/install | sh -s -- --help\n```\n\n----------------------------------------\n\nTITLE: Debugging Commands for Nix REPL\nDESCRIPTION: Lists new REPL commands available in debug mode for Nix, allowing users to inspect variables, show stack traces, and control execution flow.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.9.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n:env          Show env stack\n:bt           Show trace stack\n:st           Show current trace\n:st <idx>     Change to another trace in the stack\n:c            Go until end of program, exception, or builtins.break().\n:s            Go one step\n```\n\n----------------------------------------\n\nTITLE: Querying Nix Derivation Source Location with nix eval - Console\nDESCRIPTION: This snippet shows how to use `nix eval --raw` to retrieve the file path and line number of a package's derivation definition via the `meta.position` attribute. It requires a functioning Nix environment and works with packages available in the user's package set. The main input is the package attribute; output is a string denoting the absolute path and line number within the Nix store. Useful for scripting or precise reference to the package source location.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/edit.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --raw nixpkgs#hello.meta.position\n/nix/store/fvafw0gvwayzdan642wrv84pzm5bgpmy-source/pkgs/applications/misc/hello/default.nix:15\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Build Upload Hook - Bash Script\nDESCRIPTION: This Bash script implements the post-build hook for Nix, which uploads built store paths to an S3 binary cache using 'nix copy'. It disables filename globbing with 'set -f', splits $OUT_PATHS into separate arguments, and ensures output integrity by using Nix guarantees. The script should be made executable and configured as the 'post-build-hook' in Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/post-build-hook.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nset -eu\nset -f # disable globbing\nexport IFS=' '\n\necho \"Uploading paths\" $OUT_PATHS\nexec nix copy --to \"s3://example-nix-cache\" $OUT_PATHS\n```\n\n----------------------------------------\n\nTITLE: Using BLAKE3 Hash Algorithm in Nix\nDESCRIPTION: Example of using the new BLAKE3 hash algorithm in Nix to calculate a file hash, requiring the blake3-hashes experimental feature.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.27.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix hash file ./file --type blake3 --extra-experimental-features blake3-hashes\nblake3-34P4p+iZXcbbyB1i4uoF7eWCGcZHjmaRn6Y7QdynLwU=\n```\n\n----------------------------------------\n\nTITLE: Nix Flake Input Configuration Example\nDESCRIPTION: Example flake.nix configuration demonstrating various tarball input configurations for Gitea and Forgejo repositories.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/tarball-fetcher.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n# flake.nix\n{\n   inputs = {\n     foo.url = \"https://gitea.example.org/some-person/some-flake/archive/main.tar.gz\";\n     bar.url = \"https://gitea.example.org/some-other-person/other-flake/archive/442793d9ec0584f6a6e82fa253850c8085bb150a.tar.gz\";\n     qux = {\n       url = \"https://forgejo.example.org/another-person/some-non-flake-repo/archive/development.tar.gz\";\n       flake = false;\n     };\n   };\n   outputs = { foo, bar, qux }: { /* ... */ };\n}\n```\n\n----------------------------------------\n\nTITLE: Alternate Compilation Environment using Flakes (Console)\nDESCRIPTION: Shows how to use nix develop with attribute syntax to get a shell for a compilation environment (e.g., native-clangStdenv). Useful for targeted builds or architecture/compiler testing with flake-based projects.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop .#native-clangStdenv\n```\n\n----------------------------------------\n\nTITLE: Preparing for Next Point Release - Version Bumping - Console\nDESCRIPTION: Bumps the version in the '.version' file to the next point release, commits the change with a descriptive message, and pushes to the current branch. This ensures the version number reflects the post-release state for future maintenance and patching. Requires write access and a clean working directory.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ echo 2.12.1 > .version\\n$ git commit -a -m 'Bump version'\\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Testing Post-Build Hook Functionality - Console\nDESCRIPTION: This sequence of console commands and output verifies the end-to-end operation of the post-build hook. It builds a simple derivation, shows the hook executing and uploading, removes the result, and demonstrates re-fetching it from the S3 cache. It validates that the setup is working as intended and outputs expected by users.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/post-build-hook.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build --expr '(import <nixpkgs> {}).writeText \"example\" (builtins.toString builtins.currentTime)'\nthis derivation will be built:\n  /nix/store/s4pnfbkalzy5qz57qs6yybna8wylkig6-example.drv\nbuilding '/nix/store/s4pnfbkalzy5qz57qs6yybna8wylkig6-example.drv'...\nrunning post-build-hook '/home/grahamc/projects/github.com/NixOS/nix/post-hook.sh'...\npost-build-hook: Signing paths /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\npost-build-hook: Uploading paths /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\n/nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rm ./result\n$ nix-store --delete /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\n```\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --realise /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\ncopying path '/nix/store/m8bmqwrch6l3h8s0k3d673xpmipcdpsa-example from 's3://example-nix-cache'...\nwarning: you did not specify '--add-root'; the result might be removed by the garbage collector\n/nix/store/m8bmqwrch6l3h8s0k3d673xpmipcdpsa-example\n```\n\n----------------------------------------\n\nTITLE: Modifying OutputPath for Higher-Order Derivation References (diff)\nDESCRIPTION: This diff illustrates a type change in OutputPath, swapping its drvPath property from a direct StorePath to a potentially recursive DerivingPath. This is a schema migration step preparing for nested derivations, enabling greater flexibility by allowing OutputPath to wrap other OutputPath or ConstantPath instances. Dependencies include strong typing and familiarity with the Nix data model. The primary input is the OutputPath type, and the output is a structurally recursive type definition, with the limitation that clients must handle arbitrary nesting.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/index.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n type OutputPath = {\n-  drvPath: StorePath;\n+  drvPath: DerivingPath;\n   output: OutputName;\n };\n```\n\n----------------------------------------\n\nTITLE: Verifying and Repairing Corrupted Nix Store Path\nDESCRIPTION: Example showing how to verify a corrupted path in the Nix store and repair it using --repair-path. The example demonstrates checking a corrupted glibc installation and initiating its repair through re-download.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/repair-path.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --verify-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13\npath `/nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13' was modified!\n  expected hash `2db57715ae90b7e31ff1f2ecb8c12ec1cc43da920efcbe3b22763f36a1861588',\n  got `481c5aa5483ebc97c20457bb8bca24deea56550d3985cda0027f67fe54b808e4'\n\n$ nix-store --repair-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13\nfetching path `/nix/store/d7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13'...\n…\n```\n\n----------------------------------------\n\nTITLE: Shebang Integration Example for nix-shell - Bash Interpreter - bash\nDESCRIPTION: This demonstrates how to use nix-shell as a shebang interpreter for scripts that require custom dependencies and initialization. The example sets up a two-line header, where the shell will be used to fetch packages and then execute the script with the intended interpreter. Inputs: executable script; outputs: dynamically provisioned environment for subsequent script interpretation. Limitation: Only works where multi-line shebangs are permitted.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-shell.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/env nix-shell\n#! nix-shell -i real-interpreter --packages packages\n```\n\n----------------------------------------\n\nTITLE: Clearing Substitutes in Nix Store - Bash - Shell\nDESCRIPTION: This shell command clears all registered substitutes from the local Nix store by invoking the 'nix-store --clear-substitutes' command. It is recommended as a precautionary step after upgrading to new database formats. The only requirement is that the Nix package is installed and accessible. There are no parameters aside from the command flag, and no output is expected unless errors occur.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.9.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-store --clear-substitutes\n```\n\n----------------------------------------\n\nTITLE: Parsing Symbolic Derivation Names in Nix\nDESCRIPTION: Demonstrates how nix-env parses symbolic derivation names into name and version components.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"apache-httpd\",\n  \"version\": \"2.0.48\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"firefox.*\",\n  \"version\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nix Daemon with Forced Trust\nDESCRIPTION: Runs the Nix daemon and forces all connections to be trusted, regardless of their origin.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/unix/daemon.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix daemon --force-trusted\n```\n\n----------------------------------------\n\nTITLE: Defining Derivation Outputs in Nix Derivation JSON - JSON\nDESCRIPTION: This snippet exemplifies the 'outputs' field in a Nix derivation JSON, mapping output names to objects specifying their store path, content addressing method, hash algorithm, and expected hash. Inputs such as 'path', 'method', 'hashAlgo', and 'hash' are all provided, each serving to uniquely define an output. Required dependencies include Nix tooling capable of reading and interpreting this format, with expected output conforming to documented derivation storage standards.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/json/derivation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"out\\\": {\\n    \\\"path\\\": \\\"/nix/store/2543j7c6jn75blc3drf4g5vhb1rhdq29-source\\\",\\n    \\\"method\\\": \\\"nar\\\",\\n    \\\"hashAlgo\\\": \\\"sha256\\\",\\n    \\\"hash\\\": \\\"6fc80dcc62179dbc12fc0b5881275898f93444833d21b89dfe5f7fbcbb1d0d62\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nix Architecture Components with Concept Map Diagram\nDESCRIPTION: An ASCII diagram showing the main components of Nix (command line interface, language evaluator, store) and how they interact with objects like Nix expressions, build plans, inputs and results. The diagram illustrates the hierarchical layers and data flow within the Nix system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/architecture/architecture.md#_snippet_0\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n   .----------------.\\n   | Nix expression |----------.\\n   '----------------'          |\\n           |              passed to\\n           |                   |\\n+----------|-------------------|--------------------------------+\\n| Nix      |                   V                                |\\n|          |      +-------------------------+                   |\\n|          |      | commmand line interface |------.            |\\n|          |      +-------------------------+      |            |\\n|          |                   |                   |            |\\n|    evaluated by            calls              manages         |\\n|          |                   |                   |            |\\n|          |                   V                   |            |\\n|          |         +--------------------+        |            |\\n|          '-------->| language evaluator |        |            |\\n|                    +--------------------+        |            |\\n|                              |                   |            |\\n|                           produces               |            |\\n|                              |                   V            |\\n| +----------------------------|------------------------------+ |\\n| | store                      |                              | |\\n| |            referenced by   V       builds                 | |\\n| | .-------------.      .------------.      .--------------. | |\\n| | | build input |----->| build plan |----->| build result | | |\\n| | '-------------'      '------------'      '--------------' | |\\n| +-------------------------------------------------|---------+ |\\n+---------------------------------------------------|-----------+\\n                                                    |\\n                                              represented as\\n                                                    |\\n                                                    V\\n                                            .---------------.\\n                                            |     file      |\\n                                            '---------------'\n```\n\n----------------------------------------\n\nTITLE: Full Nix Store Verify Command Syntax\nDESCRIPTION: Complete command syntax showing optional flags for content checking and repair functionality\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/verify.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --verify [--check-contents] [--repair]\n```\n\n----------------------------------------\n\nTITLE: Deleting Nix Store Volume on macOS\nDESCRIPTION: Command to delete the Nix Store volume on macOS using diskutil.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nsudo diskutil apfs deleteVolume /nix\n```\n\n----------------------------------------\n\nTITLE: Restricting Access to the Nix Daemon Socket (Console)\nDESCRIPTION: This snippet sets the group ownership and permissions of the Nix daemon's Unix domain socket directory, ensuring only members of a specific group (nix-users) can access the daemon. The first command changes the group to nix-users, while the second grants read, write, and execute permissions to the owner and group, denying access to others. Requires root privileges and should be used to limit daemon usage in multi-user setups.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/multi-user.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ chgrp nix-users /nix/var/nix/daemon-socket\n$ chmod ug=rwx,o= /nix/var/nix/daemon-socket\n```\n\n----------------------------------------\n\nTITLE: Searching with Exclusions (Single Command)\nDESCRIPTION: Demonstrates searching for neovim packages while excluding those containing 'python' or 'gui'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# nix search nixpkgs neovim --exclude 'python|gui'\n```\n\n----------------------------------------\n\nTITLE: Importing Modules Dynamically Using builtins.fetchGit - Nix - nix\nDESCRIPTION: This snippet shows the use of the builtins.fetchGit function in Nix to dynamically fetch an external Git repository at evaluation time and import a module from it. Useful for situations where Nix expressions or modules need to be extended from outside sources. Requires network access, and the provided URL must point to a valid Git repository containing the target Nix file.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nimports = [ (builtins.fetchGit https://github.com/edolstra/dwarffs + \"/module.nix\") ];\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Values in Nix\nDESCRIPTION: Shows how to assign an integer or floating point number in Nix. Supports basic arithmetic or as values in sets/lists. Directly evaluates to the numeric literal.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n123\n```\n\nLANGUAGE: nix\nCODE:\n```\n3.141\n```\n\n----------------------------------------\n\nTITLE: Running Individual Functional Tests Verbosely with Meson - Shell Session\nDESCRIPTION: This snippet shows how to run a single functional test by name using 'meson test --verbose'. The command outputs both the status and the console output of the test, aiding in diagnosing failures. Results such as OK, Expected Fail, Fail, etc., are summarized and logs are written to 'meson-logs/testlog.txt' for later inspection.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ meson test --verbose ${testName}\nninja: Entering directory `/home/jcericson/src/nix/master/build'\nninja: no work to do.\n1/1 nix-functional-tests:main / ${testName}        OK               0.41s\n\nOk:                 1\nExpected Fail:      0\nFail:               0\nUnexpected Pass:    0\nSkipped:            0\nTimeout:            0\n\nFull log written to /home/jcericson/src/nix/master/build/meson-logs/testlog.txt\n```\n\n----------------------------------------\n\nTITLE: Querying Store Derivation Info Using Nix Path-Info - shell-session\nDESCRIPTION: This snippet demonstrates how to use the 'nix path-info' command with a .drv store path to retrieve information about the derivation itself, following changes in Nix 2.15. Dependencies include the Nix package manager installed in the environment. The command takes a derivation file path as input and outputs metadata specific to the derivation rather than its produced outputs, reflecting the removal of special .drv output-path interpretation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.15.md#_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix path-info /nix/store/gzaflydcr6sb3567hap9q6srzx8ggdgg-glibc-2.33-78.drv\n```\n\n----------------------------------------\n\nTITLE: Testing Nix Build with Flakes in Dev Shell (Console)\nDESCRIPTION: Runs checkPhase in the flake-provided development shell to execute the test suite as part of build verification. Assumes all dependencies and test harnesses are present.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ checkPhase\n```\n\n----------------------------------------\n\nTITLE: Unpacking GitHub Archive with nix-prefetch-url\nDESCRIPTION: Example showing how to fetch and unpack a GitHub archive using nix-prefetch-url with the --unpack flag.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.11.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-prefetch-url --unpack https://github.com/NixOS/patchelf/archive/0.8.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Spot-Checking Deterministic Builds and Handling Reproducibility in Nix - Console\nDESCRIPTION: These console snippets demonstrate the sequence of nix-build invocations for checking build reproducibility in the Nix store using the --check flag. They show both passing (deterministic) and failing (non-deterministic) cases and explain the resulting outputs and error messages. Authors and users are guided in using --attr, --check, and --keep-failed for diagnostics, and shown expected store paths, messages, and error outputs from the Nix CLI. Inputs are the commands; outputs include derivation build paths, standard success, and error diagnostic messages. The snippets assume the presence of a suitable Nix environment and reference the Nix store and build configuration.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/diff-hook.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-build ./deterministic.nix --attr stable\nthis derivation will be built:\n  /nix/store/z98fasz2jqy9gs0xbvdj939p27jwda38-stable.drv\nbuilding '/nix/store/z98fasz2jqy9gs0xbvdj939p27jwda38-stable.drv'...\n/nix/store/yyxlzw3vqaas7wfp04g0b1xg51f2czgq-stable\n\n$ nix-build ./deterministic.nix --attr stable --check\nchecking outputs of '/nix/store/z98fasz2jqy9gs0xbvdj939p27jwda38-stable.drv'...\n/nix/store/yyxlzw3vqaas7wfp04g0b1xg51f2czgq-stable\n\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-build ./deterministic.nix --attr unstable\nthis derivation will be built:\n  /nix/store/cgl13lbj1w368r5z8gywipl1ifli7dhk-unstable.drv\nbuilding '/nix/store/cgl13lbj1w368r5z8gywipl1ifli7dhk-unstable.drv'...\n/nix/store/krpqk0l9ib0ibi1d2w52z293zw455cap-unstable\n\n$ nix-build ./deterministic.nix --attr unstable --check\nchecking outputs of '/nix/store/cgl13lbj1w368r5z8gywipl1ifli7dhk-unstable.drv'...\nerror: derivation '/nix/store/cgl13lbj1w368r5z8gywipl1ifli7dhk-unstable.drv' may\nnot be deterministic: output '/nix/store/krpqk0l9ib0ibi1d2w52z293zw455cap-unstable' differs\n\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-build ./deterministic.nix --attr unstable --check --keep-failed\nchecking outputs of '/nix/store/cgl13lbj1w368r5z8gywipl1ifli7dhk-unstable.drv'...\nnote: keeping build directory '/tmp/nix-build-unstable.drv-0'\nerror: derivation '/nix/store/cgl13lbj1w368r5z8gywipl1ifli7dhk-unstable.drv' may\nnot be deterministic: output '/nix/store/krpqk0l9ib0ibi1d2w52z293zw455cap-unstable' differs\nfrom '/nix/store/krpqk0l9ib0ibi1d2w52z293zw455cap-unstable.check'\n\n```\n\n----------------------------------------\n\nTITLE: Using NIX_PATH for Searching Expressions in Nix\nDESCRIPTION: Demonstrates the syntax for referencing files in the Nix search path using angle brackets. This feature allows looking up files relative to elements defined in the NIX_PATH environment variable.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.0.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n<nixpkgs/default.nix>\n```\n\n----------------------------------------\n\nTITLE: Removing Nix-related Files on Linux\nDESCRIPTION: Command to remove Nix-related files and directories from the Linux system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo rm -rf /etc/nix /etc/profile.d/nix.sh /etc/tmpfiles.d/nix-daemon.conf /nix ~root/.nix-channels ~root/.nix-defexpr ~root/.nix-profile ~root/.cache/nix\n```\n\n----------------------------------------\n\nTITLE: Installing and Checking Nix from Dev Shell (Console)\nDESCRIPTION: Performs installation of the built Nix package in the outputs directory, verifies correct installation by checking the version number using the nix executable built during the process.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ installPhase\\n[nix-shell]$ nix --version\\nnix (Nix) 2.12\n```\n\n----------------------------------------\n\nTITLE: Optimizing Nix Store Disk Usage\nDESCRIPTION: Demonstrates the use of the new nix-store --optimise command to reduce disk space usage by hard-linking identical files.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.11.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --optimise\n```\n\n----------------------------------------\n\nTITLE: Fetching nix-repl Source with nix-prefetch-url\nDESCRIPTION: Example of fetching the source of nix-repl package using nix-prefetch-url with attribute path.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.11.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-prefetch-url -A nix-repl.src\n```\n\n----------------------------------------\n\nTITLE: Regenerating Expected Output for Characterisation Tests in Nix (Bash)\nDESCRIPTION: This command demonstrates how to regenerate the expected output for characterisation tests in Nix, specifically for language tests. It uses the _NIX_TEST_ACCEPT environment variable to accept new test results.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n_NIX_TEST_ACCEPT=1 meson test lang\n```\n\n----------------------------------------\n\nTITLE: Generating Directory Structure from Nix Expression\nDESCRIPTION: Demonstrates how to create a directory structure based on a Nix attribute set, where attribute paths become file paths and values become file contents.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/eval.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --write-to ./out --expr '{ foo = \"bar\"; subdir.bla = \"123\"; }'\n# cat ./out/foo\nbar\n# cat ./out/subdir/bla\n123\n```\n\n----------------------------------------\n\nTITLE: Removing a Nix Channel\nDESCRIPTION: This snippet demonstrates how to remove the 'nixpkgs' channel and list the remaining subscribed channels.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-channel.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-channel --remove nixpkgs\n$ nix-channel --list\n```\n\n----------------------------------------\n\nTITLE: Creating a Flake from a Specific Template - Nix CLI - Shell\nDESCRIPTION: Initializes a new flake using the specified template (`templates#simpleContainer`). The `-t` flag allows the user to select a non-default template. Like the default initialization command, this avoids overwriting existing files and works in the current working directory, assuming the template exists.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-init.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix flake init -t templates#simpleContainer\n```\n\n----------------------------------------\n\nTITLE: Specifying a Set of Packages using Nix Expression - Nix - nix\nDESCRIPTION: Defines a list of packages to be installed or managed using the Nix package manager, leveraging the import of <nixpkgs> and array syntax. This configuration enables declarative specification of system or user packages. The snippet assumes that nixpkgs is available and will output a list of package attributes, such as thunderbird and geeqie, ready for further processing by Nix commands.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.6.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nwith import <nixpkgs> {};\n[ thunderbird\n  geeqie\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Removing a Package by Store Path in Nix Profile\nDESCRIPTION: This example demonstrates how to remove a package from the Nix profile using its full store path. This method is useful when you need to remove a specific version or build of a package.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-remove.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix profile remove /nix/store/rr3y0c6zyk7kjjl8y19s4lsrhn4aiq1z-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Writing Double-Dollar-Curly ($${) in Standard Nix Strings - Nix\nDESCRIPTION: Demonstrates including a literal double-dollar-curly sequence (`$${`) in a Nix string. This encoding is handled as literal output and can be important when generating configuration files or scripts that use this pattern. No special dependencies; strictly a syntax example.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n\"$${\"\n```\n\n----------------------------------------\n\nTITLE: Building Internal API Documentation with Nix (Hydra) - Console\nDESCRIPTION: This snippet builds the Nix internal API documentation using a predefined Hydra job via Nix build, then opens the resulting HTML documentation via a desktop browser. The approach assumes the presence of the nix and xdg-open binaries. It is a standard method for contributors to generate and view the latest API docs locally.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ nix build .#hydraJobs.internal-api-docs\n$ xdg-open ./result/share/doc/nix/internal-api/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Building Nix with Flakes (Configure and Build Phases, Console)\nDESCRIPTION: Inside a flake-enabled development shell, manually invokes configurePhase and buildPhase scripts to configure and build Nix. Assumes the environment exposes these helper phases for reproducible builds.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ configurePhase\\n[nix-shell]$ buildPhase\n```\n\n----------------------------------------\n\nTITLE: Viewing Build Dependencies Tree\nDESCRIPTION: Commands to view build-time dependencies in tree format\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-store -q --tree $(nix-store -qd $(which firefox))\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH Store Serving in NixOS - NixOS Configuration - Nix\nDESCRIPTION: This NixOS configuration snippet enables the built-in SSH server for serving the Nix store. 'nix.sshServe.enable = true' starts the SSH store service, while 'nix.sshServe.keys' whitelists the public SSH keys allowed for access. Dependencies: NixOS system, proper configuration.nix access, and user SSH keys. Inputs: SSH public keys; Output: systemd-activated SSH service for remote Nix access.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/ssh-substituter.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nnix.sshServe.enable = true;\nnix.sshServe.keys = [ \"ssh-dss AAAAB3NzaC1k... bob@example.org\" ];\n```\n\n----------------------------------------\n\nTITLE: Making the Post-Build Hook Executable - Console\nDESCRIPTION: This simple console command changes permissions to make the upload script executable by root. This is necessary for Nix to execute the script as a post-build hook.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/post-build-hook.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# chmod +x /etc/nix/upload-to-cache.sh\n```\n\n----------------------------------------\n\nTITLE: Fetching and Installing Packages via SSH Substituter - Nix CLI - Console\nDESCRIPTION: This console command demonstrates installing the 'firefox' package from the remote Nix store over SSH. It uses 'nix-env' with '--substituters' to specify an SSH URL, enabling Nix to fetch dependencies from a server instead of the default HTTP-based substituters. Dependencies: Nix installed on both client/server, SSH key-based auth, user permission to read store on server. Key parameters: '--install', '--attr', and '--substituters'. Input: package attribute; Output: installed package if available remotely or fallback as described.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/ssh-substituter.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install --attr nixpkgs.firefox --substituters ssh://alice@avalon\n```\n\n----------------------------------------\n\nTITLE: Building the Nix Manual from Scratch with Nix - Console\nDESCRIPTION: This snippet demonstrates how to trigger a build of the Nix manual using the nix-build command with a specific derivation. It requires the Nix package manager and a compatible environment. The command evaluates and builds the documentation package for the current system using the Nix expression language; the generated documentation can be found under the specified result directory. The output is an HTML manual.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnix-build -E '(import ./.).packages.${builtins.currentSystem}.nix.doc'\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions with Dummy Store - Nix - Console\nDESCRIPTION: Demonstrates how to use the Nix evaluator with the 'dummy://' store type by running the 'nix eval' command in a console environment. No dependencies are needed besides Nix itself. The '--store dummy://' flag instructs Nix to use an ephemeral, non-writable store, suitable for cases where store persistence is not required. The example evaluates a simple arithmetic expression, outputting the result and illustrating how Nix operates in this mode.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/dummy-store.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix eval --store dummy:// --expr '1 + 2'\n```\n\n----------------------------------------\n\nTITLE: Installing Packages Directly from URLs with nix-install-package - Shell\nDESCRIPTION: This shell command allows a user to install a package from a given URL rather than a local or channel repository using nix-install-package --url URL. Dependencies are a working network connection and the requisite version of Nix. Inputs: URL parameter; outputs result of fetching and installing the referenced package.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnix-install-package --url URL\n```\n\n----------------------------------------\n\nTITLE: Building from Nix Channel Using Short-hand URIs - Nix Build - Shell\nDESCRIPTION: This command uses the channel: URI shorthand to build a package from a specific Nix channel, such as nixos-15.09. It requires network access and optionally the presence of the requested channel. Input is the build command and channel, output is the build result for the requested package.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnix-build channel:nixos-15.09 -A hello\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Nixpkgs Channel and Running Hello Package\nDESCRIPTION: This snippet demonstrates how to subscribe to the Nixpkgs channel, list the subscribed channels, update the channel, and run the 'hello' command from the GNU Hello package.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-channel.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable\n$ nix-channel --list\nnixpkgs https://nixos.org/channels/nixpkgs\n$ nix-channel --update\n$ nix-shell -p hello --run hello\nhello\n```\n\n----------------------------------------\n\nTITLE: Updating Package Profile Declaratively - Nix-env - bash\nDESCRIPTION: Demonstrates the use of the nix-env command to update the user's package profile to match a specified Nix expression. The command uses the -f flag to specify the file, and -ir to install and remove packages as needed, guaranteeing that the profile reflects the given definition. Requires a valid Nix configuration and the my-packages.nix file as input; outputs updated user package installations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.6.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-env -f my-packages.nix -ir\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Output for Undefined Variables - Shell\nDESCRIPTION: This snippet shows sample terminal output when running the \\\\\"nix build\\\\\" command and encountering an undefined variable (here, \\\\\"bzip3\\\\\"). It demonstrates improved error messages in Nix by including contextual information and line numbers. The snippet serves as an illustration for documentation and does not require any dependencies or inputs beyond a Nix project with a misconfigured flake.nix; output is for demonstration only.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build\\nerror: undefined variable 'bzip3'\\n\\n       at /nix/store/449lv242z0zsgwv95a8124xi11sp419f-source/flake.nix:88:13:\\n\\n           87|           [ curl\\n           88|             bzip3 xz brotli editline\\n             |             ^\\n           89|             openssl sqlite\n```\n\n----------------------------------------\n\nTITLE: Cloning Nix Repository using Git (Shell)\nDESCRIPTION: This snippet demonstrates how to clone the Nix repository from GitHub and change into the cloned directory. It requires git to be installed on the system. The first command fetches the codebase, while the second sets the current working directory to the repo root. There are no special parameters or outputs, and it is applicable on Unix-like operating systems.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/NixOS/nix.git\\n$ cd nix\n```\n\n----------------------------------------\n\nTITLE: Enabling XML Output for Nix Store Queries\nDESCRIPTION: Demonstrates how to use the --xml flag with nix-store -q to get XML-formatted output. This is useful for programmatic parsing of Nix store information.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.16.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnix-store -q --xml\n```\n\n----------------------------------------\n\nTITLE: Refactoring Nix C API Flake Initialization - diff\nDESCRIPTION: This diff snippet illustrates how to replace usage of the now-removed `nix_flake_init_global` function with the new pattern, which attaches flake settings directly to the evaluation state builder via `nix_flake_settings_add_to_eval_state_builder`. This change is required for codebases depending on the Nix C API (>= 2.28.0) and eliminates reliance on global state in flake configuration initialization. Files typically affected would be C source files using the Nix C API for flake evaluation. Dependencies include the latest `libnix` with the revised API. Input is an existing codebase using the old initialization method; output is the refactored usage for compatibility.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.28.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n-    nix_flake_init_global(ctx, settings);\n-    HANDLE_ERROR(ctx);\n-\n    nix_eval_state_builder * builder = nix_eval_state_builder_new(ctx, store);\n    HANDLE_ERROR(ctx);\n\n+    nix_flake_settings_add_to_eval_state_builder(ctx, settings, builder);\n+    HANDLE_ERROR(ctx);\n```\n```\n\n----------------------------------------\n\nTITLE: Building a Release Version with Classic Nix (Console)\nDESCRIPTION: Uses nix-build to produce a release build of Nix for the host platform, respecting the package definitions in the default.nix or release.nix. Assumes a functional Nix build environment.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build\n```\n\n----------------------------------------\n\nTITLE: Building via Store Path with Multiple Outputs - Console\nDESCRIPTION: Builds a specific derivation by its store path, using '^dev,static' syntax to select the desired outputs. Requires access to the referenced store path and outputs. The ellipsis indicates further shell output after build completion.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# nix build '/nix/store/gzaflydcr6sb3567hap9q6srzx8ggdgg-glibc-2.33-78.drv^dev,static'\n…\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Authorized Keys for Nix Store Build Server\nDESCRIPTION: This snippet demonstrates how to configure the authorized_keys file to allow a specific SSH key to access the Nix store with write permissions, effectively turning the host into a build server.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/serve.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cat <<EOF >>/root/.ssh/authorized_keys\ncommand=\"nice -n20 nix-store --serve --write\" ssh-rsa AAAAB3NzaC1yc2EAAAA...\nEOF\n```\n\n----------------------------------------\n\nTITLE: Generating Binary Cache Signing Key - Nix Store - Shell\nDESCRIPTION: This command generates a secret/public key pair for signing Nix store paths for binary cache purposes. Prerequisite: Nix installed and sufficient permission to write to local files. Input is the command line flags, output is two files containing the secret and public signing keys.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnix-store --generate-binary-cache-key\n```\n\n----------------------------------------\n\nTITLE: Deleting All Other Generations Except Current with nix-env and Profile Selection - Console\nDESCRIPTION: Demonstrates use of the special argument \"old\" combined with an explicit profile to delete all other generations except the current one. Leverages the --profile option to operate on a non-default profile. After execution, only the currently active generation is kept in the specified profile; both older and newer generations are deleted. Requires caution due to possible deletion of newer, not just older, generations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/delete-generations.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --profile other_profile --delete-generations old\n```\n\n----------------------------------------\n\nTITLE: Querying Path Information from Binary Cache - Nix CLI - Shell\nDESCRIPTION: This command shows information about store paths available in the specified binary cache (e.g., https://cache.nixos.org/). It requires the Nix toolset to be installed and internet access if querying a remote binary cache. The main parameter is the --store argument, which takes the URL of a Nix binary cache. Input is the command line invocation and output is textual information about available store paths.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnix path-info --store https://cache.nixos.org/\n```\n\n----------------------------------------\n\nTITLE: Importing Nix Expressions from Tarball with fetchTarball (Nix)\nDESCRIPTION: This Nix code snippet demonstrates using the fetchTarball function to import a remote tarball of Nix expressions directly into a Nix expression scope. The imported Nixpkgs can then be used as regular attributes. This approach requires Nix 1.9 and an allowed evaluation mode (not restricted mode). Input: tarball URL; Output: imported package set in Nix expression context.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.9.md#_snippet_5\n\nLANGUAGE: Nix\nCODE:\n```\nwith import (fetchTarball https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz) {}; …\n```\n\n----------------------------------------\n\nTITLE: Showing Full Derivation Graph Recursively - Nix CLI - Console\nDESCRIPTION: Illustrates usage of the ‘--recursive’ (-r) flag with ‘nix derivation show’ to display the complete derivation graph for the currently running NixOS system. The command outputs a JSON structure including all recursively referenced derivations. Dependencies include the Nix package manager and a valid running system. Input is a path to a system activation derivation, and output is a comprehensive recursive derivation JSON.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/derivation-show.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix derivation show -r /run/current-system\n```\n\n----------------------------------------\n\nTITLE: Extending Nix with Custom Primitive Operation Plug-in - C\nDESCRIPTION: This snippet implements a new Nix primitive operation via a shared library plug-in written in C, adding a function 'increment' to builtins that increases an integer argument by one. Dependencies are the same Nix C API headers and libraries; the plug-in defines an entry function for registration, proper types, and runtime type checking. Inputs are the arguments passed from Nix to the primop; the output is the incremented value (or an error on wrong type). Limitations include missing error handling in the registration process and assumptions about argument types.\nSOURCE: https://github.com/nixos/nix/blob/master/src/external-api-docs/README.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#include <nix_api_util.h>\\n#include <nix_api_expr.h>\\n#include <nix_api_value.h>\\n\\nvoid increment(void* user_data, nix_c_context* ctx, EvalState* state, Value** args, Value* v) {\\n    nix_value_force(NULL, state, args[0]);\\n    if (nix_get_type(NULL, args[0]) == NIX_TYPE_INT) {\\n      nix_init_int(NULL, v, nix_get_int(NULL, args[0]) + 1);\\n    } else {\\n      nix_set_err_msg(ctx, NIX_ERR_UNKNOWN, \\\"First argument should be an integer.\\\");\\n    }\\n}\\n\\nvoid nix_plugin_entry() {\\n  const char* args[] = {\\\"n\\\", NULL};\\n  PrimOp *p = nix_alloc_primop(NULL, increment, 1, \\\"increment\\\", args, \\\"Example custom built-in function: increments an integer\\\", NULL);\\n  nix_register_primop(NULL, p);\\n  nix_gc_decref(NULL, p);\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Packages by Name Pattern - Nix CLI - Shell\nDESCRIPTION: This shell snippet demonstrates querying all packages whose names contain the substring 'zip' using the nix-env command. The regular expression selector '.*zip.*' matches any package with 'zip' in its name. It requires nix-env to be installed and, since Nix 1.8, supports regex selectors. The expected output is a list of matching packages from the available Nix channels.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.8.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-env -qa '.*zip.*'\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from Remote Tarball Using nix-env (Bash)\nDESCRIPTION: This bash command demonstrates how to install a package (firefox) using nix-env from a remote tarball containing Nix expressions, leveraging Nix’s new automatic tarball downloading support. The command fetches and unpacks the specified tarball URL, then installs the attribute (-iA) from it. Requires Nix 1.9 and internet access. Input: tarball URL with the required package attribute; Output: installed package in user environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.9.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ nix-env -f https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz -iA firefox\n```\n\n----------------------------------------\n\nTITLE: Searching All Nixpkgs Packages\nDESCRIPTION: Shows how to list all packages in the nixpkgs flake using the ^ regex pattern to match the beginning of strings.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/search.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix search nixpkgs ^\n* legacyPackages.x86_64-linux.AMB-plugins (0.8.1)\n    A set of ambisonics ladspa plugins\n\n* legacyPackages.x86_64-linux.ArchiSteamFarm (4.3.1.0)\n    Application with primary purpose of idling Steam cards from multiple accounts simultaneously\n…\n```\n\n----------------------------------------\n\nTITLE: Defining an App in a Nix Flake - Nix\nDESCRIPTION: Provides an example definition of an app in the Nix flakes system. The app is defined under the 'apps' attribute for a specific system architecture (x86_64-linux), specifying required attributes: 'type' (must be 'app') and 'program' (full executable path in the Nix store). An optional 'meta.description' gives human-readable information. This pattern is mandatory for publishing a usable app via a flake; only defined attributes are recognized.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/run.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\napps.x86_64-linux.blender_2_79 = {\n  type = \"app\";\n  program = \"${self.packages.x86_64-linux.blender_2_79}/bin/blender\";\n  meta.description = \"Run Blender, a free and open-source 3D creation suite.\";\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DerivingPath, OutputPath, and Related Types (TypeScript)\nDESCRIPTION: This TypeScript snippet defines core types for modeling Nix deriving paths, including OutputName, ConstantPath, OutputPath, and DerivingPath as a recursive union. The purpose is to represent both constant store references and chains of output references, supporting both existing static and new dynamic derivation use cases. Dependencies include TypeScript and presumed definitions for StorePath. Key parameters are OutputName (string), ConstantPath (store path), OutputPath (recursive reference), and DerivingPath (either case). Input is a structure to be encoded; outputs can be traversed recursively. Limitation: The types depend on correct implementation of StorePath and usage in higher-level Nix logic.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/index.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype OutputName = String;\n\ntype ConstantPath = {\n  path: StorePath;\n};\n\ntype OutputPath = {\n  drvPath: DerivingPath;\n  output: OutputName;\n};\n\ntype DerivingPath = ConstantPath | OutputPath;\n```\n\n----------------------------------------\n\nTITLE: Installing Git Pre-commit Hooks (Shell)\nDESCRIPTION: Runs 'pre-commit-hooks-install' to set up pre-commit hooks for source formatting and linting. This command installs hooks using cachix/git-hooks.nix, and the hooks enforce code style before each commit. It must be re-run if the configuration changes or when starting a new development session.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npre-commit-hooks-install\n```\n\n----------------------------------------\n\nTITLE: Building C API Documentation with Nix (Hydra) - Console\nDESCRIPTION: This snippet builds the unstable Nix C API documentation using Nix and opens the generated result in a web browser. It targets contributors or developers needing in-depth external API documentation. Requires Nix, xdg-open, and the referenced hydra job must be defined and available.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ nix build .#hydraJobs.external-api-docs\n$ xdg-open ./result/share/doc/nix/external-api/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Launching an Alternate Compilation Environment with nix-shell (Shell)\nDESCRIPTION: This command opens a shell with a specific set of development tools and dependencies, here for the x86_64-linux platform using native clang and stdenv packages. It is useful when targeting alternative architectures or compilers during development. The 'devShells.x86_64-linux.native-clangStdenvPackages' attribute must exist and be properly set in the Nix expression.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell --attr devShells.x86_64-linux.native-clangStdenvPackages\n```\n\n----------------------------------------\n\nTITLE: Comparing Non-Strict and Strict Evaluation Modes in nix-instantiate --eval --xml - Shell\nDESCRIPTION: Compares the output of nix-instantiate --eval --xml on an attribute set expression with and without the --strict option, illustrating how strictness impacts the evaluation of attributes. The non-strict variant leaves attributes unevaluated, while --strict recursively evaluates all elements, showing the difference in the resulting XML structure. This is relevant for understanding lazy evaluation in Nix and its practical implications on computation and output.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-instantiate.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ nix-instantiate --eval --xml --expr '{ x = {}; }'\\n<?xml version='1.0' encoding='utf-8'?>\\n<expr>\\n  <attrs>\\n    <attr column=\"3\" line=\"1\" name=\"x\">\\n      <unevaluated />\\n    </attr>\\n  </attrs>\\n</expr>\\n\\n$ nix-instantiate --eval --xml --strict --expr '{ x = {}; }'\\n<?xml version='1.0' encoding='utf-8'?>\\n<expr>\\n  <attrs>\\n    <attr column=\"3\" line=\"1\" name=\"x\">\\n      <attrs>\\n      </attrs>\\n    </attr>\\n  </attrs>\\n</expr>\n```\n\n----------------------------------------\n\nTITLE: Rendering Store Path Components in Nix\nDESCRIPTION: This snippet demonstrates the structure of a rendered store path in Nix, showing how the store directory, digest, and name are combined to form the complete path.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/store-path.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  /nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1\n  |--------| |------------------------------| |----------|\nstore directory            digest                 name\n```\n\n----------------------------------------\n\nTITLE: Admonition and Console Example for Documentation - Markdown\nDESCRIPTION: This snippet combines admonition formatting with an embedded console code block, highlighting how to document command-line examples inside styled markdown blocks. The inner code demonstrates checking the version of nix using the command-line client. It emphasizes the standard for combined usage in documentation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n> **Example**\n>\n> ```console\n> $ nix --version\n> ```\n```\n\n----------------------------------------\n\nTITLE: Building with Meson after Configuration (Bash/Console)\nDESCRIPTION: Invokes buildPhase to start the build process in the configured Meson build directory. Typically called after configurePhase to compile all build products.\nSOURCE: https://github.com/nixos/nix/blob/master/HACKING.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nbuildPhase\n```\n\n----------------------------------------\n\nTITLE: Querying File System References in Nix Store\nDESCRIPTION: Commands to query store path closures and dependencies using nix-store command\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-store -qR $(which firefox)\n... lots of paths ...\n```\n\n----------------------------------------\n\nTITLE: Defining NIX_PROFILE Environment Variable in Nix\nDESCRIPTION: The `NIX_PROFILE` environment variable specifies the location of the Nix profile. It defaults to the target of the symlink `~/.nix-profile` if it exists, or falls back to `/nix/var/nix/profiles/default` otherwise.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/env-common.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `NIX_PROFILE`\n\n  Location of the Nix profile. Defaults to the target of the symlink\n  `~/.nix-profile`, if it exists, or `/nix/var/nix/profiles/default`\n  otherwise.\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Nix Store Size\nDESCRIPTION: This command shows the total size of the entire Nix store by summing the sizes of all paths. It uses JSON output and jq to process and calculate the total size in bytes.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --json --all | jq 'map(.narSize) | add'\n49812020936\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Attribute Sets in Nix (Nix Expression Language)\nDESCRIPTION: Shows two equivalent ways to define nested attribute sets in Nix: with explicit nested sets and with the new dot-syntax sugar introduced in Nix 0.13. These snippets demonstrate how users can achieve hierarchical configuration more concisely. Both forms expect Nix expression syntax and are suitable for NixOS configuration or other Nix-based declarative setups. The output is an attribute set with identical structure in both cases.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.13.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  foo = {\n    bar = 123;\n    xyzzy = true;\n  };\n  a = { b = { c = \"d\"; }; };\n}\n```\n\nLANGUAGE: nix\nCODE:\n```\n{\n  foo.bar = 123;\n  foo.xyzzy = true;\n  a.b.c = \"d\";\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Build Log by Package Attribute with Nix CLI - Console\nDESCRIPTION: This snippet demonstrates how to use the `nix log` command to retrieve the build log for a package specified by an attribute (in this case, GNU Hello) from a configured Nixpkgs channel or registry. Dependencies include an installed Nix CLI and access to the relevant channels. The command accepts the attribute selector as a parameter and outputs the log to the terminal, providing insights into previous build processes for reproducibility or debugging.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/log.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix log nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands in a Shell Environment\nDESCRIPTION: Example showing how to run multiple shell commands in a nix shell environment with GNU Make.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix shell nixpkgs#gnumake --command sh -c \"cd src && make\"\n```\n\n----------------------------------------\n\nTITLE: Testing Nix Build in Shell (Shell)\nDESCRIPTION: The checkPhase command runs Nix's test suite within the build environment. It is commonly invoked after the buildPhase to verify that all built components work as expected. This relies on test dependencies being set up and may produce test results to the console.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell]$ checkPhase\n```\n\n----------------------------------------\n\nTITLE: Testing Build Output in Flake Environment (Shell)\nDESCRIPTION: Runs the checkPhase to execute the project's test suite after building with flake-enabled tooling. Ensures that build artifacts are validated. Requires that the shell is properly initialized with build and test dependencies.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell]$ checkPhase\n```\n\n----------------------------------------\n\nTITLE: Building and Viewing Coverage Reports with Nix - Bash\nDESCRIPTION: This snippet illustrates how to generate a coverage report using the Nix build system and then open the resulting HTML file for inspection. It assumes the presence of a Nix build environment and an appropriate graphical environment to run 'xdg-open'. Executing 'nix build .#hydraJobs.coverage' builds the coverage results, which are then viewed in a web browser using 'xdg-open ./result/coverage/index.html'.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# nix build .#hydraJobs.coverage\n# xdg-open ./result/coverage/index.html\n```\n\n----------------------------------------\n\nTITLE: Creating Build Users and Groups for Nix on Linux (Console)\nDESCRIPTION: This snippet shows how to add a dedicated group for Nix build users and then create ten system user accounts (nixbld1 to nixbld10), each belonging to the nixbld group. These users are restricted accounts (with no login shell or home directory) and used by the Nix daemon to securely perform builds. The script requires root privileges and depends on standard UNIX utilities such as groupadd, useradd, and seq. Modifying the number of users increases concurrent build capability; values in seq can be adjusted as needed.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/multi-user.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ groupadd -r nixbld\n$ for n in $(seq 1 10); do useradd -c \"Nix build user $n\" \\\n    -d /var/empty -g nixbld -G nixbld -M -N -r -s \"$(which nologin)\" \\\n    nixbld$n; done\n```\n\n----------------------------------------\n\nTITLE: Flowchart of Experimental Feature Lifecycle\nDESCRIPTION: ASCII diagram showing the complete lifecycle of an experimental feature in Nix, from initial idea through experimental phase to either stabilization or removal.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/experimental-features.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                  .------.\\n                  | idea |\\n                  '------'\\n                      |\\n       discussion, design, implementation\\n                      |\\n                      |     .-------.\\n                      |     |       |\\n                      v     v       |\\n               .--------------.  review\\n               | pull request |     |\\n               '--------------'     |\\n                   |     ^  |       |\\n                   |     |  '-------'\\n               .---'     '----.\\n               |              |\\n             merge       user feedback,\\n               |       (breaking) changes\\n               |              |\\n               '---.     .----'\\n                   |     |\\n                   v     |\\n               +--------------+\\n           .---| experimental |----.\\n           |   +--------------+    |\\n           |                       |\\n decision to stabilise      decision against\\n           |              keeping the feature\\n           |                       |\\n           v                       v\\n       +--------+             +---------+\\n       | stable |             | removed |\\n       +--------+             +---------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Cores in Nix Command Line\nDESCRIPTION: Shows how to set the number of cores for parallel building using the Nix command line option. This sets the NIX_BUILD_CORES environment variable for builders.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.16.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnix-build --cores N\n```\n\n----------------------------------------\n\nTITLE: Evaluating Inline Expressions with nix-instantiate --eval -E - Shell\nDESCRIPTION: Shows how to evaluate a custom Nix expression directly from the command line using --eval and -E with nix-instantiate. The given arithmetic expression ('1 + 2') is calculated and the result is printed to stdout. Only available in Nix versions with support for command-line expressions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.7.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnix-instantiate --eval -E '1 + 2'\n```\n\n----------------------------------------\n\nTITLE: Launching a Build Environment with nix-shell - Console\nDESCRIPTION: This command invokes nix-shell to create an isolated development environment for the 'pan' package as described in its Nix expression. Dependencies are built or downloaded, and the user is placed into a shell session with all relevant environment variables configured. Nix and the mentioned Nix Packages collection must be accessible.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/introduction.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell '<nixpkgs>' --attr pan\n```\n\n----------------------------------------\n\nTITLE: Listing Available Checks in a Flake\nDESCRIPTION: Shows how to retrieve and process the list of available checks for a specific architecture in the nix flake.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/eval.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix eval nix#checks.x86_64-linux --apply builtins.attrNames\n```\n\n----------------------------------------\n\nTITLE: Applying Nix Build Environment to Current Shell - Console\nDESCRIPTION: Shows how to use the 'nix print-dev-env' command, piping its output into the current shell environment using Bash process substitution. This command sets the environment variables and functions necessary for replicating a package's build environment in the current shell, rather than in a subshell as with 'nix develop'. The snippet expects Nix to be installed and the specified package ('nixpkgs#hello') to be available.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/print-dev-env.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# . <(nix print-dev-env nixpkgs#hello)\n```\n\n----------------------------------------\n\nTITLE: Visual Output of Debugger Breakpoints (Before and After) - Nix\nDESCRIPTION: Provides a before-and-after comparison of debugger output messages for breakpoints and errors, showing reduced visual clutter in the newer version. Input is reaching a breakpoint or encountering an error in REPL. Output is REPL messages with less noise.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_8\n\nLANGUAGE: Nix\nCODE:\n```\ninfo: breakpoint reached\n\n\nStarting REPL to allow you to inspect the current state of the evaluator.\n\nWelcome to Nix 2.20.0pre20231222_dirty. Type :? for help.\n\nnix-repl> :continue\nerror: uh oh\n\n\nStarting REPL to allow you to inspect the current state of the evaluator.\n\nWelcome to Nix 2.20.0pre20231222_dirty. Type :? for help.\n\nnix-repl>\n```\n\nLANGUAGE: Nix\nCODE:\n```\ninfo: breakpoint reached\n\nNix 2.20.0pre20231222_dirty debugger\nType :? for help.\nnix-repl> :continue\nerror: uh oh\n\nnix-repl>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building with Meson (Shell)\nDESCRIPTION: These commands perform the configuration and build phases in a Meson-based multi-platform or variant build. The configurePhase typically generates Meson's build files, and buildPhase performs the actual build. The commands should be run with the 'mesonBuildDir' variable previously set.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nconfigurePhase\n```\n\nLANGUAGE: shell\nCODE:\n```\nbuildPhase\n```\n\n----------------------------------------\n\nTITLE: Building Nix for Alternate Platform with Flakes (Shell)\nDESCRIPTION: Uses the flake-enabled 'nix build' command to compile Nix for the specified platform. Targets the 'packages.aarch64-linux.default' flake attribute, useful for cross-building or creating release binaries for alternate architectures. This requires flakes and experimental features enabled.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build .#packages.aarch64-linux.default\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Script Invoking Nix - Bash\nDESCRIPTION: This snippet represents a typical block from a Bash functional test, running the Nix command as part of sequential test actions. Each command such as 'foo', 'nix blah blub', and 'bar' performs a discrete test function, and this structure is often used to isolate and debug commands within larger tests.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfoo\nnix blah blub\nbar\n```\n\n----------------------------------------\n\nTITLE: Optional Field Example - Same Schema\nDESCRIPTION: Example showing two objects that can belong to the same schema version using null to indicate optionality.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/json-guideline.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ \"foo\": null }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"foo\": { \"bar\": 1 } }\n```\n\n----------------------------------------\n\nTITLE: Updating Fallback Paths for Nix Releases - Shell-Session\nDESCRIPTION: Fetches the latest fallback-paths.nix for a given Nix version from the releases.nixos.org server and saves it to the appropriate path in the Nixpkgs tree. Ensures that fallback binaries shipped match the current release, required for installation tooling sanity checks. Prerequisites are network access and write access to Nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\ncurl https://releases.nixos.org/nix/nix-${version}/fallback-paths.nix > nixos/modules/installer/tools/nix-fallback-paths.nix\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from a Specific Nixpkgs Revision using Nix\nDESCRIPTION: This snippet illustrates how to install a package (hello) from a specific revision of the Nixpkgs repository using its commit hash with Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-install.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix profile install nixpkgs/d73407e8e6002646acfdef0e39ace088bacc83da#hello\n```\n\n----------------------------------------\n\nTITLE: Basic Nix Store Verify Command\nDESCRIPTION: The base command for verifying Nix database consistency\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/verify.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --verify\n```\n\n----------------------------------------\n\nTITLE: Deleting Current Nix Profile in Console\nDESCRIPTION: This command demonstrates how to delete the current Nix profile to migrate back to using 'nix-env'. It includes a warning about potential data loss and uses environment variables to locate the profile directory.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rm -rf \"${XDG_STATE_HOME-$HOME/.local/state}/nix/profiles/profile\"\n```\n\n----------------------------------------\n\nTITLE: Building Package and Printing Store Path\nDESCRIPTION: Demonstrates building GNU Hello and printing the resulting store path using the '--print-out-paths' option.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/build.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix build nixpkgs#hello --print-out-paths\n/nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10\n```\n\n----------------------------------------\n\nTITLE: Build Success Acknowledgement and Progress Feedback - Shell\nDESCRIPTION: Shows a typical end-to-end build output for Nix, including download logs, ellipsized output sections, and a final bright confirmation that the build succeeded. The focus is on giving users clear, immediate feedback that their operation has completed successfully, which is especially important for lengthy operations. Intended for interactive terminal use, but should suppress extraneous info in non-interactive usage.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build\n Downloaded python3.8-poetry 1.2.3 in 5.3 seconds\n Downloaded python3.8-requests 1.2.3 in 5.3 seconds\n...\n   Success! You have successfully built my-project.\n$\n```\n\n----------------------------------------\n\nTITLE: Compiling Release Notes Using Custom Script - Console\nDESCRIPTION: Runs a custom release-notes script after setting the VERSION environment variable and creating a new git branch. This snippet generates a draft of the release notes based on the current repository state for further review and editing. Prerequisites: The release script ('./maintainers/release-notes') and the environment variable VERSION set to the release number without the patch level; requires an up-to-date local git repository checkout.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ export VERSION=X.YY\\n$ git checkout -b release-notes\\n$ ./maintainers/release-notes\n```\n\n----------------------------------------\n\nTITLE: Building and Using Nix Language Plug-in - ShellSession\nDESCRIPTION: These commands show how to compile the C plug-in as a shared library and load it in Nix's interactive REPL to test the new primitive. Compilation uses gcc and pkg-config to link with the Nix C API; executing 'nix --plugin-files' loads the plug-in, making the increment function available in the REPL. This process requires appropriate Nix and C toolchain development environments.\nSOURCE: https://github.com/nixos/nix/blob/master/src/external-api-docs/README.md#_snippet_3\n\nLANGUAGE: ShellSession\nCODE:\n```\n$ gcc plugin.c $(pkg-config nix-expr-c --libs --cflags) -shared -o plugin.so\\n$ nix --plugin-files ./plugin.so repl\\nnix-repl> builtins.increment 1\\n2\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Hook in Nix.conf - Nix Config\nDESCRIPTION: This Nix configuration snippet specifies the post-build hook script to run after builds complete. By adding this to 'nix.conf', Nix will execute the given script automatically for each build result.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/post-build-hook.md#_snippet_4\n\nLANGUAGE: nix-config\nCODE:\n```\npost-build-hook = /etc/nix/upload-to-cache.sh\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Warnings for Unknown Settings - Nix CLI - Console\nDESCRIPTION: These code snippets showcase the output from running Nix CLI commands with an unrecognized option, both before and after the update in 2.23.0. The examples demonstrate the new comprehensive warnings applied to all commands, and exemplify the CLI behavior with unknown flags. No programming dependencies are required, but a Nix installation is necessary. Inputs are shell commands; outputs are warning messages and command evaluation results.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.23.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-instantiate --option foobar baz --expr '{}'\nwarning: unknown setting 'foobar'\n$ nix-instantiate '{}' --option foobar baz --expr\n$ nix eval --expr '{}' --option foobar baz\n{ }\n```\n\nLANGUAGE: console\nCODE:\n```\n$ nix-instantiate --option foobar baz --expr '{}'\nwarning: unknown setting 'foobar'\n$ nix-instantiate '{}' --option foobar baz --expr\nwarning: unknown setting 'foobar'\n$ nix eval --expr '{}' --option foobar baz\nwarning: unknown setting 'foobar'\n{ }\n```\n\n----------------------------------------\n\nTITLE: Querying Derivation Path in Nix Store\nDESCRIPTION: Command to display the derivation path that built a given store path\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-store -qR $(which firefox)\n/nix/store/4b0jx7vq80l9aqcnkszxhymsf1ffa5jd-firefox-1.0.1.drv\n```\n\n----------------------------------------\n\nTITLE: Running the Nix Daemon\nDESCRIPTION: The basic command to run the Nix daemon, which handles build tasks and store operations on behalf of non-root users in multi-user Nix installations.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/unix/daemon.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix daemon\n```\n\n----------------------------------------\n\nTITLE: Updating the NixOS System Profile to a Remote Closure Using Nix CLI - Console\nDESCRIPTION: Updates the local NixOS system profile to point to a closure copied from a remote machine using SSH as transport. The '--profile' flag specifies the system profile to update, and the path provided points to a remotely copied system closure. Requires SSH connectivity, Nix installation, and appropriate system access rights. The operation results in the system profile referring to the new, remotely sourced closure.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --from ssh://server \\\n    --profile /nix/var/nix/profiles/system \\\n    /nix/store/r14v3km89zm3prwsa521fab5kgzvfbw4-nixos-system-foobar-24.05.20240925.759537f\n```\n\n----------------------------------------\n\nTITLE: Defining Store Path Structure Using EBNF - ebnf\nDESCRIPTION: This EBNF snippet specifies the overall structure of a Nix store path, indicating that it consists of a store directory, a digest, and the object name, separated by slashes and hyphens. It assumes the existence of prior definitions for 'store-dir', 'digest', and 'name' and relies on knowledge of base-32 encoding for digests. The output is a formal grammar fragment, not a runnable program, to be used in documentation or as a reference for parser or tooling implementations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nstore-path = store-dir \"/\" digest \"-\" name\n```\n\n----------------------------------------\n\nTITLE: Performing Dry-Run Installation with nix-env - Console Command - Shell\nDESCRIPTION: Shows use of --dry-run with nix-env to preview which packages would be installed or built, without making changes. Useful for verifying download sizes and outcomes before execution. Requires valid attribute path (hello) and access to the referenced Nixpkgs location.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_13\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --file '<nixpkgs>' --install --attr hello --dry-run\n(dry run; not doing anything)\ninstalling ‘hello-2.10’\nthis path will be fetched (0.04 MiB download, 0.19 MiB unpacked):\n  /nix/store/wkhdf9jinag5750mqlax6z2zbwhqb76n-hello-2.10\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Meson Build Type for Debugging in Bash Shell - Console\nDESCRIPTION: This snippet sets the 'mesonBuildType' environment variable to 'debugoptimized' inside a nix-shell, enabling debug symbols and optimized debugging builds via Meson. The command must be run in a development shell before running the build so that subsequent builds include debugging information required by debuggers. No additional dependencies are needed beyond access to nix-shell and a correctly set up development environment. The input is the shell environment, and the output is an updated environment variable.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ export mesonBuildType=debugoptimized\n```\n\n----------------------------------------\n\nTITLE: Creating Maintenance Release Branch - Console\nDESCRIPTION: After ensuring the local master branch is up-to-date, creates a new git branch named according to the current release version with '-maintenance' suffix. This isolates upcoming maintenance work for the release from ongoing development. Requires that the main branch is checked out and current.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git checkout master\\n$ git pull\\n$ git checkout -b $VERSION-maintenance\n```\n\n----------------------------------------\n\nTITLE: Defining Deterministic and Non-deterministic Derivations in Nix - Nix\nDESCRIPTION: This code defines a Nix expression that provides two derivations: 'stable', which is deterministic, and 'unstable', which embeds randomness in its output. It demonstrates the use of 'runCommand' in Nix for custom build actions, with one ensuring identical output and the other introducing potential differences. Prerequisites include the Nix package manager and a suitable Nixpkgs channel. The file expects no parameters and outputs two attributes whose reproducibility can be directly tested. Limitations: 'unstable' derivation uses shell random which is inherently non-deterministic.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/diff-hook.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\nlet\n  inherit (import <nixpkgs> {}) runCommand;\nin {\n  stable = runCommand \"stable\" {} ''\n    touch $out\n  '';\n\n  unstable = runCommand \"unstable\" {} ''\n    echo $RANDOM > $out\n  '';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Scripting with nix-shell Shebang for Haskell (Haskell/Bash Hybrid)\nDESCRIPTION: This snippet is a Haskell script using nix-shell as its shebang interpreter. The first two lines declare the script’s interpreter and required Nix shell command, specifying the desired GHC and HTTP Haskell package dependencies. When invoked, nix-shell fetches the required compilers and libraries, then runs the script using runghc. Inputs: a source Haskell program; Output: script output after HTTP GET. This approach facilitates portable, dependency-free (for the user) scripts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.9.md#_snippet_6\n\nLANGUAGE: Haskell\nCODE:\n```\n#! /usr/bin/env nix-shell\\n#! nix-shell -i runghc -p haskellPackages.ghc haskellPackages.HTTP\\n\\nimport Network.HTTP\\n\\nmain = do\\n  resp <- Network.HTTP.simpleHTTP (getRequest \\\"http://nixos.org/\\\")\\n  body <- getResponseBody resp\\n  print (take 100 body)\n```\n\n----------------------------------------\n\nTITLE: Executing nix-env Command in Bash\nDESCRIPTION: Shows the general syntax for running the nix-env command with various options and arguments.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix-env operation [options] [arguments…] \\\n  [--option name value] \\\n  [--arg name value] \\\n  [--argstr name value] \\\n  [{--file | -f} path] \\\n  [{--profile | -p} path] \\\n  [--system-filter system] \\\n  [--dry-run]\n```\n\n----------------------------------------\n\nTITLE: Defining 'source' Type for Fingerprints in Nix Grammar - ebnf\nDESCRIPTION: This snippet documents the 'source' fingerprint type for the Nix Archive content-addressing method. It codifies the rule as the string 'source', optionally followed by colon-prefixed store paths (references), and an optional ':self' marker for self-referential objects. The output is used in lexical or documentation tools that support formal Nix path definitions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_3\n\nLANGUAGE: ebnf\nCODE:\n```\n| \"source\" { \":\" store-path } [ \":self\" ]\n```\n\n----------------------------------------\n\nTITLE: Running Nix Daemon with Standard I/O\nDESCRIPTION: Runs the Nix daemon using standard I/O for communication instead of binding to a UNIX socket.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/unix/daemon.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix daemon --stdio\n```\n\n----------------------------------------\n\nTITLE: Setting Required System Features for KVM in Nix Derivation\nDESCRIPTION: Demonstrates how to ensure a derivation only builds on machines with specific features by using requiredSystemFeatures. This example requires the build machine to have KVM capability.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\nrequiredSystemFeatures = [ \"kvm\" ];\n```\n\n----------------------------------------\n\nTITLE: Sample Output of uname on Linux - Console\nDESCRIPTION: Shows typical output ('Linux') returned by the 'uname' command on a Linux system. It sets context for identifying the local host's architecture prior to forwarding builds to a different platform. This snippet validates the operating system for the cross-platform example.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nLinux\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzzy Search for Template Selection in Nix CLI Shell Scripts\nDESCRIPTION: This shell snippet illustrates how the Nix command-line tool offers a fuzzy searching experience, similar to 'fzf', for selecting templates during project initialization. It relies on built-in interactive selection in the shell, triggered by 'nix init'. No external dependencies are required, but fzf-like interaction is assumed to be built into the CLI. Input is a user command and output includes a list of selectable templates. The example assumes a list of templates detected dynamically; actual implementation may require further scripting.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ nix init\nInitializing Nix project at `/path/to/here`.\n      Select a template for you new project:\n          |> py\n             template#python-pip\n             template#python-poetry\n             [ Showing 2 templates from 1345 templates ]\n```\n\n----------------------------------------\n\nTITLE: Configuring outputsToInstall Meta Attribute - Nix Language\nDESCRIPTION: Provides a Nix expression overriding the outputsToInstall meta attribute to restrict the installed outputs to 'bar' only. This example imports a derivation and augments its metadata. Used together with nix-env to limit which output files appear in the user profile.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_3\n\nLANGUAGE: Nix\nCODE:\n```\n# example-outputs.nix\nimport ./example.nix // { meta.outputsToInstall = [ \"bar\" ]; }\n```\n\n----------------------------------------\n\nTITLE: Deleting Generations Older Than a Certain Age Using nix-env - Console\nDESCRIPTION: This command removes all generations except the current one that are older than a specified number of days (here '14d', i.e., 14 days). The d suffix indicates days. Requires nix installation. The input parameter determines the age cutoff, and all matching generations are deleted. Output is a profile with only current and recently created generations. Typically used for routine maintenance.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/garbage-collection.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --delete-generations 14d\n```\n\n----------------------------------------\n\nTITLE: Preventing Specific Dependencies with disallowedReferences in Nix Derivation\nDESCRIPTION: Shows how to use disallowedReferences to prevent direct runtime dependencies on a specific derivation. This example ensures the output cannot directly depend on the 'foo' derivation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\ndisallowedReferences = [ foo ];\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Nix Subcommand Help (Console)\nDESCRIPTION: This command displays help information for a specific Nix subcommand. In this case, it shows help for the 'flake info' subcommand, which provides information about Nix flakes.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/help.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix help flake info\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress Feedback in Nix CLI Shell Scripts\nDESCRIPTION: This shell snippet demonstrates how the Nix command-line tool provides progress updates during a build process. It includes real-time download and build status, guidance overlays, and usage tips. No external dependencies are required beyond the standard Nix installation. The input simulates interactive user output with status lines and instructions, while output is the formatted progress shown in the shell console. Limitations include being illustrative only, not an actual script for execution.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build\n    Started building my-project 1.2.3\n Downloaded python3.8-poetry 1.2.3 in 5.3 seconds\n Downloaded python3.8-requests 1.2.3 in 5.3 seconds\n------------------------------------------------------------------------\n      Press `v` to increase logs verbosity\n         |> `?` to see other options\n------------------------------------------------------------------------\n      Learn something new with every build...\n         |> See last logs of a build with `nix log --last` command.\n------------------------------------------------------------------------\n  Evaluated my-project 1.2.3 in 14.43 seconds\nDownloading [12 / 200]\n         |> firefox 1.2.3 [#########>       ] 10Mb/s | 2min left\n   Building [2 / 20]\n         |> glibc 1.2.3 -> buildPhase: <last log line>\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Path Interpolation in Nix\nDESCRIPTION: Shows path interpolation syntax for combining path components.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-interpolation.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n./${foo}-${bar}.nix\n```\n\n----------------------------------------\n\nTITLE: Defining Nix Expression Example - Markdown\nDESCRIPTION: This snippet outlines, in markdown, that a Nix expression consists of the contents of a `.nix` file, exemplifying how Nix uses its own configuration language. The context implies use in defining derivations and package descriptions. No code execution is shown, and understanding requires familiarity with the Nix expression language.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/glossary.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> **Example**\\n>\\n> The contents of a `.nix` file form a Nix expression.\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Remote Repository - Console\nDESCRIPTION: Pushes the newly created 'release-notes' branch to a specified git remote, setting the upstream reference for future pushes. Expects that changes for release notes have been committed before pushing. Ensure that $REMOTE is replaced with the desired remote name (e.g., origin) prior to running.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git push --set-upstream $REMOTE release-notes\n```\n\n----------------------------------------\n\nTITLE: Listing Attributes in nix-env Query - Shell\nDESCRIPTION: This snippet demonstrates how nix-env -q --attr shows attribute names corresponding to each derivation. Attribute names provide unambiguous references compared to symbolic package names. The command depends on Nix environment and access to a valid Nix package set. Outputs list correlation between attributes and derivations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -q --attr\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of GCC using nix-env\nDESCRIPTION: Illustrates how to install a specific version of GCC, even if it's not the highest version available.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.11.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -i gcc-4.2.0rc1\n```\n\n----------------------------------------\n\nTITLE: Release Note Entry Format in YAML\nDESCRIPTION: Example format for adding a new release note entry in the doc/manual/rl-next directory. Shows required fields including synopsis, issue references, and PR numbers, along with markdown content.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/contributing.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsynopsis: Basically a title\nissues: 1234\nprs: 1238\n---\n\nHere's one or more paragraphs that describe the change.\n\n- It's markdown\n- Add references to the manual using @docroot@\n```\n\n----------------------------------------\n\nTITLE: Output of Indented String after Stripping Indentation - Nix\nDESCRIPTION: Displays the resultant value of an indented string literal after Nix processes indentation removal. The output uses standard escape sequences for line breaks and preserves leading spaces not stripped. This highlights the interpretation behavior of indented strings in Nix evaluation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n\"This is the first line.\\nThis is the second line.\\n  This is the third line.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Sign in Indented Nix Strings - Nix\nDESCRIPTION: Illustrates how to escape a literal dollar sign in an indented Nix string by prefixing the character with two single quotes. This prevents interpretation as a string interpolation and is necessary when outputting text containing dollar signs verbatim, such as shell scripts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n''\n  ''$\n''\n```\n\n----------------------------------------\n\nTITLE: Citing Inspiration and Co-Authorship in Pull Requests - Markdown\nDESCRIPTION: This snippet demonstrates how to attribute code inspiration and co-authorship using Markdown in a pull request description. The block includes referencing other users' contributions and citing additional sources of inspiration. It also shows the recommended format for Git authorship acknowledgments using the 'Co-authored-by' line, which should be added exactly at the bottom of the commit message to correctly attribute collaborative work in version control history.\nSOURCE: https://github.com/nixos/nix/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis is based on the work of @user in <url>.\nThis solution took inspiration from <url>.\n\nCo-authored-by: User Name <user@example.com>\n```\n\n----------------------------------------\n\nTITLE: Specifying Derivation Outputs in Nix\nDESCRIPTION: Demonstrates the new syntax for specifying which outputs of a derivation Nix should operate on, using the '^' symbol to select specific or all outputs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.9.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nnixpkgs#glibc^dev,static\n```\n\nLANGUAGE: nix\nCODE:\n```\nnixpkgs#glibc^*\n```\n\n----------------------------------------\n\nTITLE: Using Lookup Paths in Nix\nDESCRIPTION: Demonstrates referencing paths via angle brackets, which Nix resolves using the NIX_PATH environment variable. Often used for locating package sets or project roots. Prerequisite: correct NIX_PATH setup.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\n<nixpkgs>\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Attributes via Attribute Path Syntax - Nix - nix\nDESCRIPTION: Recommends the use of Nix's nested attribute path syntax for declaring nested keys, including dynamic key names. This improves legibility and avoids pitfalls associated with multiple full attribute set declarations. Inputs include statically and dynamically named attributes in a Nix expression; the output is an attribute set with nested keys. No imports are required. This is the preferred idiom going forward.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.17.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  nested.foo = 1;\n  nested.${\"ba\" + \"r\"} = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Generations by Number Using nix-env - Console\nDESCRIPTION: This snippet shows how to delete specified profile generations by their numbers using the nix-env command. The command takes space-separated generation numbers as input and removes those entries from the current user profile. Requires nix installed; works only on the listed generations and does not affect current generation. Output is a pruned set of generations as specified.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/garbage-collection.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --delete-generations 10 11 14\n```\n\n----------------------------------------\n\nTITLE: Building Internal API Documentation Inside Development Shell - Console\nDESCRIPTION: This snippet demonstrates a sequence of commands for building the Nix internal API documentation inside a development shell (nix-shell or nix develop). It uses the configurePhase, ninja build tool, and xdg-open to generate and view the API documentation locally. All commands must be executed in a shell with the appropriate build dependencies available.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ configurePhase\n$ ninja src/internal-api-docs/html\n$ xdg-open src/internal-api-docs/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Single Identifier Function Pattern in Nix\nDESCRIPTION: Demonstrates functions with single identifier patterns that match any argument. The example shows two functions: 'negate' which inverts a boolean value, and 'concat' which concatenates two strings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nlet negate = x: !x;\n    concat = x: y: x + y;\nin if negate true then concat \"foo\" \"bar\" else \"\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Link Header Example for Immutable Flake Reference\nDESCRIPTION: Example of the HTTP Link header format required for servers to indicate an immutable flake reference URL.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/tarball-fetcher.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLink: <flakeref>; rel=\"immutable\"\n```\n\n----------------------------------------\n\nTITLE: Debugger Attribute Error Position Reporting (Before and After) - Nix\nDESCRIPTION: Shows the improvement in reporting source positions for attribute errors during debugging. The older snippet lacks position details, while the new output shows source file lines and precise column markers. The input is evaluation in the REPL with an error in attribute access.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_10\n\nLANGUAGE: Nix\nCODE:\n```\n0: while evaluating the attribute 'python311.pythonForBuild.pkgs'\n0x600001522598\n```\n\nLANGUAGE: Nix\nCODE:\n```\n0: while evaluating the attribute 'python311.pythonForBuild.pkgs'\n/nix/store/hg65h51xnp74ikahns9hyf3py5mlbbqq-source/overrides/default.nix:132:27\n\n   131|\n   132|       bootstrappingBase = pkgs.${self.python.pythonAttr}.pythonForBuild.pkgs;\n      |                           ^\n   133|     in\n```\n\n----------------------------------------\n\nTITLE: Enabling ca-derivations experimental feature in Nix configuration (Nix language)\nDESCRIPTION: This snippet demonstrates how to enable the 'ca-derivations' experimental feature in Nix settings by adding the value to the extra-experimental-features key in a nix.conf configuration file. This is necessary to utilize the __contentAddressed attribute and enable floating content-addressed derivations. The code should be placed in the appropriate Nix configuration context; its effect applies globally to the entire Nix installation or profile.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/advanced-attributes.md#_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\nextra-experimental-features = ca-derivations\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packages by Regular Expression - Shell\nDESCRIPTION: Shows the prior way of removing or upgrading packages in Nix profile by matching names via regular expressions. Uses shell command-line invocation. Input is a package name pattern as a regex; output is matched package removal or upgrade. No additional dependencies beyond Nix CLI.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnix profile remove '.*vim.*'\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnix profile upgrade '.*'\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in the Debugger (Previous and New Output) - Nix\nDESCRIPTION: Shows comparative output from entering the debugger when a thrown error occurs. The first snippet shows nested debugger entry in older versions; the second shows the improved behavior with clear error output and no nested debuggers. Use for understanding new error-handling flow in Nix REPL debugger.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_4\n\nLANGUAGE: Nix\nCODE:\n```\nnix-repl> builtins.throw \"what\"\nerror: what\n\n\nStarting REPL to allow you to inspect the current state of the evaluator.\n\nWelcome to Nix 2.18.1. Type :? for help.\n\nnix-repl>\n```\n\nLANGUAGE: Nix\nCODE:\n```\nnix-repl> builtins.throw \"what\"\nerror:\n       … while calling the 'throw' builtin\n         at «string»:1:1:\n            1| builtins.throw \"what\"\n             | ^\n\n       error: what\n```\n\n----------------------------------------\n\nTITLE: Launching LLDB to Debug the Nix Binary on macOS - Console\nDESCRIPTION: This command starts LLDB, specifying the Nix binary as the target on macOS or other systems with LLDB support. LLDB must be installed via nix-shell, and the Nix binary must be built with debug symbols. Input includes the relative program path; output is an ongoing LLDB interactive session.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ lldb -- ../outputs/out/bin/nix\n```\n\n----------------------------------------\n\nTITLE: Using Parameter in Default Value for Another Parameter in Nix\nDESCRIPTION: Demonstrates that a parameter (x) can be used in the default value for another parameter (y). Function bindings are in scope in the entire function expression, not just the body.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_16\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = { x, y ? [x] }: { inherit y; };\nin\n  f { x = 3; }\n```\n\n----------------------------------------\n\nTITLE: Hash Function Fixed Point Example\nDESCRIPTION: Demonstrates the computational challenge of finding a hash function fixed point when dealing with self-references in store objects. Shows why direct path references cannot be used during path computation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/store-object/content-address.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndigest = hash(..... || digest || ....)\n```\n\n----------------------------------------\n\nTITLE: Installing Built Nix and Verifying Version (Shell)\nDESCRIPTION: This sequence installs the built Nix binaries and checks the installed version to confirm success. installPhase copies artifacts to ./outputs, and the following command queries the version. Assumes the shell environment where Nix was built has the correct prefixes set, and outputs are located at ./outputs/out.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell]$ installPhase\\n[nix-shell]$ ./outputs/out/bin/nix --version\\nnix (Nix) 2.12\n```\n\n----------------------------------------\n\nTITLE: Creating Content-Addressed NixOS System Closure - Shell Example\nDESCRIPTION: This command invokes \"nix store make-content-addressed\" on the current system closure (\"/run/current-system\"), generating a content-addressed variant. Primarily used for trusted export or restoration of the full NixOS system profile. Requires system-level access to /run/current-system and Nix installed. Input is the absolute path to a system closure; output is its content-addressed variant, useful for sharing and snapshotting.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/make-content-addressed.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix store make-content-addressed /run/current-system\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in nix repl (Concise Output) - Nix\nDESCRIPTION: Illustrates the improved, concise error output in nix repl for attribute sets containing errors. Requires only the Nix REPL. Shows the new, shortened presentation format, which omits unnecessary details.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_1\n\nLANGUAGE: Nix\nCODE:\n```\nnix-repl> { err = builtins.throw \"uh oh!\"; }\n{ err = «error: uh oh!»; }\n```\n\n----------------------------------------\n\nTITLE: Deleting Profile Generations Older Than a Number of Days with nix-env - Console\nDESCRIPTION: Shows how to delete all profile generations older than the specified number of days, except for the generation that was active N days ago. Uses the \"<number>d\" syntax (here, \"30d\") as an argument. This command requires nix-env and adequate date metadata on each generation. It keeps the most recent generation from the specified time period (if it exists).\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/delete-generations.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --delete-generations 30d\n```\n\n----------------------------------------\n\nTITLE: Running Nix Daemon with Forced Untrust\nDESCRIPTION: Runs the Nix daemon and forces all connections to be untrusted, requiring explicit permissions for operations.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/unix/daemon.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# nix daemon --force-untrusted\n```\n\n----------------------------------------\n\nTITLE: Evaluation Result of Parameter Used in Default Value in Nix\nDESCRIPTION: Shows the evaluation result of the previous function example. The result demonstrates that x was used to construct the default value for y.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_17\n\nLANGUAGE: nix\nCODE:\n```\n{\n  y = [ 3 ];\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Interpreters with Nix and Rust (Rust)\nDESCRIPTION: Shows an advanced example of cascading interpreters, where a Rust script embeds both Nix and Cargo configuration directives. The script uses a Nix shebang to provision Rust toolchains and dependencies, then executes via 'rust-script'. Embedded comments include Cargo.toml-style dependencies. This approach allows for portable, dependency-managed Rust scripting. Dependencies include Nix, rustc, rust-script, cargo, and referenced Rust crates. Inputs are command-line arguments; outputs are printed to stdout, including arguments and environment variables.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#!/usr/bin/env nix\\n//! ```cargo\\n//! [dependencies]\\n//! time = \"0.1.25\"\\n//! ```\\n/*\\n#!nix shell nixpkgs#rustc nixpkgs#rust-script nixpkgs#cargo --command rust-script\\n*/\\nfn main() {\\n    for argument in std::env::args().skip(1) {\\n        println!(\"{}\", argument);\\n    };\\n    println!(\"{}\", std::env::var(\"HOME\").expect(\"\"));\\n    println!(\"{}\", time::now().rfc822z());\\n}\\n// vim: ft=rust\n```\n\n----------------------------------------\n\nTITLE: Rolling Back NixOS Profile to Specific Version\nDESCRIPTION: Example of switching the default profile to a specific version (510) using the 'nix profile rollback --to' command with a version number parameter. Shows the console output indicating a profile switch from version 518 to 510.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profile-rollback.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix profile rollback --to 510\nswitching profile from version 518 to 510\n```\n\n----------------------------------------\n\nTITLE: Launching GDB to Debug the Nix Binary - Console\nDESCRIPTION: This snippet executes GDB with the specified Nix binary as the target for debugging, using '--args' to pass program arguments. The developer must have previously built the Nix binary with debug symbols and have GDB available in the shell. Inputs include the relative binary path; outputs are an interactive GDB debugging session.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ gdb --args ../outputs/out/bin/nix\n```\n\n----------------------------------------\n\nTITLE: Interpreting diff-closures Output for Nix Store - Console\nDESCRIPTION: This snippet exemplifies the diff-closures command output showing how a line details the version and size change of a package. The output line format is relevant for identifying differences between the two system generations, reflecting both version upgrades and storage impact. The snippet assumes the user is familiar with the concept of Nix store profiles and reviews the presented summary as plain console output.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/diff-closures.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndolphin: 20.08.1 → 20.08.2, +13.9 KiB\n```\n\n----------------------------------------\n\nTITLE: Recursive Directory Listing for Profile Version Content - Unix Shell - Console\nDESCRIPTION: This console output provides a recursive listing of a specified versioned Nix profile link, showing the overall structure and the symlinks within profile directories such as bin and share/applications. It highlights how executable binaries and desktop entries are symlinked to corresponding package paths in the Nix store. Prerequisites include having a Nix-managed profile version available at the path being inspected. The output aids in visualizing what files are included in the profile version and how they are arranged for system integration.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/profiles.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ll -R ~eelco/.local/state/nix/profiles/profile-7-link/\n/home/eelco/.local/state/nix/profiles/profile-7-link/:\ntotal 20\ndr-xr-xr-x 2 root root 4096 Jan  1  1970 bin\n-r--r--r-- 2 root root 1402 Jan  1  1970 manifest.nix\ndr-xr-xr-x 4 root root 4096 Jan  1  1970 share\n\n/home/eelco/.local/state/nix/profiles/profile-7-link/bin:\ntotal 20\nlrwxrwxrwx 5 root root 79 Jan  1  1970 chromium -> /nix/store/ijm5k0zqisvkdwjkc77mb9qzb35xfi4m-chromium-86.0.4240.111/bin/chromium\nlrwxrwxrwx 7 root root 87 Jan  1  1970 spotify -> /nix/store/w9182874m1bl56smps3m5zjj36jhp3rn-spotify-1.1.26.501.gbe11e53b-15/bin/spotify\nlrwxrwxrwx 3 root root 79 Jan  1  1970 zoom-us -> /nix/store/wbhg2ga8f3h87s9h5k0slxk0m81m4cxl-zoom-us-5.3.469451.0927/bin/zoom-us\n\n/home/eelco/.local/state/nix/profiles/profile-7-link/share/applications:\ntotal 12\nlrwxrwxrwx 4 root root 120 Jan  1  1970 chromium-browser.desktop -> /nix/store/4cf803y4vzfm3gyk3vzhzb2327v0kl8a-chromium-unwrapped-86.0.4240.111/share/applications/chromium-browser.desktop\nlrwxrwxrwx 7 root root 110 Jan  1  1970 spotify.desktop -> /nix/store/w9182874m1bl56smps3m5zjj36jhp3rn-spotify-1.1.26.501.gbe11e53b-15/share/applications/spotify.desktop\nlrwxrwxrwx 3 root root 107 Jan  1  1970 us.zoom.Zoom.desktop -> /nix/store/wbhg2ga8f3h87s9h5k0slxk0m81m4cxl-zoom-us-5.3.469451.0927/share/applications/us.zoom.Zoom.desktop\n\n…\n```\n\n----------------------------------------\n\nTITLE: Migrating Nix C++ Public Headers - diff\nDESCRIPTION: This snippet demonstrates how to update C++ file includes and configuration macro usage to comply with new Nix public API conventions introduced in version 2.28.0. It covers reorganizing `#include` paths to reflect new subdirectory structures, replacing macro names (e.g., `HAVE_ACL_SUPPORT` to `NIX_SUPPORT_ACL`), and utilizing configuration and component headers from the correct locations. Example code provides both 'before' and 'after' patterns using unified diff syntax. No specific programming dependencies are required aside from upgrading to Nix 2.28.0 and updating include paths accordingly. Input files are expected to be C++ source files previously depending on the legacy header/macro setup.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.28.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n@@ @@\n-#include \"derived-path.hh\"\n+#include \"nix/store/derived-path.hh\"\n@@ @@\n+// Would include for the variables used before. But when other headers\n+// need these variables. those will include these config themselves.\n+#include \"nix/store/config.hh\"\n+#include \"nix/expr/config.hh\"\n@@ @@\n-#include \"config.hh\"\n+// Additionally renamed to distinguish from components' config headers.\n+#include \"nix/util/configuration.hh\"\n@@ @@\n-#if HAVE_ACL_SUPPORT\n+#if NIX_SUPPORT_ACL\n@@ @@\n-#if HAVE_BOEHMGC\n+#if NIX_USE_BOEHMGC\n@@ @@\n #endif\n #endif\n@@ @@\n-const char *s = \"hi from \" SYSTEM;\n+const char *s = \"hi from \" NIX_LOCAL_SYSTEM;\n```\n```\n\n----------------------------------------\n\nTITLE: Let-Expression Syntax in Nix - Nix\nDESCRIPTION: This code snippet illustrates the improved syntax for multi-binding let-expressions in Nix. Multiple variables can be defined in a single let block with separated bindings, followed by 'in' introducing the expression utilizing those bindings. Prerequisites are using Nix expression language with the new feature set. Inputs: arbitrary expressions; output: evaluated result per bindings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.10.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nlet x = ...;\n    ... z = ...; in ...\n```\n\n----------------------------------------\n\nTITLE: Listing Profile Generations Using ls - Console\nDESCRIPTION: This snippet uses the 'ls -l' command to list symlinks in the Nix profiles directory, showing user environment generations and current generation pointers. No dependencies are required beyond shell access. It provides insight into generation management and symlink relationships by displaying the target user environments for each generation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/profiles.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l /nix/var/nix/profiles/\n...\nlrwxrwxrwx  1 eelco ... default-42-link -> /nix/store/0c1p5z4kda11...-user-env\nlrwxrwxrwx  1 eelco ... default-43-link -> /nix/store/3aw2pdyx2jfc...-user-env\nlrwxrwxrwx  1 eelco ... default -> default-43-link\n```\n\n----------------------------------------\n\nTITLE: Manually Creating the /nix Directory as Root - Console\nDESCRIPTION: Illustrates how to manually create the /nix directory and set its ownership using root privileges, a requirement on single-user systems lacking sudo access. Run 'su root' to become root, then execute mkdir and chown to prepare the Nix store location for a specific user. This sequence of commands is necessary before running the single-user installer under those constraints.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-binary.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ su root\n# mkdir /nix\n# chown alice /nix\n```\n\n----------------------------------------\n\nTITLE: Debugging C++ Unit Tests with GDB and Meson - Shell Session\nDESCRIPTION: Shows how to combine Meson's '--gdb' test option with GoogleTest environment variables for interactive debugging. Running this command starts the specified unit test ('nix-expr-tests'), only executes the test named 'Group.my-failing-test', and opens a GDB debugging session if the test fails. This workflow assists developers in diagnosing test assertion failures by pausing execution at the point of failure.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\nGTEST_BRIEF=1 GTEST_FILTER='Group.my-failing-test' meson test nix-expr-tests --gdb\n```\n\n----------------------------------------\n\nTITLE: Setting NIX_REMOTE Environment Variable (Bash)\nDESCRIPTION: This snippet demonstrates how to set the NIX_REMOTE environment variable to \"daemon\" in user login scripts, which directs client tools to interact with the shared Nix daemon. This is necessary for unprivileged users to communicate with the daemon and use shared Nix store functionality. Users should place the export command in their shell profile files (e.g., .bashrc or .profile) for persistent configuration.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/multi-user.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport NIX_REMOTE=daemon\n```\n\n----------------------------------------\n\nTITLE: Verifying Local Log Availability in Nix\nDESCRIPTION: This snippet shows how to verify that a build log is available locally in the Nix store. It uses the 'nix log' command with the '--substituters' flag set to an empty string to avoid querying the remote cache.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-copy-log.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix log --substituters '' nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Rolling Back User Environment with nix-env in Console\nDESCRIPTION: Demonstrates how to use the nix-env --rollback command from the console to revert the user environment to a previous generation. Requires that Nix is installed and generations exist to roll back to. The command takes no additional parameters; its output will indicate success (including which generations it switches between) or failure (if no older generation exists). This is suitable for users managing environments with Nix profiles.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/rollback.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --rollback\\nswitching from generation 92 to 91\n```\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --rollback\\nerror: no generation older than the current (91) exists\n```\n\n----------------------------------------\n\nTITLE: Old Nix 2.3 syntax for referring to packages in channels\nDESCRIPTION: The deprecated syntax for referring to packages in channels using the nix command in Nix 2.3.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnix build nixpkgs.hello # Nix 2.3\n```\n\n----------------------------------------\n\nTITLE: Querying Reverse Dependencies\nDESCRIPTION: Command to find all paths that depend on a specific package\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-store -q --referrers-closure \\\n    /nix/store/8lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4\n```\n\n----------------------------------------\n\nTITLE: Registering GC Root and Inspecting Symlinks with nix-store — Shell\nDESCRIPTION: These console examples show how to use the nix-store command with the --add-root option to register a result as a GC root. To verify the results, ls -l is used to display the auto-generated symlink in /nix/var/nix/gcroots/auto and the target result symlink. Dependencies include an operational nix environment and necessary permutations for store and local paths. Users must have permission to run shell commands and access the mentioned directories. Inputs are nix-store commands with result paths; outputs are created symlink files.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/opt-common.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --add-root /home/eelco/bla/result --realise ...\n\n$ ls -l /nix/var/nix/gcroots/auto\nlrwxrwxrwx    1 ... 2005-03-13 21:10 dn54lcypm8f8... -> /home/eelco/bla/result\n\n$ ls -l /home/eelco/bla/result\nlrwxrwxrwx    1 ... 2005-03-13 21:10 /home/eelco/bla/result -> /nix/store/1r11343n6qd4...-f-spot-0.0.10\n```\n\n----------------------------------------\n\nTITLE: Syntax Block Using EBNF Notation - Markdown\nDESCRIPTION: This snippet illustrates how to present syntax definitions using EBNF within an admonition-style block. It is intended to clarify syntactic structures in the Nix manual, aiding reader comprehension. It shows the preferred markdown technique for syntax and grammar explanations.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n> **Syntax**\n>\n> *attribute-set* = `{` [ *attribute-name* `=` *expression* `;` ... ] `}`\n```\n\n----------------------------------------\n\nTITLE: Debugging a Nix Command in a Functional Test Script Using GDB - Diff\nDESCRIPTION: Shows how to edit a functional test script to replace the direct Nix command invocation with a GDB-wrapped command, facilitating interactive debugging. The diff marks removal of the plain 'nix blah blub' line and addition of 'gdb --args nix blah blub', enabling the user to break and inspect execution within the test workflow.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n foo\n-nix blah blub\n+gdb --args nix blah blub\n bar\n```\n\n----------------------------------------\n\nTITLE: Starting Flake-Based Development Environment (Shell)\nDESCRIPTION: This command opens a development shell using Nix flakes, with dependencies and environment variables set for building Nix. It assumes flakes and the nix-command experimental features are enabled. The resulting shell includes project's outputs in PATH and is recommended for flake-enabled workflows.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ nix develop\n```\n\n----------------------------------------\n\nTITLE: Attempting to Delete a Live Path from Nix Store\nDESCRIPTION: This example demonstrates attempting to delete a path from the Nix store that is still 'alive' (reachable from a garbage collector root). The command fails with an error message stating the path cannot be deleted since it is still alive.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --delete /nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7-mesa-6.4\n0 bytes freed (0.00 MiB)\nerror: cannot delete path `/nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7-mesa-6.4' since it is still alive\n```\n\n----------------------------------------\n\nTITLE: Removing Nix Build Users and Group on macOS\nDESCRIPTION: Commands to remove the nixbld group and _nixbuildN users on macOS using dscl.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nsudo dscl . -delete /Groups/nixbld\nfor u in $(sudo dscl . -list /Users | grep _nixbld); do sudo dscl . -delete /Users/$u; done\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Path with the Existence Check Operator in Nix\nDESCRIPTION: Shows how to use the '?' operator in Nix to check for the existence of a nested attribute path within an attribute set.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.0.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nattrs ? a.b.c\n```\n\n----------------------------------------\n\nTITLE: Querying Build Log by Store Path with Nix CLI - Console\nDESCRIPTION: This code demonstrates fetching the build log for a specific derivation or package by providing its full store path to the `nix log` command. It requires knowledge or discovery of the relevant path in the Nix store. The output consists of the build log if available; if the path does not correspond to a known build, the log may not be found.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/log.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix log /nix/store/lmngj4wcm9rkv3w4dfhzhcyij3195hiq-thunderbird-52.2.1\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Sets and Nested Sets in Nix\nDESCRIPTION: Shows how to construct attribute sets, including nesting and recursive bindings. Attribute sets are analogous to maps or dictionaries with string keys. No dependencies, but meaning may depend on attribute values.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/index.md#_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n{ x = 1; y = 2; }\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ foo.bar = 1; }\n```\n\nLANGUAGE: nix\nCODE:\n```\nrec { x = \"foo\"; y = x + \"bar\"; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Signed Binary Cache in Nix (Plaintext Configuration)\nDESCRIPTION: These lines demonstrate how to enable signature checking for Nix binary cache downloads by setting corresponding keys in nix.conf. No external dependencies besides a Nix build with libsodium support are required. The configuration ensures only binaries signed by the specified cache public keys are accepted during installation or upgrades. Inputs are the key and cache location; there are no outputs except secure cache usage. Backward-incompatible changes to signature formats are noted.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.9.md#_snippet_0\n\nLANGUAGE: Plaintext\nCODE:\n```\nsigned-binary-caches = *\\nbinary-cache-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\n```\n\n----------------------------------------\n\nTITLE: Downloading Flake from Registry with JSON Output via nix flake - Console\nDESCRIPTION: This example shows how to prefetch a flake named 'dwarffs' using 'nix flake prefetch' with the '--json' flag to receive the output as a JSON object. It demonstrates command usage suitable for scripting and automation, outputting both the content hash and the Nix store path for the downloaded flake. Dependencies: Nix package manager with flakes enabled and access to the appropriate flake registry. Key parameter is '--json', which changes the output format for easier programmatic consumption.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-prefetch.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake prefetch dwarffs --json\n{\"hash\":\"sha256-VHg3MYVgQ12LeRSU2PSoDeKlSPD8PYYEFxxwkVVDRd0=\",\"storePath\":\"/nix/store/hang3792qwdmm2n0d9nsrs5n6bsws6kv-source\"}\n```\n\n----------------------------------------\n\nTITLE: Querying All Package Outputs using Flake Output Attribute with Wildcard - Console\nDESCRIPTION: Uses the 'nix path-info' command with the '^*' syntax to query the sizes of all outputs for a package in the binary cache. Requires network access to the specified Nix store (e.g., 'https://cache.nixos.org') and flakes support enabled. Output is a list of store paths and their corresponding sizes.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/nix.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --closure-size --eval-store auto --store https://cache.nixos.org 'nixpkgs#glibc^*'\n/nix/store/g02b1lpbddhymmcjb923kf0l7s9nww58-glibc-2.33-123                 33208200\n/nix/store/851dp95qqiisjifi639r0zzg5l465ny4-glibc-2.33-123-bin             36142896\n/nix/store/kdgs3q6r7xdff1p7a9hnjr43xw2404z7-glibc-2.33-123-debug          155787312\n/nix/store/n4xa8h6pbmqmwnq0mmsz08l38abb06zc-glibc-2.33-123-static          42488328\n/nix/store/q6580lr01jpcsqs4r5arlh4ki2c1m9rv-glibc-2.33-123-dev             44200560\n```\n\n----------------------------------------\n\nTITLE: Restoring System Files on macOS\nDESCRIPTION: Commands to restore system-wide shell initialization files from backups made during Nix installation on macOS.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo mv /etc/zshrc.backup-before-nix /etc/zshrc\nsudo mv /etc/bashrc.backup-before-nix /etc/bashrc\nsudo mv /etc/bash.bashrc.backup-before-nix /etc/bash.bashrc\n```\n\n----------------------------------------\n\nTITLE: New Nix Builtin Functions\nDESCRIPTION: New builtin functions added in Nix 2.3: builtins.isPath and builtins.hashFile.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.3.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nbuiltins.isPath\nbuiltins.hashFile\n```\n\n----------------------------------------\n\nTITLE: Showing Single File Information in Binary Cache\nDESCRIPTION: Demonstrates how to display information about a specific file within a store path from a binary cache. Uses the --long flag to show detailed file attributes.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-ls.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix store ls --store https://cache.nixos.org/ --long /nix/store/0i2jd68mp5g6h2sa5k9c85rb80sn8hi9-hello-2.10/bin/hello\n-r-xr-xr-x                38184 hello\n```\n\n----------------------------------------\n\nTITLE: Using @-Pattern Binding in Default Value in Nix\nDESCRIPTION: Demonstrates that an @-pattern binding (args) can be used in the default value for a parameter (x). This shows how the entire argument set can be accessed in default values.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_18\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = args@{ x ? args.a, ... }: x;\nin\n  f { a = 1; }\n```\n\n----------------------------------------\n\nTITLE: Removing Nix Build Users and Group on Linux\nDESCRIPTION: Bash script to remove Nix build users and their group from the Linux system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfor i in $(seq 1 32); do\n  sudo userdel nixbld$i\ndone\nsudo groupdel nixbld\n```\n\n----------------------------------------\n\nTITLE: Building a Release Version with nix-build (Shell)\nDESCRIPTION: Executes nix-build to create a release build of Nix for the current operating system and architecture. This creates a result symlink pointing to the build output. Assumes a Nix expression exists for the default build, and all dependencies are satisfied in the environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build\n```\n\n----------------------------------------\n\nTITLE: Fingerprints: Defining Fingerprint Grammar in Nix - ebnf\nDESCRIPTION: This EBNF code defines the syntax for Nix store path fingerprints, which are composed of type, sha256 marker, inner digest, store, and name fields separated by colons. Dependencies include the definition of type (expanded elsewhere) and a proper understanding of content-addressing semantics. The output is intended for documentation and specification purposes, delineating how fingerprints are designed for unambiguous hashing and path construction.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_1\n\nLANGUAGE: ebnf\nCODE:\n```\nfingerprint = type \":sha256:\" inner-digest \":\" store \":\" name\n```\n\n----------------------------------------\n\nTITLE: Importing a Closure into a Remote SSH Store with nix-store --import (Console)\nDESCRIPTION: This code imports a previously exported closure (hello.closure) into a remote Nix store accessed via SSH using the --store option. Dependencies: nix-store command with SSH store capability, SSH access to the remote target. The input is a closure file; the output is the importation of the entire store closure to the specified store. Limitations: If dependencies are missing on the target and not present in the closure, import fails.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/import.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --import --store ssh://alice@itchy.example.org < hello.closure\n```\n\n----------------------------------------\n\nTITLE: Basic With-Expression Example in Nix\nDESCRIPTION: Demonstrates a simple with-expression that introduces the attributes x and y from the set as into the lexical scope of the expression x + y.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_25\n\nLANGUAGE: nix\nCODE:\n```\nlet as = { x = \"foo\"; y = \"bar\"; };\nin with as; x + y\n```\n\n----------------------------------------\n\nTITLE: Removing Single-User Nix Installation\nDESCRIPTION: Command to remove a single-user installation of Nix by deleting related directories and files.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nrm -rf /nix ~/.nix-channels ~/.nix-defexpr ~/.nix-profile\n```\n\n----------------------------------------\n\nTITLE: Running Formatters via Format Script (Shell)\nDESCRIPTION: Executes the project's code formatting script for a one-off code formatting operation. This requires that './maintainers/format.sh' exists and is executable. No parameters are needed, and it will format source code files as per project standards.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n./maintainers/format.sh\n```\n\n----------------------------------------\n\nTITLE: Switching Nix User Environment Generation with nix-env - Console Example\nDESCRIPTION: Demonstrates the use of the nix-env tool to switch the active user environment to a specified profile generation. No external dependencies are needed other than the nix-env tool being available on the system. The example shows switching from the current generation (50) to another (42), with the command and its expected output. Input is the generation number and output is a line describing the switch; errors occur if the generation does not exist.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/switch-generation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --switch-generation 42\\nswitching from generation 50 to 42\n```\n\n----------------------------------------\n\nTITLE: Gitea/Forgejo Tarball URL Schema\nDESCRIPTION: URL schema pattern for accessing tarballs from Gitea and Forgejo repositories.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/tarball-fetcher.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<domain name>/<owner>/<repo>/archive/<reference or revison>.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Verifying the nix-serve HTTP server\nDESCRIPTION: Command to check if the nix-serve server is working properly by requesting cache information from the client side.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/binary-cache-substituter.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://avalon:8080/nix-cache-info\n```\n\n----------------------------------------\n\nTITLE: With-Expression Binding Precedence Example in Nix\nDESCRIPTION: Demonstrates that bindings from with-expressions do not shadow other bindings. The let-bindings for 'a' take precedence over the with-expression bindings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_27\n\nLANGUAGE: nix\nCODE:\n```\nlet a = 3; in with { a = 1; }; let a = 4; in with { a = 2; }; ...\n```\n\n----------------------------------------\n\nTITLE: Building the Nix Manual Using Flakes - Console\nDESCRIPTION: This command utilizes the Nix Flakes interface to build the nix-manual target. It requires flakes support and a recent Nix installation. The resulting documentation is placed in the ./result directory for further use. The output will be the generated manual in an HTML format.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnix build .#nix-manual\n```\n\n----------------------------------------\n\nTITLE: Referencing Current Position in Nix Expressions with __curPos - Nix\nDESCRIPTION: Exemplifies the new __curPos symbol in Nix, returning an attribute set with file name, line, and column information. Primarily useful in custom Nix functions or error reporting, not intended for direct end-user use. No dependencies beyond a C++11-enabled Nix build.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.7.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n{ file = \"foo.nix\"; line = 10;\n           column = 5; }\n```\n\n----------------------------------------\n\nTITLE: Documenting Mounted SSH Store URL Format - Markdown\nDESCRIPTION: This snippet provides the precise URL format required to configure a Nix store that is accessed via a mounted SSH connection. The code highlights the syntax, and includes guidance on optional username usage. No programmatic dependencies are required as this is documentation for human configuration. The snippet outputs a Markdown inline code segment explaining the expected URL input for use in Nix configuration files. The limitation is that mounting of the remote store must be handled manually outside of Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/mounted-ssh-store.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`mounted-ssh-ng://[username@]hostname`\n```\n\n----------------------------------------\n\nTITLE: Creating a Flake from a Specific Template - Nix CLI - Console\nDESCRIPTION: Initializes a new flake in directory \\\"hello\\\" using the template \\\"trivial\\\" from the set of available templates. Requires Nix flake feature and access to templates. Parameters are the target directory and template identifier; outputs a new flake project using the selected template.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-new.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix flake new hello -t templates#trivial\n```\n\n----------------------------------------\n\nTITLE: Equivalent Binding Scope Example in Nix\nDESCRIPTION: Shows an equivalent scope to the previous example using only let-expressions. This emphasizes that with-expressions don't shadow let-bindings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_28\n\nLANGUAGE: nix\nCODE:\n```\nlet a = 1; in let a = 2; in let a = 3; in let a = 4; in ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Fortify and Forcing Debug Build in Bash Shell - Console\nDESCRIPTION: These commands disable the 'fortify' hardening feature by filtering it from the 'NIX_HARDENING_ENABLE' environment variable and set the 'mesonBuildType' to 'debug' for a non-optimized debug build. This approach can accelerate build times when debug symbols are needed without all hardening protections. The snippet must be run inside a nix-shell with necessary build tools. Outputs are updated environment variables for use in subsequent builds.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ NIX_HARDENING_ENABLE=$(printLines $NIX_HARDENING_ENABLE | grep -v fortify)\n```\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell]$ export mesonBuildType=debug\n```\n\n----------------------------------------\n\nTITLE: Checking Nix Daemon Status\nDESCRIPTION: Tests whether the Nix daemon is up and running. This command verifies that the local Nix daemon service is active and responding.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/store-info.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# nix store info --store daemon\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Embedded Nix Evaluator - ShellSession\nDESCRIPTION: These commands build and execute the embedded Nix evaluator example. The GCC command compiles the C file linking against the Nix expression C API using pkg-config. The resulting binary prints the evaluated Nix version string. Requires GCC and Nix C API development files installed.\nSOURCE: https://github.com/nixos/nix/blob/master/src/external-api-docs/README.md#_snippet_1\n\nLANGUAGE: ShellSession\nCODE:\n```\n$ gcc main.c $(pkg-config nix-expr-c --libs --cflags) -o main\\n$ ./main\\nNix version: 2.17\n```\n\n----------------------------------------\n\nTITLE: Defining SSH-NG Store URL Format for Remote Nix Store Access\nDESCRIPTION: Specifies the URL format for the ssh-ng store type, which allows full access to a Nix store on a remote machine. The format includes optional username and required hostname components.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/ssh-store.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nssh-ng://[username@]hostname\n```\n\n----------------------------------------\n\nTITLE: Listing Available Flake Templates - Nix CLI - Console\nDESCRIPTION: Lists all available Nix flake templates accessible via the nix command. Assumes Nix installation with flake functionality enabled. No parameters required; outputs template names to standard output.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-new.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake show templates\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram for Import From Derivation Evaluation (Plaintext)\nDESCRIPTION: This plaintext code block presents a schematic dataflow visualization illustrating how a Nix expression depending on a realized store object is evaluated. The diagram outlines the roles of the \\\"Nix evaluator\\\" and \\\"Nix store\\\", marking points where evaluation, instantiation, realization, and reading of data occur. While not executable code, it serves as a documentation or education aid. Prerequisites: Knowledge of Nix architecture. Inputs: Conceptual. Outputs: Not applicable. Limitation: For illustration purposes, not for programmatic use.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/import-from-derivation.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n+----------------------+             +------------------------+\n| Nix evaluator        |             | Nix store              |\n|  .----------------.  |             |                        |\n|  | Nix expression |  |             |                        |\n|  '----------------'  |             |                        |\n|          |           |             |                        |\n|       evaluate       |             |                        |\n|          |           |             |                        |\n|          V           |             |                        |\n|    .------------.    |             |                        |\n|    | derivation |    |             |  .------------------.  |\n|    | expression |----|-instantiate-|->| store derivation |  |\n|    '------------'    |             |  '------------------'  |\n|                      |             |           |            |\n|                      |             |        realise         |\n|                      |             |           |            |\n|                      |             |           V            |\n|  .----------------.  |             |    .--------------.    |\n|  | Nix expression |<-|----read-----|----| store object |    |\n|  '----------------'  |             |    '--------------'    |\n|          |           |             |                        |\n|       evaluate       |             |                        |\n|          |           |             |                        |\n|          V           |             |                        |\n|    .------------.    |             |                        |\n|    |   value    |    |             |                        |\n|    '------------'    |             |                        |\n+----------------------+             +------------------------+\n```\n\n----------------------------------------\n\nTITLE: Enabling Pipe Operators Experimental Feature - Nix Config\nDESCRIPTION: Shows how to enable Nix's experimental pipe operators via the configuration file. This is a required step for using pipe-related syntax in Nix expressions or the REPL. Add this line to the nix.conf file to activate the feature. There are no runtime parameters for this config; the feature affects parsing and evaluation semantics globally.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/operators.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nextra-experimental-features = pipe-operators\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Command\nDESCRIPTION: Demonstrates user-friendly error handling when an invalid command is entered, showing suggestions for similar valid commands.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix int\n------------------------------------------------------------------------\n  Error! Command `int` not found.\n------------------------------------------------------------------------\n  Did you mean:\n    |> nix init\n    |> nix input\n```\n\n----------------------------------------\n\nTITLE: Defining Anonymous Read Bucket Policy - AWS S3 - JSON\nDESCRIPTION: This JSON snippet is a bucket policy providing public (anonymous) read access to an S3 bucket. It enables unauthenticated users to call s3:GetObject and s3:GetBucketLocation actions on both the bucket and its objects. No AWS authentication is required; this policy is for buckets intended to be public. The main parameters are the bucket ARN and allowed actions, with Principal set to '*'.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/s3-binary-cache-store.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"Id\": \"DirectReads\",\\n    \"Version\": \"2012-10-17\",\\n    \"Statement\": [\\n        {\\n            \"Sid\": \"AllowDirectReads\",\\n            \"Action\": [\\n                \"s3:GetObject\",\\n                \"s3:GetBucketLocation\"\\n            ],\\n            \"Effect\": \"Allow\",\\n            \"Resource\": [\\n                \"arn:aws:s3:::example-nix-cache\",\\n                \"arn:aws:s3:::example-nix-cache/*\"\\n            ],\\n            \"Principal\": \"*\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom NIX_SSL_CERT_FILE and Installing Nix - Console\nDESCRIPTION: This snippet shows how to set a custom SSL certificate bundle path in the NIX_SSL_CERT_FILE environment variable before installing Nix, and then how to run the official Nix installation script. The export command makes the custom SSL certificate available to the install process. Dependencies: valid certificate bundle present on the filesystem; curl required for fetching the installer. Inputs: path to certificate; Outputs: installation of Nix using provided certificate.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/env-variables.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export NIX_SSL_CERT_FILE=/etc/ssl/my-certificate-bundle.crt\n$ curl -L https://nixos.org/nix/install | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Directory for Meson in Multi-Platform Builds (Bash)\nDESCRIPTION: This command defines an environment variable to specify the Meson build directory variant. By setting 'mesonBuildDir', the build artifacts are separated by configuration, enabling parallel multi-platform builds. This is typically used before running configurePhase.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmesonBuildDir=build-my-variant-name\n```\n\n----------------------------------------\n\nTITLE: Specifying Fixed-Output Content Addressing in Nix Derivation Output (JSONC)\nDESCRIPTION: This snippet demonstrates how to specify a fixed-output content-addressed output in a Nix derivation using JSON with comments. It shows how to define the 'method', 'hashAlgo', and expected 'hash' values in an 'outputs' field for a derivation, allowing verification of fetched files (such as source code archives) against cryptographic hashes. The example includes an environment section with a URL. Dependencies include Nix's support for the specified hash algorithm (e.g., sha256). Parameters include the output's hashing method, and the URL to fetch. Input is the derivation specification; output is a Nix store object whose content hash must match the fixed value provided. Comments in JSONC explain the fields; formatting is preserved.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/outputs/content-address.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"outputs: {\n    \"out\": {\n      \"method\": \"nar\",\n      \"hashAlgo\": \"sha256\",\n      \"hash: \"1md7jsfd8pa45z73bz1kszpp01yw6x5ljkjk2hx7wl800any6465\",\n    },\n  },\n  \"env\": {\n    \"url\": \"http://ftp.gnu.org/pub/gnu/hello/hello-2.1.1.tar.gz\"\n    // ...\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nix to Stable Version\nDESCRIPTION: Command to upgrade Nix to the stable version as declared in Nixpkgs. This updates the Nix installation in the default profile.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/upgrade-nix.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix upgrade-nix\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Output of a Derivation with nix-build - Shell Command - Console\nDESCRIPTION: This snippet shows the build of a single specified output (the 'man' output) from the OpenSSL derivation using nix-build with the 'openssl.man' attribute. Dependencies are a working Nix installation and relevant derivation definitions. The key parameter is the attribute path specifying the desired output, and the output is a corresponding symlink (result-man) created in the current directory.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-build.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build '<nixpkgs>' --attr openssl.man\n```\n\n----------------------------------------\n\nTITLE: Defining a Derivation with Multiple Outputs - Nix Language\nDESCRIPTION: Illustrates a Nix expression using a derivation with two outputs, 'foo' and 'bar', each producing a file. Depends on standard Nixpkgs packages like coreutils and bash. Key parameters include the outputs array, custom build commands, and system identification. Input is the Nix file; output is a derivation with two output directories containing files.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_1\n\nLANGUAGE: Nix\nCODE:\n```\n# example.nix\nlet\n  pkgs = import <nixpkgs> {};\n  command = ''\n    ${pkgs.coreutils}/bin/mkdir -p $foo $bar\n    echo foo > $foo/foo-file\n    echo bar > $bar/bar-file\n  '';\nin\nderivation {\n  name = \"example\";\n  builder = \"${pkgs.bash}/bin/bash\";\n  args = [ \"-c\" command ];\n  outputs = [ \"foo\" \"bar\" ];\n  system = builtins.currentSystem;\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Single-User Nix Installation - Console\nDESCRIPTION: Fetches the Nix installer script via curl and explicitly installs Nix in single-user mode by supplying the --no-daemon flag to the script. Intended for cases where multi-user support is not available or required. Ownership of /nix is set for the invoking user, requiring sudo for directory creation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-binary.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ bash <(curl -L https://nixos.org/nix/install) --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Running Official Nix Docker Image - Docker Console Commands - console\nDESCRIPTION: Demonstrates how to retrieve and start the latest official Nix Docker image from ghcr.io, confirm its version, and exit the container. Requires Docker to be installed. The main parameters are the Docker image name and standard shell prompt commands. The expected output is the Nix shell in a running container; 'nix --version' verifies the installation, and 'exit' ends the session.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-docker.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -ti ghcr.io/nixos/nix\nUnable to find image 'ghcr.io/nixos/nix:latest' locally\nlatest: Pulling from ghcr.io/nixos/nix\n5843afab3874: Pull complete\nb52bf13f109c: Pull complete\n1e2415612aa3: Pull complete\nDigest: sha256:27f6e7f60227e959ee7ece361f75d4844a40e1cc6878b6868fe30140420031ff\nStatus: Downloaded newer image for ghcr.io/nixos/nix:latest\n35ca4ada6e96:/# nix --version\nnix (Nix) 2.3.12\n35ca4ada6e96:/# exit\n```\n\n----------------------------------------\n\nTITLE: Basic Nix Command Structure\nDESCRIPTION: Shows the basic structure of Nix commands with their components: GROUP, COMMAND, ARGUMENTS, and OPTIONS. All components should be lowercase and singular, with GROUP being a NOUN and COMMAND being a VERB.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix [<GROUP>] <COMMAND> [<ARGUMENTS>] [<OPTIONS>]\n```\n\n----------------------------------------\n\nTITLE: Building and Running Nix Docker Image from Source - Console Commands - console\nDESCRIPTION: Provides steps to locally build the Nix Docker image from source using nix and then run that image. Requires Nix and Docker installed. Key arguments include the path to hydraJobs in the Nix source and the result file for docker load. This allows custom builds or advanced configuration before loading the image with Docker.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-docker.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix build ./\\#hydraJobs.dockerImage.x86_64-linux\n$ docker load -i ./result/image.tar.gz\n$ docker run -ti nix:2.5pre20211105\n```\n\n----------------------------------------\n\nTITLE: Inline Comment Example in Nix\nDESCRIPTION: Shows inline comments in Nix, which start with # and run until the end of the line. The example includes both a standalone comment and an end-of-line comment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_30\n\nLANGUAGE: nix\nCODE:\n```\n# A number\n2 # Equals 1 + 1\n```\n\n----------------------------------------\n\nTITLE: Interactive Build Output with Educational Tips\nDESCRIPTION: Shows an example of interactive build output with progress information, keyboard shortcuts, and educational tips for users.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build\n    Started building my-project 1.2.3\n Downloaded python3.8-poetry 1.2.3 in 5.3 seconds\n Downloaded python3.8-requests 1.2.3 in 5.3 seconds\n------------------------------------------------------------------------\n      Press `v` to increase logs verbosity\n         |> `?` to see other options\n------------------------------------------------------------------------\n      Learn something new with every build...\n         |> See last logs of a build with `nix log --last` command.\n------------------------------------------------------------------------\n  Evaluated my-project 1.2.3 in 14.43 seconds\nDownloading [12 / 200]\n         |> firefox 1.2.3 [#########>       ] 10Mb/s | 2min left\n   Building [2 / 20]\n         |> glibc 1.2.3 -> buildPhase: <last log line>\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Installing Package from Profile\nDESCRIPTION: Command to install a package by copying from another user environment profile\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-env -i --from-profile .../other-profile firefox\n```\n\n----------------------------------------\n\nTITLE: Building a Nix Package with a Custom Logical Store Directory via Console Command\nDESCRIPTION: Provides a command-line example using 'nix build' to specify custom locations for the Nix store, state, and log files via the store URL's query parameters, overriding the default logical store directory. The command requires local directory paths to be created and accessible, and disables use of standard remote binary substituters, so builds may be entirely local. Inputs include the custom store layout; output is the built package or error messages if dependencies or permissions are unmet.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/local-store.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix build --store 'local?store=/tmp/my-nix/store&state=/tmp/my-nix/state&log=/tmp/my-nix/log' nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Multi-Message Build Output with Progress, Logs, and Hints - Shell\nDESCRIPTION: Provides a composite example of terminal output from a multi-step Nix build, including evaluation, downloads, progress bars, status hints, and completion messages. The snippet demonstrates formatting conventions, interactive help, and the communication of machine/human events (e.g., progress, success, recommendations) using line alignment and optional hints. There's no required dependency; behavior is contextually controlled by CLI flags like --no-colors or --json.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build > build.txt\n  Evaluated 1234 files in 1.2 seconds\n Downloaded python3.8-poetry 1.2.3 in 5.3 seconds\n Downloaded python3.8-requests 1.2.3 in 5.3 seconds\n------------------------------------------------------------------------\n      Press `v` to increase logs verbosity\n         |> `?` to see other options\n------------------------------------------------------------------------\n      Learn something new with every build...\n         |> See last logs of a build with `nix log --last` command.\n------------------------------------------------------------------------\n  Evaluated my-project 1.2.3 in 14.43 seconds\nDownloading [12 / 200]\n         |> firefox 1.2.3 [#########>       ] 10Mb/s | 2min left\n   Building [2 / 20]\n         |> glibc 1.2.3 -> buildPhase: <last log line>\n------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Running Filtered and Briefed GoogleTest Tests with Meson - Shell Session\nDESCRIPTION: This snippet demonstrates how to run specific GoogleTest tests using environment variables 'GTEST_BRIEF' and 'GTEST_FILTER', along with Meson for test orchestration. 'GTEST_BRIEF' suppresses verbose output for passing tests, while 'GTEST_FILTER' narrows the tests executed. The command runs 'meson test' on 'nix-expr-tests' with filtered output and increased verbosity, appropriate for quick feedback in complex suites.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\nGTEST_BRIEF=1 GTEST_FILTER='ErrorTraceTest.*' meson test nix-expr-tests -v\n```\n\n----------------------------------------\n\nTITLE: With-Expression with Import in Nix\nDESCRIPTION: Shows a common use of with-expressions in conjunction with the import function. This makes all attributes defined in the definitions.nix file available as if they were defined locally.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_26\n\nLANGUAGE: nix\nCODE:\n```\nwith (import ./definitions.nix); ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Realisation Information via Nix CLI - Console\nDESCRIPTION: This console snippet demonstrates how to use the Nix CLI to display information about the realisation of the 'hello' package in JSON format. Users must have Nix installed and accessible on the command line. The main parameters are the package identifier ('nixpkgs#hello') and the '--json' flag which formats the output as JSON. The command outputs a JSON array with realisation details, such as the unique ID and the output path. This is useful for automation or further processing in scripts.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/realisation/info.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix realisation info nixpkgs#hello --json\n[{\"id\":\"sha256:3d382378a00588e064ee30be96dd0fa7e7df7cf3fbcace85a0e7b7dada1eef25!out\",\"outPath\":\"fd3m7xawvrqcg98kgz5hc2vk3x9q0lh7-hello\"}]\n\n```\n\n----------------------------------------\n\nTITLE: Prompting for Input in Interactive Nix Commands - Shell\nDESCRIPTION: This shell session output demonstrates how a Nix command should interactively prompt users when required input (such as a template selection) is missing or ambiguous. The example displays terminal output with an initialization message followed by a selection menu. No external dependencies are needed, but the CLI must support prompting only when a TTY is attached. Input is guided via an interactive menu when invoked via the terminal.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ nix init\nInitializing Nix project at `/path/to/here`.\n      Select a template for you new project:\n          |> py\n             template#python-pip\n             template#python-poetry\n             [ Showing 2 templates from 1345 templates ]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nix Source and Test Directory Layout - Markdown\nDESCRIPTION: This snippet provides a textual tree layout of source and test file organization for the Nix project, using a Markdown code block for clarity. The structure highlights separation between libraries, tests, and test-support directories, aiding developers in locating or adding new tests and understanding data file placement. It does not contain executable code but serves as documentation of file hierarchy conventions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nsrc\n├── libexpr\n│   ├── meson.build\n│   ├── include/nix/expr/value/context.hh\n│   ├── value/context.cc\n│   …\n│\n├── tests\n│   │\n│   …\n│   ├── libutil-tests\n│   │   ├── meson.build\n│   │   …\n│   │   └── data\n│   │       ├── git/tree.txt\n│   │       …\n│   │\n│   ├── libexpr-test-support\n│   │   ├── meson.build\n│   │   ├── include/nix/expr\n│   │   │   ├── meson.build\n│   │   │   └── tests\n│   │   │       ├── value/context.hh\n│   │   │       …\n│   │   └── tests\n│   │       ├── value/context.cc\n│   │       …\n│   │\n│   ├── libexpr-tests\n│   …   ├── meson.build\n│       ├── value/context.cc\n│       …\n…\n```\n\n----------------------------------------\n\nTITLE: Good List Example - Extensible Ordered Outputs\nDESCRIPTION: Example showing the recommended way to represent outputs as an ordered list of records, preserving both order and extensibility.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/json-guideline.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"outputs\": [ { \"outputName\": \"out\" }, { \"outputName\": \"bin\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Attempting Upgrade with nix-env When No Updates are Available - Console\nDESCRIPTION: Shows a scenario where nix-env is run to upgrade a package (pan) that has no available updates. The command uses the --upgrade and --attr flags with the package attribute, resulting in no action or output if no upgrade exists. Requires a nix installation and the relevant package set in nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/upgrade.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --upgrade --attr nixpkgs.pan\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Deriving Path Types in TypeScript\nDESCRIPTION: This code snippet defines the structure of deriving paths in TypeScript. It includes types for OutputName, ConstantPath, OutputPath, and DerivingPath, illustrating how Nix represents references to store objects that may or may not be realized yet.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/derivation/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype OutputName = String;\n\ntype ConstantPath = {\n  path: StorePath;\n};\n\ntype OutputPath = {\n  drvPath: StorePath;\n  output: OutputName;\n};\n\ntype DerivingPath = ConstantPath | OutputPath;\n```\n\n----------------------------------------\n\nTITLE: Sample Nix Build Output for a Derivation (Plaintext)\nDESCRIPTION: This snippet shows the expected output when building and evaluating the Nix expression from 'IFD.nix'. It prints the build process (with the derivation's store path) and the result (\\\"hello world\\\"). Inputs are implicit (the Nix environment and the built expression), with the output being debug information and the evaluated Nix expression result. No dependencies or additional context are needed for this output. Limitation: Output format may vary between Nix versions.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/import-from-derivation.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbuilding '/nix/store/348q1cal6sdgfxs8zqi9v8llrsn4kqkq-hello.drv'...\n\"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Changing Nix Store Directory\nDESCRIPTION: Command-line option to specify a custom path for the Nix store directory during build configuration. The default store directory is '/nix/store'.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/building-source.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-Dstore-dir=path\n```\n\n----------------------------------------\n\nTITLE: Invoking nix-shell with Shebang Script - Shell\nDESCRIPTION: This snippet shows a shebang script for invoking nix-shell, which now loads shell.nix from the script's directory if it exists. It requires nix to be installed and available in the PATH. The script is suitable for specifying a bash shell in interactive or script-based usage, with fallback to default.nix if shell.nix is absent.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.24.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env nix-shell\\n#!nix-shell -i bash\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nix Maintainers Team Workflow - Mermaid\nDESCRIPTION: This mermaid diagram visually represents the state transitions for issues and pull requests in the Nix maintainers team's workflow. It depicts paths from new items, through discussion and review stages, to assignment, resolution, or further review if issues occur. Mermaid syntax is used, and a mermaid-compatible renderer is required to visualize this; no other dependencies exist.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\\n    discuss[To discuss]\\n\\n    review[To review]\\n\\n    New --> |Disagreement on idea| discuss\\n    New & discuss --> |Consensus on idea| review\\n\\n    review --> |Consensus on implementation| Assigned\\n\\n    Assigned --> |Implementation issues arise| review\\n    Assigned --> |Remaining issues fixed| Merged\n```\n\n----------------------------------------\n\nTITLE: Haskell Script with Nix Shebang using Specific Nixpkgs Branch\nDESCRIPTION: Example Haskell script using nix to specify a particular branch of Nixpkgs and obtain Haskell with specific libraries.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_10\n\nLANGUAGE: haskell\nCODE:\n```\n#!/usr/bin/env nix\n#!nix shell --override-input nixpkgs github:NixOS/nixpkgs/nixos-21.11\n#!nix github:tomberek/-#haskellWith.download-curl.tagsoup --command runghc\n\nimport Network.Curl.Download\nimport Text.HTML.TagSoup\nimport Data.Either\nimport Data.ByteString.Char8 (unpack)\n\n-- Fetch nixos.org and print all hrefs.\nmain = do\n  resp <- openURI \"https://nixos.org/\"\n  let tags = filter (isTagOpenName \"a\") $ parseTags $ unpack $ fromRight undefined resp\n  let tags' = map (fromAttrib \"href\") tags\n  mapM_ putStrLn $ filter (/= \"\") tags'\n```\n\n----------------------------------------\n\nTITLE: Changing Nix State Directory\nDESCRIPTION: Command-line option to specify a custom path for the Nix state directory during build configuration. The default state directory is '/nix/var'.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/building-source.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-Dlocalstatedir=path\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in nix repl - Nix\nDESCRIPTION: Demonstrates how a thrown error was printed in nix repl prior to this release, including verbose source location information. Highlights error output for attribute sets when accessing with builtins.throw. No external dependencies are required beyond the Nix environment and REPL. Input is a Nix attribute set with an error; output is the resulting error printout.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\nnix-repl> { err = builtins.throw \"uh oh!\"; }\n{ err = «error:\n       … while calling the 'throw' builtin\n         at «string»:1:9:\n            1| { err = builtins.throw \"uh oh!\"; }\n             |         ^\n\n       error: uh oh!»; }\n```\n\n----------------------------------------\n\nTITLE: Listing Profile Generations Using nix-env in Console - Console Example\nDESCRIPTION: Demonstrates the output of the nix-env --list-generations command run in a console session. This example shows multiple generations of a Nix profile, along with their creation timestamps and an indication of which generation is currently active. No dependencies are required other than having Nix installed with a profile containing multiple generations. Input is the command invocation, and the output lists the generations with one marked as (current); limitations inherit from nix-env's own capabilities.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/list-generations.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --list-generations\\n  95   2004-02-06 11:48:24\\n  96   2004-02-06 11:49:01\\n  97   2004-02-06 16:22:45\\n  98   2004-02-06 16:24:33   (current)\n```\n\n----------------------------------------\n\nTITLE: Running the Nix Daemon as Root (Console)\nDESCRIPTION: This snippet shows the command to start the Nix daemon, which should be executed with root privileges. The daemon manages builds and enforces security between users. Intended for placement in system boot scripts to ensure the daemon starts automatically on system startup. The binary \"nix-daemon\" must be installed and on the system's PATH.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/multi-user.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-daemon\n```\n\n----------------------------------------\n\nTITLE: Evaluating Patchelf Flake without Building Checks - Console Command - Shell\nDESCRIPTION: Demonstrates invocation of `nix flake check` with the `--no-build` option to verify the evaluability of a remote flake (`patchelf`), bypassing the actual build of its checks. Requires Nix with flake support and network access. The `--no-build` flag instructs the command to check only evaluation, not to produce derivations. Input includes the flake URL and output is a success/failure message about the flake's evaluability.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/flake-check.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# nix flake check --no-build github:NixOS/patchelf\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in nix repl (Full Expression) - Nix\nDESCRIPTION: Displays the detailed error output when a full top-level expression throws in nix repl. Useful for debugging and understanding stack traces with error positions. Requires Nix REPL with an erroneous expression as input.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_2\n\nLANGUAGE: Nix\nCODE:\n```\nnix-repl> builtins.throw \"uh oh!\"\nerror:\n       … while calling the 'throw' builtin\n         at «string»:1:1:\n            1| builtins.throw \"uh oh!\"\n             | ^\n\n       error: uh oh!\n```\n\n----------------------------------------\n\nTITLE: Running Functional Tests for Nix on NixOS (Shell)\nDESCRIPTION: This command builds and runs the functional tests for Nix in a NixOS environment. It specifically targets the 'functional_user' test suite, which is part of the hydraJobs.tests attribute set.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/testing.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnix build .#hydraJobs.tests.functional_user\n```\n\n----------------------------------------\n\nTITLE: Cycle Detection in Nix REPL and Eval (Before and After) - Nix\nDESCRIPTION: Demonstrates the simplification of cycle detection and printing of recursive structures in nix repl and nix eval. The prior snippet shows nested cycles, while the improved version provides shorter, repeated indicators. Requires Nix CLI tools or REPL.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_9\n\nLANGUAGE: Nix\nCODE:\n```\nnix eval --expr 'let self = { inherit self; }; in self'\n{ self = { self = «repeated»; }; }\n```\n\nLANGUAGE: Nix\nCODE:\n```\n{ self = «repeated»; }\n```\n\n----------------------------------------\n\nTITLE: Using String Literals as Attribute Names in Nix\nDESCRIPTION: Shows how to use arbitrary strings as attribute names in Nix, including those with special characters or spaces, and how to access them.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.0.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ \"foo-1.2\" = …; \"bla bla\" = …; }.\"bla bla\"\n```\n\n----------------------------------------\n\nTITLE: Realizing a Store Path from Remote SSH Substituter - Nix CLI - Console\nDESCRIPTION: This command shows how to fetch and download a specific Nix store path and its closure from a remote server using SSH. With 'nix-store --realise' and '--substituters', users can populate their local store without adding packages to their environment. Requires Nix on both ends, SSH key access, and the specified path existing on the remote. Input: concrete Nix store path; Output: realization of the path locally if available remotely.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/ssh-substituter.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --realise /nix/store/m85bxg…-firefox-34.0.5 --substituters\nssh://alice@avalon\n```\n\n----------------------------------------\n\nTITLE: Referencing max-substitution-jobs Setting in Markdown\nDESCRIPTION: Markdown link to the documentation for the new 'max-substitution-jobs' configuration setting in Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.16.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`max-substitution-jobs`](../command-ref/conf-file.md#conf-max-substitution-jobs)\n```\n\n----------------------------------------\n\nTITLE: Referencing max-jobs Setting in Markdown\nDESCRIPTION: Markdown link to the documentation for the 'max-jobs' configuration setting in Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.16.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`--max-jobs` setting](../command-ref/conf-file.md#conf-max-jobs)\n```\n\n----------------------------------------\n\nTITLE: Copying a Closure to a Chroot Store Without Signature Check Using Nix CLI - Console\nDESCRIPTION: Copies the 'hello' package closure from the /nix/store to a chroot store at /tmp/nix/nix/store without checking signatures using '--no-check-sigs'. This is potentially insecure, so should be used with caution. Requires Nix installed and proper write permissions to the target chroot store. Inputs are the target path, flake reference for the package, and optional unsigned operation.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --to /tmp/nix nixpkgs#hello --no-check-sigs\n```\n\n----------------------------------------\n\nTITLE: Referencing replaceStrings Builtin Function in Markdown\nDESCRIPTION: Markdown link to the documentation for the 'builtins.replaceStrings' function in Nix, with a placeholder for the document root.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.16.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`builtins.replaceStrings`](@docroot@/language/builtins.md#builtins-replaceStrings)\n```\n\n----------------------------------------\n\nTITLE: Attribute Name Interpolation\nDESCRIPTION: Examples of using string interpolation in attribute names and selections.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-interpolation.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlet name = \"foo\"; in\n{ ${name} = 123; }\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet name = \"foo\"; in\n{ foo = 123; }.${name}\n```\n\n----------------------------------------\n\nTITLE: Launching a Flake-Based Shell for Alternative Compilation (Shell)\nDESCRIPTION: This command selects and enters a shell with the 'native-clangStdenv' environment using flake attribute syntax. It allows for switching between compilation environments (e.g., using clang instead of the default stdenv), requiring that the .#native-clangStdenv attribute is declared in the flake.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ nix develop .#native-clangStdenv\n```\n\n----------------------------------------\n\nTITLE: Building Nix in the Development Shell with Meson (Shell)\nDESCRIPTION: These commands configure, build, and prepare to install Nix from within the development shell. 'mesonFlags' is set to define the output prefix, then configurePhase and buildPhase execute the configuration and build steps. Assumes the shell was set up by nix-shell or similar, and that Meson is available. Outputs and artifacts are directed to ./outputs/out.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell]$ mesonFlags+=\" --prefix=$(pwd)/outputs/out\"\\n[nix-shell]$ dontAddPrefix=1 configurePhase\\n[nix-shell]$ buildPhase\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Versions of a Package in Closures - Console\nDESCRIPTION: This example illustrates an output line from diff-closures where a package exists with multiple versions in the compared closures, emphasizing that only changed versions are displayed. It shows that unchanged versions are omitted from the diff summary, aiding users in focusing on relevant package changes. Prerequisites include prior execution of the 'nix store diff-closures' command and understanding version strings.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/diff-closures.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nlibfoo: 1.2, 1.3 → 1.4\n```\n\n----------------------------------------\n\nTITLE: Store Derivation Output Selection Examples\nDESCRIPTION: Demonstrates how to explicitly select outputs in store derivation installables, showing equivalent commands using both direct store path and package reference syntax.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.13.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# nix build /nix/store/gzaflydcr6sb3567hap9q6srzx8ggdgg-glibc-2.33-78.drv^dev\n```\n\nLANGUAGE: shell\nCODE:\n```\n# nix build nixpkgs#glibc^dev\n```\n\n----------------------------------------\n\nTITLE: Fetching Source URL from Nix Expression\nDESCRIPTION: Example of using nix-prefetch-url to download and verify source files specified in a Nix expression. This demonstrates fetching the hello.src attribute.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.11.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-prefetch-url -A hello.src\n```\n\n----------------------------------------\n\nTITLE: Bumping Master Branch Version for New Feature Development - Console\nDESCRIPTION: Automates incrementing the master branch's version number to the next target for new development, creating a dedicated branch for this change, and pushing it to the remote with upstream tracking. Developed as part of a pull request workflow for continuous delivery. Inputs include NEW_VERSION as an environment variable.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ git checkout master\\n$ git pull\\n$ NEW_VERSION=2.13.0\\n$ echo $NEW_VERSION > .version\\n$ git checkout -b bump-$NEW_VERSION\\n$ git commit -a -m 'Bump version'\\n$ git push --set-upstream origin bump-$NEW_VERSION\n```\n\n----------------------------------------\n\nTITLE: Uploading Release Artifacts and Tagging Release - Console\nDESCRIPTION: Invokes a Perl script to upload release artifacts, tag the new version, and optionally mark it as the latest release for automated documentation updates and channel tracking. The 'IS_LATEST=1' prefix ensures the release is treated as current main by downstream users. Requires valid AWS credentials, an evaluation ID, and a valid Nix build output at the path expected by the script.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ IS_LATEST=1 ./maintainers/upload-release.pl <EVAL-ID>\n```\n\n----------------------------------------\n\nTITLE: New Bundler API Format in Nix 2.7\nDESCRIPTION: Example of the new bundler API format that allows inspection of evaluation information during bundling. This represents a breaking change in the API structure.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.7.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nbundler.<system>.<name>= derivation: another-derivation;\n```\n\n----------------------------------------\n\nTITLE: Copying and Running GNU Hello from Remote Machine\nDESCRIPTION: Example demonstrating how to copy GNU Hello from a remote machine using a known store path and then execute it locally\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-copy-closure.md#_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ storePath=\"$(nix-instantiate --eval --raw '<nixpkgs>' -I nixpkgs=channel:nixpkgs-unstable -A hello.outPath)\"\n$ nix-copy-closure --from alice@itchy.example.org \"$storePath\"\n$ \"$storePath\"/bin/hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Store Derivation - nix-env Console Command - Shell\nDESCRIPTION: Demonstrates direct installation of a particular store derivation by providing the absolute store path to a .drv file with nix-env --install. Typically used for derivations created by nix-instantiate. Requires the .drv file to exist in the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-env/install.md#_snippet_10\n\nLANGUAGE: Console\nCODE:\n```\n$ nix-env --install /nix/store/fibjb1bfbpm5mrsxc4mh2d8n37sxh91i-gcc-3.4.3.drv\n```\n\n----------------------------------------\n\nTITLE: Defining Allowed Hash Algorithms in Grammar - ebnf\nDESCRIPTION: This simple EBNF rule lists supported algorithms—'md5', 'sha1', or 'sha256'—for fingerprints/hashing in Nix store path definitions. The purpose is to constrain the specification and generator tooling to these algorithms for consistency and correctness.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_7\n\nLANGUAGE: ebnf\nCODE:\n```\nalgo = \"md5\" | \"sha1\" | \"sha256\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Reference Link Example - Markdown\nDESCRIPTION: This markdown snippet demonstrates the use of reference-style links to improve source readability and maintain a clean documentation format. It defines a main body that cites terms, and explicit link definitions immediately following it. Useful for consistent hyperlinking in the manual and easing future reviews.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nA [store object] contains a [file system object] and [references] to other store objects.\n\n[store object]: @docroot@/store/store-object.md\n[file system object]: @docroot@/architecture/file-system-object.md\n[references]: @docroot@/glossary.md#gloss-reference\n```\n\n----------------------------------------\n\nTITLE: Repairing Corrupted Nix Store Paths - Markdown\nDESCRIPTION: Provides documentation for the --repair command line flag in Nix, which attempts to fix corrupted or missing store paths by redownloading or rebuilding them. It warns users about performance implications due to cryptographic hash checks and cross-references further information on repairing with nix-store. No programming dependencies are required.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/opt-common.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- <span id=\\\"opt-repair\\\">[`--repair`](#opt-repair)</span>\\n\\n  Fix corrupted or missing store paths by redownloading or rebuilding them.\\n  Note that this is slow because it requires computing a cryptographic hash of the contents of every path in the closure of the build.\\n  Also note the warning under `nix-store --repair-path`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Repository File Entries with Permissions, Object Types, and SHA Hashes\nDESCRIPTION: A text representation of Git repository file entries showing the file mode (permissions), object type, SHA-1 hash, and filename for each entry. This format is typically seen in Git's internal representation or when using low-level Git commands.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libutil-tests/data/git/tree.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n100644 blob 63ddb340119baf8492d2da53af47e8c7cfcd5eb2\tFoo\n100755 blob 63ddb340119baf8492d2da53af47e8c7cfcd5eb2\tbAr\n040000 tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\tbaZ\n120000 blob 63ddb340119baf8492d2da53af47e8c7cfcd5eb2\tquuX\n```\n\n----------------------------------------\n\nTITLE: Building C API Documentation Inside Development Shell - Console\nDESCRIPTION: This sequence shows, for contributors inside a development shell, how to build and open the Nix C API documentation. It uses the configurePhase (often a shell function or command run by Nix), the ninja tool to build HTML docs, and xdg-open for viewing. All commands should be run sequentially in a properly configured shell.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ configurePhase\n$ ninja src/external-api-docs/html\n$ xdg-open src/external-api-docs/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Building Nix Version from Nixpkgs - Shell-Session\nDESCRIPTION: Uses nix-build to build a specific version of Nix from Nixpkgs, based on the major and minor version numbers. The resulting output is used to update hashes in release expressions and helps verify that binaries are reproducible and match the tagged source. Requires a functional Nix environment and properly initialized Nixpkgs.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\nnix-build -A nixVersions.nix_<major>_<minor>\n```\n\n----------------------------------------\n\nTITLE: Copying a Package to an S3-Compatible Storage Using Nix CLI - Console\nDESCRIPTION: Transfers the 'hello' package to an S3-compatible storage endpoint by specifying both the region and a custom endpoint URI. Requires Nix built with AWS support, credentials, and that the endpoint supports the S3 protocol. Inputs are the custom S3 URI and the flake reference. Output is the store path uploaded to the specified storage system.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/copy.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# nix copy --to s3://my-bucket?region=eu-west-1&endpoint=example.com nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Installing and Verifying Nix in Flake Shell (Shell)\nDESCRIPTION: Installs the built binaries to the default outputs, then verifies successful installation by querying the Nix version. Meant to be executed after successful build and check phases in a flake-based development shell. Produces a similar output structure as the classic install process.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/building.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell]$ installPhase\\n[nix-shell]$ nix --version\\nnix (Nix) 2.12\n```\n\n----------------------------------------\n\nTITLE: Fetching Nix Development Docker Image from Hydra - Console Commands - console\nDESCRIPTION: Shows how to download and run the latest development version of the Nix Docker image built by Hydra. Requires curl and Docker; the user first downloads the image tarball from a Hydra job and then loads and starts it via Docker. The process allows for testing or using the latest unreleased features of Nix.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/installing-docker.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ curl -L https://hydra.nixos.org/job/nix/master/dockerImage.x86_64-linux/latest/download/1 | docker load\n$ docker run -ti nix:2.5pre20211105\n```\n\n----------------------------------------\n\nTITLE: Marking Official Release in flake.nix - Console\nDESCRIPTION: Modifies the 'flake.nix' file in-place to mark the current state as an official release by changing 'officialRelease' from false to true. This updates documentation links and signals release state in metadata for tooling and consumers. Depends on presence of GNU sed and correct path to 'flake.nix'.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sed -e 's/officialRelease = false;/officialRelease = true;/' -i flake.nix\n```\n\n----------------------------------------\n\nTITLE: Allowing Mutable Path Access in Nix - Markdown\nDESCRIPTION: Documents the --impure command line option for Nix, which enables access to mutable paths and repositories during builds. No code dependencies are required, but users must understand the implications for reproducibility when using this flag. This snippet outlines the risks involved due to potential non-determinism.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/opt-common.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- <span id=\\\"opt-impure\\\">[`--impure`](#opt-impure)</span>\\n\\n  Allow access to mutable paths and repositories.\n```\n\n----------------------------------------\n\nTITLE: Decompressing Build Logs with nix-store in Shell\nDESCRIPTION: This shell command illustrates the use of nix-store to decompress build logs that are now bzip2 compressed by default. It enables on-the-fly decompression for examining build logs, provided the logs were compressed via the new feature. The requirement is Nix 1.1 or later and access to compressed log files. The key parameter is the -l flag to nix-store. Outputs are the readable build log contents.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.1.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnix-store -l\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints and Running Program in GDB - GDB\nDESCRIPTION: This GDB snippet shows the commands to set a breakpoint at the program's 'main' function and run the binary with command-line arguments. These are issued inside GDB after launching the debugger. Key parameters: 'main' as the entry function, '<arguments>' as placeholders for program arguments.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_6\n\nLANGUAGE: gdb\nCODE:\n```\n(gdb) break main\n(gdb) run <arguments>\n```\n\n----------------------------------------\n\nTITLE: Detecting System Architecture - uname Command - Console\nDESCRIPTION: Runs the 'uname' command to detect and print the architecture of the underlying operating system. This is used in the guide to distinguish between Linux and Darwin (macOS), relevant when conducting cross-platform builds and verifying builder operation. Outputs the current system's OS name.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/advanced-topics/distributed-builds.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuname\n```\n\n----------------------------------------\n\nTITLE: Finding Large Closures with JSON Processing\nDESCRIPTION: This command identifies every path whose closure is bigger than 1 GB and sorts them by closure size. It filters and sorts the JSON output using jq to find the largest components in the Nix store.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/path-info.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# nix path-info --json --all --closure-size \\\n  | jq 'map_values(.closureSize | select(. < 1e9)) | to_entries | sort_by(.value)'\n[\n  …,\n  {\n    .key = \"/nix/store/zqamz3cz4dbzfihki2mk7a63mbkxz9xq-nixos-system-machine-20.09.20201112.3090c65\",\n    .value = 5887562256,\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Building Content-Addressed Nix Store Paths from Binary Cache Without Signature - Shell Example\nDESCRIPTION: This snippet illustrates building a content-addressed Nix store path (here, a rewritten hello derivation) directly from a remote binary cache using \"nix store build\" and specifying the substituter. For content-addressed paths, signature verification is not required, facilitating easy restoration from binary caches unauthenticated by trusted keys. Requires that the target store path is content-addressed and the substituter (binary cache) is accessible. The command takes the content-addressed path and remote cache URL as input and expects the build/result to succeed signature-free.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/make-content-addressed.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# nix store build /nix/store/5skmmcb9svys5lj3kbsrjg7vf2irid63-hello-2.10 \\\n    --substituters https://my-cache.example.org\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Branch to Origin - Console\nDESCRIPTION: Pushes the version-specific maintenance branch to the 'origin' remote repository and establishes an upstream tracking reference. This is a necessary step before integrating with CI/CD systems or release infrastructure. Assumes local branch has new commits ready to be published.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git push --set-upstream origin $VERSION-maintenance\n```\n\n----------------------------------------\n\nTITLE: Admonition Example for Notes - Markdown\nDESCRIPTION: This snippet illustrates the recommended structure for admonition blocks (notes) in markdown documentation for the Nix manual. It uses a blockquote with emphasized labels. The primary purpose is to call out special information within the manual, and it follows the documentation's style guidelines.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n> **Note**\n>\n> This is a note.\n```\n\n----------------------------------------\n\nTITLE: Querying path information with custom evaluation store - Nix CLI - shell\nDESCRIPTION: This snippet shows an example use of the `nix path-info` command to output information about a nix package (`nixpkgs#hello`) in JSON format, specifying both the primary store and the evaluation store. It requires Nix to be installed and supports environments with local and cached stores. The main parameters are '--json' for machine-readable output, '--store' to direct the build or result storage, and '--eval-store' to override where Nix evaluates derivation existence. The input is the nix package attribute, and the output is JSON describing the derivation or package, while the command is run in a shell environment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.4.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# nix path-info --json --store https://cache.nixos.org \\\n  --eval-store auto nixpkgs#hello\n```\n\n----------------------------------------\n\nTITLE: Pretty-printing Values in nix repl - Nix\nDESCRIPTION: Demonstrates the new pretty-printing output format for values in nix repl. Input is an attribute set and lists with nested elements. Output is indented and formatted for readability. Requires only the Nix REPL.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.21.md#_snippet_5\n\nLANGUAGE: Nix\nCODE:\n```\n{\n  attrs = {\n    a = {\n      b = {\n        c = { };\n      };\n    };\n  };\n  list = [ 1 ];\n  list' = [\n    1\n    2\n    3\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Symbolic Link - Nix Model - plaintext\nDESCRIPTION: This code snippet demonstrates how symbolic links are described in the Nix model as an arrow followed by the target path. The input is an arbitrary string denoting the link destination. This is only a conceptual notation with no imposed interpretation on the symlink target.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/store/file-system-object.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-> /usr/bin/sh\n```\n\n----------------------------------------\n\nTITLE: Referencing Additional Nix Command Line Configuration Documentation - Markdown\nDESCRIPTION: This note provides a reference link to additional documentation on overriding configuration settings in Nix via command line flags. It guides users to the appropriate manual page for detailed explanations, serving as a supplementary pointer rather than an executable command.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/opt-common.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n> **Note**\\n>\\n> See [`man nix.conf`](@docroot@/command-ref/conf-file.md#command-line-flags) for overriding configuration settings with command line flags.\n```\n\n----------------------------------------\n\nTITLE: Installing Store Derivation\nDESCRIPTION: Command to directly install a store derivation bypassing Nix expression language\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.8.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-env -i /nix/store/z58v41v21xd3...-aterm-2.3.1.drv\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Servers for Remote Log Fetching - Nix Configuration - Text\nDESCRIPTION: This configuration line specifies a log server endpoint in the nix.conf file, enabling Nix to fetch build logs from a remote server if they are not available locally. It is used in conjunction with commands like nix-store -l, and requires that the server URL is accessible and follows the expected structure. The key parameter, log-servers, accepts one or more URLs to search for logs.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.8.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlog-servers = http://hydra.nixos.org/log\n```\n\n----------------------------------------\n\nTITLE: Pushing Maintenance Release Change - Console\nDESCRIPTION: Pushes committed changes in the context of a maintenance branch to the default remote, enabling updates to propagate to CI/CD and publication workflows. Assumes all changes relevant to the maintenance release are committed.\nSOURCE: https://github.com/nixos/nix/blob/master/maintainers/release-process.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Setting Complex SSH Options with NIX_SSHOPTS\nDESCRIPTION: Example of setting the NIX_SSHOPTS environment variable with complex SSH options including a ProxyCommand. The improved parsing now correctly handles spaces and quotes in SSH options.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.26.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport NIX_SSHOPTS='-o ProxyCommand=\"ssh -W %h:%p ...\"'\n```\n\n----------------------------------------\n\nTITLE: Incrementally Building and Opening the Nix Manual - Console\nDESCRIPTION: This snippet invokes 'make manual-html-open' using parallel build jobs determined by the $NIX_BUILD_CORES variable, after entering the development shell. It is intended for faster incremental builds of the manual during development. Requires GNU Make and access to the NIX_BUILD_CORES environment variable.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/documentation.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmake manual-html-open -j $NIX_BUILD_CORES\n```\n\n----------------------------------------\n\nTITLE: Configuring permanent binary cache servers in nix.conf\nDESCRIPTION: Configuration line to add to nix.conf that permanently sets up binary cache servers, including both a custom server and the official NixOS cache.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/package-management/binary-cache-substituter.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsubstituters = http://avalon:8080/ https://cache.nixos.org/\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Build with Make in Bash\nDESCRIPTION: Demonstrates how to use the NIX_BUILD_CORES environment variable to perform parallel builds with Make. This allows for configurable parallelism in build scripts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.16.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake -j $NIX_BUILD_CORES\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints and Running Program in LLDB - LLDB\nDESCRIPTION: This LLDB code sets a breakpoint on the 'main' function and then launches the Nix binary with application arguments. These commands are for LLDB's interactive prompt, and use '--name' to select the function. '<arguments>' is a placeholder for actual program input.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/debugging.md#_snippet_7\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) breakpoint set --name main\n(lldb) process launch -- <arguments>\n```\n\n----------------------------------------\n\nTITLE: Bash Script with Nix Expression for Terraform Customization\nDESCRIPTION: Example bash script using nix with a custom Nix expression to provide Terraform with OpenStack plugins.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/shell.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#! /usr/bin/env nix\n#! nix shell --impure --expr ``\n#! nix with (import (builtins.getFlake ''nixpkgs'') {});\n#! nix terraform.withPlugins (plugins: [ plugins.openstack ])\n#! nix ``\n#! nix --command bash\n\nterraform \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Build Log Output Flag\nDESCRIPTION: New command line flag for printing build logs to stderr with package name prefixes.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.3.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--print-build-logs\n-L\n```\n\n----------------------------------------\n\nTITLE: nix-store --restore Command Synopsis\nDESCRIPTION: Shows the basic syntax for using the nix-store --restore command, which takes a path parameter where the Nix Archive will be extracted.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/command-ref/nix-store/restore.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`nix-store` `--restore` *path*\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticated Write IAM Policy - AWS S3 - JSON\nDESCRIPTION: This JSON IAM policy grants authenticated users permissions needed to upload to the S3 binary cache, including actions like PutObject, AbortMultipartUpload, and listing multipart uploads. The policy applies to all objects in the 'example-nix-cache' bucket, with resource ARNs specified accordingly. Users or roles must be attached to this policy to enable S3 write capability via Nix or AWS SDKs.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/s3-binary-cache-store.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"Version\": \"2012-10-17\",\\n  \"Statement\": [\\n    {\\n      \"Sid\": \"UploadToCache\",\\n      \"Effect\": \"Allow\",\\n      \"Action\": [\\n        \"s3:AbortMultipartUpload\",\\n        \"s3:GetBucketLocation\",\\n        \"s3:GetObject\",\\n        \"s3:ListBucket\",\\n        \"s3:ListBucketMultipartUploads\",\\n        \"s3:ListMultipartUploadParts\",\\n        \"s3:PutObject\"\\n      ],\\n      \"Resource\": [\\n        \"arn:aws:s3:::example-nix-cache\",\\n        \"arn:aws:s3:::example-nix-cache/*\"\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying General Nix Help Information (Console)\nDESCRIPTION: This command shows the general help information for the Nix package manager. It provides an overview of available commands and options.\nSOURCE: https://github.com/nixos/nix/blob/master/src/nix/help.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# nix help\n```\n\n----------------------------------------\n\nTITLE: Reading Build Logs with nix-store\nDESCRIPTION: Shows how to use the new --read-log operation with nix-store to view build logs for specific paths.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-0.11.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnix-store --read-log (-l) paths\n```\n\n----------------------------------------\n\nTITLE: Nix SSH Store URL Format\nDESCRIPTION: URL format specification for connecting to remote Nix stores over SSH. Allows optional username and requires hostname.\nSOURCE: https://github.com/nixos/nix/blob/master/src/libstore/legacy-ssh-store.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nssh://[username@]hostname\n```\n\n----------------------------------------\n\nTITLE: Removing Nix-related Files on macOS\nDESCRIPTION: Command to remove Nix-related files and directories from the macOS system.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/installation/uninstall.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nsudo rm -rf /etc/nix /var/root/.nix-profile /var/root/.nix-defexpr /var/root/.nix-channels ~/.nix-profile ~/.nix-defexpr ~/.nix-channels\n```\n\n----------------------------------------\n\nTITLE: Confirmation Dialogue for Security-Sensitive Nix Actions - Shell\nDESCRIPTION: Shows a sample confirmation prompt in the terminal when a user action involves an important security decision, such as adding a new substitutor. The output explicitly displays a warning and asks the user to approve the action. This pattern helps prevent accidental security policy changes. Prerequisite: Nix CLI must detect interactive mode and handle user input acknowledgment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ nix build --option substitutors https://cache.example.org\n------------------------------------------------------------------------\n  Warning! A security related question needs to be answered.\n------------------------------------------------------------------------\n  The following substitutors will be used to in `my-project`:\n    - https://cache.example.org\n\n  Do you allow `my-project` to use above mentioned substitutors?\n    [y/N] |> y\n```\n\n----------------------------------------\n\nTITLE: Contrasting JSON5 Output Formats for nix path-info --json - JSON5\nDESCRIPTION: Demonstrates the transformation of the output structure of the experimental 'nix path-info --json' command from a list-based format to a map-based format in JSON5. The old structure represents paths as objects within an array, each with a 'valid' field, whereas the new structure uses store paths as keys and stores object info or null as the value, reflecting a design focused on direct lookup and unique keys. No external dependencies are required, but consumers of the JSON output must adapt to these format changes; input consists of command output, and expected output is a JSON5 representation as described.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-2.19.md#_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n[\n  {\n    \"path\": \"/nix/store/8fv91097mbh5049i9rglc73dx6kjg3qk-bash-5.2-p15\",\n    \"valid\": true,\n    // ...\n  },\n  {\n    \"path\": \"/nix/store/wffw7l0alvs3iw94cbgi1gmmbmw99sqb-home-manager-path\",\n    \"valid\": false\n  }\n]\n```\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"/nix/store/8fv91097mbh5049i9rglc73dx6kjg3qk-bash-5.2-p15\": {\n    // ...\n  },\n  \"/nix/store/wffw7l0alvs3iw94cbgi1gmmbmw99sqb-home-manager-path\": null,\n}\n```\n\n----------------------------------------\n\nTITLE: Significant Change Header in YAML\nDESCRIPTION: Additional header field to mark significant changes in release notes, which will be moved to the top of the documentation.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/contributing.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsignificance: significant\n```\n\n----------------------------------------\n\nTITLE: Custom toString Implementation\nDESCRIPTION: Shows how to implement custom string conversion using __toString attribute.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-interpolation.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  a = {\n    value = 1;\n    __toString = self: toString (self.value + 1);\n  };\nin\n\"${a}\"\n```\n\n----------------------------------------\n\nTITLE: Template Error Handling with Suggestions\nDESCRIPTION: Shows context-sensitive error handling when an invalid template is specified, providing similar valid template options.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/development/cli-guideline.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix init --template=template#pyton\n------------------------------------------------------------------------\n  Error! Template `template#pyton` not found.\n------------------------------------------------------------------------\nInitializing Nix project at `/path/to/here`.\n      Select a template for you new project:\n          |> template#python\n             template#python-pip\n             template#python-poetry\n```\n\n----------------------------------------\n\nTITLE: Escaping Double-Dollar-Curly ($${) in Indented Nix Strings - Nix\nDESCRIPTION: Demonstrates how to write a literal double-dollar-curly (`$${`) sequence in an indented string literal. The code emits this sequence verbatim, preventing Nix from interpreting it as special syntax. Useful in configuration generation or scripting contexts.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n''\n  $${\n''\n```\n\n----------------------------------------\n\nTITLE: Escaping Double Quotes in Standard Nix Strings - Nix\nDESCRIPTION: Demonstrates how to include a literal double quote character in a Nix string by escaping it with a backslash. Requires standard Nix syntax. Input is a Nix expression using quotes and escaped double quotes. The output is the resulting string containing the quote character. Essential when embedding quotes in literal strings.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/string-literals.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n\"\\\"\"\n```\n\n----------------------------------------\n\nTITLE: With-Expression Syntax in Nix\nDESCRIPTION: Shows the syntax for with-expressions in Nix. The set e1 is introduced into the lexical scope of expression e2, making its attributes directly accessible in e2.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/language/syntax.md#_snippet_24\n\nLANGUAGE: nix\nCODE:\n```\nwith e1; e2\n```\n\n----------------------------------------\n\nTITLE: Error Message on Missing Attribute with Position Info - Shell\nDESCRIPTION: Gives an example of an error produced by Nix when an attribute is missing, including detailed file and position information. Useful for debugging and understanding where in configuration files an error originated. Output format standardized in new Nix releases.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.7.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nerror: attribute `nixUnstabl' missing, at /etc/nixos/configurations/misc/eelco/mandark.nix:216:15\n```\n\n----------------------------------------\n\nTITLE: Overriding Attributes with Lazy ‘with’ Construct - Nix - nix\nDESCRIPTION: Illustrates the improved laziness of the 'with' construct in Nix, allowing attribute overriding without infinite recursion errors. The snippet demonstrates defining an initial set, applying an override via set union (//), and accessing the resolved attribute. Prerequisites are knowledge of Nix set operations, and inputs include initial and override sets; outputs reflect correctly overlaid attribute values.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/release-notes/rl-1.6.md#_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = with pkgs; { foo = \"old\"; bar = foo; } // overrides;\n  overrides = { foo = \"new\"; };\nin pkgs.bar\n```\n\n----------------------------------------\n\nTITLE: Defining 'rec' Options for Fixed Output Fingerprints - ebnf\nDESCRIPTION: This EBNF snippet specifies the possible values for 'rec' in a fixed-output store path's inner fingerprint. It distinguishes three alternatives: an empty string (for flat file serialization), 'r:' (for Nix Archive serialization), or 'git:' (for Git objects). This rule is intended for formal grammar definition in documentation or parser tooling.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_6\n\nLANGUAGE: ebnf\nCODE:\n```\n| \"\"\n| \"r:\"\n| \"git:\"\n```\n\n----------------------------------------\n\nTITLE: Content-Addressed Store Path Inner Fingerprint (Fixed Output) Rule - ebnf\nDESCRIPTION: This complex EBNF rule defines the inner fingerprint structure for fixed-output derivation content-addressed store objects (excluding plain SHA-256+NAR). It specifies that the fingerprint string starts with 'fixed:out:', a 'rec' marker indicating the record type, an algorithm ('algo'), a hash, and terminal colon separators. It assumes knowledge of algorithms and hash formatting, and is intended purely as a lexical/specification fragment.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/store-path.md#_snippet_5\n\nLANGUAGE: ebnf\nCODE:\n```\n\"fixed:out:\" rec algo \":\" hash \":\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Stable Derivation Structures in ATerm - Plaintext\nDESCRIPTION: Demonstrates the ATerm serialization format for stable Nix derivations, where the outermost expression is of the form Derive(...). The content inside the parentheses comprises the actual derivation inputs and metadata. No external dependencies are required for reading this snippet, but consumers must be familiar with ATerm and the expected derivation argument order. The input is structured ATerm text and there is no output produced directly by this declaration.\nSOURCE: https://github.com/nixos/nix/blob/master/doc/manual/source/protocols/derivation-aterm.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDerive(...)\n```"
  }
]