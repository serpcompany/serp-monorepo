[
  {
    "owner": "vexflow",
    "repo": "vexflow",
    "content": "TITLE: Rendering Score with Factory/EasyScore (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the high-level Factory and EasyScore APIs to render a simple musical score. It initializes a VexFlow Factory linked to an HTML element by its ID, creates a score and system, adds a stave with two voices containing notes defined using EasyScore syntax, sets clef and time signature, and draws the complete system.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst factory = new VexFlow.Factory({\n  renderer: { elementId: 'output', width: 500, height: 200 },\n});\n\nconst score = factory.EasyScore();\nconst system = factory.System();\n\nsystem\n  .addStave({\n    voices: [\n      score.voice(score.notes('C#5/q, B4, A4, G#4', { stem: 'up' })),\n      score.voice(score.notes('C#4/h, C#4', { stem: 'down' })),\n    ],\n  })\n  .addClef('treble')\n  .addTimeSignature('4/4');\n\nfactory.draw();\n```\n\n----------------------------------------\n\nTITLE: Including VexFlow via CDN (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to include the VexFlow library directly into a web page using a script tag pointing to a Content Delivery Network (CDN). It requires a div element where the rendered sheet music will be placed. Specifying a version number in the URL is recommended for stability.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"output\"></div>\n<script src=\"https://cdn.jsdelivr.net/npm/vexflow@5.0.0/build/cjs/vexflow.js\"></script>\n<script>\n  // YOUR CODE GOES HERE\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing VexFlow via npm (Shell)\nDESCRIPTION: This shell command shows how to install the VexFlow library using npm, the standard package manager for Node.js. This method is suitable for projects using bundlers like Webpack or Parcel, or for Node.js command-line applications.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install vexflow\n```\n\n----------------------------------------\n\nTITLE: Rendering Stave with Native API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the low-level VexFlow Native API for rendering a single stave. It manually creates a Renderer instance, links it to an HTML element by ID, configures the rendering context size, creates a Stave object with specific position and dimensions, adds a clef and time signature, sets the rendering context for the stave, and finally draws the stave.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Renderer, Stave } = VexFlow;\n\n// Create an SVG renderer and attach it to the DIV element with id=\"output\".\nconst div = document.getElementById('output');\nconst renderer = new Renderer(div, Renderer.Backends.SVG);\n\n// Configure the rendering context.\nrenderer.resize(500, 500);\nconst context = renderer.getContext();\n\n// Create a stave of width 400 at position 10, 40.\nconst stave = new Stave(10, 40, 400);\n\n// Add a clef and time signature.\nstave.addClef('treble').addTimeSignature('4/4');\n\n// Connect it to the rendering context and draw!\nstave.setContext(context).draw();\n```\n\n----------------------------------------\n\nTITLE: Importing VexFlow in Node.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the VexFlow library within a Node.js environment using the CommonJS module system. The `require('vexflow')` function call accesses the CJS build. The `vexflow/package.json`'s exports field enables the import to work. This is a prerequisite for using any of the VexFlow functionality.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/demos/node/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst VexFlow = require(...)\n```\n\n----------------------------------------\n\nTITLE: Defining Web Fonts with CSS @font-face Rule in CSS\nDESCRIPTION: This CSS snippet demonstrates how to define a custom font using the @font-face rule. It loads the 'Bravura' font for use in a web application, attempting to access a local copy first and falling back to a remote .woff2 resource if unavailable. Dependencies include access to either a locally installed font or the matching .woff2 file; the main parameter is the font-family name, and proper file paths must be specified. The output is the ability to use the 'Bravura' font throughout CSS by referencing the specified font-family.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/demos/fonts/README.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n@font-face {\n    font-family: \"Bravura\";\n    font-style: normal;\n    font-display: block;\n    font-weight: 400;\n    src: local(\"Bravura\"), url(bravura.woff2) format(\"woff2\");\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out Branch and Building Current Images using Git and Grunt (Shell)\nDESCRIPTION: Checks out a specific Git branch (e.g., a feature branch) and then builds the VexFlow project. The build process initiated by the `grunt` command includes generating test output images for the 'current' version under development. Requires Git and the VexFlow Grunt build system.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/tools/compare/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout my-new-feature-branch\ngrant\n```\n\n----------------------------------------\n\nTITLE: Building Reference Images using Grunt (Shell)\nDESCRIPTION: Builds the test images for a 'reference' version of VexFlow. This command is typically executed after checking out a specific, known-good Git revision to create the baseline images for comparison. It requires the VexFlow Grunt build system to be configured and available.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/tools/compare/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngrunt reference\n```\n\n----------------------------------------\n\nTITLE: Generating Current and Reference Image Files using Grunt (Shell)\nDESCRIPTION: Explicitly triggers the generation of 'current' and 'reference' test image files based on previous builds. These commands populate the respective output directories (`vexflow/build/images/current/` and `vexflow/reference/`) with the actual image files needed for comparison. Requires the VexFlow Grunt build system.\nSOURCE: https://github.com/vexflow/vexflow/blob/main/tools/compare/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngrunt generate:current\ngrant generate:reference\n```"
  }
]