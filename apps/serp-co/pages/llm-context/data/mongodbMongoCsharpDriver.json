[
  {
    "owner": "mongodb",
    "repo": "mongo-csharp-driver",
    "content": "TITLE: Configuring Retryable Reads and Writes\nDESCRIPTION: Example of configuring connection string to modify default retry behavior for reads and writes to prevent unexpected multiple retries\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.9.0.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Connection string to disable retryable reads and writes\nvar connectionString = \"mongodb://localhost:27017/database?retryReads=false&retryWrites=false\"\n```\n\n----------------------------------------\n\nTITLE: Populating a MongoDB Connection Pool in Pseudocode\nDESCRIPTION: This snippet shows the process of preemptively creating connections to meet the minPoolSize requirement. It includes waiting for pool readiness, connection creation, error handling, and SDAM integration.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_7\n\nLANGUAGE: pseudocode\nCODE:\n```\nwait until pendingConnectionCount < maxConnecting and pool is \"ready\"\ncreate connection\ntry:\n  establish connection\n  mark connection as available\nexcept error:\n  # Defer error handling to SDAM.\n  topology.handle_pre_handshake_error(error)\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Index\nDESCRIPTION: This snippet demonstrates how to create a search index with a specified definition and verify its successful creation. It involves checking if the index is queryable and validating its latest definition.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index',\n  definition: {\n    mappings: { dynamic: false }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AsQueryable Method for LINQ Support in MongoDB .NET Driver\nDESCRIPTION: This code snippet demonstrates how to use the new AsQueryable method to work with LINQ in the MongoDB .NET Driver. The AsQueryable method enables a more natural translation of LINQ queries to the aggregation framework.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.1.0.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAsQueryable\n```\n\n----------------------------------------\n\nTITLE: Checking Out a MongoDB Connection in Pseudocode\nDESCRIPTION: This code outlines the detailed process of retrieving a connection from the pool. It handles wait queues, connection validation, state management, establishing new connections when needed, and asynchronous pool population.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_8\n\nLANGUAGE: pseudocode\nCODE:\n```\nconnection = Null\nemit ConnectionCheckOutStartedEvent and equivalent log message\ntry:\n  enter WaitQueue\n  wait until at top of wait queue\n  # Note that in a lock-based implementation of the wait queue would\n  # only allow one thread in the following block at a time\n  while connection is Null:\n    if a connection is available:\n      while connection is Null and a connection is available:\n        connection = next available connection\n        if connection is perished:\n          close connection\n          connection = Null\n    else if totalConnectionCount < maxPoolSize:\n      if pendingConnectionCount < maxConnecting:\n        connection = create connection\n      else:\n        # this waiting MUST NOT prevent other threads from checking Connections\n        # back in to the pool.\n        wait until pendingConnectionCount < maxConnecting or a connection is available\n        continue\n\nexcept pool is \"closed\":\n  emit ConnectionCheckOutFailedEvent(reason=\"poolClosed\") and equivalent log message\n  throw PoolClosedError\nexcept pool is \"paused\":\n  emit ConnectionCheckOutFailedEvent(reason=\"connectionError\") and equivalent log message\n  throw PoolClearedError\nexcept timeout:\n  emit ConnectionCheckOutFailedEvent(reason=\"timeout\") and equivalent log message\n  throw WaitQueueTimeoutError\nfinally:\n  # This must be done in all drivers\n  leave wait queue\n\n# If the Connection has not been established yet (TCP, TLS,\n# handshake, compression, and auth), it must be established\n# before it is returned.\n# This MUST NOT block other threads from acquiring connections.\nif connection state is \"pending\":\n  try:\n    establish connection\n  except connection establishment error:\n    emit ConnectionCheckOutFailedEvent(reason=\"connectionError\") and equivalent log message\n    decrement totalConnectionCount\n    throw\n  finally:\n    decrement pendingConnectionCount\nelse:\n    decrement availableConnectionCount\nset connection state to \"in use\"\n\n# If there is no background thread, the pool MUST ensure that\n# there are at least minPoolSize total connections.\ndo asynchronously:\n  while totalConnectionCount < minPoolSize:\n    populate the pool with a connection\n\nemit ConnectionCheckedOutEvent and equivalent log message\nreturn connection\n```\n\n----------------------------------------\n\nTITLE: Connecting to Atlas Data Lake With Authentication in C#\nDESCRIPTION: This test assesses the driver's ability to connect to Atlas Data Lake using valid SCRAM-SHA-1 and SCRAM-SHA-256 authentication credentials. It creates a MongoClient with the appropriate connection string including the authentication details and executes a ping command to verify the connection.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/atlas-data-lake-testing/tests/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Create MongoClient with authentication credentials\n// Execute a ping command to verify successful connection\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionPool Interface in TypeScript\nDESCRIPTION: This TypeScript interface represents the structure and operations of a ConnectionPool within the MongoDB C# driver. It outlines key properties like waitQueue, generation numbers, and state, along with methods to manage connections such as checkIn, checkOut, clear, ready, and close. It requires the implementation of WaitQueue and optional interruption logic when clearing the pool.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\n    interface ConnectionPool {\n      /**\n       *  The Queue of threads waiting for a Connection to be available\n       */\n      waitQueue: WaitQueue;\n\n      /**\n       *  A generation number representing the SDAM generation of the pool.\n       */\n      generation: number;\n\n      /**\n       * A map representing the various generation numbers for various services\n       * when in load balancer mode.\n       */\n      serviceGenerations: Map<ObjectId, [number, number]>;\n\n      /**\n       * The state of the pool.\n       *\n       * Possible values are the following:\n       *   - \"paused\":        The initial state of the pool. Connections may not be checked out nor can they\n       *                      be established in the background to satisfy minPoolSize. Clearing a pool\n       *                      transitions it to this state.\n       *\n       *   - \"ready\":         The healthy state of the pool. It can service checkOut requests and create\n       *                      connections in the background. The pool can be set to this state via the\n       *                      ready() method.\n       *\n       *   - \"closed\":        The pool is destroyed. No more Connections may ever be checked out nor any\n       *                      created in the background. The pool can be set to this sate via the close()\n       *                      method. The pool cannot transition to any other state after being closed.\n       */\n      state: \"paused\" | \"ready\" | \"closed\";\n\n      // Any of the following connection counts may be computed rather than\n      // actually stored on the pool.\n\n      /**\n       *  An integer expressing how many total Connections\n       *  (\"pending\" + \"available\" + \"in use\") the pool currently has\n       */\n      totalConnectionCount: number;\n\n      /**\n       *  An integer expressing how many Connections are currently\n       *  available in the pool.\n       */\n      availableConnectionCount: number;\n\n      /**\n       *  An integer expressing how many Connections are currently\n       *  being established.\n       */\n      pendingConnectionCount: number;\n\n      /**\n       *  Returns a Connection for use\n       */\n      checkOut(): Connection;\n\n      /**\n       *  Check in a Connection back to the Connection pool\n       */\n      checkIn(connection: Connection): void;\n\n      /**\n       *  Mark all current Connections as stale, clear the WaitQueue, and mark the pool as \"paused\".\n       *  No connections may be checked out or created in this pool until ready() is called again.\n       *  interruptInUseConnections specifies whether the pool will force interrupt \"in use\" connections as part of the clear.\n       *  Default false.\n       */\n      clear(interruptInUseConnections: Optional<Boolean>): void;\n\n      /**\n       *  Mark the pool as \"ready\", allowing checkOuts to resume and connections to be created in the background.\n       *  A pool can only transition from \"paused\" to \"ready\". A \"closed\" pool\n       *  cannot be marked as \"ready\" via this method.\n       */\n      ready(): void;\n\n      /**\n       *  Marks the pool as \"closed\", preventing the pool from creating and returning new Connections\n       */\n      close(): void;\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Marking a MongoDB Connection as Available in Pseudocode\nDESCRIPTION: This code demonstrates how to mark a connection as available by updating counters, setting the connection state, and adding it to the pool of available connections.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_6\n\nLANGUAGE: pseudocode\nCODE:\n```\nincrement availableConnectionCount\nset connection state to \"available\"\nadd connection to availableConnections\n```\n\n----------------------------------------\n\nTITLE: Batch Creation of Search Indexes\nDESCRIPTION: This snippet showcases the creation of multiple search indexes in a batch operation. It verifies that the indexes have been created successfully and checks their properties.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index-1',\n  definition: {\n    mappings: { dynamic: false }\n  }\n}\n\n{\n  name: 'test-search-index-2',\n  definition: {\n    mappings: { dynamic: false }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a MongoDB Connection in Pseudocode\nDESCRIPTION: This snippet shows how to properly close a connection by updating its state, decrementing appropriate counters, emitting events, and closing the underlying socket in a non-blocking manner.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_5\n\nLANGUAGE: pseudocode\nCODE:\n```\noriginal state = connection state\nset connection state to \"closed\"\n\nif original state is \"available\":\n  decrement availableConnectionCount\nelse if original state is \"pending\":\n  decrement pendingConnectionCount\n\ndecrement totalConnectionCount\nemit ConnectionClosedEvent and equivalent log message\n\n# The following can happen at a later time (i.e. in background\n# thread) or via non-blocking I/O.\nconnection.socket.close()\n```\n\n----------------------------------------\n\nTITLE: Setting LinqProvider to LINQ2 in C#\nDESCRIPTION: This snippet demonstrates how to change the default LinqProvider from LINQ3 back to LINQ2 in the MongoDB C# driver. It initializes MongoClientSettings, sets the LinqProvider property to LinqProvider.V2, and then creates a MongoClient instance with the updated settings. This is useful for users who encounter issues with the new LINQ3 provider and need to revert to the previous version.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.19.0.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = \"mongodb://localhost\";\nvar clientSettings = MongoClientSettings.FromConnectionString(connectionString);\nclientSettings.LinqProvider = LinqProvider.V2;\nvar client = new MongoClient(clientSettings);\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Types for ObjectSerializer in C#\nDESCRIPTION: This snippet demonstrates how to configure the `AllowedTypes` function for the `ObjectSerializer` in the MongoDB C# driver.  It shows how to allow the default allowed types as well as custom types by checking if the type's full name starts with a specific namespace. The modified ObjectSerializer is then registered with the BsonSerializer.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.19.0.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar objectSerializer = new ObjectSerializer(type => ObjectSerializer.DefaultAllowedTypes(type) || type.FullName.StartsWith(\"MyNamespace\"));\nBsonSerializer.RegisterSerializer(objectSerializer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail Point for Find Command\nDESCRIPTION: This snippet configures a fail point on a mongos server to simulate a failed 'find' command. It sets the 'failCommand' to 'find', the 'errorCode' to 6, and 'closeConnection' to true. The fail point is configured to trigger once.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/retryable-reads/tests/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configureFailPoint\": \"failCommand\",\n    \"mode\": { \"times\": 1 },\n    \"data\": {\n        \"failCommands\": [\"find\"],\n        \"errorCode\": 6,\n        \"closeConnection\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregation with Fluent API in C#\nDESCRIPTION: Shows how to use the new fluent Aggregation API to perform complex data processing operations on collections.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.0.0.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar totalAgeByLastName = await db.GetCollection<Person>(\"people\")\n\t.Aggregate()\n\t.Match(x => x.FirstName == \"Jack\")\n\t.GroupBy(x => x.LastName, g => new { _id = g.Key, TotalAge = g.Sum(x => x.Age)})\n\t.ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Fluent Find API in C#\nDESCRIPTION: Demonstrates the new fluent Find API for querying documents, including filtering, sorting, and projecting results using expression trees.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar names = await db.GetCollection<Person>(\"people\")\n\t.Find(x => x.FirstName == \"Jack\")\n\t.SortBy(x => x.Age)\n\t.Project(x => x.FirstName + \" \" + x.LastName)\n\t.ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Running Driver Benchmarks\nDESCRIPTION: This command runs the C# driver benchmarks. It includes options for specifying a release configuration, enabling driver benchmarks, setting environment variables for connection strings, and filtering benchmarks by class name. It allows for customization of benchmark execution.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/benchmarks/MongoDB.Driver.Benchmarks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"dotnet run -c Release -- --driverBenchmarks\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"dotnet run -c Release -- --driverBenchmarks --envVars MONGODB_URI:\\\"ConnectionString\\\"\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"dotnet run -c Release -- --driverBenchmarks --filter \\\"*BenchmarkClassName*\\\"\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"dotnet run -c Release -- --driverBenchmarks --anyCategories \\\"WriteBench\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Dropping a Search Index\nDESCRIPTION: This snippet illustrates how to drop a search index and ensures the deletion is successful by confirming that the list of search indexes returns an empty array post-deletion.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index',\n  definition: {\n    mappings: { dynamic: false }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Dynamic Objects into MongoDB Collection in C#\nDESCRIPTION: Demonstrates support for dynamic objects by inserting an ExpandoObject into a MongoDB collection.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.0.0.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = new ExpandoObject();\nperson.FirstName = \"Jane\";\nperson.Age = 12;\nperson.PetNames = new List<dynamic> { \"Sherlock\", \"Watson\" }\nawait db.GetCollection<dynamic>(\"people\").InsertOneAsync(person);\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Spec Test Match Function - Javascript\nDESCRIPTION: This pseudocode demonstrates the MATCH function used for testing in the Spec Test Runner. It abstracts the logic of matching expected values against actual results from change streams. The function verifies types and structures of JSON objects, arrays, and simple values.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/change-streams/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nIf expected is \"42\" or 42:\n    Assert that actual exists (is not null or undefined)\nElse:\n    Assert that actual is of the same JSON type as expected\n    If expected is a JSON array:\n        For every idx/value in expected:\n            Assert that actual[idx] MATCHES value\n    Else if expected is a JSON object:\n        For every key/value in expected\n            Assert that actual[key] MATCHES value\n    Else:\n        Assert that expected equals actual\n```\n\n----------------------------------------\n\nTITLE: Using Typed Query Builders in C#\nDESCRIPTION: This code demonstrates the use of typed query builders, which provide type-safe and more readable query construction for MongoDB operations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.5.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstring idFromUserInput = ...;\nvar query = Query.And(\n\tQuery<Person>.NE(p => p.Id, idFromUserInput),\n\tQuery<Person>.EQ(p => p.FirstName, \"Jack\"));\n```\n\nLANGUAGE: C#\nCODE:\n```\nstring idFromUserInput = ...;\nvar query = Query<Person>.Where(p => p.Id != idFromUserInput && p.FirstName == \"Jack\");\n```\n\n----------------------------------------\n\nTITLE: Establishing a MongoDB Connection in Pseudocode\nDESCRIPTION: This code outlines the process of establishing a new connection to MongoDB, including TCP/TLS connection, handshake, compression handling, and authentication. It also includes error handling and event emission.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_4\n\nLANGUAGE: pseudocode\nCODE:\n```\ntry:\n  connect connection via TCP / TLS\n  perform connection handshake\n  handle OP_COMPRESSED\n  perform connection authentication\n  emit ConnectionReadyEvent and equivalent log message\n  return connection\nexcept error:\n  close connection\n  throw error # Propagate error in manner idiomatic to language.\n```\n\n----------------------------------------\n\nTITLE: LINQ Query Examples for MongoDB in C#\nDESCRIPTION: These snippets showcase various LINQ query enhancements supported in the MongoDB C# driver, including case-insensitive queries and collection operations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.5.md#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar query = Query<Person>.Where(p => p.Name.ToUpper() == \"Abc\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar local = new List<int> { 1, 2, 3};\n\nvar query = from p in people.AsQueryable()\n\t\t\twhere local.Contains(p.Age)\n\t\t\tselect p;\n```\n\nLANGUAGE: C#\nCODE:\n```\nQuery<A>.Where(a => a.GetType() == typeof(T))\n```\n\nLANGUAGE: C#\nCODE:\n```\ncollection.AsQueryable().OfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Atlas Search Render Method Signature Change\nDESCRIPTION: Breaking change in Atlas Search builders where Render method signature has been updated to use a new SearchDefinitionRenderContext parameter\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.21.0.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRender(IBsonSerializer<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nRender(SearchDefinitionRenderContext<TDocument> renderContext)\n```\n\n----------------------------------------\n\nTITLE: Connection Interface in TypeScript\nDESCRIPTION: Defines the structure and properties of a database connection within the connection pool, tracking connection state, identification, and pool membership\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Connection {\n  id: number;\n  address: string;\n  generation: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Connection with New MongoClient (C#)\nDESCRIPTION: This code snippet shows the new recommended way of initializing a MongoDB connection using the MongoClient class. This method defaults the WriteConcern to Acknowledged.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.7.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar connectionString = \"mongodb://localhost\";\nvar client = new MongoClient(connectionString);\nvar server = client.GetServer();\nvar database = server.GetDatabase(\"test\"); // WriteConcern defaulted to Acknowledged\n```\n\n----------------------------------------\n\nTITLE: Implementing PredicateTranslator.cs for Enhanced LINQ Query Support in C#\nDESCRIPTION: Introduction of PredicateTranslator.cs to improve LINQ query support, including new operators, case-insensitive queries, and support for nullable enums and type comparisons.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Driver.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nPredicateTranslator.cs\n    new class that contains all the BuildQuery methods moved here from SelectQuery\n    added support for & and | operators in LINQ queries (as long as arguments are bools)\n    added support for Any<T>(source, predicate) in LINQ queries\n    new BuildBooleanQuery to build always true and always false queries ({ } and { _id : { $type : -1 } } respectively)\n    added support for true and false constants in LINQ queries\n    added support for using ToLower/ToUpper to do case insensitive LINQ queries\n    added support for nullable enums in LINQ queries\n    added support for ContainsKey in LINQ queries\n    added support for Contains as another way of expressing In in LINQ queries (In is propietary, Contains is not)\n    added support for type comparisons in LINQ queries (== and != only of course)\n    moved bulk of BuildNotQuery logic to new Query.Not builder method\n```\n\n----------------------------------------\n\nTITLE: Retrieving a MongoDatabase Instance using MongoServer in C#\nDESCRIPTION: Demonstrates how to retrieve a MongoDatabase instance using MongoServer's GetDatabase method. Ensures thread safety as a new instance is returned every call. Admin credentials must be set in MongoClientSettings for admin operations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.8.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar database = server.GetDatabase(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Connecting to Atlas Data Lake Without Authentication in C#\nDESCRIPTION: This test verifies that the MongoDB C# driver can establish a connection to Atlas Data Lake without providing authentication credentials. It creates a MongoClient with a proper connection string and performs a ping command to ensure connectivity.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/atlas-data-lake-testing/tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create MongoClient without auth credentials\n// Execute a ping command to test connectivity\n```\n\n----------------------------------------\n\nTITLE: Declaring ExtraElements Field as IDictionary in C#\nDESCRIPTION: Example of declaring an ExtraElements field as IDictionary<string, object> instead of BsonDocument, allowing storage of extra elements encountered during deserialization without introducing a dependency on the driver in data model classes.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nIDictionary<string, object> ExtraElements;\n```\n\n----------------------------------------\n\nTITLE: Disabling Fail Point in MongoDB\nDESCRIPTION: This MongoDB command snippet disables a fail point after test execution to ensure that subsequent tests are not affected by the configured fail point. It is essential for cleaning up the test environment by turning off any active fail points, thus preventing spurious failures.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/retryable-reads/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: MongoDB Command\nCODE:\n```\ndb.runCommand({\n    configureFailPoint: \"failCommand\",\n    mode: \"off\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ObjectId with DateTime Timestamp in C#\nDESCRIPTION: Demonstrates the new ObjectId constructor that accepts a DateTime timestamp, which is automatically converted to seconds since the Unix Epoch. This is useful for creating artificial ObjectIds for range-based queries.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nObjectId objectId = new ObjectId(DateTime.Now, 0, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a MongoCollection Using MongoDatabase in C#\nDESCRIPTION: Shows the recommended way to get a MongoCollection instance using the GetCollection method of MongoDatabase, supporting type parameters and negating the use of deprecated indexers.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.8.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar collection = database.GetCollection<TDocument>(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Command Routing in C#\nDESCRIPTION: Updates to command routing logic allowing parallelCollectionScan command and conditional routing of aggregate commands to secondary nodes when pipeline excludes $out operator.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Driver.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"parallelCollectionScan\"\n\"aggregate\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Benchmark Data\nDESCRIPTION: This shell script downloads the data required for running the benchmarks. It should be executed from the benchmark root directory. The downloaded data is essential for the benchmark execution and realistic performance testing.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/benchmarks/MongoDB.Driver.Benchmarks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"/scripts/download-data.sh\"\n```\n\n----------------------------------------\n\nTITLE: Connection Pool Monitoring Event Interfaces\nDESCRIPTION: TypeScript interfaces defining the structure of various connection pool monitoring events including pool creation, readiness, clearing, and connection lifecycle events.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PoolCreatedEvent {\n  address: string;\n  options: {...}\n}\n\ninterface PoolReadyEvent {\n  address: string;\n}\n\ninterface PoolClearedEvent {\n  address: string;\n  serviceId: Optional<ObjectId>;\n  interruptInUseConnections: Optional<Boolean>;\n}\n\ninterface PoolClosedEvent {\n  address: string;\n}\n\ninterface ConnectionCreatedEvent {\n  address: string;\n  connectionId: int64;\n}\n\ninterface ConnectionReadyEvent {\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Document Properties in C#\nDESCRIPTION: Demonstrates the new simplified syntax for accessing nested properties in BsonDocument and BsonArray objects without explicit type casting.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.8.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar zip = person[\"Addresses\"][0][\"Zip\"].AsString;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail Point for Find Command\nDESCRIPTION: This snippet configures a fail point on a mongos server to simulate a failed 'find' command. It sets the 'failCommand' to 'find', the 'errorCode' to 6, and 'closeConnection' to true. The fail point is configured to trigger once.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/retryable-reads/tests/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configureFailPoint\": \"failCommand\",\n    \"mode\": { \"times\": 1 },\n    \"data\": {\n        \"failCommands\": [\"find\"],\n        \"errorCode\": 6,\n        \"closeConnection\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Benchmark Results for Evergreen\nDESCRIPTION: This command shows how to export benchmark results in the format expected by Evergreen. You can specify the output file name. By default, the output file is named `evergreen-results.json`.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/benchmarks/MongoDB.Driver.Benchmarks/README.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\"dotnet run -c Release -- --evergreen --output|-o <filename>\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Search Index\nDESCRIPTION: This snippet explains the procedure for updating an existing search index. It checks the index's properties post-update to ensure the changes have been applied successfully.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index',\n  definition: {\n    mappings: { dynamic: true }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Backdated ObjectId in C#\nDESCRIPTION: Shows how to use the new GenerateNewId overload to create a backdated ObjectId by providing a custom timestamp. This is useful for creating ObjectIds with specific timestamps, but carries a small risk of non-uniqueness.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nObjectId backdatedId = ObjectId.GenerateNewId(DateTime.Now.AddDays(-7));\n```\n\n----------------------------------------\n\nTITLE: Optimizing Enumerable Serialization in C# MongoDB Driver\nDESCRIPTION: A new base class EnumerableSerializerBase is introduced to optimize serialization of various enumerable types. It includes performance improvements such as caching serializer lookups and optimizing discriminator convention usage.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.2-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nEnumerableSerializerBase.cs\n    New base class containing optimizations applicable to many enumerable serializers\n    Only lookup serializer for nominalType once\n    Only lookup serializer for runs of the same actualType once\n    Don't bother with discriminatorConventions for value types because they can't have subclasses\n    Subclasses implement abstract methods: AddItem, CreateInstance, EnumerateItemsInSerializationOrder and FinalizeResult\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Index with Custom Read and Write Concerns\nDESCRIPTION: This snippet involves creating a search index while setting non-default read and write concerns. It verifies that the index creation adheres to the specified concerns and checks the created index properties.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index-case6',\n  definition: {\n    mappings: { dynamic: false }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing BsonCreatorMap Class for Creator Members - C#\nDESCRIPTION: A new class, BsonCreatorMap, has been introduced to represent a creator member, such as a constructor or factory method. This addition supports the new conventions and enhances the serialization mechanism for objects with specific creation patterns.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nnew class to represent a creator member (a constructor or factory method)\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Pool Options in TypeScript\nDESCRIPTION: Specifies standard configuration options for managing connection pools, including maximum and minimum pool sizes, idle time, and connection establishment limits\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionPoolOptions {\n  maxPoolSize?: number;\n  minPoolSize?: number;\n  maxIdleTimeMS?: number;\n  maxConnecting?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: BSON Class Mapping Configuration in C#\nDESCRIPTION: Updates to class mapping functionality including support for read-only properties and discriminator handling. Added new properties for member map access and improved serialization opt-in capabilities.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.1-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class BsonClassMap {\n    public IEnumerable<BsonMemberMap> AllMemberMaps { get; }\n    public IEnumerable<BsonMemberMap> DeclaredMemberMaps { get; }\n    [Obsolete]\n    public IEnumerable<BsonMemberMap> MemberMaps { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing MongoGridFS.cs for Large File Support in C#\nDESCRIPTION: Changes to MongoGridFS.cs to support GridFS files larger than 2GB by using long instead of int for certain variables, and optimizing index creation for read-only operations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Driver.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMongoGridFS.cs\n    EnsureIndexes is now only called for write operations, so read-only users can download GridFS files without getting an exception\n    several methods changed to use long instead of int for some variables to support GridFS files larger than 2GB\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Index using MongoDB C# Driver TypeScript\nDESCRIPTION: This snippet demonstrates how to create a search index using the `createSearchIndex` helper on a MongoDB collection. The index is defined with a static mapping, and the operation is expected to return the provided index name. Requires a MongoDB collection and the `createSearchIndex` method from the driver.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index-case7-implicit',\n  definition: {\n    mappings: { dynamic: false }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of MostArgumentsCreatorSelector - C#\nDESCRIPTION: The MostArgumentsCreatorSelector class implements the ICreatorSelector interface by selecting the creator with the most matching arguments. This implementation aids in accurately identifying the best-fitting constructor or factory method during serialization.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nan implementation of ICreatorSelector that chooses the creator with the most matching arguments\n```\n\n----------------------------------------\n\nTITLE: MongoDB Secondary-Compatible Commands in C# Driver\nDESCRIPTION: List of MongoDB collection and database methods that can be executed on secondary nodes with appropriate ReadPreference settings. These commands include operations like aggregate, count, distinct, and specific geo-spatial queries.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.6.1.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMongoCollection.Aggregate\nMongoCollection.GetStats\nMongoCollection.Count\nMongoCursor.Count\nMongoCursor.Size\nMongoDatabase.GetStats\nMongoCollection.Distinct\nMongoCollection.GeoNear\nMongoCollection.GeoNearAs\nMongoCollection.GeoHaystackSearch\nMongoCollection.GeoHaystackSearchAs\nMongoCollection.Group\nMongoCollection.MapReduce // only with MapReduceOutputMode.Inline\n```\n\n----------------------------------------\n\nTITLE: Refactoring BsonClassMap with New Conventions - C#\nDESCRIPTION: The BsonClassMap has been refactored to move the convention registry functionality to a new ConventionRegistry class and added support for creator maps. Various properties have been added or obsoleted to align with the new conventions system, streamlining the mappings for constructors and static factory methods.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nmoved convention registry functionality to new ConventionRegistry class\nadded support for creator maps (constructors and static factory methods)\nnew CreatorMaps property\nnew ConventionPack property\nobsoleted Conventions property\nnew HasCreatorMaps property\nremoved obsolete MemberMaps property\nobsoleted LookupConventions method\nobsoleted RegisterConventions method\nFreeze no longer tries to find the _id member, that's up to conventions now (but if there is an _id, Freeze sets the element name to \"_id\")\nFreeze no longer tries to find the extra elements, that's up to conventions now\nnew MapConstructor methods\nnew MapCreator methods\nnew MapFactoryMethod methods\nnew Reset method (can be used in conventions to reset class map back to initial state)\nSetExtraElementsMember can now be called multiple times (last one wins)\nSetIdMember can now be called multiple times (last one wins)\nSetIdMember no longer sets the element name to _id (that's now done in Freeze)\nnew UnmapConstructor method\nnew UnmapFactoryMethod method\nAutoMapClass has been reimplemented to use the new conventions system\nprivate AutoMapMember method is removed and functionality has been moved to conventions\nprivate FindMembers method is removed and functionality has been moved to conventions\nprivate FilteredConventionProfile class is no longer needed here and has been removed\nGetMemberInfoFromLambda now handles lambdas where parameter is an interface\nnew ResolveExplicitProperty private method\n```\n\n----------------------------------------\n\nTITLE: Creating an Explicit Search Index using MongoDB C# Driver TypeScript\nDESCRIPTION: This snippet demonstrates the creation of an explicitly declared search index with type `search` using the `createSearchIndex` helper. It checks for the presence and settings of specific properties like `name` and `queryable` after the creation. Requires a MongoDB collection and proper permission on assistance execution.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index-case7-explicit',\n  type: 'search',\n  definition: {\n    mappings: { dynamic: false }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors While Dropping Non-Existent Index\nDESCRIPTION: This snippet demonstrates how to gracefully handle the command to drop a search index even if the index does not exist, ensuring that no errors are thrown during the operation.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/* No code required as this involves error handling without executing any command. */\n```\n\n----------------------------------------\n\nTITLE: Introducing CreatorMapDelegateCompiler Class - C#\nDESCRIPTION: The CreatorMapDelegateCompiler class has been added to compile delegates for invoking constructors and factory methods. This class facilitates dynamic creation of objects based on defined conventions, enhancing the serialization framework's flexibility.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nnew class that compiles delegates to call constructors and factory methods\n```\n\n----------------------------------------\n\nTITLE: Disabling Certificate Revocation Check in MongoDB .NET Driver Connection String\nDESCRIPTION: This code snippet shows how to disable certificate revocation checking in the MongoDB .NET Driver by adding a parameter to the connection string. This may be necessary if the application is behind a firewall with an outbound whitelist and cannot contact OCSP endpoints or CRL distribution points.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.11.0-beta2.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntlsDisableCertificateRevocationCheck=true\n```\n\n----------------------------------------\n\nTITLE: ICreatorSelector Interface Definition - C#\nDESCRIPTION: The ICreatorSelector interface has been defined to provide a mechanism for selecting a creator based on specified criteria. This abstraction allows different implementations to choose creators dynamically, facilitating improved behavior for serializer constructors.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnew interface defining a selector to choose a creator (based on some criteria)\n```\n\n----------------------------------------\n\nTITLE: Modifying UpdateBuilder.cs for Null Handling and Adding Typed Builder in C#\nDESCRIPTION: Updates to UpdateBuilder.cs to wrap C# null values in various methods and introduction of a new typed Update<TDocument> builder.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Driver.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nUpdateBuilder.cs\n    AddToSetWrapped value parameter now wraps C# null\n    PullWrapped value parameter now wraps C# null\n    PushWrapped value parameter now wraps C# null\n    SetWrapped value parameter now wraps C# null\n    added new typed Update<TDocument> builder\n```\n\n----------------------------------------\n\nTITLE: Enhancing MongoCollection Functionality in C#\nDESCRIPTION: Added a new Distinct<TValue> method and modified FindAs and RunCommandAs methods to use improved serialization mechanisms for result handling.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.1-Driver.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMongoCollection.cs\n    new Distinct<TValue> method that returns the distinct values as TValue(s) instead of BsonValue(s)\n    FindAs is now responsible for looking up the serializer for the result documents\n    RunCommandAs now uses standard serialization mechanisms to deserialize the command result\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Class with BsonAttributes in C#\nDESCRIPTION: This snippet shows the definition of a Person class with BsonAttributes for custom serialization in MongoDB.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.5.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n\t[BsonRepresentation(BsonType.ObjectId)]\n\tpublic string Id { get; set;}\n\n\t[BsonElement(\"fn\")]\n\tpublic string FirstName { get; set;}\n\n\t[BsonElement(\"ln\")]\n\tpublic string LastName { get; set;}\n\n\t[BsonElement(\"age\")]\n\tpublic int Age { get; set;}\n}\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration for Disabling Certificate Revocation\nDESCRIPTION: Shows how to disable certificate revocation checking in the connection string when needed for environments with limited access to OCSP endpoints or CRL distribution points.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.11.0-beta1.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntlsDisableCertificateRevocationCheck=true\n```\n\n----------------------------------------\n\nTITLE: Using BsonTypeMapper for Explicit Mapping (C#)\nDESCRIPTION: Shows how to use BsonTypeMapper to explicitly map between .NET types and BsonDocument, handling null values.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar dictionary = new Dictionary<string, object> { { \"x\", null } };\nvar document = BsonTypeMapper.MapToBsonValue(dictionary);\n// document[\"x\"] == BsonNull.Value\n\nvar document = new BsonDocument { { \"x\", BsonNull.Value } };\nvar dictionary = (IDictionary<string, object>)BsonTypeMapper.MapToDotNetValue(document);\n// dictionary[\"x\"] == null\n```\n\n----------------------------------------\n\nTITLE: MongoClient URI with directConnection=false\nDESCRIPTION: Specifies a connection string for creating a MongoClient instance, disabling direct connection to the server.  This URI ensures that the client uses topology discovery to connect to the replica set.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_10\n\nLANGUAGE: uri\nCODE:\n```\n\"mongodb://HOST/?directConnection=false\"\n```\n\n----------------------------------------\n\nTITLE: Implementing RawBsonArraySerializer Delegation in BsonArraySerializer for MongoDB C#\nDESCRIPTION: The Serialize method in BsonArraySerializer.cs now delegates to RawBsonArraySerializer when the actual type is RawBsonArray, optimizing serialization for raw BSON arrays.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSerialize now delegates to RawBsonArraySerializer when actual type is RawBsonArray\n```\n\n----------------------------------------\n\nTITLE: New LINQ Where Clause Expressions (C#)\nDESCRIPTION: Demonstrates various new expressions supported in LINQ where clauses, including string operations and type checking.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nwhere d.p.Equals(constant)\nwhere string.IsNullOrEmpty(d.p)\nwhere d.p.IndexOf(c) == i\nwhere d.p.IndexOf(c, j) == i\nwhere d.p.IndexOf(c, j, k) == i\nwhere d.p.IndexOf(s) == i\nwhere d.p.IndexOf(s, j) == i\nwhere d.p.IndexOf(s, j, k) == i\nwhere d.p.IndexOfAny(ca) == i\nwhere d.p.IndexOfAny(ca, j) == i\nwhere d.p.IndexOfAny(ca, j, k) == i\nwhere d.p[i] == c\nwhere d.p.Length == n\nwhere d.p.ToLower().Contains(\"xyz\")\nwhere d.p.ToLower().StartsWith(\"xyz\")\nwhere d.p.ToLower().EndsWith(\"xyz\")\nwhere d.p.ToUpper().Contains(\"xyz\")\nwhere d.p.ToUpper().StartsWith(\"xyz\")\nwhere d.p.ToUpper().EndsWith(\"xyz\")\nwhere d.p.Trim().Contains(\"xyz\")\nwhere d.p.Trim().StartsWith(\"xyz\")\nwhere d.p.Trim().EndsWith(\"xyz\")\nwhere d.p.TrimStart().Contains(\"xyz\")\nwhere d.p.TrimStart().StartsWith(\"xyz\")\nwhere d.p.TrimStart().EndsWith(\"xyz\")\nwhere d.p.TrimEnd().Contains(\"xyz\")\nwhere d.p.TrimEnd().StartsWith(\"xyz\")\nwhere d.p.TrimEnd().EndsWith(\"xyz\")\nwhere d.GetType() == typeof(T)\nwhere d is T\n```\n\n----------------------------------------\n\nTITLE: Using Bare AsQueryable in LINQ (C#)\nDESCRIPTION: Shows a LINQ query consisting of only AsQueryable, which previously caused an ArgumentOutOfRangeException. This is now supported in version 1.4.1.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar query = collection.AsQueryable<C>(); // no where clause\n```\n\n----------------------------------------\n\nTITLE: Connection Pool Status Update Pseudocode\nDESCRIPTION: Pseudocode showing connection check-in logic and status updates in the connection pool.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_9\n\nLANGUAGE: pseudocode\nCODE:\n```\nemit ConnectionCheckedInEvent and equivalent log message\nif connection is perished OR pool is closed:\n  close connection\nelse:\n  mark connection as available\n```\n\n----------------------------------------\n\nTITLE: Implementing RawBsonDocumentSerializer Delegation in BsonDocumentSerializer for MongoDB C#\nDESCRIPTION: The Serializer in BsonDocumentSerializer.cs now delegates to RawBsonDocumentSerializer when the actual type is RawBsonDocument, optimizing serialization for raw BSON documents.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nSerializer now delegates to RawBsonDocumentSerializer when actual type is RawBsonDocument\n```\n\n----------------------------------------\n\nTITLE: Serializing Read-Only Properties with BsonElement (C#)\nDESCRIPTION: Demonstrates how to opt-in read-only properties for serialization using the [BsonElement] attribute.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Book\n{\n    public ObjectId Id;\n\tpublic string Title;\n\t[BsonElement] // opt-in the read-only LowercaseTitle property\n\tpublic string LowercaseTitle { get { return Title.ToLower(); } }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MongoCollection.cs for BsonDocumentWrapper and IBsonIdProvider in C#\nDESCRIPTION: Changes made to MongoCollection.cs to handle BsonDocumentWrapper's treatment of C# null and to use the new IBsonIdProvider interface for InsertBatch and Save operations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Driver.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMongoCollection.cs\n    some changes because BsonDocumentWrapper no longer ignores C# null\n    InsertBatch changed to use new IBsonIdProvider interface\n    Save changed to use new IBsonIdProvider interface\n```\n\n----------------------------------------\n\nTITLE: Enhancing TimeSpanSerializer with Helper Methods - C#\nDESCRIPTION: The TimeSpanSerializer has undergone a cleanup of the Deserialize and Serialize implementations, along with the introduction of new helper methods: FromDouble, FromInt32, FromInt64, TicksPerUnit, ToDouble, ToInt32, and ToInt64. These enhancements provide better utility for handling TimeSpan objects during serialization.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ncleaned up implementation of Deserialize and Serialize\nnew FromDouble, FromInt32, FromInt64 helper methods\nnew TicksPerUnit helper method\nnew ToDouble, ToInt32, ToInt64 helper methods\n```\n\n----------------------------------------\n\nTITLE: Running Operation on a Thread in Test Runner - YAML\nDESCRIPTION: The 'runOnThread' operation schedules an operation to be executed on a specified thread. It requires 'name' for the thread and 'operation' which defines the specific task to be run.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: runOnThread\n        object: testRunner\n        arguments:\n          name: thread1\n          operation:\n            name: insertOne\n            object: collection\n            arguments:\n              document:\n                _id: 2\n            error: true\n```\n\n----------------------------------------\n\nTITLE: Modifying WriteConcern in C#\nDESCRIPTION: Shows how to modify a WriteConcern object using the new immutable API with the With method.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.0.0.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar writeConcern = myCurrentWriteConcern.With(journal: true);\n```\n\n----------------------------------------\n\nTITLE: Configuring failCommand Fail Point in MongoDB\nDESCRIPTION: This code snippet shows how to configure a failCommand fail point in MongoDB using the db.adminCommand method. It includes various options like mode, failCommands, closeConnection, errorCode, appName, blockConnection, and blockTimeMS to simulate different failure scenarios.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/transactions/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.adminCommand({\n        configureFailPoint: \"failCommand\",\n        mode: <string|document>,\n        data: {\n          failCommands: [\"commandName\", \"commandName2\"],\n          closeConnection: <true|false>,\n          errorCode: <Number>,\n          writeConcernError: <document>,\n          appName: <string>,\n          blockConnection: <true|false>,\n          blockTimeMS: <Number>,\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Enhancing BsonClassMap and BsonMemberMap in C# MongoDB Driver\nDESCRIPTION: BsonClassMap and BsonMemberMap classes are updated with new features including freezing member maps, adding a delegate-based SetDefaultValue method, and improving error handling for element names.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.2-Bson.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nBsonClassMap.cs\n    Freeze now freezes the declared member maps also\n\nBsonMemberMap.cs\n    added Freeze method\n    add SetDefaultValue overload that takes a delegate to create new instances of default values (important if default value is mutable)\n    SetElementName now throws if elementName contains nulls\n```\n\n----------------------------------------\n\nTITLE: Inserting Data to Advance Cluster Time in MongoDB (Python Example)\nDESCRIPTION: This snippet inserts a document into a MongoDB collection using the PyMongo driver. This operation advances the cluster time on the server. The inserted document contains a field 'advance' with the value '$clusterTime', but this is just a string literal, not a reference to the actual cluster time.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/sessions/tests/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"c2.test.test.insert_one({\\\"advance\\\": \\\"$clusterTime\\\"})\"\n```\n\n----------------------------------------\n\nTITLE: Connection String Test Case Structure\nDESCRIPTION: Defines the standardized JSON/YAML format for connection string test cases, including validation rules for URIs, hosts, authentication, and options\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-string/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests:\n  - description: \"Test case description\"\n    uri: \"mongodb://example.com\"\n    valid: true\n    warning: false\n    hosts:\n      - type: \"hostname\"\n        host: \"example.com\"\n        port: 27017\n    auth:\n      username: \"user\"\n      password: \"pass\"\n      db: \"database\"\n    options:\n      key1: \"value1\"\n      key2: \"value2\"\n```\n\n----------------------------------------\n\nTITLE: Decimal128 Test Case Conversion Pseudo-Code\nDESCRIPTION: A comprehensive test suite demonstrating complex conversion and encoding scenarios for BSON Decimal128 values, covering BSON and ExtJSON transformations with canonical and non-canonical representations\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/bson-decimal128/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: pseudo-code\nCODE:\n```\nB  = decode_hex( case[\"bson\"] )\nE  = case[\"extjson\"]\n\n/* Note that \"canonical_bson\" is not used for the Decimal128 tests\n *  -- but it is used by other upcoming \"BSON Corpus\" tests\n */\n\nif \"canonical_bson\" in case:\n    cB = decode_hex( case[\"canonical_bson\"] )\nelse:\n    cB = B\n\nif \"canonical_extjson\" in case:\n    cE = decode_extjson( case[\"canonical_extjson\"] )\nelse:\n    cE = E\n\nassert encode_bson(decode_bson(B)) == cB                    # B->cB\n\nif B != cB:\n    assert encode_bson(decode_bson(cB)) == cB               # cB->cB\n\nif \"extjson\" in case:\n    assert encode_extjson(decode_bson(B)) == cE             # B->cE\n    assert encode_extjson(decode_extjson(E)) == cE          # E->cE\n\n    if B != cB:\n        assert encode_extjson(decode_bson(cB)) == cE        # cB->cE\n\n    if  E != cE:\n        assert encode_extjson(decode_extjson(cE)) == cE     # cE->cE\n\n    if \"lossy\" not in case:\n        assert encode_bson(decode_extjson(E)) == cB         # E->cB\n\n        if E != cE:\n            assert encode_bson(decode_extjson(cE)) == cB    # cE->cB\n```\n\n----------------------------------------\n\nTITLE: Unpin Session Test: Non-Transaction Operation (Python)\nDESCRIPTION: This Python code illustrates how non-transaction operations using a pinned ClientSession unpin the session, allowing for normal server selection. It necessitates a server version of 4.1.6 or greater and a minimum of two mongoses.  The code initializes a MongoClient, establishes a collection, initiates a session and transaction, performs an insert, and then iterates to verify the utilization of multiple mongos instances through cursor addresses.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/transactions/tests/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\n      @require_server_version(4, 1, 6)\n      @require_mongos_count_at_least(2)\n      def test_unpin_for_non_transaction_operation(self):\n        # Increase localThresholdMS and wait until both nodes are discovered\n        # to avoid false positives.\n        client = MongoClient(mongos_hosts, localThresholdMS=1000)\n        wait_until(lambda: len(client.nodes) > 1)\n        # Create the collection.\n        client.test.test.insert_one({})\n        with client.start_session() as s:\n          # Session is pinned to Mongos.\n          with s.start_transaction():\n            client.test.test.insert_one({}, session=s)\n\n          addresses = set()\n          for _ in range(50):\n            cursor = client.test.test.find({}, session=s)\n            assert next(cursor)\n            addresses.add(cursor.address)\n\n          assert len(addresses) > 1\n\n```\n\n----------------------------------------\n\nTITLE: Enhancing GeoJson Query Generation in C#\nDESCRIPTION: Modified Near method to include $maxDistance parameter within $near/$nearSphere operators when working with GeoJson data.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Driver.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nQueryBuilder.Near()\n```\n\n----------------------------------------\n\nTITLE: Implementing New Serialization Interfaces\nDESCRIPTION: Updated various serializer classes to implement new interfaces and add new methods for serialization information retrieval.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nBsonArraySerializer.cs\n  now implementes IBsonArraySerializer\n  added GetItemSerializationInfo\n\nBsonDocumentSerializer.cs\n  now implements IBsonDocumentSerializer\n  added GetMemberSerializationInfo\n\nBsonValueSerializer.cs\n  now implements IBsonArraySerializer and IBSonDocumentSerializer\n  added GetItemSerializationInfo\n  added GetMemberSerializationInfo\n```\n\n----------------------------------------\n\nTITLE: Serialization Attribute Example in C#\nDESCRIPTION: Example showing the new BsonSerializer attribute syntax used to specify custom serializers for classes.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.6.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[BsonSerializer]\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling in MongoConnection.cs\nDESCRIPTION: Modified error handling to call RefreshStateAsSoonAsPossible instead of setting server instance state to Unknown when an error occurs.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Driver.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// When an error occurs don't set server instance state to Unknown (instead call RefreshStateAsSoonAsPossible)\n```\n\n----------------------------------------\n\nTITLE: Creating collection with document validation in MongoDB\nDESCRIPTION: This snippet creates a collection named \"test\" with document validation rules. The validator specifies that the field \"x\" must be of type \"string\". This is used to generate WriteError with DocumentValidationFailure code for testing the driver's handling of WriteError details.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/crud/tests/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"create\": \"test\",\n  \"validator\": {\n    \"x\": { $type: \"string\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BSON Reader/Writer API Updates\nDESCRIPTION: Changes to BsonReader and BsonWriter classes including new methods for handling binary data, ObjectIds, and raw BSON arrays/documents. Methods now return values directly instead of using out parameters.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class BsonBinaryReader\n{\n    public BsonBinaryData ReadBinaryData();\n    public byte[] ReadBytes();\n    public ObjectId ReadObjectId();\n    public BsonRegularExpression ReadRegularExpression();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating BsonSerializer for attribute support in C#\nDESCRIPTION: LookupSerializer method now supports the BsonSerializerAttribute, allowing for more flexible serializer configuration.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// BsonSerializer.cs\n// LookupSerializer now supports the BsonSerializerAttribute\n```\n\n----------------------------------------\n\nTITLE: Fixing Eval Method in MongoDatabase Class in C#\nDESCRIPTION: Resolved a bug in the Eval method that prevented arguments from being sent to the server when there was exactly one argument.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.1-Driver.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMongoDatabase.cs\n    fixed bug in Eval that was preventing args being sent to the server when there was exactly one arg\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionReadyEvent Interface in TypeScript\nDESCRIPTION: Defines the ConnectionReadyEvent interface for when a connection is ready. It includes the server address, connection ID, and connection establishment duration.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionReadyEvent {\n  address: string;\n  connectionId: int64;\n  duration: Duration;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating StringSerializer for ReadObjectId and WriteObjectId - C#\nDESCRIPTION: The StringSerializer has been updated to use the new versions of ReadObjectId and WriteObjectId during deserialization and serialization, respectively. This change ensures that StringSerializer utilizes the latest serialization logic for better performance and standards compliance.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nDeserialize uses new version of ReadObjectId\nSerialize uses new version of WriteObjectId\n```\n\n----------------------------------------\n\nTITLE: Querying Inherited Properties in LINQ (C#)\nDESCRIPTION: Demonstrates a LINQ query against an inherited property, which previously caused a NullReferenceException. This issue has been fixed in version 1.4.1.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class B\n{\n\tpublic ObjectId Id;\t\n}\n\npublic class C : B\n{\n\tpublic int X;\n}\n\nvar query =\n    from c in collection.AsQueryable<C>()\n\twhere c.Id = id // class C inherits Id from class B\n\tselect c;\n```\n\n----------------------------------------\n\nTITLE: Optimizing QueryOperation.cs\nDESCRIPTION: Fixed Execute method to avoid fetching unnecessary batches when using limit. Also modified exception handling for KillCursor operations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Driver.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Execute was sometimes fetching one more batch of results than necessary when limit was used\n// Exceptions thrown by KillCursor should be ignored\n```\n\n----------------------------------------\n\nTITLE: Updating MongoCursor and MongoCursorEnumerator in C#\nDESCRIPTION: Modified MongoCursor to handle serialization options and added a new Serializer property. Updated MongoCursorEnumerator to use specified serializer and options.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.1-Driver.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMongoCursor.cs\n    now receives the serializer and serialization options to use for the result document in the constructor\n    added new Serializer property\n    static Create method now has additional serializer and serialization options parameters\n\nMongoCursorEnumerator.cs\n    GetReply now uses the serializer and serialization options specified by the cursor\n```\n\n----------------------------------------\n\nTITLE: Introducing BsonSerializerAttribute in C#\nDESCRIPTION: New attribute added to configure a serializer for a class or a member, enhancing serialization customization.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// BsonSerializerAttribute.cs\n// new attribute to configure a serializer for a class or a member\n```\n\n----------------------------------------\n\nTITLE: Introducing BsonDocumentBackedClassSerializer in C#\nDESCRIPTION: New abstract base class added for BsonDocumentBackedClass serializers, enhancing serialization capabilities.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// BsonDocumentBackedClassSerializer.cs\n// new abstract base class for BsonDocumentBackedClass serializers\n```\n\n----------------------------------------\n\nTITLE: Constructing Queries with Old and New Query Builders in C#\nDESCRIPTION: This snippet compares the old and new query builder syntaxes, demonstrating the differences in constructing complex queries.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.5.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar query = Query.Or(\n    Query.Exists(\"fn\", true).NE(\"Jack\"),\n    Query.GTE(\"age\", 20).LTE(40));\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar query = Query.And(\n\tQuery.And(\n\t\tQuery.Exists(\"fn\"),\n\t\tQuery.NE(\"fn\", \"Jack\"))\n\tQuery.And(\n\t\tQuery.GTE(\"age\", 20),\n\t\tQuery.LET(\"age\", 40)));\n```\n\n----------------------------------------\n\nTITLE: ExpressionVisitor Class for Delegates - C#\nDESCRIPTION: A new ExpressionVisitor class is introduced to assist the CreatorMapDelegateCompiler. It is designed to be replaced by the .NET Framework 4 ExpressionVisitor in future updates, ensuring compatibility and a standardized approach for expression tree manipulation.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nnew class used by CreatorMapDelegateCompiler\nwhen we move to .NET Framework 4 we will remove this class and use the ExpressionVisitor in .NET 4\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Search Index using MongoDB C# Driver TypeScript\nDESCRIPTION: This code snippet outlines the process of creating a vector search index with specific field configurations like `vector`, `path`, and `similarity` using the `createSearchIndex` helper. The post-creation verification ensures the index is queryable. Prerequisites include a configured MongoDB instance and the necessary driver setup.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index-case7-vector',\n  type: 'vectorSearch',\n  definition: {\n    fields: [\n       {\n           type: 'vector',\n           path: 'plot_embedding',\n           numDimensions: 1536,\n           similarity: 'euclidean',\n       },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionClosedEvent Interface in TypeScript\nDESCRIPTION: Defines the ConnectionClosedEvent interface for when a connection is closed. It includes the server address, connection ID, and reason for closure.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionClosedEvent {\n  address: string;\n  connectionId: int64;\n  reason: string|Enum;\n}\n```\n\n----------------------------------------\n\nTITLE: BSON Value Type Updates\nDESCRIPTION: Updates to BSON value type classes including making properties and methods virtual, implementing new comparison methods, and adding direct value conversion overrides.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class BsonValue\n{\n    public virtual bool ToBoolean();\n    public virtual double ToDouble();\n    public virtual int ToInt32();\n    public virtual long ToInt64();\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing BsonSerializationInfo in C#\nDESCRIPTION: Added new helper methods: DeserializeValue, SerializeValue, and SerializeValues. These methods were previously in BsonSerializationInfoHelper in the driver.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n// BsonSerializationInfo.cs\n// new helper methods: DeserializeValue, SerializeValue, SerializeValues\n// used to be in BsonSerializationInfoHelper (in the driver)\n```\n\n----------------------------------------\n\nTITLE: BSON Type Mapping Enhancements in C#\nDESCRIPTION: Improvements to BSON type mapping functionality including null handling and conversion between BSON and .NET types. Added support for mapping null values to BsonNull.Value and enhanced type conversion capabilities.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.1-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BsonTypeMapper {\n    public static BsonValue MapToBsonValue(object value) {\n        if (value == null)\n            return BsonNull.Value;\n        // mapping implementation\n    }\n    \n    public static object MapToDotNetValue(BsonValue value) {\n        // .NET type mapping implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Runtimes\nDESCRIPTION: This command shows how to specify multiple runtimes for the benchmarks. The first runtime is used as a baseline for comparison. Requires modification of the benchmark project file.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/benchmarks/MongoDB.Driver.Benchmarks/README.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"dotnet run -c Release -- --runtimes\"\n```\n\n----------------------------------------\n\nTITLE: Modifying MongoInsertMessage in C#\nDESCRIPTION: Fixed a bug in the ResetBatch method that was affecting InsertBatch operations with multiple sub-batches.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.1-Driver.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMongoInsertMessage.cs\n    fixed bug in ResetBatch that was affecting InsertBatch with multiple sub-batches\n```\n\n----------------------------------------\n\nTITLE: Refactoring Static Instance Properties in Serializers - C#\nDESCRIPTION: This section mentions the obsoletion of static Instance properties across various serializers. The obsolescence indicates a move towards more instance-based functionality instead of relying on static properties. This change is essential for improving thread-safety and flexibility in serializer usage.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nobsoleted static Instance property\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Collection ID Assignment in C#\nDESCRIPTION: Modified AssignId method to use actualType instead of nominalType for determining _id field setting capability, particularly important when nominalType is an interface.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Driver.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMongoCollection.AssignId\n```\n\n----------------------------------------\n\nTITLE: Updating MongoCollection.cs\nDESCRIPTION: Modified InsertOperation to pass MongoCollection to the container parameter. Fixed Save method to correctly handle _id value for all possible serializers.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Driver.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// Pass MongoCollection to new container parameter of InsertOperation (to be passed to GenerateId)\n// Fixed Save to correctly handle _id value for all possible serializers\n```\n\n----------------------------------------\n\nTITLE: Updating GeoJson Coordinate Serializers\nDESCRIPTION: Modified Deserialize methods in various GeoJson coordinate serializers to use DoubleSerializer for handling conversions from other types to double.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Driver.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Deserialize methods now use DoubleSerializer (to handle conversions from other types to double)\n```\n\n----------------------------------------\n\nTITLE: Refactoring Serialization Classes in C# MongoDB Driver\nDESCRIPTION: Multiple serialization classes are refactored to inherit from the new EnumerableSerializerBase, promoting code reuse and consistency across different enumerable types.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.2-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nArraySerializer.cs\nEnumerableSerializer.cs\nQueueSerializer.cs\nReadOnlyCollectionSerializer.cs\nStackSerializer.cs\n    These classes are all now implemented in terms of EnumerableSerializerBase\n```\n\n----------------------------------------\n\nTITLE: New BSON Buffer Implementation Changes\nDESCRIPTION: Details of changes to buffer handling including new IByteBuffer interface implementations with ByteArrayBuffer, SingleChunkBuffer, and MultiChunkBuffer. Changes include improved memory management and UTF8 encoding handling.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IByteBuffer\n{\n    // Simple Read and Write methods that operate at the byte level\n    byte Read();\n    void Write(byte value);\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying InsertOperation.cs\nDESCRIPTION: Updated the container parameter in the call to GenerateId to be a MongoCollection instance, reverting to previous behavior.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Driver.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Container parameter in call to GenerateId is now a MongoCollection instance (like it used to be)\n```\n\n----------------------------------------\n\nTITLE: Fixing StackOverflowException in InterfaceSerializer for MongoDB C#\nDESCRIPTION: The Deserialize method in InterfaceSerializer.cs has been fixed to prevent a StackOverflowException when a document is missing the _t element, enhancing the robustness of deserialization.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nfixed StackOverflowException in Deserialize when document was missing _t element\n```\n\n----------------------------------------\n\nTITLE: Using OfType<T> in LINQ Queries (C#)\nDESCRIPTION: Shows how to use the OfType<T> query operator in LINQ queries to filter by document type.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar query = collection.AsQueryable<B>().OfType<C>();\n```\n\n----------------------------------------\n\nTITLE: Restructuring BsonDocumentWrapper\nDESCRIPTION: Changed the base class and added new features to BsonDocumentWrapper, including serialization options and materialization methods.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nchanged base class to MaterializedOnDemandBsonDocument\nadded new constructor\nadded SerializationOptions\nadded Serializer\nremoved methods now implemented by base class (CompareTo etc...)\nadded Clone\nadded Materialize\nadded MaterializeCompleted\n```\n\n----------------------------------------\n\nTITLE: Updated BsonNull Serialization Format\nDESCRIPTION: Shows the new format for serializing C# null values of type BsonNull.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.6.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n{ _csharpnull : true }\n```\n\n----------------------------------------\n\nTITLE: Enhancing BsonDocument Class\nDESCRIPTION: Added a new Add method with a valueFactory lambda and made some obsolete methods virtual in BsonDocument.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnew Add method with valueFactory lambda\nmade some obsolete methods virtual\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Server for Stable API Testing\nDESCRIPTION: Command to enable required API version parameter on a standalone MongoDB instance using the admin database\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/versioned-api/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ setParameter: 1, requireApiVersion: true }\n```\n\n----------------------------------------\n\nTITLE: Mapping Null Values in BsonDocument (C#)\nDESCRIPTION: Demonstrates how C# null values are now mapped to BsonNull.Value when working with BsonDocument and Dictionary objects.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar dictionary = new Dictionary<string, object> { { \"x\", null } };\nvar document = new BsonDocument(dictionary);\n// document[\"x\"] == BsonNull.Value\n\nvar document = new BsonDocument { { \"x\", BsonNull.Value } };\nvar dictionary = document.ToDictionary();\n// dictionary[\"x\"] == null\n```\n\n----------------------------------------\n\nTITLE: Removing C# Null Handling in BsonClassMapSerializer for MongoDB C#\nDESCRIPTION: Code for handling C# null representation has been removed from BsonClassMapSerializer.cs. This functionality is now handled by the new BsonValueCSharpNullSerializer.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nremoved code to handle C# null representation (see new BsonValueCSharpNullSerializer)\n```\n\n----------------------------------------\n\nTITLE: Refactoring BsonSerializer Behavior - C#\nDESCRIPTION: The BsonSerializer has been refactored to no longer special case BsonDocument during serialization and deserialization. The changes ensure a uniform handling of all subclasses and reinforce the need for registering serializers explicitly, which results in cleaner and more predictable behavior.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nDeserialize no longer special cases BsonDocument\nLookupSerializer only special cases BsonDocument, not subclasses of BsonDocument\nRegisterSerializer does not allow registering serializers for BsonValue and its subclasses\nSerialize no longer special cases IBsonSerializable\n```\n\n----------------------------------------\n\nTITLE: Adding RefreshStateAsSoonAsPossible Method to MongoServerInstance.cs\nDESCRIPTION: Introduced a new method RefreshStateAsSoonAsPossible to handle server instance state updates.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Driver.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Added RefreshStateAsSoonAsPossible method\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Pool Error Interfaces in TypeScript\nDESCRIPTION: Defines TypeScript interfaces for connection pool errors including PoolClosedError, PoolClearedError, and WaitQueueTimeoutError. These interfaces specify the structure and content of error messages thrown by the connection pool in specific circumstances.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Thrown when the driver attempts to check out a\n *  Connection from a closed Connection Pool\n */\ninterface PoolClosedError {\n  message: 'Attempted to check out a Connection from closed connection pool';\n  address: <pool address>;\n}\n\n/**\n *  Thrown when the driver attempts to check out a\n *  Connection from a paused Connection Pool\n */\ninterface PoolClearedError extends RetryableError {\n  message: 'Connection pool for <pool address> was cleared because another operation failed with: <original error which cleared the pool>';\n  address: <pool address>;\n}\n\n/**\n *  Thrown when a driver times out when attempting to check out\n *  a Connection from a Pool\n */\ninterface WaitQueueTimeoutError {\n  message: 'Timed out while checking out a Connection from connection pool';\n  address: <pool address>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Trie Navigation for ReadBsonType in C#\nDESCRIPTION: Multiple classes now use trie navigation when reading BSON types or element names, improving performance. This change affects BsonBinaryReader, BsonDocumentReader, BsonReader, and JsonReader.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nReadBsonType now navigates a trie and returns a value from it while reading the element name\n```\n\n----------------------------------------\n\nTITLE: Updating BsonTypeMapper in C#\nDESCRIPTION: Modifications to BsonTypeMapper.cs to correctly map subclasses of BsonDocument and handle special cases for objects that can be cast to BsonValue.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6.1-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// BsonTypeMapper.cs\n// Map subclasses of BsonDocument correctly\n// Special case mapping of objects that can be simply cast to BsonValue\n```\n\n----------------------------------------\n\nTITLE: Enhancements in BsonMemberMap Properties - C#\nDESCRIPTION: The BsonMemberMap class has received several property updates, including MemberTypeIsBsonValue, IsDefaultValueSpecified, and removal of obsolete properties. The logic for element names and ID generation has been improved by migrating some of the responsibilities to the conventions, enhancing the overall design and usability.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nnew MemberTypeIsBsonValue property\nsome of the logic from ElementName has been moved out to the conventions\nsome of the logic from IdGenerator has been moved out to the conventions\nnew IsDefaultValueSpecified property\nremoved obsolete SerializeDefaultValue property\nnew Reset method\nremoved obsolete overload of SetDefaultValue method\nremoved obsolete SetSerializeDefaultValue method\n```\n\n----------------------------------------\n\nTITLE: Waiting for Event in Test Runner - YAML\nDESCRIPTION: The 'waitForEvent' operation makes the test runner pause until a specified event is published a certain number of times. It requires an 'event' argument defining the event type and a 'count' argument that specifies how many times to wait for it.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: waitForEvent\n        object: testRunner\n        arguments:\n          event: PoolClearedEvent\n          count: 1\n```\n\n----------------------------------------\n\nTITLE: Building the Application with SAM CLI\nDESCRIPTION: This code snippet shows the command used to build the serverless application using the AWS SAM CLI. It installs dependencies, creates a deployment package, and prepares the application for local testing. Ensure you are in the correct directory for executing this command.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/tests/FaasTests/LambdaTests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsam build\n```\n\n----------------------------------------\n\nTITLE: Optimizing String Reading in BsonBuffer for C#\nDESCRIPTION: BsonBuffer now uses a static ASCII table and UTF8Encoding instance. It also implements a new DecodeUtf8String helper method and uses trie navigation for reading C-strings.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nadded a static field for an ASCII table\nadded a static field for a UTF8Encoding instance (constructed to throw exceptions on invalid bytes)\nReadString uses new DecodeUtf8String helper method\nReadCString now navigates a trie and returns a value from it while reading the string\nnew IndexOfNull helper method navigates a trie while scanning for the null byte\n```\n\n----------------------------------------\n\nTITLE: Updating Id Property Declaration in NamedIdMemberConvention Class (C#)\nDESCRIPTION: Ensures that the Id property is explicitly declared within the NamedIdMemberConvention class before it is mapped. This change likely improves the robustness of the class and prevents potential issues with property inheritance and mapping.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nNamedIdMemberConvention.cs\n    Make sure Id is declared in this class (and not just overridden) before mapping it\n```\n\n----------------------------------------\n\nTITLE: Test Runner Procedure for Change Streams - Javascript\nDESCRIPTION: This boilerplate code defines the essential steps for executing change stream tests using specified YAML configurations. It outlines the preparation steps, test execution, and validation of results, capturing errors and expectations during the testing process.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/change-streams/tests/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBefore running the tests\n\n- Create a MongoClient \"globalClient\", and connect to the server.\n  When executing tests against a sharded cluster, \"globalClient\" must only connect to one mongos.\n\nFor each YAML file, for each element in \"tests\":\n- If \"topology\" does not include the topology of the server instance(s), skip this test.\n- Use \"globalClient\" to\n\n  - Drop the database \"database_name\"\n  - Drop the database \"database2_name\"\n  - Create the database \"database_name\" and the collection \"database_name.collection_name\"\n  - Create the database \"database2_name\" and the collection \"database2_name.collection2_name\"\n  - If the \"failPoint\" field is present, configure the fail point on the primary server.\n\n- Create a new MongoClient \"client\"\n- Begin monitoring all APM events for \"client\".\n- Using \"client\", create a changeStream \"changeStream\" against the specified \"target\".\n- If there was no error, use \"globalClient\" and run every operation in \"operations\".\n```\n\n----------------------------------------\n\nTITLE: Recording Primary in Test Runner - YAML\nDESCRIPTION: The 'recordPrimary' operation allows the test runner to capture the current primary server's state for later reference. This operation does not require additional arguments.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: recordPrimary\n        object: testRunner\n```\n\n----------------------------------------\n\nTITLE: Refactoring Serialization Attributes in C#\nDESCRIPTION: Various serialization attributes now derive directly from Attribute instead of BsonSerializationOptionsAttribute. They implement new interfaces like IBsonMemberMapModifier or IBsonClassMapModifier.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnow only derives from Attribute instead of from BsonSerializationOptionsAttribute\nimplements the Apply method from the new IBsonMemberMapModifier interface\n```\n\n----------------------------------------\n\nTITLE: Testing `killCursors` Command in Atlas Data Lake with C#\nDESCRIPTION: This test checks if the MongoDB C# driver correctly constructs and sends a `killCursors` command to Atlas Data Lake, ensuring that the command is issued with the correct cursor ID and namespace. It establishes an APM listener for event monitoring and makes necessary assertions to validate the results.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/atlas-data-lake-testing/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Configure an APM listener on client\n// Execute query with batchSize=2 on test.driverdata\n// Observe events for find and killCursors commands\n// Assert cursor ID and namespace matches\n// Final assertions on CommandSucceededEvent\n```\n\n----------------------------------------\n\nTITLE: Implementing New Serialization Interfaces in C#\nDESCRIPTION: Various serializers now implement new interfaces such as IBsonArraySerializer, IBsonIdProvider, and IBsonDocumentSerializer. This change affects classes like ArraySerializer, BsonBaseSerializer, and ObjectSerializer.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Bson.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nimplements the new IBsonArraySerializer interface\nDeserialize now passes item serialization options down when deserializing the items\n```\n\n----------------------------------------\n\nTITLE: Adding Max Document Size Stack in BsonBinaryWriter\nDESCRIPTION: New fields and methods added to BsonBinaryWriter for managing maximum document size.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nadded _maxDocumentSizeStack\nadded PopMaxDocumentSize\nadded PushMaxDocumentSize\n```\n\n----------------------------------------\n\nTITLE: Enhancing BsonClassMap in C#\nDESCRIPTION: BsonClassMap now caches discriminator conventions and member maps, builds a trie of element names, and handles attributes more efficiently using new interfaces.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.5-Bson.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nnow caches the discriminator convention so LookupDiscriminatorConvention is only called once\nnow caches a read-only copy of the allMemberMaps list\nFreeze now builds a trie of all the element names (used during deserialization)\nGetMemberMapForElement now consults the trie instead of a dictionary\nSetCreator can be called to inject an object instance creator delegate\nnew AddKnownType method is called during AutoMapping of a class\nAutoMapClass handling of attributes is much simpler thanks to the new IBsonClassMapModifier interface\nAutoMapMembers handles mix of ordered and unordered members more efficiently\nAutoMapMember handling of attributes is much simpler thanks to the new IBsonMemberMapModifier interface\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with Deduced Type Parameter (C#)\nDESCRIPTION: Shows how the type parameter <T> in AsQueryable can now be deduced from the collection argument.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.4.1.md#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar collection = database.GetCollection<MyDocument>(\"mydocuments\")\nvar query = collection.AsQueryable(); // <T> is deduced to be MyDocument\n```\n\n----------------------------------------\n\nTITLE: Updating BsonDefaultSerializationProvider for ReadOnlyCollection in C#\nDESCRIPTION: Added special handling for ReadOnlyCollection<T> in the default serialization provider.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// BsonDefaultSerializationProvider.cs\n// special handling for ReadOnlyCollection<T>\n```\n\n----------------------------------------\n\nTITLE: Updating DateTime Parsing in JsonReader for MongoDB C#\nDESCRIPTION: The ParseDateTimeExtendedJson method in JsonReader.cs has been updated to support $date with ISO8601 strings, enhancing the flexibility of date parsing in the BSON library.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nParseDateTimeExtendedJson now supports $date with ISO8601 strings\n```\n\n----------------------------------------\n\nTITLE: Setting up failCommand for WriteConcernError in MongoDB\nDESCRIPTION: This snippet configures a failpoint in MongoDB to simulate a WriteConcernError during an insert operation. The failpoint is configured to trigger an error with specific code, codeName, errmsg, and errInfo. This is used to test the driver's handling of WriteConcernError details.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/crud/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"configureFailPoint\": \"failCommand\",\n  \"data\": {\n    \"failCommands\": [\"insert\"],\n    \"writeConcernError\": {\n      \"code\": 100,\n      \"codeName\": \"UnsatisfiableWriteConcern\",\n      \"errmsg\": \"Not enough data-bearing nodes\",\n      \"errInfo\": {\n        \"writeConcern\": {\n          \"w\": 2,\n          \"wtimeout\": 0,\n          \"provenance\": \"clientSupplied\"\n        }\n      }\n    }\n  },\n  \"mode\": { \"times\": 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MongoReplyMessage Constructor in C#\nDESCRIPTION: Modified the MongoReplyMessage constructor to accept a serializer parameter for handling returned documents.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.1-Driver.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMongoReplyMessage.cs\n    the serializer to use for the returned documents is now passed in to the constructor\n```\n\n----------------------------------------\n\nTITLE: Unpin Session Test: New Transaction (Python)\nDESCRIPTION: This Python code demonstrates how starting a new transaction on a pinned ClientSession unpins the session, allowing normal server selection for the next operation.  It requires a server version of 4.1.6 or higher and at least two mongoses. The code initializes a MongoClient, creates a collection, starts a session and transaction, performs an insert, then iterates to assert that multiple mongos instances are used.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/transactions/tests/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n      @require_server_version(4, 1, 6)\n      @require_mongos_count_at_least(2)\n      def test_unpin_for_next_transaction(self):\n        # Increase localThresholdMS and wait until both nodes are discovered\n        # to avoid false positives.\n        client = MongoClient(mongos_hosts, localThresholdMS=1000)\n        wait_until(lambda: len(client.nodes) > 1)\n        # Create the collection.\n        client.test.test.insert_one({})\n        with client.start_session() as s:\n          # Session is pinned to Mongos.\n          with s.start_transaction():\n            client.test.test.insert_one({}, session=s)\n\n          addresses = set()\n          for _ in range(50):\n            with s.start_transaction():\n              cursor = client.test.test.find({}, session=s)\n              assert next(cursor)\n              addresses.add(cursor.address)\n\n          assert len(addresses) > 1\n\n```\n\n----------------------------------------\n\nTITLE: Introducing BsonDocumentBackedClass in C#\nDESCRIPTION: New abstract base class added for helper classes that decode a BSON document.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// BsonDocumentBackedClass.cs\n// new abstract base class for helper classes that decode a BSON document\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionary Serializers\nDESCRIPTION: Modified DictionaryGenericSerializer and DictionarySerializer to handle empty string keys during serialization.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nDictionaryGenericSerializer.cs\n  changed Serializer to handle empty string keys\n\nDictionarySerializer.cs\n  changed Serializer to handle empty string keys\n```\n\n----------------------------------------\n\nTITLE: Introducing ReadOnlyCollectionSerializer in C#\nDESCRIPTION: New serializer added for handling ReadOnlyCollection types in BSON serialization.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// ReadOnlyCollectionSerializer.cs\n// new serializer for ReadOnlyCollection\n```\n\n----------------------------------------\n\nTITLE: Introducing New Materialized On Demand Classes\nDESCRIPTION: Added new classes MaterializedOnDemandBsonArray and MaterializedOnDemandBsonDocument.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMaterializedOnDemandBsonArray.cs\n  new class\n\nMaterializedOnDemandBsonDocument.cs\n  new class\n```\n\n----------------------------------------\n\nTITLE: Updating Serialize Method in Multiple Builder Classes (C#)\nDESCRIPTION: The Serialize method in various builder classes now casts the document to IBsonSerializable before calling the Serialize method. This change affects multiple classes including CollectionOptionsBuilder, FieldsBuilder, and others.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Driver.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSerialize method now casts document to IBsonSerializable to call Serialize method\n```\n\n----------------------------------------\n\nTITLE: Updating BsonValue IConvertible Implementation\nDESCRIPTION: Fixed the IConvertible.ToType method in BsonValue to handle object type conversion.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nfixed IConvertible.ToType to handle object\n```\n\n----------------------------------------\n\nTITLE: Updating BsonWriter for C# null representation in C#\nDESCRIPTION: BsonWriter no longer allows $csharpnull, instead using _csharpnull to represent C# null values.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// BsonWriter.cs\n// no longer allow $csharpnull (driver now uses _csharpnull instead)\n```\n\n----------------------------------------\n\nTITLE: Asserting Values Match Using Pseudocode\nDESCRIPTION: This snippet provides a pseudocode implementation of the MATCH function, which asserts that an actual value matches the expected value according to specific rules. The function can handle JSON arrays and objects, checking that the expected values are subsets of the actual values.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/tests/cmap-format/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nIf expected is \"42\" or 42:\n  Assert that actual exists (is not null or undefined)\nElse:\n  Assert that actual is of the same JSON type as expected\n  If expected is a JSON array:\n    For every idx/value in expected:\n      Assert that actual[idx] MATCHES value\n  Else if expected is a JSON object:\n    For every key/value in expected\n      Assert that actual[key] MATCHES value\n  Else:\n    Assert that expected equals actual\n```\n\n----------------------------------------\n\nTITLE: Enhancing Error Handling in C# BSON Writing Operations\nDESCRIPTION: Several classes are updated to throw exceptions when encountering null characters in names or values. This improves error handling and data integrity in BSON writing operations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.2-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nBsonBuffer.cs\n    WriteCString now throws if value contains nulls\n\nBsonWriter.cs\n    WriteName now throws if name contains nulls\n\nStandardDiscriminatorConvention.cs\n    Constructor now throws if elementName contains nulls\n\nBsonMemberMap.cs\n    SetElementName now throws if elementName contains nulls\n```\n\n----------------------------------------\n\nTITLE: BsonValue WriteTo Method Update\nDESCRIPTION: Modified WriteTo method to cast documentWrapper to IBsonSerializable before calling Serialize method\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Bson.txt#2025-04-16_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Error Case: Creating a Vector Search Index without Type using MongoDB C# Driver TypeScript\nDESCRIPTION: This example shows an attempt to create a vector search index without specifying required `type` and `mappings`. The operation fails, throwing an exception due to the missing attributes, specifically the `mappings` field. This tests error handling capabilities of the driver when configurations are incorrect.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/index-management/tests/README.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'test-search-index-case8-error',\n  definition: {\n    fields: [\n       {\n           type: 'vector',\n           path: 'plot_embedding',\n           numDimensions: 1536,\n           similarity: 'euclidean',\n       },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Fail Point in JavaScript\nDESCRIPTION: In the context of integration tests, this JavaScript snippet provides a command to disable a fail point on a MongoDB endpoint's admin database. It is used after tests to ensure subsequent tests do not fail due to an active fail point.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/tests/cmap-format/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.adminCommand({\n    configureFailPoint: <fail point name>,\n    mode: \"off\"\n});\n```\n\n----------------------------------------\n\nTITLE: Improving Thread Safety in MongoServer (C#)\nDESCRIPTION: The MongoServer class has been updated to improve thread safety. The Ping method now uses the Instances property instead of the _instances field, and the RequestDone and RequestStart methods release the _serverLock before calling other methods.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Driver.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nPing method now uses Instances poperty instead of _instances field for thread safety\nRequestDone method now releases _serverLock before calling other methods\nRequestStart method now releases _serverLock before calling other methods\nVerifyInstances method now enumerates the instances in a way that is safe even if RemoveInstance is called\n```\n\n----------------------------------------\n\nTITLE: Refactoring MongoConnection Methods in C#\nDESCRIPTION: Renamed and modified internal methods in MongoConnection for improved command execution and message handling using standard serialization mechanisms.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.1-Driver.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMongoConnection.cs\n    internal method RunCommand was renamed RunCommandAs<TCommandResult> and now returns a TCommandResult\n    internal method ReceiveMessage has new serializer parameter so it can pass it along to the MongoReplyMessage constructor\n    internal method SendMessage now uses standard serialization mechanisms to deserialize the WriteConcernResult\n```\n\n----------------------------------------\n\nTITLE: Updating GetSerializer in BsonMemberMap for MongoDB C#\nDESCRIPTION: The GetSerializer method in BsonMemberMap.cs now returns a new BsonValueCSharpSerializer if the member type is a BsonValue, improving serialization handling for BsonValue types.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nGetSerializer returns new BsonValueCSharpSerializer if member type is a BsonValue\n```\n\n----------------------------------------\n\nTITLE: Configuring Failpoint Example in Server Discovery Tests\nDESCRIPTION: Example of configuring a server failpoint for testing MongoDB driver behavior, specifically targeting insert commands and closing connections\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: configureFailPoint\n  object: testRunner\n  arguments:\n    failPoint:\n      configureFailPoint: failCommand\n      mode: { times: 1 }\n      data:\n          failCommands: [\"insert\"]\n          closeConnection: true\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in BsonClassMapSerializer for C#\nDESCRIPTION: Modification to BsonClassMapSerializer.cs to handle serialization and deserialization of null values for properties or fields declared as interfaces.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6.1-Bson.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// BsonClassMapSerializer.cs\n// Handle serializing/deserializing null values for properties/fields that are declared as an interface\n```\n\n----------------------------------------\n\nTITLE: Updating Connection Handling in MongoServerInstance (C#)\nDESCRIPTION: The MongoServerInstance class now uses a new connection instead of one from the connection pool for the Ping and VerifyState methods. A new internal Ping helper method has been added.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Driver.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nPing method now uses a new connection instead of one from the connection pool\nVerifyState method now uses a new connection instead of one from the connection pool\nadded new internal Ping helper method\n```\n\n----------------------------------------\n\nTITLE: BSON Writer Implementation Changes in C#\nDESCRIPTION: Updates to BSON writer classes including addition of serialization depth tracking and base method calls for array and document operations. Implements depth checking against MaxSerializationDepth to prevent stack overflows.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.1-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class BsonWriter {\n    private int _serializationDepth;\n    public int SerializationDepth { get; }\n    \n    protected virtual void WriteStartArray() {\n        _serializationDepth++;\n        if (_serializationDepth > MaxSerializationDepth)\n            throw new Exception();\n    }\n    \n    protected virtual void WriteEndArray() {\n        _serializationDepth--;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating QueryBuilder Methods (C#)\nDESCRIPTION: The All, In, and NotIn methods in QueryBuilder now skip null values, similar to functional construction. The Serialize method has also been updated to cast the document to IBsonSerializable.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Driver.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nAll method now skips nulls like functional construction\nIn method now skips nulls like functional construction\nNotIn method now skips nulls like functional construction\nSerialize method now casts document to IBsonSerializable to call Serialize method\n```\n\n----------------------------------------\n\nTITLE: Implementing IConvertible for BsonValue in C#\nDESCRIPTION: Fix to the implementation of IConvertible interface for ObjectId in BsonValue.cs.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6.1-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// BsonValue.cs\n// Fix implementation of IConvertible for ObjectId\n```\n\n----------------------------------------\n\nTITLE: Waiting in Test Runner - YAML\nDESCRIPTION: The 'wait' operation allows the test runner to pause execution for a specified duration in milliseconds. It requires a single argument that defines the wait time in milliseconds.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: wait\n        object: testRunner\n        arguments:\n          ms: 1000\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Collection Operations in C#\nDESCRIPTION: Updates to the MongoCollection class, including changes to method return types, new method overloads, and implementation of IsCapped. These changes enhance collection operations and error handling.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.2.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// MongoCollection.cs\npublic long Count { get; }\npublic void FindAndModify()\npublic void Insert(MongoInsertOptions options)\npublic void InsertBatch(MongoInsertOptions options)\npublic bool IsCapped()\npublic void Save(MongoInsertOptions options)\npublic void InsertBatch<TDefaultDocument>(IEnumerable documents)\npublic void Save<TDefaultDocument>()\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB GridFS Operations in C#\nDESCRIPTION: Updates to GridFS-related classes, including changes to download operations, index creation, and file length handling. These modifications improve GridFS functionality and compatibility.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.2.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// MongoGridFS.cs\npublic void Download(bool slaveOk)\npublic void EnsureIndexes()\n\n// MongoGridFSFileInfo.cs\npublic long Length { get; set; }\n\n// MongoGridFSStream.cs\npublic void OpenCreate(object customFileId)\n```\n\n----------------------------------------\n\nTITLE: Modifying CheckElementName in BsonWriter\nDESCRIPTION: Fixed the handling of empty names in the CheckElementName method of BsonWriter.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nfixed CheckElementName handling of empty name\n```\n\n----------------------------------------\n\nTITLE: BsonDocument Serialization Updates\nDESCRIPTION: Multiple changes to document handling including marking several methods as obsolete and updating Parse, ReadFrom, and WriteTo methods to use IBsonSerializable interface\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Bson.txt#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Updating MongoDB C# Driver Classes\nDESCRIPTION: Various updates to C# classes in the MongoDB driver, including new method overloads, property type changes, and new constructors. These changes improve functionality and type handling across multiple classes.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.2.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// UpdateBuilder.cs\nAddToSetEach(BsonArray parameter)\nCombine()\nPullAll(BsonArray parameter)\nPushAll(BsonArray parameter)\n\n// CollectionStatsResult.cs\npublic bool IsCapped { get; set; }\npublic long MaxDocuments { get; set; }\n\n// GetLastErrorResult.cs\npublic long DocumentsAffectedProperty { get; set; }\n\n// MapReduceResult.cs\npublic long EmitCount { get; set; }\npublic long OutputCount { get; set; }\npublic long InputCount { get; set; }\n\n// Various Document classes\npublic ClassNameDocument(Dictionary<string, object> dictionary)\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionCheckedOutEvent Interface in TypeScript\nDESCRIPTION: Defines the ConnectionCheckedOutEvent interface for when a connection is successfully checked out. It includes the server address, connection ID, and duration of the checkout process.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionCheckedOutEvent {\n  address: string;\n  connectionId: int64;\n  duration: Duration;\n}\n```\n\n----------------------------------------\n\nTITLE: MongoClient URI with directConnection=true\nDESCRIPTION: Specifies a connection string for creating a MongoClient instance, enabling direct connection to the server. This URI forces the client to connect directly to the specified host, bypassing topology discovery.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_11\n\nLANGUAGE: uri\nCODE:\n```\n\"mongodb://HOST/?directConnection=true\"\n```\n\n----------------------------------------\n\nTITLE: Adding Static Instance Property to RawBsonArraySerializer for MongoDB C#\nDESCRIPTION: A static Instance property has been added to RawBsonArraySerializer.cs, providing easier access to the serializer instance for raw BSON arrays.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nadded static Instance property\n```\n\n----------------------------------------\n\nTITLE: Enhancing MongoDB Server Connection Handling in C#\nDESCRIPTION: Improvements to server connection handling, including changes to MongoServer, MongoServerInstance, and MongoConnection classes. These updates focus on thread safety, connection state management, and replica set handling.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.2.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// MongoServer.cs\nprivate int connectionAttempt;\nprivate MongoServerInstance primary;\npublic int SequentialId { get; }\npublic MongoServerInstance RequestConnection { get; }\npublic void Connect(ConnectWaitFor waitFor)\npublic void Disconnect()\npublic void Ping()\npublic void VerifyState()\n\n// MongoServerInstance.cs\npublic int SequentialId { get; }\npublic void Ping()\npublic void VerifyState()\n\n// MongoConnection.cs\npublic enum MongoConnectionState { }\npublic int GenerationId { get; }\npublic int RequestId { get; }\n```\n\n----------------------------------------\n\nTITLE: Running the Function Locally with SAM CLI\nDESCRIPTION: This command is used to invoke the Lambda function locally with specified parameters, particularly the MongoDB connection URI. It allows you to test the function in an environment that simulates the AWS Lambda environment.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/tests/FaasTests/LambdaTests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsam local invoke --parameter-overrides \"MongoDbUri=mongodb://host.docker.internal:27017\"\n```\n\n----------------------------------------\n\nTITLE: Adding GetRegisteredClassMaps Method to BsonClassMap\nDESCRIPTION: Documentation noting the addition of GetRegisteredClassMaps method to BsonClassMap.cs file in the MongoDB C# driver's BSON library upgrade from version 1.6.1 to 1.7.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.7-Bson.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBsonClassMap.cs\n    added GetRegisteredClassMaps method\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionCheckOutStartedEvent Interface in TypeScript\nDESCRIPTION: Defines the ConnectionCheckOutStartedEvent interface for when a connection checkout attempt starts. It includes the server address.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionCheckOutStartedEvent {\n  address: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy BsonNull Serialization Format\nDESCRIPTION: Shows the change in serialized representation of C# null values of type BsonNull, modified to work around server limitations.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.6.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n{ $csharpnull : true }\n```\n\n----------------------------------------\n\nTITLE: Increasing Max Document Size in BsonDefaults\nDESCRIPTION: Changed the default maximum document size from 4MiB to int.MaxValue in BsonDefaults.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nchanged _maxDocumentSize from 4MiB to int.MaxValue\n```\n\n----------------------------------------\n\nTITLE: Updating Index Options in C#\nDESCRIPTION: Addition of SetBits method to IndexOptionsBuilder class for configuring index options.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Driver.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nIndexOptionsBuilder.SetBits\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionCheckOutFailedEvent Interface in TypeScript\nDESCRIPTION: Defines the ConnectionCheckOutFailedEvent interface for when a connection checkout attempt fails. It includes the server address, reason for failure, and duration of the attempt.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionCheckOutFailedEvent {\n  address: string;\n  reason: string|Enum;\n  duration: Duration;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying ObjectId IConvertible Implementation\nDESCRIPTION: Changed the IConvertible.ToType method in ObjectId to handle object type conversion.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nchanged IConvertible.ToType to handle object\n```\n\n----------------------------------------\n\nTITLE: Updating BsonValueSerializer for C# null representation in C#\nDESCRIPTION: BsonNullSerializer now uses _csharpnull instead of $csharpnull to represent a C# null value of type BsonNull.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// BsonValueSerializer.cs\n// BsonNullSerializer now uses _csharpnull instead of $csharpnull for a C# null value of type BsonNull\n```\n\n----------------------------------------\n\nTITLE: BsonSerializer Deserialize Method Update\nDESCRIPTION: Modified Deserialize method to cast document to IBsonSerializable before calling Deserialize method\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Bson.txt#2025-04-16_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Introducing BsonValueCSharpValueSerializer for MongoDB C#\nDESCRIPTION: A new serializer, BsonValueCSharpValueSerializer.cs, has been added to handle the encoding of C# null values for BsonValues, improving null value handling in the BSON library.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nnew serializer to handle encoding of C# null values for BsonValues\n```\n\n----------------------------------------\n\nTITLE: Modifying BsonClassMapSerializer accessibility in C#\nDESCRIPTION: BsonClassMapSerializer class is now public, allowing client serializers to delegate to it if needed.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6-Bson.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// BsonClassMapSerializer.cs\n// class is now public again (so client serializers can delegate to it if they want)\n```\n\n----------------------------------------\n\nTITLE: Previous Nested Document Access in C#\nDESCRIPTION: Shows the old, more verbose method of accessing nested properties in BsonDocument and BsonArray objects, requiring explicit type casting.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.8.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar zip = person[\"Addresses\"].AsBsonArray[0].AsBsonDocument[\"Zip\"].AsString;\n```\n\n----------------------------------------\n\nTITLE: Marking Methods as Obsolete in BaseWrapper (C#)\nDESCRIPTION: Several methods in the BaseWrapper class have been marked as obsolete, including Deserialize, GetDocumentId, Serialize, and SetDocumentId.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Driver.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDeserialize method marked obsolete\nGetDocumentId method marked obsolete\nSerialize method marked obsolete\nSetDocumentId method marked obsolete\n```\n\n----------------------------------------\n\nTITLE: Adding Static Instance Property to RawBsonDocumentSerializer for MongoDB C#\nDESCRIPTION: A static Instance property has been added to RawBsonDocumentSerializer.cs, providing easier access to the serializer instance for raw BSON documents.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.1-Bson.txt#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nadded static Instance property\n```\n\n----------------------------------------\n\nTITLE: Validating a Single Test File with Ajv CLI\nDESCRIPTION: This snippet demonstrates how to validate a single JSON or YAML test file using Ajv CLI. It requires Ajv to be installed on your system, and the schema file should be available in the specified path. The command checks the test file against the schema and outputs validation results.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/unified-test-format/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\najv -s ../schema-1.0.json -d path/to/test.yml\n```\n\n----------------------------------------\n\nTITLE: Refactoring BsonDefaultSerializationProvider - C#\nDESCRIPTION: The BsonDefaultSerializationProvider has been refactored to change the serializers dictionary, which now maps value types to serializer types instead of instances. This adjustment improves efficiency during serializer instantiation and ensures proper serialization of subclasses of BsonDocument and IBsonSerializable.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8-Bson.txt#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nserializers Dictionary now maps value types to serializer types (not serializer instances)\nGetSerializer changed to instantiate new serializers using the resulting type from the dictionary lookup\nGetSerializer now returns BsonDocumentSerializer for all subclasses of BsonDocument (if not explicitly mapped otherwise)\nGetSerializer now returns BsonIBsonSerializableSerializer for all implementers of IBsonSerializable (if not explicitly mapped otherwise)\n```\n\n----------------------------------------\n\nTITLE: Referencing MongoDB $meta Projection Operators in Markdown\nDESCRIPTION: This snippet demonstrates how to reference MongoDB's $meta projection operators in Markdown format. It includes a link to the MongoDB documentation and lists the newly supported operators.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.11.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[``$meta``](https://www.mongodb.com/docs/manual/reference/operator/projection/meta/)\n```\n\n----------------------------------------\n\nTITLE: Refactoring LazyBsonArray and LazyBsonDocument\nDESCRIPTION: Changed base classes and added materialization methods to LazyBsonArray and LazyBsonDocument.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nchanged base class to MaterializedOnDemandBsonArray\nremoved methods now implemented by base class\nadded Materialize\nadded MaterializeCompleted\nadded MaterializeThisLevel (was DeserializeThisLevel)\n```\n\n----------------------------------------\n\nTITLE: Error Response: \"Not master and slaveOk=false\"\nDESCRIPTION: Describes the expected server response when attempting to read from a server thought to be a primary in a replica set, but which is no longer the primary, and the slaveOk bit is not set. The expected response includes the \"not master and slaveOk=false\" error.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"{$err: \\\"not master and slaveOk=false\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Count Error Response without slaveOk: \"not master\"\nDESCRIPTION: Describes the command response on an arbiter, recovering member, ghost, or secondary when slaveOk is false. The expected error is \"not master\".\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ok: 0, errmsg: \\\"not master\\\"}\n```\n\n----------------------------------------\n\nTITLE: BsonArray Null Value Handling Changes\nDESCRIPTION: Modified Contains method behavior to return false for null values instead of throwing ArgumentNullException\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Bson.txt#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining ConnectionCheckedInEvent Interface in TypeScript\nDESCRIPTION: Defines the ConnectionCheckedInEvent interface for when a connection is checked back into the pool. It includes the server address and connection ID.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionCheckedInEvent {\n  address: string;\n  connectionId: int64;\n}\n```\n\n----------------------------------------\n\nTITLE: BsonValueSerializers Implementation Changes\nDESCRIPTION: Updated multiple serializer methods to use IBsonSerializable interface casting for document operations\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Bson.txt#2025-04-16_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Converting YAML files to JSON with jsonwidget-python in a loop\nDESCRIPTION: This bash script iterates through all YAML files in the current directory and its subdirectories, converting each file to JSON using `jwc yaml2json`. It extracts the filename without the extension and creates a JSON file with the same name.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-selection/tests/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"for i in `find . -iname '*.yml'`; do\n        echo \"${i%.*}\"\n        jwc yaml2json $i > ${i%.*}.json\n    done\"\n```\n\n----------------------------------------\n\nTITLE: Adding IsReadOnly to RawBsonArray\nDESCRIPTION: Added the IsReadOnly property to the RawBsonArray class.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.9.0-Bson.txt#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nadded IsReadOnly\n```\n\n----------------------------------------\n\nTITLE: GLE Error Response: \"replicatedToNum called but not master anymore\"\nDESCRIPTION: Describes a possible getLastErrors (GLE) response during failover in MongoDB 2.6. The expected error is \"replicatedToNum called but not master anymore\".  This error occurs when replicatedToNum is called but the server is no longer the master.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ok: 1, err: \\\"replicatedToNum called but not master anymore\\\"}\n```\n\n----------------------------------------\n\nTITLE: BsonDocumentWrapper Interface Changes\nDESCRIPTION: Marked several core document handling methods as obsolete including Deserialize, GetDocumentId, Serialize, and SetDocumentId\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Bson.txt#2025-04-16_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Registering SocketPermission for Medium Trust in C#\nDESCRIPTION: This snippet shows how to add SocketPermission to a custom medium trust policy file to enable the MongoDB driver to run in a medium trust environment.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.5.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<SecurityClass Name=\"SocketPermission\" Description=\"System.Net.SocketPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<IPermission class=\"SocketPermission\" version=\"1\" Unrestricted=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing IConvertible for ObjectId in C#\nDESCRIPTION: Update to ObjectId.cs to implement the IConvertible interface.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.6.1-Bson.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// ObjectId.cs\n// Now implements IConvertible\n```\n\n----------------------------------------\n\nTITLE: Converting YAML files to JSON with jsonwidget-python and make\nDESCRIPTION: This command uses the `make` utility to convert YAML files to JSON. It depends on a Makefile that invokes `jwc yaml2json` for each YAML file, creating a corresponding JSON file.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-selection/tests/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"make\"\n```\n\n----------------------------------------\n\nTITLE: MongoClient URI without directConnection parameter\nDESCRIPTION: Specifies a default connection string for creating a MongoClient instance, relying on the driver's existing behavior for topology discovery and connection. The directConnection parameter is not explicitly set.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_12\n\nLANGUAGE: uri\nCODE:\n```\n\"mongodb://HOST/\"\n```\n\n----------------------------------------\n\nTITLE: Batch Validating Test Files with Ajv CLI\nDESCRIPTION: This snippet shows how to use Ajv CLI to validate multiple test files simultaneously from specified directories. The commands ensure that invalid files are correctly identified when using the `--invalid` flag and valid files are verified when using the `--valid` flag.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/unified-test-format/tests/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\najv test -s ../schema-1.0.json -d \"invalid/*.yml\" --invalid\n```\n\nLANGUAGE: shell\nCODE:\n```\najv test -s ../schema-1.0.json -d \"valid-*/*.yml\" --valid\n```\n\n----------------------------------------\n\nTITLE: Unified Test Format Documentation Reference\nDESCRIPTION: Reference to unified test format documentation for collection management test implementation\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/collection-management/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nUnified Test Format <../../unified-test-format/unified-test-format.rst>\n```\n\n----------------------------------------\n\nTITLE: Query Error Response with slaveOk: \"not master or secondary\"\nDESCRIPTION: Describes the response from an arbiter, recovering member, or ghost when slaveOk is true. The expected error is \"not master or secondary; cannot currently read from this replSet member\".\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{$err: \\\"not master or secondary; cannot currently read from this replSet member\\\"}\n```\n\n----------------------------------------\n\nTITLE: Feature Documentation List in Markdown\nDESCRIPTION: Markdown formatted list of new features and changes introduced in MongoDB .NET Driver version 2.13.0, including load balancing, API versioning, and various improvements to existing functionality.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v2.13.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Load-balanced mode for Atlas Serverless\n* Versioned MongoDB API for Drivers\n* Implemented change stream oplog parsing code for delta oplog entries\n* Snapshot reads on secondaries\n* Support for creating time-series collections\n* Permit dots and dollars in field names\n* Improved error messages from document validation\n* Better ExpandoObject support\n* `estimatedDocumentCount()` now uses the `$collStats` aggregation stage instead of the `count` command\n* Reduced lock contention in BsonSerializer.LookupActualType\n* `slaveOk` connection string option removed; use `readPreference` instead\n```\n\n----------------------------------------\n\nTITLE: Verifying Packages with dotnet NuGet\nDESCRIPTION: This snippet shows how to verify the signature of a NuGet package using the dotnet CLI. It requires the package name and the certificate fingerprint as inputs. This operation confirms the package has been signed with the specified NuGet sign certificate.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/evergreen/template_ssdlc_compliance_report.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet nuget verify MongoDB.Driver.${PACKAGE_VERSION}.nupkg --certificate-fingerprint ${NUGET_SIGN_CERTIFICATE_FINGERPRINT}\n```\n\n----------------------------------------\n\nTITLE: Count Error Response with slaveOk: \"node is recovering\"\nDESCRIPTION: Describes the command response on an arbiter, recovering member, or ghost when slaveOk is true. The expected error is \"node is recovering\".\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{ok: 0, errmsg: \\\"node is recovering\\\"}\n```\n\n----------------------------------------\n\nTITLE: GLE Error Response: \"not master\"\nDESCRIPTION: Describes a possible getLastErrors (GLE) response from an arbiter, secondary, slave, recovering member, or ghost server.  The expected error is \"not master\". This is usually returned after an OP_INSERT operation.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ok: 1, err: \\\"not master\\\"}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Array Serialization in C# MongoDB Driver\nDESCRIPTION: Two and three-dimensional array serializers are individually optimized with techniques similar to those in the new EnumerableSerializerBase class, improving performance for these specific array types.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.2-Bson.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nThreeDimensionalArraySerializer.cs\nTwoDimensionalArraySerializer.cs\n    These classes have been optimized individually with optimizations similar to those in the new EnumerableSerializerBase class\n```\n\n----------------------------------------\n\nTITLE: Write Concern Error Response: \"Replication is being shut down\"\nDESCRIPTION: Describes the expected server response to a write operation when replication is being shut down.  The expected response includes the \"Replication is being shut down\" error within the writeConcernError field.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ ok: 1, writeConcernError: {code: 91, errmsg: \\\"Replication is being shut down\\\"} }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Commit Message Format in Git\nDESCRIPTION: Shows the correct format for a commit message, which should start with the JIRA issue number. This helps link commits to specific issues in the project management system.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[see here](https://github.com/mongodb/mongo-csharp-driver/commit/40e69fe1cf45b0ed9d68a551b0222a140fa26ba2)\n```\n\n----------------------------------------\n\nTITLE: Modifying MongoServerState.cs\nDESCRIPTION: Removed the Unknown enum value from the MongoServerState enumeration.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.8.3-Driver.txt#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// Remove Unknown enum value\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Connection with Deprecated MongoServer (C#)\nDESCRIPTION: This code snippet demonstrates the deprecated way of initializing a MongoDB connection using MongoServer.Create(). This method defaults the WriteConcern to Unacknowledged.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.7.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar connectionString = \"mongodb://localhost\";\nvar server = MongoServer.Create(connectionString); // deprecated\nvar database = server.GetDatabase(\"test\"); // WriteConcern defaulted to Unacknowledged\n```\n\n----------------------------------------\n\nTITLE: Query Error Response without slaveOk: \"not master and slaveOk=false\"\nDESCRIPTION: Describes the response from an arbiter, recovering member, ghost, or secondary when slaveOk is false. The expected error is \"not master and slaveOk=false\".\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{$err: \\\"not master and slaveOk=false\\\"}\n```\n\n----------------------------------------\n\nTITLE: Installing PyYAML, urwid and jsonwidget with pip\nDESCRIPTION: This command installs the PyYAML, urwid, and jsonwidget-python packages using pip. These packages are required for converting YAML files to JSON format.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-selection/tests/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"pip install PyYAML urwid jsonwidget\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Connection Pool Options in TypeScript\nDESCRIPTION: Identifies deprecated connection pool configuration options that should be removed from driver implementations\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/connection-monitoring-and-pooling/connection-monitoring-and-pooling.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionPoolOptions {\n  waitQueueSize?: number;\n  waitQueueMultiple?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Results\nDESCRIPTION: This python script compares the results of different benchmark runs. It expects json files formatted for evergreen, meaning benchmarks need to be run with the `--evergreen` option. It helps with identifying performance changes between different runs.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/benchmarks/MongoDB.Driver.Benchmarks/README.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"/scripts/compare-results\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Event Count in Test Runner - YAML\nDESCRIPTION: The 'assertEventCount' operation asserts that the test runner has published a specified event a defined number of times. It requires an 'event' and a 'count' argument.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: assertEventCount\n        object: testRunner\n        arguments:\n          event: PoolClearedEvent\n          count: 1\n```\n\n----------------------------------------\n\nTITLE: Write Command Error Response: \"not master\"\nDESCRIPTION: Describes the response to an \"insert\" command on an arbiter, secondary, slave, recovering member, or ghost server. The expected error is \"not master\".\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ok: 0, errmsg: \\\"not master\\\"}\n```\n\n----------------------------------------\n\nTITLE: Running Admin Command in Test Runner - YAML\nDESCRIPTION: The 'runAdminCommand' operation allows the test runner to execute a command on the admin database. It requires 'command_name' for the command's identifier and 'arguments' which include the command itself along with a read preference.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: runAdminCommand\n        object: testRunner\n        command_name: replSetFreeze\n        arguments:\n          command:\n            replSetFreeze: 0\n          readPreference:\n            mode: Secondary\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoClient with Direct Connection (Python Example)\nDESCRIPTION: This code snippet shows how to create a `MongoClient` instance in Python using the PyMongo driver, configuring it for a direct connection and setting a small heartbeat frequency. The `directConnection=True` option forces a direct connection to the specified server, and `heartbeatFrequencyMS=10` sets the heartbeat interval to 10 milliseconds, which enables faster detection of changes in the server's state.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/sessions/tests/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"c1 = MongoClient(directConnection=True, heartbeatFrequencyMS=10)\"\n```\n\n----------------------------------------\n\nTITLE: Error Response: \"Node is recovering\"\nDESCRIPTION: Describes the expected server response when attempting to read from a server thought to be a secondary in a replica set, but which is recovering. The slaveOk bit is set. The expected response includes the \"not master or secondary; cannot currently read from this replSet member\" error.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/server-discovery-and-monitoring-tests.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"{$err: \\\"not master or secondary; cannot currently read from this replSet member\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Primary Change in Test Runner - YAML\nDESCRIPTION: The 'waitForPrimaryChange' operation makes the test runner wait for a new primary server to be discovered, with a set timeout. It requires 'timeoutMS' as an argument to specify the maximum wait time.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: waitForPrimaryChange\n        object: testRunner\n        arguments:\n          timeoutMS: 15000\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Query Builder in C#\nDESCRIPTION: This code snippet demonstrates how to use the deprecated query builder by adding a using statement alias to maintain compatibility with older code.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Release Notes v1.5.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Query = MongoDB.Driver.Builders.DeprecatedQuery;\n```\n\n----------------------------------------\n\nTITLE: Starting a Thread in Test Runner - YAML\nDESCRIPTION: The 'startThread' operation begins a new thread with a specified name. It requires an argument 'name' that uniquely identifies the thread.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: startThread\n        object: testRunner\n        arguments:\n          name: thread1\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Thread in Test Runner - YAML\nDESCRIPTION: The 'waitForThread' operation instructs the test runner to wait for a specified thread to complete execution without errors. It requires a 'name' argument identifying the thread to be monitored.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/server-discovery-and-monitoring/tests/README.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: waitForThread\n        object: testRunner\n        arguments:\n          name: thread1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Time in MongoDB (Python Example)\nDESCRIPTION: This snippet retrieves the cluster time from a MongoDB server using the PyMongo driver. It executes a ping command and extracts the '$clusterTime' field from the response, storing it in the `clusterTime` variable. This is used as part of a test to ensure cluster time is not improperly advanced.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/sessions/tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"clusterTime = c1.admin.command({\\\"ping\\\": 1})[\\\"$clusterTime\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Snapshot History Window\nDESCRIPTION: This Python snippet demonstrates how to configure a server's snapshot history window to prevent SnapshotTooOld errors during testing by issuing a command to the server. The `client` connects to the server and adjusts the `minSnapshotHistoryWindowInSeconds` parameter. Dependencies include a MongoDB client library for Python.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/specifications/sessions/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient.admin.command('setParameter', 1, minSnapshotHistoryWindowInSeconds=600)\n```\n\n----------------------------------------\n\nTITLE: Modifying MongoConnection Class (C#)\nDESCRIPTION: The MongoConnection class has been updated with a new constructor for connections that are not part of the connection pool. The HandleException method now checks if _connectionPool is null.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/Release Notes/Change Log v1.4.2-Driver.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nadded new constructor for connections that are not part of the connection pool\nchanged HandleException to check for _connectionPool == null\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options\nDESCRIPTION: This command displays all the available options that can be passed to the benchmark runner. It is helpful for discovering and understanding the available configuration settings.\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/benchmarks/MongoDB.Driver.Benchmarks/README.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\"dotnet run -c Release -- --help\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Search Namespace Declaration\nDESCRIPTION: Defines the MongoDB.Driver.Search namespace, which contains classes for implementing Atlas Search functionality in C#\nSOURCE: https://github.com/mongodb/mongo-csharp-driver/blob/main/apidocs/namespaces/MongoDB.Driver/MongoDB.Driver.Search.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuid: MongoDB.Driver.Search\nsummary: *content\n```"
  }
]