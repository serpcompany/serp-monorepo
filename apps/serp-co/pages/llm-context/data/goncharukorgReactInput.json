[
  {
    "owner": "goncharukorg",
    "repo": "react-input",
    "content": "TITLE: Integrating InputMask with Custom Component in React TypeScript\nDESCRIPTION: Demonstrates how to use the InputMask component with a custom input component using React's forwardRef. This allows for easy integration of custom styled components with the masking functionality.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { forwardRef } from 'react';\n\nimport { InputMask } from '@react-input/mask';\n\ninterface CustomInputProps {\n  label: string;\n}\n\n// Custom input component\nconst CustomInput = forwardRef<HTMLInputElement, CustomInputProps>(({ label }, forwardedRef) => {\n  return (\n    <>\n      <label htmlFor=\"custom-input\">{label}</label>\n      <input ref={forwardedRef} id=\"custom-input\" />\n    </>\n  );\n});\n\n// Component with InputMask\nexport default function App() {\n  return <InputMask component={CustomInput} mask=\"___-___\" replacement=\"_\" label=\"Label for custom component\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNumberFormat Hook in React\nDESCRIPTION: Example demonstrating the useNumberFormat hook implementation with English locale and two decimal places.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNumberFormat } from '@react-input/number-format';\n\nexport default function App() {\n  const inputRef = useNumberFormat({\n    locales: 'en',\n    maximumFractionDigits: 2,\n  });\n\n  return <input ref={inputRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMask Hook with Material UI TextField in React TypeScript\nDESCRIPTION: Demonstrates an alternative approach to integrating masking functionality with Material UI using the useMask hook. This method is more concise and doesn't require creating a separate component.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMask } from '@react-input/mask';\nimport { TextField } from '@mui/material';\n\nexport default function App() {\n  const inputRef = useMask({ mask: '___-___', replacement: '_' });\n\n  return <TextField inputRef={inputRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating InputNumberFormat with Custom Components\nDESCRIPTION: Example showing how to use InputNumberFormat with custom components using React's forwardRef to properly pass the ref to child elements.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { forwardRef } from 'react';\n\nimport { InputNumberFormat } from '@react-input/number-format';\n\ninterface CustomInputProps {\n  label: string;\n}\n\n// Custom input component\nconst CustomInput = forwardRef<HTMLInputElement, CustomInputProps>(({ label }, forwardedRef) => {\n  return (\n    <>\n      <label htmlFor=\"custom-input\">{label}</label>\n      <input ref={forwardedRef} id=\"custom-input\" />\n    </>\n  );\n});\n\n// Component with InputNumberFormat\nexport default function App() {\n  return <InputNumberFormat component={CustomInput} label=\"Label for custom component\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Masked Input with Formatted Value in React\nDESCRIPTION: This example demonstrates how to initialize a masked input with a pre-formatted value using the format utility. It applies a phone number mask and formats a plain number string to match the mask pattern.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMask, format } from '@react-input/mask';\n\nconst options = {\n  mask: '+0 (___) ___-__-__',\n  replacement: { _: /\\d/ },\n};\n\nexport default function App() {\n  const inputRef = useMask(options);\n  const defaultValue = format('1234567890', options);\n\n  return <input ref={inputRef} defaultValue={defaultValue} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMask hook in React\nDESCRIPTION: Example of using the useMask hook to create a masked input for a phone number in a React application.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useMask } from '@react-input/mask';\n\nexport default function App() {\n  const inputRef = useMask({\n    mask: '+0 (___) ___-__-__',\n    replacement: { _: /\\d/ },\n  });\n\n  return <input ref={inputRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Tracking for Phone Number with Country Code\nDESCRIPTION: This example demonstrates the track function to modify input behavior. It automatically inserts a country code when entering a phone number and prevents deletion of essential characters, providing a consistent formatting experience.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputMask, type Track } from '@react-input/mask';\n\nexport default function App() {\n  const track: Track = ({ inputType, value, data, selectionStart, selectionEnd }) => {\n    if (inputType === 'insert' && !/^\\D*1/.test(data) && selectionStart <= 1) {\n      return `1${data}`;\n    }\n\n    if (inputType !== 'insert' && selectionStart <= 1 && selectionEnd < value.length) {\n      if (selectionEnd > 2) {\n        return '1';\n      }\n      if (selectionEnd === 2) {\n        return false;\n      }\n    }\n\n    return data;\n  };\n\n  return <InputMask mask=\"+_ (___)-___-__-__\" replacement={{ _: /\\d/ }} track={track} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic InputNumberFormat Component Usage in React\nDESCRIPTION: Simple example showing how to use the InputNumberFormat component with English locale and two decimal places.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputNumberFormat } from '@react-input/number-format';\n\nexport default function App() {\n  return <InputNumberFormat locales=\"en\" maximumFractionDigits={2} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using InputMask component in React\nDESCRIPTION: Example of using the InputMask component to create a masked input for a phone number in a React application.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { InputMask } from '@react-input/mask';\n\nexport default function App() {\n  return <InputMask mask=\"+0 (___) ___-__-__\" replacement={{ _: /\\d/ }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating InputNumberFormat with Material UI using forwardRef\nDESCRIPTION: Example of how to create a forwarded ref component that integrates InputNumberFormat with Material UI TextField component. This approach uses forwardRef to pass the input reference to Material UI's inputComponent property.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { forwardRef } from 'react';\n\nimport { InputNumberFormat, type InputNumberFormatProps } from '@react-input/number-format';\nimport { TextField } from '@mui/material';\n\n// Component with InputNumberFormat\nconst ForwardedInputNumberFormat = forwardRef<HTMLInputElement, InputNumberFormatProps>((props, forwardedRef) => {\n  return <InputNumberFormat ref={forwardedRef} locales=\"en\" maximumFractionDigits={2} {...props} />;\n});\n\n// Component with Material UI\nexport default function App() {\n  return (\n    <TextField\n      InputProps={{\n        inputComponent: ForwardedInputNumberFormat,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNumberFormat hook with Material UI\nDESCRIPTION: Example of integrating the useNumberFormat hook with Material UI TextField. This approach uses the hook to create a reference that handles number formatting and passes it directly to TextField's inputRef property.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNumberFormat } from '@react-input/number-format';\nimport { TextField } from '@mui/material';\n\nexport default function App() {\n  const inputRef = useNumberFormat({ locales: 'en', maximumFractionDigits: 2 });\n\n  return <TextField inputRef={inputRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating InputMask with Material UI TextField in React TypeScript\nDESCRIPTION: Shows how to use the InputMask component with Material UI's TextField component. This approach uses forwardRef to properly pass the ref to the InputMask component within the Material UI structure.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { forwardRef } from 'react';\n\nimport { InputMask, type InputMaskProps } from '@react-input/mask';\nimport { TextField } from '@mui/material';\n\n// Component with InputMask\nconst ForwardedInputMask = forwardRef<HTMLInputElement, InputMaskProps>((props, forwardedRef) => {\n  return <InputMask ref={forwardedRef} mask=\"___-___\" replacement=\"_\" {...props} />;\n});\n\n// Component with Material UI\nexport default function App() {\n  return (\n    <TextField\n      InputProps={{\n        inputComponent: ForwardedInputMask,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic InputNumberFormat Usage with onChange Event\nDESCRIPTION: Simple example showing InputNumberFormat with onChange handler to log formatted values.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputNumberFormat } from '@react-input/number-format';\n\nexport default function App() {\n  // Entering 3500 will print '3,500' to the console if in US English locale\n  return <InputNumberFormat onChange={(event) => console.log(event.target.value)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Localized Number Formatting Examples\nDESCRIPTION: Comprehensive examples of InputNumberFormat with various locales and formatting options, including currency and unit formatting.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputNumberFormat } from '@react-input/number-format';\n\n// Entering 123456.789 will print:\n\nexport default function App() {\n  return (\n    <>\n      {/* India uses thousands/lakh/crore separators */}\n      <InputNumberFormat\n        locales=\"en-IN\"\n        onChange={(event) => console.log(event.target.value)} // \"1,23,456.789\"\n      />\n      {/* When requesting a language that may not be supported, such as Balinese, include a fallback language, in this case Indonesian */}\n      <InputNumberFormat\n        locales={['ban', 'id']}\n        onChange={(event) => console.log(event.target.value)} // \"123.456,789\"\n      />\n      {/* He nu extension key requests a numbering system, e.g. Chinese decimal */}\n      <InputNumberFormat\n        locales=\"zh-Hans-CN-u-nu-hanidec\"\n        onChange={(event) => console.log(event.target.value)} // \"一二三,四五六.七八九\"\n      />\n      {/* Arabic in most Arabic speaking countries uses real Arabic digits */}\n      <InputNumberFormat\n        locales=\"ar-EG\"\n        onChange={(event) => console.log(event.target.value)} // \"١٢٣٤٥٦٫٧٨٩\"\n      />\n      {/* German uses comma as decimal separator and period for thousands */}\n      <InputNumberFormat\n        locales=\"de-DE\"\n        format=\"currency\"\n        currency=\"EUR\"\n        onChange={(event) => console.log(event.target.value)} // \"123.456,78 €\"\n      />\n      {/* Formatting with units */}\n      <InputNumberFormat\n        locales=\"pt-PT\"\n        format=\"unit\"\n        unit=\"kilometer-per-hour\"\n        onChange={(event) => console.log(event.target.value)} // \"123 456,789 km/h\"\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Replacement Characters in InputMask Component\nDESCRIPTION: This snippet shows how to configure custom replacement characters in the mask pattern. It defines a date input with different replacement characters for day, month, and year components, all matching digits.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputMask } from '@react-input/mask';\n\nexport default function App() {\n  return <InputMask mask=\"dd.mm.yyyy\" replacement={{ d: /\\d/, m: /\\d/, y: /\\d/ }} showMask separate />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the generatePattern Utility with Different Match Options\nDESCRIPTION: Shows how to use the generatePattern utility to create regular expressions for matching masked values. Demonstrates four different matching strategies: full, full-inexact, partial, and partial-inexact.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = {\n  mask: '###',\n  replacement: { '#': /\\D/ },\n};\n\nconst pattern$1 = generatePattern('full', options);\nRegExp(pattern$1).test('ab#'); // false\nRegExp(pattern$1).test('abc'); // true\n\nconst pattern$2 = generatePattern('full-inexact', options);\nRegExp(pattern$2).test('ab#'); // true\nRegExp(pattern$2).test('abc'); // true\n\nconst pattern$3 = generatePattern('partial', options);\nRegExp(pattern$3).test('a#'); // false\nRegExp(pattern$3).test('ab'); // true\n\nconst pattern$4 = generatePattern('partial-inexact', options);\nRegExp(pattern$4).test('a#'); // true\nRegExp(pattern$4).test('ab'); // true\n```\n\n----------------------------------------\n\nTITLE: Using the format Utility with TypeScript\nDESCRIPTION: Demonstrates how to use the format utility to apply a mask to an unmasked value. This utility returns a masked value that corresponds to what would be displayed in an input field.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nformat('1', { mask: '+__', replacement: { _: /\\d/ } });\n// returns: \"+1\"\n```\n\n----------------------------------------\n\nTITLE: Using the unformat Utility with TypeScript\nDESCRIPTION: Shows how to use the unformat utility to extract the user-input portion of a masked value. This utility returns all characters entered by the user that match the replacement characters.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nunformat('+1_', { mask: '+__', replacement: { _: /\\d/ } });\n// returns: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Using the formatToParts Utility with TypeScript\nDESCRIPTION: Demonstrates how to use the formatToParts utility to get detailed information about each character in a masked value. This utility returns an array of objects with information about character type and position.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nformatToParts('1', { mask: '+__', replacement: { _: /\\d/ } });\n// returns: [\n//   { index: 0, value: '+', type: 'mask' },\n//   { index: 1, value: '1', type: 'input' },\n//   { index: 2, value: '_', type: 'replacement' },\n// ]\n```\n\n----------------------------------------\n\nTITLE: Using the unformat Utility Function\nDESCRIPTION: Example of using the standalone unformat utility function to convert a formatted string back to its numeric representation. This function requires specifying the locale to correctly interpret decimal separators and other formatting characters.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nunformat('$1,23,456.78', 'en-IN');\n// returns: \"123456.78\"\n```\n\n----------------------------------------\n\nTITLE: Using the format Utility Function\nDESCRIPTION: Example of using the standalone format utility function to format a number according to specified locale and formatting options. This is useful for applying formatting outside of input events.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nformat(123456.78, { locales: 'en-IN', format: 'currency', currency: 'USD' });\n// returns: \"$1,23,456.78\"\n```\n\n----------------------------------------\n\nTITLE: Migration from v1 onMask to v2 onChange with Utilities\nDESCRIPTION: Demonstrates how to migrate from the deprecated onMask event in v1 to using onChange with utilities in v2. Shows how to access the same information like value, input, parts, pattern, and validation status.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputMask } from '@react-input/mask';\n\n// ...\n\nconst options = {\n  mask: '___-___',\n  replacement: { _: /\\d/ },\n};\n\nreturn (\n  <InputMask\n    {...options}\n    onMask={(event) => {\n      const { value, input, parts, pattern, isValid } = event.detail;\n    }}\n  />\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputMask, unformat, formatToParts, generatePattern } from '@react-input/mask';\n\n// ...\n\nconst options = {\n  mask: '___-___',\n  replacement: { _: /\\d/ },\n};\n\nreturn (\n  <InputMask\n    {...options}\n    onChange={(event) => {\n      const value = event.target.value;\n      const input = unformat(value, options);\n      const parts = formatToParts(value, options);\n      const pattern = generatePattern('full-inexact', options);\n      const isValid = RegExp(pattern).test(value);\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Migration from v1 to v2: Replacing onNumberFormat with onChange\nDESCRIPTION: Example showing migration from v1 to v2 of the library by replacing the deprecated onNumberFormat event handler with the standard onChange handler and utility functions. This approach aligns better with React's event handling system.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputNumberFormat, unformat } from '@react-input/number-format';\n\n// ...\n\nconst locales = 'en';\n\nreturn (\n  <InputNumberFormat\n    locales={locales}\n    onChange={(event) => {\n      const value = event.target.value;\n      const number = Number(unformat(value, locales));\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Using InputNumberFormat with Custom Component in TypeScript\nDESCRIPTION: Example showing how InputNumberFormat can be used with a custom component in TypeScript. When using the component property, it automatically inherits props from the custom component along with number formatting options.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputNumberFormat, type InputNumberFormatProps, type NumberFormatOptions } from '@react-input/number-format';\n\nimport { CustomInput, type CustomInputProps } from './CustomInput';\n\nexport default function App() {\n  // Here, since the `component` property was passed,\n  // `InputNumberFormat` returns the CustomInput component and takes the type:\n  // `NumberFormatOptions & { locales?: Intl.LocalesArgument } & CustomInputProps` (the same as `InputNumberFormatProps<typeof CustomInput>`)\n  return <InputNumberFormat component={CustomInput} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using InputNumberFormat with Default Input Element in TypeScript\nDESCRIPTION: Example showing InputNumberFormat usage with TypeScript when used as a standard input element. In this case, it inherits HTML input attributes combined with number formatting options.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputNumberFormat, type InputNumberFormatProps, type NumberFormatOptions } from '@react-input/number-format';\n\nexport default function App() {\n  // Here, since no `component` property was passed,\n  // `InputNumberFormat` returns an `input` element and takes the type:\n  // `NumberFormatOptions & { locales?: Intl.LocalesArgument } & React.InputHTMLAttributes<HTMLInputElement>` (the same as `InputNumberFormatProps`)\n  return <InputNumberFormat />;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage with InputMask Component in React\nDESCRIPTION: Illustrates how to use TypeScript with the InputMask component, showcasing type support for both default input element usage and custom component integration.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputMask, type InputMaskProps, type MaskOptions } from '@react-input/mask';\n\nexport default function App() {\n  // Here, since no `component` property was passed,\n  // `InputMask` returns an `input` element and takes the type:\n  // `MaskOptions & React.InputHTMLAttributes<HTMLInputElement>` (the same as `InputMaskProps`)\n  return <InputMask mask=\"___-___\" replacement=\"_\" />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputMask, type InputMaskProps, type MaskOptions } from '@react-input/mask';\n\nimport { CustomInput, type CustomInputProps } from './CustomInput';\n\nexport default function App() {\n  // Here, since the `component` property was passed,\n  // `InputMask` returns the `CustomInput` component and takes the type:\n  // `MaskOptions & CustomInputProps` (the same as `InputMaskProps<typeof CustomInput>`)\n  return <InputMask component={CustomInput} mask=\"___-___\" replacement=\"_\" />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputMask } from '@react-input/mask';\n\nimport { CustomInput } from './CustomInput';\n\nexport default function Component(props: any) {\n  return <InputMask<typeof CustomInput> component={CustomInput} mask=\"___-___\" replacement=\"_\" {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for InputNumberFormat with Rest Parameters\nDESCRIPTION: Example showing how to correctly type InputNumberFormat when passing rest parameters. This approach explicitly tells TypeScript about the component type to ensure proper property typing.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputNumberFormat } from '@react-input/number-format';\n\nimport { CustomInput } from './CustomInput';\n\nexport default function Component(props: any) {\n  return <InputNumberFormat<typeof CustomInput> component={CustomInput} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Controlled Input with Formatted Value\nDESCRIPTION: Example showing how to initialize a controlled input with a formatted value using the format utility to ensure consistency.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { useNumberFormat, format } from '@react-input/number-format';\n\nconst options = {\n  locales: 'en',\n  maximumFractionDigits: 2,\n};\n\nexport default function App() {\n  const inputRef = useNumberFormat(options);\n  const defaultValue = format(123456789, options);\n\n  const [value, setValue] = useState(defaultValue); // `defaultValue` or '123,456,789'\n\n  return <input ref={inputRef} value={value} onChange={(event) => setValue(event.target.value)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: CDN Usage with ReactInput.NumberFormat Class\nDESCRIPTION: Example of using the library via CDN, applying number formatting to multiple elements using the register and unregister methods.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst numberFormat = new ReactInput.NumberFormat({\n  locales: 'en',\n  maximumFractionDigits: 2,\n});\n\nconst elements = document.getElementsByName('amount');\n\nelements.forEach((element) => {\n  numberFormat.register(element);\n});\n\n// If necessary, you can turn off formatting while typing.\n// elements.forEach((element) => {\n//   numberFormat.unregister(element);\n// });\n```\n\n----------------------------------------\n\nTITLE: Using @react-input/mask with CDN in JavaScript\nDESCRIPTION: Example of using the @react-input/mask library loaded via CDN to apply masking to input elements in vanilla JavaScript.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mask = new ReactInput.Mask({\n  mask: '+0 (___) ___-__-__',\n  replacement: { _: /\\d/ },\n});\n\nconst elements = document.getElementsByName('phone');\n\nelements.forEach((element) => {\n  mask.register(element);\n});\n\n// If necessary, you can disable masking as you type.\n// elements.forEach((element) => {\n//   mask.unregister(element);\n// });\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mask Instance with CDN\nDESCRIPTION: Shows how to create an instance of the Mask class and use its unformat method when working with CDN. This demonstrates accessing utilities through a class instance rather than direct imports.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mask = new ReactInput.Mask({\n  mask: '+__',\n  replacement: { _: /\\d/ },\n});\n\nmask.unformat('+1_'); // returns: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Using NumberFormat Class with CDN\nDESCRIPTION: Example of using the NumberFormat class instance with its utility methods when loading the library via CDN. This approach allows accessing the formatting utilities from the class instance directly.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst numberFormat = new ReactInput.NumberFormat({\n  locales: 'en-IN',\n  format: 'currency',\n  currency: 'USD',\n});\n\nnumberFormat.unformat('$1,23,456.78'); // returns: \"123456.78\"\n```\n\n----------------------------------------\n\nTITLE: Installing @react-input/mask package using yarn\nDESCRIPTION: Command to install the @react-input/mask package using yarn package manager.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add @react-input/mask\n```\n\n----------------------------------------\n\nTITLE: Installing @react-input/mask package using npm\nDESCRIPTION: Command to install the @react-input/mask package using npm package manager.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm i @react-input/mask\n```\n\n----------------------------------------\n\nTITLE: Installing @react-input/number-format with yarn\nDESCRIPTION: Command to install the @react-input/number-format package using yarn. This is an alternative installation method for projects using yarn as their package manager.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-input/number-format\n```\n\n----------------------------------------\n\nTITLE: Installing @react-input/number-format with npm\nDESCRIPTION: Command to install the @react-input/number-format package using npm. This is the preferred method for projects using npm as their package manager.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @react-input/number-format\n```\n\n----------------------------------------\n\nTITLE: Including @react-input/mask via CDN\nDESCRIPTION: HTML script tag to include the @react-input/mask package via CDN for browser usage.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/mask/README.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@react-input/mask/cdn\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including @react-input/number-format via CDN\nDESCRIPTION: HTML script tag to include the @react-input/number-format library via CDN. This method is suitable for projects that don't use a module bundler or package manager.\nSOURCE: https://github.com/goncharukorg/react-input/blob/main/packages/number-format/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@react-input/number-format/cdn\"></script>\n```"
  }
]