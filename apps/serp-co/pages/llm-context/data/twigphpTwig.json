[
  {
    "owner": "twigphp",
    "repo": "twig",
    "content": "TITLE: Basic Twig Usage with ArrayLoader\nDESCRIPTION: Demonstrates basic Twig API usage with ArrayLoader to render a simple template. Shows template creation, variable passing, and rendering.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/intro.rst#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once '/path/to/vendor/autoload.php';\n\n$loader = new \\Twig\\Loader\\ArrayLoader([\n    'index' => 'Hello {{ name }}!',\n]);\n$twig = new \\Twig\\Environment($loader);\n\necho $twig->render('index', ['name' => 'Fabien']);\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Template with Blocks in Twig\nDESCRIPTION: Shows how to create a base 'skeleton' template with blocks that can be overridden by child templates. This example defines an HTML structure with blocks for head, title, content, and footer.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_8\n\nLANGUAGE: html+twig\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <link rel=\"stylesheet\" href=\"style.css\"/>\n            <title>{% block title %}{% endblock %} - My Webpage</title>\n        {% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">{% block content %}{% endblock %}</div>\n        <div id=\"footer\">\n            {% block footer %}\n                &copy; Copyright 2011 by <a href=\"https://example.com/\">you</a>.\n            {% endblock %}\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Twig\nDESCRIPTION: Demonstrates how to set variables in Twig using the set tag. Shows examples of setting string, array, and map variables.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set name = 'Fabien' %}\n{% set numbers = [1, 2] %}\n{% set map = {'city': 'Paris'} %}\n```\n\n----------------------------------------\n\nTITLE: Initializing Twig Environment with Filesystem Loader in PHP\nDESCRIPTION: Creates a Twig environment with a filesystem loader, specifying the template directory and cache location. This is the typical setup for configuring Twig in an application.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once '/path/to/vendor/autoload.php';\n\n$loader = new \\Twig\\Loader\\FilesystemLoader('/path/to/templates');\n$twig = new \\Twig\\Environment($loader, [\n    'cache' => '/path/to/compilation_cache',\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template Structure in HTML\nDESCRIPTION: Demonstrates the basic structure of a Twig template, including variable output, loops, and HTML markup. Shows the usage of Twig delimiters {% %} for logic and {{ }} for output.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Webpage</title>\n    </head>\n    <body>\n        <ul id=\"navigation\">\n        {% for item in navigation %}\n            <li><a href=\"{{ item.href }}\">{{ item.caption }}</a></li>\n        {% endfor %}\n        </ul>\n\n        <h1>My Webpage</h1>\n        {{ a_variable }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Global Variables to Twig Environment\nDESCRIPTION: PHP code example showing how to add a global variable to a Twig environment that can be accessed in all templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->addGlobal('text', new Text());\n```\n\n----------------------------------------\n\nTITLE: Using the parent() Function in Twig\nDESCRIPTION: Shows how to use the parent() function to render the contents of the parent block within a child template's block.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_10\n\nLANGUAGE: html+twig\nCODE:\n```\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Escaping in Twig Templates\nDESCRIPTION: Demonstrates basic usage of the escape filter to escape HTML content. This is the default escaping strategy used to prevent XSS attacks when outputting user data.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n<p>\n    {{ user.username|escape }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Extending a Base Template in Twig\nDESCRIPTION: Demonstrates how to extend a base template and override specific blocks. This child template extends 'base.html.twig' and provides content for the title, head, and content blocks.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_9\n\nLANGUAGE: html+twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    <style type=\"text/css\">\n        .important { color: #336699; }\n    </style>\n{% endblock %}\n{% block content %}\n    <h1>Index</h1>\n    <p class=\"important\">\n        Welcome to my awesome homepage.\n    </p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Twig Usage with FilesystemLoader\nDESCRIPTION: Shows how to use Twig with FilesystemLoader to load templates from filesystem, including cache configuration and template rendering.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/intro.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$loader = new \\Twig\\Loader\\FilesystemLoader('/path/to/templates');\n$twig = new \\Twig\\Environment($loader, [\n    'cache' => '/path/to/compilation_cache',\n]);\n\necho $twig->render('index.html.twig', ['name' => 'Fabien']);\n```\n\n----------------------------------------\n\nTITLE: Using PHP Attributes to Define Twig Extensions\nDESCRIPTION: Demonstrates how to use PHP attributes to define filters, functions, and tests in a Twig extension. This approach simplifies the extension definition process.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nuse Twig\\Attribute\\AsTwigFilter;\nuse Twig\\Attribute\\AsTwigFunction;\nuse Twig\\Attribute\\AsTwigTest;\n\nclass ProjectExtension\n{\n    #[AsTwigFilter('rot13')]\n    public static function rot13(string $string): string\n    {\n        // ...\n    }\n\n    #[AsTwigFunction('lipsum')]\n    public static function lipsum(int $count): string\n    {\n        // ...\n    }\n\n    #[AsTwigTest('even')]\n    public static function isEven(int $number): bool\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Control Structures in Twig\nDESCRIPTION: Shows examples of control structures in Twig, including for loops and if statements. Demonstrates how to iterate over arrays and check conditions.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n<h1>Members</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if users|length > 0 %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username|e }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Base Template Structure in Twig\nDESCRIPTION: Defines a basic HTML skeleton document with blocks that can be overridden by child templates. Includes blocks for head, title, content and footer sections.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <link rel=\"stylesheet\" href=\"style.css\"/>\n            <title>{% block title %}{% endblock %} - My Webpage</title>\n        {% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">{% block content %}{% endblock %}</div>\n        <div id=\"footer\">\n            {% block footer %}\n                &copy; Copyright 2011 by <a href=\"https://example.com/\">you</a>.\n            {% endblock %}\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering Twig Templates in PHP\nDESCRIPTION: Demonstrates how to load a template from the Twig environment and render it with variables. Also shows direct rendering through the environment and rendering individual blocks.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$template = $twig->load('index.html.twig');\n\necho $template->render(['the' => 'variables', 'go' => 'here']);\n\necho $twig->render('index.html.twig', ['the' => 'variables', 'go' => 'here']);\n\necho $template->renderBlock('block_name', ['the' => 'variables', 'go' => 'here']);\n```\n\n----------------------------------------\n\nTITLE: Conditional Template Inheritance\nDESCRIPTION: Demonstrates conditional inheritance based on variable evaluation.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% extends standalone ? \"minimum.html.twig\" : \"base.html.twig\" %}\n```\n\n----------------------------------------\n\nTITLE: Basic If Statement in Twig\nDESCRIPTION: Demonstrates a simple if statement in Twig to check if a boolean expression is false. This example shows how to display a maintenance message when the 'online' variable is false.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/if.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if online == false %}\n    <p>Our website is in maintenance mode. Please, come back later.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Naming Conventions in Twig Templates\nDESCRIPTION: Shows proper naming conventions for variables, functions, filters, and arguments in Twig. Use snake case for all variable names, function/filter/test names, and argument names.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set name = 'Fabien' %}\n{% set first_name = 'Fabien' %}\n\n{{ 'Fabien Potencier'|to_lower_case }}\n{{ generate_random_number() }}\n\n{% macro html_input(class_name) %}\n\n{{ html_input(class_name: 'pwd') }}\n```\n\n----------------------------------------\n\nTITLE: Twig Arrow Functions\nDESCRIPTION: Demonstrates the use of arrow functions for mapping and filtering operations\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n{{ people|map(p => p.first_name)|join(', ') }}\n\n{% set first_name_fn = (p) => p.first_name %}\n\n{{ people|map(first_name_fn)|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filesystem Loader with Multiple Paths in PHP\nDESCRIPTION: Shows how to create a filesystem loader with multiple template directories, and how to add or prepend paths. Also demonstrates using namespaced templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$loader = new \\Twig\\Loader\\FilesystemLoader([$templateDir1, $templateDir2]);\n\n$loader->addPath($templateDir3);\n$loader->prependPath($templateDir4);\n\n$loader->addPath($templateDir, 'admin');\n\n$twig->render('@admin/index.html.twig', []);\n```\n\n----------------------------------------\n\nTITLE: Registering a Twig Extension in PHP\nDESCRIPTION: Demonstrates how to register a custom Twig extension with the Twig Environment using the addExtension() method.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->addExtension(new CustomTwigExtension());\n```\n\n----------------------------------------\n\nTITLE: Using trim Filter in Twig\nDESCRIPTION: Demonstrates various ways to use the trim filter in Twig templates. It shows how to trim whitespace from both ends, trim specific characters, and trim from left or right side only.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/trim.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ '  I like Twig.  '|trim }}\n\n{# outputs 'I like Twig.' #}\n\n{{ '  I like Twig.'|trim('.') }}\n\n{# outputs '  I like Twig' #}\n\n{{ '  I like Twig.  '|trim(side: 'left') }}\n\n{# outputs 'I like Twig.  ' #}\n\n{{ '  I like Twig.  '|trim(' ', 'right') }}\n\n{# outputs '  I like Twig.' #}\n```\n\n----------------------------------------\n\nTITLE: Using parent() Function in Twig Block Override\nDESCRIPTION: Demonstrates how to extend a base template and override a block while preserving the parent block's content using the parent() function. The example shows a sidebar block that adds a heading while maintaining the original sidebar content.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/parent.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Loop Variables in Twig\nDESCRIPTION: Demonstrates how to access special loop variables inside a Twig for loop, such as index and first/last iteration flags.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in users %}\n    {{ loop.index }} - {{ user.username }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Applying Filters in Twig\nDESCRIPTION: Shows how to apply filters to variables and expressions in Twig. Demonstrates chaining filters and using filters with arguments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ name|striptags|title }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ list|join(', ') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% apply upper %}\n    This text becomes uppercase\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Twig Operator Usage\nDESCRIPTION: This snippet showcases the usage of various Twig operators mentioned in the table. It includes examples of the spread operator, filter calls, function calls, attribute access, array access, and other arithmetic and logical operations.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/operators_precedence.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ ...array }}\n{{ variable | filter }}\n{{ function() }}\n{{ object.attribute }}\n{{ array[index] }}\n{{ -number }}\n{{ +number }}\n{{ a ?? b }}\n{{ x => x * 2 }}\n{{ 2 ** 3 }}\n{{ value is defined }}\n{{ value is not null }}\n{{ 10 * 5 }}\n{{ 20 / 4 }}\n{{ 7 // 2 }}\n{{ 10 % 3 }}\n{{ not condition }}\n{{ 'Hello ' ~ 'World' }}\n{{ 5 + 3 }}\n{{ 10 - 4 }}\n{{ 1..5 }}\n{{ a == b }}\n{{ a != b }}\n{{ a <=> b }}\n{{ a < b }}\n{{ a > b }}\n{{ a >= b }}\n{{ a <= b }}\n{{ a not in array }}\n{{ a in array }}\n{{ string matches '/pattern/' }}\n{{ string starts with 'prefix' }}\n{{ string ends with 'suffix' }}\n{{ array has some element }}\n{{ array has every required_element }}\n{{ a b-and b }}\n{{ a b-xor b }}\n{{ a b-or b }}\n```\n\n----------------------------------------\n\nTITLE: Validating Twig Template Syntax\nDESCRIPTION: Demonstrates how to validate Twig template syntax before saving or processing. Includes error handling for syntax validation of single templates and multiple files.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ntry {\n    $twig->parse($twig->tokenize(new \\Twig\\Source($template)));\n    // the $template is valid\n} catch (\\Twig\\Error\\SyntaxError $e) {\n    // $template contains one or more syntax errors\n}\n```\n\n----------------------------------------\n\nTITLE: Twig String Pattern Matching\nDESCRIPTION: Examples of string pattern matching using 'starts with', 'ends with', and regular expressions\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n{% if 'Fabien' starts with 'F' %}\n{% endif %}\n\n{% if 'Fabien' ends with 'n' %}\n{% endif %}\n\n{% if phone matches '/^[\\\\d\\\\.]+$/' %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Verbatim Tag Usage in Twig\nDESCRIPTION: Shows how to wrap Twig syntax in verbatim tags to display it as raw text without parsing. The example demonstrates a common loop pattern that would normally be processed by Twig, but is instead displayed literally.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/verbatim.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% verbatim %}\n    <ul>\n    {% for item in seq %}\n        <li>{{ item }}</li>\n    {% endfor %}\n    </ul>\n{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Input Macros in Twig\nDESCRIPTION: Defines reusable macros for rendering HTML form inputs and textareas with configurable parameters. Shows how to create macros with default parameter values.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/macro.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% macro input(name, value, type = \"text\", size = 20) %}\n    <input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size }}\"/>\n{% endmacro %}\n\n{% macro textarea(name, value, rows = 10, cols = 40) %}\n    <textarea name=\"{{ name }}\" rows=\"{{ rows }}\" cols=\"{{ cols }}\">{{ value|e }}</textarea>\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig via Composer\nDESCRIPTION: Command to install Twig version 3.x using Composer package manager.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/intro.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"twig/twig:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Iterability in Twig\nDESCRIPTION: Shows how to use the 'is iterable' test to conditionally handle both iterable and non-iterable variables. The code includes a loop for iterable variables and fallback behavior for non-iterable values like strings.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/iterable.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# evaluates to true if the users variable is iterable #}\n{% if users is iterable %}\n    {% for user in users %}\n        Hello {{ user }}!\n    {% endfor %}\n{% else %}\n    {# users is probably a string #}\n    Hello {{ users }}!\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Functional Tests for Twig Extensions\nDESCRIPTION: Demonstrates how to create functional tests for Twig extensions by implementing an IntegrationTestCase class. The example shows the test structure and file organization required for comprehensive testing.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nnamespace Project\\Tests;\n\nuse Twig\\Test\\IntegrationTestCase;\n\nclass IntegrationTest extends IntegrationTestCase\n{\n    public function getExtensions()\n    {\n        return [\n            new CustomTwigExtension1(),\n            new CustomTwigExtension2(),\n        ];\n    }\n\n    public function getFixturesDir()\n    {\n        return __DIR__.'/Fixtures/';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Variable Assignment in Twig\nDESCRIPTION: Shows how to assign values to multiple variables in a single set statement.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/set.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set first, last = 'Fabien', 'Potencier' %}\n\n{# is equivalent to #}\n\n{% set first = 'Fabien' %}\n{% set last = 'Potencier' %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Escaping Strategy in Twig Templates\nDESCRIPTION: Demonstrates how to use the escape filter with an explicit HTML strategy parameter. This example shows both the shorthand and full syntax for HTML escaping.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ user.username|e }}\n{# is equivalent to #}\n{{ user.username|e('html') }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Keys and Values in Twig\nDESCRIPTION: Shows how to access both keys and values while iterating over a sequence in Twig.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n<h1>Members</h1>\n<ul>\n    {% for key, user in users %}\n        <li>{{ key }}: {{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Child Template Implementation\nDESCRIPTION: Shows how to extend a base template and override specific blocks. Demonstrates usage of parent() function to inherit base content while adding new content.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    <style type=\"text/css\">\n        .important { color: #336699; }\n    </style>\n{% endblock %}\n{% block content %}\n    <h1>Index</h1>\n    <p class=\"important\">\n        Welcome on my awesome homepage.\n    </p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Twig Test Operator Usage\nDESCRIPTION: Demonstrates the use of 'is' operator for testing variables against expressions\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{# find out if a variable is odd #}\n\n{{ name is odd }}\n\n{% if post.status is constant('Post::PUBLISHED') %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Safe Classes\nDESCRIPTION: Example of marking classes and interfaces as safe for specific escaping strategies\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$escaper->addSafeClass('HtmlGenerator', ['html']);\n$escaper->addSafeClass('HtmlGeneratorInterface', ['html']);\n$escaper->addSafeClass('HtmlGenerator', ['html', 'js']);\n$escaper->addSafeClass('HtmlGenerator', ['all']);\n```\n\n----------------------------------------\n\nTITLE: Applying url_encode Filter to Strings and Mappings in Twig\nDESCRIPTION: This snippet demonstrates the usage of the url_encode filter in Twig for encoding URL segments and query strings. It shows examples of encoding a path segment with special characters, a string with spaces, and a mapping as a query string.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/url_encode.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"path-seg*ment\"|url_encode }}\n{# outputs \"path-seg%2Ament\" #}\n\n{{ \"string with spaces\"|url_encode }}\n{# outputs \"string%20with%20spaces\" #}\n\n{{ {'name': 'Fabien', 'city': 'Paris'}|url_encode }}\n{# outputs \"name=Fabien&city=Paris\" #}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blocks Multiple Times in Twig Templates\nDESCRIPTION: Demonstrates how to define a block and then render it multiple times within a template using the 'block' function. This is useful when working with template inheritance.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/block.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n<title>{% block title %}{% endblock %}</title>\n\n<h1>{{ block('title') }}</h1>\n\n{% block body %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Literal Expressions in Twig\nDESCRIPTION: Shows examples of various literal expressions in Twig, including strings, numbers, sequences, and mappings.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{# keys as string #}\n{'name': 'Fabien', 'city': 'Paris'}\n\n{# keys as names (equivalent to the previous mapping) #}\n{name: 'Fabien', city: 'Paris'}\n\n{# keys as integer #}\n{2: 'Twig', 4: 'Symfony'}\n\n{# keys can be omitted if it is the same as the variable name #}\n{Paris}\n{# is equivalent to the following #}\n{'Paris': Paris}\n\n{# keys as expressions (the expression must be enclosed into parentheses) #}\n{% set key = 'name' %}\n{(key): 'Fabien', (1 + 1): 2, ('ci' ~ 'ty'): 'city'}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set complex = [1, {\"name\": \"Fabien\"}] %}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Include in Twig\nDESCRIPTION: Simple example of including header and footer templates in a Twig file.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% include 'header.html.twig' %}\n    Body\n{% include 'footer.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Keys in Twig\nDESCRIPTION: Demonstrates how to iterate over the keys of a sequence using the 'keys' filter in Twig.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n<h1>Members</h1>\n<ul>\n    {% for key in users|keys %}\n        <li>{{ key }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Escaping in Twig Templates\nDESCRIPTION: Shows how to escape a string for JavaScript context using both the escape filter and its shorthand. This is useful when outputting data within JavaScript code.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ user.username|escape('js') }}\n{{ user.username|e('js') }}\n```\n\n----------------------------------------\n\nTITLE: Using Elseif and Else in Twig If Statement\nDESCRIPTION: Demonstrates the use of 'elseif' and 'else' for multiple branches in a Twig if statement. This example checks the stock level of a product and displays appropriate messages.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/if.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if product.stock > 10 %}\n   Available\n{% elseif product.stock > 0 %}\n   Only {{ product.stock }} left!\n{% else %}\n   Sold-out!\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Twig Iterable Operators\nDESCRIPTION: Demonstrates the use of 'has every' and 'has some' operators to check conditions across iterables using arrow functions\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{% set sizes = [34, 36, 38, 40, 42] %}\n\n{% set hasOnlyOver38 = sizes has every v => v > 38 %}\n{# hasOnlyOver38 is false #}\n\n{% set hasOver38 = sizes has some v => v > 38 %}\n{# hasOver38 is true #}\n```\n\n----------------------------------------\n\nTITLE: Including Templates in Twig\nDESCRIPTION: Demonstrates how to include the contents of one template within another using the include function. The included template has access to the same context as the including template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('sidebar.html.twig') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for box in boxes %}\n    {{ include('render_box.html.twig') }}\n{% endfor %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('sections/articles/sidebar.html.twig') }}\n```\n\n----------------------------------------\n\nTITLE: Including Templates with Additional Variables in Twig\nDESCRIPTION: Shows how to pass additional variables to the included template, which will have access to both the current context and the new variables.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/include.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# template.html.twig will have access to the variables from the current context and the additional ones provided #}\n{{ include('template.html.twig', {name: 'Fabien'}) }}\n```\n\n----------------------------------------\n\nTITLE: Using Functions in Twig\nDESCRIPTION: Demonstrates how to use functions in Twig templates. Shows an example of the range function used in a for loop.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in range(0, 3) %}\n    {{ i }},\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Twig Extension with Runtime Reference\nDESCRIPTION: Shows how to define a Twig extension that references a runtime class for its implementation. This approach allows for better dependency management by separating extension registration from execution.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nclass CustomTwigExtension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getFunctions()\n    {\n        return [\n            new \\Twig\\TwigFunction('rot13', ['CustomTwigRuntime', 'rot13']),\n            // or\n            new \\Twig\\TwigFunction('rot13', 'CustomTwigRuntime::rot13'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverse Filter with Key Preservation in Twig\nDESCRIPTION: Shows how to use the reverse filter with mappings and demonstrates the difference between preserving and not preserving keys using the preserve_keys argument.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/reverse.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% for key, value in {1: \"a\", 2: \"b\", 3: \"c\"}|reverse %}\n    {{ key }}: {{ value }}\n{%- endfor %}\n\n{# output: 0: c    1: b    2: a #}\n\n{% for key, value in {1: \"a\", 2: \"b\", 3: \"c\"}|reverse(true) %}\n    {{ key }}: {{ value }}\n{%- endfor %}\n\n{# output: 3: c    2: b    1: a #}\n```\n\n----------------------------------------\n\nTITLE: Include with Restricted Context\nDESCRIPTION: Demonstrates using the 'only' keyword to restrict variable access in included templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# only the name variable will be accessible #}\n{% include 'template.html.twig' with {'name': 'Fabien'} only %}\n\n{# no variables will be accessible #}\n{% include 'template.html.twig' only %}\n```\n\n----------------------------------------\n\nTITLE: Checking for Non-Empty Sequence in Twig\nDESCRIPTION: Shows how to use an if statement to check if a sequence (users) is not empty, and then iterate over it to display a list of usernames.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/if.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if users %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username|e }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Testing for Sequence Type in Twig Templates\nDESCRIPTION: Shows how to check if a variable is a sequence before performing iteration. The example creates an array of users and demonstrates conditional rendering based on the sequence test, followed by iteration over the sequence elements.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/sequence.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set users = [\"Alice\", \"Bob\"] %}\n{# evaluates to true if the users variable is a sequence #}\n{% if users is sequence %}\n    {% for user in users %}\n        Hello {{ user }}!\n    {% endfor %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Importing Twig Macros\nDESCRIPTION: Demonstrates how to import macros from external template files using the import tag and assign them to a local variable.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/macro.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% import \"forms.html.twig\" as forms %}\n```\n\n----------------------------------------\n\nTITLE: Using the attribute Function in Twig\nDESCRIPTION: Demonstrates various ways to use the attribute function to dynamically access object methods, properties, or array elements. Examples include using a variable to store the method name, passing arguments to method calls, using expressions to generate attribute names, and working with arrays.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/attribute.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# method_name is a variable that stores the method to call #}\n{{ attribute(object, method_name) }}\n\n{# you can also pass arguments when calling a method #}\n{{ attribute(object, method_name, arguments) }}\n\n{# the method/property name can be the result of evaluating an expression #}\n{{ attribute(object, 'some_property_' ~ user.type) }}\n\n{# in addition to objects, this function works with plain arrays as well #}\n{{ attribute(array, item_name) }}\n```\n\n----------------------------------------\n\nTITLE: Adding Functions to Twig Extension in PHP\nDESCRIPTION: Demonstrates how to add custom functions to a Twig extension by implementing the getFunctions() method and returning an array of TwigFunction objects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nclass CustomTwigExtension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getFunctions()\n    {\n        return [\n            new \\Twig\\TwigFunction('lipsum', 'generate_lipsum'),\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Sequence in Twig\nDESCRIPTION: Demonstrates how to loop over a sequence of items (users) in a Twig template. It displays a list of usernames.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n<h1>Members</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Else Clause in Twig For Loop\nDESCRIPTION: Shows how to use the 'else' clause in a Twig for loop to handle cases when the sequence is empty.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        <li>{{ user.username|e }}</li>\n    {% else %}\n        <li><em>no user found</em></li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Global and Class Constants in Twig\nDESCRIPTION: Shows how to access global PHP constants and class constants using the constant filter. Uses DATE_W3C as an example and demonstrates namespace resolution.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/constant.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ some_date|date(constant('DATE_W3C')) }}\n{{ constant('Namespace\\\\Classname::CONSTANT_NAME') }}\n```\n\n----------------------------------------\n\nTITLE: Applying map Filter to an Array of Objects in Twig\nDESCRIPTION: This example demonstrates using the map filter with an arrow function to transform an array of objects. Each object contains first and last name properties, and the arrow function combines them into a string. The result is then joined with commas.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/map.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set people = [\n    {first: \"Bob\", last: \"Smith\"},\n    {first: \"Alice\", last: \"Dupond\"},\n] %}\n\n{{ people|map(p => \"#{p.first} #{p.last}\")|join(', ') }}\n{# outputs Bob Smith, Alice Dupond #}\n```\n\n----------------------------------------\n\nTITLE: Using Range Operator in Twig For Loop\nDESCRIPTION: Shows how to use the '..' operator to iterate over a range of numbers or letters in Twig.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in 0..10 %}\n    * {{ i }}\n{% endfor %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'..'z' %}\n    * {{ letter }}\n{% endfor %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'|upper..'z'|upper %}\n    * {{ letter }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using min Function with Numeric Values in Twig\nDESCRIPTION: This snippet demonstrates how to use the min function with both inline values and an array of numbers in Twig. It returns the lowest value from the given set.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/min.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ min(1, 3, 2) }}\n{{ min([1, 3, 2]) }}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Reuse with Use Statement\nDESCRIPTION: Demonstrates how to import blocks from another template using the use statement while maintaining inheritance.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/use.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% use \"blocks.html.twig\" %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Adding Filters to Twig Extension in PHP\nDESCRIPTION: Shows how to add custom filters to a Twig extension by implementing the getFilters() method and returning an array of TwigFilter objects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nclass CustomTwigExtension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getFilters()\n    {\n        return [\n            new \\Twig\\TwigFilter('rot13', 'str_rot13'),\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Twig Filters with Different Callables\nDESCRIPTION: PHP code examples showing various ways to create Twig filters using different types of PHP callables.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// an anonymous function\n$filter = new \\Twig\\TwigFilter('rot13', function ($string) {\n    return str_rot13($string);\n});\n\n// or a simple PHP function\n$filter = new \\Twig\\TwigFilter('rot13', 'str_rot13');\n\n// or a class static method\n$filter = new \\Twig\\TwigFilter('rot13', ['SomeClass', 'rot13Filter']);\n$filter = new \\Twig\\TwigFilter('rot13', 'SomeClass::rot13Filter');\n\n// or a class method\n$filter = new \\Twig\\TwigFilter('rot13', [$this, 'rot13Filter']);\n// the one below needs a runtime implementation (see below for more information)\n$filter = new \\Twig\\TwigFilter('rot13', ['SomeClass', 'rot13Filter']);\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Delimiter Spacing\nDESCRIPTION: Demonstrates the correct spacing within Twig delimiters. Put exactly one space after the start of a delimiter and before the end of a delimiter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ user }}\n{# comment #}\n{% if user %}{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Imported Twig Macros\nDESCRIPTION: Shows different ways to call imported macros including positional and named arguments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/macro.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<p>{{ forms.input('username') }}</p>\n<p>{{ forms.input('password', null, 'password') }}</p>\n{# You can also use named arguments #}\n<p>{{ forms.input(name: 'password', type: 'password') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Autoescaping in Twig\nDESCRIPTION: Demonstrates basic usage of autoescape tags to enable automatic HTML escaping for a block of template content.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/autoescape.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% autoescape %}\n    Everything will be automatically escaped in this block\n    using the HTML strategy\n{% endautoescape %}\n\n{% autoescape 'html' %}\n    Everything will be automatically escaped in this block\n    using the HTML strategy\n{% endautoescape %}\n\n{% autoescape 'js' %}\n    Everything will be automatically escaped in this block\n    using the js escaping strategy\n{% endautoescape %}\n\n{% autoescape false %}\n    Everything will be outputted as is in this block\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Using the Shorthand Escape Filter in Twig Templates\nDESCRIPTION: Shows the usage of the 'e' filter, which is a shorter alias for the escape filter. It performs the same HTML escaping as the escape filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n<p>\n    {{ user.username|e }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Raw Filter Usage with Autoescaping\nDESCRIPTION: Shows how to use the raw filter to mark values as safe when automatic escaping is enabled.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/autoescape.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% autoescape %}\n    {{ safe_value|raw }}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Named Macro End-Tags in Twig\nDESCRIPTION: Shows how to use named end tags for macros to improve template readability.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/macro.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input() %}\n    ...\n{% endmacro input %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Twig Extension in PHP\nDESCRIPTION: Example of creating a custom Twig extension by extending the AbstractExtension class. This provides a starting point for adding custom functionality.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nclass CustomTwigExtension extends \\Twig\\Extension\\AbstractExtension\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Double-Escaping with Raw Filter in Twig Templates\nDESCRIPTION: Shows the recommended approach to avoid double-escaping when using a variable as the escaping strategy by combining the escape filter with the raw filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set strategy = 'html' %}\n\n{% autoescape 'html' %}\n    {{ var|escape(strategy)|raw }} {# won't be double-escaped #}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Boolean Handling with Default Filter vs Null Coalescing in Twig\nDESCRIPTION: Illustrates the difference between using the 'default' filter and the null coalescing operator ('??') with boolean values, where 'default' treats false as empty.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/default.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set value = false %}\n{{ value|default(true) }} {# true #}\n{{ value ?? true }} {# false #}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Sequence and Mapping Keys in Twig\nDESCRIPTION: Demonstrates how to use the keys filter to extract numeric indices from an array and string keys from an associative array (mapping). The first example shows iteration over sequence indices (0-3), while the second shows iteration over mapping keys (a, b).\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/keys.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for key in ['a', 'b', 'c', 'd']|keys %}\n    {{ key }}\n{% endfor %}\n{# outputs: 0 1 2 3 #}\n\n{% for key in {a: 'a_value', b: 'b_value'}|keys %}\n    {{ key }}\n{% endfor %}\n{# outputs: a b #}\n```\n\n----------------------------------------\n\nTITLE: Whitespace Control Modifiers in Twig\nDESCRIPTION: Demonstrates various whitespace control modifiers (-,~) in Twig templates to control leading and trailing whitespace, including their effect on newlines.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_25\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set value = 'no spaces' %}\n{#- No leading/trailing whitespace -#}\n{%- if true -%}\n    {{- value -}}\n{%- endif -%}\n{# output 'no spaces' #}\n\n<li>\n    {{ value }}    </li>\n{# outputs '<li>\\n    no spaces    </li>' #}\n\n<li>\n    {{- value }}    </li>\n{# outputs '<li>no spaces    </li>' #}\n\n<li>\n    {{~ value }}    </li>\n{# outputs '<li>\\nno spaces    </li>' #}\n```\n\n----------------------------------------\n\nTITLE: Checking for Attribute Existence in Twig\nDESCRIPTION: Shows how to check for the existence of a dynamically-named attribute using the defined test with the attribute function. This pattern is useful for conditional logic based on whether a method or property exists.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/attribute.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ attribute(object, method) is defined ? 'Method exists' : 'Method does not exist' }}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Template Inheritance\nDESCRIPTION: Shows how to use variables and template lists for dynamic inheritance.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% extends some_var %}\n\n{% extends ['layout.html.twig', 'base_layout.html.twig'] %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Layout Selection in Twig\nDESCRIPTION: This Twig snippet demonstrates how to conditionally select a layout template based on whether the request is an Ajax request or not. It uses a ternary operator in the extends tag.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% extends request.ajax ? \"base_ajax.html.twig\" : \"base.html.twig\" %}\n\n{% block content %}\n    This is the content to be displayed.\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Subset in Twig\nDESCRIPTION: Demonstrates how to iterate over a subset of values using the 'slice' filter in Twig.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_6\n\nLANGUAGE: html+twig\nCODE:\n```\n<h1>Top Ten Members</h1>\n<ul>\n    {% for user in users|slice(0, 10) %}\n        <li>{{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Testing for Odd Numbers with Twig\nDESCRIPTION: Demonstrates how to use the 'is odd' test operator to check if a variable contains an odd number. Returns true if the number is odd, false otherwise.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/odd.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ var is odd }}\n```\n\n----------------------------------------\n\nTITLE: Named Arguments in Twig\nDESCRIPTION: Illustrates the use of named arguments in Twig for functions, filters, and other constructs. Shows examples with both positional and named arguments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in range(low: 1, high: 10, step: 2) %}\n    {{ i }},\n{% endfor %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ data|convert_encoding(from: 'iso-2022-jp', to: 'UTF-8') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"now\"|date(null, \"Europe/Paris\") }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"now\"|date(timezone: \"Europe/Paris\") }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"now\"|date('d/m/Y H:i', timezone: \"Europe/Paris\") }}\n```\n\n----------------------------------------\n\nTITLE: Using Import Tag in Twig Templates\nDESCRIPTION: The import tag is used to import macro definitions into a local variable scope. It works in conjunction with the macro tag to enable reuse of template fragments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/import.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nimport\n```\n\n----------------------------------------\n\nTITLE: Using Find Filter with Mappings in Twig\nDESCRIPTION: Example of using the find filter with a mapping (associative array) to return the first value greater than 38. The filter applies the arrow function to each value and returns the first match.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/find.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set sizes = {\n    xxs: 32,\n    xs:  34,\n    s:   36,\n    m:   38,\n    l:   40,\n    xl:  42,\n} %}\n\n{{ sizes|find(v => v > 38) }}\n\n{# output 40 #}\n```\n\n----------------------------------------\n\nTITLE: Basic Sorting with Twig Sort Filter\nDESCRIPTION: Demonstrates the basic usage of the 'sort' filter in Twig to sort a sequence of users. The filter is applied directly to the 'users' variable in a for loop.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/sort.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in users|sort %}\n    ...\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Advanced Embed Tag Usage with Parameters in Twig\nDESCRIPTION: Illustrates how to use the embed tag with additional parameters such as 'with' for passing variables, 'only' for restricting context, and 'ignore missing' for handling missing templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/embed.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% embed \"base\" with {'name': 'Fabien'} %}\n    ...\n{% endembed %}\n\n{% embed \"base\" with {'name': 'Fabien'} only %}\n    ...\n{% endembed %}\n\n{% embed \"base\" ignore missing %}\n    ...\n{% endembed %}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date with the date Filter in Twig\nDESCRIPTION: Uses the date filter to format a published date using the m/d/Y format. This applies PHP's date formatting pattern to display month/day/year.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.published_at|date(\"m/d/Y\") }}\n```\n\n----------------------------------------\n\nTITLE: Extracting Column Values from Array using Twig Column Filter\nDESCRIPTION: This snippet demonstrates how to use the 'column' filter in Twig to extract values from a specific column in an array of associative arrays. It creates an array of items with a 'fruit' key and then extracts all 'fruit' values into a new array.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/column.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set items = [{ 'fruit' : 'apple'}, {'fruit' : 'orange' }] %}\n\n{% set fruits = items|column('fruit') %}\n\n{# fruits now contains ['apple', 'orange'] #}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Enums in Twig Templates\nDESCRIPTION: Demonstrates various ways to interact with enums in Twig templates, including accessing specific cases, iterating through all cases, and calling enum methods. The enum function requires a fully qualified class name (FQCN) as an argument and validates it during compile time.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/enum.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# display one specific case of a backed enum #}\n{{ enum('App\\\\MyEnum').SomeCase.value }}\n\n{# get all cases of an enum #}\n{% for case in enum('App\\\\MyEnum').cases %}\n    {{ case.value }}\n{% endfor %}\n\n{# call any methods of the enum class #}\n{{ enum('App\\\\MyEnum').someMethod() }}\n```\n\n----------------------------------------\n\nTITLE: Using Default Filter with Method Calls in Twig\nDESCRIPTION: Shows how to use the 'default' filter with expressions that involve method calls where variables might be undefined.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/default.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ user.value(name|default('username'))|default('not defined') }}\n```\n\n----------------------------------------\n\nTITLE: Checking Constant Existence with defined Test\nDESCRIPTION: Demonstrates how to check if a constant is defined using the 'defined' test in a conditional statement.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/constant.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if constant('SOME_CONST') is defined %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Twig\nDESCRIPTION: Demonstrates string interpolation in Twig, allowing expressions to be evaluated within double-quoted strings.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"first #{middle} last\" }}\n{{ \"first #{1 + 2} last\" }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# outputs first #{1 + 2} last #}\n{{ \"first \\#{1 + 2} last\" }}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Include Function in Twig\nDESCRIPTION: Demonstrates how to use the include function to render content from other templates. Shows both static and dynamic template inclusion.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/include.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('template.html.twig') }}\n{{ include(some_var) }}\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings with u.truncate in Twig\nDESCRIPTION: Shows how to truncate strings to a specific length using the u filter with the truncate method, with optional custom ending.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Lorem ipsum'|u.truncate(8) }}\nLorem ip\n\n{{ 'Lorem ipsum'|u.truncate(8, '...') }}\nLorem...\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandboxing for Included Template in Twig\nDESCRIPTION: This snippet demonstrates how to use the sandbox tag to enable sandboxing mode for an included template when it's not enabled globally. It wraps the include statement within sandbox tags.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/sandbox.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% sandbox %}\n    {% include 'user.html.twig' %}\n{% endsandbox %}\n```\n\n----------------------------------------\n\nTITLE: Basic Currency Formatting in Twig\nDESCRIPTION: Shows basic usage of format_currency filter to format a number as EUR currency.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_currency.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ '1000000'|format_currency('EUR') }}\n```\n\n----------------------------------------\n\nTITLE: Complex Value Assignment in Twig\nDESCRIPTION: Examples of assigning arrays, objects, and concatenated strings to variables.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/set.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set numbers = [1, 2] %}\n{% set user = {'name': 'Fabien'} %}\n{% set name = 'Fabien' ~ ' ' ~ 'Potencier' %}\n```\n\n----------------------------------------\n\nTITLE: Merging Mappings in Twig\nDESCRIPTION: Demonstrates merging two mappings (associative arrays) where existing keys are overridden and new keys are added from the second mapping.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/merge.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set items = {'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'unknown'} %}\n\n{% set items = items|merge({ 'peugeot': 'car', 'renault': 'car' }) %}\n\n{# items now contains {'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'car', 'renault': 'car'} #}\n```\n\n----------------------------------------\n\nTITLE: Applying Upper Filter to Text Block in Twig\nDESCRIPTION: Demonstrates how to use the 'apply' tag with the 'upper' filter to convert a block of text to uppercase in Twig templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/apply.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% apply upper %}\n    This text becomes uppercase\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Include with Template Fallback\nDESCRIPTION: Shows how to provide multiple template options where the first existing template will be included.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% include ['page_detailed.html.twig', 'page.html.twig'] %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Context in Nested Loops in Twig\nDESCRIPTION: This Twig template demonstrates how to access the parent context in nested loops using the loop.parent variable. It's useful for maintaining context across multiple levels of iteration.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% for topic, messages in topics %}\n    * {{ loop.index }}: {{ topic }}\n  {% for message in messages %}\n      - {{ loop.parent.loop.index }}.{{ loop.index }}: {{ message }}\n  {% endfor %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using max() Function with Numeric Values in Twig\nDESCRIPTION: Demonstrates how to use the max() function in Twig to find the largest value from a set of numbers or an array of numbers. The function returns the highest value among the given inputs.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/max.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ max(1, 3, 2) }}\n{{ max([1, 3, 2]) }}\n```\n\n----------------------------------------\n\nTITLE: Using Range Function with Descending Sequence in Twig\nDESCRIPTION: Illustrates how the range function automatically uses a step of -1 when the start value is greater than the end value, creating a descending sequence.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/range.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in range(3, 0) %}\n    {{ i }},\n{% endfor %}\n\n{# outputs 3, 2, 1, 0, #}\n```\n\n----------------------------------------\n\nTITLE: Manual Escaping in Twig\nDESCRIPTION: Demonstrates how to manually escape variables using the escape or e filter with different escaping strategies.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{{ user.username|e }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ user.username|e('js') }}\n{{ user.username|e('css') }}\n{{ user.username|e('url') }}\n{{ user.username|e('html_attr') }}\n```\n\n----------------------------------------\n\nTITLE: Handling Double-Escaping in Twig Autoescape Blocks\nDESCRIPTION: Demonstrates the issue with double-escaping when using a variable for the escape strategy inside an autoescape block. The first example will not double-escape, but the second will.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set strategy = 'html' %}\n\n{% autoescape 'html' %}\n    {{ var|escape('html') }}   {# won't be double-escaped #}\n    {{ var|escape(strategy) }} {# will be double-escaped #}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Comparing Variables with 'same as' Operator in Twig\nDESCRIPTION: This snippet demonstrates how to use the 'same as' operator in Twig to check if a variable is strictly equal to another value. In this example, it checks if the user.name attribute is the same as the PHP false value.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/sameas.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if user.name is same as(false) %}\n    the user attribute is the 'false' PHP value\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Simulating Inheritance with Block Renaming\nDESCRIPTION: Demonstrates how to simulate inheritance by renaming blocks and accessing them using block function.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/use.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% use \"blocks.html.twig\" with sidebar as parent_sidebar %}\n\n{% block sidebar %}\n    {{ block('parent_sidebar') }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Comparing Variable to Static Class Constant in Twig\nDESCRIPTION: This snippet demonstrates how to use the 'constant' test to compare a variable (post.status) with a static class constant (Post::PUBLISHED) in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/constant.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.status is constant('Post::PUBLISHED') %}\n    the status attribute is exactly the same as Post::PUBLISHED\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using 'defined' Test with Method Calls in Twig\nDESCRIPTION: This snippet shows how to safely use the 'defined' test with expressions that involve method calls on variables. It ensures that all variables used in the expression are defined before checking the method call.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/defined.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if var is defined and user.name(var) is defined %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Default Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the 'default' filter to provide fallback values when variables are undefined or empty.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/default.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ var|default('var is not defined') }}\n\n{{ user.name|default('name item on user is not defined') }}\n\n{{ user['name']|default('name item on user is not defined') }}\n\n{{ ''|default('passed var is empty')  }}\n```\n\n----------------------------------------\n\nTITLE: Using date_modify Filter in Twig Templates\nDESCRIPTION: Demonstrates how to use the date_modify filter to add one day to a publication date, then format the result with the date filter. The filter accepts either string values that can be parsed by PHP's strtotime function or DateTime instances.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date_modify.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.published_at|date_modify(\"+1 day\")|date(\"m/d/Y\") }}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Embed Tag in Twig\nDESCRIPTION: Demonstrates the basic syntax of the embed tag, showing how to include a template and override its blocks.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/embed.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% embed \"teasers_skeleton.html.twig\" %}\n    {# These blocks are defined in \"teasers_skeleton.html.twig\" #}\n    {# and we override them right here:                    #}\n    {% block left_teaser %}\n        Some content for the left teaser box\n    {% endblock %}\n    {% block right_teaser %}\n        Some content for the right teaser box\n    {% endblock %}\n{% endembed %}\n```\n\n----------------------------------------\n\nTITLE: Registering Sandbox Extension in PHP\nDESCRIPTION: Demonstrates how to register the SandboxExtension with a Twig instance. This is the first step in setting up the sandbox for evaluating untrusted code.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/sandbox.rst#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$twig->addExtension(new \\Twig\\Extension\\SandboxExtension($policy));\n```\n\n----------------------------------------\n\nTITLE: Using the 'raw' Filter to Prevent Escaping in Twig\nDESCRIPTION: This snippet demonstrates how to use the 'raw' filter in Twig to mark a variable as safe, preventing it from being escaped in an autoescape environment. The 'raw' filter is applied as the last filter to the variable.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/raw.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% autoescape %}\n    {{ var|raw }} {# var won't be escaped #}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Using Range Function in Twig for Basic Iteration\nDESCRIPTION: Demonstrates how to use the range function to generate a sequence of integers from 0 to 3 and iterate over them in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/range.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in range(0, 3) %}\n    {{ i }},\n{% endfor %}\n\n{# outputs 0, 1, 2, 3, #}\n```\n\n----------------------------------------\n\nTITLE: Operator Spacing in Twig Expressions\nDESCRIPTION: Demonstrates proper spacing around operators in Twig expressions. Put exactly one space before and after comparison, math, logic operators and other special operators.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 1 + 2 }}\n{{ first_name ~ ' ' ~ last_name }}\n{{ is_correct ? true : false }}\n```\n\n----------------------------------------\n\nTITLE: Automatic Escaping with autoescape Tag in Twig\nDESCRIPTION: Shows how to use the autoescape tag to mark sections of a template for automatic escaping, with the ability to specify different escaping strategies.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% autoescape %}\n    Everything will be automatically escaped in this block (using the HTML strategy)\n{% endautoescape %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% autoescape 'js' %}\n    Everything will be automatically escaped in this block (using the JS strategy)\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Debug Extension in PHP\nDESCRIPTION: PHP code showing how to enable the debug extension and configure the Twig environment for dumping functionality.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/dump.rst#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader, [\n    'debug' => true,\n    // ...\n]);\n$twig->addExtension(new \\Twig\\Extension\\DebugExtension());\n```\n\n----------------------------------------\n\nTITLE: Specifying Timezone in Date Filter\nDESCRIPTION: Demonstrates how to specify a custom timezone when formatting a date. The second parameter to the date filter allows for specifying a PHP-supported timezone.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.published_at|date(\"m/d/Y\", \"Europe/Paris\") }}\n```\n\n----------------------------------------\n\nTITLE: Indentation in Twig Templates\nDESCRIPTION: Demonstrates proper indentation inside Twig tags. Use the same indentation as the one used for the target language of the rendered template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% block content %}\n    {% if true %}\n        true\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone with format_datetime in Twig\nDESCRIPTION: Demonstrates how to override the default timezone when formatting a datetime value.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ datetime|format_datetime(locale: 'en', timezone: 'Pacific/Midway') }}\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Values in Twig Templates\nDESCRIPTION: Demonstrates how to use the 'empty' check in a Twig template to evaluate if a variable is empty. This check works for various data types including strings, sequences, mappings, booleans, and null values. It also handles objects implementing Countable or __toString() methods.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/empty.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if user is empty %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Tests to Twig Extension in PHP\nDESCRIPTION: Shows how to add custom test functions to a Twig extension by implementing the getTests() method and returning an array of TwigTest objects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nclass CustomTwigExtension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getTests()\n    {\n        return [\n            new \\Twig\\TwigTest('even', 'twig_test_even'),\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Encoding in Twig\nDESCRIPTION: Demonstrates the basic usage of the json_encode filter to convert a value to JSON format. Uses Twig's built-in filter which internally leverages PHP's json_encode function.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/json_encode.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ data|json_encode() }}\n```\n\n----------------------------------------\n\nTITLE: Merging Sequences in Twig\nDESCRIPTION: Shows how to merge two sequences (arrays) where new values are appended to the end of existing ones. Demonstrates combining numeric and string values in arrays.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/merge.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set values = [1, 2] %}\n\n{% set values = values|merge(['apple', 'orange']) %}\n\n{# values now contains [1, 2, 'apple', 'orange'] #}\n```\n\n----------------------------------------\n\nTITLE: Using the Length Filter in Twig Conditional Statements\nDESCRIPTION: Example of using the length filter in a Twig template to count elements in a collection. The filter is applied to a 'users' variable, and the result is compared to a numeric value in an if condition.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/length.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if users|length > 10 %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using reduce Filter with Initial Value in Twig\nDESCRIPTION: Shows how to use the reduce filter with a specified initial value. The second argument to reduce sets the starting value for the accumulator before iteration begins.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/reduce.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ numbers|reduce((carry, v, k) => carry + v * k, 10) }}\n{# output 18 #}\n```\n\n----------------------------------------\n\nTITLE: Twig Autoescaping Block\nDESCRIPTION: Example of using the autoescape tag to control HTML escaping behavior for a block of template code\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% autoescape 'html' %}\n    {{ var }}\n    {{ var|raw }}      {# var won't be escaped #}\n    {{ var|escape }}   {# var won't be double-escaped #}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional CSS Classes with html_classes in Twig\nDESCRIPTION: This snippet demonstrates how to use the html_classes function to conditionally apply CSS classes to an HTML element. It combines static class names with dynamic ones based on object properties.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_classes.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n<p class=\"{{ html_classes('a-class', 'another-class', {\n    'errored': object.errored,\n    'finished': object.finished,\n    'pending': object.pending,\n}) }}\">How are you doing?</p>\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Definition in Twig Templates\nDESCRIPTION: This snippet demonstrates how to use the 'defined' test to check if a variable, its attribute, or an array key is defined in the current context. This is especially useful when using the 'strict_variables' option in Twig.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/defined.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# defined works with variable names #}\n{% if user is defined %}\n    ...\n{% endif %}\n\n{# and attributes on variables names #}\n{% if user.name is defined %}\n    ...\n{% endif %}\n\n{% if user['name'] is defined %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Preserving DateTime Object's Original Timezone\nDESCRIPTION: Shows how to preserve the original timezone of a DateTime object by passing false as the timezone parameter to the date filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.published_at|date(\"m/d/Y\", false) }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Enum Cases in Twig Template\nDESCRIPTION: Demonstrates how to use the enum_cases function to iterate over all cases of a PHP enum. The function accepts a fully qualified class name (FQCN) of the enum as an argument and returns a list of enum cases that can be accessed in a loop.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/enum_cases.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for case in enum_cases('App\\\\MyEnum') %}\n    {{ case.value }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Comparing Variable to Instance Constant in Twig\nDESCRIPTION: This snippet shows how to use the 'constant' test to compare a variable (post.status) with a constant from an object instance (post) in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/constant.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.status is constant('PUBLISHED', post) %}\n    the status attribute is exactly the same as Post::PUBLISHED\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Template Include\nDESCRIPTION: Shows how to include templates using variables and conditional expressions.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% include some_var %}\n{% include ajax ? 'ajax.html.twig' : 'not_ajax.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Using Invoke Filter with Arrow Functions in Twig\nDESCRIPTION: Demonstrates how to use the invoke filter to call an arrow function with a person object parameter. The example shows creating a person object, defining an arrow function for name formatting, and invoking it using the filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/invoke.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set person = { first: \"Bob\", last: \"Smith\" } %}\n{% set func = p => \"#{p.first} #{p.last}\" %}\n\n{{ func|invoke(person) }}\n{# outputs Bob Smith #}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain Loader for Twig Templates in PHP\nDESCRIPTION: Shows how to use the ChainLoader to delegate template loading to multiple loaders in a specified order, allowing for fallback and override behaviors.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$loader1 = new \\Twig\\Loader\\ArrayLoader([\n    'base.html.twig' => '{% block content %}{% endblock %}',\n]);\n$loader2 = new \\Twig\\Loader\\ArrayLoader([\n    'index.html.twig' => '{% extends \"base.html.twig\" %}{% block content %}Hello {{ name }}{% endblock %}',\n    'base.html.twig'  => 'Will never be loaded',\n]);\n\n$loader = new \\Twig\\Loader\\ChainLoader([$loader1, $loader2]);\n\n$twig = new \\Twig\\Environment($loader);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of format_datetime Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the format_datetime filter to format a date string.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Aug 7, 2019, 11:39:12 PM #}\n{{ '2019-08-07 23:39:12'|format_datetime() }}\n```\n\n----------------------------------------\n\nTITLE: Using the 'first' Filter in Twig Templates\nDESCRIPTION: This snippet demonstrates how to use the 'first' filter in Twig to retrieve the first element from arrays, objects, and strings. The filter returns the first item in a sequence, the first value in a mapping, or the first character of a string.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/first.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ [1, 2, 3, 4]|first }}\n{# outputs 1 #}\n\n{{ {a: 1, b: 2, c: 3, d: 4}|first }}\n{# outputs 1 #}\n\n{{ '1234'|first }}\n{# outputs 1 #}\n```\n\n----------------------------------------\n\nTITLE: Basic Batch Filter Usage with Fill Value\nDESCRIPTION: Shows how to use the batch filter to create a table with rows of 3 items, filling empty spaces with 'No item'. Keys are preserved by default.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/batch.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set items = ['a', 'b', 'c', 'd'] %}\n\n<table>\n    {% for row in items|batch(3, 'No item') %}\n        <tr>\n            {% for index, column in row %}\n                <td>{{ index }} - {{ column }}</td>\n            {% endfor %}\n        </tr>\n    {% endfor %}\n</table>\n```\n\n----------------------------------------\n\nTITLE: Twig Source Function with Ignore Missing Flag\nDESCRIPTION: Shows how to use the source function with the ignore_missing parameter to handle missing templates gracefully by returning an empty string instead of throwing an error.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/source.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ source('template.html.twig', ignore_missing = true) }}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Access to Keys in Twig\nDESCRIPTION: Shows how to filter a mapping using an arrow function that has access to both the value and key, allowing filtering based on both elements simultaneously.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/filter.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for k, v in sizes|filter((v, k) => v > 38 and k != \"xl\") -%}\n    {{ k }} = {{ v }}\n{% endfor %}\n{# output l = 40 #}\n```\n\n----------------------------------------\n\nTITLE: Using striptags Filter with Allowable Tags Parameter in Twig\nDESCRIPTION: Shows how to use the striptags filter while preserving specific HTML tags by passing them as an argument. In this example, <br> and <p> tags will be kept.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/striptags.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{{ some_html|striptags('<br><p>') }}\n```\n\n----------------------------------------\n\nTITLE: Using max() Function with Associative Arrays in Twig\nDESCRIPTION: Shows how the max() function behaves when used with associative arrays (mappings) in Twig. The function ignores keys and compares only the values, returning the highest value.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/max.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ max({2: \"e\", 1: \"a\", 3: \"b\", 5: \"d\", 4: \"c\"}) }}\n{# returns \"e\" #}\n```\n\n----------------------------------------\n\nTITLE: Shuffling an associative array in Twig\nDESCRIPTION: Example showing how to shuffle an associative array in Twig and iterate through both keys and values in the shuffled result to create an HTML list.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/shuffle.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set items = {\n    'a': 'd',\n    'b': 'e',\n    'c': 'f',\n} %}\n\n<ul>\n    {% for index, item in items|shuffle %}\n        <li>{{ index }} - {{ item }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Twig Macros\nDESCRIPTION: Shows how to import specific macros from a template using the from tag and optionally aliasing them.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/macro.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{% from 'forms.html.twig' import input as input_field, textarea %}\n\n<p>{{ input_field('password', '', 'password') }}</p>\n<p>{{ input_field(name: 'password', type: 'password') }}</p>\n<p>{{ textarea('comment') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Templates with Fallback in Twig\nDESCRIPTION: Shows how to provide a list of templates to the include function, where the first existing template will be rendered.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/include.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ include(['page_detailed.html.twig', 'page.html.twig']) }}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Cache Tag in Twig\nDESCRIPTION: Demonstrates the basic usage of the cache tag in Twig to cache a template fragment indefinitely.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% cache \"cache key\" %}\n    Cached forever (depending on the cache implementation)\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a String in Twig\nDESCRIPTION: Shows how to iterate over the characters of a string using the 'split' filter in Twig.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/for.rst#2025-04-14_snippet_7\n\nLANGUAGE: html+twig\nCODE:\n```\n<h1>Characters</h1>\n<ul>\n    {% for char in \"諺 / ことわざ\"|split('') -%}\n        <li>{{ char }}</li>\n    {%- endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic Template String Loading in Twig\nDESCRIPTION: Examples of loading templates from literal strings and variables using template_from_string function with include\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/template_from_string.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ include(template_from_string(\"Hello {{ name }}\")) }}\n{{ include(template_from_string(page.template)) }}\n```\n\n----------------------------------------\n\nTITLE: Twig Sequence and Attribute Access\nDESCRIPTION: Shows different ways to access sequence elements and object attributes using dot and bracket notation\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n{{ user.name }}\n\n{{ user.('first-name') }}\n\n{{ user.(name) }}\n{{ user.('get' ~ name) }}\n\n{{ user['name'] }}\n```\n\n----------------------------------------\n\nTITLE: Chaining Methods with the u Filter in Twig\nDESCRIPTION: Demonstrates how to chain multiple string manipulation methods together using the u filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Symfony String + Twig = <3'|u.wordwrap(5).upper }}\nSYMFONY\nSTRING\n+\nTWIG\n= <3\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Date Format in PHP\nDESCRIPTION: Shows how to set the default date and date interval formats by calling the setDateFormat() method on the core extension instance in PHP.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setDateFormat('d/m/Y', '%d days');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random Function Usage in Twig\nDESCRIPTION: This snippet shows various ways to use the random function in Twig templates. It demonstrates how the function works with arrays, strings, and integer parameters to generate random values.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/random.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ random(['apple', 'orange', 'citrus']) }} {# example output: orange #}\n{{ random('ABC') }}                         {# example output: C #}\n{{ random() }}                              {# example output: 15386094 (works as the native PHP mt_rand function) #}\n{{ random(5) }}                             {# example output: 3 #}\n{{ random(50, 100) }}                       {# example output: 63 #}\n```\n\n----------------------------------------\n\nTITLE: Basic Reverse Filter Usage in Twig\nDESCRIPTION: Demonstrates basic usage of the reverse filter in a for loop and with string reversal.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/reverse.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in users|reverse %}\n    ...\n{% endfor %}\n\n{{ '1234'|reverse }}\n\n{# outputs 4321 #}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Slice Parameters in Twig\nDESCRIPTION: Shows how to use variables as parameters for the slice filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slice.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in [1, 2, 3, 4, 5]|slice(start, length) %}\n    {# ... #}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Variants with html_cva in Twig\nDESCRIPTION: This snippet shows how to define default variants using html_cva. Default variants are applied when no specific variant is provided for a given category.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_6\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set alert = html_cva(\n    base: 'alert',\n    variants: {\n        color: {\n            blue: 'bg-blue',\n            red: 'bg-red',\n            green: 'bg-green',\n        },\n        size: {\n            sm: 'text-sm',\n            md: 'text-md',\n            lg: 'text-lg',\n        },\n        rounded: {\n            sm: 'rounded-sm',\n            md: 'rounded-md',\n            lg: 'rounded-lg',\n        }\n    },\n    default_variant: {\n        rounded: 'md',\n    }\n) %}\n\n<div class=\"{{ alert.apply({color, size}) }}\">\n     ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using inline_css with Template Inclusion\nDESCRIPTION: Examples of applying the inline_css filter to included template files, with and without external stylesheets.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inline_css.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('some_template.html.twig')|inline_css }}\n\n{{ include('some_template.html.twig')|inline_css(source(\"some_styles.css\")) }}\n```\n\n----------------------------------------\n\nTITLE: Template Include with Filters\nDESCRIPTION: Shows how to apply filters to included template content using both tag and function methods.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# Apply filter on a rendered template #}\n{% apply upper %}\n    {% include 'template.html.twig' %}\n{% endapply %}\n{# vs #}\n{{ include('template.html.twig')|upper }}\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding with Pretty Print Option in Twig\nDESCRIPTION: Shows how to use the json_encode filter with the JSON_PRETTY_PRINT option for formatted output. Demonstrates using PHP constants within Twig templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/json_encode.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ data|json_encode(constant('JSON_PRETTY_PRINT')) }}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Template Inclusion in Twig\nDESCRIPTION: These Twig snippets show how to dynamically include templates based on variables or expressions. The template name can be constructed using concatenation or default filters.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% include var ~ '_foo.html.twig' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% include var|default('index') ~ '_foo.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Time for Cached Content in Twig\nDESCRIPTION: Shows how to set an expiration time (in seconds) for cached content using the ttl() modifier.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% cache \"cache key\" ttl(300) %}\n    Cached for 300 seconds\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Using the capitalize filter in Twig templates\nDESCRIPTION: The capitalize filter transforms a string by making the first character uppercase and all other characters lowercase. This is useful for formatting text for display, such as names or titles.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/capitalize.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'my first car'|capitalize }}\n\n{# outputs 'My first car' #}\n```\n\n----------------------------------------\n\nTITLE: Variable Scope in Twig Loops - Invalid Example\nDESCRIPTION: Demonstrates incorrect variable declaration inside a loop, where the variable won't be accessible outside the loop scope.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/set.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% for item in items %}\n    {% set value = item %}\n{% endfor %}\n\n{# value is NOT available #}\n```\n\n----------------------------------------\n\nTITLE: Twig Containment Operators\nDESCRIPTION: Shows usage of 'in' and 'not in' operators for testing containment in arrays and strings\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{# returns true #}\n\n{{ 1 in [1, 2, 3] }}\n\n{{ 'cd' in 'abcde' }}\n```\n\n----------------------------------------\n\nTITLE: Cycling Between Odd and Even Values in Twig\nDESCRIPTION: This example demonstrates how to use the 'cycle' function to alternate between 'odd' and 'even' values for a range of years. The function takes the sequence ['odd', 'even'] and uses the loop index to determine which value to output.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/cycle.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set start_year = date() | date('Y') %}\n{% set end_year = start_year + 5 %}\n\n{% for year in start_year..end_year %}\n    {{ cycle(['odd', 'even'], loop.index0) }}\n{% endfor %}\n\n{# outputs\n\n    odd\n    even\n    odd\n    even\n    odd\n    even\n    \n#}\n```\n\n----------------------------------------\n\nTITLE: Applying inky_to_html Filter to Included File in Twig\nDESCRIPTION: This example shows how to apply the inky_to_html filter to an included Inky template file in Twig. It demonstrates the use of the include function combined with the filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inky_to_html.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('some_template.inky.twig')|inky_to_html }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Environment Options in PHP\nDESCRIPTION: Illustrates how to pass configuration options when creating a new Twig environment. Options control various aspects of template processing and rendering.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$twig = new \\Twig\\Environment($loader, ['debug' => true]);\n```\n\n----------------------------------------\n\nTITLE: Escaping Characters in Date Format Strings\nDESCRIPTION: Shows how to escape words and characters in the date format string using double backslashes. This is useful when literal characters need to be displayed in the date output.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.published_at|date(\"F jS \\\\a\\\\t g:ia\") }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Decimal Part Always with format_number in Twig\nDESCRIPTION: Shows how to always display the decimal part using the decimal_always_shown attribute.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# 123. #}\n{{ 123|format_number({decimal_always_shown:true}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Chaining Filters with Apply Tag in Twig\nDESCRIPTION: Shows how to chain multiple filters (lowercase and HTML escape) using the 'apply' tag in Twig. This example converts text to lowercase and then applies HTML escaping.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/apply.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply lower|escape('html') %}\n    <strong>SOME TEXT</strong>\n{% endapply %}\n\n{# outputs \"&lt;strong&gt;some text&lt;/strong&gt;\" #}\n```\n\n----------------------------------------\n\nTITLE: Examples of Filter Usage in Twig\nDESCRIPTION: Examples showing how filters are used in Twig templates and their equivalent PHP compilation.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'TWIG'|lower }}\n{{ now|date('d/m/Y') }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Language with the Slug Filter in Twig\nDESCRIPTION: Demonstrates how to explicitly specify the language of the original string using the second argument of the slug filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slug.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ '...'|slug('-', 'ko') }}\n```\n\n----------------------------------------\n\nTITLE: Creating Variadic Filters\nDESCRIPTION: PHP code showing how to create a Twig filter that accepts an arbitrary number of arguments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('thumbnail', function ($file, array $options = []) {\n    // ...\n}, ['is_variadic' => true]);\n```\n\n----------------------------------------\n\nTITLE: Using the replace filter in Twig to substitute placeholders in strings\nDESCRIPTION: This example demonstrates how to use the replace filter to substitute placeholders in strings with actual values. The first example uses % characters to mark placeholders, while the second example shows that any delimiter format can be used.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/replace.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"I like %this% and %that%.\"|replace({'%this%': fruit, '%that%': \"oranges\"}) }}\n{# if the \"fruit\" variable is set to \"apples\", #}\n{# it outputs \"I like apples and oranges\" #}\n\n{# using % as a delimiter is purely conventional and optional #}\n{{ \"I like this and --that--.\"|replace({'this': fruit, '--that--': \"oranges\"}) }}\n{# outputs \"I like apples and oranges\" #}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-aware Filters\nDESCRIPTION: PHP code showing how to create a Twig filter that receives the environment instance as an argument.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('rot13', function (\\Twig\\Environment $env, $string) {\n    // get the current charset for instance\n    $charset = $env->getCharset();\n\n    return str_rot13($string);\n}, ['needs_environment' => true]);\n```\n\n----------------------------------------\n\nTITLE: Using reduce Filter on an Array in Twig\nDESCRIPTION: Demonstrates using the reduce filter to iteratively process an array of numbers into a single value. The arrow function accumulates a sum of each value multiplied by its key.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/reduce.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set numbers = [1, 2, 3] %}\n\n{{ numbers|reduce((carry, v, k) => carry + v * k) }}\n{# output 8 #}\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML using Twig filter\nDESCRIPTION: This snippet demonstrates how to use the markdown_to_html filter to convert a block of Markdown content to HTML within a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/markdown_to_html.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% apply markdown_to_html %}\nTitle\n=====\n\nHello!\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Currency Formatting with Rounding Options\nDESCRIPTION: Example showing currency formatting with ceiling rounding mode and rounding increment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_currency.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 123.456 | format_currency('EUR', {rounding_mode:'ceiling', rounding_increment:0.05}, 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Using Last Filter in Twig Templates\nDESCRIPTION: Demonstrates three different use cases of the 'last' filter in Twig: with arrays, associative arrays (mappings), and strings. The filter returns the last element in each case.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/last.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ [1, 2, 3, 4]|last }}\n{# outputs 4 #}\n\n{{ {a: 1, b: 2, c: 3, d: 4}|last }}\n{# outputs 4 #}\n\n{{ '1234'|last }}\n{# outputs 4 #}\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Twig Source Code in PHP\nDESCRIPTION: This snippet demonstrates how to manually convert Twig source code into a token stream using the tokenize() method of a Twig environment. It also shows how to output a textual representation of the token stream.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/internals.rst#2025-04-14_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$stream = $twig->tokenize(new \\Twig\\Source($source, $identifier));\n\necho $stream.\"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using timezone_name Filter with Explicit Locale in Twig\nDESCRIPTION: Example of using the timezone_name filter with an explicitly provided locale (French in this case).\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/timezone_name.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# heure du Pacifique nord-américain (Los Angeles) #}\n{{ 'America/Los_Angeles'|timezone_name('fr') }}\n```\n\n----------------------------------------\n\nTITLE: Best Practices for Escaping HTML Attribute Values in Twig\nDESCRIPTION: Shows the recommended approach for escaping HTML attribute values using the html strategy with quoted attributes, comparing it with the less performant html_attr approach for unquoted attributes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_7\n\nLANGUAGE: html+twig\nCODE:\n```\n<p data-content=\"{{ content|e('html') }}\">\n\n{# is equivalent to, but is less performant #}\n<p data-content={{ content|e('html_attr') }}>\n```\n\n----------------------------------------\n\nTITLE: Checking Block Existence in Twig Templates\nDESCRIPTION: Illustrates how to use the 'defined' test to check if a block exists in the current template or in another specified template. This is useful for conditional rendering based on block availability.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/block.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if block(\"footer\") is defined %}\n    ...\n{% endif %}\n\n{% if block(\"footer\", \"common_blocks.html.twig\") is defined %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Applying CVA Variants in Twig Templates\nDESCRIPTION: This snippet shows how to use the defined CVA variants in different templates. It demonstrates applying different color and size combinations, as well as adding additional classes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# index.html.twig #}\n{{ include('alert.html.twig', {'color': 'blue', 'size': 'md'}) }}\n{# class=\"alert bg-blue text-md\" #}\n\n{{ include('alert.html.twig', {'color': 'green', 'size': 'sm'}) }}\n{# class=\"alert bg-green text-sm\" #}\n\n{{ include('alert.html.twig', {'color': 'red', 'class': 'flex items-center justify-center'}) }}\n{# class=\"alert bg-red flex items-center justify-center\" #}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Twig Extension in PHP\nDESCRIPTION: Demonstrates how to add custom tags to a Twig extension by implementing the getTokenParsers() method and returning an array of TokenParser objects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nclass CustomTwigExtension extends \\Twig\\Extension\\AbstractExtension\n{\n    public function getTokenParsers()\n    {\n        return [new CustomSetTokenParser()];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Blocks\nDESCRIPTION: Shows how to define blocks in a separate template for reuse in other templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/use.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# blocks.html.twig #}\n{% block sidebar %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Converting Newlines to HTML Line Breaks Using nl2br Filter in Twig\nDESCRIPTION: This example demonstrates how the nl2br filter inserts HTML line breaks (<br />) before all newlines in a string. The filter pre-escapes the input before applying the transformation, ensuring proper HTML output.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/nl2br.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{{ \"I like Twig.\\nYou will like it too.\"|nl2br }}\n{# outputs\n\n    I like Twig.<br />\n    You will like it too.\n\n#}\n```\n\n----------------------------------------\n\nTITLE: Using Grouping Separator with format_number in Twig\nDESCRIPTION: Example of using the grouping_used attribute to add separators for thousands in number formatting.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# 1,234,567.89 #}\n{{ 1234567.89|format_number({grouping_used:true}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Operator Precedence Example in Twig\nDESCRIPTION: Demonstrates how Twig handles operator precedence with bitwise AND and OR operations. Shows how the expression is converted to PHP code.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n{{ 6 b-and 2 or 6 b-and 16 }}\n\n{# it is converted to the following PHP code: (6 & 2) || (6 & 16) #}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Scope with the 'with' Tag in Twig\nDESCRIPTION: This snippet demonstrates how to use the 'with' tag to create a new inner scope in Twig. Variables defined within this scope are not visible outside of it.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/with.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% with %}\n    {% set value = 42 %}\n    {{ value }} {# value is 42 here #}\n{% endwith %}\nvalue is not visible here any longer\n```\n\n----------------------------------------\n\nTITLE: Parsing Twig Token Stream to AST in PHP\nDESCRIPTION: This code snippet shows how to manually convert a Twig token stream into an Abstract Syntax Tree (AST) using the parse() method of a Twig environment. It also demonstrates how to output a representation of the node tree.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/internals.rst#2025-04-14_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$nodes = $twig->parse($stream);\n\necho $nodes.\"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Basic Language Names Usage in Twig\nDESCRIPTION: Demonstrates basic usage of the language_names function to get a list of language names in the current locale\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/language_names.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Abkhazian, Achinese, ... #}\n{{ language_names()|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Controlling Rounding Behavior with format_number in Twig\nDESCRIPTION: Example of controlling rounding behavior with rounding_mode and rounding_increment attributes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{# 123.5 #}\n{{ 123.456|format_number({rounding_mode:'ceiling', rounding_increment:0.05}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Using Format Filter in Twig Templates\nDESCRIPTION: Shows how to use the format filter to replace placeholders in a string with actual values. The filter follows PHP's sprintf notation for placeholder formatting. The example demonstrates replacing two %s placeholders with 'apples' and 'oranges'.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set fruit = 'apples' %}\n{{ \"I like %s and %s.\"|format(fruit, \"oranges\") }}\n\n{# outputs I like apples and oranges #}\n```\n\n----------------------------------------\n\nTITLE: Combining Twig Filter with For Loop\nDESCRIPTION: Shows how to use the filter function in conjunction with a for loop to iterate over only the filtered elements of an array that are greater than 38.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/filter.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% for v in sizes|filter(v => v > 38) -%}\n    {{ v }}\n{% endfor %}\n{# output 40 42 #}\n```\n\n----------------------------------------\n\nTITLE: Using the plural filter in Twig\nDESCRIPTION: Demonstrates how to use the 'plural' filter in Twig templates to transform singular nouns into their plural form. It shows examples in English and French.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/plural.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# English (en) rules are used by default #}\n{{ 'animal'|plural() }}\nanimals\n\n{{ 'animal'|plural('fr') }}\nanimaux\n```\n\n----------------------------------------\n\nTITLE: Disabling Context Access in Included Templates in Twig\nDESCRIPTION: Demonstrates how to disable access to the current context when including a template, limiting variable access to only those explicitly passed.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/include.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# only the name variable will be accessible #}\n{{ include('template.html.twig', {name: 'Fabien'}, with_context: false) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# no variables will be accessible #}\n{{ include('template.html.twig', with_context: false) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Context-aware Filters\nDESCRIPTION: PHP code showing how to create Twig filters that receive the current context as an argument.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('rot13', function ($context, $string) {\n    // ...\n}, ['needs_context' => true]);\n\n$filter = new \\Twig\\TwigFilter('rot13', function (\\Twig\\Environment $env, $context, $string) {\n    // ...\n}, ['needs_context' => true, 'needs_environment' => true]);\n```\n\n----------------------------------------\n\nTITLE: Guard Tag with Fallback in Twig\nDESCRIPTION: Shows how to use the guard tag with an else clause to provide alternative code when the requested callable is not available. This allows for graceful fallback handling during compilation.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/guard.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% guard function importmap %}\n    {{ importmap('app') }}\n{% else %}\n    {# the importmap function doesn't exist, generate fallback code #}\n{% endguard %}\n```\n\n----------------------------------------\n\nTITLE: Formatting Current Date in Twig\nDESCRIPTION: Demonstrates how to format the current date by passing the string \"now\" to the date filter. The filter converts this string to the current timestamp and formats it.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ \"now\"|date(\"m/d/Y\") }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sandbox Security Policy in PHP\nDESCRIPTION: Shows how to create a SecurityPolicy object with allowed tags, filters, methods, properties, and functions. This policy defines what elements are permitted in the sandboxed environment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/sandbox.rst#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tags = ['if'];\n$filters = ['upper'];\n$methods = [\n    'Article' => ['getTitle', 'getBody'],\n];\n$properties = [\n    'Article' => ['title', 'body'],\n];\n$functions = ['range'];\n$policy = new \\Twig\\Sandbox\\SecurityPolicy($tags, $filters, $methods, $properties, $functions);\n```\n\n----------------------------------------\n\nTITLE: Using Find Filter with Arrays in Twig\nDESCRIPTION: Example of using the find filter with an array to return the first element greater than 38. The arrow function receives the value from the array and returns the first matching element.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/find.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set sizes = [34, 36, 38, 40, 42] %}\n\n{{ sizes|find(v => v > 38) }}\n{# output 40 #}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Comparison in Twig Templates\nDESCRIPTION: Demonstrates how to use the date function to compare dates in Twig templates. This example checks if a user's creation date is older than 2 days ago.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/date.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if date(user.created_at) < date('-2days') %}\n    {# do something #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding a Filter to Twig Environment\nDESCRIPTION: PHP code example showing how to add a custom filter to a Twig environment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->addFilter($filter);\n```\n\n----------------------------------------\n\nTITLE: String Delimiter Spacing in Twig\nDESCRIPTION: Shows proper spacing with string delimiters in Twig. Do not put any spaces before and after string delimiters.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Twig' }}\n{{ \"Twig\" }}\n```\n\n----------------------------------------\n\nTITLE: Using timezone_name Filter with Default Locale in Twig\nDESCRIPTION: Examples of using the timezone_name filter to convert timezone identifiers to readable names using the current locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/timezone_name.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Central European Time (Paris) #}\n{{ 'Europe/Paris'|timezone_name }}\n\n{# Pacific Time (Los Angeles) #}\n{{ 'America/Los_Angeles'|timezone_name }}\n```\n\n----------------------------------------\n\nTITLE: Using divisible by Operator in Twig Conditional\nDESCRIPTION: Shows how to use the divisible by operator within a Twig if statement to check if loop.index is divisible by 3. This is commonly used in loops when you need to perform actions at specific intervals.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/divisibleby.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if loop.index is divisible by(3) %}\n    ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Passing Variable Mappings to the 'with' Tag in Twig\nDESCRIPTION: This snippet shows how to pass a mapping of variables to the 'with' tag in Twig. It also demonstrates that any expression resolving to a mapping can be used.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/with.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% with {value: 42} %}\n    {{ value }} {# value is 42 here #}\n{% endwith %}\nvalue is not visible here any longer\n\n{# it works with any expression that resolves to a mapping #}\n{% set vars = {value: 42} %}\n{% with vars %}\n    ...\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Customizing number_format Filter with Parameters in Twig\nDESCRIPTION: Shows how to control decimal places, decimal point, and thousands separator using the additional arguments of the number_format filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/number_format.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ 9800.333|number_format(2, '.', ',') }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter with Options\nDESCRIPTION: PHP code showing how to create a Twig filter with additional options.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('rot13', 'str_rot13', $options);\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping with Cache Tag in Twig\nDESCRIPTION: Illustrates how the cache tag creates a new scope for variables, keeping changes local to the cached fragment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set count = 1 %}\n\n{% cache \"cache key\" tags('blog') %}\n    {# Won't affect the value of count outside of the cache tag #}\n    {% set count = 2 %}\n    Some code\n{% endcache %}\n\n{# Displays 1 #}\n{{ count }}\n```\n\n----------------------------------------\n\nTITLE: Date Comparison with Timezone Specification in Twig\nDESCRIPTION: Shows how to compare dates with explicit timezone specification. The second argument to the date function specifies the timezone to use for the comparison.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/date.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if date(user.created_at) < date('-2days', 'Europe/Paris') %}\n    {# do something #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Assignment in Twig\nDESCRIPTION: Demonstrates how to assign a simple string value to a variable using the set tag.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/set.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set name = 'Fabien' %}\n```\n\n----------------------------------------\n\nTITLE: Using the currency_name filter in Twig\nDESCRIPTION: Basic examples of using the currency_name filter to convert ISO currency codes to their full names in the current locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_name.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Euro #}\n{{ 'EUR'|currency_name }}\n\n{# Japanese Yen #}\n{{ 'JPY'|currency_name }}\n```\n\n----------------------------------------\n\nTITLE: Combining Conditions in Twig If Statement\nDESCRIPTION: Shows how to use 'and' to combine multiple conditions in a Twig if statement. This example checks if the temperature is within a specific range.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/if.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if temperature > 18 and temperature < 27 %}\n    <p>It's a nice day for a walk in the park.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Twig Macro Definition\nDESCRIPTION: Demonstrates how to mark a Twig macro as deprecated using the deprecated tag within the macro definition.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/deprecated.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% macro welcome(name) %}\n    {% deprecated 'The \"welcome\" macro is deprecated, use \"hello\" instead.' %}\n\n    ...\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Registering Twig Extension\nDESCRIPTION: Example of registering a Twig extension using the addExtension method to add new features\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$twig->addExtension(new \\Twig\\Extension\\SandboxExtension());\n```\n\n----------------------------------------\n\nTITLE: HTML output of shuffled associative array example\nDESCRIPTION: The rendered HTML output of the shuffled associative array example, demonstrating how keys are not preserved and are replaced with sequential indices.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/shuffle.rst#2025-04-14_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <li>0 - d</li>\n    <li>1 - f</li>\n    <li>2 - e</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Inlining in Twig Template\nDESCRIPTION: Demonstrates how to use the inline_css filter to inline CSS styles from a style tag into HTML elements.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inline_css.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply inline_css %}\n    <html>\n        <head>\n            <style>\n                p { color: red; }\n            </style>\n        </head>\n        <body>\n            <p>Hello CSS!</p>\n        </body>\n    </html>\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Comments in Twig\nDESCRIPTION: Demonstrates different ways to add comments in Twig templates, including block comments and inline comments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{# note: disabled template because we no longer use this\n    {% for user in users %}\n        ...\n    {% endfor %}\n#}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{\n    # this is an inline comment\n    \"Hello World\"|upper\n    # this is an inline comment\n}}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{\n    {\n        # this is an inline comment\n        fruit: 'apple', # this is an inline comment\n        color: 'red', # this is an inline comment\n    }|join(', ')\n}}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{\n    \"Hello World\"|upper # this is an inline comment\n}}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of number_format Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the number_format filter without any additional parameters.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/number_format.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 200.35|number_format }}\n```\n\n----------------------------------------\n\nTITLE: Block Function Usage\nDESCRIPTION: Demonstrates how to print a block multiple times using the block function.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<title>{% block title %}{% endblock %}</title>\n<h1>{{ block('title') }}</h1>\n{% block body %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Reading Constants from Object Instances\nDESCRIPTION: Demonstrates how to read constants from object instances using the constant filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/constant.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ constant('RSS', date) }}\n```\n\n----------------------------------------\n\nTITLE: Preserving Object Timezone with format_datetime in Twig\nDESCRIPTION: Shows how to preserve the original timezone of a DateTime object by passing false as the timezone parameter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ datetime|format_datetime(locale: 'en', timezone: false) }}\n```\n\n----------------------------------------\n\nTITLE: Manually Adding IntlExtension to Twig Environment\nDESCRIPTION: PHP code showing how to explicitly add the IntlExtension to a Twig environment for non-Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_date.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Spellout Style Number Formatting in Twig\nDESCRIPTION: Example of using the spellout style with format_number filter to spell out numbers as words.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{# one thousand two hundred thirty-four point five six seven eight nine #}\n{{ 1234.56789 | format_number(style: 'spellout', locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Include with Additional Variables\nDESCRIPTION: Examples of including templates while passing additional variables using the 'with' keyword.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# template.html.twig will have access to the variables from the current context and the additional ones provided #}\n{% include 'template.html.twig' with {'name': 'Fabien'} %}\n\n{% set vars = {'name': 'Fabien'} %}\n{% include 'template.html.twig' with vars %}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Variables to Twig Extension in PHP\nDESCRIPTION: Shows how to add global variables to a Twig extension by implementing the GlobalsInterface and defining the getGlobals() method.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nclass CustomTwigExtension extends \\Twig\\Extension\\AbstractExtension implements \\Twig\\Extension\\GlobalsInterface\n{\n    public function getGlobals(): array\n    {\n        return [\n            'text' => new Text(),\n        ];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding a Self-extending Template in Twig\nDESCRIPTION: This Twig code demonstrates how to override a template that extends itself by using a full, unambiguous template path in the extends tag. This allows for template customization while maintaining inheritance.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# page.html.twig in .../templates/mysite #}\n{% extends \"default/page.html.twig\" %} {# from .../templates #}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Filters\nDESCRIPTION: PHP code showing how to create dynamic Twig filters that match multiple filter names.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('*_path', function ($name, $arguments) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Object Properties for Twig in PHP\nDESCRIPTION: This PHP class demonstrates how to implement magic methods __get() and __isset() to allow Twig to access dynamic properties of an object. This is useful when properties are not defined statically.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Article\n{\n    public function __get($name)\n    {\n        if ('title' == $name) {\n            return 'The title';\n        }\n\n        // throw some kind of error\n    }\n\n    public function __isset($name)\n    {\n        if ('title' == $name) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Loader for Twig Templates in PHP\nDESCRIPTION: Demonstrates how to use the ArrayLoader to load templates from a PHP array, useful for unit testing or small projects where templates are stored in memory.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$loader = new \\Twig\\Loader\\ArrayLoader([\n    'index.html.twig' => 'Hello {{ name }}!',\n]);\n$twig = new \\Twig\\Environment($loader);\n\necho $twig->render('index.html.twig', ['name' => 'Fabien']);\n```\n\n----------------------------------------\n\nTITLE: Constraining Fraction Digits with format_number in Twig\nDESCRIPTION: Shows how to set constraints on the fraction part of a number using max_fraction_digit and min_fraction_digit attributes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# 123.46 #}\n{{ 123.456789|format_number({max_fraction_digit:2, min_fraction_digit:1}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Inlining External CSS Files in Twig\nDESCRIPTION: Shows how to inline CSS from external stylesheet files using the source() function as arguments to inline_css filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inline_css.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply inline_css(source(\"some_styles.css\"), source(\"another.css\")) %}\n    <html>\n        <body>\n            <p>Hello CSS!</p>\n        </body>\n    </html>\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Filtering Sequence Elements with Twig Filter\nDESCRIPTION: Demonstrates how to filter elements in an array using an arrow function that retains only values greater than 38. The filtered results are joined with a comma separator.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/filter.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set sizes = [34, 36, 38, 40, 42] %}\n\n{{ sizes|filter(v => v > 38)|join(', ') }}\n{# output 40, 42 #}\n```\n\n----------------------------------------\n\nTITLE: Using data_uri Filter in Twig Templates\nDESCRIPTION: Examples of using the data_uri filter to generate data-scheme URLs for images and HTML content. The filter can be used with different parameters to control mime type and other attributes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/data_uri.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{{ image_data|data_uri }}\n\n{{ source('path_to_image')|data_uri }}\n\n{# force the mime type, disable the guessing of the mime type #}\n{{ image_data|data_uri(mime: \"image/svg\") }}\n\n{# also works with plain text #}\n{{ '<b>foobar</b>'|data_uri(mime: \"text/html\") }}\n\n{# add some extra parameters #}\n{{ '<b>foobar</b>'|data_uri(mime: \"text/html\", parameters: {charset: \"ascii\"}) }}\n```\n\n----------------------------------------\n\nTITLE: Dumping All Context Variables in Twig\nDESCRIPTION: Example showing how to dump all variables from the current context when no arguments are provided.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/dump.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Using locale_names Function in Twig\nDESCRIPTION: Demonstrates how to use the locale_names function to get and join locale names. It uses the default locale and shows how to specify a different locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/locale_names.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Afrikaans, Afrikaans (Namibia), ... #}\n{{ locale_names()|join(', ') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# afrikaans, afrikaans (Afrique du Sud), ... #}\n{{ locale_names('fr')|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values with Reverse Merge in Twig\nDESCRIPTION: Shows how to ensure specific values exist in a mapping by reversing the merge order, preventing override of existing values.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/merge.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set items = {'apple': 'fruit', 'orange': 'fruit'} %}\n\n{% set items = {'apple': 'unknown'}|merge(items) %}\n\n{# items now contains {'apple': 'fruit', 'orange': 'fruit'} #}\n```\n\n----------------------------------------\n\nTITLE: Filter Precedence with Parentheses in Twig\nDESCRIPTION: Shows how to modify default operator precedence using parentheses, demonstrating string concatenation and lowercase filter application.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_24\n\nLANGUAGE: twig\nCODE:\n```\n{% set greeting = 'Hello ' %}\n{% set name = 'Fabien' %}\n\n{{ greeting ~ name|lower }}   {# Hello fabien #}\n\n{# use parenthesis to change precedence #}\n{{ (greeting ~ name)|lower }} {# hello fabien #}\n```\n\n----------------------------------------\n\nTITLE: Creating Filters with Pre-Escaping\nDESCRIPTION: PHP code showing how to create a Twig filter that works with pre-escaped input.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('somefilter', 'somefilter', ['pre_escape' => 'html', 'is_safe' => ['html']]);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Split Filter in Twig\nDESCRIPTION: Demonstrates how to use the split filter to split a string into an array based on a delimiter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/split.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set items = \"one,two,three\"|split(',') %}\n{# items contains ['one', 'two', 'three'] #}\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Loader for Non-Static Methods in Twig Extension\nDESCRIPTION: Demonstrates how to use a runtime loader to handle non-static methods in a Twig extension, allowing for dependency injection and more complex setups.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nuse Twig\\Attribute\\AsTwigFunction;\n\nclass ProjectExtension\n{\n    public function __construct(private LipsumProvider $lipsumProvider) {}\n\n    #[AsTwigFunction('lipsum')]\n    public function lipsum(int $count): string\n    {\n        return $this->lipsumProvider->lipsum($count);\n    }\n}\n\n$twig = new \\Twig\\Environment($loader);\n$twig->addExtension(new \\Twig\\Extension\\AttributeExtension(ProjectExtension::class));\n$twig->addRuntimeLoader(new \\Twig\\RuntimeLoader\\FactoryLoader([\n    ProjectExtension::class => function () use ($lipsumProvider) {\n        return new ProjectExtension($lipsumProvider);\n    },\n]));\n```\n\n----------------------------------------\n\nTITLE: Creating a Twig Runtime Class\nDESCRIPTION: Demonstrates how to create a dedicated runtime class for Twig extensions. This class handles the actual implementation logic and dependencies, separating them from the extension definition.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nclass CustomTwigRuntime\n{\n    private $rot13Provider;\n\n    public function __construct($rot13Provider)\n    {\n        $this->rot13Provider = $rot13Provider;\n    }\n\n    public function rot13($value)\n    {\n        return $this->rot13Provider->rot13($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Style Number Formatting in Twig\nDESCRIPTION: Example of using the currency style with format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{# $1,234.56 #}\n{{ 1234.56 | format_number(style: 'currency', locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Defining CVA Variants with html_cva in Twig\nDESCRIPTION: This snippet demonstrates how to use the html_cva function to define base classes and variants for a reusable alert component. It sets up color and size variants that can be applied dynamically.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/alert.html.twig #}\n{% set alert = html_cva(\n    base: 'alert',\n    variants: {\n        color: {\n            blue: 'bg-blue',\n            red: 'bg-red',\n            green: 'bg-green',\n        },\n        size: {\n            sm: 'text-sm',\n            md: 'text-md',\n            lg: 'text-lg',\n        }\n    }\n) %}\n\n<div class=\"{{ alert.apply({color, size}, class) }}\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Twig Filter with Mappings\nDESCRIPTION: Demonstrates filtering a mapping (associative array) with the filter function, retaining only entries with values greater than 38.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/filter.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set sizes = {\n    xs: 34,\n    s:  36,\n    m:  38,\n    l:  40,\n    xl: 42,\n} %}\n\n{% for k, v in sizes|filter(v => v > 38) -%}\n    {{ k }} = {{ v }}\n{% endfor %}\n{# output l = 40 xl = 42 #}\n```\n\n----------------------------------------\n\nTITLE: Changing Default Formatting Options for number_format in Twig\nDESCRIPTION: Shows how to change the default formatting options for number_format filter through the Twig core extension. The defaults can be overridden upon each filter call.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/number_format.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setNumberFormat(3, '.', ',');\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Dumping in Twig\nDESCRIPTION: Simple example of dumping a single variable's information for debugging purposes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/dump.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user) }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Locale for timezone_names Function in Twig\nDESCRIPTION: Shows how to use the timezone_names function with a specific locale (French in this example) to get localized timezone names.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/timezone_names.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ timezone_names('fr')|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Using Range Function with Step Parameter in Twig\nDESCRIPTION: Shows how to use the range function with a step parameter to generate a sequence with custom increments, in this case, even numbers from 0 to 6.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/range.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in range(0, 6, 2) %}\n    {{ i }},\n{% endfor %}\n\n{# outputs 0, 2, 4, 6, #}\n```\n\n----------------------------------------\n\nTITLE: Advanced Sorting with Arrow Function in Twig\nDESCRIPTION: Shows how to use an arrow function with the 'sort' filter to sort a list of fruits based on their quantity. The example also demonstrates chaining with the 'column' filter to extract names.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/sort.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set fruits = [\n    {name: 'Apples', quantity: 5},\n    {name: 'Oranges', quantity: 2},\n    {name: 'Grapes', quantity: 4},\n] %}\n\n{% for fruit in fruits|sort((a, b) => a.quantity <=> b.quantity)|column('name') %}\n    {{ fruit }}\n{% endfor %}\n\n{# output in this order: Oranges, Grapes, Apples #}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Twig Runtime Loader\nDESCRIPTION: Shows how to create a RuntimeLoader class that implements the RuntimeLoaderInterface to decouple extension definitions from runtime implementations. This loader enables instantiation of runtime classes with their dependencies.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nclass RuntimeLoader implements \\Twig\\RuntimeLoader\\RuntimeLoaderInterface\n{\n    public function load($class)\n    {\n        // implement the logic to create an instance of $class\n        // and inject its dependencies\n        // most of the time, it means using your dependency injection container\n        if ('CustomTwigRuntime' === $class) {\n            return new $class(new Rot13Provider());\n        } else {\n            // ...\n        }\n    }\n}\n\n$twig->addRuntimeLoader(new RuntimeLoader());\n```\n\n----------------------------------------\n\nTITLE: Testing for Even Numbers in Twig\nDESCRIPTION: Shows how to use the 'is even' test operator to check if a variable contains an even number. Returns true if the number is even, false otherwise.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/even.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ var is even }}\n```\n\n----------------------------------------\n\nTITLE: Applying map Filter to an Associative Array with Key Access in Twig\nDESCRIPTION: This example shows how to use the map filter with an arrow function that receives both the value and key of an associative array. The arrow function formats each entry using both the key and value, and the results are joined with commas.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/map.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set people = {\n    \"Bob\": \"Smith\",\n    \"Alice\": \"Dupond\",\n} %}\n\n{{ people|map((value, key) => \"#{key} #{value}\")|join(', ') }}\n{# outputs Bob Smith, Alice Dupond #}\n```\n\n----------------------------------------\n\nTITLE: Getting Fully Qualified Class Name\nDESCRIPTION: Shows how to retrieve the fully qualified class name of an object using the special 'class' constant.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/constant.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ constant('class', date) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Twig Extension Interface in PHP\nDESCRIPTION: Interface definition for creating Twig extensions. It specifies methods for adding token parsers, node visitors, filters, tests, functions, and operators.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\ninterface \\Twig\\Extension\\ExtensionInterface\n{\n    public function getTokenParsers();\n    public function getNodeVisitors();\n    public function getFilters();\n    public function getTests();\n    public function getFunctions();\n    public function getOperators();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of striptags Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the striptags filter to remove all HTML/XML tags from a variable.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/striptags.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ some_html|striptags }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Math Calculations with number_format in Twig\nDESCRIPTION: Shows how to properly format math calculations by using parentheses to control operator precedence according to Twig's expression rules.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/number_format.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ 1 + 0.2|number_format(2) }} {# outputs : 1.2 #}\n{{ (1 + 0.2)|number_format(2) }} {# outputs : 1.20 #}\n```\n\n----------------------------------------\n\nTITLE: HTML-Formatted Variable Dump in Twig\nDESCRIPTION: Example showing how to wrap the dump output in HTML pre tags for better readability.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/dump.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<pre>\n    {{ dump(user) }}\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Using script_names Function with Default Locale in Twig\nDESCRIPTION: This snippet demonstrates how to use the script_names function in Twig to get a list of script names using the current locale. The result is joined into a comma-separated string.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/script_names.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Adlam, Afaka, ... #}\n{{ script_names()|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Capturing HTML Content in Twig\nDESCRIPTION: Demonstrates how to capture a block of HTML content into a variable using the set tag.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/set.rst#2025-04-14_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set content %}\n    <div id=\"pagination\">\n        ...\n    </div>\n{% endset %}\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Variables with Types in Twig\nDESCRIPTION: Demonstrates how to declare optional variables using a '?' suffix in the 'types' tag within a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/types.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% types {\n    is_correct: 'boolean',\n    score?: 'number',\n} %}\n```\n\n----------------------------------------\n\nTITLE: Lenient Parsing with format_number in Twig\nDESCRIPTION: Example of using lenient parsing of input with the lenient_parse attribute.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{# 123 #}\n{{ 123|format_number({lenient_parse:true}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Escapers with Twig EscaperRuntime (Twig 3.10+)\nDESCRIPTION: Demonstrates how to define custom escapers in Twig 3.10 and later using the EscaperRuntime class. It includes an example of creating and using an 'identity' escaper that returns the string unchanged.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Runtime\\EscaperRuntime;\n\n$twig = new \\Twig\\Environment($loader);\n$escaper = fn ($string, $charset) => $string;\n$twig->getRuntime(EscaperRuntime::class)->setEscaper('identity', $escaper);\n\n# Usage in a template:\n# {{ 'Twig'|escape('identity') }}\n```\n\n----------------------------------------\n\nTITLE: Generated PHP Class for Twig Template\nDESCRIPTION: This code snippet shows an example of the PHP class generated by Twig's compiler for a simple 'Hello {{ name }}' template. It demonstrates how Twig templates are converted into executable PHP code.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/internals.rst#2025-04-14_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n/* Hello {{ name }} */\nclass __TwigTemplate_1121b6f109fe93ebe8c6e22e3712bceb extends Template\n{\n    protected function doDisplay(array $context, array $blocks = []): iterable\n    {\n        $macros = $this->macros;\n        // line 1\n        yield \"Hello \";\n        // line 2\n        yield $this->env->getRuntime('Twig\\Runtime\\EscaperRuntime')->escape((isset($context[\"name\"]) || array_key_exists(\"name\", $context) ? $context[\"name\"] : (function () { throw new RuntimeError('Variable \"name\" does not exist.', 2, $this->source); })()), \"html\", null, true);\n        return; yield '';\n    }\n\n    // some more code\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Attribute-Based Twig Extension in PHP\nDESCRIPTION: Shows how to register an attribute-based Twig extension using the AttributeExtension class.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->addExtension(new \\Twig\\Extension\\AttributeExtension(ProjectExtension::class));\n```\n\n----------------------------------------\n\nTITLE: Displaying Blocks from Other Templates in Twig\nDESCRIPTION: Shows how to use the 'block' function to display a block from another template. This allows for modular template design and reuse of block content across multiple templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/block.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ block(\"title\", \"common_blocks.html.twig\") }}\n```\n\n----------------------------------------\n\nTITLE: Preserving Whole Words with u.truncate in Twig\nDESCRIPTION: Demonstrates truncating strings while preserving whole words by using the third parameter of the truncate method.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Lorem ipsum dolor'|u.truncate(10, '...', false) }}\nLorem ipsum...\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Locale with format_datetime in Twig\nDESCRIPTION: Shows how to explicitly set the locale when formatting a datetime.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# 7 août 2019 23:39:12 #}\n{{ '2019-08-07 23:39:12'|format_datetime(locale: 'fr') }}\n```\n\n----------------------------------------\n\nTITLE: Join Filter with Custom Separators for Last Pair in Twig\nDESCRIPTION: Illustrates the use of join filter with two arguments: a regular separator and a special separator for the last pair of items.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/join.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ [1, 2, 3]|join(', ', ' and ') }}\n{# outputs 1, 2 and 3 #}\n```\n\n----------------------------------------\n\nTITLE: Multiple Variable Dumping in Twig\nDESCRIPTION: Example showing how to dump multiple variables at once by passing additional arguments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/dump.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user, categories) }}\n```\n\n----------------------------------------\n\nTITLE: Using script_names Function with Specified Locale in Twig\nDESCRIPTION: This example shows how to use the script_names function in Twig with an explicitly specified locale ('fr' for French). The result is joined into a comma-separated string.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/script_names.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# Adlam, Afaka, ... #}\n{{ script_names('fr')|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Variable Scope in Twig Loops - Valid Example\nDESCRIPTION: Shows the correct way to declare a variable for use both inside and outside a loop scope.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/set.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set value = \"\" %}\n{% for item in items %}\n    {% set value = item %}\n{% endfor %}\n\n{# value is available #}\n```\n\n----------------------------------------\n\nTITLE: Updating Function Expression Class Implementation in PHP\nDESCRIPTION: Demonstrates how to update class implementation for function expressions to support first-class Twig callable with the new FirstClassTwigCallableReady attribute.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ReadyFunctionExpression extends FunctionExpression\n{\n    #[FirstClassTwigCallableReady]\n    public function __construct(TwigFunction|string $function, Node $arguments, int $lineno)\n    {\n        parent::__construct($function, $arguments, $lineno);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timezone Globally in PHP\nDESCRIPTION: Demonstrates how to set the default timezone globally for all date operations by calling the setTimezone() method on the core extension instance.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setTimezone('Europe/Paris');\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Join Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the join filter to concatenate items in a sequence without a separator.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/join.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ [1, 2, 3]|join }}\n{# returns 123 #}\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Source Function Usage\nDESCRIPTION: Demonstrates basic usage of the source function to retrieve template content without rendering. Shows both static template name and variable usage.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/source.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ source('template.html.twig') }}\n{{ source(some_var) }}\n```\n\n----------------------------------------\n\nTITLE: Manually adding the StringExtension to Twig Environment\nDESCRIPTION: PHP code showing how to explicitly add the StringExtension to the Twig environment for non-Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/singular.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\String\\StringExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new StringExtension());\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Variable Types in Twig\nDESCRIPTION: Shows how to declare types for multiple variables using the 'types' tag in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/types.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% types\n    is_correct: 'boolean',\n    score: 'number',\n%}\n```\n\n----------------------------------------\n\nTITLE: Template Include with Variable Storage\nDESCRIPTION: Demonstrates storing rendered template content in variables using both include tag and function approaches.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# Store a rendered template in a variable #}\n{% set content %}\n    {% include 'template.html.twig' %}\n{% endset %}\n{# vs #}\n{% set content = include('template.html.twig') %}\n```\n\n----------------------------------------\n\nTITLE: Testing for Null Values in Twig\nDESCRIPTION: Demonstrates how to check if a variable is null using Twig's built-in test operator. The expression returns true if the variable is null. The 'none' keyword can be used as an alias for 'null'.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/null.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ var is null }}\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Variants with html_cva in Twig\nDESCRIPTION: This snippet shows how to define compound variants using html_cva. Compound variants apply additional classes when multiple variant conditions are met simultaneously.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set alert = html_cva(\n    base: 'alert',\n    variants: {\n        color: {\n            blue: 'bg-blue',\n            red: 'bg-red',\n            green: 'bg-green',\n        },\n        size: {\n            sm: 'text-sm',\n            md: 'text-md',\n            lg: 'text-lg',\n        }\n    },\n    compound_variants: [{\n        # if color = red AND size = (md or lg), add the `font-bold` class\n        color: ['red'],\n        size: ['md', 'lg'],\n        class: 'font-bold',\n    }]\n) %}\n\n<div class=\"{{ alert.apply({color, size}) }}\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Charset-aware Filters\nDESCRIPTION: PHP code showing how to create a Twig filter that receives the charset as an argument.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('rot13', function (string $charset, $string) {\n    return str_rot13($string);\n}, ['needs_charset' => true]);\n```\n\n----------------------------------------\n\nTITLE: AngularJS Integration Configuration\nDESCRIPTION: Shows how to configure AngularJS interpolation symbols to avoid conflicts with Twig template syntax.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nangular.module('myApp', []).config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('{[').endSymbol(']}');\n});\n```\n\n----------------------------------------\n\nTITLE: Converting String to Title Case using Twig Filter\nDESCRIPTION: Shows how to use the title filter to convert a lowercase string into title case format where each word's first letter is capitalized. The example converts 'my first car' to 'My First Car'.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/title.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'my first car'|title }}\n\n{# outputs 'My First Car' #}\n```\n\n----------------------------------------\n\nTITLE: Using the 'only' Keyword with the 'with' Tag in Twig\nDESCRIPTION: This snippet demonstrates how to use the 'only' keyword with the 'with' tag in Twig to disable access to the outer scope context within the inner scope.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/with.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set zero = 0 %}\n{% with {value: 42} only %}\n    {# only value is defined #}\n    {# zero is not defined #}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Rounding Numbers with Twig's round Filter\nDESCRIPTION: Demonstrates basic usage of the 'round' filter in Twig to round numbers. The filter can be used with or without arguments to specify precision and rounding method.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/round.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 42.55|round }}\n{# outputs 43 #}\n\n{{ 42.55|round(1, 'floor') }}\n{# outputs 42.5 #}\n```\n\n----------------------------------------\n\nTITLE: Basic Number Formatting with format_number Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the format_number filter to format a numeric string.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ '12.345'|format_number }}\n```\n\n----------------------------------------\n\nTITLE: Converting Text to Lowercase using Twig's lower Filter\nDESCRIPTION: Demonstrates how to use the lower filter in Twig to convert a string to lowercase. The example shows 'WELCOME' being converted to 'welcome'.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/lower.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'WELCOME'|lower }}\n\n{# outputs 'welcome' #}\n```\n\n----------------------------------------\n\nTITLE: Checking Macro Definition in Twig\nDESCRIPTION: Demonstrates how to check if a macro is defined using the defined test operator.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/macro.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% import \"macros.html.twig\" as macros %}\n\n{% from \"macros.html.twig\" import hello %}\n\n{% if macros.hello is defined -%}\n    OK\n{% endif %}\n\n{% if hello is defined -%}\n    OK\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Converting Text to Uppercase with Twig's upper Filter\nDESCRIPTION: This snippet demonstrates how to use the 'upper' filter in Twig to convert a string value to uppercase. The filter is applied using the pipe syntax and converts the string 'welcome' to 'WELCOME'.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/upper.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'welcome'|upper }}\n\n{# outputs 'WELCOME' #}\n```\n\n----------------------------------------\n\nTITLE: Using Find Filter with Keys in Twig\nDESCRIPTION: Example of using the find filter where the arrow function accesses both the value and key. This demonstrates checking if a specific character is not present in the key.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/find.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ sizes|find((v, k) => 's' not in k) }}\n\n{# output 38 #}\n```\n\n----------------------------------------\n\nTITLE: Creating Filters with Automatic Escaping\nDESCRIPTION: PHP code showing how to create a Twig filter that outputs raw HTML content.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('nl2br', 'nl2br', ['is_safe' => ['html']]);\n```\n\n----------------------------------------\n\nTITLE: Spacing for Named Arguments in Twig\nDESCRIPTION: Demonstrates proper spacing when using named arguments in Twig. Put exactly one space after the ':' sign when using named arguments.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_input(class: \"input\") }}\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding with Multiple Options in Twig\nDESCRIPTION: Illustrates how to combine multiple JSON encoding options using bitwise operators in Twig templates. Combines JSON_PRETTY_PRINT and JSON_HEX_QUOT options.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/json_encode.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ data|json_encode(constant('JSON_PRETTY_PRINT') b-or constant('JSON_HEX_QUOT')) }}\n```\n\n----------------------------------------\n\nTITLE: Twig Method Calls and Spread Operator\nDESCRIPTION: Examples of method calls with arguments and spread operator usage\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n{{ html.generate_input() }}\n{{ html.generate_input('pwd', 'password') }}\n{# or using named arguments #}\n{{ html.generate_input(name: 'pwd', type: 'password') }}\n\n{% set numbers = [1, 2, ...moreNumbers] %}\n{% set ratings = {'q1': 10, 'q2': 5, ...moreRatings} %}\n\n{{ 'Hello %s %s!'|format(...['Fabien', 'Potencier']) }}\n```\n\n----------------------------------------\n\nTITLE: Executing Expression without Output in Twig\nDESCRIPTION: The 'do' tag in Twig allows executing expressions without printing any output. It functions similarly to the regular variable expression '{{ ... }}', but doesn't display the result. This is useful for performing operations that don't need to be rendered in the template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/do.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do 1 + 2 %}\n```\n\n----------------------------------------\n\nTITLE: Converting ISO-3166 Country Code to Country Name in Twig\nDESCRIPTION: Demonstrates how to use the country_name filter to convert an ISO-3166 country code to its country name using the current locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/country_name.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# France #}\n{{ 'FR'|country_name }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode for Specific Template in Twig\nDESCRIPTION: Demonstrates how to enable sandbox mode for a specific template inclusion using the 'sandboxed' option. This allows for selective sandboxing of untrusted template code.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/sandbox.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('user.html.twig', sandboxed: true) }}\n```\n\n----------------------------------------\n\nTITLE: Using 'not' in Twig If Statement\nDESCRIPTION: Demonstrates the use of 'not' to check for a false condition in Twig. This example checks if a user is not subscribed to a mailing list.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/if.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if not user.subscribed %}\n    <p>You are not subscribed to our mailing list.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Slug Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the slug filter to transform a string with special characters into a URL-friendly format with dash separators.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slug.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Wôrķšƥáçè ~~sèťtïñğš~~'|slug }}\nWorkspace-settings\n```\n\n----------------------------------------\n\nTITLE: Ordinal Style Number Formatting in Twig\nDESCRIPTION: Example of using the ordinal style with format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n{# 1st #}\n{{ 1 | format_number(style: 'ordinal', locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Using abs Filter in Twig\nDESCRIPTION: Demonstrates how to use the abs filter in Twig to get the absolute value of a number. The example shows converting -5 to 5.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/abs.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# number = -5 #}\n\n{{ number|abs }}\n\n{# outputs 5 #}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Sandbox Mode in PHP\nDESCRIPTION: Shows how to enable sandbox mode globally for all templates by passing true as the second argument to the SandboxExtension constructor.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/sandbox.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$twig->addExtension(new \\Twig\\Extension\\SandboxExtension($policy, true));\n```\n\n----------------------------------------\n\nTITLE: Cycling Through Multiple Values in Twig\nDESCRIPTION: This example shows how to cycle through a sequence with more than two values. It uses an array of fruits ['apple', 'orange', 'citrus'] and cycles through them based on the position index in a loop from 0 to 10.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/cycle.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set fruits = ['apple', 'orange', 'citrus'] %}\n\n{% for i in 0..10 %}\n    {{ cycle(fruits, i) }}\n{% endfor %}\n\n{# outputs\n\n    apple\n    orange\n    citrus\n    apple\n    orange\n    citrus\n    apple\n    orange\n    citrus\n    apple\n    orange\n\n#}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Twig Loader Interface in PHP\nDESCRIPTION: Outlines the LoaderInterface that must be implemented by custom Twig loaders, including methods for retrieving source context and cache keys for templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ninterface \\Twig\\Loader\\LoaderInterface\n{\n    public function getSourceContext($name);\n    public function getCacheKey($name);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the extra-bundle for Symfony projects\nDESCRIPTION: Command to install the twig/extra-bundle package for Symfony projects after installing the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_name.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Named Template String Loading in Twig\nDESCRIPTION: Example of loading a template from string with a custom name for better error messaging\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/template_from_string.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ include(template_from_string(page.template, \"template for page \" ~ page.name)) }}\n```\n\n----------------------------------------\n\nTITLE: Applying markdown_to_html filter to included files and variables in Twig\nDESCRIPTION: This snippet illustrates how to use the markdown_to_html filter on an included file or a variable in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/markdown_to_html.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('some_template.markdown.twig')|markdown_to_html }}\n\n{{ changelog|markdown_to_html }}\n```\n\n----------------------------------------\n\nTITLE: Raw Variable Output in Twig\nDESCRIPTION: Example of using the raw filter to output unescaped HTML content in Twig templates\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ article.to_html|raw }}\n```\n\n----------------------------------------\n\nTITLE: Block Usage in Loops\nDESCRIPTION: Illustrates how blocks work within loops and their overriding behavior in child templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_9\n\nLANGUAGE: html+twig\nCODE:\n```\n{# base.html.twig #}\n{% for post in posts %}\n    {% block post %}\n        <h1>{{ post.title }}</h1>\n        <p>{{ post.body }}</p>\n    {% endblock %}\n{% endfor %}\n\n{# child.html.twig #}\n{% extends \"base.html.twig\" %}\n\n{% block post %}\n    <article>\n        <header>{{ post.title }}</header>\n        <section>{{ post.text }}</section>\n    </article>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Applying inky_to_html Filter to Template Content in Twig\nDESCRIPTION: This snippet demonstrates how to use the inky_to_html filter to process an Inky email template directly within a Twig template. It shows the conversion of Inky's row and columns structure.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inky_to_html.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply inky_to_html %}\n    <row>\n        <columns large=\"6\"></columns>\n        <columns large=\"6\"></columns>\n    </row>\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Scientific Style Number Formatting in Twig\nDESCRIPTION: Example of using the scientific style with format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{# 1.23456789e+3 #}\n{{ 1234.56789 | format_number(style: 'scientific', locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Batch Filter Output Example with Preserved Keys\nDESCRIPTION: Demonstrates the rendered HTML output of the batch filter when keys are preserved, showing how indices continue sequentially across rows.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/batch.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n<table>\n    <tr>\n        <td>0 - a</td>\n        <td>1 - b</td>\n        <td>2 - c</td>\n    </tr>\n    <tr>\n        <td>3 - d</td>\n        <td>4 - No item</td>\n        <td>5 - No item</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Shuffling a string in Twig\nDESCRIPTION: Example demonstrating how to shuffle the characters of a string using the shuffle filter in Twig.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/shuffle.rst#2025-04-14_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set string = 'ghi' %}\n\n<p>{{ string|shuffle }}</p>\n```\n\n----------------------------------------\n\nTITLE: Streaming Twig Templates in PHP\nDESCRIPTION: Shows how to stream a template or a specific block of a template. This feature was added in Twig version 3.18 and returns an iterable.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$template->stream(['the' => 'variables', 'go' => 'here']);\n\n$template->streamBlock('block_name', ['the' => 'variables', 'go' => 'here']);\n```\n\n----------------------------------------\n\nTITLE: Basic Spaceless Filter Usage in Twig\nDESCRIPTION: Demonstrates how to use the spaceless filter to remove whitespace between HTML tags. The filter processes inline HTML content and removes extra spaces and line breaks between tags while preserving content within tags.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/spaceless.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{{\\n    \"<div>\\n        <strong>foo</strong>\\n    </div>\\n    \"|spaceless }}\\n\\n{# output will be <div><strong>foo</strong></div> #}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony Projects\nDESCRIPTION: Command to install the twig/extra-bundle for Symfony projects after installing the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/timezone_name.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension Dependency with Composer\nDESCRIPTION: Command to install the required IntlExtension package using Composer, which is needed for the country_names function to work.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_names.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Basic Slice Filter Usage in Twig\nDESCRIPTION: Demonstrates basic usage of the slice filter for arrays and strings with explicit start and length parameters.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slice.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in [1, 2, 3, 4, 5]|slice(1, 2) %}\n    {# will iterate over 2 and 3 #}\n{% endfor %}\n\n{{ '12345'|slice(1, 2) }}\n\n{# outputs 23 #}\n```\n\n----------------------------------------\n\nTITLE: Using tailwind_merge with html_cva in Twig\nDESCRIPTION: This snippet demonstrates how to use the tailwind_merge filter in combination with html_cva to resolve potential class conflicts when using Tailwind CSS.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set alert = html_cva(\n    ...\n) %}\n\n<div class=\"{{ alert.apply({color, size}, class)|tailwind_merge }}\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Global Object for Lipsum Generation\nDESCRIPTION: Example of implementing Lorem ipsum generation using a global object with methods in Twig templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ text.lipsum(40) }}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Pattern with format_datetime in Twig\nDESCRIPTION: Demonstrates using a custom ICU pattern string to format datetime with specific output requirements.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# 11 oclock PM, GMT #}\n{{ '2019-08-07 23:39:12'|format_datetime(pattern: \"hh 'oclock' a, zzzz\") }}\n```\n\n----------------------------------------\n\nTITLE: Using Find Filter with Context Variables in Twig\nDESCRIPTION: Example showing how the arrow function in a find filter has access to the current template context. A context variable is used in the comparison condition to find the first matching element.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/find.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set my_size = 39 %}\n\n{{ sizes|find(v => v >= my_size) }}\n\n{# output 40 #}\n```\n\n----------------------------------------\n\nTITLE: Using Multiplier with format_number in Twig\nDESCRIPTION: Demonstrates how to multiply a value before formatting using the multiplier attribute.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{# 123,000 #}\n{{ 123|format_number({multiplier:1000}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Batch Filter Usage with Reset Keys\nDESCRIPTION: Shows how to use the batch filter with preserve_keys set to false, causing index numbers to reset for each new batch.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/batch.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set items = ['a', 'b', 'c', 'd'] %}\n\n<table>\n    {% for row in items|batch(3, 'No item', false) %}\n        <tr>\n            {% for index, column in row %}\n                <td>{{ index }} - {{ column }}</td>\n            {% endfor %}\n        </tr>\n    {% endfor %}\n</table>\n```\n\n----------------------------------------\n\nTITLE: Manually Adding IntlExtension to Twig Environment\nDESCRIPTION: PHP code for manually adding the IntlExtension to a Twig environment when not using Symfony or automatic extension loading.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/timezone_name.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Parent Block Implementation\nDESCRIPTION: Shows how to render parent block content using the parent() function while adding additional content.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Vertical Boxes Skeleton Template in Twig\nDESCRIPTION: Shows a template that defines a vertical box structure with top and bottom blocks, which can be embedded and customized in other templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/embed.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n<div class=\"top_box\">\n    {% block top %}\n        Top box default content\n    {% endblock %}\n</div>\n\n<div class=\"bottom_box\">\n    {% block bottom %}\n        Bottom box default content\n    {% endblock %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony Projects\nDESCRIPTION: For Symfony projects, this command installs the twig/extra-bundle, which is necessary for using the InkyExtension. It uses Composer to add the package to the project.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inky_to_html.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Join Filter with Custom Separator in Twig\nDESCRIPTION: Shows how to use the join filter with a custom separator specified as the first argument.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/join.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ [1, 2, 3]|join('|') }}\n{# outputs 1|2|3 #}\n```\n\n----------------------------------------\n\nTITLE: Declaring Single Variable Type in Twig\nDESCRIPTION: Demonstrates how to use the 'types' tag to declare the type of a single variable in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/types.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% types is_correct: 'boolean' %}\n{% types score: 'number' %}\n```\n\n----------------------------------------\n\nTITLE: Handling Null Date Values with Ternary Operator\nDESCRIPTION: Demonstrates how to handle null date values using a ternary operator to return an empty string instead of the current date (which is the default behavior).\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/date.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.published_at is empty ? \"\" : post.published_at|date(\"m/d/Y\") }}\n```\n\n----------------------------------------\n\nTITLE: Block Nesting with Loop\nDESCRIPTION: Shows how blocks can be nested within loops while maintaining access to outer scope variables.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n{% for item in seq %}\n    <li>{% block loop_item %}{{ item }}{% endblock %}</li>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Escaping Dynamic HTML Attribute Names in Twig\nDESCRIPTION: Demonstrates how to use the html_attr escaping strategy for dynamic HTML attribute names, which is useful when attribute names themselves are generated dynamically.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_6\n\nLANGUAGE: html+twig\nCODE:\n```\n<p {{ your_html_attr|e('html_attr') }}=\"attribute value\">\n```\n\n----------------------------------------\n\nTITLE: Currency Formatting with Padding\nDESCRIPTION: Shows how to format currency with specific width and padding position.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_currency.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ 123 | format_currency('EUR', {format_width:10, padding_position:'before_suffix'}, 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Using the currency_name filter with a specific locale\nDESCRIPTION: Example of using the currency_name filter with an explicit locale parameter to display currency names in a specific language.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_name.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# yen japonais #}\n{{ 'JPY'|currency_name('fr_FR') }}\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment Manually\nDESCRIPTION: PHP code showing how to add the IntlExtension manually to the Twig environment when not using Symfony's automatic extension registration.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_time.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Using Parent Function with Imported Blocks\nDESCRIPTION: Shows how to use the parent() function to access the original content of imported blocks.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/use.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% use \"blocks.html.twig\" %}\n\n{% block sidebar %}\n    {{ parent() }}\n{% endblock %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Manual Twig Extension Registration\nDESCRIPTION: PHP code showing how to manually register the IntlExtension in the Twig environment\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/language_names.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Setting Width and Padding with format_number in Twig\nDESCRIPTION: Demonstrates how to set width and padding for formatted numbers using format_width and padding_position attributes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{# 123 #}\n{{ 123|format_number({format_width:10, padding_position:'before_suffix'}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Decimal Style Number Formatting in Twig\nDESCRIPTION: Example of using the decimal style with format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{# 1,234.568 #}\n{{ 1234.56789 | format_number(style: 'decimal', locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Spacing in Twig Sequences and Mappings Brackets\nDESCRIPTION: Demonstrates proper spacing for sequence and mapping brackets in Twig. Do not put any spaces before and after the opening and closing brackets.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n[1, 2, 3]\n{'name': 'Fabien'}\n```\n\n----------------------------------------\n\nTITLE: Using convert_encoding Filter in Twig to Convert String Charset\nDESCRIPTION: Demonstrates how to use the convert_encoding filter to convert a string from iso-2022-jp encoding to UTF-8. This filter requires the PHP iconv extension to function properly.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/convert_encoding.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}\n```\n\n----------------------------------------\n\nTITLE: Spaceless with Apply Tag in Twig\nDESCRIPTION: Shows how to use the spaceless filter with the apply tag to process larger blocks of HTML content. This approach is useful when working with multiline HTML blocks that need whitespace removal between tags.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/spaceless.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply spaceless %}\\n    <div>\\n        <strong>foo</strong>\\n    </div>\\n{% endapply %}\\n\\n{# output will be <div><strong>foo</strong></div> #}\n```\n\n----------------------------------------\n\nTITLE: Displaying Country Names with Default Locale in Twig\nDESCRIPTION: This snippet demonstrates how to use the country_names function with the default locale (current locale) and join the results with commas.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_names.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Afghanistan, Åland Islands, ... #}\n{{ country_names()|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Country Names with Specific Locale in Twig\nDESCRIPTION: This snippet shows how to explicitly specify a locale (French in this example) when using the country_names function and join the results with commas.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_names.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# Afghanistan, Afrique du Sud, ... #}\n{{ country_names('fr')|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Manually Adding IntlExtension to Twig Environment\nDESCRIPTION: Code example showing how to manually add the IntlExtension to a Twig environment for non-Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Customizing Number Format with Attributes in Twig\nDESCRIPTION: Shows how to customize number formatting by passing attributes to the format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# 12.34 #}\n{{ '12.345'|format_number({rounding_mode: 'floor'}) }}\n\n{# 1000000.0000 #}\n{{ '1000000'|format_number({fraction_digit: 4}) }}\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment in PHP\nDESCRIPTION: PHP code snippet showing how to explicitly add the IntlExtension to a Twig environment when not using Symfony's bundle system.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/currency_names.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Block Renaming with Use Statement\nDESCRIPTION: Demonstrates how to import blocks with custom names to avoid conflicts using the 'with' keyword.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/use.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% use \"blocks.html.twig\" with sidebar as base_sidebar, title as base_title %}\n\n{% block sidebar %}{% endblock %}\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Significant Digits with format_number in Twig\nDESCRIPTION: Shows how to control significant digits in number formatting using significant_digits_used attributes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{# 123.4568 #}\n{{ 123.456789|format_number({significant_digits_used:true, min_significant_digits_used:4, max_significant_digits_used:7}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Using currency_symbol Filter in Twig\nDESCRIPTION: Demonstrates how to use the currency_symbol filter to display currency symbols for different ISO 4217 codes. It shows examples for Euro and Japanese Yen.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_symbol.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# € #}\n{{ 'EUR'|currency_symbol }}\n\n{# ¥ #}\n{{ 'JPY'|currency_symbol }}\n```\n\n----------------------------------------\n\nTITLE: Using min Function with Mappings in Twig\nDESCRIPTION: This example shows how the min function behaves when used with a mapping (associative array) in Twig. It ignores the keys and compares only the values, returning the lowest value.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/min.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ min({2: \"e\", 3: \"a\", 1: \"b\", 5: \"d\", 4: \"c\"}) }}\n{# returns \"a\" #}\n```\n\n----------------------------------------\n\nTITLE: Locale Name Display with Explicit Target Locale\nDESCRIPTION: Shows how to use the locale_name filter with explicitly specified target locales, including examples for both simple and complex locale codes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/locale_name.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'de'|locale_name('fr') }}\n\n{{ 'fr_CA'|locale_name('fr_FR') }}\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension via Composer\nDESCRIPTION: Shows the command to install the IntlExtension using Composer. This extension is required for the country_timezones function to work.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_timezones.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Manually Adding the String Extension to Twig Environment\nDESCRIPTION: PHP code showing how to manually add the StringExtension to a Twig Environment when not using Symfony's bundle system.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slug.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\String\\StringExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new StringExtension());\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Different Styles in Twig\nDESCRIPTION: Demonstrates how to format numbers in various styles like percent, spellout, and duration.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{# 1,234% #}\n{{ '12.345'|format_number(style: 'percent') }}\n\n{# twelve point three four five #}\n{{ '12.345'|format_number(style: 'spellout') }}\n\n{# 12 sec. #}\n{{ '12'|format_duration_number }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Lipsum Tag in Expressions\nDESCRIPTION: Example showing why using custom tags like lipsum in expressions is problematic in Twig templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'some text' ~ {% lipsum 40 %} ~ 'some more text' }}\n```\n\n----------------------------------------\n\nTITLE: Array/String Slicing with Bracket Syntax in Twig\nDESCRIPTION: Demonstrates the alternative bracket syntax for slicing arrays and strings, including various syntactic sugar options.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slice.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in [1, 2, 3, 4, 5][start:length] %}\n    {# ... #}\n{% endfor %}\n\n{{ '12345'[1:2] }} {# will display \"23\" #}\n\n{# you can omit the first argument -- which is the same as 0 #}\n{{ '12345'[:2] }} {# will display \"12\" #}\n\n{# you can omit the last argument -- which will select everything till the end #}\n{{ '12345'[2:] }} {# will display \"345\" #}\n\n{# you can use a negative value -- for example to remove characters at the end #}\n{{ '12345'[:-2] }} {# will display \"123\" #}\n```\n\n----------------------------------------\n\nTITLE: Percentage Style Number Formatting in Twig\nDESCRIPTION: Example of using the percent style with format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{# 12% #}\n{{ 0.1234 | format_number(style: 'percent', locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Basic Guard Tag Usage in Twig\nDESCRIPTION: Demonstrates basic usage of the guard tag to check if the importmap function is available before compilation. If the function is not available, the code block will not be compiled.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/guard.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% guard function importmap %}\n    {{ importmap('app') }}\n{% endguard %}\n```\n\n----------------------------------------\n\nTITLE: Using the shuffle filter with a sequence in Twig\nDESCRIPTION: Basic example of using the shuffle filter in a for loop to randomly shuffle a sequence of users before iteration.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/shuffle.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in users|shuffle %}\n    ...\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring StringLoaderExtension in PHP\nDESCRIPTION: PHP configuration examples for enabling template_from_string function, including both Symfony services and direct Twig environment setup\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/template_from_string.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$services->set(\\Twig\\Extension\\StringLoaderExtension::class);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extension\\StringLoaderExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new StringLoaderExtension());\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony Projects\nDESCRIPTION: Provides the command to install the twig/extra-bundle, which is necessary for Symfony projects to use the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_timezones.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Test Documentation TOC\nDESCRIPTION: Restructured text markup defining a table of contents for Twig test documentation, listing various test types like constant, defined, divisibleby, etc.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    constant\n    defined\n    divisibleby\n    empty\n    even\n    iterable\n    null\n    odd\n    sameas\n```\n\n----------------------------------------\n\nTITLE: Converting String Case with u.snake and u.camel in Twig\nDESCRIPTION: Shows how to convert strings to snake_case or camelCase using the u filter with the snake and camel methods.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'SymfonyStringWithTwig'|u.snake }}\nsymfony_string_with_twig\n\n{{ 'symfony_string with twig'|u.camel.title }}\nSymfonyStringWithTwig\n```\n\n----------------------------------------\n\nTITLE: Using Shortcut Filters for Number Formatting in Twig\nDESCRIPTION: Demonstrates how to use shortcut filters like format_percent_number and format_spellout_number.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n{# 1,234% #}\n{{ '12.345'|format_percent_number }}\n\n{# twelve point three four five #}\n{{ '12.345'|format_spellout_number }}\n```\n\n----------------------------------------\n\nTITLE: Using country_timezones Function in Twig\nDESCRIPTION: Demonstrates how to use the country_timezones function to get timezones for a country. It takes an ISO-3166 country code as an argument and returns an array of timezone names.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_timezones.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Europe/Paris #}\n{{ country_timezones('FR')|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Negative Numbers with number_format in Twig\nDESCRIPTION: Demonstrates how to properly format negative numbers by using parentheses to control operator precedence. Note that not using parentheses is deprecated as of Twig 3.21.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/number_format.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ -9800.333|number_format(2, '.', ',') }} {# outputs : -9 #}\n{{ (-9800.333)|number_format(2, '.', ',') }} {# outputs : -9,800.33 #}\n```\n\n----------------------------------------\n\nTITLE: Sandboxing Included Templates in Twig\nDESCRIPTION: Demonstrates how to sandbox an included template for security when including templates created by end users.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/include.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('page.html.twig', sandboxed: true) }}\n```\n\n----------------------------------------\n\nTITLE: Shuffling an array in Twig and outputting as HTML list\nDESCRIPTION: Example demonstrating how to shuffle a simple array of items and iterate through the shuffled results to generate an HTML unordered list.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/shuffle.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set items = [\n    'a',\n    'b',\n    'c',\n] %}\n\n<ul>\n    {% for item in items|shuffle %}\n        <li>{{ item }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Extension to Twig Environment in PHP\nDESCRIPTION: This PHP code snippet shows how to add the Markdown Extension explicitly to the Twig environment when not using Symfony.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/markdown_to_html.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Markdown\\MarkdownExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new MarkdownExtension());\n```\n\n----------------------------------------\n\nTITLE: Using Current Date in Twig Templates\nDESCRIPTION: Demonstrates that when no argument is passed to the date function, it returns the current date. This example shows a comparison that will always be true.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/date.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if date(user.created_at) < date() %}\n    {# always! #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Intl Extension\nDESCRIPTION: Commands for installing the required Twig IntlExtension package and bundle.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_currency.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in Twig Templates\nDESCRIPTION: Example of using a globally defined object in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ text.lipsum(40) }}\n```\n\n----------------------------------------\n\nTITLE: Using Split Filter with Limit Argument in Twig\nDESCRIPTION: Shows how to use the split filter with a limit argument to control the number of resulting array elements.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/split.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set items = \"one,two,three,four,five\"|split(',', 3) %}\n{# items contains ['one', 'two', 'three,four,five'] #}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Separator with the Slug Filter in Twig\nDESCRIPTION: Shows how to use the slug filter with a custom separator by passing it as an argument, in this case using a forward slash instead of the default dash.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slug.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Wôrķšƥáçè ~~sèťtïñğš~~'|slug('/') }}\nWorkspace/settings\n```\n\n----------------------------------------\n\nTITLE: Batch Filter Output Example with Reset Keys\nDESCRIPTION: Shows the rendered HTML output when preserve_keys is set to false, demonstrating how indices reset for each new row.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/batch.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n<table>\n    <tr>\n        <td>0 - a</td>\n        <td>1 - b</td>\n        <td>2 - c</td>\n    </tr>\n    <tr>\n        <td>0 - d</td>\n        <td>1 - No item</td>\n        <td>2 - No item</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Named Block End-Tags\nDESCRIPTION: Demonstrates the use of named end-tags for better readability in nested blocks.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% block sidebar %}\n    {% block inner_sidebar %}\n        ...\n    {% endblock inner_sidebar %}\n{% endblock sidebar %}\n```\n\n----------------------------------------\n\nTITLE: Slice Filter with Preserve Keys Option in Twig\nDESCRIPTION: Shows how the preserve_keys argument affects array index handling when using the slice filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slice.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for key, value in [1, 2, 3, 4, 5]|slice(1, 2, true) %}\n    {{ key }} - {{ value }}\n{% endfor %}\n\n{# output\n    1 - 2\n    2 - 3\n#}\n\n{% for key, value in [1, 2, 3, 4, 5]|slice(1, 2) %}\n    {{ key }} - {{ value }}\n{% endfor %}\n\n{# output\n    0 - 2\n    1 - 3\n#}\n```\n\n----------------------------------------\n\nTITLE: Registering Markdown Runtime Loader in PHP for non-Symfony projects\nDESCRIPTION: This PHP code demonstrates how to register the Markdown extension runtime for non-Symfony projects, which is required for using the markdown_to_html filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/markdown_to_html.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Markdown\\DefaultMarkdown;\nuse Twig\\Extra\\Markdown\\MarkdownRuntime;\nuse Twig\\RuntimeLoader\\RuntimeLoaderInterface;\n\n$twig->addRuntimeLoader(new class implements RuntimeLoaderInterface {\n    public function load($class) {\n        if (MarkdownRuntime::class === $class) {\n            return new MarkdownRuntime(new DefaultMarkdown());\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind Extra Package for Twig\nDESCRIPTION: This bash command installs the tales-from-a-dev/twig-tailwind-extra package, which provides the tailwind_merge filter for resolving class conflicts when using CVA with Tailwind CSS.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require tales-from-a-dev/twig-tailwind-extra\n```\n\n----------------------------------------\n\nTITLE: Installing the Twig IntlExtension Package\nDESCRIPTION: Command to install the twig/intl-extra package which contains the format_time filter functionality using Composer.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_time.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Customizing Grouping Size with format_number in Twig\nDESCRIPTION: Shows how to set the size of primary and secondary grouping separators for number formatting.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# 1,23,45,678 #}\n{{ 12345678|format_number({grouping_size:3, secondary_grouping_size:2}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Splitting String into Equal Chunks in Twig\nDESCRIPTION: Demonstrates how to split a string into equal chunks when the delimiter is an empty string.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/split.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set items = \"123\"|split('') %}\n{# items contains ['1', '2', '3'] #}\n\n{% set items = \"aabbcc\"|split('', 2) %}\n{# items contains ['aa', 'bb', 'cc'] #}\n```\n\n----------------------------------------\n\nTITLE: Outputting Literal Delimiters in Twig\nDESCRIPTION: Demonstrates how to output literal delimiters that would normally be interpreted as the start of a Twig expression.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/templates.rst#2025-04-14_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{{ '{{' }}\n```\n\n----------------------------------------\n\nTITLE: Compiling Twig AST to PHP Code\nDESCRIPTION: This snippet illustrates how to manually compile a Twig Abstract Syntax Tree (AST) into PHP code using the compile() method of a Twig environment. The resulting PHP code can be used for runtime execution of the template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/internals.rst#2025-04-14_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$php = $twig->compile($nodes);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timezone Globally in Twig\nDESCRIPTION: Shows how to set a default timezone globally for all date operations in a Twig environment by calling setTimezone() on the core extension instance.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/date.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setTimezone('Europe/Paris');\n```\n\n----------------------------------------\n\nTITLE: Adding InkyExtension to Twig Environment in PHP\nDESCRIPTION: This PHP code snippet shows how to manually add the InkyExtension to a Twig Environment. It's used when not working with Symfony or when explicit extension addition is required.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inky_to_html.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Inky\\InkyExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new InkyExtension());\n```\n\n----------------------------------------\n\nTITLE: Applying Default Variants in Twig Templates\nDESCRIPTION: This snippet demonstrates how default variants are applied in templates when not explicitly specified.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# index.html.twig #}\n\n{{ include('alert.html.twig', {color: 'red', size: 'lg'}) }}\n{# class=\"alert bg-red text-lg rounded-md\" #}\n```\n\n----------------------------------------\n\nTITLE: Installing the Twig Extra Bundle for Symfony Projects\nDESCRIPTION: Command to install the Twig Extra Bundle for Symfony projects, which simplifies the integration of additional Twig extensions.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slug.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Customizing Date and Time Format in Twig\nDESCRIPTION: Shows different format options for date and time parts using format_datetime filter with locale support.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# 23:39 #}\n{{ '2019-08-07 23:39:12'|format_datetime('none', 'short', locale: 'fr') }}\n\n{# 07/08/2019 #}\n{{ '2019-08-07 23:39:12'|format_datetime('short', 'none', locale: 'fr') }}\n\n{# mercredi 7 août 2019 23:39:12 UTC #}\n{{ '2019-08-07 23:39:12'|format_datetime('full', 'full', locale: 'fr') }}\n```\n\n----------------------------------------\n\nTITLE: Installing StringExtension for the u Filter Using Composer\nDESCRIPTION: Shows the Composer command to install the StringExtension package which provides the u filter functionality.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/string-extra\n```\n\n----------------------------------------\n\nTITLE: Using the singular filter in Twig templates\nDESCRIPTION: Examples of using the singular filter to transform plural nouns into singular form. The filter can be used with default English rules or by specifying a different locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/singular.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# English (en) rules are used by default #}\n{{ 'partitions'|singular() }}\npartition\n\n{{ 'partitions'|singular('fr') }}\npartition\n```\n\n----------------------------------------\n\nTITLE: Using Lipsum as a Filter in Twig\nDESCRIPTION: Example of implementing Lorem ipsum generation using a custom filter in Twig templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 40|lipsum }}\n```\n\n----------------------------------------\n\nTITLE: Locale-Specific Language Names in Twig\nDESCRIPTION: Shows how to get language names in a specific locale (French in this example)\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/language_names.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# abkhaze, aceh, ... #}\n{{ language_names('fr')|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of currency_names Function in Twig\nDESCRIPTION: Demonstrates how to use the currency_names function with the default locale settings, returning a list of currency names which is then joined with commas.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/currency_names.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Afghan Afghani, Afghan Afghani (1927–2002), ... #}\n{{ currency_names()|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Installing InkyExtension via Composer\nDESCRIPTION: This command installs the InkyExtension, which is required for using the inky_to_html filter in Twig. It uses Composer to add the twig/inky-extra package to the project.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inky_to_html.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/inky-extra\n```\n\n----------------------------------------\n\nTITLE: Twig Functions Documentation Structure in RST\nDESCRIPTION: ReStructuredText markup defining the documentation structure for Twig's built-in functions. Uses toctree directive to organize function documentation into separate pages with maxdepth of 1.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    attribute\n    block\n    constant\n    cycle\n    date\n    dump\n    enum\n    enum_cases\n    html_classes\n    html_cva\n    include\n    max\n    min\n    parent\n    random\n    range\n    source\n    country_timezones\n    country_names\n    currency_names\n    language_names\n    locale_names\n    script_names\n    timezone_names\n    template_from_string\n```\n\n----------------------------------------\n\nTITLE: HTML output of shuffled array example\nDESCRIPTION: The rendered HTML output of the shuffled array example, showing one possible order of the items after shuffling.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/shuffle.rst#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <li>a</li>\n    <li>c</li>\n    <li>b</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Twig's Built-in '..' Operator for Range\nDESCRIPTION: Demonstrates the use of Twig's built-in '..' operator as a shorthand for the range function with a step of 1, which is useful for simple ascending sequences.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/range.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in 0..3 %}\n    {{ i }},\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Basic Language Name Filter Usage in Twig\nDESCRIPTION: Demonstrates basic usage of the language_name filter to convert a language code to its name using the current locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/language_name.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# German #}\n{{ 'de'|language_name }}\n```\n\n----------------------------------------\n\nTITLE: Using Lipsum Function in Expressions\nDESCRIPTION: Example showing how functions can be correctly used within expressions in Twig templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'some text' ~ lipsum(40) ~ 'some more text' }}\n\n{% set lipsum = lipsum(40) %}\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Name Display in Twig\nDESCRIPTION: Demonstrates basic usage of the locale_name filter to display the name of the German locale using the current locale settings.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/locale_name.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'de'|locale_name }}\n```\n\n----------------------------------------\n\nTITLE: Using Lipsum Tag in Twig\nDESCRIPTION: Example of implementing a Lorem ipsum generator using a custom tag in Twig templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% lipsum 40 %}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig HtmlExtension via Composer\nDESCRIPTION: This command installs the Twig HtmlExtension using Composer. The HtmlExtension is required to use the html_classes function.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_classes.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/html-extra\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony Projects\nDESCRIPTION: For Symfony projects, this command installs the twig/extra-bundle using Composer, which is necessary to use the IntlExtension and the script_names function.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/script_names.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: HTML output of shuffled string example\nDESCRIPTION: The rendered HTML output of the shuffled string example, showing one possible arrangement of characters after shuffling.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/shuffle.rst#2025-04-14_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<p>gih</p>\n```\n\n----------------------------------------\n\nTITLE: Applying Compound Variants in Twig Templates\nDESCRIPTION: This snippet demonstrates how to apply compound variants in different templates, showing how additional classes are added when specific conditions are met.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# index.html.twig #}\n\n{{ include('alert.html.twig', {color: 'red', size: 'lg'}) }}\n{# class=\"alert bg-red text-lg font-bold\" #}\n\n{{ include('alert.html.twig', {color: 'green', size: 'sm'}) }}\n{# class=\"alert bg-green text-sm\" #}\n\n{{ include('alert.html.twig', {color: 'red', size: 'md'}) }}\n{# class=\"alert bg-green text-md font-bold\" #}\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension Package with Composer\nDESCRIPTION: Demonstrates how to install the IntlExtension package using Composer, which is required for the country_name filter to work.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/country_name.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Twig Profiler Configuration\nDESCRIPTION: Example of setting up the Twig profiler extension for development debugging\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/api.rst#2025-04-14_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$profile = new \\Twig\\Profiler\\Profile();\n$twig->addExtension(new \\Twig\\Extension\\ProfilerExtension($profile));\n\n$dumper = new \\Twig\\Profiler\\Dumper\\TextDumper();\necho $dumper->dump($profile);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Filters in Twig Templates\nDESCRIPTION: Example of using a custom rot13 filter in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Twig'|rot13 }}\n\n{# will output Gjvt #}\n```\n\n----------------------------------------\n\nTITLE: Adding CacheExtension to Twig Environment in PHP\nDESCRIPTION: PHP code to explicitly add the CacheExtension to the Twig environment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Cache\\CacheExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new CacheExtension());\n```\n\n----------------------------------------\n\nTITLE: Static Expression Escaping Example\nDESCRIPTION: Demonstrates how Twig handles static expressions in templates without escaping them.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/autoescape.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{% set hello = \"<strong>Hello</strong>\" %}\n{{ hello }}\n{{ \"<strong>world</strong>\" }}\n```\n\n----------------------------------------\n\nTITLE: Constraining Integer Digits with format_number in Twig\nDESCRIPTION: Demonstrates how to set constraints on the integer part of a number using max_integer_digit and min_integer_digit attributes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# 345.679 #}\n{{ 12345.6789|format_number({max_integer_digit:3, min_integer_digit:2}, locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony Projects\nDESCRIPTION: Command to install the Twig extra bundle, which is needed for Symfony projects to use the HTML extension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/data_uri.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring StringLoaderExtension in Symfony YAML\nDESCRIPTION: YAML configuration for enabling template_from_string function in Symfony services\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/template_from_string.rst#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    Twig\\Extension\\StringLoaderExtension:\n```\n\n----------------------------------------\n\nTITLE: Currency Formatting with Custom Attributes\nDESCRIPTION: Demonstrates format_currency filter usage with custom rounding mode and fraction digits.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_currency.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ '12.345'|format_currency('EUR', {rounding_mode: 'floor'}) }}\n\n{{ '1000000'|format_currency('EUR', {fraction_digit: 4}) }}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle via Composer\nDESCRIPTION: This command installs the Twig Extra Bundle using Composer, allowing easy integration of all 'extra' Twig extensions in a Symfony project without additional configuration.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/extra/twig-extra-bundle/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timezone Globally in Twig\nDESCRIPTION: PHP code showing how to set the default timezone globally for the Twig environment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(\\Twig\\Extension\\CoreExtension::class)->setTimezone('Europe/Paris');\n```\n\n----------------------------------------\n\nTITLE: Block Shortcut Syntax\nDESCRIPTION: Demonstrates the shorthand syntax for blocks with simple content.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% block title %}\n    {{ page_title|title }}\n{% endblock %}\n\n{% block title page_title|title %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Shortcut Filters with Attributes in Twig\nDESCRIPTION: Shows how to pass attributes to customize the output of shortcut filters like format_percent_number.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n{# 12.3% #}\n{{ '0.12345'|format_percent_number({rounding_mode: 'floor', fraction_digit: 1}) }}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig via Composer\nDESCRIPTION: Command to install Twig template engine using Composer package manager. Requires version 3.0 or higher of the twig/twig package.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/installation.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"twig/twig:^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment in PHP\nDESCRIPTION: PHP code snippet showing how to manually add the IntlExtension to the Twig environment if not using Symfony.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/timezone_names.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Twig\nDESCRIPTION: Shows how to display an assigned variable's value in a template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/set.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ name }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Locale with format_number in Twig\nDESCRIPTION: Example of explicitly passing a locale to the format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n{# 12,345 #}\n{{ '12.345'|format_number(locale: 'fr') }}\n```\n\n----------------------------------------\n\nTITLE: Manual Integration of IntlExtension\nDESCRIPTION: PHP code showing how to manually add the IntlExtension to a Twig environment when not using Symfony.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/locale_name.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Registering CacheRuntime for Non-Symfony Projects in PHP\nDESCRIPTION: PHP code to register the CacheRuntime for projects not using Symfony.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter;\nuse Twig\\Extra\\Cache\\CacheRuntime;\nuse Twig\\RuntimeLoader\\RuntimeLoaderInterface;\n\n$twig->addRuntimeLoader(new class implements RuntimeLoaderInterface {\n    public function load($class) {\n        if (CacheRuntime::class === $class) {\n            return new CacheRuntime(new TagAwareAdapter(new FilesystemAdapter()));\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic HTML to Markdown Conversion in Twig\nDESCRIPTION: Demonstrates the basic usage of html_to_markdown filter using the apply syntax to convert an HTML block to Markdown.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/html_to_markdown.rst#2025-04-14_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply html_to_markdown %}\n    <html>\n        <h1>Hello!</h1>\n    </html>\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Whitespace Control Character Usage in Twig\nDESCRIPTION: Shows proper usage of whitespace control characters in Twig delimiters. When using whitespace control characters, do not put any spaces between it and the delimiter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{- user -}}\n{#- comment -#}\n{%- if user -%}{%- endif -%}\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony projects\nDESCRIPTION: Provides the Composer command to install the twig/extra-bundle, which is necessary for Symfony projects using the StringExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/plural.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Duration Style Number Formatting in Twig\nDESCRIPTION: Example of using the duration style with format_number filter to format seconds as time duration.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{# 2:30:00 #}\n{{ 9000 | format_number(style: 'duration', locale: 'en') }}\n```\n\n----------------------------------------\n\nTITLE: Language Name Filter with Explicit Locale in Twig\nDESCRIPTION: Shows how to use the language_name filter with explicitly specified locales for both the language code and output format.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/language_name.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# allemand #}\n{{ 'de'|language_name('fr') }}\n\n{# français canadien #}\n{{ 'fr_CA'|language_name('fr_FR') }}\n```\n\n----------------------------------------\n\nTITLE: Installing HtmlExtension for Twig\nDESCRIPTION: These bash commands show how to install the necessary packages to use the html_cva function in Twig, including the HtmlExtension and the twig/extra-bundle for Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_cva.rst#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/html-extra\n\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment in PHP\nDESCRIPTION: This PHP code snippet shows how to manually add the IntlExtension to the Twig environment when not using Symfony. It creates a new Twig Environment and adds the IntlExtension to it.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/script_names.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Flushing Output Buffer in Twig\nDESCRIPTION: This snippet demonstrates how to use the flush tag in Twig to flush the output buffer. The flush tag internally uses the PHP flush() function.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/flush.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% flush %}\n```\n\n----------------------------------------\n\nTITLE: Spacing in Twig Sequences and Mappings\nDESCRIPTION: Shows correct spacing in Twig sequences and mappings. Put exactly one space after the ':' sign in mappings and ',' in sequences and mappings.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n[1, 2, 3]\n{'name': 'Fabien'}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony Projects\nDESCRIPTION: Command to install the twig/extra-bundle package which is recommended for Symfony projects using the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/currency_names.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Including Template with HTML to Markdown Conversion\nDESCRIPTION: Shows how to apply the html_to_markdown filter to an included template's content.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/html_to_markdown.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('some_template.html.twig')|html_to_markdown }}\n```\n\n----------------------------------------\n\nTITLE: Named Argument Syntax in Twig\nDESCRIPTION: Shows the preferred syntax for named arguments in Twig. Use ':' instead of '=' to separate argument names and values.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{{ data|convert_encoding(from: 'iso-2022-jp', to: 'UTF-8') }}\n```\n\n----------------------------------------\n\nTITLE: Using Lipsum as a Function in Twig\nDESCRIPTION: Example of implementing Lorem ipsum generation as a function in Twig templates, showing proper usage in expressions.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ lipsum(40) }}\n```\n\n----------------------------------------\n\nTITLE: Using Safe Callable in Twig Template\nDESCRIPTION: Demonstrates how to use the safe callable approach in a Twig template with an arrow function, which is compatible with the Closure type-hint in the PHP filter definition.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/sandbox.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ people|custom(p => p.username|join(', ')) }}\n```\n\n----------------------------------------\n\nTITLE: Manually Adding IntlExtension to Twig Environment\nDESCRIPTION: PHP code for manually adding the IntlExtension to a Twig environment for non-Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_names.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Include with Missing Template Handling\nDESCRIPTION: Examples of using 'ignore missing' to handle non-existent templates gracefully.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% include 'sidebar.html.twig' ignore missing %}\n{% include 'sidebar.html.twig' ignore missing with {'name': 'Fabien'} %}\n{% include 'sidebar.html.twig' ignore missing only %}\n```\n\n----------------------------------------\n\nTITLE: Spacing for Twig Filter and Function Calls\nDESCRIPTION: Shows proper spacing for filter and function calls in Twig. Do not put any spaces before and after the parentheses used for filter and function calls.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ name|default('Fabien') }}\n{{ range(1..10) }}\n```\n\n----------------------------------------\n\nTITLE: Enclosing Multiple Type Declarations in Curly Braces in Twig\nDESCRIPTION: Illustrates an alternative syntax for declaring multiple variable types using curly braces in a Twig template.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/types.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% types {\n    is_correct: 'boolean',\n    score: 'number',\n} %}\n```\n\n----------------------------------------\n\nTITLE: Converting indented Markdown to HTML in Twig\nDESCRIPTION: This example shows how to convert indented Markdown content to HTML using the markdown_to_html filter. Leading whitespaces are removed consistently before conversion.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/markdown_to_html.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% apply markdown_to_html %}\n    Title\n    =====\n\n    Hello!\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Spacing for Twig Operators and Accessors\nDESCRIPTION: Demonstrates proper spacing for pipe, dot, range and array access operators in Twig. Do not put any spaces before and after these operators.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ name|upper|lower }}\n{{ user.name }}\n{{ user[name] }}\n{% for i in 1..12 %}{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Extension to Twig Environment Manually\nDESCRIPTION: PHP code for manually adding the HTML extension to a Twig environment when not using Symfony's bundle system.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/data_uri.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Html\\HtmlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new HtmlExtension());\n```\n\n----------------------------------------\n\nTITLE: Using currency_names with Explicit Locale in Twig\nDESCRIPTION: Shows how to pass an explicit locale parameter ('fr' for French) to the currency_names function to get localized currency names.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/currency_names.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# afghani (1927–2002), afghani afghan, ... #}\n{{ currency_names('fr')|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Migrating operator getOperators to getExpressionParsers in PHP\nDESCRIPTION: Shows how to migrate from deprecated getOperators() method to using the new getExpressionParsers() method in extensions\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getOperators(): array {\n    return [\n        'not' => [\n            'precedence' => 10,\n            'class' => NotUnary::class,\n        ],\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getExpressionParsers(): array {\n    return [\n        new UnaryOperatorExpressionParser(NotUnary::class, 'not', 10),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of Sandbox Tag in Twig\nDESCRIPTION: This example shows an incorrect usage of the sandbox tag. It attempts to sandbox a section of a template with a for loop, which is not supported. The sandbox tag can only be used with include statements.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/sandbox.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% sandbox %}\n    {% for i in 1..2 %}\n        {{ i }}\n    {% endfor %}\n{% endsandbox %}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Inheritance in Twig\nDESCRIPTION: Shows the basic structure of Twig template inheritance with extends and block definitions.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/use.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.html.twig\" %}\n\n{% block title %}{% endblock %}\n{% block content %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Text Using the u.wordwrap Method in Twig\nDESCRIPTION: Demonstrates using the u filter with the wordwrap method to wrap text to a specific number of characters per line.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Symfony String + Twig = <3'|u.wordwrap(5) }}\nSymfony\nString\n+\nTwig\n= <3\n```\n\n----------------------------------------\n\nTITLE: Parentheses Spacing in Twig Expressions\nDESCRIPTION: Demonstrates the proper spacing with parentheses in Twig expressions. Do not put any spaces after an opening parenthesis and before a closing parenthesis.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 1 + (2 * 3) }}\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment Manually in PHP\nDESCRIPTION: Demonstrates how to manually add the IntlExtension to a Twig environment in PHP code when not using Symfony's automatic extension loading.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/country_name.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: HTML to Markdown with Custom Options\nDESCRIPTION: Example of using the html_to_markdown filter with custom options for the league/html-to-markdown library.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/html_to_markdown.rst#2025-04-14_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply html_to_markdown({hard_break: false}) %}\n    <html>\n        <h1>Hello!</h1>\n    </html>\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Converting ISO-3166 Country Code to Country Name with Explicit Locale in Twig\nDESCRIPTION: Shows how to use the country_name filter with an explicitly specified locale to convert country codes to localized country names.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/country_name.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# États-Unis #}\n{{ 'US'|country_name('fr') }}\n\n{# 美國 #}\n{{ 'US'|country_name('zh_Hant_HK') }}\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension with Composer\nDESCRIPTION: Bash command to install the IntlExtension package which is required for the format_datetime filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Creating Deprecated Filters\nDESCRIPTION: PHP code showing how to mark a Twig filter as deprecated using the deprecation_info option.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('obsolete', function () {\n    // ...\n}, ['deprecation_info' => new DeprecatedCallableInfo('twig/twig', '3.11', 'new_one')]);\n```\n\n----------------------------------------\n\nTITLE: Manually Adding HtmlExtension to Twig Environment\nDESCRIPTION: This PHP code snippet shows how to manually add the HtmlExtension to a Twig environment if not using Symfony or if explicit addition is required.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_classes.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Html\\HtmlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new HtmlExtension());\n```\n\n----------------------------------------\n\nTITLE: PHP Compilation of Twig Filters\nDESCRIPTION: PHP code showing how Twig filters are compiled to PHP code.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php echo strtolower('TWIG') ?>\n<?php echo twig_date_format_filter($now, 'd/m/Y') ?>\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Templates with Include Function in Twig\nDESCRIPTION: Demonstrates how to use the ignore_missing flag to return an empty string if the included template does not exist.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/include.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('sidebar.html.twig', ignore_missing: true) }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Locale with currency_symbol Filter in Twig\nDESCRIPTION: Shows how to use the currency_symbol filter with an explicitly specified locale. In this example, it displays the Japanese Yen symbol using the French locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_symbol.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# ¥ #}\n{{ 'JPY'|currency_symbol('fr') }}\n```\n\n----------------------------------------\n\nTITLE: Manually adding the IntlExtension to Twig Environment\nDESCRIPTION: PHP code showing how to manually register the IntlExtension with the Twig environment when not using Symfony's bundle system.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_name.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension for Twig via Composer\nDESCRIPTION: Command to install the IntlExtension for Twig using Composer. This extension is required for the currency_symbol filter to work.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_symbol.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony\nDESCRIPTION: Command to install the twig/extra-bundle for Symfony projects after installing the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: PHP Template Instance Include\nDESCRIPTION: Example of including a template using a PHP Template instance.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/include.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$template = $twig->load('some_template.html.twig');\n\n$twig->display('template.html.twig', ['template' => $template]);\n```\n\n----------------------------------------\n\nTITLE: Manually Adding StringExtension to Twig Environment\nDESCRIPTION: Demonstrates how to manually add the StringExtension to a Twig environment when not using Symfony's bundle system.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\String\\StringExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new StringExtension());\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handler for Catching All Twig Deprecations in PHP\nDESCRIPTION: This code sets up a custom error handler to catch all deprecation notices, including those from Twig classes. It's useful for finding all deprecations, not just those in templates.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$deprecations = [];\nset_error_handler(function ($type, $msg) use (&$deprecations) {\n    if (E_USER_DEPRECATED === $type) {\n        $deprecations[] = $msg;\n    }\n});\n\n// run your application\n\nprint_r($deprecations);\n```\n\n----------------------------------------\n\nTITLE: Customizing Twig Syntax with Custom Lexer in PHP\nDESCRIPTION: This PHP code shows how to customize Twig's syntax by creating a custom lexer. It allows changing the delimiters for comments, blocks, variables, and interpolation.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$twig = new \\Twig\\Environment(...);\n\n$lexer = new \\Twig\\Lexer($twig, [\n    'tag_comment'   => ['{#', '#}'],\n    'tag_block'     => ['{%', '%}'],\n    'tag_variable'  => ['{{', '}}'],\n    'interpolation' => ['#{', '}'],\n]);\n$twig->setLexer($lexer);\n```\n\n----------------------------------------\n\nTITLE: Conditional Block Implementation\nDESCRIPTION: Shows proper implementation of conditional block content versus conditional block definition.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/extends.rst#2025-04-14_snippet_10\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if posts is empty %}\n    {% block head %}\n        {{ parent() }}\n\n        <meta name=\"robots\" content=\"noindex, follow\">\n    {% endblock head %}\n{% endif %}\n\n{% block head %}\n    {{ parent() }}\n\n    {% if posts is empty %}\n        <meta name=\"robots\" content=\"noindex, follow\">\n    {% endif %}\n{% endblock head %}\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony Projects\nDESCRIPTION: For Symfony projects, this command installs the twig/extra-bundle, which includes the HtmlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/html_classes.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Custom Database Template Loader Implementation\nDESCRIPTION: Implements a custom LoaderInterface for loading Twig templates from a database, including methods for checking existence, freshness, and retrieving template source.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nclass DatabaseTwigLoader implements \\Twig\\Loader\\LoaderInterface\n{\n    protected $dbh;\n\n    public function __construct(PDO $dbh)\n    {\n        $this->dbh = $dbh;\n    }\n\n    public function getSourceContext(string $name): Source\n    {\n        if (false === $source = $this->getValue('source', $name)) {\n            throw new \\Twig\\Error\\LoaderError(sprintf('Template \"%s\" does not exist.', $name));\n        }\n\n        return new \\Twig\\Source($source, $name);\n    }\n\n    public function exists(string $name)\n    {\n        return $name === $this->getValue('name', $name);\n    }\n\n    public function getCacheKey(string $name): string\n    {\n        return $name;\n    }\n\n    public function isFresh(string $name, int $time): bool\n    {\n        if (false === $lastModified = $this->getValue('last_modified', $name)) {\n            return false;\n        }\n\n        return $lastModified <= $time;\n    }\n\n    protected function getValue($column, $name)\n    {\n        $sth = $this->dbh->prepare('SELECT '.$column.' FROM templates WHERE name = :name');\n        $sth->execute([':name' => (string) $name]);\n\n        return $sth->fetchColumn();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Markdown Extension via Composer\nDESCRIPTION: This bash command installs the Twig Markdown Extension using Composer, which is required for using the markdown_to_html filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/markdown_to_html.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/markdown-extra\n```\n\n----------------------------------------\n\nTITLE: Installing Extra Bundle for Symfony Projects\nDESCRIPTION: Shows the Composer command to install the twig/extra-bundle for Symfony projects to enable the u filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/u.rst#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Documentation Structure in RST\nDESCRIPTION: reStructuredText configuration that defines the documentation structure for Twig. It sets up a two-level deep table of contents with links to all major documentation sections including templates, API, filters, tags, functions and tests.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    intro\n    installation\n    templates\n    api\n    advanced\n    sandbox\n    internals\n    deprecated\n    recipes\n    coding_standards\n    tags/index\n    filters/index\n    functions/index\n    tests/index\n```\n\n----------------------------------------\n\nTITLE: Manually Adding IntlExtension to Twig Environment\nDESCRIPTION: PHP code showing how to manually add the IntlExtension to a Twig environment when not using Symfony.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Deprecating Twig Template with Package and Version Information\nDESCRIPTION: Examples showing how to use the deprecated tag with optional package and version parameters, introduced in Twig 3.11.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/deprecated.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% deprecated 'The \"base.html.twig\" template is deprecated, use \"layout.html.twig\" instead.' package='twig/twig' %}\n{% deprecated 'The \"base.html.twig\" template is deprecated, use \"layout.html.twig\" instead.' package='twig/twig' version='3.11' %}\n```\n\n----------------------------------------\n\nTITLE: Registering Undefined Functions in Twig with PHP\nDESCRIPTION: This PHP snippet shows how to register a callback for undefined functions in Twig. It automatically registers all native PHP functions as Twig functions, which is not recommended for security reasons in production.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// auto-register all native PHP functions as Twig functions\n// NEVER do this in a project as it's NOT secure\n$twig->registerUndefinedFunctionCallback(function ($name) {\n    if (function_exists($name)) {\n        return new \\Twig\\TwigFunction($name, $name);\n    }\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Filters with Multiple Parts\nDESCRIPTION: PHP code showing how to create dynamic Twig filters with multiple dynamic parts.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/advanced.rst#2025-04-14_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$filter = new \\Twig\\TwigFilter('*_path_*', function ($name, $suffix, $arguments) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Intl Extension via Composer\nDESCRIPTION: Command to install the IntlExtension package which contains the format_date filter functionality.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_date.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Installing Extra Bundle Package for Symfony Projects\nDESCRIPTION: Shows how to install the twig/extra-bundle package using Composer, which is needed for Symfony projects using the country_name filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/country_name.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment in PHP\nDESCRIPTION: Demonstrates how to manually add the IntlExtension to the Twig environment in PHP projects that are not using Symfony.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/locale_names.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Spacing in Twig Macro Declarations\nDESCRIPTION: Shows proper spacing in Twig macro argument declarations. Put exactly one space before and after '=' in macro argument declarations.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/coding_standards.rst#2025-04-14_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% macro html_input(class = \"input\") %}\n```\n\n----------------------------------------\n\nTITLE: Installing CacheExtension via Composer\nDESCRIPTION: Command to install the CacheExtension using Composer.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/cache-extra\n```\n\n----------------------------------------\n\nTITLE: Collecting Twig Deprecation Notices in PHP\nDESCRIPTION: This snippet demonstrates how to collect deprecation notices from Twig templates using the DeprecationCollector class. It compiles all templates in a directory and catches deprecation notices.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$twig = create_your_twig_env();\n\n$deprecations = new \\Twig\\Util\\DeprecationCollector($twig);\n\nprint_r($deprecations->collectDir(__DIR__.'/templates'));\n```\n\n----------------------------------------\n\nTITLE: Database Template Storage Setup\nDESCRIPTION: Creates an SQLite database setup for storing Twig templates with name, source content, and modification time.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$dbh = new PDO('sqlite::memory:');\n$dbh->exec('CREATE TABLE templates (name STRING, source STRING, last_modified INTEGER)');\n$base = '{% block content %}{% endblock %}';\n$index = '\n{% extends \"base.html.twig\" %}\n{% block content %}Hello {{ name }}{% endblock %}\n';\n$now = time();\n$dbh->prepare('INSERT INTO templates (name, source, last_modified) VALUES (?, ?, ?)')->execute(['base.html.twig', $base, $now]);\n$dbh->prepare('INSERT INTO templates (name, source, last_modified) VALUES (?, ?, ?)')->execute(['index.html.twig', $index, $now]);\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony\nDESCRIPTION: Command to install the twig/extra-bundle package for Symfony projects, which helps integrate extra Twig extensions including the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_time.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension via Composer\nDESCRIPTION: Command to install the required IntlExtension package using Composer.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/locale_name.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Adding StringExtension to Twig Environment\nDESCRIPTION: Demonstrates how to manually add the StringExtension to the Twig environment if not using Symfony or if explicit addition is required.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/plural.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\String\\StringExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new StringExtension());\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Escapers with Twig EscaperExtension (Pre-3.10)\nDESCRIPTION: Shows how to create a custom escaper for Twig versions before 3.10 using the EscaperExtension class. This allows defining custom escaping strategies beyond the built-in ones.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/escape.rst#2025-04-14_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extension\\EscaperExtension;\n\n$twig = new \\Twig\\Environment($loader);\n$twig->getExtension(EscaperExtension::class)->setEscaper('csv', 'csv_escaper');\n```\n\n----------------------------------------\n\nTITLE: Testing and Iterating Over Mapping in Twig\nDESCRIPTION: Shows how to check if a variable is a mapping using the 'is mapping' test operator, then iterates through the key-value pairs if true. Useful for handling associative arrays or dictionary-like data structures.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tests/mapping.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set users = {alice: \"Alice Dupond\", bob: \"Bob Smith\"} %}\n{# evaluates to true if the users variable is a mapping #}\n{% if users is mapping %}\n    {% for key, user in users %}\n        {{ key }}: {{ user }};\n    {% endfor %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment\nDESCRIPTION: PHP code showing how to manually add the IntlExtension to Twig environment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_currency.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony\nDESCRIPTION: Command to install the Twig extra bundle for Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/language_name.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension with Composer\nDESCRIPTION: Command to install the IntlExtension via Composer, which is required for the timezone_name filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/timezone_name.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment in PHP\nDESCRIPTION: PHP code snippet showing how to manually add the IntlExtension to a Twig Environment. This is necessary if not using Symfony or if the extension needs to be added explicitly.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_symbol.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Migrating from sandbox tag to include function in Twig\nDESCRIPTION: Shows how to migrate from deprecated sandbox tag to using the sandboxed option of the include function\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% sandbox %}\n  {% include 'user_defined.html.twig' %}\n{% endsandbox %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('user_defined.html.twig', sandboxed: true) }}\n```\n\n----------------------------------------\n\nTITLE: Tagging Cache Items in Twig\nDESCRIPTION: Demonstrates how to tag cache items when the cache implementation supports tagging.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% cache \"cache key\" tags('blog') %}\n    Some code\n{% endcache %}\n\n{% cache \"cache key\" tags(['cms', 'blog']) %}\n    Some code\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Configuring OPcache with Twig\nDESCRIPTION: Shows how to configure Twig with OPcache to force bytecode invalidation when template cache needs refreshing.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/recipes.rst#2025-04-14_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$twig = new \\Twig\\Environment($loader, [\n    'cache' => new \\Twig\\Cache\\FilesystemCache('/some/cache/path', \\Twig\\Cache\\FilesystemCache::FORCE_BYTECODE_INVALIDATION),\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing the IntlExtension with Composer\nDESCRIPTION: Command to install the twig/intl-extra package which provides the currency_name filter functionality.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_name.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Manual Extension Registration in PHP\nDESCRIPTION: PHP code for manually registering the Markdown extension and its runtime loader in a non-Symfony environment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/html_to_markdown.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Markdown\\MarkdownExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new MarkdownExtension());\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Markdown\\DefaultMarkdown;\nuse Twig\\Extra\\Markdown\\MarkdownRuntime;\nuse Twig\\RuntimeLoader\\RuntimeLoaderInterface;\n\n$twig->addRuntimeLoader(new class implements RuntimeLoaderInterface {\n    public function load($class) {\n        if (MarkdownRuntime::class === $class) {\n            return new MarkdownRuntime(new DefaultMarkdown());\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony\nDESCRIPTION: Command to install the Twig extra bundle for Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/locale_name.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Migrating Environment mergeGlobals in PHP\nDESCRIPTION: Shows how to migrate from deprecated mergeGlobals() method to using getGlobals() with array addition\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$context = $twig->mergeGlobals($context);\n```\n\nLANGUAGE: php\nCODE:\n```\n$context += $twig->getGlobals();\n```\n\n----------------------------------------\n\nTITLE: Installing CSS Inliner Extension via Composer\nDESCRIPTION: Command to install the CssInlinerExtension package using Composer package manager.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inline_css.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/cssinliner-extra\n```\n\n----------------------------------------\n\nTITLE: Migrating deprecated function options in PHP\nDESCRIPTION: Shows how to migrate from deprecated options to using the new deprecation_info option with DeprecatedCallableInfo\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$twig->addFunction(new TwigFunction('upper', 'upper', [\n    'deprecated' => '3.12', 'deprecating_package' => 'twig/twig',\n]));\n```\n\nLANGUAGE: php\nCODE:\n```\n$twig->addFunction(new TwigFunction('upper', 'upper', [\n    'deprecation_info' => new DeprecatedCallableInfo('twig/twig', '3.12'),\n]));\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony projects\nDESCRIPTION: This bash command installs the Twig Extra Bundle using Composer, which is necessary for Symfony projects to use the markdown_to_html filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/markdown_to_html.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing the String Extension with Composer\nDESCRIPTION: Command to install the required StringExtension package via Composer, which is necessary to use the slug filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/slug.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/string-extra\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Twig Tags in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText syntax, listing all available Twig template tags. It uses the 'toctree' directive to generate a nested list of links to individual tag documentation pages.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    apply\n    autoescape\n    block\n    cache\n    deprecated\n    do\n    embed\n    extends\n    guard\n    flush\n    for\n    from\n    if\n    import\n    include\n    macro\n    sandbox\n    set\n    types\n    use\n    verbatim\n    with\n```\n\n----------------------------------------\n\nTITLE: Safe Callable Argument Handling in PHP\nDESCRIPTION: Shows a safer approach to handling callable arguments in a custom Twig filter by using Closure type-hinting, which restricts the allowed callables to PHP closures only.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/sandbox.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$twig->addFilter(new \\Twig\\TwigFilter('custom', function (\\Closure $callable) {\n    // ...\n    $callable();\n    // ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Filter Expression Class Implementation in PHP\nDESCRIPTION: Shows how to update filter expression class implementation with the FirstClassTwigCallableReady attribute and type hints.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ReadyFilterExpression extends FilterExpression\n{\n    #[FirstClassTwigCallableReady]\n    public function __construct(Node $node, TwigFilter|ConstantExpression $filter, Node $arguments, int $lineno)\n    {\n        parent::__construct($node, $filter, $arguments, $lineno);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle\nDESCRIPTION: Command to install the twig/extra-bundle for Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inline_css.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony Projects\nDESCRIPTION: Bash command to install the twig/extra-bundle package for Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_datetime.rst#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony\nDESCRIPTION: Command to install the extra bundle package for Symfony integration.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_date.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Migrating from attribute() Function to Dot Operator in Twig\nDESCRIPTION: Shows how to migrate from the deprecated attribute() function to using the dot operator with parentheses for method calls and array access.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# before #}\n{{ attribute(object, method) }}\n{{ attribute(object, method, arguments) }}\n{{ attribute(array, item) }}\n\n{# after #}\n{{ object.(method) }}\n{{ object.(method)(arguments) }}\n{{ array[item] }}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig HTML Extension Using Composer\nDESCRIPTION: Command to install the HTML extension which contains the data_uri filter, as it's not included in the default Twig installation.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/data_uri.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/html-extra\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension via Composer for Twig\nDESCRIPTION: This command installs the IntlExtension, which is required for the script_names function, using Composer. The extension is not installed by default and needs to be added separately.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/script_names.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Unsafe Callable Argument Handling in PHP\nDESCRIPTION: Demonstrates an unsafe way of handling callable arguments in a custom Twig filter, which could lead to security vulnerabilities by allowing execution of arbitrary PHP functions.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/sandbox.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$twig->addFilter(new \\Twig\\TwigFilter('custom', function (callable $callable) {\n    // ...\n    $callable();\n    // ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Test Expression Class Implementation in PHP\nDESCRIPTION: Shows how to update test expression class implementation with the FirstClassTwigCallableReady attribute and type hints.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/deprecated.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass ReadyTestExpression extends TestExpression\n{\n    #[FirstClassTwigCallableReady]\n    public function __construct(Node $node, TwigTest|string $test, ?Node $arguments, int $lineno)\n    {\n        parent::__construct($node, $test, $arguments, $lineno);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony Projects\nDESCRIPTION: Command to install the twig/extra-bundle package for Symfony projects after installing the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_names.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing the Twig extra bundle for Symfony projects\nDESCRIPTION: Command to install the Twig extra bundle specifically for Symfony projects after installing the StringExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/singular.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Markdown Extension Dependencies\nDESCRIPTION: Command line instructions for installing the required Twig Markdown extension packages.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/html_to_markdown.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/markdown-extra\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Twig Filters Index Structure in RST\nDESCRIPTION: ReStructuredText markup defining the table of contents for Twig filters documentation. Lists all available filters in alphabetical order for navigation purposes.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    abs\n    batch\n    capitalize\n    column\n    convert_encoding\n    country_name\n    currency_name\n    currency_symbol\n    data_uri\n    date\n    date_modify\n    default\n    escape\n    filter\n    find\n    first\n    format\n    format_currency\n    format_date\n    format_datetime\n    format_number\n    format_time\n    html_to_markdown\n    inline_css\n    inky_to_html\n    join\n    json_encode\n    keys\n    language_name\n    last\n    length\n    locale_name\n    lower\n    map\n    markdown_to_html\n    merge\n    nl2br\n    number_format\n    plural\n    raw\n    reduce\n    replace\n    reverse\n    round\n    shuffle\n    singular\n    slice\n    slug\n    sort\n    spaceless\n    split\n    striptags\n    timezone_name\n    title\n    trim\n    u\n    upper\n    url_encode\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony Projects\nDESCRIPTION: Command to install twig/extra-bundle for automatic enabling of CacheExtension in Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/cache.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Manual Extension Registration in PHP\nDESCRIPTION: PHP code showing how to manually register the CssInlinerExtension in a Twig environment.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/inline_css.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\CssInliner\\CssInlinerExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new CssInlinerExtension());\n```\n\n----------------------------------------\n\nTITLE: Installing StringExtension via Composer\nDESCRIPTION: Shows the Composer command to install the StringExtension, which is required for the 'plural' filter to work.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/plural.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/string-extra\n```\n\n----------------------------------------\n\nTITLE: Installing twig/extra-bundle for Symfony Projects\nDESCRIPTION: Command to install the twig/extra-bundle, which is necessary for Symfony projects using the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/timezone_names.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony Projects\nDESCRIPTION: Command to install the Twig Extra Bundle for Symfony projects, which includes the IntlExtension.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/currency_symbol.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension via Composer for Twig\nDESCRIPTION: Command to install the IntlExtension package which provides the format_number filter.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/format_number.rst#2025-04-14_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Installing the StringExtension with Composer\nDESCRIPTION: Command to install the StringExtension package that contains the singular filter since it's not included in the default Twig installation.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/singular.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/string-extra\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension for Twig\nDESCRIPTION: Shows the Composer commands to install the IntlExtension and twig/extra-bundle for Symfony projects.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/locale_names.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Intl Extension via Composer\nDESCRIPTION: Command to install the required IntlExtension package using Composer.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/language_name.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Extra Bundle for Symfony\nDESCRIPTION: Command to install the Twig extra bundle for Symfony projects\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/language_names.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/extra-bundle\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Logo in HTML\nDESCRIPTION: This HTML snippet embeds a sponsor logo (Blackfire.io) with a link to their documentation. It uses raw HTML within a reStructuredText context.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/README.rst#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://docs.blackfire.io/introduction?utm_source=twig&utm_medium=github_readme&utm_campaign=logo\">\n    <img src=\"https://static.blackfire.io/assets/intemporals/logo/png/blackfire-io_secondary_horizontal_transparent.png?1\" width=\"255px\" alt=\"Blackfire.io\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Twig IntlExtension with Composer\nDESCRIPTION: Command to install the IntlExtension package which is required for the currency_names function to work.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/currency_names.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Deprecating Twig Template with Base Template Example\nDESCRIPTION: Example showing how to mark a template as deprecated using the deprecated tag while extending another template. Generates a deprecation notice when the template is used.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/tags/deprecated.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# base.html.twig #}\n{% deprecated 'The \"base.html.twig\" template is deprecated, use \"layout.html.twig\" instead.' %}\n{% extends 'layout.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Adding IntlExtension to Twig Environment in PHP\nDESCRIPTION: Demonstrates how to manually add the IntlExtension to the Twig environment in PHP. This is necessary if not using Symfony or if the extension needs to be added explicitly.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/country_timezones.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Manual Twig Extension Registration\nDESCRIPTION: PHP code showing how to manually register the IntlExtension in the Twig environment when not using Symfony.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/filters/language_name.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$twig = new \\Twig\\Environment(...);\n$twig->addExtension(new IntlExtension());\n```\n\n----------------------------------------\n\nTITLE: Including Twig Template Objects in PHP\nDESCRIPTION: Shows how to include a Twig\\Template or Twig\\TemplateWrapper instance directly in PHP code.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/include.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// {{ include(template) }}\n\n$template = $twig->load('some_template.html.twig');\n\n$twig->display('template.html.twig', ['template' => $template]);\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Intl Extension via Composer\nDESCRIPTION: Command to install the required IntlExtension package using Composer\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/language_names.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Installing IntlExtension via Composer\nDESCRIPTION: Command to install the IntlExtension, which is required for the timezone_names function.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/timezone_names.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require twig/intl-extra\n```\n\n----------------------------------------\n\nTITLE: Using timezone_names Function in Twig\nDESCRIPTION: Demonstrates how to use the timezone_names function to get a list of timezone names in the current locale.\nSOURCE: https://github.com/twigphp/Twig/blob/3.x/doc/functions/timezone_names.rst#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ timezone_names()|join(', ') }}\n```"
  }
]