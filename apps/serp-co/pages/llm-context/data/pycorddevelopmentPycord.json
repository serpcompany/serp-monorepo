[
  {
    "owner": "pycord-development",
    "repo": "pycord",
    "content": "TITLE: Creating a Basic Message-Responding Discord Bot with Pycord\nDESCRIPTION: This code implements a simple Discord bot that responds with 'Hello!' when a user sends a message starting with '$hello'. It demonstrates how to set up intents, handle events, and process message content using the Pycord library.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/quickstart.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nclient = discord.Client(intents=intents)\n\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n\n@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        return\n\n    if message.content.startswith('$hello'):\n        await message.channel.send('Hello!')\n\nclient.run('your token here')\n```\n\n----------------------------------------\n\nTITLE: Slash Commands Example in Pycord\nDESCRIPTION: Example demonstrating how to create a Discord bot using Pycord's slash commands and user commands.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/README.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nbot = discord.Bot()\n\n@bot.slash_command()\nasync def hello(ctx, name: str = None):\n    name = name or ctx.author.name\n    await ctx.respond(f\"Hello {name}!\")\n\n@bot.user_command(name=\"Say Hello\")\nasync def hi(ctx, user):\n    await ctx.respond(f\"{ctx.author.mention} says hello to {user.name}!\")\n\nbot.run(\"token\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Discord Slash Command Bot with Pycord\nDESCRIPTION: This example creates a Discord bot that registers a slash command '/hello' which responds with 'Hello!'. It demonstrates how to create and register slash commands using the Bot class from Pycord, which is better suited for application commands than the basic Client.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/quickstart.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nbot = discord.Bot()\n\n@bot.event\nasync def on_ready():\n    print(f\"We have logged in as {bot.user}\")\n\n@bot.slash_command(guild_ids=[your, guild_ids, here])\nasync def hello(ctx):\n    await ctx.respond(\"Hello!\")\n\nbot.run(\"your token here\")\n```\n\n----------------------------------------\n\nTITLE: Traditional Commands Example in Pycord\nDESCRIPTION: Example showing how to implement traditional prefix-based commands using Pycord with message content intents.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/README.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nfrom discord.ext import commands\n\nintents = discord.Intents.default()\nintents.message_content = True\nbot = commands.Bot(command_prefix=\">\", intents=intents)\n\n@bot.command()\nasync def ping(ctx):\n    await ctx.send(\"pong\")\n\nbot.run(\"token\")\n```\n\n----------------------------------------\n\nTITLE: Handling Check Failures with Error Handler in Python\nDESCRIPTION: Demonstrates how to create an error handler for a command that catches CheckFailure exceptions. This allows for custom responses when permission checks fail.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\n@commands.is_owner()\n@is_in_guild(41771983423143937)\nasync def secretguilddata(ctx):\n    \"\"\"super secret stuff\"\"\"\n    await ctx.send('secret stuff')\n\n@secretguilddata.error\nasync def secretguilddata_error(ctx, error):\n    if isinstance(error, commands.CheckFailure):\n        await ctx.send('nothing to see here comrade.')\n```\n\n----------------------------------------\n\nTITLE: Registering Discord.py Event Handlers with Multiple Methods\nDESCRIPTION: This code demonstrates three different ways to register event handlers in Discord.py: by subclassing Client, using the @client.event decorator, and using the @client.listen() decorator. It also shows how to set up required intents and create a basic message response bot.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/events.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_message(self, message):\n        if message.author == self.user:\n            return\n\n        if message.content.startswith('$hello'):\n            await message.channel.send('Hello World!')\n\n\nintents = discord.Intents.default()\nintents.message_content = True # Needed to see message content\nclient = MyClient(intents=intents)\n\n# Overrides the 'on_message' method defined in MyClient\n@client.event\nasync def on_message(message: discord.Message):\n    print(f\"Received {message.content}\")\n\n# Assigns an ADDITIONAL handler\n@client.listen()\nasync def on_message(message: discord.Message):\n    print(f\"Received {message.content}\")\n\n# Runs only for the 1st event dispatch. Can be useful for listening to 'on_ready'\n@client.listen(once=True)\nasync def on_ready():\n    print(\"Client is ready!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Commands with discord.ext.bridge in Python\nDESCRIPTION: This example demonstrates how to create a Discord bot using the discord.ext.bridge module. It sets up a bot with both prefix and slash command functionality, defining three bridge commands: hello, bye, and sum. The sum command takes two integer parameters and returns their sum.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/bridge/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nfrom discord.ext import bridge\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nbot = bridge.Bot(command_prefix=\"!\", intents=intents)\n\n@bot.bridge_command()\nasync def hello(ctx):\n    await ctx.respond(\"Hello!\")\n\n@bot.bridge_command()\nasync def bye(ctx):\n    await ctx.respond(\"Bye!\")\n\n@bot.bridge_command()\nasync def sum(ctx, first: int, second: int):\n    s = first + second\n    await ctx.respond(f\"{s}\")\n\nbot.run(\"TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Commands in Discord.py\nDESCRIPTION: A basic example of creating a command using the bot.command() decorator. This command takes one argument and sends it back to the channel where it was invoked.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def foo(ctx, arg):\n    await ctx.send(arg)\n```\n\n----------------------------------------\n\nTITLE: Creating Command Groups and Subcommands in Discord.py\nDESCRIPTION: Shows how to create command groups with subcommands using the @bot.group() decorator. The example implements a 'git' command with a 'push' subcommand that takes additional arguments.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@bot.group()\nasync def git(ctx):\n    if ctx.invoked_subcommand is None:\n        await ctx.send('Invalid git command passed...')\n\n@git.command()\nasync def push(ctx, remote: str, branch: str):\n    await ctx.send(f'Pushing to {remote} {branch}')\n```\n\n----------------------------------------\n\nTITLE: Defining a Bot Command in Python using Pycord\nDESCRIPTION: Example of how to define a command for a Pycord Bot using the @command decorator. This snippet demonstrates the basic structure of creating a command.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/api.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@Bot.command(*args, **kwargs)\ndef command_name(ctx):\n    # Command implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing FlagConverter for User-Friendly Command Arguments\nDESCRIPTION: Demonstrates how to create a FlagConverter class for a ban command that allows for user-friendly flag-based syntax. Flags include member, reason, and days parameters.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    member: discord.Member\n    reason: str\n    days: int = 1\n\n@commands.command()\nasync def ban(ctx, *, flags: BanFlags):\n    plural = f'{flags.days} days' if flags.days != 1 else f'{flags.days} day'\n    await ctx.send(f'Banned {flags.member} for {flags.reason!r} (deleted {plural} worth of messages)')\n```\n\n----------------------------------------\n\nTITLE: Creating Slash Command Decorator for Discord Bot in Python\nDESCRIPTION: Defines a decorator method for creating slash commands in the Bot class. This enables developers to implement Discord's slash command functionality in their bots.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nBot.slash_command(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Cog with Commands and Event Listeners in Discord.py\nDESCRIPTION: This snippet demonstrates a basic Cog implementation with a slash command and member join event listener. The Cog maintains state with the _last_member attribute and shows how to define commands and listeners within the class structure.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/cogs.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Greetings(discord.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self._last_member = None\n\n    @discord.Cog.listener()\n    async def on_member_join(self, member):\n        channel = member.guild.system_channel\n        if channel is not None:\n            await channel.send(f'Welcome {member.mention}.')\n\n    @discord.slash_command()\n    async def hello(self, ctx, *, member: discord.Member = None):\n        \"\"\"Says hello\"\"\"\n        member = member or ctx.author\n        if self._last_member is None or self._last_member.id != member.id:\n            await ctx.send(f'Hello {member.name}~')\n        else:\n            await ctx.send(f'Hello {member.name}... This feels familiar.')\n        self._last_member = member\n```\n\n----------------------------------------\n\nTITLE: Finding Discord Models with Utils Module in Python\nDESCRIPTION: Demonstrates how to use discord.utils.get to find specific models like guilds and channels by their attributes without making API requests. The example shows finding a guild by name and then a channel within that guild.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# find a guild by name\nguild = discord.utils.get(client.guilds, name='My Server')\n\n# make sure to check if it's found\nif guild is not None:\n    # find a channel by name\n    channel = discord.utils.get(guild.text_channels, name='cool-channel')\n```\n\n----------------------------------------\n\nTITLE: Inter-Cog Communication in Pycord\nDESCRIPTION: This example demonstrates how different cogs can communicate with each other. It shows an Economy cog with money management methods being accessed by a Gambling cog to handle currency transactions during gambling commands.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/cogs.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Economy(commands.Cog):\n    ...\n\n    async def withdraw_money(self, member, money):\n        # implementation here\n        ...\n\n    async def deposit_money(self, member, money):\n        # implementation here\n        ...\n\nclass Gambling(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n    def coinflip(self):\n        return random.randint(0, 1)\n\n    @commands.command()\n    async def gamble(self, ctx, money: int):\n        \"\"\"Gambles some money.\"\"\"\n        economy = self.bot.get_cog('Economy')\n        if economy is not None:\n            await economy.withdraw_money(ctx.author, money)\n            if self.coinflip() == 1:\n                await economy.deposit_money(ctx.author, money * 1.5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Cog with Commands and Event Listeners in Python\nDESCRIPTION: This snippet demonstrates how to create a basic cog called 'Greetings' that contains both a command and an event listener. The cog handles member join events and provides a hello command that remembers the last member who used it.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/cogs.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Greetings(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self._last_member = None\n\n    @commands.Cog.listener()\n    async def on_member_join(self, member):\n        channel = member.guild.system_channel\n        if channel is not None:\n            await channel.send(f'Welcome {member.mention}.')\n\n    @commands.command()\n    async def hello(self, ctx, *, member: discord.Member = None):\n        \"\"\"Says hello\"\"\"\n        member = member or ctx.author\n        if self._last_member is None or self._last_member.id != member.id:\n            await ctx.send(f'Hello {member.name}~')\n        else:\n            await ctx.send(f'Hello {member.name}... This feels familiar.')\n        self._last_member = member\n```\n\n----------------------------------------\n\nTITLE: Comparing HTTP Requests with requests vs aiohttp in Async Functions\nDESCRIPTION: Shows how to properly make HTTP requests in an async function using aiohttp instead of the blocking requests library. The example fetches a random cat image and sends it to a Discord channel.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# bad\nr = requests.get('http://aws.random.cat/meow')\nif r.status_code == 200:\n    js = r.json()\n    await channel.send(js['file'])\n\n# good\nasync with aiohttp.ClientSession() as session:\n    async with session.get('http://aws.random.cat/meow') as r:\n        if r.status == 200:\n            js = await r.json()\n            await channel.send(js['file'])\n```\n\n----------------------------------------\n\nTITLE: Handling on_message with Commands in Discord.py\nDESCRIPTION: Shows how to properly override the on_message event while preserving command functionality by calling bot.process_commands(). An alternative approach using a listener is also provided.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@bot.event\nasync def on_message(message):\n    # do some extra stuff here\n\n    await bot.process_commands(message)\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Shortcut Decorators in Python\nDESCRIPTION: This section documents various shortcut decorators for UI components in Pycord, including button, select, string_select, user_select, role_select, mentionable_select, and channel_select.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/ui_kit.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: discord.ui.button\n    :decorator:\n\n.. autofunction:: discord.ui.select\n    :decorator:\n\n.. autofunction:: discord.ui.string_select\n    :decorator:\n\n.. autofunction:: discord.ui.user_select\n    :decorator:\n\n.. autofunction:: discord.ui.role_select\n    :decorator:\n\n.. autofunction:: discord.ui.mentionable_select\n    :decorator:\n\n.. autofunction:: discord.ui.channel_select\n    :decorator:\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord.py with Minimal Intents (Messages and Guilds only)\nDESCRIPTION: Creates an intents configuration that only enables messages and guilds intents, with an optional comment about enabling reactions. Shows how to use these intents with both Client and Bot classes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/intents.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nintents = discord.Intents(messages=True, guilds=True)\n# If you also want reaction events enable the following:\n# intents.reactions = True\n\n# Somewhere else:\n# client = discord.Client(intents=intents)\n# or\n# from discord.ext import commands\n# bot = commands.Bot(command_prefix='!', intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Using Discord.py Member Model as Converter\nDESCRIPTION: This example demonstrates using a Discord model directly as a converter. The command accepts a discord.Member parameter and automatically converts string inputs (like mentions, IDs, or usernames) to Member objects.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def joined(ctx, *, member: discord.Member):\n    await ctx.send(f'{member} joined on {member.joined_at}')\n```\n\n----------------------------------------\n\nTITLE: Making Web Requests with Aiohttp in Discord.py\nDESCRIPTION: Shows how to make non-blocking HTTP requests using aiohttp, which is required by Discord.py. The example demonstrates requesting JSON data from an API and checking the response status.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    async with session.get('http://aws.random.cat/meow') as r:\n        if r.status == 200:\n            js = await r.json()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event Listener for Discord Client in Python\nDESCRIPTION: Implements a decorator method for creating custom event listeners in the Client class. This method allows developers to define handlers for specific events, with options for one-time execution.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nClient.listen(name=None, once=False)\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Error Handling in Discord.py\nDESCRIPTION: Demonstrates how to implement a local error handler for a command using the @command.error decorator. This example handles BadArgument errors for a member info command.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def info(ctx, *, member: discord.Member):\n    \"\"\"Tells you some info about the member.\"\"\"\n    msg = f'{member} joined on {member.joined_at} and has {len(member.roles)} roles.'\n    await ctx.send(msg)\n\n@info.error\nasync def info_error(ctx, error):\n    if isinstance(error, commands.BadArgument):\n        await ctx.send('I could not find that member...')\n```\n\n----------------------------------------\n\nTITLE: Using Greedy Converter for Multiple Member Arguments in Discord.py\nDESCRIPTION: Demonstrates how to use the Greedy converter to handle multiple discord.Member arguments in a slap command. The converter will attempt to convert as many arguments as possible to Member objects.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def slap(ctx, members: commands.Greedy[discord.Member], *, reason='no reason'):\n    slapped = \", \".join(x.name for x in members)\n    await ctx.send(f'{slapped} just got slapped for {reason}')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Background Task in a Cog\nDESCRIPTION: Demonstrates how to create a basic background task using @tasks.loop in a Discord.py Cog. The task prints an incrementing index every 5 seconds.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/tasks/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self):\n        self.index = 0\n        self.printer.start()\n\n    def cog_unload(self):\n        self.printer.cancel()\n\n    @tasks.loop(seconds=5.0)\n    async def printer(self):\n        print(self.index)\n        self.index += 1\n```\n\n----------------------------------------\n\nTITLE: Inter-Cog Communication in Discord.py\nDESCRIPTION: This example demonstrates how to implement communication between different Cogs using get_cog() to share data and functionality. It shows an Economy Cog that handles money transactions and a Gambling Cog that uses Economy's methods.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/cogs.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Economy(discord.Cog):\n    ...\n\n    async def withdraw_money(self, member, money):\n        # implementation here\n        ...\n\n    async def deposit_money(self, member, money):\n        # implementation here\n        ...\n\nclass Gambling(discord.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n    def coinflip(self):\n        return random.randint(0, 1)\n\n    @discord.slash_command()\n    async def gamble(self, ctx, money: int):\n        \"\"\"Gambles some money.\"\"\"\n        economy = self.bot.get_cog('Economy')\n        if economy is not None:\n            await economy.withdraw_money(ctx.author, money)\n            if self.coinflip() == 1:\n                await economy.deposit_money(ctx.author, money * 1.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Check Exceptions in Python\nDESCRIPTION: Shows how to create and raise custom exceptions in check functions for more specific error handling. This enables more granular control over different types of permission failures.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass NoPrivateMessages(commands.CheckFailure):\n    pass\n\ndef guild_only():\n    async def predicate(ctx):\n        if ctx.guild is None:\n            raise NoPrivateMessages('Hey no DMs!')\n        return True\n    return commands.check(predicate)\n\n@bot.command()\n@guild_only()\nasync def test(ctx):\n    await ctx.send('Hey this is not a DM! Nice.')\n\n@test.error\nasync def test_error(ctx, error):\n    if isinstance(error, NoPrivateMessages):\n        await ctx.send(error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination System in Discord Cog\nDESCRIPTION: A comprehensive example showing how to implement pagination in a Discord bot cog using discord.ext.pages. Demonstrates various pagination features including default buttons, custom buttons, page groups, and custom views.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/pages/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nimport discord\nfrom discord.commands import SlashCommandGroup\nfrom discord.ext import commands, pages\n\n\nclass PageTest(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.pages = [\n            \"Page 1\",\n            [\n                discord.Embed(title=\"Page 2, Embed 1\"),\n                discord.Embed(title=\"Page 2, Embed 2\"),\n            ],\n            \"Page Three\",\n            discord.Embed(title=\"Page Four\"),\n            discord.Embed(title=\"Page Five\"),\n            [\n                discord.Embed(title=\"Page Six, Embed 1\"),\n                discord.Embed(title=\"Page Seven, Embed 2\"),\n            ],\n        ]\n        self.pages[3].set_image(\n            url=\"https://c.tenor.com/pPKOYQpTO8AAAAAM/monkey-developer.gif\"\n        )\n        self.pages[4].add_field(\n            name=\"Example Field\", value=\"Example Value\", inline=False\n        )\n        self.pages[4].add_field(\n            name=\"Another Example Field\", value=\"Another Example Value\", inline=False\n        )\n\n        self.more_pages = [\n            \"Second Page One\",\n            discord.Embed(title=\"Second Page Two\"),\n            discord.Embed(title=\"Second Page Three\"),\n        ]\n\n        self.even_more_pages = [\"11111\", \"22222\", \"33333\"]\n\n    def get_pages(self):\n        return self.pages\n\n    pagetest = SlashCommandGroup(\"pagetest\", \"Commands for testing ext.pages\")\n\n    @pagetest.command(name=\"default\")\n    async def pagetest_default(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates using the paginator with the default options.\"\"\"\n        paginator = pages.Paginator(pages=self.get_pages())\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"hidden\")\n    async def pagetest_hidden(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates using the paginator with disabled buttons hidden.\"\"\"\n        paginator = pages.Paginator(pages=self.get_pages(), show_disabled=False)\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"loop\")\n    async def pagetest_loop(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates using the loop_pages option.\"\"\"\n        paginator = pages.Paginator(pages=self.get_pages(), loop_pages=True)\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"strings\")\n    async def pagetest_strings(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates passing a list of strings as pages.\"\"\"\n        paginator = pages.Paginator(\n            pages=[\"Page 1\", \"Page 2\", \"Page 3\"], loop_pages=True\n        )\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"timeout\")\n    async def pagetest_timeout(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates having the buttons be disabled when the paginator view times out.\"\"\"\n        paginator = pages.Paginator(\n            pages=self.get_pages(), disable_on_timeout=True, timeout=30\n        )\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"remove_buttons\")\n    async def pagetest_remove(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates using the default buttons, but removing some of them.\"\"\"\n        paginator = pages.Paginator(pages=self.get_pages())\n        paginator.remove_button(\"first\")\n        paginator.remove_button(\"last\")\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"init\")\n    async def pagetest_init(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates how to pass a list of custom buttons when creating the Paginator instance.\"\"\"\n        pagelist = [\n            pages.PaginatorButton(\n                \"first\", label=\"<<-\", style=discord.ButtonStyle.green\n            ),\n            pages.PaginatorButton(\"prev\", label=\"<-\", style=discord.ButtonStyle.green),\n            pages.PaginatorButton(\n                \"page_indicator\", style=discord.ButtonStyle.gray, disabled=True\n            ),\n            pages.PaginatorButton(\"next\", label=\"->\", style=discord.ButtonStyle.green),\n            pages.PaginatorButton(\"last\", label=\"->>\", style=discord.ButtonStyle.green),\n        ]\n        paginator = pages.Paginator(\n            pages=self.get_pages(),\n            show_disabled=True,\n            show_indicator=True,\n            use_default_buttons=False,\n            custom_buttons=pagelist,\n            loop_pages=True,\n        )\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"emoji_buttons\")\n    async def pagetest_emoji_buttons(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates using emojis for the paginator buttons instead of labels.\"\"\"\n        page_buttons = [\n            pages.PaginatorButton(\n                \"first\", emoji=\"⏪\", style=discord.ButtonStyle.green\n            ),\n            pages.PaginatorButton(\"prev\", emoji=\"⬅\", style=discord.ButtonStyle.green),\n            pages.PaginatorButton(\n                \"page_indicator\", style=discord.ButtonStyle.gray, disabled=True\n            ),\n            pages.PaginatorButton(\"next\", emoji=\"➡\", style=discord.ButtonStyle.green),\n            pages.PaginatorButton(\"last\", emoji=\"⏩\", style=discord.ButtonStyle.green),\n        ]\n        paginator = pages.Paginator(\n            pages=self.get_pages(),\n            show_disabled=True,\n            show_indicator=True,\n            use_default_buttons=False,\n            custom_buttons=page_buttons,\n            loop_pages=True,\n        )\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"custom_buttons\")\n    async def pagetest_custom_buttons(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates adding buttons to the paginator when the default buttons are not used.\"\"\"\n        paginator = pages.Paginator(\n            pages=self.get_pages(),\n            use_default_buttons=False,\n            loop_pages=False,\n            show_disabled=False,\n        )\n        paginator.add_button(\n            pages.PaginatorButton(\n                \"prev\", label=\"<\", style=discord.ButtonStyle.green, loop_label=\"lst\"\n            )\n        )\n        paginator.add_button(\n            pages.PaginatorButton(\n                \"page_indicator\", style=discord.ButtonStyle.gray, disabled=True\n            )\n        )\n        paginator.add_button(\n            pages.PaginatorButton(\n                \"next\", style=discord.ButtonStyle.green, loop_label=\"fst\"\n            )\n        )\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"custom_view\")\n    async def pagetest_custom_view(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates passing a custom view to the paginator.\"\"\"\n        view = discord.ui.View()\n        view.add_item(discord.ui.Button(label=\"Test Button, Does Nothing\", row=1))\n        view.add_item(\n            discord.ui.Select(\n                placeholder=\"Test Select Menu, Does Nothing\",\n                options=[\n                    discord.SelectOption(\n                        label=\"Example Option\",\n                        value=\"Example Value\",\n                        description=\"This menu does nothing!\",\n                    )\n                ],\n            )\n        )\n        paginator = pages.Paginator(pages=self.get_pages(), custom_view=view)\n        await paginator.respond(ctx.interaction, ephemeral=False)\n\n    @pagetest.command(name=\"groups\")\n    async def pagetest_groups(self, ctx: discord.ApplicationContext):\n        \"\"\"Demonstrates using page groups to switch between different sets of pages.\"\"\"\n        page_buttons = [\n            pages.PaginatorButton(\n                \"first\", label=\"<<-\", style=discord.ButtonStyle.green\n            ),\n            pages.PaginatorButton(\"prev\", label=\"<-\", style=discord.ButtonStyle.green),\n            pages.PaginatorButton(\n                \"page_indicator\", style=discord.ButtonStyle.gray, disabled=True\n            ),\n            pages.PaginatorButton(\"next\", label=\"->\", style=discord.ButtonStyle.green),\n            pages.PaginatorButton(\"last\", label=\"->>\", style=discord.ButtonStyle.green),\n        ]\n        view = discord.ui.View()\n        view.add_item(discord.ui.Button(label=\"Test Button, Does Nothing\", row=2))\n        view.add_item(\n            discord.ui.Select(\n                placeholder=\"Test Select Menu, Does Nothing\",\n                options=[\n                    discord.SelectOption(\n                        label=\"Example Option\",\n                        value=\"Example Value\",\n                        description=\"This menu does nothing!\",\n                    )\n                ],\n            )\n        )\n        page_groups = [\n            pages.PageGroup(\n                pages=self.get_pages(),\n```\n\n----------------------------------------\n\nTITLE: Setting a Discord Bot's Activity Status\nDESCRIPTION: Shows various ways to set a Discord bot's \"playing\", \"watching\", or other activity status using the Client constructor or change_presence method with Activity objects.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = discord.Client(activity=discord.Game(name='my game'))\n\n# or, for watching:\nactivity = discord.Activity(name='my activity', type=discord.ActivityType.watching)\nclient = discord.Client(activity=activity)\n```\n\n----------------------------------------\n\nTITLE: Defining SlashCommandOptionType Enumeration in Python\nDESCRIPTION: Defines an enumeration for specifying the input type of a slash command option. Includes various types such as subcommands, strings, integers, booleans, users, channels, roles, and attachments.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SlashCommandOptionType:\n    sub_command\n    sub_command_group\n    string\n    integer\n    boolean\n    user\n    channel\n    role\n    mentionable\n    number\n    attachment\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Checks for All Commands in Python\nDESCRIPTION: Demonstrates how to apply a check to every command in a bot using the global check decorator. This example blocks all commands from being used in DMs.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n@bot.check\nasync def globally_block_dms(ctx):\n    return ctx.guild is not None\n```\n\n----------------------------------------\n\nTITLE: Registering a Cog with a Discord.py Bot\nDESCRIPTION: This snippet shows how to register a Cog with a Discord.py bot using the add_cog method. This binds the Cog to the bot and automatically adds all commands and listeners.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/cogs.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbot.add_cog(Greetings(bot))\n```\n\n----------------------------------------\n\nTITLE: Using Built-in is_owner Check in Python\nDESCRIPTION: Demonstrates using Pycord's built-in is_owner check, which simplifies the code by leveraging the library's provided functionality rather than writing custom owner checks.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n@bot.command(name='eval')\n@commands.is_owner()\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\n----------------------------------------\n\nTITLE: Creating Bot Event Listener Decorator in Python\nDESCRIPTION: Defines a decorator method for creating event listeners in the Bot class. This allows developers to easily handle various Discord events within their bot implementation.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBot.event()\n```\n\n----------------------------------------\n\nTITLE: Comparing Blocking vs Non-blocking Sleep Operations in Python\nDESCRIPTION: Demonstrates the difference between using time.sleep (blocking) versus asyncio.sleep (non-blocking) in an asynchronous context. The example shows the wrong approach with time.sleep and the correct approach with asyncio.sleep.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# bad\ntime.sleep(10)\n\n# good\nawait asyncio.sleep(10)\n```\n\n----------------------------------------\n\nTITLE: Adding Reactions to Discord Messages\nDESCRIPTION: Demonstrates how to add emoji reactions to Discord messages using both Unicode emoji and custom guild emoji in various formats.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nemoji = '\\N{THUMBS UP SIGN}'\n# or '\\U0001f44d' or '👍'\nawait message.add_reaction(emoji)\n```\n\nLANGUAGE: python\nCODE:\n```\n# if you have the ID already\nemoji = client.get_emoji(310177266011340803)\nawait message.add_reaction(emoji)\n\n# no ID, do a lookup\nemoji = discord.utils.get(guild.emojis, name='LUL')\nif emoji:\n    await message.add_reaction(emoji)\n\n# if you have the name and ID of a custom emoji:\nemoji = '<:python3:232720527448342530>'\nawait message.add_reaction(emoji)\n```\n\n----------------------------------------\n\nTITLE: Using Discord.py Listeners for Message Events\nDESCRIPTION: Demonstrates how to use bot.listen decorator to handle message events without interfering with command processing. This approach allows for multiple asynchronous reactions to messages.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@bot.listen('on_message')\nasync def whatever_you_want_to_call_it(message):\n    # do stuff here\n    # do not process commands here\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Objects and Classes in Python\nDESCRIPTION: This section documents various UI objects and classes in Pycord, including View, Item, Button, Select, Modal, and InputText. It provides attribute tables and autoclass documentation for each.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/ui_kit.rst#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. attributetable:: discord.ui.View\n\n.. autoclass:: discord.ui.View\n    :members:\n\n.. attributetable:: discord.ui.Item\n\n.. autoclass:: discord.ui.Item\n    :members:\n\n.. attributetable:: discord.ui.Button\n\n.. autoclass:: discord.ui.Button\n    :members:\n    :inherited-members:\n\n.. attributetable:: discord.ui.Select\n\n.. autoclass:: discord.ui.Select\n    :members:\n    :inherited-members:\n\n.. attributetable:: discord.ui.Modal\n\n.. autoclass:: discord.ui.Modal\n    :members:\n    :inherited-members:\n\n.. attributetable:: discord.ui.InputText\n\n.. autoclass:: discord.ui.InputText\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Combining Greedy and Optional Converters for Complex Command Syntax\nDESCRIPTION: Shows how to combine Greedy and Optional converters to create a flexible ban command that accepts multiple members, an optional delete_seconds parameter, and a required reason.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\n@bot.command()\nasync def ban(ctx, members: commands.Greedy[discord.Member],\n                   delete_seconds: typing.Optional[int] = 0, *,\n                   reason: str):\n    \"\"\"Bulk bans members with an optional delete_seconds parameter\"\"\"\n    await ctx.guild.bulk_ban(*members, delete_message_seconds=delete_seconds, reason=reason)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Converter in Pycord\nDESCRIPTION: Demonstrates how to create a custom converter class in Pycord. Converters are used to transform command arguments into desired types or objects.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/api.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CustomConverter(commands.Converter):\n    async def convert(self, ctx, argument):\n        # Conversion logic\n        return converted_value\n```\n\n----------------------------------------\n\nTITLE: Creating Class and Converter for JoinDistance in Discord.py\nDESCRIPTION: This snippet demonstrates creating a class and a separate converter for it. The JoinDistanceConverter extends commands.MemberConverter to convert a member argument into a JoinDistance object that calculates the time difference between when a member joined a server and when their account was created.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass JoinDistance:\n    def __init__(self, joined, created):\n        self.joined = joined\n        self.created = created\n\n    @property\n    def delta(self):\n        return self.joined - self.created\n\nclass JoinDistanceConverter(commands.MemberConverter):\n    async def convert(self, ctx, argument):\n        member = await super().convert(ctx, argument)\n        return JoinDistance(member.joined_at, member.created_at)\n\n@bot.command()\nasync def delta(ctx, *, member: JoinDistanceConverter):\n    is_new = member.delta.days < 100\n    if is_new:\n        await ctx.send(\"Hey you're pretty new!\")\n    else:\n        await ctx.send(\"Hm you're not so new.\")\n```\n\n----------------------------------------\n\nTITLE: Using typing.Union Converter in Discord.py\nDESCRIPTION: This example shows how to use typing.Union to accept multiple types for a parameter. The command can accept either a TextChannel or a Member, trying each converter in left-to-right order until one succeeds.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\n@bot.command()\nasync def union(ctx, what: typing.Union[discord.TextChannel, discord.Member]):\n    await ctx.send(what)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Converter Based on MemberConverter\nDESCRIPTION: This snippet shows how to build a custom converter by extending an existing Discord converter. The MemberRoles converter extends MemberConverter to convert a member argument into a list of role names that the member has.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MemberRoles(commands.MemberConverter):\n    async def convert(self, ctx, argument):\n        member = await super().convert(ctx, argument)\n        return [role.name for role in member.roles[1:]] # Remove everyone role!\n\n@bot.command()\nasync def roles(ctx, *, member: MemberRoles):\n    \"\"\"Tells you a member's roles.\"\"\"\n    await ctx.send('I see the following roles: ' + ', '.join(member))\n```\n\n----------------------------------------\n\nTITLE: Using Local Images in Discord Embeds\nDESCRIPTION: Demonstrates how to use a local image file as an embed image in Discord.py. This approach uploads the image as an attachment and references it in the embed using the attachment:// protocol.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfile = discord.File(\"path/to/my/image.png\", filename=\"image.png\")\nembed = discord.Embed()\nembed.set_image(url=\"attachment://image.png\")\nawait channel.send(file=file, embed=embed)\n```\n\n----------------------------------------\n\nTITLE: Using typing.Optional Converter in Discord.py\nDESCRIPTION: This example demonstrates typing.Optional for creating parameters with default values. If the 'amount' parameter can't be converted to an int, it defaults to 99 and the parser continues with remaining parameters.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\n@bot.command()\nasync def bottles(ctx, amount: typing.Optional[int] = 99, *, liquid=\"beer\"):\n    await ctx.send(f'{amount} bottles of {liquid} on the wall!')\n```\n\n----------------------------------------\n\nTITLE: Defining Message Command Decorator for Discord Bot in Python\nDESCRIPTION: Creates a decorator method for defining message commands in the Bot class. This allows developers to create commands that respond to specific message content.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBot.message_command(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HelpCommand in Pycord 1.0 Cog\nDESCRIPTION: Shows how to create a custom HelpCommand class and implement it within a cog. The example overrides the get_command_signature method and handles cog loading/unloading.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass MyHelpCommand(commands.MinimalHelpCommand):\n    def get_command_signature(self, command):\n        return '{0.clean_prefix}{1.qualified_name} {1.signature}'.format(self, command)\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self._original_help_command = bot.help_command\n        bot.help_command = MyHelpCommand()\n        bot.help_command.cog = self\n\n    def cog_unload(self):\n        self.bot.help_command = self._original_help_command\n```\n\n----------------------------------------\n\nTITLE: Using typing.Literal Converter in Discord.py\nDESCRIPTION: This example shows how to use typing.Literal to restrict parameters to specific values. The 'buy_sell' parameter must be either 'buy' or 'sell', and the 'amount' parameter must be either 1 or 2.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\n\n@bot.command()\nasync def shop(ctx, buy_sell: Literal['buy', 'sell'], amount: Literal[1, 2], *, item: str):\n    await ctx.send(f'{buy_sell.capitalize()}ing {amount} {item}(s)!')\n```\n\n----------------------------------------\n\nTITLE: Creating a Paginator with Custom Buttons in Discord.py\nDESCRIPTION: This command shows how to use a paginator with a prefix-based command instead of slash commands. It creates a custom button set with green navigation buttons and a gray page indicator button, replacing the default buttons.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/pages/index.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@commands.command()\nasync def pagetest_prefix(self, ctx: commands.Context):\n    \"\"\"Demonstrates using the paginator with a prefix-based command.\"\"\"\n    paginator = pages.Paginator(pages=self.get_pages(), use_default_buttons=False)\n    paginator.add_button(\n        pages.PaginatorButton(\"prev\", label=\"<\", style=discord.ButtonStyle.green)\n    )\n    paginator.add_button(\n        pages.PaginatorButton(\n            \"page_indicator\", style=discord.ButtonStyle.gray, disabled=True\n        )\n    )\n    paginator.add_button(\n        pages.PaginatorButton(\"next\", style=discord.ButtonStyle.green)\n    )\n    await paginator.send(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cog in Pycord\nDESCRIPTION: Shows the basic structure of a Cog class in Pycord. Cogs are used to organize sets of commands, listeners, and other functionality.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/api.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CogName(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n    # Cog methods and commands\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in a Background Task\nDESCRIPTION: Shows how to add exception handling for a specific error type (PostgresConnectionError) in a background task that performs batch updates to a database.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/tasks/index.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpg\nfrom discord.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.data = []\n        self.batch_update.add_exception_type(asyncpg.PostgresConnectionError)\n        self.batch_update.start()\n\n    def cog_unload(self):\n        self.batch_update.cancel()\n\n    @tasks.loop(minutes=5.0)\n    async def batch_update(self):\n        async with self.bot.pool.acquire() as con:\n            # batch update here...\n            pass\n```\n\n----------------------------------------\n\nTITLE: Keyword-Only Arguments in Commands\nDESCRIPTION: Shows how to use a keyword-only argument to capture all remaining text as a single argument without requiring quotes for multi-word input.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx, *, arg):\n    await ctx.send(arg)\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Webhook in Pycord v2.0\nDESCRIPTION: Demonstrates how to create and use an asynchronous webhook in Pycord v2.0. This example creates a partial Webhook with a session and sends a message asynchronously.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v2.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    webhook = discord.Webhook.partial(\n        id,\n        token,\n        session=session\n    )\n    await webhook.send(\"Hello from Pycord 2.0\")\n```\n\n----------------------------------------\n\nTITLE: Registering a Cog with a Bot in Python\nDESCRIPTION: This snippet shows how to register a previously defined cog with a bot instance. It demonstrates the add_cog method which binds the cog to the bot and adds all commands and listeners automatically.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/cogs.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbot.add_cog(Greetings(bot))\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines with Voice Player's After Function\nDESCRIPTION: Shows how to properly call a coroutine from a separate thread in the voice player's 'after' parameter using asyncio.run_coroutine_threadsafe to ensure thread safety.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef my_after(error):\n    coro = some_channel.send('Song is done!')\n    fut = asyncio.run_coroutine_threadsafe(coro, client.loop)\n    try:\n        fut.result()\n    except:\n        # an error happened sending the message\n        pass\n\nvoice.play(discord.FFmpegPCMAudio(url), after=my_after)\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Command Hooks in Pycord\nDESCRIPTION: Example of defining global before and after invocation hooks for a bot. These hooks will run before and after any command is called.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# global hooks:\n\n@bot.before_invoke\nasync def before_any_command(ctx):\n    # do something before a command is called\n    pass\n\n@bot.after_invoke\nasync def after_any_command(ctx):\n    # do something after a command is called\n    pass\n```\n\n----------------------------------------\n\nTITLE: Custom Converter Class Implementation\nDESCRIPTION: Demonstrates creating a custom converter class that inherits from commands.Converter. This example randomly selects a member to slap with the given reason.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\nclass Slapper(commands.Converter):\n    async def convert(self, ctx, argument):\n        to_slap = random.choice(ctx.guild.members)\n        return f'{ctx.author} slapped {to_slap} because *{argument}*'\n\n@bot.command()\nasync def slap(ctx, *, reason: Slapper):\n    await ctx.send(reason)\n```\n\n----------------------------------------\n\nTITLE: Enabling Members Intent in Discord.py\nDESCRIPTION: Demonstrates how to enable the privileged members intent in code. This must be done in addition to enabling it in the Discord Developer Portal for bots that need to track member information.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/intents.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nintents = discord.Intents.default()\nintents.members = True\n\n# Somewhere else:\n# client = discord.Client(intents=intents)\n# or\n# from discord.ext import commands\n# bot = commands.Bot(command_prefix='!', intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Command Checks in Python\nDESCRIPTION: Shows how to apply multiple checks to a single command. All checks must return True for the command to run, providing layered permission control.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef is_in_guild(guild_id):\n    async def predicate(ctx):\n        return ctx.guild and ctx.guild.id == guild_id\n    return commands.check(predicate)\n\n@bot.command()\n@commands.is_owner()\n@is_in_guild(41771983423143937)\nasync def secretguilddata(ctx):\n    \"\"\"super secret stuff\"\"\"\n    await ctx.send('secret stuff')\n```\n\n----------------------------------------\n\nTITLE: Implementing Command-Specific Hooks in Pycord\nDESCRIPTION: Example of implementing before and after invocation hooks for a specific command. These hooks only run for the 'foo' command.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def foo(ctx):\n    await ctx.send('foo')\n\n@foo.before_invoke\nasync def before_foo_command(ctx):\n    # do something before the foo command is called\n    pass\n\n@foo.after_invoke\nasync def after_foo_command(ctx):\n    # do something after the foo command is called\n    pass\n```\n\n----------------------------------------\n\nTITLE: Performing Actions During Task Cancellation\nDESCRIPTION: Demonstrates how to use the @after_loop decorator to perform cleanup actions when a background task is being cancelled, such as processing remaining data in a batch.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/tasks/index.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks, commands\nimport asyncio\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot= bot\n        self._batch = []\n        self.lock = asyncio.Lock()\n        self.bulker.start()\n\n    async def do_bulk(self):\n        # bulk insert data here\n        ...\n\n    @tasks.loop(seconds=10.0)\n    async def bulker(self):\n        async with self.lock:\n            await self.do_bulk()\n\n    @bulker.after_loop\n    async def on_bulker_cancel(self):\n        if self.bulker.is_being_cancelled() and len(self._batch) != 0:\n            # if we're cancelled and we have some data left...\n            # let's insert it to our database\n            await self.do_bulk()\n```\n\n----------------------------------------\n\nTITLE: Advanced File-based Logging Configuration for Pycord\nDESCRIPTION: A more advanced logging setup that writes logs to a file instead of the console. This configuration creates a formatted log file with timestamps and log levels, which is especially useful for debugging.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/logging.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nimport logging\n\nlogger = logging.getLogger('discord')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')\nhandler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files and Images to Discord\nDESCRIPTION: Shows different methods for uploading files to Discord channels, including single file uploads, multiple file uploads, and uploading from URLs using aiohttp.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait channel.send(file=discord.File('my_file.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nwith open('my_file.png', 'rb') as fp:\n    await channel.send(file=discord.File(fp, 'new_filename.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_files = [\n    discord.File('result.zip'),\n    discord.File('teaser_graph.png'),\n]\nawait channel.send(files=my_files)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport aiohttp\n\nasync with aiohttp.ClientSession() as session:\n    async with session.get(my_url) as resp:\n        if resp.status != 200:\n            return await channel.send('Could not download file...')\n        data = io.BytesIO(await resp.read())\n        await channel.send(file=discord.File(data, 'cool_image.png'))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Check Decorator in Python\nDESCRIPTION: Shows how to create a reusable check by wrapping it in a decorator function. This approach allows for more modular code and easier reuse of common permission checks.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef is_owner():\n    async def predicate(ctx):\n        return ctx.author.id == 316026178463072268\n    return commands.check(predicate)\n\n@bot.command(name='eval')\n@is_owner()\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\n----------------------------------------\n\nTITLE: Consuming Rest Parameters in Discord.py Commands\nDESCRIPTION: Shows how to create a command that captures all remaining text as a single argument using the asterisk syntax. This allows multi-word input without requiring quotes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def echo(ctx, *, message: str):\n    await ctx.send(message)\n```\n\n----------------------------------------\n\nTITLE: Handling Timeouts with wait_for in v1.0\nDESCRIPTION: Example of how to handle timeouts when waiting for events in v1.0, using asyncio.TimeoutError.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef pred(m):\n    return m.author == message.author and m.channel == message.channel\n\ntry:\n    msg = await client.wait_for('message', check=pred, timeout=60.0)\nexcept asyncio.TimeoutError:\n    await channel.send('You took too long...')\nelse:\n    await channel.send('You said {0.content}, {0.author}.'.format(msg))\n```\n\n----------------------------------------\n\nTITLE: Sending Direct Messages to Discord Users\nDESCRIPTION: Shows multiple ways to send direct messages to users, either by getting a user object directly or by using the author attribute from a received message.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser = client.get_user(381870129706958858)\nawait user.send('👀')\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Command Check with is_owner Function in Python\nDESCRIPTION: Demonstrates how to implement a basic owner check for a command using a predicate function. The command will only execute if the user's ID matches the specified owner ID.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nasync def is_owner(ctx):\n    return ctx.author.id == 316026178463072268\n\n@bot.command(name='eval')\n@commands.check(is_owner)\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\n----------------------------------------\n\nTITLE: Implementing Cog with Special Methods in Pycord 1.0\nDESCRIPTION: Demonstrates a cog implementation using the new Pycord 1.0 structure. It includes examples of cog_unload, bot_check, cog_check, cog_command_error, and other special methods.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass MyCog(commands.Cog, name='Example Cog'):\n    def cog_unload(self):\n        print('cleanup goes here')\n\n    def bot_check(self, ctx):\n        print('bot check')\n        return True\n\n    def bot_check_once(self, ctx):\n        print('bot check once')\n        return True\n\n    async def cog_check(self, ctx):\n        print('cog local check')\n        return await ctx.bot.is_owner(ctx.author)\n\n    async def cog_command_error(self, ctx, error):\n        print('Error in {0.command.qualified_name}: {1}'.format(ctx, error))\n\n    async def cog_before_invoke(self, ctx):\n```\n\n----------------------------------------\n\nTITLE: Using async for with Discord API history method\nDESCRIPTION: Demonstrates the basic syntax for using async for loops with async iterators, specifically with a channel's history method.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/async_iter.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync for elem in channel.history():\n    # do stuff with elem here\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to a Specific Discord Channel\nDESCRIPTION: Demonstrates how to get a specific channel by ID and send a message to it using the Pycord library.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchannel = client.get_channel(12324234183172)\nawait channel.send('hello')\n```\n\n----------------------------------------\n\nTITLE: Using Inline Converter with classmethod in Discord.py\nDESCRIPTION: This snippet shows how to create a more concise implementation using an inline converter with a classmethod. The JoinDistance class itself handles the conversion from a member argument, eliminating the need for a separate converter class.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass JoinDistance:\n    def __init__(self, joined, created):\n        self.joined = joined\n        self.created = created\n\n    @classmethod\n    async def convert(cls, ctx, argument):\n        member = await commands.MemberConverter().convert(ctx, argument)\n        return cls(member.joined_at, member.created_at)\n\n    @property\n    def delta(self):\n        return self.joined - self.created\n\n@bot.command()\nasync def delta(ctx, *, member: JoinDistance):\n    is_new = member.delta.days < 100\n    if is_new:\n        await ctx.send(\"Hey you're pretty new!\")\n    else:\n        await ctx.send(\"Hm you're not so new.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord.py with Default Intents excluding Typing and Presences\nDESCRIPTION: Creates an intents configuration that uses the default intents but disables typing and presence events. Shows how to use these intents with both Client and Bot classes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/intents.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nintents = discord.Intents.default()\nintents.typing = False\nintents.presences = False\n\n# Somewhere else:\n# client = discord.Client(intents=intents)\n# or\n# from discord.ext import commands\n# bot = commands.Bot(command_prefix='!', intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Custom Function Converter in Commands\nDESCRIPTION: Shows how to use a custom function as a converter that transforms the input before processing. This example converts text to uppercase.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef to_upper(argument):\n    return argument.upper()\n\n@bot.command()\nasync def up(ctx, *, content: to_upper):\n    await ctx.send(content)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hello Command Extension in Python\nDESCRIPTION: Demonstrates how to create a basic extension with a hello command. The extension uses a setup function to register the command with the bot when loaded.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/extensions.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\n\n@commands.command()\nasync def hello(ctx):\n    await ctx.send(f'Hello {ctx.author.display_name}.')\n\ndef setup(bot):\n    bot.add_command(hello)\n```\n\n----------------------------------------\n\nTITLE: Delaying Loop Start Until Bot is Ready\nDESCRIPTION: Shows how to use the @before_loop decorator to delay the start of a background task until the Discord bot is fully ready, ensuring all resources are available.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/tasks/index.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.index = 0\n        self.bot = bot\n        self.printer.start()\n\n    def cog_unload(self):\n        self.printer.cancel()\n\n    @tasks.loop(seconds=5.0)\n    async def printer(self):\n        print(self.index)\n        self.index += 1\n\n    @printer.before_loop\n    async def before_printer(self):\n        print('waiting...')\n        await self.bot.wait_until_ready()\n```\n\n----------------------------------------\n\nTITLE: Implementing Cog Methods for Command Hooks in Pycord\nDESCRIPTION: Example of a cog class implementing cog_before_invoke and cog_after_invoke methods. This shows how to set data before a command runs and perform actions after it completes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass MyCog(commands.Cog):\n    async def cog_before_invoke(self, ctx):\n        ctx.secret_cog_data = 'foo'\n\n    async def cog_after_invoke(self, ctx):\n        print('{0.command} is done...'.format(ctx))\n\n    @commands.command()\n    async def foo(self, ctx):\n        await ctx.send(ctx.secret_cog_data)\n```\n\n----------------------------------------\n\nTITLE: Using Tuple Type Annotations with FlagConverter for Variadic Arguments\nDESCRIPTION: Demonstrates using Tuple type annotations with FlagConverter to allow variadic arguments in a more concise syntax. This example allows specifying multiple members after a single flag.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\nfrom typing import Tuple\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    members: Tuple[discord.Member, ...]\n    reason: str\n    days: int = 1\n```\n\n----------------------------------------\n\nTITLE: Reloading Extensions in Python\nDESCRIPTION: Shows how to reload an extension using the bot's reload_extension method. This allows for hot-reloading of extension code without restarting the bot.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/extensions.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> bot.reload_extension('hello')\n```\n\n----------------------------------------\n\nTITLE: Removing a Cog from a Bot in Python\nDESCRIPTION: This snippet demonstrates how to remove a previously registered cog from a bot by referencing its name. This is useful when you need to dynamically unload cog functionality.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/cogs.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbot.remove_cog('Greetings')\n```\n\n----------------------------------------\n\nTITLE: Multiple Positional Arguments in Commands\nDESCRIPTION: Shows how to handle multiple positional arguments in a command, displaying both arguments in the response.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx, arg1, arg2):\n    await ctx.send(f'You passed {arg1} and {arg2}')\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelType Enumeration in Python\nDESCRIPTION: Defines an enumeration for specifying the type of Discord channel. Includes various types such as text, voice, private, group, category, news, stage voice, threads, directory, and forum.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ChannelType:\n    text\n    voice\n    private\n    group\n    category\n    news\n    stage_voice\n    news_thread\n    public_thread\n    private_thread\n    directory\n    forum\n```\n\n----------------------------------------\n\nTITLE: Extension Lifecycle Hooks in Python\nDESCRIPTION: Demonstrates setup and teardown functions in an extension. The setup function is called when the extension is loaded, and teardown is called when it's unloaded.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/extensions.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef setup(bot):\n    print('I am being loaded!')\n\ndef teardown(bot):\n    print('I am being unloaded!')\n```\n\n----------------------------------------\n\nTITLE: Customizing Cog Name in Python\nDESCRIPTION: This snippet shows how to customize a cog's name by passing the 'name' keyword argument to the class definition. This allows you to define how the cog is referenced in the bot without changing the class name.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/cogs.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyCog(commands.Cog, name='My Cog'):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Basic Type Converters in Commands\nDESCRIPTION: Demonstrates using basic type converters (int) to automatically convert string arguments to integers before processing them in the command.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def add(ctx, a: int, b: int):\n    await ctx.send(a + b)\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogDiff Class in Python\nDESCRIPTION: This code defines the AuditLogDiff class, which represents the differences in an audit log entry. It has various attributes representing different aspects of a guild or channel that can be changed, such as name, icon, splash, and permissions.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/audit_logs.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogDiff:\n\n    def __init__(self):\n        self.name = None\n        self.icon = None\n        self.splash = None\n        self.discovery_splash = None\n        self.banner = None\n        self.owner = None\n        self.afk_channel = None\n        self.system_channel = None\n        self.rules_channel = None\n        self.public_updates_channel = None\n        self.afk_timeout = None\n        self.mfa_level = None\n        self.widget_enabled = None\n        self.widget_channel = None\n        self.verification_level = None\n        self.default_notifications = None\n        self.explicit_content_filter = None\n        self.default_message_notifications = None\n        self.vanity_url_code = None\n        self.position = None\n        self.type = None\n        self.topic = None\n        self.bitrate = None\n        self.overwrites = None\n        self.privacy_level = None\n        self.roles = None\n        self.nick = None\n        self.deaf = None\n        self.mute = None\n        self.permissions = None\n        self.colour = None\n        self.color = None\n        self.hoist = None\n\n    def __iter__(self):\n        return iter(self.__dict__.items())\n```\n\n----------------------------------------\n\nTITLE: Creating a Loop with a Fixed Number of Iterations\nDESCRIPTION: Demonstrates how to create a task that loops a specific number of times (5 in this case) before exiting, and defines an action to perform after the loop completes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/tasks/index.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks\n\n@tasks.loop(seconds=5.0, count=5)\nasync def slow_count():\n    print(slow_count.current_loop)\n\n@slow_count.after_loop\nasync def after_slow_count():\n    print('done!')\n\nslow_count.start()\n```\n\n----------------------------------------\n\nTITLE: Customizing Flag Names and Default Values in FlagConverter\nDESCRIPTION: Shows how to customize flag names and default values in a FlagConverter using the commands.flag() function. This example maps 'members' attribute to a 'member' flag with a default empty list.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nclass BanFlags(commands.FlagConverter):\n    members: List[discord.Member] = commands.flag(name='member', default=lambda ctx: [])\n```\n\n----------------------------------------\n\nTITLE: Getting Message ID After Sending\nDESCRIPTION: Demonstrates how to obtain the ID of a message after sending it through a channel using Pycord.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = await channel.send('hmm…')\nmessage_id = message.id\n```\n\n----------------------------------------\n\nTITLE: Filtering out bot messages from history\nDESCRIPTION: Shows how to use the filter() method to exclude messages from bot accounts when iterating through channel history.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/async_iter.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef predicate(message):\n    return not message.author.bot\n\nasync for elem in channel.history().filter(predicate):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in Discord.py v1.0\nDESCRIPTION: Shows the new message sending syntax in Discord.py v1.0 which replaces the previous Client.send_message method with channel.send() and includes examples for sending text and embeds.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# before\nawait client.send_message(channel, 'Hello')\n\n# after\nawait channel.send('Hello')\n```\n\nLANGUAGE: python\nCODE:\n```\ne = discord.Embed(title='foo')\nawait channel.send('Hello', embed=e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronous Webhook in Pycord v2.0\nDESCRIPTION: Shows how to create and use a synchronous webhook in Pycord v2.0. This example creates a SyncWebhook from a URL and sends a message.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v2.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwebhook = discord.SyncWebhook.from_url(\n    f\"https://discord.com/api/webhooks/{id}/{token}\"\n)\nwebhook.send(\"Hello from Pycord 2.0\")\n```\n\n----------------------------------------\n\nTITLE: Basic Pycord Discord Bot Example\nDESCRIPTION: A simple example showing how to create a Discord bot with Pycord using event-based programming. It demonstrates handling the on_ready and on_message events.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/installing.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_ready(self):\n        print(f'Logged on as {self.user}!')\n\n    async def on_message(self, message):\n        print(f'Message from {message.author}: {message.content}')\n\nclient = MyClient()\nclient.run('my token goes here')\n```\n\n----------------------------------------\n\nTITLE: BanEntry Namedtuple Definition in Python\nDESCRIPTION: A namedtuple class that represents a ban returned from Guild.bans() method. It contains two attributes: reason and user, providing information about why a user was banned and who was banned.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/models.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BanEntry:\n\n    A namedtuple which represents a ban returned from :meth:`~Guild.bans`.\n\n    .. attribute:: reason\n\n        The reason this user was banned.\n\n        :type: Optional[:class:`str`]\n    .. attribute:: user\n\n        The :class:`User` that was banned.\n\n        :type: :class:`User`\n```\n\n----------------------------------------\n\nTITLE: File Uploading in Discord.py v1.0\nDESCRIPTION: Demonstrates the new file uploading system in Discord.py v1.0 using the discord.File class, which allows for multiple file attachments in a single message.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# before\nawait client.send_file(channel, 'cool.png', filename='testing.png', content='Hello')\n\n# after\nawait channel.send('Hello', file=discord.File('cool.png', 'testing.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_files = [\n    discord.File('cool.png', 'testing.png'),\n    discord.File(some_fp, 'cool_filename.png'),\n]\n\nawait channel.send('Your images:', files=my_files)\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Paginator Instance in Discord.py\nDESCRIPTION: This command demonstrates how to update an existing paginator instance with different options after a delay. It first creates a paginator with disabled buttons hidden, then updates it after 3 seconds to show disabled buttons and hide the page indicator.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/pages/index.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pagetest.command(name=\"update\")\nasync def pagetest_update(self, ctx: discord.ApplicationContext):\n    \"\"\"Demonstrates updating an existing paginator instance with different options.\"\"\"\n    paginator = pages.Paginator(pages=self.get_pages(), show_disabled=False)\n    await paginator.respond(ctx.interaction)\n    await asyncio.sleep(3)\n    await paginator.update(show_disabled=True, show_indicator=False)\n```\n\n----------------------------------------\n\nTITLE: Voice Connection Example (After v1.0)\nDESCRIPTION: Example of how voice connections are handled in Pycord v1.0, using channel.connect() and the new AudioSource system.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvc = await channel.connect()\nvc.play(discord.FFmpegPCMAudio('testing.mp3'), after=lambda e: print('done', e))\nvc.is_playing()\nvc.pause()\nvc.resume()\nvc.stop()\n# ...\n```\n\n----------------------------------------\n\nTITLE: Using AutoShardedClient for Bot Sharding\nDESCRIPTION: Example of how to use the new AutoShardedClient for automatic sharding in a single process.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclient = discord.AutoShardedClient()\n```\n\n----------------------------------------\n\nTITLE: Single Argument Command in Discord.py\nDESCRIPTION: Shows a basic command that takes a single string argument. This implementation will only capture the first word if multiple words are provided without quotes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def echo(ctx, message: str):\n    await ctx.send(message)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Context with Bot\nDESCRIPTION: Example of how to use a custom Context class with a Bot in v1.0.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass MyBot(commands.Bot):\n    async def on_message(self, message):\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the Original Message in Discord.py Commands\nDESCRIPTION: Demonstrates how to access the original message object from the Context in command callbacks. This example shows how to get the length of the original message content.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/faq.rst#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def length(ctx):\n    await ctx.send(f'Your message is {len(ctx.message.content)} characters long.')\n```\n\n----------------------------------------\n\nTITLE: Documenting AuditLogAction Class in Discord.py\nDESCRIPTION: Documentation for the AuditLogAction class in Discord.py, which represents different types of audit log actions that can be retrieved from a guild's audit logs.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. class:: AuditLogAction\n\n    Represents the type of action being done for a :class:`AuditLogEntry`\\,\n    which is retrievable via :meth:`Guild.audit_logs`.\n```\n\n----------------------------------------\n\nTITLE: Alternative Command Registration Methods\nDESCRIPTION: Demonstrates two equivalent ways to register commands: using bot.command() decorator or using commands.command() with bot.add_command().\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\n\nbot = commands.Bot(command_prefix='$')\n\n@bot.command()\nasync def test(ctx):\n    pass\n\n# or:\n\n@commands.command()\nasync def test(ctx):\n    pass\n\nbot.add_command(test)\n```\n\n----------------------------------------\n\nTITLE: Defining Bot Command Decorator in Python\nDESCRIPTION: Defines a decorator method for creating bot commands in the Bot class. This method allows developers to easily create new bot commands with custom parameters.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nBot.command(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Customizing Command Names\nDESCRIPTION: Shows how to specify a custom name for a command that differs from the function name, using the name parameter in the command decorator.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@bot.command(name='list')\nasync def _list(ctx, arg):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Loading Opus Library in Discord\nDESCRIPTION: Function to load the Opus library for audio encoding/decoding in Discord. This is a crucial step for voice functionality.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/voice.rst#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: discord.opus.load_opus\n```\n\n----------------------------------------\n\nTITLE: Variable Arguments in Commands\nDESCRIPTION: Demonstrates how to use variable arguments (*args) to accept an arbitrary number of arguments. The command displays the count and content of all arguments.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx, *args):\n    arguments = ', '.join(args)\n    await ctx.send(f'{len(args)} arguments: {arguments}')\n```\n\n----------------------------------------\n\nTITLE: Implementing User Command Decorator for Discord Bot in Python\nDESCRIPTION: Creates a decorator method for defining user commands in the Bot class. This allows developers to create commands that can be executed on Discord users.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nBot.user_command(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using Positional Arguments in Commands\nDESCRIPTION: Demonstrates how to define and use positional arguments in a command. The function accepts one argument which is sent back to the channel.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx, arg):\n    await ctx.send(arg)\n```\n\n----------------------------------------\n\nTITLE: Installing Pycord with Voice Support\nDESCRIPTION: Commands to install Pycord with full voice support capabilities using pip package manager for different operating systems.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/README.rst#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U \"py-cord[voice]\"\n\n# Windows\npy -3 -m pip install -U py-cord[voice]\n```\n\n----------------------------------------\n\nTITLE: Using Tuple for Parsing Coordinate Pairs in FlagConverter\nDESCRIPTION: Shows how to use a Tuple type annotation in FlagConverter to parse pairs of values. This example parses coordinates as pairs of integers.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# point: 10 11 point: 12 13\nclass Coordinates(commands.FlagConverter):\n    point: Tuple[int, int]\n```\n\n----------------------------------------\n\nTITLE: Implementing Guild Fetching Method for Discord Client in Python\nDESCRIPTION: Defines an asynchronous method for fetching guilds in the Client class. This method allows developers to retrieve guild information using an asynchronous for loop.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nClient.fetch_guilds\n```\n\n----------------------------------------\n\nTITLE: Waiting for Reactions in v1.0\nDESCRIPTION: Example of how to wait for a reaction event in v1.0, demonstrating multiple return values from the wait_for method.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nreaction, user = await client.wait_for('reaction_add', check=lambda r, u: u.id == 176995180300206080)\n\n# use user and reaction\n```\n\n----------------------------------------\n\nTITLE: Mapping message objects to content strings\nDESCRIPTION: Demonstrates using the map() method to transform message objects into their content strings for processing.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/async_iter.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef transform(message):\n    return message.content\n\nasync for content in channel.history().map(transform):\n    message_length = len(content)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cog Local Hooks in Pycord\nDESCRIPTION: Example showing cog_before_invoke and cog_after_invoke methods within a cog class. These hooks print the qualified name of the command being executed.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nprint('cog local before: {0.command.qualified_name}'.format(ctx))\n\nasync def cog_after_invoke(self, ctx):\n    print('cog local after: {0.command.qualified_name}'.format(ctx))\n\n@commands.Cog.listener()\nasync def on_message(self, message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Iterators in Discord.py v1.0\nDESCRIPTION: Shows how to use the new AsyncIterator class for operations like message history, including iterating through results, flattening to lists, and using map/filter methods.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync for message in channel.history():\n    print(message)\n```\n\nLANGUAGE: python\nCODE:\n```\nmessages = await channel.history().flatten()\nfor message in messages:\n    print(message)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync for m_id in channel.history().filter(lambda m: m.author == client.user).map(lambda m: m.id):\n    print(m_id)\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_last_message = await channel.history().get(author=client.user)\n```\n\n----------------------------------------\n\nTITLE: Event Argument Changes in Discord.py v1.0\nDESCRIPTION: Demonstrates the argument changes for several event handlers in Discord.py v1.0, including voice_state_update, guild_emojis_update, and member_ban events.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def on_voice_state_update(before, after)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def on_voice_state_update(member, before, after)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def on_guild_emojis_update(before, after)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def on_guild_emojis_update(guild, before, after)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def on_member_ban(member)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def on_member_ban(guild, user)\n```\n\n----------------------------------------\n\nTITLE: Defining StickerType Enum in Python\nDESCRIPTION: This snippet defines the StickerType enum class, which represents the type of sticker in Discord. Currently, it only includes a 'standard' type.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass StickerType:\n    standard = ...\n```\n\n----------------------------------------\n\nTITLE: Converter Implementation After v1.0 in Pycord\nDESCRIPTION: Example of how converters are implemented in Pycord v1.0 and later. The convert method is now a coroutine that takes context and argument as parameters.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass MyConverter(commands.Converter):\n    async def convert(self, ctx, argument):\n        return ctx.me\n```\n\n----------------------------------------\n\nTITLE: Waiting for Messages (Before vs After v1.0)\nDESCRIPTION: Comparison of how to wait for a message event before and after v1.0, showing the transition to the generalized wait_for method.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# before\nmsg = await client.wait_for_message(author=message.author, channel=message.channel)\n\n# after\ndef pred(m):\n    return m.author == message.author and m.channel == message.channel\n\nmsg = await client.wait_for('message', check=pred)\n```\n\n----------------------------------------\n\nTITLE: Using Checks in Pycord Commands\nDESCRIPTION: Example of applying checks to commands in Pycord. Checks are used to control who can use a command based on certain conditions.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/api.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@commands.check(predicate)\ndef command_name(ctx):\n    # Command implementation\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Advanced Converters\nDESCRIPTION: Shows how to use the built-in clean_content converter, which can be used with default settings or customized with specific parameters.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def clean(ctx, *, content: commands.clean_content):\n    await ctx.send(content)\n\n# or for fine-tuning\n\n@bot.command()\nasync def clean(ctx, *, content: commands.clean_content(use_nicknames=False)):\n    await ctx.send(content)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Audio Volume with PCMVolumeTransformer\nDESCRIPTION: Example showing how to modify audio volume at runtime using PCMVolumeTransformer with the new voice system.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvc.source = discord.PCMVolumeTransformer(vc.source)\nvc.source.volume = 0.6\n```\n\n----------------------------------------\n\nTITLE: Targeting a Specific User with Paginator (Prefix Command) in Discord.py\nDESCRIPTION: This command demonstrates sending a paginator to a different target than where it was invoked using a prefix command. It sends the paginator directly to the author with a notification message.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/pages/index.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@commands.command()\nasync def pagetest_target(self, ctx: commands.Context):\n    \"\"\"Demonstrates sending the paginator to a different target than where it was invoked (prefix-command version).\"\"\"\n    paginator = pages.Paginator(pages=self.get_pages())\n    await paginator.send(ctx, target=ctx.author, target_message=\"Paginator sent!\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Context Class\nDESCRIPTION: Example of how to subclass Context to add custom functionality in v1.0.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass MyContext(commands.Context):\n    @property\n    def secret(self):\n        return 'my secret here'\n```\n\n----------------------------------------\n\nTITLE: Chunking reaction users into groups\nDESCRIPTION: Shows how to use the chunk() method to collect users who reacted to a message into groups of a specified size.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/async_iter.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync for leader, *users in reaction.users().chunk(3):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Controlling Sharding Parameters\nDESCRIPTION: Example of how to specify shard count and IDs for more control over the sharding process.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# launch 10 shards regardless\nclient = discord.AutoShardedClient(shard_count=10)\n\n# launch specific shard IDs in this process\nclient = discord.AutoShardedClient(shard_count=10, shard_ids=(1, 2, 5, 6))\n```\n\n----------------------------------------\n\nTITLE: Converting String Snowflakes to Integers in Discord.py v1.0\nDESCRIPTION: Demonstrates the change from string to integer representation of snowflakes (ID values) in Discord.py v1.0. This affects how channels are retrieved and how ID comparisons are performed.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# before\nch = client.get_channel('84319995256905728')\nif message.author.id == '80528701850124288':\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# after\nch = client.get_channel(84319995256905728)\nif message.author.id == 80528701850124288:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookType Enum in Python\nDESCRIPTION: This snippet defines the WebhookType enum class, which represents different types of webhooks in Discord. It includes types for incoming webhooks, channel followers, and application webhooks.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass WebhookType:\n    incoming = ...\n    channel_follower = ...\n    application = ...\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogAction Attributes in Python\nDESCRIPTION: This snippet defines various attributes of the AuditLogAction class, including actions for scheduled events, threads, and auto-moderation rules. Each attribute represents a specific action that can be logged in a Discord server's audit log.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogAction:\n    # ... (previous attributes)\n\n    scheduled_event_create = ...\n    scheduled_event_update = ...\n    scheduled_event_delete = ...\n    thread_create = ...\n    thread_update = ...\n    thread_delete = ...\n    application_command_permission_update = ...\n    auto_moderation_rule_create = ...\n    auto_moderation_rule_update = ...\n    auto_moderation_rule_delete = ...\n    auto_moderation_block_message = ...\n    auto_moderation_flag_to_channel = ...\n    auto_moderation_user_communication_disabled = ...\n    creator_monetization_request_created = ...\n    creator_monetization_terms_accepted = ...\n    voice_channel_status_update = ...\n    voice_channel_status_delete = ...\n```\n\n----------------------------------------\n\nTITLE: Accessing __version__ String in Discord.py\nDESCRIPTION: A string representation of the library version following PEP 440 standards. Returns version information in a format like '1.0.0rc1'.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/version_info.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Types with isinstance in Discord.py\nDESCRIPTION: Demonstrates how to check channel types using isinstance() with the new abstract base classes for different channel types in Discord.py v1.0.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nisinstance(channel, discord.abc.GuildChannel)\n```\n\nLANGUAGE: python\nCODE:\n```\nisinstance(channel, discord.abc.PrivateChannel)\n```\n\nLANGUAGE: python\nCODE:\n```\nisinstance(channel, discord.TextChannel)\n```\n\n----------------------------------------\n\nTITLE: Defining UserFlags Enumeration in Python\nDESCRIPTION: Defines an enumeration for representing Discord User flags. Includes various flags such as staff, partner, hypesquad, bug hunter, and more.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass UserFlags:\n    staff\n    partner\n    hypesquad\n    bug_hunter\n    mfa_sms\n    premium_promo_dismissed\n    hypesquad_bravery\n    hypesquad_brilliance\n    hypesquad_balance\n    early_supporter\n    team_user\n    partner_or_verification_application\n    system\n    has_unread_urgent_messages\n    bug_hunter_level_2\n    underage_deleted\n    verified_bot\n    verified_bot_developer\n    discord_certified_moderator\n    bot_http_interactions\n    spammer\n    active_developer\n```\n\n----------------------------------------\n\nTITLE: Documenting Channel Update AuditLogAction in Discord.py\nDESCRIPTION: Documentation for the channel_update attribute of AuditLogAction class which represents channel update events in the audit log, including triggers, target types, and possible AuditLogDiff attributes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: channel_update\n\n    A channel was updated. Things that trigger this include:\n\n    - The channel name or topic was changed\n    - The channel bitrate was changed\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`abc.GuildChannel` or :class:`Object` with an ID.\n\n    A more filled out object in the :class:`Object` case can be found\n    by using :attr:`~AuditLogEntry.after` or :attr:`~AuditLogEntry.before`.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.name`\n    - :attr:`~AuditLogDiff.type`\n    - :attr:`~AuditLogDiff.position`\n    - :attr:`~AuditLogDiff.overwrites`\n    - :attr:`~AuditLogDiff.topic`\n    - :attr:`~AuditLogDiff.bitrate`\n    - :attr:`~AuditLogDiff.rtc_region`\n    - :attr:`~AuditLogDiff.video_quality_mode`\n    - :attr:`~AuditLogDiff.default_auto_archive_duration`\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listener Decorator for Discord Client in Python\nDESCRIPTION: Defines a decorator method for creating event listeners in the Client class. This allows developers to handle various Discord events in their client implementation.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nClient.event()\n```\n\n----------------------------------------\n\nTITLE: Creating Timezone-aware Datetime in Python\nDESCRIPTION: Demonstrates how to create a timezone-aware datetime object for use with Discord embeds in Pycord v2.0. This example sets the timestamp for a Pi Day 2021 embed in UTC.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v2.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nembed = discord.Embed(\n    title = \"Pi Day 2021 in UTC\",\n    timestamp = datetime(2021, 3, 14, 15, 9, 2, tzinfo=timezone.utc)\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Discord Voice Module\nDESCRIPTION: This snippet shows how to import the Discord module for voice-related functionality. It sets up the current module context for the documentation.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/voice.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: discord\n```\n\n----------------------------------------\n\nTITLE: Defining ExpireBehaviour Enum in Python\nDESCRIPTION: This snippet defines the ExpireBehaviour enum class, which represents the behavior to be performed when a user's integration subscription expires. It includes options to remove a role or kick the user.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass ExpireBehaviour:\n    remove_role = ...\n    kick = ...\n```\n\n----------------------------------------\n\nTITLE: Targeting a Specific User with Paginator in Discord.py\nDESCRIPTION: This command demonstrates how to send a paginator to a different target than where it was invoked using application commands. The paginator is sent directly to the user who triggered the interaction rather than the channel.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/pages/index.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pagetest.command(name=\"target\")\nasync def pagetest_target(self, ctx: discord.ApplicationContext):\n    \"\"\"Demonstrates sending the paginator to a different target than where it was invoked.\"\"\"\n    paginator = pages.Paginator(pages=self.get_pages())\n    await paginator.respond(ctx.interaction, target=ctx.interaction.user)\n```\n\n----------------------------------------\n\nTITLE: Finding audit logs with a predicate function\nDESCRIPTION: Demonstrates using the find() method with a predicate function to locate the first audit log entry that has a reason.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/async_iter.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef predicate(event):\n    return event.reason is not None\n\nevent = await guild.audit_logs().find(predicate)\n```\n\n----------------------------------------\n\nTITLE: Installing Pycord in a virtual environment\nDESCRIPTION: Command for installing Pycord within an activated Python virtual environment.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/installing.rst#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install -U py-cord\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Configuration for Pycord\nDESCRIPTION: A simple configuration that outputs Pycord logs to the console. This setup specifies the logging level as INFO, which determines what severity of logs will be shown.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/logging.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Cog Setup Function for Discord.py\nDESCRIPTION: A simple setup function for adding the PageTest cog to a Discord bot. This is the standard method for registering cog classes with a Discord.py bot instance.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/pages/index.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef setup(bot):\n    bot.add_cog(PageTest(bot))\n```\n\n----------------------------------------\n\nTITLE: Defining MessageType Enumeration in Python\nDESCRIPTION: Defines an enumeration for specifying the type of Discord message. Includes various system message types and regular message types.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MessageType:\n    default\n    recipient_add\n    recipient_remove\n    call\n    channel_name_change\n    channel_icon_change\n    pins_add\n    new_member\n    premium_guild_subscription\n    premium_guild_tier_1\n    premium_guild_tier_2\n    premium_guild_tier_3\n    channel_follow_add\n    guild_stream\n    guild_discovery_disqualified\n    guild_discovery_requalified\n    guild_discovery_grace_period_initial_warning\n    guild_discovery_grace_period_final_warning\n    thread_created\n    reply\n    application_command\n    guild_invite_reminder\n    thread_starter_message\n    context_menu_command\n    auto_moderation_action\n    role_subscription_purchase\n    interaction_premium_upsell\n    stage_start\n    stage_end\n    stage_speaker\n    stage_raise_hand\n    stage_topic\n    guild_application_premium_subscription\n```\n\n----------------------------------------\n\nTITLE: Activating a virtual environment on Linux/macOS\nDESCRIPTION: Command for activating a Python virtual environment on Linux or macOS systems.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/installing.rst#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ source bot-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Command Context Changes (Before vs After v1.0)\nDESCRIPTION: Example showing the command context changes in v1.0, where Context is always passed to commands.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# before\n@bot.command()\nasync def foo():\n    await bot.say('Hello')\n\n# after\n@bot.command()\nasync def foo(ctx):\n    await ctx.send('Hello')\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogChanges Class in Python\nDESCRIPTION: This code defines the AuditLogChanges class, which represents a set of changes in an audit log entry. It has 'before' and 'after' attributes of type AuditLogDiff, with their contents varying based on the AuditLogActionCategory.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/audit_logs.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogChanges:\n\n    def __init__(self):\n        self.before = AuditLogDiff()\n        self.after = AuditLogDiff()\n```\n\n----------------------------------------\n\nTITLE: Accessing version_info Named Tuple in Discord.py\nDESCRIPTION: A named tuple similar to Python's sys.version_info that provides structured version information. The releaselevel field can be 'alpha', 'beta', 'candidate', or 'final'.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/version_info.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nversion_info\n```\n\n----------------------------------------\n\nTITLE: Importing PyCord Dependency Requirements Files\nDESCRIPTION: Aggregates multiple requirement files using pip's recursive import functionality. Includes dependencies for development, documentation, speed optimization, and voice features.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/all.txt#2025-04-19_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-r dev.txt\n-r docs.txt\n-r speed.txt\n-r voice.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Event Listener Decorator for Discord Bot in Python\nDESCRIPTION: Implements a decorator method for creating custom event listeners in the Bot class. This method allows developers to define handlers for specific events, with options for one-time execution.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/clients.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nBot.listen(name=None, once=False)\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultAvatar Enum in Python\nDESCRIPTION: This snippet defines the DefaultAvatar enum class, which represents the default avatar colors available for Discord users. It includes various color options such as blurple, grey, green, orange, and red.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass DefaultAvatar:\n    blurple = ...\n    grey = ...\n    gray = ...\n    green = ...\n    orange = ...\n    red = ...\n```\n\n----------------------------------------\n\nTITLE: Installing Pycord with Speed Optimizations\nDESCRIPTION: Commands to install Pycord with additional packages for performance optimization using pip package manager.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/README.rst#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U \"py-cord[speed]\"\n# Windows\npy -3 -m pip install -U py-cord[speed]\n```\n\n----------------------------------------\n\nTITLE: RST Attention Block\nDESCRIPTION: Warning block indicating changelog migration to new format\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/old_changelog.rst#2025-04-19_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. attention::\n    This page is no longer maintained. For an updated changelog for version 2.0+, please check out our\n    :doc:`new changelog <changelog>` instead.\n```\n\n----------------------------------------\n\nTITLE: Finding the last message by username with AsyncIterator\nDESCRIPTION: Shows how to use the get() method on an async iterator to find the last message from a specific user by name.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/async_iter.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmsg = await channel.history().get(author__name='Dave')\n```\n\n----------------------------------------\n\nTITLE: Documenting Guild Update AuditLogAction in Discord.py\nDESCRIPTION: Documentation for the guild_update attribute of AuditLogAction class which represents guild update events in the audit log, including various possible attributes for AuditLogDiff.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: guild_update\n\n    The guild has updated. Things that trigger this include:\n\n    - Changing the guild vanity URL\n    - Changing the guild invite splash\n    - Changing the guild AFK channel or timeout\n    - Changing the guild voice server region\n    - Changing the guild icon, banner, or discovery splash\n    - Changing the guild moderation settings\n    - Changing things related to the guild widget\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`Guild`.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.afk_channel`\n    - :attr:`~AuditLogDiff.system_channel`\n    - :attr:`~AuditLogDiff.afk_timeout`\n    - :attr:`~AuditLogDiff.default_message_notifications`\n    - :attr:`~AuditLogDiff.explicit_content_filter`\n    - :attr:`~AuditLogDiff.mfa_level`\n    - :attr:`~AuditLogDiff.name`\n    - :attr:`~AuditLogDiff.owner`\n    - :attr:`~AuditLogDiff.splash`\n    - :attr:`~AuditLogDiff.discovery_splash`\n    - :attr:`~AuditLogDiff.icon`\n    - :attr:`~AuditLogDiff.banner`\n    - :attr:`~AuditLogDiff.vanity_url_code`\n```\n\n----------------------------------------\n\nTITLE: Activating a virtual environment on Windows\nDESCRIPTION: Command for activating a Python virtual environment on Windows systems.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/installing.rst#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bot-env\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Checking Opus Library Load Status in Discord\nDESCRIPTION: Function to check if the Opus library is successfully loaded in Discord. This can be used to verify if voice functionality is available.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/voice.rst#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: discord.opus.is_loaded\n```\n\n----------------------------------------\n\nTITLE: Documenting Channel Create AuditLogAction in Discord.py\nDESCRIPTION: Documentation for the channel_create attribute of AuditLogAction class which represents channel creation events in the audit log, including target types and possible AuditLogDiff attributes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: channel_create\n\n    A new channel was created.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    either a :class:`abc.GuildChannel` or :class:`Object` with an ID.\n\n    A more filled out object in the :class:`Object` case can be found\n    by using :attr:`~AuditLogEntry.after`.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.name`\n    - :attr:`~AuditLogDiff.type`\n    - :attr:`~AuditLogDiff.overwrites`\n```\n\n----------------------------------------\n\nTITLE: Documenting Permission Overwrite AuditLogActions in Discord.py\nDESCRIPTION: Documentation for permission overwrite-related attributes (create, update, delete) of AuditLogAction class, including target/extra field details and possible AuditLogDiff attributes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: overwrite_create\n\n    A channel permission overwrite was created.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`abc.GuildChannel` or :class:`Object` with an ID.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.extra` is\n    either a :class:`Role` or :class:`Member`. If the object is not found\n    then it is a :class:`Object` with an ID being filled, a name, and a\n    ``type`` attribute set to either ``'role'`` or ``'member'`` to help\n    dictate what type of ID it is.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.deny`\n    - :attr:`~AuditLogDiff.allow`\n    - :attr:`~AuditLogDiff.id`\n    - :attr:`~AuditLogDiff.type`\n\n.. attribute:: overwrite_update\n\n    A channel permission overwrite was changed, this is typically\n    when the permission values change.\n\n    See :attr:`overwrite_create` for more information on how the\n    :attr:`~AuditLogEntry.target` and :attr:`~AuditLogEntry.extra` fields\n    are set.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.deny`\n    - :attr:`~AuditLogDiff.allow`\n    - :attr:`~AuditLogDiff.id`\n    - :attr:`~AuditLogDiff.type`\n\n.. attribute:: overwrite_delete\n\n    A channel permission overwrite was deleted.\n\n    See :attr:`overwrite_create` for more information on how the\n    :attr:`~AuditLogEntry.target` and :attr:`~AuditLogEntry.extra` fields\n    are set.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.deny`\n    - :attr:`~AuditLogDiff.allow`\n    - :attr:`~AuditLogDiff.id`\n    - :attr:`~AuditLogDiff.type`\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context in Pycord 1.0 Commands\nDESCRIPTION: Demonstrates how to use a custom context class in a Pycord 1.0 command. The custom context allows access to additional attributes like 'secret' within command functions.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def secret(ctx):\n    await ctx.send(ctx.secret)\n```\n\n----------------------------------------\n\nTITLE: Documenting Member Management AuditLogActions in Discord.py\nDESCRIPTION: Documentation for kick, member_prune, ban, and unban attributes of AuditLogAction class, including target field details and changes information.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: kick\n\n    A member was kicked.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`User` who got kicked.\n\n    When this is the action, :attr:`~AuditLogEntry.changes` is empty.\n\n.. attribute:: member_prune\n\n    A member prune was triggered.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    set to ``None``.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.extra` is\n    set to an unspecified proxy object with two attributes:\n\n    - ``delete_members_days``: An integer specifying how far the prune was.\n    - ``members_removed``: An integer specifying how many members were removed.\n\n    When this is the action, :attr:`~AuditLogEntry.changes` is empty.\n\n.. attribute:: ban\n\n    A member was banned.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`User` who got banned.\n\n    When this is the action, :attr:`~AuditLogEntry.changes` is empty.\n\n.. attribute:: unban\n\n    A member was unbanned.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`User` who got unbanned.\n\n    When this is the action, :attr:`~AuditLogEntry.changes` is empty.\n```\n\n----------------------------------------\n\nTITLE: Converter Implementation Before v1.0 in Pycord\nDESCRIPTION: Example of how converters were implemented before Pycord v1.0. The convert method was instance-based and accessed context through self.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass MyConverter(commands.Converter):\n    def convert(self):\n        return self.ctx.message.server.me\n```\n\n----------------------------------------\n\nTITLE: Documenting Voice-Related AuditLogActions in Discord.py\nDESCRIPTION: Documentation for member_move and member_disconnect attributes of AuditLogAction class, including extra field details introduced in v1.3.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: member_move\n\n    A member's voice channel has been updated. This triggers when a\n    member is moved to a different voice channel.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.extra` is\n    set to an unspecified proxy object with two attributes:\n\n    - ``channel``: A :class:`TextChannel` or :class:`Object` with the channel ID where the members were moved.\n    - ``count``: An integer specifying how many members were moved.\n\n    .. versionadded:: 1.3\n\n.. attribute:: member_disconnect\n\n    A member's voice state has changed. This triggers when a\n    member is force disconnected from voice.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.extra` is\n    set to an unspecified proxy object with one attribute:\n\n    - ``count``: An integer specifying how many members were disconnected.\n\n    .. versionadded:: 1.3\n```\n\n----------------------------------------\n\nTITLE: Documenting Member Update AuditLogActions in Discord.py\nDESCRIPTION: Documentation for member_update and member_role_update attributes of AuditLogAction class, including triggers, target details, and possible AuditLogDiff attributes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: member_update\n\n    A member has updated. This triggers in the following situations:\n\n    - A nickname was changed\n    - They were server muted or deafened (or it was undone)\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`Member` or :class:`User` who got updated.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.nick`\n    - :attr:`~AuditLogDiff.mute`\n    - :attr:`~AuditLogDiff.deaf`\n\n.. attribute:: member_role_update\n\n    A member's role has been updated. This triggers when a member\n    either gains a role or loses a role.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`Member` or :class:`User` who got the role.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.roles`\n```\n\n----------------------------------------\n\nTITLE: Defining ActivityType Enumeration in Python\nDESCRIPTION: Defines an enumeration for specifying the type of Discord Activity. This class is mentioned but not fully defined in the provided code snippet.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ActivityType:\n    # Attributes not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment for Pycord\nDESCRIPTION: Commands for creating and activating a Python virtual environment to isolate Pycord dependencies from system-wide packages.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/installing.rst#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd your-bot-source\n$ python3 -m venv bot-env\n```\n\n----------------------------------------\n\nTITLE: Documenting Bot and Role AuditLogActions in Discord.py\nDESCRIPTION: Documentation for bot_add, role_create, and role_update attributes of AuditLogAction class, including target details and possible AuditLogDiff attributes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: bot_add\n\n    A bot was added to the guild.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`Member` or :class:`User` which was added to the guild.\n\n    .. versionadded:: 1.3\n\n.. attribute:: role_create\n\n    A new role was created.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`Role` or a :class:`Object` with the ID.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.colour`\n    - :attr:`~AuditLogDiff.mentionable`\n    - :attr:`~AuditLogDiff.hoist`\n    - :attr:`~AuditLogDiff.name`\n    - :attr:`~AuditLogDiff.permissions`\n\n.. attribute:: role_update\n\n    A role was updated. This triggers in the following situations:\n\n    - The name has changed\n    - The permissions have changed\n    - The colour has changed\n    - Its hoist/mentionable state has changed\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    the :class:`Role` or a :class:`Object` with the ID.\n\n    Possible attributes for :class:`AuditLogDiff`:\n```\n\n----------------------------------------\n\nTITLE: Documenting Member Status Attributes in Discord.py\nDESCRIPTION: Documentation for member status attributes in Discord.py including online, offline, idle, dnd, do_not_disturb, invisible, and streaming states.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: online\n\n    The member is online.\n.. attribute:: offline\n\n    The member is offline.\n.. attribute:: idle\n\n    The member is idle.\n.. attribute:: dnd\n\n    The member is \"Do Not Disturb\".\n.. attribute:: do_not_disturb\n\n    An alias for :attr:`dnd`.\n.. attribute:: invisible\n\n    The member is \"invisible\". In reality, this is only used in sending\n    a presence a la :meth:`Client.change_presence`. When you receive a\n    user's presence this will be :attr:`offline` instead.\n.. attribute:: streaming\n\n    The member is streaming.\n```\n\n----------------------------------------\n\nTITLE: Installing Pycord with speed optimizations\nDESCRIPTION: Commands for installing Pycord with additional packages for better performance on both Linux/macOS and Windows platforms.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/installing.rst#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U \"py-cord[speed]\"\n\n# Windows\npy -3 -m pip install -U py-cord[speed]\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogActionCategory Enum in Python\nDESCRIPTION: This snippet defines the AuditLogActionCategory enum class, which represents the category of an AuditLogAction. It includes categories for creation, deletion, and update actions.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogActionCategory:\n    create = ...\n    delete = ...\n    update = ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Flag Syntax with Different Delimiters and Prefixes\nDESCRIPTION: Demonstrates how to customize flag syntax by specifying different delimiters and prefixes for the FlagConverter. Shows POSIX-style, Windows-style, and case-insensitive examples.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# --hello world syntax\nclass PosixLikeFlags(commands.FlagConverter, delimiter=' ', prefix='--'):\n    hello: str\n\n\n# /make food\nclass WindowsLikeFlags(commands.FlagConverter, prefix='/', delimiter=''):\n    make: str\n\n# TOPIC: not allowed nsfw: yes Slowmode: 100\nclass Settings(commands.FlagConverter, case_insensitive=True):\n    topic: Optional[str]\n    nsfw: Optional[bool]\n    slowmode: Optional[int]\n```\n\n----------------------------------------\n\nTITLE: Installing Linux dependencies for Pycord voice support\nDESCRIPTION: A Debian-based command for installing the necessary system dependencies (libffi, libnacl, python3-dev) required for Pycord's voice functionality.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/installing.rst#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ apt install libffi-dev libnacl-dev python3-dev\n```\n\n----------------------------------------\n\nTITLE: Defining TeamMembershipState Enum in Python\nDESCRIPTION: This snippet defines the TeamMembershipState enum class, which represents the membership state of a team member in a Discord application. It includes states for invited and accepted members.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass TeamMembershipState:\n    invited = ...\n    accepted = ...\n```\n\n----------------------------------------\n\nTITLE: Using aiohttp ClientSession in v2.0+\nDESCRIPTION: Example of how to use aiohttp after its breaking changes in v2.0, which is now required by Pycord v1.0.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as sess:\n    async with sess.get('url') as resp:\n        # work with resp\n```\n\n----------------------------------------\n\nTITLE: Accessing Voice State Properties in Pycord\nDESCRIPTION: Example showing how to access voice state properties before and after the voice state implementation changes. The new implementation requires checking if member.voice exists before accessing its attributes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# before\nmember.deaf\nmember.voice.voice_channel\n\n# after\nif member.voice: # can be None\n    member.voice.deaf\n    member.voice.channel\n```\n\n----------------------------------------\n\nTITLE: Defining PyCord Build Dependencies\nDESCRIPTION: Specifies the required dependencies for building the PyCord project, including a reference to all.txt for main dependencies, build package, setuptools, and setuptools_scm with their minimum version requirements.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/_locale.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-r all.txt\nbuild>=1.2.1\nsetuptools>=72.2.0\nsetuptools_scm>=8.1.0\n```\n\n----------------------------------------\n\nTITLE: RST Document Setup\nDESCRIPTION: Sets up RST document metadata and current module\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/old_changelog.rst#2025-04-19_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n.. currentmodule:: discord\n```\n\n----------------------------------------\n\nTITLE: Voice Connection Example (Before v1.0)\nDESCRIPTION: Example of how voice connections were handled before Pycord v1.0, using the client.join_voice_channel method and creating a player.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/migrating_to_v1.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvc = await client.join_voice_channel(channel)\nplayer = vc.create_ffmpeg_player('testing.mp3', after=lambda: print('done'))\nplayer.start()\n\nplayer.is_playing()\nplayer.pause()\nplayer.resume()\nplayer.stop()\n# ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Sphinx Documentation\nDESCRIPTION: This snippet lists the required Python packages and their specific versions for building Sphinx documentation. It includes core Sphinx packages, extensions for additional features, and themes for customizing the output.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/docs.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx==8.0.2\nsphinxcontrib_trio==1.1.2\nsphinxcontrib-websupport==2.0.0\nmyst-parser[linkify]==4.0.0\nsphinxext-opengraph==0.9.1\nsphinx-copybutton==0.5.2\nfuro==2024.8.6\nsphinx-autodoc-typehints==2.2.3\nsphinx-intl==2.3.1\ntyping_extensions==4.13.1\nlevenshtein==0.27.1\n```\n\n----------------------------------------\n\nTITLE: Installing Pycord Basic Package\nDESCRIPTION: Commands to install the basic Pycord package without voice support using pip package manager for different operating systems.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/README.rst#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U py-cord\n\n# Windows\npy -3 -m pip install -U py-cord\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Pycord\nDESCRIPTION: This snippet defines the required Python packages and their version ranges for the Pycord project. It specifies aiohttp version 3.6.0 or higher but less than 4.0, and typing_extensions version 4 or higher but less than 5.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/_.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.6.0,<4.0\ntyping_extensions>=4,<5\n```\n\n----------------------------------------\n\nTITLE: RST Directive Replacement Definition\nDESCRIPTION: Defines RST substitutions for commands and tasks documentation references\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/old_changelog.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |commands| replace:: [:ref:`ext.commands <discord_ext_commands>`]\n.. |tasks| replace:: [:ref:`ext.tasks <discord_ext_tasks>`]\n```\n\n----------------------------------------\n\nTITLE: Installing Pycord Development Version\nDESCRIPTION: Commands to install the latest development version of Pycord either by cloning the repository or direct installation from GitHub.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/README.rst#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/Pycord-Development/pycord\n$ cd pycord\n$ python3 -m pip install -U .[voice]\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install git+https://github.com/Pycord-Development/pycord\n# Windows\npy -3 -m pip install git+https://github.com/Pycord-Development/pycord\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Pycord\nDESCRIPTION: Lists the required Python packages for the pycord project. It requires msgspec version ~=0.19.0 and aiohttp with speedups for better performance.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/speed.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmsgspec~=0.19.0\naiohttp[speedups]\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for PyC ord Project\nDESCRIPTION: This requirements file defines the development dependencies for the PyC ord project. It inherits from 'all.txt' and specifies minimum versions for setuptools, setuptools_scm, twine, and build packages used for packaging and distribution.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/_release.txt#2025-04-19_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-r all.txt\nsetuptools>=72.2.0\nsetuptools_scm>=8.1.0\ntwine>=5.1.1\nbuild>=1.2.1\n```\n\n----------------------------------------\n\nTITLE: Installing Pycord Development Dependencies\nDESCRIPTION: Configuration of development dependencies including linting tools (pylint, flake8), testing frameworks (pytest), type checking (mypy), code coverage (coverage), and code quality tools (pre-commit, codespell, bandit).\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/dev.txt#2025-04-19_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r _.txt\npylint~=3.3.6\npytest~=8.3.5\npytest-asyncio~=0.24.0\n# pytest-order~=1.0.1\nmypy~=1.15.0\ncoverage~=7.8\npre-commit==4.2.0\ncodespell==2.4.1\nbandit==1.8.3\nflake8==7.1.2\n```\n\n----------------------------------------\n\nTITLE: Using List Type Annotations with FlagConverter for Multiple Arguments\nDESCRIPTION: Shows how to use List type annotations with FlagConverter to allow multiple instances of the same flag. This example allows banning multiple members with the same command.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/commands.rst#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\nfrom typing import List\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    members: List[discord.Member] = commands.flag(name='member')\n    reason: str\n    days: int = 1\n\n@commands.command()\nasync def ban(ctx, *, flags: BanFlags):\n    for member in flags.members:\n        await member.ban(reason=flags.reason, delete_message_seconds=flags.days * 60 * 24)\n\n    members = ', '.join(str(member) for member in flags.members)\n    plural = f'{flags.days} days' if flags.days != 1 else f'{flags.days} day'\n    await ctx.send(f'Banned {members} for {flags.reason!r} (deleted {plural} worth of messages)')\n```\n\n----------------------------------------\n\nTITLE: Documenting Channel Delete AuditLogAction in Discord.py\nDESCRIPTION: Documentation for the channel_delete attribute of AuditLogAction class which represents channel deletion events in the audit log, including target types and possible AuditLogDiff attributes.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/api/enums.rst#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n.. attribute:: channel_delete\n\n    A channel was deleted.\n\n    When this is the action, the type of :attr:`~AuditLogEntry.target` is\n    an :class:`Object` with an ID.\n\n    A more filled out object can be found by using the\n    :attr:`~AuditLogEntry.before` object.\n\n    Possible attributes for :class:`AuditLogDiff`:\n\n    - :attr:`~AuditLogDiff.name`\n    - :attr:`~AuditLogDiff.type`\n    - :attr:`~AuditLogDiff.overwrites`\n```\n\n----------------------------------------\n\nTITLE: Specifying PyNaCl Version Requirements\nDESCRIPTION: Defines the version constraints for PyNaCl package, requiring version 1.3.0 or higher but less than 1.6\nSOURCE: https://github.com/pycord-development/pycord/blob/master/requirements/voice.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyNaCl>=1.3.0,<1.6\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Group in Pycord\nDESCRIPTION: Demonstrates how to create a command group in Pycord, which allows for nested commands. This is useful for organizing related commands.\nSOURCE: https://github.com/pycord-development/pycord/blob/master/docs/ext/commands/api.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@Bot.group(*args, **kwargs)\ndef group_name(ctx):\n    # Group implementation\n```"
  }
]