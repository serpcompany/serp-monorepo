[
  {
    "owner": "youzan",
    "repo": "vant",
    "content": "TITLE: Enabling Dark Mode - HTML\nDESCRIPTION: This code shows how to enable dark mode for Vant components globally by setting the `theme` prop of the `van-config-provider` component to `dark`.  This affects all Vant components within the ConfigProvider's scope. Remember to set the page background color manually.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider theme=\"dark\">...</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Plugin for Vant\nDESCRIPTION: This JavaScript code configures a Webpack project to automatically import Vant components and styles using `unplugin-vue-components` and `@vant/auto-import-resolver`. It specifies the use of `VantResolver` within the `plugins` array. The code handles versions of unplugin-vue-components less than and greater than/equal to 0.26.0.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VantResolver } = require('@vant/auto-import-resolver');\nconst AutoImport = require('unplugin-auto-import/webpack');\nconst Components = require('unplugin-vue-components/webpack');\n\nmodule.exports = {\n  plugins: [\n    // When the version of unplugin-vue-components is less than 0.26.0:\n    AutoImport({ resolvers: [VantResolver()] }),\n    Components({ resolvers: [VantResolver()] }),\n    // when the unplugin-vue-components version is greater than or equal to 0.26.0:\n    AutoImport.default({\n      resolvers: [VantResolver()],\n    }),\n    Components.default({ resolvers: [VantResolver()] }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation Logic in Vue\nDESCRIPTION: This JavaScript code implements the validation logic for a Vant Form. It defines reactive variables for different input values and provides validation functions using regular expressions, synchronous validators, and asynchronous validators. The `onFailed` method logs the error information to the console. The `asyncValidator` demonstrates how to perform asynchronous validation, simulating a network request with a timeout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { closeToast, showLoadingToast } from 'vant';\n\nexport default {\n  setup() {\n    const value1 = ref('');\n    const value2 = ref('');\n    const value3 = ref('abc');\n    const value4 = ref('');\n    const pattern = /\\d{6}/;\n\n    // 校验函数返回 true 表示校验通过，false 表示不通过\n    const validator = (val) => /1\\d{10}/.test(val);\n\n    // 校验函数可以直接返回一段错误提示\n    const validatorMessage = (val) => `${val} 不合法，请重新输入`;\n\n    // 校验函数可以返回 Promise，实现异步校验\n    const asyncValidator = (val) =>\n      new Promise((resolve) => {\n        showLoadingToast('验证中...');\n\n        setTimeout(() => {\n          closeToast();\n          resolve(val === '1234');\n        }, 1000);\n      });\n\n    const onFailed = (errorInfo) => {\n      console.log('failed', errorInfo);\n    };\n\n    return {\n      value1,\n      value2,\n      value3,\n      value4,\n      pattern,\n      onFailed,\n      validator,\n      asyncValidator,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Vant Components - Regular Usage\nDESCRIPTION: Demonstrates the regular method for importing and using Vant components in a Vue application.  It involves importing the required components and CSS, creating a Vue app, and registering the component with the app.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\n// 1. 引入你需要的组件\nimport { Button } from 'vant';\n// 2. 引入组件样式\nimport 'vant/lib/index.css';\n\nconst app = createApp();\n\n// 3. 注册你需要的组件\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: Importing modules from Vant\nDESCRIPTION: Import modules directly from vant, such as showToast and buttonProps, which are available since Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { showToast, buttonProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Using Vant via CDN\nDESCRIPTION: This code snippet demonstrates using Vant by including CDN links in an HTML file. It imports the Vant CSS and JavaScript files, along with Vue.js.  It then uses the global `vant` variable to render a button and register a directive.  The HTML elements rely on the globally imported Vue and Vant libraries.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- import style -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://fastly.jsdelivr.net/npm/vant@4/lib/index.css\"\n/>\n\n<!-- import script -->\n<script src=\"https://fastly.jsdelivr.net/npm/vue@3\"></script>\n<script src=\"https://fastly.jsdelivr.net/npm/vant@4/lib/vant.min.js\"></script>\n\n<script>\n  // Render the Button component\n  const app = Vue.createApp({\n    template: `<van-button>Button</van-button>`,\n  });\n  app.use(vant);\n\n  // Register Lazyload directive\n  app.use(vant.Lazyload);\n\n  // Call function component\n  vant.showToast('Message');\n\n  app.mount('#app');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Vant API Functions\nDESCRIPTION: Demonstrates how to import and use Vant API functions, like `showToast` and `showDialog`, in Vant 4.0 without relying on `babel-plugin-import`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { showToast, showDialog } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Vant Components in Vue\nDESCRIPTION: This JavaScript code snippet demonstrates how to import and register Vant components in a Vue application.  It imports the createApp function from Vue, the Button component from Vant, and the Vant CSS. It then creates a Vue app instance and registers the Button component for use in the application. The 'vant/lib/index.css' import is necessary to style the Vant components.\nSOURCE: https://github.com/youzan/vant/blob/main/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\n// 1. 引入你需要的组件\nimport { Button } from 'vant';\n// 2. 引入组件样式\nimport 'vant/lib/index.css';\n\nconst app = createApp();\n\n// 3. 注册你需要的组件\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Switch - HTML\nDESCRIPTION: This code snippet demonstrates the integration of the Vant Switch component within a Vant Form field. The `van-field` component is used as a container, and the `van-switch` component is placed inside the `#input` slot to customize the input area.  This allows for a switch input type within the form.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"switch\" label=\"Switch\">\n  <template #input>\n    <van-switch v-model=\"checked\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Displaying Images with showImagePreview - JavaScript\nDESCRIPTION: Displays an array of images using the showImagePreview function from Vant.  This function provides a quick way to show a full-screen image preview. It imports showImagePreview from vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview(['https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg']);\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading State on Vant Buttons\nDESCRIPTION: This HTML snippet demonstrates how to set a button to a loading state using the `loading` prop. It also shows how to customize the loading indicator type and text using `loading-type` and `loading-text` respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-button loading type=\"primary\" />\n<van-button loading type=\"primary\" loading-type=\"spinner\" />\n<van-button loading type=\"success\" loading-text=\"Loading...\" />\n```\n\n----------------------------------------\n\nTITLE: Search Instance Example - TypeScript\nDESCRIPTION: Illustrates how to get a Search instance using `ref` and call its methods in TypeScript. It imports `ref` from 'vue' and `SearchInstance` from 'vant'. The `searchRef.value?.focus()` line calls the `focus` method on the Search instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { SearchInstance } from 'vant';\n\nconst searchRef = ref<SearchInstance>();\n\nsearchRef.value?.focus();\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Vant Picker Component\nDESCRIPTION: This code snippet demonstrates how to import the Picker component from the vant library and register it globally within a Vue application. The createApp function is used to create a Vue application instance, and the use method registers the Picker component for use in the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Picker } from 'vant';\n\nconst app = createApp();\napp.use(Picker);\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Tabbar Usage\nDESCRIPTION: Implements a basic Tabbar component with four TabbarItem components. The `v-model` directive is used to bind the active tab to a reactive variable named `active`. Each TabbarItem displays an icon and the text 'Tab'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item icon=\"home-o\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"search\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">Tab</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Installing Vant v4 and @vant/compat\nDESCRIPTION: These commands install Vant v4 and the @vant/compat compatibility package using npm, yarn, pnpm, and bun. The @vant/compat package aids in the transition from Vant 3 to Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install via npm\nnpm add vant@^4 @vant/compat@^1\n\n# Install via yarn\nyarn add vant@^4 @vant/compat@^1\n\n# Install via pnpm\npnpm add vant@^4 @vant/compat@^1\n\n# Install via Bun\nbun add vant@^4 @vant/compat@^1\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage\nDESCRIPTION: Demonstrates the basic implementation of the Vant Switch component in a Vue template, bound to a reactive `checked` variable. The corresponding JavaScript setup defines the `checked` ref with an initial value of true, allowing the switch's state to be managed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(true);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting different reactive values in Vue setup\nDESCRIPTION: This code snippet defines reactive variables for different input types like text, tel, digit, number, and password. These variables are initialized as empty strings using Vue's `ref` function and returned for use in the template to enable reactive data binding with the Field component. Required dependency: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const tel = ref('');\n    const text = ref('');\n    const digit = ref('');\n    const number = ref('');\n    const password = ref('');\n\n    return { tel, text, digit, number, password };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Action Button - HTML\nDESCRIPTION: Demonstrates how to customize the action button in the Vant Search component using the `action` slot.  The `show-action` prop enables the action button. The custom action button is a div that, when clicked, triggers the `onClickButton` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-search\n  v-model=\"value\"\n  show-action\n  label=\"Address\"\n  placeholder=\"Placeholder\"\n  @search=\"onSearch\"\n>\n  <template #action>\n    <div @click=\"onClickButton\">Search</div>\n  </template>\n</van-search>\n```\n\n----------------------------------------\n\nTITLE: Initializing Picker Component with Vue\nDESCRIPTION: This snippet demonstrates how to register the Vant Picker component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and registers the Picker component using `app.use(Picker)`. This allows the component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Picker } from 'vant';\n\nconst app = createApp();\napp.use(Picker);\n```\n\n----------------------------------------\n\nTITLE: Adding Route Navigation to Vant Buttons\nDESCRIPTION: This HTML snippet demonstrates how to add URL redirection and route navigation to buttons using the `url` and `to` props respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" url=\"https://github.com\">URL</van-button>\n<van-button type=\"primary\" to=\"index\">Vue Router</van-button>\n```\n\n----------------------------------------\n\nTITLE: Basic PasswordInput Usage - HTML and JavaScript\nDESCRIPTION: This snippet shows the basic usage of PasswordInput and NumberKeyboard components. It includes binding the input `value` and `focused` properties, and toggling the keyboard visibility with `showKeyboard`. The JavaScript code defines the reactive variables for `value` and `showKeyboard`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n<van-number-keyboard\n  v-model=\"value\"\n  :show=\"showKeyboard\"\n  @blur=\"showKeyboard = false\"\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('123');\n    const showKeyboard = ref(true);\n\n    return {\n      value,\n      showKeyboard,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Form with Username and Password Fields in Vue\nDESCRIPTION: This example shows a basic implementation of a Vant Form with username and password fields. It utilizes the `van-form`, `van-cell-group`, and `van-field` components. The `rules` prop is used to define validation requirements for each field.  The submit event calls the `onSubmit` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-form @submit=\"onSubmit\">\n  <van-cell-group inset>\n    <van-field\n      v-model=\"username\"\n      name=\"username\"\n      label=\"用户名\"\n      placeholder=\"用户名\"\n      :rules=\"[{ required: true, message: '请填写用户名' }]\"\n    />\n    <van-field\n      v-model=\"password\"\n      type=\"password\"\n      name=\"password\"\n      label=\"密码\"\n      placeholder=\"密码\"\n      :rules=\"[{ required: true, message: '请填写密码' }]\"\n    />\n  </van-cell-group>\n  <div style=\"margin: 16px;\">\n    <van-button round block type=\"primary\" native-type=\"submit\">\n      提交\n    </van-button>\n  </div>\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar with Custom Icon\nDESCRIPTION: Shows how to use the `icon` slot to customize the icons displayed in the TabbarItem components. This allows for using custom images or components as icons, providing greater flexibility in the Tabbar's appearance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item badge=\"3\">\n    <span>Custom</span>\n    <template #icon=\"props\">\n      <img :src=\"props.active ? icon.active : icon.inactive\" />\n    </template>\n  </van-tabbar-item>\n  <van-tabbar-item icon=\"search\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">Tab</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Custom Field Names with Vue\nDESCRIPTION: Demonstrates how to customize the field names used in the Cascader options using the `field-names` prop.  The `fieldNames` object maps the default field names (`text`, `value`, `children`) to custom field names (`name`, `code`, `items`). This allows the Cascader to work with data structures that have different property names.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const code = ref('');\n    const fieldNames = {\n      text: 'name',\n      value: 'code',\n      children: 'items',\n    };\n    const options = [\n      {\n        name: 'Zhejiang',\n        code: '330000',\n        items: [{ name: 'Hangzhou', code: '330100' }],\n      },\n      {\n        name: 'Jiangsu',\n        code: '320000',\n        items: [{ name: 'Nanjing', code: '320100' }],\n      },\n    ];\n\n    return {\n      code,\n      options,\n      fieldNames,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying icons on the input field\nDESCRIPTION: This code configures icons on both sides of the `van-field` component, showcasing left and right icons.  It also demonstrates the `clearable` attribute, which displays a clear icon during input. The `left-icon` and `right-icon` attributes are used to specify the icon names. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value1\"\n    label=\"文本\"\n    left-icon=\"smile-o\"\n    right-icon=\"warning-o\"\n    placeholder=\"显示图标\"\n  />\n  <van-field\n    v-model=\"value2\"\n    clearable\n    label=\"文本\"\n    left-icon=\"music-o\"\n    placeholder=\"显示清除图标\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Field and CellGroup\nDESCRIPTION: This code snippet demonstrates how to globally register the Field and CellGroup components from the Vant library in a Vue application.  It imports the necessary modules from 'vant' and uses the app.use() method to register the components, making them available for use throughout the application. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Field, CellGroup } from 'vant';\n\nconst app = createApp();\napp.use(Field);\napp.use(CellGroup);\n```\n\n----------------------------------------\n\nTITLE: Initializing ImagePreview Component - JavaScript\nDESCRIPTION: Registers the ImagePreview component globally using Vue's createApp. This allows the component to be used throughout the application. It imports createApp from vue and ImagePreview from vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ImagePreview } from 'vant';\n\nconst app = createApp();\napp.use(ImagePreview);\n```\n\n----------------------------------------\n\nTITLE: Limiting Upload Quantity - Vue\nDESCRIPTION: Illustrates how to limit the number of files that can be uploaded using the max-count property. When the maximum number of files is reached, the upload area is automatically hidden.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" multiple :max-count=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for On-Demand Styles\nDESCRIPTION: Configures Vite to use `unplugin-auto-import` and `unplugin-vue-components` with `VantResolver` for automatically importing Vant components and their styles. This config is placed in the `vite.config.js` file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport vue from '@vitejs/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default {\n  plugins: [\n    vue(),\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Field and CellGroup Components - JavaScript\nDESCRIPTION: Registers the Field and CellGroup components globally within a Vue application. This allows for the use of these components throughout the application without the need for individual imports in each component file. It utilizes Vue's createApp and app.use methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Field, CellGroup } from 'vant';\n\nconst app = createApp();\napp.use(Field);\napp.use(CellGroup);\n```\n\n----------------------------------------\n\nTITLE: Setting up before-change callback for Vant Tabs in Vue\nDESCRIPTION: This snippet shows how to set up the before-change callback function for the van-tabs component using Vue's reactivity system. The beforeChange function takes the index of the target tab as an argument and can return either a boolean value or a Promise. Returning false will prevent the tab from switching. Returning a Promise allows you to perform asynchronous logic, and the tab will only switch if the Promise resolves to true.  This example demonstrates returning both a boolean and a Promise.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const beforeChange = (index) => {\n      // 返回 false 表示阻止此次切换\n      if (index === 1) {\n        return false;\n      }\n\n      // 返回 Promise 来执行异步逻辑\n      return new Promise((resolve) => {\n        // 在 resolve 函数中返回 true 或 false\n        setTimeout(() => resolve(index !== 3), 1000);\n      });\n    };\n\n    return {\n      beforeChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant DatePicker Component into Form\nDESCRIPTION: This HTML code demonstrates how to use the Vant DatePicker component within a Vant Form. The DatePicker is displayed in a popup controlled by `showPicker`. The selected result is displayed in the `van-field`. The `destroy-on-close` prop ensures the popup is re-rendered each time it is opened. The `model-value` prop is for two-way binding of the column values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"datePicker\"\n  label=\"时间选择\"\n  placeholder=\"点击选择时间\"\n  @click=\"showPicker = true\"\n/>\n<van-popup v-model:show=\"showPicker\" destroy-on-close position=\"bottom\">\n  <van-date-picker\n    :model-value=\"pickerValue\"\n    @confirm=\"onConfirm\"\n    @cancel=\"showPicker = false\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Picker - HTML\nDESCRIPTION: This code snippet demonstrates the integration of the Vant Picker component within a Vant Form.  It uses a `van-field` to display the selected value and a `van-popup` to present the picker. The `@click` event on the `van-field` triggers the display of the `van-picker` inside the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"picker\"\n  label=\"Picker\"\n  placeholder=\"Select city\"\n  @click=\"showPicker = true\"\n/>\n<van-popup v-model:show=\"showPicker\" destroy-on-close position=\"bottom\">\n  <van-picker\n    :model-value=\"pickerValue\"\n    :columns=\"columns\"\n    @confirm=\"onConfirm\"\n    @cancel=\"showPicker = false\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Displaying error message on Field\nDESCRIPTION: This example showcases how to display error messages on a `van-field` component.  The `error` attribute highlights the input in red, while the `error-message` attribute displays a custom error message below the field. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"username\"\n    error\n    label=\"用户名\"\n    placeholder=\"请输入用户名\"\n  />\n  <van-field\n    v-model=\"phone\"\n    label=\"手机号\"\n    placeholder=\"请输入手机号\"\n    error-message=\"手机号格式错误\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Col and Row Components in Vue - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and register the `Col` and `Row` components from the `vant` library within a Vue application. It uses the `createApp` function from `vue` to initialize the application and then registers the components globally using `app.use`. This allows the components to be used throughout the application without needing to import them in each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Col, Row } from 'vant';\n\nconst app = createApp();\napp.use(Col);\napp.use(Row);\n```\n\n----------------------------------------\n\nTITLE: Setting up Dialog Component - JavaScript\nDESCRIPTION: Sets up the Vue component with a reactive `show` property to control the visibility of the Dialog component.  It uses the `ref` function from Vue to create a reactive variable. This snippet complements the HTML example, showing how to control the dialog's visibility.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return { show };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Validation Rules - HTML\nDESCRIPTION: This code snippet demonstrates how to implement validation rules in a Vant Form using the `rules` prop of the `van-field` component.  It includes multiple van-field components, each using a different type of validation (pattern, validator function, validator with message, and async validator). It also defines an `@failed` event handler to capture validation errors.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-form @failed=\"onFailed\">\n  <van-cell-group inset>\n    <van-field\n      v-model=\"value1\"\n      name=\"pattern\"\n      placeholder=\"Use pattern\"\n      :rules=\"[{ pattern, message: 'Error message' }]\"\n    />\n    <van-field\n      v-model=\"value2\"\n      name=\"validator\"\n      placeholder=\"Use validator\"\n      :rules=\"[{ validator, message: 'Error message' }]\"\n    />\n    <van-field\n      v-model=\"value3\"\n      name=\"validatorMessage\"\n      placeholder=\"Use validator to return message\"\n      :rules=\"[{ validator: validatorMessage }]\"\n    />\n    <van-field\n      v-model=\"value4\"\n      name=\"asyncValidator\"\n      placeholder=\"Use async validator\"\n      :rules=\"[{ validator: asyncValidator, message: 'Error message' }]\"\n    />\n  </van-cell-group>\n  <div style=\"margin: 16px;\">\n    <van-button round block type=\"primary\" native-type=\"submit\">\n      Submit\n    </van-button>\n  </div>\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Component Usage\nDESCRIPTION: This JavaScript code demonstrates the basic usage of Vant components in a Vue application. It imports necessary modules from Vue and Vant, registers the Vant button component, and then mounts the application. Requires Vue and Vant to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\n// 1. Import the components you need\nimport { Button } from 'vant';\n// 2. Import the components style\nimport 'vant/lib/index.css';\n\nconst app = createApp();\n\n// 3. Register the components you need\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: Vant Form Validation Rules - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form validation example. It defines reactive variables for the input fields and various validation functions (pattern, validator, validatorMessage, asyncValidator).  It showcases how to use regular expressions, synchronous validators, and asynchronous validators for form validation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { closeToast, showLoadingToast } from 'vant';\n\nexport default {\n  setup() {\n    const value1 = ref('');\n    const value2 = ref('');\n    const value3 = ref('abc');\n    const value4 = ref('');\n    const pattern = /\\d{6}/;\n\n    const validator = (val) => /1\\d{10}/.test(val);\n\n    const validatorMessage = (val) => `${val} is invalid`;\n\n    const asyncValidator = (val) =>\n      new Promise((resolve) => {\n        showLoadingToast('Validating...');\n\n        setTimeout(() => {\n          closeToast();\n          resolve(val === '1234');\n        }, 1000);\n      });\n\n    const onFailed = (errorInfo) => {\n      console.log('failed', errorInfo);\n    };\n\n    return {\n      value1,\n      value2,\n      value3,\n      value4,\n      pattern,\n      onFailed,\n      validator,\n      asyncValidator,\n      validatorMessage,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Loading Component with Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Loading component in a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and registers the Loading component using the app.use() method. This makes the component available for use in any component within the Vue app.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Loading } from 'vant';\n\nconst app = createApp();\napp.use(Loading);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Switching Themes with ConfigProvider\nDESCRIPTION: This code snippet shows how to dynamically switch between light and dark themes using the ConfigProvider and Vue's reactivity system.  The theme prop is bound to a reactive variable (theme) that is updated after a delay, demonstrating how the theme can be changed programmatically.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider :theme=\"theme\">...</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Basic ShareSheet Usage - HTML\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the `van-share-sheet` component. It includes a `van-cell` to trigger the display of the ShareSheet and the `van-share-sheet` itself, bound to a `showShare` variable and configured with options. The `@select` event handler is also shown. Requires Vue.js and Vant CSS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"Show ShareSheet\" @click=\"showShare = true\" />\n<van-share-sheet\n  v-model:show=\"showShare\"\n  title=\"Share\"\n  :options=\"options\"\n  @select=\"onSelect\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Coupon Data and Event Handlers in Vue Setup\nDESCRIPTION: This JavaScript code demonstrates how to set up the data and event handlers needed to use the `CouponCell` and `CouponList` components within a Vue component's setup function. It initializes coupon data using `ref` from Vue, defines event handlers for changing the selected coupon (`onChange`) and exchanging a coupon (`onExchange`), and then returns these values to be used within the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const coupon = {\n      available: 1,\n      originCondition: 0,\n      reason: '',\n      value: 150,\n      name: 'Coupon name',\n      startAt: 1489104000,\n      endAt: 1514592000,\n      valueDesc: '1.5',\n      unitDesc: '元',\n    };\n\n    const coupons = ref([coupon]);\n    const showList = ref(false);\n    const chosenCoupon = ref(-1);\n\n    const onChange = (index) => {\n      showList.value = false;\n      chosenCoupon.value = index;\n    };\n    const onExchange = (code) => {\n      coupons.value.push(coupon);\n    };\n\n    return {\n      coupons,\n      showList,\n      onChange,\n      onExchange,\n      chosenCoupon,\n      disabledCoupons: [coupon],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Compressing Image before Upload (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to use the `compressorjs` library to compress an image before it is uploaded using the Vant Uploader component. It defines a `beforeRead` function that takes a file as input, compresses it using `compressorjs`, and then resolves the promise with the compressed file. The compressorjs library is used here to rotate the image to the correct orientation by default.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Compressor from 'compressorjs';\n\nexport default {\n  setup() {\n    const beforeRead = (file) =>\n      new Promise((resolve) => {\n        // compressorjs 默认开启 checkOrientation 选项\n        // 会将图片修正为正确方向\n        new Compressor(file, {\n          success: resolve,\n          error(err) {\n            console.log(err.message);\n          },\n        });\n      });\n\n    return {\n      beforeRead,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for On-Demand Styles\nDESCRIPTION: Configures webpack to use `unplugin-auto-import` and `unplugin-vue-components` with `VantResolver` for automatically importing Vant components and their styles. The configuration is placed in `webpack.config.js` and considers different versions of `unplugin-vue-components`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VantResolver } = require('@vant/auto-import-resolver');\nconst AutoImport = require('unplugin-auto-import/webpack');\nconst Components = require('unplugin-vue-components/webpack');\n\nmodule.exports = {\n  plugins: [\n    // 当 unplugin-vue-components 版本小于 0.26.0 时，使用以下写法\n    AutoImport({ resolvers: [VantResolver()] }),\n    Components({ resolvers: [VantResolver()] }),\n    //当 unplugin-vue-components 版本大于等于 0.26.0 时，使用以下写法\n    AutoImport.default({\n      resolvers: [VantResolver()],\n    }),\n    Components.default({ resolvers: [VantResolver()] }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Vant NavBar with Back Button\nDESCRIPTION: Implements a Vant NavBar with a back button.  It includes the `left-text` and `left-arrow` props, and it uses the `@click-left` event to trigger a function that navigates back in the browser history. Requires a corresponding JavaScript setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar\n  title=\"Title\"\n  left-text=\"Back\"\n  left-arrow\n  @click-left=\"onClickLeft\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive data for basic DropdownMenu - Vue\nDESCRIPTION: This code sets up the reactive data using Vue's Composition API for the basic DropdownMenu example. It defines refs for the selected values (`value1`, `value2`) and the options arrays (`option1`, `option2`). These refs are then returned to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value1 = ref(0);\n    const value2 = ref('a');\n    const option1 = [\n      { text: '全部商品', value: 0 },\n      { text: '新款商品', value: 1 },\n      { text: '活动商品', value: 2 },\n    ];\n    const option2 = [\n      { text: '默认排序', value: 'a' },\n      { text: '好评排序', value: 'b' },\n      { text: '销量排序', value: 'c' },\n    ];\n\n    return {\n      value1,\n      value2,\n      option1,\n      option2,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Upload Status in Uploader - HTML & JavaScript\nDESCRIPTION: Illustrates how to display the upload status of files in the Uploader component.  The `fileList` array contains objects with properties like `url`, `status`, and `message` to indicate the upload state (e.g., 'uploading', 'failed'). The `afterRead` function simulates an upload process and updates the status after a delay.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" :after-read=\"afterRead\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg',\n        status: 'uploading',\n        message: 'Uploading...',\n      },\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/tree.jpeg',\n        status: 'failed',\n        message: 'Failed',\n      },\n    ]);\n\n    const afterRead = (file) => {\n      file.status = 'uploading';\n      file.message = 'Uploading...';\n\n      setTimeout(() => {\n        file.status = 'failed';\n        file.message = 'Failed';\n      }, 1000);\n    };\n\n    return {\n      fileList,\n      afterRead,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Instance Methods - TypeScript\nDESCRIPTION: This code snippet shows how to access the methods of a Form instance using a ref in Vue. It imports the `FormInstance` type from the `vant` library and creates a ref to store the Form instance. The `submit` method is then called on the Form instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { FormInstance } from 'vant';\n\nconst formRef = ref<FormInstance>();\n\nformRef.value?.submit();\n```\n\n----------------------------------------\n\nTITLE: Basic ContactEdit Usage - HTML\nDESCRIPTION: Demonstrates basic usage of the `van-contact-edit` component in an HTML template. It shows how to bind data to the `contact-info` prop, enable editing with the `is-edit` prop, display a 'Set as default' option with `show-set-default`, and handle save and delete events using `@save` and `@delete`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-edit\n  is-edit\n  show-set-default\n  :contact-info=\"editingContact\"\n  set-default-label=\"Set as the default contact\"\n  @save=\"onSave\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Form Component - Javascript\nDESCRIPTION: This code snippet demonstrates how to install and initialize the Vant Form, Field, and CellGroup components in a Vue.js application. It imports the necessary components and registers them globally using `app.use`. This initialization is required to use these components in the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Form, Field, CellGroup } from 'vant';\n\nconst app = createApp();\napp.use(Form);\napp.use(Field);\napp.use(CellGroup);\n```\n\n----------------------------------------\n\nTITLE: Managing Slider Value in Vue\nDESCRIPTION: This JavaScript code manages the value of the Vant Slider component with Vue's reactivity system. A reactive variable `value` is initialized to 50, and it is bound to the `v-model` of the `van-slider` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(50);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Showing Icons in Fields - HTML\nDESCRIPTION: Shows how to display icons on the left and right sides of a Field component. The 'left-icon' and 'right-icon' props are used to specify the icons. The 'clearable' prop is used to display a clear icon when the field has a value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value1\"\n    label=\"Text\"\n    left-icon=\"smile-o\"\n    right-icon=\"warning-o\"\n    placeholder=\"Show Icon\"\n  />\n  <van-field\n    v-model=\"value2\"\n    clearable\n    label=\"Text\"\n    left-icon=\"music-o\"\n    placeholder=\"Show Clear Icon\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Switch with v-model\nDESCRIPTION: This code shows the basic usage of the Vant Switch component, binding its state to a Vue ref using `v-model`. The `checked` ref is initialized to `true` and represents the switch's on/off state.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\" />\n```\n\n----------------------------------------\n\nTITLE: Reactive value setup and formatter function for field\nDESCRIPTION: This code defines reactive values and a formatter function for the field formatting example.  The `formatter` function removes all digits from the input value. This function is then used to format input content. Required dependency: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value1 = ref('');\n    const value2 = ref('');\n    // 过滤输入的数字\n    const formatter = (value) => value.replace(/\\d/g, '');\n\n    return {\n      value1,\n      value2,\n      formatter,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Notify component with Vue.js\nDESCRIPTION: Registers the Notify component globally using app.use in a Vue.js application. Requires importing createApp from 'vue' and Notify from 'vant'. This makes the Notify component available throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Notify } from 'vant';\n\nconst app = createApp();\napp.use(Notify);\n```\n\n----------------------------------------\n\nTITLE: Basic vant.config.mjs Configuration (JavaScript)\nDESCRIPTION: This snippet illustrates a basic configuration for `vant.config.mjs`, which includes settings for the component library name, bundle configuration, and documentation site configuration. It shows how to define the title, logo, description, and navigation for the documentation site.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // component library name\n  name: 'demo-ui',\n  // bundle config\n  build: {\n    site: {\n      publicPath: '/demo-ui/',\n    },\n  },\n  // documentation site config\n  site: {\n    // title\n    title: 'Demo UI',\n    // logo\n    logo: 'https://fastly.jsdelivr.net/npm/@vant/assets/logo.png',\n    // description\n    description: '示例组件库',\n    // left nav\n    nav: [\n      {\n        title: 'example',\n        items: [\n          {\n            path: 'home',\n            title: 'home',\n          },\n        ],\n      },\n      {\n        title: 'basic components',\n        items: [\n          {\n            path: 'my-button',\n            title: 'MyButton',\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Slider Usage\nDESCRIPTION: This snippet shows how to implement a basic Vant Slider with a two-way data binding using v-model. It also includes an onChange event handler to display the current slider value using a toast notification.  The 'value' is initialized as a ref with a default of 50, and the 'onChange' function uses 'showToast' from vant to display the current value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" @change=\"onChange\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(50);\n    const onChange = (value) => showToast('Current value: ' + value);\n    return {\n      value,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Validation Rules with Regular Expression and Validator Function\nDESCRIPTION: This HTML snippet demonstrates form validation using regular expressions and custom validator functions in a Vant Form.  The `van-field` components use the `rules` prop to define validation rules, including pattern matching with regular expressions and validation through custom functions. The `onFailed` method is called when validation fails.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-form @failed=\"onFailed\">\n  <van-cell-group inset>\n    <!-- 通过 pattern 进行正则校验 -->\n    <van-field\n      v-model=\"value1\"\n      name=\"pattern\"\n      placeholder=\"正则校验\"\n      :rules=\"[{ pattern, message: '请输入正确内容' }]\"\n    />\n    <!-- 通过 validator 进行函数校验 -->\n    <van-field\n      v-model=\"value2\"\n      name=\"validator\"\n      placeholder=\"函数校验\"\n      :rules=\"[{ validator, message: '请输入正确内容' }]\"\n    />\n    <!-- 通过 validator 返回错误提示 -->\n    <van-field\n      v-model=\"value3\"\n      name=\"validatorMessage\"\n      placeholder=\"校验函数返回错误提示\"\n      :rules=\"[{ validator: validatorMessage }]\"\n    />\n    <!-- 通过 validator 进行异步函数校验 -->\n    <van-field\n      v-model=\"value4\"\n      name=\"asyncValidator\"\n      placeholder=\"异步函数校验\"\n      :rules=\"[{ validator: asyncValidator, message: '请输入正确内容' }]\"\n    />\n  </van-cell-group>\n  <div style=\"margin: 16px;\">\n    <van-button round block type=\"primary\" native-type=\"submit\">\n      提交\n    </van-button>\n  </div>\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Basic Stepper Usage with v-model in Vue\nDESCRIPTION: This example showcases the basic usage of the Vant Stepper component within a Vue template, binding its value to a Vue ref using `v-model`. It also includes the corresponding Vue component setup, which defines a reactive `value` using `ref` from the Vue library.  Changes to the Stepper value will automatically update the Vue ref and vice versa, enabling two-way data binding.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(1);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Field Usage with v-model - HTML\nDESCRIPTION: Demonstrates the basic usage of the Field component within a CellGroup. The v-model directive is used to bind the input value to a reactive variable.  The label and placeholder props are also used to customize the field's appearance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field v-model=\"value\" label=\"Label\" placeholder=\"Text\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Initializing Icon component\nDESCRIPTION: Registers the Icon component globally within a Vue application.  This allows using the `<van-icon>` tag throughout the application without needing to import it in each component. Requires the `createApp` function from `vue` and the `Icon` component from `vant`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Icon } from 'vant';\n\nconst app = createApp();\napp.use(Icon);\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Area - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Area example. It defines reactive variables for the selected area (`result`), the visibility of the area picker (`showArea`), and the current picker value (`pickerValue`). It imports the `areaList` from `@vant/area-data` to provide the area options. The `onConfirm` function handles the selected area, updating the `result` and `showArea` variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { areaList } from '@vant/area-data';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const showArea = ref(false);\n    const pickerValue = ref('');\n    const onConfirm = ({ selectedValues, selectedOptions }) => {\n      pickerValue.value = selectedValues.length\n        ? selectedValues[selectedValues.length - 1]\n        : '';\n      showArea.value = false;\n      result.value = selectedOptions.map((item) => item.text).join('/');\n    };\n\n    return {\n      result,\n      areaList,\n      pickerValue,\n      showArea,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling DatePicker Selections in Vue\nDESCRIPTION: This JavaScript code handles the data and logic for the Vant DatePicker component. The `result` stores the display value. `showPicker` controls the popup's visibility. `pickerValue` stores the column values. The `onConfirm` function is called when date is selected, it updates the `result` and `pickerValue` before closing the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const showPicker = ref(false);\n    const pickerValue = ref([]);\n    const onConfirm = ({ selectedValues }) => {\n      result.value = selectedValues.join('/');\n      pickerValue.value = selectedValues;\n      showPicker.value = false;\n    };\n\n    return {\n      result,\n      pickerValue,\n      onConfirm,\n      showPicker,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Max Size Validation - HTML & JavaScript\nDESCRIPTION: Illustrates how to limit the maximum file size using the `max-size` prop and handle oversize events.  The `onOversize` function is called when a file exceeds the specified size (500kb in this example), displaying a toast notification. The `multiple` attribute enables multiple file selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader multiple :max-size=\"500 * 1024\" @oversize=\"onOversize\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onOversize = (file) => {\n      console.log(file);\n      showToast('File size cannot exceed 500kb');\n    };\n\n    return {\n      onOversize,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Picker - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Picker example.  It defines reactive variables for the picker's selected value (`result`), the current picker value (`pickerValue`), the visibility of the picker (`showPicker`), and the available columns for the picker (`columns`). The `onConfirm` function handles the selected value and updates the `result` and `showPicker` variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const pickerValue = ref([]);\n    const showPicker = ref(false);\n    const columns = [\n      { text: 'Delaware', value: 'Delaware' },\n      { text: 'Florida', value: 'Florida' },\n      { text: 'Georgia', value: 'Georgia' },\n      { text: 'Indiana', value: 'Indiana' },\n      { text: 'Maine', value: 'Maine' },\n    ];\n\n    const onConfirm = ({ selectedValues, selectedOptions }) => {\n      result.value = selectedOptions[0]?.text;\n      pickerValue.value = selectedValues;\n      showPicker.value = false;\n    };\n\n    return {\n      result,\n      pickerValue,\n      columns,\n      onConfirm,\n      showPicker,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Grid Layout with Spans - HTML\nDESCRIPTION: This code snippet demonstrates the basic usage of `van-row` and `van-col` components to create a grid layout with specified column spans.  The `span` attribute determines the number of columns the grid occupies out of the total 24 columns. The `offset` attribute is used to create spacing on the left side of a column.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-row>\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n</van-row>\n\n<van-row>\n  <van-col span=\"4\">span: 4</van-col>\n  <van-col span=\"10\" offset=\"4\">offset: 4, span: 10</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n\n<van-row>\n  <van-col offset=\"12\" span=\"12\">offset: 12, span: 12</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Form integration and automatic required display\nDESCRIPTION: This code demonstrates automatic required field display using the `van-form` component with `required=\"auto\"`. The Field component's `rules` prop now controls display of the asterisk if the rule's `required` property is set to true. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-form required=\"auto\">\n  <van-field\n    v-model=\"username\"\n    :rules=\"[{ required: true }]\"\n    label=\"用户名\"\n    placeholder=\"请输入用户名\"\n  />\n  <van-field\n    v-model=\"phone\"\n    :rules=\"[{ required: false }]\"\n    label=\"手机号\"\n    placeholder=\"请输入手机号\"\n  />\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Displaying ImagePreview Function Call - JavaScript\nDESCRIPTION: This snippet shows how to use the `showImagePreview` function from the Vant library to display a full-screen image preview. It takes an array of image URLs as input. The function returns an ImagePreview instance that can be used to control the preview.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview(['https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg']);\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar with Badge Display\nDESCRIPTION: Demonstrates how to display badges on TabbarItem components. The `dot` prop shows a simple red dot, while the `badge` prop displays a numeric badge with the specified value. The badges provide visual cues for notifications or updates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item icon=\"home-o\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"search\" dot>Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\" badge=\"5\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\" badge=\"20\">Tab</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Selecting a Date Range with Calendar - HTML\nDESCRIPTION: Illustrates selecting a date range using the Vant Calendar component. Setting `type` to `range` enables range selection. The selected range is returned as an array in the `confirm` event, with the start date at index 0 and the end date at index 1.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"选择日期区间\" :value=\"date\" @click=\"show = true\" />\n<van-calendar v-model:show=\"show\" type=\"range\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Switch - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Switch example. It defines a reactive variable `checked` using `ref`, which is bound to the `v-model` of the `van-switch` component.  This enables two-way data binding for the switch state.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(false);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TimePicker Advanced Filter Logic with Vue Composition API\nDESCRIPTION: JavaScript code implementing advanced filtering logic for the TimePicker options.  The `filter` function takes the `type`, `options`, and `values` as input.  It filters options based on the currently selected hour to provide contextual filtering for minutes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const filter = (type, options, values) => {\n      const hour = +values[0];\n\n      if (type === 'hour') {\n        return options.filter(\n          (option) => Number(option.value) >= 8 && Number(option.value) <= 18,\n        );\n      }\n\n      if (type === 'minute') {\n        options = options.filter((option) => Number(option.value) % 10 === 0);\n\n        if (hour === 8) {\n          return options.filter((option) => Number(option.value) >= 40);\n        }\n\n        if (hour === 18) {\n          return options.filter((option) => Number(option.value) <= 20);\n        }\n      }\n\n      return options;\n    };\n\n    return {\n      filter,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Inserting a Button in Field - HTML\nDESCRIPTION: Demonstrates how to insert a button into a Field component using the 'button' slot.  This allows for custom actions, such as sending an SMS code, to be easily integrated with the input field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field v-model=\"sms\" center clearable label=\"SMS\" placeholder=\"SMS\">\n    <template #button>\n      <van-button size=\"small\" type=\"primary\">Send SMS</van-button>\n    </template>\n  </van-field>\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Vue Router - HTML\nDESCRIPTION: Demonstrates how to use the Vant Tabbar in route mode with Vue Router. When the `route` prop is set to true, the Tabbar matches the current route with the `to` prop of each `van-tabbar-item`. The `replace` prop is used to replace the current history entry when navigating.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<router-view />\n\n<van-tabbar route>\n  <van-tabbar-item replace to=\"/home\" icon=\"home-o\">标签</van-tabbar-item>\n  <van-tabbar-item replace to=\"/search\" icon=\"search\">标签</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Managing Stepper Value in Vue\nDESCRIPTION: This JavaScript code manages the value of the Vant Stepper component using Vue's reactivity system. It creates a reactive variable `value` initialized to 1, and binds it to the `v-model` of the `van-stepper` component. This allows for real-time synchronization between the stepper's value and the application's data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(1);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Area Selections in Vue\nDESCRIPTION: This JavaScript code manages the data and logic for the Vant Area component using Vue's reactivity.  The `areaList` contains the area data.  `pickerValue` stores the column values and is used for two-way binding. The `onConfirm` function handles the selected values when selecting an area and updates the `result` and closes the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { areaList } from '@vant/area-data';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const showArea = ref(false);\n    const pickerValue = ref([]);\n    const onConfirm = ({ selectedValues, selectedOptions }) => {\n      pickerValue.value = selectedValues.length\n        ? selectedValues[selectedValues.length - 1]\n        : '';\n      showArea.value = false;\n      result.value = selectedOptions.map((item) => item.text).join('/');\n    };\n\n    return {\n      result,\n      areaList,\n      pickerValue,\n      showArea,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Uploader - HTML\nDESCRIPTION: This code snippet demonstrates the integration of the Vant Uploader component within a Vant Form field. The uploader component is added within the `#input` slot of a `van-field`, providing file upload functionality within the form.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"uploader\" label=\"Uploader\">\n  <template #input>\n    <van-uploader v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Basic PullRefresh Implementation in Vue\nDESCRIPTION: This snippet demonstrates the basic usage of the `van-pull-refresh` component in a Vue template. It binds the `loading` ref to the `v-model` directive, which controls the loading state. The `@refresh` event is bound to the `onRefresh` method, which is triggered when the user pulls down to refresh. The example also displays a refresh count within the pull-to-refresh area. The corresponding javascript code initializes the necessary refs and defines the `onRefresh` method which simulates a data refresh.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh v-model=\"loading\" @refresh=\"onRefresh\">\n  <p>Refresh Count: {{ count }}</p>\n</van-pull-refresh>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    const loading = ref(false);\n    const onRefresh = () => {\n      setTimeout(() => {\n        showToast('Refresh Success');\n        loading.value = false;\n        count.value++;\n      }, 1000);\n    };\n\n    return {\n      count,\n      loading,\n      onRefresh,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DropdownMenu and DropdownItem - Vue\nDESCRIPTION: This code demonstrates the basic usage of the `van-dropdown-menu` and `van-dropdown-item` components. It uses `v-model` to bind the selected value of each dropdown item to a reactive variable and passes an array of options to the `:options` prop. Dependencies: Vue Composition API (ref).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu>\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Basic SubmitBar Usage - JavaScript\nDESCRIPTION: Defines the `onSubmit` method that is called when the submit button is clicked.  It imports `showToast` from 'vant' and calls it within the `onSubmit` function to display a toast message. The setup function returns the `onSubmit` function so it can be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onSubmit = () => showToast('Submit');\n    return {\n      onSubmit,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with before-change callback in Vue\nDESCRIPTION: This snippet demonstrates how to use the before-change attribute to execute a callback function before switching tabs. The callback function can return false to prevent the tab switch or a Promise to perform asynchronous logic.  The `v-for` directive generates dynamic tabs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" :before-change=\"beforeChange\">\n  <van-tab v-for=\"index in 4\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Initializing Lazyload with Options - JavaScript\nDESCRIPTION: This snippet demonstrates how to register the Lazyload component globally in a Vue application using `app.use`. It shows how to import the Lazyload component and register it with or without specific options (e.g., `lazyComponent`).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Lazyload } from 'vant';\n\nconst app = createApp();\napp.use(Lazyload);\n\n// with options\napp.use(Lazyload, {\n  lazyComponent: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Dialog Function - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to call the `showDialog` function in Vant 4.0 to display a dialog box. It shows the new approach to calling the dialog function, which has been renamed from `Dialog()` to `showDialog()`. The message \"Hello World!\" will be displayed in the dialog.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 函数调用\nshowDialog({ message: 'Hello World!' });\n\n// 组件注册\napp.use('van-dialog', Dialog);\n```\n\n----------------------------------------\n\nTITLE: Handling Picker Selections in Vue\nDESCRIPTION: This JavaScript code handles the data and logic for the Vant Picker component. The variables `result` stores the display value.  `pickerValue` stores the column values. The `columns` array defines the options in the picker.  The `onConfirm` function updates the state when selection happens and closes the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const pickerValue = ref([]);\n    const showPicker = ref(false);\n    const columns = [\n      { text: '杭州', value: 'Hangzhou' },\n      { text: '宁波', value: 'Ningbo' },\n      { text: '温州', value: 'Wenzhou' },\n      { text: '绍兴', value: 'Shaoxing' },\n      { text: '湖州', value: 'Huzhou' },\n    ];\n\n    const onConfirm = ({ selectedValues, selectedOptions }) => {\n      result.value = selectedOptions[0]?.text;\n      pickerValue.value = selectedValues;\n      showPicker.value = false;\n    };\n\n    return {\n      result,\n      pickerValue,\n      columns,\n      onConfirm,\n      showPicker,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Select All / Toggle State - Vue\nDESCRIPTION: This snippet defines the Vue setup for the select all and toggle all example. The checkboxGroup is a ref to the component, and the methods allow toggling all of the values at once using methods on the ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref([]);\n    const checkboxGroup = ref(null);\n    const checkAll = () => {\n      checkboxGroup.value.toggleAll(true);\n    }\n    const toggleAll = () => {\n      checkboxGroup.value.toggleAll();\n    },\n\n    return {\n      checked,\n      checkAll,\n      toggleAll,\n      checkboxGroup,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Color in Vant\nDESCRIPTION: This HTML snippet demonstrates how to customize the button color using the `color` prop. It supports both solid colors and linear gradients.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-button color=\"#7232dd\">Pure</van-button>\n<van-button color=\"#7232dd\" plain>Pure</van-button>\n<van-button color=\"linear-gradient(to right, #ff6034, #ee0a24)\">\n  Gradient\n</van-button>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Action Slot\nDESCRIPTION: This HTML snippet demonstrates how to use the `action` slot to customize the content of the action button.  It also shows how to attach a click handler to the custom button. Note that when using a custom action slot, the `cancel` event will no longer be emitted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-search\n  v-model=\"value\"\n  show-action\n  label=\"地址\"\n  placeholder=\"请输入搜索关键词\"\n  @search=\"onSearch\"\n>\n  <template #action>\n    <div @click=\"onClickButton\">搜索</div>\n  </template>\n</van-search>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tab and Tabs Components - JavaScript\nDESCRIPTION: Registers the Tab and Tabs components globally within a Vue application.  It imports `createApp` from Vue and `Tab` and `Tabs` from Vant, then registers them using `app.use`. This makes the components available for use in templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Tab, Tabs } from 'vant';\n\nconst app = createApp();\napp.use(Tab);\napp.use(Tabs);\n```\n\n----------------------------------------\n\nTITLE: Initializing Radio and RadioGroup in Vue\nDESCRIPTION: Registers the Radio and RadioGroup components globally in a Vue application. This snippet imports the necessary modules from the 'vant' library and uses them within the createApp function to register the components for use in the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { RadioGroup, Radio } from 'vant';\n\nconst app = createApp();\napp.use(Radio);\napp.use(RadioGroup);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DropdownMenu and DropdownItem - HTML\nDESCRIPTION: Demonstrates the basic usage of the DropdownMenu and DropdownItem components within a Vue template.  It binds `value1` and `value2` to the `v-model` of the DropdownItems and uses options from `option1` and `option2`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu>\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar in Route Mode\nDESCRIPTION: Configures a Tabbar to work with Vue Router in route mode. The `route` prop is enabled on the Tabbar, and the `to` prop on each TabbarItem specifies the route to navigate to when the tab is clicked. The `replace` prop prevents adding the new route to the history stack.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<router-view />\n\n<van-tabbar route>\n  <van-tabbar-item replace to=\"/home\" icon=\"home-o\">Tab</van-tabbar-item>\n  <van-tabbar-item replace to=\"/search\" icon=\"search\">Tab</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Tabs usage in Vue\nDESCRIPTION: This snippet shows how to use the van-tabs component with v-model to bind the active tab. It includes example usage with multiple van-tab components. The v-model:active directive binds the active tab to the active variable defined in the Vue component's setup function, allowing you to control which tab is currently displayed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab title=\"标签 1\">内容 1</van-tab>\n  <van-tab title=\"标签 2\">内容 2</van-tab>\n  <van-tab title=\"标签 3\">内容 3</van-tab>\n  <van-tab title=\"标签 4\">内容 4</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Uploader Component into Form\nDESCRIPTION: This HTML snippet shows how to include the Vant Uploader component within a Vant Form. The `van-field` component is used for layout, and the `#input` slot contains the `van-uploader` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"uploader\" label=\"文件上传\">\n  <template #input>\n    <van-uploader v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Switching Theme Dynamically - HTML\nDESCRIPTION: This code illustrates how to dynamically switch between light and dark themes by binding the `theme` prop of the `van-config-provider` to a reactive `theme` variable.  The `theme` variable's value is updated programmatically, triggering a re-render and changing the theme.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider :theme=\"theme\">...</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Using Toast Component with Custom Content (HTML)\nDESCRIPTION: This code snippet demonstrates how to directly use the Toast component in Vue and customize its content using the `message` slot. It includes an example of embedding a `van-image` component within the Toast.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-toast v-model:show=\"show\" style=\"padding: 0\">\n  <template #message>\n    <van-image :src=\"image\" width=\"200\" height=\"140\" style=\"display: block\" />\n  </template>\n</van-toast>\n```\n\n----------------------------------------\n\nTITLE: Custom Color Cascader with Vue\nDESCRIPTION: Demonstrates how to customize the active color of the Cascader component using the `active-color` prop.  The component is bound to a `cascaderValue` and displays options using the `:options` prop.  Event handlers `@close` and `@finish` are defined to close the popup and process the result.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cascader\n  v-model=\"cascaderValue\"\n  title=\"Select Area\"\n  :options=\"options\"\n  active-color=\"#ee0a24\"\n  @close=\"show = false\"\n  @finish=\"onFinish\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Toast Message Dynamically\nDESCRIPTION: This code snippet demonstrates how to dynamically update the message of a loading toast.  It retrieves the Toast instance, and uses a timer to modify its `message` property, simulating a countdown.  It also demonstrates closing the toast with `closeToast`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showLoadingToast, closeToast } from 'vant';\n\nconst toast = showLoadingToast({\n  duration: 0,\n  forbidClick: true,\n  loadingType: 'spinner',\n  message: '3 seconds',\n});\n\nlet second = 3;\nconst timer = setInterval(() => {\n  second--;\n  if (second) {\n    toast.message = `${second} seconds`;\n  } else {\n    clearInterval(timer);\n    closeToast();\n  }\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Popup - JavaScript\nDESCRIPTION: This JavaScript code snippet provides the logic for integrating the Vant Picker with Popup and Field components. It uses Vue's `ref` to manage the state of the field value, picker visibility, and selected values.  The onConfirm function updates the field value with the selected option and closes the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const columns = [\n      { text: '杭州', value: 'Hangzhou' },\n      { text: '宁波', value: 'Ningbo' },\n      { text: '温州', value: 'Wenzhou' },\n      { text: '绍兴', value: 'Shaoxing' },\n      { text: '湖州', value: 'Huzhou' },\n    ];\n    const fieldValue = ref('');\n    const showPicker = ref(false);\n    const pickerValue = ref<Numeric[]>([])\n    const onConfirm = ({ selectedValues, selectedOptions }) => {\n      showPicker.value = false;\n      pickerValue.value = selectedValues;\n      fieldValue.value = selectedOptions[0].text;\n    };\n\n    return {\n      columns,\n      onConfirm,\n      fieldValue,\n      showPicker,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Custom Colors - HTML\nDESCRIPTION: Demonstrates how to customize the active color of the Tabbar using the `active-color` property. This property sets the color of the selected tab's icon and text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\" active-color=\"#ee0a24\">\n  <van-tabbar-item icon=\"home-o\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"search\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">标签</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Basic Search Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Search component within a Vue template.  The `v-model` directive binds the input value to a Vue ref called `value`.  The `placeholder` attribute provides a placeholder text inside the input field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-search v-model=\"value\" placeholder=\"Placeholder\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Search Component in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Search component within a Vue.js application. It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and then registers the Search component using the `app.use()` method. This allows the component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Search } from 'vant';\n\nconst app = createApp();\napp.use(Search);\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Slider - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Slider example. It defines a reactive variable `value` using `ref`, which is bound to the `v-model` of the `van-slider` component.  This ensures that the slider's value is reactive and can be used within the Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(50);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Language Configs in Vant\nDESCRIPTION: This code snippet shows how to override default language configurations in Vant using the `Locale.add` method. It defines a `messages` object containing custom translations for specific components (e.g., `vanPicker`) and then uses `Locale.add` to merge these custom translations into the existing language pack.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/locale/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Locale } from 'vant';\n\nconst messages = {\n  'en-US': {\n    vanPicker: {\n      confirm: 'Close',\n    },\n  },\n};\n\nLocale.add(messages);\n```\n\n----------------------------------------\n\nTITLE: DatePicker Installation - JavaScript\nDESCRIPTION: This code snippet demonstrates how to install and register the Vant DatePicker component globally within a Vue application. It imports the necessary modules and registers the component using `app.use`. This allows the component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { DatePicker } from 'vant';\n\nconst app = createApp();\napp.use(DatePicker);\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type DatePicker - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form DatePicker example. It defines reactive variables for the selected date (`result`), the visibility of the date picker (`showPicker`), and the current picker value (`pickerValue`). The `onConfirm` function handles the selected date, updating the `result` and `showPicker` variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const showPicker = ref(false);\n    const pickerValue = ref<string[]>([]);\n    const onConfirm = ({ selectedValues }) => {\n      result.value = selectedValues.join('/');\n      pickerValue.value = selectedValues;\n      showPicker.value = false;\n    };\n\n    return {\n      result,\n      pickerValue,\n      onConfirm,\n      showPicker,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Checkbox - HTML\nDESCRIPTION: This code snippet demonstrates the integration of the Vant Checkbox and CheckboxGroup components within a Vant Form field. It shows how to use both a single checkbox and a checkbox group within form fields, using the `#input` slot for customization.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"checkbox\" label=\"Checkbox\">\n  <template #input>\n    <van-checkbox v-model=\"checked\" shape=\"square\" />\n  </template>\n</van-field>\n<van-field name=\"checkboxGroup\" label=\"CheckboxGroup\">\n  <template #input>\n    <van-checkbox-group v-model=\"groupChecked\" direction=\"horizontal\">\n      <van-checkbox name=\"1\" shape=\"square\">Checkbox 1</van-checkbox>\n      <van-checkbox name=\"2\" shape=\"square\">Checkbox 2</van-checkbox>\n    </van-checkbox-group>\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Inserting button inside Field using slot\nDESCRIPTION: This code demonstrates how to insert a button inside the `van-field` component using the `button` slot.  This allows adding custom actions or elements within the field. A Vant Button is rendered using the slot. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"sms\"\n    center\n    clearable\n    label=\"短信验证码\"\n    placeholder=\"请输入短信验证码\"\n  >\n    <template #button>\n      <van-button size=\"small\" type=\"primary\">发送验证码</van-button>\n    </template>\n  </van-field>\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage - Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Vant Checkbox component with `v-model` for two-way data binding. It shows how to bind the checked state of the checkbox to a reactive variable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\">复选框</van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Dates - HTML\nDESCRIPTION: Shows how to configure the Vant Calendar component for multiple date selection by setting the `type` prop to `multiple`. A `van-cell` triggers the calendar, and the number of selected dates is displayed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"Select Multiple Date\" :value=\"text\" @click=\"show = true\" />\n<van-calendar v-model:show=\"show\" type=\"multiple\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid and GridItem - JavaScript\nDESCRIPTION: Registers the Grid and GridItem components globally within a Vue application. It imports `createApp`, `Grid`, and `GridItem` from 'vue' and 'vant' respectively.  The `use` method is called on the Vue app instance to register each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Grid, GridItem } from 'vant';\n\nconst app = createApp();\napp.use(Grid);\napp.use(GridItem);\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Date Selection - JavaScript\nDESCRIPTION: Manages the multiple date selection event from the Vant Calendar.  It updates the `text` ref with a message indicating the number of dates selected and hides the calendar component. It depends on the `vue` library for its `ref` functionality.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const text = ref('');\n    const show = ref(false);\n\n    const onConfirm = (dates) => {\n      show.value = false;\n      text.value = `${dates.length} dates selected`;\n    };\n\n    return {\n      text,\n      show,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Close Logic in Vue (JavaScript)\nDESCRIPTION: Defines the `beforeClose` function used in conjunction with the SwipeCell component's `before-close` prop to handle asynchronous closing behavior. Displays a confirmation dialog using `showConfirmDialog` from Vant before allowing the cell to close when the right side is tapped. Uses Promises for asynchronous operations.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showConfirmDialog } from 'vant';\n\nexport default {\n  setup() {\n    // position 为关闭时点击的位置\n    const beforeClose = ({ position }) => {\n      switch (position) {\n        case 'left':\n        case 'cell':\n        case 'outside':\n          return true;\n        case 'right':\n          return new Promise((resolve) => {\n            showConfirmDialog({\n              title: '确定删除吗？',\n            })\n              .then(() => resolve(true))\n              .catch(() => resolve(false));\n          });\n      }\n    };\n\n    return { beforeClose };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with swipeable content in Vue\nDESCRIPTION: This snippet demonstrates how to enable swipeable behavior for the van-tabs component using the swipeable attribute. When swipeable is set to true, users can swipe left or right to switch between tabs. The `v-for` directive generates dynamic tabs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" swipeable>\n  <van-tab v-for=\"index in 4\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Using AreaInstance Methods in Vue\nDESCRIPTION: This TypeScript snippet demonstrates how to obtain an instance of the Area component using `ref` and then call methods on that instance. It imports the `AreaInstance` type from 'vant', creates a ref, assigns it to the Area component instance, and then calls the `confirm()` method on the instance. This allows programmatic control of the Area component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { AreaInstance } from 'vant';\n\nconst areaRef = ref<AreaInstance>();\n\nareaRef.value?.confirm();\n```\n\n----------------------------------------\n\nTITLE: Using Vant Components in <script setup>\nDESCRIPTION: This snippet demonstrates how to use Vant components directly within a `<script setup>` block in a Vue.js single-file component. No explicit component registration is needed.  It requires importing the specific component (e.g., `Button`) from `vant`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<script setup>\n  import { Button } from 'vant';\n</script>\n\n<template>\n  <Button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Signature Component\nDESCRIPTION: Demonstrates the basic integration of the Signature component in a Vue template and its interaction with JavaScript logic. The component emits `submit` and `clear` events, which are handled by `onSubmit` and `onClear` methods in the Vue component. The `onSubmit` method receives signature data (base64 image and Canvas element) and updates the `image` ref, displaying it using `van-image`.  Dependencies include `ref` and `showToast` from 'vue' and 'vant' respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const image = ref('');\n    const onSubmit = (data) => {\n      image.value = data.image;\n    };\n    const onClear = () => showToast('clear');\n\n    return {\n      image,\n      onSubmit,\n      onClear,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Rate Usage - HTML\nDESCRIPTION: This snippet shows the basic usage of the Vant Rate component in an HTML template.  It binds the component's value to a Vue ref using v-model.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Search with Events - HTML\nDESCRIPTION: Demonstrates the use of the Vant Search component with event listeners for the `search` and `cancel` events, wrapped in a form element.  The `show-action` prop displays the cancel button. The `@search` and `@cancel` attributes bind the respective events to methods defined in the Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/\">\n  <van-search\n    v-model=\"value\"\n    show-action\n    placeholder=\"Placeholder\"\n    @search=\"onSearch\"\n    @cancel=\"onCancel\"\n  />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Max Count Configuration - HTML & JavaScript\nDESCRIPTION: Demonstrates how to limit the maximum number of files that can be uploaded using the `max-count` prop.  It sets the `multiple` attribute to allow multiple file selection and binds an empty `fileList` array using `v-model`. The `max-count` attribute limits the number of files to 2.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" multiple :max-count=\"2\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([]);\n\n    return {\n      fileList,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic AddressList Usage - HTML\nDESCRIPTION: Demonstrates basic usage of the AddressList component in a Vue template.  It binds the `chosenAddressId` to a v-model, passes in `list` and `disabledList` props for address data, sets the `disabled-text`, and binds `add` and `edit` events to handler functions. The `default-tag-text` prop specifies the text for default addresses.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-address-list\n  v-model=\"chosenAddressId\"\n  :list=\"list\"\n  :disabled-list=\"disabledList\"\n  disabled-text=\"The following address is out of range\"\n  default-tag-text=\"Default\"\n  @add=\"onAdd\"\n  @edit=\"onEdit\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Collapse Component in Vue\nDESCRIPTION: This code snippet shows a basic implementation of the `van-collapse` component in a Vue template. It utilizes `v-model` to bind the active panels to a data property (`activeNames`). The example demonstrates three `van-collapse-item` components, each with a title and content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\">\n  <van-collapse-item title=\"Title1\" name=\"1\">\n    The code is written for people to see and can be run on a machine.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title2\" name=\"2\">\n    Technology is nothing more than the common soul of those who develop it.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title3\" name=\"3\">\n    The frequency of people swearing during code reading is the only measure of\n    code quality.\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Vant Grid Layout with Column Spacing - HTML\nDESCRIPTION: This code snippet shows how to use the `gutter` attribute on the `van-row` component to add spacing between columns in the grid layout.  The `gutter` attribute accepts a number or string representing the spacing in pixels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-row gutter=\"20\">\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Hiding the header of Vant Tabs in Vue\nDESCRIPTION: This snippet demonstrates how to hide the header (tab titles) of the van-tabs component using the show-header attribute. Setting show-header to false will hide the header, allowing you to control the active tab programmatically or with custom components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" :show-header=\"false\">\n  <van-tab v-for=\"index in 4\">内容 {{ index }}</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Importing Form Types - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `FormProps` and `FormInstance` types from the `vant` library in TypeScript. These types can be used to define the props of a Form component and to access the methods of a Form instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FormProps, FormInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: AddressEdit Event Handling - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to handle events emitted by the AddressEdit component, such as save, delete, and change-detail. It utilizes Vue's reactivity system with `ref` to manage the search results.  `showToast` is used to display simple messages upon save and delete. `onChangeDetail` updates the search results based on input.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const searchResult = ref([]);\n\n    const onSave = () => showToast('save');\n    const onDelete = () => showToast('delete');\n    const onChangeDetail = (val) => {\n      if (val) {\n        searchResult.value = [\n          {\n            name: '黄龙万科中心',\n            address: '杭州市西湖区',\n          },\n        ];\n      } else {\n        searchResult.value = [];\n      }\n    };\n\n    return {\n      onSave,\n      onDelete,\n      areaList,\n      searchResult,\n      onChangeDetail,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing DropdownItem content with slots - Vue\nDESCRIPTION: This code snippet demonstrates how to customize the content of a `van-dropdown-item` using slots. It includes a custom filter section with switches and a confirmation button. The `onConfirm` function is called when the button is clicked, which then closes the dropdown. The component uses `ref` to access the `DropdownItem` instance and call its `toggle` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu ref=\"menuRef\">\n  <van-dropdown-item v-model=\"value\" :options=\"options\" />\n  <van-dropdown-item title=\"筛选\" ref=\"itemRef\">\n    <van-cell center title=\"包邮\">\n      <template #right-icon>\n        <van-switch v-model=\"switch1\" />\n      </template>\n    </van-cell>\n    <van-cell center title=\"团购\">\n      <template #right-icon>\n        <van-switch v-model=\"switch2\" />\n      </template>\n    </van-cell>\n    <div style=\"padding: 5px 16px;\">\n      <van-button type=\"primary\" block round @click=\"onConfirm\">\n        确认\n      </van-button>\n    </div>\n  </van-dropdown-item>\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Formatting Input Contents\nDESCRIPTION: This example demonstrates how to format the input content in a `van-field` component using the `formatter` property. The `format-trigger` property specifies when the formatting function should be triggered, either `onChange` or `onBlur`. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value1\"\n    label=\"文本\"\n    :formatter=\"formatter\"\n    placeholder=\"在输入时执行格式化\"\n  />\n  <van-field\n    v-model=\"value2\"\n    label=\"文本\"\n    :formatter=\"formatter\"\n    format-trigger=\"onBlur\"\n    placeholder=\"在失焦时执行格式化\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar with Custom Color\nDESCRIPTION: Demonstrates customizing the active tab item's color using the `active-color` prop on the Tabbar component. This allows for matching the Tabbar's appearance to the overall design of the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\" active-color=\"#ee0a24\">\n  <van-tabbar-item icon=\"home-o\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"search\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\">Tab</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">Tab</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Card Usage in HTML\nDESCRIPTION: This HTML snippet showcases the basic usage of the Vant Card component, displaying a card with a title, description, price, number, and thumbnail image.  It utilizes the `van-card` tag, with attributes to customize the content. The `thumb` attribute specifies the URL of the image, while `title`, `desc`, `price`, and `num` define the text content.  The output is a simple card with default styling. Dependencies: Vant CSS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-card\n  num=\"2\"\n  price=\"2.00\"\n  title=\"Title\"\n  desc=\"Description\"\n  thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic ImagePreview Usage - JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of the `showImagePreview` function with multiple images. It imports the necessary function from 'vant' and then calls it with an array of image URLs. The preview will display a gallery of images that the user can swipe through.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview([\n  'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n  'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Field Usage - JavaScript\nDESCRIPTION: This code sets up a reactive variable 'value' using Vue's ref function. This variable is then bound to the van-field component using v-model, allowing for two-way data binding.  The setup function returns an object containing the reactive 'value'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('');\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull-to-Refresh with Vant List\nDESCRIPTION: This code snippet shows how to integrate the Vant List component with the Vant PullRefresh component to enable pull-to-refresh functionality. It includes the HTML template structure with `van-pull-refresh` wrapping `van-list`, and the corresponding JavaScript setup using `ref` to manage reactive states like `refreshing`, `loading`, and `finished`, along with the `onRefresh` and `onLoad` event handlers.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh v-model=\"refreshing\" @refresh=\"onRefresh\">\n  <van-list\n    v-model:loading=\"loading\"\n    :finished=\"finished\"\n    finished-text=\"Finished\"\n    @load=\"onLoad\"\n  >\n    <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n  </van-list>\n</van-pull-refresh>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const list = ref([]);\n    const loading = ref(false);\n    const finished = ref(false);\n    const refreshing = ref(false);\n\n    const onLoad = () => {\n      setTimeout(() => {\n        if (refreshing.value) {\n          list.value = [];\n          refreshing.value = false;\n        }\n\n        for (let i = 0; i < 10; i++) {\n          list.value.push(list.value.length + 1);\n        }\n        loading.value = false;\n\n        if (list.value.length >= 40) {\n          finished.value = true;\n        }\n      }, 1000);\n    };\n\n    const onRefresh = () => {\n      finished.value = false;\n      loading.value = true;\n      onLoad();\n    };\n\n    return {\n      list,\n      onLoad,\n      loading,\n      finished,\n      onRefresh,\n      refreshing,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ShareSheet Component - JavaScript\nDESCRIPTION: This code snippet demonstrates how to register the ShareSheet component globally within a Vue application. It imports the necessary modules and registers the ShareSheet component using `app.use()`.  This makes the component available for use in the application's templates.  Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ShareSheet } from 'vant';\n\nconst app = createApp();\napp.use(ShareSheet);\n```\n\n----------------------------------------\n\nTITLE: Auto Required Field Styling in Form - HTML\nDESCRIPTION: Demonstrates how to automatically display required asterisks on fields within a Form component. Setting `required=\"auto\"` on the Form will display the asterisk based on the `rule.required` option of each field's rules.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-form required=\"auto\">\n  <van-field\n    v-model=\"username\"\n    :rules=\"[{ required: true }]\"\n    label=\"Username\"\n    placeholder=\"Username\"\n  />\n  <van-field\n    v-model=\"phone\"\n    :rules=\"[{ required: false }]\"\n    label=\"Phone\"\n    placeholder=\"Phone\"\n  />\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Input Appearance\nDESCRIPTION: This HTML snippet shows how to customize the appearance of the search input using the `shape` and `background` props. `shape` can be set to \"round\" to give the input rounded corners, and `background` sets the background color of the search area.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-search\n  v-model=\"value\"\n  shape=\"round\"\n  background=\"#4fc08d\"\n  placeholder=\"请输入搜索关键词\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up active name for Vant Tabs in Vue\nDESCRIPTION: This snippet shows how to set up the active name for the van-tabs component when using the name attribute. It imports the ref function from Vue and creates a reactive variable called activeName, initialized to 'b'. This variable is then returned from the setup function, so it can be bound to the v-model:active directive in the template. This allows you to control which tab is currently displayed based on its name.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeName = ref('b');\n    return { activeName };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Single Date - HTML\nDESCRIPTION: Illustrates how to use the Vant Calendar component for single date selection. A `van-cell` triggers the calendar to show upon click, and the selected date is displayed. The `confirm` event is emitted after a date is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"Select Single Date\" :value=\"date\" @click=\"show = true\" />\n<van-calendar v-model:show=\"show\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Usage with Percentage\nDESCRIPTION: Demonstrates basic usage of the Vant Progress component by setting the `percentage` prop. The `percentage` prop accepts a number or string value representing the current progress. In this example, the progress is set to 50%.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-progress :percentage=\"50\" />\n```\n\n----------------------------------------\n\nTITLE: Basic ShareSheet Usage (JS)\nDESCRIPTION: This JavaScript snippet demonstrates the setup for the basic ShareSheet example. It defines the `showShare` ref to control the ShareSheet's visibility and the `options` array to specify the share options. The `onSelect` function is called when an option is selected, displaying a toast message and closing the ShareSheet.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      { name: '微信', icon: 'wechat' },\n      { name: '微博', icon: 'weibo' },\n      { name: '复制链接', icon: 'link' },\n      { name: '分享海报', icon: 'poster' },\n      { name: '二维码', icon: 'qrcode' },\n    ];\n\n    const onSelect = (option) => {\n      showToast(option.name);\n      showShare.value = false;\n    };\n\n    return {\n      options,\n      onSelect,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Vant Switch Updates\nDESCRIPTION: This JavaScript code defines the logic for handling asynchronous updates to the Vant Switch. The `onUpdateValue` function is triggered when the switch is toggled. It displays a confirmation dialog before updating the `checked` ref based on the user's choice. The component also imports the `showConfirmDialog` function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showConfirmDialog } from 'vant';\n\nexport default {\n  setup() {\n    const checked = ref(true);\n    const onUpdateValue = (newValue) => {\n      showConfirmDialog({\n        title: '提醒',\n        message: '是否切换开关？',\n      }).then(() => {\n        checked.value = newValue;\n      });\n    };\n\n    return {\n      checked,\n      onUpdateValue,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Swipe Implementation with Autoplay\nDESCRIPTION: This example shows a basic implementation of the Vant Swipe component with autoplay enabled.  The `autoplay` prop is set to 3000ms, and `indicator-color` is set to white. Four `van-swipe-item` components are included as children, each displaying a number.  CSS styling is also provided to style the swipe items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe class=\"my-swipe\" :autoplay=\"3000\" indicator-color=\"white\">\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n\n<style>\n  .my-swipe .van-swipe-item {\n    color: #fff;\n    font-size: 20px;\n    line-height: 150px;\n    text-align: center;\n    background-color: #39a9ed;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: DatePicker Options Formatter - JavaScript\nDESCRIPTION: This JavaScript code defines the `formatter` function used in the DatePicker component. The `formatter` function takes the `type` (year or month) and `option` as arguments and modifies the `option.text` property to add \" Year\" or \"Month\" to the text. It then returns the modified option. This allows for customizing the display of options in the DatePicker.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01']);\n    const columnsType = ['year', 'month'];\n\n    const formatter = (type, option) => {\n      if (type === 'year') {\n        option.text += ' Year';\n      }\n      if (type === 'month') {\n        option.text += 'Month';\n      }\n      return option;\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      formatter,\n      currentDate,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Field Usage with v-model\nDESCRIPTION: This example shows how to use the `van-field` component with `v-model` for two-way data binding.  It uses `van-cell-group` as a container and sets the `placeholder` attribute to display a hint. It binds the input value to the `value` ref. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- 可以使用 CellGroup 作为容器 -->\n<van-cell-group inset>\n  <van-field v-model=\"value\" label=\"文本\" placeholder=\"请输入用户名\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Basic Usage - Vue\nDESCRIPTION: This code demonstrates basic usage of the `van-checkbox-group` component.  The v-model binds to an array that determines which checkboxes are checked by their name.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox-group v-model=\"checked\">\n  <van-checkbox name=\"a\">复选框 a</van-checkbox>\n  <van-checkbox name=\"b\">复选框 b</van-checkbox>\n</van-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Popup Usage - JavaScript\nDESCRIPTION: Defines the JavaScript logic for controlling the visibility of the Vant Popup. It uses `ref` from Vue to create a reactive variable `show` and a function `showPopup` to toggle the popup's visibility. The setup function returns these reactive variables for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const showPopup = () => {\n      show.value = true;\n    };\n    return {\n      show,\n      showPopup,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Field Names - HTML\nDESCRIPTION: Demonstrates customizing the field names used in the options data by setting the field-names prop. The fieldNames prop configures alternative names for the text, value, and children properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-cascader\n  v-model=\"code\"\n  title=\"请选择所在地区\"\n  :options=\"options\"\n  :field-names=\"fieldNames\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Notify appearance and behavior\nDESCRIPTION: Demonstrates how to customize the appearance and behavior of notification messages, including setting custom colors, positioning, and duration. Requires importing showNotify from 'vant'.  Customizations enhance the user experience and tailor the notification to the application's design.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify } from 'vant';\n\nshowNotify({\n  message: 'Custom Color',\n  color: '#ad0000',\n  background: '#ffe1e1',\n});\n\nshowNotify({\n  message: 'Custom Position',\n  position: 'bottom',\n});\n\nshowNotify({\n  message: 'Custom Duration',\n  duration: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Picker with Event Handling\nDESCRIPTION: This code snippet showcases the basic implementation of the Vant Picker component within a Vue template. It includes event listeners for 'confirm', 'cancel', and 'change' events. The JavaScript code defines the data for the columns and the handler functions for the events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-picker\n  title=\"标题\"\n  :columns=\"columns\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n  @change=\"onChange\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using ImagePreview Component - HTML\nDESCRIPTION: This snippet shows how to use the ImagePreview component directly in a Vue template. It uses `v-model:show` to control the visibility of the component and binds the `images` prop to an array of image URLs. It includes a slot named `index` to customize the index display. It emits a change event when index is changed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-image-preview v-model:show=\"show\" :images=\"images\" @change=\"onChange\">\n  <template v-slot:index>Page: {{ index + 1 }}</template>\n</van-image-preview>\n```\n\n----------------------------------------\n\nTITLE: Popup Lifecycle Events - JavaScript\nDESCRIPTION: Defines the JavaScript logic for handling the lifecycle events of the Vant Popup. It imports `ref` and `showToast` from Vue and Vant respectively. The component provides the 'showToast' method for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return {\n      show,\n      showToast,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Search Event Handlers - JavaScript\nDESCRIPTION: Defines the event handlers for the `search` and `cancel` events in the Vant Search component example. It imports `ref` from 'vue' and `showToast` from 'vant'. The `onSearch` and `onCancel` methods display toasts with the search value and 'Cancel' respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref('');\n    const onSearch = (val) => showToast(val);\n    const onCancel = () => showToast('Cancel');\n    return {\n      value,\n      onSearch,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Field Types - HTML\nDESCRIPTION: Shows how to use the 'type' prop of the Field component to create different types of input fields, such as 'tel', 'digit', 'number', and 'password'. Each field is bound to a separate reactive variable using v-model.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field v-model=\"text\" label=\"Text\" />\n  <van-field v-model=\"tel\" type=\"tel\" label=\"Phone\" />\n  <van-field v-model=\"digit\" type=\"digit\" label=\"Digit\" />\n  <van-field v-model=\"number\" type=\"number\" label=\"Number\" />\n  <van-field v-model=\"password\" type=\"password\" label=\"Password\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Calendar Component into Form\nDESCRIPTION: This HTML code demonstrates integrating the Vant Calendar component within a Vant Form.  The calendar is displayed as a popup, controlled by `showCalendar`. It's linked to a `van-field` that displays the selected date.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"calendar\"\n  label=\"日历\"\n  placeholder=\"点击选择日期\"\n  @click=\"showCalendar = true\"\n/>\n<van-calendar v-model:show=\"showCalendar\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: TimePicker Filter Setup with Vue Composition API\nDESCRIPTION: JavaScript code that filters the options in the TimePicker, specifically filtering the minute options to only allow those that are multiples of 10. Uses the `filter` prop to pass a filtering function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00']);\n\n    const filter = (type, options) => {\n      if (type === 'minute') {\n        return options.filter((option) => Number(option.value) % 10 === 0);\n      }\n      return options;\n    };\n\n    return {\n      filter,\n      currentTime,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic DatePicker Usage with v-model\nDESCRIPTION: Demonstrates basic DatePicker usage, binding the selected date to a `currentDate` ref using `v-model`. It initializes the date, sets the minimum and maximum selectable dates.  The component emits changes to `currentDate` based on user selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"选择日期\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic AddressEdit Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the AddressEdit component in a Vue template. It shows how to bind props such as `area-list`, `search-result`, and event handlers like `onSave`, `onDelete`, and `onChangeDetail`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-address-edit\n  :area-list=\"areaList\"\n  show-delete\n  show-set-default\n  show-search-result\n  :search-result=\"searchResult\"\n  :area-columns-placeholder=\"['Choose', 'Choose', 'Choose']\"\n  @save=\"onSave\"\n  @delete=\"onDelete\"\n  @change-detail=\"onChangeDetail\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Cascader Usage with Vue\nDESCRIPTION: Demonstrates basic usage of the Cascader component within a Vue component.  It defines the `show` flag to control the popup's visibility, `fieldValue` to store the selected area's text, `cascaderValue` to store the selected value, and `options` as the data source for the cascader. The `onFinish` method updates `fieldValue` with the selected options when the user finishes selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const fieldValue = ref('');\n    const cascaderValue = ref('');\n    const options = [\n      {\n        text: 'Zhejiang',\n        value: '330000',\n        children: [{ text: 'Hangzhou', value: '330100' }],\n      },\n      {\n        text: 'Jiangsu',\n        value: '320000',\n        children: [{ text: 'Nanjing', value: '320100' }],\n      },\n    ];\n    const onFinish = ({ selectedOptions }) => {\n      show.value = false;\n      fieldValue.value = selectedOptions.map((option) => option.text).join('/');\n    };\n\n    return {\n      show,\n      options,\n      onFinish,\n      fieldValue,\n      cascaderValue,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling RadioGroup and individual Radio\nDESCRIPTION: Demonstrates disabling the entire RadioGroup or individual Radio components. The `disabled` property on `van-radio-group` disables all options, while the `disabled` property on `van-radio` disables a specific option.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\" disabled>\n  <van-radio name=\"1\">单选框 1</van-radio>\n  <van-radio name=\"2\">单选框 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Custom Icon - HTML\nDESCRIPTION: Shows how to customize the icon in a Tabbar item using the `icon` slot.  It uses slot-scope to access the `active` property, which indicates whether the tab is currently selected, allowing conditional rendering of different icons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item badge=\"3\">\n    <span>自定义</span>\n    <template #icon=\"props\">\n      <img :src=\"props.active ? icon.active : icon.inactive\" />\n    </template>\n  </van-tabbar-item>\n  <van-tabbar-item icon=\"search\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">标签</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Image Component in Vue\nDESCRIPTION: Registers the VanImage component globally in a Vue application. It imports the necessary modules from 'vue' and 'vant' and then uses the app.use() method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Image as VanImage } from 'vant';\n\nconst app = createApp();\napp.use(VanImage);\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Slider Component in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Slider component in a Vue application. It imports the necessary modules and registers the component with the Vue app instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Slider } from 'vant';\n\nconst app = createApp();\napp.use(Slider);\n```\n\n----------------------------------------\n\nTITLE: Using CouponCell and CouponList in Vue Template\nDESCRIPTION: This snippet illustrates the usage of `van-coupon-cell` and `van-coupon-list` within a Vue template. The `van-coupon-cell` displays a summary of available coupons, while `van-coupon-list` renders a list of coupons inside a `van-popup`. Props like `:coupons`, `:chosen-coupon`, and event handlers like `@change` and `@exchange` are used to configure their behavior.  The `v-model:show` directive controls the visibility of the coupon list popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Coupon Cell -->\n<van-coupon-cell\n  :coupons=\"coupons\"\n  :chosen-coupon=\"chosenCoupon\"\n  @click=\"showList = true\"\n/>\n<!-- Coupon List -->\n<van-popup\n  v-model:show=\"showList\"\n  round\n  position=\"bottom\"\n  style=\"height: 90%; padding-top: 4px;\"\n>\n  <van-coupon-list\n    :coupons=\"coupons\"\n    :chosen-coupon=\"chosenCoupon\"\n    :disabled-coupons=\"disabledCoupons\"\n    @change=\"onChange\"\n    @exchange=\"onExchange\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Combining Dark Mode with CSS Variables - Vue.js\nDESCRIPTION: This Vue.js snippet shows how to define different CSS variable values for light and dark modes using the `themeVars`, `themeVarsDark`, and `themeVarsLight` reactive properties. This sets `buttonPrimaryBackground` to `blue` in dark mode and `green` in light mode, overriding the default `red` value in `themeVars`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, reactive } from 'vue';\n\nexport default {\n  setup() {\n    const themeVars = reactive({ buttonPrimaryBackground: 'red' });\n    const themeVarsDark = reactive({ buttonPrimaryBackground: 'blue' });\n    const themeVarsLight = reactive({ buttonPrimaryBackground: 'green' });\n\n    return {\n      themeVars,\n      themeVarsDark,\n      themeVarsLight,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Area Component Usage\nDESCRIPTION: This HTML snippet shows the basic usage of the Vant Area component within a Vue template. It binds the `areaList` property to the component, which is required for initializing the Area component with data. The `title` prop sets the title of the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-area title=\"Title\" :area-list=\"areaList\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up click event handler for Vant Tabs in Vue\nDESCRIPTION: This snippet shows how to set up the click event handler for the van-tabs component using Vue's reactivity system. It imports the ref function from Vue and creates a reactive variable called active, initialized to 0. It also defines the onClickTab method, which displays a toast message with the title of the clicked tab using the showToast method from the Vant library. Finally, it returns both the active variable and the onClickTab method from the setup function so they can be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const onClickTab = ({ title }) => showToast(title);\n    return {\n      active,\n      onClickTab,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Date Range Selection - JavaScript\nDESCRIPTION: Processes the date range selection from the Vant Calendar component. It formats the start and end dates of the selected range, updates the `date` ref with the formatted range, and hides the calendar.  It needs the `vue` library for reactive variables declared using `ref`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const date = ref('');\n    const show = ref(false);\n\n    const formatDate = (date) => `${date.getMonth() + 1}/${date.getDate()}`;\n    const onConfirm = (values) => {\n      const [start, end] = values;\n      show.value = false;\n      date.value = `${formatDate(start)} - ${formatDate(end)}`;\n    };\n\n    return {\n      date,\n      show,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Button Types with Vant\nDESCRIPTION: This HTML snippet showcases different button types provided by the Vant UI library: primary, success, default, danger, and warning. Each button type has a distinct style and color scheme, allowing developers to visually communicate the action associated with each button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\">主要按钮</van-button>\n<van-button type=\"success\">成功按钮</van-button>\n<van-button type=\"default\">默认按钮</van-button>\n<van-button type=\"danger\">危险按钮</van-button>\n<van-button type=\"warning\">警告按钮</van-button>\n```\n\n----------------------------------------\n\nTITLE: AddressList Component Logic in Vue\nDESCRIPTION: This code snippet provides the JavaScript logic for the AddressList component example. It defines reactive variables for chosenAddressId, list, and disabledList using the ref function from Vue. It also defines functions for handling the add and edit events, which display a toast message using the showToast function from Vant. The setup function returns the reactive variables and event handler functions to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const chosenAddressId = ref('1');\n    const list = [\n      {\n        id: '1',\n        name: '张三',\n        tel: '13000000000',\n        address: '浙江省杭州市西湖区文三路 138 号东方通信大厦 7 楼 501 室',\n        isDefault: true,\n      },\n      {\n        id: '2',\n        name: '李四',\n        tel: '1310000000',\n        address: '浙江省杭州市拱墅区莫干山路 50 号',\n      },\n    ];\n    const disabledList = [\n      {\n        id: '3',\n        name: '王五',\n        tel: '1320000000',\n        address: '浙江省杭州市滨江区江南大道 15 号',\n      },\n    ];\n\n    const onAdd = () => showToast('新增地址');\n    const onEdit = (item, index) => showToast('编辑地址:' + index);\n\n    return {\n      list,\n      onAdd,\n      onEdit,\n      disabledList,\n      chosenAddressId,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Color in Vant Actionbar in HTML\nDESCRIPTION: This HTML code snippet showcases how to customize the color of Vant ActionbarButtons using the `color` property. This enables you to apply custom colors, including linear gradients, to the buttons for a personalized look and feel.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"客服\" />\n  <van-action-bar-icon icon=\"shop-o\" text=\"店铺\" />\n  <van-action-bar-button color=\"#be99ff\" type=\"warning\" text=\"加入购物车\" />\n  <van-action-bar-button color=\"#7232dd\" type=\"danger\" text=\"立即购买\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in Vue\nDESCRIPTION: This JavaScript code sets up the data and submit handler for a basic Vant Form. It uses the `ref` function from Vue to create reactive variables for username and password.  The `onSubmit` function logs the submitted values to the console. The function is returned in the setup method to allow the template to access the data and method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const username = ref('');\n    const password = ref('');\n    const onSubmit = (values) => {\n      console.log('submit', values);\n    };\n\n    return {\n      username,\n      password,\n      onSubmit,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic ActionSheet Setup - Javascript\nDESCRIPTION: This JavaScript code snippet shows the setup for the basic ActionSheet usage.  It defines a reactive `show` ref to control the visibility of the ActionSheet, an `actions` array containing options, and an `onSelect` function to handle option selection, displaying a toast message.  It uses the Vue `ref` and Vant `showToast` methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: 'Option 1' },\n      { name: 'Option 2' },\n      { name: 'Option 3' },\n    ];\n    const onSelect = (item) => {\n      show.value = false;\n      showToast(item.name);\n    };\n\n    return {\n      show,\n      actions,\n      onSelect,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Signature Events (submit, clear)\nDESCRIPTION: This JavaScript snippet defines the `onSubmit` and `onClear` event handlers for the Signature component.  The `onSubmit` handler updates the `image` ref with the base64 encoded image data from the signature. The `onClear` handler displays a toast message.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const image = ref('');\n    const onSubmit = (data) => {\n      image.value = data.image;\n    };\n    const onClear = () => showToast('clear');\n\n    return {\n      image,\n      onSubmit,\n      onClear,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Input Value - HTML\nDESCRIPTION: Demonstrates how to format the input value of a Field component using the 'formatter' prop.  The 'format-trigger' prop controls when the formatting is applied (onChange or onBlur).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value1\"\n    label=\"Text\"\n    :formatter=\"formatter\"\n    placeholder=\"Format On Change\"\n  />\n  <van-field\n    v-model=\"value2\"\n    label=\"Text\"\n    :formatter=\"formatter\"\n    format-trigger=\"onBlur\"\n    placeholder=\"Format On Blur\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Loading Toast\nDESCRIPTION: This code snippet demonstrates how to display a loading toast using the `showLoadingToast` function from Vant. The function takes an object as an argument, allowing customization of the toast's message and behavior, such as disabling background clicks using the `forbidClick` option.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showLoadingToast } from 'vant';\n\nshowLoadingToast({\n  message: 'Loading...',\n  forbidClick: true,\n});\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider with Global Theme Scope\nDESCRIPTION: This HTML snippet shows how to set the scope of ConfigProvider's theme variables to global. By setting the theme-vars-scope prop to \"global\", CSS variable overrides will affect all components on the page, not just the children of the ConfigProvider.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider :theme-vars=\"themeVars\" theme-vars-scope=\"global\">\n  ...\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Form Usage - HTML\nDESCRIPTION: This code snippet demonstrates the basic usage of the Vant Form component in a Vue.js template.  It includes van-field components for username and password, along with associated validation rules. It sets up a submit handler, defines the form structure using van-cell-group, and provides a submit button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-form @submit=\"onSubmit\">\n  <van-cell-group inset>\n    <van-field\n      v-model=\"username\"\n      name=\"username\"\n      label=\"Username\"\n      placeholder=\"Username\"\n      :rules=\"[{ required: true, message: 'Username is required' }]\"\n    />\n    <van-field\n      v-model=\"password\"\n      type=\"password\"\n      name=\"password\"\n      label=\"Password\"\n      placeholder=\"Password\"\n      :rules=\"[{ required: true, message: 'Password is required' }]\"\n    />\n  </van-cell-group>\n  <div style=\"margin: 16px;\">\n    <van-button round block type=\"primary\" native-type=\"submit\">\n      Submit\n    </van-button>\n  </div>\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Basic ContactList Usage in HTML (Vue)\nDESCRIPTION: This HTML snippet showcases the basic usage of the Vant ContactList component within a Vue template. It binds the `chosenContactId` to a v-model, passes a `list` of contacts, sets the `default-tag-text`, and defines event handlers for `add`, `edit`, and `select` events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-list\n  v-model=\"chosenContactId\"\n  :list=\"list\"\n  default-tag-text=\"default\"\n  @add=\"onAdd\"\n  @edit=\"onEdit\"\n  @select=\"onSelect\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Stepper Step Configuration in Vue\nDESCRIPTION: This code demonstrates how to configure the step increment/decrement value of the Vant Stepper component. The `step` attribute is set to \"2\", so each click on the plus or minus button will increment or decrement the value by 2. The v-model directive binds the Stepper's value to a Vue ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" step=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Area Component into Form\nDESCRIPTION: This HTML code integrates the Vant Area component for province, city, and district selection within a Vant Form. The Area component is displayed inside of the popup, controlled by `showArea`. It uses the `areaList` for data. The `destroy-on-close` prop ensures the popup is re-rendered each time it is opened. The `model-value` prop is for two-way binding of the column values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"area\"\n  label=\"地区选择\"\n  placeholder=\"点击选择省市区\"\n  @click=\"showArea = true\"\n/>\n<van-popup v-model:show=\"showArea\" destroy-on-close position=\"bottom\">\n  <van-area\n    :area-list=\"areaList\"\n    :model-value=\"pickerValue\"\n    @confirm=\"onConfirm\"\n    @cancel=\"showArea = false\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Async Control of Switch Value\nDESCRIPTION: This example demonstrates asynchronous control of the Vant Switch component's value using the `model-value` prop and the `update:model-value` event. It shows how to prevent the switch from toggling until after a confirmation dialog is accepted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-switch :model-value=\"checked\" @update:model-value=\"onUpdateValue\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showConfirmDialog } from 'vant';\n\nexport default {\n  setup() {\n    const checked = ref(true);\n    const onUpdateValue = (newValue) => {\n      showConfirmDialog({\n        title: 'Confirm',\n        message: 'Are you sure to toggle switch?',\n      }).then(() => {\n        checked.value = newValue;\n      });\n    };\n\n    return {\n      checked,\n      onUpdateValue,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Radio with Cell Components\nDESCRIPTION: Integrates Radio components with Vant's Cell and CellGroup components for a list-like appearance. It uses the `van-cell` component with the `clickable` property and a `click` handler to update the selected value.  The Radio component is placed in the `right-icon` slot of the Cell.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-cell-group inset>\n    <van-cell title=\"单选框 1\" clickable @click=\"checked = '1'\">\n      <template #right-icon>\n        <van-radio name=\"1\" />\n      </template>\n    </van-cell>\n    <van-cell title=\"单选框 2\" clickable @click=\"checked = '2'\">\n      <template #right-icon>\n        <van-radio name=\"2\" />\n      </template>\n    </van-cell>\n  </van-cell-group>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Loading Toast - Vue\nDESCRIPTION: Shows a loading indicator toast message with an optional parameter to prevent interaction with the background. This is useful when performing operations that require the user to wait.  Requires the showLoadingToast function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showLoadingToast } from 'vant';\n\nshowLoadingToast({\n  message: '加载中...',\n  forbidClick: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using UploaderInstance with ref in Vue (TypeScript)\nDESCRIPTION: Demonstrates how to obtain a reference to the Uploader component instance using Vue's `ref` and call a method on it.  Specifically shows how to call the `chooseFile` method on the Uploader instance to trigger the file selection dialog. This requires the `UploaderInstance` type from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { UploaderInstance } from 'vant';\n\nconst uploaderRef = ref<UploaderInstance>();\n\nuploaderRef.value?.chooseFile();\n```\n\n----------------------------------------\n\nTITLE: useClickAway Hook with Custom Event\nDESCRIPTION: This JavaScript code demonstrates how to use the useClickAway hook with a custom event. It sets up a ref for the target element and then calls useClickAway, passing in the ref, a callback function, and an options object to specify the 'touchstart' event. This ensures that the callback is triggered when a touch event occurs outside the specified element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.en-US.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useClickAway } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n    useClickAway(\n      root,\n      () => {\n        console.log('touch outside!');\n      },\n      { eventName: 'touchstart' },\n    );\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Loading Component\nDESCRIPTION: Registers the Vant Loading component globally for use in Vue applications.  It imports the necessary modules from 'vue' and 'vant'. This makes the Loading component available throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Loading } from 'vant';\n\nconst app = createApp();\napp.use(Loading);\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Rate - HTML\nDESCRIPTION: This code snippet demonstrates integrating the Vant Rate component into a Vant Form field. The `van-rate` component, used for rating input, is inserted into the `#input` slot of the `van-field` to customize the form's input area.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"rate\" label=\"Rate\">\n  <template #input>\n    <van-rate v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Checkbox Component into Form\nDESCRIPTION: This HTML snippet integrates Vant Checkbox and CheckboxGroup components into a Vant Form. The `van-field` is used to structure each checkbox element, and the `#input` slot allows custom content to be injected, namely a single checkbox or a checkbox group. The checkbox group uses `direction=\"horizontal\"` for layout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"checkbox\" label=\"复选框\">\n  <template #input>\n    <van-checkbox v-model=\"checked\" shape=\"square\" />\n  </template>\n</van-field>\n<van-field name=\"checkboxGroup\" label=\"复选框组\">\n  <template #input>\n    <van-checkbox-group v-model=\"groupChecked\" direction=\"horizontal\">\n      <van-checkbox name=\"1\" shape=\"square\">复选框 1</van-checkbox>\n      <van-checkbox name=\"2\" shape=\"square\">复选框 2</van-checkbox>\n    </van-checkbox-group>\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Vant NavBar with Disabled Buttons\nDESCRIPTION: Shows how to disable the left and right buttons in the Vant NavBar using the `left-disabled` and `right-disabled` props. Disabled buttons are visually less opaque and unclickable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar\n  title=\"Title\"\n  left-text=\"Back\"\n  right-text=\"Button\"\n  left-arrow\n  left-disabled\n  right-disabled\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic PullRefresh Implementation - JavaScript\nDESCRIPTION: This JavaScript snippet provides the implementation details for the basic PullRefresh example, including the setup function, reactive variables for loading state and count, and the onRefresh event handler.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    const loading = ref(false);\n    const onRefresh = () => {\n      setTimeout(() => {\n        showToast('刷新成功');\n        loading.value = false;\n        count.value++;\n      }, 1000);\n    };\n\n    return {\n      count,\n      loading,\n      onRefresh,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: NumberKeyboard with v-model Binding\nDESCRIPTION: This example demonstrates how to use `v-model` to bind the input value of the NumberKeyboard to a Vue data property. It also uses `maxlength` to restrict the input length and `van-field` to display the value. The keyboard's visibility is still controlled by the `show` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-field v-model=\"value\" readonly clickable @touchstart.stop=\"show = true\" />\n<van-number-keyboard\n  v-model=\"value\"\n  :show=\"show\"\n  :maxlength=\"6\"\n  @blur=\"show = false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing DropdownMenu and DropdownItem Components - Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the DropdownMenu and DropdownItem components from Vant in a Vue application. It imports the necessary components and uses the `app.use()` method to register them for use throughout the application. Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { DropdownMenu, DropdownItem } from 'vant';\n\nconst app = createApp();\napp.use(DropdownMenu);\napp.use(DropdownItem);\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Uploader - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Uploader example. It initializes a reactive variable `value` using `ref` to hold the uploaded file data and binds it to the `v-model` of the `van-uploader` component. The initial value contains a sample image URL.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref([\n      { url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg' },\n    ]);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Card with Discount Info in HTML\nDESCRIPTION: This HTML snippet illustrates how to display discount information within a Vant Card component. In addition to the basic attributes like `title`, `desc`, `price`, `num`, and `thumb`, it includes the `tag` and `origin-price` attributes. The `tag` displays a promotional tag, while `origin-price` shows the original price alongside the discounted price. Dependencies: Vant CSS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-card\n  num=\"2\"\n  tag=\"Tag\"\n  price=\"2.00\"\n  title=\"Title\"\n  desc=\"Description\"\n  origin-price=\"10.00\"\n  thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive value for Vant Search\nDESCRIPTION: This JavaScript snippet sets up the reactive `value` used in the basic usage example using Vue's `ref`. It imports `ref` from 'vue', initializes `value` as an empty string, and then returns it from the `setup` function to make it available in the template. The Vant Search component uses this to update the value of the search input.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('');\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Size Limit Function - Vue\nDESCRIPTION: Shows how to use a function for the max-size property to apply different size limits based on file type.  The isOverSize function checks the file type and returns true if the file exceeds the corresponding size limit.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader multiple :max-size=\"isOverSize\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Single Date Selection - JavaScript\nDESCRIPTION: Defines the logic for handling the single date selection event from the Vant Calendar component. It formats the selected date and updates the `date` ref with the formatted value and hides the calendar component. Requires the `vue` library for reactive state management using `ref`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const date = ref('');\n    const show = ref(false);\n\n    const formatDate = (date) => {\n      return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n    };\n    const onConfirm = (value) => {\n      show.value = false;\n      date.value = formatDate(value);\n    };\n\n    return {\n      date,\n      show,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component in Vant Form - HTML\nDESCRIPTION: This HTML snippet demonstrates how to integrate a custom component (defined with `useCustomFieldValue`) into a Vant Form.  The `<van-field>` component is used with a custom input slot (`#input`) to embed the custom component. When the form is submitted, the value provided by the `useCustomFieldValue` hook within the custom component will be included in the form data. The `name` attribute of `<van-field>` determines the key under which the value will appear in the submitted form data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-custom-field-value.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-form>\n  <!-- 这是一个自定义表单项 -->\n  <!-- 当表单提交时，会包括 useCustomFieldValue 中传入的值 -->\n  <van-field name=\"my-field\" label=\"自定义表单项\">\n    <template #input>\n      <my-component />\n    </template>\n  </van-field>\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Handling Search and Cancel Events\nDESCRIPTION: This HTML snippet demonstrates how to listen for the `search` and `cancel` events emitted by the Vant Search component. The `@search` event is triggered when the user presses Enter or clicks the search button in the keyboard, while the `@cancel` event is triggered when the user clicks the cancel button. The code also adds a form element, which is necessary for displaying the \"Search\" button on iOS keyboards.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/\">\n  <van-search\n    v-model=\"value\"\n    show-action\n    placeholder=\"请输入搜索关键词\"\n    @search=\"onSearch\"\n    @cancel=\"onCancel\"\n  />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Textarea Auto Resize - HTML\nDESCRIPTION: Shows how to enable auto resizing for a textarea Field component using the 'autosize' prop.  The 'rows' prop sets the initial number of visible text lines.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"message\"\n    label=\"Message\"\n    type=\"textarea\"\n    placeholder=\"Message\"\n    rows=\"1\"\n    autosize\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Vant Slider Dual Thumb (Range)\nDESCRIPTION: This snippet demonstrates the use of the `range` attribute to enable the dual thumb mode in the Vant Slider component.  In this mode, the `v-model` is bound to an array representing the two thumb values, and the onChange handler displays the current values. Initial value is set as an array [10, 50].\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" range @change=\"onChange\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    // value must be an Array\n    const value = ref([10, 50]);\n    const onChange = (value) => showToast('Current value: ' + value);\n    return {\n      value,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Option Status Setup - Javascript\nDESCRIPTION: This JavaScript code configures different option statuses within the ActionSheet. It defines an `actions` array with options that have properties like `color`, `disabled`, and `loading` to represent colored, disabled, and loading states respectively. It uses the Vue `ref`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: 'Colored Option', color: '#ee0a24' },\n      { name: 'Disabled Option', disabled: true },\n      { name: 'Loading Option', loading: true },\n    ];\n\n    return {\n      show,\n      actions,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Randomized NumberKeyboard\nDESCRIPTION: This snippet demonstrates how to enable the random key order feature of the NumberKeyboard by setting the `random-key-order` prop to true.  This is used for enhancing security.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-cell @touchstart.stop=\"show = true\"> 弹出配置随机数字的键盘 </van-cell>\n<van-number-keyboard\n  :show=\"show\"\n  random-key-order\n  @blur=\"show = false\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Accordion Mode Implementation in Collapse Component\nDESCRIPTION: This HTML snippet demonstrates the accordion mode of the `van-collapse` component. The `accordion` prop is set to `true`, ensuring that only one panel can be expanded at a time. The `v-model` is bound to `activeName` which stores the currently active panel.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeName\" accordion>\n  <van-collapse-item title=\"Title1\" name=\"1\">\n    The code is written for people to see and can be run on a machine.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title2\" name=\"2\">\n    Technology is nothing more than the common soul of those who develop it.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title3\" name=\"3\">\n    The frequency of people swearing during code reading is the only measure of\n    code quality.\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Color - Vue\nDESCRIPTION: This code snippet demonstrates how to customize the active color of the dropdown menu using the `active-color` prop. It sets the active color to `#ee0a24`. Dependencies: Vant DropdownMenu and DropdownItem.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu active-color=\"#ee0a24\">\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with name matching in Vue\nDESCRIPTION: This snippet showcases how to use the name attribute in van-tab components and how to bind the active tab using these names. The v-model:active directive is used to bind the activeName variable to the active tab, where the activeName variable holds the name of the desired tab. This enables matching tabs via name instead of index.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"activeName\">\n  <van-tab title=\"标签 1\" name=\"a\">内容 1</van-tab>\n  <van-tab title=\"标签 2\" name=\"b\">内容 2</van-tab>\n  <van-tab title=\"标签 3\" name=\"c\">内容 3</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic RadioGroup Usage in Vue\nDESCRIPTION: Demonstrates basic usage of the RadioGroup component with v-model for binding the selected value. It uses the `van-radio-group` and `van-radio` components to create a group of radio buttons, binding the selected value to the `checked` ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\">单选框 1</van-radio>\n  <van-radio name=\"2\">单选框 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Anchors Example - FloatingPanel - HTML\nDESCRIPTION: This example shows how to customize the anchor positions of the FloatingPanel using the `anchors` attribute and control the current height using `v-model:height`. This allows the panel to stop at predefined heights when dragged.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-panel v-model:height=\"height\" :anchors=\"anchors\">\n  <div style=\"text-align: center; padding: 15px\">\n    <p>Panel Show Height {{ height.toFixed(0) }} px</p>\n  </div>\n</van-floating-panel>\n```\n\n----------------------------------------\n\nTITLE: Pagination with Ellipsis in HTML (Vue Template)\nDESCRIPTION: This HTML snippet demonstrates how to enable ellipsis in the Vant Pagination component using the `force-ellipses` property. The ellipsis allows users to quickly jump to distant pages.  It binds the `currentPage` variable to the component's `v-model` and sets the `total-items` and `show-page-size` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination\n  v-model=\"currentPage\"\n  :total-items=\"125\"\n  :show-page-size=\"3\"\n  force-ellipses\n/>\n```\n\n----------------------------------------\n\nTITLE: Shrink Tabs - HTML\nDESCRIPTION: Enables shrink mode for the tabs using the `shrink` prop. The tabs will be shrunk to the left to fit within the container. The `v-model:active` directive binds the active tab index to the `active` ref. A second example also uses `type=\"card\"`. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" shrink>\n  <van-tab v-for=\"index in 4\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n\n<van-tabs v-model:active=\"active\" shrink type=\"card\">\n  <van-tab v-for=\"index in 4\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Sticky Tabs - HTML\nDESCRIPTION: Enables sticky mode for the tabs using the `sticky` prop. The tab navigation will be fixed to the top of the viewport when the user scrolls past it. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" sticky>\n  <van-tab v-for=\"index in 4\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar Custom Icon Setup\nDESCRIPTION: Defines a reactive `icon` object containing URLs for both active and inactive states of a custom icon. The `active` ref manages the active tab. The `icon` and `active` variables are returned from the `setup` function for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const icon = {\n      active: 'https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png',\n      inactive:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-inactive.png',\n    };\n    return {\n      icon,\n      active,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Coupon Components with Vue\nDESCRIPTION: This code snippet demonstrates how to install and register the `CouponCell` and `CouponList` components globally within a Vue application. It utilizes `createApp` from Vue to create an application instance and then registers each component using `app.use()`. This makes the components available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { CouponCell, CouponList } from 'vant';\n\nconst app = createApp();\napp.use(CouponCell);\napp.use(CouponList);\n```\n\n----------------------------------------\n\nTITLE: Custom Content - HTML\nDESCRIPTION: Demonstrates how to use slots to customize the content of grid items.  Images are displayed within the grid items using the `van-image` component. The `border` property is set to `false` to remove the grid border.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :border=\"false\" :column-num=\"3\">\n  <van-grid-item>\n    <van-image\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg\"\n    />\n  </van-grid-item>\n  <van-grid-item>\n    <van-image\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg\"\n    />\n  </van-grid-item>\n  <van-grid-item>\n    <van-image\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-3.jpeg\"\n    />\n  </van-grid-item>\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Binding Area Component with v-model\nDESCRIPTION: This HTML snippet shows how to bind the selected area code to a Vue component's data using `v-model`. This allows two-way data binding between the Area component and the component's state. The `title` prop sets the title of the component and `:area-list` provides the area data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-area v-model=\"value\" title=\"Title\" :area-list=\"areaList\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing CountDown Format - HTML\nDESCRIPTION: This code snippet demonstrates how to customize the format of the countdown timer using the `format` prop. The `format` prop accepts a string that defines the desired output format using tokens like `DD`, `HH`, `mm`, and `ss` for days, hours, minutes, and seconds, respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down :time=\"time\" format=\"DD 天 HH 时 mm 分 ss 秒\" />\n```\n\n----------------------------------------\n\nTITLE: Basic ActionSheet Usage - HTML\nDESCRIPTION: Demonstrates basic usage of the ActionSheet component within a Vue template. It includes a VanCell component that triggers the ActionSheet's visibility and an ActionSheet component bound to a show property and actions array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell is-link title=\"基础用法\" @click=\"show = true\" />\n<van-action-sheet v-model:show=\"show\" :actions=\"actions\" @select=\"onSelect\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Options for Toasts\nDESCRIPTION: This code snippet demonstrates how to globally modify the default configuration of the `showToast` and other methods using the `setToastDefaultOptions` function. It also shows how to reset the default options using `resetToastDefaultOptions`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setToastDefaultOptions, resetToastDefaultOptions } from 'vant';\n\nsetToastDefaultOptions({ duration: 2000 });\n\nsetToastDefaultOptions('loading', { forbidClick: true });\n\nresetToastDefaultOptions();\n\nresetToastDefaultOptions('loading');\n```\n\n----------------------------------------\n\nTITLE: Handling ContactEdit Events\nDESCRIPTION: This JavaScript snippet defines the setup function for a Vue.js component that uses ContactEdit. It initializes a reactive contact object (`editingContact`), defines event handlers (`onSave`, `onDelete`), and provides these to the template. It depends on the `ref` function from Vue and `showToast` from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const editingContact = ref({\n      tel: '',\n      name: '',\n    });\n    const onSave = (contactInfo) => showToast('保存');\n    const onDelete = (contactInfo) => showToast('删除');\n    return {\n      onSave,\n      onDelete,\n      editingContact,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Popover with Custom Content - HTML\nDESCRIPTION: Implements a Popover component with custom content using the default slot.  It binds the `showPopover` ref to the `v-model:show` prop and passes an array of `actions` to the component. The `reference` slot renders the button that triggers the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\">\n  <van-grid\n    square\n    clickable\n    :border=\"false\"\n    column-num=\"3\"\n    style=\"width: 240px;\"\n  >\n    <van-grid-item\n      v-for=\"i in 6\"\n      :key=\"i\"\n      text=\"Option\"\n      icon=\"photo-o\"\n      @click=\"showPopover = false\"\n    />\n  </van-grid>\n  <template #reference>\n    <van-button type=\"primary\">Custom Content</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Usage in Vue Template\nDESCRIPTION: This code snippet shows a basic implementation of the `van-steps` component with the `active` prop bound to a reactive variable. It defines four `van-step` components representing the stages of a process, such as an order fulfillment workflow.  The `active` prop determines which step is currently highlighted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-steps :active=\"active\">\n  <van-step>买家下单</van-step>\n  <van-step>商家接单</van-step>\n  <van-step>买家提货</van-step>\n  <van-step>交易完成</van-step>\n</van-steps>\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Usage in HTML (Vue Template)\nDESCRIPTION: This HTML snippet shows the basic implementation of the Vant Pagination component using Vue's template syntax. It binds the `currentPage` variable to the component's `v-model` and sets the `total-items` and `items-per-page` properties to configure the pagination behavior.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination v-model=\"currentPage\" :total-items=\"24\" :items-per-page=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Content - Vue Setup Script\nDESCRIPTION: Provides the setup script for the custom content example. Defines refs for the menu and item, reactive variables for value, switches, and options.  Includes an `onConfirm` function that toggles the item's display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const menuRef = ref(null);\n    const itemRef = ref(null);\n    const value = ref(0);\n    const switch1 = ref(false);\n    const switch2 = ref(false);\n    const options = [\n      { text: 'Option1', value: 0 },\n      { text: 'Option2', value: 1 },\n      { text: 'Option3', value: 2 },\n    ];\n    const onConfirm = () => {\n      item.value.toggle();\n      // or\n      // menuRef.value.close();\n    };\n\n    return {\n      menuRef,\n      itemRef,\n      value,\n      switch1,\n      switch2,\n      options,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Swipe Tabs - HTML\nDESCRIPTION: Demonstrates swipeable tabs. Displays 8 tabs which become swipeable if there are more than 5. The `v-model:active` directive binds the active tab index to the `active` ref. A loop is used to generate the tabs dynamically.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab v-for=\"index in 8\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic SubmitBar Usage in HTML\nDESCRIPTION: This snippet demonstrates the basic usage of the SubmitBar component in a Vue template.  It sets the price using the `:price` prop, the button text with `button-text`, and binds the `@submit` event to the `onSubmit` method. The price is passed in cents. The onSubmit method should be defined in the component's javascript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar :price=\"3050\" button-text=\"提交订单\" @submit=\"onSubmit\" />\n```\n\n----------------------------------------\n\nTITLE: Using BeforeClose Callback - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `beforeClose` option to intercept the closing of the ImagePreview.  The provided callback function can return `false` (or a promise that resolves to `false`) to prevent the ImagePreview from closing.  It uses `setTimeout` to later programmatically close the preview using the instance returned by `showImagePreview`. It uses `vant` library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nconst instance = showImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  beforeClose: () => false,\n});\n\nsetTimeout(() => {\n  instance.close();\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: Custom Content inside Vant SwipeCell in HTML\nDESCRIPTION: This snippet showcases how to embed a `van-card` component within a `van-swipe-cell`. It uses slots to add a delete button on the right side.  The CSS styles are provided for customizing the card and delete button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe-cell>\n  <van-card\n    num=\"2\"\n    price=\"2.00\"\n    desc=\"Description\"\n    title=\"Title\"\n    class=\"goods-card\"\n    thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n  />\n  <template #right>\n    <van-button square text=\"Delete\" type=\"danger\" class=\"delete-button\" />\n  </template>\n</van-swipe-cell>\n\n<style>\n  .goods-card {\n    margin: 0;\n    background-color: @white;\n  }\n\n  .delete-button {\n    height: 100%;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Managing Radio Button State in Vue\nDESCRIPTION: This JavaScript code manages the state of a Vant RadioGroup component. The `ref` function is used to create a reactive variable called `checked`, initialized with the value '1'. This variable is bound to the `v-model` of the `van-radio-group`, ensuring that the selected radio button is always reflected in the data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref('1');\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue.js Setup for Light/Dark Theme Variables\nDESCRIPTION: This Javascript code shows how to define and manage CSS variables specifically for dark and light themes in Vue.js. By creating three separate reactive objects for `themeVars`, `themeVarsDark`, and `themeVarsLight`, different values can be applied based on the current theme.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, reactive } from 'vue';\n\nexport default {\n  setup() {\n    const themeVars = reactive({ buttonPrimaryBackground: 'red' });\n    const themeVarsDark = reactive({ buttonPrimaryBackground: 'blue' });\n    const themeVarsLight = reactive({ buttonPrimaryBackground: 'green' });\n\n    return {\n      themeVars,\n      themeVarsDark,\n      themeVarsLight,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Click Event Handling - JavaScript\nDESCRIPTION: Defines the `onClickTab` method that is called when a tab is clicked. Uses `showToast` from Vant to display a toast notification with the title of the clicked tab. Requires Vue 3 and the Vant UI library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onClickTab = ({ title }) => showToast(title);\n    return {\n      onClickTab,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Message Dialog - JavaScript\nDESCRIPTION: Shows a simple message dialog using the `showDialog` function from Vant.  It renders a modal with the specified message. Requires the `showDialog` function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n\nshowDialog({ message: '提示' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue CLI Plugin for Vant\nDESCRIPTION: This JavaScript code configures a Vue CLI project to automatically import Vant components and styles using `unplugin-vue-components` and `@vant/auto-import-resolver`. It specifies the use of `VantResolver` within the `configureWebpack` section of `vue.config.js`. The code handles versions of unplugin-vue-components less than and greater than/equal to 0.26.0.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VantResolver } = require('@vant/auto-import-resolver');\nconst AutoImport = require('unplugin-auto-import/webpack');\nconst Components = require('unplugin-vue-components/webpack');\n\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      // When the version of unplugin-vue-components is less than 0.26.0:\n      AutoImport({ resolvers: [VantResolver()] }),\n      Components({ resolvers: [VantResolver()] }),\n      // when the unplugin-vue-components version is greater than or equal to 0.26.0:\n      AutoImport.default({\n        resolvers: [VantResolver()],\n      }),\n      Components.default({ resolvers: [VantResolver()] }),\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Picker Usage with Event Handlers\nDESCRIPTION: This snippet shows a basic implementation of the Vant Picker component in a Vue setup function, including event handling for confirm, cancel, and change events. It defines a `columns` array with sample data and functions to handle events, displaying a toast message with the selected values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const columns = [\n      { text: 'Delaware', value: 'Delaware' },\n      { text: 'Florida', value: 'Florida' },\n      { text: 'Wenzhou', value: 'Wenzhou' },\n      { text: 'Indiana', value: 'Indiana' },\n      { text: 'Maine', value: 'Maine' },\n    ];\n    const onConfirm = ({ selectedValues }) => {\n      showToast(`Value: ${selectedValues.join(',')}`);\n    };\n    const onChange = ({ selectedValues }) => {\n      showToast(`Value: ${selectedValues.join(',')}`);\n    };\n    const onCancel = () => showToast('Cancel');\n\n    return {\n      columns,\n      onChange,\n      onCancel,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Component - HTML\nDESCRIPTION: Demonstrates how to use the `van-dialog` component directly within a Vue template, including setting properties like `show`, `title`, and `show-cancel-button`.  It uses the `v-model:show` directive for two-way data binding. Requires Vant CSS for styling.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-dialog v-model:show=\"show\" title=\"标题\" show-cancel-button>\n  <img src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-3.jpeg\" />\n</van-dialog>\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the `van-tabs` and `van-tab` components. The `v-model:active` directive binds the active tab index to the `active` ref. A loop is used to generate the tabs dynamically. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab v-for=\"index in 4\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme with ConfigProvider - Vue.js\nDESCRIPTION: This Vue.js code demonstrates how to use the `theme-vars` property of the `ConfigProvider` component to override CSS variables.  It defines a reactive `themeVars` object containing CSS variable overrides.  The variables are then passed to the ConfigProvider, customizing the appearance of Vant components within its scope. The code initializes `rate` and `slider` refs, and defines the `themeVars` reactive object with custom CSS variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, reactive } from 'vue';\n\nexport default {\n  setup() {\n    const rate = ref(4);\n    const slider = ref(50);\n\n    // ThemeVars will be converted to the corresponding CSS variable\n    // For example, sliderBarHeight will be converted to `--van-slider-bar-height`\n    const themeVars = reactive({\n      rateIconFullColor: '#07c160',\n      sliderBarHeight: '4px',\n      sliderButtonWidth: '20px',\n      sliderButtonHeight: '20px',\n      sliderActiveBackground: '#07c160',\n      buttonPrimaryBackground: '#07c160',\n      buttonPrimaryBorderColor: '#07c160',\n    });\n\n    return {\n      rate,\n      slider,\n      themeVars,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: PickerGroup Controlled Mode with v-model:active-tab - HTML\nDESCRIPTION: Demonstrates how to use the PickerGroup component in controlled mode, by binding `v-model:active-tab` to a reactive variable. The example includes a button to switch the active tab and a PickerGroup with DatePicker and TimePicker components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" @click=\"setActiveTab\">\n  点击切换 tab，当前为 {{ activeTab }}\n</van-button>\n<van-picker-group\n  v-model:active-tab=\"activeTab\"\n  title=\"预约日期\"\n  :tabs=\"['选择日期', '选择时间']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"currentDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-time-picker v-model=\"currentTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Change Event - HTML\nDESCRIPTION: Shows how to listen for the `change` event on the Tabbar. This event is emitted when the selected tab changes, allowing you to perform actions in response to tab selections. The `onChange` method will be called with the index of the selected tab.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\" @change=\"onChange\">\n  <van-tabbar-item icon=\"home-o\">标签 1</van-tabbar-item>\n  <van-tabbar-item icon=\"search\">标签 2</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\">标签 3</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">标签 4</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Basic Cell Usage with CellGroup\nDESCRIPTION: This code demonstrates the basic usage of the `van-cell` component within a `van-cell-group`. The `van-cell-group` provides default styling and borders for the cells. The `van-cell` components are configured with `title` and `value` props to display content. A `label` is also added to one of the cells.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"单元格\" value=\"内容\" />\n  <van-cell title=\"单元格\" value=\"内容\" label=\"描述信息\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Calling showDialog Function - JavaScript\nDESCRIPTION: This snippet shows how to call the showDialog function, a utility function provided by Vant, to display a Dialog directly in the page.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n\nshowDialog({ message: 'Alert' });\n```\n\n----------------------------------------\n\nTITLE: Disabled and Readonly Fields - HTML\nDESCRIPTION: Demonstrates how to disable or make a Field component readonly. The 'readonly' and 'disabled' props are used to control the input's editability. The model-value prop is used to set the initial value for these fields.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field label=\"Text\" model-value=\"Input Readonly\" readonly />\n  <van-field label=\"Text\" model-value=\"Input Disabled\" disabled />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Managing Checkbox State in Vue\nDESCRIPTION: This JavaScript code manages the state of Vant Checkbox and CheckboxGroup components. It uses `ref` to create reactive variables for both a single checkbox (`checked`) and a checkbox group (`groupChecked`). The `groupChecked` variable is initialized as an empty array, allowing multiple checkboxes to be selected within the group.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(false);\n    const groupChecked = ref([]);\n    return {\n      checked,\n      groupChecked,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TimePicker Usage in HTML\nDESCRIPTION: A basic example of using the TimePicker component in a Vue template. It binds the `currentTime` variable to the `v-model` attribute for two-way data binding. The `title` prop sets the title of the TimePicker.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker v-model=\"currentTime\" title=\"Choose Time\" />\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Filter Function\nDESCRIPTION: Demonstrates using the `filter` prop to customize the available date options.  It initializes the date, sets the minimum and maximum selectable dates and configures the filter function to allow only months divisible by 6.  The component emits changes to `currentDate` based on user selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"选择年月\"\n  :filter=\"filter\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Pre-upload Processing - Vue\nDESCRIPTION: Demonstrates how to perform pre-upload processing using the beforeRead prop. It shows how to validate the file type and how to use a Promise for asynchronous file processing.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader :before-read=\"beforeRead\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Active Color - HTML\nDESCRIPTION: Illustrates how to customize the active color of the title and options using the `active-color` prop of the DropdownMenu component.  The color is set to `#ee0a24`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu active-color=\"#ee0a24\">\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Navigation Buttons with Vant\nDESCRIPTION: This HTML snippet demonstrates how to use Vant Buttons for navigation. The `url` attribute navigates to an external URL, while the `to` attribute navigates to a route within the Vue application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" url=\"https://github.com\">URL 跳转</van-button>\n<van-button type=\"primary\" to=\"index\">路由跳转</van-button>\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Custom Icons (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use custom icons within the ShareSheet component. The `v-model:show` and `:options` props are used to control the ShareSheet's visibility and share options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-share-sheet v-model:show=\"showShare\" :options=\"options\" />\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Cancel Button Setup - Javascript\nDESCRIPTION: This JavaScript snippet configures the cancel button functionality for the ActionSheet. It defines an `onCancel` method that displays a toast message when the cancel button is clicked. It uses the Vue `ref` and Vant `showToast` methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: 'Option 1' },\n      { name: 'Option 2' },\n      { name: 'Option 3' },\n    ];\n    const onCancel = () => showToast('cancel');\n\n    return {\n      show,\n      actions,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type DatePicker - HTML\nDESCRIPTION: This code snippet demonstrates the integration of the Vant DatePicker component within a Vant Form field. It uses a `van-field` to display the selected date, making it readonly, and a `van-popup` to display the date picker when the field is clicked.  The `v-model:show` directive on the popup controls its visibility.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"datePicker\"\n  label=\"Date Picker\"\n  placeholder=\"Select date\"\n  @click=\"showPicker = true\"\n/>\n<van-popup v-model:show=\"showPicker\" destroy-on-close position=\"bottom\">\n  <van-date-picker\n    :model-value=\"pickerValue\"\n    @confirm=\"onConfirm\"\n    @cancel=\"showPicker = false\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Title - HTML\nDESCRIPTION: Customizes the tab title using the `title` slot.  The example uses a `van-icon` component in the title. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered, and the Icon component to be registered as well.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab v-for=\"index in 2\">\n    <template #title><van-icon name=\"more-o\" />Tab</template>\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Date with Calendar - HTML\nDESCRIPTION: Implements a single date selection using the Vant Calendar component.  It integrates with a `van-cell` component to trigger the calendar display. The selected date is displayed in the cell's value. The `confirm` event is emitted after selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"选择单个日期\" :value=\"date\" @click=\"show = true\" />\n<van-calendar v-model:show=\"show\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Card Usage in HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Card component in HTML. It sets properties such as `num`, `price`, `desc`, `title`, and `thumb` to display product information. The `thumb` property specifies the URL of the card's image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-card\n  num=\"2\"\n  price=\"2.00\"\n  desc=\"描述信息\"\n  title=\"商品标题\"\n  thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Content in DropdownItem - HTML\nDESCRIPTION: Shows how to include custom content within a DropdownItem. Uses van-cell and van-switch components within the DropdownItem's default slot. A confirm button is added to trigger the toggle function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu ref=\"menuRef\">\n  <van-dropdown-item v-model=\"value\" :options=\"options\" />\n  <van-dropdown-item title=\"Title\" ref=\"item\">\n    <van-cell center title=\"Title\">\n      <template #right-icon>\n        <van-switch v-model=\"switch1\" />\n      </template>\n    </van-cell>\n    <van-cell center title=\"Title\">\n      <template #right-icon>\n        <van-switch v-model=\"switch2\" />\n      </template>\n    </van-cell>\n    <div style=\"padding: 5px 16px;\">\n      <van-button type=\"primary\" block round @click=\"onConfirm\">\n        Confirm\n      </van-button>\n    </div>\n  </van-dropdown-item>\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Picker v-model binding\nDESCRIPTION: This snippet demonstrates how to use `v-model` to bind the selected values of the Vant Picker component to a Vue ref. The `selectedValues` ref is initialized with a default value ('Wenzhou'), and changes to the picker selection will automatically update this ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const columns = [\n      { text: 'Delaware', value: 'Delaware' },\n      { text: 'Florida', value: 'Florida' },\n      { text: 'Wenzhou', value: 'Wenzhou' },\n      { text: 'Indiana', value: 'Indiana' },\n      { text: 'Maine', value: 'Maine' },\n    ];\n    const selectedValues = ref(['Wenzhou']);\n\n    return {\n      columns,\n      selectedValues,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Images Correctly in HTML\nDESCRIPTION: Demonstrates the correct way to reference local images within a Vue component.  The `require()` function is used to convert the image path to a webpack module request, allowing webpack to process the image correctly using file-loader or url-loader. This snippet addresses a common pitfall and provides the appropriate solution.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- 错误写法 -->\n<van-image src=\"./image.png\" />\n\n<!-- 正确写法 -->\n<van-image :src=\"require('./image.png')\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant BackTop\nDESCRIPTION: This HTML and JavaScript code demonstrates the basic usage of the Vant BackTop component. The HTML part includes a list of `van-cell` components and the `van-back-top` component. The JavaScript part sets up the component's data, which is a list of 50 items. When the user scrolls down the page, the BackTop component will appear, and clicking on it will scroll the page back to the top.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n\n<van-back-top />\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Image Slot with Styling - HTML\nDESCRIPTION: This snippet demonstrates how to customize the image and bind style and onLoad event to the `<img>` tag through the `image` slot. It allows the `<img>` tag to support image scaling, enabling zoom functionalities. It depends on the `vant` library and the `vue` framework.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-image-preview\n  v-model:show=\"show\"\n  :images=\"images\"\n  :close-on-click-image=\"false\"\n>\n  <template #image=\"{ src, style, onLoad }\">\n    <img :src=\"src\" :style=\"[{ width: '100%' }, style]\" @load=\"onLoad\" />\n  </template>\n</van-image-preview>\n```\n\n----------------------------------------\n\nTITLE: Vant Space Component Vertical Spacing\nDESCRIPTION: Shows how to use the `direction` prop to create vertical spacing between elements, and the `fill` prop to make the space component take the full width.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-space direction=\"vertical\" fill>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Vant Buttons\nDESCRIPTION: This HTML snippet demonstrates how to add icons to buttons using the `icon` prop. It supports both Vant's built-in icons and custom icon URLs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-button icon=\"plus\" type=\"primary\" />\n<van-button icon=\"plus\" type=\"primary\">Button</van-button>\n<van-button\n  plain\n  icon=\"https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png\"\n  type=\"primary\"\n>\n  Button\n</van-button>\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Switch Component into Form\nDESCRIPTION: This HTML snippet demonstrates the integration of a Vant Switch component within a Vant Form. The `van-field` component is used as a container, and the `van-switch` is placed inside the `#input` slot. This allows the switch to be treated as a form input.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"switch\" label=\"开关\">\n  <template #input>\n    <van-switch v-model=\"checked\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Managing Rating Value in Vue\nDESCRIPTION: This JavaScript code manages the value of the Vant Rate component using Vue's reactivity. A reactive variable `value` is created using `ref`, initialized to 3, and bound to the `v-model` of the `van-rate` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(3);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic PullRefresh Usage - HTML\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the PullRefresh component, including binding the loading state to a v-model and listening for the refresh event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh v-model=\"loading\" @refresh=\"onRefresh\">\n  <p>刷新次数: {{ count }}</p>\n</van-pull-refresh>\n```\n\n----------------------------------------\n\nTITLE: Displaying Alert Dialog - JavaScript\nDESCRIPTION: This code snippet demonstrates how to display a simple alert dialog using the `showDialog` function from Vant. It imports the function and then calls it with an object containing configuration options for the dialog, such as the title and message. The `then` method is used to handle the dialog's close event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n\nshowDialog({\n  title: 'Title',\n  message: 'The code is written for people to see and can be run on a machine.',\n}).then(() => {\n  // on close\n});\n\nshowDialog({\n  message:\n    'Life is far more than just spinning and being busy to the limit, and human experiences are much broader and richer than this.',\n}).then(() => {\n  // on close\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TextEllipsis Component - Vue\nDESCRIPTION: Registers the TextEllipsis component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant' and uses the app.use method to make the component available throughout the application. Requires Vue and Vant as dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { TextEllipsis } from 'vant';\n\nconst app = createApp();\napp.use(TextEllipsis);\n```\n\n----------------------------------------\n\nTITLE: Using useCustomFieldValue in MyComponent (Vue)\nDESCRIPTION: This snippet demonstrates how to use the `useCustomFieldValue` hook within a custom Vue component (`MyComponent`) to provide a custom value to a Vant Field component.  It uses the `ref` function from Vue to create a reactive value (`myValue`) and passes a function that returns this value to `useCustomFieldValue`. This function will be called by `van-field` to retrieve value. Dependencies: Vue, @vant/use\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-custom-field-value.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// MyComponent.vue\nimport { ref } from 'vue';\nimport { useCustomFieldValue } from '@vant/use';\n\nexport default {\n  setup() {\n    const myValue = ref(0);\n\n    useCustomFieldValue(() => myValue.value);\n\n    return { myValue };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Picker v-model binding HTML\nDESCRIPTION: This snippet showcases the HTML implementation for binding the Vant Picker component with `v-model`.  The `v-model` directive is used to bind the `selectedValues` ref to the picker.  The picker's initial selection will correspond to the initial value of the `selectedValues` array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-picker v-model=\"selectedValues\" title=\"Title\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Using useToggle Hook (Basic)\nDESCRIPTION: Demonstrates the basic usage of the useToggle hook to toggle a boolean state between true and false. It imports the useToggle function from '@vant/use' and uses it within the setup function of a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-toggle.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useToggle } from '@vant/use';\n\nexport default {\n  setup() {\n    const [state, toggle] = useToggle();\n\n    toggle(true);\n    console.log(state.value); // -> true\n\n    toggle(false);\n    console.log(state.value); // -> false\n\n    toggle();\n    console.log(state.value); // -> true\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Grid with Square Items - HTML\nDESCRIPTION: Demonstrates how to make the GridItem components square using the `square` prop on the Vant Grid. It dynamically generates eight GridItem components with an icon and text. The `square` prop ensures that the height of each item is equal to its width.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-grid square>\n  <van-grid-item v-for=\"value in 8\" :key=\"value\" icon=\"photo-o\" text=\"Text\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Limiting Upload Size - Vue\nDESCRIPTION: Demonstrates how to limit the size of uploaded files using the max-size property. Files exceeding the size limit are filtered out, and the oversize event is triggered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader multiple :max-size=\"500 * 1024\" @oversize=\"onOversize\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Multi-Column Selection\nDESCRIPTION: This code snippet demonstrates configuring the Vant Picker component for multi-column selection using a two-dimensional array for the columns property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-picker title=\"标题\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Button Size in Vant\nDESCRIPTION: This HTML snippet demonstrates how to set the size of buttons using the `size` prop. Supported sizes include large, normal, small, and mini.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" size=\"large\">Large</van-button>\n<van-button type=\"primary\" size=\"normal\">Normal</van-button>\n<van-button type=\"primary\" size=\"small\">Small</van-button>\n<van-button type=\"primary\" size=\"mini\">Mini</van-button>\n```\n\n----------------------------------------\n\nTITLE: Disabled Buttons with Vant\nDESCRIPTION: This HTML snippet showcases how to disable a Vant Button using the `disabled` attribute. A disabled button is visually distinct (typically grayed out) and prevents user interaction. This is useful for indicating when an action is not currently available.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-button disabled type=\"primary\">禁用状态</van-button>\n<van-button disabled type=\"success\">禁用状态</van-button>\n```\n\n----------------------------------------\n\nTITLE: Initializing PasswordInput and NumberKeyboard - JavaScript\nDESCRIPTION: This snippet demonstrates how to register the PasswordInput and NumberKeyboard components globally within a Vue application using `app.use`. This makes the components available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { PasswordInput, NumberKeyboard } from 'vant';\n\nconst app = createApp();\napp.use(PasswordInput);\napp.use(NumberKeyboard);\n```\n\n----------------------------------------\n\nTITLE: Radio Inside Cell - HTML\nDESCRIPTION: This HTML snippet shows how to embed Radio components inside Van Cell components. This allows creating a radio button list within a cell group. The `clickable` prop and `@click` event on `van-cell` allow selection by clicking the cell. Radio component is placed inside the `right-icon` slot.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-cell-group inset>\n    <van-cell title=\"Radio 1\" clickable @click=\"checked = '1'\">\n      <template #right-icon>\n        <van-radio name=\"1\" />\n      </template>\n    </van-cell>\n    <van-cell title=\"Radio 2\" clickable @click=\"checked = '2'\">\n      <template #right-icon>\n        <van-radio name=\"2\" />\n      </template>\n    </van-cell>\n  </van-cell-group>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Vant Slider with Step Value in Vue\nDESCRIPTION: Demonstrates how to specify the step size for the Vant Slider, allowing only values that are multiples of the specified step to be selected. Here the step is 10.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" :step=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Picker with Popup HTML\nDESCRIPTION: This snippet shows how to integrate the Vant Picker component inside a Vant Popup. A `van-field` triggers the popup, which contains the `van-picker`. The `showPicker` ref controls the popup's visibility, and the confirm event updates the field value with the selected option's text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"fieldValue\"\n  is-link\n  readonly\n  label=\"City\"\n  placeholder=\"Choose City\"\n  @click=\"showPicker = true\"\n/>\n<van-popup v-model:show=\"showPicker\" destroy-on-close round position=\"bottom\">\n  <van-picker\n    :model-value=\"pickerValue\"\n    title=\"Title\"\n    :columns=\"columns\"\n    @cancel=\"showPicker = false\"\n    @confirm=\"onConfirm\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Managing Switch State in Vue\nDESCRIPTION: This JavaScript code manages the state of a Vant Switch component using Vue's reactivity system. The `ref` function creates a reactive variable `checked` that is bound to the `v-model` of the `van-switch` component.  This ensures that any changes to the switch's state are reflected in the application's data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(false);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Card with Custom Content via Slots in HTML\nDESCRIPTION: Illustrates how to customize the content of the Vant Card component using slots.  The `tags` slot is used to display custom tags below the description.  The `footer` slot allows placing custom buttons at the bottom-right of the card.  Requires Vant Tag and Button components to render the custom content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-card\n  num=\"2\"\n  price=\"2.00\"\n  desc=\"描述信息\"\n  title=\"商品标题\"\n  thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg\"\n>\n  <template #tags>\n    <van-tag plain type=\"primary\">标签</van-tag>\n    <van-tag plain type=\"primary\">标签</van-tag>\n  </template>\n  <template #footer>\n    <van-button size=\"mini\">按钮</van-button>\n    <van-button size=\"mini\">按钮</van-button>\n  </template>\n</van-card>\n```\n\n----------------------------------------\n\nTITLE: Displaying Required Asterisk on field\nDESCRIPTION: This code demonstrates how to display a required asterisk on a `van-field` component using the `required` attribute.  This indicates that the field is mandatory. Note that this only controls the visual display; validation logic needs to be implemented separately. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"username\"\n    required\n    label=\"用户名\"\n    placeholder=\"请输入用户名\"\n  />\n  <van-field\n    v-model=\"phone\"\n    required\n    label=\"手机号\"\n    placeholder=\"请输入手机号\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Event Handlers for Search and Cancel\nDESCRIPTION: This JavaScript snippet defines the event handlers for the `search` and `cancel` events. It imports `ref` from 'vue' and `showToast` from 'vant'. The `onSearch` function displays the search value in a toast message, and the `onCancel` function displays a \"Cancel\" message. These handlers are then returned from the `setup` function to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref('');\n    const onSearch = (val) => showToast(val);\n    const onCancel = () => showToast('取消');\n    return {\n      value,\n      onSearch,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Cascader with Area Data - JavaScript\nDESCRIPTION: Configures the Cascader component to use the @vant/area-data package for populating the options. Uses the useCascaderAreaData hook to retrieve province/city/district data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useCascaderAreaData } from '@vant/area-data';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const fieldValue = ref('');\n    const cascaderValue = ref('');\n    const options = useCascaderAreaData();\n    const onFinish = ({ selectedOptions }) => {\n      show.value = false;\n      fieldValue.value = selectedOptions.map((option) => option.text).join('/');\n    };\n    return {\n      show,\n      options,\n      onFinish,\n      fieldValue,\n      cascaderValue,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Button Types in Vant\nDESCRIPTION: This HTML snippet showcases the usage of different button types provided by the Vant Button component: primary, success, default, danger, and warning. Each type applies a distinct color scheme to the button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\">Primary</van-button>\n<van-button type=\"success\">Success</van-button>\n<van-button type=\"default\">Default</van-button>\n<van-button type=\"danger\">Danger</van-button>\n<van-button type=\"warning\">Warning</van-button>\n```\n\n----------------------------------------\n\nTITLE: Vant NavBar with Right Button\nDESCRIPTION: Demonstrates the Vant NavBar component with both left (back) and right buttons. It includes the `left-text`, `right-text`, and `left-arrow` props, and handles `@click-left` and `@click-right` events. Requires a JavaScript setup function to define the click handlers.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar\n  title=\"Title\"\n  left-text=\"Back\"\n  right-text=\"Button\"\n  left-arrow\n  @click-left=\"onClickLeft\"\n  @click-right=\"onClickRight\"\n/>\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Formatter Function\nDESCRIPTION: Demonstrates using the `formatter` prop to customize the displayed date labels.  It initializes the date, sets the minimum and maximum selectable dates and configures the formatter function to display year and month text.  The component emits changes to `currentDate` based on user selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"选择年月\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n  :formatter=\"formatter\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Option Filtering - JavaScript\nDESCRIPTION: This JavaScript code snippet defines a `filter` function that is used to determine which minute options are valid in the TimePicker. Only minute values divisible by 10 are allowed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00']);\n    const filter = (type, options) => {\n      if (type === 'minute') {\n        return options.filter((option) => Number(option.value) % 10 === 0);\n      }\n      return options;\n    };\n\n    return {\n      filter,\n      currentTime,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive data for Vant Switch\nDESCRIPTION: This JavaScript snippet sets up a reactive variable using Vue's `ref` to control the state of the Vant Switch component. The `checked` ref is initialized to `true` and returned from the `setup` function, making it available in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(true);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating MyComponent into a Vant Form\nDESCRIPTION: This snippet shows how to integrate the custom Vue component (`MyComponent`) into a Vant Form using the `van-field` component. The `my-component` component is inserted into the `input` slot of the `van-field` component. This allows the custom component to provide its value to the form field. This will enable the form to read the custom value. Dependencies: Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-custom-field-value.en-US.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-form>\n  <van-field name=\"my-field\" label=\"Custom Field\">\n    <template #input>\n      <my-component />\n    </template>\n  </van-field>\n</van-form>\n```\n\n----------------------------------------\n\nTITLE: Loading Buttons with Vant\nDESCRIPTION: This HTML snippet demonstrates how to display a loading indicator within a Vant Button using the `loading` attribute.  It also shows how to customize the loading indicator's type (`loading-type`) and text (`loading-text`). When loading is enabled, the button content is usually hidden unless a `loading-text` is provided.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-button loading type=\"primary\" />\n<van-button loading type=\"primary\" loading-type=\"spinner\" />\n<van-button loading type=\"success\" loading-text=\"加载中...\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Stepper Value Initialization - JavaScript\nDESCRIPTION: Initializes the 'value' ref used in the basic Stepper example. The ref is initialized with a default value of 1.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(1);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant List Component\nDESCRIPTION: This code snippet shows a basic implementation of the Vant List component in Vue. It includes the HTML template with the `van-list` component bound to `loading` and `finished` states, and the corresponding JavaScript setup using `ref` to manage the component's reactive states and the `onLoad` event handler.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-list\n  v-model:loading=\"loading\"\n  :finished=\"finished\"\n  finished-text=\"Finished\"\n  @load=\"onLoad\"\n>\n  <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n</van-list>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const list = ref([]);\n    const loading = ref(false);\n    const finished = ref(false);\n\n    const onLoad = () => {\n      setTimeout(() => {\n        for (let i = 0; i < 10; i++) {\n          list.value.push(list.value.length + 1);\n        }\n        loading.value = false;\n\n        if (list.value.length >= 40) {\n          finished.value = true;\n        }\n      }, 1000);\n    };\n\n    return {\n      list,\n      onLoad,\n      loading,\n      finished,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: SwipeCell with Custom Content (HTML & CSS)\nDESCRIPTION: Shows how to embed a Vant Card component within a SwipeCell for custom content display. Includes CSS styles to adjust the card's appearance and ensure the delete button covers the full height of the right swipe area. Leverages Vant UI library components for styling and layout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe-cell>\n  <van-card\n    num=\"2\"\n    price=\"2.00\"\n    desc=\"描述信息\"\n    title=\"商品标题\"\n    class=\"goods-card\"\n    thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n  />\n  <template #right>\n    <van-button square text=\"删除\" type=\"danger\" class=\"delete-button\" />\n  </template>\n</van-swipe-cell>\n\n<style>\n  .goods-card {\n    margin: 0;\n    background-color: @white;\n  }\n\n  .delete-button {\n    height: 100%;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Custom Form Field Value with useCustomFieldValue - Vue\nDESCRIPTION: This code snippet demonstrates how to use the `useCustomFieldValue` hook in a custom Vue component. The hook is used to provide a custom value for a form field. The `useCustomFieldValue` function takes a callback that returns the desired field value. The value is then accessed when the form is submitted. This approach allows for integrating custom UI elements as form fields within a Vant Form component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-custom-field-value.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// MyComponent.vue\nimport { ref } from 'vue';\nimport { useCustomFieldValue } from '@vant/use';\n\nexport default {\n  setup() {\n    const myValue = ref(0);\n\n    // 此处传入的值会替代 Field 组件内部的 value\n    useCustomFieldValue(() => myValue.value);\n\n    return { myValue };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Empty Component with Image Types\nDESCRIPTION: Demonstrates the use of different built-in image types for the Empty component.  The `image` prop accepts values like 'error', 'network', and 'search' to display corresponding placeholder images.  The `description` prop is used to provide context.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- 通用错误 -->\n<van-empty image=\"error\" description=\"描述文字\" />\n<!-- 网络错误 -->\n<van-empty image=\"network\" description=\"描述文字\" />\n<!-- 搜索提示 -->\n<van-empty image=\"search\" description=\"描述文字\" />\n```\n\n----------------------------------------\n\nTITLE: Binding Selected Area Code with v-model\nDESCRIPTION: Demonstrates how to use `v-model` to bind the selected area code to a data property in a Vue component. This enables two-way data binding, allowing the component to update the selected area code and vice versa.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-area v-model=\"value\" title=\"标题\" :area-list=\"areaList\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-lazy Directive\nDESCRIPTION: This snippet demonstrates the basic usage of the `v-lazy` directive for lazy loading images. It iterates through an `imageList` array using `v-for` and applies the `v-lazy` directive to each `img` element, setting the image source to the corresponding element in the `imageList`. The `imageList` itself contains URLs of images to be lazy loaded.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img v-for=\"img in imageList\" v-lazy=\"img\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Setup for Swipe Change Event Handler\nDESCRIPTION: This JavaScript snippet showcases the Vue setup function for handling the `change` event of the Vant Swipe component. It imports `showToast` from the Vant library and defines an `onChange` function that displays a toast message with the current swipe index. This function is then returned from the `setup` function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onChange = (index) => showToast('Current Swipe index:' + index);\n    return { onChange };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Picker Two-way Binding - JavaScript\nDESCRIPTION: This JavaScript code provides the data for the two-way data binding example. It defines the columns array and the selectedValues ref, which is initialized with a default value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const columns = [\n      { text: '杭州', value: 'Hangzhou' },\n      { text: '宁波', value: 'Ningbo' },\n      { text: '温州', value: 'Wenzhou' },\n      { text: '绍兴', value: 'Shaoxing' },\n      { text: '湖州', value: 'Huzhou' },\n    ];\n    const selectedValues = ref(['Wenzhou']);\n\n    return {\n      columns,\n      selectedValues,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding CSS Variables via CSS\nDESCRIPTION: This CSS snippet demonstrates how to override Vant's CSS variables to customize the appearance of components. By targeting the `:root:root` pseudo-class, you can increase the specificity of the style and ensure that the variable is overridden.  This example changes the background color of the primary button to red.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* 添加这段样式后，Primary Button 会变成红色 */\n:root:root {\n  --van-button-primary-background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Time Range - HTML\nDESCRIPTION: This code snippet demonstrates how to restrict the selectable time range by setting the `min-hour`, `max-hour`, `min-minute`, and `max-minute` props. In this instance, the user can only select an hour between 10 and 20, and a minute between 30 and 40.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"选择时间\"\n  :min-hour=\"10\"\n  :max-hour=\"20\"\n  :min-minute=\"30\"\n  :max-minute=\"40\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection TreeSelect - HTML\nDESCRIPTION: Implements a TreeSelect component in multiple selection mode. `v-model:active-id` is bound to the `activeIds` array, enabling the selection of multiple items in the right panel.  `v-model:main-active-index` is bound to the `activeIndex` and `:items` is bound to `items` data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:active-id=\"activeIds\"\n  v-model:main-active-index=\"activeIndex\"\n  :items=\"items\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic ActionSheet Usage - HTML\nDESCRIPTION: This code snippet shows the basic usage of the Vant ActionSheet component in an HTML template. It includes a `van-cell` to trigger the action sheet and the `van-action-sheet` component itself, bound to a `show` ref and configured with actions.  Clicking on the `van-cell` will open the ActionSheet.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell is-link title=\"Basic Usage\" @click=\"show = true\" />\n<van-action-sheet v-model:show=\"show\" :actions=\"actions\" @select=\"onSelect\" />\n```\n\n----------------------------------------\n\nTITLE: Lazyload Component Usage - HTML\nDESCRIPTION: This snippet demonstrates how to use a custom lazy-component to wrap content that should be lazily loaded. It leverages the global Lazyload configuration to dynamically render the content when in view.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<lazy-component>\n  <img v-for=\"img in imageList\" v-lazy=\"img\" />\n</lazy-component>\n```\n\n----------------------------------------\n\nTITLE: Basic Cascader Template Usage\nDESCRIPTION: This HTML snippet demonstrates how to integrate the `van-cascader` component within a `van-popup`.  It uses `v-model` to bind to `fieldValue` and `cascaderValue` which are managed by the javascript section, and defines the `options` for populating the cascader. Event handlers such as `@click`, `@close`, and `@finish` control the interaction with the `van-cascader` and `van-popup`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"fieldValue\"\n  is-link\n  readonly\n  label=\"Area\"\n  placeholder=\"Select Area\"\n  @click=\"show = true\"\n/>\n<van-popup v-model=\"show\" round position=\"bottom\">\n  <van-cascader\n    v-model=\"cascaderValue\"\n    title=\"Select Area\"\n    :options=\"options\"\n    @close=\"show = false\"\n    @finish=\"onFinish\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Sticky with Offset Top - HTML\nDESCRIPTION: Shows how to use the `offset-top` prop to specify a distance from the top of the screen before the component becomes sticky.  The `offset-top` is set to 50, meaning the button will stick to the top only when it's 50 pixels from the top of the viewport.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-sticky :offset-top=\"50\">\n  <van-button type=\"primary\">Offset Top</van-button>\n</van-sticky>\n```\n\n----------------------------------------\n\nTITLE: Using .number modifier with v-model - HTML\nDESCRIPTION: This HTML snippet demonstrates the usage of the `.number` modifier with `v-model` on a Vant Field component.  This modifier ensures that the value bound to `v-model` is always converted to a number, which can be useful when you expect numeric input but the Field component internally formats the value as a string. It requires Vue and Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<van-field v-model.number=\"value\" type=\"tel\" />\n```\n\n----------------------------------------\n\nTITLE: NavBar Back Navigation Logic\nDESCRIPTION: Defines the `onClickLeft` method to handle back navigation using `history.back()`. This snippet is a Vue setup function that returns the method to be bound to the `click-left` event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const onClickLeft = () => history.back();\n    return {\n      onClickLeft,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Grid Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Grid component with four GridItem components. Each GridItem displays an icon and text. This snippet utilizes the `van-grid` and `van-grid-item` components, assuming they are already registered in the Vue application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-grid>\n  <van-grid-item icon=\"photo-o\" text=\"Text\" />\n  <van-grid-item icon=\"photo-o\" text=\"Text\" />\n  <van-grid-item icon=\"photo-o\" text=\"Text\" />\n  <van-grid-item icon=\"photo-o\" text=\"Text\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Custom Field Names - JavaScript\nDESCRIPTION: Sets up the custom field names and options for the Cascader component. The fieldNames object maps the text, value, and children properties to name, code, and items, respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const code = ref('');\n    const fieldNames = {\n      text: 'name',\n      value: 'code',\n      children: 'items',\n    };\n    const options = [\n      {\n        name: '浙江省',\n        code: '330000',\n        items: [{ name: '杭州市', code: '330100' }],\n      },\n      {\n        name: '江苏省',\n        code: '320000',\n        items: [{ name: '南京市', code: '320100' }],\n      },\n    ];\n\n    return {\n      code,\n      options,\n      fieldNames,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Styling for CountDown Slots in Vue Template\nDESCRIPTION: Demonstrates how to customize the content and styling of the `van-count-down` component using slots.  This example uses the default slot to display the hours, minutes, and seconds with custom styling. Requires CSS to define the styles for the colon and block elements.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down :time=\"time\">\n  <template #default=\"timeData\">\n    <span class=\"block\">{{ timeData.hours }}</span>\n    <span class=\"colon\">:</span>\n    <span class=\"block\">{{ timeData.minutes }}</span>\n    <span class=\"colon\">:</span>\n    <span class=\"block\">{{ timeData.seconds }}</span>\n  </template>\n</van-count-down>\n\n<style>\n  .colon {\n    display: inline-block;\n    margin: 0 4px;\n    color: #1989fa;\n  }\n  .block {\n    display: inline-block;\n    width: 22px;\n    color: #fff;\n    font-size: 12px;\n    text-align: center;\n    background-color: #1989fa;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: File Preview with v-model - Vue\nDESCRIPTION: Shows how to bind a list of uploaded files to the Uploader component using v-model for file preview. The fileList ref contains an array of file objects, each with a URL to the preview image. The 'multiple' prop allows for multiple file selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" multiple />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant List Component in Vue\nDESCRIPTION: Registers the Vant List component globally in a Vue application. It imports the necessary modules from 'vue' and 'vant' and uses the `app.use()` method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { List } from 'vant';\n\nconst app = createApp();\napp.use(List);\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Dates with Calendar - HTML\nDESCRIPTION: Demonstrates selecting multiple dates using the Vant Calendar component. Setting `type` to `multiple` enables multi-date selection. The selected dates are returned as an array in the `confirm` event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"选择多个日期\" :value=\"text\" @click=\"show = true\" />\n<van-calendar v-model:show=\"show\" type=\"multiple\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Cancel Button - HTML\nDESCRIPTION: Renders an ActionSheet with a cancel button. It includes properties to set the cancel button text (`cancel-text`), enable closing on action click (`close-on-click-action`), and handle the cancel event (`@cancel`).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet\n  v-model:show=\"show\"\n  :actions=\"actions\"\n  cancel-text=\"取消\"\n  close-on-click-action\n  @cancel=\"onCancel\"\n/>\n```\n\n----------------------------------------\n\nTITLE: ContactList Example Setup - Vue\nDESCRIPTION: This JavaScript snippet demonstrates the setup for using the `van-contact-list` component in a Vue 3 application. It defines reactive variables using `ref` for `chosenContactId` and the `list` of contacts. It also defines handler functions `onAdd`, `onEdit`, and `onSelect` to handle interactions with the contact list, such as adding, editing, and selecting contacts, using `showToast` from Vant to display messages.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const chosenContactId = ref('1');\n    const list = ref([\n      {\n        id: '1',\n        name: '张三',\n        tel: '13000000000',\n        isDefault: true,\n      },\n      {\n        id: '2',\n        name: '李四',\n        tel: '1310000000',\n      },\n    ]);\n\n    const onAdd = () => showToast('新增');\n    const onEdit = (contact) => showToast('编辑' + contact.id);\n    const onSelect = (contact) => showToast('选择' + contact.id);\n\n    return {\n      list,\n      onAdd,\n      onEdit,\n      onSelect,\n      chosenContactId,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Setup - JavaScript\nDESCRIPTION: Sets up the basic state and functions needed for the Popover component in a Vue setup function.  It defines a reactive `showPopover` ref to control the popover's visibility and an `actions` array to populate the Popover.  It also includes an `onSelect` function that displays a toast message when an action is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: 'Option 1' },\n      { text: 'Option 2' },\n      { text: 'Option 3' },\n    ];\n    const onSelect = (action) => showToast(action.text);\n\n    return {\n      actions,\n      onSelect,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Uploader Component - JavaScript\nDESCRIPTION: Registers the Uploader component globally in a Vue application.  It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and then uses the `app.use` method to register the Uploader component.  This enables the Uploader component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Uploader } from 'vant';\n\nconst app = createApp();\napp.use(Uploader);\n```\n\n----------------------------------------\n\nTITLE: Using ImagePreview Component - JavaScript\nDESCRIPTION: This snippet provides the JavaScript code for the Vue component that uses the ImagePreview component. It defines reactive variables for `show`, `index`, and `images`, and a method `onChange` to update the index. These variables are used to bind to the properties of the ImagePreview component in the template. It uses `vue` library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const index = ref(0);\n    const images = [\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n    ];\n    const onChange = (newIndex) => {\n      index.value = newIndex;\n    };\n\n    return {\n      show,\n      index,\n      images,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining reactive value in Vue setup\nDESCRIPTION: This code snippet shows the Vue setup function which defines a reactive `value` variable using `ref` from Vue. The `value` variable is initialized as an empty string and is returned for use in the template. This allows the Field to be dynamically updated. Required dependency: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('');\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Colors of Vant Switch\nDESCRIPTION: This code demonstrates how to customize the colors of the Vant Switch component using the `active-color` and `inactive-color` attributes. `active-color` sets the background color when the switch is on, and `inactive-color` sets the background color when it's off.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\" active-color=\"#ee0a24\" inactive-color=\"#dcdee0\" />\n```\n\n----------------------------------------\n\nTITLE: Basic ActionSheet Usage - Vue\nDESCRIPTION: Defines the reactive properties and methods for the basic ActionSheet example. It uses the `ref` function from Vue to create reactive variables for visibility (`show`) and the actions array (`actions`).  It includes an `onSelect` method that handles action selection and displays a toast message.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: '选项一' },\n      { name: '选项二' },\n      { name: '选项三' },\n    ];\n    const onSelect = (item) => {\n      // 默认情况下点击选项时不会自动收起\n      // 可以通过 close-on-click-action 属性开启自动收起\n      show.value = false;\n      showToast(item.name);\n    };\n\n    return {\n      show,\n      actions,\n      onSelect,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Cell Navigation with URL and Vue Router - HTML\nDESCRIPTION: This snippet demonstrates how to use the `url` and `to` props on the `van-cell` component to navigate to different pages. The `url` prop is used for external links, while the `to` prop is used for internal Vue Router links. The `is-link` prop must be present to enable the link behavior.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"URL\" is-link url=\"https://github.com\" />\n  <van-cell title=\"Vue Router\" is-link to=\"index\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Radio Component into Form\nDESCRIPTION: This HTML snippet demonstrates how to include Vant Radio and RadioGroup components in a Vant Form. The `van-field` is used to contain the radio group within the form layout. The `#input` slot provides the flexibility to add custom content, which in this case is the `van-radio-group` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"radio\" label=\"单选框\">\n  <template #input>\n    <van-radio-group v-model=\"checked\" direction=\"horizontal\">\n      <van-radio name=\"1\">单选框 1</van-radio>\n      <van-radio name=\"2\">单选框 2</van-radio>\n    </van-radio-group>\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Anchors with Vue\nDESCRIPTION: Defines the Vue component options to manage the anchors and height of the FloatingPanel.  It calculates anchor points based on the window height and provides reactive variables for the anchors and current height. Requires Vue's `ref` function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const anchors = [\n      100,\n      Math.round(0.4 * window.innerHeight),\n      Math.round(0.7 * window.innerHeight),\n    ];\n    const height = ref(anchors[0]);\n\n    return { anchors, height };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic SwipeCell Usage in HTML\nDESCRIPTION: Demonstrates the basic usage of the SwipeCell component with left and right slots containing buttons. The van-cell component displays the main content, and the van-button components provide interactive options when the cell is swiped. Uses Vant UI library components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe-cell>\n  <template #left>\n    <van-button square type=\"primary\" text=\"选择\" />\n  </template>\n  <van-cell :border=\"false\" title=\"单元格\" value=\"内容\" />\n  <template #right>\n    <van-button square type=\"danger\" text=\"删除\" />\n    <van-button square type=\"primary\" text=\"收藏\" />\n  </template>\n</van-swipe-cell>\n```\n\n----------------------------------------\n\nTITLE: Basic Uploader Usage - HTML & JavaScript\nDESCRIPTION: Demonstrates basic usage of the Uploader component.  It includes the HTML code to render the Uploader and the JavaScript code that defines the `afterRead` function which logs the selected file to the console. The `afterRead` function serves as a hook that executes after a file is read.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader :after-read=\"afterRead\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const afterRead = (file) => {\n      console.log(file);\n    };\n\n    return {\n      afterRead,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Popover Component - Vue\nDESCRIPTION: Demonstrates how to globally register the Popover component in a Vue application using createApp.  This makes the component available for use in your templates. It imports necessary modules from 'vue' and 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Popover } from 'vant';\n\nconst app = createApp();\napp.use(Popover);\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Option States - HTML\nDESCRIPTION: Renders an ActionSheet with options in different states, specifically loading, disabled, and colored. It uses the `v-model:show` and `:actions` properties to bind the component's visibility and options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet\n  v-model:show=\"show\"\n  :actions=\"actions\"\n  cancel-text=\"取消\"\n  close-on-click-action\n/>\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Controlling Vant Switch with modelValue and update event\nDESCRIPTION: This code demonstrates how to control the Vant Switch asynchronously using the `modelValue` property and the `update:model-value` event. This approach allows for custom logic to be executed before updating the switch's state, such as displaying a confirmation dialog.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-switch :model-value=\"checked\" @update:model-value=\"onUpdateValue\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Vant Buttons\nDESCRIPTION: This HTML snippet shows how to disable buttons using the `disabled` prop. Disabled buttons are visually distinct and prevent user interaction.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-button disabled type=\"primary\">Disabled</van-button>\n<van-button disabled type=\"success\">Disabled</van-button>\n```\n\n----------------------------------------\n\nTITLE: Using Vant Icon with Name Property\nDESCRIPTION: Displays a Vant Icon using the `name` property to specify the icon from the built-in icon library. No dependencies are explicitly required beyond the Vant library itself.  The `name` property corresponds to the name of the desired icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"chat-o\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vant via Yarn, Pnpm, or Bun\nDESCRIPTION: These commands illustrate installing Vant using Yarn, Pnpm, or Bun package managers. `yarn add vant`, `pnpm add vant`, and `bun add vant` install the latest Vant version. The corresponding package manager must be installed beforehand.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# with yarn\nyarn add vant\n\n# with pnpm\npnpm add vant\n\n# with Bun\nbun add vant\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Component - HTML\nDESCRIPTION: This snippet shows how to integrate the Dialog component directly into a Vue template. It uses the `van-dialog` tag and binds the `show` property to a reactive variable using `v-model:show`. The title and a cancel button are also configured. A slot is used to add an image to the content of the dialog.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-dialog v-model:show=\"show\" title=\"Title\" show-cancel-button>\n  <img src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-3.jpeg\" />\n</van-dialog>\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection TreeSelect Data - JavaScript\nDESCRIPTION: Defines the data and logic for a multiple selection TreeSelect component. It utilizes Vue's `ref` to manage reactive variables for `activeIds`, `activeIndex`, and `items`. The `activeIds` array defaults to containing the IDs 1 and 2, allowing for pre-selected options. The tree structure, `items`, is similar to the single selection example, with `text` and `children` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeIds = ref([1, 2]);\n    const activeIndex = ref(0);\n    const items = [\n      {\n        text: '浙江',\n        children: [\n          { text: '杭州', id: 1 },\n          { text: '温州', id: 2 },\n          { text: '宁波', id: 3, disabled: true },\n        ],\n      },\n      {\n        text: '江苏',\n        children: [\n          { text: '南京', id: 4 },\n          { text: '无锡', id: 5 },\n          { text: '徐州', id: 6 },\n        ],\n      },\n      { text: '福建', disabled: true },\n    ];\n\n    return {\n      items,\n      activeIds,\n      activeIndex,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Control - HTML\nDESCRIPTION: Illustrates how to manually control the RollingText component using the start and reset methods.  The auto-start prop is set to false to prevent the animation from starting automatically. Grid items are used to trigger the start and reset functions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text\n  ref=\"rollingTextRef\"\n  :start-num=\"0\"\n  :target-num=\"54321\"\n  :auto-start=\"false\"\n/>\n<van-grid clickable :column-num=\"3\">\n  <van-grid-item icon=\"play-circle-o\" :text=\"start\" @click=\"start\" />\n  <van-grid-item icon=\"replay\" :text=\"reset\" @click=\"reset\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode Body Styling - CSS\nDESCRIPTION: This CSS code snippet shows how to set the background color and text color when dark mode is enabled using the ConfigProvider. The `.van-theme-dark` class is applied to the `body` element when the theme is set to dark.  This snippet ensures that page content is readable in dark mode.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.van-theme-dark body {\n  color: #f5f5f5;\n  background-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Checkbox State - Vue\nDESCRIPTION: This code snippet provides the setup for the indeterminate checkbox example.  It uses methods to change the state when the checkbox or checkbox group values are changed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const list = ['a', 'b', 'c', 'd']\n\n    const isCheckAll = ref(false);\n    const checkedResult = ref(['a', 'b', 'd']);\n    const isIndeterminate = ref(true);\n\n    const checkAllChange = (val: boolean) => {\n      checkedResult.value = val ? list : []\n      isIndeterminate.value = false\n    }\n\n    const checkedResultChange = (value: string[]) => {\n      const checkedCount = value.length\n      isCheckAll.value = checkedCount === list.length\n      isIndeterminate.value = checkedCount > 0 && checkedCount < list.length\n    }\n\n    return {\n      list,\n      isCheckAll,\n      checkedResult,\n      checkAllChange,\n      isIndeterminate,\n      checkedResultChange\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Calendar Data with Asynchronous Data - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use asynchronous data within the formatter function of the Vant Calendar component. It uses a computed property to dynamically create the formatter function, updating the calendar data when the asynchronous data is available. A timeout is used to simulate fetching data asynchronously.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst asyncData = ref();\n\nconst formatter = computed(() => {\n  if (!asyncData.value) {\n    return (day) => day;\n  }\n  return (day) => {\n    day.bottomInfo = asyncData.value;\n    return day;\n  };\n});\n\nsetTimeout(() => {\n  asyncData.value = '后端文案';\n}, 3000);\n```\n\n----------------------------------------\n\nTITLE: Basic Collapse Usage - HTML\nDESCRIPTION: This snippet shows a basic implementation of the `van-collapse` and `van-collapse-item` components to create a collapsible panel. The `v-model` directive is used to bind the `activeNames` array, controlling which panels are initially expanded. Each `van-collapse-item` represents a single collapsible panel with a title and content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\">\n  <van-collapse-item title=\"标题1\" name=\"1\">\n    代码是写出来给人看的，附带能在机器上运行。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题2\" name=\"2\">\n    技术无非就是那些开发它的人的共同灵魂。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题3\" name=\"3\">\n    在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Popup Teleport - HTML\nDESCRIPTION: Demonstrates how to use the `teleport` prop to specify where the popup is mounted in the DOM.  It shows teleporting to both the `body` and an element with the ID `#app`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- teleport to body -->\n<van-popup v-model:show=\"show\" teleport=\"body\" />\n\n<!-- teleport to #app -->\n<van-popup v-model:show=\"show\" teleport=\"#app\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing PullRefresh Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to globally register the PullRefresh component in a Vue application using createApp and app.use.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { PullRefresh } from 'vant';\n\nconst app = createApp();\napp.use(PullRefresh);\n```\n\n----------------------------------------\n\nTITLE: Basic TimePicker Usage - HTML\nDESCRIPTION: This code snippet demonstrates the basic usage of the TimePicker component within a Vue template, using `v-model` to bind the selected time to the `currentTime` data property. The title prop is set for the TimePicker.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker v-model=\"currentTime\" title=\"选择时间\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-Line ShareSheet Usage - HTML\nDESCRIPTION: This HTML snippet demonstrates the usage of the `van-share-sheet` component with multi-line options.  It binds the component to a `showShare` variable and configures it with multi-dimensional options.  Requires Vue.js and Vant CSS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-share-sheet v-model:show=\"showShare\" title=\"Share\" :options=\"options\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing PasswordInput and NumberKeyboard - JavaScript\nDESCRIPTION: Registers the PasswordInput and NumberKeyboard components globally within a Vue application. It imports necessary modules from Vant and uses the createApp API to register them.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { PasswordInput, NumberKeyboard } from 'vant';\n\nconst app = createApp();\napp.use(PasswordInput);\napp.use(NumberKeyboard);\n```\n\n----------------------------------------\n\nTITLE: Using Vant List Instance with TypeScript\nDESCRIPTION: Demonstrates how to obtain a reference to a Vant List instance and call its methods using TypeScript.  This is useful for programmatically interacting with the List component, such as triggering a load event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { ListInstance } from 'vant';\n\nconst listRef = ref<ListInstance>();\n\nlistRef.value?.check();\n```\n\n----------------------------------------\n\nTITLE: Advanced SubmitBar Usage with Slots - HTML\nDESCRIPTION: Shows how to use slots to add custom content to the SubmitBar component.  It uses the default slot for a checkbox and the tip slot for a link.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar :price=\"3050\" button-text=\"Submit\" @submit=\"onSubmit\">\n  <van-checkbox v-model=\"checked\">Check</van-checkbox>\n  <template #tip> Some tips, <span @click=\"onClickLink\">Link</span> </template>\n</van-submit-bar>\n```\n\n----------------------------------------\n\nTITLE: Vant Picker Loading State - JavaScript\nDESCRIPTION: This JavaScript code simulates an asynchronous data fetch for the Vant Picker. It uses the loading ref to control the visibility of the loading indicator and updates the columns data after a timeout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const columns = ref([]);\n    const loading = ref(true);\n\n    setTimeout(() => {\n      columns.value = [{ text: '选项', value: 'option' }];\n      loading.value = false;\n    }, 1000);\n\n    return { columns, loading };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Toast (JavaScript)\nDESCRIPTION: This code snippet demonstrates the Vue component setup required when using the Toast component directly. It uses the `ref` function from Vue to create a reactive `show` variable, which controls the visibility of the Toast component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return { show };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: After Read Callback - Vue\nDESCRIPTION: Defines the afterRead callback function for the Uploader component. This function is triggered after a file is read and logs the file object to the console, allowing for custom file upload logic.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const afterRead = (file) => {\n      // 此时可以自行将文件上传至服务器\n      console.log(file);\n    };\n\n    return {\n      afterRead,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Image with Slot - HTML\nDESCRIPTION: This snippet demonstrates how to customize the content displayed within the ImagePreview using the `image` slot. In this example, a video element is rendered instead of an image. The `close-on-click-image` prop is set to `false` to prevent the preview from closing when the video is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-image-preview\n  v-model:show=\"show\"\n  :images=\"images\"\n  :close-on-click-image=\"false\"\n>\n  <template #image=\"{ src }\">\n    <video style=\"width: 100%;\" controls>\n      <source :src=\"src\" />\n    </video>\n  </template>\n</van-image-preview>\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Stepper Component into Form\nDESCRIPTION: This HTML code demonstrates embedding a Vant Stepper component within a Vant Form. The `van-field` serves as the container for the stepper, and the `#input` slot is used to inject the `van-stepper` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"stepper\" label=\"步进器\">\n  <template #input>\n    <van-stepper v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Using Slots in Cells - HTML\nDESCRIPTION: This snippet demonstrates how to use slots to customize the content of cells. It shows how to use the `title` and `right-icon` slots to add custom titles and icons. Slots provide a flexible way to inject custom HTML and components into cells.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-cell value=\"Content\" is-link>\n  <!-- Use the title slot to customize the title -->\n  <template #title>\n    <span class=\"custom-title\">Title</span>\n    <van-tag type=\"primary\">Tag</van-tag>\n  </template>\n</van-cell>\n\n<van-cell title=\"Title\" icon=\"shop-o\">\n  <!-- Use the right-icon slot to customize the right icon -->\n  <template #right-icon>\n    <van-icon name=\"search\" class=\"search-icon\" />\n  </template>\n</van-cell>\n\n<style>\n  .custom-title {\n    margin-right: 4px;\n    vertical-align: middle;\n  }\n\n  .search-icon {\n    font-size: 16px;\n    line-height: inherit;\n  }\n</style>\n```\n\nLANGUAGE: css\nCODE:\n```\n.custom-title {\n    margin-right: 4px;\n    vertical-align: middle;\n  }\n\n  .search-icon {\n    font-size: 16px;\n    line-height: inherit;\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom Action Button Handler - JavaScript\nDESCRIPTION: Provides the JavaScript code for handling the custom action button click in the Vant Search component.  It imports `ref` from 'vue' and `showToast` from 'vant'. The `onClickButton` method displays a toast with the current search value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref('');\n    const onSearch = (val) => showToast(val);\n    const onClickButton = () => showToast(value.value);\n    return {\n      value,\n      onSearch,\n      onClickButton,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Date Range - HTML\nDESCRIPTION: Defines a custom date range for the Vant Calendar component using the `min-date` and `max-date` props. This restricts date selection to a specific period, useful for scenarios like booking systems or event registration. Relies on `minDate` and `maxDate` being defined in the component's data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" :min-date=\"minDate\" :max-date=\"maxDate\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Default NumberKeyboard\nDESCRIPTION: Shows a basic number keyboard with input and delete functionality. The keyboard's visibility is controlled by a `show` ref, and input/delete events trigger toast notifications.\n\nDependencies: Requires Vue 3, Vant, and the `showToast` function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell @touchstart.stop=\"show = true\">Show Keyboard</van-cell>\n<van-number-keyboard\n  :show=\"show\"\n  @blur=\"show = false\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading in Swipe - HTML\nDESCRIPTION: Implements lazy loading for images within the Vant Swipe component. The `lazy-render` prop enables lazy loading, rendering only the current and next slides.  The `v-for` directive iterates over an array of image URLs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe :autoplay=\"3000\" lazy-render>\n  <van-swipe-item v-for=\"image in images\" :key=\"image\">\n    <img :src=\"image\" />\n  </van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Using Vant Component in Template\nDESCRIPTION: This HTML snippet demonstrates how to use a Vant button component within a Vue template after configuring automatic component importing. The `van-button` component is used directly in the template without explicit import statements, as `unplugin-vue-components` automatically handles the importing.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <van-button type=\"primary\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Picker Usage HTML\nDESCRIPTION: This snippet demonstrates the HTML markup for a basic Vant Picker component. It includes the `van-picker` element with attributes for title, columns, and event handlers for confirm, cancel, and change events.  The columns data is bound using the `:columns` directive.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-picker\n  title=\"Title\"\n  :columns=\"columns\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n  @change=\"onChange\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Select All / Toggle - Vue\nDESCRIPTION: This code snippet demonstrates how to implement select all and toggle all functionality for a CheckboxGroup using the `toggleAll` method. It uses refs to access the CheckboxGroup instance and programmatically control the selection state of all checkboxes within the group.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox-group v-model=\"checked\" ref=\"checkboxGroup\">\n  <van-checkbox name=\"a\">复选框 a</van-checkbox>\n  <van-checkbox name=\"b\">复选框 b</van-checkbox>\n  <van-checkbox name=\"c\">复选框 c</van-checkbox>\n</van-checkbox-group>\n\n<van-button type=\"primary\" @click=\"checkAll\">全选</van-button>\n<van-button type=\"primary\" @click=\"toggleAll\">反选</van-button>\n```\n\n----------------------------------------\n\nTITLE: Defining Field with different types\nDESCRIPTION: This example demonstrates different input types for the `van-field` component.  It includes text, tel, digit, number, and password types. Each field is bound to a separate reactive variable defined in the Vue setup. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <!-- 输入任意文本 -->\n  <van-field v-model=\"text\" label=\"文本\" />\n  <!-- 输入手机号，调起手机号键盘 -->\n  <van-field v-model=\"tel\" type=\"tel\" label=\"手机号\" />\n  <!-- 允许输入正整数，调起纯数字键盘 -->\n  <van-field v-model=\"digit\" type=\"digit\" label=\"整数\" />\n  <!-- 允许输入数字，调起带符号的纯数字键盘 -->\n  <van-field v-model=\"number\" type=\"number\" label=\"数字\" />\n  <!-- 输入密码 -->\n  <van-field v-model=\"password\" type=\"password\" label=\"密码\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Slider Component into Form\nDESCRIPTION: This HTML code demonstrates how to integrate the Vant Slider component into a Vant Form. The `van-field` component provides the label and structure, and the `#input` slot is used to inject the `van-slider` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"slider\" label=\"滑块\">\n  <template #input>\n    <van-slider v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Preview Cover Customization - HTML & CSS\nDESCRIPTION: Demonstrates how to add a custom preview cover to the uploaded image using the `preview-cover` slot.  The slot provides access to the `file` object, allowing you to display file information like the name. CSS is used to style the cover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\">\n  <template #preview-cover=\"{ file }\">\n    <div class=\"preview-cover van-ellipsis\">{{ file.name }}</div>\n  </template>\n</van-uploader>\n\n<style>\n  .preview-cover {\n    position: absolute;\n    bottom: 0;\n    box-sizing: border-box;\n    width: 100%;\n    padding: 4px;\n    color: #fff;\n    font-size: 12px;\n    text-align: center;\n    background: rgba(0, 0, 0, 0.3);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using useWindowSize Hook - Vue.js\nDESCRIPTION: Demonstrates the basic usage of the useWindowSize hook in a Vue.js component. It imports the hook, retrieves the reactive width and height values, and sets up a watcher to react to window resize events. The component logs the initial width and height, and logs a message when the window is resized. The example relies on Vue's 'watch' and '@vant/use' library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-window-size.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { watch } from 'vue';\nimport { useWindowSize } from '@vant/use';\n\nexport default {\n  setup() {\n    const { width, height } = useWindowSize();\n\n    console.log(width.value); // -> width of browser window\n    console.log(height.value); // -> height of browser window\n\n    watch([width, height], () => {\n      console.log('window resized');\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Image Fit Property in HTML\nDESCRIPTION: Illustrates how to use the fit property to control how the image is resized to fit its container. The fit property is set to 'contain', which preserves the aspect ratio of the image and ensures that the entire image is visible within the container. The width and height are set to 10rem.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"10rem\"\n  height=\"10rem\"\n  fit=\"contain\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Stepper with Range - HTML\nDESCRIPTION: An example demonstrating how to set the minimum and maximum values of the stepper using the `min` and `max` props. The stepper value will be constrained within this range.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" min=\"5\" max=\"8\" />\n```\n\n----------------------------------------\n\nTITLE: Popover with Icons - HTML\nDESCRIPTION: Implements a Popover component that displays icons in the actions using the `icon` property of the action objects.  It binds the `showPopover` ref to the `v-model:show` prop and passes an array of `actions` to the component. The `reference` slot renders the button that triggers the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" :actions=\"actions\">\n  <template #reference>\n    <van-button type=\"primary\">Show Icon</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Vertical Vant Steps Component\nDESCRIPTION: Demonstrates how to create a vertical steps indicator using the direction prop.  Each step includes a title and description for a more detailed display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-steps direction=\"vertical\" :active=\"0\">\n  <van-step>\n    <h3>【City】Status1</h3>\n    <p>2016-07-12 12:40</p>\n  </van-step>\n  <van-step>\n    <h3>【City】Status2</h3>\n    <p>2016-07-11 10:00</p>\n  </van-step>\n  <van-step>\n    <h3>【City】Status3</h3>\n    <p>2016-07-10 09:30</p>\n  </van-step>\n</van-steps>\n```\n\n----------------------------------------\n\nTITLE: Customizing Gap Between Watermark Items\nDESCRIPTION: Customizes the horizontal and vertical spacing between watermark items using the `gap-x` and `gap-y` props. These props allow fine-grained control over the watermark's pattern and density. Requires an image to be specified via the `image` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  :gap-x=\"30\"\n  :gap-y=\"10\"\n  opacity=\"0.2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Background - HTML\nDESCRIPTION: Customizes the background color and shape of the Vant Search component. This example uses the `shape` and `background` props to modify the appearance of the search field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-search\n  v-model=\"value\"\n  shape=\"round\"\n  background=\"#4fc08d\"\n  placeholder=\"Placeholder\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Picker Custom Columns - JavaScript\nDESCRIPTION: This JavaScript code configures the columns data and defines the customFieldName object for the Vant Picker component. This allows the component to map the provided column data to its internal structure, using different field names than the defaults.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      {\n        cityName: '浙江',\n        cities: [\n          {\n            cityName: '杭州',\n            cities: [{ cityName: '西湖区' }, { cityName: '余杭区' }],\n          },\n          {\n            cityName: '温州',\n            cities: [{ cityName: '鹿城区' }, { cityName: '瓯海区' }],\n          },\n        ],\n      },\n      {\n        cityName: '福建',\n        cities: [\n          {\n            cityName: '福州',\n            cities: [{ cityName: '鼓楼区' }, { cityName: '台江区' }],\n          },\n          {\n            cityName: '厦门',\n            cities: [{ cityName: '思明区' }, { cityName: '海沧区' }],\n          },\n        ],\n      },\n    ];\n\n    const customFieldName = {\n      text: 'cityName',\n      value: 'cityName',\n      children: 'cities',\n    };\n\n    return {\n      columns,\n      customFieldName,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Usage - HTML\nDESCRIPTION: Implements a basic Popover component in a Vue template.  It binds the `showPopover` ref to the `v-model:show` prop and passes an array of `actions` to the component. The `reference` slot renders the button that triggers the Popover. An event handler `onSelect` is triggered when an option is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" :actions=\"actions\" @select=\"onSelect\">\n  <template #reference>\n    <van-button type=\"primary\">Light Theme</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Card Style Tabs - HTML\nDESCRIPTION: Applies a card style to the tabs using the `type=\"card\"` prop on the `van-tabs` component. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" type=\"card\">\n  <van-tab v-for=\"index in 3\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Sidebar usage in HTML\nDESCRIPTION: This snippet demonstrates the basic usage of the Vant Sidebar component in HTML. It uses the `van-sidebar` and `van-sidebar-item` components to create a simple sidebar with three items. The `v-model` directive is used to bind the active state of the sidebar to the `active` variable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\">\n  <van-sidebar-item title=\"Title\" />\n  <van-sidebar-item title=\"Title\" />\n  <van-sidebar-item title=\"Title\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Hint and Error Messages in PasswordInput - HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to display hint and error messages in the PasswordInput component using the `info` and `:error-info` props, respectively.  It also includes logic to update the error message based on the entered password value using `watch`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  info=\"Some tips\"\n  :error-info=\"errorInfo\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n<van-number-keyboard\n  v-model=\"value\"\n  :show=\"showKeyboard\"\n  @blur=\"showKeyboard = false\"\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watch } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('123');\n    const errorInfo = ref('');\n    const showKeyboard = ref(true);\n\n    watch(value, (newVal) => {\n      if (newVal.length === 6 && newVal !== '123456') {\n        errorInfo.value = 'Password Mistake';\n      } else {\n        errorInfo.value = '';\n      }\n    });\n\n    return {\n      value,\n      errorInfo,\n      showKeyboard,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: DatePicker Columns Type Setup\nDESCRIPTION: Sets up the component with the columns type array in a Vue 3 setup function.  It initializes a `currentDate` ref and the `columnsType` array, and defines the `minDate` and `maxDate` properties for the component. The component emits changes to `currentDate` based on user selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01']);\n    const columnsType = ['year', 'month'];\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Info and Error Messages - HTML\nDESCRIPTION: Shows how to display both informational and error messages below the PasswordInput. Uses the `info` and `error-info` props to display the respective messages.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  info=\"密码为 6 位数字\"\n  :error-info=\"errorInfo\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n<van-number-keyboard\n  v-model=\"value\"\n  :show=\"showKeyboard\"\n  @blur=\"showKeyboard = false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic ShareSheet Setup - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to set up the data and event handlers for the basic ShareSheet usage. It defines `showShare` as a reactive variable to control the visibility of the ShareSheet, `options` as an array of share options, and `onSelect` as a handler for when an option is selected. Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      { name: 'WeChat', icon: 'wechat' },\n      { name: 'Weibo', icon: 'weibo' },\n      { name: 'Link', icon: 'link' },\n      { name: 'Poster', icon: 'poster' },\n      { name: 'Qrcode', icon: 'qrcode' },\n    ];\n\n    const onSelect = (option) => {\n      showToast(option.name);\n      showShare.value = false;\n    };\n\n    return {\n      options,\n      onSelect,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Vant API with auto import\nDESCRIPTION: This HTML snippet demonstrates using Vant APIs, such as `showToast`, within a Vue component script after configuring automatic API importing with `unplugin-auto-import`.  The `showToast` function is used directly without an explicit import statement, because `unplugin-auto-import` automatically handles the import.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  showToast('No need to import showToast');\n</script>\n```\n\n----------------------------------------\n\nTITLE: PullRefresh with Success Text in Vue\nDESCRIPTION: This snippet demonstrates how to use the `success-text` prop to display a success message after a successful refresh. The `isLoading` ref is bound to the `v-model` directive to control the loading state, and the `@refresh` event is bound to the `onRefresh` method, which handles the refresh logic.  The `success-text` property is set to \"Refresh success\", which is displayed when the refresh operation is complete.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh\n  v-model=\"isLoading\"\n  success-text=\"Refresh success\"\n  @refresh=\"onRefresh\"\n>\n  <p>Refresh Count: {{ count }}</p>\n</van-pull-refresh>\n```\n\n----------------------------------------\n\nTITLE: Vant Tag Custom Colors\nDESCRIPTION: This snippet demonstrates how to customize the colors of a Vant Tag using the `color` and `text-color` attributes. The `color` attribute sets the background color, while the `text-color` attribute sets the text color.  The `plain` attribute can be combined with custom colors.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-tag color=\"#7232dd\">标签</van-tag>\n<van-tag color=\"#ffe1e1\" text-color=\"#ad0000\">标签</van-tag>\n<van-tag color=\"#7232dd\" plain>标签</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Calendar - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Calendar example. It defines reactive variables for the selected date (`result`) and the visibility of the calendar (`showCalendar`). The `onConfirm` function handles the selected date, updating the `result` and `showCalendar` variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const showCalendar = ref(false);\n    const onConfirm = (date) => {\n      result.value = `${date.getMonth() + 1}/${date.getDate()}`;\n      showCalendar.value = false;\n    };\n\n    return {\n      result,\n      onConfirm,\n      showCalendar,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant List Error Handling Logic in Vue\nDESCRIPTION: Implements the error handling logic for the Vant List component. It utilizes `ref` from Vue to manage the list data, loading state, and error state. A placeholder `fetchSomeThing` function simulates an asynchronous request which can cause the `error` state to be set to true.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const list = ref([]);\n    const error = ref(false);\n    const loading = ref(false);\n    const onLoad = () => {\n      fetchSomeThing().catch(() => {\n        loading.value = false;\n        error.value = true;\n      });\n    };\n\n    return {\n      list,\n      error,\n      onLoad,\n      loading,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Color Buttons with Vant\nDESCRIPTION: This HTML snippet demonstrates how to customize the color of Vant Buttons using the `color` attribute.  You can use a solid color, a plain color, or even a linear gradient for a more visually appealing effect. These color customizations allow for brand integration and visual consistency.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-button color=\"#7232dd\">单色按钮</van-button>\n<van-button color=\"#7232dd\" plain>单色按钮</van-button>\n<van-button color=\"linear-gradient(to right, #ff6034, #ee0a24)\">\n  渐变色按钮\n</van-button>\n```\n\n----------------------------------------\n\nTITLE: Using the Toast Component with a Slot - HTML/Vue\nDESCRIPTION: Demonstrates how to directly use the Toast component in a Vue template and customize its content using a slot.  This allows for embedding components or custom content inside the Toast. Requires the van-toast and van-image components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-toast v-model:show=\"show\" style=\"padding: 0\">\n  <template #message>\n    <van-image :src=\"image\" width=\"200\" height=\"140\" style=\"display: block\" />\n  </template>\n</van-toast>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return { show };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Color - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the color of the loading icon and text using the `color` and `text-color` attributes. The first example changes both the icon and text color using `color`, while the second example only changes the text color using `text-color`. The color is set to \"#0094ff\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- 可修改文案和加载图标的颜色 -->\n<van-loading color=\"#0094ff\" />\n\n<!-- 只修改文案颜色 -->\n<van-loading text-color=\"#0094ff\" />\n```\n\n----------------------------------------\n\nTITLE: AddressList Type Definition Import\nDESCRIPTION: This TypeScript code imports the type definitions for AddressListProps and AddressListAddress from the Vant library. This allows developers to use TypeScript to ensure type safety when working with the AddressList component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AddressListProps, AddressListAddress } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Custom NumberKeyboard with Right Sidebar\nDESCRIPTION: This snippet configures a number keyboard with a custom theme and a right sidebar, commonly used for inputting amounts. The `theme` prop is set to `custom`, and the `extra-key` prop is used to add an extra key ('.'). A \"完成\" close button is also defined.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-number-keyboard\n  :show=\"show\"\n  theme=\"custom\"\n  extra-key=\".\"\n  close-button-text=\"完成\"\n  @blur=\"show = false\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Content with Vue Template\nDESCRIPTION: This HTML snippet demonstrates customizing the content above the options using the `options-top` slot. The slot receives a `tabIndex` prop indicating the current level.  The CSS provides styling for the custom content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-cascader v-model=\"code\" title=\"Select Area\" :options=\"options\">\n  <template #options-top=\"{ tabIndex }\">\n    <div class=\"current-level\">Current level is {{ tabIndex + 1 }}</div>\n  </template>\n</van-cascader>\n\n<style>\n  .current-level {\n    font-size: 14px;\n    padding: 16px 16px 0;\n    color: var(--van-gray-6);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Popup Positioning - HTML\nDESCRIPTION: Illustrates how to position the Vant Popup using the `position` prop.  Available options are `top`, `bottom`, `left`, and `right`. Styles are applied to adjust width and height for different positions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 顶部弹出 -->\n<van-popup v-model:show=\"showTop\" position=\"top\" :style=\"{ height: '30%' }\" />\n\n<!-- 底部弹出 -->\n<van-popup\n  v-model:show=\"showBottom\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n\n<!-- 左侧弹出 -->\n<van-popup\n  v-model:show=\"showLeft\"\n  position=\"left\"\n  :style=\"{ width: '30%', height: '100%' }\"\n/>\n\n<!-- 右侧弹出 -->\n<van-popup\n  v-model:show=\"showRight\"\n  position=\"right\"\n  :style=\"{ width: '30%', height: '100%' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vertical Scrolling NoticeBar Styling\nDESCRIPTION: This CSS snippet styles the van-swipe component used within the vertical scrolling NoticeBar. It sets the height and line-height to ensure the content is displayed correctly.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.notice-swipe {\n    height: 40px;\n    line-height: 40px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Vant Pagination with Ellipses\nDESCRIPTION: This HTML snippet demonstrates how to configure the Vant Pagination component to display ellipses for page ranges outside the immediate vicinity of the current page.  `show-page-size` defines how many page numbers to display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination\n  v-model=\"currentPage\"\n  :total-items=\"125\"\n  :show-page-size=\"3\"\n  force-ellipses\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Rows in TextEllipsis - Vue HTML\nDESCRIPTION: Illustrates how to customize the number of visible rows in the TextEllipsis component. The `rows` prop is set to \"3\", causing the component to display a maximum of three lines before applying the ellipsis. The `expand-text` and `collapse-text` props are also defined for expand/collapse functionality.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis\n  rows=\"3\"\n  :content=\"text\"\n  expand-text=\"expand\"\n  collapse-text=\"collapse\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Value for v-model\nDESCRIPTION: Defines a reactive value using `ref` from Vue to store the selected area code for the Vant Area component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('330302');\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic SubmitBar Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the SubmitBar component in a Vue template. It binds the `price` prop to 3050, sets the `button-text` prop to 'Submit', and attaches the `onSubmit` method to the `@submit` event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar :price=\"3050\" button-text=\"Submit\" @submit=\"onSubmit\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Close - JavaScript\nDESCRIPTION: This snippet shows how to implement asynchronous close behavior using the `beforeClose` option. The `beforeClose` function is called before the dialog closes and can return a promise to delay the closing action. This allows performing tasks such as data validation or confirmation before the dialog is dismissed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showConfirmDialog } from 'vant';\n\nconst beforeClose = (action) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      // action !== 'confirm'  Interception cancellation operation\n      resolve(action === 'confirm');\n    }, 1000);\n  });\n\nshowConfirmDialog({\n  title: 'Title',\n  message:\n    'If the solution is ugly, then there must be a better solution, but it has not been discovered yet.',\n  beforeClose,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Image with Slot - JavaScript\nDESCRIPTION: This snippet provides the JavaScript code for the Vue component that uses the ImagePreview with image slot. It defines reactive variables for `show`, and `images` which are array of video URLs. The images can be video or other custom elements.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const images = [\n      'https://www.w3school.com.cn/i/movie.ogg',\n      'https://www.w3school.com.cn/i/movie.ogg',\n      'https://www.w3school.com.cn/i/movie.ogg',\n    ];\n    return {\n      show,\n      images,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Pre-upload Validation - Vue\nDESCRIPTION: Implements pre-upload validation using the beforeRead function. It checks if the file type is 'image/jpeg' and returns false if it is not, displaying a toast message.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    // 返回布尔值\n    const beforeRead = (file) => {\n      if (file.type !== 'image/jpeg') {\n        showToast('请上传 jpg 格式图片');\n        return false;\n      }\n      return true;\n    };\n\n    // 返回 Promise\n    const asyncBeforeRead = (file) =>\n      new Promise((resolve, reject) => {\n        if (file.type !== 'image/jpeg') {\n          showToast('请上传 jpg 格式图片');\n          reject();\n        } else {\n          const img = new File(['foo'], 'bar.jpg', {\n            type: 'image/jpeg',\n          });\n          resolve(img);\n        }\n      });\n\n    return {\n      beforeRead,\n      asyncBeforeRead,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Space Component Alignment Control\nDESCRIPTION: Illustrates how to use the `align` prop to control the alignment of elements within the Vant Space component. This example also includes a Vant Radio Group to dynamically change the alignment.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group\n  v-model=\"align\"\n  direction=\"horizontal\"\n  style=\"margin-bottom: 16px\"\n>\n  <van-radio name=\"start\">start</van-radio>\n  <van-radio name=\"center\">center</van-radio>\n  <van-radio name=\"end\">end</van-radio>\n  <van-radio name=\"baseline\">baseline</van-radio>\n</van-radio-group>\n\n<van-space :align=\"align\" style=\"padding: 16px; background: #f3f2f5\">\n  <van-button type=\"primary\">{{ align }}</van-button>\n  <div style=\"padding: 40px 20px; background: #fff\">Block</div>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Badges and Dots - HTML\nDESCRIPTION: Demonstrates how to add badges and dots to Tabbar items. The `dot` attribute displays a small red dot on the icon, while the `badge` attribute shows a number or text badge.  The `v-model` is used for tracking the active index.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item icon=\"home-o\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"search\" dot>标签</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\" badge=\"5\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\" badge=\"20\">标签</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Selections in Vue\nDESCRIPTION: This JavaScript code manages the data and logic for the Vant Calendar component. `result` stores the date display value. `showCalendar` controls the display of the popup, and `onConfirm` function handles what to do when the calendar date is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const result = ref('');\n    const showCalendar = ref(false);\n    const onConfirm = (date) => {\n      result.value = `${date.getMonth() + 1}/${date.getDate()}`;\n      showCalendar.value = false;\n    };\n\n    return {\n      result,\n      onConfirm,\n      showCalendar,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Preview File in Uploader - HTML & JavaScript\nDESCRIPTION: Shows how to display a list of files in the Uploader for preview.  It uses the `v-model` directive to bind the `fileList` array to the Uploader and sets the `multiple` attribute to allow multiple file selection. The `fileList` contains objects with the `url` property to display the preview.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" multiple />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      { url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg' },\n      { url: 'https://cloud-image', isImage: true },\n    ]);\n\n    return {\n      fileList,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant List Component with Basic Logic in Vue\nDESCRIPTION: Implements the logic for the basic usage example, handling the loading and finished states. It utilizes `ref` from Vue to manage the list data, loading state, and finished state.  A `setTimeout` simulates an async operation that appends data to the list.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const list = ref([]);\n    const loading = ref(false);\n    const finished = ref(false);\n\n    const onLoad = () => {\n      // 异步更新数据\n      // setTimeout 仅做示例，真实场景中一般为 ajax 请求\n      setTimeout(() => {\n        for (let i = 0; i < 10; i++) {\n          list.value.push(list.value.length + 1);\n        }\n\n        // 加载状态结束\n        loading.value = false;\n\n        // 数据全部加载完成\n        if (list.value.length >= 40) {\n          finished.value = true;\n        }\n      }, 1000);\n    };\n\n    return {\n      list,\n      onLoad,\n      loading,\n      finished,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Oversize Event Handler - Vue\nDESCRIPTION: Defines the onOversize event handler for the upload size limit example. It displays a toast message when a file exceeds the maximum size.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onOversize = (file) => {\n      console.log(file);\n      showToast('文件大小不能超过 500kb');\n    };\n\n    return {\n      onOversize,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Switching Theme Dynamically - Vue.js\nDESCRIPTION: This Vue.js code snippet demonstrates how to dynamically change the theme from 'light' to 'dark' after a delay of 1 second using the `ref` function from Vue.  The `theme` variable is initialized to 'light' and then updated to 'dark' using `setTimeout`. This example shows changing the theme programmatically.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const theme = ref('light');\n\n    setTimeout(() => {\n      theme.value = 'dark';\n    }, 1000);\n\n    return { theme };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant NavBar with Slot Usage\nDESCRIPTION: Demonstrates how to use a slot to customize the right side content of the Vant NavBar. It uses the `right` slot to render a search icon from the `van-icon` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar title=\"Title\" left-text=\"Back\" left-arrow>\n  <template #right>\n    <van-icon name=\"search\" />\n  </template>\n</van-nav-bar>\n```\n\n----------------------------------------\n\nTITLE: Handling Time Range Selection Logic in Vue\nDESCRIPTION: This javascript defines the `setup` function for a Vue component that uses the PickerGroup with two TimePicker components for selecting a start and end time. It defines `startTime` and `endTime` as refs. The `onConfirm` and `onCancel` functions handle selection events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const startTime = ref(['12', '00']);\n    const endTime = ref(['12', '00']);\n\n    const onConfirm = () => {\n      showToast(`${startTime.value.join(':')} ${endTime.value.join(':')}`);\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      endTime,\n      startTime,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar with Change Event\nDESCRIPTION: Illustrates how to listen for the `change` event on the Tabbar component, which is emitted when the active tab changes. The `onChange` function is called with the index of the newly active tab.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\" @change=\"onChange\">\n  <van-tabbar-item icon=\"home-o\">Tab 1</van-tabbar-item>\n  <van-tabbar-item icon=\"search\">Tab 2</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\">Tab 3</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">Tab 4</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Setup for Theme Variables\nDESCRIPTION: This JavaScript code shows how to use the `ref` and `reactive` functions from Vue.js to define and manage theme variables for the ConfigProvider. These variables are then passed to the ConfigProvider component to customize the appearance of Vant components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, reactive } from 'vue';\n\nexport default {\n  setup() {\n    const rate = ref(4);\n    const slider = ref(50);\n\n    // themeVars 内的值会被转换成对应 CSS 变量\n    // 比如 sliderBarHeight 会转换成 `--van-slider-bar-height`\n    const themeVars = reactive({\n      rateIconFullColor: '#07c160',\n      sliderBarHeight: '4px',\n      sliderButtonWidth: '20px',\n      sliderButtonHeight: '20px',\n      sliderActiveBackground: '#07c160',\n      buttonPrimaryBackground: '#07c160',\n      buttonPrimaryBorderColor: '#07c160',\n    });\n\n    return {\n      rate,\n      slider,\n      themeVars,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Tabbar Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Tabbar component in HTML.  It uses the `van-tabbar` and `van-tabbar-item` components to create a simple tab bar with icons. The `v-model` directive binds the selected tab index to the `active` property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item icon=\"home-o\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"search\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"friends-o\">标签</van-tabbar-item>\n  <van-tabbar-item icon=\"setting-o\">标签</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Accordion Mode - HTML\nDESCRIPTION: This snippet showcases the accordion mode of the `van-collapse` component. The `accordion` prop is set to `true`, enabling only one panel to be expanded at a time. The `v-model` is bound to `activeName`, a string representing the name of the currently active panel.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeName\" accordion>\n  <van-collapse-item title=\"标题1\" name=\"1\">\n    代码是写出来给人看的，附带能在机器上运行。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题2\" name=\"2\">\n    技术无非就是那些开发它的人的共同灵魂。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题3\" name=\"3\">\n    在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Slot for Image in HTML\nDESCRIPTION: Illustrates how to customize the error message displayed when an image fails to load, using the error slot to provide a fallback text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-image src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\">\n  <template v-slot:error>加载失败</template>\n</van-image>\n```\n\n----------------------------------------\n\nTITLE: Custom Icon ShareSheet Usage - HTML\nDESCRIPTION: This HTML snippet demonstrates using custom icons in the `van-share-sheet` component.  It binds the component to a `showShare` variable and configures it with options that include URLs for custom icons. Requires Vue.js and Vant CSS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-share-sheet v-model:show=\"showShare\" :options=\"options\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Picker Cascaded Selection - JavaScript\nDESCRIPTION: This JavaScript code defines the data structure for a cascaded Vant Picker.  Each option can have a children array, which defines the next level of options in the cascade.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      {\n        text: '浙江',\n        value: 'Zhejiang',\n        children: [\n          {\n            text: '杭州',\n            value: 'Hangzhou',\n            children: [\n              { text: '西湖区', value: 'Xihu' },\n              { text: '余杭区', value: 'Yuhang' },\n            ],\n          },\n          {\n            text: '温州',\n            value: 'Wenzhou',\n            children: [\n              { text: '鹿城区', value: 'Lucheng' },\n              { text: '瓯海区', value: 'Ouhai' },\n            ],\n          },\n        ],\n      },\n      {\n        text: '福建',\n        value: 'Fujian',\n        children: [\n          {\n            text: '福州',\n            value: 'Fuzhou',\n            children: [\n              { text: '鼓楼区', value: 'Gulou' },\n              { text: '台江区', value: 'Taijiang' },\n            ],\n          },\n          {\n            text: '厦门',\n            value: 'Xiamen',\n            children: [\n              { text: '思明区', value: 'Siming' },\n              { text: '海沧区', value: 'Haicang' },\n            ],\n          },\n        ],\n      },\n    ];\n\n    return { columns };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Stepper - HTML\nDESCRIPTION: This code snippet demonstrates the integration of the Vant Stepper component within a Vant Form field. The stepper is embedded using the `#input` slot of the `van-field`, allowing for a numeric input with increment and decrement buttons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"stepper\" label=\"Stepper\">\n  <template #input>\n    <van-stepper v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Index List in Vue Component\nDESCRIPTION: This JavaScript snippet demonstrates how to define the `indexList` data property within a Vue component's `setup` function. This array is then bound to the `index-list` prop of the `van-index-bar` component, allowing for a customized index.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    return {\n      indexList: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox State - Vue\nDESCRIPTION: This code snippet initializes a reactive variable named `checked` using `ref` from Vue. It demonstrates how to manage the checked state of a checkbox component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(true);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Control of CountDown in Vue Template\nDESCRIPTION: Shows how to manually control the `van-count-down` component using methods like `start`, `pause`, and `reset`.  The component is referenced using `ref`, and the methods are called on the referenced instance. Includes event handling for the `finish` event.  Uses `van-grid` and `van-grid-item` for the control buttons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down\n  ref=\"countDown\"\n  millisecond\n  :time=\"3000\"\n  :auto-start=\"false\"\n  format=\"ss:SSS\"\n  @finish=\"onFinish\"\n/>\n<van-grid clickable :column-num=\"3\">\n  <van-grid-item text=\"Start\" icon=\"play-circle-o\" @click=\"start\" />\n  <van-grid-item text=\"Pause\" icon=\"pause-circle-o\" @click=\"pause\" />\n  <van-grid-item text=\"Reset\" icon=\"replay\" @click=\"reset\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Expanding Menu Upwards - Vue\nDESCRIPTION: This code snippet demonstrates how to make the dropdown menu expand upwards instead of downwards.  This is achieved by setting the `direction` prop to `up`. Dependencies: Vant DropdownMenu and DropdownItem.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu direction=\"up\">\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Upload Status Indication - Vue\nDESCRIPTION: Demonstrates how to indicate the upload status of files using the status and message properties.  The status can be 'uploading', 'failed', or 'done', and the message provides additional information about the status.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" :after-read=\"afterRead\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Picker Integrated with Popup and Field\nDESCRIPTION: This code snippet demonstrates how to integrate the Vant Picker component with the Popup and Field components for form filling. It shows how to display the picker inside a popup when the user clicks on a field, and how to update the field's value with the selected option.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"fieldValue\"\n  is-link\n  readonly\n  label=\"城市\"\n  placeholder=\"选择城市\"\n  @click=\"showPicker = true\"\n/>\n<van-popup v-model:show=\"showPicker\" destroy-on-close round position=\"bottom\">\n  <van-picker\n    :model-value=\"pickerValue\"\n    :columns=\"columns\"\n    @cancel=\"showPicker = false\"\n    @confirm=\"onConfirm\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Toggle All Panels - JavaScript\nDESCRIPTION: This snippet provides the Vue component setup for toggling all panels. It defines methods `openAll` and `toggleAll` that call the `toggleAll` method on the `Collapse` instance. The `collapse` ref is used to access the `Collapse` component's methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeNames = ref(['1']);\n    const collapse = ref(null);\n\n    const openAll = () => {\n      collapse.value.toggleAll(true);\n    }\n    const toggleAll = () => {\n      collapse.value.toggleAll();\n    },\n\n    return {\n      activeNames,\n      openAll,\n      toggleAll,\n      collapse,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Barrage Implementation in Vue\nDESCRIPTION: This snippet demonstrates the basic usage of the `van-barrage` component.  It binds a `list` to the `v-model` and adds a button to push new barrage items to the list. Requires Vant components like `van-barrage`, `van-space` and `van-button`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-barrage v-model=\"list\">\n  <div class=\"video\" style=\"width: 100%; height: 150px\"></div>\n</van-barrage>\n<van-space style=\"margin-top: 10px\">\n  <van-button @click=\"add\" type=\"primary\" size=\"small\"> barrage </van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Using SwipeCell Instance Methods in Vue (TypeScript)\nDESCRIPTION: Demonstrates how to obtain a reference to a SwipeCell instance in Vue and use its methods, such as `close()`, to control the component programmatically. This is done using `ref` from Vue and the `SwipeCellInstance` type from Vant. Provides an example of closing the SwipeCell.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { SwipeCellInstance } from 'vant';\n\nconst swipeCellRef = ref<SwipeCellInstance>();\n\nswipeCellRef.value?.close();\n```\n\n----------------------------------------\n\nTITLE: Checking Camera Permission via getUserMedia (TypeScript)\nDESCRIPTION: This code snippet illustrates how to check if the user has granted camera permission using the `getUserMedia` method.  It attempts to access the user's camera and logs either the stream or an error message to the console. The `getUserMedia` method returns a Promise, which resolves with a MediaStream if permission is granted and rejects with an error if permission is denied or unavailable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnavigator.mediaDevices\n  .getUserMedia({ video: true })\n  .then((stream) => {\n    console.log(stream);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar with Name Matching\nDESCRIPTION: Configures a Tabbar component to match active tabs by name instead of index. Each TabbarItem has a `name` prop, and the `v-model` is bound to an `active` variable that holds the name of the active tab.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item name=\"home\" icon=\"home-o\">Tab</van-tabbar-item>\n  <van-tabbar-item name=\"search\" icon=\"search\">Tab</van-tabbar-item>\n  <van-tabbar-item name=\"friends\" icon=\"friends-o\">Tab</van-tabbar-item>\n  <van-tabbar-item name=\"setting\" icon=\"setting-o\">Tab</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Using image Slot - JavaScript\nDESCRIPTION: Provides the JavaScript code for the customized image preview using the image slot.  It initializes the show state and the images array with video URLs. The images array now holds video URLs instead of image URLs. It imports ref from vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const images = [\n      'https://www.w3school.com.cn/i/movie.ogg',\n      'https://www.w3school.com.cn/i/movie.ogg',\n      'https://www.w3school.com.cn/i/movie.ogg',\n    ];\n    return {\n      show,\n      images,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Swipe with Lazy Render\nDESCRIPTION: This snippet demonstrates the lazy rendering feature of the Vant Swipe component.  The `lazy-render` prop is enabled to improve performance by only rendering the currently visible swipe item and a few adjacent ones. It uses `v-for` directive to dynamically generate swipe items based on an `images` array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe :autoplay=\"3000\" lazy-render>\n  <van-swipe-item v-for=\"image in images\" :key=\"image\">\n    <img :src=\"image\" />\n  </van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Multiple Columns Picker HTML\nDESCRIPTION: This HTML snippet renders a Vant Picker with the columns defined in the javascript section.  The `:columns` attribute is bound to a 2D array that creates the columns.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-picker title=\"Title\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Selecting Date and Time with PickerGroup in Vue\nDESCRIPTION: This example shows how to use the PickerGroup component to combine a DatePicker and a TimePicker. The `title`, `tabs`, `@confirm`, and `@cancel` props are set on the PickerGroup. The `v-model`, `:min-date`, and `:max-date` props are passed down to the DatePicker and TimePicker components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"Title\"\n  :tabs=\"['Date', 'Time']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"currentDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-time-picker v-model=\"currentTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Installing DropdownMenu and DropdownItem Components - JavaScript\nDESCRIPTION: Globally register the DropdownMenu and DropdownItem components in a Vue application using the `app.use()` method. This makes the components available for use in templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { DropdownMenu, DropdownItem } from 'vant';\n\nconst app = createApp();\napp.use(DropdownMenu);\napp.use(DropdownItem);\n```\n\n----------------------------------------\n\nTITLE: PullRefresh with Success Text - HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the success-text prop to display a success message after a successful refresh.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh\n  v-model=\"isLoading\"\n  success-text=\"刷新成功\"\n  @refresh=\"onRefresh\"\n>\n  <p>刷新次数: {{ count }}</p>\n</van-pull-refresh>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling - CSS\nDESCRIPTION: Demonstrates how to override CSS variables to customize the style of the RollingText component. This allows for changing the background color, text color, font size, gap, and border radius of the digits.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.my-rolling-text {\n  --van-rolling-text-background: #1989fa;\n  --van-rolling-text-color: white;\n  --van-rolling-text-font-size: 24px;\n  --van-rolling-text-gap: 6px;\n  --van-rolling-text-item-border-radius: 5px;\n  --van-rolling-text-item-width: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Success/Fail Toasts\nDESCRIPTION: This code snippet demonstrates how to display success and fail toasts using the `showSuccessToast` and `showFailToast` functions from Vant, respectively. Each function takes a string as an argument, which is the message to be displayed in the toast.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showSuccessToast, showFailToast } from 'vant';\n\nshowSuccessToast('Success');\nshowFailToast('Fail');\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Tab and Tabs components with Vue\nDESCRIPTION: This snippet demonstrates how to import and register the Tab and Tabs components from the Vant library in a Vue application. It uses the createApp function from Vue to create an app instance and then registers the components globally using the app.use() method. This allows you to use the Tab and Tabs components in your Vue templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Tab, Tabs } from 'vant';\n\nconst app = createApp();\napp.use(Tab);\napp.use(Tabs);\n```\n\n----------------------------------------\n\nTITLE: Custom Field Types - JavaScript\nDESCRIPTION: This snippet initializes multiple reactive variables using Vue's 'ref' function, one for each custom field type (tel, text, digit, number, password). These variables are then used to bind the respective van-field components. The setup function returns an object containing all reactive variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const tel = ref('');\n    const text = ref('');\n    const digit = ref('');\n    const number = ref('');\n    const password = ref('');\n\n    return { tel, text, digit, number, password };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic FloatingBubble Usage (HTML)\nDESCRIPTION: Defines a basic FloatingBubble component with an icon and a click handler.  The `icon` prop specifies the icon to display, and the `@click` event binds the `onClick` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-bubble icon=\"chat\" @click=\"onClick\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Types - Typescript\nDESCRIPTION: Imports the type definitions related to the dialog, allowing developers to use them for type-safe development. This code snippet provides types for props, themes, messages, options, and alignment.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  DialogProps,\n  DialogTheme,\n  DialogMessage,\n  DialogOptions,\n  DialogMessageAlign,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Description Setup - Javascript\nDESCRIPTION: This JavaScript code configures the ActionSheet to display a description. It defines an `actions` array, where one of the options includes a `subname` field, which acts as the description for that specific option. It uses the Vue `ref`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: 'Option 1' },\n      { name: 'Option 2' },\n      { name: 'Option 3', subname: 'Description' },\n    ];\n\n    return {\n      show,\n      actions,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Aligning Search Input Content\nDESCRIPTION: This HTML snippet shows how to use the `input-align` prop to change the alignment of the text within the search input. Possible values are `center` and `right`. The default value is `left`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-search\n  v-model=\"value\"\n  placeholder=\"请输入搜索关键词\"\n  input-align=\"center\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Date Range - JavaScript\nDESCRIPTION: Defines the `minDate` and `maxDate` variables for custom date range selection in the Vant Calendar. It initializes `minDate` to January 1, 2010, and `maxDate` to January 31, 2010. Requires the `vue` library for `ref` definition.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n\n    return {\n      show,\n      minDate: new Date(2010, 0, 1),\n      maxDate: new Date(2010, 0, 31),\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Control of CountDown - HTML\nDESCRIPTION: This HTML snippet sets up the CountDown component for manual control. It binds a `ref` named `countDown` to the component and disables auto-start. It also includes `van-grid` components to trigger the `start`, `pause`, and `reset` methods.  Dependencies: Requires `start`, `pause`, `reset` and `onFinish` methods defined in the JavaScript component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down\n  ref=\"countDown\"\n  millisecond\n  :time=\"3000\"\n  :auto-start=\"false\"\n  format=\"ss:SSS\"\n  @finish=\"onFinish\"\n/>\n<van-grid clickable>\n  <van-grid-item text=\"开始\" icon=\"play-circle-o\" @click=\"start\" />\n  <van-grid-item text=\"暂停\" icon=\"pause-circle-o\" @click=\"pause\" />\n  <van-grid-item text=\"重置\" icon=\"replay\" @click=\"reset\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Reactive Current Page Setup for Vant Pagination\nDESCRIPTION: This JavaScript snippet defines a Vue component setup function that creates a reactive `currentPage` ref, intended to control the current page of the Vant Pagination component through v-model binding.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentPage = ref(1);\n    return { currentPage };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using useWindowSize composable\nDESCRIPTION: This code snippet demonstrates how to use the `useWindowSize` composable from the `@vant/use` library.  It imports the composable, retrieves the window's width and height as reactive values, and logs their values to the console. The composable must be imported before use.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/vant-use-intro.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useWindowSize } from '@vant/use';\n\nconst { width, height } = useWindowSize();\n\nconsole.log(width.value); // -> window width\nconsole.log(height.value); // -> window height\n```\n\n----------------------------------------\n\nTITLE: Click Event Handling - HTML\nDESCRIPTION: Demonstrates handling the `click-tab` event. The `@click-tab` directive binds the `onClickTab` method to the event emitted when a tab is clicked. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" @click-tab=\"onClickTab\">\n  <van-tab v-for=\"index in 2\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Limited Selection in Checkbox Group - Vue\nDESCRIPTION: This code snippet restricts the maximum number of selectable checkboxes in a CheckboxGroup using the `max` property. In this example, the maximum number of checkboxes that can be selected is set to 2.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox-group v-model=\"checked\" :max=\"2\">\n  <van-checkbox name=\"a\">复选框 a</van-checkbox>\n  <van-checkbox name=\"b\">复选框 b</van-checkbox>\n  <van-checkbox name=\"c\">复选框 c</van-checkbox>\n</van-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling of Vant Slider in Vue\nDESCRIPTION: This example shows how to customize the appearance of the Vant Slider by setting the bar height and active color.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" bar-height=\"4px\" active-color=\"#ee0a24\" />\n```\n\n----------------------------------------\n\nTITLE: TreeSelectItem Data Structure - JavaScript\nDESCRIPTION: This JavaScript code provides the data structure for the TreeSelectItem, showing an example of how to define categories with names (text), badges, red dots (dot), custom CSS classes, and child options with names, IDs, and disabled states.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    // 导航名称\n    text: '所有城市',\n    // 导航名称右上角徽标\n    badge: 3,\n    // 是否在导航名称右上角显示小红点\n    dot: true,\n    // 导航节点额外类名\n    className: 'my-class',\n    // 该导航下所有的可选项\n    children: [\n      {\n        // 名称\n        text: '温州',\n        // id，作为匹配选中状态的标识符\n        id: 1,\n        // 禁用选项\n        disabled: true,\n      },\n      {\n        text: '杭州',\n        id: 2,\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Handling Action Bar Icon and Button Clicks in Vue.js\nDESCRIPTION: This JavaScript code defines the `onClickIcon` and `onClickButton` methods, which are intended to be called when the corresponding icon or button in the action bar is clicked. These methods utilize the `showToast` function from the 'vant' library to display a simple toast message indicating which element was clicked. The methods are then returned within the `setup` function to make them available in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onClickIcon = () => showToast('Click Icon');\n    const onClickButton = () => showToast('Click Button');\n    return {\n      onClickIcon,\n      onClickButton,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Icons - Javascript\nDESCRIPTION: This JavaScript code configures the ActionSheet to display icons for each option. It defines an `actions` array where each option includes an `icon` field, specifying the icon to be displayed.  It uses the Vue `ref` and Vant `showToast` methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: 'Option 1', icon: 'cart-o' },\n      { name: 'Option 2', icon: 'shop-o' },\n      { name: 'Option 3', icon: 'star-o' },\n    ];\n    const onSelect = (item) => {\n      show.value = false;\n      showToast(item.name);\n    };\n\n    return {\n      show,\n      actions,\n      onSelect,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying different types of Notify messages\nDESCRIPTION: Shows how to display different types of notification messages, such as primary, success, danger, and warning. Requires importing showNotify from 'vant'. The `type` property allows for styling the message based on its severity or context.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify } from 'vant';\n\nshowNotify({ type: 'primary', message: 'Notify Message' });\nshowNotify({ type: 'success', message: 'Notify Message' });\nshowNotify({ type: 'danger', message: 'Notify Message' });\nshowNotify({ type: 'warning', message: 'Notify Message' });\n```\n\n----------------------------------------\n\nTITLE: Vant Tag Sizes\nDESCRIPTION: This snippet demonstrates how to use the `size` attribute to control the size of the Vant Tag. The available sizes are `medium` and `large`.  If no size is specified, the default size is used.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-tag type=\"primary\">标签</van-tag>\n<van-tag type=\"primary\" size=\"medium\">标签</van-tag>\n<van-tag type=\"primary\" size=\"large\">标签</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Setting Password Length - HTML\nDESCRIPTION: Configures the PasswordInput component with a custom length.  The `length` prop is set to `4`, limiting the password input to 4 characters.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  :length=\"4\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Required Field Styling - HTML\nDESCRIPTION: Demonstrates how to display a required asterisk on a Field component using the 'required' prop. It's important to note that this prop only controls the styling and does not enforce validation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"username\"\n    required\n    label=\"Username\"\n    placeholder=\"Username\"\n  />\n  <van-field v-model=\"phone\" required label=\"Phone\" placeholder=\"Phone\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color in Vant Actionbar in HTML\nDESCRIPTION: This code demonstrates how to customize the color of Vant ActionbarIcons using the `color` property. It allows you to specify a custom color for each icon, enhancing the visual appearance of the action bar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"客服\" color=\"#ee0a24\" />\n  <van-action-bar-icon icon=\"cart-o\" text=\"购物车\" />\n  <van-action-bar-icon icon=\"star\" text=\"已收藏\" color=\"#ff5000\" />\n  <van-action-bar-button type=\"warning\" text=\"加入购物车\" />\n  <van-action-bar-button type=\"danger\" text=\"立即购买\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Video Barrage Implementation with Play/Pause\nDESCRIPTION: This snippet implements a video barrage functionality with play and pause controls using the `van-barrage` component. It includes buttons for adding barrages and toggling the play/pause state. Requires Vant components like `van-barrage`, `van-space` and `van-button`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-barrage v-model=\"list\" ref=\"barrage\" :auto-play=\"false\">\n  <div class=\"video\" style=\"width: 100%; height: 150px\"></div>\n</van-barrage>\n<van-space style=\"margin-top: 10px\">\n  <van-button @click=\"add\" type=\"primary\" size=\"small\" :disabled=\"!isPlay\">\n    barrage\n  </van-button>\n  <van-button @click=\"toggle()\" size=\"small\">\n    {{ isPlay ? 'pause' : 'play' }}\n  </van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Binding Value to NumberKeyboard\nDESCRIPTION: Demonstrates how to bind a value to the NumberKeyboard, allowing it to update a bound variable. The keyboard's visibility and maximum length are also controlled via props.\n\nDependencies: Requires Vue 3 and the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-field v-model=\"value\" readonly clickable @touchstart.stop=\"show = true\" />\n<van-number-keyboard\n  v-model=\"value\"\n  :show=\"show\"\n  :maxlength=\"6\"\n  @blur=\"show = false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Input Alignment - HTML\nDESCRIPTION: Shows how to align the input value within a Field component using the 'input-align' prop. Available options are 'left', 'center', and 'right'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value\"\n    label=\"Text\"\n    placeholder=\"Input Align Right\"\n    input-align=\"right\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with dynamic generation in Vue\nDESCRIPTION: This snippet demonstrates how to use v-for to dynamically generate van-tab components within the van-tabs component. The v-for directive iterates through a range of numbers (1 to 8) and creates a new van-tab component for each number. The title attribute of each tab is set to '标签 ' + index, and the content of each tab is set to '内容 {{ index }}'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab v-for=\"index in 8\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Slider Usage in Vue\nDESCRIPTION: This example shows the basic usage of the Vant Slider component with v-model for data binding and a change event handler.  It initializes a ref variable for the slider value and uses showToast from vant to display the current slider value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(50);\n    const onChange = (value) => showToast('当前值：' + value);\n    return {\n      value,\n      onChange,\n    };\n  },\n};\n```\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" @change=\"onChange\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant List Component in Vue\nDESCRIPTION: This code snippet demonstrates how to register the Vant List component globally within a Vue application using `app.use`. It imports the necessary modules from 'vue' and 'vant' and then applies the `List` component to the application instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { List } from 'vant';\n\nconst app = createApp();\napp.use(List);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Area Data in Vue Component\nDESCRIPTION: Imports the `areaList` from the `@vant/area-data` package and makes it available in a Vue component's template.  This allows the Area component to display the list of provinces, cities, and districts.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { areaList } from '@vant/area-data';\n\nexport default {\n  setup() {\n    return { areaList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Vant Switch within a Cell Component\nDESCRIPTION: This code shows how to integrate the Vant Switch component within a Vant Cell component. The switch is placed in the `right-icon` slot of the cell, aligning it to the right side.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-cell center title=\"标题\">\n  <template #right-icon>\n    <van-switch v-model=\"checked\" />\n  </template>\n</van-cell>\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Custom Styles\nDESCRIPTION: Customizes the appearance of the Vant Progress component using the `pivot-text`, `color`, `pivot-color` and a linear gradient. `pivot-text` is the text displayed in the pivot point. `color` sets the color of the progress bar itself. `pivot-color` sets the background color of the pivot text. The last example demonstrates using a linear gradient for the progress bar's color.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-progress pivot-text=\"Orange\" color=\"#f2826a\" :percentage=\"25\" />\n<van-progress pivot-text=\"Red\" color=\"#ee0a24\" :percentage=\"50\" />\n<van-progress\n  :percentage=\"75\"\n  pivot-text=\"Purple\"\n  pivot-color=\"#7232dd\"\n  color=\"linear-gradient(to right, #be99ff, #7232dd)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Popup Positioning - HTML\nDESCRIPTION: Shows how to use the `position` prop to control where the popup is displayed (top, bottom, left, right).  The example also sets the `height` and `width` through inline styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- top popup -->\n<van-popup v-model:show=\"showTop\" position=\"top\" :style=\"{ height: '30%' }\" />\n\n<!-- bottom popup -->\n<van-popup\n  v-model:show=\"showBottom\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n\n<!-- left popup -->\n<van-popup\n  v-model:show=\"showLeft\"\n  position=\"left\"\n  :style=\"{ width: '30%', height: '100%' }\"\n/>\n\n<!-- Popup on the right -->\n<van-popup\n  v-model:show=\"showRight\"\n  position=\"right\"\n  :style=\"{ width: '30%', height: '100%' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Label on Left - Vue\nDESCRIPTION: This code snippet shows how to position the checkbox label on the left side of the checkbox using the `label-position` property set to `'left'`. This can be useful for different layout requirements.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\" label-position=\"left\">复选框</van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Image Usage in HTML\nDESCRIPTION: This code snippet illustrates the basic usage of the Vant Image component within an HTML template.  It sets the width, height, and source (src) attributes to display an image. The image is fetched from a remote URL.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"100\"\n  height=\"100\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Form Usage - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the basic Vant Form example. It defines reactive variables for username and password using `ref` and provides an `onSubmit` function for handling form submissions. The `onSubmit` function logs the form values to the console.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const username = ref('');\n    const password = ref('');\n    const onSubmit = (values) => {\n      console.log('submit', values);\n    };\n\n    return {\n      username,\n      password,\n      onSubmit,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced SubmitBar Usage with Slots - JavaScript\nDESCRIPTION: Defines the `onSubmit` and `onClickLink` methods that are called when the submit button and link are clicked. It imports `showToast` from 'vant' and uses it to display toast messages.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onSubmit = () => showToast('Submit');\n    const onClickLink = () => showToast('Click Link');\n    return {\n      onSubmit,\n      onClickLink,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Rate Component into Form\nDESCRIPTION: This HTML code snippet shows the integration of a Vant Rate component into a Vant Form. The `van-field` component provides a container and label, while the `#input` slot houses the `van-rate` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"rate\" label=\"评分\">\n  <template #input>\n    <van-rate v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Custom Preview Style - HTML\nDESCRIPTION: Demonstrates how to customize the preview area using the preview-cover slot. The example adds a file name overlay at the bottom of each preview image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\">\n  <template #preview-cover=\"{ file }\">\n    <div class=\"preview-cover van-ellipsis\">{{ file.name }}</div>\n  </template>\n</van-uploader>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Active Step in Vue\nDESCRIPTION: Defines a reactive 'active' variable using Vue's ref function. This allows the active step to be dynamically updated and reflected in the UI.  It exports an object with the active property for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(1);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Date Time Selection Logic in Vue\nDESCRIPTION: This JavaScript code defines the setup function for a Vue component that uses the PickerGroup with DatePicker and TimePicker. It initializes `currentDate` and `currentTime` refs, defines `onConfirm` and `onCancel` functions to handle selection events, and returns the necessary data and functions for the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2022', '06', '01']);\n    const currentTime = ref(['12', '00']);\n\n    const onConfirm = () => {\n      showToast(\n        `${currentDate.value.join('/')} ${currentTime.value.join(':')}`,\n      );\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n      currentTime,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Toggle All Example - Vue\nDESCRIPTION: This code snippet demonstrates how to use the `toggleAll` method in the CheckboxGroup component with different options for toggling the state of all checkboxes within the group. It includes examples of toggling all checkboxes, setting all to checked, setting all to unchecked, and skipping disabled checkboxes during the toggle operation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CheckboxGroupInstance } from 'vant';\n\nconst checkboxGroupRef = ref<CheckboxGroupInstance>();\n\n// 全部反选\ncheckboxGroupRef?.value.toggleAll();\n// 全部选中\ncheckboxGroupRef?.value.toggleAll(true);\n// 全部取消\ncheckboxGroupRef?.value.toggleAll(false);\n\n// 全部反选，并跳过禁用的复选框\ncheckboxGroupRef?.value.toggleAll({\n  skipDisabled: true,\n});\n// 全部选中，并跳过禁用的复选框\ncheckboxGroupRef?.value.toggleAll({\n  checked: true,\n  skipDisabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ContactCard Component - JavaScript\nDESCRIPTION: Registers the ContactCard component globally in a Vue application. It imports `createApp` from 'vue' and `ContactCard` from 'vant', then uses the `app.use()` method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ContactCard } from 'vant';\n\nconst app = createApp();\napp.use(ContactCard);\n```\n\n----------------------------------------\n\nTITLE: Configuring Columns Placeholder\nDESCRIPTION: This HTML snippet demonstrates how to configure the placeholder text for each column in the Area component using the `columns-placeholder` property.  It accepts an array of strings, where each string corresponds to the placeholder text for a column.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-area\n  title=\"Title\"\n  :area-list=\"areaList\"\n  :columns-placeholder=\"['Province', 'City', 'County']\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Position - HTML\nDESCRIPTION: Customizes the position of the BackTop component using the right and bottom properties. This snippet displays a list of cells and positions the BackTop component 15vw from the right and 10vh from the bottom.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n<van-back-top right=\"15vw\" bottom=\"10vh\" />\n```\n\n----------------------------------------\n\nTITLE: Picker Integrated with Popup Component\nDESCRIPTION: This snippet demonstrates the integration of the Vant Picker component with the Vant Popup component to create a picker that appears as a popup. It shows how to control the popup's visibility using a ref and how to handle the confirm event to update the field value with the selected option.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const columns = [\n      { text: 'Delaware', value: 'Delaware' },\n      { text: 'Florida', value: 'Florida' },\n      { text: 'Wenzhou', value: 'Wenzhou' },\n      { text: 'Indiana', value: 'Indiana' },\n      { text: 'Maine', value: 'Maine' },\n    ];\n    const fieldValue = ref('');\n    const pickerValue = ref<Numeric[]>([]) ;\n    const showPicker = ref(false);\n\n    const onConfirm = ({ selectedValues, selectedOptions }) => {\n      showPicker.value = false;\n      pickerValue.value = selectedValues;\n      fieldValue.value = selectedOptions[0].text;\n    };\n\n    return {\n      columns,\n      onConfirm,\n      fieldValue,\n      showPicker,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling click event for Vant Tabs in Vue\nDESCRIPTION: This snippet demonstrates how to handle the click-tab event on the van-tabs component. The @click-tab directive is used to bind the onClickTab method to the click-tab event, which triggers when a tab is clicked. The onClickTab method receives an event object as a parameter and displays a toast message with the title of the clicked tab, using the showToast method from the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" @click-tab=\"onClickTab\">\n  <van-tab title=\"标签 1\">内容 1</van-tab>\n  <van-tab title=\"标签 2\">内容 2</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Alignment Control Logic for Vant Space\nDESCRIPTION: This Javascript snippet shows how to dynamically control the `align` prop of the Vant Space component using Vue's reactivity system. The `align` ref is initialized with a default value of 'center' and then exposed to the template for use in a `v-model` directive of a Vant Radio Group.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const align = ref('center');\n    return { align };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Option Filter - HTML\nDESCRIPTION: HTML example demonstrating the use of `filter` prop to filter available options.  This is used in conjunction with the JavaScript setup to conditionally enable/disable options based on certain logic.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker v-model=\"currentTime\" title=\"Choose Time\" :filter=\"filter\" />\n```\n\n----------------------------------------\n\nTITLE: Custom PullRefresh Tips with Slots in Vue\nDESCRIPTION: This snippet demonstrates how to customize the pull-to-refresh tips using slots. It uses the `pulling`, `loosing`, and `loading` slots to display different images based on the pull-to-refresh state. The `head-height` prop is set to 80 to provide more space for the custom content. The styles provided customize the appearance of the images, setting their width, height, margin, and border radius.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh v-model=\"isLoading\" :head-height=\"80\" @refresh=\"onRefresh\">\n  <template #pulling=\"props\">\n    <img\n      class=\"doge\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/doge.png\"\n      :style=\"{ transform: `scale(${props.distance / 80})` }\"\n    />\n  </template>\n\n  <template #loosing>\n    <img\n      class=\"doge\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/doge.png\"\n    />\n  </template>\n\n  <template #loading>\n    <img\n      class=\"doge\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/doge-fire.jpeg\"\n    />\n  </template>\n  <p>Refresh Count: {{ count }}</p>\n</van-pull-refresh>\n\n<style>\n  .doge {\n    width: 140px;\n    height: 72px;\n    margin-top: 8px;\n    border-radius: 4px;\n  }\n</style>\n```\n\nLANGUAGE: css\nCODE:\n```\n  .doge {\n    width: 140px;\n    height: 72px;\n    margin-top: 8px;\n    border-radius: 4px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Vant Grid with Badge Display - HTML\nDESCRIPTION: Shows how to display badges on GridItem components using the `dot` and `badge` props. The `dot` prop displays a simple red dot, while the `badge` prop displays a custom badge with a number or text. This example displays two grid items, each with an icon and text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :column-num=\"2\">\n  <van-grid-item icon=\"home-o\" text=\"Text\" dot />\n  <van-grid-item icon=\"search\" text=\"Text\" badge=\"99+\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant SwipeCell in HTML\nDESCRIPTION: This snippet shows the basic usage of the `van-swipe-cell` component with left and right slots for custom buttons.  The `van-cell` component is used for the main content. The `border` prop is set to `false` on the `van-cell` to remove the border.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe-cell>\n  <template #left>\n    <van-button square type=\"primary\" text=\"Select\" />\n  </template>\n  <van-cell :border=\"false\" title=\"Cell\" value=\"Cell Content\" />\n  <template #right>\n    <van-button square type=\"danger\" text=\"Delete\" />\n    <van-button square type=\"primary\" text=\"Collect\" />\n  </template>\n</van-swipe-cell>\n```\n\n----------------------------------------\n\nTITLE: Custom Indicator Styling - CSS\nDESCRIPTION: Styles the custom indicator within the Swipe component. Positions the indicator at the bottom right corner, adds padding, sets the font size, and applies a semi-transparent background.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.custom-indicator {\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n  padding: 2px 5px;\n  font-size: 12px;\n  background: rgba(0, 0, 0, 0.1);\n}\n```\n\n----------------------------------------\n\nTITLE: Stepper Integer Input Restriction in Vue\nDESCRIPTION: This snippet demonstrates how to enforce integer input in the Vant Stepper. By setting the `integer` attribute, the component only accepts integer values, preventing the user from entering decimals or non-numeric characters.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" integer />\n```\n\n----------------------------------------\n\nTITLE: Before Read Hook - HTML & JavaScript\nDESCRIPTION: Shows how to use the `before-read` hook to perform validation before a file is read.  It can return a boolean value to stop reading the file or a Promise for asynchronous validation. The example checks if the file type is 'image/jpeg' and displays a toast message if it's not.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader :before-read=\"beforeRead\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    // 返回布尔值\n    const beforeRead = (file) => {\n      if (file.type !== 'image/jpeg') {\n        showToast('Please upload an image in jpg format');\n        return false;\n      }\n      return true;\n    };\n\n    // 返回 Promise\n    const asyncBeforeRead = (file) =>\n      new Promise((resolve, reject) => {\n        if (file.type !== 'image/jpeg') {\n          showToast('Please upload an image in jpg format');\n          reject();\n        } else {\n          const img = new File(['foo'], 'bar.jpg', {\n            type: 'image/jpeg',\n          });\n          resolve(img);\n        }\n      });\n\n    return {\n      beforeRead,\n      asyncBeforeRead,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Popup Round Corner - HTML\nDESCRIPTION: Shows how to add rounded corners to the popup using the `round` prop.  The radius of the round corner adapts based on the `position` prop. The example demonstrates for both center and bottom positions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Round Popup (center) -->\n<van-popup v-model:show=\"showCenter\" round :style=\"{ padding: '64px' }\" />\n\n<!-- Round Popup (bottom) -->\n<van-popup\n  v-model:show=\"showBottom\"\n  round\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Target for Vant BackTop\nDESCRIPTION: This snippet demonstrates how to set a specific scroll target for the Vant BackTop component using the `target` prop. This allows the component to scroll a specific container rather than the entire page. The HTML defines a container with a fixed height and overflow set to auto, and the `van-back-top` component targets this container. The JavaScript part sets up the component's data, which is a list of 50 items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n  <van-back-top target=\".container\" bottom=\"30vh\" />\n</div>\n\n<style>\n  .container {\n    height: 60vh;\n    overflow: auto;\n  }\n</style>\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Icon with Slots - Vue\nDESCRIPTION: This code snippet demonstrates how to use the `icon` slot to customize the checkbox icon based on its checked state. It utilizes the `slotProps` to determine whether the checkbox is checked or not.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\">\n  自定义图标\n  <template #icon=\"props\">\n    <img class=\"img-icon\" :src=\"props.checked ? activeIcon : inactiveIcon\" />\n  </template>\n</van-checkbox>\n\n<style>\n  .img-icon {\n    height: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Disabled Tab - HTML\nDESCRIPTION: Demonstrates disabling a tab using the `disabled` prop.  The second tab (index 2) is disabled.  The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab v-for=\"index in 3\" :title=\"'Tab ' + index\" :disabled=\"index === 2\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: DatePicker Options Filter - JavaScript\nDESCRIPTION: This JavaScript code defines the `filter` function used in the DatePicker component. The `filter` function takes the `type` (year or month) and `options` as arguments.  It filters the `options` array for months, returning only those months whose value is a multiple of 6. This restricts the selectable months in the DatePicker.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01']);\n    const columnsType = ['year', 'month'];\n    const filter = (type, options) => {\n      if (type === 'month') {\n        return options.filter((option) => Number(option.value) % 6 === 0);\n      }\n      return options;\n    };\n\n    return {\n      filter,\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentTime,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Slider with Min and Max Values in Vue\nDESCRIPTION: This code demonstrates how to set the minimum and maximum values for the Vant Slider component. The slider allows selecting values between -50 and 50.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" :min=\"-50\" :max=\"50\" />\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handling - HTML and JavaScript\nDESCRIPTION: Demonstrates how to listen for click events on the overlay and close icon of the popup using `@click-overlay` and `@click-close-icon`.  It uses `showToast` to display the event that was triggered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"Listen Click Events\" is-link @click=\"show = true\" />\n<van-popup\n  v-model:show=\"show\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n  closeable\n  @click-overlay=\"onClickOverlay\"\n  @click-close-icon=\"onClickCloseIcon\"\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const onClickOverlay = () => {\n      showToast('click-overlay');\n    };\n    const onClickCloseIcon = () => {\n      showToast('click-close-icon');\n    };\n    return {\n      show,\n      onClickOverlay,\n      onClickCloseIcon,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar Change Event and Showing Toast\nDESCRIPTION: This JavaScript snippet demonstrates how to handle the `change` event emitted by the Vant Sidebar component and display a toast message using the `vant` library. It imports the `ref` and `showToast` functions, defines a reactive variable `active` and an `onChange` function that shows a toast message with the index of the selected item. The `onChange` function is intended to be used as the event handler for the `change` event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const onChange = (index) => showToast(`标签名 ${index + 1}`);\n    return {\n      active,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: File List Ref - Vue\nDESCRIPTION: Defines the fileList ref used in the file preview example. It contains an array of file objects with URLs and an optional isImage property to declare if a file is an image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      { url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg' },\n      // Uploader 根据文件后缀来判断是否为图片文件\n      // 如果图片 URL 中不包含类型信息，可以添加 isImage 标记来声明\n      { url: 'https://cloud-image', isImage: true },\n    ]);\n\n    return {\n      fileList,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Image Position - JavaScript\nDESCRIPTION: Demonstrates how to specify the initial image position (index) when the ImagePreview is displayed. The `startPosition` option in the configuration object controls the initially displayed image. It imports showImagePreview from vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  startPosition: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic ShareSheet Usage (HTML)\nDESCRIPTION: This HTML snippet shows the basic structure for displaying a ShareSheet. It includes a button to trigger the ShareSheet and the ShareSheet component itself.  The `v-model:show` directive controls the visibility of the ShareSheet, and the `:options` prop provides the share options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"显示分享面板\" @click=\"showShare = true\" />\n<van-share-sheet\n  v-model:show=\"showShare\"\n  title=\"立即分享给好友\"\n  :options=\"options\"\n  @select=\"onSelect\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Change Event - JavaScript\nDESCRIPTION: Defines the `active` ref and the `onChange` method, which is called when the selected tab changes. The `onChange` method uses the `showToast` function from Vant to display a toast message indicating the selected tab's index.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const onChange = (index) => showToast(`标签 ${index}`);\n    return {\n      icon,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Before Close with Vant Dialog in Vue\nDESCRIPTION: This JavaScript snippet demonstrates how to implement the `beforeClose` function for the `van-swipe-cell` component. It uses `showConfirmDialog` from Vant to display a confirmation dialog before allowing the swipe cell to close.  It returns a Promise that resolves to either true (close) or false (do not close).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showConfirmDialog } from 'vant';\n\nexport default {\n  setup() {\n    const beforeClose = ({ position }) => {\n      switch (position) {\n        case 'left':\n        case 'cell':\n        case 'outside':\n          return true;\n        case 'right':\n          return new Promise((resolve) => {\n            showConfirmDialog({\n              title: 'Are you sure to delete?',\n            })\n              .then(() => resolve(true))\n              .catch(() => resolve(false));\n          });\n      }\n    };\n\n    return { beforeClose };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Closeable Tag with Event Handling\nDESCRIPTION: This snippet demonstrates how to create a closeable Vant Tag. The `closeable` attribute enables the close button, and the `@close` event is emitted when the tag is closed. The example also shows how to control tag visibility using Vue's reactive `ref` and conditionally rendering based on `show` variable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tag :show=\"show\" closeable size=\"medium\" type=\"primary\" @close=\"close\">\n  标签\n</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Handling NumberKeyboard Events in Vue\nDESCRIPTION: This Vue setup function demonstrates how to manage the state and event handling for the NumberKeyboard component.  It uses `ref` to create a reactive `show` variable to control the keyboard's visibility and defines `onInput` and `onDelete` functions to handle keyboard events using `showToast`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(true);\n    const onInput = (value) => showToast(value);\n    const onDelete = () => showToast('删除');\n\n    return {\n      show,\n      onInput,\n      onDelete,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Collapse Usage - JavaScript\nDESCRIPTION: This snippet provides the Vue component setup for the basic collapse example. It uses the `ref` function from Vue to create a reactive variable `activeNames` that holds an array of the currently active panel names. This array is bound to the `v-model` of the `van-collapse` component in the HTML template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeNames = ref(['1']);\n    return { activeNames };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Component Setup\nDESCRIPTION: Sets up a basic reactive value for the Rate component in a Vue component's setup function. The `value` ref is initialized to 3 and is returned to make it accessible in the template. This allows the value to be linked to the HTML template via `v-model` for two-way binding.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(3);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TimePicker Usage - JavaScript\nDESCRIPTION: This code snippet shows how to define the `currentTime` data property using Vue's `ref` function. It initializes the time with default hour and minute values, which will be used with v-model.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00']);\n    return { currentTime };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vertical Vant Slider in Vue\nDESCRIPTION: Shows how to display the Vant Slider vertically using the 'vertical' prop.  It also shows how to display a vertical range slider.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(50);\n    const value2 = ref([10, 50]);\n    const onChange = (value) => showToast('当前值：' + value);\n    return {\n      value,\n      value2,\n      onChange,\n    };\n  },\n};\n```\n\nLANGUAGE: html\nCODE:\n```\n<div :style=\"{ height: '150px' }\">\n  <van-slider v-model=\"value\" vertical @change=\"onChange\" />\n  <van-slider\n    v-model=\"value2\"\n    range\n    vertical\n    style=\"margin-left: 100px;\"\n    @change=\"onChange\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Picker with Disabled Option\nDESCRIPTION: This snippet demonstrates how to disable specific options in the Vant Picker component.  The `disabled` property is set to `true` for the 'Delaware' option, making it unselectable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      { text: 'Delaware', value: 'Delaware', disabled: true },\n      { text: 'Florida', value: 'Florida' },\n      { text: 'Wenzhou', value: 'Wenzhou' },\n    ];\n    return { columns };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic RadioGroup Usage - HTML\nDESCRIPTION: This HTML snippet showcases the basic usage of the RadioGroup and Radio components.  It uses v-model to bind the checked radio's name to a variable. The Radio components are nested within the RadioGroup component. The `name` prop must be unique within the group.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\">Radio 1</van-radio>\n  <van-radio name=\"2\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Selecting Time Range with PickerGroup in Vue HTML\nDESCRIPTION: This code demonstrates using PickerGroup to select a time range using two TimePicker components.  Tabs are set to 'Start Time' and 'End Time'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"Title\"\n  :tabs=\"['Start Time', 'End Time']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-time-picker v-model=\"startTime\" />\n  <van-time-picker v-model=\"endTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example - FloatingPanel - HTML\nDESCRIPTION: Demonstrates basic usage of the FloatingPanel component in HTML.  It populates the panel with a list of cells from the Vant CellGroup component. A loop iterates 26 times, creating a cell for each letter of the alphabet.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-panel>\n  <van-cell-group>\n    <van-cell\n      v-for=\"i in 26\"\n      :key=\"i\"\n      :title=\"String.fromCharCode(i + 64)\"\n      size=\"large\"\n    />\n  </van-cell-group>\n</van-floating-panel>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with sticky layout in Vue\nDESCRIPTION: This snippet shows how to enable sticky layout for the van-tabs component using the sticky attribute. When sticky is set to true, the tabs will stick to the top of the viewport when they reach the top during scrolling.  This example also uses `v-for` to generate the tabs dynamically.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" sticky>\n  <van-tab v-for=\"index in 4\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Elements in Vant Space\nDESCRIPTION: This HTML snippet demonstrates how to enable automatic wrapping of elements within a horizontal Vant Space using the `wrap` property.  If the elements exceed the available width, they will wrap to the next line.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-space wrap>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Watermark Component in Vue.js\nDESCRIPTION: Registers the Vant Watermark component globally within a Vue.js application. This allows the component to be used in any part of the application. Requires importing `createApp` from 'vue' and `Watermark` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Watermark } from 'vant';\n\nconst app = createApp();\napp.use(Watermark);\n```\n\n----------------------------------------\n\nTITLE: AddressEdit Instance Usage - Typescript\nDESCRIPTION: Shows how to obtain a reference to the AddressEdit component instance using `ref` and call its methods, specifically `setAddressDetail`. This requires importing the `AddressEditInstance` type from `vant`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { AddressEditInstance } from 'vant';\n\nconst addressEditRef = ref<AddressEditInstance>();\n\naddressEditRef.value?.setAddressDetail('');\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with custom title slot in Vue\nDESCRIPTION: This snippet shows how to use the title slot to customize the content of the tab titles. It uses the van-icon component from Vant to add an icon to each tab title.  The `v-for` directive generates dynamic tabs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab v-for=\"index in 2\">\n    <template #title><van-icon name=\"more-o\" />标签</template>\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant List Usage with Loading and Finished States\nDESCRIPTION: Demonstrates the basic usage of the Vant List component, including binding the `loading` and `finished` states and handling the `load` event. The example updates a list with simulated asynchronous data loading.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-list\n  v-model:loading=\"loading\"\n  :finished=\"finished\"\n  finished-text=\"没有更多了\"\n  @load=\"onLoad\"\n>\n  <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n</van-list>\n```\n\n----------------------------------------\n\nTITLE: PostCSS Default Configuration (JavaScript)\nDESCRIPTION: This is the default PostCSS configuration used by vant-cli, which includes autoprefixer.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Styled NoticeBar\nDESCRIPTION: This HTML snippet demonstrates how to customize the appearance of the Vant NoticeBar component using CSS styles. It sets the text color, background color, and left icon using the `color`, `background`, and `left-icon` attributes, respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar color=\"#1989fa\" background=\"#ecf9ff\" left-icon=\"info-o\">\n  Short Content\n</van-notice-bar>\n```\n\n----------------------------------------\n\nTITLE: Setting Stop Order\nDESCRIPTION: This code snippet demonstrates how to set the stop order of the digits in the RollingText component.  It sets the `stop-order` to `rtl` to make the animation stop from right to left (least significant digit first). Vant RollingText component required.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :start-num=\"0\" :target-num=\"54321\" stop-order=\"rtl\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text for Area Columns\nDESCRIPTION: Shows how to set placeholder text for each column in the Vant Area component using the `columns-placeholder` prop.  This provides helpful hints to the user about what to select in each column.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-area\n  title=\"标题\"\n  :area-list=\"areaList\"\n  :columns-placeholder=\"['省份', '城市', '区县']\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Day Text - HTML\nDESCRIPTION: Demonstrates using the `formatter` prop to customize the text and information displayed for each day in the Vant Calendar component.  The `formatter` function allows modification of each day's properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" type=\"range\" :formatter=\"formatter\" />\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Description (HTML)\nDESCRIPTION: This HTML snippet configures the ShareSheet to display a description.  The `description` prop on the `van-share-sheet` component sets the main description, while the `description` property within an option object adds a description to that specific option.  The `v-model:show` and `:options` props are used to control visibility and data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-share-sheet\n  v-model:show=\"showShare\"\n  :options=\"options\"\n  title=\"立即分享给好友\"\n  description=\"描述信息\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling and readonly input field\nDESCRIPTION: This example shows how to disable or make the `van-field` component readonly.  The `readonly` attribute prevents input, while the `disabled` attribute completely disables the field. Both fields are placed inside a `van-cell-group`. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field label=\"文本\" model-value=\"输入框只读\" readonly />\n  <van-field label=\"文本\" model-value=\"输入框已禁用\" disabled />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: DatePicker Filter Setup\nDESCRIPTION: Sets up the component with the filter function in a Vue 3 setup function.  It initializes a `currentDate` ref and the `columnsType` array, defines the filter function, and defines the `minDate` and `maxDate` properties for the component. The component emits changes to `currentDate` based on user selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01']);\n    const columnsType = ['year', 'month'];\n    const filter = (type, options) => {\n      if (type === 'month') {\n        return options.filter((option) => Number(option.value) % 6 === 0);\n      }\n      return options;\n    };\n\n    return {\n      filter,\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentTime,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Columns Number\nDESCRIPTION: This HTML snippet demonstrates how to configure the number of columns to be displayed in the Area component using the `columns-num` property.  The default value is 3, corresponding to province, city, and county. Setting it to 2 will create a two-level picker.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-area title=\"Title\" :area-list=\"areaList\" :columns-num=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Sized Stepper - HTML\nDESCRIPTION: An example showing how to customize the size of the input and buttons using the `input-width` and `button-size` props.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" input-width=\"40px\" button-size=\"32px\" />\n```\n\n----------------------------------------\n\nTITLE: AddressEdit Basic Usage - HTML\nDESCRIPTION: This HTML snippet shows a basic implementation of the AddressEdit component.  It includes props such as area-list, show-delete, show-set-default, show-search-result, search-result, and area-columns-placeholder.  It also demonstrates event bindings for save, delete, and change-detail events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-address-edit\n  :area-list=\"areaList\"\n  show-delete\n  show-set-default\n  show-search-result\n  :search-result=\"searchResult\"\n  :area-columns-placeholder=\"['请选择', '请选择', '请选择']\"\n  @save=\"onSave\"\n  @delete=\"onDelete\"\n  @change-detail=\"onChangeDetail\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Horizontal RadioGroup Arrangement\nDESCRIPTION: Arranges the radio buttons horizontally by setting the `direction` property of the RadioGroup component to `horizontal`. This snippet uses the `van-radio-group` and `van-radio` components, with the `direction` attribute set to horizontal.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\" direction=\"horizontal\">\n  <van-radio name=\"1\">单选框 1</van-radio>\n  <van-radio name=\"2\">单选框 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Customize Single Preview Image - HTML & JavaScript\nDESCRIPTION: Shows how to customize the style and events of a single preview image.  It sets `deletable` to false to hide the delete icon and uses the `beforeDelete` hook to handle delete events. Also demonstrates setting `imageFit` property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" :deletable=\"false\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/sand.jpeg',\n        deletable: true,\n        beforeDelete: () => {\n          showToast(\n            'Customize the events and styles of a single preview image',\n          );\n        },\n      },\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/tree.jpeg',\n        imageFit: 'contain',\n      },\n    ]);\n\n    return { fileList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TimePicker Range Setup with Vue Composition API\nDESCRIPTION: JavaScript code setting up the `currentTime` ref for the TimePicker, to show default values.  This example is associated with limiting the hour and minute range using the min and max props.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '35']);\n    return { currentTime };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Upload Area - HTML\nDESCRIPTION: Shows how to customize the upload area using the default slot.  This allows you to replace the default upload button with custom content, such as a `van-button` component with an icon and text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader>\n  <van-button icon=\"plus\" type=\"primary\">Upload Image</van-button>\n</van-uploader>\n```\n\n----------------------------------------\n\nTITLE: Stepper Custom Size Configuration in Vue\nDESCRIPTION: This code demonstrates customizing the size of the Vant Stepper component's input and buttons using the `input-width` and `button-size` attributes. This allows for flexible styling to fit different layout requirements. The sizes are specified in CSS units such as pixels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" input-width=\"40px\" button-size=\"32px\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Input Value - JavaScript\nDESCRIPTION: This JavaScript code defines a formatter function that removes all digits from the input value. It then initializes two reactive variables, value1 and value2, and returns them along with the formatter function in the setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value1 = ref('');\n    const value2 = ref('');\n    const formatter = (value) => value.replace(/\\d/g, '');\n\n    return {\n      value1,\n      value2,\n      formatter,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Options Filter - HTML\nDESCRIPTION: This HTML snippet demonstrates the use of the `filter` prop in Vant DatePicker. The `:filter` is bound to a function defined in the component's JavaScript, which allows filtering of options based on certain criteria. In this case, the filter is used to show only months that are multiples of 6.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"Choose Year-Month\"\n  :filter=\"filter\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining the First Day of Week - HTML\nDESCRIPTION: Sets the first day of the week for the Vant Calendar component using the `first-day-of-week` prop. In this example, week starts on Monday (1). The valid values range from 0 (Sunday) to 6 (Saturday).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar first-day-of-week=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Icon - Vue\nDESCRIPTION: Customizes the icon displayed within the Toast message, using either a Vant icon name or an image URL. This allows the toast to visually represent the message more effectively. Requires the showToast function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nshowToast({\n  message: '自定义图标',\n  icon: 'like-o',\n});\n\nshowToast({\n  message: '自定义图片',\n  icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/logo.png',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showLoadingToast } from 'vant';\n\nshowLoadingToast({\n  message: '加载中...',\n  forbidClick: true,\n  loadingType: 'spinner',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme via CSS Variables - CSS\nDESCRIPTION: This CSS code demonstrates how to override CSS variables to customize the theme of Vant components. It overrides the `--van-button-primary-background` variable to change the background color of primary buttons to red.  The `:root:root` selector is used to increase specificity and ensure the override takes effect.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* the Primary Button will turn red */\n:root:root {\n  --van-button-primary-background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Overlay Usage in Vue\nDESCRIPTION: This example shows the basic implementation of the Vant Overlay component within a Vue component. It includes a button to toggle the overlay's visibility and the overlay component itself, which closes when clicked. Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" text=\"显示遮罩层\" @click=\"show = true\" />\n<van-overlay :show=\"show\" @click=\"show = false\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Sidebar with Badge in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display badges on Vant Sidebar items. It uses the `dot` and `badge` attributes of the `van-sidebar-item` component to show a red dot and a numbered badge, respectively. These badges can be used to indicate notifications or unread items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\">\n  <van-sidebar-item title=\"Title\" dot />\n  <van-sidebar-item title=\"Title\" badge=\"5\" />\n  <van-sidebar-item title=\"Title\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: FloatingPanel TypeScript Type Definition Import\nDESCRIPTION: Imports the TypeScript type definition for the FloatingPanelProps. This allows for type-safe usage of the component's props in TypeScript projects. Requires the Vant UI library with TypeScript support.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FloatingPanelProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Loading for Image in HTML\nDESCRIPTION: Demonstrates how to enable lazy loading for an image using the lazy-load property. Lazy loading improves performance by loading images only when they are visible in the viewport. Requires the Lazyload component to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"100\"\n  height=\"100\"\n  lazy-load\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Vant\nDESCRIPTION: This JavaScript code configures the Vite build tool to automatically import Vant components and their styles using `unplugin-vue-components` and `@vant/auto-import-resolver`.  It requires `vue` from `@vitejs/plugin-vue`, `AutoImport` from `unplugin-auto-import/vite`, `Components` from `unplugin-vue-components/vite`, and `VantResolver` from `@vant/auto-import-resolver`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport vue from '@vitejs/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default {\n  plugins: [\n    vue(),\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Countdown - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize the useCountDown hook with a specified time (24 hours in milliseconds) and start the countdown.  It imports the `useCountDown` function and sets up a Vue component with the countdown logic, returning the `current` time object for display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCountDown } from '@vant/use';\n\nexport default {\n  setup() {\n    const countDown = useCountDown({\n      time: 24 * 60 * 60 * 1000,\n    });\n\n    countDown.start();\n\n    return {\n      current: countDown.current,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Icon Color - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the color of the Vant loading icon using the `color` attribute. It shows examples of both the default 'circular' type and the 'spinner' type with a custom color set to \"#1989fa\". This allows you to match the loading icon's color to your application's design.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-loading color=\"#1989fa\" />\n\n<van-loading type=\"spinner\" color=\"#1989fa\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Rate - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Rate example. It defines a reactive variable `value` using `ref`, which is bound to the `v-model` of the `van-rate` component. This allows for two-way data binding with the rate's value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(3);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing CountDown Style with Slots - HTML\nDESCRIPTION: This code snippet demonstrates customizing the CountDown component's appearance using slots. It accesses the `timeData` object within the default slot to display hours, minutes, and seconds with custom styling. The styling for the colon and block elements is also provided in the `<style>` tag. Dependencies: Requires the use of a CSS block with .colon and .block classes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down :time=\"time\">\n  <template #default=\"timeData\">\n    <span class=\"block\">{{ timeData.hours }}</span>\n    <span class=\"colon\">:</span>\n    <span class=\"block\">{{ timeData.minutes }}</span>\n    <span class=\"colon\">:</span>\n    <span class=\"block\">{{ timeData.seconds }}</span>\n  </template>\n</van-count-down>\n\n<style>\n  .colon {\n    display: inline-block;\n    margin: 0 4px;\n    color: #1989fa;\n  }\n  .block {\n    display: inline-block;\n    width: 22px;\n    color: #fff;\n    font-size: 12px;\n    text-align: center;\n    background-color: #1989fa;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting up Reactive Show Variable - JavaScript\nDESCRIPTION: This snippet shows how to set up a reactive variable `show` using the `ref` function from Vue. This variable is then used to control the visibility of the Dialog component in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return { show };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Custom Columns Structure\nDESCRIPTION: This code snippet demonstrates how to use the columns-field-names prop to customize the structure of the columns data, allowing you to use different field names for text, value, and children properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-picker\n  title=\"标题\"\n  :columns=\"columns\"\n  :columns-field-names=\"customFieldName\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Slider with Range (Dual Handles) in Vue\nDESCRIPTION: This snippet illustrates how to enable the range mode of the Vant Slider, which provides two handles for selecting a range of values. The 'value' is initialized as an array, and the onChange function logs the array value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    // 双滑块模式时，值必须是数组\n    const value = ref([10, 50]);\n    const onChange = (value) => showToast('当前值：' + value);\n    return {\n      value,\n      onChange,\n    };\n  },\n};\n```\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" range @change=\"onChange\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Cascaded Selection\nDESCRIPTION: This code snippet demonstrates the configuration of the Vant Picker component for cascaded selection using the children field in the columns data. This example uses nested arrays of objects to define the cascading structure.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-picker title=\"标题\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Scrollspy Tabs - HTML\nDESCRIPTION: Enables scrollspy mode for the tabs using the `scrollspy` prop. In this mode, the content is tiled. Also uses sticky mode to keep the tabs at the top. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" scrollspy sticky>\n  <van-tab v-for=\"index in 8\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Option Filtering - HTML\nDESCRIPTION: This code snippet demonstrates how to filter TimePicker options using the `filter` prop. The TimePicker can be configured to limit option availability using this prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker v-model=\"currentTime\" title=\"选择时间\" :filter=\"filter\" />\n```\n\n----------------------------------------\n\nTITLE: Icon Buttons with Vant\nDESCRIPTION: This HTML snippet shows how to add icons to Vant Buttons using the `icon` attribute.  The icon can be specified by its name (referencing an icon component) or by providing a URL to an image.  Icons can be positioned either to the left (default) or right of the button text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-button icon=\"plus\" type=\"primary\" />\n<van-button icon=\"plus\" type=\"primary\">按钮</van-button>\n<van-button\n  plain\n  icon=\"https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png\"\n  type=\"primary\"\n>\n  按钮\n</van-button>\n```\n\n----------------------------------------\n\nTITLE: Basic PasswordInput Usage with NumberKeyboard - JavaScript\nDESCRIPTION: Provides the Vue component setup for the basic PasswordInput example. It uses refs to manage the input value and keyboard visibility, returning them to the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('123');\n    const showKeyboard = ref(true);\n\n    return {\n      value,\n      showKeyboard,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing AddressEdit Instance - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to access the AddressEdit component instance using a ref and call its methods. It shows how to use `AddressEditInstance` type to provide type safety when interacting with the component instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { AddressEditInstance } from 'vant';\n\nconst addressEditRef = ref<AddressEditInstance>();\n\naddressEditRef.value?.setAddressDetail('');\n```\n\n----------------------------------------\n\nTITLE: Stepper with Integer Constraint - HTML\nDESCRIPTION: An example demonstrating how to constrain the stepper's value to be an integer using the `integer` prop. The stepper will only allow integer values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" integer />\n```\n\n----------------------------------------\n\nTITLE: Sticky with Offset Bottom in HTML\nDESCRIPTION: This snippet demonstrates how to use the `offset-bottom` and `position` properties to make the component stick to the bottom of the viewport. The `offset-bottom` attribute is set to 50, and the `position` is set to \"bottom\", so the sticky element will stay 50 pixels above the bottom of the screen when it sticks.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-sticky :offset-bottom=\"50\" position=\"bottom\">\n  <van-button type=\"primary\">吸底距离</van-button>\n</van-sticky>\n```\n\n----------------------------------------\n\nTITLE: Basic DatePicker Usage - HTML\nDESCRIPTION: This code snippet shows the basic usage of the Vant DatePicker component in a Vue template. It uses the `van-date-picker` tag with `v-model` for data binding, `title` for the picker's title, and `min-date` and `max-date` to define the selectable date range.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"Choose Date\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Stepper Decimal Length Configuration in Vue\nDESCRIPTION: This code demonstrates how to control the number of decimal places displayed in the Vant Stepper. The `decimal-length` attribute is used to limit the number of decimal places, ensuring a consistent format for numeric values.  The component rounds the value accordingly to the defined number of decimal places.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" step=\"0.2\" :decimal-length=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Badge with Maximum Value\nDESCRIPTION: This snippet demonstrates how to use the `max` property to limit the displayed value of the badge. When the content exceeds the maximum value, the badge will display `{max}+`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"20\" max=\"9\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"50\" max=\"20\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"200\" max=\"99\">\n  <div class=\"child\" />\n</van-badge>\n```\n\n----------------------------------------\n\nTITLE: Setting label alignment of the input field\nDESCRIPTION: This example showcases how to set the alignment of the label text in a `van-field` component using the `label-align` property. Options include `center`, `right`, and `top`. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value\"\n    label=\"文本\"\n    placeholder=\"顶部对齐\"\n    label-align=\"top\"\n  />\n  <van-field\n    v-model=\"value2\"\n    label=\"文本\"\n    placeholder=\"左对齐\"\n    label-align=\"left\"\n  />\n  <van-field\n    v-model=\"value3\"\n    label=\"文本\"\n    placeholder=\"居中对齐\"\n    label-align=\"center\"\n  />\n  <van-field\n    v-model=\"value4\"\n    label=\"文本\"\n    placeholder=\"右对齐\"\n    label-align=\"right\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage - Vue Setup Script\nDESCRIPTION: Sets up the reactive data and options needed for the basic DropdownMenu example using Vue's Composition API. Defines `value1`, `value2`, `option1`, and `option2` as reactive variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value1 = ref(0);\n    const value2 = ref('a');\n    const option1 = [\n      { text: 'Option1', value: 0 },\n      { text: 'Option2', value: 1 },\n      { text: 'Option3', value: 2 },\n    ];\n    const option2 = [\n      { text: 'Option A', value: 'a' },\n      { text: 'Option B', value: 'b' },\n      { text: 'Option C', value: 'c' },\n    ];\n\n    return {\n      value1,\n      value2,\n      option1,\n      option2,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: NavBar Right Button Click Handler\nDESCRIPTION: JavaScript setup function that handles both left and right button click events in the Vant NavBar.  The `onClickLeft` function calls `history.back()` and `onClickRight` displays a toast message.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onClickLeft = () => history.back();\n    const onClickRight = () => showToast('Button');\n    return {\n      onClickLeft,\n      onClickRight,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Popover with Custom Content Setup - JavaScript\nDESCRIPTION: Sets up the state needed for the Popover component with custom content in a Vue setup function.  It defines a reactive `showPopover` ref to control the popover's visibility.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    return { showPopover };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: NavBar with Right Button\nDESCRIPTION: Adds a clickable button to the right side of the NavBar. It includes the `right-text` property and binds the `click-right` event to the `onClickRight` method, which displays a toast message. Dependencies: vant showToast.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar\n  title=\"标题\"\n  left-text=\"返回\"\n  right-text=\"按钮\"\n  left-arrow\n  @click-left=\"onClickLeft\"\n  @click-right=\"onClickRight\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using ImagePreview Component - HTML\nDESCRIPTION: Demonstrates the basic HTML structure for using the ImagePreview component with v-model binding for show state and binding the images array. An event handler `@change` is used for image change events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-image-preview v-model:show=\"show\" :images=\"images\" @change=\"onChange\">\n  <template v-slot:index>第{{ index + 1 }}页</template>\n</van-image-preview>\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive 'activeNames' for Collapse Component\nDESCRIPTION: This Javascript snippet demonstrates how to set up the reactive `activeNames` property using Vue's `ref` function. It initializes `activeNames` with an array containing '1', indicating that the first panel is initially active. This property is then returned from the setup function, making it available in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeNames = ref(['1']);\n    return { activeNames };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Checkbox - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Checkbox example. It defines reactive variables `checked` and `groupChecked` using `ref`, which are bound to the `v-model` of the `van-checkbox` and `van-checkbox-group` components, respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(false);\n    const groupChecked = ref([]);\n    return {\n      checked,\n      groupChecked,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Cell with Large Size\nDESCRIPTION: This example shows how to use the `size` property of the `van-cell` component to increase the cell size.  The `size` prop is set to `large`.  A `label` is also added to one of the cells.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"单元格\" value=\"内容\" size=\"large\" />\n<van-cell title=\"单元格\" value=\"内容\" size=\"large\" label=\"描述信息\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Skeleton Types Import - TypeScript\nDESCRIPTION: This snippet demonstrates how to import type definitions for the Vant Skeleton components in TypeScript. This allows you to strongly type your code when working with the Vant Skeleton components, improving code maintainability and reducing runtime errors. The imported types include props for the main Skeleton component as well as the specific components like SkeletonImage, SkeletonTitle, and SkeletonParagraph, along with shape-related type definitions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  SkeletonProps,\n  SkeletonImageProps,\n  SkeletonTitleProps,\n  SkeletonAvatarShape,\n  SkeletonImageShape,\n  SkeletonParagraphProps,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Description - HTML\nDESCRIPTION: Renders an ActionSheet with a description and configures it to close when an action is clicked. It uses the `description` property to set the description text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet\n  v-model:show=\"show\"\n  :actions=\"actions\"\n  cancel-text=\"取消\"\n  description=\"这是一段描述信息\"\n  close-on-click-action\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Lazyload Component in Vue\nDESCRIPTION: Registers the Lazyload component globally in a Vue application. It imports the Lazyload module from 'vant' and uses the app.use() method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Lazyload } from 'vant';\n\nconst app = createApp();\napp.use(Lazyload);\n```\n\n----------------------------------------\n\nTITLE: Basic Circle Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Circle component in a Vue template. The `rate` prop defines the target progress, and `v-model:current-rate` binds to the animated progress value.  `speed` controls the animation speed. `text` will be displayed inside circle.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"30\"\n  :speed=\"100\"\n  :text=\"text\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Field Names Template\nDESCRIPTION: This HTML snippet demonstrates the use of the `:field-names` prop in the `van-cascader` component to map the default field names to the custom ones specified. In this case `text` is mapped to `name`, `value` to `code`, and `children` to `items`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-cascader\n  v-model=\"code\"\n  title=\"Select Area\"\n  :options=\"options\"\n  :field-names=\"fieldNames\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Lazyload Usage - JavaScript\nDESCRIPTION: This JavaScript snippet provides the data that is used in the basic usage example. It defines a list of image URLs which will be used by the v-lazy directive.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    return {\n      imageList: [\n        'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n        'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n      ],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Fit Mode for Vant Image in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the 'fit' property of the Vant Image component to control how the image is scaled to fit its container. The 'contain' value ensures the entire image is visible while maintaining its aspect ratio.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"10rem\"\n  height=\"10rem\"\n  fit=\"contain\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Radio Mode Data Setup - JavaScript\nDESCRIPTION: Sets up the reactive data for the Radio Mode example. Defines activeId, activeIndex and the items array, which represents the tree structure.  Requires the 'vue' library for reactivity using ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeId = ref(1);\n    const activeIndex = ref(0);\n    const items = [\n      {\n        text: 'Group 1',\n        children: [\n          { text: 'Delaware', id: 1 },\n          { text: 'Florida', id: 2 },\n          { text: 'Georgia', id: 3, disabled: true },\n        ],\n      },\n      {\n        text: 'Group 2',\n        children: [\n          { text: 'Alabama', id: 4 },\n          { text: 'Kansas', id: 5 },\n          { text: 'Louisiana', id: 6 },\n        ],\n      },\n      { text: 'Group 3', disabled: true },\n    ];\n\n    return {\n      items,\n      activeId,\n      activeIndex,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Loading SubmitBar - HTML\nDESCRIPTION: Demonstrates how to display a loading indicator on the SubmitBar by setting the `loading` prop to `true`. It also sets the `price` and `button-text` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar loading :price=\"3050\" button-text=\"Submit\" @submit=\"onSubmit\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Overlay component in a Vue template.  A button toggles the visibility of the overlay via the `show` prop. Clicking the overlay sets `show` to false, hiding it. Depends on a `show` variable managed by the Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" text=\"Show Overlay\" @click=\"show = true\" />\n<van-overlay :show=\"show\" @click=\"show = false\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Sticky Usage - HTML\nDESCRIPTION: Demonstrates the basic implementation of the Vant Sticky component.  It wraps a `van-button` component with the `van-sticky` component, making the button stick to the top of the screen when it scrolls out of view. No special props are used in this example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-sticky>\n  <van-button type=\"primary\">Basic Usage</van-button>\n</van-sticky>\n```\n\n----------------------------------------\n\nTITLE: Restricting Drag Area of FloatingPanel\nDESCRIPTION: Demonstrates how to restrict the draggable area of the FloatingPanel to only the header by setting `content-draggable` to `false`. This prevents dragging the panel by its content. Requires Vant UI library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-panel :content-draggable=\"false\">\n  <div style=\"text-align: center; padding: 15px\">\n    <p>内容不可拖拽</p>\n  </div>\n</van-floating-panel>\n```\n\n----------------------------------------\n\nTITLE: Vant List with Error Handling\nDESCRIPTION: Demonstrates error handling with the Vant List component using the `error` prop. When an error occurs during data loading, the `error` state is set to true, displaying an error message that triggers a reload on click.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-list\n  v-model:loading=\"loading\"\n  v-model:error=\"error\"\n  error-text=\"请求失败，点击重新加载\"\n  @load=\"onLoad\"\n>\n  <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n</van-list>\n```\n\n----------------------------------------\n\nTITLE: Custom Action Slot - Vue HTML\nDESCRIPTION: Demonstrates how to customize the action element (e.g., the expand/collapse button) using a slot. The `#action` slot is used to render custom content based on the `expanded` state. The text displayed changes between 'Collapse' and 'Expand' depending on whether the text is expanded or collapsed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis :content=\"text\">\n  <template #action=\"{ expanded }\">\n    {{ expanded ? 'Collapse' : 'Expand' }}\n  </template>\n</van-text-ellipsis>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage - HTML\nDESCRIPTION: Implements basic usage of the BackTop component within a Vue template.  It renders a list of cells and displays a BackTop component at the bottom of the page which appears when the page is scrolled.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n\n<van-back-top />\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Popover Setup - JavaScript\nDESCRIPTION: Sets up the state and functions for the uncontrolled Popover component in a Vue setup function.  It defines an `actions` array to populate the Popover and an `onSelect` function that displays a toast message when an action is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const actions = [\n      { text: 'Option 1' },\n      { text: 'Option 2' },\n      { text: 'Option 3' },\n    ];\n    const onSelect = (action) => showToast(action.text);\n    return {\n      actions,\n      onSelect,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Preview Size - HTML\nDESCRIPTION: Shows how to customize the preview size using the preview-size prop. The size can be specified as a number (in pixels), a string with a unit (e.g., '5rem'), or an array with width and height values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- 不指定单位，默认为 px -->\n<van-uploader v-model=\"fileList\" preview-size=\"60\" />\n<!-- 指定单位，支持 rem, vh, vw -->\n<van-uploader v-model=\"fileList\" preview-size=\"5rem\" />\n\n```\n\n----------------------------------------\n\nTITLE: Basic Popup Usage - HTML and JavaScript\nDESCRIPTION: Demonstrates the basic usage of the `van-popup` component with `v-model:show` for controlling visibility and styling via the `style` prop.  It also includes an example of toggling the popup's visibility using a button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"Show Popup\" is-link @click=\"showPopup\" />\n<van-popup v-model:show=\"show\" :style=\"{ padding: '64px' }\">Content</van-popup>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const showPopup = () => {\n      show.value = true;\n    };\n    return {\n      show,\n      showPopup,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Stepper - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Stepper example. It initializes a reactive variable `value` using `ref`, which is bound to the `v-model` of the `van-stepper` component. This allows for two-way data binding with the stepper's value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(1);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Radio - HTML\nDESCRIPTION: This code snippet demonstrates how to integrate the Vant Radio and RadioGroup components into a Vant Form field. It uses the `#input` slot of the `van-field` component to embed the `van-radio-group` for a customized radio button selection within the form.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"radio\" label=\"Radio\">\n  <template #input>\n    <van-radio-group v-model=\"checked\" direction=\"horizontal\">\n      <van-radio name=\"1\">Radio 1</van-radio>\n      <van-radio name=\"2\">Radio 2</van-radio>\n    </van-radio-group>\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: CellGroup with Title\nDESCRIPTION: This code demonstrates how to add titles to `van-cell-group` components using the `title` property.  This creates visually distinct sections for different groups of cells. Two groups are shown, '分组1' and '分组2'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group title=\"分组1\">\n  <van-cell title=\"单元格\" value=\"内容\" />\n</van-cell-group>\n<van-cell-group title=\"分组2\">\n  <van-cell title=\"单元格\" value=\"内容\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Setting Pen Color in Vant Signature\nDESCRIPTION: Sets the pen color of the Signature component using the `pen-color` prop. The value is a string representing the desired color, e.g., '#ff0000' for red.  Requires the `onSubmit` and `onClear` event handlers.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-signature pen-color=\"#ff0000\" @submit=\"onSubmit\" @clear=\"onClear\" />\n```\n\n----------------------------------------\n\nTITLE: Popover with Disabled Actions - HTML\nDESCRIPTION: Implements a Popover component that disables specific actions using the `disabled` property of the action objects.  It binds the `showPopover` ref to the `v-model:show` prop and passes an array of `actions` to the component. The `reference` slot renders the button that triggers the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" :actions=\"actions\">\n  <template #reference>\n    <van-button type=\"primary\">Disable Action</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Multiple Mode TreeSelect Usage\nDESCRIPTION: Demonstrates using the TreeSelect component in multiple mode, allowing multiple items to be selected.  It uses the v-model directive to bind to an array of active IDs. Requires the 'vue' library and the 'vant' component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:active-id=\"activeIds\"\n  v-model:main-active-index=\"activeIndex\"\n  :items=\"items\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Swipe with Custom Indicator\nDESCRIPTION: This example demonstrates how to customize the indicators for the Vant Swipe component using the `indicator` slot. It uses a template with the `#indicator` directive to define custom markup for the indicator, displaying the current and total swipe counts. CSS styling is also provided for the custom indicator.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe>\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n  <template #indicator=\"{ active, total }\">\n    <div class=\"custom-indicator\">{{ active + 1 }}/{{ total }}</div>\n  </template>\n</van-swipe>\n\n<style>\n  .custom-indicator {\n    position: absolute;\n    right: 5px;\n    bottom: 5px;\n    padding: 2px 5px;\n    font-size: 12px;\n    background: rgba(0, 0, 0, 0.1);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vant List with Pull-to-Refresh Logic in Vue\nDESCRIPTION: Implements the pull-to-refresh logic for the Vant List component. It uses `ref` from Vue to manage the list data, loading, finished, and refreshing states. The `onRefresh` function clears the list and reloads data when the pull-to-refresh is triggered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const list = ref([]);\n    const loading = ref(false);\n    const finished = ref(false);\n    const refreshing = ref(false);\n\n    const onLoad = () => {\n      setTimeout(() => {\n        if (refreshing.value) {\n          list.value = [];\n          refreshing.value = false;\n        }\n\n        for (let i = 0; i < 10; i++) {\n          list.value.push(list.value.length + 1);\n        }\n        loading.value = false;\n\n        if (list.value.length >= 40) {\n          finished.value = true;\n        }\n      }, 1000);\n    };\n\n    const onRefresh = () => {\n      // 清空列表数据\n      finished.value = false;\n\n      // 重新加载数据\n      // 将 loading 设置为 true，表示处于加载状态\n      loading.value = true;\n      onLoad();\n    };\n\n    return {\n      list,\n      onLoad,\n      loading,\n      finished,\n      onRefresh,\n      refreshing,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Cascader Usage - HTML\nDESCRIPTION: Implements a basic Cascader component within a Field and Popup. It displays a link field which, when clicked, shows a popup containing the Cascader. The selected region is displayed in the field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"fieldValue\"\n  is-link\n  readonly\n  label=\"地区\"\n  placeholder=\"请选择所在地区\"\n  @click=\"show = true\"\n/>\n<van-popup v-model:show=\"show\" round position=\"bottom\">\n  <van-cascader\n    v-model=\"cascaderValue\"\n    title=\"请选择所在地区\"\n    :options=\"options\"\n    @close=\"show = false\"\n    @finish=\"onFinish\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Upload Status Logic - Vue\nDESCRIPTION: Implements the logic to simulate file upload status changes.  The afterRead function sets the file status to 'uploading' and then simulates a delay before setting the status to 'failed'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg',\n        status: 'uploading',\n        message: '上传中...',n      },\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/tree.jpeg',\n        status: 'failed',\n        message: '上传失败',\n      },\n    ]);\n\n    const afterRead = (file) => {\n      file.status = 'uploading';\n      file.message = '上传中...';\n\n      setTimeout(() => {\n        file.status = 'failed';\n        file.message = '上传失败';\n      }, 1000);\n    };\n\n    return {\n      fileList,\n      afterRead,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Simulating Video Barrage with Vue\nDESCRIPTION: This snippet demonstrates how to simulate video barrage playback by controlling the play and pause states of the Barrage component. It uses the auto-play prop set to false, along with play() and pause() methods to control the barrage animation.  It also includes buttons to add barrages, toggle play/pause.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-barrage v-model=\"list\" ref=\"barrage\" :auto-play=\"false\">\n  <div class=\"video\" style=\"width: 100%; height: 150px\"></div>\n</van-barrage>\n<van-space style=\"margin-top: 10px\">\n  <van-button @click=\"add\" type=\"primary\" size=\"small\" :disabled=\"!isPlay\">\n    弹幕\n  </van-button>\n  <van-button @click=\"toggle()\" size=\"small\">\n    {{ isPlay ? '暂停' : '开始' }}\n  </van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Vant List Component\nDESCRIPTION: This code snippet demonstrates how to handle errors when using the Vant List component. It includes the HTML template with the `van-list` component bound to `loading` and `error` states and the corresponding JavaScript setup using `ref` to manage the component's reactive states and the `onLoad` event handler, which simulates a failed fetch operation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-list\n  v-model:loading=\"loading\"\n  v-model:error=\"error\"\n  error-text=\"Request failed. Click to reload\"\n  @load=\"onLoad\"\n>\n  <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n</van-list>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const list = ref([]);\n    const error = ref(false);\n    const loading = ref(false);\n    const onLoad = () => {\n      fetchSomeThing().catch(() => {\n        loading.value = false;\n        error.value = true;\n      });\n    };\n\n    return {\n      list,\n      error,\n      onLoad,\n      loading,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Local Component Registration with Vant\nDESCRIPTION: Demonstrates local registration of a Vant component within a specific Vue component. This imports the component and registers it within the `components` option of the Vue component. Requires Vue and the Vant component library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'vant';\n\nexport default {\n  components: {\n    [Button.name]: Button,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TextEllipsis Usage - Vue HTML\nDESCRIPTION: Demonstrates the basic usage of the TextEllipsis component in a Vue template. It binds the `content` prop to a text variable defined in the component's setup function. This example displays a single line of text with ellipsis if it exceeds the available space.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis :content=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Picker with Multiple Columns\nDESCRIPTION: This snippet demonstrates the configuration of the Vant Picker component to display multiple columns. The `columns` array is structured as a two-dimensional array, where each inner array represents a column of options. This allows for selecting values from multiple categories simultaneously.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      [\n        { text: 'Monday', value: 'Monday' },\n        { text: 'Tuesday', value: 'Tuesday' },\n        { text: 'Wednesday', value: 'Wednesday' },\n        { text: 'Thursday', value: 'Thursday' },\n        { text: 'Friday', value: 'Friday' },\n      ],\n      [\n        { text: 'Morning', value: 'Morning' },\n        { text: 'Afternoon', value: 'Afternoon' },\n        { text: 'Evening', value: 'Evening' },\n      ],\n    ];\n\n    return { columns };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider ThemeVars Type Definition - TypeScript\nDESCRIPTION: This code snippet illustrates how to use the `ConfigProviderThemeVars` type definition in TypeScript to provide type hints for theme variables when using the `ConfigProvider` component. This allows to ensure that theme variables are correctly substituted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigProviderThemeVars } from 'vant';\n\nconst themeVars: ConfigProviderThemeVars = {\n  sliderBarHeight: '4px',\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Highlight Usage - TypeScript\nDESCRIPTION: Provides the TypeScript setup for the basic usage of the Vant Highlight component. It defines the `text` and `keywords` variables, and returns them so they can be bound in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      'Take your time and be patient. Life itself will eventually answer all those questions it once raised for you.';\n    const keywords = 'questions';\n\n    return {\n      text,\n      keywords,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Pagination component in Vue\nDESCRIPTION: This code snippet demonstrates how to install and register the Vant Pagination component globally in a Vue application. It imports the necessary modules from 'vue' and 'vant' and then uses the `app.use` method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Pagination } from 'vant';\n\nconst app = createApp();\napp.use(Pagination);\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handling - JavaScript\nDESCRIPTION: Defines the JavaScript logic for handling click events on the overlay and close icon of the Vant Popup. It imports `ref` and `showToast` from Vue and Vant respectively. The `onClickOverlay` and `onClickCloseIcon` functions display a toast message when triggered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const onClickOverlay = () => {\n      showToast('click-overlay');\n    };\n    const onClickCloseIcon = () => {\n      showToast('click-close-icon');\n    };\n    return {\n      show,\n      onClickOverlay,\n      onClickCloseIcon,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider with Theme Variables\nDESCRIPTION: This code snippet illustrates how to use the ConfigProvider component to customize theme variables. It defines a reactive object themeVars containing CSS variable overrides for components like Rate and Slider. These variables are passed to the ConfigProvider via the theme-vars prop, allowing for localized styling within the ConfigProvider's scope.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider :theme-vars=\"themeVars\">\n  <van-form>\n    <van-field name=\"rate\" label=\"评分\">\n      <template #input>\n        <van-rate v-model=\"rate\" />\n      </template>\n    </van-field>\n    <van-field name=\"slider\" label=\"滑块\">\n      <template #input>\n        <van-slider v-model=\"slider\" />\n      </template>\n    </van-field>\n    <div style=\"margin: 16px\">\n      <van-button round block type=\"primary\" native-type=\"submit\">\n        提交\n      </van-button>\n    </div>\n  </van-form>\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Button Component in Vue\nDESCRIPTION: This JavaScript snippet demonstrates how to globally register the Vant Button component within a Vue.js application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses the Button component.  This makes the Button component available for use in any component within the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Button } from 'vant';\n\nconst app = createApp();\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: NavBar Right Button Action\nDESCRIPTION: Defines the `onClickRight` method to display a toast message when the right button is clicked using `showToast` from vant.  This function also includes the `onClickLeft` function for back navigation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onClickLeft = () => history.back();\n    const onClickRight = () => showToast('按钮');\n    return {\n      onClickLeft,\n      onClickRight,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Variables with ConfigProvider (Global) - HTML\nDESCRIPTION: This HTML code demonstrates how to modify CSS variables using the `ConfigProvider` component with `theme-vars-scope=\"global\"`.  Setting the `primaryColor` variable to red in `theme-vars` affects all components in the entire page.  The `theme-vars-scope=\"global\"` attribute ensures the styles affect the entire page.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider\n  :theme-vars=\"{ primaryColor: 'red' }\"\n  theme-vars-scope=\"global\"\n>\n  ...\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Custom Anchors Example - FloatingPanel - JavaScript\nDESCRIPTION: This script defines the data for the custom anchors example, setting the `anchors` array with three height values in pixels, calculated based on the window's inner height.  The `height` ref is initialized to the first anchor value, allowing for two-way binding with the FloatingPanel.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const anchors = [\n      100,\n      Math.round(0.4 * window.innerHeight),\n      Math.round(0.7 * window.innerHeight),\n    ];\n    const height = ref(anchors[0]);\n\n    return { anchors, height };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using useScrollParent Hook\nDESCRIPTION: This JavaScript code demonstrates the usage of the useScrollParent hook from the @vant/use library. It imports necessary Vue functions (ref, watch) and the useScrollParent and useEventListener hooks. It defines a setup function that initializes a ref for the root element, gets the scrollable parent using useScrollParent, and attaches a scroll event listener to the scrollable parent using useEventListener.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-scroll-parent.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watch } from 'vue';\nimport { useScrollParent, useEventListener } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n    const scrollParent = useScrollParent(root);\n\n    useEventListener(\n      'scroll',\n      () => {\n        console.log('scroll');\n      },\n      { target: scrollParent },\n    );\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: FloatingBubble with v-model\nDESCRIPTION: Demonstrates how to use `v-model:offset` to control the FloatingBubble's position. The HTML template binds `v-model:offset` to the `offset` ref, and sets the `axis` and `icon` props. The JavaScript code defines an `offset` ref with initial x and y coordinates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-bubble v-model:offset=\"offset\" axis=\"xy\" icon=\"chat\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const offset = ref({ x: 200, y: 400 });\n    return { offset };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Showing ImagePreview Close Icon - JavaScript\nDESCRIPTION: This snippet demonstrates enabling the close icon in the ImagePreview using the `closeable` option.  When set to `true`, a close icon appears in the top-right corner, allowing the user to dismiss the preview.  It utilizes the `showImagePreview` function from the `vant` library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  closeable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Components with lazy-component\nDESCRIPTION: This HTML snippet demonstrates the use of the `lazy-component` tag to enable lazy loading of a Vue component.  The `img` elements within the `lazy-component` tag, utilize the v-lazy directive for image loading.  The surrounding `lazy-component` tag ensures that the entire component is only loaded when it becomes visible in the viewport.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<lazy-component>\n  <img v-for=\"img in imageList\" v-lazy=\"img\" />\n</lazy-component>\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Date Selection - JavaScript\nDESCRIPTION: Handles the multiple date selection logic for the Vant Calendar component. The `onConfirm` function updates the text variable to display the number of selected dates. Relies on Vue Composition API for reactivity.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const text = ref('');\n    const show = ref(false);\n\n    const onConfirm = (dates) => {\n      show.value = false;\n      text.value = `选择了 ${dates.length} 个日期`;\n    };\n\n    return {\n      text,\n      show,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing the Vant Switch Node with a Slot\nDESCRIPTION: This code shows how to customize the Vant Switch's node (the moving part) using the `node` slot. It includes HTML for the switch, including the slot definition, as well as CSS for styling the content within the slot.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\">\n  <template #node>\n    <div class=\"icon-wrapper\">\n      <van-icon :name=\"checked ? 'success' : 'cross'\" />\n    </div>\n  </template>\n</van-switch>\n```\n\n----------------------------------------\n\nTITLE: Toggle All Collapse Items with Method Call\nDESCRIPTION: This HTML snippet shows how to integrate the `toggleAll` method to toggle all items in the collapse.  It includes two buttons, one to open all items and another to toggle all items. The `ref` attribute is used to get a reference to the Collapse component, enabling interaction with its methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\" ref=\"collapse\">\n  <van-collapse-item title=\"Title1\" name=\"1\">\n    The code is written for people to see and can be run on a machine.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title2\" name=\"2\">\n    Technology is nothing more than the common soul of those who develop it.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title3\" name=\"3\">\n    The frequency of people swearing during code reading is the only measure of\n    code quality.\n  </van-collapse-item>\n</van-collapse>\n\n<van-button type=\"primary\" @click=\"openAll\">Open All</van-button>\n<van-button type=\"primary\" @click=\"toggleAll\">Toggle All</van-button>\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection Setup - Vue.js\nDESCRIPTION: Defines the Vue.js setup function and logic for selecting a date range using two DatePicker components. It initializes reactive references for the start and end dates, computes the minimum date for the end date picker based on the selected start date, and defines `onConfirm` and `onCancel` methods. Includes min and max date properties for restricting the available dates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { computed, ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const startDate = ref(['2022', '06', '01']);\n    const endDate = ref(['2023', '06', '01']);\n    const endMinDate = computed(\n      () =>\n        new Date(\n          Number(startDate.value[0]),\n          Number(startDate.value[1]) - 1,\n          Number(startDate.value[2]),\n        ),\n    );\n\n    const onConfirm = () => {\n      showToast(`${startDate.value.join('/')} ${endDate.value.join('/')}`);\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      endMinDate,\n      endDate,\n      startDate,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Grid Layout with Justify Content - HTML\nDESCRIPTION: This code snippet showcases the use of the `justify` attribute on the `van-row` component to control the horizontal alignment of columns within the row. Different values for `justify` (center, end, space-between, space-around) are demonstrated.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-row justify=\"center\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n\n<van-row justify=\"end\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n\n<van-row justify=\"space-between\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n\n<van-row justify=\"space-around\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Basic PasswordInput Usage with NumberKeyboard - HTML\nDESCRIPTION: Demonstrates basic integration of PasswordInput with NumberKeyboard in a Vue template. It binds the input value and keyboard visibility, handling focus and blur events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- 密码输入框 -->\n<van-password-input\n  :value=\"value\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n<!-- 数字键盘 -->\n<van-number-keyboard\n  v-model=\"value\"\n  :show=\"showKeyboard\"\n  @blur=\"showKeyboard = false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CountDownInstance Type in Vue\nDESCRIPTION: Shows how to use the `CountDownInstance` type to define a ref for the `CountDown` component in Vue. This allows you to access the component's methods in a type-safe way. Requires importing `ref` from `vue` and `CountDownInstance` from `vant`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CountDownInstance } from 'vant';\n\nconst countDownRef = ref<CountDownInstance>();\n\ncountDownRef.value?.start();\n```\n\n----------------------------------------\n\nTITLE: Shaped Buttons with Vant\nDESCRIPTION: This HTML snippet demonstrates how to create square and round buttons using the `square` and `round` attributes of the Vant Button component.  Square buttons have no rounded corners, while round buttons have maximum rounded corners, giving them a circular appearance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-button square type=\"primary\">方形按钮</van-button>\n<van-button round type=\"success\">圆形按钮</van-button>\n```\n\n----------------------------------------\n\nTITLE: Left Label RadioGroup - HTML\nDESCRIPTION: This HTML snippet showcases how to position the label to the left of the radio button.  The `label-position` prop is set to \"left\" to achieve this layout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" label-position=\"left\">Radio 1</van-radio>\n  <van-radio name=\"2\" label-position=\"left\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Color - Vue\nDESCRIPTION: This code snippet demonstrates how to customize the color of the checkbox when it is in the checked state using the `checked-color` property. It allows you to visually highlight the selected checkboxes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\" checked-color=\"#ee0a24\">复选框</van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Vant Skeleton with Children and Loading State - HTML\nDESCRIPTION: This code shows how to conditionally display content based on a loading state. When `loading` is true, the skeleton is displayed; otherwise, the child content is shown.  The `loading` prop controls the visibility of the skeleton.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton title avatar :row=\"3\" :loading=\"loading\">\n  <div>Content</div>\n</van-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Slider - HTML\nDESCRIPTION: This code snippet demonstrates how to integrate the Vant Slider component within a Vant Form field. The `van-slider` component is placed within the `#input` slot of the `van-field` component, allowing the form to include a slider input for numerical selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-field name=\"slider\" label=\"Slider\">\n  <template #input>\n    <van-slider v-model=\"value\" />\n  </template>\n</van-field>\n```\n\n----------------------------------------\n\nTITLE: Controlling Barrage Playback with Vue Composition API\nDESCRIPTION: This TypeScript code defines the setup function for a Vue component that controls barrage playback. It uses the useToggle composable to manage the play/pause state and uses the watch function to automatically call play() or pause() on the Barrage component instance when the state changes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const defaultList = [\n      { id: 100, text: '轻量' },\n      { id: 101, text: '可定制的' },\n      { id: 102, text: '移动端' },\n      { id: 103, text: 'Vue' },\n      { id: 104, text: '组件库' },\n      { id: 105, text: 'VantUI' },\n      { id: 106, text: '666' },\n    ];\n\n    const list = ref([...defaultList]);\n    const barrage = ref<BarrageInstance>();\n    const add = () => {\n      list.value.push({ id: Math.random(), text: 'Barrage' });\n    };\n\n    const [isPlay, toggle] = useToggle(false);\n\n    watch(isPlay, () => {\n      if (isPlay.value) barrage.value?.play();\n      else barrage.value?.pause();\n    });\n\n    return { list, barrage, isPlay, toggle, add };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Submit Event in Vue\nDESCRIPTION: This snippet shows how to define the `onSubmit` method in a Vue component's setup function. The method uses the `showToast` function from Vant to display a message when the submit button is clicked. This demonstrates a simple event handling scenario.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onSubmit = () => showToast('点击按钮');\n    return {\n      onSubmit,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple Text Toast - Vue\nDESCRIPTION: Displays a basic text-based toast message on the screen using the showToast function. This function is a convenient way to quickly display simple notifications. Requires the showToast function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nshowToast('提示内容');\n```\n\n----------------------------------------\n\nTITLE: Basic Signature Component Usage\nDESCRIPTION: This example shows the basic integration of the Signature component with event handling for submit and clear actions. It utilizes Vue's `ref` for reactive data binding and `van-image` for displaying the generated image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-signature @submit=\"onSubmit\" @clear=\"onClear\" />\n<van-image v-if=\"image\" :src=\"image\" />\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Initial State - Vue\nDESCRIPTION: This code snippet sets the initial checked state of a CheckboxGroup. The `checked` ref contains an array of names corresponding to the initially selected checkboxes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(['a', 'b']);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Horizontal Checkbox Group - Vue\nDESCRIPTION: This snippet arranges the checkboxes in a horizontal direction using the `direction` property set to `horizontal` on the CheckboxGroup component. This allows for a more compact layout when space is limited.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox-group v-model=\"checked\" direction=\"horizontal\">\n  <van-checkbox name=\"a\">复选框 a</van-checkbox>\n  <van-checkbox name=\"b\">复选框 b</van-checkbox>\n</van-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Accessing CollapseItemInstance and calling toggle method\nDESCRIPTION: This TypeScript snippet shows how to obtain a reference to a `CollapseItemInstance` and use the `toggle` method to control its expanded state.  It imports the necessary type and uses Vue's `ref` to create a typed reference.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CollapseItemInstance } from 'vant';\n\nconst collapseItemRef = ref<CollapseItemInstance>();\n\ncollapseItemRef.value?.toggle();\n```\n\n----------------------------------------\n\nTITLE: Custom Content TreeSelect Usage\nDESCRIPTION: Demonstrates how to use the content slot to inject custom content into the TreeSelect component.  The content is conditionally rendered based on the activeIndex.  Requires the 'vue' library and the 'vant' component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:main-active-index=\"activeIndex\"\n  height=\"55vw\"\n  :items=\"items\"\n>\n  <template #content>\n    <van-image\n      v-if=\"activeIndex === 0\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg\"\n    />\n    <van-image\n      v-if=\"activeIndex === 1\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg\"\n    />\n  </template>\n</van-tree-select>\n```\n\n----------------------------------------\n\nTITLE: Compressing Image before Upload (HTML)\nDESCRIPTION: This HTML snippet demonstrates the usage of the `van-uploader` component, specifically the `before-read` prop. This prop is used to trigger a function before the file is read, allowing for image manipulation, such as compression, before the upload process begins.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_25\n\nLANGUAGE: HTML\nCODE:\n```\n<van-uploader :before-read=\"beforeRead\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Form and Field Components in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Form, Field, and CellGroup components from the Vant UI library in a Vue application. It imports the necessary modules and uses the `app.use()` method to register each component. This makes the components available for use in any template within the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Form, Field, CellGroup } from 'vant';\n\nconst app = createApp();\napp.use(Form);\napp.use(Field);\napp.use(CellGroup);\n```\n\n----------------------------------------\n\nTITLE: Popup Close Icon - HTML\nDESCRIPTION: Shows how to add a close icon to the Vant Popup using the `closeable` prop and customize its appearance using the `close-icon` and `close-icon-position` props. The `closeable` attribute displays the close icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-popup\n  v-model:show=\"show\"\n  closeable\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n<!-- 自定义图标 -->\n<van-popup\n  v-model:show=\"show\"\n  closeable\n  close-icon=\"close\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n<!-- 图标位置 -->\n<van-popup\n  v-model:show=\"show\"\n  closeable\n  close-icon-position=\"top-left\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing AddressEdit Component - Vue\nDESCRIPTION: Registers the AddressEdit component globally using `app.use` in a Vue application. This makes the component available for use in templates without needing to import it in each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { AddressEdit } from 'vant';\n\nconst app = createApp();\napp.use(AddressEdit);\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Icons using package managers\nDESCRIPTION: This code snippet shows how to install the `@vant/icons` package using various package managers such as npm, yarn, pnpm, and Bun.  Each command installs the package as a dependency in your project, enabling you to use Vant icons in your application. These commands are executed in the terminal.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-icons/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# with npm\nnpm i @vant/icons\n\n# with yarn\nyarn add @vant/icons\n\n# with pnpm\npnpm add @vant/icons\n\n# with Bun\nbun add @vant/icons\n```\n\n----------------------------------------\n\nTITLE: Wrapable NoticeBar\nDESCRIPTION: This HTML snippet demonstrates how to enable text wrapping within the NoticeBar component.  By setting `wrapable` to true, the text will wrap to the next line if it exceeds the available width, and `scrollable` is set to false to prevent scrolling.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar wrapable :scrollable=\"false\">\n  Technology is the common soul of the people who developed it.\n</van-notice-bar>\n```\n\n----------------------------------------\n\nTITLE: Scrollable NoticeBar\nDESCRIPTION: This HTML snippet demonstrates how to enable or disable scrolling of the NoticeBar content based on the length of the text. The `scrollable` prop controls whether the content scrolls if it exceeds the available width.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Enable scroll when text is short -->\n<van-notice-bar scrollable text=\"Short Content\" />\n\n<!-- Disable scroll when text is long -->\n<van-notice-bar\n  :scrollable=\"false\"\n  text=\"Technology is the common soul of the people who developed it.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Before Change Callback - JavaScript\nDESCRIPTION: Defines the `beforeChange` method that is called before a tab is changed.  It prevents changing to tab 1 immediately, and prevents changing to tab 3 after a 1 second delay. Uses Vue 3's `ref` to create the reactive `active` variable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const beforeChange = (index) => {\n      // prevent change\n      if (index === 1) {\n        return false;\n      }\n\n      // async\n      return new Promise((resolve) => {\n        setTimeout(() => resolve(index !== 3), 1000);\n      });\n    };\n\n    return {\n      active,\n      beforeChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Circle Size\nDESCRIPTION: Showcases how to customize the size of the Vant Circle component using the `size` prop, setting a specific width (e.g., 120px).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  size=\"120px\"\n  text=\"Custom Size\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Grid with Custom Content - HTML\nDESCRIPTION: Illustrates how to add custom content to the Vant Grid using the default slot of the GridItem component. In this example, each GridItem contains a Vant Image component displaying an image from a URL. The `border` prop is set to `false` to hide the grid borders.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :border=\"false\" :column-num=\"3\">\n  <van-grid-item>\n    <van-image\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg\"\n    />\n  </van-grid-item>\n  <van-grid-item>\n    <van-image\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg\"\n    />\n  </van-grid-item>\n  <van-grid-item>\n    <van-image\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-3.jpeg\"\n    />\n  </van-grid-item>\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Basic Tabbar Usage - JavaScript\nDESCRIPTION: Defines the `active` reactive variable using Vue's `ref` function, which is bound to the `v-model` of the Tabbar component.  This allows the selected tab to be dynamically controlled from the component's logic.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple Text Toast\nDESCRIPTION: This code snippet shows how to display a simple text toast message using the `showToast` function from Vant. The function takes a string as an argument, which is the message to be displayed in the toast.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nshowToast('Some messages');\n```\n\n----------------------------------------\n\nTITLE: Popover with Custom Content - Vue\nDESCRIPTION: Shows how to insert custom content into the Popover using the default slot. In this example, a Grid component is used.  Includes a reference button to trigger the popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\">\n  <van-grid\n    square\n    clickable\n    :border=\"false\"\n    column-num=\"3\"\n    style=\"width: 240px;\"\n  >\n    <van-grid-item\n      v-for=\"i in 6\"\n      :key=\"i\"\n      text=\"选项\"\n      icon=\"photo-o\"\n      @click=\"showPopover = false\"\n    />\n  </van-grid>\n  <template #reference>\n    <van-button type=\"primary\">自定义内容</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Single Preview Customization - HTML\nDESCRIPTION: Demonstrates customization of individual preview images using properties like imageFit, deletable, previewSize, and beforeDelete.  This allows for fine-grained control over how each image is displayed and handled.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" :deletable=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Component Loading Option\nDESCRIPTION: This JavaScript snippet shows how to configure the Lazyload directive to enable lazy loading of components. By setting the `lazyComponent` option to `true` during the `app.use(Lazyload, ...)` call, you can instruct the directive to handle the lazy loading of entire Vue components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 注册时设置`lazyComponent`选项\napp.use(Lazyload, {\n  lazyComponent: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Notify usage with auto and manual closing\nDESCRIPTION: Demonstrates how to display a notification message that automatically closes after 3 seconds, and how to manually close a notification.  Requires importing both showNotify and closeNotify from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify, closeNotify } from 'vant';\n\n// auto close after 3s\nshowNotify('Message');\n\n// manually close\ncloseNotify();\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Area Data Package\nDESCRIPTION: Demonstrates how to install the `@vant/area-data` package using various package managers (npm, yarn, pnpm, bun). This package provides a pre-built dataset of Chinese provinces, cities, and districts.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 npm\nnpm i @vant/area-data\n\n# 通过 yarn\nyarn add @vant/area-data\n\n# 通过 pnpm\npnpm add @vant/area-data\n\n# 通过 Bun\nbun add @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme with ConfigProvider - HTML\nDESCRIPTION: This HTML code shows how to wrap a Vant form with `van-rate` and `van-slider` components inside a `van-config-provider`, which provides the `theme-vars` prop to change the components theme. The theme vars are bound to a Vue component property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider :theme-vars=\"themeVars\">\n  <van-form>\n    <van-field name=\"rate\" label=\"Rate\">\n      <template #input>\n        <van-rate v-model=\"rate\" />\n      </template>\n    </van-field>\n    <van-field name=\"slider\" label=\"Slider\">\n      <template #input>\n        <van-slider v-model=\"slider\" />\n      </template>\n    </van-field>\n    <div style=\"margin: 16px\">\n      <van-button round block type=\"primary\" native-type=\"submit\">\n        Submit\n      </van-button>\n    </div>\n  </van-form>\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: NumberKeyboard for ID Card Input\nDESCRIPTION: This snippet demonstrates using the NumberKeyboard for ID card input by setting `extra-key` to 'X'. This provides an additional button for entering the 'X' character, which is often needed for ID card numbers.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-cell plain type=\"primary\" @touchstart.stop=\"show = true\">\n  弹出身份证号键盘\n</van-cell>\n<van-number-keyboard\n  :show=\"show\"\n  extra-key=\"X\"\n  close-button-text=\"完成\"\n  @blur=\"show = false\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: CountDown with Millisecond Precision in Vue Template\nDESCRIPTION: Enables millisecond precision for the `van-count-down` component using the `millisecond` prop.  The `format` prop is also used to specify the display format, including milliseconds (HH:mm:ss:SS). Requires a reactive `time` variable defined in the component's setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down millisecond :time=\"time\" format=\"HH:mm:ss:SS\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-Line ShareSheet Setup - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to set up the data for the multi-line ShareSheet usage. It defines `showShare` as a reactive variable and `options` as a two-dimensional array of share options. Each inner array represents a line of options. Dependencies: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      [\n        { name: 'WeChat', icon: 'wechat' },\n        { name: 'WeChat Moments', icon: 'wechat-moments' },\n        { name: 'Weibo', icon: 'weibo' },\n        { name: 'QQ', icon: 'qq' },\n      ],\n      [\n        { name: 'Link', icon: 'link' },\n        { name: 'Poster', icon: 'poster' },\n        { name: 'Qrcode', icon: 'qrcode' },\n        { name: 'Weapp Qrcode', icon: 'weapp-qrcode' },\n      ],\n    ];\n\n    return {\n      options,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using SwipeCellInstance in TypeScript\nDESCRIPTION: This snippet shows how to use the `SwipeCellInstance` type from Vant with `ref` in Vue 3 to control the SwipeCell component programmatically, specifically how to close the swipe cell.  This allows accessing the methods of the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { SwipeCellInstance } from 'vant';\n\nconst swipeCellRef = ref<SwipeCellInstance>();\n\nswipeCellRef.value?.close();\n```\n\n----------------------------------------\n\nTITLE: Custom Row Count TextEllipsis - Vue HTML\nDESCRIPTION: Configures the TextEllipsis component to display a specific number of rows before truncating the text.  The `rows` prop is set to \"3\" to limit the displayed text to three rows. Requires the Vant TextEllipsis component to be properly installed and configured.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis\n  rows=\"3\"\n  :content=\"text\"\n  expand-text=\"展开\"\n  collapse-text=\"收起\"\n/>\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Custom Icons (JS)\nDESCRIPTION: This JavaScript snippet demonstrates how to define share options with custom icons for the ShareSheet.  The `icon` property of each option object is set to a URL pointing to the desired image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      {\n        name: '名称',\n        icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/custom-icon-fire.png',\n      },\n      {\n        name: '名称',\n        icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/custom-icon-light.png',\n      },\n      {\n        name: '名称',\n        icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/custom-icon-water.png',\n      },\n    ];\n\n    return {\n      options,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Stepper Before Change Callback Implementation - JavaScript\nDESCRIPTION: Implements the `beforeChange` callback function. This function simulates an asynchronous operation using `setTimeout` and returns a Promise.  The stepper value only updates if the promise resolves to `true`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { closeToast, showLoadingToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(1);\n\n    const beforeChange = (value) => {\n      showLoadingToast({ forbidClick: true });\n\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          closeToast();\n          // resolve 'true' or 'false'\n          resolve(true);\n        }, 500);\n      });\n    };\n\n    return {\n      value,\n      beforeChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Two-way Data Binding\nDESCRIPTION: This code snippet demonstrates the use of v-model for two-way data binding with the Vant Picker component. The selectedValues ref is bound to the picker, allowing the picker's selected value to be updated dynamically and vice versa.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-picker v-model=\"selectedValues\" title=\"标题\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: NavBar with Back Navigation\nDESCRIPTION: Implements a NavBar with back navigation functionality.  It uses the `left-text` and `left-arrow` props, and binds the `click-left` event to a method that calls `history.back()`. Requires: Browser history API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar\n  title=\"标题\"\n  left-text=\"返回\"\n  left-arrow\n  @click-left=\"onClickLeft\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Circle Implementation\nDESCRIPTION: A basic implementation of the Vant Circle component using HTML. It binds the `currentRate` property, sets the target `rate`, animation `speed`, and the `text` to be displayed within the circle.  Requires the `currentRate` property to be defined in the Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"30\"\n  :speed=\"100\"\n  :text=\"text\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant NavBar in Vue\nDESCRIPTION: Registers the Vant NavBar component globally within a Vue.js application. This snippet imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and then registers the NavBar component for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { NavBar } from 'vant';\n\nconst app = createApp();\napp.use(NavBar);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Vant Button\nDESCRIPTION: This TypeScript snippet shows the type definitions exported by the Vant Button component. These type definitions can be used to provide better type safety and autocompletion when working with the Vant Button component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ButtonType,\n  ButtonSize,\n  ButtonProps,\n  ButtonNativeType,\n  ButtonIconPosition,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Displaying Titled Message Dialog - JavaScript\nDESCRIPTION: Displays a dialog with a title and message using `showDialog`. Includes a callback function executed after the dialog is closed. Dependencies: vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n\nshowDialog({\n  title: '标题',\n  message: '代码是写出来给人看的，附带能在机器上运行。',\n}).then(() => {\n  // on close\n});\n\nshowDialog({\n  message: '生命远不止连轴转和忙到极限，人类的体验远比这辽阔、丰富得多。',\n}).then(() => {\n  // on close\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Index List for Vant IndexBar Component\nDESCRIPTION: This HTML snippet demonstrates how to use a custom index list with the Vant `van-index-bar` component using the `index-list` prop. This prop accepts an array of strings or numbers to be used as the index. The `van-index-anchor` components are still used to define the index points within the list, but their `index` props now correspond to the values in the `indexList`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-index-bar :index-list=\"indexList\">\n  <van-index-anchor index=\"1\">Title 1</van-index-anchor>\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n\n  <van-index-anchor index=\"2\">Title 2</van-index-anchor>\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n\n  ...\n</van-index-bar>\n```\n\n----------------------------------------\n\nTITLE: Styling Active Step with Icon and Color\nDESCRIPTION: This code snippet illustrates how to customize the appearance of the active step in the `van-steps` component. It uses the `active-icon` and `active-color` props to set a custom icon and color for the active step.  `active-icon` accepts the name of an icon from the Vant icon library, and `active-color` accepts a CSS color value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-steps :active=\"active\" active-icon=\"success\" active-color=\"#07c160\">\n  <van-step>买家下单</van-step>\n  <van-step>商家接单</van-step>\n  <van-step>买家提货</van-step>\n  <van-step>交易完成</van-step>\n</van-steps>\n```\n\n----------------------------------------\n\nTITLE: Cell with Arrow and Link\nDESCRIPTION: This example showcases the `is-link` and `arrow-direction` properties of the `van-cell` component.  Setting `is-link` displays a right-pointing arrow and enables click feedback. `arrow-direction` controls the direction of the arrow.  Values include 'down'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"单元格\" is-link />\n<van-cell title=\"单元格\" is-link value=\"内容\" />\n<van-cell title=\"单元格\" is-link arrow-direction=\"down\" value=\"内容\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Empty Component with Image Type\nDESCRIPTION: This snippet demonstrates how to use the `image` prop of the Vant Empty component to display different placeholder images such as 'error', 'network', and 'search'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Error -->\n<van-empty image=\"error\" description=\"Description\" />\n<!-- Network -->\n<van-empty image=\"network\" description=\"Description\" />\n<!-- Search -->\n<van-empty image=\"search\" description=\"Description\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Rate Usage - JavaScript\nDESCRIPTION: This snippet provides the JavaScript code for the basic usage example. It imports the ref function from Vue and creates a reactive variable named 'value' to hold the rate value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(3);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Icon RadioGroup - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the icon of the radio buttons within a RadioGroup using slots. The icon slot is used to render custom content instead of the default radio button icon. It uses props to conditionally render active or inactive icons based on the checked state.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\">\n    Radio 1\n    <template #icon=\"props\">\n      <img class=\"img-icon\" :src=\"props.checked ? activeIcon : inactiveIcon\" />\n    </template>\n  </van-radio>\n  <van-radio name=\"2\">\n    Radio 2\n    <template #icon=\"props\">\n      <img class=\"img-icon\" :src=\"props.checked ? activeIcon : inactiveIcon\" />\n    </template>\n  </van-radio>\n</van-radio-group>\n\n<style>\n  .img-icon {\n    height: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Custom Node in Switch\nDESCRIPTION: This snippet shows how to customize the inner content (node) of a Vant Switch using the `node` slot. It includes HTML for the switch with a slot definition and CSS for styling the custom icon within the node.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\">\n  <template #node>\n    <div class=\"icon-wrapper\">\n      <van-icon :name=\"checked ? 'success' : 'cross'\" />\n    </div>\n  </template>\n</van-switch>\n```\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  .icon-wrapper {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    font-size: 18px;\n  }\n\n  .icon-wrapper .van-icon-success {\n    line-height: 32px;\n    color: var(--van-blue);\n  }\n\n  .icon-wrapper .van-icon-cross {\n    line-height: 32px;\n    color: var(--van-gray-5);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Showing Icons in Fields - JavaScript\nDESCRIPTION: This code initializes two reactive variables, value1 and value2, using Vue's 'ref'. Value2 is initialized with the string '123'.  These variables are used in conjunction with the HTML snippet above to demonstrate the 'clearable' functionality of the Vant Field component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value1 = ref('');\n    const value2 = ref('123');\n    return {\n      value1,\n      value2,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: NavBar Custom Slots Usage\nDESCRIPTION: Demonstrates how to use slots to customize the content on the right side of the NavBar with a search icon.  Uses the `van-icon` component within the `right` slot.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar title=\"标题\" left-text=\"返回\" left-arrow>\n  <template #right>\n    <van-icon name=\"search\" size=\"18\" />\n  </template>\n</van-nav-bar>\n```\n\n----------------------------------------\n\nTITLE: Vant Sidebar Change Event Handling\nDESCRIPTION: This HTML snippet demonstrates how to listen for the `change` event on the `van-sidebar` component. The `@change` event is emitted when the active sidebar item changes.  The handler function (in this case, `onChange`) is called with the index of the newly selected item.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\" @change=\"onChange\">\n  <van-sidebar-item title=\"标签名 1\" />\n  <van-sidebar-item title=\"标签名 2\" />\n  <van-sidebar-item title=\"标签名 3\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Setting up v-model value in Vue\nDESCRIPTION: This JavaScript snippet demonstrates how to set up the `v-model` value within a Vue component's setup function using `ref` from the 'vue' package. It initializes the `value` to a specific area code ('330302') and then returns it to be used in the template.  This is necessary for using v-model with a reactive variable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('330302');\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying an Uneditable Contact Card - HTML\nDESCRIPTION: Renders a ContactCard component in 'edit' mode but with the `editable` prop set to `false`. This disables editing functionality, rendering the contact information as read-only.  The `name` and `tel` props are directly set as string literals.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-card\n  type=\"edit\"\n  name=\"John Snow\"\n  tel=\"13000000000\"\n  :editable=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Stepper Min/Max Range Limiting in Vue\nDESCRIPTION: This code shows how to set the minimum and maximum allowed values for the Vant Stepper component. The `min` and `max` attributes define the allowed range. The component automatically adjusts the value if it exceeds these limits, unless `auto-fixed` is set to `false`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" min=\"5\" max=\"8\" />\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Cancel Button - Vue\nDESCRIPTION: Defines the reactive data and event handler for the cancel button.  Includes the actions array and the `onCancel` function, which displays a toast message when the cancel button is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: '选项一' },\n      { name: '选项二' },\n      { name: '选项三' },\n    ];\n    const onCancel = () => showToast('取消');\n\n    return {\n      show,\n      actions,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Notify as a Vue.js component in template\nDESCRIPTION: Demonstrates using the Notify component directly in a Vue.js template. Includes a button to trigger the notification and a van-notify component bound to a v-model for show/hide control. Requires the van-button and van-notify components from Vant and the van-icon component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" text=\"Use Notify Component\" @click=\"showNotify\" />\n<van-notify v-model:show=\"show\" type=\"success\">\n  <van-icon name=\"bell\" style=\"margin-right: 4px;\" />\n  <span>Content</span>\n</van-notify>\n```\n\n----------------------------------------\n\nTITLE: Using DatePicker and TimePicker in PickerGroup - HTML (Vue)\nDESCRIPTION: Demonstrates how to use a DatePicker and TimePicker component inside a PickerGroup component in Vue.js. It shows the HTML structure for the PickerGroup, including props for title, tabs, and event listeners for confirm and cancel actions. It includes v-model bindings to date and time values and uses min/max date props.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"预约日期\"\n  :tabs=\"['选择日期', '选择时间']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"currentDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-time-picker v-model=\"currentTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Disabled Rate Component\nDESCRIPTION: Disables the Rate component, preventing user interaction. Setting the `disabled` property to `true` disables the component.  The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Notify with Different Types - Javascript\nDESCRIPTION: Displays notifications with different types: primary, success, danger, and warning.  Each type has a different color scheme. The code imports showNotify and then calls it multiple times with different type options and messages.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify } from 'vant';\n\n// 主要通知\nshowNotify({ type: 'primary', message: '通知内容' });\n\n// 成功通知\nshowNotify({ type: 'success', message: '通知内容' });\n\n// 危险通知\nshowNotify({ type: 'danger', message: '通知内容' });\n\n// 警告通知\nshowNotify({ type: 'warning', message: '通知内容' });\n```\n\n----------------------------------------\n\nTITLE: Custom Icons for Rate Component\nDESCRIPTION: Customizes the icons for selected and unselected states of the Rate component. The `icon` attribute sets the icon for the selected state and the `void-icon` attribute sets the icon for the unselected state, using Vant's icon names. The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" icon=\"like\" void-icon=\"like-o\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Vant IndexBar Type Definitions\nDESCRIPTION: This TypeScript code snippet demonstrates how to import type definitions for the `IndexBarProps`, `IndexAnchorProps`, and `IndexBarInstance` from the Vant library.  These types can be used to provide type safety and autocompletion when working with the IndexBar component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IndexBarProps, IndexAnchorProps, IndexBarInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Overall Time Range - HTML\nDESCRIPTION: HTML example demonstrating the usage of `min-time` and `max-time` props to define the overall time range. Setting `min-time` and `max-time` overrides `min-hour`, `min-minute`, `min-second`, `max-hour`, `max-minute`, `max-second`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"Choose Time\"\n  :columns-type=\"['hour', 'minute', 'second']\"\n  min-time=\"09:40:10\"\n  max-time=\"20:20:50\"\n/>\n```\n\n----------------------------------------\n\nTITLE: NumberKeyboard with Multiple Extra Keys\nDESCRIPTION: This example showcases the configuration of multiple extra keys by passing an array to the `extra-key` prop when the theme is set to `custom`.  This is useful for scenarios requiring more than one special character, such as inputting amounts with '00' and '.' buttons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell plain type=\"primary\" @touchstart.stop=\"show = true\">\n  弹出配置多个按键的键盘\n</van-cell>\n<van-number-keyboard\n  :show=\"show\"\n  theme=\"custom\"\n  :extra-key=\"['00', '.']\"\n  close-button-text=\"完成\"\n  @blur=\"show = false\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Picker - JavaScript\nDESCRIPTION: This JavaScript code snippet defines the data and event handlers for a basic Vant Picker component. It includes the definition of the columns array, as well as functions to handle the confirm, cancel, and change events, using showToast from Vant to display the selected values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const columns = [\n      { text: '杭州', value: 'Hangzhou' },\n      { text: '宁波', value: 'Ningbo' },\n      { text: '温州', value: 'Wenzhou' },\n      { text: '绍兴', value: 'Shaoxing' },\n      { text: '湖州', value: 'Huzhou' },\n    ];\n    const onConfirm = ({ selectedValues }) => {\n      showToast(`当前值: ${selectedValues.join(',')}`);\n    };\n    const onChange = ({ selectedValues }) => {\n      showToast(`当前值: ${selectedValues.join(',')}`);\n    };\n    const onCancel = () => showToast('取消');\n\n    return {\n      columns,\n      onChange,\n      onCancel,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Area - HTML\nDESCRIPTION: This code snippet demonstrates the integration of the Vant Area component within a Vant Form field.  It utilizes a `van-field` to display the selected area and a `van-popup` to present the area picker. The `@click` event on the `van-field` triggers the display of the `van-area` component inside the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"area\"\n  label=\"Area Picker\"\n  placeholder=\"Select area\"\n  @click=\"showArea = true\"\n/>\n<van-popup v-model:show=\"showArea\" destroy-on-close position=\"bottom\">\n  <van-area\n    :area-list=\"areaList\"\n    :model-value=\"pickerValue\"\n    @confirm=\"onConfirm\"\n    @cancel=\"showArea = false\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Initializing PullRefresh Component with Vue\nDESCRIPTION: This snippet demonstrates how to import and register the PullRefresh component from the Vant library in a Vue application. It uses the `createApp` function from Vue to create an application instance and then registers the PullRefresh component globally using `app.use`. This makes the component available for use in any component within the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { PullRefresh } from 'vant';\n\nconst app = createApp();\napp.use(PullRefresh);\n```\n\n----------------------------------------\n\nTITLE: Setting Gutter Spacing in Vant Row\nDESCRIPTION: This HTML snippet demonstrates how to use the `gutter` property on the `van-row` component to add spacing between columns. The `gutter` property accepts a numeric value, which specifies the spacing in pixels. This example sets a horizontal gutter of 20px between the three columns. The columns each have a span of 8.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-row gutter=\"20\">\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Custom CountDown Format in Vue Template\nDESCRIPTION: Shows how to customize the display format of the `van-count-down` component using the `format` prop.  The format string determines how the remaining time is displayed (e.g., DD Day, HH:mm:ss). Requires a reactive `time` variable defined in the component's setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down :time=\"time\" format=\"DD Day, HH:mm:ss\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for Steps Component\nDESCRIPTION: This code snippet shows the TypeScript type definitions import statement for the Vant Steps component. It imports `StepsProps` and `StepsDirection` from the 'vant' library, allowing you to use these types for strong typing in your Vue components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StepsProps, StepsDirection } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Displaying Icon Badges in Vant Action Bar (HTML)\nDESCRIPTION: This HTML code snippet demonstrates how to display badges on the icons within the Vant Action Bar. The `dot` prop is used to display a simple red dot, while the `badge` prop is used to display a numerical badge with a specified value.  The `type` prop on the buttons sets the button styling.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"Icon1\" dot />\n  <van-action-bar-icon icon=\"cart-o\" text=\"Icon2\" badge=\"5\" />\n  <van-action-bar-icon icon=\"shop-o\" text=\"Icon3\" badge=\"12\" />\n  <van-action-bar-button type=\"warning\" text=\"Button\" />\n  <van-action-bar-button type=\"danger\" text=\"Button\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Manual CountDown Control Logic in Vue\nDESCRIPTION: Implements the logic for manually controlling the `van-count-down` component.  It defines methods for starting, pausing, and resetting the countdown, as well as an event handler for when the countdown finishes.  Uses `ref` to create a reference to the `CountDown` instance and `showToast` from `vant` to display a message on finish.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const countDown = ref(null);\n\n    const start = () => {\n      countDown.value.start();\n    };\n    const pause = () => {\n      countDown.value.pause();\n    };\n    const reset = () => {\n      countDown.value.reset();\n    };\n    const onFinish = () => showToast('Finished');\n\n    return {\n      start,\n      pause,\n      reset,\n      onFinish,\n      countDown,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Horizontal Actions Popover - HTML\nDESCRIPTION: Implements a Popover component with actions arranged horizontally using the `actions-direction` prop.  It binds the `showPopover` ref to the `v-model:show` prop and passes an array of `actions` to the component. The `reference` slot renders the button that triggers the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-popover\n  v-model:show=\"showPopover\"\n  :actions=\"actions\"\n  actions-direction=\"horizontal\"\n>\n  <template #reference>\n    <van-button type=\"primary\">Horizontal</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Disabling Upload Functionality - HTML\nDESCRIPTION: Shows how to disable file uploading using the disabled prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader disabled />\n```\n\n----------------------------------------\n\nTITLE: Animated Button with Vant Swipe\nDESCRIPTION: This HTML and CSS snippet illustrates how to create an animated button using Vant's Button and Swipe components. The Swipe component is used to create a vertical scrolling animation within the button, cycling through different text options.  This requires defining a style for the swipe element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"danger\" round>\n  <van-swipe\n    vertical\n    class=\"notice-swipe\"\n    :autoplay=\"2000\"\n    :touchable=\"false\"\n    :show-indicators=\"false\"\n  >\n    <van-swipe-item>做任务</van-swipe-item>\n    <van-swipe-item>抽大奖</van-swipe-item>\n  </van-swipe>\n</van-button>\n\n<style>\n  .notice-swipe {\n    height: 40px;\n    line-height: 40px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with disabled state in Vue\nDESCRIPTION: This snippet demonstrates how to disable a specific tab within the van-tabs component. The disabled attribute is added to the van-tab component to prevent the user from selecting that tab. The active tab can still be managed with v-model:active.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\">\n  <van-tab title=\"标签 1\">内容 1</van-tab>\n  <van-tab title=\"标签 2\" disabled>内容 2</van-tab>\n  <van-tab title=\"标签 3\">内容 3</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Label Alignment - HTML\nDESCRIPTION: Demonstrates how to align the label of a Field component using the 'label-align' prop. The label can be aligned to the 'top', 'left', 'center', or 'right'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value\"\n    label=\"Label\"\n    placeholder=\"Align Top\"\n    label-align=\"top\"\n  />\n  <van-field\n    v-model=\"value2\"\n    label=\"Label\"\n    placeholder=\"Align Left\"\n    label-align=\"left\"\n  />\n  <van-field\n    v-model=\"value3\"\n    label=\"Label\"\n    placeholder=\"Align Center\"\n    label-align=\"center\"\n  />\n  <van-field\n    v-model=\"value4\"\n    label=\"Label\"\n    placeholder=\"Align Right\"\n    label-align=\"right\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Steps Component\nDESCRIPTION: Demonstrates the basic usage of the van-steps and van-step components to create a horizontal steps indicator. The active prop controls which step is currently highlighted. It requires the 'active' property to be defined in the component's data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-steps :active=\"active\">\n  <van-step>Step1</van-step>\n  <van-step>Step2</van-step>\n  <van-step>Step3</van-step>\n  <van-step>Step4</van-step>\n</van-steps>\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Hour and Minute Range - HTML\nDESCRIPTION: HTML code showcasing the `min-hour`, `max-hour`, `min-minute`, and `max-minute` props to limit the selectable time range within the TimePicker. It specifies the minimum and maximum allowed hours and minutes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"Choose Time\"\n  :min-hour=\"10\"\n  :max-hour=\"20\"\n  :min-minute=\"30\"\n  :max-minute=\"40\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Showing Word Limit - HTML\nDESCRIPTION: Demonstrates how to display a word limit for a textarea Field component using the 'show-word-limit' and 'maxlength' props.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"message\"\n    rows=\"2\"\n    autosize\n    label=\"Message\"\n    type=\"textarea\"\n    maxlength=\"50\"\n    placeholder=\"Message\"\n    show-word-limit\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Circle Start Position\nDESCRIPTION: Demonstrates the use of the `start-position` prop to control the starting point of the progress indicator, showcasing examples for left, right, and bottom positions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  text=\"Left\"\n  start-position=\"left\"\n/>\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  text=\"Right\"\n  start-position=\"right\"\n/>\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  text=\"Bottom\"\n  start-position=\"bottom\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Button for Vant Slider in Vue\nDESCRIPTION: Demonstrates how to customize the slider's button using the 'button' slot.  The slot injects the current value, displayed in the custom button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\">\n  <template #button>\n    <div class=\"custom-button\">{{ value }}</div>\n  </template>\n</van-slider>\n```\n\nLANGUAGE: css\nCODE:\n```\n.custom-button {\n    width: 26px;\n    color: #fff;\n    font-size: 10px;\n    line-height: 18px;\n    text-align: center;\n    background-color: var(--van-primary-color);\n    border-radius: 100px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Countdown Time - HTML\nDESCRIPTION: This HTML snippet demonstrates how to display the various components of the countdown time (total milliseconds, days, hours, minutes, seconds, and milliseconds) using data bound to the current state of the useCountDown hook.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span>Total time：{{ current.total }}</span>\n<span>Remain days：{{ current.days }}</span>\n<span>Remain hours：{{ current.hours }}</span>\n<span>Remain minutes：{{ current.minutes }}</span>\n<span>Remain seconds：{{ current.seconds }}</span>\n<span>Remain milliseconds：{{ current.milliseconds }}</span>\n```\n\n----------------------------------------\n\nTITLE: Custom ActionSheet Panel - HTML\nDESCRIPTION: This HTML code demonstrates how to create a custom panel within the ActionSheet. It uses the default slot of the `van-action-sheet` component to insert custom content, in this case, a simple div with the text \"Content\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet v-model:show=\"show\" title=\"Title\">\n  <div class=\"content\">Content</div>\n</van-action-sheet>\n```\n\n----------------------------------------\n\nTITLE: Vertical Center Alignment in Cell - HTML\nDESCRIPTION: This snippet demonstrates how to vertically center the content within a cell using the `center` prop on the `van-cell` component. When `center` is set to true, the title, value, and label will be vertically aligned within the cell.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-cell center title=\"Cell title\" value=\"Content\" label=\"Description\" />\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Option Formatting - HTML\nDESCRIPTION: This code snippet demonstrates how to use the `formatter` prop to customize the display text of TimePicker options.  A formatting function will be applied to each option for visual changes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"选择时间\"\n  :formatter=\"formatter\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Plain Buttons with Vant\nDESCRIPTION: This HTML snippet demonstrates the usage of the `plain` attribute in Vant's Button component.  Setting `plain` to true renders a button with the text color matching the button type and a white background. This style is often used for secondary actions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-button plain type=\"primary\">朴素按钮</van-button>\n<van-button plain type=\"success\">朴素按钮</van-button>\n```\n\n----------------------------------------\n\nTITLE: Inactive Progress Bar\nDESCRIPTION: Displays a Vant Progress component in an inactive state by using the `inactive` prop. Setting the `inactive` prop to `true` will display the progress bar in a grayed-out color scheme. The `percentage` prop still determines the progress display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-progress inactive :percentage=\"50\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing NoticeBar Instance in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to obtain and use a reference to a Vant NoticeBar instance using `ref` from Vue. It shows how to call the `reset` method on the NoticeBar instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { NoticeBarInstance } from 'vant';\n\nconst noticeBarRef = ref<NoticeBarInstance>();\n\nnoticeBarRef.value?.reset();\n```\n\n----------------------------------------\n\nTITLE: Vant Grid with Horizontal Direction - HTML\nDESCRIPTION: Illustrates how to change the content arrangement direction to horizontal using the `direction` prop on the Vant Grid. The `column-num` prop is also used to specify the number of columns.  This example displays three grid items with icons and text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-grid direction=\"horizontal\" :column-num=\"3\">\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant IndexBar and IndexAnchor Components\nDESCRIPTION: This HTML snippet showcases the basic implementation of the Vant `van-index-bar` and `van-index-anchor` components. `van-index-bar` wraps the entire indexed list, while `van-index-anchor` defines the index points within the list. The `index` prop on `van-index-anchor` specifies the index character or number to display.  `van-cell` components are used as list items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-index-bar>\n  <van-index-anchor index=\"A\" />\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n\n  <van-index-anchor index=\"B\" />\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n  <van-cell title=\"Text\" />\n\n  ...\n</van-index-bar>\n```\n\n----------------------------------------\n\nTITLE: TimePicker Formatter Setup with Vue Composition API\nDESCRIPTION: JavaScript code demonstrating how to use the `formatter` prop to format the hour and minute options of the TimePicker. The formatter function takes the `type` (hour or minute) and the `option` object as input and modifies the `text` property of the option.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00']);\n    const formatter = (type, option) => {\n      if (type === 'hour') {\n        option.text += 'h';\n      }\n      if (type === 'minute') {\n        option.text += 'm';\n      }\n      return option;\n    };\n\n    return {\n      formatter,\n      currentTime,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Error Information Display - HTML\nDESCRIPTION: Shows how to display error information for a Field component. The 'error' prop displays a red border, while the 'error-message' prop displays a custom error message below the field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field v-model=\"username\" error label=\"Username\" placeholder=\"Username\" />\n  <van-field\n    v-model=\"phone\"\n    label=\"Phone\"\n    placeholder=\"Phone\"\n    error-message=\"Invalid phone\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Option States - Vue\nDESCRIPTION: Defines the reactive data for the ActionSheet with options in different states (loading, disabled, and colored). It uses the `actions` array with objects that define the `color`, `disabled`, and `loading` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: '着色选项', color: '#ee0a24' },\n      { name: '禁用选项', disabled: true },\n      { name: '加载选项', loading: true },\n    ];\n\n    return {\n      show,\n      actions,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Popover Setup - JavaScript\nDESCRIPTION: Sets up the state needed for the dark theme Popover component in a Vue setup function.  It defines a reactive `showPopover` ref to control the popover's visibility and an `actions` array to populate the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: 'Option 1' },\n      { text: 'Option 2' },\n      { text: 'Option 3' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Range - HTML\nDESCRIPTION: Illustrates setting the minimum and maximum selectable dates in the Vant Calendar component using the `min-date` and `max-date` props. These props are bound to `minDate` and `maxDate` variables respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" :min-date=\"minDate\" :max-date=\"maxDate\" />\n```\n\n----------------------------------------\n\nTITLE: ContactCard Type Definitions - TypeScript\nDESCRIPTION: Imports type definitions for the ContactCard component, namely `ContactCardType` and `ContactCardProps`, from the 'vant' library. These types can be used for type checking and improved code maintainability when working with the ContactCard component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ContactCardType, ContactCardProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Handling Actionbar Icon/Button Clicks in Vue\nDESCRIPTION: This JavaScript snippet shows how to define click event handlers for ActionBarIcon and ActionBarButton components using Vue's `setup` function. It imports `showToast` from Vant and defines functions that display a toast message when an icon or button is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onClickIcon = () => showToast('点击图标');\n    const onClickButton = () => showToast('点击按钮');\n    return {\n      onClickIcon,\n      onClickButton,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing First Day Of Week - HTML\nDESCRIPTION: Illustrates how to change the first day of the week displayed in the Vant Calendar. Uses `first-day-of-week` prop, accepts values from 0 to 6 (0 for Sunday, 1 for Monday, etc.)\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar first-day-of-week=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: TimePicker Advanced Filter Usage - HTML\nDESCRIPTION: HTML code demonstrating advanced usage of TimePicker filter. This example does not have v-model because it demonstrates use of filter function in uncontrolled mode, useful for more complex filtering scenarios. Note that it's connected to the JavaScript setup below.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker title=\"Choose Time\" :filter=\"filter\" />\n```\n\n----------------------------------------\n\nTITLE: Disabled SubmitBar Example in HTML\nDESCRIPTION: This example demonstrates how to disable the SubmitBar component using the `disabled` prop. It also includes a tip message and an icon using the `tip` and `tip-icon` props. When disabled, the submit event is not triggered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar\n  disabled\n  :price=\"3050\"\n  button-text=\"提交订单\"\n  tip=\"你的收货地址不支持配送\"\n  tip-icon=\"info-o\"\n  @submit=\"onSubmit\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing ShareSheet in Vue\nDESCRIPTION: This snippet demonstrates how to globally register the ShareSheet component in a Vue application. It imports the necessary modules from 'vue' and 'vant' and registers the ShareSheet component using `app.use()`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ShareSheet } from 'vant';\n\nconst app = createApp();\napp.use(ShareSheet);\n```\n\n----------------------------------------\n\nTITLE: Displaying Confirmation Dialog - JavaScript\nDESCRIPTION: Shows a confirmation dialog with confirm and cancel options using `showConfirmDialog`.  It uses `.then` for confirm and `.catch` for cancel actions.  Requires the `showConfirmDialog` function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showConfirmDialog } from 'vant';\n\nshowConfirmDialog({\n  title: '标题',\n  message:\n    '如果解决方法是丑陋的，那就肯定还有更好的解决方法，只是还没有发现而已。',\n})\n  .then(() => {\n    // on confirm\n  })\n  .catch(() => {\n    // on cancel\n  });\n```\n\n----------------------------------------\n\nTITLE: Registering Global Methods - JavaScript\nDESCRIPTION: This snippet demonstrates how to register global methods like $toast and $dialog in Vant 3.  Due to Vue 3's removal of direct prototype method mounting, components like Toast and Dialog need to be registered to the Vue app instance using app.use before they can be globally accessed.  It shows importing the necessary components and using app.use to register them, then accessing them inside a component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Toast, Dialog, Notify } from 'vant';\n\n// 将 Toast 等组件注册到 app 上\napp.use(Toast);\napp.use(Dialog);\napp.use(Notify);\n\n// app 内的子组件可以直接调用 $toast 等方法\nexport default {\n  mounted() {\n    this.$toast('提示文案');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using RollingTextInstance Type in Vue\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `RollingTextInstance` type to define a ref for the RollingText component instance. This allows you to access the component's methods in a type-safe way.  Requires Vue and Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { RollingTextInstance } from 'vant';\n\nconst rollingTextRef = ref<RollingTextInstance>();\n\nrollingTextRef.value?.start();\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Option Status - HTML\nDESCRIPTION: This HTML snippet demonstrates the HTML part when showing the status of the options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet\n  v-model:show=\"show\"\n  :actions=\"actions\"\n  cancel-text=\"Cancel\"\n  close-on-click-action\n/>\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Custom Columns - HTML\nDESCRIPTION: This code snippet shows how to customize the columns displayed in the TimePicker using the `columns-type` prop. This example binds the `columnsType` array to the `columns-type` property, controlling which time units (hour, minute, second) are displayed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"选择时间\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using usePageVisibility hook in Vue\nDESCRIPTION: Demonstrates basic usage of the `usePageVisibility` hook within a Vue component's setup function. It imports `watch` from Vue and `usePageVisibility` from `@vant/use`. The `watch` function is used to observe changes to the `pageVisibility` Ref and log the new visibility state to the console.  This allows components to react to changes in page visibility, such as pausing animations or suspending data fetching.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-page-visibility.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { watch } from 'vue';\nimport { usePageVisibility } from '@vant/use';\n\nexport default {\n  setup() {\n    const pageVisibility = usePageVisibility();\n\n    watch(pageVisibility, (value) => {\n      console.log('visibility: ', value);\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Progress Component - Vue\nDESCRIPTION: Registers the Vant Progress component globally within a Vue application. This allows the component to be used in templates without needing to be imported locally in each component.  It requires the createApp function from vue and the Progress component from vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Progress } from 'vant';\n\nconst app = createApp();\napp.use(Progress);\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Position\nDESCRIPTION: This code snippet shows how to customize the position of the toast on the screen using the `position` option. The `position` option can be set to 'top' or 'bottom' to display the toast at the top or bottom of the screen, respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nshowToast({\n  message: 'Top',\n  position: 'top',\n});\n\nshowToast({\n  message: 'Bottom',\n  position: 'bottom',\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Vant Skeleton Content with Slots - HTML\nDESCRIPTION: This example shows how to customize the content of the Vant Skeleton using slots. The content inside the `<template #template>` tag will be used as the skeleton's placeholder layout. In this case, it uses `van-skeleton-image` and `van-skeleton-paragraph` components within a flexible layout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton>\n  <template #template>\n    <div :style=\"{ display: 'flex', width: '100%' }\">\n      <van-skeleton-image />\n      <div :style=\"{ flex: 1, marginLeft: '16px' }\">\n        <van-skeleton-paragraph row-width=\"60%\" />\n        <van-skeleton-paragraph />\n        <van-skeleton-paragraph />\n        <van-skeleton-paragraph />\n      </div>\n    </div>\n  </template>\n</van-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Color Customization\nDESCRIPTION: Illustrates how to customize the color of the Vant Loading component.  It sets the color prop to a specific hex code, applying the custom color to the loading indicator. This is applicable for both default and spinner types.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-loading color=\"#1989fa\" />\n\n<van-loading type=\"spinner\" color=\"#1989fa\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Nuxt Module via Pnpm\nDESCRIPTION: This command demonstrates installing the Vant Nuxt module using Pnpm.  The `@vant/nuxt` module simplifies Vant integration into Nuxt 3 applications. Requires Pnpm to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# with pnpm\npnpm add @vant/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Manual Control Methods for RollingText\nDESCRIPTION: This JavaScript code snippet provides the logic for manually controlling the Vant RollingText component's animation. It uses Vue's `ref` to obtain a reference to the RollingText instance and defines `start` and `reset` methods that call the corresponding instance methods. Requires Vue and Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const rollingTextRef = ref(null);\n    const start = () => {\n      rollingTextRef.value.start();\n    };\n    const reset = () => {\n      rollingTextRef.value.reset();\n    };\n    return { rollingTextRef, start, reset };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced TimePicker Filtering - JavaScript\nDESCRIPTION: This JavaScript code demonstrates an advanced use of the TimePicker's `filter` function.  It filters the selectable hours to be between 8 and 18. It also filters minute selections based on the selected hour; if the selected hour is 8, only minutes 40 and above are allowed, and if the selected hour is 18, only minutes 20 and below are allowed. Only minutes divisible by 10 are also allowed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const filter = (type, options, values) => {\n      const hour = +values[0];\n\n      if (type === 'hour') {\n        return options.filter(\n          (option) => Number(option.value) >= 8 && Number(option.value) <= 18,\n        );\n      }\n\n      if (type === 'minute') {\n        options = options.filter((option) => Number(option.value) % 10 === 0);\n\n        if (hour === 8) {\n          return options.filter((option) => Number(option.value) >= 40);\n        }\n\n        if (hour === 18) {\n          return options.filter((option) => Number(option.value) <= 20);\n        }\n      }\n\n      return options;\n    };\n\n    return {\n      filter,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Styling of Vant Divider\nDESCRIPTION: This example demonstrates how to apply custom styles to the Vant Divider component using inline styles. It allows customization of color, border color, and padding.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-divider\n  :style=\"{ color: '#1989fa', borderColor: '#1989fa', padding: '0 16px' }\"\n>\n  Text\n</van-divider>\n```\n\n----------------------------------------\n\nTITLE: Vant Badge with Custom Color - HTML\nDESCRIPTION: Demonstrates how to customize the background color of the Vant Badge using the color prop.  Different content types (number and dot) are shown with a custom color.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"5\" color=\"#1989fa\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\" color=\"#1989fa\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge dot color=\"#1989fa\">\n  <div class=\"child\" />\n</van-badge>\n```\n\n----------------------------------------\n\nTITLE: Async Cascader Options with Vue\nDESCRIPTION: This demonstrates asynchronously loading options for the Cascader.  The `onChange` function simulates a data request to populate the `children` array of an option when it's selected. It uses Vant's `showLoadingToast` and `closeToast` to display loading indicators during the asynchronous operation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { closeToast, showLoadingToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const fieldValue = ref('');\n    const cascaderValue = ref('');\n    const options = ref([\n      {\n        text: 'Zhejiang',\n        value: '330000',\n        children: [],\n      },\n    ]);\n    const onChange = ({ value }) => {\n      if (\n        value === options.value[0].value &&\n        options.value[0].children.length === 0\n      ) {\n        showLoadingToast('Loading...');\n        // mock data request\n        setTimeout(() => {\n          options.value[0].children = [\n            { text: 'Hangzhou', value: '330100' },\n            { text: 'Ningbo', value: '330200' },\n          ];\n          closeToast();\n        }, 1000);\n      }\n    };\n    const onFinish = ({ selectedOptions }) => {\n      show.value = false;\n      fieldValue.value = selectedOptions.map((option) => option.text).join('/');\n    };\n\n    return {\n      show,\n      options,\n      onFinish,\n      fieldValue,\n      cascaderValue,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Scrolling with NoticeBar and Swipe\nDESCRIPTION: This snippet demonstrates how to implement vertical scrolling using the NoticeBar and Swipe components.  The Swipe component is used inside the NoticeBar to display multiple items that scroll vertically.  The autoplay, touchable, and show-indicators properties are configured on the Swipe component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar left-icon=\"volume-o\" :scrollable=\"false\">\n  <van-swipe\n    vertical\n    class=\"notice-swipe\"\n    :autoplay=\"3000\"\n    :touchable=\"false\"\n    :show-indicators=\"false\"\n  >\n    <van-swipe-item>明月直入，无心可猜。</van-swipe-item>\n    <van-swipe-item>仙人抚我顶，结发受长生。</van-swipe-item>\n    <van-swipe-item>今人不见古时月，今月曾经照古人。</van-swipe-item>\n  </van-swipe>\n</van-notice-bar>\n\n<style>\n  .notice-swipe {\n    height: 40px;\n    line-height: 40px;\n  }\n</style>\n```\n\nLANGUAGE: css\nCODE:\n```\n.notice-swipe {\n    height: 40px;\n    line-height: 40px;\n  }\n```\n\n----------------------------------------\n\nTITLE: PasswordInput without Mask - HTML\nDESCRIPTION: This snippet shows how to disable the masking of the password value by setting the `:mask` prop to `false`. This will display the actual characters entered in the password input fields.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  :mask=\"false\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: NavBar Back Button Click Handler\nDESCRIPTION: Defines the JavaScript setup function for handling the back button click event in the Vant NavBar.  The `onClickLeft` function calls `history.back()` to navigate to the previous page.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const onClickLeft = () => history.back();\n    return {\n      onClickLeft,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Millisecond Rendering - HTML\nDESCRIPTION: This code snippet enables millisecond rendering for the CountDown component by setting the `millisecond` prop to `true`. The `format` prop is also updated to include milliseconds using the `SS` token. This will cause the component to re-render every millisecond.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down millisecond :time=\"time\" format=\"HH:mm:ss:SS\" />\n```\n\n----------------------------------------\n\nTITLE: Using useEventListener for basic event handling in Vue\nDESCRIPTION: This snippet demonstrates how to use the `useEventListener` hook to attach event listeners to the window and body elements in a Vue component. It showcases attaching a resize event to the window and a click event to the body, logging messages to the console when these events are triggered.  The hook automatically manages the lifecycle of the event listeners, attaching them when the component is mounted and removing them when the component is unmounted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-event-listener.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useEventListener } from '@vant/use';\n\nexport default {\n  setup() {\n    // attach the resize event to window\n    useEventListener('resize', () => {\n      console.log('window resize');\n    });\n\n    // attach the click event to the body element\n    useEventListener(\n      'click',\n      () => {\n        console.log('click body');\n      },\n      { target: document.body },\n    );\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: TimePicker Columns Type Setup with Vue Composition API\nDESCRIPTION: This JavaScript snippet shows how to configure columns type for TimePicker component using Vue's Composition API. The `currentTime` ref holds the initial time array, and `columnsType` specifies which columns to display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00', '00']);\n    const columnsType = ['hour', 'minute', 'second'];\n    return {\n      currentTime,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing List Instance in Vue\nDESCRIPTION: This code snippet demonstrates how to access the List instance using `ref` in Vue and call its methods.  It shows how to import the `ListInstance` type from 'vant' and use it to create a ref for the List component, allowing access to its methods like `check()`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { ListInstance } from 'vant';\n\nconst listRef = ref<ListInstance>();\n\nlistRef.value?.check();\n```\n\n----------------------------------------\n\nTITLE: CellGroup with Inset Style\nDESCRIPTION: This snippet showcases the `inset` property of the `van-cell-group` component, which creates a card-like appearance with rounded corners. The `inset` prop is set to `true`.  The `van-cell` components inside are styled as part of the card.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-cell title=\"单元格\" value=\"内容\" />\n  <van-cell title=\"单元格\" value=\"内容\" label=\"描述信息\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Search Usage with v-model\nDESCRIPTION: This code snippet shows the most basic usage of the Vant Search component in a Vue.js template. It uses `v-model` to bind the input value to a reactive variable named `value`.  The `placeholder` prop provides a hint to the user about what to enter in the search field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-search v-model=\"value\" placeholder=\"请输入搜索关键词\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Confirm Dialog - JavaScript\nDESCRIPTION: This snippet shows how to display a confirm dialog using the `showConfirmDialog` function.  It includes confirm and cancel buttons. The `then` method handles the confirmation action, while the `catch` method handles the cancellation action.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showConfirmDialog } from 'vant';\n\nshowConfirmDialog({\n  title: 'Title',\n  message:\n    'If the solution is ugly, then there must be a better solution, but it has not been discovered yet.',\n})\n  .then(() => {\n    // on confirm\n  })\n  .catch(() => {\n    // on cancel\n  });\n```\n\n----------------------------------------\n\nTITLE: Vant Empty Component with Bottom Content\nDESCRIPTION: This snippet demonstrates how to add custom content below the description in the Vant Empty component using the default slot. A Vant Button component is used as an example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-empty description=\"Description\">\n  <van-button round type=\"primary\" class=\"bottom-button\">Button</van-button>\n</van-empty>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Row and Col Usage\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the `van-row` and `van-col` components. It shows how to create a row with three columns, each taking up 8 spans of the 24-column grid. It also shows how to use the `offset` property to shift a column by a certain number of spans, creating spacing. The code uses inline styles for the `span` and `offset` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-row>\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n  <van-col span=\"8\">span: 8</van-col>\n</van-row>\n\n<van-row>\n  <van-col span=\"4\">span: 4</van-col>\n  <van-col span=\"10\" offset=\"4\">offset: 4, span: 10</van-col>\n</van-row>\n\n<van-row>\n  <van-col offset=\"12\" span=\"12\">offset: 12, span: 12</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Stepper Asynchronous Change Handling in Vue\nDESCRIPTION: This demonstrates using the `before-change` attribute to intercept changes to the Vant Stepper value.  The example simulates an asynchronous operation using `setTimeout` within the `beforeChange` function. A loading toast is displayed during this operation. The promise is resolved with `true` (allowing the change) or `false` (preventing the change).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" :before-change=\"beforeChange\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { closeToast, showLoadingToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(1);\n\n    const beforeChange = (value) => {\n      showLoadingToast({ forbidClick: true });\n\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          closeToast();\n          // 在 resolve 函数中返回 true 或 false\n          resolve(true);\n        }, 500);\n      });\n    };\n\n    return {\n      value,\n      beforeChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Show Icon Badge\nDESCRIPTION: Displays a badge on the icon using the `dot` and `badge` props.  The `dot` prop shows a simple red dot, while the `badge` prop displays a numeric or string value as a badge.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"chat-o\" dot />\n<van-icon name=\"chat-o\" badge=\"9\" />\n<van-icon name=\"chat-o\" badge=\"99+\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon with Font Face\nDESCRIPTION: Demonstrates how to use custom icons by defining a font face and using CSS classes.  Requires defining a font face with `@font-face` and associating a character code with a CSS class. The `class-prefix` prop on the `van-icon` component links to these styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* 引入第三方或自定义的字体图标样式 */\n@font-face {\n  font-family: 'my-icon';\n  src: url('./my-icon.ttf') format('truetype');\n}\n\n.my-icon {\n  font-family: 'my-icon';\n}\n\n.my-icon-extra::before {\n  content: '\\e626';\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Plain Text - HTML\nDESCRIPTION: Configures the PasswordInput to display plain text instead of masking the input.  The `mask` prop is set to `false`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  :mask=\"false\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Plain Buttons in Vant\nDESCRIPTION: This HTML snippet demonstrates how to create plain buttons using the `plain` prop. Plain buttons have a white background and the same text color as the button type.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-button plain type=\"primary\">Plain</van-button>\n<van-button plain type=\"success\">Plain</van-button>\n```\n\n----------------------------------------\n\nTITLE: Vertically Arranging Icon and Text - HTML\nDESCRIPTION: This HTML snippet demonstrates how to vertically arrange the icon and text within the Vant loading component. The `vertical` attribute is set to true, causing the icon to be displayed above the text. The `size` attribute is also used to set the size of the icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-loading size=\"24px\" vertical>加载中...</van-loading>\n```\n\n----------------------------------------\n\nTITLE: Initializing NumberKeyboard Component in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the NumberKeyboard component in a Vue application. It imports the necessary modules from vant and uses the app.use method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { NumberKeyboard } from 'vant';\n\nconst app = createApp();\napp.use(NumberKeyboard);\n```\n\n----------------------------------------\n\nTITLE: Switching Calendar Display Mode - HTML\nDESCRIPTION: Demonstrates how to enable the year and month switching buttons in the Vant Calendar component by setting the `switch-mode` prop to `year-month`. The `v-model:show` directive binds the component's visibility to the `show` variable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" switch-mode=\"year-month\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Grid with Route Navigation - HTML\nDESCRIPTION: Demonstrates how to add navigation to GridItem components using the `to` and `url` props. The `to` prop is used for Vue Router navigation, while the `url` prop is used for external links.  The `clickable` prop enables click feedback.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-grid clickable :column-num=\"2\">\n  <van-grid-item icon=\"home-o\" text=\"Vue Router\" to=\"/\" />\n  <van-grid-item icon=\"search\" text=\"URL\" url=\"https://github.com\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Browserslist Configuration (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the browserslist field in `package.json`. It specifies the target browsers for which the compiled code should be compatible, ensuring compatibility of compiled code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\"Chrome >= 51\", \"iOS >= 10\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Vant Swipe with Custom Width\nDESCRIPTION: This snippet demonstrates how to set a custom width for the Vant Swipe component and disable looping. The `width` prop is set to `300`, and the `loop` prop is set to `false`.  It's important to note that setting the SwipeItem size is not supported in loop mode.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe :loop=\"false\" :width=\"300\">\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Customizing RollingText Styles\nDESCRIPTION: This code snippet shows how to customize the appearance of the RollingText component using CSS variables. It overrides the default values of several CSS variables to change the background color, text color, font size, gap between digits, and border radius of the items. Requires Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text\n  class=\"my-rolling-text\"\n  :height=\"54\"\n  :start-num=\"12345\"\n  :target-num=\"54321\"\n/>\n```\n\n----------------------------------------\n\nTITLE: NoticeBar Modes\nDESCRIPTION: This HTML snippet demonstrates the use of different modes for the Vant NoticeBar component.  The `mode` prop allows displaying a closeable button or a link on the right side of the notice bar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar mode=\"closeable\">Short Content</van-notice-bar>\n\n<van-notice-bar mode=\"link\">Short Content</van-notice-bar>\n```\n\n----------------------------------------\n\nTITLE: Custom Index List - HTML with Vue Binding\nDESCRIPTION: This HTML snippet shows how to use the `index-list` prop of the `van-index-bar` component to customize the displayed index characters. The `index-list` is bound to a Vue data property called `indexList`.  The provided Vue code shows how to define `indexList` in the component's setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-index-bar :index-list=\"indexList\">\n  <van-index-anchor index=\"1\">标题1</van-index-anchor>\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n\n  <van-index-anchor index=\"2\">标题2</van-index-anchor>\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n\n  ...\n</van-index-bar>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme with Class Names - CSS\nDESCRIPTION: This CSS code demonstrates how to use the `.van-theme-light` and `.van-theme-dark` class selectors to modify base and component variables in light or dark mode.  It sets the `--van-white` variable to white in light mode and black in dark mode, which could affect all child components that use this variable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.van-theme-light {\n  --van-white: white;\n}\n\n.van-theme-dark {\n  --van-white: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gutter between Input Fields - HTML\nDESCRIPTION: Demonstrates setting a custom gutter (spacing) between the input boxes of the PasswordInput component. The `gutter` prop is set to `10`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  :gutter=\"10\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Accordion Mode - JavaScript\nDESCRIPTION: This snippet provides the Vue component setup for the accordion mode example. It uses the `ref` function from Vue to create a reactive variable `activeName` that holds the name of the currently active panel. Because accordion mode is enabled, only a single string is needed instead of an array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeName = ref('1');\n    return { activeName };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rolling Non-Numeric Text with Vue\nDESCRIPTION: This code snippet demonstrates how to use the RollingText component to roll through a list of text items. It uses the `text-list` prop to specify an array of strings, and the `duration` prop to set the animation duration. Requires Vue and Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :text-list=\"textList\" :duration=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Circle Size - HTML\nDESCRIPTION: Sets the size of the Vant Circle component using the `size` property.  Size must be a number or string. Size is diameter of circle, with default unit `px`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  size=\"120px\"\n  text=\"大小定制\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Sticky with Offset Top in HTML\nDESCRIPTION: This snippet demonstrates how to use the `offset-top` property to set the distance between the sticky component and the top of the viewport when it sticks. The `offset-top` attribute is bound to a value of 50, so the sticky element will stay 50 pixels below the top of the screen.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-sticky :offset-top=\"50\">\n  <van-button type=\"primary\">吸顶距离</van-button>\n</van-sticky>\n```\n\n----------------------------------------\n\nTITLE: Managing Uploaded Files in Vue\nDESCRIPTION: This JavaScript code handles the data for the Vant Uploader component using Vue's reactivity system. The code initializes value with a url to a jpeg asset.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref([\n      { url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg' },\n    ]);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Icon with Slots - Vue.js\nDESCRIPTION: This snippet demonstrates how to customize the icon of a Vant Checkbox component using slots. It provides a template for the Checkbox component, using the `#icon` slot to replace the default icon with a custom image based on the `checked` state. It relies on the `activeIcon` and `inactiveIcon` data properties being defined in the component's data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\">\n  <!-- 使用组件提供的 icon 插槽 -->\n  <!-- 将默认图标替换为个性化图片 -->\n  <template #icon=\"props\">\n    <img :src=\"props.checked ? activeIcon : inactiveIcon\" />\n  </template>\n</van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Style with image Slot - HTML\nDESCRIPTION: Demonstrates how to customize the style and onLoad event of the image displayed through the image slot. This allows further customization and control over the image's appearance and loading behavior. The example shows how to use style binding and the onLoad event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-image-preview\n  v-model:show=\"show\"\n  :images=\"images\"\n  :close-on-click-image=\"false\"\n>\n  <template #image=\"{ src, style, onLoad }\">\n    <img :src=\"src\" :style=\"[{ width: '100%' }, style]\" @load=\"onLoad\" />\n  </template>\n</van-image-preview>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Toasts - Vue\nDESCRIPTION: Allows displaying multiple Toast messages simultaneously by disabling the default singleton mode.  Requires the showToast, showSuccessToast and allowMultipleToast functions from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast, showSuccessToast, allowMultipleToast } from 'vant';\n\nallowMultipleToast();\n\nconst toast1 = showToast('第一个 Toast');\nconst toast2 = showSuccessToast('第二个 Toast');\n\ntoast1.close();\ntoast2.close();\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Gutter Spacing in Vant Row\nDESCRIPTION: This HTML snippet demonstrates how to set both horizontal and vertical gutter spacing using an array for the `gutter` property.  The first element of the array represents the horizontal spacing, and the second element represents the vertical spacing, both in pixels.  This example sets both horizontal and vertical spacing to 20px between the columns.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 设置垂直间距 -->\n<van-row :gutter=\"[20, 20]\">\n  <van-col span=\"12\">span: 12</van-col>\n  <van-col span=\"12\">span: 12</van-col>\n  <van-col span=\"12\">span: 12</van-col>\n  <van-col span=\"12\">span: 12</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Half Star Value Setup\nDESCRIPTION: Sets up a half star value for the Rate component.  The `value` ref is initialized to 2.5 and returned to make it accessible in the template. This is used when `allow-half` is enabled.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(2.5);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Divider with Content Position in Vant\nDESCRIPTION: This example demonstrates how to position the text content within a Vant Divider using the `content-position` prop. The content can be aligned to the left or right.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-divider content-position=\"left\">Text</van-divider>\n<van-divider content-position=\"right\">Text</van-divider>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Sidebar Usage in Vue Template\nDESCRIPTION: This HTML snippet shows the basic implementation of the Vant Sidebar component in a Vue template. It uses the `van-sidebar` component with `v-model` bound to the `active` variable, which controls the currently selected sidebar item. The `van-sidebar-item` components represent the individual items within the sidebar, each with a title.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\">\n  <van-sidebar-item title=\"标签名称\" />\n  <van-sidebar-item title=\"标签名称\" />\n  <van-sidebar-item title=\"标签名称\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Max Size Validation - HTML & JavaScript\nDESCRIPTION: Demonstrates how to set different size limits for different file types using a function for the `max-size` prop.  The `isOverSize` function checks the file type and applies the appropriate size limit (500kb for JPEG images, 1000kb for other types).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader multiple :max-size=\"isOverSize\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const isOverSize = (file) => {\n      const maxSize = file.type === 'image/jpeg' ? 500 * 1024 : 1000 * 1024;\n      return file.size >= maxSize;\n    };\n    return {\n      isOverSize,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Vant Notify - Typescript\nDESCRIPTION: Includes the type definitions that are exported by the Vant Notify component. These types are NotifyType, NotifyProps, NotifyOptions, and NotifyPosition. They provide type safety when using the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  NotifyType,\n  NotifyProps,\n  NotifyOptions,\n  NotifyPosition,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Cell with URL and Router Link\nDESCRIPTION: This snippet demonstrates navigation using the `url` and `to` properties of the `van-cell` component. The `url` property is used for basic URL redirection, while the `to` property facilitates Vue Router navigation within the application. `is-link` enables the arrow and click feedback.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"URL 跳转\" is-link url=\"https://github.com\" />\n<van-cell title=\"路由跳转\" is-link to=\"index\" />\n```\n\n----------------------------------------\n\nTITLE: Hide Header - HTML\nDESCRIPTION: Hides the header (title bar) of the Tabs component using the `show-header` prop set to `false`.  The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" :show-header=\"false\">\n  <van-tab v-for=\"index in 4\">content of tab {{ index }}</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Swipeable Tabs - HTML\nDESCRIPTION: Enables swiping between tabs using the `swipeable` prop. The user can swipe left or right on the content area to switch tabs. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" swipeable>\n  <van-tab v-for=\"index in 4\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Rolling Non-numeric Text - HTML\nDESCRIPTION: Illustrates how to use the text-list prop to roll non-numeric text. The component rolls from the first item to the last item in the array. The array length must be greater than or equal to 2, and each item must have the same length.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :text-list=\"textList\" :duration=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing ConfigProvider in Vue.js\nDESCRIPTION: This code snippet demonstrates how to import and register the ConfigProvider component globally in a Vue.js application. It uses the createApp function from Vue to create an app instance and then uses the app.use method to register the ConfigProvider component. This makes the ConfigProvider available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ConfigProvider } from 'vant';\n\nconst app = createApp();\napp.use(ConfigProvider);\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Disabled Options\nDESCRIPTION: This code demonstrates how to disable specific options in the Vant Picker by setting the disabled property to true for those options in the columns data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-picker :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Progress Component Types - TypeScript\nDESCRIPTION: Imports type definitions for the Progress component from the vant library. These types can be used for type checking and autocompletion when working with the Progress component in a TypeScript project. The type definitions includes ProgressProps and ProgressInstance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ProgressProps, ProgressInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Importing Modules from Vant - TypeScript\nDESCRIPTION: This TypeScript code snippet illustrates how to import specific modules, such as `showToast` and `buttonProps`, directly from the Vant library. This is possible because Vant 4.0 no longer relies on `babel-plugin-import` for tree-shaking and modular imports.  This example showcases importing both a function and a component's props.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { showToast, buttonProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling RollingText Animation\nDESCRIPTION: This code snippet demonstrates how to manually control the RollingText component using the `start` and `reset` methods. It sets `auto-start` to `false` and provides buttons to trigger the animation manually. Requires Vue and Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text\n  ref=\"rollingTextRef\"\n  :start-num=\"0\"\n  :target-num=\"54321\"\n  :auto-start=\"false\"\n/>\n<van-grid clickable :column-num=\"3\">\n  <van-grid-item icon=\"play-circle-o\" :text=\"start\" @click=\"start\" />\n  <van-grid-item icon=\"replay\" :text=\"reset\" @click=\"reset\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Initializing SwipeCell component in Vue\nDESCRIPTION: Registers the SwipeCell component globally in a Vue application using the createApp method from Vue and the SwipeCell component from Vant. This allows the component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { SwipeCell } from 'vant';\n\nconst app = createApp();\napp.use(SwipeCell);\n```\n\n----------------------------------------\n\nTITLE: Vant Swipe with Change Event Handling\nDESCRIPTION: This example demonstrates how to listen for the `change` event on the Vant Swipe component. The `@change` event is bound to the `onChange` method. This allows you to execute custom logic whenever the active swipe item changes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe @change=\"onChange\">\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Initializing Steps and Step Components in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the `Step` and `Steps` components from the Vant library in a Vue application. It imports `createApp` from 'vue' and `Step`, `Steps` from 'vant', then uses the `app.use()` method to register each component globally, making them available for use in templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Step, Steps } from 'vant';\n\nconst app = createApp();\napp.use(Step);\napp.use(Steps);\n```\n\n----------------------------------------\n\nTITLE: Using ImagePreview Component - JavaScript\nDESCRIPTION: Shows the corresponding JavaScript code for using the ImagePreview component. It initializes reactive variables for the show state, current index, and image array. It also includes an onChange handler for updating the current index. It imports ref from vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const index = ref(0);\n    const images = [\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n    ];\n    const onChange = (newIndex) => {\n      index.value = newIndex;\n    };\n\n    return {\n      show,\n      index,\n      images,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/use with package managers\nDESCRIPTION: These commands demonstrate how to install the `@vant/use` package using npm, yarn, pnpm, and Bun.  This package contains the composable APIs used by Vant. It is recommended to explicitly install it, even though it's a dependency of Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/vant-use-intro.zh-CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# with npm\nnpm i @vant/use\n\n# with yarn\nyarn add @vant/use\n\n# with pnpm\npnpm add @vant/use\n\n# with Bun\nbun add @vant/use\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Cancel Button - HTML\nDESCRIPTION: This HTML code demonstrates how to add a cancel button to the ActionSheet.  It sets the `cancel-text` prop to \"Cancel\" and includes the `@cancel` event handler, triggering the `onCancel` method.  It also adds the `close-on-click-action` property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet\n  v-model:show=\"show\"\n  :actions=\"actions\"\n  cancel-text=\"Cancel\"\n  close-on-click-action\n  @cancel=\"onCancel\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Circle Width - HTML\nDESCRIPTION: Customizes the width of the Vant Circle component's progress bar using the `stroke-width` property. The default value is 40. `stroke-width` refers to the width of path in SVG.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  :stroke-width=\"60\"\n  text=\"宽度定制\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Columns Field Picker HTML\nDESCRIPTION: This HTML snippet renders a Vant Picker with custom column field names. The `:columns-field-names` attribute is bound to an object from the javascript section that specifies the new field names.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-picker\n  title=\"Title\"\n  :columns=\"columns\"\n  :columns-field-names=\"customFieldName\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Coupon Handling\nDESCRIPTION: This JavaScript snippet shows the setup function within a Vue component for managing coupon data and interaction. It defines reactive references (`ref`) for coupon data, visibility state (`showList`), and the index of the chosen coupon (`chosenCoupon`).  It also includes methods (`onChange`, `onExchange`) to handle coupon selection and exchange, which update the reactive variables.  A sample coupon object is created, and the component returns these reactive references and methods for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const coupon = {\n      available: 1,\n      condition: '无门槛\\n最多优惠12元',\n      reason: '',\n      value: 150,\n      name: '优惠券名称',\n      startAt: 1489104000,\n      endAt: 1514592000,\n      valueDesc: '1.5',\n      unitDesc: '元',\n    };\n\n    const coupons = ref([coupon]);\n    const showList = ref(false);\n    const chosenCoupon = ref(-1);\n\n    const onChange = (index) => {\n      showList.value = false;\n      chosenCoupon.value = index;\n    };\n    const onExchange = (code) => {\n      coupons.value.push(coupon);\n    };\n\n    return {\n      coupons,\n      showList,\n      onChange,\n      onExchange,\n      chosenCoupon,\n      disabledCoupons: [coupon],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Badge with Custom Content (Slot) - HTML\nDESCRIPTION: Illustrates the use of the 'content' slot to inject custom content into the Vant Badge, such as icons. It uses the van-icon component within the slot to display different icons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-badge>\n  <div class=\"child\" />\n  <template #content>\n    <van-icon name=\"success\" class=\"badge-icon\" />\n  </template>\n</van-badge>\n<van-badge>\n  <div class=\"child\" />\n  <template #content>\n    <van-icon name=\"cross\" class=\"badge-icon\" />\n  </template>\n</van-badge>\n<van-badge>\n  <div class=\"child\" />\n  <template #content>\n    <van-icon name=\"down\" class=\"badge-icon\" />\n  </template>\n</van-badge>\n```\n\nLANGUAGE: css\nCODE:\n```\n.badge-icon {\n  display: block;\n  font-size: 10px;\n  line-height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Radio Label to the Left\nDESCRIPTION: Positions the Radio label to the left of the icon by setting the `label-position` property to `'left'`.  This can improve layout in certain designs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" label-position=\"left\">单选框 1</van-radio>\n  <van-radio name=\"2\" label-position=\"left\">单选框 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Vant Grid with Gutter - HTML\nDESCRIPTION: Shows how to add a gutter (spacing) between GridItem components using the `gutter` prop on the Vant Grid. It dynamically generates eight GridItem components with an icon and text. The `gutter` prop specifies the spacing in pixels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :gutter=\"10\">\n  <van-grid-item v-for=\"value in 8\" :key=\"value\" icon=\"photo-o\" text=\"Text\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Custom Length PasswordInput - HTML\nDESCRIPTION: This snippet demonstrates how to customize the length of the PasswordInput component using the `:gutter` prop.  The gutter adds spacing between the input fields, improving visual clarity.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  :gutter=\"15\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Match Tabs By Name - JavaScript\nDESCRIPTION: Defines the `activeName` ref using Vue's `ref` function, initializing it to 'b'. This ref is used to control the active tab by name in the HTML template. Requires Vue 3.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeName = ref('b');\n    return { activeName };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Closeable Tag State with Vue\nDESCRIPTION: This Javascript code snippet defines the Vue component setup for managing the state of the closeable tag.  It uses `ref` to create a reactive variable `show` and defines a `close` method to toggle the tag's visibility.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(true);\n    const close = () => {\n      show.value = false;\n    };\n\n    return {\n      show,\n      close,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Radio and RadioGroup Components - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and register the Radio and RadioGroup components globally within a Vue application using createApp from 'vue'. This makes the components available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { RadioGroup, Radio } from 'vant';\n\nconst app = createApp();\napp.use(Radio);\napp.use(RadioGroup);\n```\n\n----------------------------------------\n\nTITLE: Initializing Search Component - JavaScript\nDESCRIPTION: Registers the Vant Search component globally using the `app.use` method in a Vue application.  Requires importing `createApp` from 'vue' and `Search` from 'vant'. The `app.use(Search)` line makes the Search component available throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Search } from 'vant';\n\nconst app = createApp();\napp.use(Search);\n```\n\n----------------------------------------\n\nTITLE: Linking Cells - HTML\nDESCRIPTION: This snippet demonstrates how to make cells clickable and act as links using the `is-link` prop. It also shows how to add an arrow icon using `arrow-direction` and specify a value. When `is-link` is true, the cell will have a visual indication that it's clickable, and clicking on it will trigger a navigation action if `url` or `to` prop is defined.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"Cell title\" is-link />\n  <van-cell title=\"Cell title\" is-link value=\"Content\" />\n  <van-cell title=\"Cell title\" is-link arrow-direction=\"down\" value=\"Content\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: PasswordInput Typescript Definition\nDESCRIPTION: This snippet shows how to import the type definitions for the PasswordInputProps, available through the 'vant' package. This provides type safety when working with the PasswordInput component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PasswordInputProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Simple Mode Pagination in HTML (Vue Template)\nDESCRIPTION: This HTML snippet shows how to use the `simple` mode of the Vant Pagination component. In simple mode, the pagination component only displays the current page and total pages, without individual page number buttons.  It binds the `currentPage` variable to the component's `v-model` and sets the `page-count` property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination v-model=\"currentPage\" :page-count=\"12\" mode=\"simple\" />\n```\n\n----------------------------------------\n\nTITLE: Disabled State - HTML\nDESCRIPTION: This snippet demonstrates how to disable specific `van-collapse-item` components using the `disabled` prop. Disabled panels cannot be expanded or collapsed by the user.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\">\n  <van-collapse-item title=\"标题1\" name=\"1\">\n    代码是写出来给人看的，附带能在机器上运行。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题2\" name=\"2\" disabled>\n    技术无非就是那些开发它的人的共同灵魂。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题3\" name=\"3\" disabled>\n    在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Basic CountDown Usage - HTML\nDESCRIPTION: This code snippet shows the basic usage of the Vant CountDown component in an HTML template.  It binds the `time` prop to a reactive data property, which represents the total countdown duration in milliseconds.  Dependencies: Requires a `time` ref in the Vue component's setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down :time=\"time\" />\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Icons - Vue\nDESCRIPTION: Defines the reactive data for an ActionSheet with icons. The `actions` array contains objects with `name` and `icon` properties. It also contains the `onSelect` handler that displays a toast message when an option is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: '选项一', icon: 'cart-o' },\n      { name: '选项二', icon: 'shop-o' },\n      { name: '选项三', icon: 'star-o' },\n    ];\n    const onSelect = (item) => {\n      show.value = false;\n      showToast(item.name);\n    };\n\n    return {\n      show,\n      actions,\n      onSelect,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Stroke Width - HTML\nDESCRIPTION: Customizes the stroke width of the Vant Progress bar. The `stroke-width` prop sets the thickness of the progress bar's line, in pixels by default.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-progress :percentage=\"50\" stroke-width=\"8\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Area Component in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Area component within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and then uses the `app.use` method to register the Area component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Area } from 'vant';\n\nconst app = createApp();\napp.use(Area);\n```\n\n----------------------------------------\n\nTITLE: Installing ConfigProvider - Vue.js\nDESCRIPTION: This code snippet demonstrates how to install the ConfigProvider component in a Vue.js application. It imports the necessary modules from Vue and Vant and registers the ConfigProvider component globally using `app.use()`. This makes the component available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ConfigProvider } from 'vant';\n\nconst app = createApp();\napp.use(ConfigProvider);\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar Change Event Handler Setup\nDESCRIPTION: Defines an `onChange` function that displays a toast message indicating the index of the selected tab using the `showToast` function from Vant. This function is triggered by the `change` event of the Tabbar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const onChange = (index) => showToast(`Tab ${index}`);\n    return {\n      icon,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Barrage Usage with Vue\nDESCRIPTION: This snippet demonstrates a basic implementation of the Barrage component within a Vue template. It uses v-model to bind the component to a list of barrage items and includes a button to add new items to the list.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-barrage v-model=\"list\">\n  <div class=\"video\" style=\"width: 100%; height: 150px\"></div>\n</van-barrage>\n<van-space style=\"margin-top: 10px\">\n  <van-button @click=\"add\" type=\"primary\" size=\"small\"> 弹幕 </van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Stepper Component with Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Stepper component in a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and registers the Stepper component using the app.use() method. This makes the component available for use in all components within the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Stepper } from 'vant';\n\nconst app = createApp();\napp.use(Stepper);\n```\n\n----------------------------------------\n\nTITLE: Showing Word limit in Textarea\nDESCRIPTION: This code showcases how to display the word limit in a `van-field` component with `type=\"textarea\"` using the `maxlength` and `show-word-limit` attributes.  The `maxlength` limits the input characters, and `show-word-limit` displays the current character count. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"message\"\n    rows=\"2\"\n    autosize\n    label=\"留言\"\n    type=\"textarea\"\n    maxlength=\"50\"\n    placeholder=\"请输入留言\"\n    show-word-limit\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Popover - Vue\nDESCRIPTION: Illustrates how to use the Popover component in an uncontrolled manner, without binding `v-model:show`.  The component manages its own visibility. Includes a reference button to trigger the popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-popover :actions=\"actions\" placement=\"top-start\" @select=\"onSelect\">\n  <template #reference>\n    <van-button type=\"primary\">非受控模式</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Registering Checkbox and CheckboxGroup Component - Vue\nDESCRIPTION: This code snippet demonstrates how to register the Checkbox and CheckboxGroup components globally in a Vue application using the createApp function. This registration makes the components available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Checkbox, CheckboxGroup } from 'vant';\n\nconst app = createApp();\napp.use(Checkbox);\napp.use(CheckboxGroup);\n```\n\n----------------------------------------\n\nTITLE: Initializing Popover Component - JavaScript\nDESCRIPTION: Registers the Popover component globally using `app.use`. This is required to use the Popover component in Vue templates.  It imports the necessary modules from 'vue' and 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Popover } from 'vant';\n\nconst app = createApp();\napp.use(Popover);\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with card style in Vue\nDESCRIPTION: This snippet showcases how to use the type attribute to set the style of the van-tabs component to card. This will render the tabs with a card-like appearance. The active tab can still be managed with v-model:active.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" type=\"card\">\n  <van-tab title=\"标签 1\">内容 1</van-tab>\n  <van-tab title=\"标签 2\">内容 2</van-tab>\n  <van-tab title=\"标签 3\">内容 3</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Manual Control Methods - JavaScript\nDESCRIPTION: This code snippet defines the `start`, `pause`, `reset`, and `onFinish` methods for manually controlling the CountDown component using its ref.  These methods call the corresponding methods on the CountDown component instance obtained via `ref`. `onFinish` calls showToast function from vant. Dependencies: Requires `countDown` ref bound to the CountDown component and `showToast` function from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const countDown = ref(null);\n\n    const start = () => {\n      countDown.value.start();\n    };\n    const pause = () => {\n      countDown.value.pause();\n    };\n    const reset = () => {\n      countDown.value.reset();\n    };\n    const onFinish = () => showToast('倒计时结束');\n\n    return {\n      start,\n      pause,\n      reset,\n      onFinish,\n      countDown,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/use package\nDESCRIPTION: These commands install the `@vant/use` package using various package managers (npm, yarn, pnpm, and Bun).  This package is a dependency of Vant but explicit installation is recommended.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/vant-use-intro.en-US.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# with npm\nnpm i @vant/use\n\n# with yarn\nyarn add @vant/use\n\n# with pnpm\npnpm add @vant/use\n\n# with Bun\nbun add @vant/use\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Custom Icon - JavaScript\nDESCRIPTION: Defines the reactive `active` variable and an `icon` object containing URLs for active and inactive icons.  These URLs are used in the HTML template to dynamically display the correct icon based on the tab's active state.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const icon = {\n      active: 'https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png',\n      inactive:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-inactive.png',\n    };\n    return {\n      icon,\n      active,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Description - Vue\nDESCRIPTION: Defines the reactive data for the ActionSheet with a description. The `actions` array includes one action with a `subname` to display a secondary description.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const actions = [\n      { name: '选项一' },\n      { name: '选项二' },\n      { name: '选项三', subname: '描述信息' },\n    ];\n\n    return {\n      show,\n      actions,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Date Range - HTML\nDESCRIPTION: Explains how to enable date range selection in the Vant Calendar by setting the `type` prop to `range`. The selected date range is displayed using a `van-cell` and the calendar's visibility is controlled by `v-model:show`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"Select Date Range\" :value=\"date\" @click=\"show = true\" />\n<van-calendar v-model:show=\"show\" type=\"range\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Custom Icon using Slot\nDESCRIPTION: Demonstrates how to use the `icon` slot to customize the loading icon in the Vant Loading component.  It utilizes the van-icon component within the slot to display a custom icon. A default loading message follows the custom icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-loading vertical>\n  <template #icon>\n    <van-icon name=\"star-o\" size=\"30\" />\n  </template>\n  Loading...\n</van-loading>\n```\n\n----------------------------------------\n\nTITLE: Disabled Search - HTML\nDESCRIPTION: Disables the Vant Search component, making it non-interactive. This snippet shows how to use the `disabled` prop to prevent user interaction with the input field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-search v-model=\"value\" disabled placeholder=\"Placeholder\" />\n```\n\n----------------------------------------\n\nTITLE: Using Hairline Border on Vant Buttons\nDESCRIPTION: This HTML snippet demonstrates how to display a hairline border (0.5px thickness) on buttons using the `hairline` prop in conjunction with the `plain` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-button plain hairline type=\"primary\">Hairline</van-button>\n<van-button plain hairline type=\"success\">Hairline</van-button>\n```\n\n----------------------------------------\n\nTITLE: Initializing PickerGroup Vue Component\nDESCRIPTION: This code snippet demonstrates how to import and register the PickerGroup component globally in a Vue application using `app.use`. This allows you to use the `<van-picker-group>` tag in your templates without needing to import it in every component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { PickerGroup } from 'vant';\n\nconst app = createApp();\napp.use(PickerGroup);\n```\n\n----------------------------------------\n\nTITLE: Customizing Radio Icon Size\nDESCRIPTION: Changes the size of the radio icon using the `icon-size` property, accepting either a number or a string with a unit (e.g., '24px').  This snippet sets the icon size to '24px'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" icon-size=\"24px\">单选框 1</van-radio>\n  <van-radio name=\"2\" icon-size=\"24px\">单选框 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Setting Line Width in Vant Signature\nDESCRIPTION: Configures the line width of the Signature component using the `line-width` prop. The value is a number representing the desired width in pixels. Requires the `onSubmit` and `onClear` event handlers.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-signature :line-width=\"6\" @submit=\"onSubmit\" @clear=\"onClear\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Embedded Content in Vant Overlay (CSS)\nDESCRIPTION: This CSS code provides styling for the embedded content within the Vant Overlay component.  It centers the content within the overlay and styles the inner \"block\" element. Dependencies: None.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.zh-CN.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n .wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  }\n\n  .block {\n    width: 120px;\n    height: 120px;\n    background-color: #fff;\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing ActionSheet Component - Javascript\nDESCRIPTION: This code snippet demonstrates how to install and register the Vant ActionSheet component globally using `app.use`.  It imports `createApp` from Vue and `ActionSheet` from Vant. Then, it creates a Vue app instance and uses the ActionSheet component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ActionSheet } from 'vant';\n\nconst app = createApp();\napp.use(ActionSheet);\n```\n\n----------------------------------------\n\nTITLE: Swipe Items Configuration - HTML\nDESCRIPTION: Demonstrates the `swipe-threshold` prop, allowing horizontal scrolling if the number of dropdown items exceeds the defined threshold. This example sets the threshold to `4`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu swipe-threshold=\"4\">\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Importing China Area Data\nDESCRIPTION: This TypeScript snippet shows how to import the default China area data from the `@vant/area-data` package and use it within a Vue component's setup function.  It imports `areaList` and then returns it as part of the component's data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { areaList } from '@vant/area-data';\n\nexport default {\n  setup() {\n    return { areaList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Cascader with Vue\nDESCRIPTION: Registers the Cascader component globally within a Vue application using `app.use`. This makes the Cascader component available for use in templates without needing to import it in every component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Cascader } from 'vant';\n\nconst app = createApp();\napp.use(Cascader);\n```\n\n----------------------------------------\n\nTITLE: Registering Lazyload Directive in Vue\nDESCRIPTION: This code snippet demonstrates how to register the Lazyload directive in a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and registers the Lazyload directive using `app.use(Lazyload)`. Additionally, it shows how to configure extra options during registration, such as enabling lazy component loading with `lazyComponent: true`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Lazyload } from 'vant';\n\nconst app = createApp();\napp.use(Lazyload);\n\n// 注册时可以配置额外的选项\napp.use(Lazyload, {\n  lazyComponent: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Rolling Direction\nDESCRIPTION: This code snippet shows how to set the rolling direction of the RollingText component.  It sets the direction to 'up' to make the numbers roll upwards. Vant RollingText component required.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :start-num=\"0\" :target-num=\"432\" direction=\"up\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Content TreeSelect - HTML\nDESCRIPTION: Demonstrates how to customize the content of the right panel in a TreeSelect component using the `content` slot. It conditionally renders different images based on the value of `activeIndex` using `van-image` components and `v-if` directives. The `height` prop sets the component's height.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:main-active-index=\"activeIndex\"\n  height=\"55vw\"\n  :items=\"items\"\n>\n  <template #content>\n    <van-image\n      v-if=\"activeIndex === 0\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg\"\n    />\n    <van-image\n      v-if=\"activeIndex === 1\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg\"\n    />\n  </template>\n</van-tree-select>\n```\n\n----------------------------------------\n\nTITLE: Advanced SubmitBar Usage with Slots in HTML\nDESCRIPTION: This example showcases the use of slots to customize the content within the SubmitBar component. It includes a checkbox using the default slot and a custom tip message with a clickable link using the tip slot. The example uses Vue's template syntax for rendering the slot content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar :price=\"3050\" button-text=\"提交订单\" @submit=\"onSubmit\">\n  <van-checkbox v-model=\"checked\">全选</van-checkbox>\n  <template #tip>\n    你的收货地址不支持配送, <span @click=\"onClickLink\">修改地址</span>\n  </template>\n</van-submit-bar>\n```\n\n----------------------------------------\n\nTITLE: Using IndexBar Instance for Scrolling\nDESCRIPTION: This TypeScript code snippet demonstrates how to obtain a reference to the `IndexBar` component instance using `ref` from Vue and how to call the `scrollTo` method to programmatically scroll the list to a specific index. The `indexBarRef.value?.scrollTo('B')` line will scroll the list to the element with index 'B'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { IndexBarInstance } from 'vant';\n\nconst indexBarRef = ref<IndexBarInstance>();\n\nindexBarRef.value?.scrollTo('B');\n```\n\n----------------------------------------\n\nTITLE: AddressEdit Type Definition - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import type definitions for the AddressEdit component. These types can be used for type checking and code completion when working with the component in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  AddressEditInfo,\n  AddressEditProps,\n  AddressEditInstance,\n  AddressEditSearchItem,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Icon Size - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the size of the Vant loading icon using the `size` attribute. It shows examples of both the default 'circular' type and the 'spinner' type with the size set to \"24\" and \"24px\".  The `size` attribute accepts a number or a string with a unit (e.g. px, em, rem).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-loading size=\"24\" />\n\n<van-loading type=\"spinner\" size=\"24px\" />\n```\n\n----------------------------------------\n\nTITLE: Loading State SubmitBar Example in HTML\nDESCRIPTION: This example demonstrates how to display the SubmitBar component in a loading state using the `loading` prop. When in loading state, the submit event is not triggered, providing visual feedback that the order is being processed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar\n  loading\n  :price=\"3050\"\n  button-text=\"提交订单\"\n  @submit=\"onSubmit\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Set Icon Size\nDESCRIPTION: Sets the size of the icon using the `size` prop.  The size can be specified in pixels (px) or rem units.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Using px unit by default -->\n<van-icon name=\"chat-o\" size=\"40\" />\n<!-- Using rem unit -->\n<van-icon name=\"chat-o\" size=\"3rem\" />\n```\n\n----------------------------------------\n\nTITLE: Basic useToggle Usage in Vue Component (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of the useToggle hook within a Vue component's setup function. It imports the useToggle hook, initializes a state and toggle function, toggles the state using different arguments (true, false, and no argument), and logs the state value to the console.  Requires the @vant/use package.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-toggle.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useToggle } from '@vant/use';\n\nexport default {\n  setup() {\n    const [state, toggle] = useToggle();\n\n    toggle(true);\n    console.log(state.value); // -> true\n\n    toggle(false);\n    console.log(state.value); // -> false\n\n    toggle();\n    console.log(state.value); // -> true\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ContactEdit Event Handling - JavaScript\nDESCRIPTION: Provides a JavaScript example demonstrating how to handle the `save` and `delete` events emitted by the `van-contact-edit` component.  It uses `ref` from 'vue' to create a reactive `editingContact` object. It imports `showToast` from 'vant' to display simple notifications when the save or delete buttons are clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const editingContact = ref({\n      tel: '',\n      name: '',\n    });\n    const onSave = (contactInfo) => showToast('Save');\n    const onDelete = (contactInfo) => showToast('Delete');\n    return {\n      onSave,\n      onDelete,\n      editingContact,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Sticky Usage in HTML\nDESCRIPTION: This snippet shows the basic usage of the Vant Sticky component. It wraps a `<van-button>` component within the `<van-sticky>` component, causing the button to stick to the top of the viewport when it scrolls out of view. No specific parameters are used in this example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-sticky>\n  <van-button type=\"primary\">基础用法</van-button>\n</van-sticky>\n```\n\n----------------------------------------\n\nTITLE: Initializing SubmitBar Component in Vue\nDESCRIPTION: This code snippet demonstrates how to import and register the SubmitBar component globally within a Vue application using the createApp function. This makes the SubmitBar component available for use in any template within the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { SubmitBar } from 'vant';\n\nconst app = createApp();\napp.use(SubmitBar);\n```\n\n----------------------------------------\n\nTITLE: Initializing ImagePreview with app.use - JavaScript\nDESCRIPTION: This code snippet demonstrates how to register the ImagePreview component globally using `app.use` in a Vue application. This allows you to use the ImagePreview component throughout your application without needing to import it in every component. It depends on the `vue` and `vant` libraries.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ImagePreview } from 'vant';\n\nconst app = createApp();\napp.use(ImagePreview);\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Image Component with Vue\nDESCRIPTION: This code snippet demonstrates how to register the Vant Image component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and registers the VanImage component using app.use().\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Image as VanImage } from 'vant';\n\nconst app = createApp();\napp.use(VanImage);\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Icon with Slot - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the Vant loading icon using the `icon` slot.  A `van-icon` component with the name \"star-o\" and size \"30\" is placed inside the `template #icon` slot. The text \"加载中...\" is displayed below the custom icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-loading vertical>\n  <template #icon>\n    <van-icon name=\"star-o\" size=\"30\" />\n  </template>\n  加载中...\n</van-loading>\n```\n\n----------------------------------------\n\nTITLE: Draggable FloatingBubble with Magnetic Effect (HTML)\nDESCRIPTION: Configures a FloatingBubble to be draggable in both X and Y axes and to snap to the nearest side along the X axis. The `axis` prop is set to 'xy' to enable free dragging, `magnetic` is set to 'x' for magnetic snapping to the X axis, and `@offset-change` event is bound to the `onOffsetChange` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-bubble\n  axis=\"xy\"\n  icon=\"chat\"\n  magnetic=\"x\"\n  @offset-change=\"onOffsetChange\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/popperjs with yarn\nDESCRIPTION: This command installs the @vant/popperjs package using the Yarn package manager. The package offers a CommonJS version of @popperjs/core, supplemented with an Object.assign polyfill. This command will add the dependency to the project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-popperjs/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @vant/popperjs\n```\n\n----------------------------------------\n\nTITLE: Disable Label Click RadioGroup - HTML\nDESCRIPTION: This HTML snippet demonstrates how to disable the click event on the label of a radio button. The `label-disabled` prop is set to true on the Radio component. This prevents the radio button from being selected when the label is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" label-disabled>Radio 1</van-radio>\n  <van-radio name=\"2\" label-disabled>Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Content Data Setup - JavaScript\nDESCRIPTION: Sets up the reactive data for the Custom Content example. Defines only the activeIndex and a simplified items array. Requires the 'vue' library for reactivity using ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeIndex = ref(0);\n    return {\n      activeIndex,\n      items: [{ text: 'Group 1' }, { text: 'Group 2' }],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Event HTML Structure\nDESCRIPTION: Defines the HTML structure for the custom event example, similar to the basic usage.  It creates a div element and binds it to a ref called 'root' for accessing the DOM element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Option Formatting - JavaScript\nDESCRIPTION: This code snippet defines the `formatter` function used to customize the TimePicker options. The formatter adds \"时\" to hour options and \"分\" to minute options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00']);\n    const formatter = (type, option) => {\n      if (type === 'hour') {\n        option.text += '时';\n      }\n      if (type === 'minute') {\n        option.text += '分';\n      }\n      return option;\n    };\n\n    return {\n      formatter,\n      currentTime,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant List with Pull-to-Refresh\nDESCRIPTION: Integrates the Vant List component with the Vant PullRefresh component for a pull-to-refresh feature.  It showcases the combination of `PullRefresh` component along with `List` component for refresh functionality.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh v-model=\"refreshing\" @refresh=\"onRefresh\">\n  <van-list\n    v-model:loading=\"loading\"\n    :finished=\"finished\"\n    finished-text=\"没有更多了\"\n    @load=\"onLoad\"\n  >\n    <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n  </van-list>\n</van-pull-refresh>\n```\n\n----------------------------------------\n\nTITLE: Custom Count for Rate Component\nDESCRIPTION: Sets a custom number of icons for the Rate component.  The `count` attribute determines the total number of icons displayed. The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" :count=\"6\" />\n```\n\n----------------------------------------\n\nTITLE: Vant 3 ImagePreview API\nDESCRIPTION: Shows the previous Vant 3 ImagePreview API with the ImagePreview() function for calling the global ImagePreview component, and ImagePreview.Component pointing to the ImagePreview component object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nImagePreview(); // 函数调用\nImagePreview.Component; // 组件对象\n```\n\n----------------------------------------\n\nTITLE: Handling NumberKeyboard Events\nDESCRIPTION: Defines the Vue setup for managing the visibility of the NumberKeyboard and handling input/delete events. The `onInput` and `onDelete` functions display toast notifications with the input value or 'delete' message.\n\nDependencies: Requires Vue 3 and the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(true);\n    const onInput = (value) => showToast(value);\n    const onDelete = () => showToast('delete');\n\n    return {\n      show,\n      onInput,\n      onDelete,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Line Width for Signature Component\nDESCRIPTION: This snippet shows how to customize the line width of the Signature component using the `line-width` prop. It sets the line width to 6.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-signature :line-width=\"6\" @submit=\"onSubmit\" @clear=\"onClear\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsbuild in rsbuild.config.mjs (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure Rsbuild using the `rsbuild.config.mjs` or `rsbuild.config.ts` file.  It shows examples of configuring plugins, development options, and HTML generation.  Requires Rsbuild as a dependency.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// rsbuild.config.mjs or rsbuild.config.ts\nexport default {\n  plugins: [\n    // Configure Rsbuild plugins\n  ],\n  dev: {\n    // Options related to local development\n  },\n  html: {\n    // Options related to HTML generation\n  },\n  // Other options\n};\n```\n\n----------------------------------------\n\nTITLE: Badge with Custom Color\nDESCRIPTION: This snippet shows how to customize the background color of the badge using the `color` property.  Different badge types are displayed with a specific color.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"5\" color=\"#1989fa\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\" color=\"#1989fa\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge dot color=\"#1989fa\">\n  <div class=\"child\" />\n</van-badge>\n```\n\n----------------------------------------\n\nTITLE: PullRefresh Typescript Definition\nDESCRIPTION: This snippet shows the import statement for the PullRefreshProps type definition from the Vant library, enabling TypeScript type checking and autocompletion for the PullRefresh component's props.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PullRefreshProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing TimePicker Component with Vue\nDESCRIPTION: Registers the TimePicker component globally using `app.use`. This makes the TimePicker component available for use in your Vue application. It depends on the `vue` and `vant` libraries.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { TimePicker } from 'vant';\n\nconst app = createApp();\napp.use(TimePicker);\n```\n\n----------------------------------------\n\nTITLE: Custom Vant Rate Style\nDESCRIPTION: This HTML snippet demonstrates how to customize the style of the Vant Rate component.  It uses the `size`, `color`, `void-icon`, and `void-color` props to change the appearance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-rate\n  v-model=\"value\"\n  :size=\"25\"\n  color=\"#ffd21e\"\n  void-icon=\"star\"\n  void-color=\"#eee\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using SwipeInstance in Vue with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `SwipeInstance` type in Vue with TypeScript. It creates a ref to the SwipeInstance, allowing access to the component's methods like next().  This ensures type safety when calling methods on the Swipe component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { SwipeInstance } from 'vant';\n\nconst swipeRef = ref<SwipeInstance>();\n\nswipeRef.value?.next();\n```\n\n----------------------------------------\n\nTITLE: Stepper with Step Value - HTML\nDESCRIPTION: An example showing how to customize the increment/decrement step value of the stepper using the `step` prop. In this case, the value will change by 2 each time the plus or minus button is pressed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" step=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with scrollspy mode in Vue\nDESCRIPTION: This snippet demonstrates how to enable scrollspy mode for the van-tabs component using the scrollspy attribute. When scrollspy is set to true, the tabs will act as a navigation bar that highlights the currently visible section of the page.  This example also enables the sticky layout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" scrollspy sticky>\n  <van-tab v-for=\"index in 8\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Notify message with function call\nDESCRIPTION: Shows a simple notification message using the showNotify function from vant.  It is a quick way to display global Notify components. Requires importing the showNotify function from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify } from 'vant';\n\nshowNotify('Notify Message');\n```\n\n----------------------------------------\n\nTITLE: Input Align - HTML\nDESCRIPTION: Sets the input text alignment of the Vant Search component to the center. This snippet shows how to use the `input-align` prop to control the text alignment inside the input field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-search v-model=\"value\" input-align=\"center\" placeholder=\"Placeholder\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Swipe and SwipeItem Components in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the `Swipe` and `SwipeItem` components from the Vant library in a Vue application. This allows you to use the `<van-swipe>` and `<van-swipe-item>` tags in your Vue templates. It requires importing `createApp` from Vue and the `Swipe` and `SwipeItem` components from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Swipe, SwipeItem } from 'vant';\n\nconst app = createApp();\napp.use(Swipe);\napp.use(SwipeItem);\n```\n\n----------------------------------------\n\nTITLE: Initializing NumberKeyboard with Vue\nDESCRIPTION: Registers the NumberKeyboard component globally in a Vue application. This allows the component to be used in templates without needing to be explicitly imported in each component file.\n\nDependencies: Requires Vue 3 and the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { NumberKeyboard } from 'vant';\n\nconst app = createApp();\napp.use(NumberKeyboard);\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/nuxt Module\nDESCRIPTION: Shows how to install the `@vant/nuxt` module for integrating Vant into a Nuxt 3 project. This simplifies component usage and style importing.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 npm 安装\nnpm i @vant/nuxt -D\n\n# 通过 yarn 安装\nyarn add @vant/nuxt -D\n\n# 通过 pnpm 安装\npnpm add @vant/nuxt -D\n\n# 通过 Bun 安装\nbun add @vant/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Signature Component\nDESCRIPTION: Registers the Signature component globally within a Vue application.  It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses the `app.use()` method to register the Signature component for use throughout the application. The `createApp` function is a Vue 3 API.  No specific inputs or outputs are described here as it is initialization.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Signature } from 'vant';\n\nconst app = createApp();\napp.use(Signature);\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Custom Columns - JavaScript\nDESCRIPTION: This JavaScript snippet defines the data properties needed to configure the TimePicker component with a custom column configuration. It initializes `currentTime` and `columnsType` using Vue's `ref` function to allow reactivity within the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00', '00']);\n    const columnsType = ['hour', 'minute', 'second'];\n    return {\n      currentTime,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Cascader Component - JavaScript\nDESCRIPTION: Registers the Cascader component globally in a Vue application using the createApp method. This makes the component available for use in the application's templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Cascader } from 'vant';\n\nconst app = createApp();\napp.use(Cascader);\n```\n\n----------------------------------------\n\nTITLE: Cell with Icon\nDESCRIPTION: This snippet demonstrates how to display an icon within a `van-cell` component using the `icon` property. The `icon` prop is set to `location-o`, which corresponds to an icon name from the Vant icon library. The icon will be displayed to the left of the title.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"单元格\" icon=\"location-o\" />\n```\n\n----------------------------------------\n\nTITLE: Manual Control - JavaScript\nDESCRIPTION: Provides the JavaScript code for manually controlling the RollingText component. It uses the ref function to obtain a reference to the component instance. The start and reset functions are defined to call the corresponding methods on the component instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const rollingTextRef = ref(null);\n    const start = () => {\n      rollingTextRef.value.start();\n    };\n    const reset = () => {\n      rollingTextRef.value.reset();\n    };\n    return { rollingTextRef, start, reset };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Picker with Loading State\nDESCRIPTION: This snippet shows how to display a loading indicator in the Vant Picker component while data is being fetched asynchronously. The `loading` prop is set to `true` initially, and then set to `false` after the data is loaded using `setTimeout` to simulate an API call.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const columns = ref([]);\n    const loading = ref(true);\n\n    setTimeout(() => {\n      columns.value = [{ text: 'Option', value: 'option' }];\n      loading.value = false;\n    }, 1000);\n\n    return { columns, loading };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage\nDESCRIPTION: Displays a simple icon using the `van-icon` component with the `name` prop. The `name` prop specifies the icon to display, which corresponds to a name in the Vant icon set.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"chat-o\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Bottom Content (CSS)\nDESCRIPTION: CSS to set the width and height of the button within the empty state to 160px and 40px, respectively.  This style ensures the button has a defined size and appearance within the Empty component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.bottom-button {\n    width: 160px;\n    height: 40px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Sticky with Container and Ref Setup\nDESCRIPTION: This snippet demonstrates how to use the `container` property to specify a container for the sticky component. The sticky component will stick within the bounds of this container. A Vue ref is used to reference the container element.  The `setup` function initializes the `container` ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"container\" style=\"height: 150px;\">\n  <van-sticky :container=\"container\">\n    <van-button type=\"warning\">指定容器</van-button>\n  </van-sticky>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customized Progress Bar - HTML\nDESCRIPTION: Demonstrates customizing the appearance of the Vant Progress bar using the `pivot-text`, `color`, and `pivot-color` props.  The `color` attribute sets the progress bar color. The `pivot-text` defines the text displayed within the progress bar and the `pivot-color` sets the text background color.  Linear gradients can also be applied to the `color` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-progress pivot-text=\"橙色\" color=\"#f2826a\" :percentage=\"25\" />\n<van-progress pivot-text=\"红色\" color=\"#ee0a24\" :percentage=\"50\" />\n<van-progress\n  :percentage=\"75\"\n  pivot-text=\"紫色\"\n  pivot-color=\"#7232dd\"\n  color=\"linear-gradient(to right, #be99ff, #7232dd)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant 4 ImagePreview API\nDESCRIPTION: Shows the new Vant 4 ImagePreview API with the showImagePreview() function for calling the global ImagePreview component, and ImagePreview pointing to the ImagePreview component object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 4\nshowImagePreview(); // 函数调用\nImagePreview; // 组件对象\n```\n\n----------------------------------------\n\nTITLE: Handling Single Date Selection - JavaScript\nDESCRIPTION: Handles the single date selection logic for the Vant Calendar component.  It uses `ref` to manage the selected date and calendar visibility.  The `onConfirm` function updates the date variable with the selected date. Requires the Vue Composition API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const date = ref('');\n    const show = ref(false);\n\n    const formatDate = (date) => {\n      return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n    };\n    const onConfirm = (value) => {\n      show.value = false;\n      date.value = formatDate(value);\n    };\n\n    return {\n      date,\n      show,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Color - HTML\nDESCRIPTION: Demonstrates setting the active-color prop to customize the highlight color of the selected option in the Cascader component. Sets the color to #ee0a24.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cascader\n  v-model=\"cascaderValue\"\n  title=\"请选择所在地区\"\n  :options=\"options\"\n  active-color=\"#ee0a24\"\n  @close=\"show = false\"\n  @finish=\"onFinish\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Pagination Usage\nDESCRIPTION: This snippet showcases basic usage of the Vant Pagination component within a Vue template.  It binds the `v-model` to a `currentPage` ref and sets `total-items` and `items-per-page` props.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination v-model=\"currentPage\" :total-items=\"24\" :items-per-page=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: Toast API mapping Vant 3 to Vant 4\nDESCRIPTION: Lists the mapping of the old Toast API in Vant 3 to the new API in Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nToast(); // -> showToast()\nToast.fail(); // -> showFailToast()\nToast.success(); // -> showSuccessToast()\nToast.loading(); // -> showLoadingToast()\nToast.clear(); // -> closeToast()\nToast.setDefaultOptions(); // -> setToastDefaultOptions()\nToast.resetDefaultOptions(); // -> resetToastDefaultOptions()\n```\n\n----------------------------------------\n\nTITLE: Customizing Background Color for Signature Component\nDESCRIPTION: This code snippet illustrates how to customize the background color of the Signature component using the `background-color` prop. It sets the background color to light gray (#eee).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-signature background-color=\"#eee\" @submit=\"onSubmit\" @clear=\"onClear\" />\n```\n\n----------------------------------------\n\nTITLE: Using ContactEdit Component\nDESCRIPTION: This example shows how to use the ContactEdit component in a Vue.js template. It configures properties like `is-edit`, `show-set-default`, `contact-info`, and binds event handlers for `save` and `delete` actions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-edit\n  is-edit\n  show-set-default\n  :contact-info=\"editingContact\"\n  set-default-label=\"设为默认联系人\"\n  @save=\"onSave\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Vant Pagination Buttons\nDESCRIPTION: This code snippet demonstrates how to customize the previous and next buttons of the Vant Pagination component using slots. It utilizes the `van-icon` component for the icons and replaces the default text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination v-model=\"currentPage\" :total-items=\"50\" :show-page-size=\"5\">\n  <template #prev-text>\n    <van-icon name=\"arrow-left\" />\n  </template>\n  <template #next-text>\n    <van-icon name=\"arrow\" />\n  </template>\n  <template #page=\"{ text }\">{{ text }}</template>\n</van-pagination>\n```\n\n----------------------------------------\n\nTITLE: Setting Full-Page Watermark with Vant\nDESCRIPTION: Demonstrates how to make the watermark cover the entire page by setting the `full-page` property to true. Requires Vant Watermark component and an image URL.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  opacity=\"0.2\"\n  :full-page=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Square Shape - Vue\nDESCRIPTION: This snippet demonstrates how to create a CheckboxGroup with square-shaped checkboxes by setting the `shape` property to `square`. It also showcases the usage of the `name` property for individual checkboxes within the group.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox-group v-model=\"checked\" shape=\"square\">\n  <van-checkbox name=\"a\">复选框 a</van-checkbox>\n  <van-checkbox name=\"b\">复选框 b</van-checkbox>\n</van-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Initializing useCountDown with Milliseconds JS\nDESCRIPTION: This JavaScript code initializes the useCountDown hook with millisecond rendering enabled.  It sets the time and `millisecond` option to true and then starts the countdown. The current countdown state is returned for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCountDown } from '@vant/use';\n\nexport default {\n  setup() {\n    const countDown = useCountDown({\n      time: 24 * 60 * 60 * 1000,\n      millisecond: true,\n    });\n    countDown.start();\n\n    return {\n      current: countDown.current,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Listening to Change Event\nDESCRIPTION: Listens to the `change` event of the Rate component and displays a toast message.  The `change` event is triggered when the rate value changes. The code defines an `onChange` handler that displays a toast message with the current value. This is bound to the `<van-rate>` component via the `@change` attribute. The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" @change=\"onChange\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Content - HTML\nDESCRIPTION: Demonstrates how to customize the content displayed within the BackTop component using a default slot. This example renders a list of cells and customizes the BackTop text to \"返回顶部\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n<van-back-top class=\"custom\">返回顶部</van-back-top>\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Load for Vant Image in HTML\nDESCRIPTION: This HTML snippet shows how to enable lazy loading for the Vant Image component. The 'lazy-load' attribute defers loading the image until it is near the viewport, improving initial page load performance.  Requires registration of the Lazyload component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"100\"\n  height=\"100\"\n  lazy-load\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: AddressList Setup - JavaScript\nDESCRIPTION: Sets up the data and methods required for the AddressList component. It uses `ref` to create reactive variables for `chosenAddressId`, `list`, and `disabledList`.  `onAdd` and `onEdit` are defined as event handlers using the `showToast` from Vant. It returns the reactive variables and event handlers to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const chosenAddressId = ref('1');\n    const list = [\n      {\n        id: '1',\n        name: 'John Snow',\n        tel: '13000000000',\n        address: 'Somewhere',\n        isDefault: true,\n      },\n      {\n        id: '2',\n        name: 'Ned Stark',\n        tel: '1310000000',\n        address: 'Somewhere',\n      },\n    ];\n    const disabledList = [\n      {\n        id: '3',\n        name: 'Tywin',\n        tel: '1320000000',\n        address: 'Somewhere',\n      },\n    ];\n\n    const onAdd = () => showToast('Add');\n    const onEdit = (item, index) => showToast('Edit:' + index);\n\n    return {\n      list,\n      onAdd,\n      onEdit,\n      disabledList,\n      chosenAddressId,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Tag Types Definition\nDESCRIPTION: Shows the import statement for TagSize, TagType, TagProps from vant. This allows developers to utilize the Tag component's typings in their TypeScript code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TagSize, TagType, TagProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Advanced TimePicker Filtering - HTML\nDESCRIPTION: This snippet shows advanced usage with the `filter` function of `van-time-picker`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker title=\"选择时间\" :filter=\"filter\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Anchors for FloatingPanel\nDESCRIPTION: Shows how to define custom anchor points for the FloatingPanel using the `anchors` prop and control the current height using `v-model:height`.  It defines an array of pixel values for the anchor points and binds the current height to a reactive variable. Requires Vue and Vant UI library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-panel v-model:height=\"height\" :anchors=\"anchors\">\n  <div style=\"text-align: center; padding: 15px\">\n    <p>面板显示高度 {{ height.toFixed(0) }} px</p>\n  </div>\n</van-floating-panel>\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Divider in HTML\nDESCRIPTION: This HTML code snippet demonstrates how to customize the style of the Vant Divider component using the `style` attribute. The styles are defined inline using a Vue binding. The color, border color, and padding are modified to achieve the desired visual appearance. The text \"文本\" is included as content within the styled divider.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-divider\n  :style=\"{ color: '#1989fa', borderColor: '#1989fa', padding: '0 16px' }\"\n>\n  文本\n</van-divider>\n```\n\n----------------------------------------\n\nTITLE: Creating a Rounded Image in HTML\nDESCRIPTION: Shows how to make an image circular by setting the round property. The width and height are set to 10rem to define the dimensions of the circular image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  round\n  width=\"10rem\"\n  height=\"10rem\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Justify Alignment in Vant Row\nDESCRIPTION: This HTML snippet demonstrates how to use the `justify` property on the `van-row` component to control the horizontal alignment of the columns within the row. It provides examples of using `center`, `end`, `space-between`, and `space-around` values for the `justify` property, which correspond to the `justify-content` property in CSS flexbox. Each row contains three columns, each with a span of 6.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- 居中 -->\n<van-row justify=\"center\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n\n<!-- 右对齐 -->\n<van-row justify=\"end\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n\n<!-- 两端对齐 -->\n<van-row justify=\"space-between\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n\n<!-- 每个元素的两侧间隔相等 -->\n<van-row justify=\"space-around\">\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n  <van-col span=\"6\">span: 6</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Initializing Rate component in Vue\nDESCRIPTION: Registers the Vant Rate component for use in a Vue application.  This snippet demonstrates how to import and register the Rate component globally within a Vue application. It is a necessary step to use the `<van-rate>` tag in templates.  No specific inputs or outputs are explicitly defined within the snippet beyond the global registration of the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Rate } from 'vant';\n\nconst app = createApp();\napp.use(Rate);\n```\n\n----------------------------------------\n\nTITLE: Add Custom Iconfont - CSS\nDESCRIPTION: Defines a custom icon font using `@font-face` in CSS.  This allows using custom icons defined in a TTF file. It defines the font family and the source URL for the font file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'my-icon';\n  src: url('./my-icon.ttf') format('truetype');\n}\n\n.my-icon {\n  font-family: 'my-icon';\n}\n\n.my-icon-extra::before {\n  content: '\\e626';\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Signature Component with Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Signature component within a Vue application using the `createApp` function. It imports the necessary modules and uses the `app.use()` method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Signature } from 'vant';\n\nconst app = createApp();\napp.use(Signature);\n```\n\n----------------------------------------\n\nTITLE: Custom Swipe Size - HTML\nDESCRIPTION: Customizes the width of individual slides within the Swipe component. The `width` prop sets the width of each slide to 300px.  `loop` is set to `false` as custom sizes are not supported in loop mode.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe :loop=\"false\" :width=\"300\">\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Basic FloatingBubble Usage\nDESCRIPTION: Demonstrates the basic usage of the FloatingBubble component with an icon and a click handler. The HTML template uses `<van-floating-bubble>` with the `icon` prop set to \"chat\" and a click event bound to the `onClick` method.  The JavaScript code defines the `onClick` method which displays a toast message.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-bubble icon=\"chat\" @click=\"onClick\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onClick = () => {\n      showToast('Click Bubble');\n    };\n    return { onClick };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Collapse Item Title with Slots\nDESCRIPTION: This HTML snippet shows how to customize the title of a `van-collapse-item` using the `title` slot. The first item uses a slot to include a `van-icon` in the title, while the second item sets the `icon` prop for a simpler icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\">\n  <van-collapse-item name=\"1\">\n    <template #title>\n      <div>Title1 <van-icon name=\"question-o\" /></div>\n    </template>\n    The code is written for people to see and can be run on a machine.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title2\" name=\"2\" icon=\"shop-o\">\n    Technology is nothing more than the common soul of those who develop it.\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Popup Lifecycle Events - HTML\nDESCRIPTION: Demonstrates how to listen for lifecycle events such as `open`, `opened`, `close`, and `closed` on the Vant Popup.  These events are emitted at different stages of the popup's opening and closing transitions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"监听显示事件\" is-link @click=\"show = true\" />\n<van-popup\n  v-model:show=\"show\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n  @open=\"showToast('open')\"\n  @opened=\"showToast('opened')\"\n  @close=\"showToast('close')\"\n  @closed=\"showToast('closed')\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Dialog with closeOnPopstate - JavaScript\nDESCRIPTION: Shows how to prevent the Dialog from closing when the user navigates back in the browser history by setting `closeOnPopstate` to `false`. This ensures the dialog remains open until explicitly closed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n\nshowDialog({\n  title: '标题',\n  message: '弹窗内容',\n  closeOnPopstate: false,\n}).then(() => {\n  // on close\n});\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: This snippet shows the basic directory structure of a component library based on Vant CLI. It contains the src directory for component source code, the docs directory for static documentation, and configuration files like vant.config.mjs, package.json, and README.md.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproject\n├─ src                # component library source code\n│   ├─ button        # button source code\n│   └─ dialog        # dialog source code\n│\n├─ docs               # static doc directory\n│   ├─ home.md       # documentation site home\n│   └─ changelog.md  # changelog\n│\n├─ vant.config.mjs    # Vant CLI config file\n├─ package.json\n└─ README.md\n```\n\n----------------------------------------\n\nTITLE: Barrage Data Handling with Vue Composition API\nDESCRIPTION: This TypeScript code snippet showcases how to manage the barrage data using Vue's Composition API. It defines a reactive `list` using `ref` and provides an `add` function to push new barrage items into the list.  The `list` and `add` function are then returned to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const defaultList = [\n      { id: 100, text: 'Lightweight' },\n      { id: 101, text: 'Customizable' },\n      { id: 102, text: 'Mobile' },\n      { id: 103, text: 'Vue' },\n      { id: 104, text: 'Library' },\n      { id: 105, text: 'VantUI' },\n      { id: 106, text: '666' },\n    ];\n\n    const list = ref([...defaultList]);\n    const add = () => {\n      list.value.push({ id: Math.random(), text: 'Barrage' });\n    };\n    return { list, add };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Rsbuild Project\nDESCRIPTION: This command shows how to create a new Rsbuild project. Rsbuild is a build tool based on Rspack, developed by the author of Vant, with first-class build speed and development experience, providing first-priority support for Vant. Requires npm and Rsbuild to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: Badge Notification TreeSelect - HTML\nDESCRIPTION: Demonstrates how to display badge notifications and small red dots in a TreeSelect component.  `v-model:main-active-index` is bound to the `activeIndex` state and the `:items` property is bound to the `items` data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:main-active-index=\"activeIndex\"\n  height=\"55vw\"\n  :items=\"items\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic useClickAway Usage - JavaScript\nDESCRIPTION: Demonstrates the basic usage of the useClickAway hook in a Vue component's setup function. It imports the ref and useClickAway functions, creates a ref for the root element, and then calls useClickAway, passing in the root ref and a callback function that logs a message when a click occurs outside the element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useClickAway } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n    useClickAway(root, () => {\n      console.log('click outside!');\n    });\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Swipe Usage - HTML\nDESCRIPTION: Demonstrates basic usage of the Vant Swipe component to display a carousel with four slides. The `autoplay` prop sets the automatic sliding interval to 3000ms, and `indicator-color` sets the color of the indicators.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe class=\"my-swipe\" :autoplay=\"3000\" indicator-color=\"white\">\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Basic RollingText Usage\nDESCRIPTION: This code snippet demonstrates the basic usage of the RollingText component with start and target numbers. It sets the starting number to 0 and the target number to 123. Vant RollingText component required.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :start-num=\"0\" :target-num=\"123\" />\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Dark Mode Toggle - HTML\nDESCRIPTION: This snippet demonstrates how to enable dark mode for all Vant components on a page by setting the `theme` attribute of the `van-config-provider` component to `dark`. This will apply dark mode styles to all Vant components within the ConfigProvider.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider theme=\"dark\">\n  <!-- child components -->\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Instance Methods (TypeScript)\nDESCRIPTION: This snippet shows how to obtain a reference to a Vant Form instance using `ref` from Vue, and then use that reference to call the `submit` method on the form. This is useful for programmatically submitting the form from within a component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { FormInstance } from 'vant';\n\nconst formRef = ref<FormInstance>();\n\nformRef.value?.submit();\n```\n\n----------------------------------------\n\nTITLE: Horizontal Actions Popover Setup - JavaScript\nDESCRIPTION: Sets up the state needed for the horizontal actions Popover component in a Vue setup function.  It defines a reactive `showPopover` ref to control the popover's visibility and an `actions` array to populate the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: 'Option 1' },\n      { text: 'Option 2' },\n      { text: 'Option 3' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure Vite using the `build.configureVite` option in `vant.config.mjs`. It allows you to customize the Vite configuration by providing a function that receives and returns the Vite configuration object. Requires `@vant/cli >= 4.0.0`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  build: {\n    configureVite(config) {\n      config.server.port = 3000;\n      return config;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Sticky Component with Vue\nDESCRIPTION: This snippet demonstrates how to globally register the Vant Sticky component within a Vue application.  It imports the necessary modules from 'vue' and 'vant' and then uses the `app.use()` method to register the component. This makes the `<van-sticky>` tag available throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Sticky } from 'vant';\n\nconst app = createApp();\napp.use(Sticky);\n```\n\n----------------------------------------\n\nTITLE: Calculating Circle Width\nDESCRIPTION: Illustrates the formula for calculating the rendered progress bar width in pixels based on the `strokeWidth`, `circleWidth`, and `viewBox` size. Used to understand relationship between `stroke-width` and `px`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// viewBox size for SVG\nconst viewBox = 1000 + strokeWidth;\n\n// The width of the Circle component, the default is 100px\nconst circleWidth = 100;\n\n// Final rendered progress bar width (px)\nconst pxWidth = (strokeWidth * circleWidth) / viewBox;\n```\n\n----------------------------------------\n\nTITLE: Managing Overlay Visibility with Vue Ref\nDESCRIPTION: This script demonstrates how to manage the visibility of the Vant Overlay component using a reactive ref in a Vue component. It exports a setup function that initializes a ref named 'show' to false and returns it, allowing the template to control the overlay's 'show' prop. Dependencies: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return { show };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Safe Area Adaptation with Vant Classes HTML\nDESCRIPTION: Demonstrates how to adapt elements to the safe areas on devices with notches or rounded corners using Vant's CSS classes. The `van-safe-area-top` and `van-safe-area-bottom` classes add padding to the top and bottom of the element, respectively.  No external dependencies are required, as these are built-in Vant styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.zh-CN.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 顶部安全区 -->\n<div class=\"van-safe-area-top\"></div>\n\n<!-- 底部安全区 -->\n<div class=\"van-safe-area-bottom\"></div>\n```\n\n----------------------------------------\n\nTITLE: Watermark Component Typescript Definition\nDESCRIPTION: Shows how to import typescript definition for the Watermark component.  Allows for type checking and autocompletion when working with the component in Typescript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { WaterProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Customizing Vant Button Styles with CSS\nDESCRIPTION: This snippet demonstrates how to customize the styles of a Vant Button component by overriding the default CSS classes. It covers both modifying the outer element's styles (width) and the inner element's styles (text color). No dependencies are explicitly required other than the Vant CSS being included.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/faq.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <van-button class=\"my-button\">按钮</van-button>\n</template>\n\n<style>\n  /** 覆盖 Button 最外层元素的样式 */\n  .my-button {\n    width: 200px;\n  }\n\n  /** 覆盖 Button 内部子元素的样式 */\n  .my-button .van-button__text {\n    color: red;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Combining Dark Mode with CSS Variables - HTML\nDESCRIPTION: This HTML snippet demonstrates how to combine dark mode with CSS variables using `theme-vars`, `theme-vars-dark`, and `theme-vars-light` props to specify theme variables for each mode, which allows customization depending on the selected theme.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider\n  :theme-vars=\"themeVars\"\n  :theme-vars-dark=\"themeVarsDark\"\n  :theme-vars-light=\"themeVarsLight\"\n>\n  ...\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Vant Grid with Column Number - HTML\nDESCRIPTION: Shows how to specify the number of columns in the Vant Grid using the `column-num` prop. It dynamically generates six GridItem components using `v-for`, each with an icon and text.  This snippet uses the `van-grid` and `van-grid-item` components and expects the `column-num` prop to be a number.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :column-num=\"3\">\n  <van-grid-item v-for=\"value in 6\" :key=\"value\" icon=\"photo-o\" text=\"Text\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Reactive value setup for icon display\nDESCRIPTION: This code snippet sets up reactive values for the example showcasing icons on the input field.  It uses `ref` to initialize `value1` as an empty string and `value2` with the string '123'. Required dependency: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value1 = ref('');\n    const value2 = ref('123');\n    return {\n      value1,\n      value2,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Start Position Ellipsis - Vue HTML\nDESCRIPTION: Configures the TextEllipsis component to truncate the text at the start. Sets the `position` prop to \"start\". Requires the Vant TextEllipsis component to be properly installed and configured.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis\n  rows=\"1\"\n  :content=\"text\"\n  expand-text=\"展开\"\n  collapse-text=\"收起\"\n  position=\"start\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pagination Component with Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Pagination component in a Vue application using `createApp` from Vue and the `Pagination` component from Vant. It imports necessary modules and then registers the Pagination component with the Vue app.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Pagination } from 'vant';\n\nconst app = createApp();\napp.use(Pagination);\n```\n\n----------------------------------------\n\nTITLE: Dynamic RootValue for PostCSS Pxtorem\nDESCRIPTION: This snippet demonstrates dynamically setting the `rootValue` option for `postcss-pxtorem` based on the file being processed. If the file path contains 'vant', the `rootValue` is set to 37.5; otherwise, it's set to 75.  Requires `postcss-pxtorem` version 5.0.0 or higher.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    // postcss-pxtorem 插件的版本需要 >= 5.0.0\n    'postcss-pxtorem': {\n      rootValue({ file }) {\n        return file.indexOf('vant') !== -1 ? 37.5 : 75;\n      },\n      propList: ['*'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Grid Item Spacing - HTML\nDESCRIPTION: Demonstrates how to add spacing between grid items using the `gutter` property. The gutter size is specified in pixels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :gutter=\"10\">\n  <van-grid-item v-for=\"value in 8\" :key=\"value\" icon=\"photo-o\" text=\"文字\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: AddressList Basic Usage in Vue Template\nDESCRIPTION: This code snippet shows a basic example of using the AddressList component in a Vue template. It binds the chosenAddressId and list props to reactive data, sets the disabled-text prop, and adds event listeners for the add and edit events. The v-model directive is used for two-way data binding with the chosenAddressId.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-address-list\n  v-model=\"chosenAddressId\"\n  :list=\"list\"\n  :disabled-list=\"disabledList\"\n  disabled-text=\"以下地址超出配送范围\"\n  default-tag-text=\"默认\"\n  @add=\"onAdd\"\n  @edit=\"onEdit\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Expand/Collapse TextEllipsis - Vue HTML\nDESCRIPTION: Implements expand/collapse functionality using the TextEllipsis component. The `expand-text` and `collapse-text` props are set to customize the button labels. Requires the Vant TextEllipsis component to be properly installed and configured.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis :content=\"text\" expand-text=\"展开\" collapse-text=\"收起\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Setup - JavaScript\nDESCRIPTION: This JavaScript snippet provides the setup for the custom icons used in the previous HTML snippet. It defines reactive variables for `checked`, `activeIcon`, and `inactiveIcon`. The `activeIcon` and `inactiveIcon` variables hold URLs to image assets.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref('1');\n    return {\n      checked,\n      activeIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png',\n      inactiveIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-inactive.png',\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Expand/Collapse TextEllipsis - Vue JavaScript\nDESCRIPTION: Defines the Vue component's setup function with a longer text string for demonstrating the expand/collapse feature.  It initializes a `text` variable with a sample string and returns it to be used in the template. Requires Vue's `setup` function to be used within a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      '似水流年是一个人所有的一切，只有这个东西，才真正归你所有。其余的一切，都是片刻的欢娱和不幸，转眼间就已跑到那似水流年里去了。';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Circle with Gradient Color\nDESCRIPTION: Shows how to apply a gradient color to the Vant Circle component. It defines a `gradientColor` object and passes it to the `color` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  :color=\"gradientColor\"\n  text=\"Gradient\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Loading State\nDESCRIPTION: This code snippet showcases the use of the loading prop to display a loading indicator while the picker's data is being fetched asynchronously.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-picker :columns=\"columns\" :loading=\"loading\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Position - Vue\nDESCRIPTION: Modifies the position of the Toast message on the screen, setting it to the top or bottom using the position property. The default position is in the center. Requires the showToast function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nshowToast({\n  message: '顶部展示',\n  position: 'top',\n});\n\nshowToast({\n  message: '底部展示',\n  position: 'bottom',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Card Component in Vue\nDESCRIPTION: Registers the Vant Card component for global use within a Vue application.  It requires the createApp function from Vue and the Card component from Vant.  The component is then installed using `app.use(Card)`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Card } from 'vant';\n\nconst app = createApp();\napp.use(Card);\n```\n\n----------------------------------------\n\nTITLE: Custom Vant Rate Icon\nDESCRIPTION: This HTML snippet demonstrates how to customize the icons used in the Vant Rate component. It uses the `icon` and `void-icon` props to specify custom icon names.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" icon=\"like\" void-icon=\"like-o\" />\n```\n\n----------------------------------------\n\nTITLE: Basic RollingText Usage - HTML\nDESCRIPTION: Demonstrates basic usage of the RollingText component by setting the start-num and target-num props. The component will automatically animate from the starting number to the target number.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :start-num=\"0\" :target-num=\"123\" />\n```\n\n----------------------------------------\n\nTITLE: Loop Calls with useRaf in JavaScript\nDESCRIPTION: Demonstrates how to use the `useRaf` hook to repeatedly execute a function at a specified interval until it is canceled. The `isLoop` option enables looping, and the `interval` option sets the call interval in milliseconds. The hook returns a cancel function to stop the loop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-raf.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRaf } from '@vant/use';\n\nexport default {\n  setup() {\n    let count = 0;\n    const cancelRaf = useRaf(\n      () => {\n        console.log(++count); // Execute infinitely until canceled\n\n        if (count === 5) {\n          cancelRaf();\n        }\n      },\n      {\n        isLoop: true, // Enable the loop\n        interval: 100, // Set call interval\n      },\n    );\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using FieldInstance with Vue Ref - TypeScript\nDESCRIPTION: This example showcases how to use the `FieldInstance` type in conjunction with Vue's `ref` function to create a reactive reference to a Vant Field component instance. This allows you to access and call methods on the Field component programmatically, such as focusing the input field. Requires Vue and Vant to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { FieldInstance } from 'vant';\n\nconst fieldRef = ref<FieldInstance>();\n\nfieldRef.value?.focus();\n```\n\n----------------------------------------\n\nTITLE: Preview Size Configuration - HTML\nDESCRIPTION: Illustrates how to customize the preview image size using the `preview-size` prop.  It supports both numeric values (in pixels) and string values with units like `rem`, `vh`, and `vw`. You can also set the width and height separately using an array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- The default unit is px -->\n<van-uploader v-model=\"fileList\" preview-size=\"60\" />\n<!-- Support other units, such as rem, vh, vw -->\n<van-uploader v-model=\"fileList\" preview-size=\"5rem\" />\n\n\n<van-uploader v-model=\"fileList\" :preview-size=\"[60, 40]\" />\n```\n\n----------------------------------------\n\nTITLE: Teleporting Popup - HTML\nDESCRIPTION: Illustrates how to specify the mounting location of the Vant Popup using the `teleport` prop. Examples are provided for mounting to the `body` and to an element with the ID `app`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- 挂载到 body 节点下 -->\n<van-popup v-model:show=\"show\" teleport=\"body\" />\n\n<!-- 挂载到 #app 节点下 -->\n<van-popup v-model:show=\"show\" teleport=\"#app\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary Color in Vant 4.0 - CSS\nDESCRIPTION: This code snippet shows how to customize the primary color of all Vant components by overriding the `--van-primary-color` CSS variable. This allows for easy theme customization and requires an understanding of CSS variables and how they are applied within the Vant component library.  It changes the default primary color to green.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.zh-CN.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --van-primary-color: #07c160;\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Scroll with Vant BackTop\nDESCRIPTION: This example shows how to use the `immediate` prop to make the Vant BackTop component scroll to the top immediately upon mounting. The HTML consists of a `van-back-top` component with the `immediate` prop set.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-back-top immediate />\n```\n\n----------------------------------------\n\nTITLE: Adding Left Icon to Cell - HTML\nDESCRIPTION: This snippet demonstrates how to add a left icon to a cell using the `icon` prop on the `van-cell` component.  It shows how to display an icon before the title using a predefined icon name.  Requires Vant's icon component to be set up.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"Cell title\" icon=\"location-o\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Styles for Rate Component\nDESCRIPTION: Applies custom styles to the Rate component, including size, colors, and icons.  This snippet demonstrates customizing the appearance of the Rate component. It sets the icon size to 25px, the selected color to #ffd21e, the unselected icon to \"star\", and the unselected color to #eee. The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-rate\n  v-model=\"value\"\n  :size=\"25\"\n  color=\"#ffd21e\"\n  void-icon=\"star\"\n  void-color=\"#eee\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Title Content - HTML\nDESCRIPTION: This snippet demonstrates how to customize the title content of a `van-collapse-item` using the `title` slot. This allows for including icons or other custom elements within the title.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\">\n  <van-collapse-item name=\"1\">\n    <template #title>\n      <div>标题1 <van-icon name=\"question-o\" /></div>\n    </template>\n    代码是写出来给人看的，附带能在机器上运行。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题2\" name=\"2\" icon=\"shop-o\">\n    技术无非就是那些开发它的人的共同灵魂。\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Grid and GridItem - JavaScript\nDESCRIPTION: Registers the `Grid` and `GridItem` components globally within a Vue application.  This allows the components to be used throughout the application without needing to be individually imported into each component. Requires the `vue` package and the `Grid` and `GridItem` components from the `vant` library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Grid, GridItem } from 'vant';\n\nconst app = createApp();\napp.use(Grid);\napp.use(GridItem);\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Usage with Content and Dot\nDESCRIPTION: This snippet demonstrates the basic usage of the Badge component with different content and the dot property. It showcases how to display numbers, text, and a small dot as badge content. A basic CSS style is also defined for the child element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"5\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge content=\"Hot\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge dot>\n  <div class=\"child\" />\n</van-badge>\n```\n\nLANGUAGE: css\nCODE:\n```\n.child {\n    width: 40px;\n    height: 40px;\n    background: #f2f3f5;\n    border-radius: 4px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Radio Icon with Slots\nDESCRIPTION: Demonstrates how to customize the Radio icon using the `icon` slot.  This allows for complete control over the icon's appearance, including dynamic changes based on the checked state, accessed via `props.checked`.  External image URLs are used for active and inactive states.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\">\n    单选框 1\n    <template #icon=\"props\">\n      <img class=\"img-icon\" :src=\"props.checked ? activeIcon : inactiveIcon\" />\n    </template>\n  </van-radio>\n  <van-radio name=\"2\">\n    单选框 2\n    <template #icon=\"props\">\n      <img class=\"img-icon\" :src=\"props.checked ? activeIcon : inactiveIcon\" />\n    </template>\n  </van-radio>\n</van-radio-group>\n\n<style>\n  .img-icon {\n    height: 20px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Tag Usage\nDESCRIPTION: Demonstrates basic usage of the Vant Tag component with different types (primary, success, danger, warning).  This provides a quick overview of how to create simple tags with predefined styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tag type=\"primary\">Tag</van-tag>\n<van-tag type=\"success\">Tag</van-tag>\n<van-tag type=\"danger\">Tag</van-tag>\n<van-tag type=\"warning\">Tag</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar Change Event in Vue.js\nDESCRIPTION: This JavaScript code snippet defines the `onChange` method, which is called when the selected sidebar item changes. It imports the `showToast` function from the 'vant' library and uses it to display a toast message indicating the title of the selected item. This demonstrates how to respond to user interactions with the Sidebar component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    const onChange = (index) => showToast(`Title ${index + 1}`);\n    return {\n      active,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Vant Picker Component into Form\nDESCRIPTION: This HTML snippet demonstrates how to integrate the Vant Picker component into a Vant Form. The Picker is displayed in a popup controlled by `showPicker`. The selected result is displayed in the `van-field`. The `destroy-on-close` prop ensures the popup is re-rendered each time it is opened. The `model-value` prop is for two-way binding of the column values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.zh-CN.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"picker\"\n  label=\"选择器\"\n  placeholder=\"点击选择城市\"\n  @click=\"showPicker = true\"\n/>\n<van-popup v-model:show=\"showPicker\" destroy-on-close position=\"bottom\">\n  <van-picker\n    :columns=\"columns\"\n    :model-value=\"pickerValue\"\n    @confirm=\"onConfirm\"\n    @cancel=\"showPicker = false\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definition for Vant Overlay\nDESCRIPTION: This snippet shows how to import the TypeScript type definition for OverlayProps from the vant library. This allows developers to use TypeScript to enforce type safety when working with the Vant Overlay component. Dependencies: vant, typescript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OverlayProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Managing Loading State in Vue\nDESCRIPTION: This snippet shows the Vue component setup for managing the `loading` state used in the conditional rendering example.  It uses `ref` from Vue to create a reactive `loading` variable, initially set to true, and then sets it to false within the `onMounted` lifecycle hook after the component is mounted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  setup() {\n    const loading = ref(true);\n\n    onMounted(() => {\n      loading.value = false;\n    });\n\n    return {\n      loading,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Plain Style\nDESCRIPTION: Shows how to use the `plain` prop to create a tag with a plain style. This style typically has a transparent background and a border.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-tag plain type=\"primary\">Tag</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Popover Type Definition - TypeScript\nDESCRIPTION: Defines the TypeScript type definitions that are exported by the Vant Popover component. These types are helpful to strongly type your applications using the popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  PopoverProps,\n  PopoverTheme,\n  PopoverAction,\n  PopoverActionsDirection,\n  PopoverTrigger,\n  PopoverPlacement,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar - HTML\nDESCRIPTION: Displays a basic Vant Progress bar with a percentage set to 50%. The progress bar uses the default blue color. The `percentage` prop determines the amount of progress shown.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-progress :percentage=\"50\" />\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider with Light and Dark Theme Vars\nDESCRIPTION: This HTML code demonstrates how to define specific theme variables for both dark and light modes using ConfigProvider. The theme-vars-dark and theme-vars-light props allow for setting different values for CSS variables based on the active theme.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider\n  :theme-vars=\"themeVars\"\n  :theme-vars-dark=\"themeVarsDark\"\n  :theme-vars-light=\"themeVarsLight\"\n>\n  ...\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Initializing Badge Component in Vue\nDESCRIPTION: This snippet shows how to globally register the Badge component in a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and uses the Badge component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Badge } from 'vant';\n\nconst app = createApp();\napp.use(Badge);\n```\n\n----------------------------------------\n\nTITLE: Before Change Callback - HTML\nDESCRIPTION: Demonstrates using the `before-change` prop to define a callback function that is executed before the tab is changed. The callback can return `false` to prevent the change, or a Promise that resolves to a boolean. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" :before-change=\"beforeChange\">\n  <van-tab v-for=\"index in 4\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Skeleton Usage - HTML\nDESCRIPTION: This code demonstrates the basic usage of the `van-skeleton` component in HTML. It displays a skeleton with a title and three rows of placeholder content. The `:row` attribute specifies the number of rows to display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton title :row=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Action Slot - Vue HTML\nDESCRIPTION: Demonstrates how to customize the expand/collapse action content using a slot.  The slot `action` is used to override the default action content. Requires the Vant TextEllipsis component to be properly installed and configured.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis :content=\"text\">\n  <template #action=\"{ expanded }\">{{ expanded ? '收起' : '展开' }}</template>\n</van-text-ellipsis>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Element for useRect\nDESCRIPTION: Defines a basic HTML div element with a ref attribute 'root'. This ref is then used by the useRect hook in the JavaScript/Vue component to get the element's dimensions and position.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-rect.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Advanced SubmitBar Usage (Vue)\nDESCRIPTION: This code snippet demonstrates how to define the `onSubmit` and `onClickLink` methods in a Vue component's setup function. Both methods use the `showToast` function from Vant to display a message when the respective elements are clicked. This is related to the previous HTML snippet demonstrating advanced usage with slots.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onSubmit = () => showToast('点击按钮');\n    const onClickLink = () => showToast('修改地址');\n    return {\n      onSubmit,\n      onClickLink,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color in Vant Action Bar (HTML)\nDESCRIPTION: This HTML code demonstrates how to customize the color of the icons in the Vant Action Bar. The `color` prop on the `van-action-bar-icon` component allows specifying a custom color for the icon, overriding the default color.  The first icon is set to \"#ee0a24\", and the third icon is set to \"#ff5000\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"Icon1\" color=\"#ee0a24\" />\n  <van-action-bar-icon icon=\"cart-o\" text=\"Icon2\" />\n  <van-action-bar-icon icon=\"star\" text=\"Collected\" color=\"#ff5000\" />\n  <van-action-bar-button type=\"warning\" text=\"Button\" />\n  <van-action-bar-button type=\"danger\" text=\"Button\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Global Component Registration with Vant (Method 1)\nDESCRIPTION: Demonstrates global registration of a Vant component using `app.use()`. This method imports the component and registers it for use throughout the application. Requires Vue 3 and the Vant component library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'vant';\nimport { createApp } from 'vue';\n\nconst app = createApp();\n\n// Method 1. via app.use\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: Custom Shape RadioGroup - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the shape of the radio buttons within a RadioGroup.  The `shape` prop can be set to \"square\" or \"dot\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\" shape=\"square\">\n  <van-radio name=\"1\">Radio 1</van-radio>\n  <van-radio name=\"2\">Radio 2</van-radio>\n</van-radio-group>\n\n<van-radio-group v-model=\"checked\" shape=\"dot\">\n  <van-radio name=\"1\">Radio 1</van-radio>\n  <van-radio name=\"2\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Installing auto import plugins via Bun\nDESCRIPTION: These commands install the necessary packages for automatic component and style importing with Vant using `unplugin-vue-components` and `@vant/auto-import-resolver`. Requires Bun to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# with Bun\nbun add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n```\n\n----------------------------------------\n\nTITLE: Importing Picker Types - TypeScript\nDESCRIPTION: Imports various type definitions associated with the Vant Picker component, such as `PickerProps`, `PickerColumn`, `PickerOption`, `PickerInstance`, `PickerFieldNames`, `PickerToolbarPosition`, `PickerCancelEventParams`, `PickerChangeEventParams`, and `PickerConfirmEventParams` from the 'vant' library. These types are useful for defining the props, data structure and event parameters when working with the Picker component in TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  PickerProps,\n  PickerColumn,\n  PickerOption,\n  PickerInstance,\n  PickerFieldNames,\n  PickerToolbarPosition,\n  PickerCancelEventParams,\n  PickerChangeEventParams,\n  PickerConfirmEventParams,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Empty Component with Custom Bottom Content\nDESCRIPTION: Demonstrates how to insert custom content below the image and description in the Empty component. The default slot is used to inject a `van-button` component, providing an interactive element within the empty state. CSS styles are added to control the button's appearance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-empty description=\"描述文字\">\n  <van-button round type=\"primary\" class=\"bottom-button\">按钮</van-button>\n</van-empty>\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .bottom-button {\n    width: 160px;\n    height: 40px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Embedding Content in Vant Overlay (HTML)\nDESCRIPTION: This code demonstrates embedding content within the Vant Overlay component using the default slot.  It includes a div with class \"wrapper\" for styling and a div with class \"block\" to represent the embedded content. The `@click.stop` prevents the overlay's click event from triggering when the embedded block is clicked. Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-overlay :show=\"show\" @click=\"show = false\">\n  <div class=\"wrapper\">\n    <div class=\"block\" @click.stop />\n  </div>\n</van-overlay>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions Usage\nDESCRIPTION: Demonstrates how to import and use the type definitions for DropdownMenuInstance and DropdownItemInstance from the 'vant' library in a TypeScript project. This allows for type checking and improved code completion when working with these components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  DropdownMenuProps,\n  DropdownItemProps,\n  DropdownItemOption,\n  DropdownItemInstance,\n  DropdownMenuInstance,\n  DropdownMenuDirection,\n} from 'vant';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { DropdownMenuInstance, DropdownItemInstance } from 'vant';\n\nconst dropdownMenuRef = ref<DropdownMenuInstance>();\nconst dropdownItemRef = ref<DropdownItemInstance>();\n\ndropdownMenuRef.value?.close();\ndropdownItemRef.value?.toggle();\n```\n\n----------------------------------------\n\nTITLE: Updating Form Component v-model Values HTML\nDESCRIPTION: Shows the renaming of the v-model prop and event for Form components in Vant v3. The `value` prop is replaced with `modelValue`, and the `input` event is replaced with `update:modelValue` for components like Checkbox, CheckboxGroup, DatetimePicker, DropdownItem, Field, Radio, RadioGroup, Search, Stepper, Switch, Sidebar, and Uploader.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.en-US.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-field :value=\"value\" @input=\"onInput\" />\n\n<!-- Vant 3 -->\n<van-field :model-value=\"value\" @update:model-value=\"onInput\" />\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Columns Type Configuration - HTML\nDESCRIPTION: HTML example demonstrating how to configure the columns displayed in the TimePicker using the `columns-type` prop. The prop is bound to the `columnsType` variable, allowing control over which time units (hour, minute, second) are displayed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"Choose Time\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Middle Position Ellipsis - Vue JavaScript\nDESCRIPTION: Defines the Vue component's setup function with a long text string for demonstrating middle position ellipsis.  It initializes a `text` variable with a sample string and returns it to be used in the template. Requires Vue's `setup` function to be used within a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      '那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Pagination in Simple Mode\nDESCRIPTION: This HTML snippet shows how to use the Vant Pagination component in `simple` mode. In simple mode it requires the `page-count` property to be defined.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination v-model=\"currentPage\" :page-count=\"12\" mode=\"simple\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Slider Component\nDESCRIPTION: This snippet demonstrates how to install the Vant Slider component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and registers the Slider component using app.use(). This allows the Slider component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Slider } from 'vant';\n\nconst app = createApp();\napp.use(Slider);\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeSelect component\nDESCRIPTION: Registers the TreeSelect component globally using app.use in a Vue application.  This makes the component available for use in templates without needing to import it in each file. Requires the 'vue' and 'vant' libraries.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { TreeSelect } from 'vant';\n\nconst app = createApp();\napp.use(TreeSelect);\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Wrapping - Vue\nDESCRIPTION: Controls how the Toast message handles text wrapping when the text is too long to fit on a single line. The 'wordBreak' option determines whether to break words or not. Requires the showToast function from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\n// 换行时截断单词\nshowToast({\n  message: 'This message will contain a incomprehensibilities long word.',\n  wordBreak: 'break-all',\n});\n\n// 换行时不截断单词\nshowToast({\n  message: 'This message will contain a incomprehensibilities long word.',\n  wordBreak: 'break-word',\n});\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Size Customization\nDESCRIPTION: Shows how to change the size of the Vant Loading component using the size prop.  It specifies the size in pixels, influencing the dimensions of the loading indicator. This applies to both the circular and spinner loading types.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-loading size=\"24\" />\n\n<van-loading type=\"spinner\" size=\"24px\" />\n```\n\n----------------------------------------\n\nTITLE: Importing IconProps type from Vant\nDESCRIPTION: Imports the `IconProps` type definition from the Vant library for use in TypeScript. This allows for type-safe usage of the Icon component properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IconProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Overall Time Range - JavaScript\nDESCRIPTION: This snippet configures the TimePicker's default selected time and returns the currentTime property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00', '00']);\n    return { currentTime };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Card with Marketing Info in HTML\nDESCRIPTION: Shows how to display marketing information on a Vant Card.  The `tag` property adds a label to the top-left corner, and the `origin-price` property displays the original price with a strikethrough. Other properties such as `num`, `price`, `desc`, `title` and `thumb` are used for the product information.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-card\n  num=\"2\"\n  tag=\"标签\"\n  price=\"2.00\"\n  desc=\"描述信息\"\n  title=\"商品标题\"\n  thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg\"\n  origin-price=\"10.00\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Stepper Usage - HTML\nDESCRIPTION: A basic usage example of the Vant Stepper component within a Vue template. It binds the component's value to a Vue ref named 'value'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Switch Props type with Typescript\nDESCRIPTION: This code shows the import statement to import the SwitchProps type definition from the 'vant' library. This can be used to strongly type the props passed to the Switch component in Typescript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SwitchProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Popover - Vue\nDESCRIPTION: Shows how to apply the dark theme to the Popover component by setting the `theme` prop to \"dark\".  It also includes a reference button. The actions for the popover are defined in the setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" theme=\"dark\" :actions=\"actions\">\n  <template #reference>\n    <van-button type=\"primary\">深色风格</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Description Setup - JavaScript\nDESCRIPTION: This JavaScript snippet sets up the data for the ShareSheet with a description.  It defines `showShare` as a reactive variable and `options` as an array of share options, with one of the options including a `description` property.  Dependencies: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      { name: 'WeChat', icon: 'wechat' },\n      { name: 'Weibo', icon: 'weibo' },\n      { name: 'Link', icon: 'link', description: 'Description' },\n      { name: 'Poster', icon: 'poster' },\n      { name: 'Qrcode', icon: 'qrcode' },\n    ];\n\n    return {\n      options,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Toast Component with Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Toast component within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses `app.use(Toast)` to register the Toast component for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Toast } from 'vant';\n\nconst app = createApp();\napp.use(Toast);\n```\n\n----------------------------------------\n\nTITLE: Accessing IndexBar Instance - TypeScript/Vue\nDESCRIPTION: This TypeScript and Vue snippet shows how to obtain a reference to the `IndexBar` instance using `ref` from Vue, and then use this reference to call methods on the `IndexBar` instance.  Specifically, it shows how to call the `scrollTo` method to programmatically scroll to a specific anchor point.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { IndexBarInstance } from 'vant';\n\nconst indexBarRef = ref<IndexBarInstance>();\n\nindexBarRef.value?.scrollTo('B');\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Named Tabs - JavaScript\nDESCRIPTION: Sets up the `active` ref with a default value of 'home', which corresponds to the `name` attribute of one of the `van-tabbar-item` components. This ensures that the 'home' tab is initially selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref('home');\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Sized Buttons with Vant\nDESCRIPTION: This HTML snippet demonstrates the different sizes available for Vant Buttons using the `size` attribute. The available sizes are: large, normal, small, and mini.  The default size is `normal`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" size=\"large\">大号按钮</van-button>\n<van-button type=\"primary\" size=\"normal\">普通按钮</van-button>\n<van-button type=\"primary\" size=\"small\">小型按钮</van-button>\n<van-button type=\"primary\" size=\"mini\">迷你按钮</van-button>\n```\n\n----------------------------------------\n\nTITLE: Custom Vant Empty Component Image Size\nDESCRIPTION: This snippet showcases the customization of the image size within the Vant Empty component using the `image-size` prop. It supports numeric values (interpreted as pixels), strings (including other units like 'rem', 'vh', 'vw'), and arrays for specifying width and height separately.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- The default unit is px -->\n<van-empty image-size=\"100\" description=\"Description\" />\n<!-- Support other units, such as rem, vh, vw -->\n<van-empty image-size=\"10rem\" description=\"Description\" />\n```\n\n----------------------------------------\n\nTITLE: useToggle with Default Value in Vue Component (JavaScript)\nDESCRIPTION: Illustrates how to initialize the useToggle hook with a default value within a Vue component's setup function. It imports the useToggle hook, initializes the state with true as the default value, and logs the initial state value to the console.  Requires the @vant/use package.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-toggle.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useToggle } from '@vant/use';\n\nexport default {\n  setup() {\n    const [state, toggle] = useToggle(true);\n    console.log(state.value); // -> true\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Cascade Picker HTML\nDESCRIPTION: This HTML snippet renders a Vant Picker with cascading options. The `:columns` attribute is bound to a hierarchical structure of options using the `children` property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-picker title=\"Title\" :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Vant Rate Count\nDESCRIPTION: This HTML snippet demonstrates how to change the number of stars displayed in the Vant Rate component using the `count` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" :count=\"6\" />\n```\n\n----------------------------------------\n\nTITLE: Stepper with Input Disabled - HTML\nDESCRIPTION: An example showing how to disable the input within the stepper using the `disable-input` prop. The plus and minus buttons will still function, but the user cannot directly input a value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" disable-input />\n```\n\n----------------------------------------\n\nTITLE: ContactList Component Setup with Vue Composition API\nDESCRIPTION: This JavaScript snippet demonstrates how to set up the ContactList component using Vue's Composition API. It defines reactive variables for `chosenContactId` and `list`, as well as event handler functions (`onAdd`, `onEdit`, `onSelect`) that display toasts.  It imports `ref` from vue and `showToast` from vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const chosenContactId = ref('1');\n    const list = ref([\n      {\n        id: '1',\n        name: 'John Snow',\n        tel: '13000000000',\n        isDefault: true,\n      },\n      {\n        id: '2',\n        name: 'Ned Stark',\n        tel: '1310000000',\n      },\n    ]);\n\n    const onAdd = () => showToast('Add');\n    const onEdit = (contact) => showToast('Edit' + contact.id);\n    const onSelect = (contact) => showToast('Select' + contact.id);\n\n    return {\n      list,\n      onAdd,\n      onEdit,\n      onSelect,\n      chosenContactId,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Readonly Half Star - Javascript\nDESCRIPTION: This snippet provides the JavaScript code for the readonly half-star example. The `value` ref is initialized to 3.3.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(3.3);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Half Star - HTML\nDESCRIPTION: This snippet shows how to enable half-star ratings in the Vant Rate component using the `allow-half` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" allow-half />\n```\n\n----------------------------------------\n\nTITLE: Basic Vant NavBar Usage\nDESCRIPTION: Demonstrates the simplest usage of the Vant NavBar component in a Vue.js template.  It shows how to render a basic navigation bar with a title.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar title=\"Title\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Sidebar with Disabled Item\nDESCRIPTION: This HTML snippet shows how to disable a `van-sidebar-item` using the `disabled` property. When an item is disabled, it cannot be selected or interacted with, preventing the user from navigating to that section.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\">\n  <van-sidebar-item title=\"标签名称\" />\n  <van-sidebar-item title=\"标签名称\" disabled />\n  <van-sidebar-item title=\"标签名称\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Stepper Type Definitions - TypeScript\nDESCRIPTION: Imports type definitions related to the Stepper component, including `StepperTheme` and `StepperProps` from the `vant` library. This is used for TypeScript support and type checking.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StepperTheme, StepperProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Card Component in Vue.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to register the Vant Card component globally within a Vue.js application. It imports the necessary modules from 'vue' and 'vant' and then uses the `app.use()` method to register the Card component, making it available throughout the application. This step is a prerequisite for using the `<van-card>` component in Vue templates. Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Card } from 'vant';\n\nconst app = createApp();\napp.use(Card);\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with shrink layout in Vue\nDESCRIPTION: This snippet demonstrates how to enable shrink layout for the van-tabs component using the shrink attribute. When shrink is set to true, the tabs will align to the left side of the tab bar. It also shows that shrink layout can be used with the card type.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" shrink>\n  <van-tab v-for=\"index in 4\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n\n<van-tabs v-model:active=\"active\" shrink type=\"card\">\n  <van-tab v-for=\"index in 4\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Updating Popup Components v-model HTML\nDESCRIPTION: Explains the change in v-model usage for Popup components in Vant v3 to align with Vue 3's v-model API. It shows the updated syntax for v-model binding on popup components like ActionSheet, Calendar, Dialog, Image Preview, Notify, Popover, Popup, and ShareSheet.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-popup v-model=\"show\" />\n\n<!-- Vant 3 -->\n<van-popup v-model:show=\"show\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Popup Position - HTML\nDESCRIPTION: Configures the popup position of the Vant Calendar component using the `position` prop. This example sets the position to the right side of the screen. This prop can change the user experience for the calendar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" :round=\"false\" position=\"right\" />\n```\n\n----------------------------------------\n\nTITLE: Badge with Custom Content via Slot\nDESCRIPTION: This snippet illustrates how to use the `content` slot to insert custom content into the badge, such as icons. It demonstrates the flexibility of customizing the badge's appearance using slots and a supplementary CSS class.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-badge>\n  <div class=\"child\" />\n  <template #content>\n    <van-icon name=\"success\" class=\"badge-icon\" />\n  </template>\n</van-badge>\n<van-badge>\n  <div class=\"child\" />\n  <template #content>\n    <van-icon name=\"cross\" class=\"badge-icon\" />\n  </template>\n</van-badge>\n<van-badge>\n  <div class=\"child\" />\n  <template #content>\n    <van-icon name=\"down\" class=\"badge-icon\" />\n  </template>\n</van-badge>\n```\n\nLANGUAGE: css\nCODE:\n```\n.badge-icon {\n  display: block;\n  font-size: 10px;\n  line-height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Popup Component - JavaScript\nDESCRIPTION: Registers the Vant Popup component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses the 'use' method to register the Popup component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Popup } from 'vant';\n\nconst app = createApp();\napp.use(Popup);\n```\n\n----------------------------------------\n\nTITLE: Closeable Vant Tag with Vue State\nDESCRIPTION: This example shows how to create a closeable tag with a dynamic `show` property managed by Vue's reactivity system. The `close` method updates the `show` ref to hide the tag when the close icon is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-tag :show=\"show\" closeable size=\"medium\" type=\"primary\" @close=\"close\">\n  Tag\n</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar Name Matching Setup\nDESCRIPTION: Sets up the `active` ref with a string value representing the name of the initially active tab, in this case, 'home'. This allows the Tabbar to correctly highlight the corresponding TabbarItem based on its `name` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref('home');\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Icons - HTML\nDESCRIPTION: This HTML snippet shows the usage of ActionSheet with icons. It's similar to the basic usage example but it will be used with different Javascript code that defines the icons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell is-link title=\"Show Icon\" @click=\"show = true\" />\n<van-action-sheet v-model:show=\"show\" :actions=\"actions\" @select=\"onSelect\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Max Range - HTML\nDESCRIPTION: Demonstrates setting the maximum selectable date range in the Vant Calendar when `type` is `range` using `max-range` prop. It limits the selection to 3 days.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar type=\"range\" :max-range=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with Sticky Button Example\nDESCRIPTION: This HTML code snippet demonstrates the usage of the Vant Tabs component with a sticky button inside a tab.  It highlights a potential issue where the `van-sticky` component's fixed positioning is relative to the transform element when `swipeable` is enabled, rather than the document, leading to unexpected layout behavior. The `v-model:active` directive is used to manage the active tab. Requires Vant UI library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" swipeable>\n  <van-tab>\n    <van-sticky>\n      <van-button>sticky button</van-button>\n    </van-sticky>\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Popover with Icons - Vue\nDESCRIPTION: Shows how to include icons in the Popover actions using the `icon` property in the `actions` array. It includes a reference button to trigger the popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" :actions=\"actions\">\n  <template #reference>\n    <van-button type=\"primary\">展示图标</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Async Data Formatting in Vant Calendar (JavaScript)\nDESCRIPTION: Illustrates how to use asynchronously fetched data within the `formatter` prop of the Vant Calendar. It uses a computed property to create a dynamic formatter function that updates day information based on the asynchronously loaded data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst asyncData = ref();\n\nconst formatter = computed(() => {\n  if (!asyncData.value) {\n    return (day) => day;\n  }\n  return (day) => {\n    day.bottomInfo = asyncData.value;\n    return day;\n  };\n});\n\nsetTimeout(() => {\n  asyncData.value = 'text';\n}, 3000);\n```\n\n----------------------------------------\n\nTITLE: Defining Text List for RollingText\nDESCRIPTION: This JavaScript code snippet defines a reactive `textList` array using Vue's `ref` function. This array is intended to be used with the Vant RollingText component to display a sequence of rolling text.  Each item in the list must be the same length. Requires Vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const textList = ref([\n      'aaaaa',\n      'bbbbb',\n      'ccccc',\n      'ddddd',\n      'eeeee',\n      'fffff',\n      'ggggg',\n    ]);\n    return { textList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Reactive Alignment Variable\nDESCRIPTION: Defines a reactive variable `align` using Vue's `ref` function to control the alignment of the Space component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const align = ref('center');\n    return { align };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: DatePicker Formatter Setup\nDESCRIPTION: Sets up the component with the formatter function in a Vue 3 setup function.  It initializes a `currentDate` ref and the `columnsType` array, defines the formatter function which adds \"年\" and \"月\" suffixes, and defines the `minDate` and `maxDate` properties for the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01']);\n    const columnsType = ['year', 'month'];\n\n    const formatter = (type, option) => {\n      if (type === 'year') {\n        option.text += '年';\n      }\n      if (type === 'month') {\n        option.text += '月';\n      }\n      return option;\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      formatter,\n      currentDate,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Logic - Vue\nDESCRIPTION: Defines the JavaScript logic for the dark theme Popover. It uses `ref` to manage the Popover's visibility and defines the `actions` array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: '选项一' },\n      { text: '选项二' },\n      { text: '选项三' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Contact Card - JavaScript\nDESCRIPTION: Defines the `onAdd` method, which is called when the ContactCard is clicked in the 'add' state. This method displays a toast message using the `showToast` function from Vant.  The setup function returns an object containing the `onAdd` method, making it available in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onAdd = () => showToast('add');\n    return {\n      onAdd,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Checkbox - Vue\nDESCRIPTION: This code snippet demonstrates how to create an indeterminate checkbox, which visually represents a state where some, but not all, of the related options are selected. It utilizes the `indeterminate` property and event handlers to manage the state of both the main checkbox and the associated CheckboxGroup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox\n  v-model=\"isCheckAll\"\n  :indeterminate=\"isIndeterminate\"\n  @change=\"checkAllChange\"\n>\n  全选\n</van-checkbox>\n\n<van-checkbox-group v-model=\"checkedResult\" @change=\"checkedResultChange\">\n  <van-checkbox v-for=\"item in list\" :key=\"item\" :name=\"item\">\n    复选框 {{ item }}\n  </van-checkbox>\n</van-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions\nDESCRIPTION: Imports type definitions for TreeSelectItem, TreeSelectChild, and TreeSelectProps from the 'vant' library. These types can be used for type checking and autocompletion in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TreeSelectItem, TreeSelectChild, TreeSelectProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Setting Overlay z-index - HTML\nDESCRIPTION: Demonstrates how to set the z-index of the Vant Overlay component using the `z-index` prop.  Setting the z-index ensures that the overlay appears above other elements on the page.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-overlay z-index=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Slot for Image in HTML\nDESCRIPTION: Shows how to customize the loading indicator using the loading slot. A VanLoading component is used as the custom loading indicator.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-image src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\">\n  <template v-slot:loading>\n    <van-loading type=\"spinner\" size=\"20\" />\n  </template>\n</van-image>\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Rounded Style\nDESCRIPTION: This snippet shows how to create a Vant Tag with rounded corners using the `round` attribute. This provides a softer, more visually appealing style.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tag round type=\"primary\">标签</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Basic useClickAway Hook Implementation\nDESCRIPTION: This JavaScript code demonstrates the basic usage of the useClickAway hook. It imports necessary modules from Vue and @vant/use, sets up a ref for the target element, and calls useClickAway with the ref and a callback function that logs a message when a click occurs outside the target element. The root ref is then returned to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useClickAway } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n    useClickAway(root, () => {\n      console.log('click outside!');\n    });\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Counter Clockwise Circle\nDESCRIPTION: Demonstrates how to make the Vant Circle progress in a counter-clockwise direction by setting the `clockwise` prop to `false`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  :clockwise=\"false\"\n  text=\"Counter Clockwise\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Class Highlight - TypeScript\nDESCRIPTION: Provides the TypeScript setup for the custom class highlighting example. Defines the text and keywords, returning them for use in the template.  The highlight-class will then be applied to the highlighted keywords.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      'Take your time and be patient. Life itself will eventually answer all those questions it once raised for you.';\n    const keywords = 'life';\n\n    return {\n      text,\n      keywords,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TreeSelect Type Definition - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to import the type definitions for TreeSelectItem, TreeSelectChild, and TreeSelectProps from the 'vant' library.  This import allows you to use these types in your own code for type checking and improved code maintainability.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TreeSelectItem, TreeSelectChild, TreeSelectProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for useWindowSize\nDESCRIPTION: Defines the type declaration for the useWindowSize hook. It specifies that the hook returns an object containing two properties: width and height, both of which are reactive references (Refs) to numbers. This snippet details the expected return type from the hook.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-window-size.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useWindowSize(): {\n  width: Ref<number>;\n  height: Ref<number>;\n};\n```\n\n----------------------------------------\n\nTITLE: PasswordInput Type Definition - TypeScript\nDESCRIPTION: Exports the PasswordInputProps type definition from the 'vant' library.  This is used for TypeScript type checking when working with the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PasswordInputProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing FloatingBubble Component\nDESCRIPTION: Registers the FloatingBubble component globally in a Vue application.  It imports `createApp` from Vue and `FloatingBubble` from Vant. Then, it creates a Vue app instance and uses the `app.use` method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { FloatingBubble } from 'vant';\n\nconst app = createApp();\napp.use(FloatingBubble);\n```\n\n----------------------------------------\n\nTITLE: Add Gutter to PasswordInput - HTML\nDESCRIPTION: This snippet demonstrates how to add a gutter (spacing) between the password input fields using the `:gutter` prop of the PasswordInput component. This can improve the visual separation and readability of the input.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-password-input\n  :value=\"value\"\n  :gutter=\"10\"\n  :focused=\"showKeyboard\"\n  @focus=\"showKeyboard = true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing AddressList Component - JavaScript\nDESCRIPTION: Registers the AddressList component globally within a Vue application using `app.use`. This makes the component available for use throughout the application. It requires importing `createApp` from 'vue' and `AddressList` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { AddressList } from 'vant';\n\nconst app = createApp();\napp.use(AddressList);\n```\n\n----------------------------------------\n\nTITLE: Cascader Type Definition\nDESCRIPTION: Imports the type definitions for Cascader related types. These types can be used when writing TypeScript code that interacts with the `Cascader` component, enabling type checking and autocompletion.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CascaderProps, CascaderOption, CascaderFieldNames } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Installing Vant via npm\nDESCRIPTION: Demonstrates how to install Vant using npm for both Vue 3 and Vue 2 projects. Specifies the different commands required for each version of Vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Vue 3 项目，安装最新版 Vant\nnpm i vant\n\n# Vue 2 项目，安装 Vant 2\nnpm i vant@latest-v2\n```\n\n----------------------------------------\n\nTITLE: Overriding Primary Color via CSS\nDESCRIPTION: This CSS shows how to modify the --van-primary-color CSS variable directly within the :root selector.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --van-primary-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Multiple Rows (JS)\nDESCRIPTION: This JavaScript snippet demonstrates how to define share options for a ShareSheet with multiple rows.  The `options` array is structured as an array of arrays, where each inner array represents a row of share options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      [\n        { name: '微信', icon: 'wechat' },\n        { name: '朋友圈', icon: 'wechat-moments' },\n        { name: '微博', icon: 'weibo' },\n        { name: 'QQ', icon: 'qq' },\n      ],\n      [\n        { name: '复制链接', icon: 'link' },\n        { name: '分享海报', icon: 'poster' },\n        { name: '二维码', icon: 'qrcode' },\n        { name: '小程序码', icon: 'weapp-qrcode' },\n      ],\n    ];\n\n    return {\n      options,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Content Data Setup with Vue\nDESCRIPTION: This JavaScript snippet sets up the data required for the custom content example.  It defines the `code` ref for storing the selected value and the `options` ref containing the data for the Cascader.  No additional logic is required for this example, as it primarily demonstrates slot usage.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const code = ref('');\n    const options = [\n      {\n        name: 'Zhejiang',\n        code: '330000',\n        items: [{ name: 'Hangzhou', code: '330100' }],\n      },\n      {\n        name: 'Jiangsu',\n        code: '320000',\n        items: [{ name: 'Nanjing', code: '320100' }],\n      },\n    ];\n\n    return {\n      code,\n      options,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Keywords Highlight - TypeScript\nDESCRIPTION: Provides the TypeScript setup for highlighting multiple keywords. It defines `text` and an array of `keywords` which are then made available for template binding.  This allows the Highlight component to highlight all keywords present in the text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      'Take your time and be patient. Life itself will eventually answer all those questions it once raised for you.';\n    const keywords = ['time', 'life', 'answer'];\n\n    return {\n      text,\n      keywords,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CountDown Component in Vue\nDESCRIPTION: Registers the CountDown component globally within a Vue application using `app.use`. This makes the component available for use in templates without needing to import it in each component file. Requires `createApp` from `vue` and `CountDown` from `vant`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { CountDown } from 'vant';\n\nconst app = createApp();\napp.use(CountDown);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant CLI Scripts in package.json\nDESCRIPTION: Configures various Vant CLI commands as npm scripts in the `package.json` file. These scripts define shortcuts for common development tasks like running the development server, running tests, linting code, building the library, preparing husky, releasing, and building the site. The `nano-staged` config specifies commands to run on staged files using prettier and eslint.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"vant-cli dev\",\n    \"test\": \"vant-cli test\",\n    \"lint\": \"vant-cli lint\",\n    \"build\": \"vant-cli build\",\n    \"prepare\": \"husky\",\n    \"release\": \"vant-cli release\",\n    \"build-site\": \"vant-cli build-site\"\n  },\n  \"nano-staged\": {\n    \"*.md\": \"prettier --write\",\n    \"*.{ts,tsx,js,vue,less,scss}\": \"prettier --write\",\n    \"*.{ts,tsx,js,vue}\": \"eslint --fix\"\n  },\n  \"eslintConfig\": {\n    \"root\": true,\n    \"extends\": [\"@vant\"]\n  },\n  \"prettier\": {\n    \"singleQuote\": true\n  },\n  \"browserslist\": [\"Chrome >= 51\", \"iOS >= 10\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Single Selection TreeSelect Data - JavaScript\nDESCRIPTION: Defines the data and logic for a single selection TreeSelect component. It uses `ref` from Vue to create reactive variables for `activeId`, `activeIndex`, and `items`.  `items` is an array of objects that defines the tree structure, and each object has `text` and `children` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeId = ref(1);\n    const activeIndex = ref(0);\n    const items = [\n      {\n        text: '浙江',\n        children: [\n          { text: '杭州', id: 1 },\n          { text: '温州', id: 2 },\n          { text: '宁波', id: 3, disabled: true },\n        ],\n      },\n      {\n        text: '江苏',\n        children: [\n          { text: '南京', id: 4 },\n          { text: '无锡', id: 5 },\n          { text: '徐州', id: 6 },\n        ],\n      },\n      { text: '福建', disabled: true },\n    ];\n\n    return {\n      items,\n      activeId,\n      activeIndex,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Show Badge TreeSelect Usage\nDESCRIPTION: Demonstrates displaying badges and dots on TreeSelect items. The 'dot' property displays a red dot, and the 'badge' property displays a numerical badge. Requires the 'vue' library and 'vant' component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:main-active-index=\"activeIndex\"\n  height=\"55vw\"\n  :items=\"items\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Default State - Vue\nDESCRIPTION: This code sets the default checked state for a checkbox group.  The checked ref is an array of names, and the checkbox group will render with those names checked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(['a', 'b']);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TextEllipsis Usage - Vue JavaScript\nDESCRIPTION: Defines the Vue component's setup function to provide the text data.  It initializes a `text` variable with a sample string and returns it to be used in the template. Requires Vue's `setup` function to be used within a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text = '慢慢来，不要急，生活给你出了难题，可也终有一天会给出答案。';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring the Number of Columns in Vant Area\nDESCRIPTION: Shows how to configure the number of columns displayed in the Vant Area component using the `columns-num` prop.  Setting it to `2` will display only province and city columns.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-area title=\"标题\" :area-list=\"areaList\" :columns-num=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Variables Type Definition\nDESCRIPTION: This TypeScript code shows how to import and use the ConfigProviderThemeVars type from Vant, which provides type hints and validation for theme variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigProviderThemeVars } from 'vant';\n\nconst themeVars: ConfigProviderThemeVars = {\n  sliderBarHeight: '4px',\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled RadioGroup - HTML\nDESCRIPTION: This HTML snippet shows a disabled RadioGroup.  The `disabled` prop on the `van-radio-group` component disables all radio buttons within the group, preventing user interaction.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\" disabled>\n  <van-radio name=\"1\">Radio 1</van-radio>\n  <van-radio name=\"2\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Expand/Collapse TextEllipsis - Vue HTML\nDESCRIPTION: Shows how to enable expand/collapse functionality in the TextEllipsis component. It sets the `expand-text` and `collapse-text` props to specify the text displayed for the expand and collapse actions, respectively. The `content` prop is bound to a long text string.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis\n  :content=\"text\"\n  expand-text=\"expand\"\n  collapse-text=\"collapse\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Collapse and CollapseItem - JavaScript\nDESCRIPTION: This snippet demonstrates how to globally register the `Collapse` and `CollapseItem` components from the Vant UI library in a Vue application. It imports the necessary modules, creates a Vue app instance, and uses the `app.use()` method to register the components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Collapse, CollapseItem } from 'vant';\n\nconst app = createApp();\napp.use(Collapse);\napp.use(CollapseItem);\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Action Bar Usage in HTML\nDESCRIPTION: This code snippet shows the basic usage of the Vant Action Bar component in an HTML template.  It includes `van-action-bar-icon` components for displaying icons with associated text, and `van-action-bar-button` components for displaying buttons.  The `@click` event is used to trigger the `onClickIcon` and `onClickButton` methods upon user interaction.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"Icon1\" @click=\"onClickIcon\" />\n  <van-action-bar-icon icon=\"cart-o\" text=\"Icon2\" @click=\"onClickIcon\" />\n  <van-action-bar-icon icon=\"shop-o\" text=\"Icon3\" @click=\"onClickIcon\" />\n  <van-action-bar-button type=\"danger\" text=\"Button\" @click=\"onClickButton\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Animations with Vant\nDESCRIPTION: This snippet showcases the usage of Vant's pre-defined CSS transition names for creating animations using the `<transition>` component.  Examples include fade-in (`van-fade`), slide-up (`van-slide-up`), slide-down (`van-slide-down`), slide-left (`van-slide-left`), and slide-right (`van-slide-right`) animations.  It requires Vue.js and the Vant CSS library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- fade in  -->\n<transition name=\"van-fade\">\n  <div v-show=\"visible\">Fade</div>\n</transition>\n\n<!-- slide up -->\n<transition name=\"van-slide-up\">\n  <div v-show=\"visible\">Slide Up</div>\n</transition>\n\n<!-- slide down -->\n<transition name=\"van-slide-down\">\n  <div v-show=\"visible\">Slide Down</div>\n</transition>\n\n<!-- slide left -->\n<transition name=\"van-slide-left\">\n  <div v-show=\"visible\">Slide Left</div>\n</transition>\n\n<!-- slide right -->\n<transition name=\"van-slide-right\">\n  <div v-show=\"visible\">Slide Right</div>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Using Vant Components in Nuxt 3\nDESCRIPTION: Demonstrates how to use Vant components directly within a Nuxt 3 template. The components are automatically registered and available for use.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <van-button type=\"primary\" @click=\"showToast('toast')\">button</van-button>\n  <VanButton type=\"success\" @click=\"showNotify('notify')\">button</VanButton>\n  <LazyVanButton type=\"default\">lazy button</LazyVanButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Dialog with Async Close - JavaScript\nDESCRIPTION: Shows a dialog with asynchronous close functionality using the `beforeClose` property. The callback can return a Promise to delay closing.  It uses `showConfirmDialog` and defines a `beforeClose` function. Dependencies: vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showConfirmDialog } from 'vant';\n\nconst beforeClose = (action) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      // action !== 'confirm'  拦截取消操作\n      resolve(action === 'confirm');\n    }, 1000);\n  });\n\nshowConfirmDialog({\n  title: '标题',\n  message:\n    '如果解决方法是丑陋的，那就肯定还有更好的解决方法，只是还没有发现而已。',\n  beforeClose,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Watermark using Vant Component\nDESCRIPTION: Displays an image watermark using the Vant Watermark component. The `image` prop is used to specify the URL of the image to be used as the watermark, and `opacity` controls its transparency. The watermark image will repeat across the component's area.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  opacity=\"0.2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition Import\nDESCRIPTION: Imports the TypeScript type definition for the Vant NavBar component. This allows for type checking and autocompletion when working with the NavBar component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NavBarProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Setting Clockwise Direction - HTML\nDESCRIPTION: Configures the Vant Circle component to progress in a counter-clockwise direction by setting the `clockwise` property to `false`. This changes the visual direction of the progress animation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  :clockwise=\"false\"\n  text=\"逆时针方向\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Radio - Javascript\nDESCRIPTION: This code snippet provides the Vue.js setup function for the Vant Form Radio example. It defines a reactive variable `checked` using `ref`, which is bound to the `v-model` of the `van-radio-group` component, allowing the selected radio button's value to be tracked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref('1');\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Button with Swipe Component\nDESCRIPTION: This HTML snippet demonstrates how to create an animated button effect with vertical scrolling using the Button and Swipe components from Vant. Styling is included for proper display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"danger\" round>\n  <van-swipe\n    vertical\n    class=\"notice-swipe\"\n    :autoplay=\"2000\"\n    :touchable=\"false\"\n    :show-indicators=\"false\"\n  >\n    <van-swipe-item>Do Task</van-swipe-item>\n    <van-swipe-item>Lottery</van-swipe-item>\n  </van-swipe>\n</van-button>\n\n<style>\n  .notice-swipe {\n    height: 40px;\n    line-height: 40px;\n  }\n</style>\n```\n\nLANGUAGE: css\nCODE:\n```\n  .notice-swipe {\n    height: 40px;\n    line-height: 40px;\n  }\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Viewport Units\nDESCRIPTION: This is a basic PostCSS configuration for using `postcss-px-to-viewport` to convert `px` units to `vw` units. The `viewportWidth` option is set to 375, which is commonly used for mobile designs.  The configuration should be placed in `postcss.config.js`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-px-to-viewport': {\n      viewportWidth: 375,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Readonly Half-Value Setup\nDESCRIPTION: Sets up the value for a readonly, half-value rate component in Vue. The 'value' ref is initialized to 3.3 to reflect a half-value setup. This allows for displaying fractional rate values when `readonly` and `allow-half` are enabled.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(3.3);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners with useEventListener in Vue\nDESCRIPTION: This snippet illustrates how to use the `cleanup` function returned by `useEventListener` to manually remove an event listener. It shows attaching a resize event to the window and then immediately calling the `cleanup` function to remove the listener. This provides control over when event listeners are removed, beyond the component lifecycle.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-event-listener.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useEventListener } from '@vant/use';\n\nexport default {\n  setup() {\n    const cleanup = useEventListener('resize', () => {\n      console.log('window resize');\n    });\n\n    cleanup();\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Disabled Dropdown Items - HTML\nDESCRIPTION: Shows how to disable DropdownItems using the `disabled` prop. Disabled items cannot be interacted with.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu>\n  <van-dropdown-item v-model=\"value1\" disabled :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" disabled :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Initializing AddressEdit Component - JavaScript\nDESCRIPTION: This code snippet demonstrates how to globally register the AddressEdit component in a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then registers the AddressEdit component for global use.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { AddressEdit } from 'vant';\n\nconst app = createApp();\napp.use(AddressEdit);\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Lazyload Component with Vue\nDESCRIPTION: This code shows how to register the Vant Lazyload component within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and registers the Lazyload component using app.use(). This is needed to use lazy-load functionality for the Image component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Lazyload } from 'vant';\n\nconst app = createApp();\napp.use(Lazyload);\n```\n\n----------------------------------------\n\nTITLE: Initializing SubmitBar Component - JavaScript\nDESCRIPTION: Registers the SubmitBar component globally using Vue's `app.use` method. This makes the component available for use throughout the application. It imports `createApp` from 'vue' and `SubmitBar` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from 'vue';\nimport { SubmitBar } from 'vant';\n\nconst app = createApp();\napp.use(SubmitBar);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Toast Message - Vue\nDESCRIPTION: Demonstrates how to dynamically update the text content of a Toast message after it has been displayed using the Toast instance.  Requires the showLoadingToast and closeToast functions from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showLoadingToast, closeToast } from 'vant';\n\nconst toast = showLoadingToast({\n  duration: 0,\n  forbidClick: true,\n  message: '倒计时 3 秒',\n});\n\nlet second = 3;\nconst timer = setInterval(() => {\n  second--;\n  if (second) {\n    toast.message = `倒计时 ${second} 秒`;\n  } else {\n    clearInterval(timer);\n    closeToast();\n  }\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Vant Grid Types Import - TypeScript\nDESCRIPTION: Imports type definitions for `GridProps`, `GridDirection`, and `GridItemProps` from the `vant` library.  These types can be used to provide type safety and autocompletion when working with the Vant Grid and GridItem components in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GridProps, GridDirection, GridItemProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Block Buttons with Vant\nDESCRIPTION: This HTML snippet shows how to make a Vant Button a block-level element using the `block` attribute. Block-level buttons expand to fill the width of their parent container, unlike the default inline-block behavior.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" block>块级元素</van-button>\n```\n\n----------------------------------------\n\nTITLE: Cell with Centered Content\nDESCRIPTION: This snippet demonstrates using the `center` property of the `van-cell` component to vertically center the title, value, and label within the cell.  The `center` prop is set to true.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-cell center title=\"单元格\" value=\"内容\" label=\"描述信息\" />\n```\n\n----------------------------------------\n\nTITLE: Using Vant Components with On-Demand Styles\nDESCRIPTION: Demonstrates how to use a Vant component in a Vue template after configuring on-demand style imports. It automatically registers the component and imports the associated styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <van-button type=\"primary\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing TimePicker Component - JavaScript\nDESCRIPTION: This code snippet demonstrates how to globally register the TimePicker component from the Vant UI library within a Vue application. It imports the necessary modules and uses the app.use() method to register the TimePicker component.  This allows the TimePicker component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { TimePicker } from 'vant';\n\nconst app = createApp();\napp.use(TimePicker);\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration with Custom rootValue\nDESCRIPTION: Illustrates using a dynamic rootValue in postcss-pxtorem based on the file being processed, useful for managing different design draft sizes (e.g., 375 or 750).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    // postcss-pxtorem version >= 5.0.0\n    'postcss-pxtorem': {\n      rootValue({ file }) {\n        return file.indexOf('vant') !== -1 ? 37.5 : 75;\n      },\n      propList: ['*'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Async Options Loading - JavaScript\nDESCRIPTION: Loads options asynchronously for the Cascader component using the change event. Simulates a data request using setTimeout and updates the options when a province is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { closeToast, showLoadingToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const fieldValue = ref('');\n    const cascaderValue = ref('');\n    const options = ref([\n      {\n        text: '浙江省',\n        value: '330000',\n        children: [],\n      },\n    ]);\n    const onChange = ({ value }) => {\n      if (\n        value === options.value[0].value &&\n        options.value[0].children.length === 0\n      ) {\n        // 模拟数据请求\n        showLoadingToast('加载中...');\n        setTimeout(() => {\n          options.value[0].children = [\n            { text: '杭州市', value: '330100' },\n            { text: '宁波市', value: '330200' },\n          ];\n          closeToast();\n        }, 1000);\n      }\n    };\n    const onFinish = ({ selectedOptions }) => {\n      show.value = false;\n      fieldValue.value = selectedOptions.map((option) => option.text).join('/');\n    };\n\n    return {\n      show,\n      options,\n      onFinish,\n      fieldValue,\n      cascaderValue,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Rolling Direction - HTML\nDESCRIPTION: Shows how to set the rolling direction using the direction prop.  The default direction is downwards, but it can be set to 'up' for upward rolling.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :start-num=\"0\" :target-num=\"432\" direction=\"up\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Custom Size\nDESCRIPTION: Demonstrates setting different sizes for the Vant Tag component using the `size` prop.  The available sizes are `medium` and `large`. The default size is assumed if the size property is not set.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-tag type=\"primary\">Tag</van-tag>\n<van-tag type=\"primary\" size=\"medium\">Tag</van-tag>\n<van-tag type=\"primary\" size=\"large\">Tag</van-tag>\n```\n\n----------------------------------------\n\nTITLE: SwipeCell with Asynchronous Close (HTML)\nDESCRIPTION: Illustrates using the `before-close` prop to control the closing behavior of the SwipeCell. The associated JavaScript code defines the `beforeClose` function, which can be used to implement custom logic, such as confirmation dialogs, before closing the cell. Requires the `beforeClose` function to be defined in the Vue component's setup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe-cell :before-close=\"beforeClose\">\n  <template #left>\n    <van-button square type=\"primary\" text=\"选择\" />\n  </template>\n  <van-cell :border=\"false\" title=\"单元格\" value=\"内容\" />\n  <template #right>\n    <van-button square type=\"danger\" text=\"删除\" />\n  </template>\n</van-swipe-cell>\n```\n\n----------------------------------------\n\nTITLE: Match Tabs By Name - HTML\nDESCRIPTION: Demonstrates using the `name` prop on `van-tab` components to identify tabs. The `v-model:active` directive is bound to `activeName`, which stores the name of the active tab instead of its index. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"activeName\">\n  <van-tab title=\"Tab 1\" name=\"a\">content of tab 1</van-tab>\n  <van-tab title=\"Tab 2\" name=\"b\">content of tab 2</van-tab>\n  <van-tab title=\"Tab 3\" name=\"c\">content of tab 3</van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Importing Button Types in Vant (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to import the type definitions for the Vant Button component, including ButtonType, ButtonSize, ButtonProps, ButtonNativeType, and ButtonIconPosition. This allows for type-safe usage of the Button component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ButtonType,\n  ButtonSize,\n  ButtonProps,\n  ButtonNativeType,\n  ButtonIconPosition,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Swipe with Vertical Scrolling Enabled\nDESCRIPTION: This code snippet shows how to enable vertical scrolling for the Vant Swipe component using the `vertical` prop.  When `vertical` is set to `true`, the swipe component will allow vertical swiping instead of horizontal swiping.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe :autoplay=\"3000\" vertical>\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Picker with Custom Columns Field Names\nDESCRIPTION: This snippet demonstrates how to customize the field names used for text, value, and children in the Vant Picker component's data structure. This is useful when the data source uses different property names than the default 'text', 'value', and 'children'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      {\n        cityName: 'Zhejiang',\n        cities: [\n          {\n            cityName: 'Hangzhou',\n            cities: [{ cityName: 'Xihu' }, { cityName: 'Yuhang' }],\n          },\n          {\n            cityName: 'Wenzhou',\n            cities: [{ cityName: 'Lucheng' }, { cityName: 'Ouhai' }],\n          },\n        ],\n      },\n      {\n        cityName: 'Fujian',\n        cities: [\n          {\n            cityName: 'Fuzhou',\n            cities: [{ cityName: 'Gulou' }, { cityName: 'Taijiang' }],\n          },\n          {\n            cityName: 'Xiamen',\n            cities: [{ cityName: 'Siming' }, { cityName: 'Haicang' }],\n          },\n        ],\n      },\n    ];\n\n    const customFieldName = {\n      text: 'cityName',\n      value: 'cityName',\n      children: 'cities',\n    };\n\n    return {\n      columns,\n      customFieldName,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Watermark with Vant\nDESCRIPTION: Demonstrates how to create a simple text watermark using the `van-watermark` component in Vant UI.  The `content` attribute is used to specify the text to be displayed as the watermark.  Requires the Vant Watermark component to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark content=\"Vant\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Vant Components in HTML\nDESCRIPTION: Illustrates the correct way to render Vant components within standard HTML files. Standard HTML does not support self-closing custom elements. Therefore, it is necessary to use explicit closing tags. This is only applicable to plain HTML files and not needed when using single-file components, string templates or JSX.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/faq.en-US.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"cell\" value=\"content\"></van-cell>\n  <van-cell title=\"cell\" value=\"content\"></van-cell>\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant SwipeCell Component with Vue\nDESCRIPTION: This snippet demonstrates how to register the SwipeCell component globally in a Vue application using `app.use`. It imports the necessary modules from the 'vant' library and registers `SwipeCell` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { SwipeCell } from 'vant';\n\nconst app = createApp();\napp.use(SwipeCell);\n```\n\n----------------------------------------\n\nTITLE: Embedded Content in Overlay - HTML\nDESCRIPTION: Shows how to embed content within the Vant Overlay component using the default slot.  A `div` with class `wrapper` centers another `div` with class `block`. The `.stop` modifier on the inner `div` prevents the click event from propagating to the overlay.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-overlay :show=\"show\" @click=\"show = false\">\n  <div class=\"wrapper\">\n    <div class=\"block\" @click.stop />\n  </div>\n</van-overlay>\n```\n\n----------------------------------------\n\nTITLE: Basic Search Setup - JavaScript\nDESCRIPTION: Sets up the data binding for the basic search example using Vue's `ref`.  It imports `ref` from 'vue' and creates a reactive variable named `value` initialized to an empty string. This `value` ref is then returned to be used in the template with `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('');\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Bottom Content in Vant Empty Component\nDESCRIPTION: This snippet defines the CSS styles for the bottom content inside the Empty component, specifically targeting the button. This shows how to customize the appearance of elements placed within the default slot of the `van-empty` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.bottom-button {\n  width: 160px;\n  height: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition Import Example\nDESCRIPTION: Demonstrates how to import TypeScript definitions for the Vant Area component.  This is useful for type checking and autocompletion in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AreaProps, AreaList, AreaInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Picker Multi-Column - JavaScript\nDESCRIPTION: This JavaScript code provides the data for the multi-column Vant Picker example. It defines the columns array as a two-dimensional array, with each inner array representing a column of options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      // 第一列\n      [\n        { text: '周一', value: 'Monday' },\n        { text: '周二', value: 'Tuesday' },\n        { text: '周三', value: 'Wednesday' },\n        { text: '周四', value: 'Thursday' },\n        { text: '周五', value: 'Friday' },\n      ],\n      // 第二列\n      [\n        { text: '上午', value: 'Morning' },\n        { text: '下午', value: 'Afternoon' },\n        { text: '晚上', value: 'Evening' },\n      ],\n    ];\n\n    return { columns };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Usage in HTML\nDESCRIPTION: This HTML code snippet shows the basic usage of the Vant Divider component. By simply including the `<van-divider />` tag, a default horizontal divider line is rendered. No additional configuration or props are required for this basic implementation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-divider />\n```\n\n----------------------------------------\n\nTITLE: Initializing ContactEdit Component - JavaScript\nDESCRIPTION: Registers the ContactEdit component globally using `app.use` in a Vue application. This allows you to use the component in your templates. It requires importing `createApp` from 'vue' and `ContactEdit` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ContactEdit } from 'vant';\n\nconst app = createApp();\napp.use(ContactEdit);\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Tag Usage with Types\nDESCRIPTION: This snippet shows how to use the `van-tag` component with different types. The `type` attribute is used to control the tag's color, providing visual distinction for different categories or statuses.  The available types are `primary`, `success`, `danger`, and `warning`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tag type=\"primary\">标签</van-tag>\n<van-tag type=\"success\">标签</van-tag>\n<van-tag type=\"danger\">标签</van-tag>\n<van-tag type=\"warning\">标签</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Tabbar and TabbarItem\nDESCRIPTION: Registers the Tabbar and TabbarItem components globally within a Vue application. This allows using the `<van-tabbar>` and `<van-tabbar-item>` tags throughout the application without needing to import them in every component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Tabbar, TabbarItem } from 'vant';\n\nconst app = createApp();\napp.use(Tabbar);\napp.use(TabbarItem);\n```\n\n----------------------------------------\n\nTITLE: DatePicker Columns Type Data - JavaScript\nDESCRIPTION: This JavaScript code defines the data for the DatePicker with `columns-type` example. It initializes `currentDate` and defines `columnsType` as an array specifying the columns to display (year and month). It returns these values along with `minDate` and `maxDate` for use in the Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01']);\n    const columnsType = ['year', 'month'];\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n      columnsType,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Nuxt Module via NPM\nDESCRIPTION: This command demonstrates installing the Vant Nuxt module using NPM.  The `@vant/nuxt` module simplifies Vant integration into Nuxt 3 applications.  Requires NPM to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# with npm\nnpm i @vant/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Vant Space Component Auto Wrap\nDESCRIPTION: Shows how to use the `wrap` prop to enable automatic wrapping of elements within the Vant Space component.  This is useful when elements exceed the available horizontal space.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-space wrap>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n  <van-button type=\"primary\" block>Button</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Data with useParent in Vue (JavaScript)\nDESCRIPTION: Illustrates how to use `useParent` from `@vant/use` within a Vue component to access data and methods provided by a parent component. It retrieves the parent component's context using a shared symbolic key (`RELATION_KEY`) and then accesses and uses the provided data and methods, such as incrementing a counter (`parent.add()`) and logging the updated value. It requires that the parent component has already established the relationship with `useChildren`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-relation.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useParent } from '@vant/use';\n\nexport default {\n  setup() {\n    const { parent } = useParent(RELATION_KEY);\n\n    // 调用父组件提供的数据和方法\n    if (parent) {\n      parent.add();\n      console.log(parent.count.value); // -> 1\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Vant Space Typescript Definitions\nDESCRIPTION: Shows how to import the Typescript type definitions for the Vant Space component, which includes types for props like SpaceProps, SpaceSize and SpaceAlign.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SpaceProps, SpaceSize, SpaceAlign } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Basic FloatingPanel Usage\nDESCRIPTION: Demonstrates the basic usage of the FloatingPanel component with a default height of 100px and expandable to 60% of the screen height.  It utilizes the `van-floating-panel` component along with `van-cell-group` and `van-cell` components for displaying content. Requires Vant UI library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-panel>\n  <van-cell-group>\n    <van-cell\n      v-for=\"i in 26\"\n      :key=\"i\"\n      :title=\"String.fromCharCode(i + 64)\"\n      size=\"large\"\n    />\n  </van-cell-group>\n</van-floating-panel>\n```\n\n----------------------------------------\n\nTITLE: Importing IndexBar Types - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import type definitions for the `IndexBar`, `IndexAnchor`, and `IndexBarInstance` components from the Vant library. These type definitions are useful for providing type checking and autocompletion when working with the Vant components in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IndexBarProps, IndexAnchorProps, IndexBarInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Set Scroll Target - HTML\nDESCRIPTION: Sets the target for scrolling using the target property.  The example shows how the component can be rendered within a container div with a specific height and overflow behavior, and scrolls to the top of the container.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n  <van-back-top target=\".container\" bottom=\"30vh\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Content in Vant Card using Slots in HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the content of a Vant Card component using slots. Slots allow you to insert custom HTML elements into specific areas of the card. In this example, the `#tags` slot is used to add custom tags using the `van-tag` component, and the `#footer` slot is used to add custom buttons using the `van-button` component. Dependencies: Vant CSS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-card\n  num=\"2\"\n  title=\"Title\"\n  desc=\"Description\"\n  price=\"2.00\"\n  thumb=\"https://fastly.jsdelivr.net/npm/@vant/assets/ipad.jpeg\"\n>\n  <template #tags>\n    <van-tag plain type=\"primary\">Tag</van-tag>\n    <van-tag plain type=\"primary\">Tag</van-tag>\n  </template>\n  <template #footer>\n    <van-button size=\"mini\">Button</van-button>\n    <van-button size=\"mini\">Button</van-button>\n  </template>\n</van-card>\n```\n\n----------------------------------------\n\nTITLE: Badge Notification TreeSelect Data - JavaScript\nDESCRIPTION: Defines the data structure for a TreeSelect component that includes badge notifications and red dots. The `items` array contains objects with `text`, `children`, `dot`, and `badge` properties.  The `dot: true` property displays a red dot on the '浙江' category, and the `badge: 5` property displays a badge with the number 5 on the '江苏' category.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeIndex = ref(0);\n    return {\n      activeIndex,\n      items: [\n        {\n          text: '浙江',\n          children: [\n            { text: '杭州', id: 1 },\n            { text: '温州', id: 2 },\n            { text: '宁波', id: 3, disabled: true },\n          ],\n          dot: true,\n        },\n        {\n          text: '江苏',\n          children: [\n            { text: '南京', id: 4 },\n            { text: '无锡', id: 5 },\n            { text: '徐州', id: 6 },\n          ],\n          badge: 5,\n        },\n      ],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver with Rollup\nDESCRIPTION: Integrate VantResolver into a Rollup project using unplugin-auto-import and unplugin-vue-components. The resolver is added to the `resolvers` array within the plugin options for both AutoImport and Components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// rollup.config.js\nimport AutoImport from 'unplugin-auto-import/rollup';\nimport Components from 'unplugin-vue-components/rollup';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default {\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Change Event - JavaScript\nDESCRIPTION: Defines the `onChange` method that handles the `change` event. It imports the `showToast` function from the 'vant' library and displays a toast message indicating the current swipe index. Returns an object containing the `onChange` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onChange = (index) => showToast('当前 Swipe 索引：' + index);\n    return { onChange };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Width and Height - HTML\nDESCRIPTION: Shows how to customize the preview image width and height by passing an array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" :preview-size=\"[60, 40]\" />\n```\n\n----------------------------------------\n\nTITLE: Single Selection TreeSelect - HTML\nDESCRIPTION: Implements a TreeSelect component in single selection mode using v-model to bind `activeId` and `activeIndex` to the component's state.  The `:items` prop is bound to the `items` data. This example uses Vue's data binding features.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:active-id=\"activeId\"\n  v-model:main-active-index=\"activeIndex\"\n  :items=\"items\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Size of Vant Switch\nDESCRIPTION: This code shows how to customize the size of the Vant Switch component using the `size` attribute. The size is specified as a string with a CSS unit (e.g., '22px').\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\" size=\"22px\" />\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Popover - HTML\nDESCRIPTION: Demonstrates a Popover component with the dark theme applied using the `theme` prop.  It binds the `showPopover` ref to the `v-model:show` prop and passes an array of `actions` to the component. The `reference` slot renders the button that triggers the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" theme=\"dark\" :actions=\"actions\">\n  <template #reference>\n    <van-button type=\"primary\">Dark Theme</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Columns Type\nDESCRIPTION: Demonstrates using the `columns-type` prop to customize the displayed date columns.  It initializes the date, sets the minimum and maximum selectable dates and configures the columns to year and month.  The component emits changes to `currentDate` based on user selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"选择年月\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useRect Hook in Vue\nDESCRIPTION: This Vue component demonstrates the usage of the useRect hook. It imports necessary functions from Vue and @vant/use, creates a ref for an element, and then calls useRect within the onMounted lifecycle hook to get the element's bounding rectangle. The resulting rectangle object is then logged to the console.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-rect.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, onMounted } from 'vue';\nimport { useRect } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n\n    onMounted(() => {\n      const rect = useRect(root);\n      console.log(rect); // -> the size of an element and its position relative to the viewport\n    });\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Wrapping in NoticeBar\nDESCRIPTION: This snippet shows how to enable text wrapping in the NoticeBar component using the `wrapable` property. Setting `wrapable` to true allows the text to wrap to multiple lines if it exceeds the available width.  Scrolling is disabled in this example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar\n  wrapable\n  :scrollable=\"false\"\n  text=\"不会回头的东西有四件：说出口的话、离弦的箭、逝去的生活和失去的机会。\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Full Page Display for Watermark\nDESCRIPTION: Controls whether the watermark is displayed across the entire page using the `full-page` prop. When set to `true`, the watermark will cover the entire viewport; otherwise, it's contained within the component's boundaries. Requires an image to be specified via the `image` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  opacity=\"0.2\"\n  :full-page=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue CLI for On-Demand Styles\nDESCRIPTION: Configures Vue CLI to use `unplugin-auto-import` and `unplugin-vue-components` with `VantResolver` for automatically importing Vant components and their styles. The configuration is placed in `vue.config.js` and accounts for different versions of unplugin-vue-components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VantResolver } = require('@vant/auto-import-resolver');\nconst AutoImport = require('unplugin-auto-import/webpack');\nconst Components = require('unplugin-vue-components/webpack');\n\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      // 当 unplugin-vue-components 版本小于 0.26.0 时，使用以下写法\n      AutoImport({ resolvers: [VantResolver()] }),\n      Components({ resolvers: [VantResolver()] }),\n      //当 unplugin-vue-components 版本大于等于 0.26.0 时，使用以下写法\n      AutoImport.default({\n        resolvers: [VantResolver()],\n      }),\n      Components.default({ resolvers: [VantResolver()] }),\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Watermark with Vant\nDESCRIPTION: Shows how to create an image watermark using the `van-watermark` component.  The `image` attribute specifies the URL of the image to use, and `opacity` adjusts the watermark's transparency.  Requires the Vant Watermark component and a valid image URL.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  opacity=\"0.2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for CountDown\nDESCRIPTION: Illustrates how to import and use the TypeScript type definitions provided by the `vant` library for the `CountDown` component, including `CountDownProps`, `CountDownInstance`, and `CountDownCurrentTime`.  This allows for type-safe access to component properties and methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CountDownProps,\n  CountDownInstance,\n  CountDownCurrentTime,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Radio Types Import - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import type definitions for the Radio and RadioGroup components from the 'vant' library. These types can be used to provide type safety and improve code completion when working with the components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  RadioProps,\n  RadioShape,\n  RadioGroupProps,\n  RadioLabelPosition,\n  RadioGroupDirection,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Customizing Watermark Rotation with Vant\nDESCRIPTION: Shows how to customize the rotation angle of the watermark using the `rotate` attribute.  The value is specified in degrees. Requires the Vant Watermark component and an image URL.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  rotate=\"22\"\n  opacity=\"0.2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Lazyload Background Image - HTML\nDESCRIPTION: This snippet demonstrates how to use the `v-lazy` directive to set a background image URL. It is applied to a `div` element and uses the `background-image` modifier.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div v-for=\"img in imageList\" v-lazy:background-image=\"img\" />\n```\n\n----------------------------------------\n\nTITLE: Compiled Component Directory Structure\nDESCRIPTION: This snippet details the structure of a single compiled component directory. It shows bundled script and CSS files, the original uncompiled CSS file, and the structure for on-demand style imports, including compiled and uncompiled styles for theme customization.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nbutton\n├─ index.js         # Bundle script file\n├─ index.css        # Bundle CSS file\n├─ index.less       # Uncompiled CSS file, less or scss\n└─ style            # Style entry on demand directory\n    ├─ index.js     # Compiled styles on demand\n    └─ less.js      # Uncompiled styles on demand, for theme customization\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Calendar Component - JavaScript\nDESCRIPTION: Registers the Vant Calendar component globally within a Vue application. This snippet shows how to import the necessary modules and use the `app.use` method to make the Calendar component available throughout the application. Requires Vue and Vant to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Calendar } from 'vant';\n\nconst app = createApp();\napp.use(Calendar);\n```\n\n----------------------------------------\n\nTITLE: Basic Circle Usage - JavaScript\nDESCRIPTION: Vue component setup for the basic circle usage. It uses `ref` to create a reactive variable `currentRate` and `computed` to derive the `text` based on the `currentRate` value.  Returns an object containing the `text` and `currentRate`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, computed } from 'vue';\n\nexport default {\n  setup() {\n    const currentRate = ref(0);\n    const text = computed(() => currentRate.value.toFixed(0) + '%');\n\n    return {\n      text,\n      currentRate,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Instance Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates how to obtain a Checkbox or CheckboxGroup instance via refs and call a method on the instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CheckboxInstance, CheckboxGroupInstance } from 'vant';\n\nconst checkboxRef = ref<CheckboxInstance>();\nconst checkboxGroupRef = ref<CheckboxGroupInstance>();\n\ncheckboxRef.value?.toggle();\ncheckboxGroupRef.value?.toggleAll();\n```\n\n----------------------------------------\n\nTITLE: JSX Event Naming - JSX\nDESCRIPTION: This JSX example demonstrates how to handle event names using camel case in Vant 4.0.  The original dash format will no longer work, so event handlers must be updated to follow the new convention.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Vant 3\n<Field onClick-input={onClick} />\n\n// Vant 4\n<Field onClickInput={onClick} />\n```\n\n----------------------------------------\n\nTITLE: TimePicker Overall Range Setup with Vue Composition API\nDESCRIPTION: JavaScript code to initialize the `currentTime` ref for the TimePicker.  This is part of the overall time range example, used with the `min-time` and `max-time` props in the HTML example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00', '00']);\n    return { currentTime };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing TextEllipsis Types - TypeScript\nDESCRIPTION: Imports type definitions related to the TextEllipsis component from the 'vant' library. This allows for strong typing and improved code maintainability when working with the component's props, instance, and theme variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  TextEllipsisProps,\n  TextEllipsisInstance,\n  TextEllipsisThemeVars,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Sticky with Container - HTML\nDESCRIPTION: Demonstrates how to set a container element for the Sticky component. When the container is specified, the Sticky component will stick within the bounds of this container. Requires defining a container element with a ref attribute.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"container\" style=\"height: 150px;\">\n  <van-sticky :container=\"container\">\n    <van-button type=\"warning\">Set Container</van-button>\n  </van-sticky>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Vant 3 ImagePreview Compatibility\nDESCRIPTION: Shows how to import ImagePreview from @vant/compat to maintain backwards compatibility with the Vant 3 ImagePreview API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImagePreview } from '@vant/compat';\n\nImagePreview();\n```\n\n----------------------------------------\n\nTITLE: Notify Component Usage - HTML\nDESCRIPTION: Demonstrates the usage of the Notify component within a Vue template. It includes a button to trigger the notification and the Notify component itself with a success type, an icon, and custom text. The Notify's visibility is controlled by a v-model binding to a reactive show property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" text=\"组件调用\" @click=\"showNotify\" />\n<van-notify v-model:show=\"show\" type=\"success\">\n  <van-icon name=\"bell\" style=\"margin-right: 4px;\" />\n  <span>通知内容</span>\n</van-notify>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Signature Component\nDESCRIPTION: Illustrates how to use the `van-signature` component in the template. This snippet includes event listeners for the `submit` and `clear` events.  Also demonstrates how to conditionally render a `van-image` component to display the signature. Dependencies include the `van-signature` and `van-image` components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-signature @submit=\"onSubmit\" @clear=\"onClear\" />\n<van-image v-if=\"image\" :src=\"image\" />\n```\n\n----------------------------------------\n\nTITLE: Popup Display Events - HTML and JavaScript\nDESCRIPTION: Shows how to listen for display events such as `open`, `opened`, `close`, and `closed` using event listeners.  These events are triggered during the opening and closing animations of the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"Listen to display events\" is-link @click=\"show = true\" />\n<van-popup\n  v-model:show=\"show\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n  @open=\"showToast('open')\"\n  @opened=\"showToast('opened')\"\n  @close=\"showToast('close')\"\n  @closed=\"showToast('closed')\"\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return {\n      show,\n      showToast,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using TextEllipsisInstance Type - TypeScript\nDESCRIPTION: Demonstrates how to use the `TextEllipsisInstance` type to access and call methods on the TextEllipsis component instance. A ref is created to hold the component instance, and the `toggle` method is called to toggle the expanded status.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { TextEllipsisInstance } from 'vant';\n\nconst textEllipsisRef = ref<TextEllipsisInstance>();\n\ntextEllipsisRef.value?.toggle();\n```\n\n----------------------------------------\n\nTITLE: Divider Type Definitions in Typescript\nDESCRIPTION: This TypeScript code snippet shows how to import type definitions related to the Vant Divider component.  It imports `DividerProps` and `DividerContentPosition` from the 'vant' module, allowing developers to use these types for type checking and autocompletion when working with the Divider component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DividerProps, DividerContentPosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Handling Edit Contact Event - JavaScript\nDESCRIPTION: Defines the `onEdit` method and reactive references for contact information using Vue's Composition API. It initializes `tel` and `name` as reactive references and defines the `onEdit` method which displays a toast message when the ContactCard is clicked. Imports `ref` from 'vue' and `showToast` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const tel = ref('13000000000');\n    const name = ref('张三');\n    const onEdit = () => showToast('edit');\n    return {\n      tel,\n      name,\n      onEdit,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Radio Checked Color\nDESCRIPTION: Sets the color of the checked icon for individual Radio components using the `checked-color` property. This snippet sets the checked color to '#ee0a24' for both radio buttons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" checked-color=\"#ee0a24\">单选框 1</van-radio>\n  <van-radio name=\"2\" checked-color=\"#ee0a24\">单选框 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Watermark with Content Slot\nDESCRIPTION: Uses the `content` slot to pass custom HTML as the watermark content. Only inline styles are supported, and self-closing tags are not allowed. This approach allows for more complex and styled watermarks than simple text or images.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark :width=\"150\">\n  <template #content>\n    <div style=\"background: linear-gradient(45deg, #000 0, #000 50%, #fff 50%)\">\n      <p style=\"mix-blend-mode: difference; color: #fff\">Vant watermark</p>\n    </div>\n  </template>\n</van-watermark>\n```\n\n----------------------------------------\n\nTITLE: Vant Steps TypeScript Type Definition Import\nDESCRIPTION: Imports TypeScript type definitions for the Steps component, including StepsProps and StepsDirection.  This is used for type checking and autocompletion when working with the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StepsProps, StepsDirection } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Multiple Keywords - Highlight Component Script - Vue\nDESCRIPTION: This code snippet demonstrates the setup function for the multiple keywords example.  It defines the `text` and `keywords` data properties, where `keywords` is an array of strings. The text contains the string to be highlighted and the keywords are the terms that will be highlighted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const text = '慢慢来，不要急，生活给你出了难题，可也终有一天会给出答案。';\n    const keywords = ['难题', '终有一天', '答案'];\n\n    return {\n      text,\n      keywords,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Start Position Ellipsis - Vue JavaScript\nDESCRIPTION: Defines the Vue component's setup function with a long text string for demonstrating start position ellipsis.  It initializes a `text` variable with a sample string and returns it to be used in the template. Requires Vue's `setup` function to be used within a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      '那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Description - HTML\nDESCRIPTION: This HTML code shows how to add a description to the ActionSheet. It sets the `description` prop to \"Description\". It also adds the `close-on-click-action` property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet\n  v-model:show=\"show\"\n  :actions=\"actions\"\n  cancel-text=\"Cancel\"\n  description=\"Description\"\n  close-on-click-action\n/>\n```\n\n----------------------------------------\n\nTITLE: Excluding Components from Auto Import\nDESCRIPTION: This example demonstrates how to exclude specific components (e.g., 'Button') or APIs (e.g., 'showToast') from automatic import by using the `exclude` option within the VantResolver configuration. This prevents these items from being automatically imported.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  resolvers: [\n    VantResolver({\n      exclude: ['Button'],\n    }),\n  ],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nAutoImport({\n  resolvers: [\n    VantResolver({\n      exclude: ['showToast'],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Class - Highlight Component HTML - Vue\nDESCRIPTION: This code snippet demonstrates how to add a custom class to the highlighted elements using the Vant Highlight component in a Vue template. It utilizes the `highlight-class` prop to apply custom styles to the highlighted parts of the text.  The `keywords` prop specifies the text to highlight, and the `source-string` prop provides the text to search within.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-highlight\n  :keywords=\"keywords\"\n  :source-string=\"text\"\n  highlight-class=\"custom-class\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Language in Vant\nDESCRIPTION: This code shows how to retrieve the currently active language in a Vant application using the `useCurrentLang` method. It imports the method, calls it to get a reactive reference to the current language, and then accesses the value of the reference to get the language code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/locale/README.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { useCurrentLang } from 'vant';\n\nconst currentLang = useCurrentLang();\n\nconsole.log(currentLang.value); // --> 'en-US'\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Watermark using Vant Component\nDESCRIPTION: Displays a text watermark using the Vant Watermark component. The `content` prop is used to specify the text for the watermark. The watermark will be rendered on the page according to the component's default settings.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark content=\"Vant\" />\n```\n\n----------------------------------------\n\nTITLE: TextEllipsis Type Definitions - TypeScript\nDESCRIPTION: Imports type definitions for the TextEllipsis component. Provides type safety and autocompletion when working with the component in TypeScript projects. Requires Vant to be installed as a dependency.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  TextEllipsisProps,\n  TextEllipsisInstance,\n  TextEllipsisThemeVars,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker Component\nDESCRIPTION: Registers the DatePicker component globally within a Vue application using the createApp API.  This import and use pattern allows the DatePicker to be used within the application. No specific inputs or outputs, modifies the Vue app instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { DatePicker } from 'vant';\n\nconst app = createApp();\napp.use(DatePicker);\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definitions for Sidebar components\nDESCRIPTION: Shows the import of type definitions for the Vant Sidebar components in TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SidebarProps, SidebarItemProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing Toast Component - Vue\nDESCRIPTION: Registers the Toast component globally within a Vue application. This allows the Toast component to be used throughout the application without needing to be imported into individual components.  Requires the createApp function from Vue and the Toast component from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Toast } from 'vant';\n\nconst app = createApp();\napp.use(Toast);\n```\n\n----------------------------------------\n\nTITLE: Basic Notify Function Call - Javascript\nDESCRIPTION: Shows a basic notification message using the showNotify function. This function call provides a quick way to display a notification with a default 'danger' type. It imports the showNotify function from Vant and then invokes it with a message.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify } from 'vant';\n\nshowNotify({ message: '提示' });\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Circle Usage in Vue Component\nDESCRIPTION: Demonstrates basic usage of the Vant Circle component within a Vue component. It uses `ref` and `computed` from Vue to manage the current rate and dynamically generate the text displayed inside the circle.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, computed } from 'vue';\n\nexport default {\n  setup() {\n    const currentRate = ref(0);\n    const text = computed(() => currentRate.value.toFixed(0) + '%');\n\n    return {\n      text,\n      currentRate,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for gh-pages deployment\nDESCRIPTION: This snippet demonstrates how to update the package.json file to use npx gh-pages for deploying the site, as gh-pages is no longer installed by default.  This ensures the site can be correctly deployed to GitHub pages.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- \"release:site\": \"pnpm build:site && gh-pages -d site-dist\",\n+ \"release:site\": \"pnpm build:site && npx gh-pages -d site-dist\"\n```\n\n----------------------------------------\n\nTITLE: Custom Indicator - HTML\nDESCRIPTION: Customizes the appearance of the indicators within the Swipe component using the `indicator` slot. The slot provides access to the active slide index and total number of slides.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe>\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n  <template #indicator=\"{ active, total }\">\n    <div class=\"custom-indicator\">{{ active + 1 }}/{{ total }}</div>\n  </template>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Component Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use type definitions for the Checkbox and CheckboxGroup components in TypeScript. It provides type safety and autocompletion when working with these components in a Vue application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CheckboxProps,\n  CheckboxShape,\n  CheckboxInstance,\n  CheckboxLabelPosition,\n  CheckboxGroupProps,\n  CheckboxGroupInstance,\n  CheckboxGroupDirection,\n  CheckboxGroupToggleAllOptions,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Badge Types Definition\nDESCRIPTION: This snippet shows how to import the type definitions for the Badge component, specifically BadgeProps and BadgePosition. This allows for type checking and improved code completion when using TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BadgeProps, BadgePosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Scrolling in NoticeBar\nDESCRIPTION: This snippet demonstrates how to control the scrolling behavior of the NoticeBar. When the text is short, `scrollable` can be set to true to force scrolling. When the text is long, `scrollable` can be set to false to prevent scrolling.  The snippet shows both cases.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- 文字较短时，通过设置 scrollable 属性开启滚动播放 -->\n<van-notice-bar scrollable text=\"米袋虽空——樱花开哉！\" />\n\n<!-- 文字较长时，通过禁用 scrollable 属性关闭滚动播放 -->\n<van-notice-bar\n  :scrollable=\"false\"\n  text=\"不会回头的东西有四件：说出口的话、离弦的箭、逝去的生活和失去的机会。\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Icon State - Vue\nDESCRIPTION: This code snippet provides the javascript setup to provide reactive variables for the active and inactive icons to use in the custom checkbox icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref(true);\n    return {\n      checked,\n      activeIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png',\n      inactiveIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-inactive.png',\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsbuild Plugin for Vant\nDESCRIPTION: This JavaScript code configures the Rsbuild build tool to automatically import Vant components and their styles using `unplugin-vue-components` and `@vant/auto-import-resolver`. It requires `pluginVue` from `@rsbuild/plugin-vue`, `AutoImport` from `unplugin-auto-import/rspack`, `Components` from `unplugin-vue-components/rspack`, and `VantResolver` from `@vant/auto-import-resolver`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginVue } from '@rsbuild/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/rspack';\nimport Components from 'unplugin-vue-components/rspack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default defineConfig({\n  plugins: [pluginVue()],\n  tools: {\n    rspack: {\n      plugins: [\n        AutoImport({\n          resolvers: [VantResolver()],\n        }),\n        Components({\n          resolvers: [VantResolver()],\n        }),\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Logic - Vue\nDESCRIPTION: Provides the JavaScript logic for the basic Popover example. It uses `ref` to manage the Popover's visibility and defines the `actions` array. The `onSelect` method displays a toast message based on the selected action's text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n\n    // 通过 actions 属性来定义菜单选项\n    const actions = [\n      { text: '选项一' },\n      { text: '选项二' },\n      { text: '选项三' },\n    ];\n    const onSelect = (action) => showToast(action.text);\n\n    return {\n      actions,\n      onSelect,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom PullRefresh Content - CSS\nDESCRIPTION: This CSS snippet provides styling for the custom content used in the PullRefresh component example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.zh-CN.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  .doge {\n    width: 140px;\n    height: 72px;\n    margin-top: 8px;\n    border-radius: 4px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: ContactEdit Type Definition Import - TypeScript\nDESCRIPTION: Imports the type definitions `ContactEditInfo` and `ContactEditProps` from the 'vant' library. These types can be used to ensure type safety when working with the ContactEdit component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ContactEditInfo, ContactEditProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: CSS for Dark Theme Background and Text\nDESCRIPTION: This CSS snippet provides an example of how to set global styles for text and background colors when using the dark theme with Vant.  It targets the body element when the .van-theme-dark class is present (applied by Vant's dark theme) and sets the text color to #f5f5f5 and the background color to black. This complements Vant's dark theme by styling the overall page appearance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.van-theme-dark body {\n  color: #f5f5f5;\n  background-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Info and Error Messages - JavaScript\nDESCRIPTION: Manages the state for the info and error message example, including a watch function to update the error message based on the input value. If the length is 6 and not '123456', it shows \"密码错误\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watch } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref('123');\n    const errorInfo = ref('');\n    const showKeyboard = ref(true);\n\n    watch(value, (newVal) => {\n      if (newVal.length === 6 && newVal !== '123456') {\n        errorInfo.value = '密码错误';\n      } else {\n        errorInfo.value = '';\n      }\n    });\n\n    return {\n      value,\n      errorInfo,\n      showKeyboard,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic NoticeBar Usage\nDESCRIPTION: This snippet shows how to use the NoticeBar component with a basic text message and a left icon. The `text` property sets the content of the notice, and the `left-icon` property specifies the icon to display on the left side. This example uses the \"volume-o\" icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar\n  left-icon=\"volume-o\"\n  text=\"无论我们能活多久，我们能够享受的只有无法分割的此刻，此外别无其他。\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Picker with Custom Empty Slot\nDESCRIPTION: This code snippet demonstrates the use of the empty slot to display a custom empty state when the picker has no data. It utilizes the VanEmpty component for a custom image and description.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-picker title=\"标题\">\n  <template #empty>\n    <van-empty\n      image=\"https://fastly.jsdelivr.net/npm/@vant/assets/custom-empty-image.png\"\n      image-size=\"80\"\n      description=\"No data\"\n    />\n  </template>\n</van-picker>\n```\n\n----------------------------------------\n\nTITLE: Import IconProps type\nDESCRIPTION: Imports the `IconProps` type definition from the `vant` library. This type is used for defining the props of the Icon component in TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IconProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Popover Placement Example - HTML\nDESCRIPTION: Illustrates setting the Popover's placement using the `placement` prop. This example specifically sets the placement to \"top\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-popover placement=\"top\" />\n```\n\n----------------------------------------\n\nTITLE: Basic NavBar Usage\nDESCRIPTION: Demonstrates the basic usage of the NavBar component by setting the `title` property. This example shows how to display a simple title in the navigation bar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar title=\"标题\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver with Vue CLI\nDESCRIPTION: Integrate VantResolver into a Vue CLI project using unplugin-auto-import and unplugin-vue-components. The resolver is added to the `resolvers` array within the plugin options for both AutoImport and Components within `configureWebpack`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nimport AutoImport from 'unplugin-auto-import/webpack';\nimport Components from 'unplugin-vue-components/webpack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      AutoImport({\n        resolvers: [VantResolver()],\n      }),\n      Components({\n        resolvers: [VantResolver()],\n      }),\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Size Logic - Vue\nDESCRIPTION: Implements the logic for dynamically determining if a file is over the size limit.  The function checks the file type and sets different size limits based on the file type.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const isOverSize = (file) => {\n      const maxSize = file.type === 'image/jpeg' ? 500 * 1024 : 1000 * 1024;\n      return file.size >= maxSize;\n    };\n    return {\n      isOverSize,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up active state for Vant Tabs in Vue\nDESCRIPTION: This snippet demonstrates how to set up the active state for the van-tabs component using Vue's reactivity system. It imports the ref function from Vue and creates a reactive variable called active, initialized to 0. This variable is then returned from the setup function so that it can be bound to the v-model:active directive in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Highlight Usage - HTML\nDESCRIPTION: Demonstrates basic usage of the Vant Highlight component.  It binds the `keywords` and `source-string` props to the component, allowing the specified keywords to be highlighted within the source text. Requires `keywords` and `text` to be defined in the component's data or setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-highlight :keywords=\"keywords\" :source-string=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Space Component in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Space component in a Vue application. It imports the necessary modules from 'vue' and 'vant' and then uses the `app.use()` method to register the component globally, making it available for use in any component within the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Space } from 'vant';\n\nconst app = createApp();\napp.use(Space);\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Description - HTML\nDESCRIPTION: This HTML snippet demonstrates adding a description to the `van-share-sheet` component.  It includes the `description` prop. Requires Vue.js and Vant CSS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-share-sheet\n  v-model:show=\"showShare\"\n  :options=\"options\"\n  title=\"Share\"\n  description=\"Description\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Custom Stroke Width\nDESCRIPTION: Customizes the stroke width of the Vant Progress component using the `stroke-width` prop. The `stroke-width` prop accepts a number or string value representing the width of the progress bar. This example sets the width to 8 pixels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-progress :percentage=\"50\" stroke-width=\"8\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Checkbox Icon Size - Vue\nDESCRIPTION: This code snippet shows how to customize the size of the checkbox icon using the `icon-size` property.  The size can be specified in pixels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\" icon-size=\"24px\">复选框</van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Touch Emulator via pnpm\nDESCRIPTION: Installs the @vant/touch-emulator package using pnpm. This command adds the emulator as a project dependency, enabling touch event simulation on desktop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-touch-emulator/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @vant/touch-emulator\n```\n\n----------------------------------------\n\nTITLE: Displaying a Default NumberKeyboard\nDESCRIPTION: This example shows how to display a basic number keyboard using the `van-number-keyboard` component.  It includes handling for the `blur`, `input`, and `delete` events. The keyboard visibility is controlled by the `show` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell @touchstart.stop=\"show = true\">弹出默认键盘</van-cell>\n<van-number-keyboard\n  :show=\"show\"\n  @blur=\"show = false\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Rate Component\nDESCRIPTION: This code snippet demonstrates how to install and initialize the Vant Rate component in a Vue.js application. It imports the necessary modules and registers the component globally using app.use.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Rate } from 'vant';\n\nconst app = createApp();\napp.use(Rate);\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Popover - HTML\nDESCRIPTION: Demonstrates using the Popover component in an uncontrolled mode, where the component manages its own visibility. It sets up a trigger button within the reference slot and handles the select event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-popover :actions=\"actions\" placement=\"top-start\" @select=\"onSelect\">\n  <template #reference>\n    <van-button type=\"primary\">Uncontrolled</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: HTML element reference\nDESCRIPTION: Defines a div element with a ref attribute named \"root\". This ref is used to obtain a reference to the element within the JavaScript code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-scroll-parent.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition Import for RollingText\nDESCRIPTION: This TypeScript code snippet imports type definitions for the Vant RollingText component.  These type definitions are used for type checking and autocompletion when working with the RollingText component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  RollingTextProps,\n  RollingTextInstance,\n  RollingTextDirection,\n  RollingTextStopOrder,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: TimePicker Instance Type Definition\nDESCRIPTION: TypeScript type definition example for `TimePickerInstance` to be used with `ref` to get a TimePicker instance. It demonstrates how to call the `confirm` method on the TimePicker instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { TimePickerInstance } from 'vant';\n\nconst timePickerRef = ref<TimePickerInstance>();\n\ntimePickerRef.value?.confirm();\n```\n\n----------------------------------------\n\nTITLE: Disabling Radio Label Click\nDESCRIPTION: Disables the label click functionality, preventing the Radio from toggling when the label is clicked, by setting the `label-disabled` property to true. The radio only toggles when the icon itself is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" label-disabled>单选框 1</van-radio>\n  <van-radio name=\"2\" label-disabled>单选框 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Spacing with Vant Space\nDESCRIPTION: This HTML snippet demonstrates how to customize the spacing between children using the `size` attribute. The size can be specified as a number (in pixels) or as a string with a unit (e.g., '2rem').\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 20px -->\n<van-space :size=\"20\">\n  <van-button type=\"primary\">按钮</van-button>\n  <van-button type=\"primary\">按钮</van-button>\n  <van-button type=\"primary\">按钮</van-button>\n</van-space>\n\n<!-- 2rem -->\n<van-space size=\"2rem\">\n  <van-button type=\"primary\">按钮</van-button>\n  <van-button type=\"primary\">按钮</van-button>\n  <van-button type=\"primary\">按钮</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: FloatingPanel Types Import - TypeScript\nDESCRIPTION: Imports the `FloatingPanelProps` type definition from the Vant library. This type can be used to provide type checking for the props of the FloatingPanel component in TypeScript code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FloatingPanelProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Custom Content TreeSelect Data - JavaScript\nDESCRIPTION: Provides the data and reactive state for the custom content TreeSelect component. It uses `ref` to create a reactive `activeIndex` variable. The `items` array only contains two groups labeled '分组 1' and '分组 2'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeIndex = ref(0);\n    return {\n      activeIndex,\n      items: [{ text: '分组 1' }, { text: '分组 2' }],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Vant dependency in package.json\nDESCRIPTION: Update the Vant dependency in package.json to Vant v4 and add @vant/compat. After modifying the package.json file, reinstall the dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"dependencies\": {\n-    \"vant\": \"^3.0.0\",\n+    \"vant\": \"^4.0.0\",\n+    \"@vant/compat\": \"^1.0.0\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useChildren to link components\nDESCRIPTION: This code snippet demonstrates how to use the `useChildren` hook in a parent component to establish a relationship with child components. It defines a relation key, uses `linkChildren` to provide data (count, add method) to the children. `linkChildren` is used to provide values to the children, enabling data communication and method invocation between parent and child components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-relation.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useChildren } from '@vant/use';\n\nconst RELATION_KEY = Symbol('my-relation');\n\nexport default {\n  setup() {\n    const { linkChildren } = useChildren(RELATION_KEY);\n\n    const count = ref(0);\n    const add = () => {\n      count.value++;\n    };\n\n    // provide data and methods to children\n    linkChildren({ add, count });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Clearable Rate Component\nDESCRIPTION: Enables the clearable functionality for the Rate component. Setting the `clearable` property to `true` allows resetting the value to 0 by clicking the same value again. The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" clearable />\n```\n\n----------------------------------------\n\nTITLE: Defining Text Content - Vue\nDESCRIPTION: Defines the text content used in the TextEllipsis component. The setup function returns an object containing the `text` variable, which is a long string. This variable is then bound to the `content` prop of the TextEllipsis component in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      'Take your time and be patient. Life itself will eventually answer all those questions it once raised for you.';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enable Reupload - HTML & Typescript\nDESCRIPTION: Demonstrates how to enable reuploading a file using the `reupload` prop. When reupload is enabled, the image preview is disabled. Also includes setting the `max-count` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" reupload max-count=\"2\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      { url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg' },\n    ]);\n\n    return { fileList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Stepper Input Box Disable Configuration in Vue\nDESCRIPTION: This configuration shows how to disable only the input box in the Vant Stepper, while leaving the increment/decrement buttons enabled.  The `disable-input` attribute disables the input field while allowing users to adjust the value using the buttons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" disable-input />\n```\n\n----------------------------------------\n\nTITLE: NumberKeyboard with Title\nDESCRIPTION: This code adds a title to the number keyboard using the `title` prop. This can be useful for providing context or instructions to the user.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-cell plain type=\"primary\" @touchstart.stop=\"show = true\">\n  弹出带标题的键盘\n</van-cell>\n<van-number-keyboard\n  :show=\"show\"\n  title=\"键盘标题\"\n  extra-key=\".\"\n  close-button-text=\"完成\"\n  @blur=\"show = false\"\n  @input=\"onInput\"\n  @delete=\"onDelete\"\n/>\n```\n\n----------------------------------------\n\nTITLE: FloatingBubble with Two-Way Binding (JavaScript)\nDESCRIPTION: Defines a reactive variable `offset` using `ref` from Vue, which is initialized with initial x and y coordinates. This `offset` is then used to control the position of the FloatingBubble.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const offset = ref({ x: 200, y: 400 });\n    return { offset };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using image Slot - HTML\nDESCRIPTION: Demonstrates how to use the image slot to customize the content displayed within the ImagePreview. In this example, a video element is displayed instead of an image. The `close-on-click-image` property is set to false to prevent accidental closing when clicking the video.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-image-preview\n  v-model:show=\"show\"\n  :images=\"images\"\n  :close-on-click-image=\"false\"\n>\n  <template #image=\"{ src }\">\n    <video style=\"width: 100%;\" controls>\n      <source :src=\"src\" />\n    </video>\n  </template>\n</van-image-preview>\n```\n\n----------------------------------------\n\nTITLE: Setting Position for Vant Image in HTML\nDESCRIPTION: This code snippet shows how to set the 'position' property of the Vant Image component. This property, combined with the 'fit' property set to 'cover', allows controlling which part of the image is visible within its container.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"10rem\"\n  height=\"10rem\"\n  fit=\"cover\"\n  position=\"left\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Grid Types Definition - TypeScript\nDESCRIPTION: Import the GridProps, GridDirection and GridItemProps types from the vant library for type checking and autocompletion in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GridProps, GridDirection, GridItemProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Toggle All Method Example - TypeScript\nDESCRIPTION: This snippet showcases the usage of the `toggleAll` method from the `CollapseInstance` in TypeScript. It demonstrates how to toggle all panels, expand all, collapse all, and skip disabled panels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CollapseInstance } from 'vant';\n\nconst collapseRef = ref<CollapseInstance>();\n\n// 全部切换\ncollapseRef.value?.toggleAll();\n// 全部展开\ncollapseRef.value?.toggleAll(true);\n// 全部收起\ncollapseRef.value?.toggleAll(false);\n\n// 全部全部切换，并跳过禁用的复选框\ncollapseRef.value?.toggleAll({\n  skipDisabled: true,\n});\n// 全部选中，并跳过禁用的复选框\ncollapseRef.value?.toggleAll({\n  expanded: true,\n  skipDisabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using URL for Icon\nDESCRIPTION: Displays an icon using an image URL passed to the `name` prop.  This allows using custom images or icons from external sources within the `van-icon` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"https://fastly.jsdelivr.net/npm/@vant/assets/icon-demo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Menu Items - Vue\nDESCRIPTION: This code snippet demonstrates how to disable dropdown menu items by setting the `disabled` prop to `true` on the `van-dropdown-item` component. Disabled items cannot be selected. Dependencies: Vant DropdownMenu and DropdownItem.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu>\n  <van-dropdown-item v-model=\"value1\" disabled :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" disabled :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Animation Effects with Vant Transition Component HTML\nDESCRIPTION: Shows how to use Vant's transition component with predefined animation classes for fade, slide-up, slide-down, slide-left, and slide-right effects.  The `transition` component is used in conjunction with the `v-show` directive to control the visibility of the animated element.  Requires the Vant UI library and Vue.js.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.zh-CN.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 淡入 -->\n<transition name=\"van-fade\">\n  <div v-show=\"visible\">Fade</div>\n</transition>\n\n<!-- 上滑进入 -->\n<transition name=\"van-slide-up\">\n  <div v-show=\"visible\">Slide Up</div>\n</transition>\n\n<!-- 下滑进入 -->\n<transition name=\"van-slide-down\">\n  <div v-show=\"visible\">Slide Down</div>\n</transition>\n\n<!-- 左滑进入 -->\n<transition name=\"van-slide-left\">\n  <div v-show=\"visible\">Slide Left</div>\n</transition>\n\n<!-- 右滑进入 -->\n<transition name=\"van-slide-right\">\n  <div v-show=\"visible\">Slide Right</div>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Using Vant Components in Nuxt 3 Template\nDESCRIPTION: This HTML snippet shows how to use Vant components in a Nuxt 3 template after installing and configuring the `@vant/nuxt` module.  It demonstrates the use of standard, capitalized, and lazy-loaded component names. Requires the Vant Nuxt module to be installed and configured.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <van-button type=\"primary\" @click=\"showToast('toast')\">button</van-button>\n  <VanButton type=\"success\" @click=\"showNotify('notify')\">button</VanButton>\n  <LazyVanButton type=\"default\">lazy button</LazyVanButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for npm publish\nDESCRIPTION: Specifies the main entry points and files to include when publishing the Vant component library to npm. This ensures that the published package can be correctly consumed by other projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/commands.zh-CN.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"main\": \"lib/index.js\",\n  \"module\": \"es/index.js\",\n  \"files\": [\"es\", \"lib\"]\n}\n```\n\n----------------------------------------\n\nTITLE: useScrollParent Type Declarations\nDESCRIPTION: TypeScript declaration for the `useScrollParent` function. It defines the function's input parameter (an element ref) and return type (a ref to the scrollable parent element or window).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-scroll-parent.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useScrollParent(\n  element: Ref<Element | undefined>,\n): Ref<Element | Window | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Setting Site Public Path (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the public path for the documentation site in `vant.config.mjs`. It shows how to set the `build.site.publicPath` option, which is equivalent to Vite's `build.outDir`. This is useful when deploying the site to a subpath of a domain.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  build: {\n    site: {\n      publicPath: '/demo-ui/',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant CLI Configuration Example (JSON)\nDESCRIPTION: This JSON snippet shows an example configuration for generating TypeScript declaration files for the Vant component library using the Vant CLI. It specifies compiler options, include paths, and exclude paths to define how the declaration files are generated. The declaration files will be generated in the root directory.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.zh-CN.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationDir\": \".\",\n    \"emitDeclarationOnly\": true\n  },\n  \"include\": [\"es/**/*\", \"lib/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/test/**/*\", \"**/demo/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver in esbuild\nDESCRIPTION: This configures the Vant resolver in an esbuild project using unplugin-auto-import and unplugin-vue-components. It imports the necessary modules and adds the VantResolver to the resolvers array in both the AutoImport and Components plugins within the build function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// esbuild.config.js\nimport { build } from 'esbuild';\nimport AutoImport from 'unplugin-auto-import/esbuild';\nimport Components from 'unplugin-vue-components/esbuild';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nbuild({\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Show Badge Data Setup - JavaScript\nDESCRIPTION: Sets up the reactive data for the Show Badge example. Configures items to display a dot on 'Group 1' and a badge with the number 5 on 'Group 2'. Requires the 'vue' library and the 'ref' function from Vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeIndex = ref(0);\n    return {\n      activeIndex,\n      items: [\n        {\n          text: 'Group 1',\n          children: [\n            { text: 'Delaware', id: 1 },\n            { text: 'Florida', id: 2 },\n            { text: 'Georgia', id: 3, disabled: true },\n          ],\n          dot: true,\n        },\n        {\n          text: 'Group 2',\n          children: [\n            { text: 'Alabama', id: 4 },\n            { text: 'Kansas', id: 5 },\n            { text: 'Louisiana', id: 6 },\n          ],\n          badge: 5,\n        },\n      ],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar Component - JavaScript\nDESCRIPTION: Registers the Vant Calendar component globally within a Vue application. It imports the necessary modules from the 'vue' and 'vant' libraries and then uses the `app.use` method to register the component for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Calendar } from 'vant';\n\nconst app = createApp();\napp.use(Calendar);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver with esbuild\nDESCRIPTION: Integrate VantResolver into an esbuild project using unplugin-auto-import and unplugin-vue-components. The resolver is added to the `resolvers` array within the plugin options for both AutoImport and Components within the `build` function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// esbuild.config.js\nimport { build } from 'esbuild';\nimport AutoImport from 'unplugin-auto-import/esbuild';\nimport Components from 'unplugin-vue-components/esbuild';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nbuild({\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Day Text Formatter - JavaScript\nDESCRIPTION: Defines the `formatter` function used to customize the day text and additional information within the Vant Calendar component. This function modifies the `day` object to include top and bottom info, along with the text for specific dates and types.  It doesn't require any external dependencies other than Vue's component setup context.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const formatter = (day) => {\n      const month = day.date.getMonth() + 1;\n      const date = day.date.getDate();\n\n      if (month === 5) {\n        if (date === 1) {\n          day.topInfo = 'Labor Day';\n        } else if (date === 4) {\n          day.topInfo = 'Youth Day';\n        } else if (date === 11) {\n          day.text = 'Today';\n        }\n      }\n\n      if (day.type === 'start') {\n        day.bottomInfo = 'In';\n      } else if (day.type === 'end') {\n        day.bottomInfo = 'Out';\n      }\n\n      return day;\n    };\n\n    return {\n      formatter,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Divider Content Position in HTML\nDESCRIPTION: These HTML code snippets show how to control the position of the text content within the Vant Divider component using the `content-position` prop. The first example positions the text on the left side (`content-position=\"left\"`), while the second positions it on the right side (`content-position=\"right\"`).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-divider content-position=\"left\">文本</van-divider>\n<van-divider content-position=\"right\">文本</van-divider>\n```\n\n----------------------------------------\n\nTITLE: Touch Feedback with Vant Class HTML\nDESCRIPTION: Illustrates how to add touch feedback to elements using Vant's CSS class `van-haptics-feedback`. When the element is touched, its opacity is reduced, providing visual feedback to the user. Intended for use with clickable elements like buttons. No external dependencies are required, as these are built-in Vant styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.zh-CN.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"van-haptics-feedback\"></div>\n```\n\n----------------------------------------\n\nTITLE: useToggle Type Declaration (TypeScript)\nDESCRIPTION: Defines the TypeScript type declaration for the useToggle hook. It specifies that the hook accepts an optional boolean defaultValue and returns a tuple containing a Ref<boolean> (reactive boolean state) and a function that toggles the state.  The toggle function can optionally take a boolean newValue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-toggle.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useToggle(\n  defaultValue: boolean,\n): [Ref<boolean>, (newValue: boolean) => void];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for NumberKeyboard\nDESCRIPTION: This code snippet shows how to import the TypeScript type definitions for the NumberKeyboard component from the `vant` library. This helps ensure type safety when working with the component in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NumberKeyboardProps, NumberKeyboardTheme } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Using usePageVisibility Hook in Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the `usePageVisibility` hook in a Vue component. It imports the hook from `@vant/use` and utilizes the `watch` function from Vue to observe changes in the page's visibility state. The visibility state is logged to the console whenever it changes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-page-visibility.zh-CN.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { watch } from 'vue';\nimport { usePageVisibility } from '@vant/use';\n\nexport default {\n  setup() {\n    const pageVisibility = usePageVisibility();\n\n    watch(pageVisibility, (value) => {\n      console.log('visibility: ', value);\n    });\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Replacing SwitchCell with Cell and Switch HTML\nDESCRIPTION: Demonstrates how to replace the deprecated SwitchCell component with the Cell and Switch components in Vant v3. It shows the corresponding HTML structures for both Vant v2 and Vant v3, highlighting the use of the Cell component's slot for the Switch.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.en-US.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-switch-cell title=\"title\" v-model=\"checked\" />\n\n<!-- Vant 3 -->\n<van-cell center title=\"title\">\n  <template #right-icon>\n    <van-switch v-model=\"checked\" size=\"24\" />\n  </template>\n</van-cell>\n```\n\n----------------------------------------\n\nTITLE: Styling the Vant Switch Node Slot Content\nDESCRIPTION: This CSS code provides styles for the content placed inside the `node` slot of the Vant Switch component, specifically for an icon wrapper. The styles center the icon and set its size and color based on whether the switch is checked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.icon-wrapper {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    font-size: 18px;\n  }\n\n  .icon-wrapper .van-icon-success {\n    line-height: 32px;\n    color: var(--van-blue);\n  }\n\n  .icon-wrapper .van-icon-cross {\n    line-height: 32px;\n    color: var(--van-gray-5);\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing RollingText Styles (CSS)\nDESCRIPTION: This CSS code snippet provides custom styles for the Vant RollingText component. It overrides several CSS variables to customize the appearance, including background color, text color, font size, gap between digits, item border radius, and item width.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.my-rolling-text {\n  --van-rolling-text-background: #1989fa;\n  --van-rolling-text-color: white;\n  --van-rolling-text-font-size: 24px;\n  --van-rolling-text-gap: 6px;\n  --van-rolling-text-item-border-radius: 5px;\n  --van-rolling-text-item-width: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Space Component Usage\nDESCRIPTION: Demonstrates basic usage of the Vant Space component to add horizontal spacing between multiple Vant Button components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-space>\n  <van-button type=\"primary\">Button</van-button>\n  <van-button type=\"primary\">Button</van-button>\n  <van-button type=\"primary\">Button</van-button>\n  <van-button type=\"primary\">Button</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Popover with Icons Setup - JavaScript\nDESCRIPTION: Sets up the state needed for the Popover component with icons in the actions in a Vue setup function.  It defines a reactive `showPopover` ref to control the popover's visibility and an `actions` array to populate the Popover, where each action includes an `icon` property.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: 'Option 1', icon: 'add-o' },\n      { text: 'Option 2', icon: 'music-o' },\n      { text: 'Option 3', icon: 'more-o' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: RollingText Instance Type - TypeScript\nDESCRIPTION: Demonstrates how to use the RollingTextInstance type definition to type a ref to the RollingText component instance. This allows for type-safe access to the component's methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { RollingTextInstance } from 'vant';\n\nconst rollingTextRef = ref<RollingTextInstance>();\n\nrollingTextRef.value?.start();\n```\n\n----------------------------------------\n\nTITLE: Component Instance Method Call in Mounted Hook\nDESCRIPTION: This snippet defines the Vue component's data and the `mounted` lifecycle hook where the `toggle()` method of the Vant Checkbox component is called. It initializes the `checked` property to `false` and accesses the component instance using `this.$refs.checkbox` within the `mounted` hook.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      checked: false,\n    };\n  },\n  // 注意：组件挂载后才能访问到 ref 对象\n  mounted() {\n    this.$refs.checkbox.toggle();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue.js Code for Theme Switching\nDESCRIPTION: This Javascript code demonstrates how to use Vue's reactivity system and the `ref` function to create a reactive `theme` variable, and how to use `setTimeout` function in the setup function to switch the value of the theme from 'light' to 'dark' after 1 second.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const theme = ref('light');\n\n    setTimeout(() => {\n      theme.value = 'dark';\n    }, 1000);\n\n    return { theme };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Types Import - Typescript\nDESCRIPTION: This code snippet demonstrates how to import type definitions for the ActionSheet component, which can be used for TypeScript type checking and autocompletion.  It imports `ActionSheetProps` and `ActionSheetAction` from the 'vant' library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ActionSheetProps, ActionSheetAction } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Setting Module Type in Vant Resolver\nDESCRIPTION: This example demonstrates how to specify the module type ('esm' or 'cjs') for importing Vant components by setting the `module` option within the VantResolver configuration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  resolvers: [\n    VantResolver({\n      module: 'cjs',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup with pnpm\nDESCRIPTION: These commands clone the Vant repository, enable pnpm, install dependencies, and start the local development server. It uses pnpm as the package manager and assumes Node.js is already installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/contribution.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone repository\ngit clone git@github.com:vant-ui/vant.git\n\n# Enable pnpm package manager\ncorepack enable\n\n# Install dependencies\npnpm i\n\n# Start development\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Basic Cell Usage - HTML\nDESCRIPTION: This snippet demonstrates basic usage of the `van-cell` and `van-cell-group` components in HTML. It shows how to create a list of cells with titles, values, and labels. The `van-cell-group` component is used to group the cells together.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"Cell title\" value=\"Content\" />\n  <van-cell title=\"Cell title\" value=\"Content\" label=\"Description\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Disabling the Search Input\nDESCRIPTION: This HTML snippet demonstrates how to disable the search input using the `disabled` prop. When disabled, the input cannot be focused and the user cannot enter text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-search v-model=\"value\" disabled placeholder=\"请输入搜索关键词\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Stop Order - HTML\nDESCRIPTION: Demonstrates how to set the stop order of the animation of each digit using the stop-order prop.  The default is 'ltr' (left-to-right), but it can be set to 'rtl' (right-to-left).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text :start-num=\"0\" :target-num=\"54321\" stop-order=\"rtl\" />\n```\n\n----------------------------------------\n\nTITLE: Editing a Contact Card - JavaScript\nDESCRIPTION: Defines the `tel`, `name`, and `onEdit` methods for the 'edit' ContactCard example.  `tel` and `name` are defined as reactive references using `ref` from Vue.js. The `onEdit` method displays a toast message when the card is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const tel = ref('13000000000');\n    const name = ref('John Snow');\n    const onEdit = () => showToast('edit');\n\n    return {\n      tel,\n      name,\n      onEdit,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DemoButton Component\nDESCRIPTION: This HTML snippet shows how to use the DemoButton component with the `type` prop set to \"primary\".  The primary type will apply the default primary style to the button. It demonstrates the basic integration of the component into a Vue template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/create-vant-cli-app/generators/vue2/src/demo-button/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<demo-button type=\"primary\" />\n```\n\n----------------------------------------\n\nTITLE: Compat Solution - Javascript\nDESCRIPTION: This code shows how to use the `Dialog()` function exported from `@vant/compat` to be compatible with Vant 3.  This allows gradual migration to Vant 4.0 without immediately changing all instances of `Dialog()`.  The API and behavior are identical to Vant 3.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Dialog } from '@vant/compat';\n\nDialog({ message: 'Hello World!' });\n```\n\n----------------------------------------\n\nTITLE: Vant Picker Disabled Options - JavaScript\nDESCRIPTION: This JavaScript code snippet configures the columns data for the Vant Picker, including disabling specific options by setting the disabled property to true.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      { text: '杭州', value: 'Hangzhou', disabled: true },\n      { text: '宁波', value: 'Ningbo' },\n      { text: '温州', value: 'Wenzhou' },\n    ];\n    return { columns };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: useCustomFieldValue Type Declaration (TypeScript)\nDESCRIPTION: This snippet shows the type declaration for the `useCustomFieldValue` function. It defines that the function takes a single argument: a function that returns an unknown value.  This function is called by `van-field` to retrieve the field's value. Dependencies: TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-custom-field-value.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useCustomFieldValue(customValue: () => unknown): void;\n```\n\n----------------------------------------\n\nTITLE: Installing auto import plugins via Pnpm\nDESCRIPTION: These commands install the necessary packages for automatic component and style importing with Vant using `unplugin-vue-components` and `@vant/auto-import-resolver`. Requires Pnpm to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# with pnpm\npnpm add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Instance Methods using ref\nDESCRIPTION: This snippet demonstrates accessing a Vant component's instance methods using the `ref` attribute. A `ref` named \"checkbox\" is added to the `<van-checkbox>` element, and the `toggle()` method is called on the component instance in the `mounted` lifecycle hook via `this.$refs.checkbox.toggle()`.  This requires the component to be mounted before accessing the ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- 通过 ref 属性将组件绑定到 this.$refs.checkbox 上 -->\n<van-checkbox v-model=\"checked\" ref=\"checkbox\"> 复选框 </van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage - JavaScript\nDESCRIPTION: Defines the setup function for the Vue component used in the basic example. This function initializes a list of 50 items to demonstrate scrolling behavior.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Vant Icon Color\nDESCRIPTION: Sets the color of a Vant Icon using the `color` property.  Accepts any valid CSS color value. Requires the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"cart-o\" color=\"#1989fa\" />\n<van-icon name=\"fire-o\" color=\"#ee0a24\" />\n```\n\n----------------------------------------\n\nTITLE: NavBar Disabling Buttons\nDESCRIPTION: Shows how to disable the left and right buttons of the NavBar using the `left-disabled` and `right-disabled` properties.  Disabled buttons have reduced opacity and are not clickable.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-nav-bar\n  title=\"标题\"\n  left-text=\"返回\"\n  right-text=\"按钮\"\n  left-arrow\n  left-disabled\n  right-disabled\n/>\n```\n\n----------------------------------------\n\nTITLE: Inactive Progress Bar - HTML\nDESCRIPTION: Renders a greyed-out Vant Progress bar. The `inactive` prop disables the active styling and applies a grey color. This is used to indicate that the progress is not currently active or relevant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-progress inactive :percentage=\"50\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Image Position Property in HTML\nDESCRIPTION: Demonstrates how to use the position property in conjunction with the fit property to adjust the image's position within its container.  The fit property is set to 'cover', which ensures the container is filled, and the position is set to 'left', shifting the image to the left.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"10rem\"\n  height=\"10rem\"\n  fit=\"cover\"\n  position=\"left\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Change Event - JavaScript\nDESCRIPTION: This JavaScript code handles the `change` event emitted by the Vant Rate component. It imports the `showToast` function from Vant and displays a toast message with the current value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(3);\n    const onChange = (value) => showToast('current value:' + value);\n    return {\n      value,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Component Type Definitions - TypeScript\nDESCRIPTION: This snippet shows how to import type definitions for `ColProps`, `RowProps`, `RowAlign`, and `RowJustify` from the `vant` library. These type definitions can be used to ensure type safety when working with the `van-col` and `van-row` components in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColProps, RowProps, RowAlign, RowJustify } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Custom PullRefresh Content - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the content displayed during the pull-to-refresh process using slots.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-pull-refresh v-model=\"isLoading\" :head-height=\"80\" @refresh=\"onRefresh\">\n  <!-- 下拉提示，通过 scale 实现一个缩放效果 -->\n  <template #pulling=\"props\">\n    <img\n      class=\"doge\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/doge.png\"\n      :style=\"{ transform: `scale(${props.distance / 80})` }\"\n    />\n  </template>\n\n  <!-- 释放提示 -->\n  <template #loosing>\n    <img\n      class=\"doge\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/doge.png\"\n    />\n  </template>\n\n  <!-- 加载提示 -->\n  <template #loading>\n    <img\n      class=\"doge\"\n      src=\"https://fastly.jsdelivr.net/npm/@vant/assets/doge-fire.jpeg\"\n    />\n  </template>\n  <p>刷新次数: {{ count }}</p>\n</van-pull-refresh>\n```\n\n----------------------------------------\n\nTITLE: Using ImagePreviewInstance with ref - TypeScript\nDESCRIPTION: This code snippet illustrates how to obtain a reference to the ImagePreview instance using Vue's `ref` and how to subsequently call methods on the instance, specifically `swipeTo`. This enables programmatic control over the image preview, such as navigating to a specific image. The type `ImagePreviewInstance` ensures type safety.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { ImagePreviewInstance } from 'vant';\n\nconst imagePreviewRef = ref<ImagePreviewInstance>();\n\nimagePreviewRef.value?.swipeTo(1);\n```\n\n----------------------------------------\n\nTITLE: Vue Setup for v-model Binding\nDESCRIPTION: This Vue setup function handles the v-model binding for the NumberKeyboard component. It initializes the `value` ref with an empty string and returns it along with the `show` ref to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(true);\n    const value = ref('');\n    return {\n      show,\n      value,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Alignment Control with Vant Space\nDESCRIPTION: This HTML snippet shows how to control the alignment of the children of the Vant Space component using the `align` attribute.  The `align` prop is dynamically bound to the `align` ref in the Javascript snippet and is controlled by a Vant Radio Group. The space is styled with padding and a background color for visual clarity.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group\n  v-model=\"align\"\n  direction=\"horizontal\"\n  style=\"margin-bottom: 16px\"\n>\n  <van-radio name=\"start\">start</van-radio>\n  <van-radio name=\"center\">center</van-radio>\n  <van-radio name=\"end\">end</van-radio>\n  <van-radio name=\"baseline\">baseline</van-radio>\n</van-radio-group>\n\n<van-space :align=\"align\" style=\"padding: 16px; background: #f3f2f5\">\n  <van-button type=\"primary\">{{ align }}</van-button>\n  <div style=\"padding: 40px 20px; background: #fff\">Block</div>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Component Usage\nDESCRIPTION: Implements a basic Rate component with v-model binding in Vue.  This demonstrates the basic usage of the Rate component, binding its value to a `value` ref using `v-model`. The value is initialized to 3. The component renders a set of stars that reflect the bound `value`. The HTML part displays the rate component. The javascript code defines and initializes the 'value' with a ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Sticky with Offset Bottom - HTML\nDESCRIPTION: Shows how to use the `offset-bottom` and `position` props to stick the component to the bottom of the screen. The `offset-bottom` is set to 50, and the `position` is set to \"bottom\", meaning the button will stick to the bottom of the screen with a 50 pixel offset.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-sticky :offset-bottom=\"50\" position=\"bottom\">\n  <van-button type=\"primary\">Offset Bottom</van-button>\n</van-sticky>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Checkbox Group State - Vue\nDESCRIPTION: This snippet initializes the checked state for a horizontally aligned checkbox group. Here, it starts with no items selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref([]);\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Usage - Vue\nDESCRIPTION: Illustrates the basic usage of the Popover component with a light theme. It defines a Popover with a reference button and actions that trigger a toast message when selected.  The actions are defined as an array of objects with text properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" :actions=\"actions\" @select=\"onSelect\">\n  <template #reference>\n    <van-button type=\"primary\">浅色风格</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Custom Preview Style - CSS\nDESCRIPTION: Styles the preview cover element, positioning it at the bottom of the preview image with a semi-transparent background and white text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.preview-cover {\n    position: absolute;\n    bottom: 0;\n    box-sizing: border-box;\n    width: 100%;\n    padding: 4px;\n    color: #fff;\n    font-size: 12px;\n    text-align: center;\n    background: rgba(0, 0, 0, 0.3);\n  }\n```\n\n----------------------------------------\n\nTITLE: SubmitBar TypeScript Definitions\nDESCRIPTION: This code snippet demonstrates how to import TypeScript definitions for the SubmitBar component, specifically `SubmitBarProps` and `SubmitBarTextAlign`. These types can be used to provide type safety when working with the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SubmitBarProps, SubmitBarTextAlign } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Typescript Import for Vant Tabbar Props\nDESCRIPTION: This code snippet shows how to import the type definitions for the `TabbarProps` and `TabbarItemProps` from the 'vant' library. This allows for type checking when using these components in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TabbarProps, TabbarItemProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for npm publishing\nDESCRIPTION: This snippet demonstrates the required configuration within `package.json` when publishing Vant components to npm. It specifies the main entry point, module entry point, and the files to include in the published package, ensuring correct module resolution and distribution.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/commands.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"main\": \"lib/index.js\",\n  \"module\": \"es/index.js\",\n  \"files\": [\"es\", \"lib\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/compat using npm\nDESCRIPTION: Installs the @vant/compat package using npm. This command adds the package to your project's dependencies, allowing you to use the Vant 3 compatible components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-compat/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @vant/compat\n```\n\n----------------------------------------\n\nTITLE: Vant Sidebar with Disabled Item in HTML\nDESCRIPTION: This HTML snippet showcases how to disable a Vant Sidebar item using the `disabled` attribute on the `van-sidebar-item` component.  A disabled item is visually distinct and cannot be selected by the user.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\">\n  <van-sidebar-item title=\"Title\" />\n  <van-sidebar-item title=\"Title\" disabled />\n  <van-sidebar-item title=\"Title\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Standalone Vant Badge Usage - HTML\nDESCRIPTION: Demonstrates usage of the Vant Badge component without a child element, rendering it as a standalone badge.  A maximum value is also set.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"20\" />\n\n<van-badge :content=\"200\" max=\"99\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Lazyload Usage - HTML\nDESCRIPTION: This snippet illustrates the basic usage of the `v-lazy` directive to lazy load images within an HTML template. It shows how to bind the `v-lazy` directive to an image source from a data list.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img v-for=\"img in imageList\" v-lazy=\"img\" />\n```\n\n----------------------------------------\n\nTITLE: Long Text Content for Collapse Position - Vue\nDESCRIPTION: Defines the text content for the collapse position customization example.  This ensures enough text is provided to demonstrate the effect of the `position` prop. The same long string is reused across examples to keep the code consistent.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      \"That day, I turned twenty-one. In the golden age of my life, I was full of dreams. I wanted to love, to eat, and to instantly transform into one of these clouds, part alight, part darkened. It was only later that I understood life is but a slow, drawn-out process of getting your balls crushed. Day by day, you get older. Day by day, your dreams fade. In the end you are no different from a crushed ox. But I hadn't foreseen any of it on my twenty-first birthday. I thought I would be vigorous forever, and that nothing could ever crush me.\";\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Async Cascader Template\nDESCRIPTION: This HTML template sets up the structure for the Async Cascader example.  The `van-cascader` is placed within a `van-popup`, and the `@change` handler invokes the `onChange` method (defined in the JS section) to load options asynchronously.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"fieldValue\"\n  is-link\n  readonly\n  label=\"Area\"\n  placeholder=\"Select Area\"\n  @click=\"show = true\"\n/>\n<van-popup v-model=\"show\" round position=\"bottom\">\n  <van-cascader\n    v-model=\"cascaderValue\"\n    title=\"Select Area\"\n    :options=\"options\"\n    @close=\"show = false\"\n    @change=\"onChange\"\n    @finish=\"onFinish\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Automate Changelog Generation via GitHub Actions\nDESCRIPTION: This code snippet describes a chore involving automating the generation of changelogs using GitHub Actions. It was contributed by @chenjiahan in pull request #12135. This automates the process of creating and maintaining the changelog, reducing manual effort and ensuring consistency.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nchore(CI): 通过 GitHub 自动生成变更日志 by [@chenjiahan](https://github.com/chenjiahan) in [#12135](https://github.com/youzan/vant/pull/12135)\n```\n\n----------------------------------------\n\nTITLE: Dialog API adjustment - Vant 3 vs Vant 4\nDESCRIPTION: Demonstrates the change in Dialog API between Vant 3 and Vant 4, showing function calls and component object access.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nDialog(); // function call\nDialog.Component; // Component object\n\n// Vant 4\nshowDialog(); // function call\nDialog; // component object\n```\n\n----------------------------------------\n\nTITLE: Basic Variables List - LESS\nDESCRIPTION: This LESS code block lists the basic CSS variables used in Vant. These variables define the color palette, gradient colors, component colors, padding, font sizes, animation durations, and border styles.  They provide a foundation for the overall theme and styling of the components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_14\n\nLANGUAGE: less\nCODE:\n```\n// Color Palette\n--van-black: #000;\n--van-white: #fff;\n--van-gray-1: #f7f8fa;\n--van-gray-2: #f2f3f5;\n--van-gray-3: #ebedf0;\n--van-gray-4: #dcdee0;\n--van-gray-5: #c8c9cc;\n--van-gray-6: #969799;\n--van-gray-7: #646566;\n--van-gray-8: #323233;\n--van-red: #ee0a24;\n--van-blue: #1989fa;\n--van-orange: #ff976a;\n--van-orange-dark: #ed6a0c;\n--van-orange-light: #fffbe8;\n--van-green: #07c160;\n\n// Gradient Colors\n--van-gradient-red: linear-gradient(to right, #ff6034, #ee0a24);\n--van-gradient-orange: linear-gradient(to right, #ffd01e, #ff8917);\n\n// Component Colors\n--van-primary-color: var(--van-blue);\n--van-success-color: var(--van-green);\n--van-danger-color: var(--van-red);\n--van-warning-color: var(--van-orange);\n--van-text-color: var(--van-gray-8);\n--van-text-color-2: var(--van-gray-6);\n--van-text-color-3: var(--van-gray-5);\n--van-active-color: var(--van-gray-2);\n--van-active-opacity: 0.6;\n--van-disabled-opacity: 0.5;\n--van-background: var(--van-gray-1);\n--van-background-2: var(--van-white);\n\n// Padding\n--van-padding-base: 4px;\n--van-padding-xs: 8px;\n--van-padding-sm: 12px;\n--van-padding-md: 16px;\n--van-padding-lg: 24px;\n--van-padding-xl: 32px;\n\n// Font\n--van-font-size-xs: 10px;\n--van-font-size-sm: 12px;\n--van-font-size-md: 14px;\n--van-font-size-lg: 16px;\n--van-font-bold: 600;\n--van-line-height-xs: 14px;\n--van-line-height-sm: 18px;\n--van-line-height-md: 20px;\n--van-line-height-lg: 22px;\n--van-base-font: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', Helvetica,\n  Segoe UI, Arial, Roboto, 'PingFang SC', 'miui', 'Hiragino Sans GB', 'Microsoft Yahei',\n  sans-serif;\n--van-price-font: Avenir-Heavy, PingFang SC, Helvetica Neue, Arial, sans-serif;\n\n// Animation\n--van-duration-base: 0.3s;\n--van-duration-fast: 0.2s;\n--van-ease-out: ease-out;\n--van-ease-in: ease-in;\n\n// Border\n--van-border-color: var(--van-gray-3);\n--van-border-width: 1px;\n--van-radius-sm: 2px;\n--van-radius-md: 4px;\n--van-radius-lg: 8px;\n--van-radius-max: 999px;\n```\n\n----------------------------------------\n\nTITLE: Toast API Method Mapping - Vant 3 vs Vant 4\nDESCRIPTION: Presents the mapping between old and new Toast API methods in Vant 3 and Vant 4 for easier migration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nToast(); // -> showToast()\nToast.fail(); // -> showFailToast()\nToast.success(); // -> showSuccessToast()\nToast.loading(); // -> showLoadingToast()\nToast.clear(); // -> closeToast()\nToast.setDefaultOptions(); // -> setToastDefaultOptions()\nToast.resetDefaultOptions(); // -> resetToastDefaultOptions()\n```\n\n----------------------------------------\n\nTITLE: Installing auto import plugins via Yarn\nDESCRIPTION: These commands install the necessary packages for automatic component and style importing with Vant using `unplugin-vue-components` and `@vant/auto-import-resolver`. Requires Yarn to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# with yarn\nyarn add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n```\n\n----------------------------------------\n\nTITLE: Implementing toggleAll method\nDESCRIPTION: This Javascript snippet demonstrates how to implement the `openAll` and `toggleAll` methods using a reference to the `van-collapse` component.  It uses Vue's `ref` to get the Collapse instance and call `toggleAll` method\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeNames = ref(['1']);\n    const collapse = ref(null);\n\n    const openAll = () => {\n      collapse.value.toggleAll(true);\n    }\n    const toggleAll = () => {\n      collapse.value.toggleAll();\n    },\n\n    return {\n      activeNames,\n      openAll,\n      toggleAll,\n      collapse,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/touch-emulator\nDESCRIPTION: Command to install the `@vant/touch-emulator` package using npm. This package is used to adapt Vant components for use in PC browsers by simulating touch events from mouse events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Install\nnpm i @vant/touch-emulator -S\n```\n\n----------------------------------------\n\nTITLE: Badge with Custom Position\nDESCRIPTION: This snippet demonstrates how to use the `position` property to change the badge's position relative to its parent element. Options include top-left, bottom-left, and bottom-right.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"10\" position=\"top-left\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\" position=\"bottom-left\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\" position=\"bottom-right\">\n  <div class=\"child\" />\n</van-badge>\n```\n\n----------------------------------------\n\nTITLE: Stepper with Decimal Length - HTML\nDESCRIPTION: An example showing how to set the decimal length using the `decimal-length` and `step` props. The stepper value will be restricted to the specified number of decimal places.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" step=\"0.2\" :decimal-length=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Empty Component with Custom Image Size\nDESCRIPTION: Illustrates how to customize the size of the image in the Empty component. The `image-size` prop can accept a number (in pixels), a string with a unit (rem, vh, vw), or an array specifying width and height. It overrides the default image size, enabling responsive or specific sizing needs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 不指定单位，默认为 px -->\n<van-empty image-size=\"100\" description=\"描述文字\" />\n<!-- 指定单位，支持 rem, vh, vw -->\n<van-empty image-size=\"10rem\" description=\"描述文字\" />\n```\n\n----------------------------------------\n\nTITLE: ImagePreview Compatibility with @vant/compat - JavaScript\nDESCRIPTION: This code snippet shows how to use the `ImagePreview` object from `@vant/compat` to ensure compatibility with the Vant 3 `ImagePreview` API. It allows existing code to work in Vant 4 by simply changing the import path, as the API and behavior are identical to Vant 3.  The code demonstrates importing the `ImagePreview` component and calling the function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImagePreview } from '@vant/compat';\n\nImagePreview();\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/compat using Bun\nDESCRIPTION: Installs the @vant/compat package using Bun. This command adds the package to your project's dependencies, allowing you to use the Vant 3 compatible components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-compat/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add @vant/compat\n```\n\n----------------------------------------\n\nTITLE: Calculate rendered progress bar width - JavaScript\nDESCRIPTION: Demonstrates how to calculate the rendered progress bar width in pixels based on the `strokeWidth`, `circleWidth`, and `viewBox`. This example provides the conversion formula from `stroke-width` to px.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// SVG 的 viewBox 大小\nconst viewBox = 1000 + strokeWidth;\n\n// Circle 组件的宽度，默认为 100px\nconst circleWidth = 100;\n\n// 最终渲染出来的进度条宽度（px）\nconst pxWidth = (strokeWidth * circleWidth) / viewBox;\n```\n\n----------------------------------------\n\nTITLE: Initializing Watermark Component with Vue\nDESCRIPTION: Registers the Watermark component globally in a Vue application using createApp and app.use.  It imports the necessary modules from the 'vue' and 'vant' libraries, and attaches the Watermark component for use in the application.  Requires Vue 3 and Vant UI library installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Watermark } from 'vant';\n\nconst app = createApp();\napp.use(Watermark);\n```\n\n----------------------------------------\n\nTITLE: Initializing NoticeBar with Vue\nDESCRIPTION: This code snippet demonstrates how to install and register the Vant NoticeBar component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and uses the `app.use()` method to register the NoticeBar component for global access.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { NoticeBar } from 'vant';\n\nconst app = createApp();\napp.use(NoticeBar);\n```\n\n----------------------------------------\n\nTITLE: Checkbox Icon Data Properties - Vue.js\nDESCRIPTION: This snippet defines the data properties used in the previous example, including `checked`, `activeIcon`, and `inactiveIcon`. These properties determine the state and appearance of the custom Checkbox icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      checked: true,\n      activeIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png',\n      inactiveIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-inactive.png',\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Date Range with PickerGroup in Vue HTML\nDESCRIPTION: This code demonstrates using PickerGroup to select a date range using two DatePicker components.  Tabs are set to 'Start Date' and 'End Date'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"Title\"\n  :tabs=\"['Start Date', 'End Date']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"startDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-date-picker\n    v-model=\"endDate\"\n    :min-date=\"endMinDate\"\n    :max-date=\"maxDate\"\n  />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Icons with Different Types - HTML\nDESCRIPTION: This HTML snippet demonstrates how to display two different types of Vant loading icons: the default 'circular' type and the 'spinner' type.  The `van-loading` tag is used to render the loading indicator.  The `type` attribute is used to change the style of the loading icon. The default type is circular if none is specified.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-loading />\n\n<van-loading type=\"spinner\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Quick Select - HTML\nDESCRIPTION: Shows how to enable quick selection by hiding the confirm button in the Vant Calendar component. Setting `show-confirm` to `false` will trigger the `confirm` event immediately after a date is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" :show-confirm=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Setup - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to define the reactive 'checked' variable using Vue's Composition API. The `ref` function from 'vue' is used to create a reactive reference to the initial value '1'. This value is then returned within the setup function for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref('1');\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Import Field Types from Vant - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import various type definitions related to the Vant Field component in TypeScript. These types are useful for defining props, rules, instances, and other configurations related to the Field component. It is assumed that the 'vant' library is installed as a dependency in the project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  FieldType,\n  FieldRule,\n  FieldProps,\n  FieldInstance,\n  FieldTextAlign,\n  FieldRuleMessage,\n  FieldClearTrigger,\n  FieldFormatTrigger,\n  FieldRuleValidator,\n  FieldRuleFormatter,\n  FieldValidateError,\n  FieldAutosizeConfig,\n  FieldValidateTrigger,\n  FieldValidationStatus,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Setting z-index in Vant Overlay (HTML)\nDESCRIPTION: This example shows how to set the z-index of the Vant Overlay component using the `z-index` property. This allows controlling the stacking order of the overlay relative to other elements on the page. Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-overlay z-index=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring exclude Option (AutoImport)\nDESCRIPTION: The `exclude` option allows specifying APIs that should not be automatically imported. This option takes an array of API names. This example shows excluding the 'showToast' API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nAutoImport({\n  resolvers: [\n    VantResolver({\n      exclude: ['showToast'],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Dialog API mapping Vant 3 to Vant 4\nDESCRIPTION: Lists the mapping of the old Dialog API in Vant 3 to the new API in Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nDialog(); // -> showDialog()\nDialog.alert(); // -> showDialog()\nDialog.confirm(); // -> showConfirmDialog()\nDialog.close(); // -> closeDialog();\nDialog.setDefaultOptions(); // -> setDialogDefaultOptions()\nDialog.resetDefaultOptions(); // -> resetDialogDefaultOptions()\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Color in Vant Action Bar (HTML)\nDESCRIPTION: This HTML code shows how to customize the color of the buttons within the Vant Action Bar. The `color` prop is used to set a custom background color for each button.  The first button is set to \"#be99ff\", and the second is set to \"#7232dd\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"Icon1\" />\n  <van-action-bar-icon icon=\"shop-o\" text=\"Icon2\" />\n  <van-action-bar-button color=\"#be99ff\" type=\"warning\" text=\"Button\" />\n  <van-action-bar-button color=\"#7232dd\" type=\"danger\" text=\"Button\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar Position - HTML\nDESCRIPTION: Shows how to customize the position of the Vant Calendar component when displayed as a popup. The `position` prop can be set to `top`, `left`, or `right` to change the popup's location.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" :round=\"false\" position=\"right\" />\n```\n\n----------------------------------------\n\nTITLE: Dashed Divider in Vant\nDESCRIPTION: This snippet shows how to create a dashed divider using the `dashed` prop in the Vant Divider component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-divider dashed>Text</van-divider>\n```\n\n----------------------------------------\n\nTITLE: Vertical Scrolling NoticeBar\nDESCRIPTION: This HTML snippet implements a vertically scrolling NoticeBar using the Vant Swipe component. It configures the Swipe component with vertical scrolling, autoplay, and other properties to create a looping vertical carousel of messages.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar left-icon=\"volume-o\" :scrollable=\"false\">\n  <van-swipe\n    vertical\n    class=\"notice-swipe\"\n    :autoplay=\"3000\"\n    :touchable=\"false\"\n    :show-indicators=\"false\"\n  >\n    <van-swipe-item>Content 1</van-swipe-item>\n    <van-swipe-item>Content 2</van-swipe-item>\n    <van-swipe-item>Content 3</van-swipe-item>\n  </van-swipe>\n</van-notice-bar>\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Simulation on an Element\nDESCRIPTION: Disables touch simulation for a specific HTML element and its children by adding the `data-no-touch-simulate` attribute. This allows selectively preventing touch event simulation on elements.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-touch-emulator/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-no-touch-simulate />\n```\n\n----------------------------------------\n\nTITLE: Basic usage of DemoButton component\nDESCRIPTION: This code snippet shows how to use the DemoButton component in a Vue template with the `type` prop set to `primary`. This renders a DemoButton with primary styling.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/create-vant-cli-app/generators/vue3/src/demo-button/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<demo-button type=\"primary\" />\n```\n\n----------------------------------------\n\nTITLE: Cell with Custom Title and Right Icon Slots\nDESCRIPTION: This code demonstrates using slots to customize the content of the `van-cell` component. The `#title` slot is used to add a custom title with a `van-tag`. The `#right-icon` slot is used to replace the default right icon with a `van-icon` for a search icon.  CSS is used for styling.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-cell value=\"内容\" is-link>\n  <!-- 使用 title 插槽来自定义标题 -->\n  <template #title>\n    <span class=\"custom-title\">单元格</span>\n    <van-tag type=\"primary\">标签</van-tag>\n  </template>\n</van-cell>\n\n<van-cell title=\"单元格\" icon=\"shop-o\">\n  <!-- 使用 right-icon 插槽来自定义右侧图标 -->\n  <template #right-icon>\n    <van-icon name=\"search\" class=\"search-icon\" />\n  </template>\n</van-cell>\n\n<style>\n  .custom-title {\n    margin-right: 4px;\n    vertical-align: middle;\n  }\n\n  .search-icon {\n    font-size: 16px;\n    line-height: inherit;\n  }\n</style>\n```\n\nLANGUAGE: css\nCODE:\n```\n  .custom-title {\n    margin-right: 4px;\n    vertical-align: middle;\n  }\n\n  .search-icon {\n    font-size: 16px;\n    line-height: inherit;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Current Page Ref in Vue Component\nDESCRIPTION: This JavaScript snippet demonstrates how to define a reactive `currentPage` variable using Vue's `ref` function. This variable is then returned from the `setup` function, making it available in the template for two-way binding with the `van-pagination` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentPage = ref(1);\n    return { currentPage };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Buttons with Slots in HTML (Vue Template)\nDESCRIPTION: This HTML snippet demonstrates how to customize the text of the previous and next buttons in the Vant Pagination component using slots. It also shows how to customize the page number text.  The van-icon component is used to display arrow icons for the previous and next buttons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-pagination v-model=\"currentPage\" :total-items=\"50\" :show-page-size=\"5\">\n  <template #prev-text>\n    <van-icon name=\"arrow-left\" />\n  </template>\n  <template #next-text>\n    <van-icon name=\"arrow\" />\n  </template>\n  <template #page=\"{ text }\">{{ text }}</template>\n</van-pagination>\n```\n\n----------------------------------------\n\nTITLE: Horizontal RadioGroup - HTML\nDESCRIPTION: This HTML snippet displays a RadioGroup with a horizontal layout. The direction prop is set to \"horizontal\" to achieve this.  This makes the radio buttons appear side-by-side.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\" direction=\"horizontal\">\n  <van-radio name=\"1\">Radio 1</van-radio>\n  <van-radio name=\"2\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Feedback on iOS\nDESCRIPTION: Explains how to enable click feedback (the `:active` pseudo-class) on iOS Safari for Vant components. This is achieved by adding an empty `ontouchstart` attribute to the `body` tag. This workaround is necessary because iOS Safari disables the `:active` pseudo-class by default. Consult stackoverflow for more details.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/faq.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body ontouchstart=\"\">\n  ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Badge Usage - HTML\nDESCRIPTION: Demonstrates basic usage of the Vant Badge component with different content values and a dot indicator. It sets the content prop to display numeric values and the 'Hot' text, and uses the dot prop to display a simple dot badge. The example includes basic styling for the 'child' element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"5\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge content=\"Hot\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge dot>\n  <div class=\"child\" />\n</van-badge>\n```\n\nLANGUAGE: css\nCODE:\n```\n.child {\n    width: 40px;\n    height: 40px;\n    background: #f2f3f5;\n    border-radius: 4px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Single Call with useRaf in JavaScript\nDESCRIPTION: Demonstrates how to use the `useRaf` hook to execute a function once before the next browser repaint. The `useRaf` function takes a callback as its argument, which will be executed once.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-raf.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRaf } from '@vant/use';\n\nexport default {\n  setup() {\n    let count = 0;\n    useRaf(() => {\n      console.log(++count); // It will only be executed once.\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant 3 Dialog API\nDESCRIPTION: Shows the previous Vant 3 Dialog API with the Dialog() function for calling the global popup component, and Dialog.Component pointing to the Dialog component object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nDialog(); // 函数调用\nDialog.Component; // 组件对象\n```\n\n----------------------------------------\n\nTITLE: Creating a Round Vant Image in HTML\nDESCRIPTION: This HTML code demonstrates how to create a circular image using the Vant Image component. By setting the 'round' attribute, the image will be displayed with rounded corners, effectively creating a circle.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  round\n  width=\"10rem\"\n  height=\"10rem\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Long Text Content for Row Customization - Vue\nDESCRIPTION: Defines a longer text string to demonstrate the row customization feature of the TextEllipsis component.  This code snippet ensures that multiple rows of text are displayed or truncated based on the 'rows' prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      \"That day, I turned twenty-one. In the golden age of my life, I was full of dreams. I wanted to love, to eat, and to instantly transform into one of these clouds, part alight, part darkened. It was only later that I understood life is but a slow, drawn-out process of getting your balls crushed. Day by day, you get older. Day by day, your dreams fade. In the end you are no different from a crushed ox. But I hadn't foreseen any of it on my twenty-first birthday. I thought I would be vigorous forever, and that nothing could ever crush me.\";\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic DatePicker Data - JavaScript\nDESCRIPTION: This JavaScript code defines the data and setup required for the basic DatePicker example. It uses `ref` to create a reactive variable for the selected date (`currentDate`) and defines `minDate` and `maxDate` as `Date` objects to specify the selectable range. The function returns these variables to be used in the Vue template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01', '01']);\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Single useRaf Call in Vue Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the useRaf hook to execute a function once before the next browser repaint. It imports the useRaf hook, defines a counter variable, and calls useRaf with a callback function that increments and logs the counter.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-raf.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRaf } from '@vant/use';\n\nexport default {\n  setup() {\n    let count = 0;\n    useRaf(() => {\n      console.log(++count); // 只会执行 1 次\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Empty Component with Custom Image URL\nDESCRIPTION: Shows how to use a custom image URL in the Empty component.  The `image` prop is set to a URL pointing to a custom image.  The `image-size` prop is also used to control the size of the custom image.  This provides flexibility in using any image as a placeholder.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-empty\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/custom-empty-image.png\"\n  image-size=\"80\"\n  description=\"描述文字\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Divider Component in Vue\nDESCRIPTION: This JavaScript code snippet demonstrates how to globally register the Vant Divider component within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and then registers the Divider component using the `app.use()` method. This allows the component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Divider } from 'vant';\n\nconst app = createApp();\napp.use(Divider);\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive data for custom DropdownItem - Vue\nDESCRIPTION: This code defines the reactive data and methods needed for the custom DropdownItem example. It uses `ref` to create reactive variables for the menu and item refs, the selected value, switch states, and options. The `onConfirm` function toggles the visibility of the dropdown when the confirm button is clicked. Dependencies: Vue Composition API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const menuRef = ref(null);\n    const itemRef = ref(null);\n    const value = ref(0);\n    const switch1 = ref(false);\n    const switch2 = ref(false);\n    const options = [\n      { text: '全部商品', value: 0 },\n      { text: '新款商品', value: 1 },\n      { text: '活动商品', value: 2 },\n    ];\n    const onConfirm = () => {\n      itemRef.value.toggle();\n      // 或者\n      // menuRef.value.close();\n    };\n\n    return {\n      menuRef,\n      itemRef,\n      value,\n      switch1,\n      switch2,\n      options,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Max Range - HTML\nDESCRIPTION: Sets the maximum selectable range for the Vant Calendar component when the type is `range`. Limits the selection by a number of days, and will trigger an error if the user selects outside of the range.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar type=\"range\" :max-range=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Square Grid Items - HTML\nDESCRIPTION: Shows how to make grid items square using the `square` property.  This ensures that the height of each grid item matches its width.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-grid square>\n  <van-grid-item v-for=\"value in 8\" :key=\"value\" icon=\"photo-o\" text=\"文字\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Container Ref Setup with Vue Setup Function\nDESCRIPTION: This JavaScript snippet sets up the `container` ref, which is used to specify the container for the sticky component.  It utilizes the Vue `setup` function and `ref` to create a reactive reference to the container element. This allows the sticky component to be bound to a specific container.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const container = ref(null);\n    return { container };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Embedded Content Styling - CSS\nDESCRIPTION: Styles the content embedded within the Vant Overlay component.  The `.wrapper` class uses flexbox to center its content both horizontally and vertically.  The `.block` class defines a white square.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  }\n\n  .block {\n    width: 120px;\n    height: 120px;\n    background-color: #fff;\n  }\n```\n\n----------------------------------------\n\nTITLE: Round Popup - HTML\nDESCRIPTION: Demonstrates how to create a popup with rounded corners using the `round` prop. Examples are provided for both centered and bottom-positioned popups.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- 圆角弹窗（居中） -->\n<van-popup v-model:show=\"showCenter\" round :style=\"{ padding: '64px' }\" />\n\n<!-- 圆角弹窗（底部） -->\n<van-popup\n  v-model:show=\"showBottom\"\n  round\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vant 4 Toast API\nDESCRIPTION: Shows the new Vant 4 Toast API with the showToast() function for calling the global Toast component, and Toast now points to the Toast component object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 4\nshowToast(); // 函数调用\nToast; // 组件对象\n```\n\n----------------------------------------\n\nTITLE: Vant Badge with Max Value - HTML\nDESCRIPTION: Shows how to use the max prop to limit the displayed value of the badge. If the content exceeds the max value, the badge will display '{max}+'. The example demonstrates different max values and content values.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"20\" max=\"9\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"50\" max=\"20\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"200\" max=\"99\">\n  <div class=\"child\" />\n</van-badge>\n```\n\n----------------------------------------\n\nTITLE: Initializing BackTop Component - JavaScript\nDESCRIPTION: Registers the BackTop component globally in a Vue application. It imports necessary modules from 'vue' and 'vant' and then uses them to create and configure the application instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { BackTop } from 'vant';\n\nconst app = createApp();\napp.use(BackTop);\n```\n\n----------------------------------------\n\nTITLE: Update package.json release script\nDESCRIPTION: Updates the release script in package.json, replacing `gh-pages` call with `npx gh-pages` to avoid requiring global installation of `gh-pages`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/changelog.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- \"release:site\": \"pnpm build:site && gh-pages -d site-dist\",\n+ \"release:site\": \"pnpm build:site && npx gh-pages -d site-dist\",\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar Inline - HTML\nDESCRIPTION: Displays the Vant Calendar component directly within the page content, rather than as a popup. This is achieved by setting the `poppable` prop to `false`, and customizing the style.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar\n  title=\"日历\"\n  :poppable=\"false\"\n  :show-confirm=\"false\"\n  :style=\"{ height: '500px' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: useClickAway Type Declarations\nDESCRIPTION: TypeScript type declarations for the useClickAway hook, defining the Options type and the function signature for the hook. It shows the allowed types for the target, listener, and options parameters.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  eventName?: string;\n};\n\nfunction useClickAway(\n  target:\n    | Element\n    | Ref<Element | undefined>\n    | Array<Element | Ref<Element | undefined>>,\n  listener: EventListener,\n  options?: Options,\n): void;\n```\n\n----------------------------------------\n\nTITLE: SwipeCell Type Definitions (TypeScript)\nDESCRIPTION: Imports type definitions for the SwipeCell component from the 'vant' library. These types are used to define the props, positions, and instance types for the SwipeCell component, ensuring type safety in TypeScript projects. Allows access to SwipeCell specific types such as `SwipeCellInstance`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  SwipeCellSide,\n  SwipeCellProps,\n  SwipeCellPosition,\n  SwipeCellInstance,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Renaming GoodsAction Component - HTML\nDESCRIPTION: This snippet demonstrates how to rename the GoodsAction component from Vant 2 to ActionBar in Vant 3. It shows the old and new syntax for the component usage within a template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-goods-action>\n  <van-goods-action-icon text=\"图标\" />\n  <van-goods-action-button text=\"按钮\" />\n</van-goods-action>\n\n<!-- Vant 3 -->\n<van-action-bar>\n  <van-action-bar-icon text=\"图标\" />\n  <van-action-bar-button text=\"按钮\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Ellipsis with Vant\nDESCRIPTION: This snippet demonstrates how to apply text ellipsis to a container using Vant's pre-defined CSS classes. The `van-ellipsis` class truncates text to a single line, while `van-multi-ellipsis--l2` and `van-multi-ellipsis--l3` limit text to two and three lines, respectively. No dependencies are required beyond the Vant CSS library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"van-ellipsis\">\n  This is a paragraph that displays up to one line of text, and the rest of the\n  text will be omitted.\n</div>\n\n<div class=\"van-multi-ellipsis--l2\">\n  This is a paragraph that displays up to two lines of text, and the rest of the\n  text will be omitted.\n</div>\n\n<div class=\"van-multi-ellipsis--l3\">\n  This is a paragraph that displays up to three lines of text, and the rest of the\n  text will be omitted.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing DemoButton Component in Vue.js\nDESCRIPTION: This code snippet demonstrates how to import the DemoButton component and register it for use in a Vue.js application. It imports Vue, the DemoButton component, and then registers the component using Vue.use().\nSOURCE: https://github.com/youzan/vant/blob/main/packages/create-vant-cli-app/generators/vue2/src/demo-button/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport { DemoButton } from '<%= name %>';\n\nVue.use(DemoButton);\n```\n\n----------------------------------------\n\nTITLE: Expand Direction Configuration - HTML\nDESCRIPTION: Illustrates using the `direction` prop to change the expansion direction of the DropdownMenu.  In this example, the direction is set to `up`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu direction=\"up\">\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Importing Form Types from Vant (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the FormProps and FormInstance types from the vant library in a TypeScript project. These types can be used to define the props of a form component and to access the methods of a form instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FormProps, FormInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Cell Group Titles - HTML\nDESCRIPTION: This snippet demonstrates how to add titles to cell groups using the `title` prop on the `van-cell-group` component. This allows you to organize cells into logical sections with descriptive headings.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group title=\"Group 1\">\n  <van-cell title=\"Cell title\" value=\"Content\" />\n</van-cell-group>\n<van-cell-group title=\"Group 2\">\n  <van-cell title=\"Cell title\" value=\"Content\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Single Preview Customization - Vue\nDESCRIPTION: Implementation for single file preview customization. Includes the fileList with deletable, imageFit and beforeDelete properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/sand.jpeg',\n        deletable: true,\n        beforeDelete: () => {\n          showToast('删除前置处理');\n        },\n      },\n      {\n        url: 'https://fastly.jsdelivr.net/npm/@vant/assets/tree.jpeg',\n        imageFit: 'contain',\n      },\n    ]);\n\n    return { fileList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vant CLI commands in package.json\nDESCRIPTION: This snippet demonstrates how to define Vant CLI commands within the `scripts` section of a `package.json` file. These commands can then be executed using `npm run <command>`. It defines scripts for development, testing, linting, releasing, and building the documentation site.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/commands.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"dev\": \"vant-cli dev\",\n    \"test\": \"vant-cli test\",\n    \"lint\": \"vant-cli lint\",\n    \"release\": \"vant-cli release\",\n    \"build-site\": \"vant-cli build-site\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BackTop Type Definition - TypeScript\nDESCRIPTION: Imports the type definitions for the BackTop component from the 'vant' library, including props and theme variables. These definitions can be used for type checking and autocompletion in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BackTopProps, BackTopThemeVars } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Overall Time Range - HTML\nDESCRIPTION: This code snippet demonstrates how to restrict the entire time range with the `min-time` and `max-time` properties. The TimePicker allows selection from 09:40:10 to 20:20:50 when these props are configured.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"选择时间\"\n  :columns-type=\"['hour', 'minute', 'second']\"\n  min-time=\"09:40:10\"\n  max-time=\"20:20:50\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Clearing Floats with Vant\nDESCRIPTION: This snippet demonstrates how to clear floated content within a container using Vant's CSS class `van-clearfix`. Applying this class to a container ensures that it properly contains any floated child elements.  It depends on Vant's CSS library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"van-clearfix\"></div>\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import configuration\nDESCRIPTION: This code snippet shows how to remove the babel-plugin-import plugin configuration from babel.config.js.  This is required as Vant 4 no longer supports babel-plugin-import.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  plugins: [\n-    ['import', {\n-      libraryName: 'vant',\n-      libraryDirectory: 'es',\n-      style: true\n-    }, 'vant']\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Cell Type Definitions\nDESCRIPTION: This snippet shows the import statement for TypeScript type definitions related to the `Cell` and `CellGroup` components from the Vant library. These type definitions can be used to ensure type safety when working with the components in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CellSize,\n  CellProps,\n  CellGroupProps,\n  CellArrowDirection,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Using Signature Instance Type\nDESCRIPTION: This example shows how to use the `SignatureInstance` type. It creates a ref to hold the Signature instance and then calls the `resize` method on the instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { SignatureInstance } from 'vant';\n\nconst signatureRef = ref<SignatureInstance>();\n\nsignatureRef.value?.resize();\n```\n\n----------------------------------------\n\nTITLE: Disable Checkbox Label Click - Vue\nDESCRIPTION: This code snippet disables the default behavior of clicking the checkbox label to toggle the checkbox state by setting the `label-disabled` property to `true`. This prevents the checkbox from being toggled when clicking the label.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\" label-disabled>复选框</van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: File List with Reupload - Vue\nDESCRIPTION: Implementation to enable reupload functionality for a file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([\n      { url: 'https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg' },\n    ]);\n\n    return { fileList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant CLI Configuration Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates the structure of `vant.config.mjs`, which is used to configure both the component library build process and the documentation site. It includes settings for the library name, build options, and site appearance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // 组件库名称\n  name: 'demo-ui',\n  // 构建配置\n  build: {\n    site: {\n      publicPath: '/demo-ui/',\n    },\n  },\n  // 文档站点配置\n  site: {\n    // 标题\n    title: 'Demo UI',\n    // 图标\n    logo: 'https://fastly.jsdelivr.net/npm/@vant/assets/logo.png',\n    // 描述\n    description: '示例组件库',\n    // 左侧导航\n    nav: [\n      {\n        title: '开发指南',\n        items: [\n          {\n            path: 'home',\n            title: '介绍',\n          },\n        ],\n      },\n      {\n        title: '基础组件',\n        items: [\n          {\n            path: 'my-button',\n            title: 'MyButton 按钮',\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring importStyle Option\nDESCRIPTION: The `importStyle` option controls whether CSS styles are automatically imported for components. Setting it to `false` disables automatic style importing. This option is configured within the `VantResolver` options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  resolvers: [\n    VantResolver({\n      // 禁用样式引用\n      importStyle: false,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Col and Row Components with Vue\nDESCRIPTION: This code snippet demonstrates how to import and register the `Col` and `Row` components from the `vant` library within a Vue application.  It uses the `createApp` function from Vue to create an application instance and then registers the `Col` and `Row` components globally using the `app.use()` method.  This allows the components to be used throughout the application without needing to be imported in each individual component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Col, Row } from 'vant';\n\nconst app = createApp();\napp.use(Col);\napp.use(Row);\n```\n\n----------------------------------------\n\nTITLE: Vertical Steps Configuration\nDESCRIPTION: This code snippet demonstrates how to create a vertical step indicator using the `direction` prop. Setting `direction` to \"vertical\" arranges the steps vertically. The `active` prop determines the currently active step. The `van-step` components include `h3` and `p` tags for step content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-steps direction=\"vertical\" :active=\"0\">\n  <van-step>\n    <h3>【城市】物流状态1</h3>\n    <p>2016-07-12 12:40</p>\n  </van-step>\n  <van-step>\n    <h3>【城市】物流状态2</h3>\n    <p>2016-07-11 10:00</p>\n  </van-step>\n  <van-step>\n    <h3>快件已发货</h3>\n    <p>2016-07-10 09:30</p>\n  </van-step>\n</van-steps>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling Vant Steps Component\nDESCRIPTION: Shows how to customize the appearance of the van-steps component using props like active-icon and active-color.  This allows changing the icon and color of the active step.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-steps :active=\"active\" active-icon=\"success\" active-color=\"#07c160\">\n  <van-step>Step1</van-step>\n  <van-step>Step2</van-step>\n  <van-step>Step3</van-step>\n  <van-step>Step4</van-step>\n</van-steps>\n```\n\n----------------------------------------\n\nTITLE: Changing Button Shape in Vant\nDESCRIPTION: This HTML snippet shows how to change the shape of buttons to square or round using the `square` and `round` props respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-button square type=\"primary\">Square</van-button>\n<van-button round type=\"success\">Round</van-button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Badge Component - JavaScript\nDESCRIPTION: Registers the Vant Badge component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then registers the Badge component for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Badge } from 'vant';\n\nconst app = createApp();\napp.use(Badge);\n```\n\n----------------------------------------\n\nTITLE: Highlight Component Type Definitions - TypeScript\nDESCRIPTION: Imports the type definitions for the Highlight component and its theme variables from the 'vant' library. This allows you to use TypeScript to ensure correct usage of the component's props and CSS variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HighlightProps, HighlightThemeVars } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Import ConfigProvider Types - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import type definitions related to the Vant ConfigProvider component, including ConfigProviderProps, ConfigProviderTheme, ConfigProviderThemeVars, and ConfigProviderThemeVarsScope. These types are essential for type-safe usage of the ConfigProvider and its properties in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ConfigProviderProps,\n  ConfigProviderTheme,\n  ConfigProviderThemeVars,\n  ConfigProviderThemeVarsScope,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Disabled\nDESCRIPTION: This HTML snippet demonstrates how to disable the Vant Rate component using the `disabled` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Repeated useRaf Call with Cancellation (JavaScript)\nDESCRIPTION: This snippet shows how to use the useRaf hook to repeatedly execute a function at a specified interval. It imports the useRaf hook, defines a counter variable, and calls useRaf with a callback function and options to enable looping and set the interval.  It includes logic to cancel the repeated calls after a certain condition is met.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-raf.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRaf } from '@vant/use';\n\nexport default {\n  setup() {\n    let count = 0;\n    const cancelRaf = useRaf(\n      () => {\n        console.log(++count); // 无限执行，直到被 cancel\n\n        if (count === 5) {\n          cancelRaf();\n        }\n      },\n      {\n        isLoop: true, // 开启循环\n        interval: 100, // 设置调用间隔\n      },\n    );\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Vant Language Pack with Locale.add\nDESCRIPTION: This snippet shows how to modify or extend the default language pack in Vant using the `Locale.add` method. It creates a new messages object with a modified translation for the `confirm` key in the `vanPicker` component, then adds it to the Locale.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/locale/README.zh-CN.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Locale } from 'vant';\n\nconst messages = {\n  'zh-CN': {\n    vanPicker: {\n      confirm: '关闭', // 将'确认'修改为'关闭'\n    },\n  },\n};\n\nLocale.add(messages);\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Round Style\nDESCRIPTION: Illustrates how to apply the `round` prop to create a tag with rounded corners.  This provides a visually distinct style.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tag round type=\"primary\">Tag</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Importing Toast style - Javascript\nDESCRIPTION: Explicitly imports the Toast component's styling. This may be necessary if experiencing styling issues with auto-import.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant'\nimport 'vant/lib/toast/style'\n```\n\n----------------------------------------\n\nTITLE: useClickAway Type Definition - TypeScript\nDESCRIPTION: Defines the TypeScript type definitions for the useClickAway hook and its options. It shows the structure of the Options type, which includes an optional eventName property, and the function signature of useClickAway, specifying the types of the target, listener, and options parameters.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  eventName?: string;\n};\n\nfunction useClickAway(\n  target:\n    | Element\n    | Ref<Element | undefined>\n    | Array<Element | Ref<Element | undefined>>,\n  listener: EventListener,\n  options?: Options,\n): void;\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Option Formatter - HTML\nDESCRIPTION: HTML snippet demonstrating the use of the `formatter` prop in the TimePicker component, which customizes the displayed text of the options in the picker. It is bound to a `formatter` function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-time-picker\n  v-model=\"currentTime\"\n  title=\"Choose Time\"\n  :formatter=\"formatter\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Circle Component - JavaScript\nDESCRIPTION: Globally registers the Vant Circle component for use in a Vue application.  It imports the necessary modules from 'vue' and 'vant'.  The component can then be used within the application's templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Circle } from 'vant';\n\nconst app = createApp();\napp.use(Circle);\n```\n\n----------------------------------------\n\nTITLE: Custom Collapse Position (Start) - Vue HTML\nDESCRIPTION: Shows how to customize the collapse position to start in the TextEllipsis component. The `position` prop is set to `start` so the component collapses the beginning part of the content. The `rows` prop is set to 1.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis\n  rows=\"1\"\n  :content=\"text\"\n  expand-text=\"expand\"\n  collapse-text=\"collapse\"\n  position=\"start\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Avoid Prettier Breaking HBS Templates\nDESCRIPTION: This code snippet addresses a chore to prevent Prettier from breaking Handlebars (HBS) templates. It was contributed by @chenjiahan in pull request #12113.  This improves the development workflow by ensuring that Prettier does not corrupt HBS templates during formatting.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nchore: 避免 prettier 破坏 hbs 模板 by [@chenjiahan](https://github.com/chenjiahan) in [#12113](https://github.com/youzan/vant/pull/12113)\n```\n\n----------------------------------------\n\nTITLE: Initializing AddressList Component in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the AddressList component in a Vue application. It imports the necessary modules from Vue and Vant, creates a Vue app instance, and registers the AddressList component using the app.use() method. This makes the component available for use in the application's templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { AddressList } from 'vant';\n\nconst app = createApp();\napp.use(AddressList);\n```\n\n----------------------------------------\n\nTITLE: Inset Grouped Cells - HTML\nDESCRIPTION: This snippet demonstrates how to create an inset-grouped list of cells using the `inset` prop on the `van-cell-group` component. The inset prop adds padding around the cell group, making it stand out from the surrounding content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-cell title=\"Cell title\" value=\"Content\" />\n  <van-cell title=\"Cell title\" value=\"Content\" label=\"Description\" />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Adding ContactCard Component - HTML\nDESCRIPTION: Displays a ContactCard component in 'add' mode. The `type` prop is set to \"add\", and an `@click` event handler is bound to the `onAdd` method. This snippet uses the `van-contact-card` component from the Vant UI library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-card type=\"add\" @click=\"onAdd\" />\n```\n\n----------------------------------------\n\nTITLE: Notify API adjustment - Vant 3 vs Vant 4\nDESCRIPTION: Demonstrates the change in Notify API between Vant 3 and Vant 4, transitioning from a function call to showNotify().\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nNotify(); // function call\nNotify.Component; // component object\n\n// Vant 4\nshowNotify(); // function call\nNotify; // component object\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Rem Units\nDESCRIPTION: Example configuration for PostCSS using the `postcss-pxtorem` plugin. Transforms `px` units to `rem` units for flexible font scaling. Requires PostCSS and `postcss-pxtorem` to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-pxtorem': {\n      rootValue: 37.5,\n      propList: ['*'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Calendar Type Definitions Import (TypeScript)\nDESCRIPTION: Imports type definitions related to the Vant Calendar component, including switch modes, types, props, day item structures, day types, and the CalendarInstance type. These types are essential for using the Calendar component in a type-safe manner.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CalendarSwitchMode,\n  CalendarType,\n  CalendarProps,\n  CalendarDayItem,\n  CalendarDayType,\n  CalendarInstance,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Type declaration for usePageVisibility\nDESCRIPTION: Defines the TypeScript type declarations for the `usePageVisibility` hook. It specifies the `VisibilityState` type as either 'visible' or 'hidden'. The `usePageVisibility` function is declared to return a `Ref` of `VisibilityState`, indicating that it provides a reactive reference to the current visibility state of the page.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-page-visibility.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype VisibilityState = 'visible' | 'hidden';\n\nfunction usePageVisibility(): Ref<VisibilityState>;\n```\n\n----------------------------------------\n\nTITLE: Vertical Divider in HTML\nDESCRIPTION: This HTML code demonstrates various configurations of the vertical Vant Divider component. It showcases the default vertical divider, a dashed vertical divider, a vertical divider without a hairline, and a vertical divider with a custom border color, each followed by the text \"文本\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-divider vertical />\n文本\n<van-divider vertical dashed />\n文本\n<van-divider vertical :hairline=\"false\" />\n文本\n<van-divider vertical :style=\"{ borderColor: '#1989fa' }\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Watermark Rotation\nDESCRIPTION: Customizes the rotation angle of the watermark using the `rotate` prop. This prop controls the angle at which the watermark image or text is rotated. Requires an image to be specified via the `image` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  rotate=\"22\"\n  opacity=\"0.2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom ActionSheet Panel - CSS\nDESCRIPTION: This CSS code provides styling for the custom content within the ActionSheet, specifically adding padding to the `.content` class.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  .content {\n    padding: 16px 16px 160px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabbar Basic Setup with Vue Ref\nDESCRIPTION: Sets up a reactive variable `active` using Vue's `ref` function to manage the active tab. The initial value is set to `0`, indicating the first tab is initially active. This variable is then returned from the `setup` function for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ShareSheet Type Definitions - TypeScript\nDESCRIPTION: This code snippet shows the type definitions that are exported by the `vant` library for the ShareSheet component, which include ShareSheetProps, ShareSheetOption, and ShareSheetOptions. This enables type checking and autocompletion when using the component in TypeScript projects. Dependencies: vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ShareSheetProps,\n  ShareSheetOption,\n  ShareSheetOptions,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Hiding Confirmation Button - HTML\nDESCRIPTION: Hides the confirmation button in the Vant Calendar component by setting the `show-confirm` prop to `false`. This triggers the `confirm` event immediately after a date is selected, enabling quick selection without an extra step.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" :show-confirm=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: TimePicker Instance Type Definition - TypeScript\nDESCRIPTION: This code snippet shows example usage of Typescript type definitions of TimePicker.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { TimePickerInstance } from 'vant';\n\nconst timePickerRef = ref<TimePickerInstance>();\n\ntimePickerRef.value?.confirm();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage - Highlight Component HTML - Vue\nDESCRIPTION: This code snippet demonstrates the basic usage of the Vant Highlight component in a Vue template.  It binds the `keywords` and `source-string` props to data properties in the component's setup function.  The `keywords` prop specifies the text to highlight, and the `source-string` prop provides the text to search within.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-highlight :keywords=\"keywords\" :source-string=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Handling ImagePreview Close Event - JavaScript\nDESCRIPTION: This snippet shows how to listen for the `onClose` event of the ImagePreview.  A callback function is provided to the `onClose` option, which will be executed when the ImagePreview is closed. In this example, it displays a toast message. The code depends on `vant` library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast, showImagePreview } from 'vant';\n\nshowImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  onClose() {\n    showToast('closed');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon in Vant Icon Component\nDESCRIPTION: Uses a custom icon defined with a font face in the Vant Icon component. The `class-prefix` property is used to specify the prefix for the custom icon classes.  Requires a corresponding CSS definition for the custom icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- 通过 class-prefix 指定类名为 my-icon -->\n<van-icon class-prefix=\"my-icon\" name=\"extra\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Cell Types\nDESCRIPTION: This TypeScript snippet shows how to import type definitions for the Cell and CellGroup components from the 'vant' library. This allows you to use these types in your TypeScript code for type safety and autocompletion.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CellSize,\n  CellProps,\n  CellGroupProps,\n  CellArrowDirection,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Tag Component in Vue\nDESCRIPTION: Registers the Vant Tag component globally within a Vue application. This snippet demonstrates how to import the necessary modules and use the `app.use` method to make the component available throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Tag } from 'vant';\n\nconst app = createApp();\napp.use(Tag);\n```\n\n----------------------------------------\n\nTITLE: Installing Vant via NPM\nDESCRIPTION: These commands demonstrate how to install Vant using NPM for both Vue 3 and Vue 2 projects. `npm i vant` installs the latest Vant version for Vue 3, while `npm i vant@latest-v2` installs Vant 2 for Vue 2 projects. No external dependencies are needed beyond NPM itself.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install latest Vant for Vue 3 project\nnpm i vant\n\n# install Vant 2 for Vue 2 project\nnpm i vant@latest-v2\n```\n\n----------------------------------------\n\nTITLE: CollapseItem Instance Usage - TypeScript\nDESCRIPTION: This snippet demonstrates how to access a `CollapseItemInstance` and call the `toggle` method to programmatically control the expansion state of a single collapse item.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CollapseItemInstance } from 'vant';\n\nconst collapseItemRef = ref<CollapseItemInstance>();\n\ncollapseItemRef.value?.toggle();\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Progress Component in Vue\nDESCRIPTION: Registers the Vant Progress component globally within a Vue application. It imports the necessary modules and uses `app.use` to register the component. This allows the component to be used in any part of the application without explicitly importing it in each component file. Requires Vue to be initialized.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Progress } from 'vant';\n\nconst app = createApp();\napp.use(Progress);\n```\n\n----------------------------------------\n\nTITLE: Executing Vant CLI commands with npx\nDESCRIPTION: Shows how to execute a Vant CLI command directly using npx without defining it in package.json. This can be useful for one-off executions of commands.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/commands.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx vant-cli dev\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Vant Swipe\nDESCRIPTION: This TypeScript snippet shows how to import type definitions related to the Vant Swipe component, including `SwipeProps`, `SwipeInstance`, and `SwipeToOptions`.  These types can be used to provide type safety when working with the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SwipeProps, SwipeInstance, SwipeToOptions } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Basic IndexBar Usage - HTML\nDESCRIPTION: This HTML snippet showcases the basic implementation of the Vant `IndexBar` component with `IndexAnchor` components. Each `IndexAnchor` defines a section with a specific index (e.g., \"A\", \"B\"), and `van-cell` elements are used to represent list items within each section. Clicking on an index in the index bar will scroll the view to the corresponding anchor.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-index-bar>\n  <van-index-anchor index=\"A\" />\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n\n  <van-index-anchor index=\"B\" />\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n  <van-cell title=\"文本\" />\n\n  ...\n</van-index-bar>\n```\n\n----------------------------------------\n\nTITLE: Importing EmptyProps Type from Vant\nDESCRIPTION: This snippet shows how to import the EmptyProps type definition from the Vant library. This type can be used for type checking when working with the Empty component in TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { EmptyProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting babel-plugin-import error\nDESCRIPTION: This snippet illustrates a common error encountered when using the `showImagePreview` method with the `babel-plugin-import` plugin. It shows the error message indicating that the dependencies `vant/es/show-image-preview` and `vant/es/show-image-preview/style` could not be found. This problem arises because Vant 4.0 and later versions no longer support `babel-plugin-import`. The solution involves removing this plugin, as described in the migration guide.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nThese dependencies were not found:\n\n* vant/es/show-image-preview in ./src/xxx.js\n* vant/es/show-image-preview/style in ./src/xxx.js\n```\n\n----------------------------------------\n\nTITLE: Custom Content - CSS\nDESCRIPTION: Defines the styling for the custom BackTop component content. Sets the width, font size, and text alignment for the BackTop button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.custom {\n    width: 80px;\n    font-size: 14px;\n    text-align: center;\n  }\n```\n\n----------------------------------------\n\nTITLE: Set Icon Color\nDESCRIPTION: Sets the color of the icon using the `color` prop.  This allows customizing the icon's appearance to match the application's theme.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"cart-o\" color=\"#1989fa\" />\n<van-icon name=\"fire-o\" color=\"#ee0a24\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Action Bar Component with Vue.js\nDESCRIPTION: This code snippet demonstrates how to register the ActionBar, ActionBarIcon, and ActionBarButton components globally in a Vue.js application using `app.use`. It imports the necessary components from the 'vant' library and then uses the `app.use` method to make them available throughout the application. This allows the components to be used in any template without needing to import them locally.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ActionBar, ActionBarIcon, ActionBarButton } from 'vant';\n\nconst app = createApp();\napp.use(ActionBar);\napp.use(ActionBarIcon);\napp.use(ActionBarButton);\n```\n\n----------------------------------------\n\nTITLE: Move PR Title Format to Contribution Guide\nDESCRIPTION: This code snippet describes moving the PR title format to the contribution guide. It was contributed by @chenjiahan in pull request #12114. This change aims to improve the contribution process by providing clear guidelines for PR titles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\ndocs: 将 PR 标题格式移至贡献指南，由 [@chenjiahan](https://github.com/chenjiahan) 在 [#12114](https://github.com/youzan/vant/pull/12114) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering DemoButton component in Vue\nDESCRIPTION: This code snippet demonstrates how to import the DemoButton component from the specified module and register it globally within a Vue application using Vue.use(). This allows the component to be used throughout the application without the need for local registration in each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/create-vant-cli-app/generators/vue3/src/demo-button/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport { DemoButton } from '<%= name %>';\n\nVue.use(DemoButton);\n```\n\n----------------------------------------\n\nTITLE: Basic Swipe Styling - CSS\nDESCRIPTION: Styles the van-swipe-item elements within the Swipe component. Sets the color, font size, line height, text alignment, and background color.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.my-swipe .van-swipe-item {\n  color: #fff;\n  font-size: 20px;\n  line-height: 150px;\n  text-align: center;\n  background-color: #39a9ed;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Vant Switch Component\nDESCRIPTION: This code shows how to disable the Vant Switch component using the `disabled` attribute. When the `disabled` attribute is present, the switch cannot be toggled by the user.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Importing Vant Touch Emulator in JavaScript\nDESCRIPTION: Imports the @vant/touch-emulator module in JavaScript. Importing the module automatically initializes and activates the touch emulator.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-touch-emulator/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@vant/touch-emulator';\n```\n\n----------------------------------------\n\nTITLE: Immediate Scroll - HTML\nDESCRIPTION: Enables immediate scrolling to the top of the page using the immediate property. The scrolling occurs instantly without any transition effects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-back-top immediate />\n```\n\n----------------------------------------\n\nTITLE: Selecting a Date Range with DatePickers - HTML (Vue)\nDESCRIPTION: Illustrates how to use two DatePicker components within a PickerGroup to implement a date range selection feature in a Vue.js application. The code defines the HTML structure, including tabs for the start and end dates, and event listeners for confirm and cancel events. It uses v-model to bind to `startDate` and `endDate` ref variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"预约日期\"\n  :tabs=\"['开始日期', '结束日期']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"startDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-date-picker\n    v-model=\"endDate\"\n    :min-date=\"endMinDate\"\n    :max-date=\"maxDate\"\n  />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Basic TextEllipsis Usage - Vue HTML\nDESCRIPTION: Demonstrates the basic usage of the TextEllipsis component in a Vue template. It binds the `text` data property to the `content` prop of the component.  No specific props are set, so default behavior applies (single line ellipsis).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis :content=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Cascader Usage - JavaScript\nDESCRIPTION: Sets up the reactive data and functions required for the basic Cascader example. It defines the options, handles the finish event, and updates the field value with the selected options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    const fieldValue = ref('');\n    const cascaderValue = ref('');\n    // 选项列表，children 代表子选项，支持多级嵌套\n    const options = [\n      {\n        text: '浙江省',\n        value: '330000',\n        children: [{ text: '杭州市', value: '330100' }],\n      },\n      {\n        text: '江苏省',\n        value: '320000',\n        children: [{ text: '南京市', value: '320100' }],\n      },\n    ];\n    // 全部选项选择完毕后，会触发 finish 事件\n    const onFinish = ({ selectedOptions }) => {\n      show.value = false;\n      fieldValue.value = selectedOptions.map((option) => option.text).join('/');\n    };\n\n    return {\n      show,\n      options,\n      onFinish,\n      fieldValue,\n      cascaderValue,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Controlled PickerGroup Logic in Vue\nDESCRIPTION: This JavaScript code defines the `setup` function for a Vue component that uses the PickerGroup in controlled mode. It initializes `activeTab` as a ref, defines `setActiveTab` function to toggle the active tab, and handles selection events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const activeTab = ref(0);\n    const currentDate = ref(['2022', '06', '01']);\n    const currentTime = ref(['12', '00']);\n\n    const setActiveTab = () => {\n      activeTab.value = activeTab.value ? 0 : 1;\n    };\n\n    const onConfirm = () => {\n      showToast(\n        `${currentDate.value.join('/')} ${currentTime.value.join(':')}`,\n      );\n    };\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      activeTab,\n      currentDate,\n      currentTime,\n      setActiveTab,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Global Component Registration with app.use - Vue.js\nDESCRIPTION: This code snippet demonstrates how to register a Vant component globally using the `app.use` method in a Vue.js application. After registration, the component can be used in any child component of the app using the `<van-button>` or `<VanButton>` tag.  It requires importing the specific component (e.g., `Button`) from `vant` and `createApp` from `vue`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'vant';\nimport { createApp } from 'vue';\n\nconst app = createApp();\n\n// 方式一. 通过 app.use 注册\n// 注册完成后，在模板中通过 <van-button> 或 <VanButton> 标签来使用按钮组件\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: Async Options Loading - HTML\nDESCRIPTION: HTML structure for loading cascader options asynchronously. A click on the Field triggers the Popup with the Cascader.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"fieldValue\"\n  is-link\n  readonly\n  label=\"地区\"\n  placeholder=\"请选择所在地区\"\n  @click=\"show = true\"\n/>\n<van-popup v-model:show=\"show\" round position=\"bottom\">\n  <van-cascader\n    v-model=\"cascaderValue\"\n    title=\"请选择所在地区\"\n    :options=\"options\"\n    @close=\"show = false\"\n    @change=\"onChange\"\n    @finish=\"onFinish\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Area Data Structure Example\nDESCRIPTION: This JavaScript snippet demonstrates the structure of the `areaList` data required by the Vant Area component.  It consists of three objects: `province_list`, `city_list`, and `county_list`. Each object contains key-value pairs where the key is a 6-digit area code and the value is the area name.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  province_list: {\n    110000: 'Beijing',\n    330000: 'Zhejiang Province',\n  },\n  city_list: {\n    110100: 'Beijing City',\n    330100: 'Hangzhou',\n  },\n  county_list: {\n    110101: 'Dongcheng District',\n    110102: 'Xicheng District',\n    // ....\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Typescript definitions\nDESCRIPTION: This code shows how to import the typescript definitions for Vant Actionbar Components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ActionBarProps,\n  ActionBarIconProps,\n  ActionBarButtonProps,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Text Ellipsis with Vant Classes HTML\nDESCRIPTION: Demonstrates how to use Vant's built-in CSS classes to truncate text that exceeds the container's width.  The `van-ellipsis` class limits text to a single line, while `van-multi-ellipsis--l2` and `van-multi-ellipsis--l3` limit to two and three lines respectively. No external dependencies are required, as these are built-in Vant styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 最多显示一行 -->\n<div class=\"van-ellipsis\">这是一段最多显示一行的文字，多余的内容会被省略</div>\n\n<!-- 最多显示两行 -->\n<div class=\"van-multi-ellipsis--l2\">\n  这是一段最多显示两行的文字，多余的内容会被省略\n</div>\n\n<!-- 最多显示三行 -->\n<div class=\"van-multi-ellipsis--l3\">\n  这是一段最多显示三行的文字，多余的内容会被省略\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using ConfigProvider with TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `ConfigProviderThemeVars` type to get code intellisense when defining theme variables for the `ConfigProvider` component. It imports the `ConfigProviderThemeVars` type from 'vant' and uses it to type the `themeVars` object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigProviderThemeVars } from 'vant';\n\nconst themeVars: ConfigProviderThemeVars = {\n  sliderBarHeight: '4px',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Break for Toast Message\nDESCRIPTION: This code snippet demonstrates how to control word breaking within the Toast message using the `wordBreak` option. It presents options for `break-all` and `break-word` to manage long words within the toast.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nshowToast({\n  message: 'This message will contain a incomprehensibilities long word.',\n  wordBreak: 'break-all',\n});\n\nshowToast({\n  message: 'This message will contain a incomprehensibilities long word.',\n  wordBreak: 'break-word',\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Camera Permissions (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `navigator.mediaDevices.getUserMedia` method to check if the user has granted camera permissions to the application. It requests access to the video stream and logs the stream if access is granted, or logs the error if access is denied. Note: `getUserMedia` might not work on iOS 10.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nnavigator.mediaDevices\n  .getUserMedia({ video: true })\n  .then((stream) => {\n    console.log(stream);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n----------------------------------------\n\nTITLE: Event Handler for Custom Action Button\nDESCRIPTION: This JavaScript snippet defines the `onClickButton` handler which is used with the customized action slot. The function displays the current search value within a Vant Toast. This handler is then returned from the `setup` function, making it available for the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref('');\n    const onSearch = (val) => showToast(val);\n    const onClickButton = () => showToast(value.value);\n    return {\n      value,\n      onSearch,\n      onClickButton,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Contact Card - HTML\nDESCRIPTION: Renders a ContactCard component with the type set to 'add'. This displays a card that prompts the user to add a contact. The `@click` event is bound to the `onAdd` method, which is triggered when the card is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-card type=\"add\" @click=\"onAdd\" />\n```\n\n----------------------------------------\n\nTITLE: CountDown Type Definition - TypeScript\nDESCRIPTION: This code snippet imports TypeScript type definitions related to the Vant CountDown component, including props, instance, and current time types. This allows for strongly-typed usage of the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  CountDownProps,\n  CountDownInstance,\n  CountDownCurrentTime,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Handling Date Range Selection Logic in Vue\nDESCRIPTION: This javascript defines the `setup` function for a Vue component that uses the PickerGroup with two DatePicker components for selecting a start and end date. It defines `startDate`, `endDate` as refs, and `endMinDate` as a computed property that is dependent on `startDate`. The `onConfirm` and `onCancel` functions handle selection events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { computed, ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const startDate = ref(['2022', '06', '01']);\n    const endDate = ref(['2023', '06', '01']);\n    const endMinDate = computed(\n      () =>\n        new Date(\n          Number(startDate.value[0]),\n          Number(startDate.value[1]) - 1,\n          Number(startDate.value[2]),\n        ),\n    );\n\n    const onConfirm = () => {\n      showToast(`${startDate.value.join('/')} ${endDate.value.join('/')}`);\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      endMinDate,\n      endDate,\n      startDate,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled SubmitBar - HTML\nDESCRIPTION: Shows how to disable the SubmitBar component by setting the `disabled` prop to `true`. It also sets `price`, `button-text`, `tip`, and `tip-icon` properties to configure the appearance of the disabled submit bar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-submit-bar\n  disabled\n  :price=\"3050\"\n  button-text=\"Submit\"\n  tip=\"Some tips\"\n  tip-icon=\"info-o\"\n  @submit=\"onSubmit\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar with Switch Mode - HTML\nDESCRIPTION: Displays the Vant Calendar component with a year-month switch mode enabled. This allows users to switch between years and months for date selection. The `v-model:show` directive controls the visibility of the calendar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" switch-mode=\"year-month\" />\n```\n\n----------------------------------------\n\nTITLE: Establishing Parent-Child Relationship with useChildren in Vue (JavaScript)\nDESCRIPTION: Demonstrates how to use `useChildren` from `@vant/use` in a Vue component to establish a parent-child relationship. It creates a symbolic key (`RELATION_KEY`), links child components, and provides data (count) and a method (add) to the children. The `linkChildren` function makes the data and method available to child components that use `useParent` with the same `RELATION_KEY`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-relation.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useChildren } from '@vant/use';\n\nconst RELATION_KEY = Symbol('my-relation');\n\nexport default {\n  setup() {\n    const { linkChildren } = useChildren(RELATION_KEY);\n\n    const count = ref(0);\n    const add = () => {\n      count.value++;\n    };\n\n    // 向子组件提供数据和方法\n    linkChildren({ add, count });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Start Position - HTML\nDESCRIPTION: Configures the starting position of the Vant Circle component's progress using the `start-position` property. The component demonstrates the `start-position` values `left`, `right`, and `bottom`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  text=\"左侧\"\n  start-position=\"left\"\n/>\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  text=\"右侧\"\n  start-position=\"right\"\n/>\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  text=\"底部\"\n  start-position=\"bottom\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating v-model for Form Components - HTML\nDESCRIPTION: This snippet illustrates the changes required for form components' v-model when migrating from Vant 2 to Vant 3. The value prop is renamed to model-value, and the input event is renamed to update:model-value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-field :value=\"value\" @input=\"onInput\" />\n\n<!-- Vant 3 -->\n<van-field :model-value=\"value\" @update:model-value=\"onInput\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Plain Style\nDESCRIPTION: This snippet demonstrates how to create a Vant Tag with a hollow (plain) style using the `plain` attribute. This style is useful for de-emphasizing the tag or indicating a secondary status.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-tag plain type=\"primary\">标签</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Adding lock-scroll Property to FloatingPanel\nDESCRIPTION: This code snippet describes the feature of adding the lock-scroll property to the FloatingPanel component. It was contributed by @inottn in pull request #12157.  This property allows disabling scrolling on the page behind the FloatingPanel.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nfeat(FloatingPanel): 添加 lock-scroll 属性，由 [@inottn](https://github.com/inottn) 在 [#12157](https://github.com/youzan/vant/pull/12157) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Using useWindowSize Composition API with Javascript\nDESCRIPTION: This Javascript snippet demonstrates the usage of the `useWindowSize` composable API from `@vant/use`. It imports the function, invokes it to get reactive width and height properties of the browser window, and then logs the current width and height values to the console.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/vant-use-intro.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useWindowSize } from '@vant/use';\n\nconst { width, height } = useWindowSize();\n\nconsole.log(width.value); // -> 窗口宽度\nconsole.log(height.value); // -> 窗口高度\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Navigation (JavaScript)\nDESCRIPTION: This snippet shows how to configure the left navigation of the documentation site in `vant.config.mjs`. It demonstrates the structure of the `site.nav` option, which allows you to define navigation groups and items with titles, paths, and optional `hideSimulator` flags.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  site: {\n    nav: [\n      {\n        // group title\n        title: 'Development Guide',\n        // nav items\n        items: [\n          {\n            // nav router\n            path: 'home',\n            // nav title\n            title: 'title',\n            // should hide phone emulator(false by default)\n            hideSimulator: true,\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Touch Emulator via yarn\nDESCRIPTION: Installs the @vant/touch-emulator package using yarn. This adds the emulator to the project's dependencies for touch event simulation on desktop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-touch-emulator/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @vant/touch-emulator\n```\n\n----------------------------------------\n\nTITLE: Popover with Disabled Actions Logic - Vue\nDESCRIPTION: Provides the JavaScript logic for the Popover with disabled actions. The `actions` array includes the `disabled` property for some actions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: '选项一', disabled: true },\n      { text: '选项二', disabled: true },\n      { text: '选项三' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Draggable FloatingBubble with Magnetic Effect (JavaScript)\nDESCRIPTION: Defines the `onOffsetChange` method, triggered when the FloatingBubble's position changes due to dragging. It receives the new offset as an argument and displays a toast message showing the X and Y coordinates of the bubble's position. It imports the `showToast` function from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onOffsetChange = (offset) => {\n      showToast(`x: ${offset.x.toFixed(0)}, y: ${offset.y.toFixed(0)}`);\n    };\n    return { onOffsetChange };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using SignatureInstance in TypeScript\nDESCRIPTION: Demonstrates how to use the `SignatureInstance` type in a Vue component with TypeScript. It defines a ref to hold the Signature instance and calls the `resize` method on the instance. Dependencies include `ref` from 'vue' and `SignatureInstance` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { SignatureInstance } from 'vant';\n\nconst signatureRef = ref<SignatureInstance>();\n\nsignatureRef.value?.resize();\n```\n\n----------------------------------------\n\nTITLE: Vant Sidebar Change Event in HTML\nDESCRIPTION: This HTML snippet demonstrates how to listen for the `change` event on the `van-sidebar` component. The `@change` directive is used to bind the `onChange` method to the event. The `onChange` method will be called whenever the selected sidebar item changes, passing the index of the newly selected item as an argument.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\" @change=\"onChange\">\n  <van-sidebar-item title=\"Title 1\" />\n  <van-sidebar-item title=\"Title 2\" />\n  <van-sidebar-item title=\"Title 3\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Basic DatePicker Setup with Vue Ref\nDESCRIPTION: Sets up the initial state for the DatePicker component in a Vue 3 setup function. It initializes a `currentDate` ref, and defines the `minDate` and `maxDate` properties for the component. The component emits changes to `currentDate` based on user selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2021', '01', '01']);\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Readonly Half Star - HTML\nDESCRIPTION: This HTML snippet sets a read-only Vant Rate component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: Vant SwipeCell Before Close Example in HTML\nDESCRIPTION: This snippet presents the usage of the `before-close` prop in the `van-swipe-cell` component. The `beforeClose` function is triggered before closing the swipe cell.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe-cell/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe-cell :before-close=\"beforeClose\">\n  <template #left>\n    <van-button square type=\"primary\" text=\"Select\" />\n  </template>\n  <van-cell :border=\"false\" title=\"Cell\" value=\"Cell Content\" />\n  <template #right>\n    <van-button square type=\"danger\" text=\"Delete\" />\n  </template>\n</van-swipe-cell>\n```\n\n----------------------------------------\n\nTITLE: Basic NoticeBar Usage\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the Vant NoticeBar component. It configures the text content to be displayed and includes a left icon using the `left-icon` attribute.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar\n  text=\"Technology is the common soul of the people who developed it.\"\n  left-icon=\"volume-o\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Sticky Component - JavaScript\nDESCRIPTION: Registers the Vant Sticky component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses the app.use() method to register the Sticky component. This allows the component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Sticky } from 'vant';\n\nconst app = createApp();\napp.use(Sticky);\n```\n\n----------------------------------------\n\nTITLE: DatePicker Instance Type - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `DatePickerInstance` type definition from the `vant` library and use it to create a typed ref for a DatePicker instance. This allows you to access the methods of the DatePicker instance with proper type checking.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { DatePickerInstance } from 'vant';\n\nconst datePickerRef = ref<DatePickerInstance>();\n\ndatePickerRef.value?.confirm();\n```\n\n----------------------------------------\n\nTITLE: Custom Event useClickAway Usage - JavaScript\nDESCRIPTION: Demonstrates how to customize the event type listened to by the useClickAway hook.  It imports the ref and useClickAway functions, creates a ref for the root element, and then calls useClickAway with an options object that specifies the eventName as 'touchstart'. This example detects touch events outside the element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useClickAway } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n    useClickAway(\n      root,\n      () => {\n        console.log('touch outside!');\n      },\n      { eventName: 'touchstart' },\n    );\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Close with beforeClose - JavaScript\nDESCRIPTION: Demonstrates how to use the `beforeClose` option to perform actions before closing the ImagePreview.  The `beforeClose` function can return `false` to prevent closing, or a Promise.  The example shows how to close the ImagePreview manually using the `close()` method after a timeout. It imports showImagePreview from vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nconst instance = showImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  beforeClose: () => false,\n});\n\nsetTimeout(() => {\n  // 调用实例上的 close 方法手动关闭图片预览\n  instance.close();\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Empty Component in Vue.js\nDESCRIPTION: This snippet shows how to install and register the Vant Empty component globally within a Vue.js application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and uses the `app.use()` method to register the Empty component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Empty } from 'vant';\n\nconst app = createApp();\napp.use(Empty);\n```\n\n----------------------------------------\n\nTITLE: Importing Vant 3 Compatible Components in JavaScript\nDESCRIPTION: Demonstrates how to import Vant 3 compatible components from the @vant/compat package in a JavaScript file. This allows you to use Toast, Dialog, Notify, and ImagePreview with Vant 3 behavior in your Vant 4 project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-compat/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Same as Toast in Vant 3\nimport { Toast } from '@vant/compat';\n\n// Same as Dialog in Vant 3\nimport { Dialog } from '@vant/compat';\n\n// Same as Notify in Vant 3\nimport { Notify } from '@vant/compat';\n\n// Same as ImagePreview in Vant 3\nimport { ImagePreview } from '@vant/compat';\n```\n\n----------------------------------------\n\nTITLE: Custom Color RadioGroup - HTML\nDESCRIPTION: This HTML snippet shows how to customize the checked color of individual radio buttons.  The checked-color prop is used to set the color of the radio button when it is selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" checked-color=\"#ee0a24\">Radio 1</van-radio>\n  <van-radio name=\"2\" checked-color=\"#ee0a24\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Next Step Confirmation Logic - Vue.js\nDESCRIPTION: Provides the Vue.js setup function and logic identical to the earlier Date/Time picker setup, but meant to accompany the 'Next Step' HTML example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2022', '06', '01']);\n    const currentTime = ref(['12', '00']);\n\n    const onConfirm = () => {\n      showToast(\n        `${currentDate.value.join('/')} ${currentTime.value.join(':')}`,\n      );\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n      currentTime,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Vant Empty Component Image Size Array\nDESCRIPTION: This snippet shows how to set the width and height of the image separately by passing an array to the image-size prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-empty :image-size=\"[60, 40]\" description=\"Description\" />\n```\n\n----------------------------------------\n\nTITLE: Setting the Vant Switch Component to Loading State\nDESCRIPTION: This code demonstrates how to set the Vant Switch component to a loading state using the `loading` attribute. While in the loading state, the switch cannot be toggled.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-switch v-model=\"checked\" loading />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition Import for NoticeBar\nDESCRIPTION: This snippet shows how to import type definitions for the NoticeBar component in TypeScript. It imports `NoticeBarMode`, `NoticeBarProps`, and `NoticeBarInstance` from the `vant` library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NoticeBarMode, NoticeBarProps, NoticeBarInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Forked Repository\nDESCRIPTION: This bash script adds the main Vant repository as a remote, fetches the latest changes, switches to the main branch, and merges the upstream code into the local main branch. It ensures the forked repository is up-to-date before submitting a pull request.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/contribution.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 添加主仓库到 remote\ngit remote add upstream git@github.com:vant-ui/vant.git\n\n# 拉取主仓库最新代码\ngit fetch upstream\n\n# 切换至 main 分支\ngit checkout main\n\n# 合并主仓库代码\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Image Data for Lazy Loading - JavaScript\nDESCRIPTION: Defines the image data used for lazy loading within the Swipe component.  It returns an object containing an array of image URLs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const images = [\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n    ];\n    return { images };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disable Uploader - HTML\nDESCRIPTION: Demonstrates how to disable the Uploader component using the `disabled` prop.  When disabled, the Uploader will not allow file selection or uploads.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader disabled />\n```\n\n----------------------------------------\n\nTITLE: Basic Coupon Usage with CouponCell and CouponList\nDESCRIPTION: This snippet illustrates the fundamental usage of `van-coupon-cell` and `van-coupon-list` within a Vue component.  It binds the `coupons` and `chosenCoupon` props to data properties.  The `van-popup` component controls the visibility of the `van-coupon-list`. The event handlers, `onChange` and `onExchange` are triggered upon coupon selection and exchange respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- 优惠券单元格 -->\n<van-coupon-cell\n  :coupons=\"coupons\"\n  :chosen-coupon=\"chosenCoupon\"\n  @click=\"showList = true\"\n/>\n<!-- 优惠券列表 -->\n<van-popup\n  v-model:show=\"showList\"\n  round\n  position=\"bottom\"\n  style=\"height: 90%; padding-top: 4px;\"\n>\n  <van-coupon-list\n    :coupons=\"coupons\"\n    :chosen-coupon=\"chosenCoupon\"\n    :disabled-coupons=\"disabledCoupons\"\n    @change=\"onChange\"\n    @exchange=\"onExchange\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Upgrade release-it v16\nDESCRIPTION: This code snippet describes a chore involving upgrading the release-it dependency to version 16. It was contributed by @chenjiahan in pull request #12115. This ensures that the project uses the latest version of the release-it tool, potentially benefiting from new features, bug fixes, and performance improvements.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nchore(deps): 升级 release-it v16 by [@chenjiahan](https://github.com/chenjiahan) in [#12115](https://github.com/youzan/vant/pull/12115)\n```\n\n----------------------------------------\n\nTITLE: Upgrade eslint-config Dependencies\nDESCRIPTION: This code snippet describes upgrading the dependencies of eslint-config. It was contributed by @chenjiahan in pull request #12155. This keeps the linter configuration up to date and provides latest linting rules.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\nchore(eslint-config): 升级依赖项 by [@chenjiahan](https://github.com/chenjiahan) in [#12155](https://github.com/youzan/vant/pull/12155)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Scrolling - Vue\nDESCRIPTION: This code demonstrates how to enable horizontal scrolling of the dropdown menu items when there are many items. The `swipe-threshold` prop is set to `4`, which means scrolling will be enabled if there are more than 4 options and the total width of the options exceeds the width of the menu bar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-dropdown-menu swipe-threshold=\"4\">\n  <van-dropdown-item v-model=\"value1\" :options=\"option1\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n  <van-dropdown-item v-model=\"value2\" :options=\"option2\" />\n</van-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Viewport meta tag for safe area\nDESCRIPTION: This meta tag configures the viewport for safe area support on devices like iPhone X.  `viewport-fit=cover` ensures the content fills the entire screen, including the safe area.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!-- 在 head 标签中添加 meta 标签，并设置 viewport-fit=cover 值 -->\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Rsbuild project\nDESCRIPTION: Illustrates how to create a new Rsbuild project using npm. Rsbuild is a build tool optimized for Vant and offers fast build speeds and a good developer experience.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: Notify API Method Mapping - Vant 3 vs Vant 4\nDESCRIPTION: Lists the corresponding methods for Notify API between Vant 3 and Vant 4 to simplify the upgrade process.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nNotify(); // -> showNotify()\nNotify.clear(); // -> closeNotify()\nNotify.setDefaultOptions(); // -> setNotifyDefaultOptions()\nNotify.resetDefaultOptions(); // -> resetNotifyDefaultOptions()\n```\n\n----------------------------------------\n\nTITLE: Updating Area Data in area-data\nDESCRIPTION: This code snippet describes the feature of updating county and district data for Wuhu in area-data. It was contributed by @nivin-studio in pull request #12122.  The change aims to provide accurate regional data for the Vant UI's Area component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nfeat(area-data): 更新芜湖的县区数据，由 [@nivin-studio](https://github.com/nivin-studio) 在 [#12122](https://github.com/youzan/vant/pull/12122) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Sticky Types Import - TypeScript\nDESCRIPTION: Imports type definitions related to the Sticky component from the 'vant' library.  These types are used for type checking and provide better code completion in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { StickyProps, StickyPosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Round Themed Stepper - HTML\nDESCRIPTION: An example showing how to apply a round theme to the stepper using the `theme` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" theme=\"round\" button-size=\"22\" disable-input />\n```\n\n----------------------------------------\n\nTITLE: Custom Options Top Content - HTML\nDESCRIPTION: Defines custom content to be displayed above the options in the Cascader component using a slot. The slot receives the tabIndex as a parameter, which is used to indicate the current level.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-cascader v-model=\"code\" title=\"请选择所在地区\" :options=\"options\">\n  <template #options-top=\"{ tabIndex }\">\n    <div class=\"current-level\">当前为第 {{ tabIndex + 1 }} 级</div>\n  </template>\n</van-cascader>\n\n<style>\n  .current-level {\n    font-size: 14px;\n    padding: 16px 16px 0;\n    color: var(--van-gray-6);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Vant CLI\nDESCRIPTION: This JSON configuration sets up scripts for development, testing, linting, building, releasing, and building the site with Vant CLI. It also configures nano-staged, eslintConfig, prettier, and browserslist.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/README.zh-CN.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"vant-cli dev\",\n    \"test\": \"vant-cli test\",\n    \"lint\": \"vant-cli lint\",\n    \"build\": \"vant-cli build\",\n    \"prepare\": \"husky\",\n    \"release\": \"vant-cli release\",\n    \"build-site\": \"vant-cli build-site\"\n  },\n  \"nano-staged\": {\n    \"*.md\": \"prettier --write\",\n    \"*.{ts,tsx,js,vue,less,scss}\": \"prettier --write\",\n    \"*.{ts,tsx,js,vue}\": \"eslint --fix\"\n  },\n  \"eslintConfig\": {\n    \"root\": true,\n    \"extends\": [\"@vant\"]\n  },\n  \"prettier\": {\n    \"singleQuote\": true\n  },\n  \"browserslist\": [\"Chrome >= 51\", \"iOS >= 10\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon ShareSheet Setup - JavaScript\nDESCRIPTION: This JavaScript snippet sets up the data for the custom icon ShareSheet usage. It defines `showShare` as a reactive variable and `options` as an array of share options, each containing a `name` and an `icon` that is a URL to an image. Dependencies: vue.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      {\n        name: 'Name',\n        icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/custom-icon-fire.png',\n      },\n      {\n        name: 'Name',\n        icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/custom-icon-light.png',\n      },\n      {\n        name: 'Name',\n        icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/custom-icon-water.png',\n      },\n    ];\n\n    return {\n      options,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining active state for Vant Sidebar in Vue.js\nDESCRIPTION: This JavaScript code snippet defines the `active` state variable using Vue's `ref` function from the 'vue' library. It sets the initial value of `active` to 0 and returns it as part of the component's setup function.  The `active` variable is used to control which sidebar item is currently selected.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Replace import('../foo.vue') with import('../foo.mjs')\nDESCRIPTION: This code snippet describes replacing import statements for Vue components from '.vue' extensions to '.mjs' extensions using get-deps. It was contributed by @suncohey in pull request #12046.  This ensures that the components are imported using the modern ECMAScript module syntax.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nfeat(get-deps): 将 import('../foo.vue') 替换为 import('../foo.mjs') by [@suncohey](https://github.com/suncohey) in [#12046](https://github.com/youzan/vant/pull/12046)\n```\n\n----------------------------------------\n\nTITLE: Custom Skeleton Content with Template Slot in HTML\nDESCRIPTION: This snippet demonstrates how to customize the content displayed within the Vant Skeleton component using the `template` slot. It shows a layout with a SkeletonImage and a set of SkeletonParagraph components to mimic the structure of the actual content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton>\n  <template #template>\n    <div :style=\"{ display: 'flex', width: '100%' }\">\n      <van-skeleton-image />\n      <div :style=\"{ flex: 1, marginLeft: '16px' }\">\n        <van-skeleton-paragraph row-width=\"60%\" />\n        <van-skeleton-paragraph />\n        <van-skeleton-paragraph />\n        <van-skeleton-paragraph />\n      </div>\n    </div>\n  </template>\n</van-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Enabling Reupload - HTML\nDESCRIPTION: Shows how to enable reupload functionality for a file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader v-model=\"fileList\" reupload max-count=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Pen Color for Signature Component\nDESCRIPTION: This example demonstrates how to customize the pen color of the Signature component using the `pen-color` prop. It sets the pen color to red (#ff0000).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-signature pen-color=\"#ff0000\" @submit=\"onSubmit\" @clear=\"onClear\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing PickerGroup Component - Vue.js\nDESCRIPTION: Registers the PickerGroup component globally within a Vue.js application. It imports the necessary modules from 'vue' and 'vant' and uses the `app.use` method to make the component available throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { PickerGroup } from 'vant';\n\nconst app = createApp();\napp.use(PickerGroup);\n```\n\n----------------------------------------\n\nTITLE: Installing Vant using package managers (npm, yarn, pnpm, bun)\nDESCRIPTION: This code snippet demonstrates how to install the Vant UI library using npm, yarn, pnpm and bun. The code block provides the installation command for each package manager. These commands add the Vant library as a dependency to the current project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/create-vant-cli-app/generators/vue3/docs/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 npm\nnpm i <%= name %>\n\n# 通过 yarn\nyarn add <%= name %>\n\n# 通过 pnpm\npnpm add <%= name %>\n\n# 通过 bun\nbun add <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Toggle All Panels - HTML\nDESCRIPTION: This snippet shows how to implement buttons that toggle all panels open or closed using the `toggleAll` method on the `Collapse` instance. A `ref` is used to access the `Collapse` instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\" ref=\"collapse\">\n  <van-collapse-item title=\"标题1\" name=\"1\">\n    代码是写出来给人看的，附带能在机器上运行。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题2\" name=\"2\">\n    技术无非就是那些开发它的人的共同灵魂。\n  </van-collapse-item>\n  <van-collapse-item title=\"标题3\" name=\"3\">\n    在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\n  </van-collapse-item>\n</van-collapse>\n\n<van-button type=\"primary\" @click=\"openAll\">全部展开</van-button>\n<van-button type=\"primary\" @click=\"toggleAll\">全部切换</van-button>\n```\n\n----------------------------------------\n\nTITLE: Listening for Change Event - HTML\nDESCRIPTION: Demonstrates listening for the `change` event on the Swipe component, which is triggered after each slide transition. The `@change` directive binds the `onChange` method to the event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe @change=\"onChange\">\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Editing a Contact Card - HTML\nDESCRIPTION: Renders a ContactCard component with the type set to 'edit'.  The `tel` and `name` props are bound to the `tel` and `name` reactive references. The `@click` event is bound to the `onEdit` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-card type=\"edit\" :tel=\"tel\" :name=\"name\" @click=\"onEdit\" />\n```\n\n----------------------------------------\n\nTITLE: Popup Close Icon - HTML\nDESCRIPTION: Demonstrates how to add a close icon to the popup using the `closeable` prop, customize the icon with the `close-icon` prop, and change its position with `close-icon-position`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-popup\n  v-model:show=\"show\"\n  closeable\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n<!-- Custom Icon -->\n<van-popup\n  v-model:show=\"show\"\n  closeable\n  close-icon=\"close\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n<!-- Icon Position -->\n<van-popup\n  v-model:show=\"show\"\n  closeable\n  close-icon-position=\"top-left\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Area Data with Yarn\nDESCRIPTION: This command installs the @vant/area-data package using yarn. It adds the package to your project's dependencies, making the Chinese area data available for use in Vant components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-area-data/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: Vant Badge Types Import - TypeScript\nDESCRIPTION: Imports the type definitions associated with the Vant Badge component from the 'vant' module. Includes BadgeProps and BadgePosition.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BadgeProps, BadgePosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Basic TimePicker Setup with Vue Composition API\nDESCRIPTION: This JavaScript snippet shows how to initialize the `currentTime` ref using Vue's Composition API.  The `currentTime` ref holds an array representing the selected hour and minute.  It's used with the HTML example for basic TimePicker usage.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '00']);\n    return { currentTime };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Lazyload for Components - JavaScript\nDESCRIPTION: This snippet initializes the Lazyload plugin with `lazyComponent` option set to `true`. It is a necessary step to enable lazy loading of components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// set `lazyComponent` option\napp.use(Lazyload, {\n  lazyComponent: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Non-Editable ContactCard - HTML\nDESCRIPTION: Displays a ContactCard component in 'edit' mode but with editing disabled. The `type` prop is set to \"edit\", the `name` and `tel` props are hardcoded, and the `editable` prop is set to `false` to prevent user interaction.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-card type=\"edit\" name=\"张三\" tel=\"13000000000\" :editable=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Vant Cells in HTML\nDESCRIPTION: This snippet shows how to correctly render Vant Cell components within a Cell Group in standard HTML.  The key is to use fully closed tags ( `<van-cell></van-cell>`) instead of self-closing tags (`<van-cell />`) as HTML does not support self-closing custom elements.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/faq.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"单元格\" value=\"内容\"></van-cell>\n  <van-cell title=\"单元格\" value=\"内容\"></van-cell>\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Circle Color\nDESCRIPTION: Demonstrates how to customize the colors of the Vant Circle.  Sets a custom color for the underlying layer.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  layer-color=\"#ebedf0\"\n  text=\"Custom Color\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Add Docs Description for css variable '--van-radio-dot-size'\nDESCRIPTION: This code snippet adds documentation for the CSS variable '--van-radio-dot-size' in the Radio component. It was contributed by @wjw-gavin in pull request #12152. This change improves the documentation by providing details on how to customize the size of the radio dot using CSS variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\ndocs(Radio): 添加对 css 变量 '--van-radio-dot-size' 的文档描述，由 [@wjw-gavin](https://github.com/wjw-gavin) 在 [#12152](https://github.com/youzan/vant/pull/12152) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Bundle Option Type Definition (TypeScript)\nDESCRIPTION: This code defines the TypeScript type definition for the BundleOption used in the build process, controlling code minification, output formats, and external dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype BundleOption = {\n  // 是否压缩代码（注意 es 产物无法被 vite 压缩）\n  minify?: boolean;\n  // 产物类型，可选值为 'es' | 'cjs' | 'umd' | 'iife'\n  formats: LibraryFormats[];\n  // 需要 external 的依赖（Vue 默认会被 external）\n  external?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: package.json Typings Configuration\nDESCRIPTION: This snippet demonstrates how to configure the `typings` field in `package.json` after generating type declarations. This field points to the main type definition file for the component library, enabling TypeScript support for consumers of the library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typings\": \"lib/index.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RollingText Component - JavaScript\nDESCRIPTION: Registers the RollingText component globally using app.use.  This makes the component available for use in Vue templates.  Requires importing createApp from 'vue' and RollingText from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { RollingText } from 'vant';\n\nconst app = createApp();\napp.use(RollingText);\n```\n\n----------------------------------------\n\nTITLE: Setting up Reactive Time for CountDown in Vue\nDESCRIPTION: Defines a reactive variable `time` using `ref` from Vue, initialized to a specific duration (30 hours in milliseconds). This variable is then returned from the setup function, making it accessible in the template.  Requires `ref` from `vue`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const time = ref(30 * 60 * 60 * 1000);\n    return { time };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Badge Attribute - HTML\nDESCRIPTION: This snippet shows how the info attribute for displaying badge information is renamed to badge when upgrading from Vant 2 to Vant 3. It highlights the change for Icon components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-icon info=\"5\" />\n\n<!-- Vant 3 -->\n<van-icon badge=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding Vant Button Style with Custom CSS\nDESCRIPTION: Demonstrates how to override the default styles of a Vant Button component using custom CSS classes. It targets both the root element and a child element of the button. This approach allows for specific visual adjustments beyond theme customization. Requires understanding of CSS specificity and Vant's default CSS structure.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/faq.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <van-button class=\"my-button\">Button</van-button>\n</template>\n\n<style>\n  /** Override the style of Button's root element */\n  .my-button {\n    width: 200px;\n  }\n\n  /** Override the style of Button's child elements */\n  .my-button.van-button__text {\n    color: red;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Popup Styling Changes in Vant 4 (Less)\nDESCRIPTION: This code snippet shows the change in CSS styling for the Popup component's center positioning between Vant 3 and Vant 4. It highlights the switch from using transform: translate3d to using margin: 0 auto and width: fit-content for centering, addressing issues with width adaptation in Vant 3.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_20\n\nLANGUAGE: less\nCODE:\n```\n// Vant 3\n.van-popup--center {\n  left: 50%;\n  transform: translate3d(-50%, -50%, 0);\n}\n\n// Vant 4\n.van-popup--center {\n  left: 0;\n  right: 0;\n  width: fit-content;\n  max-width: calc(100vw - var(--van-padding-md) * 2);\n  margin: 0 auto;\n  transform: translateY(-50%);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Area Data with PNPM\nDESCRIPTION: This command installs the @vant/area-data package using pnpm. It ensures that the Chinese area data is installed as a dependency for your Vant components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-area-data/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: Initializing RollingText Component with Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the RollingText component in a Vue application. It imports the RollingText component from the 'vant' library and uses it within the app instance. Requires Vue and Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { RollingText } from 'vant';\n\nconst app = createApp();\napp.use(RollingText);\n```\n\n----------------------------------------\n\nTITLE: Popover Placement Values - Bash\nDESCRIPTION: Lists the supported values for the `placement` prop, showing the different position options for the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntop           # Top middle\ntop-start     # Top left\ntop-end       # Top right\nleft          # Left middle\nleft-start    # Left top\nleft-end      # Left bottom\nright         # Right middle\nright-start   # Right top\nright-end     # Right bottom\nbottom        # Bottom middle\nbottom-start  # Bottom left\nbottom-end    # Bottom right\n```\n\n----------------------------------------\n\nTITLE: Custom Circle Width\nDESCRIPTION: Demonstrates how to customize the width of the Vant Circle component by setting the `stroke-width` prop. This affects the thickness of the progress bar.  The unit of `stroke-width` is not `px`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  :stroke-width=\"60\"\n  text=\"Custom Width\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vertical Arrangement with Vant Space\nDESCRIPTION: This HTML snippet showcases how to use the `direction` attribute of the Vant Space component to arrange its children vertically. The `fill` prop makes the Space component a block element that occupies the full width of its parent. Vant Button components are used as children and the `block` prop makes each button a block element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-space direction=\"vertical\" fill>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n  <van-button type=\"primary\" block>按钮</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Dialog API Method Mapping - Vant 3 vs Vant 4\nDESCRIPTION: Presents the mapping between old and new Dialog API methods in Vant 3 and Vant 4, facilitating migration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDialog(); // -> showDialog()\nDialog.alert(); // -> showDialog()\nDialog.confirm(); // -> showConfirmDialog()\nDialog.close(); // -> closeDialog();\nDialog.setDefaultOptions(); // -> setDialogDefaultOptions()\nDialog.resetDefaultOptions(); // -> resetDialogDefaultOptions()\n```\n\n----------------------------------------\n\nTITLE: File List with Quantity Limit - Vue\nDESCRIPTION: Defines the fileList ref for the upload quantity limit example. It initializes an empty array for the fileList.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const fileList = ref([]);\n\n    return {\n      fileList,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Tab Switching Logic - Vue.js\nDESCRIPTION: Sets up the activeTab ref and the setActiveTab method to control the active tab index of a PickerGroup component. This allows external control of the tab displayed in the picker group.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const activeTab = ref(0);\n    const currentDate = ref(['2022', '06', '01']);\n    const currentTime = ref(['12', '00']);\n\n    const setActiveTab = () => {\n      activeTab.value = activeTab.value ? 0 : 1;\n    };\n\n    const onConfirm = () => {\n      showToast(\n        `${currentDate.value.join('/')} ${currentTime.value.join(':')}`,\n      );\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      activeTab,\n      currentDate,\n      currentTime,\n      setActiveTab,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TreeSelectItem Data Structure Example\nDESCRIPTION: Illustrates the expected data structure for the TreeSelectItem prop.  Shows how to define parent nodes with text, badges, and child nodes with text and IDs. The component uses the 'id' to highlight the selected leaf node.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    // name of the parent node\n    text: 'Group 1',\n    // badge\n    badge: 3,\n    // Whether to show red dot\n    dot: true,\n    // ClassName of parent node\n    className: 'my-class',\n    // leaves of this parent node\n    children: [\n      {\n        // name of the leaf node\n        text: 'Washington',\n        // id of the leaf node, component highlights leaf node by comparing the activeId with this.\n        id: 1,\n        // disable options\n        disabled: true,\n      },\n      {\n        text: 'Baltimore',\n        id: 2,\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Setting up Container Ref - JavaScript\nDESCRIPTION: Sets up the `container` ref used in the 'Set Container' example. It utilizes the `ref` function from Vue to create a reactive reference to the container DOM element, allowing the Sticky component to target the correct container.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  setup() {\n    const container = ref(null);\n    return { container };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Vant Space Size\nDESCRIPTION: Demonstrates customizing the spacing size using the `size` prop with different units (px, rem). It accepts both numbers and strings to define the spacing.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 20px -->\n<van-space :size=\"20\">\n  <van-button type=\"primary\">Button</van-button>\n  <van-button type=\"primary\">Button</van-button>\n  <van-button type=\"primary\">Button</van-button>\n</van-space>\n\n<!-- 2rem -->\n<van-space size=\"2rem\">\n  <van-button type=\"primary\">Button</van-button>\n  <van-button type=\"primary\">Button</van-button>\n  <van-button type=\"primary\">Button</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling - HTML\nDESCRIPTION: Shows how to apply custom styles to the RollingText component using CSS variables and the height prop. The height prop sets the height of the digits.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-rolling-text\n  class=\"my-rolling-text\"\n  :height=\"54\"\n  :start-num=\"12345\"\n  :target-num=\"54321\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Component Type Definitions - TypeScript\nDESCRIPTION: Provides TypeScript type definitions for the Circle component, including CircleProps and CircleStartPosition.  This enables type checking and autocompletion when working with the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CircleProps, CircleStartPosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Event naming adjustment\nDESCRIPTION: Shows event naming changes for using Vant 4 with Vue.js and JSX.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nemit('click-input');\n\n// Vant 4\nemit('clickInput');\n```\n\n----------------------------------------\n\nTITLE: Custom Class Highlight - HTML\nDESCRIPTION: Shows how to apply a custom CSS class to the highlighted text using the `highlight-class` prop. This allows for custom styling of the highlighted text beyond the default styling.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-highlight\n  :keywords=\"keywords\"\n  :source-string=\"text\"\n  highlight-class=\"custom-class\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Confirm Text - HTML\nDESCRIPTION: Shows how to customize the text displayed on the confirm button of the Vant Calendar component. Uses the `confirm-text` and `confirm-disabled-text` props to define the text in enabled and disabled states.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar\n  v-model:show=\"show\"\n  type=\"range\"\n  confirm-text=\"OK\"\n  confirm-disabled-text=\"Select End Time\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Barrage Type Definitions Import\nDESCRIPTION: Import type definitions from Vant for type safety in Barrage components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BarrageProps, BarrageItem, BarrageInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Default Bundle Options (TypeScript)\nDESCRIPTION: This code defines the default bundle options, specifying the output formats and whether to minify the code, along with any external dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_OPTIONS: BundleOption[] = [\n  {\n    minify: false,\n    formats: ['umd'],\n  },\n  {\n    minify: true,\n    formats: ['umd'],\n  },\n  {\n    minify: false,\n    formats: ['es', 'cjs'],\n    external: allDependencies,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Type Definitions Import for Vant Image\nDESCRIPTION: This TypeScript snippet shows how to import type definitions related to the Vant Image component, including ImageFit, ImagePosition, and ImageProps. This enables type checking and autocompletion when working with the component in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ImageFit, ImagePosition, ImageProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Badge with Custom Position - HTML\nDESCRIPTION: Shows how to use the position prop to control the placement of the badge relative to its parent element. It demonstrates different position options such as 'top-left', 'bottom-left', and 'bottom-right'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"10\" position=\"top-left\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\" position=\"bottom-left\">\n  <div class=\"child\" />\n</van-badge>\n<van-badge :content=\"10\" position=\"bottom-right\">\n  <div class=\"child\" />\n</van-badge>\n```\n\n----------------------------------------\n\nTITLE: Barrage Data Management with Vue Composition API\nDESCRIPTION: This TypeScript code defines the setup function for a Vue component that manages the barrage data. It uses the ref function to create a reactive list of barrage items and includes a method to add new barrage items to the list.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const defaultList = [\n      { id: 100, text: '轻量' },\n      { id: 101, text: '可定制的' },\n      { id: 102, text: '移动端' },\n      { id: 103, text: 'Vue' },\n      { id: 104, text: '组件库' },\n      { id: 105, text: 'VantUI' },\n      { id: 106, text: '666' },\n    ];\n\n    const list = ref([...defaultList]);\n    const add = () => {\n      list.value.push({ id: Math.random(), text: 'Barrage' });\n    };\n\n    return { list, add };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Area Data with Bun\nDESCRIPTION: This command installs the @vant/area-data package using Bun. The package provides Chinese province, city, and district data for Vant UI components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-area-data/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure (SFC)\nDESCRIPTION: This snippet illustrates the directory structure for an individual component when using Single-File Components (SFCs). It includes a demo directory containing the component demo and the component source code index.vue, along with a README.md for component documentation. JS and CSS files are generated after the bundle process, with CSS automatically imported into JS.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbutton\n├─ demo             # component demo directory\n│   └─ index.vue   # component demo\n├─ index.vue        # component source code\n└─ README.md        # component doc\n```\n\n----------------------------------------\n\nTITLE: Popup CSS Adjustment\nDESCRIPTION: Displays the adjustment of the position 'center' when using popup\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_25\n\nLANGUAGE: less\nCODE:\n```\n// Vant 3\n.van-popup--center {\n  left: 50%;\n  transform: translate3d(-50%, -50%, 0);\n}\n\n// Vant 4\n.van-popup--center {\n  left: 0;\n  right: 0;\n  width: fit-content;\n  max-width: calc(100vw - var(--van-padding-md) * 2);\n  margin: 0 auto;\n  transform: translateY(-50%);\n}\n```\n\n----------------------------------------\n\nTITLE: Reuse actionText Variable in TextEllipsis\nDESCRIPTION: This code snippet describes a chore involving reusing the actionText variable in the TextEllipsis component. It was contributed by @chenjiahan in pull request #12138. This helps reduce code duplication and improves consistency.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nchore(TextEllipsis): 重用 actionText 变量 by [@chenjiahan](https://github.com/chenjiahan) in [#12138](https://github.com/youzan/vant/pull/12138)\n```\n\n----------------------------------------\n\nTITLE: Notify API mapping Vant 3 to Vant 4\nDESCRIPTION: Lists the mapping of the old Notify API in Vant 3 to the new API in Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nNotify(); // -> showNotify()\nNotify.clear(); // -> closeNotify()\nNotify.setDefaultOptions(); // -> setNotifyDefaultOptions()\nNotify.resetDefaultOptions(); // -> resetNotifyDefaultOptions()\n```\n\n----------------------------------------\n\nTITLE: Toast Migration using @vant/compat\nDESCRIPTION: Illustrates using the Toast object from @vant/compat for compatibility with Vant 3 Toast API during migration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Toast } from '@vant/compat';\n\nToast();\nToast.clear();\n```\n\n----------------------------------------\n\nTITLE: Add gitTag Option Support for Release Command\nDESCRIPTION: This code snippet describes a feature addition to the release command in the CLI, which enables support for the gitTag option. It was contributed by @chenjiahan in pull request #12134. This provides more flexibility in managing Git tags during the release process.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nfeat(cli): 为 release 命令添加 gitTag 选项支持 by [@chenjiahan](https://github.com/chenjiahan) in [#12134](https://github.com/youzan/vant/pull/12134)\n```\n\n----------------------------------------\n\nTITLE: Change Event Handler\nDESCRIPTION: Handles the change event on the Rate component, displaying a toast with the current value.  The `onChange` function is defined to take the new value as an argument and display it in a toast using the `showToast` function from Vant. It showcases the use of the change event to provide immediate feedback on the selected rating.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(3);\n    const onChange = (value) => showToast('当前值：' + value);\n    return {\n      value,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Color - JavaScript\nDESCRIPTION: Vue component setup for applying a gradient color to the Circle component. It defines a reactive `gradientColor` object with color stops and makes it available to the template. It also defines a `currentRate` for animation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentRate = ref(0);\n    const gradientColor = {\n      '0%': '#3fecff',\n      '100%': '#6149f6',\n    };\n\n    return {\n      currentRate,\n      gradientColor,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Empty Component Usage\nDESCRIPTION: This snippet demonstrates the basic usage of the Vant Empty component in HTML. It shows how to include the component with a description property to display text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-empty description=\"Description\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Readonly\nDESCRIPTION: This HTML snippet shows how to make the Vant Rate component read-only using the `readonly` prop, preventing users from changing the rating.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver in Rollup\nDESCRIPTION: This configures the Vant resolver in a Rollup project using unplugin-auto-import and unplugin-vue-components. It imports the necessary modules and adds the VantResolver to the resolvers array in both the AutoImport and Components plugins.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// rollup.config.js\nimport AutoImport from 'unplugin-auto-import/rollup';\nimport Components from 'unplugin-vue-components/rollup';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default {\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Free Magnetic FloatingBubble\nDESCRIPTION: Shows how to configure the FloatingBubble to be freely draggable in both x and y axes with magnetic attraction to the nearest side of the x axis. The HTML template sets `axis` to \"xy\" and `magnetic` to \"x\", and binds the `offset-change` event. The JavaScript code defines the `onOffsetChange` method, which displays the current x and y offsets in a toast message.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-bubble\n  axis=\"xy\"\n  icon=\"chat\"\n  magnetic=\"x\"\n  @offset-change=\"onOffsetChange\"\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onOffsetChange = (offset) => {\n      showToast(`x: ${offset.x.toFixed(0)}, y: ${offset.y.toFixed(0)}`);\n    };\n    return { onOffsetChange };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic CountDown Usage in Vue Template\nDESCRIPTION: Demonstrates the basic usage of the `van-count-down` component in a Vue template. It binds the `time` prop to a reactive variable. The `time` variable represents the countdown duration in milliseconds. Requires a reactive `time` variable defined in the component's setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-count-down :time=\"time\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Content - JavaScript\nDESCRIPTION: Provides a custom date formatting function for the Vant Calendar component. This function modifies the `Day` object to customize the text, topInfo, and bottomInfo properties of each date cell, enabling the display of custom labels and information. This requires using the Vue Composition API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const formatter = (day) => {\n      const month = day.date.getMonth() + 1;\n      const date = day.date.getDate();\n\n      if (month === 5) {\n        if (date === 1) {\n          day.topInfo = '劳动节';\n        } else if (date === 4) {\n          day.topInfo = '青年节';\n        } else if (date === 11) {\n          day.text = '今天';\n        }\n      }\n\n      if (day.type === 'start') {\n        day.bottomInfo = '入住';\n      } else if (day.type === 'end') {\n        day.bottomInfo = '离店';\n      }\n\n      return day;\n    };\n\n    return {\n      formatter,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Image List\nDESCRIPTION: This snippet defines the setup function for a Vue component that provides an `imageList` for lazy loading. The `setup` function returns an object containing the `imageList`, which is an array of image URLs. These URLs are used in the template to demonstrate the lazy loading of images with the `v-lazy` directive.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    return {\n      imageList: [\n        'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n        'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n      ],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Area Component in Vue\nDESCRIPTION: Registers the Vant Area component globally in a Vue application.  It imports the necessary modules from 'vue' and 'vant' and then registers the Area component with the Vue app instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Area } from 'vant';\n\nconst app = createApp();\napp.use(Area);\n```\n\n----------------------------------------\n\nTITLE: Installing Vant v4 using Bun\nDESCRIPTION: Install Vant v4 and the @vant/compat compatibility package using Bun. The @vant/compat package aids in transitioning from Vant 3 to Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add vant@^4 @vant/compat@^1\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition Import for Vant List\nDESCRIPTION: Imports the TypeScript type definitions for the Vant List component, including `ListProps`, `ListInstance`, and `ListDirection`. These type definitions provide type safety when working with the Vant List component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ListProps, ListInstance, ListDirection } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/compat using pnpm\nDESCRIPTION: Installs the @vant/compat package using pnpm. This command adds the package to your project's dependencies, allowing you to use the Vant 3 compatible components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-compat/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @vant/compat\n```\n\n----------------------------------------\n\nTITLE: Disabled Stepper - HTML\nDESCRIPTION: An example showing how to disable the entire stepper using the `disabled` prop. When disabled, the stepper cannot be interacted with.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Importing Vant styles\nDESCRIPTION: Import the entire Vant stylesheet in your JavaScript file to include all Vant component styles. Alternatively, use unplugin-vue-components for on-demand style import.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'vant/lib/index.css';\n```\n\n----------------------------------------\n\nTITLE: Initializing TextEllipsis Component - Vue\nDESCRIPTION: Registers the TextEllipsis component globally in a Vue application. Requires Vue and Vant dependencies to be installed.  The TextEllipsis component is imported from the 'vant' library and registered for use in the Vue application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { TextEllipsis } from 'vant';\n\nconst app = createApp();\napp.use(TextEllipsis);\n```\n\n----------------------------------------\n\nTITLE: Initializing Cell and CellGroup components in Vue\nDESCRIPTION: This snippet demonstrates how to globally register the Cell and CellGroup components from the Vant UI library in a Vue application. It imports the necessary components and then uses the app.use() method to register them. This allows the components to be used throughout the application without needing to import them in each individual component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Cell, CellGroup } from 'vant';\n\nconst app = createApp();\napp.use(Cell);\napp.use(CellGroup);\n```\n\n----------------------------------------\n\nTITLE: Vant Slider Vertical Orientation\nDESCRIPTION: This snippet demonstrates how to create a vertical slider using the `vertical` prop. Two sliders are rendered, one standard slider and one range slider. The container div has a fixed height using inline style, and the range slider is offset using margin-left. The slider values and event handlers are defined in the JavaScript setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div :style=\"{ height: '150px' }\">\n  <van-slider v-model=\"value\" vertical @change=\"onChange\" />\n  <van-slider\n    v-model=\"value2\"\n    range\n    vertical\n    style=\"margin-left: 100px;\"\n    @change=\"onChange\"\n  />\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const value = ref(50);\n    const value2 = ref([10, 50]);\n    const onChange = (value) => showToast('Current value: ' + value);\n    return {\n      value,\n      value2,\n      onChange,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Slider Custom Button\nDESCRIPTION: This snippet shows how to customize the appearance of the slider button using the `button` slot. It defines a custom div with a class 'custom-button' to replace the default slider button. CSS styles are then applied to this div to customize its size, color, font, and background.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\">\n  <template #button>\n    <div class=\"custom-button\">{{ value }}</div>\n  </template>\n</van-slider>\n\n<style>\n  .custom-button {\n    width: 26px;\n    color: #fff;\n    font-size: 10px;\n    line-height: 18px;\n    text-align: center;\n    background-color: var(--van-primary-color);\n    border-radius: 100px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Button Component in Vue\nDESCRIPTION: This code snippet demonstrates how to register the Vant Button component globally within a Vue application using `app.use`. It imports the necessary modules from 'vue' and 'vant' and then registers the Button component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Button } from 'vant';\n\nconst app = createApp();\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: Selecting a Time Range with TimePickers - HTML (Vue)\nDESCRIPTION: Demonstrates how to select a time range using two TimePicker components within a PickerGroup. The example provides the HTML structure for setting up the PickerGroup with tabs for 'Start Time' and 'End Time', including event listeners for confirm and cancel actions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"预约时间\"\n  :tabs=\"['开始时间', '结束时间']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-time-picker v-model=\"startTime\" />\n  <van-time-picker v-model=\"endTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component - JavaScript\nDESCRIPTION: This snippet shows how to import the showDialog function from the vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver in Rspack\nDESCRIPTION: This configures the Vant resolver in a Rspack project using unplugin-auto-import and unplugin-vue-components. It imports the necessary modules and adds the VantResolver to the resolvers array in both the AutoImport and Components plugins.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// rspack.config.js\nimport AutoImport from 'unplugin-auto-import/rspack';\nimport Components from 'unplugin-vue-components/rspack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nmodule.exports = {\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Options Formatter - HTML\nDESCRIPTION: This HTML snippet shows how to use the `formatter` prop in Vant DatePicker to customize the text displayed in the picker options. The `:formatter` is bound to a function `formatter` defined in the component's JavaScript, which modifies the option's text based on its type (year or month).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"Choose Year-Month\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n  :formatter=\"formatter\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Vant UI via Package Managers\nDESCRIPTION: This snippet demonstrates how to install the Vant UI library using npm, yarn, pnpm, and bun. Each section provides the corresponding command for the respective package manager.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/create-vant-cli-app/generators/vue2/docs/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 npm\nnpm i <%= name %>\n\n# 通过 yarn\nyarn add <%= name %>\n\n# 通过 pnpm\npnpm add <%= name %>\n\n# 通过 bun\nbun add <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Skeleton Components in Vue\nDESCRIPTION: This snippet demonstrates how to globally register the Skeleton, SkeletonTitle, SkeletonImage, SkeletonAvatar, and SkeletonParagraph components from the Vant library within a Vue application. It imports necessary modules and uses the `app.use()` method to register each component for use in templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport {\n  Skeleton,\n  SkeletonTitle,\n  SkeletonImage,\n  SkeletonAvatar,\n  SkeletonParagraph,\n} from 'vant';\n\nconst app = createApp();\napp.use(Skeleton);\napp.use(SkeletonTitle);\napp.use(SkeletonImage);\napp.use(SkeletonAvatar);\napp.use(SkeletonParagraph);\n```\n\n----------------------------------------\n\nTITLE: Registering all components globally\nDESCRIPTION: This snippet registers all Vant components globally at once. It imports `Vant` from 'vant' and uses `app.use(Vant)` to register all components. The `Lazyload` directive needs to be registered separately using `app.use(vant.Lazyload)`. This method increases the bundle size because all component code is included.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vant from 'vant';\nimport { createApp } from 'vue';\n\nconst app = createApp();\n\napp.use(Vant);\n\n// Lazyload 指令需要单独进行注册\napp.use(vant.Lazyload);\n```\n\n----------------------------------------\n\nTITLE: Source Directory Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure the source directory used by the Vant CLI.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  build: {\n    srcDir: 'myDir',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Touch Emulator via npm\nDESCRIPTION: Installs the @vant/touch-emulator package using npm. This command adds the emulator as a project dependency, allowing touch event simulation on desktop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-touch-emulator/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @vant/touch-emulator\n```\n\n----------------------------------------\n\nTITLE: SubmitBar Type Definitions - TypeScript\nDESCRIPTION: Imports type definitions related to the SubmitBar component from the 'vant' library. This includes `SubmitBarProps` and `SubmitBarTextAlign` which can be used for type checking and autocompletion in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/submit-bar/README.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type { SubmitBarProps, SubmitBarTextAlign } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Stepper Round Theme Styling in Vue\nDESCRIPTION: This code demonstrates how to apply the round theme to the Vant Stepper component. The `theme` attribute is set to \"round\" to enable the rounded style.  The button size and input disabling are configured for the purpose of visual appeal.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" theme=\"round\" button-size=\"22\" disable-input />\n```\n\n----------------------------------------\n\nTITLE: Basic ContactList Usage - HTML\nDESCRIPTION: This HTML snippet shows how to use the `van-contact-list` component with basic attributes. It binds the `v-model` to `chosenContactId` for tracking the selected contact, uses `:list` to pass the contact list data, sets the `default-tag-text`, and uses event handlers `@add`, `@edit`, and `@select` to define actions when these events occur. This provides a basic interactive contact list.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-list\n  v-model=\"chosenContactId\"\n  :list=\"list\"\n  default-tag-text=\"默认\"\n  @add=\"onAdd\"\n  @edit=\"onEdit\"\n  @select=\"onSelect\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Popup CSS Style Adjustments: Vant 3 vs Vant 4 - LESS\nDESCRIPTION: This code snippet shows the CSS style adjustments made to the Popup component from Vant 3 to Vant 4, particularly focusing on the horizontal centering method.  It highlights the changes in how the `.van-popup--center` class is styled, affecting the positioning and width of the popup when `position=\"center\"`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_17\n\nLANGUAGE: less\nCODE:\n```\n// Vant 3\n.van-popup --center {\n  left: 50%;\n  transform: translate3d(-50%, -50%, 0);\n}\n\n// Vant 4\n.van-popup --center {\n  left: 0;\n  right: 0;\n  width: fit-content;\n  max-width: calc(100vw - var(--van-padding-md) * 2);\n  margin: 0 auto;\n  transform: translateY(-50%);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vant CLI as a dev dependency\nDESCRIPTION: Installs the Vant CLI package as a development dependency. Four different package managers are shown: npm, yarn, pnpm, and bun. The `-D` flag ensures that the CLI is installed only for development purposes and not included in the production bundle.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# via npm\nnpm i @vant/cli -D\n\n# via yarn\nyarn add @vant/cli -D\n\n# via pnpm\npnpm add @vant/cli -D\n\n# via Bun\nbun add @vant/cli -D\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsbuild for On-Demand Styles\nDESCRIPTION: Configures Rsbuild to use `unplugin-auto-import` and `unplugin-vue-components` with the `VantResolver` to automatically import Vant components and their styles. This config goes within the `rsbuild.config.js` file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginVue } from '@rsbuild/plugin-vue';\nimport AutoImport from 'unplugin-auto-import/rspack';\nimport Components from 'unplugin-vue-components/rspack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default defineConfig({\n  plugins: [pluginVue()],\n  tools: {\n    rspack: {\n      plugins: [\n        AutoImport({\n          resolvers: [VantResolver()],\n        }),\n        Components({\n          resolvers: [VantResolver()],\n        }),\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Theme with ConfigProvider\nDESCRIPTION: This code snippet shows how to enable dark mode for Vant components using the ConfigProvider. By setting the theme prop of the ConfigProvider component to \"dark\", all Vant components within the provider will adopt a dark theme. This affects only the Vant components' UI and does not change global text or background colors.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider theme=\"dark\">...</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Auto Import Resolver\nDESCRIPTION: These commands install @vant/auto-import-resolver, unplugin-vue-components, and unplugin-auto-import as development dependencies using npm, yarn, pnpm, and Bun package managers.  These packages are required for the auto-import functionality to work correctly.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# via npm\nnpm i @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# via yarn\nyarn add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# via pnpm\npnpm add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# via Bun\nbun add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n```\n\n----------------------------------------\n\nTITLE: Global Component Registration with app.component - Vue.js\nDESCRIPTION: This code snippet demonstrates an alternative way to register a Vant component globally using the `app.component` method. The component can be used in any child component with the `<van-button>` tag. It requires importing the specific component (e.g., `Button`) from `vant` and `createApp` from `vue`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 方式二. 通过 app.component 注册\n// 注册完成后，在模板中通过 <van-button> 标签来使用按钮组件\napp.component(Button.name, Button);\n```\n\n----------------------------------------\n\nTITLE: Notify Compatibility with @vant/compat - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `Notify` object exported from `@vant/compat` to maintain compatibility with Vant 3's `Notify` API during migration to Vant 4. It allows existing code using `Notify` to function without modification by simply changing the import path. It includes calling the Notify function and clearing notifications.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notify } from '@vant/compat';\n\nNotify();\nNotify.clear();\n```\n\n----------------------------------------\n\nTITLE: Importing Vant Component Typescript Definitions\nDESCRIPTION: This TypeScript snippet shows how to import type definitions for the `ColProps`, `RowProps`, `RowAlign`, and `RowJustify` types from the `vant` library. These type definitions can be used to provide type checking and autocompletion when working with the Vant `Row` and `Col` components in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColProps, RowProps, RowAlign, RowJustify } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Quickstart: Importing and Registering Vant Components in Vue\nDESCRIPTION: This JavaScript code snippet demonstrates how to import and register Vant components within a Vue application. It imports the createApp function from Vue, imports a specific component (Button) from Vant, imports the Vant CSS stylesheet, and then registers the component globally using app.use().\nSOURCE: https://github.com/youzan/vant/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\n// 1. Import the components you need\nimport { Button } from 'vant';\n// 2. Import the components style\nimport 'vant/lib/index.css';\n\nconst app = createApp();\n\n// 3. Register the components you need\napp.use(Button);\n```\n\n----------------------------------------\n\nTITLE: Renaming get-container Prop to Teleport HTML/JS\nDESCRIPTION: Explains the renaming of the `get-container` prop to `teleport` in Vant v3, aligning with Vue 3's Teleport component. It demonstrates how to use the `teleport` prop to render a component to a specific DOM position.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.en-US.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<template>\n  <van-popup get-container=\"body\" />\n  <van-popup :get-container=\"getContainer\" />\n</template>\n<script>\n  export default {\n    methods: {\n      getContainer() {\n        return document.querySelector('#container');\n      },\n    },\n  };\n</script>\n\n<!-- Vant 3 -->\n<template>\n  <van-popup teleport=\"body\" />\n  <van-popup :teleport=\"container\" />\n</template>\n<script>\n  export default {\n    beforeCreate() {\n      this.container = document.querySelector('#container');\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Vant Icon with Image URL\nDESCRIPTION: Renders a Vant Icon using an image URL provided in the `name` property. This allows for using custom image-based icons.  The `name` property is set to the URL of the image. Ensure the URL is accessible.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"https://fastly.jsdelivr.net/npm/@vant/assets/icon-demo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Background Images\nDESCRIPTION: This snippet demonstrates how to lazy load background images using the `v-lazy:background-image` directive. It iterates through an `imageList` and applies the directive to each `div` element, setting the background image to the corresponding URL. It is important to declare container height when using background images.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div v-for=\"img in imageList\" v-lazy:background-image=\"img\" />\n```\n\n----------------------------------------\n\nTITLE: Text Content for Custom Action - Vue\nDESCRIPTION: Defines text content for the custom action slot example.  This code reuses a standard text string to ensure the slot customization is demonstrated effectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      'Take your time and be patient. Life itself will eventually answer all those questions it once raised for you.';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Selectors for Light and Dark Themes\nDESCRIPTION: This CSS code snippet illustrates how to use the `.van-theme-light` and `.van-theme-dark` CSS class selectors to modify base variables based on the current theme. By targeting these classes, styles can be adjusted specifically for each theme.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.zh-CN.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.van-theme-light {\n  --van-white: white;\n}\n\n.van-theme-dark {\n  --van-white: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Expand/Collapse Text Content - Vue\nDESCRIPTION: Defines the text content used for the expand/collapse TextEllipsis example.  A longer string is used for the 'text' variable, ensuring that the expand/collapse functionality is demonstrated effectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      \"The fleeting time of one's life is everything that belongs to a person. Only this thing truly belongs to you. Everything else is just a momentary pleasure or misfortune, which will soon be gone with the passing of time.\";\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Typescript definition for List Component\nDESCRIPTION: This code snippet shows the Typescript definition for List Component\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/list/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ListProps, ListInstance, ListDirection } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Using toggleAll with CollapseInstance in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `toggleAll` method with type safety by importing `CollapseInstance` from 'vant'. It shows different ways to call `toggleAll` including skipping disabled items and explicitly expanding or unexpanding all items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CollapseInstance } from 'vant';\n\nconst collapseRef = ref<CollapseInstance>();\n\n// Toggle all\ncollapseRef.value?.toggleAll();\n// Expand all\ncollapseRef.value?.toggleAll(true);\n// UnExpand all\ncollapseRef.value?.toggleAll(false);\n\n// Toggle all, skip disabled\ncollapseRef.value?.toggleAll({\n  skipDisabled: true,\n});\n// Expand all, skip disabled\ncollapseRef.value?.toggleAll({\n  expanded: true,\n  skipDisabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Date Range Selection - JavaScript\nDESCRIPTION: Manages the date range selection logic for the Vant Calendar component. The `onConfirm` function extracts the start and end dates from the returned array and formats them for display. Utilizes Vue Composition API for reactive updates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const date = ref('');\n    const show = ref(false);\n\n    const formatDate = (date) => `${date.getMonth() + 1}/${date.getDate()}`;\n    const onConfirm = (values) => {\n      const [start, end] = values;\n      show.value = false;\n      date.value = `${formatDate(start)} - ${formatDate(end)}`;\n    };\n\n    return {\n      date,\n      show,\n      onConfirm,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar Tiled - HTML\nDESCRIPTION: Shows how to display the Vant Calendar directly on the page instead of as a popup. Sets `poppable` to `false` to render the calendar inline.  The styling and functionality are adjusted accordingly.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar\n  title=\"Calendar\"\n  :poppable=\"false\"\n  :show-confirm=\"false\"\n  :style=\"{ height: '500px' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Popover Placement - HTML\nDESCRIPTION: Demonstrates how to use the `placement` prop to control the position of the Popover. It includes the values that the placement prop supports.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-popover placement=\"top\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Highlight Class - CSS\nDESCRIPTION: This CSS snippet defines a custom class for the highlighted text within the Vant Highlight component. It sets the color of the highlighted text to red.  This is applied using the `highlight-class` prop on the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.custom-class {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Divider with Text Content in HTML\nDESCRIPTION: This HTML code snippet demonstrates how to insert text content within the Vant Divider component using a slot. The text \"文本\" is placed between the opening and closing `<van-divider>` tags, which will be displayed in the middle of the divider line.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-divider>文本</van-divider>\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Multiple Rows (HTML)\nDESCRIPTION: This HTML snippet configures the ShareSheet component to display share options in multiple rows.  It utilizes the `v-model:show` directive and the `:options` prop to bind the ShareSheet's visibility and share options, respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-share-sheet\n  v-model:show=\"showShare\"\n  title=\"立即分享给好友\"\n  :options=\"options\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Vant Components in JSX/TSX\nDESCRIPTION: Shows how to use Vant components directly in JSX or TSX without component registration. Requires Vue and the Vant component library. Suitable for projects using JSX or TSX syntax.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'vant';\n\nexport default {\n  render() {\n    return <Button />;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Switch inside a Cell\nDESCRIPTION: Displays a Vant Switch component inside a Vant Cell component, utilizing the right-icon slot to position the switch. This example shows how to integrate the switch within a list item.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-cell center title=\"Title\">\n  <template #right-icon>\n    <van-switch v-model=\"checked\" />\n  </template>\n</van-cell>\n```\n\n----------------------------------------\n\nTITLE: NoticeBar Modes: closeable and link\nDESCRIPTION: This snippet demonstrates the `closeable` and `link` modes of the NoticeBar component. The `closeable` mode adds a close button to the right side, while the `link` mode adds a link arrow. The `mode` property is used to set the desired mode.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- closeable 模式，在右侧显示关闭按钮 -->\n<van-notice-bar mode=\"closeable\">米袋虽空——樱花开哉！</van-notice-bar>\n\n<!-- link 模式，在右侧显示链接箭头 -->\n<van-notice-bar mode=\"link\">米袋虽空——樱花开哉！</van-notice-bar>\n```\n\n----------------------------------------\n\nTITLE: Initializing ActionSheet Component - Vue\nDESCRIPTION: Registers the ActionSheet component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and then uses the ActionSheet component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ActionSheet } from 'vant';\n\nconst app = createApp();\napp.use(ActionSheet);\n```\n\n----------------------------------------\n\nTITLE: CSS Preprocessor Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to set the CSS preprocessor to be used by Vant CLI, selecting between less and sass.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  build: {\n    css: {\n      preprocessor: 'sass',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Grid Layout with Vertical Spacing - HTML\nDESCRIPTION: This code snippet demonstrates how to set both horizontal and vertical spacing using an array passed to the `gutter` attribute. The first element in the array represents the horizontal spacing, and the second represents the vertical spacing.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/col/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- set the vertical spacing -->\n<van-row :gutter=\"[20, 20]\">\n  <van-col span=\"12\">span: 12</van-col>\n  <van-col span=\"12\">span: 12</van-col>\n  <van-col span=\"12\">span: 12</van-col>\n  <van-col span=\"12\">span: 12</van-col>\n</van-row>\n```\n\n----------------------------------------\n\nTITLE: Defining Active Step Reactive Variable in Vue\nDESCRIPTION: This code snippet demonstrates how to define a reactive variable `active` using the `ref` function from Vue.  This variable is then returned from the `setup` function, making it available in the template.  The initial value of `active` is set to `1`, indicating the second step is active.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(1);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Notify Appearance - Javascript\nDESCRIPTION: Demonstrates how to customize the color, position, and duration of a notification. This includes setting the text color, background color, display position (top or bottom), and the display duration in milliseconds. The code imports showNotify and demonstrates setting options for color, position, and duration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify } from 'vant';\n\nshowNotify({\n  message: '自定义颜色',\n  color: '#ad0000',\n  background: '#ffe1e1',\n});\n\nshowNotify({\n  message: '自定义位置',\n  position: 'bottom',\n});\n\nshowNotify({\n  message: '自定义时长',\n  duration: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: tsconfig.declaration.json Configuration\nDESCRIPTION: This snippet shows the configuration for `tsconfig.declaration.json`, which is used to generate `.d.ts` type declaration files when the component library is written in TypeScript. It extends the base `tsconfig.json` and specifies compiler options for declaration generation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"declarationDir\": \".\",\n    \"emitDeclarationOnly\": true\n  },\n  \"include\": [\"es/**/*\", \"lib/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/test/**/*\", \"**/demo/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Compat Dialog Function - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `@vant/compat` package to maintain compatibility with the Vant 3.x API when calling the Dialog component. This is useful during the migration process to Vant 4.0. After upgrading you can replace this with `showDialog()` call.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@vant/compat';\n\nDialog({ message: 'Hello World!' });\n```\n\n----------------------------------------\n\nTITLE: Using useScrollParent and useEventListener in Vue\nDESCRIPTION: This JavaScript code demonstrates how to use the `useScrollParent` composable from `@vant/use` to find the closest scrollable parent of a given element. It also shows how to use `useEventListener` to listen for the `scroll` event on the scrollable parent.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-scroll-parent.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, watch } from 'vue';\nimport { useScrollParent, useEventListener } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n    const scrollParent = useScrollParent(root);\n\n    useEventListener(\n      'scroll',\n      () => {\n        console.log('scroll');\n      },\n      { target: scrollParent },\n    );\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Collapse Items\nDESCRIPTION: This HTML snippet demonstrates how to disable `van-collapse-item` components using the `disabled` prop. The second and third items are disabled, preventing them from being expanded.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-collapse v-model=\"activeNames\">\n  <van-collapse-item title=\"Title1\" name=\"1\">\n    The code is written for people to see and can be run on a machine.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title2\" name=\"2\" disabled>\n    Technology is nothing more than the common soul of those who develop it.\n  </van-collapse-item>\n  <van-collapse-item title=\"Title3\" name=\"3\" disabled>\n    The frequency of people swearing during code reading is the only measure of\n    code quality.\n  </van-collapse-item>\n</van-collapse>\n```\n\n----------------------------------------\n\nTITLE: Fixing Ellipsis Position Calculation in TextEllipsis\nDESCRIPTION: This code snippet describes a bug fix that corrects the logic for calculating the position of the ellipsis in the TextEllipsis component. It was contributed by @inottn in pull request #12137.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nfix(TextEllipsis): 修复计算省略号位置的逻辑问题，由 [@inottn](https://github.com/inottn) 在 [#12137](https://github.com/youzan/vant/pull/12137) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive 'activeNames' for Custom Title Collapse\nDESCRIPTION: This Javascript snippet shows how to set up the reactive `activeNames` property using Vue's `ref` function for the custom title example. It initializes `activeNames` with an array containing '1', indicating that the first panel is initially active. This property is then returned from the setup function, making it available in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeNames = ref(['1']);\n    return { activeNames };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Add PR Label Action\nDESCRIPTION: This code snippet describes a chore involving adding a pull request (PR) label action. It was contributed by @chenjiahan in pull request #12136. This action is intended to automatically label PRs based on certain criteria, improving PR organization and workflow.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\nchore: 添加 PR 标签动作 by [@chenjiahan](https://github.com/chenjiahan) in [#12136](https://github.com/youzan/vant/pull/12136)\n```\n\n----------------------------------------\n\nTITLE: Picker CSS Variables\nDESCRIPTION: Lists CSS variables that can be used to customize the appearance of the Vant Picker component. It specifies the default value and a brief description for each variable. Example variables include `--van-picker-background`, `--van-picker-toolbar-height`, and `--van-picker-confirm-action-color`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n| Name | Default Value | Description |\n| --- | --- | --- |\n| --van-picker-background | _var(--van-background-2)_ | - |\n| --van-picker-toolbar-height | _44px_ | - |\n| --van-picker-title-font-size | _var(--van-font-size-lg)_ | - |\n| --van-picker-title-line-height | _var(--van-line-height-md)_ | - |\n| --van-picker-action-padding | _0 var(--van-padding-md)_ | - |\n| --van-picker-action-font-size | _var(--van-font-size-md)_ | - |\n| --van-picker-confirm-action-color | _var(--van-primary-color)_ | - |\n| --van-picker-cancel-action-color | _var(--van-text-color-2)_ | - |\n| --van-picker-option-padding | _0 var(--van-padding-base)_ | - |\n| --van-picker-option-font-size | _var(--van-font-size-lg)_ | - |\n| --van-picker-option-text-color | _var(--van-text-color)_ | - |\n| --van-picker-option-disabled-opacity | _0.3_ | - |\n| --van-picker-mask-color | _linear-gradient_ | - |\n| --van-picker-loading-icon-color | _var(--van-primary-color)_ | - |\n| --van-picker-loading-mask-color | _rgba(255, 255, 255, 0.9)_ | - |\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Space Component\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the Vant Space component. It includes four Vant Button components as children, which will be spaced apart by the default spacing of 8px.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-space>\n  <van-button type=\"primary\">按钮</van-button>\n  <van-button type=\"primary\">按钮</van-button>\n  <van-button type=\"primary\">按钮</van-button>\n  <van-button type=\"primary\">按钮</van-button>\n</van-space>\n```\n\n----------------------------------------\n\nTITLE: Vue Setup for Lazy Render Images Array\nDESCRIPTION: This JavaScript code snippet provides the Vue setup function for the lazy render example.  It defines an `images` array containing URLs of images to be displayed in the swipe component. This `images` array is then returned from the `setup` function, making it available to the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const images = [\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n      'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n    ];\n    return { images };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Replace Conventional Changelog with GitHub Changelog\nDESCRIPTION: This code snippet describes refactoring the CLI to replace conventional changelog with GitHub changelog. It was contributed by @chenjiahan in pull request #12139.  This change uses GitHub's native changelog functionality for better integration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nrefactor(cli): 使用 GitHub 变更日志替代 conventional-changelog by [@chenjiahan](https://github.com/chenjiahan) in [#12139](https://github.com/youzan/vant/pull/12139)\n```\n\n----------------------------------------\n\nTITLE: Enabling Safe Area with Vant\nDESCRIPTION: This snippet demonstrates how to apply safe area insets to elements using Vant's CSS classes. The `van-safe-area-top` and `van-safe-area-bottom` classes are used to ensure that content is not obscured by device notches or navigation bars. It relies on the Vant CSS library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- top -->\n<div class=\"van-safe-area-top\"></div>\n\n<!-- bottom -->\n<div class=\"van-safe-area-bottom\"></div>\n```\n\n----------------------------------------\n\nTITLE: Registering Global Methods in Vue 3 JavaScript\nDESCRIPTION: Demonstrates how to register global methods like `$toast`, `$dialog`, and `$notify` in Vue 3 using `app.use`.  Since Vue 3 no longer supports directly mounting methods on Vue's prototype chain, components need to be registered to the app instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Toast, Dialog, Notify } from 'vant';\n\n// Register components such as Toast to the app\napp.use(Toast);\napp.use(Dialog);\napp.use(Notify);\n\n// Subcomponents in the app can directly call methods such as $toast\nexport default {\n  mounted() {\n    this.$toast('prompt text');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Vant CLI commands with npx\nDESCRIPTION: This snippet illustrates how to execute Vant CLI commands directly using `npx`. `npx` allows you to run locally installed command-line tools without explicitly specifying their path. This is particularly useful for one-off executions or when the tool isn't globally installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/commands.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx vant-cli dev\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Cell Component State - Vue\nDESCRIPTION: This code snippet defines the Vue setup for the checkbox with Cell example.  The checkboxRefs are an array, and the toggle method calls the toggle method of a particular checkbox ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, onBeforeUpdate } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref([]);\n    const checkboxRefs = ref([]);\n    const toggle = (index) => {\n      checkboxRefs.value[index].toggle();\n    };\n\n    onBeforeUpdate(() => {\n      checkboxRefs.value = [];\n    });\n\n    return {\n      list: ['a', 'b'],\n      toggle,\n      checked,\n      checkboxRefs,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Vant Actionbar Icons in HTML\nDESCRIPTION: This HTML code demonstrates how to add badge notifications or a small red dot to Vant ActionbarIcons. The `dot` property displays a small red dot, while the `badge` property displays a badge with the specified content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"客服\" dot />\n  <van-action-bar-icon icon=\"cart-o\" text=\"购物车\" badge=\"5\" />\n  <van-action-bar-icon icon=\"shop-o\" text=\"店铺\" badge=\"12\" />\n  <van-action-bar-button type=\"warning\" text=\"加入购物车\" />\n  <van-action-bar-button type=\"danger\" text=\"立即购买\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Mode in Vant 4.0 - HTML\nDESCRIPTION: This code snippet demonstrates how to enable dark mode for all Vant components within a specific part of the application using the `van-config-provider` component.  The `theme` attribute is set to \"dark\" to activate the dark theme.  This requires the Vant UI library to be installed and configured in the project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<van-config-provider theme=\"dark\">\n  <!-- child components -->\n</van-config-provider>\n```\n\n----------------------------------------\n\nTITLE: Vant Form Field Type Calendar - HTML\nDESCRIPTION: This code snippet demonstrates how to integrate the Vant Calendar component into a Vant Form field. It utilizes a `van-field` to display the selected date and a `van-calendar` component to present the calendar when the field is clicked.  The `v-model:show` directive on the calendar controls its visibility.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/form/README.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"result\"\n  is-link\n  readonly\n  name=\"calendar\"\n  label=\"Calendar\"\n  placeholder=\"Select date\"\n  @click=\"showCalendar = true\"\n/>\n<van-calendar v-model:show=\"showCalendar\" @confirm=\"onConfirm\" />\n```\n\n----------------------------------------\n\nTITLE: Import replacement in get-deps (Vue)\nDESCRIPTION: This snippet describes a feature that replaces imports of .vue files with .mjs files within the get-deps functionality. This likely improves module compatibility or build performance. The change impacts how dependencies are resolved during the build process.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.en-US.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfeat(get-deps): import('../foo.vue') => import('../foo.mjs') 的替换 by [@suncohey](https://github.com/suncohey) in [#12046](https://github.com/youzan/vant/pull/12046)\n```\n\n----------------------------------------\n\nTITLE: Readonly Rate Component with Half Value\nDESCRIPTION: Displays a decimal value in the Rate component when in read-only mode and half-star selection is enabled. When both `readonly` and `allow-half` are set to `true`, the component can display a floating point value. The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" readonly allow-half />\n```\n\n----------------------------------------\n\nTITLE: Head Drag Only Example - FloatingPanel - HTML\nDESCRIPTION: This example demonstrates disabling content area dragging of the FloatingPanel using the `content-draggable` attribute. Setting this attribute to `false` prevents the content within the panel from being dragged.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-panel :content-draggable=\"false\">\n  <div style=\"text-align: center; padding: 15px\">\n    <p>Content cannot be dragged</p>\n  </div>\n</van-floating-panel>\n```\n\n----------------------------------------\n\nTITLE: Customizing Circle Color - HTML\nDESCRIPTION: Customizes the colors of the Vant Circle component using the `color` and `layer-color` properties. `color` sets the progress bar color and `layer-color` sets the track color.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  layer-color=\"#ebedf0\"\n  text=\"颜色定制\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CountDownInstance Type - TypeScript\nDESCRIPTION: This code demonstrates how to use the `CountDownInstance` type to create a ref for the CountDown component and call its methods in a type-safe manner. It uses optional chaining to avoid errors if the component instance is not yet available.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CountDownInstance } from 'vant';\n\nconst countDownRef = ref<CountDownInstance>();\n\ncountDownRef.value?.start();\n```\n\n----------------------------------------\n\nTITLE: Popover Types Definition - Typescript\nDESCRIPTION: Exports types needed for Popover Component\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  PopoverProps,\n  PopoverTheme,\n  PopoverAction,\n  PopoverActionsDirection,\n  PopoverTrigger,\n  PopoverPlacement,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Rem Units\nDESCRIPTION: This snippet shows a basic PostCSS configuration for using `postcss-pxtorem` to convert `px` units to `rem` units. The `rootValue` option is set to 37.5, and `propList` is set to `['*']` to convert all properties. The configuration should be placed in `postcss.config.js`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-pxtorem': {\n      rootValue: 37.5,\n      propList: ['*'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Mark Style\nDESCRIPTION: Demonstrates the usage of the `mark` prop to style the tag as a mark.  This usually involves a specific visual style for highlighting.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-tag mark type=\"primary\">Tag</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Types in Typescript\nDESCRIPTION: Shows how to import type definitions related to the Progress component in TypeScript. Specifically, it imports `ProgressProps` and `ProgressInstance` from the `vant` library. These types can be used for type checking when working with the Progress component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/progress/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ProgressProps, ProgressInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Color in Vue Component\nDESCRIPTION: Defines the gradient color object in a Vue component using `ref` and returns it.  This enables a gradient effect on the Vant Circle component. Requires the `gradientColor` property to be passed to the circle component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentRate = ref(0);\n    const gradientColor = {\n      '0%': '#3fecff',\n      '100%': '#6149f6',\n    };\n\n    return {\n      currentRate,\n      gradientColor,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: RollingText Type Definitions - TypeScript\nDESCRIPTION: Exports type definitions for RollingText, including props, instance, direction, and stop order. These types are useful for TypeScript users to ensure type safety when working with the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  RollingTextProps,\n  RollingTextInstance,\n  RollingTextDirection,\n  RollingTextStopOrder,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Radio Mode TreeSelect Usage\nDESCRIPTION: Demonstrates using the TreeSelect component in radio mode, where only one item can be selected at a time.  It defines reactive variables for the active ID and main active index, along with the item data. Requires the 'vue' library for reactivity.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-tree-select\n  v-model:active-id=\"activeId\"\n  v-model:main-active-index=\"activeIndex\"\n  :items=\"items\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Making Vant Buttons Block Elements\nDESCRIPTION: This HTML snippet demonstrates how to make a button a block-level element using the `block` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" block>Block Element</van-button>\n```\n\n----------------------------------------\n\nTITLE: Picker with Cascade Options\nDESCRIPTION: This snippet illustrates how to create a cascading Vant Picker, where the options in one column depend on the selection in the previous column. The `columns` array contains nested `children` properties, defining the hierarchical relationships between options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const columns = [\n      {\n        text: 'Zhejiang',\n        value: 'Zhejiang',\n        children: [\n          {\n            text: 'Hangzhou',\n            value: 'Hangzhou',\n            children: [\n              { text: 'Xihu', value: 'Xihu' },\n              { text: 'Yuhang', value: 'Yuhang' },\n            ],\n          },\n          {\n            text: 'Wenzhou',\n            value: 'Wenzhou',\n            children: [\n              { text: 'Lucheng', value: 'Lucheng' },\n              { text: 'Ouhai', value: 'Ouhai' },\n            ],\n          },\n        ],\n      },\n      {\n        text: 'Fujian',\n        value: 'Fujian',\n        children: [\n          {\n            text: 'Fuzhou',\n            value: 'Fuzhou',\n            children: [\n              { text: 'Gulou', value: 'Gulou' },\n              { text: 'Taijiang', value: 'Taijiang' },\n            ],\n          },\n          {\n            text: 'Xiamen',\n            value: 'Xiamen',\n            children: [\n              { text: 'Siming', value: 'Siming' },\n              { text: 'Haicang', value: 'Haicang' },\n            ],\n          },\n        ],\n      },\n    ];\n\n    return { columns };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing NoticeBar Styles\nDESCRIPTION: This snippet shows how to customize the text color and background color of the NoticeBar component using the `color` and `background` properties. The `left-icon` is also set to \"info-o\".\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-notice-bar color=\"#1989fa\" background=\"#ecf9ff\" left-icon=\"info-o\">\n  米袋虽空——樱花开哉！\n</van-notice-bar>\n```\n\n----------------------------------------\n\nTITLE: FloatingBubble with Two-Way Binding (HTML)\nDESCRIPTION: Demonstrates using `v-model:offset` to control the position of the FloatingBubble. The `offset` prop is bound to the `offset` reactive variable, and the `axis` prop is set to 'xy' to enable free dragging.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-floating-bubble v-model:offset=\"offset\" axis=\"xy\" icon=\"chat\" />\n```\n\n----------------------------------------\n\nTITLE: Setting ImagePreview Start Position - JavaScript\nDESCRIPTION: This snippet shows how to configure the initial image displayed when using `showImagePreview`.  The `startPosition` option in the configuration object specifies the index of the image to show first.  It relies on the `vant` library for the `showImagePreview` function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  startPosition: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Default Bundle Options Configuration (TypeScript)\nDESCRIPTION: This snippet shows the default configuration for `BundleOptions`, which specifies the formats of bundled output. It configures UMD formats with and without minification, and ES/CJS formats with external dependencies. Vue is externalized by default.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst DEFAULT_OPTIONS: BundleOption[] = [\n  {\n    minify: false,\n    formats: ['umd'],\n  },\n  {\n    minify: true,\n    formats: ['umd'],\n  },\n  {\n    minify: false,\n    formats: ['es', 'cjs'],\n    external: allDependencies,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Baidu Analytics (JavaScript)\nDESCRIPTION: This snippet shows how to configure Baidu Analytics for the documentation site in `vant.config.mjs`. It uses the `site.baiduAnalytics` option, where you provide a `seed` value obtained from your Baidu Analytics code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  site: {\n    baiduAnalytics: {\n      // 打开百度统计 ->『管理』->『代码获取』\n      // find the followed URL: \"https://hm.baidu.com/hm.js?xxxxx\"\n      // add `xxxxx` in the seed\n      seed: 'xxxxx',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Notify Usage - Javascript\nDESCRIPTION: Demonstrates how to display a simple notification and then close it. It automatically closes after 3 seconds or can be closed manually. The code imports showNotify and closeNotify functions, displaying a notification that closes on its own and demonstrating manual closure.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showNotify, closeNotify } from 'vant';\n\n// 3 秒后自动关闭\nshowNotify('通知内容');\n\n// 主动关闭\ncloseNotify();\n```\n\n----------------------------------------\n\nTITLE: Displaying a Close Button - JavaScript\nDESCRIPTION: Shows how to enable and customize the close button in the ImagePreview. The `closeable` option enables the close button, and other options like `close-icon` and `close-icon-position` can further customize its appearance and placement. It imports showImagePreview from vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  closeable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Rsbuild Configuration Example (JavaScript)\nDESCRIPTION: This code snippet shows a basic configuration for Rsbuild, used for building the documentation site. It includes options for plugins, development settings, and HTML generation. Refer to the Rsbuild documentation for more details.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// rsbuild.config.mjs 或 rsbuild.config.ts\nexport default {\n  plugins: [\n    // 配置 Rsbuild 插件\n  ],\n  dev: {\n    // 与本地开发有关的选项\n  },\n  html: {\n    // 与 HTML 生成有关的选项\n  },\n  // 其他选项\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Versions (JavaScript)\nDESCRIPTION: This snippet shows how to configure the multi-version settings for the documentation site in `vant.config.mjs`. It uses the `site.versions` option to specify an array of version objects, each with a label and a link to the corresponding version's documentation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  site: {\n    versions: [\n      {\n        label: 'v1',\n        link: '/v1/',\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring module Option\nDESCRIPTION: The `module` option sets the type of module to be imported ('esm' or 'cjs'). This option is configured within the `VantResolver` options.  It controls the type of import statements generated.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  resolvers: [\n    VantResolver({\n      module: 'cjs',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with animated transitions in Vue\nDESCRIPTION: This snippet demonstrates how to enable animated transitions between tabs using the animated attribute. When animated is set to true, a smooth transition animation will be displayed when switching between tabs. The example uses `v-for` to generate dynamic tabs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" animated>\n  <van-tab v-for=\"index in 4\" :title=\"'标签 ' + index\">\n    内容 {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Tabbar with Named Tabs - HTML\nDESCRIPTION: Illustrates using named tabs in the Vant Tabbar component.  Each `van-tabbar-item` has a `name` attribute, and the `v-model` is bound to a string value representing the selected tab's name.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-tabbar v-model=\"active\">\n  <van-tabbar-item name=\"home\" icon=\"home-o\">标签</van-tabbar-item>\n  <van-tabbar-item name=\"search\" icon=\"search\">标签</van-tabbar-item>\n  <van-tabbar-item name=\"friends\" icon=\"friends-o\">标签</van-tabbar-item>\n  <van-tabbar-item name=\"setting\" icon=\"setting-o\">标签</van-tabbar-item>\n</van-tabbar>\n```\n\n----------------------------------------\n\nTITLE: Setting Date Range - JavaScript\nDESCRIPTION: Sets the minimum and maximum selectable dates for the Vant Calendar component.  This example sets the range to January 1st to January 31st, 2010. Requires the Vue Composition API for reactive management of the `show` state.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n\n    return {\n      show,\n      minDate: new Date(2010, 0, 1),\n      maxDate: new Date(2010, 0, 31),\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding closeOnClickOverlay Option to ImagePreview\nDESCRIPTION: This code snippet describes the feature of adding the closeOnClickOverlay option to the ImagePreview component. It was contributed by @chenjiahan in pull request #12153.  This allows users to close the image preview by clicking on the overlay.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nfeat(ImagePreview): 添加 closeOnClickOverlay 选项，由 [@chenjiahan](https://github.com/chenjiahan) 在 [#12153](https://github.com/youzan/vant/pull/12153) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Basic Vant Image Usage in HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Image component in an HTML template, setting the width, height, and src attributes.  This snippet showcases the most straightforward implementation, mirroring the functionality of a standard HTML img tag but utilizing the Vant component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-image\n  width=\"100\"\n  height=\"100\"\n  src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Page Navigation - HTML\nDESCRIPTION: Shows how to use the `to` and `url` properties to navigate to different pages. The `to` property is used for Vue Router navigation, while the `url` property is used for standard URL navigation.  The `clickable` property enables click feedback.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-grid clickable :column-num=\"2\">\n  <van-grid-item icon=\"home-o\" text=\"路由跳转\" to=\"/\" />\n  <van-grid-item icon=\"search\" text=\"URL 跳转\" url=\"https://github.com\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Vant Sidebar with Dot and Badge\nDESCRIPTION: This HTML snippet demonstrates how to use the `dot` and `badge` properties on the `van-sidebar-item` component.  The `dot` property displays a small red dot in the upper right corner of the item. The `badge` property displays a badge with the specified content in the upper right corner of the item. These are used to highlight specific sidebar items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-sidebar v-model=\"active\">\n  <van-sidebar-item title=\"标签名称\" dot />\n  <van-sidebar-item title=\"标签名称\" badge=\"5\" />\n  <van-sidebar-item title=\"标签名称\" />\n</van-sidebar>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver in Vue CLI\nDESCRIPTION: This configures the Vant resolver in a Vue CLI project using unplugin-auto-import and unplugin-vue-components. It imports the necessary modules and adds the VantResolver to the resolvers array within the configureWebpack option.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nimport AutoImport from 'unplugin-auto-import/webpack';\nimport Components from 'unplugin-vue-components/webpack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      AutoImport({\n        resolvers: [VantResolver()],\n      }),\n      Components({\n        resolvers: [VantResolver()],\n      }),\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Clearfix for Float Layouts with Vant Class HTML\nDESCRIPTION: Shows how to clear floats in a float layout using Vant's CSS class `van-clearfix`. This class prevents the parent element from collapsing when it contains floated children. No external dependencies are required, as these are built-in Vant styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.zh-CN.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"van-clearfix\"></div>\n```\n\n----------------------------------------\n\nTITLE: Styling Dialog with Round Buttons - JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the Dialog component by setting the `theme` option to `round-button`. This applies a rounded button style to the dialog's buttons.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n\nshowDialog({\n  title: 'Title',\n  message: 'The code is written for people to see and can be run on a machine.',\n  theme: 'round-button',\n}).then(() => {\n  // on close\n});\n\nshowDialog({\n  message:\n    'Life is far more than just spinning and being busy to the limit, and human experiences are much broader and richer than this.',\n  theme: 'round-button',\n}).then(() => {\n  // on close\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver with Webpack\nDESCRIPTION: Integrate VantResolver into a Webpack project using unplugin-auto-import and unplugin-vue-components. The resolver is added to the `resolvers` array within the plugin options for both AutoImport and Components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// webpack.config.js\nimport AutoImport from 'unplugin-auto-import/webpack';\nimport Components from 'unplugin-vue-components/webpack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nmodule.exports = {\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Disable Option Picker HTML\nDESCRIPTION: This HTML snippet renders a Vant Picker with a disabled option using the `disabled` property in the javascript section.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-picker :columns=\"columns\" />\n```\n\n----------------------------------------\n\nTITLE: Skeleton Typescript Definitions\nDESCRIPTION: This snippet showcases the typescript definitions that are exported from the vant module for the Skeleton Component, including props for the main component and it's sub components. This is useful for type checking and hinting when building applications with typescript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  SkeletonProps,\n  SkeletonImageProps,\n  SkeletonTitleProps,\n  SkeletonImageShape,\n  SkeletonAvatarShape,\n  SkeletonParagraphProps,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing NoticeBar Component with Vue\nDESCRIPTION: This snippet demonstrates how to globally register the NoticeBar component in a Vue application using the createApp function. It imports the NoticeBar component from the vant library and registers it using app.use().\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { NoticeBar } from 'vant';\n\nconst app = createApp();\napp.use(NoticeBar);\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive 'activeName' for Accordion Collapse\nDESCRIPTION: This Javascript snippet sets up the reactive `activeName` property using Vue's `ref` for the accordion example. It initializes `activeName` with '1', indicating that the first panel is initially active. The property is then returned for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeName = ref('1');\n    return { activeName };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Options for Toasts - Vue\nDESCRIPTION: Globally modifies the default configuration options for the Toast component using setToastDefaultOptions and resetToastDefaultOptions.  These changes affect all subsequent showToast calls.  Requires the setToastDefaultOptions and resetToastDefaultOptions functions from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setToastDefaultOptions, resetToastDefaultOptions } from 'vant';\n\nsetToastDefaultOptions({ duration: 2000 });\n\nsetToastDefaultOptions('loading', { forbidClick: true });\n\nresetToastDefaultOptions();\n\nresetToastDefaultOptions('loading');\n```\n\n----------------------------------------\n\nTITLE: Uploader Type Definitions Import (TypeScript)\nDESCRIPTION: Imports type definitions for the Vant Uploader component. These types are used to define the shape of the props, instance, result, file list item, before read and after read events for the Uploader component. This allows for type-safe usage of the Uploader.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  UploaderProps,\n  UploaderInstance,\n  UploaderResultType,\n  UploaderFileListItem,\n  UploaderBeforeRead,\n  UploaderAfterRead,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Mark Style\nDESCRIPTION: This snippet shows how to create a Vant Tag with a mark style (half-rounded corners) using the `mark` attribute.  This style is often used to highlight or emphasize a particular tag.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-tag mark type=\"primary\">标签</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Empty Component Type Definition\nDESCRIPTION: Imports the type definition for Empty component props in Typescript. This allows developers to get type checking and autocompletion when using the `EmptyProps` interface in their code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { EmptyProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Importing @vant/touch-emulator\nDESCRIPTION: Imports the `@vant/touch-emulator` module in a JavaScript file. This module automatically converts mouse events into touch events, allowing Vant components to function correctly in PC browsers. No further configuration is needed after importing.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Just import this module, then Vant works in PC browser\nimport '@vant/touch-emulator';\n```\n\n----------------------------------------\n\nTITLE: CouponInfo Type Definition\nDESCRIPTION: This TypeScript snippet imports type definitions related to the CouponCell and CouponList components from the 'vant' library. These types are useful for ensuring type safety when working with the coupon components and their props in a TypeScript Vue project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CouponCellProps, CouponListProps, CouponInfo } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Area List Data Structure\nDESCRIPTION: Defines the structure of the `areaList` object required by the Vant Area component.  It consists of three keys: `province_list`, `city_list`, and `county_list`, each containing a mapping of area codes to names.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst areaList = {\n  province_list: {\n    110000: '北京市',\n    120000: '天津市',\n  },\n  city_list: {\n    110100: '北京市',\n    120100: '天津市',\n  },\n  county_list: {\n    110101: '东城区',\n    110102: '西城区',\n    // ....\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Cell and CellGroup Components - Vue\nDESCRIPTION: This snippet demonstrates how to install the `Cell` and `CellGroup` components from the Vant library in a Vue.js application. It imports the necessary components and registers them globally using `app.use`. This allows you to use the components in your templates without having to import them in each component file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Cell, CellGroup } from 'vant';\n\nconst app = createApp();\napp.use(Cell);\napp.use(CellGroup);\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar Color - HTML\nDESCRIPTION: Demonstrates how to customize the color scheme of the Vant Calendar component.  The `color` prop allows you to specify the color for the bottom button and selected date.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" color=\"#ee0a24\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up data for custom Radio Icons\nDESCRIPTION: Sets up reactive data to use custom icons for active and inactive radio states, leveraging external image URLs.  It exposes the reactive `checked`, `activeIcon`, and `inactiveIcon` variables to the template for dynamic icon switching.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref('1');\n    return {\n      checked,\n      activeIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-active.png',\n      inactiveIcon:\n        'https://fastly.jsdelivr.net/npm/@vant/assets/user-inactive.png',\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Row Count TextEllipsis - Vue JavaScript\nDESCRIPTION: Defines the Vue component's setup function with a long text string for demonstrating custom row counts. It initializes a `text` variable with a sample string and returns it to be used in the template. Requires Vue's `setup` function to be used within a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text =\n      '那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Cell Component - Vue\nDESCRIPTION: This code snippet demonstrates how to use the Checkbox component in conjunction with the Cell and CellGroup components.  The toggle method from the Checkbox instance is used to toggle the cell.  The click.stop event prevents the Cell's click event from firing on the Checkbox itself.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox-group v-model=\"checked\">\n  <van-cell-group inset>\n    <van-cell\n      v-for=\"(item, index) in list\"\n      clickable\n      :key=\"item\"\n      :title=\"`复选框 ${item}`\"\n      @click=\"toggle(index)\"\n    >\n      <template #right-icon>\n        <van-checkbox\n          :name=\"item\"\n          :ref=\"el => checkboxRefs[index] = el\"\n          @click.stop\n        />\n      </template>\n    </van-cell>\n  </van-cell-group>\n</van-checkbox-group>\n```\n\n----------------------------------------\n\nTITLE: Importing Field Types from Vant (TypeScript)\nDESCRIPTION: This snippet imports various type definitions related to the Field component from the Vant library. These types are essential for TypeScript users to ensure type safety and proper usage of the Field component's features such as rules, props, instances, text alignment, error handling, autosizing and validation.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  FieldType,\n  FieldRule,\n  FieldProps,\n  FieldInstance,\n  FieldTextAlign,\n  FieldRuleMessage,\n  FieldClearTrigger,\n  FieldFormatTrigger,\n  FieldRuleValidator,\n  FieldRuleFormatter,\n  FieldValidateError,\n  FieldAutosizeConfig,\n  FieldValidateTrigger,\n  FieldValidationStatus,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Event Naming Adjustment: Vant 3 vs Vant 4 - JavaScript\nDESCRIPTION: This code snippet illustrates the event naming convention change from Vant 3 to Vant 4. Vant 4 uses camelCase for event names, as recommended by Vue. The snippet shows how events were emitted in Vant 3 using dash-case and how they are emitted in Vant 4 using camelCase.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nemit('click-input');\n\n// Vant 4\nemit('clickInput');\n```\n\n----------------------------------------\n\nTITLE: Accessing NoticeBar Instance in Vue with TypeScript\nDESCRIPTION: This snippet demonstrates how to access the NoticeBar instance using `ref` in Vue and call the `reset` method. It imports `ref` from `vue` and `NoticeBarInstance` from `vant`.  The `noticeBarRef.value?.reset()` call shows how to access the instance and call a method on it.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { NoticeBarInstance } from 'vant';\n\nconst noticeBarRef = ref<NoticeBarInstance>();\n\nnoticeBarRef.value?.reset();\n```\n\n----------------------------------------\n\nTITLE: Package.json Typings Entry (JSON)\nDESCRIPTION: This JSON snippet shows how to add the typings entry to the package.json file, which tells TypeScript where to find the type declaration files for the component library. This allows TypeScript users to get type checking and autocompletion when using the component library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.zh-CN.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typings\": \"lib/index.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Variables via :root - CSS\nDESCRIPTION: This CSS code demonstrates how to modify CSS variables using the `:root` selector to ensure proper inheritance.  Setting the `--van-primary-color` variable to red affects all components that use this variable.  This is a global change that affects all components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/config-provider/README.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --van-primary-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the Grid component to display a simple grid with four items.  Each grid item includes an icon and text, specified using the `icon` and `text` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-grid>\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Removing Source Style Files (JavaScript)\nDESCRIPTION: This snippet illustrates how to configure the removal of source style files after the build process in `vant.config.mjs`. It uses the `build.css.removeSourceFile` option to control whether the original style files are deleted after the build is complete.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  build: {\n    css: {\n      removeSourceFile: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Uploader Component - Vue\nDESCRIPTION: Registers the Uploader component globally in a Vue application. It imports the createApp and Uploader modules from vue and vant respectively, then uses app.use() to register the Uploader component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Uploader } from 'vant';\n\nconst app = createApp();\napp.use(Uploader);\n```\n\n----------------------------------------\n\nTITLE: Autosize for Textarea Field\nDESCRIPTION: This example demonstrates how to use the `autosize` property to make a `van-field` component with `type=\"textarea\"` automatically adjust its height based on the content.  The `rows` attribute initially sets the number of visible text rows. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"message\"\n    rows=\"1\"\n    autosize\n    label=\"留言\"\n    type=\"textarea\"\n    placeholder=\"请输入留言\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Managing Loading State for Vant Skeleton - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to manage the loading state using Vue's reactivity system (`ref` and `onMounted`). Initially, the `loading` state is set to `true`, causing the skeleton to display.  After the component is mounted, `loading` is set to `false`, revealing the actual content. The `loading` variable is exposed in the return statement of the `setup` function, making it accessible within the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, onMounted } from 'vue';\n\nexport default {\n  setup() {\n    const loading = ref(true);\n\n    onMounted(() => {\n      loading.value = false;\n    });\n\n    return {\n      loading,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Auto Import Resolver\nDESCRIPTION: Install the necessary packages using npm, yarn, pnpm, or bun. This includes @vant/auto-import-resolver, unplugin-vue-components, and unplugin-auto-import as development dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# via npm\nnpm i @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# via yarn\nyarn add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# via pnpm\npnpm add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# via Bun\nbun add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n```\n\n----------------------------------------\n\nTITLE: Renaming GoodsAction Component HTML\nDESCRIPTION: Illustrates the renaming of the GoodsAction component to ActionBar in Vant v3. It shows the corresponding HTML structures for both Vant v2 and Vant v3, demonstrating how to update the component name and its child components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-goods-action>\n  <van-goods-action-icon text=\"icon\" />\n  <van-goods-action-button text=\"button\" />\n</van-goods-action>\n\n<!-- Vant 3 -->\n<van-action-bar>\n  <van-action-bar-icon text=\"icon\" />\n  <van-action-bar-button text=\"button\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Allowing Multiple Toasts Simultaneously\nDESCRIPTION: This code snippet illustrates how to enable the display of multiple toasts at the same time by calling `allowMultipleToast()`.  It shows how to create and close multiple toasts using `showToast` and `showSuccessToast` functions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast, showSuccessToast, allowMultipleToast } from 'vant';\n\nallowMultipleToast();\n\nconst toast1 = showToast('First Toast');\nconst toast2 = showSuccessToast('Second Toast');\n\ntoast1.close();\ntoast2.close();\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Library using NPM\nDESCRIPTION: These commands install the Vant component library using npm. The first command installs the latest version for Vue 3 projects, while the second command installs Vant 2 for Vue 2 projects. The installation process requires npm to be installed on your system.\nSOURCE: https://github.com/youzan/vant/blob/main/README.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Vue 3 项目，安装最新版 Vant\nnpm i vant\n\n# Vue 2 项目，安装 Vant 2\nnpm i vant@latest-v2\n```\n\n----------------------------------------\n\nTITLE: Switching Languages in Vant with Locale.use\nDESCRIPTION: This snippet demonstrates how to switch the language used by Vant components using the `Locale.use` method. It imports the `Locale` component and an English language pack, then sets the current language to English (en-US).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/locale/README.zh-CN.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Locale } from 'vant';\n// 引入英文语言包\nimport enUS from 'vant/es/locale/lang/en-US';\n\nLocale.use('en-US', enUS);\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Text - HTML\nDESCRIPTION: Customizes the text displayed on the confirmation button of the Vant Calendar component. The `confirm-text` prop sets the default text, while `confirm-disabled-text` sets the text when the button is disabled. This allows for more contextual and user-friendly button labels.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar\n  v-model:show=\"show\"\n  type=\"range\"\n  confirm-text=\"完成\"\n  confirm-disabled-text=\"请选择结束时间\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Steps Component with Vue\nDESCRIPTION: Registers the Step and Steps components globally using app.use in a Vue application. This makes the components available for use in templates without needing to import them in each component file.  It depends on the 'vue' library for creating the app instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/steps/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Step, Steps } from 'vant';\n\nconst app = createApp();\napp.use(Step);\napp.use(Steps);\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Usage in HTML\nDESCRIPTION: This snippet demonstrates the basic usage of the Vant Skeleton component in an HTML template. It includes a title and specifies the number of paragraph rows to display using the `title` and `row` props respectively.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton title :row=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Value with NumberKeyboard\nDESCRIPTION: Defines the Vue setup for managing the bound value and visibility of the NumberKeyboard.  The `value` ref is used to store the input, and the `show` ref controls the keyboard's display.\n\nDependencies: Requires Vue 3.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/number-keyboard/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(true);\n    const value = ref('');\n    return {\n      show,\n      value,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Picker Instance - TypeScript\nDESCRIPTION: Demonstrates how to access the Vant Picker instance using a ref in Vue and call its methods. It imports `ref` from 'vue' and the `PickerInstance` type from 'vant'.  It initializes a ref named `pickerRef` with type `PickerInstance` and then calls the `confirm` method on the instance, if it exists.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { PickerInstance } from 'vant';\n\nconst pickerRef = ref<PickerInstance>();\n\npickerRef.value?.confirm();\n```\n\n----------------------------------------\n\nTITLE: Setting Input Alignment\nDESCRIPTION: This example shows how to set the alignment of the input text within a `van-field` component using the `input-align` property. Available values include `center` and `right`. Default is left. Required dependency: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.zh-CN.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group inset>\n  <van-field\n    v-model=\"value\"\n    label=\"文本\"\n    placeholder=\"输入框内容右对齐\"\n    input-align=\"right\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Icon\nDESCRIPTION: These code snippets demonstrate how to customize the icon displayed in a toast using the `icon` option. The first example uses an icon name ('like-o'), while the second example uses an image URL. It also shows how to customize the loading type using the `loadingType` option.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast, showLoadingToast } from 'vant';\n\nshowToast({\n  message: 'Custom Icon',\n  icon: 'like-o',\n});\n\nshowToast({\n  message: 'Custom Image',\n  icon: 'https://fastly.jsdelivr.net/npm/@vant/assets/logo.png',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshowLoadingToast({\n  message: 'Loading...',\n  forbidClick: true,\n  loadingType: 'spinner',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing CountDown Component - JavaScript\nDESCRIPTION: This code snippet demonstrates how to globally register the CountDown component from the Vant library in a Vue.js application. It imports the necessary modules and uses the `app.use()` method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { CountDown } from 'vant';\n\nconst app = createApp();\napp.use(CountDown);\n```\n\n----------------------------------------\n\nTITLE: Cloning Vant Repository\nDESCRIPTION: This bash script clones the Vant UI repository from GitHub, enables pnpm package manager, installs dependencies, and starts the development server. It requires Node.js >= 18 and pnpm to be installed globally.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/contribution.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆仓库\ngit clone git@github.com:vant-ui/vant.git\n\n# 启用 pnpm 包管理器\ncorepack enable\n\n# 安装依赖\npnpm i\n\n# 进入开发模式，浏览器访问 localhost\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Horizontal Popover Logic - Vue\nDESCRIPTION: Provides the JavaScript logic for the horizontal Popover example.  It uses `ref` to manage the Popover's visibility and defines the `actions` array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: '选项一' },\n      { text: '选项二' },\n      { text: '选项三' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Collapse and CollapseItem Vant components\nDESCRIPTION: This code snippet demonstrates how to import and register the `Collapse` and `CollapseItem` components from the Vant library within a Vue.js application. It utilizes `app.use` to make these components globally available for use in templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Collapse, CollapseItem } from 'vant';\n\nconst app = createApp();\napp.use(Collapse);\napp.use(CollapseItem);\n```\n\n----------------------------------------\n\nTITLE: PickerGroup with Next Step Button - HTML (Vue)\nDESCRIPTION: Demonstrates the usage of the `next-step-text` prop on the PickerGroup component to enable a \"Next Step\" button in the header. This feature guides the user through multiple pickers step-by-step.  The example shows date and time pickers within the group.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"预约日期\"\n  :tabs=\"['选择日期', '选择时间']\"\n  next-step-text=\"下一步\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"currentDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-time-picker v-model=\"currentTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Setting Vant Icon Size\nDESCRIPTION: Sets the size of a Vant Icon using the `size` property. Accepts numeric values (interpreted as pixels) or string values with CSS units (e.g., '3rem'). Requires the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- 不指定单位，默认使用 px -->\n<van-icon name=\"chat-o\" size=\"40\" />\n<!-- 指定使用 rem 单位 -->\n<van-icon name=\"chat-o\" size=\"3rem\" />\n```\n\n----------------------------------------\n\nTITLE: Event Naming - Javascript\nDESCRIPTION: This Javascript example shows how to emit events with camel case naming in Vant 4.0. This aligns with Vue's recommended naming convention.  Template code is unaffected, but JSX code needs to use camel case.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Vant 3\nemit('click-input');\n\n// Vant 4\nemit('clickInput');\n```\n\n----------------------------------------\n\nTITLE: useToggle Type Definition\nDESCRIPTION: Defines the TypeScript type signature for the useToggle hook, specifying the input parameter (defaultValue: boolean) and the return type (a tuple containing a Ref<boolean> and a function to toggle the value). This helps understand the expected usage and return values of the hook.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-toggle.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useToggle(\n  defaultValue: boolean,\n): [Ref<boolean>, (newValue: boolean) => void];\n```\n\n----------------------------------------\n\nTITLE: Full Registration of Vant Components\nDESCRIPTION: Demonstrates global registration of all Vant components. This imports the entire Vant library and registers all components. This is convenient but increases bundle size. The Lazyload directive must be registered separately.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vant from 'vant';\nimport { createApp } from 'vue';\n\nconst app = createApp();\n\napp.use(Vant);\n\n// The Lazyload directive needs to be registered separately\napp.use(vant.Lazyload);\n```\n\n----------------------------------------\n\nTITLE: Replacing SwitchCell Component - HTML\nDESCRIPTION: This snippet shows how to replace the deprecated SwitchCell component in Vant 2 with a combination of Cell and Switch components in Vant 3. It illustrates the alternative structure to achieve the same functionality.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-switch-cell title=\"标题\" v-model=\"checked\" />\n\n<!-- Vant 3 -->\n<van-cell center title=\"标题\">\n  <template #right-icon>\n    <van-switch v-model=\"checked\" size=\"24\" />\n  </template>\n</van-cell>\n```\n\n----------------------------------------\n\nTITLE: Template Code Example - HTML\nDESCRIPTION: This code snippet demonstrates how the template code for Vant components remains compatible between Vant 3 and Vant 4 despite the event naming convention change to camelCase. Vue automatically handles the formatting of the event name in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<!-- The following code works as usual without any changes -->\n<van-field @click-input=\"onClick\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vant with Yarn/Pnpm/Bun\nDESCRIPTION: These commands install the Vant UI library using yarn, pnpm, and bun package managers. Each command installs the latest version of Vant using the respective package manager. They are executed in a terminal or command prompt.\nSOURCE: https://github.com/youzan/vant/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# with yarn\nyarn add vant\n\n# with pnpm\npnpm add vant\n\n# with Bun\nbun add vant\n```\n\n----------------------------------------\n\nTITLE: Setting up reactive data for RadioGroup\nDESCRIPTION: Sets up the reactive 'checked' variable using Vue's `ref` function.  The initial value is set to '1', corresponding to the initially selected radio button. The reactive `checked` variable is exposed to the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const checked = ref('1');\n    return { checked };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Declarations for useEventListener in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definitions for the `useEventListener` hook and its options. It defines the `Options` type, which includes `target`, `capture`, and `passive` properties.  It also defines the function signature for `useEventListener`, specifying the types of its parameters and return value (a cleanup function).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-event-listener.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  target?: EventTarget | Ref<EventTarget>;\n  capture?: boolean;\n  passive?: boolean;\n};\n\nfunction useEventListener(\n  type: string,\n  listener: EventListener,\n  options?: Options,\n): () => void;\n\n```\n\n----------------------------------------\n\nTITLE: Vue.js component logic for Notify\nDESCRIPTION: Provides the Vue.js component logic to control the visibility of the Notify component. Uses ref from 'vue' to manage the show state and includes a setTimeout function to automatically hide the notification after a specified duration.  The component demonstrates reactive state management with Vue's composition API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n\n    const showNotify = () => {\n      show.value = true;\n      setTimeout(() => {\n        show.value = false;\n      }, 2000);\n    };\n\n    return {\n      show,\n      showNotify,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Position of Vant BackTop\nDESCRIPTION: This example shows how to customize the position of the Vant BackTop component using the `right` and `bottom` props. The HTML part includes a list of `van-cell` components and the `van-back-top` component with custom `right` and `bottom` attributes. The JavaScript part sets up the component's data, a list of 50 items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n<van-back-top right=\"15vw\" bottom=\"10vh\" />\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Barrage Control with Vue Composition API\nDESCRIPTION: This TypeScript code demonstrates advanced control over the barrage using Vue's Composition API. It uses `ref` to create reactive variables for the barrage data (`list`), the barrage instance (`barrage`), and the play/pause state (`isPlay`). The `useToggle` composable function is used to manage the play/pause state, and a `watch` effect is used to call the `play` and `pause` methods on the barrage instance when the `isPlay` state changes.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const defaultList = [\n      { id: 100, text: 'Lightweight' },\n      { id: 101, text: 'Customizable' },\n      { id: 102, text: 'Mobile' },\n      { id: 103, text: 'Vue' },\n      { id: 104, text: 'Library' },\n      { id: 105, text: 'VantUI' },\n      { id: 106, text: '666' },\n    ];\n\n    const list = ref([...defaultList]);\n    const barrage = ref<BarrageInstance>();\n    const add = () => {\n      list.value.push({ id: Math.random(), text: 'Barrage' });\n    };\n\n    const [isPlay, toggle] = useToggle(false);\n\n    watch(isPlay, () => {\n      if (isPlay.value) barrage.value?.play();\n      else barrage.value?.pause();\n    });\n\n    return { list, barrage, isPlay, toggle, add };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Calendar Instance Usage (TypeScript)\nDESCRIPTION: Demonstrates how to obtain a reference to a Vant Calendar instance using `ref` from Vue and how to call methods on the instance, such as `reset`. This enables programmatic control and interaction with the Calendar component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CalendarInstance } from 'vant';\n\nconst calendarRef = ref<CalendarInstance>();\n\ncalendarRef.value?.reset();\n```\n\n----------------------------------------\n\nTITLE: Installing Vant CLI\nDESCRIPTION: These commands install the Vant CLI package as a development dependency using various package managers. The -D flag ensures it's installed as a dev dependency.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/README.zh-CN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# 通过 npm\nnpm i @vant/cli -D\n\n# 通过 yarn\nyarn add @vant/cli -D\n\n# 通过 pnpm\npnpm add @vant/cli -D\n\n# 通过 Bun\nbun add @vant/cli -D\n```\n\n----------------------------------------\n\nTITLE: Loading State Picker HTML\nDESCRIPTION: This HTML snippet renders a Vant Picker with a loading indicator.  The `:loading` attribute is bound to the `loading` ref from the javascript section.  The picker's initial selection will correspond to the initial value of the `selectedValues` array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker/README.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<van-picker title=\"Title\" :columns=\"columns\" :loading=\"loading\" />\n```\n\n----------------------------------------\n\nTITLE: Using Vant Components in <script setup>\nDESCRIPTION: Shows how to use Vant components directly within Vue's `<script setup>` syntax. This eliminates the need for explicit component registration. Requires Vue 3 and the Vant component library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<script setup>\n  import { Button } from 'vant';\n</script>\n\n<template>\n  <Button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Viewport Units\nDESCRIPTION: Example configuration for PostCSS using the `postcss-px-to-viewport` plugin. Transforms `px` units to viewport units (vw, vh, vmin, vmax) for responsive design. Requires PostCSS and `postcss-px-to-viewport` to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-px-to-viewport': {\n      viewportWidth: 375,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: useScrollParent Hook Type Definition\nDESCRIPTION: This TypeScript code defines the type definition for the useScrollParent hook. It takes a Ref<Element | undefined> as input (the element to find the scroll parent for) and returns a Ref<Element | Window | undefined> representing the scrollable parent element or window.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-scroll-parent.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useScrollParent(\n  element: Ref<Element | undefined>,\n): Ref<Element | Window | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Installing Vant via yarn, pnpm, or bun\nDESCRIPTION: Shows how to install Vant using yarn, pnpm, and bun, which are alternative package managers to npm. These commands add Vant as a dependency to the project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 yarn 安装\nyarn add vant\n\n# 通过 pnpm 安装\npnpm add vant\n\n# 通过 Bun 安装\nbun add vant\n```\n\n----------------------------------------\n\nTITLE: Custom ActionSheet Content - HTML\nDESCRIPTION: Demonstrates how to customize the content of the ActionSheet using slots, and adds a title. It includes custom content within the ActionSheet component using the default slot. Also adds some basic styling to the content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-action-sheet v-model:show=\"show\" title=\"标题\">\n  <div class=\"content\">内容</div>\n</van-action-sheet>\n\n<style>\n  .content {\n    padding: 16px 16px 160px;\n  }\n</style>\n```\n\nLANGUAGE: css\nCODE:\n```\n  .content {\n    padding: 16px 16px 160px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Vant Components in JSX/TSX\nDESCRIPTION: This code snippet shows how to use Vant components directly within JSX or TSX. No registration is required.  The component (e.g., Button) is imported from 'vant' and used within the `render` function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'vant';\n\nexport default {\n  render() {\n    return <Button />;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver with Rspack\nDESCRIPTION: Integrate VantResolver into a Rspack project using unplugin-auto-import and unplugin-vue-components. The resolver is added to the `resolvers` array within the plugin options for both AutoImport and Components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// rspack.config.js\nimport AutoImport from 'unplugin-auto-import/rspack';\nimport Components from 'unplugin-vue-components/rspack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nmodule.exports = {\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing IndexBar and IndexAnchor - Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the `IndexBar` and `IndexAnchor` components from the Vant library in a Vue application. It imports the necessary modules and uses the `app.use()` method to register the components for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { IndexBar, IndexAnchor } from 'vant';\n\nconst app = createApp();\napp.use(IndexBar);\napp.use(IndexAnchor);\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeSelect Component - JavaScript\nDESCRIPTION: Registers the TreeSelect component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses the TreeSelect component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { TreeSelect } from 'vant';\n\nconst app = createApp();\napp.use(TreeSelect);\n```\n\n----------------------------------------\n\nTITLE: Custom Vant Empty Component Image URL\nDESCRIPTION: This snippet demonstrates how to use a custom image URL with the Vant Empty component using the `image` prop. It also sets the `image-size` for the custom image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-empty\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg\"\n  image-size=\"80\"\n  description=\"Description\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useToggle Hook (Default Value)\nDESCRIPTION: Shows how to initialize the useToggle hook with a default boolean value. It imports the useToggle function and initializes it with 'true', demonstrating how to set an initial state other than the default 'false'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-toggle.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useToggle } from '@vant/use';\n\nexport default {\n  setup() {\n    const [state, toggle] = useToggle(true);\n    console.log(state.value); // -> true\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Notify Component State Management - Javascript\nDESCRIPTION: Manages the state of the Notify component in a Vue component using the Composition API.  It defines a reactive show property to control the notification's visibility and a showNotify function to toggle the visibility and close the notification after a set duration. The code imports ref from Vue, defines reactive show property, and a method to change it with a timeout.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n\n    const showNotify = () => {\n      show.value = true;\n      setTimeout(() => {\n        show.value = false;\n      }, 2000);\n    };\n\n    return {\n      show,\n      showNotify,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring exclude Option (Components)\nDESCRIPTION: The `exclude` option allows specifying components that should not be automatically imported. This option takes an array of component names. This example shows excluding the 'Button' component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  resolvers: [\n    VantResolver({\n      exclude: ['Button'],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Add Custom Iconfont - HTML\nDESCRIPTION: Uses a custom icon defined in a custom iconfont.  The `class-prefix` prop specifies the prefix for the CSS classes used to display the custom icon, and the `name` prop specifies the name of the icon within the custom font.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-icon class-prefix=\"my-icon\" name=\"extra\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Popup Component - JavaScript\nDESCRIPTION: Registers the Popup component globally within a Vue application using `app.use`. This allows the component to be used in templates without needing to be explicitly imported in each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Popup } from 'vant';\n\nconst app = createApp();\napp.use(Popup);\n```\n\n----------------------------------------\n\nTITLE: Installing Vant with npm\nDESCRIPTION: These commands install the Vant UI library using npm. The first command installs the latest Vant version for Vue 3 projects, while the second installs Vant 2 for Vue 2 projects. The commands are executed in a terminal or command prompt.\nSOURCE: https://github.com/youzan/vant/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vant\n\n# install Vant 2 for Vue 2 project\nnpm i vant@latest-v2\n```\n\n----------------------------------------\n\nTITLE: Badge and Dot Indicators - HTML\nDESCRIPTION: Demonstrates how to display a dot or badge indicator on grid items using the `dot` and `badge` properties, respectively. The `badge` property can display a number or string.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :column-num=\"2\">\n  <van-grid-item icon=\"home-o\" text=\"文字\" dot />\n  <van-grid-item icon=\"search\" text=\"文字\" badge=\"99+\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Popover Custom Content Logic - Vue\nDESCRIPTION: Provides the JavaScript logic for the Popover with custom content. It uses `ref` to manage the Popover's visibility.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    return { showPopover };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Horizontal Content Direction - HTML\nDESCRIPTION: Illustrates how to arrange the content within grid items horizontally using the `direction` property set to `horizontal`.  The `column-num` is set to 3.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-grid direction=\"horizontal\" :column-num=\"3\">\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n  <van-grid-item icon=\"photo-o\" text=\"文字\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: ShareSheet with Description (JS)\nDESCRIPTION: This JavaScript snippet demonstrates how to add descriptions to the ShareSheet and individual share options.  The `options` array contains objects with a `description` property to add option descriptions.  The main description is handled in the HTML.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showShare = ref(false);\n    const options = [\n      { name: '微信', icon: 'wechat' },\n      { name: '微博', icon: 'weibo' },\n      { name: '复制链接', icon: 'link', description: '描述信息' },\n      { name: '分享海报', icon: 'poster' },\n      { name: '二维码', icon: 'qrcode' },\n    ];\n\n    return {\n      options,\n      showShare,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: AddressEdit Event Handlers and Data - Vue\nDESCRIPTION: This code snippet shows how to define event handlers for the AddressEdit component, such as `onSave`, `onDelete`, and `onChangeDetail`. It also demonstrates how to use `ref` to manage the `searchResult` data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-edit/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const searchResult = ref([]);\n\n    const onSave = () => showToast('save');\n    const onDelete = () => showToast('delete');\n    const onChangeDetail = (val) => {\n      if (val) {\n        searchResult.value = [\n          {\n            name: 'Name1',\n            address: 'Address',\n          },\n        ];\n      } else {\n        searchResult.value = [];\n      }\n    };\n\n    return {\n      onSave,\n      onDelete,\n      areaList,\n      searchResult,\n      onChangeDetail,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Preprocessor (JavaScript)\nDESCRIPTION: This snippet shows how to set the CSS preprocessor in `vant.config.mjs`. It configures the `build.css.preprocessor` option to specify whether to use `less` or `sass` as the CSS preprocessor. `less` is used by default.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  build: {\n    css: {\n      preprocessor: 'sass',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Baidu Analytics Configuration (JavaScript)\nDESCRIPTION: This code shows how to add Baidu Analytics configuration to the documentation site, which automatically loads the Baidu Analytics script during the build.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  site: {\n    baiduAnalytics: {\n      // 打开百度统计 ->『管理』->『代码获取』\n      // 找到下面这串 URL: \"https://hm.baidu.com/hm.js?xxxxx\"\n      // 将 `xxxxx` 填写在 seed 中即可\n      seed: 'xxxxx',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Image Display with ImagePreview - JavaScript\nDESCRIPTION: Shows multiple images in the ImagePreview. It showcases the usage of showImagePreview to display an array of image URLs. This function call renders the image preview component directly in the page.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showImagePreview } from 'vant';\n\nshowImagePreview([\n  'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n  'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing useCountDown Hook JS\nDESCRIPTION: This JavaScript code initializes the useCountDown hook with a specified time of 24 hours. It starts the countdown and returns the current countdown state to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCountDown } from '@vant/use';\n\nexport default {\n  setup() {\n    const countDown = useCountDown({\n      // 倒计时 24 小时\n      time: 24 * 60 * 60 * 1000,\n    });\n\n    // 开始倒计时\n    countDown.start();\n\n    return {\n      current: countDown.current,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Options Top Content - JavaScript\nDESCRIPTION: Defines the data for the custom options top content example. Provides the code and options for the Cascader component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const code = ref('');\n    const options = [\n      {\n        name: '浙江省',\n        code: '330000',\n        items: [{ name: '杭州市', code: '330100' }],\n      },\n      {\n        name: '江苏省',\n        code: '320000',\n        items: [{ name: '南京市', code: '320100' }],\n      },\n    ];\n\n    return {\n      code,\n      options,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar Color - HTML\nDESCRIPTION: Customizes the color scheme of the Vant Calendar component using the `color` prop. This allows you to match the calendar's appearance with your application's theme, affecting the selected date and button colors.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" color=\"#ee0a24\" />\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to extend the Vant ESLint configuration within your project's ESLint configuration file (e.g., .eslintrc.json or eslint.config.js). It uses the \"extends\" property to inherit the rules and settings from @vant/eslint-config.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-eslint-config/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"@vant\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FloatingBubble Usage (JavaScript)\nDESCRIPTION: Defines the `onClick` method that's triggered when the FloatingBubble is clicked. It imports the `showToast` function from 'vant' and displays a toast message when the bubble is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onClick = () => {\n      showToast('点击气泡');\n    };\n    return { onClick };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Text Color Customization\nDESCRIPTION: Illustrates how to customize the color of the text in the Vant Loading component using `color` and `text-color` props. `color` changes both the text and icon color, while `text-color` only changes the text color.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- the color of text and icon will be changed -->\n<van-loading color=\"#0094ff\" />\n\n<!-- only change text color -->\n<van-loading text-color=\"#0094ff\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Icon with Badge and Dot\nDESCRIPTION: Demonstrates the use of the `dot` and `badge` properties to add visual indicators to the Vant Icon. `dot` displays a red dot and `badge` displays a badge with the specified content. The component requires the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-icon name=\"chat-o\" dot />\n<van-icon name=\"chat-o\" badge=\"9\" />\n<van-icon name=\"chat-o\" badge=\"99+\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Vant and Adding @vant/compat in package.json\nDESCRIPTION: This code snippet demonstrates how to update the Vant dependency to version 4 and add the @vant/compat dependency in the package.json file. It requires reinstallation of dependencies after modification.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n   \"dependencies\": {\n-    \"vant\": \"^3.0.0\",\n+    \"vant\": \"^4.0.0\",\n+    \"@vant/compat\": \"^1.0.0\",\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Site Navigation Configuration (JavaScript)\nDESCRIPTION: This code configures the left navigation of the documentation site using the site.nav property in `vant.config.mjs`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  site: {\n    nav: [\n      {\n        // 分组标题\n        title: '开发指南',\n        // 导航项\n        items: [\n          {\n            // 导航项路由\n            path: 'home',\n            // 导航项文案\n            title: '介绍',\n            // 是否隐藏当前页右侧的手机模拟器（默认不隐藏）\n            hideSimulator: true,\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Rsbuild Scaffold Project\nDESCRIPTION: This command creates a new project using Rsbuild, a build tool based on Rspack that provides first-class support for Vant. Rsbuild is recommended for creating scaffold projects. It is executed in a terminal or command prompt.\nSOURCE: https://github.com/youzan/vant/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Switch Component in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Switch component in a Vue application. It imports the necessary modules from 'vue' and 'vant' and then uses the `app.use()` method to register the Switch component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Switch } from 'vant';\n\nconst app = createApp();\napp.use(Switch);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition Import for Vant Card\nDESCRIPTION: This TypeScript code snippet shows how to import the type definition `CardProps` from the Vant library. This type definition is used to provide type checking and autocompletion when working with the `van-card` component in TypeScript projects, ensuring that the component's props are used correctly. Dependencies: Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CardProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Global Component Registration with Vant (Method 2)\nDESCRIPTION: Demonstrates global registration of a Vant component using `app.component()`.  This method imports the component and registers it by name for use throughout the application. Requires Vue 3 and the Vant component library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'vant';\nimport { createApp } from 'vue';\n\nconst app = createApp();\n\n// Method 2. Register via app.component\napp.component(Button.name, Button);\n```\n\n----------------------------------------\n\nTITLE: Popover with Disabled Actions Setup - JavaScript\nDESCRIPTION: Sets up the state needed for the Popover component with disabled actions in a Vue setup function.  It defines a reactive `showPopover` ref to control the popover's visibility and an `actions` array to populate the Popover, where some actions include a `disabled` property set to `true`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: 'Option 1', disabled: true },\n      { text: 'Option 2', disabled: true },\n      { text: 'Option 3' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CardProps Type in Typescript\nDESCRIPTION: Demonstrates how to import the `CardProps` type definition from the `vant` library in TypeScript. This type can be used to provide type checking and autocompletion for the props of the Card component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/card/README.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CardProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing Highlight Component - JavaScript\nDESCRIPTION: Registers the Vant Highlight component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then registers the Highlight component using `app.use(Highlight)`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Highlight } from 'vant';\n\nconst app = createApp();\napp.use(Highlight);\n```\n\n----------------------------------------\n\nTITLE: Importing modules from Vant in Typescript\nDESCRIPTION: This snippet shows how to import specific modules, such as showToast and buttonProps, directly from the Vant library in Typescript.  This is enabled by removing the babel-plugin-import and utilizing tree-shaking.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { showToast, buttonProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Popover with Disabled Actions - Vue\nDESCRIPTION: Demonstrates how to disable specific Popover actions using the `disabled` property in the `actions` array. Includes a reference button to trigger the popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<van-popover v-model:show=\"showPopover\" :actions=\"actions\">\n  <template #reference>\n    <van-button type=\"primary\">禁用选项</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Actionbar Components in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the ActionBar, ActionBarIcon, and ActionBarButton components from the Vant library in a Vue application. It imports the necessary modules and uses the `app.use()` method to register each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ActionBar, ActionBarIcon, ActionBarButton } from 'vant';\n\nconst app = createApp();\napp.use(ActionBar);\napp.use(ActionBarIcon);\napp.use(ActionBarButton);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver with Vite\nDESCRIPTION: Integrate VantResolver into a Vite project using unplugin-auto-import and unplugin-vue-components.  The resolver is added to the `resolvers` array within the plugin options for both AutoImport and Components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default defineConfig({\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Swipe and SwipeItem Components - JavaScript\nDESCRIPTION: Registers the Swipe and SwipeItem components globally within a Vue application. It imports the necessary modules from the 'vant' library and uses the createApp API to mount them to the app instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Swipe, SwipeItem } from 'vant';\n\nconst app = createApp();\napp.use(Swipe);\napp.use(SwipeItem);\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directory (JavaScript)\nDESCRIPTION: This snippet shows how to configure the source directory in `vant.config.mjs`. It sets the `build.srcDir` option to specify the directory containing the source code of the component library. Defaults to 'src'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  build: {\n    srcDir: 'myDir',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Actionbar in HTML\nDESCRIPTION: This code demonstrates the basic structure of a Vant Actionbar, including ActionbarIcons and ActionbarButtons. It defines the icons, text, and click event handlers for each element within the action bar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-action-bar>\n  <van-action-bar-icon icon=\"chat-o\" text=\"客服\" @click=\"onClickIcon\" />\n  <van-action-bar-icon icon=\"cart-o\" text=\"购物车\" @click=\"onClickIcon\" />\n  <van-action-bar-icon icon=\"shop-o\" text=\"店铺\" @click=\"onClickIcon\" />\n  <van-action-bar-button type=\"danger\" text=\"立即购买\" @click=\"onClickButton\" />\n</van-action-bar>\n```\n\n----------------------------------------\n\nTITLE: Initializing ContactList Component with Vue\nDESCRIPTION: This JavaScript snippet demonstrates how to install and register the ContactList component globally in a Vue application using `app.use`. It imports the necessary modules from 'vue' and 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ContactList } from 'vant';\n\nconst app = createApp();\napp.use(ContactList);\n```\n\n----------------------------------------\n\nTITLE: Rolling Non-numeric Text - JavaScript\nDESCRIPTION: Defines the textList data used in the RollingText component for non-numeric text rolling. It uses the ref function from Vue to create a reactive array of strings. Each string in the array must have the same length.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rolling-text/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const textList = ref([\n      'aaaaa',\n      'bbbbb',\n      'ccccc',\n      'ddddd',\n      'eeeee',\n      'fffff',\n      'ggggg',\n    ]);\n    return { textList };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: NoticeBar TypeScript Types\nDESCRIPTION: This TypeScript snippet demonstrates how to import the type definitions for the Vant NoticeBar component. This is useful for TypeScript projects to ensure type safety when working with the NoticeBar component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notice-bar/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NoticeBarMode, NoticeBarProps, NoticeBarInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing FloatingPanel Component in Vue\nDESCRIPTION: Registers the FloatingPanel component globally within a Vue application.  It uses Vue's `createApp` and the `use` method to make the component available throughout the application. Requires importing `createApp` from 'vue' and `FloatingPanel` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { FloatingPanel } from 'vant';\n\nconst app = createApp();\napp.use(FloatingPanel);\n```\n\n----------------------------------------\n\nTITLE: Using FieldInstance with ref in Vue (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use `ref` from Vue and `FieldInstance` from Vant to get a reference to the Field component instance. It then calls the `focus()` method on the Field component, triggering the input field to gain focus.  The code assumes that the Field component has been rendered and the ref has been properly associated.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/field/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { FieldInstance } from 'vant';\n\nconst fieldRef = ref<FieldInstance>();\n\nfieldRef.value?.focus();\n```\n\n----------------------------------------\n\nTITLE: Switching Languages in Vant with Locale\nDESCRIPTION: This code snippet demonstrates how to switch the language of a Vant application using the `Locale.use` method. It imports the `Locale` component and a specific language pack (e.g., English - US), and then calls `Locale.use` to activate the selected language.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/locale/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Locale } from 'vant';\nimport enUS from 'vant/es/locale/lang/en-US';\n\nLocale.use('en-US', enUS);\n```\n\n----------------------------------------\n\nTITLE: Initializing ContactList Component - Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the ContactList component in a Vue application. It imports the necessary modules from the Vant library and uses the `app.use()` method to register the component for use in the application. This allows you to use the ContactList component throughout your Vue application without needing to import it into each individual component file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ContactList } from 'vant';\n\nconst app = createApp();\napp.use(ContactList);\n```\n\n----------------------------------------\n\nTITLE: Enabling Safe Area Inset - Bottom\nDESCRIPTION: This snippet enables bottom safe area inset for the `van-number-keyboard` component. This is used to avoid content being obscured by the home indicator on devices like iPhone X.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!-- 开启底部安全区适配 -->\n<van-number-keyboard safe-area-inset-bottom />\n```\n\n----------------------------------------\n\nTITLE: Enabling Safe Area Inset - Top\nDESCRIPTION: This snippet enables top safe area inset for the `van-nav-bar` component. This is used to avoid content being obscured by the status bar on devices with a notch.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- 开启顶部安全区适配 -->\n<van-nav-bar safe-area-inset-top />\n```\n\n----------------------------------------\n\nTITLE: ContactEdit Types Definition\nDESCRIPTION: This TypeScript snippet shows how to import type definitions for the ContactEdit component from the Vant library. This is used for type checking and provides better code completion in IDEs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ContactEditInfo, ContactEditProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Stepper with Before Change Callback - HTML\nDESCRIPTION: An example of using the `before-change` prop to execute a callback function before the value changes.  This allows validation or asynchronous operations before updating the stepper's value.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" :before-change=\"beforeChange\" />\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Popover Logic - Vue\nDESCRIPTION: Provides the JavaScript logic for the uncontrolled Popover.  It defines the `actions` array and the `onSelect` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const actions = [\n      { text: '选项一' },\n      { text: '选项二' },\n      { text: '选项三' },\n    ];\n    const onSelect = (action) => showToast(action.text);\n    return {\n      actions,\n      onSelect,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Upload Area Style - HTML\nDESCRIPTION: Demonstrates how to customize the upload area style using the default slot. This example uses a Vant Button with an icon to create a styled upload button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader>\n  <van-button icon=\"plus\" type=\"primary\">上传文件</van-button>\n</van-uploader>\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Columns Type - HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the `columns-type` prop of the Vant DatePicker to control the columns displayed in the picker. The `:columns-type` is bound to a variable `columnsType` to dynamically configure the column structure, such as showing only year and month.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/date-picker/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-date-picker\n  v-model=\"currentDate\"\n  title=\"Choose Year-Month\"\n  :min-date=\"minDate\"\n  :max-date=\"maxDate\"\n  :columns-type=\"columnsType\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Time Range Selection Setup - Vue.js\nDESCRIPTION: Sets up reactive references for startTime and endTime and provides `onConfirm` and `onCancel` methods. This is for the Time Range selection example using the PickerGroup and TimePicker components in Vue.js.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const startTime = ref(['12', '00']);\n    const endTime = ref(['12', '00']);\n\n    const onConfirm = () => {\n      showToast(`${startTime.value.join(':')} ${endTime.value.join(':')}`);\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      endTime,\n      startTime,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Mode Data Setup - JavaScript\nDESCRIPTION: Sets up the reactive data for the Multiple Mode example.  Defines activeIds as an array, allowing multiple selections. Requires the 'vue' library for reactivity using ref.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tree-select/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeIds = ref([1, 2]);\n    const activeIndex = ref(0);\n    const items = [\n      {\n        text: 'Group 1',\n        children: [\n          { text: 'Delaware', id: 1 },\n          { text: 'Florida', id: 2 },\n          { text: 'Georgia', id: 3, disabled: true },\n        ],\n      },\n      {\n        text: 'Group 2',\n        children: [\n          { text: 'Alabama', id: 4 },\n          { text: 'Kansas', id: 5 },\n          { text: 'Louisiana', id: 6 },\n        ],\n      },\n      { text: 'Group 3', disabled: true },\n    ];\n\n    return {\n      items,\n      activeIds,\n      activeIndex,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic useClickAway Usage - HTML\nDESCRIPTION: Defines a div element with a ref named \"root\". This element will be used as the target for the useClickAway hook to detect clicks outside of it. This is a basic setup for the example.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Overlay Component - JavaScript\nDESCRIPTION: Registers the Vant Overlay component globally using the `app.use` method in a Vue application. This makes the component available for use in templates without needing to import it in each component file.  Requires the `createApp` from 'vue' and `Overlay` from 'vant' to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Overlay } from 'vant';\n\nconst app = createApp();\napp.use(Overlay);\n```\n\n----------------------------------------\n\nTITLE: Custom Column Number - HTML\nDESCRIPTION: Illustrates how to customize the number of columns in the grid using the `column-num` property. A `v-for` directive is used to dynamically generate grid items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/grid/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-grid :column-num=\"3\">\n  <van-grid-item v-for=\"value in 6\" :key=\"value\" icon=\"photo-o\" text=\"文字\" />\n</van-grid>\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Size RadioGroup - HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the icon size of the radio buttons within a RadioGroup.  The icon-size prop is used to set the size of the radio button icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\">\n  <van-radio name=\"1\" icon-size=\"24px\">Radio 1</van-radio>\n  <van-radio name=\"2\" icon-size=\"24px\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Install sass dependency\nDESCRIPTION: This command installs the sass package, which is required to compile Sass files. This command is needed since `sass` is no longer installed by default, starting from v4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/changelog.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sass\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Watermark with Vant Slot\nDESCRIPTION: Demonstrates how to create a custom watermark using HTML content within the `content` slot. Styles must be inline.  Requires the Vant Watermark component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark :width=\"150\">\n  <template #content>\n    <div style=\"background: linear-gradient(45deg, #000 0, #000 50%, #fff 50%)\">\n      <p style=\"mix-blend-mode: difference; color: #fff\">Vant watermark</p>\n    </div>\n  </template>\n</van-watermark>\n```\n\n----------------------------------------\n\nTITLE: Type Declarations for useRaf in TypeScript\nDESCRIPTION: Defines the TypeScript type declarations for the `useRaf` hook. It accepts a callback function and an options object with optional `interval` and `isLoop` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-raf.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRaf(\n  callback: () => void,\n  options: {\n    interval?: number;\n    isLoop?: boolean;\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Initializing ContactEdit component\nDESCRIPTION: This code snippet demonstrates how to import and register the ContactEdit component globally within a Vue.js application using the createApp function. It shows the basic steps for making the component available for use in your Vue templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-edit/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ContactEdit } from 'vant';\n\nconst app = createApp();\napp.use(ContactEdit);\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handling - HTML\nDESCRIPTION: Shows how to listen for click events on the popup, overlay, and close icon using the `@click-overlay` and `@click-close-icon` event listeners. A `van-cell` triggers the popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"监听点击事件\" is-link @click=\"show = true\" />\n<van-popup\n  v-model:show=\"show\"\n  position=\"bottom\"\n  :style=\"{ height: '30%' }\"\n  closeable\n  @click-overlay=\"onClickOverlay\"\n  @click-close-icon=\"onClickCloseIcon\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Standalone Badge Display\nDESCRIPTION: This snippet demonstrates how the Badge component is displayed when it doesn't have any child elements. It renders as a standalone element with the specified content.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/badge/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-badge :content=\"20\" />\n\n<van-badge :content=\"200\" max=\"99\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing FloatingPanel Component - Vue\nDESCRIPTION: Registers the FloatingPanel component globally using Vue's `app.use`.  This makes the component available for use throughout the application. Requires the `createApp` function from Vue and the `FloatingPanel` component from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-panel/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { FloatingPanel } from 'vant';\n\nconst app = createApp();\napp.use(FloatingPanel);\n```\n\n----------------------------------------\n\nTITLE: Divider with Text Content in Vant\nDESCRIPTION: This snippet shows how to add text content to a Vant Divider component in HTML. The text is rendered within the divider.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-divider>Text</van-divider>\n```\n\n----------------------------------------\n\nTITLE: Using Vant Area Data with Cascader Component (TS)\nDESCRIPTION: This code snippet shows how to import and use the useCascaderAreaData method from @vant/area-data with the Vant Cascader component.  The useCascaderAreaData method returns an object suitable for use in cascader component\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-area-data/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCascaderAreaData } from '@vant/area-data';\n\nconst cascaderAreaData = useCascaderAreaData();\n```\n\n----------------------------------------\n\nTITLE: ActionSheet with Icons - HTML\nDESCRIPTION: Renders an ActionSheet with icons on each action item. It includes a VanCell component to trigger the ActionSheet, and the ActionSheet itself, bound to the `show` property and an `actions` array containing `icon` properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell is-link title=\"展示图标\" @click=\"show = true\" />\n<van-action-sheet v-model:show=\"show\" :actions=\"actions\" @select=\"onSelect\" />\n```\n\n----------------------------------------\n\nTITLE: Pagination Types Definition (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to import the type definitions related to the Vant Pagination component. These type definitions include `PaginationMode` and `PaginationProps`, which can be used for type checking and better code completion when working with the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PaginationMode, PaginationProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Vertical Arrangement\nDESCRIPTION: Shows how to vertically arrange the icon and text content within the Vant Loading component using the vertical prop.  The loading text will appear below the loading icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-loading size=\"24px\" vertical>Loading...</van-loading>\n```\n\n----------------------------------------\n\nTITLE: Half Star Selection\nDESCRIPTION: Enables half-star selection for the Rate component. Setting the `allow-half` property allows users to select half stars. The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" allow-half />\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Change Event - HTML\nDESCRIPTION: This HTML snippet demonstrates how to listen for the `change` event emitted by the Vant Rate component when the rating changes. An `onChange` method is bound to the event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" @change=\"onChange\" />\n```\n\n----------------------------------------\n\nTITLE: Site Versions Configuration (JavaScript)\nDESCRIPTION: This code demonstrates how to configure multiple versions for the documentation site using the `site.versions` property in `vant.config.mjs`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  site: {\n    versions: [\n      {\n        label: 'v1',\n        link: '/v1/',\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Usage - JavaScript\nDESCRIPTION: Defines the `show` variable used in the basic usage example.  It uses `ref` from Vue to create a reactive variable that controls the overlay's visibility. The `setup` function returns the `show` variable to be used in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(false);\n    return { show };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage - Highlight Component Script - Vue\nDESCRIPTION: This code snippet demonstrates the setup function for the basic usage example.  It defines the `text` and `keywords` data properties, which are then returned to be used in the template. The text contains the string to be highlighted and the keywords are the terms that will be highlighted.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const text = '慢慢来，不要急，生活给你出了难题，可也终有一天会给出答案。';\n    const keywords = '难题';\n\n    return {\n      text,\n      keywords,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Class - Highlight Component Script - Vue\nDESCRIPTION: This code snippet provides the setup function for the custom class example. It defines the `text` and `keywords` data properties that are used to populate the template.  The `keywords` property specifies the string to be highlighted within the source text.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  setup() {\n    const text = '慢慢来，不要急，生活给你出了难题，可也终有一天会给出答案。';\n    const keywords = '生活';\n\n    return {\n      text,\n      keywords,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/popperjs with npm\nDESCRIPTION: This command installs the @vant/popperjs package using the npm package manager. The package provides a CommonJS-formatted version of @popperjs/core with an Object.assign polyfill. It adds the package to the project's dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-popperjs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @vant/popperjs\n```\n\n----------------------------------------\n\nTITLE: JSX Event Naming\nDESCRIPTION: Illustrates the required change to camelCase for event names in JSX when using Vant 4. In Vant 3, kebab-case was used for event names.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\n<Field onClick-input={onClick} />\n\n// Vant 4\n<Field onClickInput={onClick} />\n```\n\n----------------------------------------\n\nTITLE: Importing Vant CSS Style\nDESCRIPTION: This JavaScript snippet shows how to import the entire Vant CSS style sheet into a project. This ensures all Vant components' styles are available.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'vant/lib/index.css';\n```\n\n----------------------------------------\n\nTITLE: Vant 4 Dialog API\nDESCRIPTION: Shows the new Vant 4 Dialog API with the showDialog() function for calling the global popup component, and Dialog pointing to the Dialog component object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 4\nshowDialog(); // 函数调用\nDialog; // 组件对象\n```\n\n----------------------------------------\n\nTITLE: Vant 3 Notify API\nDESCRIPTION: Shows the previous Vant 3 Notify API with the Notify() function for calling the global Notify component, and Notify.Component pointing to the Notify component object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nNotify(); // 函数调用\nNotify.Component; // 组件对象\n```\n\n----------------------------------------\n\nTITLE: Initializing Highlight Component - Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the Vant Highlight component in a Vue application.  It imports the necessary modules and uses the `app.use` method to register the component.  This allows the component to be used throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Highlight } from 'vant';\n\nconst app = createApp();\napp.use(Highlight);\n```\n\n----------------------------------------\n\nTITLE: useEventListener Type Definitions\nDESCRIPTION: This TypeScript code snippet shows the type definitions for the `useEventListener` hook and its options. The `Options` type defines the structure for configuring the event listener, including target, capture, and passive options. It also defines the function signature for `useEventListener` including parameters for event type, listener, and options, and a return of a cleanup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-event-listener.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  target?: EventTarget | Ref<EventTarget>;\n  capture?: boolean;\n  passive?: boolean;\n};\n\nfunction useEventListener(\n  type: string,\n  listener: EventListener,\n  options?: Options,\n): () => void;\n\n```\n\n----------------------------------------\n\nTITLE: Vant Sidebar Typescript Import Statement\nDESCRIPTION: This TypeScript code snippet shows how to import the `SidebarProps` and `SidebarItemProps` types from the 'vant' library. These types can be used to provide type checking for the props of the Sidebar and SidebarItem components, improving code maintainability and reducing errors.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SidebarProps, SidebarItemProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: ContactList Type Definitions Import (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to import type definitions for the ContactList component, including `ContactListItem` and `ContactListProps`, from the 'vant' library.  This allows you to use these types for type checking in your TypeScript code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ContactListItem, ContactListProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Basic Empty Component Usage\nDESCRIPTION: Displays a basic Empty component with a descriptive text.  The `description` prop is used to set the text shown below the default image.  This example showcases the simplest way to use the Empty component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-empty description=\"描述文字\" />\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Clearable\nDESCRIPTION: This HTML snippet shows how to enable the clearable functionality in the Vant Rate component, allowing the user to reset the rating to zero by clicking the same value again.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" clearable />\n```\n\n----------------------------------------\n\nTITLE: ContactListItem Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import type definitions for the ContactListItem and ContactListProps from the Vant library. This allows you to use TypeScript to ensure type safety when working with the ContactList component and its associated data structures. By importing these types, you can define the shape of your contact list data and ensure that your code is working with the expected data types.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-list/README.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ContactListItem, ContactListProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Switch Component\nDESCRIPTION: Registers the Vant Switch component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant' and uses `app.use` to make the component available throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/switch/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Switch } from 'vant';\n\nconst app = createApp();\napp.use(Switch);\n```\n\n----------------------------------------\n\nTITLE: Creating Rsbuild project with npm\nDESCRIPTION: This command creates a new Rsbuild project. Rsbuild is a build tool based on Rspack and is recommended for scaffolding Vant projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/home.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Base Path (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the base CSS file path within the `vant.config.mjs` file.  It shows how to define the `build.css.base` option to specify the path to the global style file.  Relative paths are calculated based on the `src` directory.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  build: {\n    css: {\n      base: 'style/global.scss',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Tabbar and TabbarItem - JavaScript\nDESCRIPTION: Registers the Tabbar and TabbarItem components globally in a Vue application. This allows using the components in templates without explicitly importing them in each component file. It requires the createApp function from Vue and the Tabbar and TabbarItem components from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Tabbar, TabbarItem } from 'vant';\n\nconst app = createApp();\napp.use(Tabbar);\napp.use(TabbarItem);\n```\n\n----------------------------------------\n\nTITLE: Vant 4 Notify API\nDESCRIPTION: Shows the new Vant 4 Notify API with the showNotify() function for calling the global Notify component, and Notify pointing to the Notify component object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 4\nshowNotify(); // 函数调用\nNotify; // 组件对象\n```\n\n----------------------------------------\n\nTITLE: Toast API adjustment - Vant 3 vs Vant 4\nDESCRIPTION: Shows the change in Toast API between Vant 3 and Vant 4, demonstrating the switch from a function call to using showToast().\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nToast(); // function call\n\n// Vant 4\nshowToast(); // function call\nToast; // component object\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider ThemeVars Type Definition\nDESCRIPTION: Demonstrates how to use the ConfigProviderThemeVars type definition to provide complete type hints for theme variables.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigProviderThemeVars } from 'vant';\n\nconst themeVars: ConfigProviderThemeVars = {\n  sliderBarHeight: '4px',\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Half Star - JavaScript\nDESCRIPTION: This snippet provides the JavaScript code for the half-star example. The `value` ref is initialized to 2.5.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const value = ref(2.5);\n    return { value };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ContactCard Component\nDESCRIPTION: Registers the ContactCard component globally within a Vue.js application. This allows the component to be used in any part of the application without needing to be imported in each file.  Requires the `createApp` function from Vue.js and the `ContactCard` component from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { ContactCard } from 'vant';\n\nconst app = createApp();\napp.use(ContactCard);\n```\n\n----------------------------------------\n\nTITLE: Cascader with Area Data - HTML\nDESCRIPTION: Same HTML structure as basic usage, reusing the cascader component within a field and popup. This uses the area data to populate cascader options.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-field\n  v-model=\"fieldValue\"\n  is-link\n  readonly\n  label=\"地区\"\n  placeholder=\"请选择所在地区\"\n  @click=\"show = true\"\n/>\n<van-popup v-model:show=\"show\" round position=\"bottom\">\n  <van-cascader\n    v-model=\"cascaderValue\"\n    title=\"请选择所在地区\"\n    :options=\"options\"\n    @close=\"show = false\"\n    @finish=\"onFinish\"\n  />\n</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Creating Vant CLI Project using Yarn\nDESCRIPTION: Creates a new Vant CLI project. This command scaffolds a new project based on the Vant CLI template. It uses yarn to execute the create command, which sets up the basic project structure and dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vant-cli-app\n```\n\n----------------------------------------\n\nTITLE: Remove Source File Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure whether to remove the source files of style files after building.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  build: {\n    css: {\n      removeSourceFile: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Highlight Class - CSS\nDESCRIPTION: Defines a CSS class named `custom-class` to style the highlighted text.  It sets the text color to red, demonstrating how to override the default styling of the Highlight component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.custom-class {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Circle Component in Vue\nDESCRIPTION: Registers the Vant Circle component globally in a Vue application. It imports the necessary modules from Vue and Vant, then uses `app.use` to register the Circle component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Circle } from 'vant';\n\nconst app = createApp();\napp.use(Circle);\n```\n\n----------------------------------------\n\nTITLE: Using TextEllipsis Instance - TypeScript\nDESCRIPTION: Demonstrates how to access and use the TextEllipsis instance.  A ref is created to hold the TextEllipsis instance, and the `toggle` method is called.  Requires Vue and Vant to be installed as dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { TextEllipsisInstance } from 'vant';\n\nconst textEllipsisRef = ref<TextEllipsisInstance>();\n\ntextEllipsisRef.value?.toggle();\n```\n\n----------------------------------------\n\nTITLE: Custom Collapse Position (Middle) - Vue HTML\nDESCRIPTION: Shows how to customize the collapse position to middle in the TextEllipsis component. The `position` prop is set to `middle` so the component collapses the middle part of the content. The `rows` prop is set to 2.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis\n  rows=\"2\"\n  :content=\"text\"\n  expand-text=\"expand\"\n  collapse-text=\"collapse\"\n  position=\"middle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color in Vant Signature\nDESCRIPTION: Sets the background color of the Signature component using the `background-color` prop. The value is a string representing the desired color, e.g., '#eee' for light gray. Requires the `onSubmit` and `onClear` event handlers.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-signature background-color=\"#eee\" @submit=\"onSubmit\" @clear=\"onClear\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Component in Vue\nDESCRIPTION: Registers the Vant Empty component globally within a Vue application.  It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses the Empty component.  This enables using `<van-empty>` tags in the Vue templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Empty } from 'vant';\n\nconst app = createApp();\napp.use(Empty);\n```\n\n----------------------------------------\n\nTITLE: Installing Vant v4 using pnpm\nDESCRIPTION: Install Vant v4 and the @vant/compat compatibility package using pnpm. The @vant/compat package aids in transitioning from Vant 3 to Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add vant@^4 @vant/compat@^1\n```\n\n----------------------------------------\n\nTITLE: Vant Rate Typescript Import\nDESCRIPTION: This code snippet shows how to import the RateProps type definition from vant\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RateProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Registering Coupon Components in Vue\nDESCRIPTION: This code snippet demonstrates how to globally register the `CouponCell` and `CouponList` components from the Vant library within a Vue application.  It imports the necessary components and uses `app.use()` to register them globally, making them available for use in any component within the application.  The code assumes that Vue.js is properly set up in the project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { CouponCell, CouponList } from 'vant';\n\nconst app = createApp();\napp.use(CouponCell);\napp.use(CouponList);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Vant Area Component\nDESCRIPTION: Demonstrates basic usage of the Vant Area component in a Vue template.  It binds the `areaList` prop to a data property containing the area data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-area title=\"标题\" :area-list=\"areaList\" />\n```\n\n----------------------------------------\n\nTITLE: DatePicker and TimePicker Setup with Confirmation - Vue.js\nDESCRIPTION: Sets up the data and methods needed to handle date and time selection using the DatePicker and TimePicker components within a Vue.js setup function. It initializes reactive references for the current date and time, defines `onConfirm` and `onCancel` methods, and returns relevant properties to the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2022', '06', '01']);\n    const currentTime = ref(['12', '00']);\n\n    const onConfirm = () => {\n      showToast(\n        `${currentDate.value.join('/')} ${currentTime.value.join(':')}`,\n      );\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n      currentTime,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Hairline Borders with Vant Classes HTML\nDESCRIPTION: Illustrates how to add 1px borders (hairlines) to elements using Vant's CSS classes. These classes are optimized for Retina displays using pseudo-elements and transforms. The classes cover top, bottom, left, right, top-bottom, and surround borders.  No external dependencies are required, as these are built-in Vant styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.zh-CN.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 上边框 -->\n<div class=\"van-hairline--top\"></div>\n\n<!-- 下边框 -->\n<div class=\"van-hairline--bottom\"></div>\n\n<!-- 左边框 -->\n<div class=\"van-hairline--left\"></div>\n\n<!-- 右边框 -->\n<div class=\"van-hairline--right\"></div>\n\n<!-- 上下边框 -->\n<div class=\"van-hairline--top-bottom\"></div>\n\n<!-- 全边框 -->\n<div class=\"van-hairline--surround\"></div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Round Button Dialog - JavaScript\nDESCRIPTION: Shows a dialog with rounded buttons by setting the `theme` option to `round-button` using `showDialog`. Includes a callback function executed after the dialog is closed. Dependencies: vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showDialog } from 'vant';\n\nshowDialog({\n  title: '标题',\n  message: '代码是写出来给人看的，附带能在机器上运行。',\n  theme: 'round-button',\n}).then(() => {\n  // on close\n});\n\nshowDialog({\n  message: '生命远不止连轴转和忙到极限，人类的体验远比这辽阔、丰富得多。',\n  theme: 'round-button',\n}).then(() => {\n  // on close\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Overlay Component in Vue\nDESCRIPTION: This code snippet demonstrates how to import and register the Vant Overlay component in a Vue application. It uses the createApp function from Vue and the use method to globally register the Overlay component, making it available for use in the application's templates. Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Overlay } from 'vant';\n\nconst app = createApp();\napp.use(Overlay);\n```\n\n----------------------------------------\n\nTITLE: Creating a Vant CLI App\nDESCRIPTION: This command creates a new project based on Vant CLI. It leverages yarn to initialize the project with a pre-configured setup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/README.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vant-cli-app\n```\n\n----------------------------------------\n\nTITLE: Installing Vant v4 using npm\nDESCRIPTION: Install Vant v4 and the @vant/compat compatibility package using npm. The @vant/compat package aids in transitioning from Vant 3 to Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add vant@^4 @vant/compat@^1\n```\n\n----------------------------------------\n\nTITLE: Installing Vant v4 using yarn\nDESCRIPTION: Install Vant v4 and the @vant/compat compatibility package using yarn. The @vant/compat package aids in transitioning from Vant 3 to Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vant@^4 @vant/compat@^1\n```\n\n----------------------------------------\n\nTITLE: Using useRect Hook in Vue Component\nDESCRIPTION: This code snippet demonstrates how to use the useRect hook within a Vue component's setup function.  It imports ref and onMounted from Vue, as well as useRect from @vant/use. Inside onMounted, it calls useRect with the root ref to get the element's dimensions and position, logging the result to the console.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-rect.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, onMounted } from 'vue';\nimport { useRect } from '@vant/use';\n\nexport default {\n  setup() {\n    const root = ref();\n\n    onMounted(() => {\n      const rect = useRect(root);\n      console.log(rect); // -> 元素的大小及其相对于视口的位置\n    });\n\n    return { root };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: AddressList Type Definition Import - TypeScript\nDESCRIPTION: Imports type definitions related to the AddressList component from the 'vant' library.  `AddressListProps` and `AddressListAddress` are used for type checking when using the AddressList component with TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/address-list/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { AddressListProps, AddressListAddress } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver in Vite\nDESCRIPTION: This configures the Vant resolver in a Vite project using unplugin-auto-import and unplugin-vue-components. It imports the necessary modules and adds the VantResolver to the resolvers array in both the AutoImport and Components plugins.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nexport default defineConfig({\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Vant 3 Dialog Compatibility\nDESCRIPTION: Shows how to import Dialog from @vant/compat to maintain backwards compatibility with the Vant 3 Dialog API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@vant/compat';\n\nDialog();\nDialog.close();\n```\n\n----------------------------------------\n\nTITLE: Vant 3 Notify Compatibility\nDESCRIPTION: Shows how to import Notify from @vant/compat to maintain backwards compatibility with the Vant 3 Notify API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notify } from '@vant/compat';\n\nNotify();\nNotify.clear();\n```\n\n----------------------------------------\n\nTITLE: Vant 3 Toast Compatibility\nDESCRIPTION: Shows how to import Toast from @vant/compat to maintain backwards compatibility with the Vant 3 Toast API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Toast } from '@vant/compat';\n\nToast();\nToast.clear();\n```\n\n----------------------------------------\n\nTITLE: Cell Size Configuration - HTML\nDESCRIPTION: This snippet demonstrates how to control the size of cells using the `size` prop. It showcases using `size=\"large\"` on the `van-cell` component. The size prop accepts values like `large` and `normal` to adjust the cell's padding and font size.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cell/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell-group>\n  <van-cell title=\"Cell title\" value=\"Content\" size=\"large\" />\n  <van-cell\n    title=\"Cell title\"\n    value=\"Content\"\n    size=\"large\"\n    label=\"Description\"\n  />\n</van-cell-group>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Cascader Content\nDESCRIPTION: Defines the CSS style for the content injected into the Cascader via the `options-top` slot.  This ensures that the injected content renders properly and integrates visually with the Cascader component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.current-level {\n    font-size: 14px;\n    padding: 16px 16px 0;\n    color: var(--van-gray-6);\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Usage in Vant\nDESCRIPTION: This code demonstrates the basic usage of the Vant Divider component in HTML.  It shows how to render a simple horizontal divider line.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-divider />\n```\n\n----------------------------------------\n\nTITLE: Dialog Migration using @vant/compat\nDESCRIPTION: Illustrates how to use the Dialog object exported from @vant/compat to maintain compatibility with Vant 3 Dialog API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from '@vant/compat';\n\nDialog();\nDialog.close();\n```\n\n----------------------------------------\n\nTITLE: Initializing Barrage Component with Vue\nDESCRIPTION: This code snippet demonstrates how to install and register the Vant Barrage component globally in a Vue.js application. It imports the necessary modules from 'vue' and 'vant' and uses the `app.use()` method to register the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Barrage } from 'vant';\n\nconst app = createApp();\napp.use(Barrage);\n```\n\n----------------------------------------\n\nTITLE: Vant 3 Toast API\nDESCRIPTION: Shows the previous Vant 3 Toast API with the Toast() function for calling the global Toast component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\nToast(); // 函数调用\n```\n\n----------------------------------------\n\nTITLE: Manual Lazyload Registration with Configuration\nDESCRIPTION: This JavaScript snippet addresses the situation where Vant is imported via CDN and the Lazyload component is not automatically registered. It shows how to manually register the Lazyload component using `app.use(vant.Lazyload, ...)` and configure its options, such as enabling lazy component loading with `lazyComponent: true`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/lazyload/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = Vue.createApp();\n\napp.use(vant.Lazyload, {\n  lazyComponent: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Calendar Component Instance Usage - TypeScript\nDESCRIPTION: Demonstrates accessing and using a Calendar component's instance methods through a `ref` in TypeScript. This provides type safety and autocompletion when working with the component's API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { CalendarInstance } from 'vant';\n\nconst calendarRef = ref<CalendarInstance>();\n\ncalendarRef.value?.reset();\n```\n\n----------------------------------------\n\nTITLE: Initializing Notify Component - Javascript\nDESCRIPTION: Globally registers the Notify component in a Vue application. This allows the component to be used throughout the application. The code imports the createApp function from Vue and the Notify component from Vant, then registers Notify as a plugin.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/notify/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Notify } from 'vant';\n\nconst app = createApp();\napp.use(Notify);\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Function for Closeable Tag\nDESCRIPTION: This JavaScript snippet defines the Vue setup function for the closeable tag example. It uses `ref` to create a reactive `show` variable, which controls the visibility of the tag. The `close` function updates the `show` variable to hide the tag when the close button is clicked.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const show = ref(true);\n    const close = () => {\n      show.value = false;\n    };\n\n    return {\n      show,\n      close,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Type Definitions\nDESCRIPTION: Shows how to import type definitions (LoadingType, LoadingProps) for the Vant Loading component in TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LoadingType, LoadingProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Defining CountDown Typescript\nDESCRIPTION: This TypeScript code defines the types and interfaces associated with the useCountDown hook, including CurrentTime, CountDown, and UseCountDownOptions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CurrentTime = {\n  days: number;\n  hours: number;\n  total: number;\n  minutes: number;\n  seconds: number;\n  milliseconds: number;\n};\n\ntype CountDown = {\n  start: () => void;\n  pause: () => void;\n  reset: (totalTime: number) => void;\n  current: ComputedRef<CurrentTime>;\n};\n\ntype UseCountDownOptions = {\n  time: number;\n  millisecond?: boolean;\n  onChange?: (current: CurrentTime) => void;\n  onFinish?: () => void;\n};\n\nfunction useCountDown(options: UseCountDownOptions): CountDown;\n```\n\n----------------------------------------\n\nTITLE: Vant Tag TypeScript Definition\nDESCRIPTION: This snippet shows how to import the type definitions for the Vant Tag component in TypeScript. This is useful for ensuring type safety and providing better code completion in your IDE.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TagSize, TagType, TagProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Type Definitions - Typescript\nDESCRIPTION: Illustrates the available type definitions that can be imported from the `vant` package related to the Toast component\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ToastType,\n  ToastProps,\n  ToastOptions,\n  ToastPosition,\n  ToastWordBreak,\n  ToastWrapperInstance,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Switch Animation - HTML\nDESCRIPTION: Enables animation when switching tabs using the `animated` prop. The `v-model:active` directive binds the active tab index to the `active` ref. Requires the Tab and Tabs components to be registered.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" animated>\n  <van-tab v-for=\"index in 4\" :title=\"'Tab ' + index\">\n    content of tab {{ index }}\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for SearchInstance\nDESCRIPTION: This code snippet demonstrates how to import and use the `SearchInstance` type from the `vant` library in a Vue.js component. It creates a ref to hold the Search component instance and then uses optional chaining to call the `focus` method on the instance.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/search/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SearchProps, SearchShape, SearchInstance } from 'vant';\nimport { ref } from 'vue';\nimport type { SearchInstance } from 'vant';\n\nconst searchRef = ref<SearchInstance>();\n\nsearchRef.value?.focus();\n```\n\n----------------------------------------\n\nTITLE: Using Event Listeners in JSX\nDESCRIPTION: This snippet demonstrates how to update event listeners in JSX with Vant 4. Event names are now camelCase instead of kebab-case. This is a breaking change from Vant 3 where the onClick-input event is now onClickInput. The first example shows incorrect usage of Vant 3 and the second example show the correct usage of Vant 4.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\n<Field onClick-input={onClick} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 4\n<Field onClickInput={onClick} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant BackTop component\nDESCRIPTION: This JavaScript snippet demonstrates how to globally register the Vant BackTop component within a Vue.js application. It imports the necessary modules from 'vue' and 'vant' and then uses the `app.use` method to register the component. This registration makes the `van-back-top` tag available for use in the application's templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from 'vue';\nimport { BackTop } from 'vant';\n\nconst app = createApp();\napp.use(BackTop);\n```\n\n----------------------------------------\n\nTITLE: Handling Add Contact Event - JavaScript\nDESCRIPTION: Defines the `onAdd` method using Vue's Composition API.  This method displays a toast message when the ContactCard is clicked.  It imports `showToast` from 'vant' and returns the `onAdd` method for use in the template.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const onAdd = () => showToast('新增');\n    return {\n      onAdd,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Including Vant via CDN\nDESCRIPTION: Explains how to include Vant in a simple HTML page using CDN links.  Includes the stylesheet and JavaScript files for both Vue and Vant.  Shows an example of rendering a Vant button component within a Vue app and manually registering the Lazyload component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 引入样式文件 -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://fastly.jsdelivr.net/npm/vant@4/lib/index.css\"\n/>\n\n<!-- 引入 Vue 和 Vant 的 JS 文件 -->\n<script src=\"https://fastly.jsdelivr.net/npm/vue@3\"></script>\n<script src=\"https://fastly.jsdelivr.net/npm/vant@4/lib/vant.min.js\"></script>\n\n<script>\n  // 在 #app 标签下渲染一个按钮组件\n  const app = Vue.createApp({\n    template: `<van-button>按钮</van-button>`,\n  });\n  app.use(vant);\n\n  // 通过 CDN 引入时不会自动注册 Lazyload 组件\n  // 可以通过下面的方式手动注册\n  app.use(vant.Lazyload);\n\n  // 调用工具函数，弹出一个 Toast\n  vant.showToast('提示');\n\n  app.mount('#app');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Popover with Icons Logic - Vue\nDESCRIPTION: Provides the JavaScript logic for the Popover with icons example.  The `actions` array includes the `icon` property to specify the icon for each action.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const showPopover = ref(false);\n    const actions = [\n      { text: '选项一', icon: 'add-o' },\n      { text: '选项二', icon: 'music-o' },\n      { text: '选项三', icon: 'more-o' },\n    ];\n\n    return {\n      actions,\n      showPopover,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Dialog Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to globally register the Vant Dialog component within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue application instance, and registers the Dialog component using the `app.use` method. This makes the Dialog component available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Dialog } from 'vant';\n\nconst app = createApp();\napp.use(Dialog);\n```\n\n----------------------------------------\n\nTITLE: Skeleton with Avatar in HTML\nDESCRIPTION: This snippet shows how to add an avatar placeholder to the Vant Skeleton component. It sets the `avatar` prop to true to display the avatar placeholder along with the title and paragraph rows.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton title avatar :row=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: usePageVisibility Hook Type Definition\nDESCRIPTION: This TypeScript code defines the type `VisibilityState` as either 'visible' or 'hidden', and provides the function signature for the `usePageVisibility` hook, which returns a `Ref` containing the current visibility state.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-page-visibility.zh-CN.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype VisibilityState = 'visible' | 'hidden';\n\nfunction usePageVisibility(): Ref<VisibilityState>;\n```\n\n----------------------------------------\n\nTITLE: Unbinding Events with useEventListener cleanup in Vue\nDESCRIPTION: This example demonstrates how to unbind events using the `cleanup` function returned by the `useEventListener` hook from `@vant/use`. The `cleanup` function removes the event listener. This showcases the useEventListener function and its cleanup functionality to properly handle events in Vue components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-event-listener.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useEventListener } from '@vant/use';\n\nexport default {\n  setup() {\n    const cleanup = useEventListener('resize', () => {\n      console.log('window resize');\n    });\n\n    cleanup();\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Skeleton Components - JavaScript\nDESCRIPTION: This snippet shows how to import and register the `Skeleton`, `SkeletonTitle`, `SkeletonImage`, `SkeletonAvatar`, and `SkeletonParagraph` components from the Vant library within a Vue application. It uses `app.use` to register each component globally, making them available for use throughout the application. This setup is crucial for using the Vant Skeleton components in your Vue project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport {\n  Skeleton,\n  SkeletonTitle,\n  SkeletonImage,\n  SkeletonAvatar,\n  SkeletonParagraph,\n} from 'vant';\n\nconst app = createApp();\napp.use(Skeleton);\napp.use(SkeletonTitle);\napp.use(SkeletonImage);\napp.use(SkeletonAvatar);\napp.use(SkeletonParagraph);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Vant Space\nDESCRIPTION: This TypeScript code snippet shows how to import type definitions associated with the Vant Space component.  It imports `SpaceProps`, `SpaceSize`, and `SpaceAlign` from the 'vant' module.  These can be used for strong typing when working with the Space component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SpaceProps, SpaceSize, SpaceAlign } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Defining CountDown Time - JavaScript\nDESCRIPTION: This JavaScript snippet defines a reactive `time` variable using `ref` from Vue, setting it to 30 hours in milliseconds. It exports this `time` variable for use in a template to configure the Vant CountDown component's duration.  Dependencies: Requires Vue's `ref` function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/count-down/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const time = ref(30 * 60 * 60 * 1000);\n    return { time };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Basic Usage\nDESCRIPTION: Demonstrates the basic usage of the Vant Loading component in HTML. It shows how to render a simple loading indicator and how to specify the 'spinner' type.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-loading />\n\n<van-loading type=\"spinner\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for BundleOption\nDESCRIPTION: This snippet shows the TypeScript type definition for `BundleOption`, which is used to specify the format of the bundled output. It includes properties for minifying code, specifying formats (es, cjs, umd, iife), and defining external dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ntype BundleOption = {\n  // Whether to minify code (Tips: es format output can't be minified by vite)\n  minify?: boolean;\n  // Formats, can be set to 'es' | 'cjs' | 'umd' | 'iife'\n  formats: LibraryFormats[];\n  // Dependencies to external (Vue is externaled by default)\n  external?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Usage - JavaScript\nDESCRIPTION: Defines the `active` ref using Vue's `ref` function, initializing it to `0`. This ref is used to control the active tab in the HTML template. Requires Vue 3.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Highlight Component Typescript Definitions\nDESCRIPTION: This snippet imports type definitions related to the Highlight component.  These definitions provide type checking and autocompletion for the props and theme variables used with the component, improving code quality and developer experience.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HighlightProps, HighlightThemeVars } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Text - HTML\nDESCRIPTION: This HTML snippet demonstrates how to add text to the Vant loading icon using the default slot. The text \"加载中...\" is placed inside the `<van-loading>` tag and will be displayed next to the icon. The `size` attribute is also used to set the size of the icon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-loading size=\"24px\">加载中...</van-loading>\n```\n\n----------------------------------------\n\nTITLE: DropdownMenu TypeScript Type Definitions\nDESCRIPTION: This code snippet shows how to import and use the TypeScript type definitions for the Vant DropdownMenu and DropdownItem components, enabling type checking and autocompletion in your Vue application. It defines refs for the component instances and specifies their types using the imported interfaces.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dropdown-menu/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  DropdownMenuProps,\n  DropdownItemProps,\n  DropdownItemOption,\n  DropdownItemInstance,\n  DropdownMenuInstance,\n  DropdownMenuDirection,\n} from 'vant';\n\nimport { ref } from 'vue';\nimport type { DropdownMenuInstance, DropdownItemInstance } from 'vant';\n\nconst dropdownMenuRef = ref<DropdownMenuInstance>();\nconst dropdownItemRef = ref<DropdownItemInstance>();\n\ndropdownMenuRef.value?.close();\ndropdownItemRef.value?.toggle();\n```\n\n----------------------------------------\n\nTITLE: Dashed Divider in HTML\nDESCRIPTION: This HTML code snippet shows how to render the Vant Divider component as a dashed line by adding the `dashed` attribute. The text \"文本\" is included as content within the dashed divider.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-divider dashed>文本</van-divider>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Stepper Component - JavaScript\nDESCRIPTION: Registers the Vant Stepper component globally using `app.use`. This allows the component to be used in Vue templates without needing to be explicitly imported in each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Stepper } from 'vant';\n\nconst app = createApp();\napp.use(Stepper);\n```\n\n----------------------------------------\n\nTITLE: Initializing Dialog Component - JavaScript\nDESCRIPTION: Registers the Dialog component globally within a Vue application.  It uses the `createApp` function from Vue and the `Dialog` component from Vant. This allows using the Dialog component throughout the application.  Dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/dialog/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Dialog } from 'vant';\n\nconst app = createApp();\napp.use(Dialog);\n```\n\n----------------------------------------\n\nTITLE: Vant Skeleton with Avatar - HTML\nDESCRIPTION: This snippet extends the basic usage by adding an avatar placeholder to the skeleton.  The `avatar` prop enables the avatar display.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton title avatar :row=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definition\nDESCRIPTION: Type definitions for FloatingBubble component\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type {\n  FloatingBubbleProps,\n  FloatingBubbleAxis,\n  FloatingBubbleMagnetic,\n  FloatingBubbleOffset,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Tag with Custom Color\nDESCRIPTION: Shows how to customize the color and text color of the Vant Tag component using the `color` and `text-color` props. It also shows usage with the `plain` prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<van-tag color=\"#7232dd\">Tag</van-tag>\n<van-tag color=\"#ffe1e1\" text-color=\"#ad0000\">Tag</van-tag>\n<van-tag color=\"#7232dd\" plain>Tag</van-tag>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Space Component in Vue\nDESCRIPTION: Registers the Vant Space component globally in a Vue.js application. This allows the component to be used in templates without needing to be explicitly imported in each component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/space/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Space } from 'vant';\n\nconst app = createApp();\napp.use(Space);\n```\n\n----------------------------------------\n\nTITLE: Empty Component with Array Image Size\nDESCRIPTION: Illustrates using an array to define the width and height of the image in the Empty component.  The `image-size` prop is bound to an array `[60, 40]`, setting the width to 60px and the height to 40px.  This allows specifying different width and height values for the image.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/empty/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-empty :image-size=\"[60, 40]\" description=\"描述文字\" />\n```\n\n----------------------------------------\n\nTITLE: Public Path Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the publicPath for the documentation site in `vant.config.mjs`, which is equivalent to Vite's `build.outDir` configuration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  build: {\n    site: {\n      publicPath: '/demo-ui/',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing @vant/touch-emulator\nDESCRIPTION: This line imports the `@vant/touch-emulator` module, which automatically enables touch event emulation on desktop devices. No further configuration is needed after importing the module.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// 引入模块后自动生效\nimport '@vant/touch-emulator';\n```\n\n----------------------------------------\n\nTITLE: PickerGroup with Next Step Button in Vue HTML\nDESCRIPTION: This example demonstrates the use of the `next-step-text` prop on the PickerGroup component. The \"Next Step\" button appears until the last tab is selected, at which point it becomes the \"Confirm\" button.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-picker-group\n  title=\"Title\"\n  :tabs=\"['Date', 'Time']\"\n  next-step-text=\"Next Step\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"currentDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-time-picker v-model=\"currentTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Index List - Vue (Composition API)\nDESCRIPTION: This JavaScript snippet defines the `indexList` data property using Vue's Composition API.  The `indexList` is an array of numbers that will be used to customize the index characters displayed in the `van-index-bar` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    return {\n      indexList: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Rsbuild project using npm\nDESCRIPTION: This command creates a new project using Rsbuild, a build tool developed by the Vant author. Rsbuild offers fast build speeds and a smooth development experience, with first-class support for Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/home.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: Popup Type Definitions - TypeScript\nDESCRIPTION: Shows the TypeScript import statements for the various Popup types available in the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  PopupProps,\n  PopupPosition,\n  PopupInstance,\n  PopupCloseIconPosition,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Customizing Radio Shape\nDESCRIPTION: Customizes the shape of the Radio components using the `shape` property, which can be set to `square` or `dot`. This snippet creates two radio groups, one with square-shaped radios and another with dot-shaped radios.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/radio/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-radio-group v-model=\"checked\" shape=\"square\">\n  <van-radio name=\"1\">单选框 1</van-radio>\n  <van-radio name=\"2\">单选框 2</van-radio>\n</van-radio-group>\n\n<van-radio-group v-model=\"checked\" shape=\"dot\">\n  <van-radio name=\"1\">Radio 1</van-radio>\n  <van-radio name=\"2\">Radio 2</van-radio>\n</van-radio-group>\n```\n\n----------------------------------------\n\nTITLE: Importing Signature Types\nDESCRIPTION: This example shows how to import type definitions for the Signature component. These types can be used for more robust type checking and autocompletion.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SignatureProps, SignatureInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Multiple Keywords - Highlight Component HTML - Vue\nDESCRIPTION: This code snippet demonstrates how to highlight multiple keywords using the Vant Highlight component in a Vue template.  It passes an array of keywords to the `keywords` prop. The `source-string` prop provides the text to search within.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-highlight :keywords=\"keywords\" :source-string=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/use package\nDESCRIPTION: Instructions for installing the `@vant/use` package using npm, yarn, pnpm, and Bun package managers. These commands are used to add the `@vant/use` package to a project's dependencies, enabling the use of Vant's composition APIs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-use/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# with npm\nnpm i @vant/use\n\n# with yarn\nyarn add @vant/use\n\n# with pnpm\npnpm add @vant/use\n\n# with Bun\nbun add @vant/use\n```\n\n----------------------------------------\n\nTITLE: Basic Uploader Usage - Vue\nDESCRIPTION: Demonstrates the basic usage of the Uploader component in Vue. It sets up an afterRead callback function that logs the file object to the console after a file is read.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/uploader/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-uploader :after-read=\"afterRead\" />\n```\n\n----------------------------------------\n\nTITLE: Horizontal Popover - Vue\nDESCRIPTION: Demonstrates how to display the Popover actions in a horizontal layout by setting the `actions-direction` prop to \"horizontal\". Includes a reference button to trigger the popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-popover\n  v-model:show=\"showPopover\"\n  :actions=\"actions\"\n  actions-direction=\"horizontal\"\n>\n  <template #reference>\n    <van-button type=\"primary\">水平排列</van-button>\n  </template>\n</van-popover>\n```\n\n----------------------------------------\n\nTITLE: Reactive Active Index for Vant Sidebar\nDESCRIPTION: This JavaScript snippet demonstrates how to manage the active index of a Vant Sidebar component using Vue's reactivity system.  It imports the `ref` function from Vue and initializes a reactive variable `active` to 0. This variable is then returned from the `setup` function, making it available in the template for binding to the `v-model` of the `van-sidebar` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const active = ref(0);\n    return { active };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ShareSheet Type Definitions (TS)\nDESCRIPTION: This TypeScript snippet shows the type definitions that are exported by the ShareSheet component from the vant library. This includes ShareSheetProps, ShareSheetOption and ShareSheetOptions.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/share-sheet/README.zh-CN.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ShareSheetProps,\n  ShareSheetOption,\n  ShareSheetOptions,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Custom Title Content - JavaScript\nDESCRIPTION: This snippet provides the Vue component setup for the custom title content example. It is similar to the basic collapse example, using `ref` to manage the `activeNames` array.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/collapse/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const activeNames = ref(['1']);\n    return { activeNames };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring npm scripts\nDESCRIPTION: Defines various npm scripts in package.json to use Vant CLI commands such as dev, test, lint, release, and build-site. These scripts can be executed using npm run [script-name].\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/commands.zh-CN.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"dev\": \"vant-cli dev\",\n    \"test\": \"vant-cli test\",\n    \"lint\": \"vant-cli lint\",\n    \"release\": \"vant-cli release\",\n    \"build-site\": \"vant-cli build-site\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing auto import plugins via NPM\nDESCRIPTION: These commands install the necessary packages for automatic component and style importing with Vant using `unplugin-vue-components` and `@vant/auto-import-resolver`. Requires NPM to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# with npm\nnpm i @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n```\n\n----------------------------------------\n\nTITLE: Adding scroller Property to List Component\nDESCRIPTION: This code snippet describes the feature of adding the scroller property to the List component. It was contributed by @chenjiahan in pull request #12154.  This provides more control over the scroll behavior of the List component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nfeat(List): 添加 scroller 属性，由 [@chenjiahan](https://github.com/chenjiahan) 在 [#12154](https://github.com/youzan/vant/pull/12154) 中贡献\n```\n\n----------------------------------------\n\nTITLE: PasswordInput CSS Variables\nDESCRIPTION: This section lists the CSS variables available for theming the PasswordInput component. These variables control the appearance of various aspects of the input, such as height, margin, font size, background color, and more.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/password-input/README.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n--van-password-input-height: _50px_\n--van-password-input-margin: _0 var(--van-padding-md)_\n--van-password-input-font-size: _20px_\n--van-password-input-radius: _6px_\n--van-password-input-background: _var(--van-background-2)_\n--van-password-input-info-color: _var(--van-text-color-2)_\n--van-password-input-info-font-size: _var(--van-font-size-md)_\n--van-password-input-error-info-color: _var(--van-danger-color)_\n--van-password-input-dot-size: _10px_\n--van-password-input-dot-color: _var(--van-text-color)_\n--van-password-input-text-color: _var(--van-text-color)_\n--van-password-input-cursor-color: _var(--van-text-color)_\n--van-password-input-cursor-width: _1px_\n--van-password-input-cursor-height: _40%_\n--van-password-input-cursor-duration: _1s_\n```\n\n----------------------------------------\n\nTITLE: Adding Vant Nuxt Module to Config\nDESCRIPTION: This JavaScript code adds the `@vant/nuxt` module to the `modules` array in the `nuxt.config.js` file. This enables automatic component importing and reduces CSS file sizes in Nuxt 3 applications.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@vant/nuxt'],\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript type definitions for Signature\nDESCRIPTION: Illustrates the usage of TypeScript type definitions provided by the Vant Signature component. It imports `SignatureProps` and `SignatureInstance` from 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/signature/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SignatureProps, SignatureInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Vant Loading: Text with Size\nDESCRIPTION: Demonstrates how to include text within the Vant Loading component and specify the size.  It adds a loading message within the component tags and sets the component size using the size prop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-loading size=\"24px\">Loading...</van-loading>\n```\n\n----------------------------------------\n\nTITLE: useCustomFieldValue Type Definition - TypeScript\nDESCRIPTION: This TypeScript code snippet defines the type signature for the `useCustomFieldValue` function. It takes a function (`customValue`) as input, which returns an unknown type.  The `useCustomFieldValue` function itself returns `void` because it is intended to be used as a hook within a component's setup function to modify component state, rather than returning a value directly.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-custom-field-value.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useCustomFieldValue(customValue: () => unknown): void;\n```\n\n----------------------------------------\n\nTITLE: Initializing FloatingBubble with Vue\nDESCRIPTION: Registers the FloatingBubble component globally within a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and then uses the `app.use()` method to register the `FloatingBubble` component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { FloatingBubble } from 'vant';\n\nconst app = createApp();\napp.use(FloatingBubble);\n```\n\n----------------------------------------\n\nTITLE: Disabled Vant Slider in Vue\nDESCRIPTION: Shows how to disable the Vant Slider using the 'disabled' prop, preventing user interaction.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/slider/README.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<van-slider v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Middle Position Ellipsis - Vue HTML\nDESCRIPTION: Configures the TextEllipsis component to truncate the text in the middle. Sets the `position` prop to \"middle\". Requires the Vant TextEllipsis component to be properly installed and configured.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-text-ellipsis\n  rows=\"2\"\n  :content=\"text\"\n  expand-text=\"展开\"\n  collapse-text=\"收起\"\n  position=\"middle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vertical Scrolling Swipe - HTML\nDESCRIPTION: Configures the Swipe component for vertical scrolling. Setting the `vertical` prop to `true` enables vertical arrangement of slides.  The `height` style is set to specify the container's height.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/swipe/README.zh-CN.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<van-swipe style=\"height: 200px;\" vertical>\n  <van-swipe-item>1</van-swipe-item>\n  <van-swipe-item>2</van-swipe-item>\n  <van-swipe-item>3</van-swipe-item>\n  <van-swipe-item>4</van-swipe-item>\n</van-swipe>\n```\n\n----------------------------------------\n\nTITLE: Initializing NavBar Component\nDESCRIPTION: Registers the NavBar component globally in a Vue application.  It imports `createApp` from 'vue' and `NavBar` from 'vant', then uses `app.use` to register the component. Required dependencies: vue, vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { NavBar } from 'vant';\n\nconst app = createApp();\napp.use(NavBar);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vant Resolver in Webpack\nDESCRIPTION: This configures the Vant resolver in a Webpack project using unplugin-auto-import and unplugin-vue-components. It imports the necessary modules and adds the VantResolver to the resolvers array in both the AutoImport and Components plugins.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// webpack.config.js\nimport AutoImport from 'unplugin-auto-import/webpack';\nimport Components from 'unplugin-vue-components/webpack';\nimport { VantResolver } from '@vant/auto-import-resolver';\n\nmodule.exports = {\n  plugins: [\n    AutoImport({\n      resolvers: [VantResolver()],\n    }),\n    Components({\n      resolvers: [VantResolver()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Modules - Typescript\nDESCRIPTION: This code snippet demonstrates how to import specific modules, such as `showToast` and `buttonProps`, directly from the Vant library. This approach is now supported in Vant 4.0, removing the need for babel-plugin-import for on-demand imports, facilitating usage with modern bundlers like SWC and esbuild.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { showToast, buttonProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Displaying Success/Fail Toasts - Vue\nDESCRIPTION: Displays toast messages indicating success or failure using the showSuccessToast and showFailToast functions. These are used to provide feedback to the user after an operation. Requires the showSuccessToast and showFailToast functions from Vant.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showSuccessToast, showFailToast } from 'vant';\n\nshowSuccessToast('成功文案');\nshowFailToast('失败文案');\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Touch Emulator via Bun\nDESCRIPTION: Installs the @vant/touch-emulator package using Bun. This command adds the emulator as a project dependency, enabling touch event simulation on desktop.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-touch-emulator/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add @vant/touch-emulator\n```\n\n----------------------------------------\n\nTITLE: Add Serbian Docs and Rename Files\nDESCRIPTION: This code snippet describes adding Serbian documentation and renaming files. It was contributed by @chenjiahan in pull request #12150. This enhances documentation and improves organization.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\nchore: 添加塞尔维亚文档并重命名文件 by [@chenjiahan](https://github.com/chenjiahan) in [#12150](https://github.com/youzan/vant/pull/12150)\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/touch-emulator\nDESCRIPTION: This command installs the `@vant/touch-emulator` package as a project dependency. This package is used to enable Vant components to work on desktop by converting mouse events to touch events.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# 安装模块\nnpm i @vant/touch-emulator -S\n```\n\n----------------------------------------\n\nTITLE: NavBar Typescript Definition Import\nDESCRIPTION: Imports the typescript definitions for the NavBar component, specifically `NavBarProps`. This allows for type checking when using the component in Typescript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/nav-bar/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NavBarProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import configuration\nDESCRIPTION: Remove the babel-plugin-import configuration from babel.config.js as Vant 4 no longer supports it. This allows for using modern build tools like SWC and esbuild.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.zh-CN.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  plugins: [\n-    ['import', {\n-      libraryName: 'vant',\n-      libraryDirectory: 'es',\n-      style: true\n-    }, 'vant']\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using the useCurrentLang Hook in Vant\nDESCRIPTION: This snippet shows how to use the `useCurrentLang` hook in a Vant component to get the current language. It imports the `useCurrentLang` function, calls it to get the current language, and then logs the language code to the console.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/locale/README.zh-CN.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { useCurrentLang } from 'vant';\n\nconst currentLang = useCurrentLang();\n\nconsole.log(currentLang.value); // --> 'zh-CN'\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering Vant IndexBar Component\nDESCRIPTION: This code snippet demonstrates how to install and register the `IndexBar` and `IndexAnchor` components from the Vant library in a Vue application.  It utilizes the `createApp` function from Vue and the `app.use` method to register the components globally. This makes them available for use in any component within the application without needing to be imported individually.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/index-bar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { IndexBar } from 'vant';\n\nconst app = createApp();\napp.use(IndexBar);\napp.use(IndexAnchor);\n```\n\n----------------------------------------\n\nTITLE: Vertical Divider in Vant\nDESCRIPTION: These examples showcase how to create vertical dividers using the `vertical` prop and customize them with `dashed` and `hairline` props. Inline styles can also be applied to vertical dividers.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-divider vertical />\nText\n<van-divider vertical dashed />\nText\n<van-divider vertical :hairline=\"false\" />\nText\n<van-divider vertical :style=\"{ borderColor: '#1989fa' }\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Event useClickAway Usage - HTML\nDESCRIPTION: Defines a div element with a ref named \"root\", similar to the basic example.  This element will be used as the target for the useClickAway hook, but in this case, a different event is being listened to.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Watermark Spacing with Vant\nDESCRIPTION: Demonstrates how to customize the spacing between repeated image watermarks using the `gap-x` and `gap-y` attributes.  These attributes control the horizontal and vertical gaps respectively.  Requires Vant Watermark component and an image URL.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-watermark\n  image=\"https://fastly.jsdelivr.net/npm/@vant/assets/vant-watermark.png\"\n  :gap-x=\"30\"\n  :gap-y=\"10\"\n  opacity=\"0.2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Hairline Borders with Vant\nDESCRIPTION: This snippet shows how to add 1px hairline borders to elements using Vant's CSS classes. These classes utilize pseudo-elements to create the border effect.  The available classes include `van-hairline--top`, `van-hairline--bottom`, `van-hairline--left`, `van-hairline--right`, `van-hairline--top-bottom`, and `van-hairline--surround` for different border configurations. It relies on the Vant CSS library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- border top -->\n<div class=\"van-hairline--top\"></div>\n\n<!-- border bottom -->\n<div class=\"van-hairline--bottom\"></div>\n\n<!-- border left -->\n<div class=\"van-hairline--left\"></div>\n\n<!-- border right -->\n<div class=\"van-hairline--right\"></div>\n\n<!-- border top & bottom -->\n<div class=\"van-hairline--top-bottom\"></div>\n\n<!-- full border -->\n<div class=\"van-hairline--surround\"></div>\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Name Simplification - LESS\nDESCRIPTION: This code snippet demonstrates how CSS variable names have been simplified in Vant 4 for smaller code size and improved usability. It provides a mapping of old variable names (Vant 3) to their new, shorter counterparts (Vant 4).\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_18\n\nLANGUAGE: less\nCODE:\n```\nanimation-duration -> duration\nanimation-timing-function-enter -> ease-out\nanimation-timing-function-leave -> ease-in\nbackground-color -> background\nbackground-color-light -> background-2\nborder-radius -> radius\nborder-width-base -> border-width\nbox-shadow -> shadow\nfont-family -> font\nfont-weight-bold -> font-bold\nprice-integer-font -> price-font\ntext-link -> link\ntransition-duration -> duration\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Import for Vant Components\nDESCRIPTION: This TypeScript snippet demonstrates how to import type definitions for the `CouponCellProps`, `CouponListProps`, and `CouponInfo` types from the Vant library. These type definitions provide type safety when working with the Vant coupon components in a TypeScript project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/coupon-list/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CouponCellProps, CouponListProps, CouponInfo } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Adding Haptics Feedback with Vant\nDESCRIPTION: This snippet shows how to add haptics feedback to an element using Vant's CSS class `van-haptics-feedback`. When the element is touched, its opacity is reduced to provide visual feedback.  It's commonly used on clickable elements like buttons. It depends on Vant's CSS library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/style/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"van-haptics-feedback\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/popperjs with pnpm\nDESCRIPTION: This command installs the @vant/popperjs package using the pnpm package manager. The package provides a CommonJS-formatted version of @popperjs/core with an Object.assign polyfill. This command adds the package as a project dependency.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-popperjs/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @vant/popperjs\n```\n\n----------------------------------------\n\nTITLE: Installing stylelint and @vant/stylelint-config\nDESCRIPTION: This snippet shows how to install stylelint and @vant/stylelint-config dependencies, which are no longer installed by default in Vant Cli 5.0. These dependencies are required for linting styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm add stylelint@13 @vant/stylelint-config\n```\n\n----------------------------------------\n\nTITLE: Get Current Language using useCurrentLang\nDESCRIPTION: This snippet demonstrates how to retrieve the currently used language in Vant using the `useCurrentLang` hook. The function returns a Ref<string> which holds the current language code.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/locale/README.zh-CN.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useCurrentLang(): Ref<string>;\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Library using Yarn\nDESCRIPTION: These commands install the Vant component library using Yarn, Pnpm, or Bun. Each command serves the same purpose of adding Vant as a dependency to your project using the respective package manager. Ensure you have the corresponding package manager installed before running the commands.\nSOURCE: https://github.com/youzan/vant/blob/main/README.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 yarn 安装\nyarn add vant\n\n# 通过 pnpm 安装\npnpm add vant\n\n# 通过 bun 安装\nbun add vant\n```\n\n----------------------------------------\n\nTITLE: Using Vant Area Data with Area Component (TS)\nDESCRIPTION: This code snippet demonstrates how to import and use the areaList object from @vant/area-data in a Vant Area component.  It allows you to display a list of Chinese provinces, cities, and districts for selection.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-area-data/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { areaList } from '@vant/area-data';\n```\n\n----------------------------------------\n\nTITLE: PullRefresh Type Definition - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import the PullRefreshProps type definition from the Vant library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pull-refresh/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PullRefreshProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Synchronizing with Main Repository\nDESCRIPTION: These commands add the main Vant repository as a remote, fetch the latest code, switch to the main branch, and merge the code from the main repository into the local branch. This ensures the local branch is up to date before submitting a pull request.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/contribution.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Add the main repository to remote\ngit remote add upstream git@github.com:vant-ui/vant.git\n\n# Pull the latest code from the main repository\ngit fetch upstream\n\n# Switch to the main branch\ngit checkout main\n\n# Merge the code from the main repository\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Icon Component in Vue\nDESCRIPTION: Globally registers the Vant Icon component for use in a Vue application.  It imports the necessary modules and uses the `app.use()` method to register the component. Requires Vue and Vant installed as dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/icon/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Icon } from 'vant';\n\nconst app = createApp();\napp.use(Icon);\n```\n\n----------------------------------------\n\nTITLE: Controlled Mode with PickerGroup in Vue HTML\nDESCRIPTION: This code snippet demonstrates using the `v-model:active-tab` prop to control the active tab index of the PickerGroup component. It includes a button to toggle between the tabs.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<van-button type=\"primary\" @click=\"setActiveTab\">\n  toggle tab, current {{ activeTab }}\n</van-button>\n<van-picker-group\n  v-model:active-tab=\"activeTab\"\n  title=\"Title\"\n  :tabs=\"['Date', 'Time']\"\n  @confirm=\"onConfirm\"\n  @cancel=\"onCancel\"\n>\n  <van-date-picker\n    v-model=\"currentDate\"\n    :min-date=\"minDate\"\n    :max-date=\"maxDate\"\n  />\n  <van-time-picker v-model=\"currentTime\" />\n</van-picker-group>\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure (ESM/CommonJS)\nDESCRIPTION: This snippet outlines the structure of the output directory after running the `build` command, including `es` (ESM) and `lib` (CommonJS) directories. It shows how component files are organized for different module systems, along with entry points and bundled styles.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nproject\n├─ es                   # ESM Directory\n│   ├─ button          # button component directory\n│   ├─ dialog          # dialog component directory\n│   └─ index.js        # All component files entry (ESModule)\n│\n└─ lib                  # Commonjs directory\n    ├─ button           # button component library\n    ├─ dialog           # dialog component library\n    ├─ index.js         # All component files entry (Commonjs)\n    ├─ index.less       # All component styles entry(Uncompiled)\n    ├─ index.css        # Bundle component styles for CDN\n    ├─ [name].js        # Bundle script for UMD\n    ├─ [name].es.js     # Bundle script for ESM\n    ├─ [name].min.js    # Bundle and minified script for UMD\n    └─ [name].es.min.js # Bundle and minified script for ESM\n```\n\n----------------------------------------\n\nTITLE: Custom Position - JavaScript\nDESCRIPTION: Defines the setup function for the Vue component used in the custom position example. It initializes a list of 50 items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Text - HTML\nDESCRIPTION: Applies a custom date formatting function to the Vant Calendar component using the `formatter` prop. This enables modifying the content and appearance of each date cell based on specific logic or conditions. The example requires a `formatter` function to be defined in the component's data.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/calendar/README.zh-CN.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<van-calendar v-model:show=\"show\" type=\"range\" :formatter=\"formatter\" />\n```\n\n----------------------------------------\n\nTITLE: ActionSheet Type Definitions - TypeScript\nDESCRIPTION: Exports the ActionSheetProps and ActionSheetAction types from the 'vant' library.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-sheet/README.zh-CN.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ActionSheetProps, ActionSheetAction } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/popperjs with Bun\nDESCRIPTION: This command installs the @vant/popperjs package using the Bun package manager. The package provides a CommonJS-formatted version of @popperjs/core with an Object.assign polyfill. This adds the package as a dependency to the project.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-popperjs/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add @vant/popperjs\n```\n\n----------------------------------------\n\nTITLE: Custom Action Slot - Vue JavaScript\nDESCRIPTION: Defines the Vue component's setup function with the text string used for the custom action slot example. It initializes a `text` variable with a sample string and returns it to be used in the template. Requires Vue's `setup` function to be used within a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/text-ellipsis/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const text = '慢慢来，不要急，生活给你出了难题，可也终有一天会给出答案。';\n    return { text };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overlay Types Definition - TypeScript\nDESCRIPTION: Imports the `OverlayProps` type definition from the 'vant' library. This type can be used to provide type checking and autocompletion when working with the Overlay component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/overlay/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OverlayProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Importing Action Bar Types (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to import type definitions for the Action Bar components from the 'vant' library. This allows developers to use TypeScript's type checking features when working with the components, ensuring that the correct props are used and that the code is more robust.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/action-bar/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ActionBarProps,\n  ActionBarIconProps,\n  ActionBarButtonProps,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Feedback on iOS\nDESCRIPTION: This snippet demonstrates how to enable click feedback (the `:active` pseudo-class) on iOS Safari by adding an empty `ontouchstart` attribute to the `body` tag. This workaround is necessary because iOS Safari does not trigger `:active` by default.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/faq.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body ontouchstart=\"\">\n  ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Initializing Barrage Component with Vue\nDESCRIPTION: This snippet demonstrates how to globally register the Barrage component in a Vue application. It imports the necessary modules from 'vue' and 'vant', creates a Vue app instance, and registers the Barrage component using the app.use() method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Barrage } from 'vant';\n\nconst app = createApp();\napp.use(Barrage);\n```\n\n----------------------------------------\n\nTITLE: Including Vant Touch Emulator via CDN\nDESCRIPTION: Includes the Vant Touch Emulator by referencing the CDN hosted JavaScript file in HTML. This allows enabling the touch event emulation by including the script in HTML.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-touch-emulator/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://fastly.jsdelivr.net/npm/@vant/touch-emulator\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Sidebar and SidebarItem in Vue\nDESCRIPTION: This snippet demonstrates how to globally register the Sidebar and SidebarItem components from the Vant library in a Vue application. It imports the necessary components and uses the app.use() method to register them for use throughout the application. This registration makes the components available within your Vue templates without needing to import them in each component file.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Sidebar, SidebarItem } from 'vant';\n\nconst app = createApp();\napp.use(Sidebar);\napp.use(SidebarItem);\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Color - HTML\nDESCRIPTION: Demonstrates how to define a gradient color for the Vant Circle component using the `color` property with an object containing color stops. This configuration allows for a visually appealing gradient effect on the progress bar.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<van-circle\n  v-model:current-rate=\"currentRate\"\n  :rate=\"rate\"\n  :color=\"gradientColor\"\n  text=\"渐变色\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Countdown Time HTML\nDESCRIPTION: This HTML snippet displays the countdown time using Vue.js data binding. It shows total milliseconds, remaining days, hours, minutes, seconds, and milliseconds from the countdown.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span>总时间：{{ current.total }}</span>\n<span>剩余天数：{{ current.days }}</span>\n<span>剩余小时：{{ current.hours }}</span>\n<span>剩余分钟：{{ current.minutes }}</span>\n<span>剩余秒数：{{ current.seconds }}</span>\n<span>剩余毫秒数：{{ current.milliseconds }}</span>\n```\n\n----------------------------------------\n\nTITLE: Pull Request Title Format Example\nDESCRIPTION: This command is an example of an allowed Pull Request title format, following the specified conventions of type and component name (optional) followed by a colon and a commit message. Adhering to the specific title format facilitates a better structured and easily understandable commit history, aiding in maintainability and collaboration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/contribution.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntype(ComponentName?)：commit message\n```\n\n----------------------------------------\n\nTITLE: Using useWindowSize hook in Vue\nDESCRIPTION: This code demonstrates how to use the useWindowSize hook in a Vue component's setup function to get the browser window's width and height. It also uses the watch function to react to changes in window size.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-window-size.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { watch } from 'vue';\nimport { useWindowSize } from '@vant/use';\n\nexport default {\n  setup() {\n    const { width, height } = useWindowSize();\n\n    console.log(width.value); // -> 窗口宽度\n    console.log(height.value); // -> 窗口高度\n\n    watch([width, height], () => {\n      console.log('window resized');\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Area Data - Bash\nDESCRIPTION: Installation instructions for the @vant/area-data package, which provides Chinese province, city, and district data for the Cascader component. Demonstrates usage with npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/cascader/README.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 npm\nnpm i @vant/area-data\n\n# 通过 yarn\nyarn add @vant/area-data\n\n# 通过 pnpm\npnpm add @vant/area-data\n\n# 通过 Bun\nbun add @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Nuxt Module via Bun\nDESCRIPTION: This command demonstrates installing the Vant Nuxt module using Bun.  The `@vant/nuxt` module simplifies Vant integration into Nuxt 3 applications. Requires Bun to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# with Bun\nbun add @vant/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Using Vant API with On-Demand Styles\nDESCRIPTION: Shows how to use Vant API functions with on-demand styles, removing the need for manual importing.  The styles are injected when using the API function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  showToast('No need to import showToast');\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Vant Divider\nDESCRIPTION: This snippet shows how to import TypeScript type definitions for the Vant Divider component. This allows for type checking and improved code completion when working with the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DividerProps, DividerContentPosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Hairline Border Buttons with Vant\nDESCRIPTION: This HTML snippet demonstrates how to add a 0.5px hairline border to a Vant Button by using the `hairline` attribute.  It is typically used with `plain` buttons to create a subtle border effect, especially on high-density screens.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/button/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-button plain hairline type=\"primary\">细边框按钮</van-button>\n<van-button plain hairline type=\"success\">细边框按钮</van-button>\n```\n\n----------------------------------------\n\nTITLE: Popover Placement Options - Bash\nDESCRIPTION: Lists the available options for the `placement` prop, showing all the possible positions for the Popover.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popover/README.zh-CN.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntop           # 顶部中间位置\ntop-start     # 顶部左侧位置\ntop-end       # 顶部右侧位置\nleft          # 左侧中间位置\nleft-start    # 左侧上方位置\nleft-end      # 左侧下方位置\nright         # 右侧中间位置\nright-start   # 右侧上方位置\nright-end   # 右侧下方位置\nbottom        # 底部中间位置\nbottom-start  # 底部左侧位置\nbottom-end    # 底部右侧位置\n```\n\n----------------------------------------\n\nTITLE: Readonly Rate Component\nDESCRIPTION: Sets the Rate component to a read-only state. Setting the `readonly` property to `true` makes the component non-interactive.  The `value` is bound via `v-model`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<van-rate v-model=\"value\" readonly />\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Divider Component with Vue\nDESCRIPTION: This code snippet demonstrates how to install the Vant Divider component globally within a Vue application using `app.use`. It imports the necessary modules from 'vue' and 'vant'.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/divider/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Divider } from 'vant';\n\nconst app = createApp();\napp.use(Divider);\n```\n\n----------------------------------------\n\nTITLE: Barrage Type Definitions Import (TypeScript)\nDESCRIPTION: This TypeScript code shows how to import type definitions related to the Barrage component from the 'vant' library. These types can be used for type checking and improved code completion when working with the Barrage component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/barrage/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BarrageProps, BarrageItem, BarrageInstance } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Config\nDESCRIPTION: This snippet shows how to install the @vant/eslint-config package as a development dependency using various package managers like npm, yarn, pnpm, and Bun. Each command installs the package to be used for linting.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-eslint-config/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# with npm\nnpm i @vant/eslint-config -D\n\n# with yarn\nyarn add @vant/eslint-config -D\n\n# with pnpm\npnpm add @vant/eslint-config -D\n\n# with Bun\nbun add @vant/eslint-config -D\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Sidebar and SidebarItem in Vue.js\nDESCRIPTION: This code snippet demonstrates how to register the Vant Sidebar and SidebarItem components globally within a Vue.js application. It imports the necessary modules from the 'vant' library and uses the `app.use` method to register the components. This makes the Sidebar and SidebarItem components available for use throughout the application.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sidebar/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Sidebar, SidebarItem } from 'vant';\n\nconst app = createApp();\napp.use(Sidebar);\napp.use(SidebarItem);\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Skeleton in HTML\nDESCRIPTION: This snippet demonstrates how to conditionally render the Vant Skeleton component based on a `loading` state. When `loading` is true, the skeleton is displayed; otherwise, the child content is shown.  This example requires a corresponding Vue component to manage the `loading` state.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/skeleton/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-skeleton title avatar :row=\"3\" :loading=\"loading\">\n  <div>实际内容</div>\n</van-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Initializing Countdown with Milliseconds - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize the useCountDown hook with a specified time (24 hours in milliseconds) and enable millisecond rendering.  It imports the `useCountDown` function and sets up a Vue component with the countdown logic, returning the `current` time object for display.  The `millisecond` option is set to `true`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.en-US.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCountDown } from '@vant/use';\n\nexport default {\n  setup() {\n    const countDown = useCountDown({\n      time: 24 * 60 * 60 * 1000,\n      millisecond: true,\n    });\n    countDown.start();\n\n    return {\n      current: countDown.current,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Base Path Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to configure the path to the global stylesheet file in `vant.config.mjs`.  The path is relative to the `src` directory.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  build: {\n    css: {\n      base: 'style/global.scss',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: PostCSS Default Configuration (JavaScript)\nDESCRIPTION: This snippet shows the default PostCSS configuration used by Vant CLI.  It includes autoprefixer to ensure compatibility of compiled CSS code across different browsers. This config is typically found in `postcss.config.js`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Browserslist Configuration (JSON)\nDESCRIPTION: This code shows an example of a browserslist configuration used to determine target browser versions for compatibility.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/config.zh-CN.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\"Chrome >= 51\", \"iOS >= 10\"]\n}\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Time Range - JavaScript\nDESCRIPTION: This code snippet demonstrates the javascript code used to handle the TimePicker with time range.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/time-picker/README.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const currentTime = ref(['12', '35']);\n    return { currentTime };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming get-container to teleport - HTML\nDESCRIPTION: This snippet showcases the renaming of the get-container property to teleport when upgrading from Vant 2 to Vant 3. This change aligns with Vue 3's Teleport component API for rendering components to arbitrary DOM locations.  It includes both inline string teleport and dynamic binding examples, with corresponding script examples.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<template>\n  <van-popup get-container=\"body\" />\n  <van-popup :get-container=\"getContainer\" />\n</template>\n<script>\n  export default {\n    methods: {\n      getContainer() {\n        return document.querySelector('#container');\n      },\n    },\n  };\n</script>\n\n<!-- Vant 3 -->\n<template>\n  <van-popup teleport=\"body\" />\n  <van-popup :teleport=\"container\" />\n</template>\n<script>\n  export default {\n    beforeCreate() {\n      this.container = document.querySelector('#container');\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vant Tabs with Sticky Button (HTML)\nDESCRIPTION: This code snippet demonstrates the issue where a sticky button within a Vant Tabs component does not render as expected when the Tabs component has the swipeable property enabled. The van-sticky component is used to make the van-button sticky within the tab content. The expected behavior is that the button remains fixed at the top of the viewport when the user scrolls, but due to transform property on the tab content wrapper, the button's fixed position is relative to the wrapper, causing it to be offset.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tab/README.zh-CN.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<van-tabs v-model:active=\"active\" swipeable>\n  <van-tab>\n    <van-sticky>\n      <van-button>sticky button</van-button>\n    </van-sticky>\n  </van-tab>\n</van-tabs>\n```\n\n----------------------------------------\n\nTITLE: Using Area Instance with TypeScript\nDESCRIPTION: Shows how to obtain a reference to the Vant Area component instance and call its methods in TypeScript.  This example uses the `confirm` method to stop scrolling and trigger the confirm event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/area/README.zh-CN.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue';\nimport type { AreaInstance } from 'vant';\n\nconst areaRef = ref<AreaInstance>();\n\nareaRef.value?.confirm();\n```\n\n----------------------------------------\n\nTITLE: Multiple Keywords Highlight - HTML\nDESCRIPTION: Demonstrates how to highlight multiple keywords using the Vant Highlight component.  It utilizes the same HTML structure as the basic usage, but the `keywords` prop expects an array of strings.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/highlight/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-highlight :keywords=\"keywords\" :source-string=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Popup Usage - HTML\nDESCRIPTION: Demonstrates the basic usage of the Vant Popup component by toggling its visibility using the `v-model:show` directive. A `van-cell` component triggers the popup's visibility via a click event.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/popup/README.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<van-cell title=\"展示弹出层\" is-link @click=\"showPopup\" />\n<van-popup v-model:show=\"show\" :style=\"{ padding: '64px' }\">内容</van-popup>\n```\n\n----------------------------------------\n\nTITLE: Disabling Style Import in Vant Resolver\nDESCRIPTION: This example demonstrates how to disable the automatic import of CSS styles for Vant components by setting the `importStyle` option to `false` within the VantResolver configuration.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-auto-import-resolver/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nComponents({\n  resolvers: [\n    VantResolver({\n      // Disable style import\n      importStyle: false,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Rate Component Typescript Definition Import\nDESCRIPTION: Imports the RateProps type definition from the Vant library. This type can be used to provide type safety when working with the Rate component in TypeScript.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/rate/README.zh-CN.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RateProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: useParent and useChildren Type Definitions (TypeScript)\nDESCRIPTION: Defines the TypeScript interfaces for the return values of `useParent` and `useChildren` hooks from the `@vant/use` library. `useParent` returns the parent component instance (if available) and its index within the parent's children. `useChildren` returns a list of child component instances and a function to link child components with data/methods.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-relation.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useParent<T>(key: string | symbol): {\n  parent?: T;\n  index?: Ref<number>;\n};\n\nfunction useChildren(key: string | symbol): {\n  children: ComponentPublicInstance[];\n  linkChildren: (value: any) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Stepper Disabled State Configuration in Vue\nDESCRIPTION: This snippet shows how to disable the Vant Stepper component, preventing user interaction. The `disabled` attribute, when set, disables both the increment/decrement buttons and the input field.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/stepper/README.zh-CN.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<van-stepper v-model=\"value\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Editing ContactCard Component - HTML\nDESCRIPTION: Displays a ContactCard component in 'edit' mode, pre-filled with contact information.  The `type` prop is set to \"edit\", and the `tel` and `name` props are bound to the corresponding reactive references. An `@click` event handler is bound to the `onEdit` method.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-contact-card type=\"edit\" :tel=\"tel\" :name=\"name\" @click=\"onEdit\" />\n```\n\n----------------------------------------\n\nTITLE: Type Declarations for useCountDown - TypeScript\nDESCRIPTION: These TypeScript type declarations define the structure of the `CurrentTime` object, the `CountDown` object (which contains the methods for controlling the countdown), and the `UseCountDownOptions` object (which defines the configuration options for the hook). This provides type safety and documentation for the useCountDown hook.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-count-down.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CurrentTime = {\n  days: number;\n  hours: number;\n  total: number;\n  minutes: number;\n  seconds: number;\n  milliseconds: number;\n};\n\ntype CountDown = {\n  start: () => void;\n  pause: () => void;\n  reset: (totalTime: number) => void;\n  current: ComputedRef<CurrentTime>;\n};\n\ntype UseCountDownOptions = {\n  time: number;\n  millisecond?: boolean;\n  onChange?: (current: CurrentTime) => void;\n  onFinish?: () => void;\n};\n\nfunction useCountDown(options: UseCountDownOptions): CountDown;\n```\n\n----------------------------------------\n\nTITLE: HTML Element Definition\nDESCRIPTION: Defines a div element with a ref attribute, which will be used to access the element in the Vue component.  The ref is named \"root\" and is bound to a reactive variable in the component's setup function.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-rect.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: Tabbar Typescript definition\nDESCRIPTION: Shows how to import TabbarProps and TabbarItemProps from 'vant' to use it in typescript\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tabbar/README.zh-CN.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TabbarProps, TabbarItemProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: useWindowSize hook type definition\nDESCRIPTION: This TypeScript code defines the type signature for the useWindowSize hook, specifying that it returns an object containing reactive references to the window's width and height.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-window-size.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useWindowSize(): {\n  width: Ref<number>;\n  height: Ref<number>;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Content for Vant BackTop\nDESCRIPTION: This example demonstrates how to customize the content of the Vant BackTop component using the default slot.  The HTML includes a `van-back-top` component with custom content. The styling is defined in the style block. The JavaScript part sets up the component's data, which is a list of 50 items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-cell v-for=\"item in list\" :key=\"item\" :title=\"item\" />\n<van-back-top class=\"custom\">Back Top</van-back-top>\n\n<style>\n  .custom {\n    width: 80px;\n    font-size: 14px;\n    text-align: center;\n  }\n</style>\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Redundant Ellipsis in TextEllipsis\nDESCRIPTION: This code snippet describes a bug fix that prevents the ellipsis from appearing repeatedly in the TextEllipsis component. It was contributed by @muzaisimao in pull request #12120.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nfix(TextEllipsis): 修复省略号重复出现的问题，由 [@muzaisimao](https://github.com/muzaisimao) 在 [#12120](https://github.com/youzan/vant/pull/12120) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Creating a Rsbuild Project\nDESCRIPTION: This command creates a new project using Rsbuild, a build tool developed by the author of Vant. Rsbuild offers fast build speeds and a streamlined development experience, with first-class support for Vant. It requires npm and Rsbuild to be installed globally.\nSOURCE: https://github.com/youzan/vant/blob/main/README.zh-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create rsbuild@latest\n```\n\n----------------------------------------\n\nTITLE: Rewrite Release Command\nDESCRIPTION: This code snippet describes a refactoring effort involving rewriting the release command in the CLI. It was contributed by @chenjiahan in pull request #12133. This aims to improve the maintainability and efficiency of the release process.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nrefactor(cli): 重写 release 命令 by [@chenjiahan](https://github.com/chenjiahan) in [#12133](https://github.com/youzan/vant/pull/12133)\n```\n\n----------------------------------------\n\nTITLE: PickerGroup Type Definitions (TypeScript)\nDESCRIPTION: This code snippet imports type definitions related to the PickerGroup component from the 'vant' library. It imports `PickerGroupProps` and `PickerGroupThemeVars` for type checking and customization.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PickerGroupProps, PickerGroupThemeVars } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Nuxt Module via Yarn\nDESCRIPTION: This command demonstrates installing the Vant Nuxt module using Yarn.  The `@vant/nuxt` module simplifies Vant integration into Nuxt 3 applications. Requires Yarn to be installed.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.en-US.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# with yarn\nyarn add @vant/nuxt -D\n```\n\n----------------------------------------\n\nTITLE: Defining ContactCard Types - TypeScript\nDESCRIPTION: Imports type definitions for ContactCard, including `ContactCardType` and `ContactCardProps`, from the 'vant' library.  This provides type safety and autocompletion when working with the ContactCard component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/contact-card/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ContactCardType, ContactCardProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Binding Events with useEventListener in Vue\nDESCRIPTION: This example demonstrates how to bind events to the window and body elements using the `useEventListener` hook from `@vant/use`. It showcases the default window binding and the specification of a target element (document.body) for the event listener. The code is executed within the setup function of a Vue component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-event-listener.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { useEventListener } from '@vant/use';\n\nexport default {\n  setup() {\n    // 在 window 上绑定 resize 事件\n    // 未指定监听对象时，默认会监听 window 的事件\n    useEventListener('resize', () => {\n      console.log('window resize');\n    });\n\n    // 在 body 元素上绑定 click 事件\n    useEventListener(\n      'click',\n      () => {\n        console.log('click body');\n      },\n      { target: document.body },\n    );\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Vant Tag Component in Vue\nDESCRIPTION: This snippet demonstrates how to globally register the Vant Tag component within a Vue application. It imports the necessary modules and uses the `app.use()` method to register the component, making it available for use in templates.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/tag/README.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { Tag } from 'vant';\n\nconst app = createApp();\napp.use(Tag);\n```\n\n----------------------------------------\n\nTITLE: Component Utils - Typescript\nDESCRIPTION: This code demonstrates the adjustment in component utils in Vant 4.0. It renames the `Dialog()` function to `showDialog()` and lets `Dialog` directly point to the component object. This makes the API more consistent with other components and improves compatibility with `unplugin-vue-components`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// function call\nshowDialog({ message: 'Hello World!' });\n\n// component registration\napp.use('van-dialog', Dialog);\n```\n\n----------------------------------------\n\nTITLE: Listening for the Close Event - JavaScript\nDESCRIPTION: Illustrates how to listen to the `onClose` event of the ImagePreview.  The onClose callback function is executed when the image preview is closed. showToast from vant is also imported to display a message upon close.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.zh-CN.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast, showImagePreview } from 'vant';\n\nshowImagePreview({\n  images: [\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',\n    'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',\n  ],\n  onClose() {\n    showToast('关闭');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox - Vue\nDESCRIPTION: This code snippet shows how to disable a Vant Checkbox component using the `disabled` property. When disabled, the checkbox cannot be interacted with by the user.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/checkbox/README.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<van-checkbox v-model=\"checked\" disabled>复选框</van-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Updating Popup Style (Center Position) - LESS\nDESCRIPTION: This code snippet illustrates the breaking change in the Popup component's style when the position is set to 'center'. The Vant 3 version used `transform: translate3d(-50%, -50%, 0)` for centering, while Vant 4 uses a combination of `left: 0`, `right: 0`, `width: fit-content`, `max-width`, `margin: 0 auto`, and `transform: translateY(-50%)`. The change aims to improve the responsiveness and layout of the centered popup.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.en-US.md#_snippet_1\n\nLANGUAGE: less\nCODE:\n```\n// Vant 3\n.van-popup--center {\n  left: 50%;\n  transform: translate3d(-50%, -50%, 0);\n}\n\n// Vant 4\n.van-popup--center {\n  left: 0;\n  right: 0;\n  width: fit-content;\n  max-width: calc(100vw - var(--van-padding-md) * 2);\n  margin: 0 auto;\n  transform: translateY(-50%);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating v-model for Popup Components - HTML\nDESCRIPTION: This snippet demonstrates the change in v-model usage for popup-type components when upgrading from Vant 2 to Vant 3. The v-model attribute is renamed to v-model:show to align with Vue 3's v-model API.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-popup v-model=\"show\" />\n\n<!-- Vant 3 -->\n<van-popup v-model:show=\"show\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Loading Types - Typescript\nDESCRIPTION: This code snippet shows how to import type definitions for the Vant Loading component in TypeScript. It imports `LoadingType` and `LoadingProps` from the 'vant' library. These types can be used to provide type checking and autocompletion when working with the Loading component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/loading/README.zh-CN.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LoadingType, LoadingProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Installing Vant Area Data with NPM\nDESCRIPTION: This command installs the @vant/area-data package using npm. It adds the package to your project's dependencies, allowing you to import and use the Chinese area data in your Vant components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-area-data/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @vant/area-data\n```\n\n----------------------------------------\n\nTITLE: FloatingBubble TypeScript Types\nDESCRIPTION: Exports TypeScript type definitions for the FloatingBubble component, including props, axis, magnetic, and offset. These types are intended for use in TypeScript projects to ensure type safety when using the component.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/floating-bubble/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type {\n  FloatingBubbleProps,\n  FloatingBubbleAxis,\n  FloatingBubbleMagnetic,\n  FloatingBubbleOffset,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import\nDESCRIPTION: Shows how to remove the `babel-plugin-import` plugin as Vant 4.0 no longer supports it.  This involves removing the plugin configuration from `babel.config.js`.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  plugins: [\n-    ['import', {\n-      libraryName: 'vant',\n-      libraryDirectory: 'es',\n-      style: true\n-    }, 'vant']\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ImagePreview Types - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the necessary type definitions for the ImagePreview component from the 'vant' library. These types include ImagePreviewProps, ImagePreviewOptions, ImagePreviewInstance, and ImagePreviewScaleEventParams. This is crucial for type-safe usage of the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/image-preview/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  ImagePreviewProps,\n  ImagePreviewOptions,\n  ImagePreviewInstance,\n  ImagePreviewScaleEventParams,\n} from 'vant';\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Override - CSS\nDESCRIPTION: This snippet shows how to override the primary color of all Vant components using CSS variables. By modifying the `--van-primary-color` variable, you can globally change the primary color used throughout the Vant component library.  This is a common approach for theme customization.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/release-note-v4.en-US.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --van-primary-color: #07c160;\n}\n```\n\n----------------------------------------\n\nTITLE: useRaf Function Type Definition (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the type signature for the useRaf function. It specifies the callback function's type and the shape of the options object, including interval and isLoop properties.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-raf.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRaf(\n  callback: () => void,\n  options: {\n    interval?: number;\n    isLoop?: boolean;\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Importing WaterProps Type Definition\nDESCRIPTION: Imports the `WaterProps` type definition from the `vant` library. This type provides type information for the props accepted by the Watermark component, enabling type-safe development.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/watermark/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { WaterProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: useRect Type Declaration\nDESCRIPTION: This TypeScript code defines the type declaration for the useRect hook function. It shows that the function accepts an element, window, or a ref containing an element or window. It returns a DOMRect object.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-rect.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRect(\n  element: Element | Window | Ref<Element | Window | undefined>,\n): DOMRect;\n```\n\n----------------------------------------\n\nTITLE: Sticky Component Typescript Definition\nDESCRIPTION: This snippet shows the Typescript import statement to obtain the type definitions for the Sticky component. It imports `StickyProps` and `StickyPosition` from 'vant'. This allows for strong typing when working with the Sticky component in Typescript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/sticky/README.zh-CN.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StickyProps, StickyPosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Event Naming in JSX: Vant 3 vs Vant 4 - JSX\nDESCRIPTION: This code snippet illustrates the event naming adjustment in JSX from Vant 3 to Vant 4. Vant 4 uses camelCase for event names. The snippet shows how events were monitored in Vant 3 using dash-case and how they are monitored in Vant 4 using camelCase in JSX components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v3.en-US.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Vant 3\n<Field onClick-input={onClick} />\n\n// Vant 4\n<Field onClickInput={onClick} />\n```\n\n----------------------------------------\n\nTITLE: Using useParent to access parent data\nDESCRIPTION: This code snippet demonstrates how to use the `useParent` hook in a child component to access data and methods provided by the parent component. It retrieves the parent using the relation key and then utilizes the `add` method and `count` value injected by the parent.  The parent property is checked before accessing it, preventing errors if the component isn't within the expected parent context.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-relation.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useParent } from '@vant/use';\n\nexport default {\n  setup() {\n    const { parent } = useParent(RELATION_KEY);\n\n    // use data and methods provided by parent\n    if (parent) {\n      parent.add();\n      console.log(parent.count.value); // -> 1\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Element Definition\nDESCRIPTION: Defines a div element with a ref attribute named 'root'. This element is used as the target for finding the scrollable parent using the useScrollParent hook.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-scroll-parent.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Badge Prop on Icon HTML\nDESCRIPTION: Illustrates the renaming of the `info` prop to `badge` for displaying the badge in the upper right corner of the icon in Vant v3.  This change affects components like Tab, Icon, GridItem, TreeSelect, TabbarItem, SidebarItem, and GoodsActionIcon.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/migrate-from-v2.en-US.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vant 2 -->\n<van-icon info=\"5\" />\n\n<!-- Vant 3 -->\n<van-icon badge=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure (Separate JS/CSS)\nDESCRIPTION: This snippet displays the directory structure for a component when using separate JS and CSS files for theme customization and other features. It includes a demo directory, a component entry point (index.js), a style file (index.less), and a README.md file. Developers need to import JS and CSS files respectively in this case.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/docs/directory.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nbutton\n├─ demo             # component demo directory\n│   └─ index.vue   # component demo entry\n├─ index.js         # component entry\n├─ index.less       # component style，support scss and less\n└─ README.md        # component doc\n```\n\n----------------------------------------\n\nTITLE: Vant Circle Type Definition Import\nDESCRIPTION: Importing type definitions for the Vant Circle component, including `CircleProps` and `CircleStartPosition`. These types can be used for type checking and autocompletion when using the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/circle/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CircleProps, CircleStartPosition } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: Importing Toast component - Javascript\nDESCRIPTION: Shows that you don't need to import Toast component using explicit import.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/toast/README.zh-CN.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// 以下方式是不需要的\nimport { showToast } from 'vant'\n```\n\n----------------------------------------\n\nTITLE: Set Scroll Target - CSS\nDESCRIPTION: Defines the styling for the container used as the scroll target. The container is configured with a fixed height and overflow set to auto, enabling scrolling within the container.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.container {\n    height: 60vh;\n    overflow: auto;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Serbian Language to Locale\nDESCRIPTION: This code snippet describes the feature of adding Serbian language support to the Locale component for internationalization. It was contributed by @RogerZXY in pull request #12145.  This enhances the Vant UI library by providing localization support for Serbian-speaking users.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/changelog.zh-CN.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nfeat(Locale): 添加塞尔维亚语到国际化，由 [@RogerZXY](https://github.com/RogerZXY) 在 [#12145](https://github.com/youzan/vant/pull/12145) 中贡献\n```\n\n----------------------------------------\n\nTITLE: Registering a Component Locally\nDESCRIPTION: This snippet shows how to register a Vant component locally within a Vue.js component. This allows using the registered component only within the scope of the current component. The component is registered within the `components` option of the Vue component definition.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/advanced-usage.zh-CN.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'vant';\n\nexport default {\n  components: {\n    [Button.name]: Button,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Types from Vant\nDESCRIPTION: This TypeScript code snippet demonstrates how to import type definitions related to the Pagination component from the 'vant' library, allowing for type-safe usage of the component in TypeScript projects.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/pagination/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PaginationMode, PaginationProps } from 'vant';\n```\n\n----------------------------------------\n\nTITLE: PickerGroup with Next Step Button in Vue JS\nDESCRIPTION: This JavaScript code is the same as the basic Date Time selection, showing that the `next-step-text` property is handled internally by the PickerGroup and requires no change in the component's logic.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/picker-group/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\nimport { showToast } from 'vant';\n\nexport default {\n  setup() {\n    const currentDate = ref(['2022', '06', '01']);\n    const currentTime = ref(['12', '00']);\n\n    const onConfirm = () => {\n      showToast(\n        `${currentDate.value.join('/')} ${currentTime.value.join(':')}`,\n      );\n    };\n\n    const onCancel = () => {\n      showToast('cancel');\n    };\n\n    return {\n      minDate: new Date(2020, 0, 1),\n      maxDate: new Date(2025, 5, 1),\n      currentDate,\n      currentTime,\n      onConfirm,\n      onCancel,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure\nDESCRIPTION: Defines a basic HTML div element with a ref attribute, which will be used as the target for the useClickAway hook. The ref allows Vue to access the DOM element.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-click-away.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div ref=\"root\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for On-Demand Styles\nDESCRIPTION: Shows how to install the necessary dependencies for on-demand component styling, which involves using `unplugin-vue-components` and `@vant/auto-import-resolver`.  The -D flag indicates these are development dependencies.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 npm 安装\nnpm i @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# 通过 yarn 安装\nyarn add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# 通过 pnpm 安装\npnpm add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n\n# 通过 bun 安装\nbun add @vant/auto-import-resolver unplugin-vue-components unplugin-auto-import -D\n```\n\n----------------------------------------\n\nTITLE: Set Scroll Target - JavaScript\nDESCRIPTION: Defines the setup function for the Vue component used in the scroll target example. Initializes a list of 50 items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding @vant/nuxt Module to Nuxt Config\nDESCRIPTION: Configures the Nuxt 3 project by adding the `@vant/nuxt` module to the `modules` array in the `nuxt.config.js` file. This enables automatic component and style importing.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/quickstart.zh-CN.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@vant/nuxt'],\n});\n```\n\n----------------------------------------\n\nTITLE: useRect Function Type Definition\nDESCRIPTION: This code snippet defines the TypeScript type signature for the useRect hook function.  It shows that the function accepts either an Element, a Window, or a Ref containing either of those, and returns a DOMRect object, representing the element's dimensions and position.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-rect.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRect(\n  element: Element | Window | Ref<Element | Window | undefined>,\n): DOMRect;\n```\n\n----------------------------------------\n\nTITLE: Install stylelint\nDESCRIPTION: This command installs stylelint and @vant/stylelint-config, which are used for linting CSS and style files.  This command is needed since `stylelint` is no longer installed by default.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-cli/changelog.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stylelint@13 @vant/stylelint-config\n```\n\n----------------------------------------\n\nTITLE: Type declarations for useParent and useChildren\nDESCRIPTION: This code snippet presents the TypeScript type declarations for the `useParent` and `useChildren` functions. These declarations define the expected input parameters (a string or symbol key) and the structure of the return values, which include properties like `parent`, `index`, `children`, and `linkChildren`. This enables type safety and helps developers understand how to use and interact with these hooks.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/docs/markdown/use-relation.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useParent<T>(key: string | symbol): {\n  parent?: T;\n  index?: Ref<number>;\n};\n\nfunction useChildren(key: string | symbol): {\n  children: ComponentPublicInstance[];\n  linkChildren: (value: any) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @vant/compat using yarn\nDESCRIPTION: Installs the @vant/compat package using yarn. This command adds the package to your project's dependencies, allowing you to use the Vant 3 compatible components.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant-compat/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @vant/compat\n```\n\n----------------------------------------\n\nTITLE: Custom Content - JavaScript\nDESCRIPTION: Defines the setup function for the Vue component used in the custom content example. Initializes a list of 50 items.\nSOURCE: https://github.com/youzan/vant/blob/main/packages/vant/src/back-top/README.zh-CN.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup() {\n    const list = [...Array(50).keys()];\n    return { list };\n  },\n};\n```"
  }
]