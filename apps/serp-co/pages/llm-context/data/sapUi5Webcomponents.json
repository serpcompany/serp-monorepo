[
  {
    "owner": "sap",
    "repo": "ui5-webcomponents",
    "content": "TITLE: Importing OpenUI5Support Feature - JavaScript\nDESCRIPTION: This code imports the OpenUI5Support feature. This enables integration with the OpenUI5 framework, allowing synchronization and resource re-use between UI5 Web Components and OpenUI5 applications. It must be imported before component modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-base/dist/features/OpenUI5Support.js\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Element with Configuration Object - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a custom UI5 Web Component using the `@customElement` decorator with a configuration object. This approach allows for specifying various options such as tag name, renderer, styles, template, dependencies, and more.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\n\n@customElement({\n    tag: \"my-demo-component\",\n    renderer: ...,\n    styles: ...,\n    template: ...,\n    dependencies: ...,\n    languageAware: ...,\n    themeAware: ...,\n    fastNavigation: ...,\n    formAssociated: ...,\n    shadowRootOptions: ...,\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Component\nDESCRIPTION: This JavaScript code imports a specific UI5 Web Component (Button) into the project.  This registers the `<ui5-button>` custom element with the browser, allowing it to render the button component. This should be placed in `src/main.js`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/01-first-steps.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// src/main.js\nimport \"@ui5/webcomponents/dist/Button.js\";\n```\n\n----------------------------------------\n\nTITLE: Property Change Invalidation\nDESCRIPTION: This TypeScript code snippet demonstrates how a change in a property (specifically, `text`) causes the component to be invalidated and re-rendered.  No specific metadata configuration is needed beyond `@property()`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n@property()\ntext?: string;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Form Association - TypeScript\nDESCRIPTION: This code snippet demonstrates how to enable form association for a custom UI5 Web Component using the `formAssociated` option within the `@customElement` decorator's configuration object. When enabled, the component can be used within a native HTML form.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\n\n@customElement({\n    formAssociated: true\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Styling a UI5 Web Component with CSS Variables\nDESCRIPTION: This snippet shows how to style a UI5 web component using CSS variables. It sets the font size, font family, and text color using the `--sapFontSize`, `--sapFontFamily`, and `--sapTextColor` variables, respectively. These variables are then themed via theming-base-content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* ui5-text web component */\n:host {\n\tfont-size: var(--sapFontSize);\n\tfont-family: var(--sapFontFamily);\n\tcolor: var(--sapTextColor);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a UI5 Web Component Instance - HTML\nDESCRIPTION: Demonstrates creating a UI5 Web Component instance directly in the HTML body. This is the simplest way to add a web component to a page.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button>Click me</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Type Checking Error Example in TypeScript\nDESCRIPTION: This code shows an example of TypeScript's type checking capabilities. It demonstrates that passing a boolean value to `setLanguage`, which expects a string, will result in a TypeScript error. This helps catch errors during development rather than at runtime.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/16-typescript-support.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetLanguage(false)\n```\n\n----------------------------------------\n\nTITLE: Importing InputElementsFormSupport Feature - JavaScript\nDESCRIPTION: This JavaScript code imports the InputElementsFormSupport feature. It enables the use of UI5 Web Components, such as ui5-input, ui5-date-picker and more, within HTML forms. This allows developers to integrate these components seamlessly into standard form structures.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting Language with setLanguage in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `setLanguage` function from `@ui5/webcomponents-base` to change the current language. It showcases the import statement and the function call with a language code as an argument. It's a Promise-based function and will update all language-aware components and resolve when the rendering is complete.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/16-typescript-support.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport  { setLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\n\nsetLanguage(\"de\");\n```\n\n----------------------------------------\n\nTITLE: Keyed Iteration\nDESCRIPTION: Illustrates keyed iteration for improved performance and DOM stability.  A unique and stable key is used for each iterated element. In this example, the key is generated from the `token._id` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nthis.tokens\n    .filter(token => token._isVisible)\n    .map(token => <ListItemStandard key={String(token._id)}\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component\nDESCRIPTION: This code snippet shows how to import the `Avatar` component from the `@ui5/webcomponents` package.  The `Avatar` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Avatar.js\";\n```\n\n----------------------------------------\n\nTITLE: Adding JSX Template Support\nDESCRIPTION: This code snippet adds support for JSX templates with TypeScript in the SAP UI5 Web Components framework. This enables developers to use JSX syntax for creating UI components, leveraging the type safety and tooling benefits of TypeScript, addressing issue #10046.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Resetting the Theme to Default in UI5 Web Components\nDESCRIPTION: This code snippet demonstrates how to reset the theme to the default theme using the `setTheme` and `getDefaultTheme` functions from `@ui5/webcomponents-base`.  It imports both functions and then calls `setTheme` with the result of `getDefaultTheme()` to revert to the original theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setTheme, getDefaultTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\nsetTheme(getDefaultTheme());\n```\n\n----------------------------------------\n\nTITLE: Adding CUSTOM_ELEMENTS_SCHEMA to Angular Module\nDESCRIPTION: Adds `CUSTOM_ELEMENTS_SCHEMA` to the `schemas` array within an Angular module's metadata.  This tells Angular that the module is aware of and allows the use of custom elements, which are necessary for UI5 Web Components to work correctly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimports: [\n    ...\n],\nschemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Suggestions for ui5-prompt-input - JavaScript\nDESCRIPTION: This feature adds suggestion functionality to the ui5-prompt-input component. It enables users to receive and select suggestions as they type in the input field, improving the user experience. This was implemented as part of issue #9390.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Defining Event Detail Type - TypeScript\nDESCRIPTION: Defines a TypeScript type for event details. This example shows a type `MyDemoComponentSelectionChangeEventDetail` with a `valid` property of type boolean. This type is then used with the `@event` decorator and `fireDecoratorEvent` to ensure type safety when firing events.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MyDemoComponentSelectionChangeEventDetail = {\n\tvalid: boolean;\n};\n\n\n@event<MyDemoComponentSelectionChangeEventDetail>(\"selection-change\", {\n\tdetail: {\n\t\tvalid: { type: Boolean },\n\t},\n})\nclass MyDemoComponent extends UI5Element {\n\n\tonItemSelected(e: Event) {\n\t\tthis.fireDecoratorEvent<MyDemoComponentSelectionChangeEventDetail>(\"selection-change\", {\n\t\t\tvalid: true,\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Unnamed Slot in HTML\nDESCRIPTION: This snippet illustrates how to pass content to an unnamed slot using the `slot` attribute in HTML. The `slot` attribute on the child element specifies which slot it should be rendered in. This allows content to be injected into specific areas of the component's shadow DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<my-demo-component>\n    <span slot=\"mySlot\">Hello World</span>\n</my-demo-component>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Cozy Content Density\nDESCRIPTION: This CSS code defines CSS variables for the \"Cozy\" content density mode. These variables control the width and padding of a web component. By default, when writing web component styles and defining CSS variables, they are considered as `Cozy`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n:root {\n\t--my-component-width: 2.75rem;\n\t--my-component-padding: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Using UI5 Web Component in React JSX\nDESCRIPTION: This snippet demonstrates how to use the imported `<ui5-button>` web component within the React application's JSX.  It renders a simple button with the text \"Hello world!\". Note that React treats web components as custom elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/01-React.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button>Hello world!</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Defining a Property with Custom Converter\nDESCRIPTION: This code snippet defines a property `myProp` with a custom converter. The converter object contains `toAttribute` and `fromAttribute` methods to handle the conversion between the property value and the attribute value. The example demonstrates converting an `HTMLElement` to null for the attribute, and vice versa.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/03-properties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @property({\n        converter: {\n            toAttribute(propertyValue: string | HTMLElement) {\n                if (propertyValue instanceof HTMLElement) {\n                    return null;\n                }\n                return propertyValue;\n            },\n            fromAttribute(value: string | null) {\n                return value;\n            }\n        }\n    })\n    myProp?: HTMLElement | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining component metadata - TypeScript\nDESCRIPTION: This code snippet demonstrates defining the metadata for a UI5 Web Component. It includes defining a property (`filter`) and a default slot (`items`). The `customElement` decorator registers the component with the specified tag name. This metadata is used by the framework for rendering and data binding.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement({\n    tag: \"my-component\",\n})\nclass MyComponent extends UI5Element {\n\t@property()\n\tfilter = \"\";\n\n\t@slot({ type: HTMLElement, individualSlots: true, \"default\": true })\n\titems!: Array<HTMLElement>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Language Awareness - TypeScript\nDESCRIPTION: This code snippet demonstrates how to enable language awareness for a custom UI5 Web Component using the `languageAware` option within the `@customElement` decorator's configuration object.  When set to `true`, the component re-renders when the application language changes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\n\n@customElement({\n    languageAware: true\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining i18n key-value pairs (messagebundle.properties)\nDESCRIPTION: This snippet demonstrates how to define translatable texts as key-value pairs in the `messagebundle.properties` file for UI5 Web Components i18n.  It shows an example of a `PLEASE_WAIT` key with its default value. Comments can be added using the `#` symbol. This file serves as the default language translation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/09-internationalization.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# please wait text for the sample component\nPLEASE_WAIT=wait\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Nested Loops\nDESCRIPTION: This example demonstrates nested loops in Handlebars. The outer loop iterates through the `numbers` array, and the inner loop iterates through each sub-array. `this` is used to access the current number in the inner loop.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_8\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each numbers}}\n\t<div>\n\t\t{{#each this}}\n\t\t\t<span>{{this}}</span>\n\t\t{{/each}}\n\t</div>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme based on OS Preference (Typescript)\nDESCRIPTION: Sets the UI5 Web Components theme based on the user's operating system's color scheme preference (light or dark). It uses the `prefers-color-scheme` CSS media feature to detect the OS setting and then applies the corresponding UI5 theme (e.g., `sap_horizon_dark` or `sap_horizon`).\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\n\nconst darkColorScheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\nsetTheme(darkColorScheme ? \"sap_horizon_dark\" : \"sap_horizon\");\n```\n\n----------------------------------------\n\nTITLE: Integrating i18n in Web Components (TypeScript)\nDESCRIPTION: This snippet demonstrates how to integrate internationalization (i18n) into a UI5 Web Component using TypeScript. It imports necessary modules from `@ui5/webcomponents-base`, defines a custom element, loads the i18n bundle in the `onDefine` method, and provides a getter method (`counterText`) to fetch translated text from the bundle using the `getText` method.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/09-internationalization.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport type I18nBundle from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { COUNT } from \"./generated/i18n/i18n-defaults.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n  static i18nBundle: I18nBundle;\n\n  static async onDefine() {\n    MyDemoComponent.i18nBundle = await getI18nBundle(\"my-ui5-web-components\");\n  }\n\n  get counterText() {\n    return MyDemoComponent.i18nBundle.getText(COUNT);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Element Tag with @custom Decorator (TS)\nDESCRIPTION: This snippet shows how to define a custom element's tag name using the `@custom` decorator in TypeScript.  The tag name must include a `-` character. The tag can be a string literal or specified as a `tag` property in an object.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@custom(\"my-component\")\n//or\n@custom({\n\ttag: \"my-component\"\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Horizon Theme\nDESCRIPTION: This snippet demonstrates how to define CSS variables for the Horizon theme. These variables are used to set the colors for the brand, highlight, base, shell, background, and text. These values are applied when the Horizon theme is active, providing a specific visual style.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Horizon */\nroot {\n\t--sapBrandColor: #0070f2;\n\t--sapHighlightColor: #0064d9;\n\t--sapBaseColor: #fff;\n\t--sapShellColor: #fff;\n\t--sapBackgroundColor: #f5f6f7;\n\t--sapTextColor: #1d2d3e;\n```\n\n----------------------------------------\n\nTITLE: Binding UI5 Web Component Event in React\nDESCRIPTION: This code snippet shows how to bind a custom event (e.g., 'change') from a UI5 Web Component within a React component. It uses React's `createRef` to get a reference to the UI5 Web Component instance, and then adds an event listener to the element. This is needed because React doesn't directly support custom events on web components without a ref.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/01-React.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass Home extends Component {\n\n    constructor (props) {\n        super(props);\n        this.switch = React.createRef();\n    }\n\n    componentDidMount() {\n        this.switch.addEventListener('change', event => {\n            console.log('switch is toggled');\n        })\n    }\n\n    render(){\n        return(\n            <ui5-switch ref={this.switch}></ui5-switch>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a UI5 Web Component in Angular\nDESCRIPTION: Imports the Button component from the UI5 Web Components library within an Angular component.  This makes the specific UI5 Web Component available for use in the component's template. The path points to the JavaScript file of the button component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Component } from '@angular/core';\n\nimport '@ui5/webcomponents/dist/Button.js';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Properties and Attributes - JavaScript\nDESCRIPTION: Demonstrates setting a property and an attribute of a UI5 Web Component using JavaScript. Highlights the difference between camelCase properties and kebab-case attributes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCb = document.getElementById(\"cb\");\nmyCb.valueState = \"Negative\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCb = document.getElementById(\"cb\");\nmyCb.setAttribute(\"value-state\", \"Negative\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Property with @property Decorator (TS)\nDESCRIPTION: This snippet shows how to define a property on a UI5 Web Component using the `@property` decorator in TypeScript.  This creates a getter/setter pair managed by the framework, resulting in both a property and an attribute (by default).\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n@property()\ntext = \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Theme and Reacting to OS Setting Changes\nDESCRIPTION: This code snippet demonstrates how to dynamically update the UI5 theme based on changes to the user's OS preferences for color scheme and contrast. It attaches event listeners to the `change` event of the media queries to react to these changes. The `applyOSThemePreferences` function is called initially and whenever the media query status changes. It checks for both \"more\" and \"custom\" contrast settings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\n\nconst darkColorScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\nconst prefersContrastMore = window.matchMedia(\"(prefers-contrast: more)\");\nconst prefersContrastCustom = window.matchMedia(\"(prefers-contrast: custom)\");\n\nconst applyOSThemePreferences = () => {\n\tif (prefersContrastMore.matches || prefersContrastCustom.matches) {\n\t\tsetTheme(darkColorScheme.matches ? \"sap_horizon_hcb\" : \"sap_horizon_hcw\");\n\t} else {\n\t\tsetTheme(darkColorScheme.matches ? \"sap_horizon_dark\" : \"sap_horizon\");\n\t}\n}\n\ndarkColorScheme.onchange = applyOSThemePreferences;\nprefersContrastMore.onchange = applyOSThemePreferences;\nprefersContrastCustom.onchange = applyOSThemePreferences;\n\napplyOSThemePreferences();\n```\n\n----------------------------------------\n\nTITLE: Event handler assignment in Handlebars with @ prefix\nDESCRIPTION: This snippet illustrates how to bind event handlers in Handlebars using the `@` prefix.  The `@click` attribute binds the `onClick` function to the button's click event.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_41\n\nLANGUAGE: handlebars\nCODE:\n```\n<button @click=\"{{onClick}}\"></button>\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Property with @property\nDESCRIPTION: This code snippet demonstrates how to define a boolean property `myProp` for a UI5 Web Component using the `@property` decorator. The `type: Boolean` option ensures proper attribute conversion. The default value is set to `false` using a JavaScript property initializer.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/03-properties.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @property({ type: Boolean })\n    myProp = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Tag Name - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set the tag name of a custom UI5 Web Component using the `tag` option within the `@customElement` decorator's configuration object. The tag name is used to register the component within the global `CustomElementsRegistry`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\n\n@customElement({\n    tag: \"my-demo-component\"\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Template - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set the template for a custom UI5 Web Component using the `template` option within the `@customElement` decorator's configuration object.  It relies on a pre-defined template file. It also requires a renderer to be specified, such as `jsxRenderer`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport jsxRenderer from \"@ui5/webcomponents-base/dist/renderer/JsxRenderer.js\";\nimport MyDemoComponentTemplate from \"./MyDemoComponentTemplate.js\";\n\n@customElement({\n    renderer: jsxRenderer,\n    template: MyDemoComponentTemplate\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event using @event decorator - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a custom event for a UI5 Web Component using the `@event` decorator. The decorator takes the event name as a string argument.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event-strict.js\";\n\n@customElement(\"my-demo-component\")\n@event(\"change\")\nclass MyDemoComponent extends UI5Element {}\n```\n\n----------------------------------------\n\nTITLE: Using Web Components in JSX\nDESCRIPTION: Shows how to use UI5 Web Components within JSX templates by importing the component class and using it as a value. This snippet imports the Button component from `@ui5/webcomponents` and uses it within JSX with the `design` property set to \"Positive\".\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport Button from \"@ui5/webcomponents/dist/Button.js\"\n<Button design=\"Positive\">Submit</Button>\n```\n\n----------------------------------------\n\nTITLE: Array Iteration with Map\nDESCRIPTION: Demonstrates iterating over an array and rendering a list of templates using the `Array.map` function. This snippet iterates over `this.items` and renders a list item for each item.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\n{this.items.map(item =>\n    <li class=\"ui5-timeline-list-item\">\n        {item.text}\n    </li>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting accessibleNameRef on ui5-input\nDESCRIPTION: This HTML snippet shows how to use `accessibleNameRef` to associate a `ui5-label` with a `ui5-input` component. The `accessibleNameRef` property takes the ID of the label, and the label's text is used as the `aria-label` for the input.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ui5-label id=\"myLabel\" for=\"myInput\">Date of birth</ui5-label>\n<ui5-input id=\"myInput\" accessible-name-ref=\"myLabel\"></ui5-input>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input aria-label=\"Date of birth\" ... >\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Component in JavaScript\nDESCRIPTION: This line imports the Button component from the UI5 Web Components library.  It specifically imports the JavaScript file for the Button web component, making it available for use in the React component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/01-React.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Button.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing multiple UI5 Web Components Features - JavaScript\nDESCRIPTION: This code snippet shows how to import multiple UI5 Web Components features before importing any components.  This is necessary for framework level features, such as OpenUI5 Support and F6 Navigation, to ensure proper setup and functionality before the components' definition.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-base/dist/features/OpenUI5Support.js\";\nimport \"@ui5/webcomponents-base/dist/features/F6Navigation.js\";\n\nimport \"@ui5/webcomponents/dist/Button.js\";\nimport \"@ui5/webcomponents/dist/Link.js\";\nimport \"@ui5/webcomponents/dist/Input.js\";\n```\n\n----------------------------------------\n\nTITLE: Styling a Component with Global and Specific CSS Variables\nDESCRIPTION: This CSS snippet illustrates how to style a web component using both global SAP CSS variables (e.g., `--sapTextColor`) and component-specific CSS variables (e.g., `--my-component-border-color`). The `:host` selector targets the component itself.  This approach enables theming of component-specific aspects alongside the standard SAP theming.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* src/themes/MyComponent.css */\n:host {\n\tcolor: var(--sapTextColor); /* using global vars */\n\tborder-color: var(--my-component-border-color); /* using component-specific vars */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Slot with the @slot Decorator (ts)\nDESCRIPTION: This snippet demonstrates how to define a named slot in a UI5 Web Component using the `@slot` decorator. Named slots are used when the component needs to interact with its slotted children. The `mySlot` property is decorated with `@slot()` and typed as an array of `HTMLElement` objects, allowing the component to access and manipulate the slotted content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @slot()\n    mySlot!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Slots (ts)\nDESCRIPTION: This snippet illustrates how to define individual slots using the `individualSlots` option in the `@slot` decorator. When `individualSlots` is set to `true`, each slotted child gets its own unique slot name, allowing for custom arrangement.  The component is responsible for rendering these individual slots.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @slot({ type: HTMLElement, individualSlots: true })\n    mySlot!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Preventable Events - TypeScript\nDESCRIPTION: Shows how to configure an event to be preventable using the `cancelable` setting in the `@event` decorator.  The `fireDecoratorEvent` method returns `false` if the event was cancelled (preventDefault was called) and `true` otherwise.  This is then used to update or revert the component's state.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n@event(\"change\", {\n    cancelable: true // false by default\n})\nclass Switch extends UI5Element {\n\ttoggle() {\n\t\tthis.checked = !this.checked;\n\t\tconst changePrevented = !this.fireDecoratorEvent(\"change\");\n\n\t\tif (changePrevented) {\n\t\t\tthis.checked = !this.checked;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Dependencies - TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare dependencies for a custom UI5 Web Component using the `dependencies` option within the `@customElement` decorator's configuration object. This ensures that any internally used web components are properly defined.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport Icon from \"@ui5/webcomponents/dist/Icon.js\";\n\n@customElement({\n    dependencies: [Icon]\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting the Theme for UI5 Web Components\nDESCRIPTION: This code snippet shows how to set a theme for UI5 Web Components using the `setTheme` function from `@ui5/webcomponents-base`. It sets the theme to `sap_horizon_hcb` (High Contrast Black).\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\nsetTheme(\"sap_horizon_hcb\");\n```\n\n----------------------------------------\n\nTITLE: Import Assets for UI5 Web Components\nDESCRIPTION: This line imports the core assets (i18n and themes) required for UI5 Web Components. It also automatically imports `@ui5/webcomponents-localization/dist/Assets.js` and `@ui5/webcomponents-theming/dist/Assets.js` which provide localization and theming functionalities respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Preparing state for rendering using onBeforeRendering - TypeScript\nDESCRIPTION: The `onBeforeRendering` lifecycle hook is used to prepare variables that will be used in the `.hbs` template. This example filters the `items` slot based on the `filter` property and stores the result in the `_filteredItems` array. This array is then used in the template to render only the filtered items.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n\nclass MyComponent extends UI5Element {\n\t@property()\n\tfilter = \"\";\n\n\t@slot({ type: HTMLElement, individualSlots: true, \"default\": true })\n\titems!: Array<HTMLElement>\n\n\tthis._filteredItems = [];\n\n\tonBeforeRendering() {\n\t\tthis._filteredItems = this.items.filter(item => item.name.includes(this.filter));\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting accessibleDescriptionRef on ui5-list\nDESCRIPTION: This HTML snippet illustrates using `accessibleDescriptionRef` to link a paragraph element containing a description to a `ui5-list` component.  The `accessibleDescriptionRef` property takes the ID of the paragraph, and the paragraph's text is used as the `aria-description` for the list.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p id=\"description\">List of items</p>\n<ui5-list accessible-description-ref=\"description\">\n    <ui5-li>Item 1</ui5-li>\n    <ui5-li>Item 2</ui5-li>\n</ui5-list>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul role=\"list\" aria-description=\"List of items\" ... >\n    ...\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Details using eventDetails - TypeScript\nDESCRIPTION: This code snippet illustrates how to define the types of events emitted by a component using the `eventDetails` class field. This field provides type information about the events and their corresponding detail parameters, improving type safety.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent extends UI5Element {\n  eventDetails!: {\n    \"selection-change\": SelectionChangeDetails\n    \"delete\": void\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-loading ColorPaletteMoreColors Feature - JavaScript\nDESCRIPTION: This JavaScript code imports the ColorPaletteMoreColors feature for the ui5-color-palette component. This allows pre-loading the feature to skip dynamic import, if that's the preferred way. By importing it, the component gains the ability to display a 'more colors' dialog.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/features/ColorPaletteMoreColors.js\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Adding UI5 Web Component to DOM\nDESCRIPTION: This JavaScript code snippet instantiates the `<ui5-button>` web component and adds it to the DOM (Document Object Model). It targets an element with the ID 'app' and sets its inner HTML to include the button element. This displays the button within the specified container. This should be placed in `src/main.js`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/01-first-steps.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// src/main.js\n...\ndocument.querySelector('#app').innerHTML = `\n  <ui5-button>Hello UI5 Web Components</ui5-button>\n`\n```\n\n----------------------------------------\n\nTITLE: Listening for Events - JavaScript\nDESCRIPTION: Demonstrates how to listen for events fired by UI5 Web Components using the standard `addEventListener` method. Includes examples for both custom events (e.g., \"close\" on a message strip) and standard events (e.g., \"click\" on a button).\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMessage = document.getElementsByTagName(\"ui5-message-strip\")[0];\nmyMessage.addEventListener(\"close\", () => {\n\tconsole.log(\"The user dismissed the message\");\n});\n\nconst myButton = document.getElementsByTagName(\"ui5-button\")[0];\nmyButton.addEventListener(\"click\", () => {\n\tconsole.log(\"The user clicked the button\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons in UI5 Web Components\nDESCRIPTION: This snippet demonstrates how to use custom icons after registering the collection loader.  Custom icons are used in `ui5-icon`, `ui5-button`, `ui5-avatar`, and `ui5-li` components, prefixed with the custom collection name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon name=\"my-custom-icons/mark\"></ui5-icon>\n<ui5-button icon=\"my-custom-icons/mark\"></ui5-button>\n<ui5-avatar icon=\"my-custom-icons/mark\"></ui5-avatar>\n<ui5-li icon=\"my-custom-icons/mark\"></ui5-li>\n```\n\n----------------------------------------\n\nTITLE: Changing `iconEnd` property to `end-icon` in `ui5-button` (HTML)\nDESCRIPTION: Demonstrates the change from the boolean `iconEnd` property to the string `end-icon` property in `ui5-button`.  The `iconEnd` attribute is replaced with `end-icon` to allow specifying an icon at the end of the button.  The `end-icon` property now accepts the name of the icon to be displayed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button icon=\"home\" icon-end>Button</ui5-button>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button end-icon=\"home\">Button</ui5-button>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button icon=\"employee\" end-icon=\"home\">Button</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Using a Slot - HTML\nDESCRIPTION: Shows how to insert HTML elements into a component using the slot.  Any content between the opening and closing tags of the component will be rendered in the location of the `<slot>` tag in the component's template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_27\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- index.html -->\n<my-demo-component>\n\t<span>Hello World</span>\n</my-demo-component>\n```\n\n----------------------------------------\n\nTITLE: Setting accessibleDescription on ui5-list\nDESCRIPTION: This HTML snippet demonstrates setting the `accessibleDescription` property on a `ui5-list` component.  This property maps to the `aria-description` attribute in the shadow DOM, providing a description for the list.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list accessible-description=\"List of items\">\n    <ui5-li>Item 1</ui5-li>\n    <ui5-li>Item 2</ui5-li>\n</ui5-list>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul role=\"list\" aria-description=\"List of items\" ... >\n    ...\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Importing OpenUI5 Support and UI5 Web Components (JavaScript)\nDESCRIPTION: This code snippet demonstrates the correct order for importing the OpenUI5 support module and subsequent UI5 Web Components.  The OpenUI5 support module must be imported first to enable shared configuration and resources. This ensures that OpenUI5 configuration takes precedence.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/07-OpenUI5-integration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-base/dist/features/OpenUI5Support.js\";\n\nimport \"@ui5/webcomponents/dist/Button.js\";\nimport \"@ui5/webcomponents/dist/Link.js\";\nimport \"@ui5/webcomponents/dist/Input.js\";\n```\n\n----------------------------------------\n\nTITLE: Connecting Styles to a UI5 Web Component\nDESCRIPTION: This TypeScript snippet demonstrates how to connect styles to a UI5 web component using the `@customElement` decorator. It imports the component's styles (generated from the CSS file) and assigns them to the `styles` property of the decorator. This links the CSS rules to the component, enabling the styling to be applied.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\n\n// Styles\nimport myStyles from \"./generated/themes/MyComponent.css.js\";\n\n@customElement({\n\ttag: \"my-component\",\n\tstyles: myStyles,\n})\nclass MyComponent extends UI5Element {\n}\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JS (JSX)\nDESCRIPTION: This snippet renders an `<Editor>` component, passing the imported HTML and JavaScript strings as props.  It demonstrates how to integrate external code snippets into a UI5 web component's UI.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UserMenu/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Style Binding in JSX\nDESCRIPTION: Demonstrates setting inline styles in JSX using an object. The keys are CSS property names, and the values are the corresponding style values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n<div\n    style={{\n        \"display\": this._contentExpanded ? \"block\" : \"none\",\n    }}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Dynamically with JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to dynamically set the theme of UI5 Web Components using the `setTheme` function.  The code imports the function from `@ui5/webcomponents-base/dist/config/Theme.js` and calls it with different theme names, allowing you to switch between built-in themes (e.g., `sap_fiori_3`) and custom themes (e.g., `mytheme`) at runtime.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/12-theming.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\nsetTheme(\"sap_fiori_3\");\n...\nsetTheme(\"mytheme\");\n...\nsetTheme(\"sap_fiori_3_dark\");\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Fast Navigation - TypeScript\nDESCRIPTION: This code snippet demonstrates how to enable fast navigation support for a custom UI5 Web Component using the `fastNavigation` option within the `@customElement` decorator's configuration object.  Setting this option adds the `data-sap-ui-fastnavgroup` attribute to the component's root element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\n\n@customElement({\n    fastNavigation: true\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Default SAP Icon in HTML\nDESCRIPTION: This HTML code snippet demonstrates how to use a SAP icon with the `ui5-icon` web component, without specifying an icon collection. The framework automatically detects the current theme and renders the corresponding icon version (v4 or v5).  The component requires the `ui5-icon` web component to be available. Required dependency: `@ui5/webcomponents`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"accept\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Setting accessibleRole in ui5-panel - HTML\nDESCRIPTION: This snippet demonstrates how to set the `accessible-role` property on a `ui5-panel` custom element, which will result in the corresponding `role` attribute being set in the shadow DOM. This enhances accessibility by defining the element's role for screen readers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<ui5-panel accessible-role=\"Complementary\">\n    ...\n</ui5-panel>\n```\n\n----------------------------------------\n\nTITLE: Complete i18n Usage Example - JavaScript\nDESCRIPTION: Presents a complete code example that combines importing the necessary modules, registering i18n loaders for multiple languages, fetching the data for the active language, and using the `getText` method to retrieve texts for the app. It showcases a basic i18n setup within an application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/08-using-i18n-for-apps.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport parseProperties from \"@ui5/webcomponents-base/dist/PropertiesFileFormat.js\";\nimport { registerI18nLoader, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\n\nconst supportedLocales = [\"en\", \"fr\", \"de\", \"es\"];\nsupportedLocales.forEach(localeToRegister => {\n\tregisterI18nLoader(\"myApp\", localeToRegister, async (localeId) => {\n\t\tconst props = await (await fetch(`./assets/messagebundle_${localeId}.properties`)).text();\n\t\treturn parseProperties(props);\n\t});\n});\n\nconst bundle = await getI18nBundle(\"myApp\");\n\nconst pleaseWait = bundle.getText(\"PLEASE_WAIT\");\nconsole.log(\"Please wait in the current language is: \", pleaseWait);\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript with raw-loader\nDESCRIPTION: This snippet imports the JavaScript code from the 'main.js' file using raw-loader.  Raw-loader is a webpack loader that allows importing files as raw strings. The imported JavaScript is assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/StickyHeaderContainer/StickyHeaderContainer.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Using UI5 Date Picker\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the `ui5-date-picker` component after importing necessary assets.  It will render a date picker component with default configurations before any theme or language is applied.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/04-using-assets.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ui5-date-picker></ui5-date-picker>\n```\n\n----------------------------------------\n\nTITLE: Setting accessibilityAttributes in ui5-button - JavaScript\nDESCRIPTION: This Javascript snippet demonstrates setting the `accessibilityAttributes` object property for a `ui5-button` element. The `hasPopup` and `controls` properties are set, which will be reflected as `aria-haspopup` and `aria-controls` attributes on the button's shadow DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst component = document.getElemetnById(\"button\");\n    component.accessibilityAttributes = {\n        hasPopup: \"dialog\",\n        controls: \"dialogIdentificator\"\n    };\n```\n\n----------------------------------------\n\nTITLE: Firing Event with Non-Default Configuration using fireEvent - TypeScript\nDESCRIPTION: This demonstrates how to fire a custom event using `fireEvent` with the third and fourth parameters to specify the `cancelable` and `bubbles` options, respectively. This gives direct control over event behavior at the point of emission, overriding any defaults.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Fires the event as preventable and non-bubbling\nthis.fireEvent(\"change\", {}, true, false);\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Component in JavaScript\nDESCRIPTION: This JavaScript code imports the `Button.js` module from the `@ui5/webcomponents` package. This loads and defines the `ui5-button` web component, making it available for use in your HTML. You need to import components you want to use.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Button.js\"; // loads and defines ui5-button\n```\n\n----------------------------------------\n\nTITLE: Move ui5-bar component - Typescript\nDESCRIPTION: Shows how to import the `ui5-bar` component from `main` instead of `fiori`. This is necessary because the component has been moved to the main library.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing all SAP Icons in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import all icons from the `@ui5/webcomponents-icons` package.  This approach makes all SAP icons available for use within the application. Note that it may increase the application's bundle size. Required dependency: `@ui5/webcomponents-icons`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-icons/dist/AllIcons.js\";\n```\n\n----------------------------------------\n\nTITLE: Using RTL-Friendly CSS Logical Property\nDESCRIPTION: This snippet demonstrates using the RTL-friendly CSS logical property `padding-inline-start`. This property automatically mirrors in RTL layouts, ensuring that the element has padding on the correct side regardless of the text direction.  In LTR, this is padding on the left, while in RTL it becomes padding on the right.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n:host {\n\tpadding-inline-start: 1rem; /* RTL-friendly */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Theme Awareness - TypeScript\nDESCRIPTION: This code snippet demonstrates how to enable theme awareness for a custom UI5 Web Component using the `themeAware` option within the `@customElement` decorator's configuration object. Generally, this should be avoided, unless the component needs to behave differently based on the current theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\n\n@customElement({\n    themeAware: true\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component\nDESCRIPTION: This code snippet shows how to import the `Link` component from the `@ui5/webcomponents` package. The `Link` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Link.js\";\n```\n\n----------------------------------------\n\nTITLE: setLanguage function documentation (HTML)\nDESCRIPTION: This HTML snippet shows the documentation generated for the `setLanguage` function, including its parameters, return type, and description. It illustrates how TypeScript can provide autocompletion and documentation within the IDE.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/16-typescript-support.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\nsetLanguage(language: string): Promise<void>\n\nChanges the current language, re-fetches all message bundles, updates all language-aware components and returns a promise that resolves when all rendering is done.\n\n@public\n@returns\n```\n\n----------------------------------------\n\nTITLE: Render UI5 Editor\nDESCRIPTION: Renders a UI5 editor component, passing the imported HTML and JavaScript source code as props. The 'html' and 'js' variables containing the HTML and JavaScript code are passed as properties to the '<Editor />' component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/TextWrapping/TextWrapping.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Using the component in HTML - HTML\nDESCRIPTION: This HTML snippet shows how to use the `my-filter-component`. It sets the `filter` property to \"John\" and provides three `my-filter-item` elements in the default slot. Only the items whose `name` property contains \"John\" will be displayed because of the filtering logic in `onBeforeRendering`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<my-filter-component filter=\"John\">\n\t<my-filter-item name=\"John Smith\"></my-filter-item>\n\t<my-filter-item name=\"Jane Doe\"></my-filter-item>\n\t<my-filter-item name=\"Jack Johnson\"></my-filter-item>\n</my-filter-component>\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Icons from UI5 Packages\nDESCRIPTION: This snippet demonstrates how to import individual icons from the UI5 Web Components icon packages. Importing individual icons reduces the bundle size.  It imports specific icons from the standard, TNT, and Business Suite icon packages.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-icons/dist/alert.js\";\nimport \"@ui5/webcomponents-icons/dist/bookmark.js\";\nimport \"@ui5/webcomponents-icons/dist/cart.js\";\n\nimport \"@ui5/webcomponents-icons-tnt/dist/actor.js\";\n\nimport \"@ui5/webcomponents-icons-business-suite/dist/add-point.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing CUSTOM_ELEMENTS_SCHEMA in Angular\nDESCRIPTION: Imports the `CUSTOM_ELEMENTS_SCHEMA` from the `@angular/core` module.  This schema allows Angular components to use custom HTML elements (like UI5 Web Components) without throwing errors.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ..., CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Opting out of Forced Colors Mode with CSS conditionally\nDESCRIPTION: This CSS snippet conditionally disables forced color adjustments when the `forced-colors` mode is active, by using a media query.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/09-FAQ.md#_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n@media (forced-colors: active) {\n  .html {\n    forced-color-adjust: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Group Component\nDESCRIPTION: This code snippet shows how to import the `AvatarGroup` component from the `@ui5/webcomponents` package. The `AvatarGroup` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/AvatarGroup.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing File Uploader Component\nDESCRIPTION: This code snippet shows how to import the `FileUploader` component from the `@ui5/webcomponents` package. The `FileUploader` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/FileUploader.js\";\n```\n\n----------------------------------------\n\nTITLE: Import i18n Modules - JavaScript\nDESCRIPTION: Imports the necessary modules for i18n functionality from the `@ui5/webcomponents-base` package. `parseProperties` is used to process `.properties` files, while `registerI18nLoader` and `getI18nBundle` are used for managing and retrieving the i18n bundles respectively. These imports are necessary to utilize the i18n features within the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/08-using-i18n-for-apps.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport parseProperties from \"@ui5/webcomponents-base/dist/PropertiesFileFormat.js\";\nimport { registerI18nLoader, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing RTL with applyDirection\nDESCRIPTION: This code snippet demonstrates how to dynamically change the RTL setting after the initial rendering of UI5 Web Components. It imports the 'applyDirection' function from the '@ui5/webcomponents-base' library and calls it after changing the 'dir' attribute on the document body. This function adjusts CSS styles affected by the direction.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/02-RTL-and-compact-mode.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport applyDirection from \"@ui5/webcomponents-base/dist/locale/applyDirection.js\";\n\ndocument.body.dir = \"rtl\";\napplyDirection();\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component\nDESCRIPTION: This code snippet shows how to import the `Slider` component from the `@ui5/webcomponents` package. The `Slider` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Slider.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Date Range Picker Component\nDESCRIPTION: This code snippet shows how to import the `DateRangePicker` component from the `@ui5/webcomponents` package. The `DateRangePicker` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/DateRangePicker.js\";\n```\n\n----------------------------------------\n\nTITLE: Multi-Colored Custom SVG Icon Example\nDESCRIPTION: This HTML snippet shows an example of a multi-colored SVG icon using multiple SVG elements and fill/color attributes. This can be used to create visually rich and distinct custom icons.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<g fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z\" fill=\"aqua\"/>\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z\" />\n</g>\n```\n\n----------------------------------------\n\nTITLE: Defining Slot as Class Member - TypeScript\nDESCRIPTION: Illustrates how to define a slot as a class member using the `@slot` decorator. This allows the framework to manage the slot and provides access to the slotted children within the component's class.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n\t@slot()\n\titems!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Renderer - TypeScript\nDESCRIPTION: This code snippet demonstrates how to specify the rendering engine for a custom UI5 Web Component using the `renderer` option within the `@customElement` decorator's configuration object. The example uses `jsxRenderer` from `@ui5/webcomponents-base`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport jsxRenderer from \"@ui5/webcomponents-base/dist/renderer/JsxRenderer.js\";\n\n@customElement({\n    renderer: jsxRenderer\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Components Main Assets\nDESCRIPTION: This JavaScript code imports the main `Assets.js` file for the `@ui5/webcomponents` package. This allows usage of theming parameters and translations for the core web components. It also automatically imports assets from `@ui5/webcomponents-localization` and `@ui5/webcomponents-theming`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/04-using-assets.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Using UI5 Web Components in HTML (sample.html)\nDESCRIPTION: This HTML snippet demonstrates how to use UI5 Web Components within an HTML file. It shows the usage of the `<ui5-button>` component with attributes for icon, design, and tooltip. The `playground-fold` comments are used for code folding in the website.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/04-website.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- playground-fold -->\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sample</title>\n</head>\n\n<body style=\"background-color: var(--sapBackgroundColor)\">\n    <!-- playground-fold-end -->\n\n    <ui5-button icon=\"sap-icon://edit\" design=\"Default\" tooltip=\"Edit Button\"></ui5-button>\n    <ui5-button icon=\"sap-icon://account\" design=\"Transparent\" tooltip=\"Account Button\"></ui5-button>\n    <!-- playground-fold -->\n    <script type=\"module\" src=\"main.js\"></script>\n</body>\n\n</html>\n<!-- playground-fold-end -->\n\n```\n\n----------------------------------------\n\nTITLE: Including a template and implementing partials\nDESCRIPTION: This demonstrates including a template with extension points and implementing these extension points with inline partials. It extends the functionality of the included template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_50\n\nLANGUAGE: handlebars\nCODE:\n```\n{{>include \"./MyComponent.hbs\"}}\n\n{{#*inline \"beforeContent\"}}\n\t<span>Implementation here</span>\n{{/inline}}\n\n{{#*inline \"afterContent\"}}\n\t<span>Another implementation here</span>\n{{/inline}}\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Web Components Packages\nDESCRIPTION: These commands install the main, fiori, and AI packages of UI5 Web Components as dependencies to your project. You need to have npm installed to run these commands. After installation, the components can be imported and used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/02-components-packages.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i @ui5/webcomponents\nnpm i @ui5/webcomponents-fiori\nnpm i @ui5/webcomponents-ai\n```\n\n----------------------------------------\n\nTITLE: Creating a Form UI with UI5 Web Components\nDESCRIPTION: Defines the template for an Angular component using UI5 Web Components for Angular. It uses `ui5-label`, `ui5-input`, and `ui5-button` components.  Two-way data binding is achieved using `[(ngModel)]` directive on the input elements, which binds the UI elements to the `firstName` and `lastName` properties of the `model` object. The `name` attribute is added to form controls for `ngModel` to work correctly. The template displays the form's value and status using JSON pipe.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<h1>Form Works!</h1>\n\n  <form #heroForm=\"ngForm\">\n    <div>\n      <ui5-label for=\"inp1\">First Name:</ui5-label>\n      <ui5-input id=\"inp1\" [(ngModel)]=\"model.firstName\" name=\"firstName\" [required]=\"true\"></ui5-input>\n    </div>\n\n    <div>\n      <ui5-label for=\"inp2\">Last Name:</ui5-label>\n      <input id=\"inp2\" type=\"text\" [(ngModel)]=\"model.lastName\" name=\"lastName\" required/>\n    </div>\n    \n    <ui5-button [submits]=\"true\">Submit</ui5-button> \n\n    Form Value: {{heroForm.value | json}}\n    Form Status: {{heroForm.status}}\n  </form>`,\n})\nexport class AppComponent {\n  model = {\n    firstName: \"\",\n    lastName: \"\"\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Component on Child Change - Boolean\nDESCRIPTION: This TypeScript code demonstrates how to use the `invalidateOnChildChange` option with a boolean value to invalidate a component when any UI5Element instances slotted into the content slot are updated due to property or slot changes. The component will re-render when a property or slot of the child elements change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @slot({ type: HTMLElement, invalidateOnChildChange: true })\n    content!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Elements Scoping Suffix - JavaScript\nDESCRIPTION: This JavaScript snippet sets a custom suffix for all UI5 Web Components custom elements. It imports the `setCustomElementsScopingSuffix` function from `@ui5/webcomponents-base` and calls it with the desired suffix, \"demo\". This suffix will be appended to all UI5 Web Components' tag names. It is crucial to call this method before importing any UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/06-scoping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setCustomElementsScopingSuffix } from \"@ui5/webcomponents-base/dist/CustomElementsScope.js\";\nsetCustomElementsScopingSuffix(\"demo\");\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cypress Commands\nDESCRIPTION: This snippet details how to create custom Cypress commands for UI5 Web Component testing. It demonstrates defining a command to click a component, declaring the command in the Cypress namespace for TypeScript support, and using the command in a test.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nCypress.Commands.add(\"clickMyComponent\", (selector) => {\n  cy.get(selector).click();\n});\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      clickMyComponent(selector: string): Chainable<Element>;\n    }\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./myComponentCommands\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe(\"My Component Tests\", () => {\n  it(\"should click my component\", () => {\n    cy.mount(<MyComponent></MyComponent>);\n\n    cy.clickMyComponent(\"my-component\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript class map definition\nDESCRIPTION: This JavaScript code defines a getter called `classes` that returns an object representing a class map. The class map contains different classes for `main`, `content`, and `section` elements. Classes can be conditionally applied based on component state or device type.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nget classes() {\n\treturn {\n\t\tmain: {\n\t\t\t\"ui5-myComponent-main\": true,\n\t\t\t\"ui5-myComponent-mobile\": isPhone()\n\t\t},\n\t\tcontent :{\n\t\t\t\"ui5-content-wide\": this.width > 1024\n\t\t},\n\t\tsection: {\n\t\t\t\"ui5-section\": true,\n\t\t\t\"ui5-section-with-items\": this.items.length > 0,\n\t\t\t\"ui5-section-desktop\": !isPhone() && !isTablet()\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Event Target Typing with currentTarget in UI5 - TSX\nDESCRIPTION: This code demonstrates how to correctly type the event target using `e.currentTarget` in an inline event handler attached to a UI5 Web Component.  `e.currentTarget` will have the correct type eliminating the need for type assertions. It requires the Input component from UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<Input onClick={(e => (e.target as Input))} />\n                     // ^^^^^^^^^^^^^^^^\n                     // Casting the event target to input might be wrong and is not checked\n\n// After\n<Input onClick={(e => e.currentTarget)} />\n                     // ^^^^^^^^^^^^^\n                     // instance of `Input` class\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Button Component\nDESCRIPTION: This code snippet shows how to import the `ToggleButton` component from the `@ui5/webcomponents` package. The `ToggleButton` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ToggleButton.js\";\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Icon Packages\nDESCRIPTION: This snippet demonstrates how to install the standard UI5 icon packages using npm.  It includes the main icons package, the TNT icons package, and the Business Suite icons package.  These packages must be installed as dependencies in your project before icons can be used.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ui5/webcomponents-icons\nnpm i @ui5/webcomponents-icons-tnt\nnpm i @ui5/webcomponents-icons-business-suite\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM after rendering - HTML & TypeScript\nDESCRIPTION: This example shows the `onAfterRendering` lifecycle hook used to focus on an element and read the size of another element after rendering.  It directly accesses the DOM using `this.shadowRoot`. It's generally recommended to avoid manual DOM manipulation, but it's sometimes necessary for tasks like setting focus or reading element sizes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"my-component\">\n\t<input id=\"first\">\n\t<input id=\"second\">\n</div>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonAfterRendering() {\n\tthis.shadowRoot.querySelector(\"#second\").focus();\n\tthis._totalWidth = this.shadowRoot.querySelector(\"div.my-component\").offsetWidth;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Implementation of ui5-ai-button Component - JavaScript\nDESCRIPTION: This commit introduces the initial implementation of the ui5-ai-button component. The ui5-ai-button likely integrates with AI services or features within the SAP UI5 Web Components framework.  No specific dependencies or parameters are mentioned in the context.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Documenting a Slot - TypeScript\nDESCRIPTION: Illustrates how to document a slot using JSDoc comments at the component class level.  This informs component consumers about the available slot and its expected content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n * @slot {Array<Node>} default - Defines the content of the component.\n */\n@customElement({\n\ttag: \"ui5-demo-component\",\n})\nclass MyDemoComponent extends UI5Element {}\n```\n\n----------------------------------------\n\nTITLE: UI5 DatePicker DOM Structure v2.0\nDESCRIPTION: This HTML snippet illustrates the DOM structure of the `ui5-date-picker` in UI5 Web Components version 2.0, utilizing the native browser popover API.  The `ui5-responsive-popover` is now a direct child of the `ui5-date-picker` element, and utilizes the `popover=\"manual\"` attribute.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/popover-api-in-v2.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div style=\"transform: translate(12rem, 12rem)\"> <!-- a parent node has CSS that normally breaks popup positioning -->\n        <ui5-date-picker>\n            #shadow-root\n                <ui5-input></ui5-input> <!-- The date Input part of the DatePicker component -->\n                <ui5-responsive-popover popover=\"manual\"></ui5-responsive-popover> <!-- the Popover part of the DatePicker component -->\n        </ui5-date-picker>\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Importing All Icons from a UI5 Package\nDESCRIPTION: This snippet demonstrates how to import all icons from the UI5 Web Components icon packages.  It imports all icons from the standard icons, TNT icons, and Business Suite icons packages. It is generally recommended to import only the necessary icons to minimize bundle size.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-icons/dist/AllIcons.js\";\nimport \"@ui5/webcomponents-icons-tnt/dist/AllIcons.js\";\nimport \"@ui5/webcomponents-icons-business-suite/dist/AllIcons.js\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Element with Tag Name - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a basic custom UI5 Web Component using the `@customElement` decorator and the `UI5Element` base class.  It sets the tag name for the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Multi ComboBox Component\nDESCRIPTION: This code snippet shows how to import the `MultiComboBox` component from the `@ui5/webcomponents` package. The `MultiComboBox` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/MultiComboBox.js\";\n```\n\n----------------------------------------\n\nTITLE: Registering and Deregistering ResizeHandler - TypeScript\nDESCRIPTION: This example demonstrates using `onEnterDOM` and `onExitDOM` to register and deregister a `ResizeHandler`.  The `onEnterDOM` hook is executed when the component is connected to the DOM, and `onExitDOM` is executed when it's disconnected. This pattern ensures that the `ResizeHandler` is only active when the component is in the DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n@customElement({\n    tag: \"my-component\",\n})\nclass MyComponent extends UI5Element {\n\t@property({ type: Number })\n\t_width = 0;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._fnOnResize = this._onResize.bind(this);\n\t}\n\n\tonEnterDOM() {\n\t\tResizeHandler.register(this, this._fnOnResize);\n\t}\n\n\tonExitDOM() {\n\t\tResizeHandler.deregister(this, this._fnOnResize);\n\t}\n\n\t_onResize() {\n\t\tthis._width = this.offsetWidth;\n\t}\n\n\tget styles() {\n\t\treturn {\n\t\t\tvalueStateMsgPopover: {\n\t\t\t\t\"max-width\": `${this._width}px`,\n\t\t\t},\n\t\t};\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Carousel Component\nDESCRIPTION: This code snippet shows how to import the `Carousel` component from the `@ui5/webcomponents` package. The `Carousel` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Carousel.js\";\n```\n\n----------------------------------------\n\nTITLE: Launching the Angular Application\nDESCRIPTION: Starts the Angular development server and opens the application in the default web browser. The `-o` flag automatically opens the browser to display the running application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nng serve -o\n```\n\n----------------------------------------\n\nTITLE: Named Slot Usage - Handlebars and HTML\nDESCRIPTION: Illustrates the use of a named slot in the component template and its corresponding usage in HTML. In the template, a `<slot>` element is defined with a `name` attribute. In HTML, the slotted content is placed within the component element and has its `slot` attribute set to the corresponding name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_33\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{!-- MyDemoComponent.hbs --}}\n<div class=\"my-component-root\">\n\t<slot name=\"content\"></slot>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- index.html -->\n<my-demo-component>\n\t<span slot=\"content\">Hello World</span>\n</my-demo-component>\n```\n\n----------------------------------------\n\nTITLE: Including other Handlebars templates\nDESCRIPTION: This snippet illustrates how to include other `.hbs` files using the `{{>include \"PATH_TO_FILE\"}}` directive. Paths can be relative or absolute, including files from `node_modules` libraries.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_49\n\nLANGUAGE: handlebars\nCODE:\n```\n{{>include \"./MyComponent.hbs\"}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{>include \"@ui5/webcomponents/src/Popup.hbs\"}}\n```\n\n----------------------------------------\n\nTITLE: Firing a Custom Event using fireDecoratorEvent - TypeScript\nDESCRIPTION: This code shows how to fire a custom event from a UI5 Web Component using the `fireDecoratorEvent` method. The `fireDecoratorEvent` or `fireEvent` methods from the `UI5Element` class are used to trigger custom events.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\n\n@customElement(\"my-demo-component\")\n@event(\"change\")\nclass MyDemoComponent extends UI5Element {\n    @property()\n    value = \"\";\n\n    onNativeInputChange(e) {\n        this.value = e.target.value;\n        this.fireDecoratorEvent(\"change\"); // or this.fireEvent(\"change\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ValueState property values (New)\nDESCRIPTION: This HTML snippet shows the new values for the `value-state` property in the `ui5-input` component.  Replace `Success` with `Positive`, `Warning` with `Critical`, and `Error` with `Negative`.  Migrate to the new values for the `value-state` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<ui5-input value-state=\"Positive\"></ui5-input>\n<ui5-input value-state=\"Critical\"></ui5-input>\n<ui5-input value-state=\"Negative\"></ui5-input>\n```\n\n----------------------------------------\n\nTITLE: Importing Assets for UI5 Web Components\nDESCRIPTION: This code snippet demonstrates how to import the Assets.js module for UI5 Web Components and UI5 Web Components Fiori. This is required to use additional themes other than the default `sap_horizon` theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-fiori/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Quartz Theme\nDESCRIPTION: This snippet demonstrates defining CSS variables for the Quartz theme, showing different color values compared to the Horizon theme. The same variables are used but with distinct values to create a different visual appearance when the Quartz theme is active.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Quartz */\n:root {\n\t--sapBrandColor: #0a6ed1;\n\t--sapTextColor: #32363a;\n\t--sapHighlightColor: #0854a0;\n\t--sapBaseColor: #fff;\n\t--sapShellColor: #354a5f;\n\t--sapBackgroundColor: #f7f7f7\n```\n\n----------------------------------------\n\nTITLE: Importing List - Group Item Component\nDESCRIPTION: This code snippet shows how to import the `ListItemGroup` component from the `@ui5/webcomponents` package. The `ListItemGroup` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ListItemGroup.js\";\n```\n\n----------------------------------------\n\nTITLE: Micro-frontend Integration Example - HTML\nDESCRIPTION: This HTML snippet illustrates a scenario of micro-frontend integration with different versions of UI5 Web Components, each with its own scoping suffix. This shows how to use different versions of components on the same page.  Each micro-frontend uses a different scoping suffix to avoid conflicts between the components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/06-scoping.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n\n\t<!-- Application code, using UI5 Web Components version 1.0.1 -->\n\t<div id=\"application-container\">\n\t\t<ui5-title>This is the new app with many third-party extensions!</ui5-title>\n\t\t<ui5-card>\n\t\t\t<ui5-button>Hello</ui5-button>\n\t\t\t<ui5-input></ui5-input>\n\t\t</ui5-card>\n\t</div>\n\n\t<!-- Code inserted by \"common help\" library, using UI5 Web Components version 1.2.0 -->\n\t<div id=\"common-help-container\">\n\t\t<ui5-button-chlp new-button-prop=\"1\">Help Menu</ui5-button-chlp>\n\t\t<ui5-input-chlp value=\"Type your question\"></ui5-input-chlp>\n\t</div>\n\n\t<!-- Code inserted by \"global footer\" library, using UI5 Web Components version 1.3.0 -->\n\t<footer id=\"global-footer-container\">\n\t\t<global-footer-main>\n\t\t\t<ui5-button-glob-foot new-button-prop=\"2\" even-newer-button-prop=\"3\">Profile</ui5-button-glob-foot>\n\t\t\t<ui5-link-glob-foot>Contacts</ui5-link-glob-foot>\n\t\t</global-footer-main>\n\t</footer>\n\n</body>\n```\n\n----------------------------------------\n\nTITLE: Property Handling in JSX\nDESCRIPTION: Demonstrates setting properties on a custom component in JSX.  TypeScript will check the types of the properties, and the runtime will use property setters for booleans and numbers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n<MyComponent\n    boolProp={false}\n    numberProp={5}\n></MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component\nDESCRIPTION: This code snippet shows how to import the `Input` component from the `@ui5/webcomponents` package. The `Input` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Input.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing FormatSettings Configuration\nDESCRIPTION: Imports the `getFirstDayOfWeek` function from the `@ui5/webcomponents-base/dist/config/FormatSettings.js` module. This function is used to get the first day of the week. Note: Format settings can only be set initially.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getFirstDayOfWeek } from \"@ui5/webcomponents-base/dist/config/FormatSettings.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Components Assets\nDESCRIPTION: This code snippet demonstrates how to import the `Assets.js` file from a UI5 Web Components package.  This registers the assets for dynamic loading when needed. This approach requires a bundler that can copy JSON files as JS files and rewrite import URLs.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/04-using-assets.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/<PACKAGE-NAME>/dist/Assets.js`\nimport \"@ui5/<PACKAGE-NAME>/dist/Assets-fetch.js`\n```\n\n----------------------------------------\n\nTITLE: Migrating Button, DatePicker, Calendar to TS - JavaScript\nDESCRIPTION: This snippet migrates the ui5-button, ui5-date-picker, and ui5-calendar components to TypeScript (TS). This improves code quality, type safety, and maintainability. The migration involves converting the JavaScript code to TypeScript and updating the build process accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **ui5-button, ui5-date-picker, ui5-calendar:** migrate to TS ([#6173](https://github.com/SAP/ui5-webcomponents/issues/6173)) ([7232ca0](https://github.com/SAP/ui5-webcomponents/commit/7232ca08f286c5dde10080373fb62247f1acf7b7)), closes [#6080](https://github.com/SAP/ui5-webcomponents/issues/6080)\n```\n\n----------------------------------------\n\nTITLE: Declaring Named Slot - TypeScript\nDESCRIPTION: Demonstrates how to declare a named slot using the `@slot` decorator without any settings. In this case, any slotted element must have the `slot` attribute set to the name defined in the template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n\t@slot()\n\tcontent!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customize theme variables\nDESCRIPTION: This LESS snippet shows how to override existing theme variables to customize the appearance. Here, the primary colors (`sapPrimary1` and `sapPrimary2`) are changed to violet.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_3\n\nLANGUAGE: less\nCODE:\n```\n// src/mytheme.less\n@import \"@sap-theming/theming-base-content/content/Base/baseLib/sap_horizon/css_variables.less\";\n\n@sapPrimary1: violet;\n@sapPrimary2: violet;\n```\n\n----------------------------------------\n\nTITLE: Importing specific SAP Icons in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to import a specific icon (accelerated) from the `@ui5/webcomponents-icons` package.  This is the recommended approach to reduce the application's bundle size by only including the necessary icons.  Required dependency: `@ui5/webcomponents-icons`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-icons/dist/accelerated.js\";\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JavaScript\nDESCRIPTION: This snippet renders an editor component, passing the previously imported HTML and JavaScript content as properties named `html` and `js`. This is likely to initialize the editor with the given content, allowing users to view and modify the HTML and JavaScript within the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/IllustratedMessage/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Slot (ts)\nDESCRIPTION: This snippet shows how to define a default slot using the `default` option within the `@slot` decorator.  Setting `default` to `true` designates this slot as the one that receives children when no `slot` attribute is specified on the child elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @slot({ type: HTMLElement, \"default\": true })\n    mySlot!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual Slots - Handlebars\nDESCRIPTION: This Handlebars snippet iterates through a collection of items and renders a slot for each item, using the `_individualSlot` property as the slot name. Each item is wrapped in a `div` with the class `item-wrapper`, which facilitates individual styling and positioning.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_56\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#each items}}\n\t <div class=\"item-wrapper\">\n\t\t<slot name=\"{{_individualSlot}}\"></slot>\n\t</div>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Event Bubbling with Custom Events - TSX\nDESCRIPTION: This code shows how to handle event bubbling with custom events by using the `ui5-` prefix for event names.  This is necessary when attaching event handlers higher in the DOM to take advantage of event bubbling since standard event property names are not available on other components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n    onui5-detail-click={this.handleDetailClick} // no error when using a dash (-), the event will be subscribed as `ui5-detail-click`\n>\n    <ListItem\n        onDetailClick={this.handleDetailClick}\n    ></ListItem>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Component-Specific CSS Variables for Horizon Dark Theme\nDESCRIPTION: This snippet defines a different value for the `--my-component-border-color` CSS variable within the `sap_horizon_dark` theme.  This showcases how the same component can have a different appearance depending on the selected theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* src/themes/sap_horizon_dark/parameters-bundle.css */\n:root {\n    --my-component-border-color: lightblue;\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-Tuning Scoping Rules - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to customize the scoping rules. It imports `setCustomElementsScopingSuffix` and `setCustomElementsScopingRules` from `@ui5/webcomponents-base`. It sets the suffix to \"demo\" and defines rules to include tags starting with `ui5-` but exclude those starting with `ui5-my-` or containing `-test-`. This allows selective scoping of components. The scoping rules parameter accepts an object with 'include' and 'exclude' properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/06-scoping.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setCustomElementsScopingSuffix, setCustomElementsScopingRules } from \"@ui5/webcomponents-base/dist/CustomElementsScope.js\";\nsetCustomElementsScopingSuffix(\"demo\");\nsetCustomElementsScopingRules({include: [/^ui5-/], exclude: [/^ui5-my-/, /-test-/]});\n```\n\n----------------------------------------\n\nTITLE: Two-Way Data Binding with ui5-input - HTML\nDESCRIPTION: Demonstrates two-way data binding with the `ui5-input` web component using `v-model`.  The `inputValue` variable in the Vue component's data will be synchronized with the input field's value. Any changes in the input field will update `inputValue`, and vice versa.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<ui5-input v-model=\"inputValue\"></ui5-input>\n```\n\n----------------------------------------\n\nTITLE: UI5 Web Component Usage with Attributes (HTML)\nDESCRIPTION: This snippet shows an example of how to use a UI5 Web Component (`ui5-button`) with various attributes such as `id`, `class`, and `design`. The framework automatically creates an empty attribute with the component's pure tag name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button id=\"b1\" class=\"button1\" design=\"Emphasized\"></ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Removal of ITab interface\nDESCRIPTION: This documents the removal of the `ITab` interface, as the TabContainer is designed to work only with Tab and TabSeparator classes. No code examples provided, as this is a type-level removal.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Adding a Tab to a TabContainer - JavaScript\nDESCRIPTION: Demonstrates adding a new tab to a `ui5-tabcontainer` using standard DOM APIs. It creates a new `ui5-tab` element, sets its properties, and appends it to the tab container.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst tc = document.getElementById(\"tc1\");\nconst newTab = document.createElement(\"ui5-tab\");\nnewTab.text = \"Smart Watches\";\nnewTab.design = \"Positive\";\ntc.appendChild(newTab);\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component\nDESCRIPTION: This code snippet shows how to import the `Dialog` component from the `@ui5/webcomponents` package. The `Dialog` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Dialog.js\";\n```\n\n----------------------------------------\n\nTITLE: Updating ui5-busy-indicator size property values\nDESCRIPTION: This code demonstrates the change in accepted values for the `size` property of the `ui5-busy-indicator` component. The old value 'Small' is replaced with 'S'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Configure Nuxt to treat UI5 Web Components as custom elements - TS\nDESCRIPTION: Configures the Nuxt application to treat UI5 Web Components (identified by the 'ui5-' prefix) as custom elements.  This prevents Vue from attempting to resolve them as standard Vue components, avoiding potential errors. The `isCustomElement` option is set within the `vue.compilerOptions` in the `nuxt.config.ts` file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\n\n// https://nuxt.com/docs/api/nuxt-config\nexport default defineNuxtConfig({\n  vue: {\n    compilerOptions: {\n      isCustomElement: (tag) => tag.startsWith(\"ui5-\"),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Property with @property\nDESCRIPTION: This code snippet demonstrates how to define a number property `myProp` for a UI5 Web Component using the `@property` decorator. The `type: Number` option ensures that the attribute value is correctly converted to a number using `parseFloat`. The default value is set to `0` using a JavaScript property initializer.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/03-properties.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @property({ type: Number })\n    myProp = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Specific TNT Icon in UI5 Web Components\nDESCRIPTION: This code snippet demonstrates how to import a specific TNT icon (actor) for use in UI5 Web Components.  This approach is recommended to reduce the application's bundle size by only including the necessary icons.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-icons-tnt/dist/actor.js\";\n```\n\n----------------------------------------\n\nTITLE: Configure Vite to treat UI5 Web Components as custom elements - TS\nDESCRIPTION: Configures the Vite build tool to treat UI5 Web Components (identified by the 'ui5-' prefix) as custom elements. This prevents Vue from attempting to resolve them as standard Vue components, avoiding potential errors. This configuration is essential for proper rendering and functionality of UI5 Web Components within a Vue.js application built with Vite. It modifies the `compilerOptions.isCustomElement` setting within the Vite configuration.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.js\n\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a ui5- as custom elements\n          isCustomElement: tag => tag.includes('ui5-')\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing Imperative API with Declarative API (JavaScript/HTML)\nDESCRIPTION: This snippet shows how to replace the `openPopover` and `showAt` methods with the declarative `open` and `opener` properties for popover components. It includes both JavaScript and HTML examples to illustrate the change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\n----------------------------------------\n\nTITLE: Ignoring Custom Elements - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `ignoreCustomElements` function from `@ui5/webcomponents-base` to instruct the UI5 Web Components framework to ignore certain custom HTML elements. This can improve rendering performance when using custom elements with semantic purposes only and no JavaScript attached. The function takes a tag prefix as an argument. All elements starting with that prefix will be treated as standard HTML elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/15-other-framework-level-APIs.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ignoreCustomElements } from \"@ui5/webcomponents-base/dist/IgnoreElements.js\";\nignoreCustomElements(\"app-\");\n```\n\n----------------------------------------\n\nTITLE: Using Icons in UI5 Web Components\nDESCRIPTION: This snippet demonstrates how to use the imported icons within UI5 Web Components. It shows how to use icons in ui5-icon, ui5-button, and ui5-avatar components. Note the prefix needed for the `tnt` and `business-suite` icon collections.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon name=\"alert\"></ui5-icon>\n<ui5-button icon=\"tnt/actor\"></ui5-button>\n<ui5-avatar icon=\"business-suite/coins\"></ui5-avatar>\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component\nDESCRIPTION: This code snippet shows how to import the `Switch` component from the `@ui5/webcomponents` package. The `Switch` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Switch.js\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Mode on Specific Components\nDESCRIPTION: This example demonstrates two ways to enable compact mode on specific UI5 Web Components.  One way is to set the `data-ui5-compact-size` attribute on a parent `div`.  The other is to add the `ui5-content-density-compact` class directly to the component. It uses the `<ui5-button>` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/02-RTL-and-compact-mode.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <ui5-button>Button 1</ui5-button>\n    <div data-ui5-compact-size>\n        <ui5-button>Button 2</ui5-button>\n    </div>\n\n    <ui5-button class=\"ui5-content-density-compact\">Button 3</ui5-button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling with :host and attribute selector (CSS)\nDESCRIPTION: This snippet demonstrates how to use the `:host` selector in CSS to style the custom element itself based on the value of an attribute. It shows how to change the component's dimensions based on the `size` attribute.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n:host {\n\theight: 5rem;\n\twidth: 5rem;\n}\n\n:host([size=\"XS\"]) {\n\theight: 2rem;\n\twidth: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Component on Specific Child Changes - Configuration\nDESCRIPTION: This TypeScript code demonstrates how to use the `invalidateOnChildChange` option with a configuration object to invalidate a component only when specific properties or slots of the slotted UI5Element instances change. In this example, the component will be invalidated if the `myProp` property or the `mySlot` slot of the child elements are modified.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n\t@slot({ type: HTMLElement, invalidateOnChildChange: { properties: [\"myProp\"], slots: [\"mySlot\"] }})\n\tcontent!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the HTML, JS, and CSS in a React Editor component\nDESCRIPTION: This snippet renders a React component named `Editor` and passes the imported HTML, JavaScript, and CSS strings as props.  The `Editor` component is expected to handle the rendering or editing of the code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/DynamicSideContent/SideContentPosition/SideContentPosition.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Using SAP Icons v4 in HTML\nDESCRIPTION: This HTML code snippet demonstrates how to use a specific SAP icon from the `SAP Icons v4` collection. This will ensure that version 4 is rendered regardless of the current theme. The component requires the `ui5-icon` web component to be available. Required dependency: `@ui5/webcomponents`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/README.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"SAP-icon-v4/accept\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Pre-loading InputSuggestions Feature - JavaScript\nDESCRIPTION: This code imports the InputSuggestions feature, adding auto-suggestions while typing to the ui5-input component. This import allows the showSuggestions property to enable the feature, without waiting for dynamic loading. This can improve UX by making the feature immediately available.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/features/InputSuggestions.js\"\n```\n\n----------------------------------------\n\nTITLE: Format Settings Configuration (JSON)\nDESCRIPTION: This JSON code snippet shows how to configure locale-specific settings for date-related controls. Specifically, it shows how to set the first day of the week to Sunday (0), regardless of the locale. These settings can be configured using the `formatSettings` property within a `<script>` tag with the `data-ui5-config` attribute.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"formatSettings\": {\n\t\t\"firstDayOfWeek\": 0\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Looping Through Array\nDESCRIPTION: This snippet demonstrates how to iterate over an array of items in a Handlebars template using the `{{#each}}` helper. Inside the loop, the context changes to the current item, allowing direct access to its properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each items}}\n\t<div id=\"{{id}}\"\n\t\t role=\"option\"\n\t\t aria-posinset=\"{{posinset}}\"\n\t\t aria-setsize=\"{{setsize}}\"\n\t>{{text}}</div>\n{{/each}}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each items}}\n\t<div id=\"{{this.id}}\"\n\t\t role=\"option\"\n\t\t aria-posinset=\"{{this.posinset}}\"\n\t\t aria-setsize=\"{{this.setsize}}\"\n\t>{{this.text}}</div>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Demo.hbs file content (HTML)\nDESCRIPTION: This snippet shows the content of a `Demo.hbs` file, demonstrating the structure of a component's template. It includes a div with a class, a `ui5-button`, a slot, and a `ui5-list`. This is the template used to create the shadow DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"my-component\">\n\t<ui5-button id=\"openBtn\">Open</ui5-button>\n\t<div>\n\t\t<slot></slot>\n\t</div>\n\t<ui5-list></ui5-list>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Fiori Assets in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the assets for the Fiori components. The assets include theming parameters and translations for the components. It also automatically imports the assets from the core webcomponents package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Enhancing Create UI5 Element Command - JavaScript\nDESCRIPTION: This snippet enhances the create-ui5-element command to allow the creation of components in TypeScript (TS). This enhancement provides developers with the option to create new components using TypeScript, promoting type safety and modern development practices. The changes involve updating the command-line tool to support TypeScript component creation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\n* enhance create-ui5-element command to create component in TS ([#6609](https://github.com/SAP/ui5-webcomponents/issues/6609)) ([d870065](https://github.com/SAP/ui5-webcomponents/commit/d8700650a4e5991862e2076cc2c93482011c4c90))\n```\n\n----------------------------------------\n\nTITLE: Set theme with JS API\nDESCRIPTION: This TypeScript snippet demonstrates how to set the custom theme programmatically using the UI5 Web Components JavaScript API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTheme, setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\n\nsetTheme(\"mytheme\");\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component\nDESCRIPTION: This code snippet shows how to import the `Checkbox` component from the `@ui5/webcomponents` package. The `Checkbox` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/CheckBox.js\";\n```\n\n----------------------------------------\n\nTITLE: Updating ui5-busy-indicator Size Property Values\nDESCRIPTION: This snippet demonstrates the change in allowed values for the `size` property of the `ui5-busy-indicator` component. The previous value \"Small\" should be replaced with \"S\".\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Event Handling\nDESCRIPTION: Demonstrates attaching event handlers in JSX using the `onEventName` convention. Standard DOM events are automatically converted from PascalCase to lowercase.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_17\n\nLANGUAGE: TSX\nCODE:\n```\nonClick -> click\nonInput -> input\nonMouseMove -> mousemove\n```\n\n----------------------------------------\n\nTITLE: Changing Web Component Content - JavaScript\nDESCRIPTION: Demonstrates changing the text content of a UI5 Web Component using standard DOM APIs such as `textContent`, `innerHTML`, and `childNodes`. Assumes the component has an id of 'btn'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst myButton = document.getElementById(\"btn\");\nmyButton.textContent = \"New text\";\nmyButton.innerHTML = \"New text\"; // same effect as above\nmyButton.childNodes[0].nodeValue = \"New text\" // same result again\n```\n\n----------------------------------------\n\nTITLE: Importing Persian Calendar Feature - JavaScript\nDESCRIPTION: This JavaScript code imports the Persian calendar feature, allowing the display and use of the Persian calendar in UI5 Web Components.  This is especially useful for components dealing with dates, such as the ui5-date-picker.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Persian.js\"\n```\n\n----------------------------------------\n\nTITLE: Rendering filtered items in template - Handlebars\nDESCRIPTION: This Handlebars template iterates over the `_filteredItems` array (prepared in `onBeforeRendering`) and renders a slot for each item.  The `_individualSlot` property is automatically created by the framework. This effectively filters the items displayed based on the logic in `onBeforeRendering`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_51\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class=\"my-filter-component\">\n\t{{#each _filteredItems}}\n\t\t<div class=\"my-filtered-item\">\n\t\t\t<slot name=\"{{_individualSlot}}\"></slot>\n\t\t</div>\n\t{{/each}}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Assets in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to import the assets for a web component. Importing the assets is necessary to ensure the component is styled correctly for the selected theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"{PACKAGE-NAME}/dist/Assets.js`\n```\n\n----------------------------------------\n\nTITLE: Fixing Icon Imports JavaScript\nDESCRIPTION: This snippet fixes the icon imports by using strings instead of template literals. It addresses issue #6681 in the ui5-webcomponents project, correcting the way icons are imported within the @ui5/webcomponents-icons package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n**icons:** use strings instead of template literal for imports ([#6681](https://github.com/SAP/ui5-webcomponents/issues/6681)) ([ac70676](https://github.com/SAP/ui5-webcomponents/commit/ac7067685c72288ddc8d55363f5b589a9d279b0d))\n```\n\n----------------------------------------\n\nTITLE: Adding TS Types for Localization Packages\nDESCRIPTION: This commit introduces TypeScript types for the localization packages, enhancing type safety and developer experience. This improvement ensures better code maintainability and reduces runtime errors. The related issue is #6147, and the corresponding commit is 39dcbfd91e6bc728f1c3feaff5e229ae3a359b06.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n39dcbfd91e6bc728f1c3feaff5e229ae3a359b06\n```\n\n----------------------------------------\n\nTITLE: Importing ThemeRoot Configuration\nDESCRIPTION: Imports the `getThemeRoot` and `setThemeRoot` functions from the `@ui5/webcomponents-base/dist/config/ThemeRoot.js` module. These functions are used to get and set the root URL for themes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getThemeRoot, setThemeRoot } from \"@ui5/webcomponents-base/dist/config/ThemeRoot.js\";\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content using raw-loader (JavaScript)\nDESCRIPTION: This snippet imports JavaScript code from 'main.js' as a raw string using the raw-loader webpack plugin.  This allows the JavaScript code to be used dynamically within the current JavaScript environment.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UserMenu/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes - HTML\nDESCRIPTION: Demonstrates setting an attribute directly on a UI5 Web Component in HTML. Note that attribute names use kebab-case.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ui5-checkbox id=\"cb\" value-state=\"Negative\"></ui5-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration Example (HTML)\nDESCRIPTION: This HTML code snippet provides a comprehensive example of configuring various UI5 Web Components settings within a `<script>` tag using a JSON object. It showcases how to set the theme, language, animation mode, calendar type, format settings, event handling conflicts, and other configurations.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n\t\"theme\": \"sap_horizon_hcb\",\n\t\"language\": \"ja\",\n\t\"animationMode\": \"none\",\n\t\"calendarType\": \"Japanese\",\n\t\"formatSettings\": {\n\t\t\"firstDayOfWeek\": 0\n\t},\n\t\"noConflict\": {\n\t\t\"events\": [\"selection-change\", \"header-click\"]\n\t},\n\t\"fetchDefaultLanguage\": true,\n\t\"timezone\": \"Europe/Sofia\",\n\tdefaultFontLoading\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Element Definition with Template\nDESCRIPTION: This TypeScript code shows how to define a custom element with a template using the `@customElement` decorator. The `MyComponentTemplate` is imported and assigned as the template for the `MyComponent`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyComponentTemplate from \"./generated/templates/MyComponentTemplate.lit.js\";\n\n@customElement({\n\ttemplate: MyComponentTemplate\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Bubbling and Cancelable - TypeScript\nDESCRIPTION: This code demonstrates how to configure the `bubbles` and `cancelable` properties of an event using the `@event` decorator to control whether the event bubbles up the DOM tree and whether it can be canceled.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\n\n@customElement(\"my-demo-component\")\n@event(\"change\", {\n    bubbles: true // false by default\n    cancelable: true // false by default\n})\nclass MyDemoComponent extends UI5Element {\n\n    onSomeAction() {\n        this.fireDecoratorEvent(\"change\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Detail Type - TypeScript\nDESCRIPTION: This code shows how to define a TypeScript type for the event detail, enabling type-safe event handling and preventing incorrect data when firing events.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport event from \"@ui5/webcomponents-base/dist/decorators/event.js\";\n\n// Define the event detail type\nexport type MyDemoComponentChangeEventDetail = {\n    valid: boolean;\n};\n\n@customElement(\"my-demo-component\")\n@event<MyDemoComponentChangeEventDetail>(\"change\", {\n    detail: {\n        valid: { type: Boolean },\n    },\n})\nclass MyDemoComponent extends UI5Element {\n    @property()\n    value = \"\";\n\n    onNativeInputChange(e: Event) {\n        this.fireEvent(\"change\", {\n            valid: true,\n        });\n    }\n}\n\nexport { MyDemoComponent };\n```\n\n----------------------------------------\n\nTITLE: Importing Color Picker Component\nDESCRIPTION: This code snippet shows how to import the `ColorPicker` component from the `@ui5/webcomponents` package. The `ColorPicker` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ComboPicker.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript as Raw String\nDESCRIPTION: This snippet imports a JavaScript file as a raw string using a raw-loader. This allows the JavaScript content to be used directly within the JavaScript code, such as for populating an editor component or for dynamic code evaluation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SegmentedButton/SelectionModes/SelectionModes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing List - Standard Item Component\nDESCRIPTION: This code snippet shows how to import the `ListItemStandard` component from the `@ui5/webcomponents` package. The `ListItemStandard` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ListItemStandard.js\";\n```\n\n----------------------------------------\n\nTITLE: Firing Event with non-default configuration using fireDecoratorEvent - TypeScript\nDESCRIPTION: This shows how to fire an event as preventable and bubbling using fireDecoratorEvent with non-default configuration\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@event(\"change\", {\n    bubbles: true // false by default\n    cancelable: true // false by default\n})\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Fires the event as preventable and bubbling\nthis.fireDecoratorEvent(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Component\nDESCRIPTION: This code snippet shows how to import the `Toast` component from the `@ui5/webcomponents` package. The `Toast` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Toast.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming size to design - HTML\nDESCRIPTION: This code snippet illustrates the change from the `size` property to the `design` property in the `ui5-illustrated-message` component. It highlights how to update existing code to use the new property name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_89\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Importing AI Button Module - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the `ui5-ai-button` module in JavaScript. This import makes the `ui5-ai-button` web component available for use in your application. It is a necessary step to utilize the AI Button component provided by the `@ui5/webcomponents-ai` package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-ai/dist/Button.js\";\n```\n\n----------------------------------------\n\nTITLE: Theme Root Configuration (HTML)\nDESCRIPTION: This HTML code snippet demonstrates how to configure the URL from which UI5 Web Components will fetch theme styles (CSS variables). This is primarily for custom themes created with the SAP Theme Designer. The `themeRoot` property must point to the correct location.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n\t\"themeRoot\": \"https://my-example-host.com/\"\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript as Raw Strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the 'raw-loader'.  This allows the content of these files to be used directly within JavaScript, typically for injecting code into components or for demonstration purposes. The '!!' prefix disables all configured loaders/preprocessors for these imports.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/Design/Design.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Fixing AI Button and Color Palette Items - Bug Fix\nDESCRIPTION: Fixes a bug where the AI button and color palette components were not bringing their own items. This ensures that these components function correctly and have the necessary dependencies to render properly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ai button and color palette bring their own items ([#10517](https://github.com/SAP/ui5-webcomponents/issues/10517)) ([11b9356](https://github.com/SAP/ui5-webcomponents/commit/11b9356a13d01ece1ebcf4185b61259b9ad6d364))\n */\n```\n\n----------------------------------------\n\nTITLE: Applying Direction (LTR/RTL) with UI5 Web Components\nDESCRIPTION: This snippet demonstrates how to import and use the `applyDirection` function from `@ui5/webcomponents-base` to apply the appropriate text direction (left-to-right or right-to-left) to RTL-aware components. This ensures proper rendering based on the current locale. The function re-renders all affected components upon execution.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport applyDirection from \"@ui5/webcomponents-base/dist/locale/applyDirection.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing Range Slider Component\nDESCRIPTION: This code snippet shows how to import the `RangeSlider` component from the `@ui5/webcomponents` package. The `RangeSlider` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/RangeSlider.js\";\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Icon Collection Loader\nDESCRIPTION: This snippet demonstrates how to register a custom icon collection loader. The loader returns an object containing the collection name and the icon data (names and SVG paths). This allows the use of custom SVG icons within UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {registerIconLoader } from \"@ui5/webcomponents-base/dist/asset-registries/Icons.js\";\nregisterIconLoader(\"my-custom-icons\", () => {\n    return {\n            \"collection\": \"my-custom-icons\",\n            \"data\": {\n                \"mark\": {\n                    paths: [ \n                        // SVG path1, SVG path2, SVG path3...\n                    ],\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Language and Theme\nDESCRIPTION: This code snippet shows how to set the language to Spanish (`es`) and the theme to `sap_fiori_3_hcb` using the `setLanguage` and `setTheme` functions from `@ui5/webcomponents-base`. This will affect the rendering of UI5 Web Components, including translations, formatting, and appearance.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/04-using-assets.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\nimport { setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\n\nsetLanguage(\"es\");\nsetTheme(\"sap_fiori_3_hcb\");\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Custom Elements - HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the UI5 Web Components after applying the scoping suffix. All component tags must be appended with the configured suffix (in this case, \"-demo\"). This is necessary to use the web components with the scoping suffix.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/06-scoping.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-card-demo>\n\t<ui5-title-demo>This card is scoped</ui5-title-demo>\n\t<ui5-button-demo>Click me</ui5-button-demo>\n</ui5-card-demo>\n```\n\n----------------------------------------\n\nTITLE: Partials definition and usage in Handlebars\nDESCRIPTION: This snippet demonstrates how to define and use partials in Handlebars templates. Partials are reusable code blocks that can be inserted multiple times within a template using `{{>NAME}}`. The example defines a `valueStateMessage` partial and uses it twice.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_47\n\nLANGUAGE: handlebars\nCODE:\n```\n<div>\n\t{{>valueStateMessage}}\n</div>\n<p>Some more content</p>\n<div>\n\t{{>valueStateMessage}}\n</div>\n\n{{#*inline \"valueStateMessage\"}}\n\t{{#if msg}}\n\t\t<span>{{msg}}</span>\n\t{{/if}}\n{{/inline}}\n```\n\n----------------------------------------\n\nTITLE: Using UI5 Web Components in HTML and JavaScript\nDESCRIPTION: This HTML code demonstrates how to use the imported UI5 Web Components within an HTML document. A `ui5-button` and a `ui5-input` are added to the page. The Javascript code adds an event listener to the button. The components are automatically registered once imported in the Javascript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/02-components-packages.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button id=\"btn\">This is a button</ui5-button>\n<ui5-input value=\"This is an input\"></ui5-input>\n<script>\n    btn.addEventListener(\"click\", () => {});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using noValidation property in ui5-multi-combobox\nDESCRIPTION: This snippet demonstrates the correct usage of the `noValidation` property in `ui5-multi-combobox`, replacing the deprecated `allowCustomValues` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_65\n\nLANGUAGE: html\nCODE:\n```\n<ui5-multi-combobox no-validation></ui5-multi-combobox>\n```\n\n----------------------------------------\n\nTITLE: Importing Multi Input Component\nDESCRIPTION: This code snippet shows how to import the `MultiInput` component from the `@ui5/webcomponents` package. The `MultiInput` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/MultiInput.js\";\n```\n\n----------------------------------------\n\nTITLE: Direct Configuration of UI5 Components\nDESCRIPTION: This snippet shows how to directly configure a UI5 Web Component by importing and using configuration functions from the relevant packages, demonstrating setting and verifying a theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setTheme, getTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\n\ndescribe(\"Direct Configuration\", () => {\n  it(\"should change the theme\", () => {\n    const newTheme = \"sap_horizon_hcb\";\n\n    cy.wrap({ setTheme })\n      .invoke(\"setTheme\", newTheme)\n\n    cy.wrap({ getTheme })\n      .invoke(\"getTheme\")\n      .should(\"be.equal\", newTheme)\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Tree Component\nDESCRIPTION: This code snippet shows how to import the `Tree` component from the `@ui5/webcomponents` package. The `Tree` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Tree.js\";\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example - Fix for UI5 Button\nDESCRIPTION: This commit message demonstrates the required format for a bug fix commit. It includes the type (`fix`), scope (`ui5-button`), and a concise description. The body provides additional context, and the footer references the issue it resolves.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/02-conventions-and-guidelines.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfix(ui5-button): correct focus with 'tab' key\n\nThe button should receive a correct focus outline\nwhen the 'tab' key is pressed.\n\nFixes #42\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content\nDESCRIPTION: Imports the content of a JavaScript file as a raw string using raw-loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Event Handling from Slotted Children - TSX\nDESCRIPTION: This code demonstrates how to handle events coming from child components in slots using the `ui5-` prefix.  This is necessary because these events originate from the light DOM of the component, and handlers cannot be directly attached in the template. It requires the List component from UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<List\n    // handles event from slotted children\n    onui5-close-menu={this._close}\n>\n    <slot></slot>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Vite Project\nDESCRIPTION: This command initializes a new project using Vite, a fast and lightweight build tool. It creates a basic project structure with the selected framework (vanilla JavaScript in this case). The user is prompted to select a project name, framework, and variant.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/01-first-steps.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init vite\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component\nDESCRIPTION: This code snippet shows how to import the `Icon` component from the `@ui5/webcomponents` package. The `Icon` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Icon.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing List - Custom Item Component\nDESCRIPTION: This code snippet shows how to import the `ListItemCustom` component from the `@ui5/webcomponents` package. The `ListItemCustom` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ListItemCustom.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming Card Header Status to Additional Text\nDESCRIPTION: This snippet illustrates how to replace the `status` property with `additionalText` in the `ui5-card-header` component, including the corresponding shadow part name change. Styles also need to be updated accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_74\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Customizing ESLint Configuration\nDESCRIPTION: This JavaScript code shows how to override the default ESLint configuration provided by `@ui5/webcomponents-tools`. It demonstrates how to replace the proxy with a custom ESLint configuration object, including environment settings, root configuration, and extends.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n    \t\"env\": {\n    \t\t\"browser\": true,\n    \t\t\"es6\": true\n    \t},\n    \t\"root\": true,\n    \t\"extends\": \"airbnb-base\",\n   \t\t.............\n  \t}\n```\n\n----------------------------------------\n\nTITLE: Adding Content to a Popover - JavaScript\nDESCRIPTION: Demonstrates adding a new child element to a UI5 Web Component (specifically a `ui5-popover`) using standard DOM APIs. It gets a reference to the popover and appends a newly created div element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst popover = document.getElementsByTagName(\"ui5-popover\")[0];\nconst newChild = document.createElement(\"div\");\npopover.appendChild(newChild);\n```\n\n----------------------------------------\n\nTITLE: Styling UI5 Input Component\nDESCRIPTION: This CSS snippet demonstrates how to style a ui5-input component by setting its width, color, and background.  It applies styles directly to the custom element tag.  The styles will take effect on the ui5-input component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/11-styles.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n  ui5-input {\n    width: 150px;\n    color: yellow;\n    background: purple;\n  }\n```\n\n----------------------------------------\n\nTITLE: Renaming status to additionalText (HTML and CSS)\nDESCRIPTION: The status property and its shadow part in the ui5-card-header component have been renamed to additionalText.  This snippet demonstrates updating the HTML and CSS to reflect the new property name. The older `status` property is no longer available.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_32\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Import HTML Sample\nDESCRIPTION: This snippet imports an HTML file as a raw string using a raw-loader. This allows the HTML content to be used directly as a string within the JavaScript code, likely to populate an editor component or display sample UI.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/Modes/Modes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Firing Event Using fireDecoratorEvent Method (TS)\nDESCRIPTION: This snippet demonstrates firing a custom event using the `fireDecoratorEvent` method. This method retrieves the event configuration (e.g., `bubbles`, `cancelable`) from the `@event` decorator. It's the recommended approach since v2.4.0.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n@event(\"change\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fires the event as NOT preventable and NOT bubbling\nthis.fireDecoratorEvent(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Importing FormsModule in Angular Module\nDESCRIPTION: Imports the `FormsModule` from `@angular/forms` and adds it to the `imports` array in the `app.module.ts`. This enables the use of template-driven forms and `ngModel` for data binding within the Angular application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```\n\n----------------------------------------\n\nTITLE: Import UI5 Web Component (Button) - JS\nDESCRIPTION: Imports the `Button.js` component from the `@ui5/webcomponents` library. This makes the `ui5-button` element available for use in the application's templates.  This import statement is necessary to register the component and allow it to be rendered correctly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Button.js\";\n```\n\n----------------------------------------\n\nTITLE: Rendering the Editor Component\nDESCRIPTION: Renders an `<Editor>` component, passing the imported HTML and JavaScript strings as props. This component likely uses these props to initialize and display the code editor with the provided HTML and JavaScript content.  The `<Editor>` component is assumed to be defined elsewhere.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/NoData/NoData.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with raw-loader\nDESCRIPTION: This code snippet imports the HTML and JavaScript files using raw-loader. The imported content is then assigned to the html and js variables respectively. These variables are later used as props for the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ProgressIndicator/States/States.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Creation Issues - JavaScript\nDESCRIPTION: This snippet addresses a bug in the create-webcomponents-package tool, which caused issues during package creation specifically with test and lint configurations. The fix ensures that new packages are created correctly with all necessary testing and linting setup, preventing errors and streamlining the development process. This involves modifying the package creation scripts to properly configure test and lint dependencies.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **create-webcomponents-package:** fix package creation issues with test and lint ([#6976](https://github.com/SAP/ui5-webcomponents/issues/6976)) ([dd70f3a](https://github.com/SAP/ui5-webcomponents/commit/dd70f3aa8ef70b592f1d4e0f3f9894c6280fb1bf))\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP UI5 Web Components Editor\nDESCRIPTION: This snippet configures an editor using SAP UI5 Web Components. It passes the imported HTML and JavaScript strings as props to the `<Editor>` component. The editor then uses these strings to initialize and render its content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/HeaderTextWrapping/HeaderTextWrapping.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Calling Public Methods/Getters - JavaScript\nDESCRIPTION: Demonstrates how to call public methods or access public getters of a UI5 Web Component. It retrieves a reference to the component and then accesses the 'files' getter.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileUploader = document.getElementsByTagName(\"ui5-file-uploader\")[0];\nconst files = fileUploader.files; // use the \"files\" public getter\n```\n\n----------------------------------------\n\nTITLE: Extending ToolbarItem Base Class (JavaScript)\nDESCRIPTION: This code shows how to extend the `ToolbarItem` base class when creating a toolbar item component.  This inheritance provides the base functionality and structure needed for toolbar compatibility.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ToolbarButton extends ToolbarItem\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Mode via HTML Attribute\nDESCRIPTION: This code demonstrates how to enable compact mode for all UI5 Web Components on the page by setting the `data-ui5-compact-size` attribute on the body element. This attribute affects the default sizes, margins, and paddings of the components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/02-RTL-and-compact-mode.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body data-ui5-compact-size>\n...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JS Files\nDESCRIPTION: This snippet imports HTML and JavaScript files using `raw-loader`. The `raw-loader` plugin is used to load the contents of 'sample.html' and 'main.js' as strings into the `html` and `js` variables, respectively. These variables will then be used to populate the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component with HTML, CSS, JS\nDESCRIPTION: This snippet renders an 'Editor' component, passing the previously imported HTML, CSS, and JavaScript code as props. This allows the editor to display and potentially modify the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/UXCIntegration/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Compact Content Density\nDESCRIPTION: This CSS code defines CSS variables specifically for the \"Compact\" content density mode.  It uses the `data-ui5-compact-size` attribute and `.ui5-content-density-compact` class to target compact styles. These styles override the default \"Cozy\" styles when the compact mode is active.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n[data-ui5-compact-size],\n.ui5-content-density-compact {\n\t--my-component-width: 1rem;\n\t--my-component-padding: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Model in Angular Component\nDESCRIPTION: Defines a data model with `firstName` and `lastName` properties within the Angular `AppComponent`.  This model will be used to bind to the UI5 Web Components in the template using `ngModel`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app.component.ts\nimport { Component } from '@angular/core';\n\nexport class AppComponent {\n  model = {\n    firstName: \"\",\n    lastName: \"\"\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Message Strip Component\nDESCRIPTION: This code snippet shows how to import the `MessageStrip` component from the `@ui5/webcomponents` package. The `MessageStrip` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/MessageStrip.js\";\n```\n\n----------------------------------------\n\nTITLE: Launching React Application with Yarn\nDESCRIPTION: This command starts the React development server using yarn.  It typically compiles the React application and hosts it on a local development server, allowing you to view and interact with your application in a web browser.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/01-React.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files with raw-loader\nDESCRIPTION: This snippet imports HTML and JavaScript files using the raw-loader. This allows the content of these files to be used as strings within the JavaScript code. The imported content is then assigned to the `html` and `js` variables respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/IllustratedMessage/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Declaring Default Slot - TypeScript\nDESCRIPTION: Shows how to declare a default slot, explicitly marked with the `default: true` setting in the `@slot` decorator. This makes the slot usable without setting the `slot` attribute on the slotted elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n\t@slot({ type: HTMLElement, \"default\": true })\n\tcontent!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Sample\nDESCRIPTION: Imports the content of 'main.js' as a raw string using raw-loader. This enables the JavaScript code to be incorporated into the UI5 Web Components editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithGroups/WithGroups.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Define Custom Font with 72-Light - HTML\nDESCRIPTION: This HTML snippet shows how to define a custom font face, specifically the `72-Light` font, within the application's styles.  It includes configurations for `font-family`, `font-style`, `font-weight`, and `font-display`. It also specifies the `src` using a remote URL and format.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/14-fonts.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<style type=\"text/css\">\n    @font-face {\n        font-family: \"72\";\n        font-style: normal;\n        font-weight: 200;\n        font-display: swap;\n        src: local(\"72-Light\"),\n        url(https://sdk.openui5.org/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Light.woff2?ui5-webcomponents) format(\"woff2\");\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Producing Packages of type=\"module\" for UI5 Web Components\nDESCRIPTION: This feature enables the creation of packages with the type=\"module\" attribute using the @ui5/create-webcomponents-package. This is essential for modern JavaScript module systems and allows for better optimization and dependency management in UI5 Web Components projects.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n*   **create-package:** produce packages of type=\"module\" ([#9993](https://github.com/SAP/ui5-webcomponents/issues/9993)) ([b161f60](https://github.com/SAP/ui5-webcomponents/commit/b161f601253b966fc0bb7a01213165c0963c85ca))\n```\n\n----------------------------------------\n\nTITLE: Defining an Event with the @event Decorator (TS)\nDESCRIPTION: This snippet demonstrates how to define an event using the `@event` decorator in TypeScript. It specifies the event name and its detail properties, including their types.  Event names should be in kebab-case.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n@event(\"selection-change\", {\n\tdetail: {\n\t\tvalid: { type: Boolean },\n\t},\n})\nclass MyDemoComponent extends UI5Element {\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing i18n decorator and cldr option - Framework\nDESCRIPTION: This feature introduces the `i18n` decorator and the `cldr` option to improve internationalization support within the UI5 Web Components framework. This simplifies the process of localizing components and adapting them to different languages and regions.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * **framework:** introduce the `i18n` decorator and the `cldr` option ([#9897](https://github.com/SAP/ui5-webcomponents/issues/9897)) ([1f29d23](https://github.com/SAP/ui5-webcomponents/commit/1f29d231fe892a850871e7f73afca93c730ecffd))\n */\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Event Targets - TSX\nDESCRIPTION: This code illustrates how to handle event handlers that can be attached to multiple different elements using `UI5CustomEvent` with a union type. This allows the event handler to correctly handle events from different components while maintaining type safety. It requires the Input and Slider components from UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nhandleInput(e: UI5CustomEvent<Input, \"input\"> | UI5CustomEvent<Slider, \"input\">) {\n    console.log(e.currentTarget);\n    //          ^^^^^^^^^^^^^^^\n    //          Input | Slider\n    console.log(e.currentTarget.value);\n    //          ^^^^^^^^^^^^^^^^^^^^^\n    //          string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress - Example Test File\nDESCRIPTION: This is an example Cypress test file for testing UI5 web components. It mounts a component using a custom `mount` function that leverages `preact` with `JSX` syntax. The test verifies that the component exists in the DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe(\"MyComponent Rendering\", () => {\n  it(\"MyComponent exists\", () => {\n    cy.mount(<MyComponent></MyComponent>);\n\n    cy.get(\"[my-component]\").should(\"exist\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting tooltip property - HTML\nDESCRIPTION: This snippet shows how to set the `tooltip` property on a `ui5-button` element.  This will set the `title` attribute on the button, providing a tooltip on hover and an accessible name for screen readers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button icon=\"sap-icon://edit\" tooltip=\"Edit\"></ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Editor Component with HTML and JS\nDESCRIPTION: This snippet renders an editor component, passing the previously imported HTML and JavaScript code as props. The `Editor` component likely displays and allows editing of the code provided in the `html` and `js` props. This demonstrates how to embed and interact with code snippets within a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RatingIndicator/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Launching Angular Application (ngx)\nDESCRIPTION: Starts the Angular development server and opens the application in a web browser. This allows developers to view and test the application in a live environment during development.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\nng serve -o\n```\n\n----------------------------------------\n\nTITLE: Register Custom Theme Properties - JavaScript\nDESCRIPTION: Implements the registration of custom theme properties. This allows developers to define and register their own theme-related properties, enabling greater customization and flexibility in theming. See issue #7750 for detailed context.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Importing Select Component\nDESCRIPTION: This code snippet shows how to import the `Select` component from the `@ui5/webcomponents` package. The `Select` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Select.js\";\n```\n\n----------------------------------------\n\nTITLE: Extending eventDetails with more events - TypeScript\nDESCRIPTION: This code snippet shows how to extend the base class events using TimePickerInternals[\"eventDetails\"] to avoid a TypeScript error when adding new events.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass TimeSelectionClocks extends TimePickerInternals {\n  eventDetails!: TimePickerInternals[\"eventDetails\"] & {\n    \"close-picker\": void,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component with HTML and JavaScript\nDESCRIPTION: This snippet shows the usage of the `<Editor>` component. The `html` and `js` variables, which contain the raw HTML and JavaScript content, are passed as props to the `<Editor>` component. This allows the editor to render the content from the imported files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tree/CustomTreeItems/CustomTreeItems.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Bringing Release-2.0 to Main in UI5 Web Components\nDESCRIPTION: This commit merges the release-2.0 branch into the main branch of the ui5-webcomponents project. It incorporates numerous changes and fixes associated with issues identified during the release candidate phase, including synchronization and versioning updates across various components. This chore ensures the integration of the 2.0 release changes into the primary codebase.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\nbring release-2.0 to main ([#8651](https://github.com/SAP/ui5-webcomponents/issues/8651)) ([69271c9](https://github.com/SAP/ui5-webcomponents/commit/69271c9468c7dd54f90710fc4613ae0a79f85cef)), closes [#8494](https://github.com/SAP/ui5-webcomponents/issues/8494) [#8496](https://github.com/SAP/ui5-webcomponents/issues/8496) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8497](https://github.com/SAP/ui5-webcomponents/issues/8497) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8504](https://github.com/SAP/ui5-webcomponents/issues/8504) [#8509](https://github.com/SAP/ui5-webcomponents/issues/8509) [#8507](https://github.com/SAP/ui5-webcomponents/issues/8507) [#8511](https://github.com/SAP/ui5-webcomponents/issues/8511) [#8501](https://github.com/SAP/ui5-webcomponents/issues/8501) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8503](https://github.com/SAP/ui5-webcomponents/issues/8503) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8506](https://github.com/SAP/ui5-webcomponents/issues/8506) [#8502](https://github.com/SAP/ui5-webcomponents/issues/8502) [#8524](https://github.com/SAP/ui5-webcomponents/issues/8524) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8525](https://github.com/SAP/ui5-webcomponents/issues/8525) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8518](https://github.com/SAP/ui5-webcomponents/issues/8518) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8526](https://github.com/SAP/ui5-webcomponents/issues/8526) [#8529](https://github.com/SAP/ui5-webcomponents/issues/8529) [#8528](https://github.com/SAP/ui5-webcomponents/issues/8528) [#8531](https://github.com/SAP/ui5-webcomponents/issues/8531) [#8532](https://github.com/SAP/ui5-webcomponents/issues/8532) [#8534](https://github.com/SAP/ui5-webcomponents/issues/8534) [#8163](https://github.com/SAP/ui5-webcomponents/issues/8163) [#8527](https://github.com/SAP/ui5-webcomponents/issues/8527) [#8538](https://github.com/SAP/ui5-webcomponents/issues/8538) [#8521](https://github.com/SAP/ui5-webcomponents/issues/8521) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8542](https://github.com/SAP/ui5-webcomponents/issues/8542) [#8461](https://github.com/SAP/ui5-webcomponents/issues/8461) [#8548](https://github.com/SAP/ui5-webcomponents/issues/8548) [#8555](https://github.com/SAP/ui5-webcomponents/issues/8555) [#8559](https://github.com/SAP/ui5-webcomponents/issues/8559) [#8565](https://github.com/SAP/ui5-webcomponents/issues/8565) [#8570](https://github.com/SAP/ui5-webcomponents/issues/8570) [#8558](https://github.com/SAP/ui5-webcomponents/issues/8558) [#8568](https://github.com/SAP/ui5-webcomponents/issues/8568) [#8596](https://github.com/SAP/ui5-webcomponents/issues/8596) [#8192](https://github.com/SAP/ui5-webcomponents/issues/8192) [#8606](https://github.com/SAP/ui5-webcomponents/issues/8606) [#8605](https://github.com/SAP/ui5-webcomponents/issues/8605) [#8600](https://github.com/SAP/ui5-webcomponents/issues/8600) [#8602](https://github.com/SAP/ui5-webcomponents/issues/8602) [#8593](https://github.com/SAP/ui5-webcomponents/issues/8593)\n```\n\n----------------------------------------\n\nTITLE: Import HTML content as raw string\nDESCRIPTION: This snippet imports the content of the 'sample.html' file as a raw string using 'raw-loader'. This allows embedding the HTML content directly into the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/WithIcons/WithIcons.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Button Component\nDESCRIPTION: This code snippet shows how to import the `RadioButton` component from the `@ui5/webcomponents` package. The `RadioButton` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/RadioButton.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Component\nDESCRIPTION: This code snippet shows how to import the `Tab` component from the `@ui5/webcomponents` package. The `Tab` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Tab.js\";\n```\n\n----------------------------------------\n\nTITLE: Using Imported HTML and JavaScript in Editor Component\nDESCRIPTION: This snippet demonstrates how the previously imported HTML and JavaScript strings are used within an `Editor` component.  The `html` and `js` variables are passed as props to the `Editor` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SegmentedButton/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Open Cypress (npx)\nDESCRIPTION: Opens the Cypress application using npx (Node Package Runner). This command allows you to start the Cypress test runner to execute component tests.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/cypress-ct-ui5-webc/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cypress open\n```\n\n----------------------------------------\n\nTITLE: Individual Slots - TypeScript\nDESCRIPTION: Enables individual slots by setting the `individualSlots` option to `true` in the `@slot` decorator.  This assigns a unique `_individualSlot` property to each child element, allowing them to be individually targeted in the template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n\t@slot({ type: HTMLElement, individualSlots: true })\n\tcontent!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Single Selection Example\nDESCRIPTION: This HTML snippet defines the structure of a UI5 Web Components table with single-selection enabled. Each row requires a `row-key` attribute for unique identification. The `<ui5-table-selection-single>` tag enables the single selection feature.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/SelectionSingle/SelectionSingle.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-table>\n  <ui5-table-selection-single></ui5-table-selection-single>\n  <ui5-table-column>...</ui5-table-column>\n  <ui5-table-row row-key=\"row1\">...</ui5-table-row>\n  <ui5-table-row row-key=\"row2\">...</ui5-table-row>\n</ui5-table>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with raw-loader (JavaScript)\nDESCRIPTION: This JavaScript code imports HTML and JavaScript files using the raw-loader. The raw-loader plugin allows importing the raw content of files as strings, which are then passed to an editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Search/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import Input Suggestions Feature\nDESCRIPTION: This line imports the optional input suggestions feature for the `<ui5-input>` component.  This feature loads dynamically (as well as the `ui5-suggestion-item` component) when the `showSuggestions` property is set to `true`. Pre-loading the feature with this import avoids the dynamic import.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/features/InputSuggestions.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript for SAP UI5 Editor\nDESCRIPTION: This snippet imports HTML and JavaScript code using raw-loader. The contents of 'sample.html' and 'main.js' are loaded as strings.  These strings are then passed as props to the <Editor> component, which presumably uses them to display and execute the loaded code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Icon/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Code\nDESCRIPTION: Imports the content of the 'main.js' file as a raw string using 'raw-loader'. This enables integrating JavaScript logic and functionality into the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Text/Hyphenation/Hyphenation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Component-Specific CSS Variables for Horizon Theme\nDESCRIPTION: This snippet defines a component-specific CSS variable, `--my-component-border-color`, within the `sap_horizon` theme. Setting this variable allows for customizing the appearance of specific components based on the active theme. This file represents the entrypoint for a specific theme's parameters.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* src/themes/sap_horizon/parameters-bundle.css */\n:root {\n    --my-component-border-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Dependencies for TSX Components - Bug Fix\nDESCRIPTION: This bug fix removes unnecessary dependencies for TSX components. It aims to streamline the build process and improve the overall performance of the components by eliminating redundant requirements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * remove dependencies for TSX components and fix features ([#10449](https://github.com/SAP/ui5-webcomponents/issues/10449)) ([a2b5f6f](https://github.com/SAP/ui5-webcomponents/commit/a2b5f6fb768499a8b757a9b7abad5f19033a33a7))\n */\n```\n\n----------------------------------------\n\nTITLE: Importing Split Button Component\nDESCRIPTION: This code snippet shows how to import the `SplitButton` component from the `@ui5/webcomponents` package. The `SplitButton` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/SplitButton.js\";\n```\n\n----------------------------------------\n\nTITLE: Introducing new ui5-dynamic-page component\nDESCRIPTION: This commit introduces a new component, ui5-dynamic-page, to the UI5 Web Components library. This component provides a dynamic page layout and functionalities, expanding the capabilities of the web components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Update SAP Icons to v5.11.1 & 4.23 - UI5 Web Components\nDESCRIPTION: This feature updates the SAP Icons library to versions v5.11.1 and v4.23. The update includes new icons, improvements, and bug fixes provided by the SAP Icons library. This enhancement is related to issue #10692 and the corresponding commit hash is 4545ef7.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\n4545ef7\n```\n\n----------------------------------------\n\nTITLE: Render Editor component with HTML and JavaScript\nDESCRIPTION: This snippet renders an `<Editor>` component and passes the imported HTML and JavaScript strings as props. The `html` prop contains the HTML code, and the `js` prop contains the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/States/States.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Looping over arrays with each in Handlebars\nDESCRIPTION: This snippet demonstrates how to loop over an array of objects in a Handlebars template using the `{{#each}}` helper.  It iterates through the `items` array and renders a div element for each item, binding properties like `id`, `posinset`, `setsize`, and `text` to the div's attributes and content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_29\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each items}}\n\t<div id=\"{{id}}\"\n\t\t role=\"option\"\n\t\t aria-posinset=\"{{posinset}}\"\n\t\t aria-setsize=\"{{setsize}}\"\n\t>{{text}}</div>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Binding Attributes and Text\nDESCRIPTION: This snippet demonstrates basic binding in Handlebars. It binds the `tooltip` property to the `title` attribute of a button and the `txt` property to the button's text content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_12\n\nLANGUAGE: handlebars\nCODE:\n```\n<button title=\"{{tooltip}}\">{{txt}}<button/>\n```\n\n----------------------------------------\n\nTITLE: Cypress - Setting Attribute\nDESCRIPTION: This code snippet demonstrates how to set an attribute of a UI5 web component using Cypress's `invoke` command with `attr`. It gets the component with the specified selector and sets the specified attribute to a new value.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Set an attribute\ncy.get(\"[ui5-button]\")\n  .invoke(\"attr\", \"my-attr\", \"newValue\");\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Components in JavaScript\nDESCRIPTION: These import statements load specific UI5 Web Components into your JavaScript code.  Each import statement specifies the path to the component's JavaScript file within the corresponding package. After importing, the custom elements are automatically registered and can be used in HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/02-components-packages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Button.js\"; // ui5-button\nimport \"@ui5/webcomponents/dist/Input.js\"; // ui5-input\nimport \"@ui5/webcomponents/dist/List.js\"; // ui5-list\nimport \"@ui5/webcomponents/dist/ListItemStandard.js\"; // ui5-li\n\nimport \"@ui5/webcomponents-fiori/dist/Wizard.js\"; // ui5-wizard\n\nimport \"@ui5/webcomponents-fiori/dist/PromtInput.js\"; // ui5-prompt-input\n```\n\n----------------------------------------\n\nTITLE: Using Refs to Get DOM Element References - TSX\nDESCRIPTION: This code shows how to use refs to get a reference to a DOM element in TSX. This is necessary to access the DOM element directly and interact with it, such as associating a web component instance with a specific DOM element. Demonstrates using the `ref` attribute with a callback function.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n    ref={this.captureRef}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Opening/Closing Dialog via Property in Typescript\nDESCRIPTION: This snippet demonstrates how to open and close the ui5-view-settings-dialog using the `open` property instead of the `show()` and `close()` methods.  It shows the new recommended approach for controlling the dialog's visibility. This change was introduced in version 2.0.0 of the ui5-webcomponents library.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewSettingsDialog = document.getElementById(\"exampleID\");\nviewSettingsDialog.open = true;\nviewSettingsDialog.open = false;\n```\n\n----------------------------------------\n\nTITLE: Running a single test spec with npm\nDESCRIPTION: This command executes a specific test file using npm.  It's intended for debugging. A test server is not automatically launched, so you must ensure the `start` command is running to provide the necessary server and live reloading functionality.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test test/specs/Demo.spec.js\n```\n\n----------------------------------------\n\nTITLE: Deploy Website with GitHub Username\nDESCRIPTION: This command deploys the Docusaurus website to GitHub Pages by specifying the GitHub username.  It builds the website and pushes it to the `gh-pages` branch. This is an alternative to using SSH for authentication.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Importing ComboBox Component\nDESCRIPTION: This code snippet shows how to import the `ComboBox` component from the `@ui5/webcomponents` package. The `ComboBox` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ComboBox.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Component\nDESCRIPTION: This code snippet shows how to import the `Menu` component from the `@ui5/webcomponents` package. The `Menu` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Menu.js\";\n```\n\n----------------------------------------\n\nTITLE: Markdown File for Sample Display (sample_name.md)\nDESCRIPTION: This Markdown snippet demonstrates how to use raw-loader to import the HTML and JavaScript files for a UI5 Web Components sample. It then utilizes the `<Editor>` component to display the sample with its code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/04-website.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Initializing UI5 Web Components Project with yarn\nDESCRIPTION: This command initializes a new UI5 Web Components project using yarn.  It creates a new directory and sets up the project as an NPM package, using the `@ui5/webcomponents-package` initializer. The command can be used with or without a specified package name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn create @ui5/webcomponents-package\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn create @ui5/webcomponents-package <NEW-PACKAGE-NAME>\n```\n\n----------------------------------------\n\nTITLE: Attaching Boot Code - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `attachBoot` function from `@ui5/webcomponents-base` to execute custom code after the UI5 Web Components framework has finished booting. This allows developers to run initialization logic or perform other tasks once the framework is ready. The function takes a callback as an argument, which is executed after the framework boots.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/15-other-framework-level-APIs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { attachBoot } from \"@ui5/webcomponents-base/dist/Boot.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Language Configuration\nDESCRIPTION: Imports the `getLanguage` and `setLanguage` functions from the `@ui5/webcomponents-base/dist/config/Language.js` module. These functions are used to get and set the current language of the UI5 Web Components, influencing localization and text rendering.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getLanguage, setLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Bar Component\nDESCRIPTION: This code snippet shows how to import the `Bar` component from the `@ui5/webcomponents` package. The `Bar` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Calculating Full Name\nDESCRIPTION: This snippet demonstrates pre-calculating a value (full name) in the JavaScript file and making it available as a getter. This is recommended over complex expressions within the Handlebars template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nget fullName() {\n\treturn `${this.person.name} ${this.person.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript as string\nDESCRIPTION: This snippet imports the content of 'main.js' as a raw string. The 'raw-loader' webpack loader reads the file's content and assigns it to the 'js' variable. This is useful for dynamically injecting or manipulating JavaScript code within a web application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toast/Placement/Placement.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Editor Component Initialization (JavaScript)\nDESCRIPTION: This JavaScript code initializes an editor component, passing the imported HTML and JavaScript strings as properties. The component renders an editor with the provided code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Search/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operator\nDESCRIPTION: Shows how to use the ternary operator for if/else conditional rendering in JSX.  If `this.icon` is truthy, the `Icon` component will be rendered; otherwise, a dummy `div` is rendered.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n{this.icon ?\n    <Icon class=\"ui5-tli-icon\" name={this.icon}/>\n    :\n    <div class=\"ui5-tli-dummy-icon-container\"></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JS\nDESCRIPTION: This snippet renders an `Editor` component, passing the previously imported HTML and JavaScript strings as props. The Editor component is responsible for displaying and allowing interaction with the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toolbar/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML content\nDESCRIPTION: This snippet imports the content of the 'sample.html' file as a string using the 'raw-loader' webpack loader. The imported HTML code is then assigned to the 'html' variable. This is likely done to pass the HTML code as a prop to a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Label/CustomStyling/CustomStyling.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript as Raw String\nDESCRIPTION: Imports a JavaScript file as a raw string using raw-loader.  This allows the JavaScript code to be used directly within other JavaScript code, often for dynamic evaluation or embedding in a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateTimePicker/DateTimePickerInDifferentTimezone/DateTimePickerInDifferentTimezone.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: This snippet imports HTML content from a file named 'sample.html' using a raw-loader.  The imported content is assigned to the 'html' variable, making it available for use within the application, likely passed to a component for rendering. Raw-loader is used to treat the imported file as a raw string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ColorPicker/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Using UI5 Web Component in Angular Template\nDESCRIPTION: Demonstrates how to use the imported `ui5-button` component in an Angular template. The component is used as a standard HTML element, displaying \"Hello world!\" as its text.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button>Hello world!</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Import Color Palette More Colors Feature\nDESCRIPTION: This line imports the optional \"More Colors\" feature for the `ui5-color-palette` component. This feature is loaded dynamically when the `showMoreColors` property is set to `true`. Pre-loading the feature with this import avoids the dynamic import.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/features/ColorPaletteMoreColors.js\";\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Accessing Global Context from Loop\nDESCRIPTION: This snippet shows how to access properties from the global component context inside a loop using `../`. It retrieves the `name` property from the component instance while iterating through the `items` array.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_10\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each items}}\n\t<div id=\"{{id}}\">{{../name}}</div>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Using slot=\"items\" in ui5-tab (ui5-carousel)\nDESCRIPTION: This snippet shows the correct usage of the `items` slot in `ui5-tab` for nesting tabs, replacing the deprecated `subTabs` slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content\nDESCRIPTION: This code snippet imports the content of a JavaScript file named 'main.js' using 'raw-loader'.  The 'raw-loader' is used to treat the JavaScript file as a raw string, which can then be passed as a property to a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/NotificationList/GroupItems/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Firing Event with Default Configuration using fireEvent - TypeScript\nDESCRIPTION: This example shows how to fire the event with NOT preventable and bubbling by default by using fireEvent.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Fires the event as NOT preventable and bubbling\nthis.fireEvent(\"change\");\n```\n\n----------------------------------------\n\nTITLE: CSS Selector by Attribute\nDESCRIPTION: This CSS snippet demonstrates how to select an element using attribute notation instead of tag names, which is more scoping-friendly. This ensures that styling is applied correctly even if tag names vary.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/03-DoD.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[ui5-button].accept-btn { color: green; }\n```\n\n----------------------------------------\n\nTITLE: Hiding Unstyled Web Components with CSS using visibility\nDESCRIPTION: This CSS snippet hides web components that have not yet been defined, preventing users from seeing them before they are styled. It uses the `:not(:defined)` pseudo-class to target these components using visibility.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/09-FAQ.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n*:not(:defined) {\n\tvisibility: hidden;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing IUploadCollectionItem interface with UploadCollectionItem type (JavaScript)\nDESCRIPTION: The IUploadCollectionItem interface has been removed.  This snippet demonstrates how to replace the interface import with the UploadCollectionItem type import.  Use the `UploadCollectionItem` type instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting accessibilityAttributes in ui5-button - HTML\nDESCRIPTION: This snippet shows how to set the `accessibilityAttributes` property on a `ui5-button` element using JavaScript. It assigns values to properties like `hasPopup` and `controls` which in turn set corresponding aria attributes in the shadow DOM for increased accessibility.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"button\">...</ui5-button>\n<ui5-dialog id=\"dialogIdentificator\">...</ui5-dialog>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Styles - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set the styles for a custom UI5 Web Component using the `styles` option within the `@customElement` decorator's configuration object. The example imports styles from a generated CSS file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/02-component.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport MyDemoComponentCss from \"./generated/themes/MyDemoComponent.css.js\";\n\n@customElement({\n    styles: MyDemoComponentCss\n})\nclass MyDemoComponent extends UI5Element {\n    // class implementation\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tag Wrapping Behavior (Now)\nDESCRIPTION: Shows the new default behavior of the ui5-tag component, where text wraps to the next line if there is not enough space. The wrapping-type property is now set to Normal by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tag>In Process</ui5-tag><!-- would let the text wrap if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Creating a UI5 Web Component Instance - JavaScript\nDESCRIPTION: Demonstrates creating a UI5 Web Component instance using `document.createElement` and appending it to the HTML document body. This approach provides more programmatic control over component creation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myButton = document.createElement(\"ui5-button\");\ndocument.body.appendChild(myButton);\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Components for Angular\nDESCRIPTION: Imports `LabelComponent`, `InputComponent`, and `ButtonComponent` from `@ui5/webcomponents-ngx/main` and includes them in the `imports` array of the Angular module. This makes the UI5 Web Components (wrapped for Angular) available for use in the application's templates.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n// UI5 Web Components For Angular\nimport { LabelComponent } from '@ui5/webcomponents-ngx/main/label';\nimport { ButtonComponent } from '@ui5/webcomponents-ngx/main/button';\nimport { InputComponent } from '@ui5/webcomponents-ngx/main/input';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    LabelComponent,\n    InputComponent,\n    ButtonComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```\n\n----------------------------------------\n\nTITLE: Render HTML and JavaScript using Editor\nDESCRIPTION: Renders the imported HTML and JavaScript strings within an `Editor` component.  The component receives the HTML and JavaScript code as props named `html` and `js`, respectively. This allows the editor to display and potentially edit the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/CalendarTypes/CalendarTypes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Step Input Component\nDESCRIPTION: This code snippet shows how to import the `StepInput` component from the `@ui5/webcomponents` package. The `StepInput` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/StepInput.js\";\n```\n\n----------------------------------------\n\nTITLE: Defining a Property with noAttribute\nDESCRIPTION: This code snippet shows how to define a property `myProp` for a UI5 Web Component and prevent the creation of a corresponding attribute using `noAttribute: true`. This is useful for properties that are not intended for CSS selectors.  The property is of type `Number`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/03-properties.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @property({ type: Number, noAttribute: true })\n    myProp = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSX Template Support - TypeScript\nDESCRIPTION: This feature adds JSX template support using TypeScript. This allows developers to write UI5 Web Components using JSX syntax within TypeScript files, improving code readability and maintainability.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **framework:** add JSX template support with TypeScript ([#10046](https://github.com/SAP/ui5-webcomponents/issues/10046)) ([f42e7c1](https://github.com/SAP/ui5-webcomponents/commit/f42e7c18c846f923df4fec6ae02f1b4c20c006fa))\n */\n```\n\n----------------------------------------\n\nTITLE: Configure UI5 Web Components Editor\nDESCRIPTION: This snippet configures an editor component by passing the imported HTML and JavaScript strings as props. The `Editor` component likely uses these strings to initialize or update its content and behavior.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiComboBox/MultiComboBoxSelectAll/MultiComboBoxSelectAll.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Theming Assets in UI5 Web Components\nDESCRIPTION: This code snippet demonstrates how to import theming assets within a UI5 Web Components project. These assets provide additional themes and styles to enhance the visual appearance of the components. The import statement includes the path to the Assets.js file within the @ui5/webcomponents-theming package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-theming/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript for Editor\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using `raw-loader`. These strings are then passed as `html` and `js` properties to the `Editor` component.  The purpose is to provide the editor with the initial content to display and execute.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/MenuEndContent/MenuEndContent.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Hiding Unstyled Web Components with CSS\nDESCRIPTION: This CSS snippet hides web components that have not yet been defined, preventing users from seeing them before they are styled. It uses the `:not(:defined)` pseudo-class to target these components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/09-FAQ.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n*:not(:defined) {\n\tdisplay: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Element Tag (JavaScript)\nDESCRIPTION: This code demonstrates the use of the `@customElement` decorator to define the custom tag name for the web component.  The `tag` property specifies the name that will be used when the component is used in HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n@customElement({\n    tag: \"ui5-toolbar-button\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using ui5-notification-list as container HTML\nDESCRIPTION: Demonstrates the correct and updated way of defining notifications using `ui5-notification-list`. This supports accessibility and ensures correct semantics.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-notification-list>\n        <ui5-li-notification-group title-text=\"Group Title\" >\n            <ui5-li-notification..\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript as Strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as strings using the `raw-loader`. This allows the content of the files to be used directly within the JavaScript code, typically for embedding examples or configurations.  It requires `raw-loader` webpack configuration.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/TokenCreation/TokenCreation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Install UI5 Web Components - npm\nDESCRIPTION: Installs the `@ui5/webcomponents` package using npm. This command adds the UI5 Web Components library as a project dependency.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ui5/webcomponents\n```\n\n----------------------------------------\n\nTITLE: Importing Responsive Popover Component\nDESCRIPTION: This code snippet shows how to import the `ResponsivePopover` component from the `@ui5/webcomponents` package. The `ResponsivePopover` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ResponsivePopover.js\";\n```\n\n----------------------------------------\n\nTITLE: Enabling TS in Main and Fiori - JavaScript\nDESCRIPTION: This snippet enables TypeScript (TS) support in the main and fiori packages. This enhancement promotes the use of TypeScript in these packages, improving code quality and maintainability. This involves migrating existing code to TypeScript and configuring the build process to support TypeScript compilation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\n* enable TS in main, fiori ([#6064](https://github.com/SAP/ui5-webcomponents/issues/6064)) ([0b56130](https://github.com/SAP/ui5-webcomponents/commit/0b561307b93b8af465dc5bee67650069ee138f7f))\n```\n\n----------------------------------------\n\nTITLE: Import CSS Content\nDESCRIPTION: This snippet imports the content of the `main.css` file as a string using `raw-loader`. This imports the stylesheet, so it can be used within the JavaScript code, or directly injected into the DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIQuickPrompt/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Importing F6Navigation Feature - JavaScript\nDESCRIPTION: This code imports the F6Navigation feature.  This enables fast group navigation using the F6 key within UI5 Web Components. It enhances accessibility by allowing users to quickly jump between groups of related elements, and needs to be imported before component modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Nested Arrays\nDESCRIPTION: This JavaScript initializes a two-dimensional array called `numbers` on the component instance.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nthis.numbers = [\n\t[1, 2, 3],\n\t[4, 5, 6]\n];\n```\n\n----------------------------------------\n\nTITLE: Replacing Imperative Popover API with Declarative API\nDESCRIPTION: This snippet demonstrates replacing the imperative API (`openPopover`, `showAt`) with a declarative API (`open`, `opener` properties) for `ui5-color-palette-popover` component.  The popover is now controlled via the `open` property and associated with an `opener` element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Example\nDESCRIPTION: This code demonstrates an interface with an optional property named `colorThemeOverride`. It shows how TypeScript handles optional properties and the impact of enabling 'Exact Optional Property Types'. The interface defines the valid string values for `colorThemeOverride` to either 'dark' or 'light'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/16-typescript-support.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UserDefaults { \n    colorThemeOverride?: \"dark\" | \"light\"; \n}\n```\n\n----------------------------------------\n\nTITLE: Editor Component Integration\nDESCRIPTION: This code snippet demonstrates how to integrate an editor component and pass the imported HTML and JavaScript content as properties named 'html' and 'js', respectively. The Editor component likely handles the display and manipulation of these code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/NotificationList/GroupItems/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Migrating from `ui5-select-menu` to `ui5-option-custom` (HTML)\nDESCRIPTION: Illustrates how to migrate from using `ui5-select-menu` and `ui5-select-menu-option` to using `ui5-option-custom` directly within `ui5-select`. The `menu` property of `ui5-select` is also removed.  The code showcases the replacement of the old components with the new `ui5-option-custom` within the default slot of the `ui5-select` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-select menu=\"selectMenu\"></ui5-select>\n\n<ui5-select-menu id=\"selectMenu\">\n    <ui5-select-menu-option>\n        <div class=\"optionContent\">custom</div>\n    </ui5-select-menu-option>\n</ui5-select-menu>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-select>\n    <ui5-option-custom>\n        <div class=\"optionContent\">custom</div>\n    </ui5-option-custom>\n</ui5-select>\n```\n\n----------------------------------------\n\nTITLE: Using SAP Icons v5 in HTML\nDESCRIPTION: This HTML code snippet demonstrates how to use a specific SAP icon from the `SAP Icons v5` collection. This will ensure that version 5 is rendered regardless of the current theme. The component requires the `ui5-icon` web component to be available. Required dependency: `@ui5/webcomponents`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"SAP-icon-v5/accept\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Initialize Editor component with code snippets\nDESCRIPTION: This snippet initializes an `Editor` component and passes the imported HTML, JavaScript, and CSS code as props named `html`, `js`, and `css`. The `Editor` component is responsible for rendering and displaying these code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/FlexibleColumnLayout/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css}/>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with Raw Loader\nDESCRIPTION: Imports HTML and JavaScript code as strings using `raw-loader`.  This allows the content of `sample.html` and `main.js` to be included directly as strings within the JavaScript file. These strings are then used to populate the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/NoData/NoData.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Invalidation on Child Changes (ts)\nDESCRIPTION: This snippet demonstrates how to configure invalidation on child changes using the `invalidateOnChildChange` option in the `@slot` decorator. This allows the component to re-render when its slotted children are modified. The example showcases setting it to `true` for general invalidation, using an object literal to specify invalidation on property changes only, and specifying invalidation based on specific properties or slots.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @slot({ type: HTMLElement, invalidateOnChildChange: true })\n    mySlot!: Array<HTMLElement>;\n\n    @slot({ type: HTMLElement, invalidateOnChildChange: { properties: true, slots: false }})\n    mySlot2!: Array<HTMLElement>;\n\n    @slot({ type: HTMLElement, invalidateOnChildChange: { properties: [\"myProp\"], slots: [\"anotherSlot\"] }})\n    mySlot3!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HTML as Raw String with raw-loader\nDESCRIPTION: This snippet imports an HTML file as a raw string using webpack's `raw-loader`. The `html` variable then holds the entire HTML content as a single string, enabling it to be used within the UI5 Web Components editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SegmentedButton/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript Content\nDESCRIPTION: This snippet imports HTML and JavaScript content from external files (sample.html and main.js) using the 'raw-loader'. The 'raw-loader' is a webpack loader that allows importing file content as a raw string. These strings are assigned to the 'html' and 'js' variables, respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UploadCollection/VariousUploadStates/VariousUploadStates.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Conditional Class Binding\nDESCRIPTION: Shows how to conditionally apply CSS classes in JSX by using an object where keys are class names and values are boolean conditions. The \"ui5-vsd-content\" class will be always added, while the \"ui5-vsd-content-expand\" will be conditionally added based on the value of `this.expandContent`\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\n<div\n    class={{\n        \"ui5-vsd-content\": true,\n        \"ui5-vsd-content-expand\": this.expandContent,\n    }}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Generating TS from HBS Templates - JavaScript\nDESCRIPTION: This snippet introduces a new feature to generate TypeScript (TS) code directly from Handlebars (HBS) templates. This enhancement streamlines the development workflow by automating the conversion of templates into type-safe code, improving code maintainability and reducing potential runtime errors. This involves implementing a tool or script that parses HBS templates and outputs corresponding TS files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n* generate TS from HBS templates ([#6558](https://github.com/SAP/ui5-webcomponents/issues/6558)) ([02611b2](https://github.com/SAP/ui5-webcomponents/commit/02611b2e24b2c2a06129b8e60a8bc680d9501e39))\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Type (HTML)\nDESCRIPTION: This HTML code snippet demonstrates how to configure the default calendar type for UI5 Web Components using a `<script>` tag with the `data-ui5-config` attribute. Setting the `calendarType` property to \"Islamic\" will cause all date-related components to use the Islamic calendar by default. The associated calendar type must be imported as shown in the previous example.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n    \"calendarType\": \"Islamic\"\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing OpenUI5 Support Module (JavaScript)\nDESCRIPTION: This code snippet imports the OpenUI5 support module, enabling UI5 Web Components to leverage OpenUI5 configurations and resources. It is crucial to import this module before importing any UI5 Web Components to ensure the feature is enabled upon framework initialization.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/07-OpenUI5-integration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-base/dist/features/OpenUI5Support.js\";\n```\n\n----------------------------------------\n\nTITLE: Render UI5 Web Components Editor\nDESCRIPTION: This snippet renders the UI5 Web Components Editor with the imported HTML and JavaScript strings. The `html` and `js` variables are passed as props to the `<Editor>` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS and CSS files for UI5 Web Components Editor\nDESCRIPTION: This JavaScript snippet imports HTML, JavaScript and CSS files using raw-loader, converting them into strings. These strings are then passed as props to the `<Editor>` component, configuring its content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/MediaGallery/Vertical/Vertical.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with raw-loader\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using webpack's raw-loader. These strings are then passed to an Editor component as props.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/CalendarWeekNumbering/CalendarWeekNumbering.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming tabs-overflow-mode to overflow-mode\nDESCRIPTION: This code shows how the `tabs-overflow-mode` property of the `ui5-tabcontainer` component has been renamed to `overflow-mode`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Setting FlexibleLayout Accessibility Attributes (New)\nDESCRIPTION: This JavaScript snippet shows the updated approach for setting accessibility attributes on the FlexibleLayout component. It utilizes the new `accessibilityAttributes` property, providing a more structured and flexible way to define accessibility roles and names for different parts of the layout. Migrate from `accessibilityTexts` and `accessibilityRoles`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nfcl.accessibilityAttributes = {\n    startColumn: {\n      role: \"complementary\",\n      name: \"Products list\",\n    },\n    midColumn: {\n      role: \"main\",\n      name: \"Product information\",\n    },\n    endColumn: {\n      role: \"complementary\",\n      name: \"Product detailed information\",\n    },\n    startArrowLeft:  {\n      name: \"Collapse products list\",\n    },\n    startArrowRight: {\n      name: \"Expand products list\",\n    },\n    endArrowLeft: {\n      name: \"Expand product detailed information\",\n    },\n    endArrowRight:  {\n      name: \"Collapse product detailed information\",\n    },\n    startArrowContainer: {\n      role: \"navigation\",\n      name: \"Start Arrow Container\",\n    },\n    endArrowContainer: {\n      role: \"navigation\",\n      name: \"End Arrow Container\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and using getPathData\nDESCRIPTION: This code snippet demonstrates the recommended approach for importing and using `getPathData` to retrieve SVG path data for UI5 Web Components icons.  The `getPathData` function is asynchronous and returns a Promise that resolves with the SVG path data.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getPathData, ltr, accData } from \"@ui5/webcomponents-icons/dist/accept.js\";\ngetPathData().then(pathData => {\n  console.log(pathData); // String containing the SVG path\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring the Editor Component\nDESCRIPTION: This snippet configures an `Editor` component by passing the imported HTML, JavaScript, and CSS strings as props.  The `html`, `js`, and `css` props are assigned the raw string content of the corresponding files, enabling the editor to display and manipulate these resources.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/WithTable/WithTable.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Content\nDESCRIPTION: Imports a JavaScript file's content as a raw string using raw-loader. This facilitates embedding the JavaScript code within a JavaScript environment, often for integration into a component or application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/FileSizeLimit/FileSizeLimit.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML as raw string - SAP UI5 Webcomponents\nDESCRIPTION: This code snippet imports the HTML content from 'sample.html' as a raw string using 'raw-loader'. The '!!' prefix disables all pre-configured loaders and only uses the specified loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/States/States.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Add Cypress Custom Commands (TypeScript)\nDESCRIPTION: Adds a custom command named 'mount' to Cypress, which allows mounting UI5 Web Components in the Cypress testing environment. This uses the mount function provided by @ui5/cypress-ct-ui5-webc.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/cypress-ct-ui5-webc/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from '@ui5/cypress-ct-ui5-webc';\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Mount a template/component in Cypress sandbox\n       * @param template The component template\n       * @param options Custom rendering options\n       */\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount);\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JS props\nDESCRIPTION: Renders an 'Editor' component, passing the previously imported HTML and JavaScript strings as props named 'html' and 'js' respectively. This likely configures the editor with the given HTML structure and JavaScript logic.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Breadcrumbs/BreadcrumbsStyles/BreadcrumbsStyles.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Component with HTML and JavaScript\nDESCRIPTION: This code snippet configures a component named `Editor` with the imported `html` and `js` strings. The `html` string is passed to the `html` property of the component, and the `js` string is passed to the `js` property. The component is likely responsible for displaying and allowing users to edit the provided HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/ShellBar/Advanced/Advanced.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming List Mode Properties\nDESCRIPTION: This snippet displays the renaming of the `mode` property to `selectionMode` and the corresponding values in `ui5-list`, `ui5-tree`, and `ui5-upload-collection`. Developers must update their code to use the new `selectionMode` property and values like `Single`, `Multiple`, `SingleStart`, `SingleEnd`, `SingleAuto`, and `None`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_69\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list class=\"list\" mode=\"SingleSelect\">\n<ui5-list class=\"list\" mode=\"MultiSelect\">\n<ui5-upload-collection mode=\"SingleSelectBegin\">\n<ui5-upload-collection mode=\"SingleSelectEnd\">\n<ui5-tree mode=\"SingleSelectAuto\" >\n<ui5-tree mode=\"None\" >\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list class=\"list\" selection-mode=\"Single\">\n<ui5-list class=\"list\" selection-mode=\"Multiple\">\n<ui5-upload-collection selection-mode=\"SingleStart\">\n<ui5-upload-collection selection-mode=\"SingleEnd\">\n<ui5-tree selection-mode=\"SingleAuto\">\n<ui5-tree selection-mode=\"None\">\n```\n\n----------------------------------------\n\nTITLE: Importing Assets for Language Support (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the Assets.js module from different UI5 Web Components libraries to enable support for additional languages. Importing these assets ensures that the necessary language resources are available for the components to be translated correctly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-fiori/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Using HTML and JS to render editor component\nDESCRIPTION: This code snippet uses the imported HTML and JavaScript code as props (html and js) to render an 'Editor' component. This component is responsible for displaying and potentially editing the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TabContainer/TextOnlyTabs/TextOnlyTabs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Editor\nDESCRIPTION: This snippet instantiates an Editor component and configures it by passing the imported HTML and JavaScript strings as props. The Editor component is likely a custom component designed to display and edit the provided code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Select/AdditionalText/AdditionalText.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, CSS, JS files\nDESCRIPTION: This code snippet imports the contents of three files (sample.html, main.css, and main.js) as strings using 'raw-loader'. These strings are then used to populate the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/UXCIntegration/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport css from '!!raw-loader!./main.css';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Building and Serving the Project\nDESCRIPTION: This command builds the UI5 Web Components project and starts a development server. It typically uses a script defined in the `package.json` file, which may involve compiling code, bundling assets, and starting a local web server. The server automatically reloads the pages when changes are made to the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Button Functionality - UI5 AI Button\nDESCRIPTION: This feature implements split button functionality for the ui5-ai-button component. It enables users to perform a default action and also provides access to a menu of related actions via a dropdown.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * **ui5-ai-button:** implement split button functionality ([#10242](https://github.com/SAP/ui5-webcomponents/issues/10242)) ([55c9e4d](https://github.com/SAP/ui5-webcomponents/commit/55c9e4d67800d82a0d357eda8859b78d69dc25ab))\n */\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JS as Raw Strings\nDESCRIPTION: This snippet imports the HTML and JavaScript files as raw strings using raw-loader. The imported strings are then passed as props to the Editor component for rendering.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/DynamicallyAddedItems/DynamicallyAddedItems.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar Component to main Library\nDESCRIPTION: This snippet shows how the `ui5-bar` component is now located in the `main` library instead of `fiori`.  Import statements need to be updated accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript as Raw String\nDESCRIPTION: This snippet imports a JavaScript file as a raw string using `raw-loader`.  This allows the JavaScript content to be used directly as a string within JavaScript, typically for dynamic code execution or display in a code editor. The `js` variable now contains the entire content of `main.js` as a string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/FilesFilter/FilesFilter.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Color Palette Component\nDESCRIPTION: This code snippet shows how to import the `ColorPalette` component from the `@ui5/webcomponents` package. The `ColorPalette` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ColorPalette.js\";\n```\n\n----------------------------------------\n\nTITLE: Using Imported HTML/JS in Editor\nDESCRIPTION: This snippet uses the previously imported HTML and JavaScript raw strings as input to an 'Editor' component. The 'html' and 'js' variables, containing the raw file contents, are passed as props to the Editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateTimePicker/DateTimePickerInDifferentTimezone/DateTimePickerInDifferentTimezone.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing ui5-bar from main library (ui5-carousel)\nDESCRIPTION: The `ui5-bar` component has been moved from the `fiori` library to the `main` library. This snippet illustrates the required import statement change from `@ui5/webcomponents-fiori/dist/Bar.js` to `@ui5/webcomponents/dist/Bar.js`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with &&\nDESCRIPTION: Illustrates conditional rendering in JSX using the `&&` operator. If `this.icon` is truthy, the `Icon` component will be rendered; otherwise, nothing is rendered.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n{this.icon &&\n    <Icon name={this.icon} />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Web Component Content - HTML\nDESCRIPTION: Demonstrates setting the content of a UI5 Web Component using HTML. Shows examples of components that accept no children, text content, or HTML elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon name=\"add\"></ui5-icon>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon name=\"add\">This is an icon</ui5-icon>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"btn\">This is the content of the button</ui5-button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button>This is the <strong>content</strong> of the button</ui5-button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button>This is the <span class=\"myClass\">content</span> of the button</ui5-button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover>\n\t<div>This is my content</div>\n\t<p>This is some more content</p>\n\t<ui5-button>Button on a popover</ui5-button>\n</ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer id=\"tc1\">\n\t<ui5-tab text=\"Laptops\" additional-text=\"125\"></ui5-tab>\n\t<ui5-tab-separator></ui5-tab-separator>\n\t<ui5-tab text=\"Phones\" design=\"Positive\" additional-text=\"25\"></ui5-tab>\n\t<ui5-tab text=\"Tablets\" design=\"Negative\" additional-text=\"40\"></ui5-tab>\n</ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover>\n\t<div slot=\"header\">This will be used as a header</div>\n\n\t<div>Some popover content</div>\n\t<div>Some more content</div>\n\tThis text will also go to the default slot.\n\n\t<div slot=\"footer\">\n\t\t<ui5-button>Do some action</ui5-button>\n\t</div>\n</ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Render Code Editor Component\nDESCRIPTION: This snippet renders a code editor component, passing the previously imported HTML and JavaScript code strings as props. The `<Editor>` component is responsible for displaying and potentially executing the provided code snippets.  The `html` and `js` variables are passed as props named `html` and `js` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/FilesFilter/FilesFilter.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Left/Right options to Start/End (HTML)\nDESCRIPTION: The `Left` and `Right` options for `horizontal-align` and `placement-type` in `ui5-popover` have been renamed to `Start` and `End`. This snippet demonstrates the required changes in HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Import HTML, CSS, JS content\nDESCRIPTION: Imports the HTML, CSS, and JavaScript content for the sample.  Uses raw-loader to load the files as strings. These strings are then used within the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/AI CustomPrompt/Level 4/Level 4.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport css from '!!raw-loader!./main.css';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Advanced Calendar Types\nDESCRIPTION: Imports the modules required to support different calendar types (Buddhist, Islamic, Japanese, Persian) in the `ui5-date-picker` and `ui5-datetime-picker` components.  After importing, you must also set the `primaryCalendarType` property of these components to the desired type.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Buddhist.js\";\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Islamic.js\";\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Japanese.js\";\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Persian.js\";\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component (SAP UI5)\nDESCRIPTION: Renders an `<Editor>` component, passing the imported HTML and JavaScript code as props.  The `html` prop receives the content of `sample.html`, and the `js` prop receives the content of `main.js`.  This assumes the `<Editor>` component is defined elsewhere.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/CheckBox/TextWrapping/TextWrapping.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content using Raw Loader\nDESCRIPTION: This snippet imports the content of an HTML file (sample.html) as a string using the raw-loader webpack plugin. This allows the HTML content to be embedded directly into a JavaScript or TypeScript file for use in web components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Add custom CSS via link tag\nDESCRIPTION: This HTML snippet demonstrates how to add the generated custom CSS file to your project using a `<link>` tag.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<path-to-your-css-file>/mytheme.css\">\n```\n\n----------------------------------------\n\nTITLE: Using the Framework-Managed Property (TS)\nDESCRIPTION: This snippet shows how to use the getter and setter for a framework-managed property. The framework's getter/setter is called whenever the property is read or set, giving the framework control over it.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet t = myComponent.text;\nmyComponent.text = \"New text\";\n```\n\n----------------------------------------\n\nTITLE: Update Root TypeScript Configuration (JSON)\nDESCRIPTION: Updates the root tsconfig.json file to include settings required for Cypress tests, such as tsBuildInfoFile, rootDir, and composite. This ensures TypeScript correctly resolves dependencies when running Cypress tests.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/cypress-ct-ui5-webc/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"dist/.tsbuildinfo\",\n    \"rootDir\": \"src\",\n    \"composite\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HTML as Raw String\nDESCRIPTION: This snippet imports an HTML file named `sample.html` as a raw string using `raw-loader`.  The `raw-loader` webpack loader is prefixed with `!!` to ensure that other configured loaders are not applied to this import. The imported HTML content is assigned to the `html` variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/MultipleFiles/MultipleFiles.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Run the build theme script\nDESCRIPTION: This command executes the `build:theme` script defined in `package.json`, which compiles the LESS files into CSS.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:theme\n```\n\n----------------------------------------\n\nTITLE: Install LESS compiler\nDESCRIPTION: Installs the `less` package as a development dependency to compile LESS files into CSS.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install less --save-dev\n```\n\n----------------------------------------\n\nTITLE: Import HTML content using raw-loader (JavaScript)\nDESCRIPTION: Imports the content of 'sample.html' as a raw string using raw-loader. This allows the HTML content to be used directly within the JavaScript code, likely for rendering or manipulation within a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/TwoColumnsLayout/TwoColumnsLayout.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Including Custom Theme CSS via Style Tag in HTML\nDESCRIPTION: This code snippet demonstrates an alternative method to include the custom theme's CSS variables directly within your HTML page using a `<style>` tag. You would paste the entire content of the `css_variables.css` file between the `<style>` and `</style>` tags. This approach embeds the theme's CSS directly into the HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/12-theming.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n       /* Here goes the content of css_variables.css */\n</style>\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Container Component\nDESCRIPTION: This code snippet shows how to import the `TabContainer` component from the `@ui5/webcomponents` package. The `TabContainer` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/TabContainer.js\";\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for AI Action\nDESCRIPTION: This HTML snippet likely represents the structure of the UI5 table header cell with the action-ai component added to the action slot. It's used to visually indicate that the column's data is AI-generated. The 'html' variable within the parent context suggests it contains the HTML code related to the sample.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/HeaderCellActionAI/HeaderCellActionAI.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Component Button (Angular)\nDESCRIPTION: Imports the Angular wrapper component for the UI5 Web Components Button from the `@ui5/webcomponents-ngx` library. This wrapper provides better integration with Angular, including features like two-way data binding.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ButtonComponent } from '@ui5/webcomponents-ngx/main/button';\n```\n\n----------------------------------------\n\nTITLE: Replacing ValueState constants (HTML)\nDESCRIPTION: The ValueState.Warning, ValueState.Error, and ValueState.Success constants have been replaced with ValueState.Critical, ValueState.Negative, and ValueState.Positive respectively.  This snippet shows how to update the value-state property of components like ui5-input.  All components with valueState property are also affected.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_26\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-input value-state=\"Success\"></ui5-input>\n<ui5-input value-state=\"Warning\"></ui5-input>\n<ui5-input value-state=\"Error\"></ui5-input>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-input value-state=\"Positive\"></ui5-input>\n<ui5-input value-state=\"Critical\"></ui5-input>\n<ui5-input value-state=\"Negative\"></ui5-input>\n```\n\n----------------------------------------\n\nTITLE: Defining Slots in Component Metadata - TypeScript\nDESCRIPTION: This snippet demonstrates how to define slots in a component's metadata using TypeScript decorators. It showcases defining slots for `header`, `content` (default), and `footer`. The `content` slot is defined as the default slot using `default: true`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\n@slot()\nheader!: Array<HTMLElement>;\n\n@slot({ type: Node, \"default\": true })\ncontent!: Array<Node>;\n\n@slot()\nfooter!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Linter\nDESCRIPTION: This command executes the ESLint linter to check the code for style and syntax errors according to the project's ESLint configuration. This ensures code quality and consistency across the project. It's a recommended step before committing changes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn lint\n```\n\n----------------------------------------\n\nTITLE: Using overflow-mode in ui5-tabcontainer (ui5-carousel)\nDESCRIPTION: This snippet demonstrates the correct usage of the `overflow-mode` property in `ui5-tabcontainer`, replacing the deprecated `tabs-overflow-mode` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content\nDESCRIPTION: This snippet imports raw JavaScript content from a file named 'main.js' using a raw-loader. The imported JavaScript is assigned to the 'js' variable for later use, potentially within a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateTimePicker/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Compiled Web Component JSX\nDESCRIPTION: Illustrates how the UI5 Web Components are rendered as HTML elements during JSX compilation. In this example, the Button component from previous example compiles into ui5-button with the specified design property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<ui5-button design=\"Positive\">Submit</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Named and Default Slots - Handlebars\nDESCRIPTION: This Handlebars template renders a page layout with named slots for the header and footer, and a default slot for the main content.  It utilizes HTML elements with classes to structure the page and renders content associated with each slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_54\n\nLANGUAGE: Handlebars\nCODE:\n```\n<div class=\"ui5-page-root\">\n\t<header class=\"ui5-page-header-root\" id=\"ui5-page-header\">\n\t\t<slot name=\"header\"></slot>\n\t</header>\n\n\t<section part=\"content\" class=\"ui5-page-content-root\" style=\"{{styles.content}}\">\n\t\t<slot></slot>\n\t</section>\n\n\t<footer class=\"ui5-page-footer-root\" style=\"{{styles.footer}}\">\n\t\t<slot name=\"footer\"></slot>\n\t</footer>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Passing HTML, JS, and CSS to Editor Component\nDESCRIPTION: This code snippet demonstrates how to use the imported HTML, JavaScript, and CSS strings as properties for the `<Editor />` component. This enables the editor to display and potentially allow the user to modify the code. The `html`, `js`, and `css` variables are passed as props.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/CustomSuggestions/CustomSuggestions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css}/>\n```\n\n----------------------------------------\n\nTITLE: Declaring Webpack Chunk Name in JavaScript\nDESCRIPTION: This JavaScript code snippet declares webpackChunkName in generated dynamic imports. This change improves the readability and organization of runtime bundle names by providing explicit chunk names for dynamic imports.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeclare webpackChunkName in generated dynamic imports for readable runtime bundle names ([#7835](https://github.com/SAP/ui5-webcomponents/issues/7835)) ([592a10b](https://github.com/SAP/ui5-webcomponents/commit/592a10b25a14da89885874c40c5c7a192b8b4d85))\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Template\nDESCRIPTION: This snippet imports an HTML template as a string using raw-loader. This allows the HTML content to be used directly within the JavaScript code for rendering the UI5 Web Component's structure. The raw-loader is a webpack loader that allows importing files as raw strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UploadCollection/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Importing Buddhist Calendar Feature - JavaScript\nDESCRIPTION: This code imports the Buddhist calendar feature for UI5 Web Components.  This feature is part of the localization package and enables support for the Buddhist calendar in components like ui5-date-picker.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Buddhist.js\"\n```\n\n----------------------------------------\n\nTITLE: Initializing component and attaching event listener - TypeScript\nDESCRIPTION: The constructor is used for one-time initialization tasks such as binding functions to `this` and instantiating helper classes. It also handles attaching event listeners to the `window` object. It's important to avoid any rendering-related logic or DOM manipulation in the constructor, as the component isn't attached to the DOM yet.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport type { ResizeObserverCallback } from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\n\n\n@customElement({\n    tag: \"my-component\",\n})\nclass MyComponent extends UI5Element {\n\t_itemNavigation: ItemNavigation;\n\t_handleResizeBound: ResizeObserverCallback;\n\n\tconstructor() {\n\t\tsuper();\n\t\t// bind a method once so that you can pass the same function to register/deregister-based helpers\n\t\tthis._handleResizeBound = this._handleResize.bind(this); \n\n\t\t// do one-time work when the first instance of a component is created\n\t\tif (!isGlobalHandlerAttached) {\n\t\t\tdocument.addEventListener(\"mouseup\", this._deactivate);\n\t\t\tisGlobalHandlerAttached = true;\n\t\t}\n\n\t\t// initialize a helper class for the instance\n\t\tthis._itemNavigation = new ItemNavigation(this, {\n\t\t\tnavigationMode: NavigationMode.Horizontal,\n\t\t\tgetItemsCallback: () => this._getFocusableItems(),\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing IUploadCollectionItem interface\nDESCRIPTION: This code illustrates the replacement of the IUploadCollectionItem interface with the UploadCollectionItem type. Users who previously imported IUploadCollectionItem should now import UploadCollectionItem instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Custom SVG Icon Template (BakeryDining.hbs)\nDESCRIPTION: This snippet demonstrates creating a template for a custom SVG icon, used when you need multiple SVG elements like `circle` and `rect` instead of a custom path. The `.hbs` file generates a template that is imported and registered.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<g>\n    <rect fill=\"none\" height=\"24\" width=\"24\" y=\"0\" />\n</g>\n<g>\n    <g>\n        <path\n            d=\"M7.6,8.67l-2.01,0.8c-0.22,0.09-0.34,0.31-0.31,0.54l2.4,5.98h1.23l-0.62-6.9C8.25,8.75,7.91,8.54,7.6,8.67 z\"\n            opacity=\".3\" />\n        <path d=\"M3.07,16.1c-0.27,0.53,0.29,1.09,0.82,0.83l1.68-0.84l-1.08-2.71L3.07,16.1z\" opacity=\".3\" />\n        <path\n            d=\"M13.36,6.99h-2.71c-0.27,0-0.53,0.23-0.5,0.54l0.77,8.45h2.17l0.77-8.45C13.88,7.22,13.63,6.99,13.36,6.99z\"\n            opacity=\".3\" />\n        <path\n            d=\"M18.41,9.47l-2.01-0.8c-0.31-0.12-0.65,0.09-0.68,0.42l-0.62,6.9h1.23l2.4-5.98 C18.75,9.78,18.63,9.56,18.41,9.47z\"\n            opacity=\".3\" />\n        <path d=\"M19.52,13.39l-1.08,2.7l1.68,0.84c0.52,0.26,1.09-0.3,0.82-0.83L19.52,13.39z\" opacity=\".3\" />\n        <path\n            d=\"M20.5,10.94c0.13-0.32,0.1-0.23,0.15-0.39c0.3-1.21-0.34-2.47-1.5-2.93l-2.01-0.8c-0.46-0.18-0.95-0.21-1.41-0.12 c-0.11-0.33-0.29-0.63-0.52-0.89C14.73,5.29,14.06,5,13.36,5h-2.71C9.94,5,9.27,5.29,8.8,5.81C8.56,6.07,8.38,6.37,8.27,6.69 C7.81,6.6,7.32,6.63,6.86,6.81l-2.01,0.8c-1.16,0.46-1.8,1.72-1.5,2.93l0.15,0.38C1.1,15.55,1,15.55,1,16.38 c0,0.91,0.46,1.74,1.24,2.22c1.42,0.88,2.49,0.14,4-0.61h11.53c1.52,0.76,1.86,1.01,2.63,1.01c1,0,2.61-0.77,2.61-2.61 C23,15.54,22.88,15.51,20.5,10.94z M3.88,16.93c-0.53,0.26-1.09-0.3-0.82-0.83l1.41-2.72l1.08,2.71L3.88,16.93z M7.68,15.99 l-2.4-5.98C5.25,9.78,5.37,9.56,5.59,9.47l2.01-0.8c0.31-0.12,0.65,0.08,0.68,0.42l0.62,6.9H7.68z M13.09,15.99h-2.17l-0.77-8.45 c-0.03-0.31,0.23-0.54,0.5-0.54h2.71c0.27,0,0.53,0.23,0.5,0.54L13.09,15.99z M16.32,15.99h-1.23l0.62-6.9 c0.03-0.33,0.37-0.54,0.68-0.42l2.01,0.8c0.22,0.09,0.34,0.31,0.31,0.54L16.32,15.99z M20.12,16.93l-1.68-0.84l1.08-2.7l1.41,2.71 C21.21,16.63,20.64,17.19,20.12,16.93z\" />\n    </g>\n</g>\n```\n\n----------------------------------------\n\nTITLE: JSX with JavaScript Expressions\nDESCRIPTION: Illustrates how to embed JavaScript expressions within JSX using curly braces `{}`. This allows dynamic values and variables to be inserted into the template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nconst myClass = \"header\"\nconst name = \"World\";\n\n<div class={myClass}>Hello {name}</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring UI5 Web Components Editor\nDESCRIPTION: This snippet configures a UI5 Web Components `<Editor>` component by passing the imported HTML, JavaScript, and CSS strings as properties. The `html`, `js`, and `css` properties are used to define the editor's content, functionality, and appearance.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/EmptySpan/EmptySpan.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: SegmentedButton selection-mode property (New)\nDESCRIPTION: This TypeScript snippet shows how to set the `selection-mode` property with the new `Multiple` value. Migrate to the new property and values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\n<ui5-segmented-button id=\"segButtonMulti\" selection-mode=\"Multiple\">\n  <ui5-segmented-button-item>Item</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Item</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Click</ui5-segmented-button-item>\n  <ui5-segmented-button-item>SegmentedButtonItem</ui5-segmented-button-item>\n</ui5-segmented-button>\n```\n\n----------------------------------------\n\nTITLE: Checking Out Main Branch\nDESCRIPTION: This command switches the current working branch to the local `main` branch.  This allows developers to work on the most recent code and merge in changes from the upstream repository. It's a necessary step before merging the upstream changes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout main\n```\n\n----------------------------------------\n\nTITLE: Setting interactive property - HTML\nDESCRIPTION: This snippet shows how to set the `interactive` property on a `ui5-avatar` element. This will add `tabindex=\"0\"` and `role=\"button\"` attributes to the element, making it focusable and announcing it as a button to screen readers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<ui5-avatar interactive></ui5-avatar>\n```\n\n----------------------------------------\n\nTITLE: Slot definition with invalidateOnChildChange\nDESCRIPTION: This TypeScript code demonstrates how to define a slot with the `invalidateOnChildChange` option enabled. Only changes to children in the \"content\" slot will trigger invalidation for this component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n@slot({ type: HTMLElement, \"default\": true, invalidateOnChildChange: true })\ncontent!: Array<HTMLElement>;\n@slot()\nheader!: Array<HTMLElement>;\n@slot()\nfooter!: Array<HTMLElement>;\n```\n\n----------------------------------------\n\nTITLE: Editor Component Instantiation\nDESCRIPTION: This snippet instantiates an editor component, passing the imported HTML and JavaScript as props (`html` and `js`). This suggests that the Editor component accepts HTML and JavaScript strings to initialize its content or behavior.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Popover/Placement/Placement.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: ICardHeader Interface Replacement (TypeScript)\nDESCRIPTION: This snippet demonstrates how to migrate from the removed `ICardHeader` interface to the `CardHeader` type. Replace the import statement and type usage accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Using declarative API for popover (ui5-carousel)\nDESCRIPTION: This snippet demonstrates the recommended declarative API using the `opener` property for opening a color palette popover in UI5 Web Components, replacing the previous imperative approach.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript as Raw Strings\nDESCRIPTION: This snippet demonstrates how to import HTML and JavaScript files as raw strings using `raw-loader`. This is commonly used in webpack environments to include file contents directly into JavaScript bundles. The imported strings `html` and `js` will contain the raw content of the respective files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toast/Duration/Duration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: HTML Raw Loader: Importing Table HTML\nDESCRIPTION: This snippet imports the HTML structure of the table component using raw-loader. This allows the HTML to be used as a string within the JavaScript code. The imported HTML likely defines the basic structure and attributes of the table.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/ScrollToLoad/ScrollToLoad.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Initializing UI5 Web Components Package with Yarn\nDESCRIPTION: This command initializes a new UI5 Web Components package using yarn. Similar to npm, it allows passing options to customize the package creation, such as the package name, component name, tag name, and test setup.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n    yarn create @ui5/webcomponents-package [OPTIONS]\nOptions:\n    --name <string>                      - defines the package name\n    --component-name <string>            - defines the component class name that will be created in your new package\n    --tag <string>                       - defines the tag name of the sample web component that will be created in your new package\n    --test-setup <\"cypress\" | \"manual\">  - defines whether the predefined test setup should be added or it will be configured manually.\n    --skip                               - skips configuration and generates package with a default value for each parameter that wasn't passed\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript as raw string - SAP UI5 Webcomponents\nDESCRIPTION: This code snippet imports the JavaScript code from 'main.js' as a raw string using 'raw-loader'. The '!!' prefix disables all pre-configured loaders and only uses the specified loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/States/States.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Add custom CSS via style tag\nDESCRIPTION: This HTML snippet shows how to include the content of the generated CSS file directly within a `<style>` tag.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<style>\n         /* Here goes the content of mytheme.css */\n</style>\n```\n\n----------------------------------------\n\nTITLE: Importing AI Assets Module - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the assets module for AI web components in JavaScript. This includes theming parameters and translations required for the AI components.  Importing this module ensures proper styling and internationalization of the AI components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-ai/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Editor\nDESCRIPTION: This snippet configures the web components editor using the imported HTML, CSS, and JavaScript content. The `html`, `js`, and `css` variables are passed as props to the `<Editor>` component. The Editor component likely utilizes these to render and provide editing capabilities.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIGuidedPrompt/DynamicSideContent/DynamicSideContent.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Replacing CoPilot with a Toggle Button in `ui5-shellbar` (HTML/JavaScript)\nDESCRIPTION: Demonstrates replacing the removed CoPilot feature with a toggle button within the `ui5-shellbar`. This involves adding a `ui5-toggle-button` element with the `assistant` slot. A click event listener on the toggle button changes the icon based on its pressed state.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-shellbar>\n  <ui5-toggle-button id=\"assistant\" icon=\"sap-icon://da\" slot=\"assistant\"></ui5-toggle-button>\n</ui5-shellbar>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nassistant.addEventListener(\"click\", function (event) {\n\tconst toggleButton = event.target;\n\ttoggleButton.icon = toggleButton.pressed ? \"sap-icon://da-2\" : \"sap-icon://da\";\n});\n\n```\n\n----------------------------------------\n\nTITLE: Renaming Carousel pageIndicatorStyle Property to pageIndicatorType\nDESCRIPTION: This snippet demonstrates the renaming of the `page-indicator-style` property to `page-indicator-type` in the `ui5-carousel` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Supporting Legacy Date Calendar Customizing\nDESCRIPTION: This commit provides support for customizing legacy date calendars in the ui5-webcomponents framework. It allows for integration with older date formats and calendar systems. The issue addressed by this commit is #6462, and the commit hash is 27df89bc62aaccbfbec5f4d36c520dbd762dab34.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n27df89bc62aaccbfbec5f4d36c520dbd762dab34\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript code\nDESCRIPTION: This snippet imports HTML and JavaScript code from external files using raw-loader. The imported HTML and JavaScript code are then passed to an Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Interactive/Interactive.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Array of Items\nDESCRIPTION: This JavaScript code initializes an array of objects (`items`) on the component instance.  Each object represents an item with properties like `id`, `posinset`, `setsize`, and `text`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.items = [\n\t{\n\t\tid: \"item1\",\n\t\tposinset: 1,\n\t\tsetsize: 5,\n\t\ttext: \"Item 1\"\n\t},\n\t{\n\t\tid: \"item2\",\n\t\tposinset: 2,\n\t\tsetsize: 5,\n\t\ttext: \"Item 2\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Render Code Editor\nDESCRIPTION: This snippet renders a code editor component, passing the imported HTML and JavaScript strings as props. The `Editor` component likely displays and allows editing of the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/Horizontal/Horizontal.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Update ui5-busy-indicator size - HTML\nDESCRIPTION: Shows the change in accepted values for the `size` property of the `ui5-busy-indicator` component. The string value \"Small\" has been replaced with \"S\".\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Using Illustration Name as Default Module Export - JavaScript\nDESCRIPTION: Modifies the illustration module to use the illustration name as the default module export. This simplifies importing and using illustrations by providing a more intuitive default export. Refer to GitHub issue #8074 for further details.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_38\n\n\n\n----------------------------------------\n\nTITLE: Defining a Named Slot with Type Option (ts)\nDESCRIPTION: This snippet demonstrates how to specify the `type` option when defining a named slot with the `@slot` decorator.  The `type` option restricts the type of elements that can be slotted. Here, it's set to `HTMLElement`, so only HTML elements can be slotted into `mySlot`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @slot({ type: HTMLElement })\n    mySlot!: Array<HTMLElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Event Handler Type Inference\nDESCRIPTION: Shows how the type of the event parameter is inferred when writing an event handler inline in JSX. In this case, the type of `e` and its `detail` properties are inferred.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_18\n\nLANGUAGE: TSX\nCODE:\n```\n<ResponsivePopover\n    onBeforeClose={e => e.detail.escPressed}\n//                               ~~~~~~~~~~\n//                    (property) escPressed: boolean\n/>\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JS\nDESCRIPTION: This snippet renders an `Editor` component, passing the imported HTML and JavaScript code as props. This indicates that the Editor component is designed to display and potentially edit HTML and JS code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Using ui5-list as container for notifications HTML\nDESCRIPTION: Shows the old way of defining notifications using `ui5-list`. This structure does not support accessibility correctly, hence the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-list>\n        <ui5-li-notification-group title-text=\"Group Title\" >\n            <ui5-li-notification..\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript as raw string\nDESCRIPTION: This snippet imports the content of the 'main.js' file as a raw string using 'raw-loader'. The raw string is then assigned to the 'js' variable for later use in configuring the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/TimePickerInDifferentTimezone/TimePickerInDifferentTimezone.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Updating Icons in UI5 Business Suite\nDESCRIPTION: This code snippet represents a feature update for the business suite icons. It involves updating icons within the @ui5/webcomponents-icons-business-suite package for the SAP UI5 Web Components project. This update may include adding new icons or modifying existing ones to reflect changes in the business suite.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_26\n\nLANGUAGE: N/A\nCODE:\n```\n/***\n* **icons-business-suite:** update icons ([#6755](https://github.com/SAP/ui5-webcomponents/issues/6755)) ([052ddcd](https://github.com/SAP/ui5-webcomponents/commit/052ddcdd27669d6b6277a977f8c9959b88ecaace))\n**/\n```\n\n----------------------------------------\n\nTITLE: Resulting interactive attributes in shadow DOM - HTML\nDESCRIPTION: This snippet shows the resulting HTML in the shadow DOM after setting the `interactive` property. It includes `tabindex=\"0\"` for focusability and `role=\"button\"` to define the element's role for screen readers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div tabindex=\"0\" role=\"button\" ... ></div>\n```\n\n----------------------------------------\n\nTITLE: Importing List Component\nDESCRIPTION: This code snippet shows how to import the `List` component from the `@ui5/webcomponents` package. The `List` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/List.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files as raw strings\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' files as raw strings using 'raw-loader'. This allows the content of these files to be used directly as input for the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/Design/Design.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Theme via Configuration Script in HTML\nDESCRIPTION: This code snippet demonstrates how to configure the theme using a JSON configuration script within an HTML `<script>` tag. By setting the `theme` property to `mytheme`, the UI5 Web Components will use the theme with that name. This is useful when the theme is already available and accessible.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/12-theming.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n\t\"theme\": \"mytheme\"\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: UI5 Web Components - Screen Reader ARIA Attribute Mapping (HTML)\nDESCRIPTION: Demonstrates how UI5 Web Components automatically map ARIA attributes to HTML elements, such as the ui5-combobox component, to ensure accessibility for screen readers. It shows the basic usage of the combobox element and explains that relevant aria attributes are automatically applied in the shadow DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ui5-combobox>\n    <ui5-cb-item text=\"Item 1\"></ui5-cb-item>\n</ui5-combobox>\n```\n\n----------------------------------------\n\nTITLE: Cypress - Setting Property\nDESCRIPTION: This code snippet demonstrates how to set a property of a UI5 web component using Cypress's `invoke` command with `prop`. It gets the component with the specified selector and sets the specified property to a new value.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Set a property\ncy.get(\"[ui5-button]\")\n  .invoke(\"prop\", \"myProp\", \"newValue\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Component\nDESCRIPTION: This snippet configures the `<Editor>` component by passing the imported HTML, CSS, and JavaScript strings as props.  The `Editor` component is responsible for rendering and providing an interface for editing these code resources.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIRegenerate/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript Sources\nDESCRIPTION: This snippet imports HTML and JavaScript code from separate files (sample.html and main.js) using webpack's `raw-loader`. The imported code is assigned to the variables `html` and `js` respectively, making them available as strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/WithoutInput/WithoutInput.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Partials as extension points (hooks) in Handlebars\nDESCRIPTION: This example shows how to use partials as extension points (hooks) in Handlebars. Empty partials (`beforeContent` and `afterContent`) are defined, allowing other components to implement them and inject content at those points.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_48\n\nLANGUAGE: handlebars\nCODE:\n```\n<section>\n\t<span class=\"first-fe\" data-ui5-focus-trap tabindex=\"0\" @focusin={{forwardToLast}}></span>\n\n\t{{> beforeContent}}\n\n\t<div style=\"{{styles.content}}\" class=\"{{classes.content}}\"  @scroll=\"{{_scroll}}\" part=\"content\">\n\t\t<slot></slot>\n\t</div>\n\n\t{{> afterContent}}\n\n\t<span class=\"last-fe\" data-ui5-focus-trap tabindex=\"0\" @focusin={{forwardToFirst}}></span>\n</section>\n\n\n{{#*inline \"beforeContent\"}}{{/inline}}\n\n{{#*inline \"afterContent\"}}{{/inline}}\n```\n\n----------------------------------------\n\nTITLE: Slot definition with decorator\nDESCRIPTION: This TypeScript code shows the usage of the `@slot` decorator to define slots for a component. The component will become invalidated whenever children are added, removed or swapped in the slots specified.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n@slot({ type: HTMLElement, \"default\": true })\ncontent!: Array<HTMLElement>;\n\n@slot()\nheader!: Array<HTMLElement>;\n\n@slot()\nfooter!: Array<HTMLElement>;\n```\n\n----------------------------------------\n\nTITLE: WDIO Debugging Breakpoint Example\nDESCRIPTION: This code snippet demonstrates how to set a breakpoint in a WDIO test using `browser.debug()`. When the test reaches this line, it will pause execution and open a browser window, allowing you to inspect the state of the application and debug the test.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"tests if web component is correctly rendered\", async () => {\n        const innerContent = await browser.$(\"#myFirstComponent\").shadow$(\"div\");\n        await browser.debug();\n        assert.ok(innerContent, \"content rendered\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Components and Assets (main.js)\nDESCRIPTION: This TypeScript snippet demonstrates how to import specific UI5 Web Components and assets (icons, illustrations) within the `main.js` file of a sample. This is a required step for using the components in the sample.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/04-website.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Button.js\";\nimport \"@ui5/webcomponents-icons/dist/edit.js\";\nimport \"@ui5/webcomponents-icons/dist/account.js\";\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js API Usage (TypeScript)\nDESCRIPTION: This snippet illustrates the removal of the CSP.js module and its related APIs. Developers need to remove any imports and usage of `setUseLinks`, `setPackageCSSRoot`, and `setPreloadLinks` as all browsers now support adoptedStyleSheets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Import HTML content using raw-loader\nDESCRIPTION: This snippet imports the raw content of an HTML file (sample.html) into a JavaScript variable named 'html'. The 'raw-loader' is used to read the HTML file as a string. This is commonly used in webpack or similar bundlers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/compat/Table/SingleSelection/SingleSelection.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Component\nDESCRIPTION: This snippet configures an editor component using the imported HTML and JavaScript strings. The `Editor` component likely accepts these strings as props to display and potentially allow modification of the code.  The specific implementation details of the `Editor` component are not visible here.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toolbar/SpacerAndSeparator/SpacerAndSeparator.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JavaScript\nDESCRIPTION: This snippet renders an Editor component, passing the imported HTML and JavaScript strings as props. This likely allows for the component to display and interact with the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JavaScript, and CSS files as strings (JavaScript)\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files using the 'raw-loader' webpack plugin. The content of each file is read as a raw string, which is then assigned to the 'html', 'js', and 'css' variables respectively. This allows the code to be dynamically injected into a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/FreeStyleForm/FreeStyleForm.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Renaming ui5--illustrated-message size to design\nDESCRIPTION: The `size` property has been renamed to `design`. Existing usages should migrate to the new property name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Replacing Assets-static.js with Assets.js in UI5 Web Components\nDESCRIPTION: This snippet shows the replacement of `Assets-static.js` modules with `Assets.js` modules in UI5 Web Components.  The static asset loading mechanism has been updated to use dynamic equivalents.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Cypress - Reading Attribute\nDESCRIPTION: This code snippet shows how to read an attribute of a UI5 web component using Cypress's `should` command with `have.attr`. It gets the component with the specified selector and asserts that it has the expected attribute value.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Read an attribute\ncy.get(\"[ui5-button]\")\n  .should(\"have.attr\", \"my-attr\", \"expectedValue\");\n```\n\n----------------------------------------\n\nTITLE: WDIO Config - Disable Headless Mode\nDESCRIPTION: This code snippet shows how to disable headless mode for Google Chrome in the WDIO configuration file. This is useful for debugging purposes, allowing you to see the browser window and interact with the tests visually. The original headless configuration is modified to allow debugging.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = require(\"@ui5/webcomponents-tools/components-package/wdio.js\");\nresult.config.capabilities[0][\"goog:chromeOptions\"].args = ['--disable-gpu']; // From: ['--disable-gpu', '--headless']\nmodule.exports = result;\n```\n\n----------------------------------------\n\nTITLE: Using assistant slot in ui5-shellbar HTML\nDESCRIPTION: Illustrates how to achieve similar functionality as the removed copilot with the new assistant slot.  This shows how to replace the old functionality.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-shellbar>\n  <ui5-toggle-button id=\"assistant\" icon=\"sap-icon://da\" slot=\"assistant\"></ui5-toggle-button>\n</ui5-shellbar>\n```\n\n----------------------------------------\n\nTITLE: Using Business Suite Icon with ui5-icon - HTML\nDESCRIPTION: This code snippet demonstrates how to use a business suite icon with the `ui5-icon` web component. The `name` attribute specifies the icon to display, prefixed with the `business-suite/` collection name. This example will render the `1x2-grid-layout` icon, with the specific version (v1 or v2) depending on the current theme. Requires the `@ui5/webcomponents` and `@ui5/webcomponents-icons-business-suite` packages to be installed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"business-suite/1x2-grid-layout\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Styling\nDESCRIPTION: This snippet imports CSS styling as a string using raw-loader. This CSS code defines the visual appearance of the UI5 Web Component, including colors, fonts, layout, and other styling properties. The raw-loader imports the CSS file's content as a string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UploadCollection/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Component Template Function\nDESCRIPTION: Demonstrates how to write a component template as a default exported function.  The function receives the component instance as `this`, enabling type checking and code completion within the template. It imports the Panel type from a local file and renders the headerText property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// PanelTemplate.tsx\nimport type Panel from \"./Panel.js\";\n\nexport default function (this: Panel) {\n    return <div>{this.headerText}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming status property to additionalText\nDESCRIPTION: This code illustrates the renaming of the `status` property and its corresponding shadow part to `additionalText` for the `ui5-card-header` component.  CSS styling for the shadow part also changes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: This snippet imports the content of 'sample.html' as a raw string using 'raw-loader'. The imported HTML is assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/PageIndicatorType/PageIndicatorType.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Using Precalculated Value\nDESCRIPTION: This example shows how to use the pre-calculated `fullName` property (from the JavaScript file) in the Handlebars template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_16\n\nLANGUAGE: handlebars\nCODE:\n```\n<p>{{fullName}}</p>\n```\n\n----------------------------------------\n\nTITLE: Defining a Property with no Attribute (TS)\nDESCRIPTION: This snippet demonstrates how to define a property that does *not* have a corresponding attribute using the `noAttribute: true` configuration option.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n@property()\nheaderText = \"\"\n```\n\n----------------------------------------\n\nTITLE: Adding DOM Shim for SSR in JavaScript\nDESCRIPTION: This JavaScript code snippet introduces a DOM shim to enable importing UI5 web components in Server-Side Rendering (SSR) environments. This allows the components to be rendered correctly on the server, improving performance and SEO. This requires the dom shim so the components can work in SSR.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd dom shim so importing components in SSR works ([#8184](https://github.com/SAP/ui5-webcomponents/issues/8184)) ([ca49674](https://github.com/SAP/ui5-webcomponents/commit/ca49674e046bd74842100245db2cea61d53e2df0))\n```\n\n----------------------------------------\n\nTITLE: Renaming Card Header status to additionalText\nDESCRIPTION: This snippet shows the renaming of the `status` property and shadow part of the `ui5-card-header` component to `additionalText`.  This includes updating both the HTML and CSS to reflect the change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Event Target Typing with UI5CustomEvent - TS\nDESCRIPTION: This code shows how to use `UI5CustomEvent` to correctly type the event target in an event handler function. This ensures type safety and allows TypeScript to check that the handler is attached to the correct element. It requires the `UI5CustomEvent` type helper.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nhandleInput(e: CustomEvent) {\n    console.log(e.target as Input);\n    //          ^^^^^^^^^^^^^^^^^\n    //          this is of type Input, but TypeScript will not check in case the handler is attached to a Slider\n}\n\n// After\nhandleInput(e: UI5CustomEvent<Input, \"input\">) {\n    console.log(e.currentTarget);\n    //          ^^^^^^^^^^^^^^^\n    //          this is of type Input and checked\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Tag Name Suffix in UI5 Web Components\nDESCRIPTION: This snippet shows how to import and use the `setCustomElementsScopingSuffix` function from `@ui5/webcomponents-base` to add a suffix to the tag names of all UI5 Web Components. This is useful for scoping components and preventing naming conflicts when using multiple UI5 Web Components libraries. This affects all component registrations after the suffix is set.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setCustomElementsScopingSuffix } from \"@ui5/webcomponents-base/dist/CustomElementsScope.js\"\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Web Components for Angular\nDESCRIPTION: Installs the `@ui5/webcomponents-ngx` package, which provides Angular wrappers for UI5 Web Components.  This library simplifies the integration of UI5 Web Components into Angular applications, offering features like two-way data binding.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @ui5/webcomponents-ngx\n```\n\n----------------------------------------\n\nTITLE: Initialize Editor Component - SAP UI5 Webcomponents\nDESCRIPTION: This snippet initializes the Editor component and passes the imported HTML and JavaScript strings as props. The HTML and JavaScript code are used to configure the editor's content and behavior.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/States/States.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: ui5-illustrated-message title slot (New)\nDESCRIPTION: This HTML snippet shows how to set the `title` via the `slot` API. The `title-level` property has been removed.  Migrate to using the `title` slot to set the title of the illustrated message.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message>\n      <ui5-title slot=\"title\" level=\"H3\">This is a slotted title</ui5-title>\n</ui5-illustrated-message>\n```\n\n----------------------------------------\n\nTITLE: Using TNT Icon v2 with UI5 Web Component ui5-icon\nDESCRIPTION: This code snippet demonstrates how to explicitly specify the TNT Icons v2 version of an icon for use with the `ui5-icon` web component. This ensures that the v2 version is always displayed, regardless of the current theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"tnt-v2/actor\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Adding New Icons to SAP-icons JavaScript\nDESCRIPTION: This snippet adds new icons from SAP-icons versions 4.16 and 5.04. It addresses issue #6442 in the ui5-webcomponents project, enriching the icon set available in the @ui5/webcomponents-icons package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n**icons:** add new icons to SAP-icons (4.16 and 5.04) ([#6442](https://github.com/SAP/ui5-webcomponents/issues/6442)) ([2e1d29f](https://github.com/SAP/ui5-webcomponents/commit/2e1d29f6250f66c209ca81eb7510abbf66872e65))\n```\n\n----------------------------------------\n\nTITLE: Importing HTML as Raw String\nDESCRIPTION: This snippet imports an HTML file as a raw string using a raw-loader. This allows the HTML content to be used directly within the JavaScript code, such as for populating an editor component or for dynamic content generation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SegmentedButton/SelectionModes/SelectionModes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import Raw Files for Editor\nDESCRIPTION: Imports HTML, JavaScript, and CSS files as raw strings using raw-loader. These raw strings are then used to configure an Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/NavigationLayout/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Tag Component\nDESCRIPTION: This code snippet shows how to import the `Tag` component from the `@ui5/webcomponents` package. The `Tag` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Tag.js\";\n```\n\n----------------------------------------\n\nTITLE: ui5-list using ui5-li-groupheader (Old)\nDESCRIPTION: This HTML snippet shows how to use the `ui5-li-groupheader` component. The `ui5-li-groupheader` component is removed and needs to be replaced by `ui5-li-group`. Migrate to the new component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n  <ui5-li-groupheader>Actions</ui5-li-groupheader>\n  <ui5-li>Delete Product</ui5-li>\n  <ui5-li>Audit Log Settings</ui5-li>\n  <ui5-li-groupheader>Products</ui5-li-groupheader>\n  <ui5-li>Product 1</ui5-li>\n</ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor Component with HTML and JS\nDESCRIPTION: This snippet initializes the 'Editor' component, passing the imported HTML and JavaScript strings as props. The component presumably uses these strings to display and/or execute the code within the editor. The expected behavior is for the editor to render the HTML and allow interaction with the Javascript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/Design/Design.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Event Type Checking - JavaScript\nDESCRIPTION: This commit introduces strict event type checking within the framework.  This helps to prevent errors related to incorrect event handling. By enforcing strict type checks, the framework ensures that events are handled correctly and reduces the risk of runtime errors.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **framework:** add strict event type checking ([#10235](https://github.com/SAP/ui5-webcomponents/issues/10235)) ([4ff8ab7](https://github.com/SAP/ui5-webcomponents/commit/4ff8ab7c34db5058b92511767be1b96c69a91cb5))\n```\n\n----------------------------------------\n\nTITLE: Toggling Popover with open property (ui5-carousel)\nDESCRIPTION: This snippet showcases how to toggle the visibility of a `ui5-color-palette-popover` using the `open` property within an event listener. This approach replaces the older `showAt` method with a more direct property manipulation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring the Editor component\nDESCRIPTION: This snippet configures an Editor component, passing the imported HTML, JavaScript, and CSS strings as properties.  The Editor component is responsible for rendering these code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/UnselectableParentItems/UnselectableParentItems.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Replacing IUploadCollectionItem Interface with UploadCollectionItem Type\nDESCRIPTION: This snippet illustrates the replacement of the `IUploadCollectionItem` interface with the `UploadCollectionItem` type in UI5 Web Components. Developers should update their imports to use the type alias instead of the interface.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: UI5 Web Component Usage with Suffix (HTML)\nDESCRIPTION: This snippet shows an example of a UI5 Web Component (`ui5-button`) used with a suffix (`-demo`). It demonstrates how a component might be used if scoping is enabled. The framework still creates an empty attribute without the suffix.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button-demo id=\"b1\" class=\"button1\" design=\"Emphasized\" ui5-button></ui5-button-demo>\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Event Type Checking - Framework\nDESCRIPTION: This feature adds strict event type checking to the UI5 Web Components framework. This enforces type safety when working with events, helping to prevent errors and improve code quality.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * **framework:** add strict event type checking ([#10235](https://github.com/SAP/ui5-webcomponents/issues/10235)) ([4ff8ab7](https://github.com/SAP/ui5-webcomponents/commit/4ff8ab7c34db5058b92511767be1b96c69a91cb5))\n */\n```\n\n----------------------------------------\n\nTITLE: Replacing ui5-badge with ui5-tag (HTML)\nDESCRIPTION: The ui5-badge component has been renamed to ui5-tag.  This snippet demonstrates how to replace the old tag with the new one in HTML.  This change impacts the structure of the HTML, and any associated styling should be updated as well.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-badge></ui5-badge>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tag></ui5-tag>\n```\n\n----------------------------------------\n\nTITLE: Chore: Bringing release-2.0 to main\nDESCRIPTION: This commit merges the release-2.0 branch into the main branch. This action integrates various changes, features, and fixes accumulated in the release-2.0 branch into the main development line.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Styling CardHeader Status with CSS Shadow Parts\nDESCRIPTION: This CSS snippet styles the 'status' shadow part of the ui5-card-header component.  It sets the color of the status to red using the ::part() selector.  This requires the ui5-card-header to expose the status as a shadow part.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/11-styles.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nui5-card-header::part(status) {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Business Suite Icon v2 with ui5-icon - HTML\nDESCRIPTION: This code snippet demonstrates how to explicitly use the v2 version of a business suite icon with the `ui5-icon` web component. The `name` attribute specifies the icon to display, prefixed with the `business-suite-v2/` collection name. This will render the `answered` icon from the `SAP Icons Business suite V2` collection regardless of the current theme. Requires the `@ui5/webcomponents` and `@ui5/webcomponents-icons-business-suite` packages to be installed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"business-suite-v2/answered\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Configure Editor with HTML and JavaScript\nDESCRIPTION: This snippet instantiates an editor component and passes the imported HTML and JavaScript strings as props, effectively configuring the editor with the provided code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Dialog/WithState/WithState.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML with raw-loader\nDESCRIPTION: This snippet imports the HTML content from the 'sample.html' file using raw-loader. Raw-loader is a webpack loader that allows importing files as raw strings. The imported HTML is assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/StickyHeaderContainer/StickyHeaderContainer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Global Context Properties\nDESCRIPTION: Defines properties (`name` and `items`) on the component instance to simulate the global context. The `items` property is an array of objects, and `name` is a string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthis.name = \"John Smith\";\nthis.items = [\n\t{\n\t\tid: \"item1\"\n\t},\n\t{\n\t\tid: \"item2\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring the Editor Component with HTML and JavaScript\nDESCRIPTION: This snippet configures the Editor component by passing the imported HTML and JavaScript strings as props. The `html` prop is assigned the content of `sample.html`, and the `js` prop is assigned the content of `main.js`. This allows the Editor component to display and potentially execute the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/BusyIndicator/Sizes/Sizes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Placement Properties - JavaScript\nDESCRIPTION: This snippet shows the renaming of the `placementType` property and the `PopoverPlacementType` enum to `placement` and `PopoverPlacement` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Setting Icon mode to Image - HTML\nDESCRIPTION: This snippet shows how to set the `mode` property to \"Image\" on a `ui5-icon` element. This indicates that the icon represents an image and should be treated as such by screen readers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon mode=\"Image\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Replacing ICardHeader interface with CardHeader type\nDESCRIPTION: This snippet shows how to replace the `ICardHeader` interface with the `CardHeader` type in UI5 Web Components. It highlights the change in import path and type name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: ui5-list using ui5-li-group with header slot (New)\nDESCRIPTION: This HTML snippet shows how to use the `ui5-li-group` with a named `header` slot instead of the `ui5-li-groupheader`. Migrate to this way of defining group headers in lists.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n  <ui5-li-group>\n    <div slot=\"header\" style=\"width: '100%'; display: flex; justify-content:space-between; align-items:center;\">\n        <span>Back End Developers</span>\n        <ui5-icon name=\"navigation-right-arrow\"></ui5-icon>\n    </div>\n    <ui5-li>Delete Product</ui5-li>\n    <ui5-li>Audit Log Settings</ui5-li>\n  </ui5-li-group>\n</ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Components Feature\nDESCRIPTION: This code demonstrates how to import an additional feature for a UI5 Web Component. You need to specify the package name, 'dist/features' directory, and the feature's filename with the '.js' extension. This allows you to add functionalities that are not included by default in the component's core code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/<PACKAGE-NAME>/dist/features/<FEATURE-NAME>.js`\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JS with Raw Loader\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the `raw-loader` webpack loader. The imported strings are then passed as props (`html` and `js`) to a component named `Editor`.  This is likely used for displaying and editing code within the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateRangePicker/MinMax/MinMax.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JavaScript, CSS with raw-loader (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the contents of HTML, JavaScript, and CSS files as strings using the raw-loader webpack loader. The imported strings are assigned to the `html`, `js`, and `css` variables respectively. This is typically done in a JavaScript or TypeScript environment where these assets need to be embedded directly into a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/AccessibleName/AccessibleName.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript snippet\nDESCRIPTION: This snippet imports the JavaScript code from the 'main.js' file using raw-loader. Similar to the HTML import, the raw-loader allows the JavaScript file content to be imported as a string into the JavaScript module. The imported JavaScript code is then assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/TextAndIcon/TextAndIcon.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript as Raw String - JavaScript\nDESCRIPTION: This snippet imports a JavaScript file as a raw string using `raw-loader`. This allows the JavaScript content to be used directly as a string within the JavaScript code, which is likely intended for rendering in the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files using raw-loader\nDESCRIPTION: This code snippet demonstrates how to import HTML and JavaScript files as raw strings using the raw-loader webpack plugin. The imported strings are assigned to the `html` and `js` variables respectively. This is commonly used for embedding static content within JavaScript modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Slider/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Component\nDESCRIPTION: This code snippet shows how to import the `Popover` component from the `@ui5/webcomponents` package. The `Popover` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Popover.js\";\n```\n\n----------------------------------------\n\nTITLE: Supporting Accessible Description - JavaScript\nDESCRIPTION: This commit adds support for accessible descriptions to the ui5-list and ui5-tree components.  This allows developers to provide additional information about list and tree items for screen readers.  This enhances the accessibility of these components for users with disabilities.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **ui5-list, ui5-tree:** support accessible description ([#10131](https://github.com/SAP/ui5-webcomponents/issues/10131)) ([45f0ffe](https://github.com/SAP/ui5-webcomponents/commit/45f0ffeafb2da0ffcaf425649c7440b604e359a3)), closes [#6445](https://github.com/SAP/ui5-webcomponents/issues/6445)\n```\n\n----------------------------------------\n\nTITLE: Render UI5 Editor Component\nDESCRIPTION: Renders an editor component named `<Editor>`. It passes the imported HTML and JavaScript strings as props named `html` and `js` respectively.  The component will likely display the HTML and JavaScript and allow for their editing.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Set1/Set1.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Update ui5-tab slot - HTML\nDESCRIPTION: Demonstrates how to change the `slot` property of the `ui5-tab` component from `subTabs` to `items`. This ensures that nested tabs are correctly rendered.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Import CSS content\nDESCRIPTION: Imports the CSS content from the `main.css` file using `raw-loader`. This allows the CSS to be used as a string within the JavaScript code. The `!!raw-loader!` syntax forces the use of `raw-loader`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/AI CustomPrompt/Level 3/Level 3.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Link Wrapping Behavior (Before)\nDESCRIPTION: Demonstrates the previous default behavior of the ui5-link component where text would be truncated if there was not enough space. The wrapping-type property was set to None by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-link>some very very very long link</ui5-link> <!-- would truncate the text if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript content as string\nDESCRIPTION: This snippet imports the content of 'main.js' file as a raw string using 'raw-loader'.  This allows the JavaScript to be used as a value within the JavaScript code, likely to be used in the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Configure Editor with HTML and JS\nDESCRIPTION: This snippet configures an editor component, likely a custom component, by passing the imported HTML and JavaScript raw strings as properties. The 'html' property contains the HTML markup, and the 'js' property contains the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/CalendarWithLegend/CalendarWithLegend.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Using the Editor Component\nDESCRIPTION: This snippet displays how to use the <Editor> component with the imported HTML and JavaScript as props. The html and js variables, which contain the string content of the respective files, are passed as props to the Editor component. This assumes that an Editor component is available in the current scope.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiComboBox/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Configuring UI5 Components in Cypress\nDESCRIPTION: This example shows how to customize the configuration of a UI5 Web Component during Cypress testing using the `ui5Configuration` option in the `mount` function. It sets the theme and then resets the configuration after the test.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\nimport { resetConfiguration } from \"@ui5/webcomponents-base/dist/InitialConfiguration.js\";\n\ndescribe(\"Configuration Example\", () => {\n  const config = {\n    theme: \"sap_horizon_hcb\",\n  };\n\n  before(() => {\n    cy.mount(<MyComponent></MyComponent>, {\n      ui5Configuration: config,\n    });\n\n    cy.wrap({ resetConfiguration })\n      .invoke(\"resetConfiguration\", true);\n\n  });\n\n  it(\"should apply the new theme\", () => {\n    cy.wrap({ getTheme })\n      .invoke(\"getTheme\")\n      .should(\"be.equal\", config.theme)\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: CardHeader Status to AdditionalText - HTML\nDESCRIPTION: This snippet shows how to migrate from the deprecated 'status' property and its associated shadow part to the new 'additionalText' property for the ui5-card-header component. It includes CSS styling adjustments for the new shadow part 'additional-text'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_40\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to after-open and after-close events TypeScript\nDESCRIPTION: Illustrates the usage of the `after-open` and `after-close` events. This showcases how the events were utilized before the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\npopup.addEventListener(\"after-open\", function() {\n\t//...\n});\npopup.addEventListener(\"after-close\", function() {\n\t//...\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Component Properties Definition\nDESCRIPTION: This snippet shows how to define properties (`age`, `fullName`) on the web component instance in the JavaScript file. These properties can then be accessed directly within the Handlebars template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.age = 30;\nthis.fullName = `${this.name} ${this.lastName}`;\n```\n\n----------------------------------------\n\nTITLE: Adding design types to ui5-badge component in UI5 Web Components\nDESCRIPTION: This feature adds the ability to use different design types for the ui5-badge component within the ui5-webcomponents library. It is part of version 1.22.0-rc.0.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_31\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n*   **ui5-badge:** add different design types ([#7564](https://github.com/SAP/ui5-webcomponents/issues/7564)) ([e5895f7](https://github.com/SAP/ui5-webcomponents/commit/e5895f7d5076406769b516967137ba58f3567935))\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: Renders the Editor component, passing the imported HTML and JavaScript code as props.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML, JS, CSS with Raw Loader\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as strings using the raw-loader webpack plugin. The imported strings are then passed as props to a React component named `Editor`. This approach allows embedding code examples within a UI5 web components application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Dialog/BarInDialog/BarInDialog.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Fixing Usage of Require in MJS Files - JavaScript\nDESCRIPTION: Addresses an issue related to the usage of the require function in .mjs files within the tools package. This likely involves correcting the module import/export syntax to align with ES module standards for .mjs files. Fixes issue #8258.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Replacing placement-type with placement (ui5-carousel)\nDESCRIPTION: The `placement-type` property in `ui5-popover` has been renamed to `placement`. This snippet shows the deprecated property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_50\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Using HTML and JavaScript strings in an Editor component\nDESCRIPTION: This code snippet utilizes an `Editor` component, passing the imported HTML and JavaScript strings as props. The `Editor` component is likely responsible for rendering these code snippets and providing an interface to modify and execute them.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toast/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming placementType property and PopoverPlacementType Enum\nDESCRIPTION: How to replace `placementType` with `placement` and `PopoverPlacementType`\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Replacing separator-style with separators (ui5-carousel)\nDESCRIPTION: The `separator-style` property in `ui5-breadcrumbs` has been renamed to `separators`. This snippet shows the deprecated property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_56\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component\nDESCRIPTION: This code snippet shows how to import the `Card` component from the `@ui5/webcomponents` package. The `Card` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Card.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Alignment Options - HTML\nDESCRIPTION: This code snippet shows renaming `Left` and `Right` options to `Start` and `End` for `horizontal-align` and `placement-type` properties in `ui5-popover`. The older values need to be replaced with the new values to correctly position the popover.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Initializing UI5 Web Components Project with npm\nDESCRIPTION: This command initializes a new UI5 Web Components project using npm.  It creates a new directory and sets up the project as an NPM package, using the `@ui5/webcomponents-package` initializer. The command can be used with or without a specified package name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init @ui5/webcomponents-package\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init @ui5/webcomponents-package <NEW-PACKAGE-NAME>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as raw strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the `raw-loader`. This is commonly used to embed code directly into components or modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithGrowing/WithGrowing.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor component with HTML and JS\nDESCRIPTION: This snippet renders an Editor component and passes the previously imported HTML and JavaScript code as props. The 'html' prop receives the HTML code, and the 'js' prop receives the JavaScript code. This integration allows the editor to display and potentially modify the provided code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TextArea/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Setting Theme based on Contrast and Color Scheme (Initial)\nDESCRIPTION: This code snippet demonstrates how to set the UI5 theme based on the user's OS preferences for color scheme (dark/light) and contrast. It uses `window.matchMedia` to detect the user's preferences and sets the appropriate theme using `setTheme` function from `@ui5/webcomponents-base`.  It checks for both \"more\" and \"custom\" contrast settings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\n\nconst darkColorScheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\nconst prefersContrastMore = window.matchMedia(\"(prefers-contrast: more)\").matches;\nconst prefersContrastCustom = window.matchMedia(\"(prefers-contrast: custom)\").matches;\nconst prefersContrast = prefersContrastMore || prefersContrastCustom;\n\nif (prefersContrast) {\n\tsetTheme(darkColorScheme ? \"sap_horizon_hcb\" : \"sap_horizon_hcw\");\n}\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content\nDESCRIPTION: This snippet imports JavaScript content from a file named 'main.js' using a raw-loader. The imported content is assigned to the 'js' variable. This allows the JavaScript code to be used, probably as a string to initialize the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ColorPicker/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring UI5 Webcomponents Editor with HTML and JS\nDESCRIPTION: This snippet configures a UI5 Webcomponents `<Editor>` component. It passes the previously imported `html` and `js` variables as properties. The Editor component will use these properties to display or execute the provided HTML and JavaScript code within its environment.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Panel/StickyHeader/StickyHeader.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Configure Cypress with UI5 Web Components (TypeScript)\nDESCRIPTION: Configures Cypress to use @ui5/cypress-ct-ui5-webc as the framework and Vite as the bundler for component testing. This configuration is added to the cypress.config.ts file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/cypress-ct-ui5-webc/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: '@ui5/cypress-ct-ui5-webc',\n      bundler: 'vite',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing build process using esbuild in UI5 Web Components\nDESCRIPTION: This feature optimizes the build process by switching CSS processing to esbuild within the ui5-webcomponents tools. This enhancement is included in version 1.21.0-rc.3.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_33\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n*   **tools:** Optimize build by switching css processing to esbuild ([#8008](https://github.com/SAP/ui5-webcomponents/issues/8008)) ([b4d411f](https://github.com/SAP/ui5-webcomponents/commit/b4d411f00f8d74ccecb2d02254126243faf53dfd))\n```\n\n----------------------------------------\n\nTITLE: Initialize Web Component Editor\nDESCRIPTION: This snippet initializes the web component editor using the <Editor> component. The 'html' and 'js' variables, which contain the content of the respective files, are passed as properties to the component. The component will then display and allow editing of the HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Set2/Set2.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, CSS, and JS as strings\nDESCRIPTION: This snippet imports HTML, CSS, and JavaScript files as raw strings using `raw-loader`. These strings are then passed as props to a component called `Editor`. This allows the editor to display and manipulate the code content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIRegenerate/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport css from '!!raw-loader!./main.css';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Named Slot - HTML\nDESCRIPTION: This snippet shows how to render a named slot in an HTML template.  Children passed to the web component with a matching `slot` attribute will be rendered at this location in the shadow DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_52\n\nLANGUAGE: HTML\nCODE:\n```\n<slot name=\"tabs\"></slot>\n```\n\n----------------------------------------\n\nTITLE: Boolean attribute assignment with question mark prefix in Handlebars\nDESCRIPTION: This snippet demonstrates boolean attribute assignment in Handlebars using the `?` prefix.  If the bound value is falsy (e.g., `false`), the attribute is not added to the DOM at all. This is crucial for boolean HTML attributes like `checked`, `readonly`, and `disabled`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_36\n\nLANGUAGE: handlebars\nCODE:\n```\n<input\n\tid=\"{{_id}}-CB\"\n\ttype='checkbox'\n\t?checked=\"{{checked}}\"\n\t?readonly=\"{{readonly}}\"\n\t?disabled=\"{{disabled}}\"\n\ttabindex=\"-1\"\n\taria-hidden=\"true\"\n\tdata-sap-no-tab-ref\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing Source Maps: Inline sources in UI5 Web Components\nDESCRIPTION: This commit addresses an issue where the source maps did not inline sources, making the src folder mandatory. The fix inlines the sources into the .map file, removing the need for the src folder to be present.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n([16771a6](https://github.com/SAP/ui5-webcomponents/commit/16771a64d7b13f418af9afa1a03b224fe3762775))\n```\n\n----------------------------------------\n\nTITLE: ui5-bar Component Import Update - TypeScript\nDESCRIPTION: This snippet illustrates moving the import path for `ui5-bar` component from `fiori` to `main` library.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Updating UI5 Link Visual Design (Horizon Spec)\nDESCRIPTION: This snippet updates the visual design of the ui5-link component to align with the latest Horizon specification. It includes changes related to issue #6988 and closes issue #6999.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n3cce241\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs Separators Property Usage HTML\nDESCRIPTION: This snippet demonstrates the correct usage of the `separators` property in the `ui5-breadcrumbs` component, replacing the deprecated `separator-style` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_55\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Editor Component Integration\nDESCRIPTION: This snippet renders an Editor component and passes the imported HTML and JavaScript strings as props. The 'html' and 'js' props are used to configure the content displayed within the Editor component. The specific functionality of the Editor component is not defined within this snippet and is assumed to be handled by the component itself.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Panel/Fixed/Fixed.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Theme via URL Parameter\nDESCRIPTION: This shows how to set the theme through the URL. By appending `?sap-ui-theme=mytheme@https://my-example-host.com/` to the URL, the application will use the `mytheme` theme. The CSS variables specific to `mytheme` will be loaded from `https://my-example-host.com/UI5/Base/baseLib/mytheme/css_variables.css`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/12-theming.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nindex.html?sap-ui-theme=mytheme@https://my-example-host.com/\n```\n\n----------------------------------------\n\nTITLE: Defining a Slot in Template - Handlebars\nDESCRIPTION: Demonstrates how to define a slot in a component's template using the `<slot>` element. This allows the component to render children or other components in a specific location within its shadow root.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_26\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{!-- MyDemoComponent.hbs --}}\n<div class=\"my-component-root\">\n\t<slot></slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fixing tsconfig moduleResolution - JavaScript\nDESCRIPTION: This snippet shows the reversion of tsconfig moduleResolution to node. The purpose is to fix potential module resolution issues that might arise from incorrect tsconfig settings, ensuring proper module loading and compilation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n### Bug Fixes\n\n*   **tools:** revert tsconfig moduleResolution to node ([#10014](https://github.com/SAP/ui5-webcomponents/issues/10014)) ([0724b92](https://github.com/SAP/ui5-webcomponents/commit/0724b9289ad04f88972d4978ed37e76f13abca13))\n```\n\n----------------------------------------\n\nTITLE: Declaring webpackChunkName - JavaScript\nDESCRIPTION: This code snippet addresses an issue related to webpackChunkName declarations in dynamically generated imports. The commit c85fa23 aims to improve dynamic import handling. The snippet indicates infrastructure-level changes related to module loading.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n([c85fa23](https://github.com/SAP/ui5-webcomponents/commit/c85fa23bd32574434f537df95c7507a7f1a48b5e))\n```\n\n----------------------------------------\n\nTITLE: Setting Icon mode to Decorative - HTML\nDESCRIPTION: This snippet shows how to set the `mode` property to \"Decorative\" on a `ui5-icon` element. This removes any semantic meaning from the icon, making it purely presentational. It adds `aria-hidden=\"true\"` to prevent screen readers from announcing it.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon mode=\"Decorative\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Using Business Suite Icon v1 with ui5-icon - HTML\nDESCRIPTION: This code snippet demonstrates how to explicitly use the v1 version of a business suite icon with the `ui5-icon` web component.  The `name` attribute specifies the icon to display, prefixed with the `business-suite-v1/` collection name. This will render the `answered` icon from the `SAP Icons Business suite V1` collection regardless of the current theme. Requires the `@ui5/webcomponents` and `@ui5/webcomponents-icons-business-suite` packages to be installed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"business-suite-v1/answered\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component\nDESCRIPTION: This snippet configures an Editor component using the imported HTML, JavaScript, and CSS code. The imported strings are passed as props named `html`, `js`, and `css` to the Editor component, setting its initial state.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/Cyclic/Cyclic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Replacing ICardHeader interface with CardHeader type\nDESCRIPTION: This snippet illustrates the replacement of the `ICardHeader` interface with the `CardHeader` type. Developers need to update their import statements accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Using HTML and JavaScript in Editor Component - JavaScript\nDESCRIPTION: This snippet demonstrates how the imported HTML and JavaScript strings are passed as props to the 'Editor' component. This suggests the 'Editor' component is designed to display and potentially edit HTML and JavaScript code. The 'html' and 'js' variables hold the content of the respective files as strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TabContainer/TransparentDesign/TransparentDesign.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, CSS, and JS files as strings\nDESCRIPTION: This snippet imports HTML, CSS, and JavaScript files as strings using the raw-loader webpack plugin. The imported strings are then passed as props to an Editor component.  The raw-loader plugin is a dependency required for this code to work.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIGuidedPrompt/Popover/Popover.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport css from '!!raw-loader!./main.css';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Fixing Icons Imports in UI5\nDESCRIPTION: This code snippet represents a bug fix addressing incorrect import statements for icons.  The fix replaces template literals with strings for icon imports, resolving potential issues with module resolution or runtime errors related to dynamic imports.  This ensures that icons are imported correctly and are available for use in the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_28\n\nLANGUAGE: N/A\nCODE:\n```\n/***\n* **icons:** use strings instead of template literal for imports ([#6681](https://github.com/SAP/ui5-webcomponents/issues/6681)) ([ac70676](https://github.com/SAP/ui5-webcomponents/commit/ac7067685c72288ddc8d55363f5b589a9d279b0d))\n**/\n```\n\n----------------------------------------\n\nTITLE: Importing Panel Component\nDESCRIPTION: This code snippet shows how to import the `Panel` component from the `@ui5/webcomponents` package. The `Panel` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Panel.js\";\n```\n\n----------------------------------------\n\nTITLE: Resetting the Language to Default (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to reset the language setting to the default language using `getDefaultLanguage` and `setLanguage` functions from the `@ui5/webcomponents-base` library. This effectively reverts the language setting to the browser's default language or the fallback `en` language if the browser language is not supported.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { setLanguage, getDefaultLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\nsetLanguage(getDefaultLanguage());\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor with HTML and JS\nDESCRIPTION: Renders an editor component, passing the imported HTML and JavaScript content as props.  This allows the editor to display and potentially modify the HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/FileSizeLimit/FileSizeLimit.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with Raw Loader\nDESCRIPTION: This snippet imports HTML and JavaScript files as strings using webpack's `raw-loader`. The `!!raw-loader!` syntax forces webpack to use the raw-loader for these specific imports.  The resulting strings `html` and `js` will contain the raw content of the respective files. These strings are then passed as props to the `<Editor>` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Firing Event with Non-Default Configuration (TS)\nDESCRIPTION: This snippet demonstrates how to fire an event with custom `cancelable` and `bubbles` configurations using the `fireEvent` method.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fires the event as preventable and non-bubbling\nthis.fireEvent(\"change\", {}, true, false);\n```\n\n----------------------------------------\n\nTITLE: Firing Event Using fireEvent Method (TS)\nDESCRIPTION: This snippet shows how to fire a custom event using the `fireEvent` method.  It demonstrates how to pass event details, such as a boolean `valid` property, along with the event.  By default, events are bubbling and not cancelable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n@event(\"selection-change\", {\n\tdetail: {\n\t\tvalid: { type: Boolean },\n\t},\n})\nclass MyDemoComponent extends UI5Element {\n\tonItemSelected(e: Event) {\n\t\tthis.fireEvent(\"selection-change\", {\n\t\t\tvalid: true,\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CardHeader Component\nDESCRIPTION: This code snippet shows how to import the `CardHeader` component from the `@ui5/webcomponents` package. The `CardHeader` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/CardHeader.js\";\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JS\nDESCRIPTION: This snippet renders an `<Editor>` component and passes the imported HTML and JavaScript content (`html` and `js`) as props. The `Editor` component is expected to use these props to display or process the HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SplitButton/OpeningMenu/OpeningMenu.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Setting level and header-level - HTML\nDESCRIPTION: This snippet shows how to set the `level` property on a `ui5-title` element and the `header-level` on a `ui5-panel` element, which in turn will set the appropriate heading level in the shadow DOM.  This is important for accessibility as it defines the semantic structure of the content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<ui5-title level=\"H3\">Title</ui5-title>\n...\n<ui5-panel header-text=\"Panel Header\" header-level=\"H3\">\n</ui5-panel>\n```\n\n----------------------------------------\n\nTITLE: Removing TSX Dependencies - JavaScript\nDESCRIPTION: This commit removes unnecessary dependencies related to TSX components and resolves related feature issues.  It optimizes the project by eliminating unused dependencies. This potentially improves build times and reduces the overall package size.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n* remove dependencies for TSX components and fix features ([#10449](https://github.com/SAP/ui5-webcomponents/issues/10449)) ([a2b5f6f](https://github.com/SAP/ui5-webcomponents/commit/a2b5f6fb768499a8b757a9b7abad5f19033a33a7))\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Component Editor\nDESCRIPTION: This snippet configures a web component editor using the imported HTML, JavaScript, and CSS files. The imported strings are assigned to html, js, and css props, populating the editor's content respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/BusyIndicator/WithComponent/WithComponent.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Display code in UI5 Editor\nDESCRIPTION: This snippet uses a UI5 Web Components Editor component to display the imported HTML and JavaScript code. The 'html' and 'js' variables, which contain the code snippets, are passed as properties to the '<Editor>' component. This renders the code snippets within the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/TextAndIcon/TextAndIcon.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Fixing CSS Variables in Compact/RTL Mode - JavaScript\nDESCRIPTION: This snippet addresses a bug in the framework related to missing CSS variables when running in compact mode or right-to-left (RTL) mode. It ensures that all necessary CSS variables are available, resolving layout and styling issues in these specific scenarios. The fix involves updating the CSS variable definitions and ensuring they are correctly applied in compact and RTL modes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **framework:** missing CSS variables in compact mode / rtl mode ([#7189](https://github.com/SAP/ui5-webcomponents/issues/7189)) ([9b39b9c](https://github.com/SAP/ui5-webcomponents/commit/9b39b9ce5c3720dbb106c5638f858754e11a735f))\n```\n\n----------------------------------------\n\nTITLE: HTML output with loop index\nDESCRIPTION: This HTML code shows the output generated by the Handlebars template that accesses the loop index. Each `div` element has a `part` attribute with a unique value based on its index in the array.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"item1\" part=\"item-0\"></div>\n<div id=\"item2\" part=\"item-1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using design property in ui5-illustrated-message (ui5-carousel)\nDESCRIPTION: This snippet demonstrates the correct usage of the `design` property in `ui5-illustrated-message`, replacing the deprecated `size` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_55\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Replacing ui5-li-groupheader with ui5-li-group (ui5-list)\nDESCRIPTION: This snippet illustrates the deprecated usage of the `ui5-li-groupheader` component as a separator in a flat structure within a `ui5-list`.  `ui5-li-groupheader` has been removed, and `ui5-li-group` should be used instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_59\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n  <ui5-li-groupheader>Actions</ui5-li-groupheader>\n  <ui5-li>Delete Product</ui5-li>\n  <ui5-li>Audit Log Settings</ui5-li>\n  <ui5-li-groupheader>Products</ui5-li-groupheader>\n  <ui5-li>Product 1</ui5-li>\n</ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content using Raw Loader\nDESCRIPTION: This snippet imports the content of a JavaScript file (main.js) as a string using the raw-loader webpack plugin. This allows the JavaScript content to be embedded directly into another JavaScript or TypeScript file, often for purposes such as displaying code examples or processing the code as text.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML with raw-loader\nDESCRIPTION: This snippet imports an HTML file named 'sample.html' using raw-loader. The raw-loader webpack plugin loads the content of the file as a string. This string is then assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/TextWrapping/TextWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Importing CLDR assets for Localization\nDESCRIPTION: Imports the CLDR assets provided by the `@ui5/webcomponents-localization` package. These assets are required for localization support in UI5 Web Components.  These assets are usually imported by the Web Components packages that need them.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-localization/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Migrating ui5-notification to ui5-notification-list (HTML)\nDESCRIPTION: This snippet illustrates the required change for the `ui5-notification` component.  The `ui5-list` element is replaced with `ui5-notification-list` to correctly structure notification groups and items for accessibility.  Use `ui5-notification-list` as a container for `ui5-li-notification-group` and `ui5-li-notification` components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-list>\n        <ui5-li-notification-group title-text=\"Group Title\" >\n            <ui5-li-notification..\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-notification-list>\n        <ui5-li-notification-group title-text=\"Group Title\" >\n            <ui5-li-notification..\n\n```\n\n----------------------------------------\n\nTITLE: Setting ShellBar Accessibility Attributes (New)\nDESCRIPTION: This JavaScript snippet demonstrates the current recommended method for configuring ShellBar accessibility using the `accessibilityAttributes` property. This property provides a more structured way to define the roles and names for the ShellBar's logo and profile elements. Migrate from `accessibilityTexts` and `accessibilityRoles`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nshellbar.accessibilityAttributes = {\n  profile: {\n    name:  \"John Dow\",\n  },\n  logo: {\n    role: \"link\"\n    name: \"Custom logo title\"\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Style maps in Handlebars\nDESCRIPTION: This example demonstrates the use of style maps in Handlebars. A `styles` getter (or property) returns an object containing CSS styles. Each style is applied to the corresponding HTML element.  This is the CSP compliant way to apply styles to elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_43\n\nLANGUAGE: handlebars\nCODE:\n```\n<div style=\"{{styles.root}}\">\n\tSome content\n\t<footer style=\"{{styles.footer}}\"></footer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript with raw-loader\nDESCRIPTION: This snippet imports a JavaScript file named 'main.js' using raw-loader. The raw-loader webpack plugin loads the content of the file as a string. This string is then assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/TextWrapping/TextWrapping.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming Tabs-Overflow-Mode Attribute - HTML\nDESCRIPTION: This snippet demonstrates the renaming of the `tabs-overflow-mode` attribute to `overflow-mode` in the `ui5-tabcontainer` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as raw strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using `raw-loader`. This allows the content of these files to be used directly as string variables within the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties (TypeScript)\nDESCRIPTION: This TypeScript code defines component properties using the `@property` decorator. These properties can be bound to data and used within the component's template. `text` is a string property, and `disabled` is a boolean property with a default value of `false`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n@property()\ntext?: string;\n\n@property({ type: Boolean })\ndisabled = false;\n```\n\n----------------------------------------\n\nTITLE: Old Dialog Opening/Closing Methods in Typescript\nDESCRIPTION: This snippet demonstrates the old, now deprecated, way to open and close the ui5-view-settings-dialog using the `show()` and `close()` methods. This method was replaced by using the `open` property in version 2.0.0. It's kept for historical context of how the component was previously used.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewSettingsDialog = document.getElementById(\"exampleID\");\nviewSettingsDialog.show();\nviewSettingsDialog.close();\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Accessing Component Properties\nDESCRIPTION: This shows how to access properties defined on the web component instance directly within the Handlebars template using double curly braces `{{}}`. The `this` keyword is optional when referring to component properties outside of loops.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n<p>{{fullName}}</p>\n<p>{{age}}</p>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<p>{{this.fullName}}</p>\n<p>{{this.age}}</p>\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Imports in UI5 Web Components (JS)\nDESCRIPTION: This code snippet illustrates how to update icon imports in your JavaScript code when upgrading to a version of @ui5/webcomponents-icons that introduces breaking changes related to the directory structure of SVG icon files. It shows the old way of importing and the updated way of importing specific SVG icons from version 4 or version 5 directories.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-icons/dist/accept.svg\";\n```\n you have to import the SVGs from the **v4/**  or the **v5/** directory:\n```js\nimport \"@ui5/webcomponents-icons/dist/v4/accept.svg\"; //  for SAPIcons4.0\nimport \"@ui5/webcomponents-icons/dist/v5/accept.svg\"; // for SAPIcons5.0\n```\n```\n\n----------------------------------------\n\nTITLE: Import HTML content with raw-loader\nDESCRIPTION: This snippet imports the HTML content from the `./sample.html` file using the `raw-loader`. The `raw-loader` is a webpack loader that allows importing the raw content of a file as a string.  The imported content is assigned to the `html` variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ToggleButton/Design/Design.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Accessing Property and Attribute (TS)\nDESCRIPTION: This snippet shows how to access both the property and attribute counterparts of a UI5 Web Component's property. This demonstrates the relationship between the property defined in TypeScript and the corresponding attribute in HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet t = myComponent.text;\nmyComponent.headerText = \"New text\";\nmyComponent.setAttrbite(\"header-text\", \"New text\");\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Templates - Handlebars\nDESCRIPTION: Demonstrates how to handle events in a component's template for events fired by other web components. The `ui5-` prefix is used for the event name. In this case, the `selection-change` event of a `ui5-list` component is handled by the `onSelectionChange` method.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_24\n\nLANGUAGE: Handlebars\nCODE:\n```\n<div class=\"my-component\">\n\t<ui5-list @ui5-selection-change=\"{{onSelectionChange}}\"></ui5-list>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JavaScript and CSS for UI5 Web Components Editor\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as raw strings using `raw-loader`.  These strings are then passed as props to a UI5 Web Components `<Editor>` component. The `raw-loader` is a webpack loader used to import the content of files as strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/DynamicSideContent/EqualSplit/EqualSplit.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: DOM Representation of UI5 Web Component (HTML)\nDESCRIPTION: This snippet shows the resulting DOM structure after the UI5 framework processes a UI5 Web Component.  Note the added empty attribute with the same name as the component's tag, `ui5-button`. This is automatically created by the framework.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button id=\"b1\" class=\"button1\" design=\"Emphasized\" ui5-button></ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Fixing release build issue in UI5 Web Components\nDESCRIPTION: This bug fix addresses an issue related to the release build process within the ui5-webcomponents project. The fix is included in version 1.22.0-rc.3.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_32\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n*   release build ([#8222](https://github.com/SAP/ui5-webcomponents/issues/8222)) ([27042ac](https://github.com/SAP/ui5-webcomponents/commit/27042ac90443dea8d5900d1c5bfa5bc93d365da0))\n```\n\n----------------------------------------\n\nTITLE: Configuring the Editor Component\nDESCRIPTION: This snippet configures the `<Editor>` component by passing the imported HTML, JavaScript, and CSS strings as properties. The `html`, `js`, and `css` properties are assigned the content of the corresponding files.  The `<Editor>` component likely uses these properties to initialize its content and behavior.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Dialog/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files as raw strings\nDESCRIPTION: This JavaScript code snippet imports HTML and JavaScript files as raw strings using the `raw-loader` webpack plugin. The imported strings are then assigned to the `html` and `js` variables, respectively, for later use in the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MessageStrip/Design/Design.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Updating Popover Placement - HTML\nDESCRIPTION: This code snippet demonstrates how to update the `ui5-popover` component to use the `placement` attribute instead of the previous attribute.  It shows the new syntax for specifying the popover's placement.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_87\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Use the imported HTML and JavaScript in an Editor component\nDESCRIPTION: This code snippet shows how to use the imported `html` and `js` variables to initialize an `Editor` component. The `html` string is passed to the `html` property of the component, and the `js` string is passed to the `js` property. This populates the editor with the provided content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Slider/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Hiding Specific Unstyled Web Components with CSS\nDESCRIPTION: This CSS snippet hides specific web components (ui5-button and ui5-label) that have not yet been defined, preventing users from seeing them before they are styled. It uses the `:not(:defined)` pseudo-class to target these components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/09-FAQ.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nui5-button:not(:defined), ui5-label:not(:defined) {\n\tdisplay: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating theming-base-content for UI5 Web Components\nDESCRIPTION: This snippet demonstrates the update of the theming-base-content dependency for the UI5 Web Components framework. It ensures that the framework utilizes the latest theming definitions and improvements. The update is triggered by a feature commit with a specific issue number.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* **framework:** update theming-base-content to 11.26.0 ([#11075](https://github.com/SAP/ui5-webcomponents/issues/11075)) ([88c2965](https://github.com/SAP/ui5-webcomponents/commit/88c296555b490d5e171aae1a7f2fbca68d8a0f90)), closes [#1d2d3](https://github.com/SAP/ui5-webcomponents/issues/1d2d3) [#788fa6](https://github.com/SAP/ui5-webcomponents/issues/788fa6) [#788fa6](https://github.com/SAP/ui5-webcomponents/issues/788fa6) [#1d2d3](https://github.com/SAP/ui5-webcomponents/issues/1d2d3) [#788fa6](https://github.com/SAP/ui5-webcomponents/issues/788fa6)\n```\n\n----------------------------------------\n\nTITLE: Binding Ref Callbacks - TSX\nDESCRIPTION: This code illustrates how to bind the `this` context to ref callbacks using `.bind()`. Unlike event handlers, refs are not automatically bound, so `.bind()` is required to ensure the correct `this` value is available within the callback function. It shows both binding to the component instance and to an iterated item.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n<ul\n    // captureListRef will be called with a `<ul>` as a parameter and `this` will be the element that renders the template\n    ref={this.captureListRef.bind(this)}\n    {this.items.map(item => (\n        // captureItemRef will be called with a `<li>` as a parameter and `this` will be the `item` that is iterated\n        <li ref={this.captureItemRef.bind(item)}></li>\n    ))}\n></ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing UI5 Web Components Package with npm\nDESCRIPTION: This command initializes a new UI5 Web Components package using npm. The user can pass options such as the package name, component name, tag name, and test setup. When using npm 7 or later, an extra double-dash is needed before the options.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n\n# npm 6.x\n    npm init @ui5/webcomponents-package [OPTIONS]\n# npm 7+, an extra double-dash is needed:\n    npm init @ui5/webcomponents-package -- [OPTIONS]\n\nOptions:\n    --name <string>                      - defines the package name\n    --component-name <string>            - defines the component class name that will be created in your new package\n    --tag <string>                       - defines the tag name of the sample web component that will be created in your new package\n    --test-setup <\"cypress\" | \"manual\">  - defines whether the predefined test setup should be added or it will be configured manually.\n    --skip                               - skips configuration and generates package with a default value for each parameter that wasn't passed\n```\n\n----------------------------------------\n\nTITLE: Renaming placementType property to placement\nDESCRIPTION: This snippet illustrates renaming the `placementType` property to `placement` in the `ui5-popover` element. It also involves renaming `PopoverPlacementType` enum to `PopoverPlacement`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming Left/Right alignment options to Start/End\nDESCRIPTION: This code showcases the renaming of the `Left` and `Right` options for horizontal alignment and placement type of the `ui5-popover` component to `Start` and `End` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Adding Property Initializers Feature - JavaScript\nDESCRIPTION: This feature introduces property initializers to the UI5 Web Components. It allows setting default values for component properties during initialization. This was implemented as part of issue #8846 and potentially includes a breaking change regarding the @property decorator.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Firing Event with fireDecoratorEvent - TypeScript\nDESCRIPTION: This shows how to fire an event using fireDecoratorEvent.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@event(\"change\")\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Fires the event as NOT preventable and NOT bubbling\nthis.fireDecoratorEvent(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with raw-loader\nDESCRIPTION: This code snippet imports the contents of `sample.html` and `main.js` as strings using `raw-loader`. The imported strings are assigned to the variables `html` and `js` respectively. `raw-loader` is a Webpack loader that allows importing files as raw strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/ShellBar/Advanced/Advanced.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Updating UI5 Web Components Icons to 5.05 & 4.17\nDESCRIPTION: This commit updates the @ui5/webcomponents-icons package to versions 5.05 and 4.17. This incorporates newer versions of the icon sets and potentially addresses issues outlined in #7210.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_27\n\nLANGUAGE: Git\nCODE:\n```\n### Features\n\n* update @ui5/webcomponents-icons to 5.05 & 4.17 ([#7315](https://github.com/SAP/ui5-webcomponents/issues/7315)) ([2c9730b](https://github.com/SAP/ui5-webcomponents/commit/2c9730b6d4d4a8445671b2b7e41c364d3abf32e2)), closes [#7210](https://github.com/SAP/ui5-webcomponents/issues/7210)\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with Raw Loader\nDESCRIPTION: This code snippet demonstrates how to import HTML and JavaScript files as strings using the `raw-loader` webpack plugin. This allows you to include the content of these files directly into your JavaScript code.  The `html` and `js` variables will contain the content of 'sample.html' and 'main.js' respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Avatar/Interactive/Interactive.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Replacing TabContainerBackgroundDesign with BackgroundDesign\nDESCRIPTION: This snippet illustrates replacing the `TabContainerBackgroundDesign` import with `BackgroundDesign`. This represents a shift in naming conventions or structure within the UI5 library.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Fix Localization JS Error in UI5 Web Components\nDESCRIPTION: This snippet documents a bug fix that addresses a JavaScript error encountered when the \"sh\" locale is set within the UI5 web components localization package. The fix is identified by commit hash 979bca2 and relates to issues #4905 and #4904 on GitHub. This patch prevents errors related to locale handling.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: JavaScript data for boolean attribute assignment\nDESCRIPTION: This JavaScript code defines boolean properties used in the boolean attribute assignment example.  The `checked`, `readonly`, and `disabled` properties are initialized to `false`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nthis._id = \"myCB\";\nthis.checked = false;\nthis.readonly = false;\nthis.disabled = false;\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, and CSS files\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files using `raw-loader`. The raw-loader allows importing the content of these files as strings, which can then be used as properties for a UI component. This approach is useful for providing the initial content of an editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Dialog/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Rename Breadcrumbs Properties - HTML\nDESCRIPTION: Shows how to rename `separator-style` to `separators` in the `ui5-breadcrumbs` component. The related enum `BreadcrumbsSeparatorStyle` is renamed to `BreadcrumbsSeparator`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Running the UI5 Web Components Website\nDESCRIPTION: These commands are used to set up the project, build the necessary assets, and start a local server to run the UI5 Web Components website. The website can then be accessed in a web browser.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/04-website.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start:website\n```\n\n----------------------------------------\n\nTITLE: Updating UI5 Web Components Icons\nDESCRIPTION: This commit updates the @ui5/webcomponents-icons package to versions 5.07 and 4.19. This brings in the latest icon additions, changes, and fixes from the respective icon libraries, ensuring that the UI5 web components use the most current icons.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_26\n\nLANGUAGE: Git\nCODE:\n```\n### Features\n\n* update @ui5/webcomponents-icons to 5.07 & 4.19 ([#7708](https://github.com/SAP/ui5-webcomponents/issues/7708)) ([1732304](https://github.com/SAP/ui5-webcomponents/commit/173230467f93b227c37b54b666dcfcfec07bcab1))\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Icon with Template\nDESCRIPTION: This JavaScript code registers a custom icon using a pre-compiled template. It imports the necessary modules, including the `registerIcon` function and the template.  The icon data object fills the customTemplate property with the imported template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerIcon } from \"@ui5/webcomponents-base/dist/asset-registries/Icons.js\";\nimport iconBakeryDiningTemplate from \"./dist/generated/templates/BakeryDiningTemplate.lit.js\";\n\n// create the icon data for registration\nconst iconBakeryDining = {\n    customTemplate: iconBakeryDiningTemplate,\n    viewBox: \"0 0 24 24\",\n    collection: \"custom\",\n}\n\n// register the icon\nregisterIcon(\"bakery-dining\", iconBakeryDining);\n```\n\n----------------------------------------\n\nTITLE: Importing a New Sample (Component.mdx)\nDESCRIPTION: This JavaScript snippet showcases importing a newly created UI5 Web Components sample into the component's `.mdx` file within the `packages/website/docs/_components_pages` directory. This makes the sample available for display on the website.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/04-website.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyNewSample from \"../../_samples/main/Button/MyNewSample/MyNewSample.md\";`\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript Modules\nDESCRIPTION: This snippet imports HTML and JavaScript modules using raw-loader. It reads the content of 'sample.html' and 'main.js' into the variables 'html' and 'js' respectively. These variables are then passed as props to the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import UI5 Web Components in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to import the `Assets.js` module and individual UI5 Web Component modules from a package.  The `Assets.js` import is optional and provides additional themes and i18n support.  The other imports register specific components for use.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"my-ui5-webcomponents/Assets.js\"; // optional\nimport \"my-ui5-webcomponents/dist/MyComponent.js\"; // for my-component\nimport \"my-ui5-webcomponents/dist/SomeOtherComponent.js\";\nimport \"my-ui5-webcomponents/dist/YetAnotherComponent.js\";\n```\n\n----------------------------------------\n\nTITLE: Launch application - npm\nDESCRIPTION: Launches the application using the `npm run dev` command. This typically starts a development server that automatically reloads the application when changes are made to the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component with HTML and JS\nDESCRIPTION: This snippet configures an 'Editor' component by passing the imported HTML and JavaScript strings as props. The 'html' prop receives the HTML content, and the 'js' prop receives the JavaScript content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Content Density in HTML\nDESCRIPTION: This HTML code demonstrates how to enable the \"Compact\" content density mode for a web component. By adding the `ui5-content-density-compact` class to the `<body>` element, the component will inherit the \"Compact\" styles defined in the CSS.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"ui5-content-density-compact\">\n\t<my-component></my-component>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Fixing custom-elements.json generation\nDESCRIPTION: This code addresses an issue in the build process that was affecting the generation of the `custom-elements.json` file. The fix ensures that the file is correctly generated, which is crucial for tools that rely on this metadata for understanding and working with custom elements, addressing issue #10403.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Updating ui5-busy-indicator size values (HTML)\nDESCRIPTION: The size property of the ui5-busy-indicator component now accepts different values.  This snippet demonstrates how to update the size values from \"Small\" to \"S\".  The older string values are no longer supported.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_31\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Sample\nDESCRIPTION: This snippet imports the contents of the `main.js` file as a raw string using `raw-loader`.  This enables the JavaScript code to be used directly, such as displaying it in a code editor component for demonstration or manipulation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/Horizontal/Horizontal.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript Code\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' as strings using raw-loader. The raw-loader is a webpack loader that allows importing files as strings. This is useful for embedding HTML and JavaScript code directly into a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RangeSlider/ShowTooltip/ShowTooltip.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JavaScript, and CSS files as raw strings\nDESCRIPTION: This snippet demonstrates importing HTML, JavaScript, and CSS files as raw strings using webpack's `raw-loader`. This allows the content of these files to be used directly as strings within the JavaScript code, typically for embedding them into a component or processing them in some way. The `!!raw-loader!` syntax is specific to webpack and instructs it to use the `raw-loader` to load the file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Supporting Business Suite Icons v1 & v2\nDESCRIPTION: This code snippet highlights a feature to support SAP Business Suite icons, specifically versions 1 and 2, for the Horizon theme.  The support enables the use of both versions of the icon font within the UI5 web components, providing compatibility and flexibility in icon selection for the user interface. This involves integration of both icon sets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_29\n\nLANGUAGE: N/A\nCODE:\n```\n/***\n* support SAPBusinessSuite icons v1 and v2 font ( Horizon ) ([#6535](https://github.com/SAP/ui5-webcomponents/issues/6535)) ([38233b9](https://github.com/SAP/ui5-webcomponents/commit/38233b94543a94c9915cf1d8c8937a834cd6c87d))\n**/\n```\n\n----------------------------------------\n\nTITLE: Renaming color property to value in ui5-color-picker\nDESCRIPTION: This code demonstrates renaming of the `color` property of the `ui5-color-picker` component to `value`.  Any existing use of the `color` attribute should be changed to `value`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Setting design property to Set3 (ui5-badge)\nDESCRIPTION: To retain the original look and feel of the `ui5-badge`, explicitly set the `design` property to `Set3` after the default value change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_63\n\nLANGUAGE: html\nCODE:\n```\n<ui5-badge design=\"Set3\"></ui5-badge>\n```\n\n----------------------------------------\n\nTITLE: Import HTML Sample\nDESCRIPTION: This snippet imports an HTML sample from the `sample.html` file using `raw-loader`. The content of the HTML file is loaded as a raw string and assigned to the `html` variable. This is likely used to display or manipulate the HTML content within a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import HTML, JS, CSS using raw-loader\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as raw strings using webpack's `raw-loader`. This allows the content of these files to be used directly within the JavaScript code, likely for rendering or manipulation within a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/NotificationList/InShellBar/InShellBar.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Renaming ColorPicker Property (HTML)\nDESCRIPTION: This snippet illustrates the renaming of the `color` property to `value` in the `ui5-color-picker` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: HTML output without question mark prefix on boolean attributes\nDESCRIPTION: This HTML code shows that when boolean attributes are not prefixed with '?', the attributes are still present, even with a value of \"\".\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<input\n\tid=\"myCB-CB\"\n\ttype='checkbox'\n\tchecked=\"\"\n\treadonly=\"\"\n\tdisabled=\"\"\n\ttabindex=\"-1\"\n\taria-hidden=\"true\"\n\tdata-sap-no-tab-ref\n/>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files\nDESCRIPTION: This snippet imports HTML and JavaScript files using raw-loader, assigning their content to the `html` and `js` variables respectively. The raw-loader ensures the files are read as strings. These strings are then passed as props to an `<Editor>` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/SubMenu/SubMenu.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing calendar week numbering\nDESCRIPTION: This commit introduces calendar week numbering functionality to the ui5-calendar component. It enables the display of week numbers within the calendar view. It enhances the ui5-calendar component with the ability to display week numbers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nui5-calendar: implement calendar week numbering ([#9694](https://github.com/SAP/ui5-webcomponents/issues/9694)) ([efc8053](https://github.com/SAP/ui5-webcomponents/commit/efc8053e756156cca5e239f1886469c6b92c2cf7))\n```\n\n----------------------------------------\n\nTITLE: Renaming Carousel Page Indicator Style\nDESCRIPTION: This snippet illustrates how to replace the `pageIndicatorStyle` with `pageIndicatorType` property of the `ui5-carousel` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_75\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Code\nDESCRIPTION: Imports JavaScript code from the 'main.js' file using a raw-loader.  This allows the JavaScript code to be treated as a string. This is typically done when the JavaScript needs to be displayed or manipulated within the editor component. The raw-loader is a webpack loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript as Raw Strings\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' as raw strings using raw-loader. This allows the HTML and JavaScript code to be treated as string literals within the JavaScript file. This approach is useful for embedding code snippets or templates directly into components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Panel/Fixed/Fixed.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Initialize Editor Component\nDESCRIPTION: Initializes the editor component using the imported HTML and JavaScript content. The 'html' and 'js' variables, containing the raw code, are passed as properties to the '<Editor />' component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Text/Hyphenation/Hyphenation.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Setting Native Scrollbar Styles with CSS Class\nDESCRIPTION: This snippet demonstrates how to apply the `.ui5-content-native-scrollbars` CSS class to the `body` element of your application to enable native scrollbar styling for UI5 Web Components.  This needs to be applied before the initial rendering of the components to take effect. The purpose is to override the default scrollbar styles provided by the components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/10-scrollbars-customization.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<body class=\"ui5-content-native-scrollbars\">\n    ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Adding/Updating Icons: SAP-icons-TNT collection in UI5 Web Components\nDESCRIPTION: This commit adds or updates the SAP-icons-TNT collection within the @ui5/webcomponents-icons-tnt package. This provides an updated set of icons for the TNT theme, addressing a previous issue.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n([07b2908](https://github.com/SAP/ui5-webcomponents/commit/07b2908b2b2748bdefa6d07221e92c6b7d22c8d9)), closes [#6376](https://github.com/SAP/ui5-webcomponents/issues/6376)\n```\n\n----------------------------------------\n\nTITLE: Importing All TNT Icons in UI5 Web Components\nDESCRIPTION: This code snippet demonstrates how to import the entire collection of TNT icons for use in UI5 Web Components. This import makes all TNT icons available for use within the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-icons-tnt/dist/AllIcons.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, and CSS files using raw-loader\nDESCRIPTION: This snippet imports the content of HTML, JavaScript, and CSS files as strings using the raw-loader webpack plugin. This is commonly used to embed code directly into JavaScript files, especially in environments where dynamic code loading is required or for use in components like code editors or previewers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/DynamicSideContent/SideContentPosition/SideContentPosition.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Generate CSS from LESS\nDESCRIPTION: This JavaScript script compiles a LESS file (`src/mytheme.less`) into a CSS file (`dist/mytheme.css`) and adds metadata required by the UI5 Web Components framework.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst less = require('less');\nconst fs = require('fs');\n\nconst themeName =  \"mytheme\";\nconst baseThemeName = \"sap_horizon\";\n\nconst CUSTOM_THEME_METADATA = `\n.sapThemeMetaData-Base-baseLib {\n\tbackground-image: url('data:text/plain;utf-8, { \"Path\": \"Base.baseLib.${themeName}.css_variables\", \"Extends\": [\"${baseThemeName}\",\"baseTheme\"]}');\n}`;\n\nasync function compileLess(inputFile, outputFile) {\n\tif (!fs.existsSync(\"dist\")) {\n\t\tfs.mkdirSync(\"dist\");\n\t}\n\n    try {\n      const lessData = await fs.promises.readFile(inputFile, 'utf-8');\n\n      const { css } = await less.render(lessData, {\n         filename: inputFile\n      });\n      const output = `${CUSTOM_THEME_METADATA} ${css}`;\n\n      await fs.promises.writeFile(outputFile, output, {encoding:'utf8',flag:'w'});\n      console.log(`Successfully compiled Less file ${inputFile} to CSS file ${outputFile}`);\n\n    } catch (error) {\n      console.error('Error compiling Less:', error);\n    }\n}\n\ncompileLess('src/mytheme.less', 'dist/mytheme.css');\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Docusaurus project using Yarn.  It reads the `package.json` file and downloads the required packages. This is the first step in setting up the development environment.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Using HTML and JavaScript in Editor Component\nDESCRIPTION: This snippet demonstrates using the imported HTML and JavaScript strings within an `Editor` component. The `html` and `js` variables are passed as properties to the `Editor` component. Assumes Editor is defined elsewhere.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/TokenCreation/TokenCreation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as strings with raw-loader\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using webpack's `raw-loader`. The imported strings are then assigned to the `html` and `js` variables respectively. These variables are likely used to populate an editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toast/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JavaScript, and CSS as raw strings\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as raw strings using `raw-loader`. These raw strings are then passed as properties (html, js, css) to an `<Editor>` component. This approach is common for embedding code snippets directly into JavaScript modules or components, likely for dynamic rendering or manipulation within the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Label/UsageWithInputs/UsageWithInputs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Using Web Component in HTML\nDESCRIPTION: This HTML code demonstrates how to use a custom web component within an HTML body. The component will inherit the default \"Cozy\" content density styles defined in the CSS.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<body>\n\t<my-component></my-component>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Replacing show-overflow property with overflowButton slot\nDESCRIPTION: This snippet describes removing the `show-overflow` property of the `ui5-tabcontainer` and replacing it with the `overflowButton` slot. Now overflow buttons are added as slotted content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Logic\nDESCRIPTION: This snippet imports JavaScript code as a string using raw-loader. This code likely contains the logic and functionality for the UI5 Web Component, such as event handling, data binding, and rendering updates. raw-loader is used to handle the file as raw text data.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UploadCollection/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Replacing ICardHeader Interface - TypeScript\nDESCRIPTION: This snippet shows how to replace the deprecated `ICardHeader` interface with the `CardHeader` type. The code demonstrates the old and new import statements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Using Non-RTL-Friendly CSS Property\nDESCRIPTION: This CSS snippet demonstrates the use of `padding-left`, which is not RTL-friendly. In RTL layouts, the element will have padding on the left side, which is visually incorrect. This is the case because `padding-left` in LTR becomes `padding-left` in RTL, which is actually the right side of the element. The correct way to pad in LTR and RTL is shown in the next example.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n:host {\n\tpadding-left: 1rem; /* not RTL-friendly */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties with Default Values\nDESCRIPTION: This code snippet demonstrates how to define several properties with different types and default values. It includes properties of type String, Boolean, Number, Object, and Array. It highlights the use of JavaScript property initializers to set default values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/03-properties.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n@customElement(\"my-demo-component\")\nclass MyDemoComponent extends UI5Element {\n    @property()\n    name = \"user1\";\n\n    @property({ type: Boolean })\n    collapsed = false;\n\n    @property({ type: Number })\n    maxValue = 5;\n\n    @property({ type: Object })\n    accProperties = {};\n\n    @property({ type: Array })\n    stars = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming pageIndicatorStyle to pageIndicatorType (HTML)\nDESCRIPTION: The `pageIndicatorStyle` property of the `ui5-carousel` component has been renamed to `pageIndicatorType`. This snippet shows how to update the property name in the HTML code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Creation Issues with Tests and Linting in Javascript\nDESCRIPTION: This fix addresses issues encountered during package creation related to testing and linting configurations. The update ensures that the newly created packages have proper test and lint configurations, promoting code quality and consistency during development of UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Import HTML and JS using raw-loader\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the `raw-loader` webpack loader. These strings can then be used as input to a component like an editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Panel/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Render Editor component with HTML and JavaScript\nDESCRIPTION: This snippet renders an Editor component, passing the previously imported HTML and JavaScript strings as the 'html' and 'js' properties respectively. The Editor component is responsible for displaying and potentially editing these contents. No specific details regarding the Editor component implementation are provided.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/CustomStyling/CustomStyling.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Reverting tsconfig Module Resolution - Tools\nDESCRIPTION: This change reverts the tsconfig module resolution to 'node'. This resolves potential issues related to module resolution and ensures compatibility with the existing build process and tooling.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * **tools:** revert tsconfig moduleResolution to node ([#10014](https://github.com/SAP/ui5-webcomponents/issues/10014)) ([0724b92](https://github.com/SAP/ui5-webcomponents/commit/0724b9289ad04f88972d4978ed37e76f13abca13))\n */\n```\n\n----------------------------------------\n\nTITLE: Import HTML Raw Loader\nDESCRIPTION: This snippet imports an HTML file as a raw string using the raw-loader. The raw-loader is a webpack loader that allows importing files as strings, which can then be used in JavaScript or other contexts. The imported HTML is assigned to the `html` variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RatingIndicator/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar component to main library\nDESCRIPTION: This snippet shows moving the import location of the `ui5-bar` component from the `fiori` library to the `main` library. It changes the import path accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: ui5-tab Slot Update - HTML\nDESCRIPTION: This snippet shows changing the `slot` attribute from `subTabs` to `items` for `ui5-tab` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_49\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as Raw Strings (JavaScript)\nDESCRIPTION: This snippet imports the content of `sample.html` and `main.js` files as raw strings using `raw-loader`. This is commonly used to embed code directly into JavaScript modules, particularly for testing, demos, or inline component definitions where external file dependencies are undesirable. The `!!` prefix likely disables all configured loaders, ensuring only `raw-loader` is used.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/BardcodeScannerDialog/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JS as Raw Strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using `raw-loader`. This is a webpack loader that allows importing the content of a file as a string, which is useful for embedding code snippets within components or applications. The imported strings are assigned to the `html` and `js` variables respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIAcknowledgement/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript with raw-loader\nDESCRIPTION: This snippet imports the JavaScript content of the 'main.js' file as a string using the 'raw-loader' webpack loader. This allows the JavaScript to be embedded directly into the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Size/Size.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Timezone Configuration (HTML)\nDESCRIPTION: This HTML code snippet demonstrates how to configure the timezone for UI5 Web Components. The timezone should be specified using an IANA timezone ID. All date/time related components will operate in the configured timezone.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n\t\"timezone\": \"Europe/Sofia\"\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js module import\nDESCRIPTION: This snippet demonstrates the removal of the `CSP.js` module and related APIs. Developers should remove these imports as adoptedStyleSheets are now supported by all browsers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML and JavaScript in Editor Component\nDESCRIPTION: This snippet renders an `<Editor>` component, passing the imported HTML and JavaScript strings as props named `html` and `js`.  The Editor component is responsible for displaying and potentially allowing the user to edit these code snippets. This is a common pattern for showing code examples in documentation or interactive tutorials.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component with Embedded Code (JavaScript)\nDESCRIPTION: This snippet renders an 'Editor' component, passing the imported HTML, JavaScript, and CSS strings as props. The 'Editor' component is responsible for displaying and potentially editing these code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/FreeStyleForm/FreeStyleForm.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component with HTML and JS\nDESCRIPTION: This snippet renders the Editor component, passing the imported HTML and JavaScript code as props named 'html' and 'js' respectively.  The Editor component presumably utilizes these props to display the code within the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/DynamicallyAddedItems/DynamicallyAddedItems.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Removing the disabled property from ui5-option (HTML)\nDESCRIPTION: The `disabled` property of the `ui5-option` is removed. This snippet demonstrates the removal of the deprecated property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Import HTML, JS, CSS for UI5 Web Components Editor\nDESCRIPTION: This code snippet imports HTML, JavaScript, and CSS files using raw-loader. The imported content is then passed as props (html, js, css) to the <Editor> component for configuration.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/QuickAction/QuickAction.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Accessibility Attributes Update - ShellBar\nDESCRIPTION: Illustrates the breaking change related to ShellBar's accessibility properties. The `accessibilityTexts` and `accessibilityRoles` properties have been replaced by `accessibilityAttributes`.  The code demonstrates the previous usage and the updated usage with `accessibilityAttributes`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nshellbar.accessibilityTexts = {\n    profileButtonTitle: \"John Dow\",\n    logoTitle: \"Custom logo title\",\n}\n\nshellbar.accessibilityRoles = {\n    logoRole: \"link\"\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshellbar.accessibilityAttributes = {\n  profile: {\n    name:  \"John Dow\",\n  },\n  logo: {\n    role: \"link\"\n    name: \"Custom logo title\"\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Load JSON i18n Resources - JavaScript\nDESCRIPTION: Demonstrates how to load i18n resources directly in JSON format instead of using `.properties` files. The code snippet shows how to modify the loader function to fetch `.json` files and parse them using the `.json()` method. This approach reduces code size by skipping the `.properties` format support import.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/08-using-i18n-for-apps.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn await (await fetch(`./assets/messagebundle_${localeId}.json`)).json();\n```\n\n----------------------------------------\n\nTITLE: Popover API Update - Javascript, HTML\nDESCRIPTION: Illustrates the removal of `openPopover` and `showAt` methods in favor of `open` and `opener` properties for the `ui5-color-palette-popover`. The imperative API should be replaced with the declarative API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: Using overflowButton slot in ui5-tabcontainer (ui5-carousel)\nDESCRIPTION: This snippet demonstrates how to use the `startOverflowButton` and `overflowButton` slots in `ui5-tabcontainer` to display overflow buttons, replacing the deprecated `show-overflow` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_49\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JS as Raw Strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the `raw-loader`. This allows the content of these files to be used directly as string values within the application, typically for populating editor components or similar use cases where the raw code needs to be manipulated.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/ProductSwitch/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Web Components\nDESCRIPTION: This command installs the `@ui5/webcomponents` package as a dependency to your React project using npm. This makes the UI5 Web Components library available for use within your React application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/01-React.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ui5/webcomponents --save\n```\n\n----------------------------------------\n\nTITLE: Two-Way Data Binding with ui5-radio-button and ui5-checkbox - HTML\nDESCRIPTION: Demonstrates two-way data binding with the `ui5-radio-button` and `ui5-checkbox` web components using `v-model`. The `type` attribute is required to explicitly specify the component type. The `rbValue` and `cbValue` variables in the Vue component's data will be synchronized with the radio button's and checkbox's checked state, respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ui5-radio-button type=\"radio\" v-model=\"rbValue\"></ui5-radio-button>\n<ui5-checkbox type=\"checkbox\" v-model=\"cbValue\"></ui5-checkbox>\n```\n\n----------------------------------------\n\nTITLE: SegmentedButton mode property (Old)\nDESCRIPTION: This TypeScript snippet shows how the `mode` property on the `ui5-segmented-button` was used. This property is changed to `selection-mode` now with values from `SingleSelect` and `MultiSelect` to `Single` and `Multiple`. Migrate to the new property and values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\n<ui5-segmented-button id=\"segButtonMulti\" mode=\"MultiSelect\">\n  <ui5-segmented-button-item>Item</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Item</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Click</ui5-segmented-button-item>\n  <ui5-segmented-button-item>SegmentedButtonItem</ui5-segmented-button-item>\n</ui5-segmented-button>\n```\n\n----------------------------------------\n\nTITLE: Removing CSP APIs in UI5 Web Components (TypeScript)\nDESCRIPTION: This code snippet illustrates the removal of CSP-related APIs in UI5 Web Components 2.0 due to the adoption of adoptedStyleSheets for CSP compliance. The `setUseLinks`, `setPackageCSSRoot`, and `setPreloadLinks` functions from `@ui5/webcomponents-base/dist/CSP.js` are no longer available and should not be used.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/preparing-for-v2.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Updating business-suite icons\nDESCRIPTION: This snippet represents a feature update to the business-suite icons, upgrading them to versions v2.087 and 1.087. It includes a commit hash indicating the specific commit where this update was implemented. The change impacts the icons used within the UI5 web components business suite.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\n### Features\n\n* update business-suite/icons to v2.087 & 1.087 ([#10605](https://github.com/SAP/ui5-webcomponents/issues/10605)) ([6b7dbf0](https://github.com/SAP/ui5-webcomponents/commit/6b7dbf09dd253de3e399d257441a386dc000c5ff))\n```\n\n----------------------------------------\n\nTITLE: Reverting tsconfig Module Resolution - JavaScript\nDESCRIPTION: This commit reverts the tsconfig moduleResolution setting back to node.  This change may be necessary to maintain compatibility with existing build processes or dependencies. It's a configuration adjustment that can affect how modules are resolved during compilation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **tools:** revert tsconfig moduleResolution to node ([#10014](https://github.com/SAP/ui5-webcomponents/issues/10014)) ([0724b92](https://github.com/SAP/ui5-webcomponents/commit/0724b9289ad04f88972d4978ed37e76f13abca13))\n```\n\n----------------------------------------\n\nTITLE: Replacing ui5-li-groupheader with ui5-li-group (HTML)\nDESCRIPTION: This example demonstrates how to replace the deprecated `ui5-li-groupheader` with the new `ui5-li-group` for grouping items in a `ui5-list`.  The new approach supports true nesting of ListItems inside ListItemGroup to ease binding of hierarchical data models.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/preparing-for-v2.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n\t<ui5-li-groupheader>group<ui5-li-groupheader/>\n\t<ui5-li></ui5-li>\n\t<ui5-li></ui5-li>\n\t<ui5-li></ui5-li>\n</ui5-list>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n\t<ui5-li-group header-text=\"group\">\n\t\t<ui5-li></ui5-li>\n\t\t<ui5-li></ui5-li>\n\t\t<ui5-li></ui5-li>\n\t<ui5-li-group>\n</ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Individual Slots with Carousel - TypeScript and Handlebars\nDESCRIPTION: Example using the `Carousel` component that leverages `individualSlots` to wrap each slotted child. This shows the TypeScript decorator defining the slot with `individualSlots` enabled and the Handlebars template iterating over the content and creating a slot for each item.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport slot from \"@ui5/webcomponents-base/dist/decorators/slot.js\";\n\n@customElement(\"ui5-carousel\")\nclass Carousel extends UI5Element {\n\t@slot({ type: HTMLElement, individualSlots: true })\n\tcontent!: Array<HTMLElement>;\n}\n```\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{!-- Carousel.hbs --}}\n<div>\n\t{{#each content}}\n\t\t<div\n\t\t\tclass=\"ui5-carousel-item\"\n\t\t\trole=\"option\"\n\t\t\taria-posinset=\"{{posinset}}\"\n\t\t\taria-setsize=\"{{setsize}}\"\n\t\t\taria-selected = \"{{selected}}\"\n\t\t>\n\t\t\t<slot name=\"{{this.item._individualSlot}}\"></slot>\n\t\t</div>\n\t{{/each}}\n</div>\n```\n\n----------------------------------------\n\nTITLE: UploadCollection SelectionMode Update - HTML\nDESCRIPTION: This snippet illustrates how to update the ui5-upload-collection component to remove the 'Delete' selectionMode, which is no longer supported. The previous method of specifying 'Delete' as the selectionMode is replaced by omitting the selectionMode property and using the hide-delete-button attribute on the ui5-upload-collection-item.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_34\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-upload-collection selection-mode=\"Delete\"></ui5-upload-collection>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-upload-collection>\n   <ui5-upload-collection-item hide-delete-button>  </ui5-upload-collection-item>\n</ui5-upload-collection>\n```\n\n----------------------------------------\n\nTITLE: ui5-li Image Slot Update (Breaking Change)\nDESCRIPTION: This snippet demonstrates the breaking change related to the `ui5-li` component. The `image` property and `imageContent` slot are removed, replaced by the `image` slot. The code illustrates how to migrate existing code using the old property or slot to the new `image` slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ui5-li image=\"./img/HT-1022.jpg\">Standard List Item</ui5-li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-li> Avatar inside imageContent slot\n\t<ui5-avatar slot=\"imageContent\" shape=\"Square\" initials=\"ABC\" color-scheme=\"Accent2\"></ui5-avatar>\n</ui5-li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-li> Avatar inside image slot\n\t<ui5-avatar slot=\"image\" shape=\"Square\" initials=\"ABC\" color-scheme=\"Accent2\"></ui5-avatar>\n</ui5-li>\n```\n\n----------------------------------------\n\nTITLE: Importing AnimationMode Configuration\nDESCRIPTION: Imports the `getAnimationMode` and `setAnimationMode` functions from the `@ui5/webcomponents-base/dist/config/AnimationMode.js` module. These functions are used to get and set the current animation mode of the UI5 Web Components, affecting the animations and transitions.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getAnimationMode, setAnimationMode } from \"@ui5/webcomponents-base/dist/config/AnimationMode.js\";\n```\n\n----------------------------------------\n\nTITLE: Enhance `@event` decorator\nDESCRIPTION: This code enhances the `@event` decorator within the SAP UI5 Web Components framework. This enhancement likely adds new features or improves the existing functionality of the decorator, making it more powerful and flexible for defining custom events, addressing issue #9944.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: JavaScript Raw Loader: Importing Table Logic\nDESCRIPTION: This snippet imports the JavaScript logic associated with the table component using raw-loader. The JavaScript file likely contains the event handling, data binding, and other functionalities related to the table's behavior.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/ScrollToLoad/ScrollToLoad.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing CoPilot Animation Asset - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the CoPilotAnimation module for use with the ui5-shellbar component. This asset must be imported separately after the removal of the animated co-pilot SVG from the main component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_59\n\nLANGUAGE: js\nCODE:\n```\nimport @ui5/webcomponents/dist/features/CoPilotAnimation.js`\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component with HTML and JS\nDESCRIPTION: This code snippet shows how to render an `Editor` component, passing the imported HTML and JavaScript code as props. The `Editor` component will use these props to initialize and display the content of the editor.  The snippet assumes an `Editor` component is available in the current scope.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Avatar/Interactive/Interactive.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML as Raw String\nDESCRIPTION: This snippet imports the HTML content from the 'sample.html' file as a raw string. The 'raw-loader' Webpack loader is used to treat the file as a plain string, allowing it to be embedded directly into the JavaScript code. This is commonly used to inline HTML templates within JavaScript components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/IconOnly/IconOnly.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component - JavaScript\nDESCRIPTION: This snippet renders an editor component, passing the imported HTML and JavaScript strings as props. The editor component will likely display these strings within a visual editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: BusyIndicator Size Property Update - HTML\nDESCRIPTION: This snippet demonstrates the change in allowed values for the 'size' property of the ui5-busy-indicator component. The previous values like 'Small' are replaced with new values such as 'S'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_39\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar Component\nDESCRIPTION: This snippet explains the moving of the `ui5-bar` component from `fiori` library to `main` library. Developers need to update the import paths.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Navigating and Starting the Development Server\nDESCRIPTION: These commands navigate to the newly created project directory, install the project dependencies using npm, and then start the development server. This allows developers to preview their changes in a web browser.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/01-first-steps.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-webcomponents-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Editor Component Integration\nDESCRIPTION: Integrates the imported HTML and JavaScript code snippets into an editor component.  The 'html' and 'js' variables, which contain the raw content of the respective files, are passed as props to the `<Editor>` component. This suggests the editor component will render or otherwise use these code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Rendering with Editor component\nDESCRIPTION: This snippet renders an `Editor` component and passes the imported HTML, JavaScript, and CSS as props.  The component likely uses these props to display or execute the code within its environment.  The files' contents are passed as props.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/NotificationList/InShellBar/InShellBar.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Wizard HTML example\nDESCRIPTION: This HTML snippet shows an example of the `<ui5-wizard>` component being populated with `<ui5-wizard-step>` elements.  This markup serves as an example of how the Wizard component's `steps` slot is populated with content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<ui5-wizard>\n\t<ui5-wizard-step title-text=\"Product type\" icon=\"sap-icon://product\" selected></ui5-wizard-step>\n\t<ui5-wizard-step title-text=\"Options\"></ui5-wizard-step>\n\t<ui5-wizard-step title-text=\"Pricing\" disabled></ui5-wizard-step>\n</ui5-wizard>\n```\n\n----------------------------------------\n\nTITLE: Import HTML content\nDESCRIPTION: Imports the content of an HTML file as a raw string using raw-loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Toolbar Button Class Naming Convention (JavaScript)\nDESCRIPTION: This example demonstrates the naming convention for the ToolbarButton class. This file will contain the logic for the ToolbarButton component, extending the ToolbarItem base class.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nToolbarButton.ts\n```\n\n----------------------------------------\n\nTITLE: Fixing tsconfig moduleResolution\nDESCRIPTION: This snippet demonstrates a bug fix related to the tsconfig.json file in the tools directory.  Specifically, the moduleResolution setting was reverted to \"node\".  The snippet also includes the associated commit hash and issue number.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Other\nCODE:\n```\n### Bug Fixes\n\n* **tools:** revert tsconfig moduleResolution to node ([#10014](https://github.com/SAP/ui5-webcomponents/issues/10014)) ([0724b92](https://github.com/SAP/ui5-webcomponents/commit/0724b9289ad04f88972d4978ed37e76f13abca13))\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Using isAdmin Condition\nDESCRIPTION: This snippet uses the pre-calculated `isAdmin` property to conditionally render content in the Handlebars template. This avoids complex expressions within the template itself.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_28\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if isAdmin }}\n\t<p>Show admin functionality</p>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Optimize Build by Switching CSS Processing to esbuild - JavaScript\nDESCRIPTION: Optimizes the build process by switching the CSS processing tool to esbuild. This change likely results in faster build times and potentially improved CSS optimization. The improvement is documented in issue #8008 on GitHub.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Icons: Async PathData Import (JavaScript)\nDESCRIPTION: Illustrates the breaking change related to the import of `pathData` from UI5 Web Components Icons. Previously, `pathData` was a string, but now it's a function (`getPathData`) that returns a Promise. This snippet shows the change in how to import and use icon path data.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pathData, ltr, accData } from \"@ui5/webcomponents-icons/dist/accept.js\";\nconsole.log(pathData); // String containing the SVG path\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getPathData, ltr, accData } from \"@ui5/webcomponents-icons/dist/accept.js\";\ngetPathData().then(pathData => {\n  console.log(pathData); // String containing the SVG path\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Code Completion\nDESCRIPTION: This JSON configuration enables code completion for UI5 Web Components in Visual Studio Code. It adds the `vscode.html-custom-data.json` file from the `@ui5/webcomponents` package to the `html.customData` setting, which provides code hinting and IntelliSense for the custom elements.  Add this configuration inside `.vscode/settings.json`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/01-first-steps.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"html.customData\": [\n    \"./node_modules/@ui5/webcomponents/dist/vscode.html-custom-data.json\"\n    // Add entries for other installed @ui5/webcomponents packages as needed\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ref Callback Function - TS\nDESCRIPTION: This code snippet defines a ref callback function to be used with the ref attribute.  It receives a DOM element as an argument and allows for performing operations on the element, such as associating custom properties.  It requires an HTMLElement with an optional associatedItem property of type UI5Element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent {\n    captureRef(ref: HTMLElement & { associatedItem?: UI5Element} | null) {\n        if (ref) {\n            ref.associatedItem = this;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RTL on Specific Components\nDESCRIPTION: This example shows how to apply RTL to specific UI5 Web Components by setting the 'dir' attribute on either a parent div element or directly on the component itself. The 'dir' attribute only affects elements within the specified scope. It uses the `<ui5-button>` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/02-RTL-and-compact-mode.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <ui5-button>Button 1</ui5-button>\n    <div dir=\"rtl\">\n        <ui5-button>Button 2</ui5-button>\n    </div>\n\n    <ui5-button dir=\"rtl\">Button 3</ui5-button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, and CSS files as strings\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files using `raw-loader`. The content of each file is loaded as a string and assigned to the variables `html`, `js`, and `css` respectively. This is commonly used to embed code directly into components or modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/MediaGallery/Horizontal/Horizontal.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Fixing Icon Cut-Off in UI5 Web Components\nDESCRIPTION: This commit fixes an issue where the \"employee-approvals\" icon was being cut off. This resolves the visual defect reported in issue #7410 by adjusting the icon's rendering to ensure it is fully visible.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_25\n\nLANGUAGE: Git\nCODE:\n```\n### Bug Fixes\n\n* **icons:** fix \"employee-approvals\" icon cutt-off ([#7461](https://github.com/SAP/ui5-webcomponents/issues/7461)) ([40eb99c](https://github.com/SAP/ui5-webcomponents/commit/40eb99c76c93229d43c79797dee970fa53e7c8ad)), closes [#7410](https://github.com/SAP/ui5-webcomponents/issues/7410)\n```\n\n----------------------------------------\n\nTITLE: Using Template Literal Notation for Enum Types in Framework\nDESCRIPTION: This code snippet demonstrates the use of template literal notation for enum types within the ui5-webcomponents framework. This feature was introduced to enhance type safety and code readability. The associated issue is #6636 and the commit hash is 0de21e8ba37c6a75fd3d2a29a16cc82661619cb1.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n0de21e8ba37c6a75fd3d2a29a16cc82661619cb1\n```\n\n----------------------------------------\n\nTITLE: Migrating ui5-button, ui5-date-picker, ui5-calendar to TS\nDESCRIPTION: This commit migrates the ui5-button, ui5-date-picker, and ui5-calendar components to TypeScript to improve code quality and maintainability. The migration leverages TypeScript's type system for enhanced safety and predictability. The corresponding issue is #6173 which closes #6080, and the commit hash is 7232ca08f286c5dde10080373fb62247f1acf7b7.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n7232ca08f286c5dde10080373fb62247f1acf7b7\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Calendar Week Numbering in JavaScript\nDESCRIPTION: This JavaScript code snippet fixes a missing calendarWeekNumbering issue in the localization package. This ensures that calendar week numbers are displayed correctly for different locales.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n**localization:** missing calendarWeekNumbering ([#7684](https://github.com/SAP/ui5-webcomponents/issues/7684)) ([01a9349](https://github.com/SAP/ui5-webcomponents/commit/01a9349c7ab5e3c046fa10034dc9aa99b840f3d0))\n```\n\n----------------------------------------\n\nTITLE: Remove ITab Interface\nDESCRIPTION: The `ITab` interface is removed. `TabContainer` components should be used only with Tab and TabSeparator classes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Import JavaScript Content\nDESCRIPTION: This snippet imports the JavaScript code from the 'main.js' file using a raw-loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Root with JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to set the theme root URL for custom themes using `setThemeRoot`. This allows UI5 Web Components to load the CSS variables from the specified URL. The function imports the `setThemeRoot` from `@ui5/webcomponents-base/dist/config/ThemeRoot.js`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/12-theming.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setThemeRoot } from \"@ui5/webcomponents-base/dist/config/ThemeRoot.js\";\nsetThemeRoot(\"https://my-example-host.com/\");\n```\n\n----------------------------------------\n\nTITLE: Renaming ui5-badge to ui5-tag (New)\nDESCRIPTION: This HTML snippet shows the new name of the component `ui5-tag`. The component `ui5-badge` has been renamed to `ui5-tag`. Migrate to the new tag name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tag></ui5-tag>\n```\n\n----------------------------------------\n\nTITLE: Replacing IUploadCollectionItem Interface - JavaScript\nDESCRIPTION: This snippet shows how to replace the deprecated `IUploadCollectionItem` interface with the `UploadCollectionItem` type. The code demonstrates the old and new import statements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Executing Code on Boot - JavaScript\nDESCRIPTION: This snippet demonstrates how to execute code on boot. It imports `attachBoot` from `@ui5/webcomponents-base/dist/Boot.js` and then calls it with a callback function that logs a message to the console when the framework has booted. This is useful for running initialization code or performing other tasks after the framework is ready.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/15-other-framework-level-APIs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nattachBoot(() => {\n\tconsole.log(\"Framework booted\");\n});\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an editor component, passing the imported HTML and JavaScript code as props. The `html` and `js` variables, which contain the raw HTML and JavaScript code respectively, are passed to the `<Editor>` component. This likely renders an interactive editor with the provided code samples.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Using Properties in Template (HTML)\nDESCRIPTION: This HTML code snippet demonstrates how to use the defined properties within the component's template. The properties are bound to attributes of a `ui5-button` element. The `data-ui5-external-action-item-id` and `data-ui5-stable` attributes are used for internal purposes by the toolbar.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button\n  class=\"ui5-tb-item\"\n  ?disabled=\"{{this.disabled}}\"\n  data-ui5-external-action-item-id=\"{{this._id}}\"\n  data-ui5-stable=\"{{this.stableDomRef}}\"\n>\n  {{this.text}}\n</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript File with raw-loader\nDESCRIPTION: Imports a JavaScript file named 'main.js' using the raw-loader webpack plugin. The content of the JavaScript file is loaded as a string and assigned to the variable 'js'. This string can then be used within the application, for example, to inject script content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Breadcrumbs/BreadcrumbsStyles/BreadcrumbsStyles.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Radio Button Wrapping Behavior (Now)\nDESCRIPTION: Shows the new default behavior of the ui5-radio-button component, where text wraps to the next line if there is not enough space. The wrapping-type property is now set to Normal by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-radio-button text=\"Option A with long long text\"></ui5-radio-button>\n<!-- would let the text wrap if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar Component - Typescript\nDESCRIPTION: This code snippet shows how to change the import path for the `ui5-bar` component. The component has moved from the `fiori` library to the `main` library, and the import path needs to be updated accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Running all tests with yarn\nDESCRIPTION: This command executes all tests found in the `test/specs/` directory of your package using yarn. It launches a static server, so ensure the project has been built or the dev server is running (`build` or `start`) beforehand.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: UI5 Web Components Editor Instantiation\nDESCRIPTION: This snippet instantiates an `Editor` component and passes the imported HTML and JavaScript strings as props. The `html` and `js` props are used to initialize the editor with the provided code content. This demonstrates how to dynamically load and display code snippets within the UI5 web components environment.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIAcknowledgement/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component with HTML and JS\nDESCRIPTION: This snippet renders an Editor component and passes the imported HTML and JavaScript strings as props. The html prop contains the HTML content, and the js prop contains the JavaScript content. The Editor component uses these props to display and potentially edit the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/ai/PromptInput/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Type Casting for Cypress Framework (TypeScript)\nDESCRIPTION: Type casts the framework property in the Cypress configuration as 'any' to resolve potential TypeScript type errors. This allows Cypress to correctly identify the UI5 Web Components framework.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/cypress-ct-ui5-webc/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nframework: '@ui5/cypress-ct-ui5-webc' as any,\n```\n\n----------------------------------------\n\nTITLE: Wizard Handlebars Template\nDESCRIPTION: This Handlebars template represents the structure for the `Wizard` component, where it iterates through the `_steps` which is a calculated state based on the steps slot, in order to render the steps inside the wizard. The code serves as an example and requires the definition of `_steps` to function properly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_41\n\nLANGUAGE: handlebars\nCODE:\n```\n{{!-- Wizard.hbs --}}\n<div class=\"ui5-wizard-root\">\n\t<nav>\n\t\t{{!-- _steps is a calculated state based on the steps slot --}}\n\t\t{{#each _steps}}\n\t\t\t<div class=\"ui5-wiz-step-root\">\n\t\t\t</div>\n\t\t{{/each}}\n\t</nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Import HTML with raw-loader (SAP UI5)\nDESCRIPTION: Imports the content of 'sample.html' as a string using raw-loader. This allows embedding the HTML directly into a JavaScript/TypeScript file. The imported HTML is assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/CheckBox/TextWrapping/TextWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: WDIO Simple Test Example\nDESCRIPTION: This is a basic WDIO test that loads a page, finds a web component, and checks if its inner content is rendered. It uses `browser.url` to load the page, `$` and `shadow$` to access elements, and `assert.ok` to check the rendering.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"ui5-demo rendering\", async () => {\n\tawait browser.url(\"test/pages/index.html\");\n\n\tit(\"tests if web component is correctly rendered\", async () => {\n\t\tconst innerContent = await browser.$(\"#myFirstComponent\").shadow$(\"div\");\n\t\tassert.ok(innerContent, \"content rendered\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, and CSS files as raw strings\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as raw strings using `raw-loader`. The `!!raw-loader!` syntax instructs webpack to load the file content as a string during the build process. These strings are later used to configure an editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/WithTable/WithTable.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Configure TypeScript for TSX Support in Cypress (JSON)\nDESCRIPTION: Configures TypeScript to support TSX syntax within Cypress test files. Sets compiler options such as module, moduleResolution, jsx, jsxImportSource, and types to enable proper TSX and Cypress support.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/cypress-ct-ui5-webc/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    \"./**/*\"\n  ],\n  \"compilerOptions\": {\n    \"module\": \"NodeNext\",\n    \"moduleResolution\": \"nodenext\",\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"@ui5/webcomponents-base\",\n    \"types\": [\n      \"cypress\"\n    ]\n  },\n  \"references\": [\n    {\n      \"path\": \"../\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RTL via HTML Attribute\nDESCRIPTION: This code snippet demonstrates how to set the 'dir' attribute on the body element to enable RTL (Right-to-Left) rendering for all UI5 Web Components within the page.  The 'dir' attribute is set to 'rtl', which affects the layout direction of the elements. This is a static way to configure RTL.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/02-RTL-and-compact-mode.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body dir=\"rtl\">\n    ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript as Raw String\nDESCRIPTION: This snippet imports a JavaScript file named `main.js` as a raw string using `raw-loader`. The `raw-loader` webpack loader is prefixed with `!!` to ensure that other configured loaders are not applied to this import. The imported JavaScript content is assigned to the `js` variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/MultipleFiles/MultipleFiles.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Defining Property Types and Default Values (TS)\nDESCRIPTION: This snippet demonstrates defining properties with different types (String, Number, Object, Boolean) and default values using the `@property` decorator. Boolean properties should always default to false.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyComponent extends UI5Element {\n\t@property()\n\ttext = \"Hello\";\n\n\t@property({ type: Number, noAttribute: true })\n\twidth = 1024;\n\n\t@property({ type: Number })\n\tscale = 0.5;\n\n\t@property({ type: Object })\n\tdata = {};\n\n\t/**\n\t * @private\n\t */\n\t@property({ type: Boolean })\n\t_isPhone = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering UI5 Web Component\nDESCRIPTION: This snippet renders the UI5 Web Component using an Editor component, passing the imported HTML, JavaScript, and CSS code as props. This allows a live preview or editing environment for the component. The html, js, and css variables hold the string content of their respective files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UploadCollection/Basic/Basic.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Renaming selected-dates-change event to selection-change\nDESCRIPTION: This code illustrates the renaming of the `selected-dates-change` event to `selection-change`, along with changes to event details (values -> selectedValues, dates -> selectedDateValues) for the Calendar component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing openPopover and showAt methods with open and opener properties\nDESCRIPTION: This snippet demonstrates the removal of the `openPopover` and `showAt` methods in favor of the `open` and `opener` properties for the `ui5-color-palette-popover` component. It highlights the transition from an imperative API to a declarative one.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\n----------------------------------------\n\nTITLE: Running Component Tests\nDESCRIPTION: These commands navigate to the `packages/main` directory and execute the test suite for a specific component using Yarn.  It allows developers to verify that their code changes do not introduce regressions and that the component behaves as expected.  Dependencies include Jest or a similar test runner.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ cd packages/main\n$ yarn test test/specs/Button.spec.js\n```\n\n----------------------------------------\n\nTITLE: Fixing links in starting page of new package.\nDESCRIPTION: Fixes an issue where the starting page of a newly created package had broken links. This improves the user experience by ensuring that all links on the starting page are functional and lead to the correct destinations.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_29\n\nLANGUAGE: None\nCODE:\n```\n* **framework:** fix links in starting page of new pkg [ci skip] ([475fed5](https://github.com/SAP/ui5-webcomponents/commit/475fed55504f4a15e8b26aaf3c9e4d73b55976ec))\n```\n\n----------------------------------------\n\nTITLE: Updating theming-base-content for UI5 Web Components\nDESCRIPTION: This snippet demonstrates the update of the theming-base-content dependency for the UI5 Web Components framework. It ensures that the framework utilizes the latest theming definitions and improvements. The update is triggered by a feature commit with a specific issue number.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* update theming-base-content ([#10402](https://github.com/SAP/ui5-webcomponents/issues/10402)) ([7ed2eda](https://github.com/SAP/ui5-webcomponents/commit/7ed2edaaf9924154fd70268dfc725fa3e539ddc9))\n```\n\n----------------------------------------\n\nTITLE: Fix Localization JS Error in UI5 Web Components\nDESCRIPTION: This snippet documents a bug fix that addresses a JavaScript error encountered when the \"sh\" locale is set within the UI5 web components localization package. The fix is identified by commit hash 9ace82c and relates to issues #4905 and #4904 on GitHub. This patch prevents errors related to locale handling.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Renaming UI5Element Render Method to Renderer (JavaScript/TypeScript)\nDESCRIPTION: This snippet illustrates the change from `UI5Element#render` to `UI5Element#renderer`.  Extend classes should now use `renderer` to define their rendering logic.  Both JavaScript and TypeScript examples are provided demonstrating the rename.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Popover Alignment - HTML\nDESCRIPTION: Illustrates the renaming of the `Left` and `Right` options for `horizontal-align` and `placement-type` to `Start` and `End` respectively in the `ui5-popover` component.  This change promotes better internationalization support.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Using ui5-tag before wrapping-type change HTML\nDESCRIPTION: Illustrates how ui5-tag would truncate text before the default wrapping-type property was changed from None to Normal. This example shows the component's behavior prior to the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tag>In Process</ui5-tag><!-- would truncate the text if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: List/Tree/UploadCollection Mode to SelectionMode - HTML\nDESCRIPTION: This snippet shows how to migrate from the deprecated 'mode' property to the new 'selectionMode' property in ui5-list, ui5-tree, and ui5-upload-collection components. It details the corresponding value changes from the old ListMode enum values to the new 'Single', 'Multiple', 'SingleStart', 'SingleEnd', 'SingleAuto', and 'None' values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_35\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-list class=\"list\" mode=\"SingleSelect\">\n<ui5-list class=\"list\" mode=\"MultiSelect\">\n<ui5-upload-collection mode=\"SingleSelectBegin\">\n<ui5-upload-collection mode=\"SingleSelectEnd\">\n<ui5-tree mode=\"SingleSelectAuto\" >\n<ui5-tree mode=\"None\" >\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-list class=\"list\" selection-mode=\"Single\">\n<ui5-list class=\"list\" selection-mode=\"Multiple\">\n<ui5-upload-collection selection-mode=\"SingleStart\">\n<ui5-upload-collection selection-mode=\"SingleEnd\">\n<ui5-tree selection-mode=\"SingleAuto\">\n<ui5-tree selection-mode=\"None\">\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript event handler definition\nDESCRIPTION: This JavaScript code defines a simple event handler function named `onClick`. This function is assigned to the `@click` attribute in the Handlebars template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nthis.onClick = event => {};\n```\n\n----------------------------------------\n\nTITLE: Renaming color property to value (HTML)\nDESCRIPTION: The `color` property of the `ui5-color-picker` component is renamed to `value`. This snippet demonstrates the required change in HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: List Item Import (Now)\nDESCRIPTION: Shows the updated import statements for ListItemStandard and ListItemCustom in TypeScript, reflecting the renaming of the components in a breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ListItemStandard from \"@ui5/webcomponents/ListItemStandard.js\";\nimport ListItemCustom from \"@ui5/webcomponents/ListItemCustom.js\";\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Conditional Rendering (if-else)\nDESCRIPTION: This example showcases conditional rendering with an `if-else` block.  A different label is rendered depending on the value of `hasText`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_24\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if hasText}}\n\t<label class=\"has-text\"><span>{{text}}</span></label>\n{{else}}\n\t<label class=\"empty-label\"></label>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor component with loaded code\nDESCRIPTION: This snippet renders an Editor component, passing the imported HTML, JavaScript, and CSS strings as props.  The component then uses these strings to initialize its state or display the code in a suitable format.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/WithTimeline/WithTimeline.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript code\nDESCRIPTION: Imports JavaScript code from the 'main.js' file using the raw-loader. The imported code is then used as the js property of the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TextArea/States/States.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Fixing Indonesian Language Fetching - JavaScript\nDESCRIPTION: This code snippet addresses an issue where the \"id\" (Indonesian) language was not being fetched correctly.  It provides a fix within the framework to ensure the language is properly retrieved. The resolution involves modifications to the language fetching mechanism.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **framework:** fix fetching \"id\" (indonesian) language ([#11251](https://github.com/SAP/ui5-webcomponents/issues/11251)) ([9a36df5](https://github.com/SAP/ui5-webcomponents/commit/9a36df5dc2191758abd665d6fb1014d645e322f7)), closes [#11233](https://github.com/SAP/ui5-webcomponents/issues/11233)\n```\n\n----------------------------------------\n\nTITLE: Using placement property in ui5-popover (ui5-carousel)\nDESCRIPTION: This snippet demonstrates the correct usage of the `placement` property in `ui5-popover`, replacing the deprecated `placement-type` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Using placement property in ui5-popover (ui5-carousel)\nDESCRIPTION: This snippet demonstrates the correct usage of the `placement` property in `ui5-popover`, replacing the deprecated `placement-type` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Toolbar Button Template Naming Convention (JavaScript)\nDESCRIPTION: These examples demonstrate the naming convention for the ToolbarButton template files. These files define the HTML structure for the component in the toolbar and in the popover, respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nToolbarButton.hbs and ToolbarPopoverButton.hbs\n```\n\n----------------------------------------\n\nTITLE: Importing List Items after rename TypeScript\nDESCRIPTION: Shows the new import statements for ListItemStandard and ListItemCustom after the renaming refactoring. This example demonstrates how to import these components after the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ListItemStandard from \"@ui5/webcomponents/ListItemStandard.js\";\nimport ListItemCustom from \"@ui5/webcomponents/ListItemCustom.js\";\n```\n\n----------------------------------------\n\nTITLE: Generating TS from HBS Templates in Javascript\nDESCRIPTION: This feature introduces the capability to generate TypeScript (TS) code directly from Handlebars (HBS) templates. This enhancement simplifies the development workflow by enabling the automatic generation of type-safe code from UI templates, improving the overall development experience within the UI5 Web Components ecosystem.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: ui5-list using ui5-li-group with header-text (New)\nDESCRIPTION: This HTML snippet shows how to use the `ui5-li-group` with `header-text` instead of the `ui5-li-groupheader`. Migrate to this way of defining group headers in lists.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n  <ui5-li-group header-text=\"Actions\">\n    <ui5-li>Delete Product</ui5-li>\n    <ui5-li>Audit Log Settings</ui5-li>\n  </ui5-li-group>\n</ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Using Web Component in HTML\nDESCRIPTION: This HTML code demonstrates how to use a custom web component within an HTML body. \nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<body>\n\t<my-component></my-component>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Render content in Editor component\nDESCRIPTION: Renders the imported HTML, CSS, and JavaScript code within an `<Editor>` component.  The component takes the HTML, CSS, and JS code as props.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/AI CustomPrompt/Level 3/Level 3.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: JavaScript Logic for AI Action\nDESCRIPTION: This JavaScript snippet likely contains the logic related to the UI5 table and the AI action within the header cell. It might include event handlers or data binding configurations related to the table. The 'js' variable within the parent context indicates this contains the JavaScript code related to the sample.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/HeaderCellActionAI/HeaderCellActionAI.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Enable Default Tooltips Configuration (HTML)\nDESCRIPTION: This HTML code snippet demonstrates how to disable default tooltips in UI5 Web Components. Default tooltips are typically recommended for accessibility, but you may want to turn them off if you are implementing custom tooltip visualizations.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n\t\"enableDefaultTooltips\": false\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, and CSS with raw-loader\nDESCRIPTION: This snippet uses raw-loader to import the content of HTML, JavaScript, and CSS files as strings. The '!!raw-loader!' prefix tells webpack to load the file content as a raw string, which can then be used as a prop for a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/WithTimeline/WithTimeline.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Sample\nDESCRIPTION: This snippet imports a JavaScript file as a raw string using a raw-loader. This allows the JavaScript content to be used directly as a string within the JavaScript code, likely to populate an editor component or provide sample code for execution.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/Modes/Modes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Get and Use i18n Bundle - JavaScript\nDESCRIPTION: Retrieves the i18n bundle using the identifier \"myApp\" and then uses the `getText` method to get a translated text for the key \"PLEASE_WAIT\". The translated text is then logged to the console. The `getText` function can accept multiple parameters to replace placeholders in the translated text.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/08-using-i18n-for-apps.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bundle = await getI18nBundle(\"myApp\");\nconst pleaseWait = bundle.getText(\"PLEASE_WAIT\");\nconsole.log(\"Please wait in the current language is: \", pleaseWait);\n```\n\n----------------------------------------\n\nTITLE: Replacing UI5Element Render Method - Javascript/Typescript\nDESCRIPTION: This code snippet demonstrates the replacement of the `render` method with the `renderer` method in the `UI5Element` class.  Subclasses of `UI5Element` need to update their static getter to return the renderer under the new property name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript Files\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using raw-loader. These strings are then intended to be used as props for a UI component. Raw-loader is used to read the content of the files as strings, which is useful for embedding code directly into components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiComboBox/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Example of Individual Slots Output - HTML\nDESCRIPTION: This example shows the resulting HTML structure after rendering individual slots. Each child element has a unique slot name derived from the `_individualSlot` property, allowing for targeted styling and positioning.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_57\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"item-wrapper\"><slot name=\"items-1\"></slot></div>\n<div class=\"item-wrapper\"><slot name=\"items-2\"></slot></div>\n<div class=\"item-wrapper\"><slot name=\"items-3\"></slot></div>\n```\n\n----------------------------------------\n\nTITLE: ui5-view-settings-dialog API Change (Breaking Change)\nDESCRIPTION: This snippet illustrates the breaking change in the `ui5-view-settings-dialog` API. The `show()` and `close()` methods are removed, replaced by the `open` property. The code shows how to migrate from using the methods to using the property to control the dialog's visibility.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewSettingsDialog = document.getElementById(\"exampleID\");\nviewSettingsDialog.show();\nviewSettingsDialog.close();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewSettingsDialog = document.getElementById(\"exampleID\");\nviewSettingsDialog.open = true;\nviewSettingsDialog.open = false;\n```\n\n----------------------------------------\n\nTITLE: Importing Table Cell Component\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `ui5-table-cell` component from the `@ui5/webcomponents-compat` package.  This import statement makes the component available to render cells within the `ui5-table` component. It is part of the compatibility package and will be deprecated in a future version.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/TableCell.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming status property to additionalText (HTML)\nDESCRIPTION: The `status` property and its shadow part in `ui5-card-header` have been renamed to `additionalText`. This snippet demonstrates how to update the code to use `additionalText` instead of `status` for setting the status text.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Fixing Release Build in UI5 Web Components\nDESCRIPTION: This commit addresses a bug within the release build process. The fix likely resolves issues preventing successful package releases or causing incorrect builds, ensuring a proper distribution of the UI5 web components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_28\n\nLANGUAGE: Git\nCODE:\n```\n### Bug Fixes\n\n* release build ([#8222](https://github.com/SAP/ui5-webcomponents/issues/8222)) ([27042ac](https://github.com/SAP/ui5-webcomponents/commit/27042ac90443dea8d5900d1c5bfa5bc93d365da0))\n```\n\n----------------------------------------\n\nTITLE: Fixing Scoping Issues - UI5 Web Components\nDESCRIPTION: This bug fix addresses scoping issues within UI5 Web Components and provides documentation on how scoping should be used correctly. This ensures that styles and variables are applied correctly within the components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * scoping issues and document how scoping is used correctly ([#10023](https://github.com/SAP/ui5-webcomponents/issues/10023)) ([ee808c3](https://github.com/SAP/ui5-webcomponents/commit/ee808c309f316fe145b05d292c92328396c655ab))\n */\n```\n\n----------------------------------------\n\nTITLE: Render Editor component with HTML and JavaScript\nDESCRIPTION: This snippet renders the editor component using the imported HTML and JavaScript strings. The 'html' and 'js' variables, which contain the content of the respective files, are passed as props to the `<Editor />` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/Design/Design.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming selected-dates-change to selection-change (TypeScript)\nDESCRIPTION: The event selected-dates-change is renamed to selection-change, and event details values and dates are renamed to selectedValues and selectedDateValues. This snippet shows how to update event listener.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as strings\nDESCRIPTION: Imports the content of sample.html and main.js as strings into JavaScript variables named `html` and `js` respectively, using `raw-loader`. This allows the contents of these files to be used directly within JavaScript code, likely for rendering or manipulation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Set1/Set1.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Default Slot Usage - Handlebars and HTML\nDESCRIPTION: Illustrates the use of a default slot in the component template and its corresponding usage in HTML. In the template, a `<slot>` element is defined without a `name` attribute. In HTML, the slotted content is placed directly within the component element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_32\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{!-- MyDemoComponent.hbs --}}\n<div class=\"my-component-root\">\n\t<slot></slot>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- index.html -->\n<my-demo-component>\n\t<span>Hello World</span>\n</my-demo-component>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML and JavaScript in Editor Component\nDESCRIPTION: This snippet shows how to use the imported HTML and JavaScript strings with an `Editor` component. It likely configures and displays these snippets in an interactive editor or viewer within the UI5 Web Components environment. The `html` and `js` variables are passed as props to the `Editor` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toast/Duration/Duration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing LegacyDateFormats Feature - JavaScript\nDESCRIPTION: This JavaScript code imports the LegacyDateFormats feature, enabling support for older date formats in date-related UI5 Web Components.  This allows for compatibility with existing systems that use older date formats, and needs to be imported before component modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-base/dist/features/LegacyDateFormats.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript files as strings - JavaScript\nDESCRIPTION: This snippet uses `raw-loader` to import the contents of `sample.html` and `main.js` files as strings. These strings are then assigned to the `html` and `js` variables respectively. These variables are later used as props for an Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Text/CustomStyling/CustomStyling.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js module and related APIs\nDESCRIPTION: This snippet demonstrates the removal of the `CSP.js` module and related APIs for managing Content Security Policy in UI5 Web Components. The APIs `setUseLinks`, `setPackageCSSRoot`, and `setPreloadLinks` are no longer available.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining language-specific i18n translations (properties)\nDESCRIPTION: This snippet illustrates how to provide translations for specific languages in UI5 Web Components.  It creates a `messagebundle_{locale}.properties` file (e.g., `messagebundle_es.properties`) and defines the translation for a specific key (`PLEASE_WAIT` in this case). The snippet shows a Spanish translation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/09-internationalization.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# Spanish translation\nPLEASE_WAIT=Espere\n```\n\n----------------------------------------\n\nTITLE: Resulting SVG with tabindex and role button - HTML\nDESCRIPTION: This snippet demonstrates the resulting HTML in the shadow DOM when the `mode` property of `ui5-icon` is set to 'Interactive'. The SVG element has `tabindex=\"0\"` and `role=\"button\"` attributes, making the icon interactive for assistive technologies.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<svg tabindex=\"0\" role=\"button\" ... ></svg>\n```\n\n----------------------------------------\n\nTITLE: JavaScript for UI5 Table Single Selection\nDESCRIPTION: This JavaScript snippet likely contains the logic to handle single selection events and other table interactions within a UI5 Web Components table. It might include event listeners for selection changes and any custom logic related to selected rows. It complements the HTML structure by adding interactive behavior.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/SelectionSingle/SelectionSingle.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Table Column Component\nDESCRIPTION: This code snippet shows how to import the `ui5-table-column` component from the `@ui5/webcomponents-compat` package.  This allows you to use the `ui5-table-column` web component in your application. This component is part of the compatibility package intended as a temporary measure until the new Table component is released.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/TableColumn.js\";\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Main\nDESCRIPTION: This code snippet imports the JavaScript content from the 'main.js' file using a raw-loader. This allows the JavaScript code to be treated as a raw string, enabling it to be used in the JavaScript part of the editor component. This makes it easier to manage the code example by separating it into individual files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Token/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing a Calendar Type (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to import a specific calendar type (Islamic) from the `@ui5/webcomponents-localization` library. This step is necessary to use the Islamic calendar type in date-related components.  Calendar types are opt-in features that need to be explicitly imported.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Islamic.js\";\n```\n\n----------------------------------------\n\nTITLE: Updating ui5-busy-indicator Size Property - HTML\nDESCRIPTION: This code snippet demonstrates the change in accepted values for the `size` property of the `ui5-busy-indicator` component. The older string values should be replaced with new single character values to align with the updated API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Enhancing Event Decorator - JavaScript\nDESCRIPTION: This commit enhances the `@event` decorator. This likely involves adding new features or improving the existing functionality of the decorator. Enhancements to the event decorator can simplify event handling and improve code readability.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n* enhance `[@event](https://github.com/event)` decorator ([#9944](https://github.com/SAP/ui5-webcomponents/issues/9944)) ([fe1d816](https://github.com/SAP/ui5-webcomponents/commit/fe1d816f512400b839fd4ce1b9af1506d0cb4c9a))\n```\n\n----------------------------------------\n\nTITLE: Listening to co-pilot-click event JavaScript\nDESCRIPTION: Illustrates the usage of the `co-pilot-click` event which has been removed in the newer versions. This showcases how the event was utilized before the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nshellbar.addEventListener(\"ui5-co-pilot-click\", function(event) {\n\t...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, CSS, and JavaScript Files\nDESCRIPTION: This snippet imports HTML, CSS, and JavaScript files as raw strings using `raw-loader`. The imported content is then stored in the `html`, `css`, and `js` variables respectively. These variables are later used to configure the Web Components editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIGuidedPrompt/DynamicSideContent/DynamicSideContent.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport css from '!!raw-loader!./main.css';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Japanese Calendar Feature - JavaScript\nDESCRIPTION: This code imports the Japanese calendar feature, enabling support for the Japanese calendar within UI5 Web Components, specifically date-related components such as ui5-date-picker. This facilitates accurate date representation according to the Japanese calendar system.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Japanese.js\"\n```\n\n----------------------------------------\n\nTITLE: Removal of the disabled property from ui5-option\nDESCRIPTION: This documents the removal of the `disabled` property from the `ui5-option` component. Code shows existing usage that will no longer work.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_24\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Replacing slot=\"subTabs\" with slot=\"items\" (ui5-carousel)\nDESCRIPTION: The `subTabs` slot in `ui5-tab` has been replaced with the `items` slot. This snippet demonstrates the HTML change required to use the `items` slot instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Importing a Web Component in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to import a custom web component module. The import statement makes the component available for use within the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"{PACKAGE-NAME}/dist/MyComponent.js`\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JS Files for UI5 Webcomponents Editor\nDESCRIPTION: This JavaScript snippet imports HTML and JavaScript files using `raw-loader`. The `raw-loader` is configured (using `!!`) to disable all pre-configured loaders for these specific import statements, ensuring the raw content of the files is loaded as strings. These strings are then assigned to the `html` and `js` variables respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Panel/StickyHeader/StickyHeader.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Integrate HTML and JS into Editor - JavaScript\nDESCRIPTION: Renders an editor component, passing the imported HTML and JavaScript code snippets as props.  This allows the editor to display and potentially modify the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/CheckBox/Indeterminate/Indeterminate.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to Angular Project (ngx)\nDESCRIPTION: Creates a new Angular application named 'ui5-web-components-ngx-application' using the Angular CLI and navigates into the project directory.  This provides the basic structure for an Angular project that will use UI5 Web Components for Angular.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nng new ui5-web-components-ngx-application\ncd ui5-web-components-ngx-application\n```\n\n----------------------------------------\n\nTITLE: Renaming Breadcrumbs Properties\nDESCRIPTION: This snippet describes the renaming of `separator-style` to `separators` and renaming `BreadcrumbsSeparatorStyle` to `BreadcrumbsSeparator`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Running all tests with npm\nDESCRIPTION: This command runs all tests located in the `test/specs/` directory of your package using npm. A static server is launched during execution. Make sure the project has been built or the dev server is running before executing this command.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Checkbox Wrapping Behavior (Now)\nDESCRIPTION: Shows the new default behavior of the ui5-checkbox component, where text wraps to the next line if there is not enough space. The wrapping-type property is now set to Normal by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-checkbox text=Some very very very very long text\"></ui5-checkbox> <!-- would let the text wrap if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Using Component in UI5 Toolbar (HTML)\nDESCRIPTION: This code snippet shows how to use the newly created component inside the `ui5-toolbar`. The `ui5-toolbar-button` elements are placed within the toolbar's content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-toolbar>\n  <ui5-toolbar-button text=\"Button 1\" disabled></ui5-toolbar-button>\n  <ui5-toolbar-button text=\"Button 2\"></ui5-toolbar-button>\n</ui5-toolbar>\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Component\nDESCRIPTION: This code snippet configures an 'Editor' component. It passes the previously imported HTML and JavaScript content as 'html' and 'js' properties. This suggests that the Editor component uses these properties to display or process the given HTML and JavaScript.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/IllustratedMessage/WithDialog/WithDialog.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Configure Web Components Editor\nDESCRIPTION: This code snippet configures a web components editor. It utilizes the imported HTML and JavaScript strings to set up the editor with initial content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/CalendarWeekNumbering/CalendarWeekNumbering.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component\nDESCRIPTION: This snippet renders an Editor component, passing the imported HTML and JavaScript strings as props. This allows for displaying and editing the code within the UI. The 'html' and 'js' variables contain the raw strings of the respective files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SegmentedButton/SelectionModes/SelectionModes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JS files as raw strings - JavaScript\nDESCRIPTION: Imports HTML and JavaScript files as raw strings using raw-loader. This allows embedding the content of these files directly into the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Label/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Separator Component\nDESCRIPTION: This code snippet shows how to import the `TabSeparator` component from the `@ui5/webcomponents` package. The `TabSeparator` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/TabSeparator.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Component with HTML and JS\nDESCRIPTION: This code snippet configures an 'Editor' component by passing the imported HTML and JavaScript strings as props. The html prop takes the content of the 'sample.html' file, and the js prop takes the content of the 'main.js' file. The Editor component is responsible for rendering and managing this content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ExpandableText/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure with Column Configuration\nDESCRIPTION: This HTML snippet defines the structure of a UI5 Table, potentially including column definitions and their width configurations (width, minWidth, maxWidth). The exact content will depend on the 'sample.html' file. It serves as the template for rendering the table in the UI.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/ColumnWidths/ColumnWidths.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Adding New Icon Collection\nDESCRIPTION: This snippet represents the addition of a new icon collection to the business suite icons. The commit adds functionality for displaying business related icons. The icon collection is introduced in commit 2ff477f as part of issue #3461.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_31\n\nLANGUAGE: none\nCODE:\n```\n* **icons-business-suite:** add new icon collection ([#3461](https://github.com/SAP/ui5-webcomponents/issues/3461)) ([2ff477f](https://github.com/SAP/ui5-webcomponents/commit/2ff477f))\n```\n\n----------------------------------------\n\nTITLE: Setting the Language (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to set the language for UI5 Web Components using the `setLanguage` function from the `@ui5/webcomponents-base` library.  This allows you to configure the components to display text in the specified language, overriding the default browser language settings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { setLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\nsetLanguage(\"fr\");\n```\n\n----------------------------------------\n\nTITLE: Update SAP Icons to v5.11 & 4.23 - UI5 Web Components\nDESCRIPTION: This feature updates the SAP Icons library to versions v5.11 and v4.23. The update includes new icons, improvements, and bug fixes provided by the SAP Icons library. This enhancement is related to issue #10930 and the corresponding commit hash is 47b5942.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\n47b5942\n```\n\n----------------------------------------\n\nTITLE: Replacing showAt with open/opener (ui5-carousel)\nDESCRIPTION: The `showAt` method is removed from `ui5-carousel`'s popover in favor of the `open` and `opener` properties. This snippet demonstrates how to migrate from the imperative `showAt` method to the declarative `open` and `opener` properties for popover handling.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Styling using Attribute Selector (CSS)\nDESCRIPTION: This snippet shows an example of CSS styling using an attribute selector for a UI5 Web Component.  This is the preferred method as it targets the component regardless of any tag name suffix.  The selector targets components with the `ui5-button` attribute.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n[ui5-button] {\n\twidth: 50px;\n}\n```\n\n----------------------------------------\n\nTITLE: Import HTML Sample\nDESCRIPTION: This code snippet imports the HTML content from the 'sample.html' file using a raw-loader. The raw-loader treats the file as a raw string, making it available for use in the JavaScript code. This is used to populate the HTML section of the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Token/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript Files for UI5 Editor\nDESCRIPTION: This JavaScript snippet imports HTML and JavaScript files using raw-loader. The imported HTML and JavaScript contents are then passed as props to a component named 'Editor'. This enables the dynamic editing and rendering capabilities of the UI5 Web Components Editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/MinMax/MinMax.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import Raw HTML Content\nDESCRIPTION: This snippet imports the raw HTML content from the 'sample.html' file using 'raw-loader'. The 'raw-loader' plugin is likely used by a bundler like webpack to read the file as a string. This string is then assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/MinMax/MinMax.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Editor Component with HTML and JS\nDESCRIPTION: This snippet renders the `<Editor>` component, passing the imported HTML and JavaScript code as props. The `html` prop is assigned the content of the 'sample.html' file, and the `js` prop is assigned the content of the 'main.js' file. The editor will use these props to display the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Raw Loader\nDESCRIPTION: This snippet imports a JavaScript file as a raw string using the raw-loader. Similar to the HTML import, the raw-loader reads the file content as a string. The imported JavaScript code is assigned to the `js` variable, allowing its use in the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RatingIndicator/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Alignment Options\nDESCRIPTION: This snippet describes how the `Left` and `Right` options for `horizontal-align` and `placement-type` on `ui5-popover` have been renamed to `Start` and `End`. Developers need to adjust their popover configurations accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_77\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Main\nDESCRIPTION: This command merges the changes from the `upstream/main` branch into the local `main` branch. This synchronizes the fork with the upstream repository, incorporating any recent changes without overwriting local modifications. It resolves any merge conflicts during the merge process.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ git merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Fixing legacy date customization in localization\nDESCRIPTION: This commit addresses a bug related to legacy date customization within the localization package. It modifies the code to ensure proper handling of legacy date formats, resolving issues with date representation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlocalization: legacy date customization ([#10026](https://github.com/SAP/ui5-webcomponents/issues/10026)) ([273c015](https://github.com/SAP/ui5-webcomponents/commit/273c01597ae483fdfe1996dad733d32e4c9a13a9))\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript Code\nDESCRIPTION: This snippet imports HTML and JavaScript files as strings using `raw-loader`. The imported strings are then passed as props to an `<Editor>` component. `raw-loader` is a webpack loader that allows importing files as raw strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/SelectionAssistant/TextAreaSelectionAssistant/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Chained if-else-if\nDESCRIPTION: This example demonstrates a chained `if-else-if` block to render different content based on multiple conditions. It chooses which content to render (image, icon, or initials) based on the available properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_26\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if hasImage}}\n\t<slot></slot>\n{{else if icon}}\n\t<ui5-icon class=\"ui5-avatar-icon\" name=\"{{icon}}\" accessible-name=\"{{accessibleNameText}}\"></ui5-icon>\n{{else if initials}}\n\t<span class=\"ui5-avatar-initials\">{{validInitials}}</span>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' files as strings using 'raw-loader'. The imported strings are assigned to the 'html' and 'js' variables respectively. These variables are later used to configure the web component editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Set2/Set2.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Property assignment in Handlebars with dot prefix\nDESCRIPTION: This example illustrates property assignment in Handlebars using the `.` prefix.  Instead of setting an attribute, the `.item` binding sets a property directly on the DOM element.  The `data-info` attribute shows the standard attribute binding.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_33\n\nLANGUAGE: handlebars\nCODE:\n```\n<div\n\t\tid=\"{{id}}\"\n\t\tdata-info=\"{{someString}}\"\n\t\t.item=\"{{myItem}}\"\n>\n\t{{text}}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fixes for Dev Server imports\nDESCRIPTION: This commit corrects the way the development server imports yargs, a command-line argument parsing library. The fix ensures that yargs is imported correctly, preventing issues during development, addressing issue #10048.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Default Font Loading Configuration (HTML)\nDESCRIPTION: This HTML code snippet shows how to configure UI5 Web Components to prevent default font faces from being fetched over the network. This setting is useful if you want to control font loading manually.  Typically this setting should not be changed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n\t\"defaultFontLoading\": false\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, CSS, and JS Modules\nDESCRIPTION: Imports HTML, CSS and JavaScript code as raw strings from separate files using raw-loader. This is typically done to embed the code directly into a component for display or editing.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/AI Writing Assistant/Input.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport css from '!!raw-loader!./main.css';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Initial (Experimental) Implementation of ui5-ai-prompt-input - JavaScript\nDESCRIPTION: This commit introduces an experimental implementation of the ui5-ai-prompt-input component.  This component is designed to handle user prompts, potentially integrating with AI features within the SAP UI5 Web Components framework. This was implemented as part of issue #9078.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Using Shadow Parts to Style CardHeader\nDESCRIPTION: This HTML snippet defines a ui5-card component with a ui5-card-header slot. The status attribute is set to \"4 of 10\". The corresponding CSS snippet styles the status part of the ui5-card-header using the ::part() selector.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/11-styles.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ui5-card>\n\t<ui5-card-header\n        title-text=\"Quick Links\"\n\t\tstatus=\"4 of 10\"\n\t\tslot=\"header\">\n\t</ui5-card-header>\n</ui5-card>\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component\nDESCRIPTION: This snippet configures an `Editor` component, passing the imported HTML and JavaScript content as properties.  The `Editor` component likely uses these properties to initialize or display the content within its interface. The specific behavior of the Editor component depends on its implementation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Adding OpenUI5 Types as a Dependency\nDESCRIPTION: This commit adds OpenUI5 types as a dependency to ensure compatibility and proper type checking within the ui5-webcomponents project. The associated issue is #6346 and the commit hash is 2f06c71eefb455db179cdbb9bd4b293af5b5aa2b.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\n2f06c71eefb455db179cdbb9bd4b293af5b5aa2b\n```\n\n----------------------------------------\n\nTITLE: Event Handler Parameter Types\nDESCRIPTION: Illustrates how to specify the event parameter type for event handlers defined as methods in the component.  The `UI5CustomEvent` type helper is used for custom events.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_19\n\nLANGUAGE: TSX\nCODE:\n```\n<ResponsivePopover\n    onBeforeClose={this._beforeCloseHandler}\n/>\n\nimport { type UI5CustomEvent } from \"@ui5/webcomponents-base\";\nclass MyCompponent {\n    _beforePopoverClose(e: UI5CustomEvent<ResponsivePopover, \"before-close\">) {\n        e.detail.escPressed;\n//               ~~~~~~~~~~\n//      (property) escPressed: boolean\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Placement Properties\nDESCRIPTION: This code snippet showcases the renaming of `placementType` to `placement` for the property name and `PopoverPlacementType` to `PopoverPlacement` for the enum. It demonstrates the changes needed both in HTML and Javascript.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: CSS Styling using Tag Selector (CSS)\nDESCRIPTION: This snippet shows an example of CSS styling using a tag selector for a UI5 Web Component.  It is discouraged to use tag selectors directly because the tag name might be suffixed. It's better to use attribute selectors instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\nui5-button {\n\twidth: 50px;\n}\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript source for SAP UI5 Editor\nDESCRIPTION: Imports the JavaScript source code from the 'main.js' file using raw-loader. This allows the JavaScript to be used as a string within the JavaScript code for the SAP UI5 Web Components editor. The '!!raw-loader!' syntax ensures that webpack processes the file as a raw string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/ValuePrecision/ValuePrecision.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Adding JSDoc Namespace Feature in Javascript\nDESCRIPTION: This feature allows users to provide a JSDoc namespace when creating a package. It enhances the documentation capabilities of the package creation process, aligning with best practices for code maintainability and discoverability within UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Initialize Editor Component\nDESCRIPTION: This snippet initializes an editor component, presumably a custom component named `<Editor>`, and passes the imported HTML and JavaScript code as props. The `html` and `js` variables, containing the source code, are passed as properties to the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/WithoutInput/WithoutInput.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript for Base Package - JavaScript\nDESCRIPTION: This snippet migrates the base package to TypeScript (TS). By migrating the base package to Typescript, the codebase benefits from stronger typing and maintainability. It also encourages consistent coding practices across different modules of the project\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\n* use Typescript for the `base` package ([#5982](https://github.com/SAP/ui5-webcomponents/issues/5982)) ([bd184d8](https://github.com/SAP/ui5-webcomponents/commit/bd184d81a4218328bc7bf04baf2bc1f69a361679))\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content with raw-loader\nDESCRIPTION: This snippet imports the JavaScript content from the `./main.js` file using the `raw-loader`. The `raw-loader` is a webpack loader that allows importing the raw content of a file as a string. The imported content is assigned to the `js` variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ToggleButton/Design/Design.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing All Business Suite Icons - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import all the icons from the `@ui5/webcomponents-icons-business-suite` package.  Importing all icons is generally not recommended for performance reasons, but is supported.  This import makes all icons available for use in your UI5 Web Components application.  No specific prerequisites are required, other than having the `@ui5/webcomponents-icons-business-suite` package installed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-icons-business-suite/dist/AllIcons.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming ui5-badge to ui5-tag (Old)\nDESCRIPTION: This HTML snippet shows the old name of the component `ui5-badge`. It has been renamed to `ui5-tag`. The old name will no longer work.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ui5-badge></ui5-badge>\n```\n\n----------------------------------------\n\nTITLE: Replacing UI5Element Render Method\nDESCRIPTION: This snippet explains the replacement of `UI5Element#render` with `UI5Element#renderer`. Developers need to switch from the `render` getter to the `renderer` getter in their custom UI5Element extensions.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Source Map Paths JavaScript\nDESCRIPTION: This snippet fixes the source maps by inlining the sources in the .map file, eliminating the need for the src folder to be mandatory. It addresses issue #6732 in the ui5-webcomponents project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\ninline sources in the .map file so the src folder is not mandatory ([#6732](https://github.com/SAP/ui5-webcomponents/issues/6732)) ([16771a6](https://github.com/SAP/ui5-webcomponents/commit/16771a64d7b13f418af9afa1a03b224fe3762775))\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as raw strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using `raw-loader`.  The `!!raw-loader!` syntax forces webpack to use the raw-loader for these imports, regardless of other configurations. This is necessary to pass the code directly to the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/AvatarGroup/GroupWithPopover/GroupWithPopover.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML source for SAP UI5 Editor\nDESCRIPTION: Imports the HTML source code from the 'sample.html' file using raw-loader. This allows the HTML to be used as a string within the JavaScript code for the SAP UI5 Web Components editor.  The '!!raw-loader!' syntax ensures that webpack processes the file as a raw string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/ValuePrecision/ValuePrecision.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to an Angular Application\nDESCRIPTION: Creates a new Angular application named 'ui5-web-components-application' using the Angular CLI and then navigates into the newly created directory using the `cd` command. This sets the stage for further configuration and development.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nng new ui5-web-components-application\ncd ui5-web-components-application\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component\nDESCRIPTION: This snippet renders an 'Editor' component, passing the imported HTML and JavaScript strings as props named 'html' and 'js', respectively. This is likely a custom component designed to display and edit the provided code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Size/Size.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Component in Bundle (JavaScript)\nDESCRIPTION: This code shows how to import the new component into the bundle file for the library. This ensures that the component is included when the library is built and deployed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ToolbarButton from \"./dist/ToolbarButton.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing ui5-bar from main library (ui5-carousel)\nDESCRIPTION: The `ui5-bar` component has been moved from the `fiori` library to the `main` library. This snippet illustrates the required import statement change from `@ui5/webcomponents-fiori/dist/Bar.js` to `@ui5/webcomponents/dist/Bar.js`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Firing Event with Default Configuration (TS)\nDESCRIPTION: This snippet demonstrates firing an event with the default `fireEvent` configuration (bubbling: true, cancelable: false).\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fires the event as NOT preventable and bubbling\nthis.fireEvent(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content as raw string\nDESCRIPTION: This snippet imports the content of the 'main.js' file as a raw string using 'raw-loader'. This allows embedding the JavaScript code directly into the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/WithIcons/WithIcons.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component\nDESCRIPTION: This snippet configures an Editor component by passing the imported HTML and JavaScript strings as properties. The `html` prop likely sets the initial HTML content of the editor, and the `js` prop likely sets the initial JavaScript code in the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/Modes/Modes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML File with raw-loader\nDESCRIPTION: Imports an HTML file named 'sample.html' using the raw-loader webpack plugin. The content of the HTML file is loaded as a string and assigned to the variable 'html'. This string can then be used within the application, for example, as a template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Breadcrumbs/BreadcrumbsStyles/BreadcrumbsStyles.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Using HTML and JS in Editor Component\nDESCRIPTION: This code snippet shows how to pass the imported HTML and JavaScript strings as props to an `<Editor />` component.  The `html` prop receives the HTML content, and the `js` prop receives the JavaScript content. This is a common pattern for providing initial content to a code editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Avatar/Basic/Basic.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Interface ICardHeader to CardHeader (TypeScript)\nDESCRIPTION: The `ICardHeader` interface has been replaced with the `CardHeader` type. This snippet illustrates how to import and use the new `CardHeader` type instead of the old `ICardHeader` interface.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting accessibleName on ui5-combobox\nDESCRIPTION: This HTML snippet shows how to set the `accessibleName` property on a `ui5-combobox` component. This property maps to the `aria-label` attribute in the shadow DOM, providing an accessible name for the combobox.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ui5-combobox accessible-name=\"Enter Value\">\n    <ui5-cb-item text=\"Item 1\"></ui5-cb-item>\n</ui5-combobox>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input role=\"combobox\" aria-label=\"Enter value\" ... >\n```\n\n----------------------------------------\n\nTITLE: Renaming selected-dates-change Event - TypeScript\nDESCRIPTION: This snippet shows the renaming of the `selected-dates-change` event to `selection-change` in the Calendar component, along with the corresponding changes to event details (`values` to `selectedValues`, `dates` to `selectedDateValues`).\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component\nDESCRIPTION: This snippet configures the `Editor` component by passing the imported HTML and JavaScript strings as properties.  The `html` and `js` properties are used to initialize the editor's content and behavior. The `Editor` component is assumed to be defined elsewhere.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/MenuEndContent/MenuEndContent.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Rename Popover Placement Type - HTML, Javascript\nDESCRIPTION: Demonstrates how to rename the `placementType` property to `placement` and update the import from `PopoverPlacementType.js` to `PopoverPlacement.js` for `ui5-popover`. This change provides a more consistent API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as Raw Strings\nDESCRIPTION: This snippet imports HTML and JavaScript code from separate files (sample.html and main.js) as raw strings using the 'raw-loader' webpack loader. These strings are then passed as props to the 'Editor' component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TabContainer/TextOnlyTabs/TextOnlyTabs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files as raw strings\nDESCRIPTION: This snippet imports the content of `sample.html` and `main.js` as raw strings using `raw-loader`. This allows the HTML and JavaScript code to be used directly within the JavaScript file for configuration purposes, likely for a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiComboBox/MultiComboBoxSelectAll/MultiComboBoxSelectAll.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing FetchDefaultLanguage Configuration\nDESCRIPTION: Imports the `getFetchDefaultLanguage` and `setFetchDefaultLanguage` functions from the `@ui5/webcomponents-base/dist/config/Language.js` module. These functions are used to get and set the flag that defines whether the default language should be fetched automatically.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getFetchDefaultLanguage, setFetchDefaultLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Setup\nDESCRIPTION: This snippet provides the shell commands to build the project, run Cypress tests for a specific package, and start a static server to inspect the code coverage results in a browser.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n# build the project\nyarn build\n# run the tests for a pacakge\ncd packages/main\nyarn test:cypress\n# start a static server in the `coverage` folder and inspect the results in the browser\nhttp-server coverage\n```\n\n----------------------------------------\n\nTITLE: Updating Busy Indicator Size Values - HTML\nDESCRIPTION: This snippet illustrates the change in allowed values for the `size` property of the `ui5-busy-indicator` component. The example shows how the 'Small' value is replaced with 'S'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Renaming ui5-carousel Page Indicator Style - HTML\nDESCRIPTION: This code snippet demonstrates the renaming of the `page-indicator-style` property in `ui5-carousel` to `page-indicator-type`.  The older property name needs to be replaced to align with the updated API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: ValueState Renaming\nDESCRIPTION: Demonstrates the breaking change related to renaming `ValueState` values. `ValueState.Warning`, `ValueState.Error`, and `ValueState.Success` have been renamed to `ValueState.Critical`, `ValueState.Negative`, and `ValueState.Positive`, respectively.  The code demonstrates the previous usage and the updated usage with new values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ui5-input value-state=\"Success\"></ui5-input>\n<ui5-input value-state=\"Warning\"></ui5-input>\n<ui5-input value-state=\"Error\"></ui5-input>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-input value-state=\"Positive\"></ui5-input>\n<ui5-input value-state=\"Critical\"></ui5-input>\n<ui5-input value-state=\"Negative\"></ui5-input>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the raw-loader webpack plugin. The imported strings will be used to populate the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toolbar/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Removing show-overflow and using overflowButton slot (ui5-carousel)\nDESCRIPTION: The `show-overflow` property has been removed from `ui5-tabcontainer`. This snippet illustrates how to use the `overflowButton` slot instead to achieve the same functionality.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_48\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript content as raw string\nDESCRIPTION: Imports the content of 'main.js' as a raw string using 'raw-loader'. This allows embedding the JavaScript code directly into the JavaScript code or components for execution or manipulation. The imported JavaScript is assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ColorPalettePopover/MoreColors/MoreColors.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Updating Busy Indicator Size Values\nDESCRIPTION: This snippet demonstrates changing the `size` property values of the `ui5-busy-indicator`. The older size value `Small` should be replaced with `S`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_73\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Using Custom SVG Icon in UI5 Web Components\nDESCRIPTION: This snippet demonstrates how to use a custom SVG icon that has been registered via the template method. It shows the icon being used in `ui5-icon` and `ui5-avatar` components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/03-using-icons.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon name=\"custom/backery-dining\"></ui5-icon>\n<ui5-avatar icon=\"custom/backery-dining\" size=\"XS\"></ui5-avatar>\n```\n\n----------------------------------------\n\nTITLE: Partials - Function calls as Templates\nDESCRIPTION: Demonstrates the usage of partials in JSX as function calls that return other templates. Functions `sideContent` and `mainContent` are invoked using `call(this)` to maintain the correct context.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\n{this._isSideContentFirst ?\n    <>\n        { sideContent.call(this) }\n        { mainContent.call(this) }\n    </>\n    :\n    <>\n        { mainContent.call(this) }\n        { sideContent.call(this) }\n    </>\n}\n```\n\n----------------------------------------\n\nTITLE: Import HTML as string\nDESCRIPTION: This snippet imports the content of 'sample.html' as a raw string. The 'raw-loader' webpack loader is used to read the file's content directly into the 'html' variable. This is often used for embedding HTML templates within JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toast/Placement/Placement.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import HTML Sample\nDESCRIPTION: This snippet imports the contents of the `sample.html` file as a raw string using `raw-loader`. This allows the HTML content to be used directly within the JavaScript code, for example, to populate a code editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/Horizontal/Horizontal.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an `<Editor>` component, passing the imported HTML and JavaScript strings as props named `html` and `js` respectively. The `<Editor>` component is presumably responsible for displaying and editing the provided HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/SelectionAssistant/TextAreaSelectionAssistant/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js}/>\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Referencing Looped Item\nDESCRIPTION: This example shows how to assign the entire looped-over item to a property of the current HTML element.  This is achieved by using `this` inside the loop, which refers to the current item object.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each items}}\n\t<div id=\"{{id}}\"\n\t\t .item=\"{{this}}\"\n\t>{{text}}</div>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor component with HTML and JavaScript (JavaScript)\nDESCRIPTION: Renders an 'Editor' component, passing the imported HTML and JavaScript content as props named 'html' and 'js', respectively. This suggests that the Editor component is designed to display or process HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/TwoColumnsLayout/TwoColumnsLayout.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Resulting title attribute in shadow DOM - HTML\nDESCRIPTION: This snippet shows the resulting HTML in the shadow DOM after setting the `tooltip` property. The `title` attribute is set to \"Edit\", which provides a tooltip and is used by screen readers as an accessible name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<button title=\"Edit\" ... ></button>\n```\n\n----------------------------------------\n\nTITLE: Importing AI PromptInput Module - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the `ui5-ai-prompt-input` module in JavaScript.  This import makes the `ui5-ai-prompt-input` web component available for use. This is required before using the PromptInput component from the `@ui5/webcomponents-ai` package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-ai/dist/PromptInput.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming Calendar Event and Details (TypeScript)\nDESCRIPTION: This snippet illustrates the renaming of the `selected-dates-change` event to `selection-change` in the Calendar component.  The event details `values` and `dates` are renamed to `selectedValues` and `selectedDateValues` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs Separator Style Update HTML\nDESCRIPTION: This snippet shows the deprecated usage of `separator-style` property in `ui5-breadcrumbs` and its replacement with the `separators` property. The `BreadcrumbsSeparatorStyle` enum is renamed to `BreadcrumbsSeparator` as well.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: JavaScript Properties Within a Component (TS)\nDESCRIPTION: This snippet demonstrates the creation of a regular JavaScript property within a component's constructor. These properties are not managed by the UI5 framework and do not cause invalidation or attribute conversion.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor() {\n\tsuper();\n\tthis._isMobile = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting tsconfig moduleResolution to node\nDESCRIPTION: This commit reverts the tsconfig moduleResolution setting to 'node'.  This change addresses a build issue related to module resolution and ensures compatibility with the intended build process.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntools: revert tsconfig moduleResolution to node ([#10014](https://github.com/SAP/ui5-webcomponents/issues/10014)) ([0724b92](https://github.com/SAP/ui5-webcomponents/commit/0724b9289ad04f88972d4978ed37e76f13abca13))\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with raw-loader\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' as strings using raw-loader. This allows the HTML and JavaScript to be used as input for the SAP UI5 Web Components editor. The raw-loader is a webpack loader that allows importing files as raw strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/HeaderTextWrapping/HeaderTextWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Introducing ui5-calendar-legend Component in UI5 Web Components\nDESCRIPTION: This feature introduces the ui5-calendar-legend component to the ui5-webcomponents library. The component is added as part of version 1.23.0-rc.0.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_30\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n*   **ui5-calendar-legend:** introduce ui5-calendar-legend component ([#7706](https://github.com/SAP/ui5-webcomponents/issues/7706)) ([909a602](https://github.com/SAP/ui5-webcomponents/commit/909a6028362b55e26fdb5ca7a1ed68c8c6197a6b))\n```\n\n----------------------------------------\n\nTITLE: Removing the `co-pilot-click` event from `ui5-shellbar` (JavaScript)\nDESCRIPTION: Shows how to remove the `co-pilot-click` event listener from the `ui5-shellbar` component.  The `co-pilot-click` public event is removed in the updated version. Removing the event listener will resolve the issue. It will no longer work for the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nshellbar.addEventListener(\"ui5-co-pilot-click\", function(event) {\n\t...\n});\n```\n\n----------------------------------------\n\nTITLE: Interface Replacement - Typescript\nDESCRIPTION: Illustrates the replacement of the `ICardHeader` interface with the `CardHeader` type.  Older implementations that use the `ICardHeader` interface should be updated to use the `CardHeader` type instead. This change promotes a consistent and standardized approach to defining card headers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript as Raw Strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using raw-loader. These raw strings are then passed as properties to an Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toolbar/ItemsAlignment/ItemsAlignment.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML snippet with raw-loader\nDESCRIPTION: This snippet imports the content of the sample.html file as a string using raw-loader. Raw-loader allows importing files as raw strings, which is useful for including HTML templates or other static content in JavaScript modules. The imported HTML content is assigned to the html variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/ItemColumnSpan/ItemColumnSpan.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Render SAP UI5 Web Components Editor\nDESCRIPTION: Renders the SAP UI5 Web Components editor using the imported HTML and JavaScript source code. The 'html' and 'js' variables are passed as props to the '<Editor />' component. This likely configures the editor with the specified initial content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/ValuePrecision/ValuePrecision.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an `Editor` component, passing the imported HTML and JavaScript strings as props named 'html' and 'js' respectively. This suggests that the Editor component is designed to display or manipulate HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toast/Placement/Placement.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Add build theme script to package.json\nDESCRIPTION: This JSON snippet adds a `build:theme` script to the `package.json` file, allowing you to compile the LESS file using the command `npm run build:theme`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n \"scripts\": {\n    \"build:theme\": \"node customtheme.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Theming update to theming-base-content version 11.17.1\nDESCRIPTION: This commit updates the theming-base-content dependency to version 11.17.1. This update likely includes bug fixes, performance improvements, and new features related to theming within the UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Class maps in Handlebars\nDESCRIPTION: This snippet shows how to use class maps in Handlebars. A `classes` getter (or property) returns an object defining CSS classes and their conditions. Classes are applied based on the truthiness of the conditions. Used to toggle CSS classes on DOM elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_45\n\nLANGUAGE: handlebars\nCODE:\n```\n<article class=\"{{classes.main}}\">\n\t<div class=\"{{classes.content}}\"></div>\n\t<section class=\"{{classes.section}}\"></section>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, and CSS files as strings\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as raw strings using raw-loader. This allows the content of these files to be used directly as properties or data within the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/UnselectableParentItems/UnselectableParentItems.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: This snippet imports the raw content of an HTML file (sample.html) into a JavaScript variable named 'html'. The 'raw-loader' is used to treat the HTML file as a raw string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Breadcrumbs/BreadcrumbsOverflow/BreadcrumbsOverflow.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import HTML content\nDESCRIPTION: Imports HTML content from 'sample.html' as a raw string using raw-loader. This allows embedding the HTML code directly into a JavaScript/TypeScript component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/OverlayMode/OverlayMode.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor with HTML and JavaScript\nDESCRIPTION: This snippet initializes an editor component with the imported HTML and JavaScript code. The 'html' and 'js' variables, which contain the string content of the respective files, are passed as props to the '<Editor />' component. The component is expected to render an editor with the provided HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RangeSlider/ShowTooltip/ShowTooltip.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Using ui5-li-group with header-text property (ui5-list)\nDESCRIPTION: This snippet demonstrates the recommended usage of `ui5-li-group` with the `header-text` property to create list groups with headers. This replaces the deprecated `ui5-li-groupheader` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_60\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n  <ui5-li-group header-text=\"Actions\">\n    <ui5-li>Delete Product</ui5-li>\n    <ui5-li>Audit Log Settings</ui5-li>\n  </ui5-li-group>\n</ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Replacing openPopover and showAt Methods - JavaScript/HTML\nDESCRIPTION: This snippet demonstrates the removal of `openPopover` and `showAt` methods in favor of `open` and `opener` properties for controlling popover visibility declaratively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\n----------------------------------------\n\nTITLE: Replacing Show-Overflow Property with OverflowButton Slot - HTML\nDESCRIPTION: This snippet shows how to replace the deprecated `show-overflow` property with the `overflowButton` slot and `startOverflowButton` slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Default design property value change (ui5-badge)\nDESCRIPTION: The default value of the `design` property of `ui5-badge` has changed from `Set3` to `Neutral`.  To retain the old look and feel, the `design` property must now be explicitly set to `Set3`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_62\n\nLANGUAGE: html\nCODE:\n```\n<ui5-badge></ui5-badge>\n```\n\n----------------------------------------\n\nTITLE: Using ui5-shellbar with showCoPilot property HTML\nDESCRIPTION: Illustrates the usage of the `showCoPilot` property, which has been removed in the newer versions. This showcases how the property was utilized before the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-shellbar show-co-pilot></ui5-shellbar>\n```\n\n----------------------------------------\n\nTITLE: Component Usage with Attribute Selector (HTML)\nDESCRIPTION: This snippet demonstrates how to use a custom element with an attribute that is used in the CSS styling with the `:host` selector.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<my-comopnent size=\"XS\"></my-comopnent> <!-- :host() targets my-component -->\n```\n\n----------------------------------------\n\nTITLE: Rendering with Editor Component\nDESCRIPTION: This snippet renders an Editor component, passing the imported HTML and JavaScript strings as the `html` and `js` properties respectively. This allows displaying and potentially editing the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toolbar/ItemsAlignment/ItemsAlignment.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript with raw-loader\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using webpack's raw-loader. The imported strings are then passed as props to the Editor component for rendering and editing.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Popover/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML Template\nDESCRIPTION: Imports the HTML template for the sample component. This is used to define the structure and layout of the component's user interface.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/RowAction/RowAction.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import HTML content\nDESCRIPTION: Imports the HTML content from the 'sample.html' file using raw-loader. This allows embedding the HTML as a string directly into the JavaScript code. The imported HTML will be used to populate the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/DatePickerInDifferentTimezone/DatePickerInDifferentTimezone.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import Raw JavaScript Content\nDESCRIPTION: This snippet imports the raw JavaScript content from the 'main.js' file using 'raw-loader'.  The 'raw-loader' plugin reads the file as a string. This string is then assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/MinMax/MinMax.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: UI5 Web Components Editor Initialization\nDESCRIPTION: This snippet initializes a UI5 Web Components editor using the previously imported HTML and JavaScript code strings. The <Editor> component presumably takes these strings as input to display and allow editing of the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Panel/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Slot (Unnamed) - HTML\nDESCRIPTION: This snippet demonstrates how to render the default (unnamed) slot in an HTML template. Any children passed to the web component without a `slot` attribute will be rendered at this location in the shadow DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_51\n\nLANGUAGE: HTML\nCODE:\n```\n<slot></slot>\n```\n\n----------------------------------------\n\nTITLE: Replacing TabContainerBackgroundDesign Import\nDESCRIPTION: This code snippet highlights the change from importing `TabContainerBackgroundDesign` to using `BackgroundDesign`.  The import path needs to be updated to reflect the renamed export.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nIf you previously imported `TabContainerBackgroundDesign`, use `BackgroundDesign` instead.\n```\n\n----------------------------------------\n\nTITLE: Deploy Website using SSH\nDESCRIPTION: This command deploys the Docusaurus website to GitHub Pages using SSH for authentication.  It builds the website and pushes it to the `gh-pages` branch. Ensure SSH keys are properly configured for seamless deployment.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Icon mode to Interactive - HTML\nDESCRIPTION: This snippet shows how to set the `mode` property to \"Interactive\" on a `ui5-icon` element. This makes the icon focusable and announces it as a button to screen readers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ui5-icon mode=\"Interactive\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML as Raw String - JavaScript\nDESCRIPTION: This snippet imports an HTML file as a raw string using `raw-loader`. This allows the HTML content to be used directly as a string within the JavaScript code, likely for rendering or manipulation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS and CSS files\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as raw strings using the 'raw-loader'. These strings are then passed as properties to a web component editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/BusyIndicator/WithComponent/WithComponent.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files as strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as strings using raw-loader. The imported strings are then passed to an Editor component, presumably for rendering and editing in a web application context.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Select/AdditionalText/AdditionalText.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content as raw string\nDESCRIPTION: This snippet imports the content of the 'main.js' file as a raw string using 'raw-loader'.  The raw string is assigned to the 'js' variable, intended for use within the editor component configuration.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/CalendarWithLegend/CalendarWithLegend.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript content\nDESCRIPTION: This code snippet imports the raw content of 'sample.html' and 'main.js' files as strings using the raw-loader. These strings are then used to populate the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/CalendarWeekNumbering/CalendarWeekNumbering.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming Color Picker Property - HTML\nDESCRIPTION: This code snippet demonstrates renaming the `color` property to `value` in `ui5-color-picker`. The older `color` property needs to be replaced with `value` in the component's markup.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Import HTML as raw string\nDESCRIPTION: This snippet imports the content of the 'sample.html' file as a raw string using 'raw-loader'. The raw string is then assigned to the 'html' variable for later use in configuring the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/TimePickerInDifferentTimezone/TimePickerInDifferentTimezone.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Including Custom Theme CSS via Link Tag in HTML\nDESCRIPTION: This code snippet demonstrates how to include the custom theme's CSS variables file in your HTML page using a `<link>` tag.  The `href` attribute points to the location where you copied the `css_variables.css` file within your project. This will apply the custom theme to your UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/12-theming.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<path-to-your-css-file>/css_variables.css\">\n```\n\n----------------------------------------\n\nTITLE: Removing Disabled Property from ui5-option\nDESCRIPTION: This snippet describes the removal of the `disabled` property from the `ui5-option` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Importing Table Assets\nDESCRIPTION: This code snippet illustrates how to import the assets (i18n, themes) for the table component from `@ui5/webcomponents-compat` package. These assets include theming parameters and translations for the components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing TabContainerBackgroundDesign with BackgroundDesign\nDESCRIPTION: This snippet indicates that `TabContainerBackgroundDesign` should be replaced with `BackgroundDesign`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Replacing ICardHeader interface with CardHeader type (TypeScript)\nDESCRIPTION: The ICardHeader interface has been removed.  This code snippet demonstrates how to replace the interface import with the CardHeader type import.  The CardHeader type should be used instead of the ICardHeader interface.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Calendar Event and Details\nDESCRIPTION: This snippet illustrates how `selected-dates-change` event is renamed to `selection-change` and the event details `values` and `dates` are renamed to `selectedValues` and `selectedDateValues` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content using raw-loader (JavaScript)\nDESCRIPTION: This snippet imports HTML content from 'sample.html' as a raw string using the raw-loader webpack plugin. This allows the HTML to be used dynamically within the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UserMenu/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: This snippet imports raw HTML content from a file named 'sample.html' using a raw-loader. The imported HTML is then assigned to the 'html' variable for later use, likely within a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateTimePicker/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component (JavaScript)\nDESCRIPTION: This snippet instantiates an `<Editor>` component, passing the imported HTML and JavaScript strings as props named `html` and `js`, respectively. The `Editor` component presumably renders an editor interface displaying and/or allowing modification of the HTML and JavaScript code. This is common in UI frameworks where components accept data through props.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/BardcodeScannerDialog/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor Component\nDESCRIPTION: This snippet initializes an 'Editor' component, passing the imported HTML and JavaScript strings as props. The Editor component is expected to render and provide editing capabilities for the HTML and JavaScript content.  The 'html' and 'js' variables are passed as properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Component Editor\nDESCRIPTION: This code snippet configures the `<Editor>` component with the imported HTML and JavaScript strings. The `html` and `js` variables containing raw string content are assigned as props to the `Editor` element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Popover/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Carousel PageIndicatorStyle to PageIndicatorType - HTML\nDESCRIPTION: This snippet demonstrates the change from the 'pageIndicatorStyle' property to the 'pageIndicatorType' property in the ui5-carousel component.  The old property is replaced by the new property with the same values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_41\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Inlining Sources in .map File\nDESCRIPTION: This commit inlines sources into the .map file, removing the mandatory requirement for the 'src' folder. The related issue is #6732 and the commit id is 16771a64d7b13f418af9afa1a03b224fe3762775. This makes debugging easier when the original source files are not readily available.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n16771a64d7b13f418af9afa1a03b224fe3762775\n```\n\n----------------------------------------\n\nTITLE: Importing Timezone Configuration\nDESCRIPTION: Imports the `getTimezone` function from the `@ui5/webcomponents-base/dist/config/Timezone.js` module. This function is used to get the timezone of the UI5 Web Components. Note: Timezone can only be set initially.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getTimezone } from \"@ui5/webcomponents-base/dist/config/Timezone.js\";\n```\n\n----------------------------------------\n\nTITLE: Initialize Editor Component with HTML and JS\nDESCRIPTION: This snippet instantiates an \"Editor\" component. It passes the imported HTML and JavaScript code as props. It uses the 'html' and 'js' variables, likely containing the raw content of corresponding files, to initialize the editor. The 'Editor' component is responsible for rendering the given HTML and execute JavaScript.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/compat/Table/SingleSelection/SingleSelection.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML content as raw string\nDESCRIPTION: Imports the content of 'sample.html' as a raw string using 'raw-loader'. This allows embedding the HTML directly into the JavaScript code or components for rendering or manipulation. The imported HTML is assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ColorPalettePopover/MoreColors/MoreColors.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content using raw-loader\nDESCRIPTION: This snippet imports the raw content of a JavaScript file (main.js) into a JavaScript variable named 'js'. The 'raw-loader' is used to read the JavaScript file as a string.  This is commonly used in webpack or similar bundlers to embed the raw JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/compat/Table/SingleSelection/SingleSelection.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Render HTML and JavaScript in Editor Component\nDESCRIPTION: This snippet renders the imported HTML and JavaScript code within an 'Editor' component. The 'html' and 'js' variables, which contain the raw content of the respective files, are passed as props to the component. This assumes that an 'Editor' component is available in the current scope.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Avatar/Styles/Styles.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming ui5-tab Slot - HTML\nDESCRIPTION: This code snippet demonstrates the change in the slot name from `subTabs` to `items` in the `ui5-tab` component. The slot name needs to be updated to reflect the new API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Web Component Editor Instance\nDESCRIPTION: This snippet instantiates a web component editor, passing the imported HTML and JavaScript strings as properties. The `Editor` component is expected to render and provide functionality for editing these code snippets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/ProductSwitch/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template Example\nDESCRIPTION: This example demonstrates a simple Handlebars template (`.hbs` file) that will be compiled to a lit-html template during the build process. It displays the value of the `text` property within a button element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<button>{{text}}</button>\n```\n\n----------------------------------------\n\nTITLE: Popover HorizontalAlign/PlacementType to Start/End - HTML\nDESCRIPTION: This snippet illustrates the change from using 'Left' and 'Right' values for horizontal-align and placement-type to using 'Start' and 'End' values in the ui5-popover component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_43\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Styling UI5 Button with CSS Variables\nDESCRIPTION: This CSS snippet demonstrates how to change the button text color by overriding the `--sapButton_TextColor` CSS variable. It targets the ui5-button custom element and sets the variable to purple.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/11-styles.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nui5-button {\n  --sapButton_TextColor: purple;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DefaultFontLoading Configuration\nDESCRIPTION: Imports the `getDefaultFontLoading` and `setDefaultFontLoading` functions from the `@ui5/webcomponents-base/dist/config/Fonts.js` module. These functions are used to get and set the default font loading behaviour.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getDefaultFontLoading, setDefaultFontLoading } from \"@ui5/webcomponents-base/dist/config/Fonts.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing HTML content as string\nDESCRIPTION: This snippet imports the content of 'sample.html' file as a raw string using 'raw-loader'. This allows the HTML to be used as a value within the JavaScript code, potentially to populate the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Renaming color property to value in ColorPicker\nDESCRIPTION: This snippet details renaming the `color` property to `value` in the `ui5-color-picker` component.  This change impacts how the color is set and accessed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Removing disabled property from ui5-option - HTML\nDESCRIPTION: This snippet illustrates the removal of `disabled` property from the `ui5-option` component. It emphasizes that this property no longer functions as intended and should be removed from the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_91\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML and JavaScript in Editor\nDESCRIPTION: This snippet renders an `<Editor>` component, passing the imported HTML (`html`) and JavaScript (`js`) strings as props. This allows the HTML and JavaScript code to be displayed and potentially edited within the UI.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/MultipleFiles/MultipleFiles.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Islamic Calendar Feature - JavaScript\nDESCRIPTION: This JavaScript code imports the Islamic calendar feature for UI5 Web Components. This feature enables support for the Islamic calendar in date-related components like ui5-date-picker, enriching the localization capabilities of the framework.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents-localization/dist/features/calendar/Islamic.js\"\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content\nDESCRIPTION: Imports JavaScript content from 'main.js' as a raw string using raw-loader. This is commonly used for embedding JavaScript code snippets into components for live editing or demonstrations.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/OverlayMode/OverlayMode.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Removing sap.ui.require Call from OpenUI5 Module - JavaScript\nDESCRIPTION: Removes an unnecessary sap.ui.require call from an unused OpenUI5 module. This resolves a potential issue or optimization related to module dependencies.  The change addresses issue #8359 on GitHub.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an Editor component, passing the imported HTML and JavaScript strings as props named 'html' and 'js' respectively. The Editor component is responsible for displaying and handling the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TextArea/MaxLength/MaxLength.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Color Palette Popover Component\nDESCRIPTION: This code snippet shows how to import the `ColorPalettePopover` component from the `@ui5/webcomponents` package. The `ColorPalettePopover` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ColorPalettePopover.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing TabContainerBackgroundDesign with BackgroundDesign\nDESCRIPTION: This documents the replacement of `TabContainerBackgroundDesign` with `BackgroundDesign` for usage with the TabContainer component. Code examples are not provided as this is a type/enum change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: IUploadCollectionItem Interface to UploadCollectionItem Type - JavaScript\nDESCRIPTION: This snippet demonstrates the change from using the IUploadCollectionItem interface to using the UploadCollectionItem type. The example shows the previous import statement for the interface and the new import statement for the type.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Defining isAdmin Getter\nDESCRIPTION: This JavaScript code defines a getter `isAdmin` which returns a boolean based on the value of `this.person.access`.  This calculated property is then used in the Handlebars template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nget isAdmin() {\n\treturn this.person.access === \"admin\";\n}\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: Imports HTML content from the 'sample.html' file using a raw-loader. This allows the HTML content to be treated as a string within the JavaScript code. The raw-loader is a webpack loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/List/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Renaming Breadcrumbs Properties\nDESCRIPTION: This code snippet demonstrates renaming the `separator-style` to `separators` and the `BreadcrumbsSeparatorStyle` enum is renamed to `BreadcrumbsSeparator` for the breadcrumbs component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Importing Date Time Picker Component\nDESCRIPTION: This code snippet shows how to import the `DateTimePicker` component from the `@ui5/webcomponents` package. The `DateTimePicker` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/DateTimePicker.js\";\n```\n\n----------------------------------------\n\nTITLE: Introducing ui5-toolbar Web Component\nDESCRIPTION: This feature introduces the ui5-toolbar web component to the ui5-webcomponents library. The component is added as part of version 1.17.0.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_35\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n*   **ui5-toolbar:** web component introduced ([#7024](https://github.com/SAP/ui5-webcomponents/issues/7024)) ([2f329fe](https://github.com/SAP/ui5-webcomponents/commit/2f329fe2d237d24f05ed140658e39752d6d9d8ae))\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Git Remote\nDESCRIPTION: This command configures a new remote named `upstream` in the local Git repository, pointing to the official UI5 Web Components repository. This allows fetching changes from the upstream repository to keep the fork synchronized. The upstream URL is `https://github.com/SAP/ui5-webcomponents.git`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ git remote add upstream https://github.com/SAP/ui5-webcomponents.git\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript files as strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as strings using raw-loader. The imported strings `html` and `js` likely contain the content of the respective files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Switch/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Install UI5 Web Component package\nDESCRIPTION: This command shows how to install a UI5 Web Component package named `my-ui5-webcomponents` using npm.  The `--save` flag adds the package as a dependency to the project's `package.json` file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i my-ui5-webcomponents --save\n```\n\n----------------------------------------\n\nTITLE: Replacing show-overflow property with overflowButton slot\nDESCRIPTION: This code illustrates how the `show-overflow` property of the `ui5-tabcontainer` component has been replaced with the `overflowButton` slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Using ui5-link after wrapping-type change HTML\nDESCRIPTION: Demonstrates the behavior of ui5-link after the change to wrapping-type, now allowing long links to wrap. This shows the updated behavior after the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-link>some very very very long link</ui5-link> <!-- would let the text wrap if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Indicator Component\nDESCRIPTION: This code snippet shows how to import the `RatingIndicator` component from the `@ui5/webcomponents` package. The `RatingIndicator` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/RatingIndicator.js\";\n```\n\n----------------------------------------\n\nTITLE: List Item Import (Before)\nDESCRIPTION: Demonstrates the previous import statements for StandardListItem and CustomListItem in TypeScript, which have been renamed in a breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport StandardListItem from \"@ui5/webcomponents/StandardListItem.js\";\nimport CustomListItem from \"@ui5/webcomponents/CustomListItem.js\";\n```\n\n----------------------------------------\n\nTITLE: Use UI5 Web Component (Button) - HTML\nDESCRIPTION: Demonstrates how to use the imported `ui5-button` web component within an HTML template.  The `Hello world!` text is displayed as the button's label.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button>Hello world!</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor component\nDESCRIPTION: This snippet renders an Editor component, passing the imported HTML and JavaScript code as props. The html prop receives the content of the sample.html file. The js prop receives the content of the main.js file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/ItemColumnSpan/ItemColumnSpan.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Busy Indicator Component\nDESCRIPTION: This code snippet shows how to import the `BusyIndicator` component from the `@ui5/webcomponents` package. The `BusyIndicator` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/BusyIndicator.js\";\n```\n\n----------------------------------------\n\nTITLE: Configure UI5 Web Components Editor\nDESCRIPTION: This snippet configures a UI5 Web Components editor by passing the imported HTML and JavaScript strings as props. The <Editor /> component utilizes the html and js props to populate its content and functionality.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/AditionalText/AditionalText.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Date Picker Component\nDESCRIPTION: This code snippet shows how to import the `DatePicker` component from the `@ui5/webcomponents` package. The `DatePicker` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/DatePicker.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing IUploadCollectionItem interface\nDESCRIPTION: This snippet demonstrates how to replace `IUploadCollectionItem` interface with the `UploadCollectionItem` type. Update your imports to reflect this change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Customizing WDIO Configuration\nDESCRIPTION: This JavaScript code demonstrates how to modify the default WDIO (WebdriverIO) configuration. It shows how to import the default configuration and then alter specific settings, such as disabling headless mode by modifying the Chrome options.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = require(\"@ui5/webcomponents-tools/components-package/wdio.js\");\n\tresult.config.capabilities[0][\"goog:chromeOptions\"].args = ['--disable-gpu']; // From: ['--disable-gpu', '--headless']\n\tmodule.exports = result;\n```\n\n----------------------------------------\n\nTITLE: Interface Replacement - Javascript\nDESCRIPTION: Illustrates the replacement of the `IUploadCollectionItem` interface with the `UploadCollectionItem` type.  Older implementations that use the `IUploadCollectionItem` interface should be updated to use the `UploadCollectionItem` type instead. This promotes consistency in defining upload collection items.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript Files as Strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as strings using the raw-loader. The `raw-loader!` prefix indicates that the content of the files should be loaded as raw strings rather than being parsed as modules. These strings are then used as props for the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/BusyIndicator/Sizes/Sizes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript File\nDESCRIPTION: This snippet imports a JavaScript file from `main.js` using `raw-loader`. The imported JavaScript code is assigned to the `js` variable for use in the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Popover/Placement/Placement.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming Card Header Status to additionalText (HTML)\nDESCRIPTION: This snippet demonstrates how to migrate from the `status` property and its shadow part to `additionalText` for the `ui5-card-header` component. The CSS part also needs to be renamed from `status` to `additional-text`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Calendar Event Selected-dates-change to Selection-change - TypeScript\nDESCRIPTION: This snippet demonstrates renaming the `selected-dates-change` event to `selection-change` of the Calendar. In addition, it shows the renaming of the event details `values` and `dates` to `selectedValues` and `selectedDateValues` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming selected-dates-change to selection-change event\nDESCRIPTION: This snippet illustrates renaming the `selected-dates-change` event to `selection-change` in the Calendar component.  It also highlights how the event details are renamed from `values` and `dates` to `selectedValues` and `selectedDateValues` respectively, requiring changes in the event listener.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: This snippet imports the HTML content from the 'sample.html' file using a raw-loader.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component\nDESCRIPTION: This snippet renders an 'Editor' component and passes the imported HTML and JavaScript content as props. The 'html' prop likely contains the HTML structure for the editor's display, while the 'js' prop probably includes the JavaScript code that defines the editor's behavior and functionality. This assumes that an 'Editor' component is defined elsewhere.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/UploadCollection/VariousUploadStates/VariousUploadStates.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with raw-loader\nDESCRIPTION: This code snippet imports HTML and JavaScript files as raw strings using the raw-loader. The imported strings are assigned to the html and js variables respectively. This approach is commonly used to embed file contents directly into JavaScript modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ExpandableText/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Replacing openPopover and showAt methods with open and opener properties (JavaScript/HTML)\nDESCRIPTION: The `openPopover` and `showAt` methods are removed in favor of the `open` and `opener` properties. This snippet demonstrates how to update the code to use declarative API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component\nDESCRIPTION: Configures the Editor component by passing the imported HTML and JavaScript content as props. The `html` and `js` variables contain the content from their respective files and are assigned to the corresponding props of the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/DatePickerInDifferentTimezone/DatePickerInDifferentTimezone.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Rendering User Input\nDESCRIPTION: This demonstrates how to render HTML using `{{{userInput}}}` to highlight portions of text based on user input. Sanitize any user-provided content before using this approach.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_20\n\nLANGUAGE: handlebars\nCODE:\n```\n<div>{{{userInput}}}</div>\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Icons JavaScript\nDESCRIPTION: This snippet adds and updates icons within the UI5 Web Components project.  It addresses issue #6754 in the ui5-webcomponents project, updating the @ui5/webcomponents-icons package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n**icons:** add/update icons ([#6754](https://github.com/SAP/ui5-webcomponents/issues/6754)) ([cad512a](https://github.com/SAP/ui5-webcomponents/commit/cad512aa3c3eaae81dfec340bfa3a51b3395eeee))\n```\n\n----------------------------------------\n\nTITLE: Fixing Inline Sources in UI5 .map File\nDESCRIPTION: This code snippet addresses a bug fix related to inline sources within the .map file. The fix ensures that the 'src' folder is no longer mandatory by inlining sources in the .map file. This resolves an issue where the project would fail if the source folder was missing.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_27\n\nLANGUAGE: N/A\nCODE:\n```\n/***\n* inline sources in the .map file so the src folder is not mandatory ([#6732](https://github.com/SAP/ui5-webcomponents/issues/6732)) ([16771a6](https://github.com/SAP/ui5-webcomponents/commit/16771a64d7b13f418af9afa1a03b224fe3762775))\n**/\n```\n\n----------------------------------------\n\nTITLE: noConflict Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the `noConflict` setting to control event name prefixes. When the setting is an object with an \"events\" array, only the events listed in the array will fire with the `ui5-` prefix.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/05-events.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"events\": [\"selection-change\", \"header-click\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Opting out of Forced Colors Mode with CSS\nDESCRIPTION: This CSS snippet prevents the user agent from automatically adjusting colors in forced colors mode. It uses the `forced-color-adjust` property set to `none` on the `html` element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/09-FAQ.md#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\nhtml {\n    forced-color-adjust: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: Renders an 'Editor' component, passing the imported HTML and JavaScript strings as props. This likely displays the HTML and JavaScript code in an editable interface.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithState/WithState.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as Raw Strings - JavaScript\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' files as raw strings using the 'raw-loader' webpack loader. The imported strings are assigned to the variables 'html' and 'js', respectively.  These variables are then used as props for a component called 'Editor'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TabContainer/TransparentDesign/TransparentDesign.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: Imports the content of the 'sample.html' file as a raw string using 'raw-loader'. This allows embedding the HTML structure directly into the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Text/Hyphenation/Hyphenation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Defining Unsafe Message\nDESCRIPTION: This JavaScript code defines a property `unsafeMessage` that contains HTML markup.  Using `{{{` and `}}}` to render this content can introduce security vulnerabilities if not handled carefully.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nthis.unsafeMessage = `<span>This is unsafe content</span>`;\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumbs Component\nDESCRIPTION: This code snippet shows how to import the `Breadcrumbs` component from the `@ui5/webcomponents` package. The `Breadcrumbs` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Breadcrumbs.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonBadge Component\nDESCRIPTION: This code snippet shows how to import the `ButtonBadge` component from the `@ui5/webcomponents` package. The `ButtonBadge` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ButtonBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Rename ColorPicker Property - HTML\nDESCRIPTION: Demonstrates renaming the `color` property to `value` in the `ui5-color-picker` component. Ensure the correct property name is used when setting the color.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component\nDESCRIPTION: This code snippet shows how to import the `Button` component from the `@ui5/webcomponents` package. The `Button` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Button.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component\nDESCRIPTION: This code snippet shows how to import the `TextArea` component from the `@ui5/webcomponents` package. The `TextArea` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/TextArea.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Component\nDESCRIPTION: This code snippet shows how to import the `Calendar` component from the `@ui5/webcomponents` package. The `Calendar` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Calendar.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using webpack's raw-loader. These strings are then passed as props to an Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TextArea/MaxLength/MaxLength.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming tabs-overflow-mode to overflow-mode\nDESCRIPTION: This snippet shows how to rename the property `tabs-overflow-mode` to `overflow-mode` in the `ui5-tabcontainer` element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Rename ui5-tabcontainer property - HTML\nDESCRIPTION: Illustrates how to rename the `tabs-overflow-mode` property of the `ui5-tabcontainer` component to `overflow-mode`. Update the property name to ensure correct functionality.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Resetting Button Width after Animations - AI Button\nDESCRIPTION: This bug fix resets the button width after animations on the ui5-ai-button. This prevents visual glitches and ensures that the button maintains its correct dimensions after animations complete.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * **ui5-ai-button:** reset button width after animations ([#9923](https://github.com/SAP/ui5-webcomponents/issues/9923)) ([2a5c7db](https://github.com/SAP/ui5-webcomponents/commit/2a5c7db734b08f629f41b586f4aa0f39b20de632))\n */\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Web Components via npm\nDESCRIPTION: This command installs the `@ui5/webcomponents` package using npm. This package contains the UI5 Web Components that can be used in your web application.  It's a prerequisite for using UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @ui5/webcomponents\n```\n\n----------------------------------------\n\nTITLE: Setting theme in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to set the theme of the web component. It uses the `setTheme` function from `@ui5/webcomponents-base`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\nsetTheme(\"sap_horizon_dark\");\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an Editor component and passes the imported HTML and JavaScript strings as props. The 'html' prop contains the HTML code, and the 'js' prop contains the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/TextWrapping/TextWrapping.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Passing HTML Element\nDESCRIPTION: This example shows how to pass an HTML element (not a string) directly to the Handlebars template. The element is rendered within the `p` tag.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_22\n\nLANGUAGE: handlebars\nCODE:\n```\n<p>{{messageDiv}}</p>\n```\n\n----------------------------------------\n\nTITLE: Using separators property in ui5-breadcrumbs (ui5-carousel)\nDESCRIPTION: This snippet demonstrates the correct usage of the `separators` property in `ui5-breadcrumbs`, replacing the deprecated `separator-style` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_57\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Remove disabled Property on ui5-option - HTML\nDESCRIPTION: Illustrates the removal of the `disabled` property from the `ui5-option` component.  Using the `disabled` property will no longer affect the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Fixing UI5 Input Item Selection Bugs\nDESCRIPTION: This snippet addresses and resolves bugs related to item selection in the ui5-input component, addressing issue #5372.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\n274efaa\n```\n\n----------------------------------------\n\nTITLE: Renaming separator-style to separators\nDESCRIPTION: This snippet illustrates renaming the `separator-style` property to `separators` and the `BreadcrumbsSeparatorStyle` enum to `BreadcrumbsSeparator`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Install theming-base-content\nDESCRIPTION: Installs the `@sap-theming/theming-base-content` package from NPM, which provides the LESS source files for the UI5 Web Components themes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sap-theming/theming-base-content\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the UI5 Web Components project using Yarn. It reads the `package.json` file and installs the listed packages into the `node_modules` directory. This is a required step before building and serving the project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Scope CSS Variables Per Runtime and Version - JavaScript\nDESCRIPTION: Introduces a mechanism to scope CSS variables based on runtime environment and version. This ensures that CSS variables are isolated and prevents conflicts between different runtimes or versions. See issue #7449 for the feature implementation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Declaring webpackChunkName in Dynamic Imports - JavaScript\nDESCRIPTION: Declares webpackChunkName in generated dynamic imports to enhance readability of runtime bundle names. This helps in identifying and managing webpack chunks more effectively during development and deployment. Implemented to improve bundle naming for dynamic imports.  See issue #8029 for details.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: Using Symmetric CSS Properties (LTR & RTL)\nDESCRIPTION: This snippet demonstrates that when you use symmetric CSS properties (e.g., padding-left and padding-right are both set to the same value), the result will be the same in both LTR and RTL layouts.  No mirroring is required.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n:host {\n\tpadding-left: 1rem;\n\tpadding-right: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming separator-style to separators and BreadcrumbsSeparatorStyle\nDESCRIPTION: This documents the renaming of the `separator-style` property to `separators` and the `BreadcrumbsSeparatorStyle` enum to `BreadcrumbsSeparator`.  Existing usages should migrate to the new name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Changing slot name from subTabs to items\nDESCRIPTION: This snippet shows how to change the slot name of a nested Tab element from `subTabs` to `items` in `ui5-tabcontainer`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component\nDESCRIPTION: This snippet configures an editor component by passing the imported HTML and JavaScript code as properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MultiInput/SuggestionsWrapping/SuggestionsWrapping.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JS with Raw Loader\nDESCRIPTION: This snippet demonstrates how to import HTML and JavaScript files as strings using raw-loader. The imported content is then assigned to variables 'html' and 'js', respectively.  This approach is commonly used to embed static code snippets within a UI5 web application or component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TextArea/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Table Row Component\nDESCRIPTION: This JavaScript snippet demonstrates how to import the `ui5-table-row` component.  The component is imported from the `@ui5/webcomponents-compat` package. This is part of the compatibility solution for the Table, and will be removed in a future release.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/TableRow.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing show-overflow property with overflowButton slot\nDESCRIPTION: This snippet demonstrates replacing the `show-overflow` property with the `overflowButton` slot in `ui5-tabcontainer`.  Now overflow buttons need to be explicitly placed in the `startOverflowButton` or `overflowButton` (end overflow) slots.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Reverting tsconfig moduleResolution to node\nDESCRIPTION: This code reverts the `moduleResolution` setting in the `tsconfig.json` file back to 'node'. This change likely addresses compatibility issues or build problems that arose from using a different module resolution strategy, addressing issue #10014.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Replacing IUploadCollectionItem interface\nDESCRIPTION: This snippet demonstrates replacing the `IUploadCollectionItem` interface with the `UploadCollectionItem` type. It illustrates the change in the import statement to use the new type.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Adding qr-code Icon JavaScript\nDESCRIPTION: This snippet adds the `qr-code` icon to the icon set. It addresses issue #4645 and closes issue #4643 in the ui5-webcomponents project, expanding the icon options available in the @ui5/webcomponents-icons package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n**icons:** add `qr-code` icon ([#4645](https://github.com/SAP/ui5-webcomponents/issues/4645)) ([0208103](https://github.com/SAP/ui5-webcomponents/commit/0208103)), closes [#4643](https://github.com/SAP/ui5-webcomponents/issues/4643)\n```\n\n----------------------------------------\n\nTITLE: Fetch Default Language Configuration (HTML)\nDESCRIPTION: This HTML code snippet shows how to configure UI5 Web Components to fetch the default `en` language over the network. By default, the `en` language is built in, but this setting forces it to be fetched as an additional asset, which is generally not recommended unless there are specific technical reasons to do so.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script data-ui5-config type=\"application/json\">\n{\n\t\"fetchDefaultLanguage\": true\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component\nDESCRIPTION: This snippet showcases the rendering of the editor component using the imported HTML and JavaScript code. The html and js variables are passed as props to the Editor component, providing the initial content for the editor. This creates a functional UI for editing these contents.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Token/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML as Raw String\nDESCRIPTION: This snippet imports an HTML file as a raw string using `raw-loader`. This allows the HTML content to be used directly as a string within JavaScript, typically for dynamic rendering or manipulation. The `html` variable now contains the entire content of `sample.html` as a string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/FilesFilter/FilesFilter.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Code Snippet - JavaScript\nDESCRIPTION: Imports a JavaScript code snippet from a file using raw-loader. The raw-loader enables importing the JavaScript file's content as a string. This string is then used as the initial value for the JavaScript editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/CheckBox/Indeterminate/Indeterminate.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Rename UI5Element render Method - Javascript, Typescript\nDESCRIPTION: Shows the renaming of the `render` method to `renderer` in classes extending `UI5Element`. The `render` getter should be replaced with `renderer` to align with the updated API.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Conditional Rendering (unless)\nDESCRIPTION: This snippet shows how to use the `unless` helper to render content only if a condition is false.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_25\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#unless _isPhone}}\n\t<p>Some content</p>\n{{/unless}}\n```\n\n----------------------------------------\n\nTITLE: Import CSS Content\nDESCRIPTION: This snippet imports the content of 'main.css' as a raw string using 'raw-loader'. The imported CSS is assigned to the 'css' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/PageIndicatorType/PageIndicatorType.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Render Editor component\nDESCRIPTION: Renders an Editor component passing the imported HTML and JavaScript as props. This component is responsible for rendering a live editor using the provided code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TextArea/States/States.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content\nDESCRIPTION: This snippet imports the content of 'main.js' as a raw string using 'raw-loader'. The imported JavaScript is assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/PageIndicatorType/PageIndicatorType.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming Size Property to Design for ui5-illustrated-message - HTML\nDESCRIPTION: This snippet shows the renaming of the `size` property to `design` for `ui5-illustrated-message` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files as raw strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using `raw-loader`. The `!!raw-loader!` syntax disables all pre-configured loaders for these specific imports, ensuring that the files are treated purely as raw strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/States/States.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content as string\nDESCRIPTION: Imports the content of 'main.js' as a raw string using 'raw-loader'. This allows the JavaScript code to be used as a JavaScript variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithState/WithState.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Install dependencies with Yarn\nDESCRIPTION: This command installs all project dependencies using Yarn package manager. It is required before running or building the project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn # to install all dependencies\n```\n\n----------------------------------------\n\nTITLE: Import HTML code\nDESCRIPTION: Imports HTML code from the 'sample.html' file using the raw-loader. The imported code is then used as the html property of the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TextArea/States/States.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters when Scoping CSS Vars - JavaScript\nDESCRIPTION: Fixes an issue where special characters were not properly escaped when scoping CSS variables. This ensures that CSS variables are correctly applied within the intended scope. The related issue is #7704 on GitHub.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: Render Editor component with HTML and JS\nDESCRIPTION: This snippet renders an `<Editor>` component, passing the imported `html` and `js` variables as props. The component likely uses these props to display and allow editing of the HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ToggleButton/Design/Design.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Setting ui5-icon mode (HTML)\nDESCRIPTION: The ariaHidden, interactive and accessibleRole properties of the ui5-icon component have been replaced with the mode property.  This snippet shows how to set different modes for the ui5-icon component using the new mode property and the IconMode enumeration. The available modes are Image, Interactive, and Decorative.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_24\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon id=\"imageIcon\" mode=\"Image\" name=\"add-equipment\"></ui5-icon>\n<ui5-icon id=\"myInteractiveIcon\" mode=\"Interactive\" name=\"add-equipment\"></ui5-icon>\n<ui5-icon id=\"decorativeIcon\" mode=\"Decorative\" name=\"add-equipment\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content as Raw String\nDESCRIPTION: This snippet imports the content of 'main.js' as a raw string using 'raw-loader'. The imported JavaScript is later used to populate the JavaScript editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming placementType to placement and PopoverPlacementType\nDESCRIPTION: This code shows the renaming of the `placementType` property and the `PopoverPlacementType` enum to `placement` and `PopoverPlacement` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Importing ui5-table components (TypeScript)\nDESCRIPTION: To use the ui5-table components, it is necessary to import them from the @ui5/webcomponents-compat package.  This code snippet demonstrates the required import statements for the Table, TableColumn, TableRow, TableGroupRow, and TableCell components.  These components must be imported to ensure proper functionality of the table.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/Table.js\"; // ui5-table\nimport \"@ui5/webcomponents-compat/dist/TableColumn.js\"; // ui5-table-column\nimport \"@ui5/webcomponents-compat/dist/TableRow.js\"; // ui5-table-row`\nimport \"@ui5/webcomponents-compat/dist/TableGroupRow.js\";` // ui5-table-group-row\nimport \"@ui5/webcomponents-compat/dist/TableCell.js\"; // ui5-table-cell\n```\n\n----------------------------------------\n\nTITLE: Import HTML Source Code\nDESCRIPTION: Imports the raw HTML source code from the 'sample.html' file using a raw-loader. This allows the HTML content to be used as a string within the JavaScript environment. The 'html' variable will contain the HTML code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/TextWrapping/TextWrapping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Using the Editor Component - JavaScript\nDESCRIPTION: This JavaScript snippet utilizes an `Editor` component and passes the previously imported `html`, `js`, and `css` strings as props. The component likely renders these code snippets within an editor interface for viewing or editing. The component expects the html, js and css properties to be strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/DynamicPage/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css}/>\n```\n\n----------------------------------------\n\nTITLE: Using TNT Icon with UI5 Web Component ui5-icon\nDESCRIPTION: This code snippet shows how to use a TNT icon with the `ui5-icon` web component.  The `name` attribute specifies the icon to be displayed. The framework automatically selects the appropriate version (v2 or v3) based on the current theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"tnt/actor\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Remove CSP Module Usage - Typescript\nDESCRIPTION: Demonstrates the removal of the CSP.js module and the corresponding APIs for managing `<style>` and `<link>` tags.  The `setUseLinks`, `setPackageCSSRoot`, and `setPreloadLinks` methods are no longer available and should be removed from the codebase.  This is due to browsers now supporting adoptedStyleSheets.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Alignment Options - HTML\nDESCRIPTION: This snippet demonstrates renaming the options for horizontal alignment and placement type in `ui5-popover` from `Left` and `Right` to `Start` and `End` respectively. The snippet shows the old and new attributes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Renaming ui5-card-header Status Property - HTML\nDESCRIPTION: This code snippet demonstrates renaming the `status` property and its shadow part in `ui5-card-header` to `additionalText`. The older `status` property and corresponding CSS part selector need to be updated to use the new `additionalText` property and `additional-text` CSS part selector.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Generating JSX Component Template for UI5 Web Components\nDESCRIPTION: This feature introduces the ability to generate JSX component templates using the @ui5/create-webcomponents-package. This allows developers to quickly create the necessary file structure and initial code for new web components using JSX syntax within the UI5 framework.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n*   **create-package:** generate jsx component template ([#10531](https://github.com/SAP/ui5-webcomponents/issues/10531)) ([dd2d45d](https://github.com/SAP/ui5-webcomponents/commit/dd2d45d4c3947f52773272f6a77be294f240d28f))\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as raw strings\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' files as raw strings using 'raw-loader'. These strings are then passed as props to the Editor component. The raw-loader is used to load the complete content of the files without any processing or transformations.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/CustomStyling/CustomStyling.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import HTML Template\nDESCRIPTION: This snippet imports an HTML template from the `sample.html` file using `raw-loader`. The imported HTML is assigned to the `html` variable for use in the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Popover/Placement/Placement.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Properties in React with UI5 Web Component\nDESCRIPTION: This snippet demonstrates how to handle boolean properties (like `collapsed`) in UI5 Web Components when used in React.  Instead of directly assigning `true` or `false`, the presence or absence of the property is controlled.  This example conditionally sets the `collapsed` property of a `ui5-panel` based on the length of an achievements array in the component's state.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/01-React.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ui5-panel header-text=\"Achievements\" collapsed={!this.state.achievements.length || undefined}>\n    {/* Content of ui5-panel */}\n</ui5-panel>\n```\n\n----------------------------------------\n\nTITLE: Renaming PopoverPlacementType enum\nDESCRIPTION: This snippet shows the renaming of the `placementType` property and the `PopoverPlacementType` enum.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_86\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\n----------------------------------------\n\nTITLE: Configure Editor Component\nDESCRIPTION: Configures an Editor component by passing the imported HTML, JavaScript, and CSS strings as props. This allows the editor to display and interact with the code defined in the imported files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/NavigationLayout/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Renaming selected-dates-change to selection-change (TypeScript)\nDESCRIPTION: The `selected-dates-change` event is renamed to `selection-change`, and its details `values` and `dates` are renamed to `selectedValues` and `selectedDateValues`. This snippet illustrates how to update the event listener.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ProgressIndicator Component\nDESCRIPTION: This code snippet shows how to import the `ProgressIndicator` component from the `@ui5/webcomponents` package. The `ProgressIndicator` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/ProgressIndicator.js\";\n```\n\n----------------------------------------\n\nTITLE: Pre-loading ListItemStandardExpandableText Feature - JavaScript\nDESCRIPTION: This JavaScript code pre-loads the ListItemStandardExpandableText feature for the ui5-li component.  Pre-loading skips dynamic import. Importing it adds support for expandable text in list items when the wrapping type is set to 'Normal'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/05-using-features.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/features/ListItemStandardExpandableText.js\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Tab SubTabs Slot to Items\nDESCRIPTION: This snippet demonstrates the change from using the `subTabs` slot to the `items` slot within the `ui5-tab` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: ColorPicker Color to Value - HTML\nDESCRIPTION: This snippet demonstrates renaming the `color` property to `value` of the ColorPicker.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_46\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Adding Property Initializers in UI5 Web Components\nDESCRIPTION: This commit introduces the addition of property initializers within the UI5 Web Components project. It includes changes related to the @property decorator and its adaptation to the new type parameter, which constitutes a breaking change that requires developers to adjust their implementations accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\nadd property initializers ([#8846](https://github.com/SAP/ui5-webcomponents/issues/8846)) ([eef0cc9](https://github.com/SAP/ui5-webcomponents/commit/eef0cc9b663fda6268b98e516ed46439435fa2b0))\n\nBREAKING CHANGES\n\n@property decorator must be adapted according to new type parameter\n```\n\n----------------------------------------\n\nTITLE: Configure UI5 Web Components Editor\nDESCRIPTION: This snippet configures a UI5 Web Components editor component by passing the imported HTML and JavaScript content as properties. The 'html' property sets the initial HTML structure, and the 'js' property provides the JavaScript logic for the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RangeSlider/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Enhancing @event Decorator - Framework\nDESCRIPTION: This feature enhances the `@event` decorator in the UI5 Web Components framework. It provides improved functionality and flexibility when defining custom events for components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * enhance `[@event](https://github.com/event)` decorator ([#9944](https://github.com/SAP/ui5-webcomponents/issues/9944)) ([fe1d816](https://github.com/SAP/ui5-webcomponents/commit/fe1d816f512400b839fd4ce1b9af1506d0cb4c9a))\n */\n```\n\n----------------------------------------\n\nTITLE: Import HTML content as raw string\nDESCRIPTION: This snippet imports the content of the 'sample.html' file as a raw string using 'raw-loader'. The raw string is assigned to the 'html' variable for later use in configuring the editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Calendar/CalendarWithLegend/CalendarWithLegend.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: TabContainer show-overflow to overflowButton slot - HTML\nDESCRIPTION: This snippet details how to remove `show-overflow` property and utilize `overflowButton` slot with `ui5-button` components instead for `ui5-tabcontainer` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_51\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Alignment Options (HTML)\nDESCRIPTION: This snippet demonstrates the change in values for `horizontal-align` and `placement-type` properties of the `ui5-popover` component. 'Left' and 'Right' are replaced with 'Start' and 'End' respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript as Raw String\nDESCRIPTION: This snippet imports the JavaScript content from the 'main.js' file as a raw string. Similar to the HTML import, the 'raw-loader' is used to treat the file content as a plain string, allowing it to be directly embedded into the component. This approach is often employed to encapsulate JavaScript logic within a component without requiring separate file requests.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/IconOnly/IconOnly.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Logic\nDESCRIPTION: This snippet imports the JavaScript logic for the table example. It uses `raw-loader` to load the JavaScript file as a string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/Virtualizer/Virtualizer.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an editor component, passing the imported HTML and JavaScript content as props. The 'html' prop receives the HTML content, and the 'js' prop receives the JavaScript content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/Filters/Filters.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Removing the `copilotDomRef` getter from `ui5-shellbar` (JavaScript)\nDESCRIPTION: Illustrates removing the `copilotDomRef` getter from the `ui5-shellbar` component.  The `copilotDomRef` public getter is removed in the updated version. Removing its usage will resolve the issue. It will no longer work for the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nshellbar.copilotDomRef\n```\n\n----------------------------------------\n\nTITLE: Replacing UI5Element render method with renderer\nDESCRIPTION: This snippet shows how to replace the `render` method with the `renderer` method in custom UI5 elements.  It illustrates the change in the static getter within a class extending `UI5Element`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Component with imported HTML and JS\nDESCRIPTION: This snippet renders a component named `<Editor>` and passes the imported HTML and JavaScript strings as props named `html` and `js`. This suggests that the `<Editor>` component likely uses these strings to dynamically generate or execute the UI.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Slider/ShowTooltip/ShowTooltip.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Adding Timezone Support (Experimental) in Localization\nDESCRIPTION: This code snippet highlights the addition of experimental timezone support to the ui5-webcomponents localization package. The feature allows developers to work with dates and times in specific timezones. The issue related to this feature is #6857 and the commit is aa91fd136f8bff757d476b83444f963d4299d562.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\naa91fd136f8bff757d476b83444f963d4299d562\n```\n\n----------------------------------------\n\nTITLE: ColorPalettePopover ShowAt to Open/Opener - JavaScript/HTML\nDESCRIPTION: This snippet demonstrates replacing `showAt` method with the `open` property and `opener` attribute for `ui5-color-palette-popover`. Also provided is the html portion of the change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JavaScript, and CSS files\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files using `raw-loader`. The `raw-loader` is used to load the files as strings, which are then assigned to the `html`, `js`, and `css` variables respectively. These variables are subsequently used to configure an `Editor` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/CustomHeader/CustomHeader.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, CSS for SAP UI5 Web Components\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files using raw-loader, making their content available as strings. These strings are then used as props for an Editor component, likely for rendering and editing UI elements within the SAP UI5 Web Components framework. The raw-loader webpack plugin is a prerequisite.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/MoreCards/MoreCards.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Compiled JSX Template\nDESCRIPTION: Shows the result of compiling a JSX template to JavaScript code.  It uses the `jsx` function from `@ui5/webcomponents-base/jsx-runtime` to create the UI element. The template is importing the jsx function and using it to render a \"div\" with specified attributes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { jsx as _jsx } from \"@ui5/webcomponents-base/jsx-runtime\";\n_jsx(\"div\", { class: \"header\", children: \"Hello World!\" });\n```\n\n----------------------------------------\n\nTITLE: Importing PopoverPlacementType - JavaScript\nDESCRIPTION: This snippet shows the JavaScript import statement required to use the `PopoverPlacementType` enum, which is likely associated with setting the `placement` property of the `ui5-popover` component. It imports the type from the specified module path.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Component Button (Native)\nDESCRIPTION: Imports the native Button web component from the UI5 Web Components library.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@ui5/webcomponents/dist/Button.js';\n```\n\n----------------------------------------\n\nTITLE: Adding Horizon Theme Parameters\nDESCRIPTION: This snippet introduces `sap_horizon_dark` and `sap_horizon_hcb(hcw)` theme parameters to the project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\ndc070a1\n```\n\n----------------------------------------\n\nTITLE: Compiled Lit-HTML Template (JavaScript)\nDESCRIPTION: This JavaScript code shows the result of compiling the Handlebars template. It imports necessary modules from `@ui5/webcomponents-base` and defines a `block0` function that returns a lit-html template string.  It demonstrates the use of `ifDefined` to safely render the `text` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nconst block0 = (context, tags, suffix) => html`<button>${ifDefined(context.text)}</button>`;\nexport default block0;\n```\n\n----------------------------------------\n\nTITLE: Renaming separator-style Property to Separators for ui5-breadcrumbs - HTML\nDESCRIPTION: This snippet shows how to replace the property name `separator-style` to `separators` and the enum `BreadcrumbsSeparatorStyle` to `BreadcrumbsSeparator` in the `ui5-breadcrumbs` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_24\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript\nDESCRIPTION: This snippet imports the raw content of HTML and JavaScript files using `raw-loader`. This is typically used in webpack or similar module bundlers to include file contents as strings within the JavaScript bundle. It sets up variables `html` and `js` containing the file contents.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Editor Component Initialization\nDESCRIPTION: This snippet initializes an editor component, passing the imported HTML and JavaScript code as properties. The 'html' property receives the content of sample.html, and the 'js' property receives the content of main.js.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/Groups/Groups.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: SegmentedButtonItem pressed property (Old)\nDESCRIPTION: This HTML snippet shows the old name of the `pressed` property. The `pressed` property is called `selected` now. The old name will no longer work.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<ui5-segmented-button>\n  <ui5-segmented-button-item pressed> Option 1</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 2</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 3</ui5-segmented-button-item>\n</ui5-segmented-button>\n```\n\n----------------------------------------\n\nTITLE: Import base theme CSS variables\nDESCRIPTION: This LESS snippet imports the CSS variables from the `sap_horizon` theme. This serves as the base upon which custom variables will be defined.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_2\n\nLANGUAGE: less\nCODE:\n```\n// src/mytheme.less\n\n@import \"../../node_modules/@sap-theming/theming-base-content/content/Base/baseLib/sap_horizon/css_variables.less\";\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content using raw-loader (JavaScript)\nDESCRIPTION: Imports the content of 'main.js' as a raw string using raw-loader. This allows the JavaScript code to be used directly within the current JavaScript file, possibly for embedding or executing within a specific context.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/TwoColumnsLayout/TwoColumnsLayout.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Using HTML and JavaScript in Editor Component\nDESCRIPTION: This code snippet utilizes the imported HTML and JavaScript content as props within the Editor component. The html prop receives the HTML content, and the js prop receives the JavaScript content. This renders the HTML and JavaScript in the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ProgressIndicator/States/States.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Removing Assets-static.js Modules - Typescript\nDESCRIPTION: This code snippet demonstrates the removal of `Assets-static.js` modules and their replacement with dynamic equivalents.  Static asset imports must be updated to import the dynamic versions to ensure proper asset loading.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Release Build in JavaScript\nDESCRIPTION: This JavaScript code snippet fixes an issue related to the release build process. The commit addresses a problem that was preventing successful release builds of the UI5 web components. This ensures that new versions of the components can be properly built and deployed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nrelease build ([#8222](https://github.com/SAP/ui5-webcomponents/issues/8222)) ([27042ac](https://github.com/SAP/ui5-webcomponents/commit/27042ac90443dea8d5900d1c5bfa5bc93d365da0))\n```\n\n----------------------------------------\n\nTITLE: Replacing Assets-static.js with Assets.js (TypeScript)\nDESCRIPTION: All `Assets-static.js` modules have been removed. This snippet shows how to switch from importing `Assets-static.js` to `Assets.js` modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Render Editor component with HTML, JS, CSS\nDESCRIPTION: Renders an Editor component, passing the imported HTML, JavaScript, and CSS code as props named 'html', 'js', and 'css' respectively. This is typical for code editors or live preview components in web applications.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/OverlayMode/OverlayMode.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: ICardHeader Interface to CardHeader Type - TypeScript\nDESCRIPTION: This snippet illustrates the change from using the ICardHeader interface to using the CardHeader type.  The example shows the previous import statement for the interface and the new import statement for the type.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Alignment Options: Left/Right to Start/End\nDESCRIPTION: This snippet demonstrates the renaming of the `Left` and `Right` options for `horizontal-align` and `placement-type` properties of the `ui5-popover` component to `Start` and `End` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, and CSS Files as Strings\nDESCRIPTION: This code snippet imports HTML, JavaScript, and CSS files as raw strings using `raw-loader`. These strings are then passed as properties to an `<Editor />` component, likely for display and editing within a UI5 Web Components application. The `raw-loader` is used to treat the content of the files as plain text.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/CustomSuggestions/CustomSuggestions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript Files\nDESCRIPTION: This snippet imports the content of `sample.html` and `main.js` as raw strings using `raw-loader`. These strings are assigned to the variables `html` and `js` respectively. This approach allows embedding the file content directly into the component for usage.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SplitButton/OpeningMenu/OpeningMenu.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Firing Event with fireDecoratorEvent and config (TS)\nDESCRIPTION: This snippet demonstrates firing a custom event using the `fireDecoratorEvent` method with `cancelable` and `bubbles` parameters defined in the decorator. It relies on the decorator's configuration.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n@event(\"change\", {\n    bubbles: true // false by default\n    cancelable: true // false by default\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fires the event as preventable and bubbling\nthis.fireDecoratorEvent(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Deprecated disabled property in ui5-option (ui5-carousel)\nDESCRIPTION: The `disabled` property in `ui5-option` has been removed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_58\n\nLANGUAGE: html\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Fixing UI5 Shellbar Shrink Factor - CSS\nDESCRIPTION: This snippet addresses a bug in the ui5-shellbar component where containers were not shrinking as expected. The fix involves adjusting the CSS properties related to the shrink factor of the containers within the shellbar.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_57\n\n\n\n----------------------------------------\n\nTITLE: JavaScript style map definition\nDESCRIPTION: This JavaScript code defines a getter called `styles` that returns an object representing a style map. The style map contains different styles for `root` and `footer` elements, allowing for dynamic styling based on component properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nget styles() {\n\treturn {\n\t\troot: {\n\t\t\tdisplay: this.isBlock ? \"block\" : \"inline\",\n\t\t\twidth: `${this.x}px`,\n\t\t\theight: `${this.y}px`\n\t\t},\n\t\tfooter: {\n\t\t\tbackgroundColor: this.bgColor\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Creation Issues\nDESCRIPTION: This snippet fixes issues related to package creation, specifically with test and lint configurations.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\ndd70f3a\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content\nDESCRIPTION: Imports the JavaScript code from the 'main.js' file using raw-loader. This allows embedding the JavaScript as a string directly into the current module. This JS code is likely the core logic of the editor or its initial state.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/DatePickerInDifferentTimezone/DatePickerInDifferentTimezone.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Sample\nDESCRIPTION: This snippet imports a JavaScript sample from the `main.js` file using `raw-loader`. The content of the JavaScript file is loaded as a raw string and assigned to the `js` variable.  This allows the JavaScript code to be embedded or executed within another component, such as an editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Removing Assets-static.js imports (TypeScript)\nDESCRIPTION: All Assets-static.js modules are removed.  The snippet shows how to migrate to the dynamic equivalent. Use Assets.js instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Logic for UI5 Table Behavior\nDESCRIPTION: This JavaScript snippet contains the logic that drives the behavior of the UI5 Table, possibly including data binding, event handling, and any custom configurations for column widths. It depends on the UI5 Web Components library and potentially external data sources.  The specific implementation details reside within the 'main.js' file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/ColumnWidths/ColumnWidths.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Spying on events with Cypress\nDESCRIPTION: This snippet demonstrates how to use `cy.spy` in Cypress component testing to verify if events are fired when interacting with a UI5 Web Component. It mounts a Button component, spies on its \"click\" event, triggers a real click event, and then asserts that the event was called.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(<Button></Button>`);\n\ncy.get(\"[ui5-button]\").then(($button) => {\n  cy.spy($button[0], \"click\").as(\"clickEvent\");\n});\n\ncy.get(\"[ui5-button]\").realClick();\n\ncy.get(\"@clickEvent\").should(\"have.been.called\");\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as Raw Strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the raw-loader. This allows the content of these files to be used directly as strings within the JavaScript code, typically for configuration or data loading purposes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/AditionalText/AditionalText.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Switching Default Theme to Morning Horizon - JavaScript\nDESCRIPTION: Changes the default theme from Quartz Light to Morning Horizon for the framework.  This modifies the default visual appearance of the UI5 Web Components.  See issue #7749 for the related discussion.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Import JavaScript content\nDESCRIPTION: This snippet imports the raw JavaScript content from the 'main.js' file using 'raw-loader'. The imported content is then assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/Filters/Filters.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar component to main library (TypeScript)\nDESCRIPTION: The `ui5-bar` component is now in the `main` library instead of `fiori`. This snippet demonstrates how to update the import statement.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Fixing OpenUI5 Module Requirement in JavaScript\nDESCRIPTION: This JavaScript code snippet removes an unnecessary `sap.ui.require` call from an unused OpenUI5 module. This resolves a potential dependency issue and helps to optimize the module's loading and execution.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nremove sap.ui.require call from unused openui5 module ([#8359](https://github.com/SAP/ui5-webcomponents/issues/8359)) ([50219ac](https://github.com/SAP/ui5-webcomponents/commit/50219ac23add7b86fe26d8ca51e2181f01404992))\n```\n\n----------------------------------------\n\nTITLE: Render Editor component with HTML/JS\nDESCRIPTION: This snippet renders an `<Editor>` component, passing the imported HTML and JavaScript code as props named `html` and `js`. The `Editor` component likely uses these strings to display or allow editing of the HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Menu/SubMenu/SubMenu.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript with raw-loader (SAP UI5)\nDESCRIPTION: Imports the content of 'main.js' as a string using raw-loader. This allows embedding the JavaScript code directly into a JavaScript/TypeScript file. The imported JavaScript is assigned to the 'js' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/CheckBox/TextWrapping/TextWrapping.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js imports (TypeScript)\nDESCRIPTION: The CSP.js module has been removed due to browser support for adoptedStyleSheets.  This snippet demonstrates removing the import statements and the use of setUseLinks, setPackageCSSRoot, and setPreloadLinks.  These APIs are no longer available and should not be used.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Using ui5-link before wrapping-type change HTML\nDESCRIPTION: Demonstrates the behavior of ui5-link before the change, where long links would be truncated. This is the previous state before the wrapping-type property was changed from None to Normal.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-link>some very very very long link</ui5-link> <!-- would truncate the text if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript as strings\nDESCRIPTION: Imports HTML and JavaScript code from separate files as strings using `raw-loader`. This allows the code to be displayed and manipulated within the component. The `raw-loader` is configured using webpack's `!!` syntax, bypassing any other loaders.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/CalendarTypes/CalendarTypes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript files with raw-loader\nDESCRIPTION: This snippet demonstrates how to import HTML and JavaScript files as raw strings using `raw-loader`. The imported strings (`html` and `js`) are then passed as props to an `<Editor>` component. This pattern is useful for dynamically loading and rendering HTML and JavaScript content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Select/CustomOptions/CustomOptions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: ui5-combobox/multi-combobox Header Text Update (Breaking Change)\nDESCRIPTION: This snippet highlights the breaking change for `ui5-cb-item-group` and `ui5-mcb-item-group`. The `text` property is renamed to `header-text`. This change requires updating existing code that uses the `text` property to use the new `header-text` property instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ui5-cb-item-group text=\"A\">\n   <ui5-cb-item text=\"Algeria\"></ui5-cb-item>\n</ui5-cb-item-group>\n<ui5-mcb-item-group text=\"A\">\n   <ui5-mcb-item text=\"Afghanistan\"></ui5-mcb-item>\n</ui5-mcb-item-group>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-cb-item-group header-text=\"A\">\n   <ui5-cb-item text=\"Algeria\"></ui5-cb-item>\n</ui5-cb-item-group>\n<ui5-mcb-item-group header-text=\"A\">\n   <ui5-mcb-item text=\"Afghanistan\"></ui5-mcb-item>\n</ui5-mcb-item-group>\n```\n\n----------------------------------------\n\nTITLE: Query Selector by Attribute (Shadow DOM)\nDESCRIPTION: This JavaScript/TypeScript snippet demonstrates how to query an element within the shadow DOM using attribute notation instead of tag names. This is more reliable when dealing with multiple versions of UI5 Web Components and is necessary for scoping.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/03-DoD.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.shadowRoot.querySelector(\"[ui5-popover]\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting UI5 Token Styles\nDESCRIPTION: This snippet adjusts the styles of the ui5-token component to match the latest specification. The changes are related to issue #6996.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n20e71fa\n```\n\n----------------------------------------\n\nTITLE: Renaming UI5Element render to renderer (JavaScript/TypeScript)\nDESCRIPTION: The `UI5Element#render` method has been renamed to `UI5Element#renderer`. This snippet demonstrates how to update the method name in a custom UI5Element class.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Decorators for Custom Elements - JavaScript\nDESCRIPTION: This snippet adds support for decorators to be used with custom elements metadata. Decorators simplify the process of defining custom element properties and attributes, making the code more readable and maintainable. The implementation involves adding decorator support to the custom element definition process.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\n* support decorators for custom elements metadata ([#6072](https://github.com/SAP/ui5-webcomponents/issues/6072)) ([fc9ee6e](https://github.com/SAP/ui5-webcomponents/commit/fc9ee6e2af10b4315fde072a50ab37efa180c809))\n```\n\n----------------------------------------\n\nTITLE: Styling Slotted Content - CSS\nDESCRIPTION: This CSS code shows how to style slotted content using the `::slotted` selector. It targets elements with the `heading` slot within the shadow DOM of the `my-demo-component`, setting the width and height of the slotted content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_42\n\nLANGUAGE: css\nCODE:\n```\n/* MyDemoComponent.css */\n::slotted([slot=\"heading\"]) {\n\twidth: 200px;\n\theight: 100px;\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Calendar Event: selected-dates-change to selection-change\nDESCRIPTION: This snippet details renaming the `selected-dates-change` event to `selection-change` and updating event details (`values` to `selectedValues`, `dates` to `selectedDateValues`) of the `ui5-calendar` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering the Editor Component\nDESCRIPTION: This snippet renders an Editor component, passing the imported HTML and JavaScript content as properties. The 'html' and 'js' variables, which contain the raw HTML and JavaScript strings respectively, are passed as props to the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Link/WithIcons/WithIcons.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming tabs-overflow-mode Property - HTML\nDESCRIPTION: This code snippet illustrates renaming the `tabs-overflow-mode` property to `overflow-mode` in the `ui5-tabcontainer` component.  The property name in the markup needs to be updated to use the new property name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content as Raw String\nDESCRIPTION: This snippet imports the content of 'sample.html' as a raw string using 'raw-loader'. The imported HTML is later used to populate the HTML editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Describing a Sample (.md)\nDESCRIPTION: This Markdown snippet demonstrates how to instantiate a UI5 Web Components sample and add a title and description to it within the component's `.md` file. This ensures that the sample is properly displayed with context and information.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/04-website.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### My New Sample\nThe Button supports several designs to indicate the priority or the nature of the action.\n\n<MyNewSample />\n\n```\n\n----------------------------------------\n\nTITLE: Resulting role attribute in shadow DOM - HTML\nDESCRIPTION: This snippet shows the resulting HTML in the shadow DOM after setting the `accessible-role` property on the `ui5-panel`.  The `role` attribute is set to \"complementary\", indicating the element's role to assistive technologies.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"complementary\" ... >\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Import HTML content\nDESCRIPTION: This snippet imports the raw HTML content from the 'sample.html' file using 'raw-loader'. The imported content is then assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ComboBox/Filters/Filters.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import HTML content as string\nDESCRIPTION: Imports the content of 'sample.html' as a raw string using 'raw-loader'. This allows the HTML to be used as a JavaScript variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithState/WithState.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML and JavaScript in Editor Component\nDESCRIPTION: This snippet renders the Editor component, passing the imported HTML and JavaScript code as props.  The Editor component will use the values of the `html` and `js` variables to initialize its state.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/CalendarWeekNumbering/CalendarWeekNumbering.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Fixing Text Cut Due to Column Overflow - JavaScript\nDESCRIPTION: This commit addresses an issue in ui5-table where text was being cut off due to column overflow.  The fix ensures that text within table cells is displayed correctly, even if it exceeds the column width. This improves the readability and usability of tables.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **ui5-table:** text cut due to column overflow ([#10193](https://github.com/SAP/ui5-webcomponents/issues/10193)) ([b59d718](https://github.com/SAP/ui5-webcomponents/commit/b59d718dca80bd9a8ee65993ddc2358ecd127024)), closes [#10168](https://github.com/SAP/ui5-webcomponents/issues/10168)\n```\n\n----------------------------------------\n\nTITLE: Invalidating Wizard Component on Step Changes\nDESCRIPTION: This TypeScript code demonstrates how to invalidate a Wizard component when the `WizardStep` elements in its `steps` slot change. Since `WizardStep` does not have its own template, the `Wizard` must handle rendering based on the properties and state of its steps. This example showcases setting `default` to `true` and defining `invalidateOnChildChange: true`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nclass Wizard extends UI5Element {\n\t@slot({\n\t\t\"default\": true,\n\t\ttype: HTMLElement,\n\t\tinvalidateOnChildChange: true,\n\t})\n\tsteps!: Array<WizardStep>\n}\n```\n\n----------------------------------------\n\nTITLE: Import HTML with raw-loader\nDESCRIPTION: This snippet imports the HTML content of the 'sample.html' file as a string using the 'raw-loader' webpack loader. This allows the HTML to be embedded directly into the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tag/Size/Size.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content\nDESCRIPTION: Imports the JavaScript content from the `main.js` file using `raw-loader`. This allows the JavaScript code to be used as a string within the JavaScript code. The `!!raw-loader!` syntax forces the use of `raw-loader`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/AI CustomPrompt/Level 3/Level 3.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing List Items before rename TypeScript\nDESCRIPTION: Shows the old import statements for StandardListItem and CustomListItem.  This example highlights how to import these components before the rename refactoring.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport StandardListItem from \"@ui5/webcomponents/StandardListItem.js\";\nimport CustomListItem from \"@ui5/webcomponents/CustomListItem.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing UI5Element render with renderer - JavaScript/TypeScript\nDESCRIPTION: This snippet demonstrates how to replace the `render` method with the `renderer` method in a class extending `UI5Element`. The examples are provided in JavaScript and TypeScript.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring webpackChunkName in Dynamic Imports\nDESCRIPTION: This code snippet declares webpackChunkName in more generated dynamic imports, addressing issue #8029.  It ensures that dynamically imported modules are correctly named and handled by Webpack, improving the efficiency of code splitting and loading.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndeclare webpackChunkName in more generated dynamic imports ([#8029](https://github.com/SAP/ui5-webcomponents/issues/8029)) ([c85fa23](https://github.com/SAP/ui5-webcomponents/commit/c85fa23bd32574434f537df95c7507a7f1a48b5e))\n```\n\n----------------------------------------\n\nTITLE: Adding JSX Template Support with TypeScript - JavaScript\nDESCRIPTION: This commit introduces JSX template support using TypeScript.  This allows developers to use JSX syntax for defining UI templates. The addition of TypeScript support enhances type safety and code maintainability.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **framework:** add JSX template support with TypeScript ([#10046](https://github.com/SAP/ui5-webcomponents/issues/10046)) ([f42e7c1](https://github.com/SAP/ui5-webcomponents/commit/f42e7c18c846f923df4fec6ae02f1b4c20c006fa))\n```\n\n----------------------------------------\n\nTITLE: Adding TNT Icon Collection\nDESCRIPTION: This commit introduces a new TNT icon collection to the @ui5/webcomponents-icons-tnt package. This enhancement expands the available set of icons for use within UI5 Web Components. The associated issue is #2414.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Importing HTML and JS with Raw Loader\nDESCRIPTION: This snippet imports HTML and JavaScript files as strings using webpack's raw-loader.  The imported strings are then passed as props to an `<Editor>` component. This allows the HTML and JavaScript code to be displayed and potentially edited within the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TabContainer/ReorderTabsMaxNestingLevel/ReorderTabsMaxNestingLevel.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Card Header Status Property to additionalText\nDESCRIPTION: This snippet demonstrates the renaming of the `status` property and its shadow part to `additionalText` in the `ui5-card-header` component.  The CSS part selector must also be updated.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Handling click event of assistant JavaScript\nDESCRIPTION: Illustrates how to handle the click event of the ui5-toggle-button element placed in the assistant slot. This enables to recreate functionality similiar to the removed co-pilot feature.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nassistant.addEventListener(\"click\", function (event) {\n\tconst toggleButton = event.target;\n\ttoggleButton.icon = toggleButton.pressed ? \"sap-icon://da-2\" : \"sap-icon://da\";\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming ui5-carousel pageIndicatorStyle to pageIndicatorType\nDESCRIPTION: This snippet details the renaming of the `page-indicator-style` property of the `ui5-carousel` component to `page-indicator-type`. It demonstrates the necessary change in HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content\nDESCRIPTION: This snippet imports the content of the `main.js` file as a string using `raw-loader`. It loads the main javascript, which is assumed to contain the main application logic.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIQuickPrompt/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Use UI5 Web Component (Button) in Nuxt Template - HTML\nDESCRIPTION: Demonstrates how to use the imported `ui5-button` web component within a Nuxt template. The text \"Hello world!\" is displayed as the button's label.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ui5-button>Hello world!</ui5-button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Attributes - JavaScript\nDESCRIPTION: Demonstrates setting and removing boolean attributes in JavaScript. Shows how setting an attribute (even with an empty string) is equivalent to setting the property to `true`, and removing it is equivalent to setting it to `false`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/03-components-APIs.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCb = document.getElementById(\"cb\");\nmyCb.setAttribute(\"checked\", \"\"); // same as myCB.checked = true;\nmyCb.removeAttribute(\"checked\"); // same as myCB.checked = false;\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content\nDESCRIPTION: This snippet imports the raw content of a JavaScript file (main.js) into a JavaScript variable named 'js'. The 'raw-loader' is used to treat the JavaScript file as a raw string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Breadcrumbs/BreadcrumbsOverflow/BreadcrumbsOverflow.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Fixing Release Commands - JavaScript\nDESCRIPTION: This code snippet fixes the release commands within the infrastructure of the UI5 Web Components project. The commit b0e653c addresses issues with the release process. The snippet represents infrastructural improvements specifically targetting the release process.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n([b0e653c](https://github.com/SAP/ui5-webcomponents/commit/b0e653cf911cc0ffe5fb5dcbd50a7c238f20f33d))\n```\n\n----------------------------------------\n\nTITLE: Import HTML content using raw-loader\nDESCRIPTION: This snippet imports the content of `sample.html` as a raw string using `raw-loader`. This is typically used for embedding HTML templates directly into JavaScript or TypeScript files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Slider/ShowTooltip/ShowTooltip.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Applying Focus Over Whole Row - JavaScript\nDESCRIPTION: This commit ensures that focus is applied to the entire row in the ui5-table component.  This enhancement improves the usability and accessibility of the table. It allows users to easily identify the selected row when navigating with a keyboard.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **ui5-table:** apply focus over whole row ([#10407](https://github.com/SAP/ui5-webcomponents/issues/10407)) ([bbe7d57](https://github.com/SAP/ui5-webcomponents/commit/bbe7d57b41738c333c8042b6d086c5aaf8ffe153)), closes [#10286](https://github.com/SAP/ui5-webcomponents/issues/10286)\n```\n\n----------------------------------------\n\nTITLE: Replace Assets-static import - Typescript\nDESCRIPTION: Shows how to replace static asset imports with dynamic asset imports. Replace `Assets-static.js` with `Assets.js` for dynamic loading. This ensures that assets are loaded only when needed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: TabContainer tabs-overflow-mode to overflow-mode - HTML\nDESCRIPTION: This snippet shows renaming `tabs-overflow-mode` to `overflow-mode` for the `ui5-tabcontainer` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_50\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Conditional Rendering (if)\nDESCRIPTION: Demonstrates conditional rendering of a label based on the boolean value of `hasText`. If `hasText` is true, the label and slot are rendered. \nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_23\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if hasText}}\n\t<label class=\"ui5-badge-text\"><bdi><slot></slot></bdi></label>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Import HTML content\nDESCRIPTION: Imports the HTML content from the `sample.html` file using `raw-loader`. This allows the HTML to be used as a string within the JavaScript code. The `!!raw-loader!` syntax forces the use of `raw-loader`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/AI CustomPrompt/Level 3/Level 3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Renaming TabContainer attribute\nDESCRIPTION: This snippet shows that `tabs-overflow-mode` is now `overflow-mode` on the `ui5-tabcontainer`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_84\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Replacing size with design in ui5-illustrated-message (ui5-carousel)\nDESCRIPTION: The `size` property in `ui5-illustrated-message` has been renamed to `design`. This snippet shows the deprecated property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Import HTML, JavaScript, and CSS files\nDESCRIPTION: This snippet imports the raw content of HTML, JavaScript, and CSS files using `raw-loader`.  This is commonly used to embed code directly into a JavaScript module. The imported content is stored in the `html`, `js`, and `css` variables respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/FlexibleColumnLayout/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Replacing render with renderer in UI5Element (TypeScript)\nDESCRIPTION: The render method in UI5Element has been replaced with renderer.  This snippet demonstrates how to update the class definition to use the new renderer property.  The get keyword should be used to return the litRenderer.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing ESLint for JS 3rd Party Projects\nDESCRIPTION: This commit fixes an ESLint issue encountered when working with JavaScript 3rd party projects within the ui5-webcomponents ecosystem. This ensures consistent code style and quality across different project types. The issue addressed is #6725, and the corresponding commit is 215a888b006e46d431edd6324812b9d39249aef4.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n215a888b006e46d431edd6324812b9d39249aef4\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, CSS as Raw Strings\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files using raw-loader. The content of each file is read as a raw string and assigned to the respective variables `html`, `js`, and `css`. This allows these files to be used as props in other components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/DynamicSideContent/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Importing CalendarType Configuration\nDESCRIPTION: Imports the `getCalendarType` function from the `@ui5/webcomponents-base/dist/config/CalendarType.js` module. This function is used to get the calendar type of the UI5 Web Components. Note: Calendar type can only be set initially.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getCalendarType } from \"@ui5/webcomponents-base/dist/config/CalendarType.js\";\n```\n\n----------------------------------------\n\nTITLE: Updating ui5-busy-indicator Size Values (HTML)\nDESCRIPTION: This snippet illustrates the change in accepted values for the `size` property of the `ui5-busy-indicator` component. The old values like 'Small' are replaced with new values like 'S'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with Raw Loader\nDESCRIPTION: This snippet demonstrates how to import HTML and JavaScript files as raw strings using webpack's `raw-loader`. The `!!raw-loader!` syntax forces the use of raw-loader, which is essential for handling HTML and JavaScript content that should be treated as strings rather than modules. The imported strings are then assigned to variables for later use.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/CustomStyling/CustomStyling.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Replacing tabs-overflow-mode with overflow-mode (ui5-carousel)\nDESCRIPTION: The `tabs-overflow-mode` property in `ui5-tabcontainer` has been renamed to `overflow-mode`. This snippet shows the deprecated property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: UI5 Select DOM Structure v1.24\nDESCRIPTION: This HTML snippet shows the DOM structure of the `ui5-select` in UI5 Web Components version 1.24. The dropdown part is implemented as a `ui5-responsive-popover` within the static area. `ui5-option` elements are not physically slotted, instead their text content is used to populate `ui5-li` elements in the list.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/popover-api-in-v2.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <ui5-static-area>\n        <ui5-static-area-item> <!-- static area item of the ui5-select -->\n            #shadow-root\n                <ui5-responsive-popover> <!-- the \"dropdown\" part of the ui5-select -->\n                    <ui5-list> <!-- the list inside ui5-select's dropdown -->\n                        <ui5-li text=\"Option 1\"></ui5-li> <!-- list item for the 1st ui5-option -->\n                        <ui5-li text=\"Option 2\"></ui5-li> <!-- list item for the 2nd ui5-option -->\n                        <ui5-li text=\"Option 3\"></ui5-li> <!-- list item for the 3rd ui5-option -->\n                    </ui5-list>\n                </ui5-responsive-popover>\n        </ui5-static-area-item>\n    </ui5-static-area>\n\n    .........\n\n    <ui5-select>\n        #shadow-root\n            <div></div> <!-- The \"box\" part of the select -->\n\n        <ui5-option>Option 1</ui5-option>\n        <ui5-option>Option 2</ui5-option>\n        <ui5-option>Option 3</ui5-option>\n    </ui5-select>\n\n</body>\n```\n\n----------------------------------------\n\nTITLE: Importing a Single Business Suite Icon - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import a single icon (e.g., `1x2-grid-layout`) from the `@ui5/webcomponents-icons-business-suite` package. Importing individual icons is the recommended approach for optimal performance. This import makes the `1x2-grid-layout` icon available for use in your UI5 Web Components application. No specific prerequisites are required, other than having the `@ui5/webcomponents-icons-business-suite` package installed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-icons-business-suite/dist/1x2-grid-layout.js\";\n```\n\n----------------------------------------\n\nTITLE: Rename Card Header Status - HTML\nDESCRIPTION: Illustrates the renaming of the `status` property and related shadow part to `additionalText` in the `ui5-card-header` component.  CSS styling targeting `::part(status)` must be updated to target `::part(additional-text)`. Usage of the `status` property directly should be replaced with `additional-text`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Render Basic UI5Element Sample - Markdown\nDESCRIPTION: This Markdown code renders the imported Basic UI5Element sample within the application. It utilizes the component to display the UI element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/UI5Element.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<Basic />\n```\n\n----------------------------------------\n\nTITLE: Updating ui5-busy-indicator Size Values (HTML)\nDESCRIPTION: The `size` property of the `ui5-busy-indicator` component now accepts different values. This snippet shows how to update the size property from `Small` to `S`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Supporting SAPBusinessSuite Icons: v1 and v2 font in UI5 Web Components\nDESCRIPTION: This commit adds support for both v1 and v2 of the SAPBusinessSuite icons font within the @ui5/webcomponents package. This enables the use of the Horizon theme's icon set.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n([38233b9](https://github.com/SAP/ui5-webcomponents/commit/38233b94543a94c9915cf1d8c8937a834cd6c87d))\n```\n\n----------------------------------------\n\nTITLE: Adding New Icons to UI5 Business Suite\nDESCRIPTION: This code snippet describes adding new icons to the UI5 business suite icon set.  The changes augment the available icons within the @ui5/webcomponents-icons-business-suite package, expanding the visual options available to developers using these components. This involves incorporating new icon definitions into the project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_30\n\nLANGUAGE: N/A\nCODE:\n```\n/***\n* **icons-business-suite:** add new icons ([#5763](https://github.com/SAP/ui5-webcomponents/issues/5763)) ([e4bfc82](https://github.com/SAP/ui5-webcomponents/commit/e4bfc82a555cceb8091f908adb20b9a7a6564800))\n**/\n```\n\n----------------------------------------\n\nTITLE: Replacing TabContainerBackgroundDesign Import - TypeScript\nDESCRIPTION: This snippet instructs to use `BackgroundDesign` instead of the deprecated `TabContainerBackgroundDesign` import.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code Snippet is implied.\n```\n\n----------------------------------------\n\nTITLE: Resulting heading level in shadow DOM - HTML\nDESCRIPTION: This snippet shows the resulting HTML in the shadow DOM for the ui5-title and ui5-panel components.  The ui5-title uses an h3 element directly, and ui5-panel sets `aria-level` to 3 on the header div, reflecting the specified heading level.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<h3 class=\"ui5-title-root\" ... >...</h3>\n...\n<div class=\"ui5-panel-root\" ... >\n    ...\n    <div role=\"heading\" aria-level=\"3\" ...>\n        Panel Header\n    </div>\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Renaming pageIndicatorStyle to pageIndicatorType (HTML)\nDESCRIPTION: The pageIndicatorStyle property of ui5-carousel is replaced with pageIndicatorType.  This snippet demonstrates how to update the property name in the HTML. The older `page-indicator-style` property is no longer supported.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_33\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Replacing placement-type with placement (ui5-carousel)\nDESCRIPTION: The `placement-type` property in `ui5-popover` has been renamed to `placement`. This snippet shows the deprecated property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with raw-loader\nDESCRIPTION: This snippet demonstrates how to import HTML and JavaScript files using `raw-loader`.  The `raw-loader` webpack loader is used to load the files as strings, which are then assigned to the `html` and `js` variables respectively. These variables are then passed as props to the `<Editor>` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Tree/CustomTreeItems/CustomTreeItems.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming pageIndicatorStyle to pageIndicatorType\nDESCRIPTION: This code shows how the `pageIndicatorStyle` property of the `ui5-carousel` component has been renamed to `pageIndicatorType`.  Existing usages should migrate to the new property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Removing Assets-static.js module imports\nDESCRIPTION: This code shows the removal of imports for `Assets-static.js` modules and their replacement with dynamic equivalents (`Assets.js`). This affects multiple packages, including `webcomponents` and `webcomponents-icons`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Removing Device#isIE Method (TypeScript)\nDESCRIPTION: The `Device#isIE` method has been removed from the library. This snippet illustrates the removal of a deprecated method and informs developers of its unavailability.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Resulting SVG with role image - HTML\nDESCRIPTION: This snippet demonstrates the resulting HTML in the shadow DOM when the `mode` property of `ui5-icon` is set to 'Image'. The SVG element has `role=\"img\"` attribute, signalling it as an image for screen readers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<svg role=\"img\" ... ></svg>\n```\n\n----------------------------------------\n\nTITLE: Replacing Static Assets Imports (TypeScript)\nDESCRIPTION: This snippet illustrates how to replace imports from `Assets-static.js` modules with dynamic equivalents from `Assets.js` modules. This change affects various UI5 Web Components packages.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Replacing show-overflow property with overflowButton slot\nDESCRIPTION: How to replace the `show-overflow` property with the `overflowButton` slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Renaming placementType to placement in ui5-popover\nDESCRIPTION: This snippet shows that the `placementType` property is renamed to `placement` in the `ui5-popover` component and update import statement for `PopoverPlacementType`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing UI5Element#render with UI5Element#renderer\nDESCRIPTION: This code demonstrates the replacement of the `render` method with the `renderer` method in the `UI5Element` class. The static getter should now be named `renderer` instead of `render`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar Component to Main Library - TypeScript\nDESCRIPTION: This snippet demonstrates how the `ui5-bar` component is moved from the `fiori` library to the `main` library.  It shows the updated import statement.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: This snippet imports the content of the `sample.html` file as a string using `raw-loader`. This allows the HTML content to be used within the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIQuickPrompt/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Cypress - Reading Property\nDESCRIPTION: This code snippet shows how to read a property of a UI5 web component using Cypress's `should` command with `have.prop`. It gets the component with the specified selector and asserts that it has the expected property value.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Read a property\ncy.get(\"[ui5-button]\")\n  .should(\"have.prop\", \"myProp\", \"expectedValue\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual Slots in hbs Template\nDESCRIPTION: This snippet shows how to render individual slots in the `.hbs` template when `individualSlots` is enabled. The code iterates through the children in the `mySlot` and renders a `<slot>` element for each, using the `_individualSlot` property, which is automatically assigned by the framework.  This property provides a unique name for each child's slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_6\n\nLANGUAGE: hbs\nCODE:\n```\n{{#each mySlot}}\n    <slot name=\"{{this._individualSlot}}\"></slot>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Updating TNT Icons to v3.5 - JavaScript\nDESCRIPTION: This snippet updates the TNT icons to version 3.5 within the UI5 Web Components project. The commit 745a9fa implements this feature. The snippet indicates an update operation related to icon resources.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n([745a9fa](https://github.com/SAP/ui5-webcomponents/commit/745a9faadcd484b49ace8bf24df47d0c892e43ec))\n```\n\n----------------------------------------\n\nTITLE: Renaming Illustrated Message Property - HTML\nDESCRIPTION: This code snippet demonstrates the renaming of the `size` property to `design` for `ui5-illustrated-message` component.  The property in the markup needs to be updated to use the new name.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Renaming SubTabs Slot to Items Slot - HTML\nDESCRIPTION: This snippet illustrates the renaming of the `subTabs` slot to `items` in the `ui5-tab` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: CSP.js Module Removal - TypeScript\nDESCRIPTION: This snippet demonstrates the removal of the CSP.js module and associated APIs for managing CSS links and styles. The removal is due to modern browsers' support for adoptedStyleSheets. These APIs are no longer available and should not be used in updated code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Optimize Build with CSS Processing in JavaScript\nDESCRIPTION: This JavaScript code snippet optimizes the build process by switching CSS processing to esbuild. This change aims to improve build performance and efficiency by utilizing esbuild for CSS-related tasks.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n**tools:** Optimize build by switching css processing to esbuild ([#8008](https://github.com/SAP/ui5-webcomponents/issues/8008)) ([b4d411f](https://github.com/SAP/ui5-webcomponents/commit/b4d411f00f8d74ccecb2d02254126243faf53dfd))\n```\n\n----------------------------------------\n\nTITLE: Renaming Page Indicator Style to Type - HTML\nDESCRIPTION: This snippet shows the renaming of the `page-indicator-style` property of the `ui5-carousel` component to `page-indicator-type`. The HTML shows the old and new ways of setting the property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Import Basic UI5Element Sample - JavaScript\nDESCRIPTION: This JavaScript code imports a basic UI5Element sample from a markdown file. It is a dependency for rendering the UI component in the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/UI5Element.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Basic from \"./_samples/base/UI5Element/Basic/Basic.md\";\n```\n\n----------------------------------------\n\nTITLE: Popover placementType to placement - HTML/JavaScript\nDESCRIPTION: This snippet shows renaming `placementType` to `placement` property and `PopoverPlacementType` enum to `PopoverPlacement` enum.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_52\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing ICardHeader Interface with CardHeader Type\nDESCRIPTION: This snippet illustrates the replacement of the `ICardHeader` interface with the `CardHeader` type in UI5 Web Components.  Developers should update their imports to use the type alias instead of the interface.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting FlexibleLayout Accessibility Texts and Roles (Old)\nDESCRIPTION: This JavaScript snippet demonstrates how to set the accessibility texts and roles for the FlexibleLayout component using the deprecated `accessibilityTexts` and `accessibilityRoles` properties.  These properties are being replaced by `accessibilityAttributes`.  Migrate to the new `accessibilityAttributes` structure.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nfcl.accessibilityTexts = {\n    startColumnAccessibleName: \"Products list\",\n    midColumnAccessibleName: \"Product information\",\n    endColumnAccessibleName: \"Product detailed information\",\n    startArrowLeftText: \"Collapse products list\",\n    startArrowRightText: \"Expand products list\",\n    endArrowLeftText: \"Expand product detailed information\",\n    endArrowRightText: \"Collapse product detailed information\",\n    startArrowContainerAccessibleName: \"Start Arrow Container\",\n    endArrowContainerAccessibleName: \"End Arrow Container\",\n}\n\nfcl.accessibilityRoles = {\n    startColumnRole: \"complementary\",\n    startArrowContainerRole: \"navigation\",\n    midColumnRole: \"main\",\n    endArrowContainerRole: \"navigation\",\n    endColumnRole: \"complementary\".\n}\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js Module - Typescript\nDESCRIPTION: This code snippet demonstrates the removal of the `CSP.js` module and the corresponding APIs for managing CSS links and styles in SAP UI5 Web Components. The `setUseLinks`, `setPackageCSSRoot`, and `setPreloadLinks` functions are no longer available due to the adoption of adoptedStyleSheets in modern browsers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring the Editor component\nDESCRIPTION: This snippet configures an `Editor` component by passing the imported HTML, JavaScript, and CSS content as properties.  The `html`, `js`, and `css` variables, which contain the raw content of the respective files, are passed as props to the `Editor` component.  This allows the component to render and function using the provided code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/CustomHeader/CustomHeader.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Defining an Unnamed Slot in UI5 Web Component Template (hbs)\nDESCRIPTION: This snippet demonstrates how to define an unnamed slot within a UI5 Web Component's Handlebars template. Unnamed slots are used when the component doesn't need to interact with the slotted children directly. The `name` attribute specifies the name of the slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/04-slots.md#_snippet_0\n\nLANGUAGE: hbs\nCODE:\n```\n{{!-- MyDemoComponent.hbs --}}\n<div>\n   <slot name=\"mySlot\"></slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: UI5 Web Components Editor Initialization\nDESCRIPTION: Initializes the UI5 Web Components editor using the imported HTML and JavaScript strings. The `Editor` component is instantiated with the `html` and `js` properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithGroups/WithGroups.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming color property to value (HTML)\nDESCRIPTION: The color property of ui5-color-picker is renamed to value. This snippet show how to update the color picker usage.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_38\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Interface IUploadCollectionItem to UploadCollectionItem (JavaScript)\nDESCRIPTION: The `IUploadCollectionItem` interface has been replaced with the `UploadCollectionItem` type. This snippet illustrates how to import and use the new `UploadCollectionItem` type instead of the old `IUploadCollectionItem` interface.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing Table Component\nDESCRIPTION: This code snippet demonstrates how to import the `ui5-table` component from the `@ui5/webcomponents-compat` package. This import statement makes the `ui5-table` web component available for use in your JavaScript code. It is part of the compatibility package for the Table component, which will be removed in a future major release.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/Table.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML snippet\nDESCRIPTION: This snippet imports the HTML code from the 'sample.html' file using raw-loader. The raw-loader allows the HTML file content to be imported as a string into the JavaScript module. The imported HTML code is then assigned to the 'html' variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/TextAndIcon/TextAndIcon.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar Component to main Library (TypeScript)\nDESCRIPTION: This snippet illustrates moving the `ui5-bar` component import from the `fiori` library to the `main` library.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Accessing Object Properties\nDESCRIPTION: This example shows how to access nested object properties within a Handlebars template using dot notation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_14\n\nLANGUAGE: handlebars\nCODE:\n```\n<p>{{person.name}} {{person.lastName}}</p>\n```\n\n----------------------------------------\n\nTITLE: Importing Table Group Row Component\nDESCRIPTION: This code snippet imports the `ui5-table-group-row` component from the `@ui5/webcomponents-compat` package. This component, part of the Table compatibility package, allows for grouping rows within a table. The compatibility package will be removed when the new Table component replaces it.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/TableGroupRow.js\";\n```\n\n----------------------------------------\n\nTITLE: IUploadCollectionItem Interface Replacement (JavaScript)\nDESCRIPTION: This snippet shows how to migrate from the removed `IUploadCollectionItem` interface to the `UploadCollectionItem` type. Update the import statement and type usage.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Updating TNT Icons Version - JavaScript\nDESCRIPTION: This snippet showcases the update of tnt/icons to versions v3.5 & 2.11. It aims to incorporate the latest features and bug fixes from the TNT icon library into the ui5-webcomponents project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n### Features\n\n*   update tnt/icons to v3.5 & 2.11 ([#10600](https://github.com/SAP/ui5-webcomponents/issues/10600)) ([5d4e3ba](https://github.com/SAP/ui5-webcomponents/commit/5d4e3ba1a74b2f4bea2321371656cbdbebc27975))\n```\n\n----------------------------------------\n\nTITLE: Editor Component Configuration - JavaScript\nDESCRIPTION: Configures the editor component with the imported HTML and JavaScript content. The `html` and `js` variables, which contain the raw string content, are passed as props to the `<Editor>` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Label/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Simulating Mobile Devices in Cypress\nDESCRIPTION: This example illustrates how to simulate mobile testing conditions in Cypress using the `ui5SimulateDevice` command. It mounts a Button component and then simulates a phone device to verify the mobile-specific styling.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(<Button></Button>);\n\ncy.ui5SimulateDevice(\"phone\"); // Simulates a phone device\n\ncy.get(\"[ui5-button]\").should(\"have.class\", \"ui5-button-mobile\");\n```\n\n----------------------------------------\n\nTITLE: Configure Editor with HTML and JS\nDESCRIPTION: This snippet configures an 'Editor' component, passing the previously imported HTML and JavaScript content as properties. The 'html' and 'js' variables, which contain the raw content of 'sample.html' and 'main.js' respectively, are assigned to the corresponding properties of the 'Editor' component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/TimePicker/TimePickerInDifferentTimezone/TimePickerInDifferentTimezone.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Require '.hbs' Extension for Handlebar Files\nDESCRIPTION: This code change enforces that all Handlebars files processed by the `hbs2ui5` tool must have the `.hbs` extension. This standardization helps ensure consistency and prevents potential errors in the build process, addressing issue #9992.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Resulting aria attributes in shadow DOM - HTML\nDESCRIPTION: This snippet shows the resulting HTML in the shadow DOM after setting the `accessibilityAttributes` property on the `ui5-button`. The `aria-controls` and `aria-haspopup` attributes are set based on the JavaScript example.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"ui5-button-root\" part=\"button\" aria-controls=\"dialogIdentificator\" aria-haspopup=\"dialog\">\n\t...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Updating ui5-busy-indicator size property\nDESCRIPTION: This snippet shows how to update the `size` property of the `ui5-busy-indicator` component. The string values for the `size` property have been changed from descriptive words (e.g., 'Small') to single-letter abbreviations (e.g., 'S').\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-busy-indicator size=\"Small\"></ui5-busy-indicator>\n\n<ui5-busy-indicator size=\"S\"></ui5-busy-indicator>\n```\n\n----------------------------------------\n\nTITLE: Removing Progress Indicator 'disabled' property\nDESCRIPTION: This snippet demonstrates the removal of the `disabled` property from the `ui5-progress-indicator` component. Using the disabled property will no longer have any effect.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_67\n\nLANGUAGE: html\nCODE:\n```\n<ui5-progress-indicator disabled value=\"60\"></ui5-progress-indicator>\n```\n\n----------------------------------------\n\nTITLE: Import HTML Sample\nDESCRIPTION: Imports the content of 'sample.html' as a raw string using raw-loader. This allows the HTML to be used directly within JavaScript code for the UI5 Web Components editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithGroups/WithGroups.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Rendering UI5 Web Components Editor with HTML, JS, CSS\nDESCRIPTION: This snippet renders a UI5 Web Components Editor, passing the previously imported HTML, JavaScript, and CSS code as props. The `Editor` component likely uses these props to display and allow modification of the code within the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/MediaGallery/Horizontal/Horizontal.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Card Header Status to Additional Text - HTML\nDESCRIPTION: This snippet demonstrates the renaming of the `status` property and related shadow part in the `ui5-card-header` component to `additionalText`. It shows how to update both the HTML and associated CSS.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .cardHeader::part(status) { ... }\n</style>\n<ui5-card-header status=\"3 of 10\"></ui5-popover>\n\n<style>\n       .cardHeader::part(additional-text) { ... }\n</style>\n<ui5-card-header class=\"cardHeader\" additional-text=\"3 of 10\"></ui5-card-header>\n```\n\n----------------------------------------\n\nTITLE: Tag Wrapping Behavior (Before)\nDESCRIPTION: Illustrates the previous default behavior of the ui5-tag component where text would be truncated if there was not enough space. The wrapping-type property was set to None by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tag>In Process</ui5-tag><!-- would truncate the text if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Removing Upload Collection 'selectionMode=Delete'\nDESCRIPTION: This snippet showcases the removal of the \"Delete\" value for the `selectionMode` property in the `ui5-upload-collection` component.  The `hide-delete-button` property should be used on the `ui5-upload-collection-item` instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_68\n\nLANGUAGE: html\nCODE:\n```\n<ui5-upload-collection selection-mode=\"Delete\"></ui5-upload-collection>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-upload-collection>\n   <ui5-upload-collection-item hide-delete-button>  </ui5-upload-collection-item>\n</ui5-upload-collection>\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Web Components\nDESCRIPTION: Installs the core UI5 Web Components package from npm. This makes the UI5 Web Components library available for use within the Angular application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @ui5/webcomponents\n```\n\n----------------------------------------\n\nTITLE: Importing HTML Content\nDESCRIPTION: Imports an HTML file's content as a raw string using raw-loader. This allows embedding the HTML directly into a JavaScript environment, typically for use within a component or application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/FileUploader/FileSizeLimit/FileSizeLimit.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Installing UI5 Web Components Package\nDESCRIPTION: This command installs the core UI5 Web Components package using npm. The installed components are then available for import and use in the project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/01-first-steps.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ui5/webcomponents\n```\n\n----------------------------------------\n\nTITLE: Optimizing CSS Processing with Esbuild for UI5 Web Components\nDESCRIPTION: This commit optimizes the build process by switching CSS processing to esbuild. This likely results in faster build times and improved performance compared to the previous CSS processing method.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_27\n\nLANGUAGE: None\nCODE:\n```\n* **tools:** Optimize build by switching css processing to esbuild ([#8008](https://github.com/SAP/ui5-webcomponents/issues/8008)) ([b4d411f](https://github.com/SAP/ui5-webcomponents/commit/b4d411f00f8d74ccecb2d02254126243faf53dfd))\n```\n\n----------------------------------------\n\nTITLE: Importing HTML, JS, CSS files into strings\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files as raw strings using `raw-loader`. This allows the content of these files to be passed as properties to a component, enabling dynamic configuration of the component's structure, logic, and styling.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/EmptySpan/EmptySpan.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook for Playground - JavaScript\nDESCRIPTION: This snippet introduces a new playground feature using Storybook. This enhancement provides a better development and testing environment for UI5 web components. The integration of storybook provides features like live editing and component showcasing. This involved setting up Storybook and integrating it with the playground application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **playground:** next playground with storybook ([#5831](https://github.com/SAP/ui5-webcomponents/issues/5831)) ([79274c8](https://github.com/SAP/ui5-webcomponents/commit/79274c8e442cf5854a7fe6327f25aaed04312103)), closes [#5898](https://github.com/SAP/ui5-webcomponents/issues/5898)\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage Size to Design - HTML\nDESCRIPTION: This snippet shows renaming `size` to `design` for `ui5--illustrated-message` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_53\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Render Editor component with HTML and JS\nDESCRIPTION: This snippet renders an `<Editor>` component, passing the imported HTML and JavaScript strings as props. This is how the editor component is initialized with content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/Timeline/WithGrowing/WithGrowing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: SegmentedButtonItem selected property (New)\nDESCRIPTION: This HTML snippet shows the new name of the property. The `pressed` property is called `selected` now. Migrate to the new property name `selected`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<ui5-segmented-button>\n  <ui5-segmented-button-item selected> Option 1</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 2</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 3</ui5-segmented-button-item>\n</ui5-segmented-button>\n```\n\n----------------------------------------\n\nTITLE: Showing Months/Years From Primary and Secondary Calendars\nDESCRIPTION: This commit enhances the ui5-calendar component to display months and years from both the primary and secondary calendars. This allows users to view dates from multiple calendar systems simultaneously. The change relates to issue #5412 and was implemented with commit d5dc7ec.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nd5dc7ec\n```\n\n----------------------------------------\n\nTITLE: ui5-illustrated-message title-level property (Old)\nDESCRIPTION: This HTML snippet shows the old `title-level` property for the `ui5-illustrated-message`. This property is removed and will no longer work.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message title-level=\"H6>\n```\n\n----------------------------------------\n\nTITLE: Renaming Color Picker Property\nDESCRIPTION: This snippet illustrates the renaming of the `color` property to `value` in the `ui5-color-picker` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_80\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Removing showOverflow property\nDESCRIPTION: This snippet shows that the `showOverflow` property has been removed and is replaced by overflow button slots\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_85\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Replace ui5-tabcontainer show-overflow - HTML\nDESCRIPTION: Shows how to replace the `show-overflow` property with the `overflowButton` slot in `ui5-tabcontainer`. The overflow button should now be implemented using the slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Adding/Updating Icons: TNT icons in UI5 Web Components\nDESCRIPTION: This commit introduces new or updated icons for the SAP-icons-TNT collection within the @ui5/webcomponents-icons-tnt package. The update enhances the available icon set for the TNT theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n([41e7cfd](https://github.com/SAP/ui5-webcomponents/commit/41e7cfdafee72e0e80775788da192a3498a75b05))\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript Files\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' files as raw strings using raw-loader. This is commonly used to include external files directly into the JavaScript bundle for UI components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RangeSlider/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: JavaScript data for property assignment\nDESCRIPTION: This JavaScript code defines data that is used in the property assignment example. It initializes properties like `id`, `someString`, `item`, and `text` on the component instance.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nthis.id = \"myId\";\nthis.someString = \"Some data\";\nthis.item = {\n\ta: 1,\n\tb: 2\n};\nthis.text = \"Some text\";\n```\n\n----------------------------------------\n\nTITLE: Fixing Icons: Correct icons for v2 in UI5 Web Components\nDESCRIPTION: This commit fixes an issue where the icons for v2 were incorrect within the @ui5/webcomponents-icons-tnt package. The fix ensures the correct icons are displayed for version 2.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n([25445a6](https://github.com/SAP/ui5-webcomponents/commit/25445a608aeb2a8312af262f8fd5d1a03cba1d5c))\n```\n\n----------------------------------------\n\nTITLE: Migrating Illustrated Message to TS - JavaScript\nDESCRIPTION: This snippet migrates the illustrated-message component to TypeScript (TS) along with a small refactor. This migration improves code quality, type safety, and maintainability of the component. The refactoring aims to improve the component's internal structure and performance.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\n* migrate illustrated-message component to TS, small refactor ([#6195](https://github.com/SAP/ui5-webcomponents/issues/6195)) ([046c779](https://github.com/SAP/ui5-webcomponents/commit/046c779f654648172619dd720c0d90342ec78fb9))\n```\n\n----------------------------------------\n\nTITLE: Import UI5 Web Component (Button) in Nuxt - TS\nDESCRIPTION: Imports the `Button.js` component from the `@ui5/webcomponents` library inside a `<script setup>` tag.  This makes the `ui5-button` element available for use in the application's templates within a Nuxt environment where auto-imports are disabled for web components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/03-Vue.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport \"@ui5/webcomponents/dist/Button.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Code with Editor Component\nDESCRIPTION: Renders the imported HTML, CSS and JavaScript code using an Editor component. The Editor component likely takes the code as properties (html, js, css) and displays them in a formatted and potentially editable way.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/AI Writing Assistant/Input.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component with HTML and JS\nDESCRIPTION: This code snippet renders an 'Editor' component, passing the previously imported 'html' and 'js' strings as props. This suggests that the 'Editor' component is designed to display and potentially allow editing of HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ColorPalettePopover/MoreColors/MoreColors.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: ESM File Extension Support - JavaScript\nDESCRIPTION: This snippet addresses an issue where missing file extensions caused problems with ESM support. The fix involves adding the necessary file extensions to ensure proper module resolution.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_58\n\n\n\n----------------------------------------\n\nTITLE: Import JavaScript content using raw-loader\nDESCRIPTION: This snippet imports the content of `main.js` as a raw string using `raw-loader`. This allows you to include the JavaScript code directly as a string, which could be useful for dynamic code execution or embedding.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Slider/ShowTooltip/ShowTooltip.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Injecting Content with Partials\nDESCRIPTION: Illustrates how to create templates with injectable content by passing partials as optional parameters to a template function. The `headerContent` function will either display the injected header or a default one.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_16\n\nLANGUAGE: TSX\nCODE:\n```\nexport default BaseTemplate(this: ComponentClass, headerContent?: Function) {\n    return <div>\n        {headerContent ?\n            headerContent.call(this)\n            :\n            <span>default header content</span>\n        }\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Imperative Popover API - Javascript/HTML\nDESCRIPTION: This code snippet shows how to replace the imperative API (`showAt` method) with the declarative API (`open` and `opener` properties) for opening a popover. The older imperative method must be replaced with the declarative approach, which involves setting the `opener` and `open` properties accordingly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: Configure UI5 Web Components Editor\nDESCRIPTION: This snippet configures the UI5 Web Components Editor component. It takes the imported HTML and JavaScript strings as properties to be rendered in the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/AvatarGroup/GroupWithPopover/GroupWithPopover.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Illustrated Message Size Property to Design\nDESCRIPTION: This snippet demonstrates renaming the `size` property to `design` of the `ui5--illustrated-message`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Build the project for release using Yarn\nDESCRIPTION: This command builds the UI5 Web Components project for production. The output can be found in the `dist` folder of each package (e.g., `packages/main/dist` for the Button component). It requires that dependencies are installed first.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn # to install all dependencies\nyarn ci:releasebuild # to build the project\n```\n\n----------------------------------------\n\nTITLE: Property Setter in Component\nDESCRIPTION: Explains how properties are set on DOM elements.  The example shows how, if a property exists on the DOM element, it will be set directly using bracket notation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nif (\"boolProp\" in domEl) {\n    domEl[\"boolProp\"] = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Dynamic Imports in UI5 Web Components\nDESCRIPTION: This commit declares the webpackChunkName in dynamically generated imports, improving code splitting and lazy loading. This enhancement ensures that the components and their dependencies load efficiently as needed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_29\n\nLANGUAGE: Git\nCODE:\n```\n### Bug Fixes\n\n* declare webpackChunkName in more generated dynamic imports ([#8029](https://github.com/SAP/ui5-webcomponents/issues/8029)) ([c85fa23](https://github.com/SAP/ui5-webcomponents/commit/c85fa23bd32574434f537df95c7507a7f1a48b5e))\n```\n\n----------------------------------------\n\nTITLE: Import CSS in a TS file\nDESCRIPTION: This TypeScript snippet shows how to import the custom CSS file, assuming the build tool will handle CSS imports and inject them into a <style> tag.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"<path-to-your-css-file>/mytheme.css\";\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Slots - TypeScript\nDESCRIPTION: This snippet shows how to define a slot with `individualSlots: true` in TypeScript.  Setting this property creates an `_individualSlot` property on each child element assigned to this slot, enabling individual placement of each element in the shadow DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\n@slot({\n\ttype: HTMLElement,\n\t\"default\": true,\n\tindividualSlots: true,\n})\nitems!: Array<HTMLElement>;\n```\n\n----------------------------------------\n\nTITLE: Replacing IUploadCollectionItem Interface - Javascript\nDESCRIPTION: This code snippet demonstrates replacing the `IUploadCollectionItem` interface with the `UploadCollectionItem` type.  The older interface needs to be replaced with importing the `UploadCollectionItem` type from the specified module.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IUploadCollectionItem} from \"@ui5/webcomponents-fiori/dist/UploadCollection.js\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport type UploadCollectionItem from \"@ui5/webcomponents-fiori/dist/UploadCollectionItem.js\"\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files as raw strings\nDESCRIPTION: This snippet imports the content of 'sample.html' and 'main.js' as raw strings using the 'raw-loader'. These strings are then used to configure the editor component. The '!!' prefix ensures that the loader is applied even if it's configured differently elsewhere.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/States/States.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Component with HTML and JS - JavaScript\nDESCRIPTION: This snippet renders an `<Editor />` component, passing the previously imported HTML and JavaScript strings as props named `html` and `js`. The Editor component presumably utilizes these strings to initialize or update its content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Text/CustomStyling/CustomStyling.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Calendar Event - Typescript\nDESCRIPTION: This code snippet shows the renaming of `selected-dates-change` event to `selection-change`, along with the changes in event details from `values` and `dates` to `selectedValues` and `selectedDateValues`.  Event listeners must be updated to use the new event name and access the updated event detail properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UI5 Web Components Editor\nDESCRIPTION: This snippet configures the UI5 Web Components Editor by passing the imported HTML and JavaScript strings as properties. The `html` property receives the content of `sample.html`, and the `js` property receives the content of `main.js`. These properties likely define the initial content or behavior of the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Input/CustomStyling/CustomStyling.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Configuration\nDESCRIPTION: Imports the `getTheme` and `setTheme` functions from the `@ui5/webcomponents-base/dist/config/Theme.js` module. These functions are used to get and set the current theme of the UI5 Web Components. The theme impacts the visual appearance of the components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getTheme, setTheme } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\n```\n\n----------------------------------------\n\nTITLE: Update Carousel Page Indicator Style - HTML\nDESCRIPTION: Demonstrates the replacement of the `page-indicator-style` property with `page-indicator-type` in the `ui5-carousel` component. This simplifies the configuration of the page indicator.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Message (HTML)\nDESCRIPTION: This HTML snippet presents the TypeScript error message displayed when attempting to pass an invalid type to the `setLanguage` function. It indicates that a boolean value is not assignable to a string parameter.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/16-typescript-support.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\nArgument of type 'boolean' is not assignable to parameter of type 'string'.\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Defining Person Object\nDESCRIPTION: This JavaScript defines a `person` object with `name` and `lastName` properties on the component instance.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nthis.person = {\n\tname: \"John\",\n\tlastName: \"Smith\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Upstream Changes\nDESCRIPTION: This command fetches the branches and commits from the `upstream` remote, storing them in local branches such as `upstream/main`.  This does not modify the local branches; instead, it updates the local tracking branches for the upstream repository. Requires the `upstream` remote to be configured.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/01-development-workflow.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ git fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Using imported content in an Editor component\nDESCRIPTION: This snippet uses the imported `html` and `js` strings as props for an `Editor` component. This suggests the `Editor` component is designed to display or edit HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Switch/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Fix fetching Indonesian language - UI5 Web Components\nDESCRIPTION: This code snippet fixes an issue where the Indonesian language (\"id\") was not being fetched correctly. It addresses issue #11233 by modifying the framework to properly retrieve the language data. The commit 9a36df5 resolves this bug.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\n9a36df5\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript with Raw Loader\nDESCRIPTION: This code snippet imports HTML and JavaScript files as raw strings using the 'raw-loader' webpack loader. The imported strings are assigned to the variables 'html' and 'js' respectively. These variables are then passed as props to an 'Editor' component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateTimePicker/MinMax/MinMax.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming allowCustomValues to noValidation (ui5-multi-combobox)\nDESCRIPTION: The `allowCustomValues` property of the `ui5-multi-combobox` has been renamed to `noValidation`. This snippet shows the deprecated property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_64\n\nLANGUAGE: html\nCODE:\n```\n<ui5-multi-combobox allow-custom-values></ui5-multi-combobox>\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript Files\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using raw-loader. The imported strings are then used as props for configuring an editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Dialog/WithState/WithState.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Removing CSP APIs in UI5 Web Components\nDESCRIPTION: This snippet demonstrates the removal of the `CSP.js` module and associated APIs for managing `<style>` and `<link>` tags in UI5 Web Components. The `setUseLinks`, `setPackageCSSRoot`, and `setPreloadLinks` functions are no longer available due to the adoption of adoptedStyleSheets in modern browsers.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Icon Imports to i18n Texts\nDESCRIPTION: This code snippet resolves an issue where icon imports were not correctly integrated with i18n texts within the @ui5/webcomponents-tools package. This commit ensures that icons are properly referenced and displayed in internationalized contexts, addressing issue #11091.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Replacing Tab subTabs Slot\nDESCRIPTION: This snippet shows that `slot=\"subTabs\"` must now be `slot=\"items\"`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_83\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Inlining Sources in Map Files in Javascript\nDESCRIPTION: This bug fix inlines sources in the .map file, eliminating the mandatory requirement for the src folder. This change facilitates easier debugging and deployment by embedding source code directly into the source map, simplifying the distribution and maintenance of UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Highlight Component Definition in React\nDESCRIPTION: This code defines a React component named `Highlight` that wraps its children in a `span` element. The `span` element has inline styles to set the background color, border radius, text color, and padding. The color is passed as a prop to the component, allowing for dynamic highlighting.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/announcing-rc-v2.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '5px',\n      color: '#fff',\n      padding: '0.1rem',\n    }}>\n    {children}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting ShellBar Accessibility Texts and Roles (Old)\nDESCRIPTION: This JavaScript snippet illustrates the deprecated method of setting accessibility texts and roles for the ShellBar component using `accessibilityTexts` and `accessibilityRoles`.  These properties are being replaced by `accessibilityAttributes`. Migrate to the new `accessibilityAttributes` structure.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nshellbar.accessibilityTexts = {\n    profileButtonTitle: \"John Dow\",\n    logoTitle: \"Custom logo title\",\n}\n\nshellbar.accessibilityRoles = {\n    logoRole: \"link\"\n};\n```\n\n----------------------------------------\n\nTITLE: Revert tsconfig moduleResolution to node - UI5 Web Components\nDESCRIPTION: This code reverts the tsconfig moduleResolution setting back to 'node'.  This change was made to address issue #10014.  The commit hash associated with this fix is 0724b92.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\n0724b92\n```\n\n----------------------------------------\n\nTITLE: Configuring UI5 Web Components Editor\nDESCRIPTION: This snippet configures the UI5 Web Components Editor by passing the imported HTML, JavaScript, and CSS strings as props. The strings `html`, `js`, and `css` are passed as properties to an `Editor` component, allowing it to render the editor with the corresponding content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/DynamicSideContent/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Handlebars without question mark prefix on boolean attributes\nDESCRIPTION: This shows how boolean attributes render without the ? prefix. They will exist, even if set to false, which is not ideal for boolean attributes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_39\n\nLANGUAGE: handlebars\nCODE:\n```\n<input\n\tid=\"{{_id}}-CB\"\n\ttype='checkbox'\n\tchecked=\"{{checked}}\"\n\treadonly=\"{{readonly}}\"\n\tdisabled=\"{{disabled}}\"\n\ttabindex=\"-1\"\n\taria-hidden=\"true\"\n\tdata-sap-no-tab-ref\n/>\n```\n\n----------------------------------------\n\nTITLE: Building a Production Build\nDESCRIPTION: This command builds the project for production using npm. It optimizes the code and generates the necessary files for deployment. The output includes information about the generated files and their sizes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/1-getting-started/01-first-steps.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using TNT Icon v3 with UI5 Web Component ui5-icon\nDESCRIPTION: This code snippet demonstrates how to explicitly specify the TNT Icons v3 version of an icon for use with the `ui5-icon` web component. This ensures that the v3 version is always displayed, regardless of the current theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-icon name=\"tnt-v3/actor\"></ui5-icon>\n```\n\n----------------------------------------\n\nTITLE: Register i18n Loader - JavaScript\nDESCRIPTION: Registers an i18n loader function for each supported locale. This function fetches the content of `.properties` files for a given locale and uses `parseProperties` to process the file content. The `registerI18nLoader` function associates a loader with a specific locale and an identifier (in this case, \"myApp\").\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/08-using-i18n-for-apps.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst supportedLocales = [\"en\", \"fr\", \"de\", \"es\"];\nsupportedLocales.forEach(localeToRegister => {\n\tregisterI18nLoader(\"myApp\", localeToRegister, async (localeId) => {\n\t\tconst props = await (await fetch(`./assets/messagebundle_${localeId}.properties`)).text();\n\t\treturn parseProperties(props);\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Editor with HTML and JavaScript\nDESCRIPTION: This snippet configures the editor component using the imported HTML and JavaScript strings. The 'html' and 'js' variables, containing the raw content of the respective files, are passed as props to the '<Editor>' component.  This allows the editor to display and manipulate the web components defined in the HTML and JavaScript.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/States/States.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Fixing image in create-webcomponent-package\nDESCRIPTION: Fixes an image-related issue in the `create-webcomponent-package`.  Likely corrects the path to a missing or incorrectly displayed image, ensuring it renders as intended.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_28\n\nLANGUAGE: None\nCODE:\n```\n* fix image in `create-webcomponent-package` ([#7253](https://github.com/SAP/ui5-webcomponents/issues/7253)) ([3317e64](https://github.com/SAP/ui5-webcomponents/commit/3317e64b911f992abf34b88a48e6003a723f7b9e))\n```\n\n----------------------------------------\n\nTITLE: Fixing UI5 Illustrated Message Illustration Loading - JavaScript\nDESCRIPTION: This snippet addresses an issue with the ui5-illustrated-message component, specifically related to loading illustrations from collections. It resolves a bug where the component did not correctly support collection-based illustration loading. The fix ensures that illustrations are loaded as expected when provided through collections.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **ui5-illustrated-message:** support collection based illustration loading ([#7318](https://github.com/SAP/ui5-webcomponents/issues/7318)) ([6b52dbd](https://github.com/SAP/ui5-webcomponents/commit/6b52dbd157a3c8198e41c84157e3d9ae89e3386e))\n```\n\n----------------------------------------\n\nTITLE: Replacing slot=\"subTabs\" with slot=\"items\" in ui5-tab\nDESCRIPTION: This code shows how the `slot` property of the `ui5-tab` component has been changed from `subTabs` to `items`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: ValueState property values (Old)\nDESCRIPTION: This HTML snippet shows the old values for the `value-state` property in the `ui5-input` component. `Success`, `Warning` and `Error` are being replaced by `Positive`, `Critical` and `Negative` respectively. Migrate to the new values.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<ui5-input value-state=\"Success\"></ui5-input>\n<ui5-input value-state=\"Warning\"></ui5-input>\n<ui5-input value-state=\"Error\"></ui5-input>\n```\n\n----------------------------------------\n\nTITLE: Importing icon pathData\nDESCRIPTION: This code snippet illustrates how to import `pathData` from UI5 Web Components icons. The example shows the deprecated method, followed by the new asynchronous approach using `getPathData`.  The new method is required due to changes in how icon data is handled, requiring an asynchronous call to retrieve the SVG path data.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pathData, ltr, accData } from \"@ui5/webcomponents-icons/dist/accept.js\";\nconsole.log(pathData); // String containing the SVG path\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type Header on Test Suite - JavaScript\nDESCRIPTION: This snippet fixes a bug in the infrastructure related to setting the Content-Type header on the test suite. The fix ensures that the Content-Type header is correctly set, resolving issues with test execution and reporting. This involves updating the test suite configuration to include the Content-Type header.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **infra:** set Content-Type header on testsuite ([#6108](https://github.com/SAP/ui5-webcomponents/issues/6108)) ([fae3f91](https://github.com/SAP/ui5-webcomponents/commit/fae3f91975ab1dad7135bea2227f61986eff403f))\n```\n\n----------------------------------------\n\nTITLE: Fixing Release Commands in JavaScript\nDESCRIPTION: This JavaScript code snippet addresses issues related to release commands within the project's infrastructure. The changes ensure that release commands function correctly, enabling smooth and reliable releases of the UI5 web components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n**infra:** release commands ([#7978](https://github.com/SAP/ui5-webcomponents/issues/7978)) ([b0e653c](https://github.com/SAP/ui5-webcomponents/commit/b0e653cf911cc0ffe5fb5dcbd50a7c238f20f33d))\n```\n\n----------------------------------------\n\nTITLE: Removing the `CoPilotAnimation` feature from `ui5-shellbar` (JavaScript)\nDESCRIPTION: Demonstrates how to remove the `CoPilotAnimation` feature from the `ui5-shellbar` component. The `CoPilotAnimation` feature is removed in the updated version. Removing the import and any associated code will resolve the issue. It will no longer work for the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport CoPilotAnimation from \"@ui5/webcomponents-fiori/dist/features/CoPilotAnimation.js\"\n```\n\n----------------------------------------\n\nTITLE: ui5-placementType Import Change\nDESCRIPTION: Update of `PopoverPlacementType` import\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Removing the `showCoPilot` Property from `ui5-shellbar` (HTML)\nDESCRIPTION: This shows how to remove the `showCoPilot` property from the `ui5-shellbar` component.  The `showCoPilot` property is removed in the updated version.  Directly removing the attribute will resolve the issue. It will no longer work for the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-shellbar show-co-pilot></ui5-shellbar>\n```\n\n----------------------------------------\n\nTITLE: Replacing UI5Element render Method with renderer\nDESCRIPTION: This snippet demonstrates the replacement of the `render` method with `renderer` in the `UI5Element` class.  Subclasses of `UI5Element` need to update their method definition.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Web Component Editor\nDESCRIPTION: This snippet configures a web component editor, passing the previously imported HTML and JavaScript strings as properties. The '<Editor>' component presumably uses these properties to display and/or execute the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/MinMax/MinMax.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Handlebars: Rendering Unsafe HTML\nDESCRIPTION: This example demonstrates how to render unescaped HTML using `{{{` and `}}}` in Handlebars. This should be used with caution as it can introduce security vulnerabilities.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_18\n\nLANGUAGE: handlebars\nCODE:\n```\n<p>{{{unsafeMessage}}}</p>\n```\n\n----------------------------------------\n\nTITLE: JavaScript array definition for Handlebars looping\nDESCRIPTION: This JavaScript code defines an array of objects named `items`.  This array is used as the data source for the Handlebars `{{#each}}` loop example.  Each object in the array represents an item with properties like `id`, `posinset`, `setsize`, and `text`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nthis.items = [\n\t{\n\t\tid: \"item1\",\n\t\tposinset: 1,\n\t\tsetsize: 5,\n\t\ttext: \"Item 1\"\n\t},\n\t{\n\t\tid: \"item2\",\n\t\tposinset: 2,\n\t\tsetsize: 5,\n\t\ttext: \"Item 2\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Toolbar Item (JavaScript)\nDESCRIPTION: This code demonstrates how to register the toolbar item using the `registerToolbarItem` function. This registration makes the component available for use within the `ui5-toolbar`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { registerToolbarItem } from \"./ToolbarRegistry.js\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nregisterToolbarItem(ToolbarButton);\n```\n\n----------------------------------------\n\nTITLE: Importing Title Component\nDESCRIPTION: This code snippet shows how to import the `Title` component from the `@ui5/webcomponents` package. The `Title` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Title.js\";\n```\n\n----------------------------------------\n\nTITLE: Rendering UI5 Web Components in Editor\nDESCRIPTION: This snippet renders the Editor component, passing the imported HTML, CSS, and JavaScript strings as props.  The Editor component is expected to handle rendering the UI5 Web Component defined by the imported code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/patterns/AIGuidedPrompt/Popover/Popover.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI\nDESCRIPTION: Installs the Angular CLI (command-line interface) globally, allowing you to create, manage, and build Angular projects.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Renaming Popover Placement Properties - HTML/JavaScript\nDESCRIPTION: This snippet shows the renaming of the `placementType` property and the `PopoverPlacementType` enum to `placement` and `PopoverPlacement` respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Fixing Imports: String imports in UI5 Web Components Icons\nDESCRIPTION: This commit fixes an issue in the @ui5/webcomponents-icons package where template literals were used for imports. It replaces the template literals with strings for imports, improving code clarity and maintainability.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n([ac70676](https://github.com/SAP/ui5-webcomponents/commit/ac7067685c72288ddc8d55363f5b589a9d279b0d))\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js Module (TypeScript)\nDESCRIPTION: The `CSP.js` module has been removed due to browser support for adoptedStyleSheets. This code demonstrates the removal of the CSP module and highlights the APIs that are no longer available.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Removing showOverflow Property - HTML\nDESCRIPTION: This code snippet shows the removal of the `show-overflow` property and replacing it with the overflowButton slot in the `ui5-tabcontainer` component. The older property should be replaced with the new slot-based approach for handling overflow.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript as Raw String with raw-loader\nDESCRIPTION: This snippet imports a JavaScript file as a raw string using webpack's `raw-loader`. The `js` variable then holds the entire JavaScript content as a single string, enabling it to be used within the UI5 Web Components editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/SegmentedButton/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Renaming popover alignment options (HTML)\nDESCRIPTION: The Left and Right options for popover alignment have been renamed to Start and End.  This snippet demonstrates updating the horizontal-align and placement-type properties in the ui5-popover component.  Use Start or End instead of Left or Right.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_35\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: Option Disabled Property Removal HTML\nDESCRIPTION: This snippet illustrates the deprecated `disabled` property of the `ui5-option` component, which has been removed and will no longer work. Developers should remove this property from their code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_56\n\nLANGUAGE: html\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Fixing Infrastructure Release Commands\nDESCRIPTION: This code snippet fixes the release commands in the infrastructure of the ui5-webcomponents project. The change is identified by issue #7978 and commit hash b0e653c. This ensures correct and reliable release procedures for the project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n**infra:** release commands ([#7978](https://github.com/SAP/ui5-webcomponents/issues/7978)) ([b0e653c](https://github.com/SAP/ui5-webcomponents/commit/b0e653cf911cc0ffe5fb5dcbd50a7c238f20f33d))\n```\n\n----------------------------------------\n\nTITLE: Renaming the ui5-illustrated-message size property to design\nDESCRIPTION: This change renames the `size` property to `design` for `ui5-illustrated-message`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Renaming subTabs slot to items slot in ui5-tab (HTML)\nDESCRIPTION: The `subTabs` slot has been renamed to the `items` slot in `ui5-tab`. This snippet shows how to update the slot name in the HTML code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Element Defined Tag (HTML)\nDESCRIPTION: This snippet demonstrates how to use the custom element defined with the `@custom` decorator in HTML. It showcases the basic HTML syntax for including the custom element in a web page.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<my-component></my-component>\n```\n\n----------------------------------------\n\nTITLE: Fixing Create Package Bugs in Javascript\nDESCRIPTION: This commit addresses and resolves various bugs related to the create package functionality.  It improves the stability and reliability of the package creation process within the UI5 Web Components development workflow.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Fixing Release Build in UI5 Web Components\nDESCRIPTION: This code snippet addresses a bug in the release build process within the SAP UI5 Web Components project. It identifies the commit hash and issue number associated with the fix, providing context for the resolved issue. This commit directly impacts the build and release process.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nrelease build ([#8222](https://github.com/SAP/ui5-webcomponents/issues/8222)) ([27042ac](https://github.com/SAP/ui5-webcomponents/commit/27042ac90443dea8d5900d1c5bfa5bc93d365da0))\n```\n\n----------------------------------------\n\nTITLE: UI5 Select DOM Structure v2.0\nDESCRIPTION: This HTML snippet shows the DOM structure of the `ui5-select` in UI5 Web Components version 2.0, utilizing the native browser popover API. `ui5-option` elements are now physical children of the component and are slotted into the `ui5-list` inside the `ui5-responsive-popover`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/popover-api-in-v2.mdx#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <ui5-select>\n        #shadow-root\n            <div></div> <!-- The \"box\" part of the select -->\n            <ui5-responsive-popover> <!-- the \"dropdown\" part of the ui5-select -->\n                <ui5-list> <!-- the list inside ui5-select's dropdown -->\n                    <slot></slot>\n                </ui5-list>\n            </ui5-responsive-popover>\n\n        <ui5-option><strong>Option</strong> 1</ui5-option>\n        <ui5-option><ui5-icon name=\"accept\"></ui5-icon> Option 2</ui5-option>\n        <ui5-option><i>Option 3</i></ui5-option>\n    </ui5-select>\n\n</body>\n```\n\n----------------------------------------\n\nTITLE: Web Component Editor Instantiation\nDESCRIPTION: This snippet instantiates the 'Editor' component, passing the imported HTML and JavaScript strings as props.  The 'html' prop is assigned the HTML content from 'sample.html', and the 'js' prop is assigned the JavaScript content from 'main.js'. The Editor component is then responsible for rendering and managing these content strings.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Button/IconOnly/IconOnly.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Start the project locally with Yarn\nDESCRIPTION: This command starts a development server and serves the project. It opens the index URL in the browser with a listing of all test pages. Requires dependencies to be installed.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn start # to serve the project\n```\n\n----------------------------------------\n\nTITLE: Defining a UI5 Button\nDESCRIPTION: This HTML snippet defines a ui5-button component with the text \"Press\". The corresponding CSS snippet overrides the `--sapButton_TextColor` CSS variable to change the button text color to purple.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/11-styles.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button>Press</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Using Editor Component with HTML, JavaScript, CSS (JavaScript)\nDESCRIPTION: This snippet shows how to use the imported HTML, JavaScript, and CSS strings as props for an `Editor` component. The `html`, `js`, and `css` variables, which contain the file contents as strings, are passed to the `Editor` component as props with the same names. This likely represents a React or similar framework component that renders these contents.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/AccessibleName/AccessibleName.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML Content\nDESCRIPTION: This code snippet imports the content of an HTML file named 'sample.html' using 'raw-loader'. The 'raw-loader' is used to treat the HTML file as a raw string, which can then be passed as a property to a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/NotificationList/GroupItems/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Using ui5-li-group with header slot (ui5-list)\nDESCRIPTION: This snippet demonstrates using the `header` slot within a `ui5-li-group` to customize the header content. This allows for more complex header structures than just text, replacing the functionality of the deprecated `ui5-li-groupheader` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_61\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list>\n  <ui5-li-group>\n    <div slot=\"header\" style=\"width: '100%'; display: flex; justify-content:space-between; align-items:center;\">\n        <span>Back End Developers</span>\n        <ui5-icon name=\"navigation-right-arrow\"></ui5-icon>\n    </div>\n    <ui5-li>Delete Product</ui5-li>\n    <ui5-li>Audit Log Settings</ui5-li>\n  </ui5-li-group>\n</ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Import UI5 Table from compat package (Breaking Change)\nDESCRIPTION: This code snippet shows the required import statements for the ui5-table component and its related components after the move to the `@ui5/webcomponents-compat` package. It is a breaking change from version 2.0.0-rc.3 and requires updating import paths.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents-compat/dist/Table.js\"; // ui5-table\nimport \"@ui5/webcomponents-compat/dist/TableColumn.js\"; // ui5-table-column\nimport \"@ui5/webcomponents-compat/dist/TableRow.js\"; // ui5-table-row`\nimport \"@ui5/webcomponents-compat/dist/TableGroupRow.js\";` // ui5-table-group-row\nimport \"@ui5/webcomponents-compat/dist/TableCell.js\"; // ui5-table-cell\n```\n\n----------------------------------------\n\nTITLE: Link Wrapping Behavior (Now)\nDESCRIPTION: Shows the new default behavior of the ui5-link component, where text wraps to the next line if there is not enough space. The wrapping-type property is now set to Normal by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-link>some very very very long link</ui5-link> <!-- would let the text wrap if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Fixing Scoping Issues and Providing Documentation\nDESCRIPTION: This code addresses scoping issues within the project and provides documentation on how scoping should be correctly used. This improves the maintainability and understandability of the codebase, addressing issue #10023.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: HTML output of boolean attribute assignment (falsy values)\nDESCRIPTION: This HTML code shows the resulting DOM when boolean attributes are bound with the `?` prefix and their values are falsy. The `checked`, `readonly`, and `disabled` attributes are completely absent from the element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<input\n\tid=\"myCB-CB\"\n\ttype='checkbox'\n\ttabindex=\"-1\"\n\taria-hidden=\"true\"\n\tdata-sap-no-tab-ref\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing tsconfig moduleResolution in UI5 Web Components\nDESCRIPTION: This snippet represents a bug fix that reverts the tsconfig moduleResolution to 'node' within the UI5 Web Components project. This correction addresses a potential issue with module resolution, ensuring compatibility and proper functioning of the components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n* **tools:** revert tsconfig moduleResolution to node ([#10014](https://github.com/SAP/ui5-webcomponents/issues/10014)) ([0724b92](https://github.com/SAP/ui5-webcomponents/commit/0724b9289ad04f88972d4978ed37e76f13abca13))\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js module\nDESCRIPTION: This code shows the removal of the CSP.js module and the APIs that are no longer available due to browsers now supporting adoptedStyleSheets. The module was responsible for creating <style> and <link> tags.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: HTML Sample for ui5-table-row-action-navigation\nDESCRIPTION: This HTML snippet provides a sample structure for the ui5-table-row-action-navigation component. It likely defines the table structure and includes the ui5-table-row-action-navigation element within a table row. The `html` variable likely contains the complete HTML source.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/RowActionNavigation/RowActionNavigation.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Logic\nDESCRIPTION: Imports the JavaScript module containing the logic for the sample component. This module handles the component's behavior, data binding, and event handling.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/RowAction/RowAction.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Refactoring: Removing Belize theme\nDESCRIPTION: This commit refactors the theming by removing the SAP Belize theme. This change might affect existing applications that rely on the Belize theme, requiring them to migrate to a different theme.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: UI5 DatePicker DOM Structure v1.24\nDESCRIPTION: This HTML snippet shows the DOM structure of the `ui5-date-picker` in UI5 Web Components version 1.24. The popover part of the component (`ui5-responsive-popover`) is located within a static area item, separate from the main component in the DOM.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/popover-api-in-v2.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <ui5-static-area>\n        <ui5-static-area-item> <!-- A static area item, associated with the DatePicker component -->\n            #shadow-root\n                <ui5-responsive-popover></ui5-responsive-popover> <!-- here goes the Popover part of the DatePicker component -->\n        </ui5-static-area-item>\n    </ui5-static-area>\n\n    .........\n\n    <div style=\"transform: translate(12rem, 12rem)\"> <!-- a parent node has CSS that normally breaks popup positioning -->\n        <ui5-date-picker>\n            #shadow-root\n                <ui5-input></ui5-input> <!-- The date Input part of the DatePicker component -->\n        </ui5-date-picker>\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Import HTML, JS, and CSS files\nDESCRIPTION: This snippet imports the contents of HTML, JavaScript, and CSS files as strings using raw-loader. These strings are then used to configure an Editor component, providing the initial code for the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/Cyclic/Cyclic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Install ChromeDriver with npm\nDESCRIPTION: This command installs ChromeDriver, a peer dependency of `@ui5/webcomponents-tools`, using npm. ChromeDriver is required for running WDIO tests with Google Chrome and needs to be the same version as the browser.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i --save-dev chromedriver\n```\n\n----------------------------------------\n\nTITLE: Replacing ICardHeader interface with CardHeader type\nDESCRIPTION: This code shows the replacement of the ICardHeader interface with the CardHeader type. Users who previously imported ICardHeader should now import CardHeader instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript Content\nDESCRIPTION: This snippet imports HTML and JavaScript code as raw strings from external files named sample.html and main.js, respectively. It leverages the 'raw-loader' webpack loader to accomplish this.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/Groups/Groups.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Install Cypress and UI5 Web Components Dependency (npm)\nDESCRIPTION: Installs Cypress and the @ui5/cypress-ct-ui5-webc package as development dependencies using npm. This enables component testing for UI5 Web Components within Cypress.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/cypress-ct-ui5-webc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D cypress @ui5/cypress-ct-ui5-webc\n```\n\n----------------------------------------\n\nTITLE: Replacing ICardHeader Interface - Typescript\nDESCRIPTION: This code snippet illustrates the replacement of the `ICardHeader` interface with the `CardHeader` type in SAP UI5 Web Components.  The older interface should be replaced with importing the `CardHeader` type directly from the specified module.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ICardHeader } from \"@ui5/webcomponents-base/dist/Card.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type CardHeader from \"@ui5/webcomponents-base/dist/CardHeader.js\"\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Event Type Checking\nDESCRIPTION: This code snippet introduces strict event type checking to the SAP UI5 Web Components framework. This enhancement improves the type safety of event handling, helping developers catch potential errors at compile time, addressing issue #10235.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding currentTarget to event handler type - TypeScript\nDESCRIPTION: This code adds the `.currentTarget` property to the type of event handler in TSX and UI5CustomEvent. This allows event handlers to access the element that the event listener is attached to, providing more context about the event.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/ai/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **framework:** add `.currentTarget` to the type of event handler in TSX and UI5CustomEvent ([#10957](https://github.com/SAP/ui5-webcomponents/issues/10957)) ([f56753c](https://github.com/SAP/ui5-webcomponents/commit/f56753c5142d6e817b05d7e33bd160f09c2d5205))\n */\n```\n\n----------------------------------------\n\nTITLE: Toolbar Template Getters (JavaScript)\nDESCRIPTION: This code block defines the static getter methods for retrieving the toolbar and popover templates for the component. `ToolbarButtonTemplate` and `ToolbarPopoverButtonTemplate` represent the HTML templates for the component's toolbar and popover representations.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/internal/Toolbar.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic get toolbarTemplate() {\n    return ToolbarButtonTemplate;\n}\n\nstatic get toolbarPopoverTemplate() {\n    return ToolbarPopoverButtonTemplate;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Disabled Property from ui5-option - HTML\nDESCRIPTION: This code snippet showcases the removal of the disabled property from the `ui5-option` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-business-suite/CHANGELOG.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Fixing broken test page for UI5 Web Components\nDESCRIPTION: This commit fixes a broken test page issue within the UI5 Web Components project. The fix likely involves correcting paths, dependencies, or configurations related to the test page to ensure it functions as expected.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_26\n\nLANGUAGE: None\nCODE:\n```\n* broken test page ([#8097](https://github.com/SAP/ui5-webcomponents/issues/8097)) ([6903367](https://github.com/SAP/ui5-webcomponents/commit/6903367c290b84490c74a6ef56b074aa0a2fc729))\n```\n\n----------------------------------------\n\nTITLE: Updating Popover alignment and placement values\nDESCRIPTION: This snippet explains how to update the `horizontal-align` and `placement-type` properties of `ui5-popover`. The previous values 'Left' and 'Right' are replaced by 'Start' and 'End' respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-popover horizontal-align=\"Left\" placement-type=\"Left\"></ui5-popover>\n\n<ui5-popover horizontal-align=\"Start\" placement-type=\"Start\"></ui5-popover>\n```\n\n----------------------------------------\n\nTITLE: JavaScript for ui5-table-row-action-navigation\nDESCRIPTION: This JavaScript snippet likely contains the logic to handle the `row-action-click` event for the ui5-table-row-action-navigation component. It might also contain code to dynamically control the visibility of the navigation actions based on specific conditions. The `js` variable likely contains the complete JavaScript source.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/RowActionNavigation/RowActionNavigation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Create project directory and initialize npm\nDESCRIPTION: These commands create a project directory, navigate into it, and initialize a new npm project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/13-theming-part2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir create-custom-theme\ncd create-custom-theme\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Import HTML, JS, and CSS for UI5 Editor\nDESCRIPTION: This snippet imports HTML, JavaScript, and CSS files using `raw-loader`.  The imported content from `sample.html`, `main.js`, and `main.css` are assigned to the `html`, `js`, and `css` variables, respectively. These variables are then passed as props to the `<Editor>` component to configure it.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Radio Button Wrapping Behavior (Before)\nDESCRIPTION: Demonstrates the previous default behavior of the ui5-radio-button component where text would be truncated if there was not enough space. The wrapping-type property was set to None by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-radio-button text=\"Option A with long long text\"></ui5-radio-button>\n<!-- would truncate the text if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Attempting to use standard Custom Elements - HTML\nDESCRIPTION: This HTML snippet shows an example of how using the standard (un-scoped) UI5 Web Components tags will not work after applying scoping.  The custom elements will not be upgraded, meaning the components will not render as intended.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/06-scoping.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button>Click me</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Renaming tabs-overflow-mode to overflow-mode on ui5-tabcontainer\nDESCRIPTION: Shows renaming the `tabs-overflow-mode` attribute to `overflow-mode` on the `ui5-tabcontainer` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Renaming separator-style to separators - HTML\nDESCRIPTION: This snippet demonstrates the renaming of the `separator-style` property to `separators` in the `ui5-breadcrumbs` component.  The old and new ways of defining separator are shown.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_90\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Import HTML Sample\nDESCRIPTION: This snippet imports the HTML structure for the table example. It uses `raw-loader` to load the HTML file as a string.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Table/Virtualizer/Virtualizer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: ui5-breadcrumbs separator-style renamed to separators\nDESCRIPTION: Renames `separator-style` to `separators` on ui5-breadcrumbs\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Removing Disabled Property for ui5-option - HTML\nDESCRIPTION: This snippet shows the removal of the disabled property for the ui5-option component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_25\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Start the website app using Yarn\nDESCRIPTION: This command starts the website application (Docs & Samples).  It requires dependencies to be installed.  The website will be available at http://localhost:3000/ui5-webcomponents/nightly/\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn # to install all dependencies\n\n# start the playground from the project root\nyarn start:website\n\n# open http://localhost:3000/ui5-webcomponents/nightly/\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts a local development server for the Docusaurus website. It enables hot reloading, so changes made to the code are reflected live in the browser without needing to restart the server. This command is used during development to preview changes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Renaming placementType property and PopoverPlacementType enum to placement and PopoverPlacement (HTML/JavaScript)\nDESCRIPTION: The `placementType` property and the `PopoverPlacementType` enum have been renamed to `placement`. This snippet demonstrates how to update the property name and enum in the code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<ui5-popover placement-type=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacementType.js\";\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-placement=\"Bottom\"></ui5-popover>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport PopoverPlacementType from \"@ui5/webcomponents/dist/types/PopoverPlacement.js\";\n```\n\n----------------------------------------\n\nTITLE: Reverting Module Resolution Setting in Javascript\nDESCRIPTION: This change reverts the `moduleResolution` setting back to `node` within the create-package functionality. This fix addresses issues that arose from changes to module resolution, ensuring compatibility and stability when creating new UI5 Web Components packages.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: ES6 Module Import SelectionAssistant\nDESCRIPTION: This code snippet demonstrates how to import the `getElementSelection` function from the `@ui5/webcomponents-base/dist/util/SelectionAssistant.js` module.  This function is used to get the coordinates of selected text within an input field or text area. Note that the utility is in an experimental state.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/components/patterns/SelectionAssistant/Selection Assistant.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport getElementSelection from \"@ui5/webcomponents-base/dist/util/SelectionAssistant.js\";\n```\n\n----------------------------------------\n\nTITLE: Resulting SVG with role presentation and aria-hidden - HTML\nDESCRIPTION: This snippet demonstrates the resulting HTML in the shadow DOM when the `mode` property of `ui5-icon` is set to 'Decorative'. The SVG element has `role=\"presentation\"` and `aria-hidden=\"true\"` attributes, which hides the icon from assistive technologies.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/09-accessibility.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<svg role=\"presentation\" aria-hidden=\"true\" ... ></svg>\n```\n\n----------------------------------------\n\nTITLE: Renaming List 'busy' property\nDESCRIPTION: This snippet illustrates the renaming of the `busy` property to `loading` and `busyDelay` to `loadingDelay` in the `ui5-list` component. Developers must replace the old properties with the new ones to maintain the loading indicator functionality.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_66\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list busy busy-delay=\"500\"></ui5-list>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-list loading loading-delay=\"500\"></ui5-list>\n```\n\n----------------------------------------\n\nTITLE: Importing Segmented Button Component\nDESCRIPTION: This code snippet shows how to import the `SegmentedButton` component from the `@ui5/webcomponents` package. The `SegmentedButton` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/SegmentedButton.js\";\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript\nDESCRIPTION: Imports HTML and JavaScript files as raw strings using raw-loader. These strings are then passed to an Editor component as properties. This allows dynamic configuration of the Editor's content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toolbar/NeverOverflowingItems/NeverOverflowingItems.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Renaming size property to design (HTML)\nDESCRIPTION: The `size` property of the `ui5--illustrated-message` is renamed to `design`. This snippet shows how to update the property name in the HTML code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Introducing Dot Size in ui5-illustrated-message - JavaScript\nDESCRIPTION: Introduces a new \"Dot\" size for the ui5-illustrated-message component. This allows developers to configure the size of the dot illustration within the message component.  The implementation details are available in the linked GitHub issue and commit.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: HTML output of property assignment\nDESCRIPTION: This HTML code shows the output generated by the property assignment example. The `data-info` attribute is present, but the `.item` property is not directly reflected as an attribute. Instead, it is set as a property of the DOM element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"myId\" data-info=\"Some data\">Some text</div>\n```\n\n----------------------------------------\n\nTITLE: UI5Element Render to Renderer - TypeScript\nDESCRIPTION: This snippet illustrates the change from using the 'render' method to the 'renderer' method in classes extending UI5Element. This migration involves renaming the getter from 'render' to 'renderer'.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get render() {\n        return litRenderer;\n    }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyClass extends UI5Element {\n    static get renderer() {\n        return litRenderer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundDesign instead of TabContainerBackgroundDesign\nDESCRIPTION: Illustrates how to import `BackgroundDesign` instead of `TabContainerBackgroundDesign`\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Importing TimePicker Component\nDESCRIPTION: This code snippet shows how to import the `TimePicker` component from the `@ui5/webcomponents` package. The `TimePicker` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/TimePicker.js\";\n```\n\n----------------------------------------\n\nTITLE: Updating ui5-carousel Page Indicator Style (HTML)\nDESCRIPTION: This snippet shows the change from the `page-indicator-style` property to `page-indicator-type` in the `ui5-carousel` component. The old property is no longer supported.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-style=\"Numeric\"></ui5-carousel>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-carousel page-indicator-type=\"Numeric\"></ui5-carousel>\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript content\nDESCRIPTION: This snippet imports the content of the 'main.js' file as a string using the 'raw-loader' webpack loader. The imported JavaScript code is then assigned to the 'js' variable. This is likely done to pass the JavaScript code as a prop to a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Label/CustomStyling/CustomStyling.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Assets-static.js Module Removal - TypeScript\nDESCRIPTION: This snippet demonstrates the replacement of static asset imports with dynamic asset imports in TypeScript. The old Assets-static.js modules are replaced with Assets.js modules.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Accessing loop index in Handlebars\nDESCRIPTION: This Handlebars template shows how to access the index of the current item within an `{{#each}}` loop using the `{{@index}}` variable. The index is zero-based. The snippet creates a `div` element for each item, assigning a unique `part` attribute based on the index.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_31\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each items}}\n\t<div id=\"{{id}}\"\n\t\t part=\"item-{{@index}}\"\n\t>{{text}}</div>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Declaring webpackChunkName in Generated Dynamic Imports - JavaScript\nDESCRIPTION: Ensures that webpackChunkName is declared in generated dynamic imports to improve readability of runtime bundle names. This provides better organization of the output bundles. Details available in GitHub issue #7835.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Renaming size property to design in ui5-illustrated-message\nDESCRIPTION: This snippet shows how to rename the `size` property of the `ui5-illustrated-message` to `design` property.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Element Example - HTML\nDESCRIPTION: This snippet shows an example of using custom HTML elements within a UI5 Web Component.  Specifically, it uses `<app-trip-calendar>` as a slotted child within a `<ui5-card>`.  The `ignoreCustomElements` API can be used to optimize the rendering of components that contain custom HTML elements that do not have JavaScript attached and serve only a semantic purpose.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/15-other-framework-level-APIs.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-card>\n    <app-trip-calendar></app-trip-calendar>\n</ui5-card>\n```\n\n----------------------------------------\n\nTITLE: Renaming tabs-overflow-mode to overflow-mode (HTML)\nDESCRIPTION: The `tabs-overflow-mode` property has been renamed to the `overflow-mode` in `ui5-tabcontainer`. This snippet shows how to update the property name in the HTML code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Fixing Focus Visibility in UI5 Table (Compat) - JavaScript\nDESCRIPTION: This code snippet resolves an issue related to focus visibility in the ui5-table component within the compat package.  The fix ensures that the focus state is correctly displayed. This addresses accessibility concerns related to keyboard navigation.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **ui5-table:** focus visiblity (compat) ([#11118](https://github.com/SAP/ui5-webcomponents/issues/11118)) ([d99ab42](https://github.com/SAP/ui5-webcomponents/commit/d99ab4232dc3ea49eb1edc8770aba58e8d753321)), closes [#11112](https://github.com/SAP/ui5-webcomponents/issues/11112)\n```\n\n----------------------------------------\n\nTITLE: Fixing Icon Version Display in Custom Themes - JavaScript\nDESCRIPTION: This snippet addresses a bug related to displaying icon versions for custom themes built using the ThemeDesigner. It ensures that the correct icon versions are displayed in custom themes, preventing inconsistencies and ensuring that icons are rendered correctly. The fix involves updating the theming logic to correctly identify and display the icon versions.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **theming:** fix icons version display for custom themes (built via the ThemeDesigner) ([#6815](https://github.com/SAP/ui5-webcomponents/issues/6815)) ([63ff800](https://github.com/SAP/ui5-webcomponents/commit/63ff8007889a66efae074fc6b4dbcb1b7ea36713)), closes [#6758](https://github.com/SAP/ui5-webcomponents/issues/6758)\n```\n\n----------------------------------------\n\nTITLE: Define translatable text in messagebundle.properties\nDESCRIPTION: This code snippet shows how to define a translatable text as a key-value pair in the `messagebundle.properties` file. The key `PLEASE_WAIT` is assigned the value `wait`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n#please wait text for the sample component\nPLEASE_WAIT=wait\n```\n\n----------------------------------------\n\nTITLE: Replace TabContainerBackgroundDesign Import\nDESCRIPTION: Explains how to replace the import of `TabContainerBackgroundDesign` with `BackgroundDesign`. Update your import statements to reflect this change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Fixing nps.js to work with JS flow\nDESCRIPTION: This code fixes an issue where `nps.js` (likely a build script or task runner configuration file) was not working correctly with the JavaScript flow. The fix ensures that the script executes as expected, supporting the JavaScript build process, addressing issue #9942.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Renaming ColorPicker Color Property to Value\nDESCRIPTION: This snippet shows the renaming of the `color` property to `value` in the `ui5-color-picker` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Translation in messagebundle_es.properties\nDESCRIPTION: This snippet illustrates how to provide a translation for the `PLEASE_WAIT` key in the Spanish language within the `messagebundle_es.properties` file. The value `Espere` is assigned to the `PLEASE_WAIT` key.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nPLEASE_WAIT=Espere\n```\n\n----------------------------------------\n\nTITLE: Adding asset files with fetch URLs in core\nDESCRIPTION: This commit adds asset files with fetch URLs, enhancing the core functionalities of the UI5 Web Components. This allows for dynamic loading of assets via fetch, improving performance and flexibility.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing Release Commands in UI5 Web Components Infrastructure\nDESCRIPTION: This commit resolves issues related to the release commands within the UI5 web components infrastructure. The fix likely addresses problems with the deployment process or publishing of new versions.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_30\n\nLANGUAGE: Git\nCODE:\n```\n### Bug Fixes\n\n* **infra:** release commands ([#7978](https://github.com/SAP/ui5-webcomponents/issues/7978)) ([b0e653c](https://github.com/SAP/ui5-webcomponents/commit/b0e653cf911cc0ffe5fb5dcbd50a7c238f20f33d))\n```\n\n----------------------------------------\n\nTITLE: Fragments\nDESCRIPTION: Demonstrates how to use Fragments to wrap multiple elements without adding an extra DOM node. Fragments help avoid unnecessary elements when the syntax expects a single element.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_15\n\nLANGUAGE: TSX\nCODE:\n```\n<></>\n```\n\n----------------------------------------\n\nTITLE: Renaming tabs-overflow-mode to overflow-mode (HTML)\nDESCRIPTION: Rename `tabs-overflow-mode` to `overflow-mode` for ui5-tabcontainer\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer tabs-overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer overflow-mode=\"StartAndEnd\"></ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Correcting Component CSS Import Filename - JavaScript\nDESCRIPTION: This snippet fixes an issue within the framework where the file name in component CSS imports was incorrect. This fix ensures that CSS files are imported correctly, resolving styling issues and ensuring that components render as expected. This involves correcting the CSS import statements to reference the correct file names.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **framework:** correct fileName in component CSS import ([#6900](https://github.com/SAP/ui5-webcomponents/issues/6900)) ([4d950c5](https://github.com/SAP/ui5-webcomponents/commit/4d950c5ea3bee0e3b629e5797693ecf41a2cdfd3))\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Source Code\nDESCRIPTION: Imports the raw JavaScript source code from the 'main.js' file using a raw-loader. This enables the JavaScript content to be used as a string within the JavaScript environment. The 'js' variable will contain the JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/RadioButton/TextWrapping/TextWrapping.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Fixing ESLint for 3rd Party JS Projects - JavaScript\nDESCRIPTION: This snippet fixes an issue where ESLint was not functioning correctly for JavaScript projects from 3rd parties. This resolves linting errors and improves code quality in these projects. The fix involves updating the ESLint configuration to properly handle JavaScript projects and ensure that linting rules are applied correctly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\n* fix eslint for JS 3rd party projects ([#6725](https://github.com/SAP/ui5-webcomponents/issues/6725)) ([215a888](https://github.com/SAP/ui5-webcomponents/commit/215a888b006e46d431edd6324812b9d39249aef4))\n```\n\n----------------------------------------\n\nTITLE: Renaming separator-style to separators and BreadcrumbsSeparatorStyle to BreadcrumbsSeparator (HTML)\nDESCRIPTION: The `separator-style` property is renamed to `separators` and the `BreadcrumbsSeparatorStyle` enum is renamed to `BreadcrumbsSeparator`. This snippet shows how to update the property name in the HTML code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separator-style=\"Slash\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-breadcrumbs separators=\"Slash\">\n```\n\n----------------------------------------\n\nTITLE: Replacing subTabs Slot with items Slot (HTML)\nDESCRIPTION: Illustrates how to replace the `subTabs` slot with `items` slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"subTabs\"></ui5-tab>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tab id=\"nestedTab\" slot=\"items\"></ui5-tab>\n```\n\n----------------------------------------\n\nTITLE: Accessibility Attributes Update - Flexible Layout\nDESCRIPTION: Illustrates the breaking change related to FlexibleLayout's accessibility properties. The `accessibilityTexts` and `accessibilityRoles` properties have been replaced by `accessibilityAttributes`.  The code demonstrates the previous usage and the updated usage with `accessibilityAttributes`. \nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfcl.accessibilityTexts = {\n    startColumnAccessibleName: \"Products list\",\n    midColumnAccessibleName: \"Product information\",\n    endColumnAccessibleName: \"Product detailed information\",\n    startArrowLeftText: \"Collapse products list\",\n    startArrowRightText: \"Expand products list\",\n    endArrowLeftText: \"Expand product detailed information\",\n    endArrowRightText: \"Collapse product detailed information\",\n    startArrowContainerAccessibleName: \"Start Arrow Container\",\n    endArrowContainerAccessibleName: \"End Arrow Container\",\n}\n\nfcl.accessibilityRoles = {\n    startColumnRole: \"complementary\",\n    startArrowContainerRole: \"navigation\",\n    midColumnRole: \"main\",\n    endArrowContainerRole: \"navigation\",\n    endColumnRole: \"complementary\".\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfcl.accessibilityAttributes = {\n    startColumn: {\n      role: \"complementary\",\n      name: \"Products list\",\n    },\n    midColumn: {\n      role: \"main\",\n      name: \"Product information\",\n    },\n    endColumn: {\n      role: \"complementary\",\n      name: \"Product detailed information\",\n    },\n    startArrowLeft:  {\n      name: \"Collapse products list\",\n    },\n    startArrowRight: {\n      name: \"Expand products list\",\n    },\n    endArrowLeft: {\n      name: \"Expand product detailed information\",\n    },\n    endArrowRight:  {\n      name: \"Collapse product detailed information\",\n    },\n    startArrowContainer: {\n      role: \"navigation\",\n      name: \"Start Arrow Container\",\n    },\n    endArrowContainer: {\n      role: \"navigation\",\n      name: \"End Arrow Container\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Moving ui5-bar component from fiori to main library\nDESCRIPTION: This code shows how the import path for the `ui5-bar` component has changed from `@ui5/webcomponents-fiori/dist/Bar.js` to `@ui5/webcomponents/dist/Bar.js`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Bar.js;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Bar.js\";\n```\n\n----------------------------------------\n\nTITLE: Rename ui5-illustrated-message size Property - HTML\nDESCRIPTION: Illustrates how to rename the `size` property to `design` for the `ui5-illustrated-message` component. Update the property name to ensure the component renders correctly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message size=\"Dialog\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-illustrated-message design=\"Dialog\">\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JavaScript files as raw strings\nDESCRIPTION: This snippet imports HTML and JavaScript files as raw strings using the raw-loader webpack plugin. The imported strings can then be used within a component to render the HTML and execute the JavaScript.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/StepInput/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Replacing Popover showAt method\nDESCRIPTION: This snippet shows that `openPopover` and `showAt` methods are removed in favor of `open` and `opener` properties.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: Using UI5 Web Component in HTML\nDESCRIPTION: This HTML code demonstrates how to use the `ui5-button` web component.  The `ui5-button` tag is used just like any other HTML element. You must ensure the component's JavaScript module is imported before using it in HTML.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ui5-button>Hello world!</ui5-button>\n```\n\n----------------------------------------\n\nTITLE: Fix Timezone Aware Date in UI5 Calendar\nDESCRIPTION: This snippet highlights a bug fix in the ui5-calendar component where the \"Today\" date was not timezone aware. The fix, identified by commit hash 32dd0ef, ensures that the displayed \"Today\" date correctly reflects the user's timezone. It addresses issue #2660 on GitHub.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript files\nDESCRIPTION: This JavaScript snippet imports HTML and JavaScript files as strings using raw-loader. These strings are then passed as props to an Editor component. This allows dynamic loading and rendering of code snippets within the UI.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/ai/PromptInput/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: ui5-menu-separator Usage (Breaking Change)\nDESCRIPTION: This snippet details the breaking change related to `ui5-menu-separator`. The `startsSection` property from `ui5-menu-item` is removed. The `ui5-menu-separator` component should be used instead to separate menu items into sections.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ui5-menu>\n    <ui5-menu-item text=\"Item A\"></ui5-menu-item>\n    <ui5-menu-item text=\"Item B\" starts-section></ui5-menu-item>\n</ui5-menu>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-menu>\n    <ui5-menu-item text=\"Item A\"></ui5-menu-item>\n    <ui5-menu-separator></ui5-menu-separator>\n    <ui5-menu-item text=\"Item B\"></ui5-menu-item>\n</ui5-menu>\n```\n\n----------------------------------------\n\nTITLE: Fixing Theme Fallback\nDESCRIPTION: Fixes the fallback mechanism to the default theme within the framework, resolving issues #5136 and #5185.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\n0fc2f0d\n```\n\n----------------------------------------\n\nTITLE: Running a single test spec with yarn\nDESCRIPTION: This command runs a specific test file using yarn. It is intended for debugging, and therefore no test server is launched automatically. Ensure the `start` command is running to provide the server and ability to change files on the fly.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn test test/specs/Demo.spec.js\n```\n\n----------------------------------------\n\nTITLE: Rename Calendar Event - Typescript\nDESCRIPTION: Shows how to rename the `selected-dates-change` event to `selection-change` and update the event details from `values` and `dates` to `selectedValues` and `selectedDateValues` in the `ui5-calendar` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selected-dates-change\", () => {\n    const values = e.detail.values;\n    const dates = e.detail.dates;\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyCalendar.addEventListener(\"selection-change\", () => {\n   const values = event.detail.selectedValues;\n   const dates = event.detail.selectedDateValues;\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Source Map Generation\nDESCRIPTION: This snippet addresses a bug that required the src folder to be present. It inline sources in the .map file.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\n16771a6\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript snippet with raw-loader\nDESCRIPTION: This snippet imports the content of the main.js file as a string using raw-loader. The raw-loader is used to read the file's contents as a string. The imported JavaScript code is assigned to the js variable.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Form/ItemColumnSpan/ItemColumnSpan.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Replacing Assets-static.js modules\nDESCRIPTION: This snippet demonstrates how to replace the import of `Assets-static.js` modules with their dynamic equivalents (`Assets.js`). This change affects how static assets are loaded in UI5 Web Components.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing CoPilotAnimation TypeScript\nDESCRIPTION: Illustrates the usage of the `CoPilotAnimation` import which has been removed in the newer versions. This showcases how the import was utilized before the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport CoPilotAnimation from \"@ui5/webcomponents-fiori/dist/features/CoPilotAnimation.js\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Scoping Issues - JavaScript\nDESCRIPTION: This commit addresses scoping issues within the library.  It also provides documentation on how scoping should be used correctly. Resolving scoping problems is crucial for preventing conflicts between different parts of the application and ensuring predictable behavior.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/compat/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n* scoping issues and document how scoping is used correctly ([#10023](https://github.com/SAP/ui5-webcomponents/issues/10023)) ([ee808c3](https://github.com/SAP/ui5-webcomponents/commit/ee808c309f316fe145b05d292c92328396c655ab))\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Legend Component\nDESCRIPTION: This code snippet shows how to import the `CalendarLegend` component from the `@ui5/webcomponents` package. The `CalendarLegend` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/CalendarLegend.js\";\n```\n\n----------------------------------------\n\nTITLE: Replacing openPopover and showAt with open and opener\nDESCRIPTION: This code illustrates the replacement of the imperative `openPopover` and `showAt` methods with the declarative `open` and `opener` properties for popovers. The code includes both JavaScript and HTML examples.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/base/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.showAt(this);\n});\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-button id=\"opener\">Open</ui5-button>\n<ui5-color-palette-popover opener=\"opener\">\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nbutton.addEventListener(\"click\", function(event) {\n\tcolorPalettePopover.open = !colorPalettePopover.open;\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming TabContainerBackgroundDesign to BackgroundDesign\nDESCRIPTION: If you previously imported `TabContainerBackgroundDesign`, use `BackgroundDesign` instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Installing NPM Package\nDESCRIPTION: This shell command demonstrates how to install a NPM package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/07-styling.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm install {PACKAGE-NAME}\n```\n\n----------------------------------------\n\nTITLE: Importing Label Component\nDESCRIPTION: This code snippet shows how to import the `Label` component from the `@ui5/webcomponents` package. The `Label` component can then be used in your application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/main/README.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Label.js\";\n```\n\n----------------------------------------\n\nTITLE: Fixing focus loss in ui5-calendar using JavaScript\nDESCRIPTION: This JavaScript code snippet addresses a bug in the ui5-calendar component that caused focus to be lost during arrow navigation when using a mouse or touch input. The commit associated with the fix is 216f6a7a476d18a0f6fdf7ff189f953085e30b47. This prevents unintended focus shifts while interacting with the calendar.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n216f6a7a476d18a0f6fdf7ff189f953085e30b47\n```\n\n----------------------------------------\n\nTITLE: Install ChromeDriver with yarn\nDESCRIPTION: This command installs ChromeDriver, a peer dependency of `@ui5/webcomponents-tools`, using yarn.  ChromeDriver is necessary for running WebdriverIO tests with Chrome, and it must match the browser's version.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D chromedriver\n```\n\n----------------------------------------\n\nTITLE: ui5-input Suggestion Item Changes (Breaking Change)\nDESCRIPTION: This snippet describes the breaking change affecting `ui5-suggestion-item` within `ui5-input`. The `type`, `description`, `icon`, `iconEnd`, and `image` properties are removed. A new component, `ui5-suggestion-item-custom`, is introduced for custom scenarios. Grouping suggestion items is achieved through nesting.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ui5-input show-suggestions>\n  <ui5-suggestion-item-group header-text=\"Group 1\">\n    <ui5-suggestion-item text=\"Group Item 1\"></ui5-suggestion-item>\n  </ui5-suggestion-item-group>\n</ui5-input>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling using ID Selector (CSS)\nDESCRIPTION: This snippet shows an example of CSS styling using an ID selector. This is a valid alternative to tag selectors, specifically when targeting specific elements within the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\n#openBtn {\n\twidth: 50px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Editor Component with HTML and JS\nDESCRIPTION: This snippet demonstrates how to use the Editor component, passing the imported HTML and JavaScript content as props. The 'html' and 'js' variables, containing the raw content of the respective files, are passed to the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DatePicker/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: CSS Shadow Parts Example\nDESCRIPTION: This HTML snippet demonstrates how CSS Shadow Parts can be used to style elements within a UI5 Web Component's popover. The example targets the \"root\" and \"list\" parts of a custom component and its popover to apply background and margin styles, respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/blog/releases/popover-api-in-v2.mdx#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <style>\n        #mc::part(root) {\n            background: blue;\n        }\n        #mc::part(list) {\n            margin: 0.5rem;\n        }\n    </style>\n\n    <my-component id=\"mc\">\n        #shadow-root\n            <div part=\"root\"></div>\n            <ui5-popover>\n                <ui5-list part=\"list\"></ui5-list>\n            </ui5-popover>\n    </my-component>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Updating SAP-Icons Font JavaScript\nDESCRIPTION: This snippet updates the SAP-Icons font to versions 4.14.0 and 5.0.2. It addresses issue #5605 in the ui5-webcomponents project, ensuring that the @ui5/webcomponents-icons package utilizes the latest icon set.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n**icons:** update to 4.14.0 5.0.2 SAP-Icons font ([#5605](https://github.com/SAP/ui5-webcomponents/issues/5605)) ([d794c0b](https://github.com/SAP/ui5-webcomponents/commit/d794c0b84ea03581cd969a84dc5c05383ec91b60))\n```\n\n----------------------------------------\n\nTITLE: Using imported content in Editor component\nDESCRIPTION: This snippet shows how the imported HTML, JavaScript, and CSS strings are passed as props to an `<Editor />` component. The `html`, `js`, and `css` variables, populated with the raw content of the respective files, are assigned to the corresponding props of the `<Editor />` component. This allows the component to utilize these strings to display and function as intended.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/Basic/Basic.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Creating HTML Element\nDESCRIPTION: This snippet programmatically creates a `div` element and sets its `textContent`. It then assigns this element to the `messageDiv` property on the component instance.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nthis.messageDiv = document.createElement(\"div\");\nthis.messageDiv.textContent = \"Hello\";\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Defining Tooltip and Text\nDESCRIPTION: This JavaScript code sets the `tooltip` and `txt` properties on the component instance. These properties are strings that will be used in the Handlebars template.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthis.tooltip = \"Some tooltip\";\nthis.txt = \"Some text\";\n```\n\n----------------------------------------\n\nTITLE: Creating React App with create-react-app\nDESCRIPTION: This snippet uses the `create-react-app` tool to bootstrap a new React application. It then navigates into the newly created project directory.  Requires Node.js and npm or yarn to be installed. The command `npx` is used to execute the package directly without installing it globally.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/01-React.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app ui5-web-components-application\ncd ui5-web-components-application\n```\n\n----------------------------------------\n\nTITLE: Supporting SAPBusinessSuite Icons JavaScript\nDESCRIPTION: This snippet adds support for the SAPBusinessSuite icons v1 and v2 fonts (Horizon theme). It addresses issue #6535 in the ui5-webcomponents project, expanding icon font compatibility for the @ui5/webcomponents-icons package.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport SAPBusinessSuite icons v1 and v2 font ( Horizon ) ([#6535](https://github.com/SAP/ui5-webcomponents/issues/6535)) ([38233b9](https://github.com/SAP/ui5-webcomponents/commit/38233b94543a94c9915cf1d8c8937a834cd6c87d))\n```\n\n----------------------------------------\n\nTITLE: Fixing Release Build - JavaScript\nDESCRIPTION: This code snippet fixes a release build issue. The commit 27042ac addresses the problem. The snippet represents the commit hash associated with the bug fix within the broader UI5 Web Components project.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n([27042ac](https://github.com/SAP/ui5-webcomponents/commit/27042ac90443dea8d5900d1c5bfa5bc93d365da0))\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript Files\nDESCRIPTION: This code snippet imports the content of HTML and JavaScript files using raw-loader. The imported content is then assigned to the 'html' and 'js' variables respectively. These variables are later passed as properties to a component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/IllustratedMessage/WithDialog/WithDialog.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Importing UI5 Web Components Fiori Assets in JavaScript\nDESCRIPTION: This JavaScript code snippet imports assets from the `@ui5/webcomponents-fiori` package.  These assets include translations for tooltips and aria labels for icons. Required dependency: `@ui5/webcomponents-fiori`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@ui5/webcomponents-fiori/dist/Assets.js\";\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Template\nDESCRIPTION: Demonstrates a basic JSX template using a div with a class and text content. This example illustrates the fundamental syntax of JSX for creating UI elements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08-templates.md#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n<div class=\"header\">Hello World!</div>\n```\n\n----------------------------------------\n\nTITLE: The disabled property of the ui5-option is removed\nDESCRIPTION: Removes the disabled property of the `ui5-option` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Defining User Input\nDESCRIPTION: This example shows the `userInput` property being set on the component instance. It contains HTML markup for highlighting, and is designed to be sanitized before being rendered unsafely.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/08a-templates-hbs.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nthis.userInput = `<strong>Arg</strong>entina`;\n```\n\n----------------------------------------\n\nTITLE: Checkbox Wrapping Behavior (Before)\nDESCRIPTION: Demonstrates the previous default behavior of the ui5-checkbox component where text would be truncated if there was not enough space. The wrapping-type property was set to None by default.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-checkbox text=Some very very very very long text\"></ui5-checkbox><!-- would truncate the text if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Removing Assets-static.js module import\nDESCRIPTION: This snippet demonstrates the removal of the `Assets-static.js` modules. Use dynamic imports instead.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Changing Language in Cypress Tests\nDESCRIPTION: This example shows how to set the user's language for locale-aware UI5 Web Component tests. It imports necessary modules, sets the language using `setLanguage` wrapped in `cy.wrap` to ensure proper awaiting of the promise, and then mounts the component.  It also stresses the importance of importing the Assets module.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/10-testing.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport Calendar from \"../../src/Calendar.js\";\nimport \"../../src/Assets.js\"; // Do not forget to import the Assets.js module for the extra languages\nimport { setLanguage, getLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\n\ndescribe(\"Test group\", () => {\n\tit(\"Test\", () => {\n\t\t// setLanguage(\"bg\"); // Wrong, the promise will not be awaited!\n\n\t\tcy.wrap({ setLanguage })\n\t\t\t.invoke(\"setLanguage\", \"bg\"); // Correct, the promise will be awaited!\n\n\t\tcy.wrap({ getLanguage })\n\t\t\t.invoke(\"getLanguage\")\n\t\t\t.should(\"equal\", \"bg\");\n\n\t\tcy.mount(<Calendar />); // This calendar will be in Bulgarian\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript Content using raw-loader\nDESCRIPTION: This snippet imports the raw content of the 'main.js' file as a string using the 'raw-loader'. Similar to the HTML import, this allows embedding JavaScript code directly into other JavaScript or TypeScript files.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Avatar/Styles/Styles.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Editor component with HTML, JS, CSS props in SAP UI5\nDESCRIPTION: This snippet instantiates an Editor component and passes the imported HTML, JavaScript, and CSS strings as props. This allows the Editor component to render and potentially modify these resources. The component relies on the 'html', 'js', and 'css' variables being correctly populated with string content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Card/MoreCards/MoreCards.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Removing CSP.js imports - TypeScript\nDESCRIPTION: This snippet illustrates the removal of the `CSP.js` module and its associated APIs for managing `<style>` and `<link>` tags.  These APIs are no longer available because all browsers now support adoptedStyleSheets. The code shows the imports that are no longer valid.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { setUseLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPackageCSSRoot } from \"@ui5/webcomponents-base/dist/CSP.js\"\nimport { setPreloadLinks } from \"@ui5/webcomponents-base/dist/CSP.js\"\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI\nDESCRIPTION: Installs the Angular CLI globally, providing command-line tools for creating, building, and managing Angular projects.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/3-frameworks/02-Angular.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Fixing Indonesian Language Fetching in Framework\nDESCRIPTION: This code snippet addresses an issue in the framework related to fetching the Indonesian language ('id'). It fixes a bug where the language was not being retrieved correctly, resolving issue #11233.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/tools/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Removing Assets-static.js Imports - TypeScript\nDESCRIPTION: This snippet shows the removal of static asset imports and the replacement with dynamic asset imports.  The snippet shows how to update the import statements.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"@ui5/webcomponents/dist/Assets-static.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets-static.js\"\n\nimport \"@ui5/webcomponents/dist/Assets.js\";\nimport \"@ui5/webcomponents-icons/dist/Assets.js\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to open and close events TypeScript\nDESCRIPTION: Illustrates the usage of the `open` and `close` events after the rename. This showcases how the events need to be used after the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\npopup.addEventListener(\"open\", function() {\n\t//...\n});\n\npopup.addEventListener(\"close\", function() {\n\t//...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Slotted Content - HTML\nDESCRIPTION: This HTML code represents the slotted content in `my-demo-component`. It displays a heading and a span using the `slot` attribute to assign elements to specific slots of the component. The elements will be placed into their respective slots of the shadow DOM of `my-demo-component`.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<my-demo-component>\n\t<h1 slot=\"heading\">Heading</h1>\n\t<span>Hello World</span>\n</my-demo-component>\n```\n\n----------------------------------------\n\nTITLE: Replacing pressed with selected (HTML)\nDESCRIPTION: The pressed property of the ui5-segmentedbutton-item has been renamed to selected.  This code snippet demonstrates how to update the property name in the ui5-segmented-button component.  The selected property should be used to indicate that a button is currently active or chosen.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/CHANGELOG.md#_snippet_27\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-segmented-button>\n  <ui5-segmented-button-item pressed> Option 1</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 2</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 3</ui5-segmented-button-item>\n</ui5-segmented-button>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-segmented-button>\n  <ui5-segmented-button-item selected> Option 1</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 2</ui5-segmented-button-item>\n  <ui5-segmented-button-item>Option 3</ui5-segmented-button-item>\n</ui5-segmented-button>\n```\n\n----------------------------------------\n\nTITLE: Using ui5-tag after wrapping-type change HTML\nDESCRIPTION: Illustrates how ui5-tag now wraps text by default, after the wrapping-type property was changed to Normal. This example showcases the component's updated behavior following the breaking change.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/fiori/CHANGELOG.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-tag>In Process</ui5-tag><!-- would let the text wrap if there is not enough space -->\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This JavaScript code renders an Editor component, passing the imported HTML and JavaScript strings as props. The `html` prop is used for the initial HTML content of the editor, and the `js` prop likely provides additional JavaScript functionality or event handlers for the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/MessageStrip/Design/Design.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Importing NoConflict Configuration\nDESCRIPTION: Imports the `getNoConflict` and `setNoConflict` functions from the `@ui5/webcomponents-base/dist/config/NoConflict.js` module. These functions are used to get and set the noConflict mode of the UI5 Web Components. This mode helps in avoiding conflicts with other libraries.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getNoConflict, setNoConflict } from \"@ui5/webcomponents-base/dist/config/NoConflict.js\";\n```\n\n----------------------------------------\n\nTITLE: Renaming Color Property in ColorPicker - HTML\nDESCRIPTION: This snippet illustrates the renaming of the `color` property to `value` in the `ui5-color-picker` component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-color-picker color=\"red\"></ui5-color-picker>\n\n<ui5-color-picker value=\"red\"></ui5-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Replacing showOverflow property with overflowButton slot (HTML)\nDESCRIPTION: The `showOverflow` property is removed, and the `overflowButton` slot should be used instead. This snippet demonstrates how to replace the property with the slot.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/localization/CHANGELOG.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer show-overflow></ui5-tabcontainer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ui5-tabcontainer>\n\t<ui5-button slot=\"startOverflowButton\" id=\"startOverflowButton\">Start</ui5-button>\n\t<ui5-button slot=\"overflowButton\" id=\"endOverflowButton\">End</ui5-button>\n</ui5-tabcontainer>\n```\n\n----------------------------------------\n\nTITLE: Defining Package Details from CLI in Javascript\nDESCRIPTION: This feature enhances the CLI (Command Line Interface) of the framework by adding options to define the package name, tag, and TypeScript support directly from the command line. This streamlines the package creation process, providing greater flexibility and control over the configuration of new UI5 Web Components packages.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/create-package/CHANGELOG.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Import HTML Content using raw-loader\nDESCRIPTION: This snippet imports the raw content of the 'sample.html' file as a string using the 'raw-loader'. This is commonly used to embed HTML templates directly into JavaScript or TypeScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Avatar/Styles/Styles.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Fixing release commands in UI5 Web Components infrastructure\nDESCRIPTION: This bug fix addresses issues related to the release commands within the ui5-webcomponents infrastructure. The fix is part of version 1.21.0-rc.1.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/theming/CHANGELOG.md#_snippet_34\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n*   **infra:** release commands ([#7978](https://github.com/SAP/ui5-webcomponents/issues/7978)) ([b0e653c](https://github.com/SAP/ui5-webcomponents/commit/b0e653cf911cc0ffe5fb5dcbd50a7c238f20f33d))\n```\n\n----------------------------------------\n\nTITLE: Importing EnableDefaultTooltips Configuration\nDESCRIPTION: Imports the `getEnableDefaultTooltips` and `setEnableDefaultTooltips` functions from the `@ui5/webcomponents-base/dist/config/Tooltips.js` module. These functions are used to get and set whether the default tooltips are enabled.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getEnableDefaultTooltips, setEnableDefaultTooltips } from \"@ui5/webcomponents-base/dist/config/Tooltips.js\";\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an 'Editor' component and passes the imported HTML and JavaScript code as props named 'html' and 'js' respectively. This suggests that the 'Editor' component is designed to display and/or edit HTML and JavaScript code.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Label/CustomStyling/CustomStyling.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Example npm Initialization Command\nDESCRIPTION: This is an example of initializing a UI5 Web Components project using npm with a specific package name.  It demonstrates how to create a directory named `myComponents` and initialize the project within it.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/01-package.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init @ui5/webcomponents-package myComponents\n```\n\n----------------------------------------\n\nTITLE: Importing Code Snippets with raw-loader - JavaScript\nDESCRIPTION: This JavaScript snippet utilizes the `raw-loader` webpack loader to import the contents of HTML, JavaScript, and CSS files as strings. These strings are then assigned to the `html`, `js`, and `css` variables respectively. This allows the code to be embedded directly into a component or used for other purposes.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/DynamicPage/Basic/Basic.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Fixing UI5 Icon i18n\nDESCRIPTION: This commit fixes an issue where the ui5-icon's internationalization (i18n) was not working correctly across all packages. The fix ensures that the icon component correctly handles localized text and supports multiple languages. The related issue is #2816.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons-tnt/CHANGELOG.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Build Static Website Content\nDESCRIPTION: This command generates static HTML, CSS, and JavaScript files for the Docusaurus website. These files are output to the `build` directory. This build is suitable for deployment to a static content hosting service.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Import HTML as Raw String\nDESCRIPTION: Imports an HTML file as a raw string using raw-loader. This allows the HTML content to be used directly within JavaScript code, typically for embedding or displaying in a UI component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateTimePicker/DateTimePickerInDifferentTimezone/DateTimePickerInDifferentTimezone.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Running the UI5 Web Components Website (Alternative)\nDESCRIPTION: These commands provide an alternative, often faster, method to start the UI5 Web Components website. It assumes the project has already been built. If issues occur, a full project build (`yarn build` in the root) might be necessary.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/5-contributing/04-website.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/website\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an 'Editor' component, passing the imported 'html' and 'js' variables as props. This suggests the 'Editor' component expects HTML and JavaScript content as string inputs to initialize the editor with the given content.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/ColorPicker/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Removing disabled property of ui5-option\nDESCRIPTION: This snippet shows that the `disabled` property is removed from `ui5-option`. The property will no longer work for the component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/icons/CHANGELOG.md#_snippet_24\n\nLANGUAGE: HTML\nCODE:\n```\n<ui5-option disabled>Option</ui5-option>\n```\n\n----------------------------------------\n\nTITLE: Import HTML Code Snippet - JavaScript\nDESCRIPTION: Imports an HTML code snippet from a file using raw-loader. The raw-loader allows importing the HTML file's content as a string. This string can then be used as the initial value of the HTML editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/CheckBox/Indeterminate/Indeterminate.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\n```\n\n----------------------------------------\n\nTITLE: Import CSS content\nDESCRIPTION: Imports CSS content from 'main.css' as a raw string using raw-loader. This allows CSS code to be embedded directly within a JavaScript/TypeScript component, enabling dynamic styling or code editors.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/fiori/SideNavigation/OverlayMode/OverlayMode.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport css from '!!raw-loader!./main.css';\n```\n\n----------------------------------------\n\nTITLE: Importing HTML and JavaScript Files as Strings\nDESCRIPTION: This code snippet imports HTML and JavaScript files as raw strings using the `raw-loader` webpack loader. These strings are then used to configure an editor component. The purpose is to load code examples for demonstration or editing within the application.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Toolbar/SpacerAndSeparator/SpacerAndSeparator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Render Editor Component\nDESCRIPTION: This snippet renders an 'Editor' component, passing the imported HTML, JavaScript, and CSS strings as props named 'html', 'js', and 'css', respectively.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Carousel/PageIndicatorType/PageIndicatorType.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Import HTML and JS with raw-loader\nDESCRIPTION: This snippet demonstrates importing HTML and JavaScript files as strings using `raw-loader`. These strings are then used as input for an editor component, likely for display or modification. The `!!` prefix in `!!raw-loader` disables all pre-configured loaders for this specific import.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Avatar/Basic/Basic.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport html from '!!raw-loader!./sample.html';\nimport js from '!!raw-loader!./main.js';\n```\n\n----------------------------------------\n\nTITLE: Disable Default Font Loading - TypeScript\nDESCRIPTION: This code snippet demonstrates how to prevent UI5 Web Components from fetching default fonts during initialization. It uses the `setDefaultFontLoading` function from `@ui5/webcomponents-base/dist/config/Fonts.js` to set the default font loading to `false`. This allows developers to specify their own custom fonts.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/14-fonts.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getDefaultFontLoading, setDefaultFontLoading } from \"@ui5/webcomponents-base/dist/config/Fonts.js\";\n\nsetDefaultFontLoading(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring UI5 Web Components Editor\nDESCRIPTION: This snippet configures a UI5 Web Components editor by passing the imported HTML, JavaScript, and CSS raw strings as properties to the `<Editor>` component. The `html`, `js`, and `css` properties are used to provide the initial content and styling for the editor.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Label/UsageWithInputs/UsageWithInputs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} css={css} />\n```\n\n----------------------------------------\n\nTITLE: Individual Slots - Handlebars\nDESCRIPTION: Iterates over the child elements and uses the `_individualSlot` property in the `name` attribute of the slot element, dynamically creating a slot for each child.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/4-development/11-deep-dive-and-best-practices.md#_snippet_35\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#each mySlot}}\n\t<slot name=\"{{this._individualSlot}}\"></slot>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Editor Component Usage\nDESCRIPTION: This snippet uses an Editor component, likely a custom UI component, to display the imported HTML and JavaScript content. The 'html' and 'js' variables, which contain the imported code, are passed as props to the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/DateTimePicker/Basic/Basic.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Editor Component Integration\nDESCRIPTION: This snippet integrates an editor component, passing the imported HTML and JavaScript content as props. The 'html' and 'js' variables, containing the raw content from respective files, are passed to the Editor component.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/packages/website/docs/_samples/main/Breadcrumbs/BreadcrumbsOverflow/BreadcrumbsOverflow.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Editor html={html} js={js} />\n```\n\n----------------------------------------\n\nTITLE: Event Handling Conflict Resolution (JSON)\nDESCRIPTION: This JSON code snippet demonstrates how to configure the `noConflict` setting to specify which events should only be fired with the `ui5-` prefix. This is useful to avoid naming collisions with events from other libraries. Only the specified events (`selection-change` and `header-click` in this example) will have the prefix.\nSOURCE: https://github.com/sap/ui5-webcomponents/blob/main/docs/2-advanced/01-configuration.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t \"events\": [\"selection-change\", \"header-click\"]\n}\n```"
  }
]