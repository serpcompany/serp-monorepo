[
  {
    "owner": "clerk",
    "repo": "clerk-sdk-go",
    "content": "TITLE: Practical API Operations Example\nDESCRIPTION: Complete example showing organization and user management operations using Clerk SDK.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    \"github.com/clerk/clerk-sdk-go/v2/organization\"\n    \"github.com/clerk/clerk-sdk-go/v2/organizationmembership\"\n    \"github.com/clerk/clerk-sdk-go/v2/user\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    clerk.SetKey(\"sk_live_XXX\")\n\n    org, err := organization.Create(ctx, &organization.CreateParams{\n        Name: clerk.String(\"Clerk Inc\"),\n    })\n\n    org, err = organization.Update(ctx, org.ID, &organization.UpdateParams{\n        Slug: clerk.String(\"clerk\"),\n    })\n\n    listParams := organizationmembership.ListParams{}\n    listParams.Limit = clerk.Int64(10)\n    memberships, err := organizationmembership.List(ctx, params)\n    if memberships.TotalCount < 0 {\n        return\n    }\n    membership := memberships[0]\n\n    usr, err := user.Get(ctx, membership.UserID)\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Based API Usage\nDESCRIPTION: Example of using Clerk SDK with client initialization, recommended for multiple API key scenarios.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    \"github.com/clerk/clerk-sdk-go/v2/$resource$\"\n)\n\nctx := context.Background()\n\nconfig := &clerk.ClientConfig{}\nconfig.Key = \"sk_live_XXX\"\nclient := $resource$.NewClient(config)\n\nresource, err := client.Create(ctx, &$resource$.CreateParams{})\n\nresource, err := client.Get(ctx, id)\n\nresource, err := client.Update(ctx, id, &$resource$.UpdateParams{})\n\nresource, err := client.Delete(ctx, id)\n\nlist, err := client.List(ctx, &$resource$.ListParams{})\nfor _, resource := range list.$Resource$s {\n    // do something with the resource\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Middleware Implementation\nDESCRIPTION: Example of implementing Clerk authentication middleware in an HTTP server.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/clerk/clerk-sdk-go/v2\"\n\tclerkhttp \"github.com/clerk/clerk-sdk-go/v2/http\"\n)\n\nfunc main() {\n\tclerk.SetKey(\"sk_live_XXX\")\n\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", publicRoute)\n\tprotectedHandler := http.HandlerFunc(protectedRoute)\n\tmux.Handle(\n\t\t\"/protected\",\n\t\tclerkhttp.WithHeaderAuthorization()(protectedHandler),\n\t)\n\n\thttp.ListenAndServe(\":3000\", mux)\n}\n\nfunc publicRoute(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(`{\"access\": \"public\"}`)) \n}\n\nfunc protectedRoute(w http.ResponseWriter, r *http.Request) {\n\tclaims, ok := clerk.SessionClaimsFromContext(r.Context())\n\tif !ok {\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\tw.Write([]byte(`{\"access\": \"unauthorized\"}`)) \n\t\treturn\n\t}\n\tfmt.Fprintf(w, `{\"user_id\": \"%s\"}`, claims.Subject)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic API Usage Without Client\nDESCRIPTION: Example of using Clerk SDK without client initialization, suitable for single API key usage.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    \"github.com/clerk/clerk-sdk-go/v2/$resource$\"\n)\n\nctx := context.Background()\n\nclerk.SetKey(\"sk_live_XXX\")\n\nresource, err := $resource$.Create(ctx, &$resource$.CreateParams{})\n\nresource, err := $resource$.Get(ctx, id)\n\nresource, err := $resource$.Update(ctx, id, &$resource$.UpdateParams{})\n\nresource, err := $resource$.Delete(ctx, id)\n\nlist, err := $resource$.List(ctx, &$resource$.ListParams{})\nfor _, resource := range list.$Resource$s {\n    // do something with the resource\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clerk SDK Go v2 With a Client\nDESCRIPTION: Example showing how to use the Clerk SDK Go v2 with a client approach, which is useful when dealing with multiple API keys or when more flexibility is needed.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    \"github.com/clerk/clerk-sdk-go/v2/organization\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    config := &clerk.ClientConfig{}\n    config.Key = \"sk_live_XXX\"\n    client := organization.NewClient(config)\n\n    // Create an organization\n    org, err := client.Create(ctx, &organization.CreateParams{\n        Name: clerk.String(\"Acme Inc\"),\n    })\n    if err != nil {\n        if apiErr, ok := err.(*clerk.APIErrorResponse); ok {\n            // Access the API errors and additional information\n            apiErr.TraceID\n            apiErr.Error()\n            apiErr.Response.RawJSON\n        }\n    }\n    // List all organizations, limit results to one.\n    params := &organization.ListParams{}\n    params.Limit = clerk.Int64(1)\n    list, err := organization.List(ctx, params)\n    if err != nil {\n        // handle the error\n    }\n    if list.TotalCount > 0 {\n        // Get the first organization in the list\n        org = list.Organizations[0]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clerk SDK Go v2 Without a Client\nDESCRIPTION: Example demonstrating the new resource-based API structure in v2, without using a client. This is recommended when working with a single API key in your project.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    \"github.com/clerk/clerk-sdk-go/v2/organization\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    clerk.SetKey(\"sk_live_XXX\")\n\n    // Create an organization\n    org, err := organization.Create(ctx, &organization.CreateParams{\n        Name: clerk.String(\"Acme Inc\"),\n    })\n    if err != nil {\n        if apiErr, ok := err.(*clerk.APIErrorResponse); ok {\n            // Access the API errors and additional information\n            apiErr.TraceID\n            apiErr.Error()\n            apiErr.Response.RawJSON\n        }\n    }\n    // List all organizations, limit results to one.\n    params := &organization.ListParams{}\n    params.Limit = clerk.Int64(1)\n    list, err := organization.List(ctx, params)\n    if err != nil {\n        // handle the error\n    }\n    if list.TotalCount > 0 {\n        // Get the first organization in the list\n        org = list.Organizations[0]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Middleware for Authentication in v2\nDESCRIPTION: Example showing how to use the RequireHeaderAuthorization middleware in v2 to handle authenticated routes. Note that v2 only supports header-based authentication with bearer tokens.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"net/http\"\n\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    clerkhttp \"github.com/clerk/clerk-sdk-go/v2/http\"\n)\n\nfunc main() {\n    clerk.SetKey(\"sk_live_XXX\")\n    mux := http.NewServeMux()\n    mux.Handle(\"/session\", clerkhttp.RequireHeaderAuthorization()(http.HandlerFunc(handleSession)))\n    http.ListenAndServe(\":3000\", mux)\n}\n\nfunc handleSession(w http.ResponseWriter, r *http.Request) {\n    sessionClaims, ok := clerk.SessionClaimsFromContext(r.Context())\n    if ok {\n        // claims contain session information\n    } else {\n        // there is no active session (non-authenticated user)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Middleware with Multiple API Keys in v2\nDESCRIPTION: Example showing how to use the RequireHeaderAuthorization middleware in v2 when dealing with multiple Clerk API keys by passing a jwks.Client to the middleware.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"net/http\"\n\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    clerkhttp \"github.com/clerk/clerk-sdk-go/v2/http\"\n    \"github.com/clerk/clerk-sdk-go/v2/jwks\"\n)\n\nfunc main() {\n    config := &clerk.ClientConfig{}\n    config.Key = \"sk_live_XXX\"\n    client := jwks.NewClient(config)\n    mux := http.NewServeMux()\n    withAuth := clerkhttp.RequireHeaderAuthorization(\n        clerkhttp.JWKSClient(client),\n    )\n    mux.Handle(\"/session\", withAuth(http.HandlerFunc(handleSession)))\n    http.ListenAndServe(\":3000\", mux)\n}\n\nfunc handleSession(w http.ResponseWriter, r *http.Request) {\n    sessionClaims, ok := clerk.SessionClaimsFromContext(r.Context())\n    if ok {\n        // claims contain session information\n    } else {\n        // there is no active session (non-authenticated user)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling API Error Responses in Clerk Go SDK v2\nDESCRIPTION: Illustrates the change in error handling between v1 and v2. V2 introduces a new APIErrorResponse type with additional fields for debugging information.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n- org, err := client.Organizations().Create(clerk.CreateOrganizationParams{\n-     Name: \"Acme Inc\",\n- })\n- if err != nil {\n-     if errResp, ok := err.(*clerk.ErrorResponse); ok {\n-         // Access the API errors\n-         errResp.Errors\n-     }\n- }\n+ ctx := context.Background()\n+ clerk.SetKey(\"sk_live_XXX\")\n+ org, err := organization.Create(ctx, &organization.CreateParams{\n+     Name: clerk.String(\"Acme Inc\"),\n+ })\n+ if err != nil {\n+     if apiErr, ok := err.(*clerk.APIErrorResponse); ok {\n+         // Access the API errors and additional information\n+         apiErr.TraceID\n+         apiErr.Error()\n+         apiErr.Response.RawJSON\n+     }\n+ }\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Middleware in Clerk Go SDK v2\nDESCRIPTION: Shows the changes in HTTP middleware usage between v1 and v2. V2 introduces new middleware functions and changes how session claims are accessed from the context.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Protect a route with Clerk authentication middleware.\n// Error handling is omitted.\nmux := http.NewServeMux()\n- client, err := clerk.NewClient(\"sk_live_XXX\")\n- mux.Handle(\"/session\", clerk.RequireSessionV2(client)(http.HandlerFunc(handleSession)))\n+ clerk.SetKey(\"sk_live_XXX\")\n+ mux.Handle(\"/session\", clerkhttp.RequireHeaderAuthorization()(http.HandlerFunc(handleSession)))\nhttp.ListenAndServe(\":3000\", mux)\n\nfunc handleSession(w http.ResponseWriter, r *http.Request) {\n-    sessionClaims, ok := clerk.SessionFromContext(r.Context())\n+    sessionClaims, ok := clerk.SessionClaimsFromContext(r.Context())\n    if ok {\n        // claims contain session information\n    } else {\n        // there is no active session (non-authenticated user)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Clerk JWT tokens in Go with v2 SDK\nDESCRIPTION: This code demonstrates how to verify a Clerk JWT token using the v2 Go SDK. It first decodes the token, fetches the JSON web key using the key ID from the decoded token, then verifies the token with the retrieved key. Unlike v1, the v2 SDK requires explicitly passing the JSON web key and does not handle caching automatically.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\ntoken := \"the-clerk-session-jwt\"\ndecoded, err := jwt.Decode(ctx, &jwt.DecodeParams{Token: token})\nif err != nil {\n    panic(err)\n}\n\n// Fetch the JSON web key for your instance.\n// It is advised to cache the JSON web key until your instance secret\n// key changes.\njwk, err := jwt.GetJSONWebKey(ctx, &jwt.GetJSONWebKeyParams{\n    KeyID: decoded.KeyID,\n})\nif err != nil {\n    panic(err)\n}\nclaims, err := jwt.Verify(ctx, &jwt.VerifyParams{\n    Token: token,\n    JWK: jwk,\n})\n```\n\n----------------------------------------\n\nTITLE: Invoking API Operations in Clerk Go SDK v2\nDESCRIPTION: Shows the difference in invoking API operations between v1 and v2. In v2, operations are grouped by API resource and each resource is defined in its own package.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n- client.$Resource$().Create(clerk.Create$Resource$Params{})\n+ $resource$.Create(ctx, $resource$.CreateParams{})\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in Clerk Go SDK v2\nDESCRIPTION: Demonstrates the change in setting the API key between v1 and v2 of the Clerk Go SDK. In v2, the API key is set using a global function instead of creating a client instance.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n- client, err := clerk.NewClient(\"sk_live_XXX\")\n+ clerk.SetKey(\"sk_live_XXX\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization in Clerk Go SDK v2\nDESCRIPTION: Illustrates the changes in creating an organization between v1 and v2. V2 introduces context support and changes in parameter handling.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create an organization, in v1 and v2. Error handling is omitted.\n- client, err := clerk.NewClient(\"sk_live_XXX\")\n- org, err := client.Organizations().Create(clerk.CreateOrganizationParams{\n-     Name: \"Acme Inc\",\n- })\n+ ctx := context.Background()\n+ clerk.SetKey(\"sk_live_XXX\")\n+ org, err := organization.Create(ctx, &organization.CreateParams{\n+     Name: clerk.String(\"Acme Inc\"),\n+ })\n```\n\n----------------------------------------\n\nTITLE: Verifying Tokens in Clerk Go SDK v2\nDESCRIPTION: Demonstrates the changes in token verification between v1 and v2. V2 renames the method and provides more flexibility in specifying the JSON web key or JWKS client.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nsessionToken := \"the-clerk-session-jwt\"\n- client := clerk.NewClient(\"sk_live_XXXX\")\n- claims, err := client.VerifyToken(sessionToken)\n+ claims, err := jwt.Verify(context.Background(), &jwt.VerifyParams{\n+   Token: sessionToken,\n+ })\n```\n\n----------------------------------------\n\nTITLE: Working with List Operation Responses in v2\nDESCRIPTION: Example showing the standard pattern for handling list operation responses in v2, where responses always contain the total count and a slice of resources.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/clerk/clerk-sdk-go/v2\"\n    \"github.com/clerk/clerk-sdk-go/v2/$resource$\"\n)\n\nctx := context.Background()\nlist, err := $resource$.List(ctx, &$resource$.ListParams{})\n// If $resource$ was user, the following line would read\n// fmt.Println(list.TotalCount, list.Users)\nfmt.Println(list.TotalCount, list.$resource$s)\n```\n\n----------------------------------------\n\nTITLE: Using Operation Parameters with Pointer Helper Functions in v2\nDESCRIPTION: Example demonstrating how to use the new pointer helper functions (clerk.String, clerk.Bool, etc.) to set parameter values in API operation calls in v2.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ndomain.Create(context.Background(), &domain.CreateParams{\n    Name: clerk.String(\"clerk.com\"),\n    IsSatellite: clerk.Bool(true),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Domain with Pointer Parameters in Clerk Go SDK v2\nDESCRIPTION: Shows how to use helper functions to create pointers for parameter values in v2. This is required as all fields in API operation parameters are pointers in v2.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ndomain.Create(context.Background(), &domain.CreateParams{\n    Name: clerk.String(\"clerk.com\"),\n    IsSatellite: clerk.Bool(true),\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching User List in Clerk Go SDK v2\nDESCRIPTION: Demonstrates the changes in list operation responses between v1 and v2. V2 introduces a consistent return type for list operations with total count and results slice.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/UPGRADING.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Fetch a list of 10 users. Error handling is omitted.\n- limit := 10\n- users, err := client.Users().ListAll(clerk.ListAllUserParams{\n-    Limit: &limit,\n- })\n- if len(users) > 0 {\n-    fmt.Println(users[0].ID)\n- }\n+ params := &user.ListParams{}\n+ params.Limit = clerk.Int64(10)\n+ list, err := user.List(context.Background(), &params)\n+ if list.TotalLength > 0 {\n+     fmt.Println(list.Users[0].ID)\n+ }\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom Transport with Client in Go\nDESCRIPTION: Demonstrates how to test with a client instance by configuring it with a custom HTTP transport. This approach is useful when already using API clients or when tests need to run in parallel.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWithCustomTransport(t *testing.T) {\n    config := &clerk.ClientConfig{}\n    config.HTTPClient = &http.Client{\n        Transport: &mockRoundTripper{},\n    }\n    client := user.NewClient(config)\n}\n\ntype mockRoundTripper struct {}\n// Implement the http.RoundTripper interface.\nfunc (r *mockRoundTripper) RoundTrip(r *http.Request) (*http.Response, error) {\n    // Construct and return the http.Response.\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom Transport without Client in Go\nDESCRIPTION: Shows how to test the Clerk SDK by stubbing out the HTTP client's transport without instantiating clients for APIs. This approach sets a custom Backend for the package with a mocked RoundTripper implementation.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWithCustomTransport(t *testing.T) {\n    clerk.SetBackend(clerk.NewBackend(&clerk.BackendConfig{\n        HTTPClient: &http.Client{\n            Transport: &mockRoundTripper{},\n        },\n    }))\n}\n\ntype mockRoundTripper struct {}\n// Implement the http.RoundTripper interface.\nfunc (r *mockRoundTripper) RoundTrip(r *http.Request) (*http.Response, error) {\n    // Construct and return the http.Response.\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Mock Server without Client in Go\nDESCRIPTION: Demonstrates how to test the Clerk SDK using a httptest.Server without instantiating clients. This method creates a test HTTP server and configures the package's Backend to use the server's client and URL.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWithMockServer(t *testing.T) {\n    ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Write the response.\n    }))\n    defer ts.Close()\n    clerk.SetBackend(clerk.NewBackend(&clerk.BackendConfig{\n        HTTPClient: ts.Client(),\n        URL: &ts.URL,\n    }))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Mock Server with Client in Go\nDESCRIPTION: Shows how to test with an API client instance using a httptest.Server. This method creates a test HTTP server and configures the client with the server's client and URL.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWithMockServer(t *testing.T) {\n    ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Write the response.\n    }))\n    defer ts.Close()\n    config := &clerk.ClientConfig{}\n    config.HTTPClient = ts.Client()\n    config.URL = &ts.URL\n    client := user.NewClient(config)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom Backend with Client in Go\nDESCRIPTION: Demonstrates implementing a custom Backend interface for testing with an API client instance. This approach allows complete control over the API request/response cycle by assigning a custom Backend implementation to the client.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWithCustomBackend(t *testing.T) {\n    client := user.NewClient(&clerk.ClientConfig{})\n    client.Backend = &customBackend{}\n}\n\ntype customBackend struct {}\n// Implement the Backend interface\nfunc (b *customBackend) Call(ctx context.Context, r *clerk.APIRequest, reader *clerk.ResponseReader) error {\n    // Construct a clerk.APIResponse and use the reader's Read method.\n    reader.Read(&clerk.APIResponse{})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom Backend Implementation in Go\nDESCRIPTION: Shows how to implement a custom Backend interface for testing the Clerk SDK without client instantiation. This approach allows complete control over the API request/response cycle by implementing the Backend interface.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWithCustomBackend(t *testing.T) {\n    clerk.SetBackend(&customBackend{})\n}\n\ntype customBackend struct {}\n// Implement the Backend interface\nfunc (b *customBackend) Call(ctx context.Context, r *clerk.APIRequest, reader clerk.ResponseReader) error {\n    // Construct a clerk.APIResponse and use the reader's Read method.\n    reader.Read(&clerk.APIResponse{})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Listing Organizations in Clerk SDK Go v1\nDESCRIPTION: Example showing how to create an organization and list all organizations using the v1 version of the Clerk Go SDK. The v1 approach uses a client and services pattern where operations are organized by service types.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/clerkinc/clerk-sdk-go\"\n)\n\n\nfunc main() {\n    client, err := clerk.NewClient(\"sk_live_XXX\")\n    if err != nil {\n        // handle error\n    }\n\n    // Create an organization\n    org, err := client.Organizations().Create(clerk.CreateOrganizationParams{\n        Name: \"Acme Inc\",\n    })\n    if err != nil {\n        if errResp, ok := err.(*clerk.ErrorResponse); ok {\n            // Access the API errors\n            errResp.Errors\n        }\n    }\n    // List all organizations, limit results to one.\n    limit := 1\n    orgs, err := client.Organizations().ListAll(clerk.ListAllOrganizationsParams{\n        Limit: &limit,\n    })\n    if err != nil {\n        // handle the error\n    }\n    if orgs.TotalCount > 0 {\n        // Get the first organization in the list\n        org = orgs.Data[0]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Middleware for Authentication in v1\nDESCRIPTION: Example showing how to use the RequireSessionV2 middleware in v1 to handle authenticated routes with support for both header and cookie-based authentication.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/v2_migration_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"net/http\"\n\n    \"github.com/clerkinc/clerk-sdk-go\"\n)\n\nfunc main() {\n    client, err := clerk.NewClient(\"sk_live_XXX\")\n    if err != nil {\n        panic(err)\n    }\n    mux := http.NewServeMux()\n    mux.Handle(\"/session\", clerk.RequireSessionV2(client)(http.HandlerFunc(handleSession)))\n    http.ListenAndServe(\":3000\", mux)\n}\n\nfunc handleSession(w http.ResponseWriter, r *http.Request) {\n    sessionClaims, ok := clerk.SessionFromContext(r.Context())\n    if ok {\n        // claims contain session information\n    } else {\n        // there is no active session (non-authenticated user)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Clerk SDK in Go\nDESCRIPTION: Basic import statement for using Clerk SDK with Go Modules.\nSOURCE: https://github.com/clerk/clerk-sdk-go/blob/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/clerk/clerk-sdk-go/v2\"\n)\n```"
  }
]