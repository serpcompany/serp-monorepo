[
  {
    "owner": "dolanmiu",
    "repo": "docx",
    "content": "TITLE: Creating and saving a Word document with docx\nDESCRIPTION: Complete example demonstrating how to create a Word document with formatted text paragraphs and save it to the file system. The example shows document structure with sections, paragraphs, and text runs with different formatting.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\nimport { Document, Packer, Paragraph, TextRun } from \"docx\";\n\n// Documents contain sections, you can have multiple sections per document, go here to learn more about sections\n// This simple example will only contain one section\nconst doc = new Document({\n    sections: [\n        {\n            properties: {},\n            children: [\n                new Paragraph({\n                    children: [\n                        new TextRun(\"Hello World\"),\n                        new TextRun({\n                            text: \"Foo Bar\",\n                            bold: true,\n                        }),\n                        new TextRun({\n                            text: \"\\tGithub is the best\",\n                            bold: true,\n                        }),\n                    ],\n                }),\n            ],\n        },\n    ],\n});\n\n// Used to export the file into a .docx file\nPacker.toBuffer(doc).then((buffer) => {\n    fs.writeFileSync(\"My Document.docx\", buffer);\n});\n\n// Done! A file called 'My Document.docx' will be in your file system.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Document with docx Library in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new Document object using the docx library. This is the starting point for creating a Word document programmatically.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/document.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new docx.Document();\n```\n\n----------------------------------------\n\nTITLE: Installing docx npm package\nDESCRIPTION: Command to install the docx package from npm as a project dependency.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install --save docx\n```\n\n----------------------------------------\n\nTITLE: Creating a Floating Image in docx\nDESCRIPTION: Creates a floating image that appears on top of text with specified positioning. This snippet demonstrates setting the image type, data source, dimensions, and floating position with offsets.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ImageRun({\n    type: 'gif',\n    data: fs.readFileSync(\"./demo/images/pizza.gif\"),\n    transformation: {\n        width: 200,\n        height: 200,\n    }\n    floating: {\n        horizontalPosition: {\n            offset: 1014400,\n        },\n        verticalPosition: {\n            offset: 1014400,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Declarative Styles Definition\nDESCRIPTION: Example of defining custom paragraph styles in a document including custom formatting for runs and paragraphs. Demonstrates style inheritance and complex formatting options.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/styling-with-js.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    creator: \"Clippy\",\n    title: \"Sample Document\",\n    description: \"A brief example of using docx\",\n    styles: {\n        paragraphStyles: [\n            {\n                id: \"myWonkyStyle\",\n                name: \"My Wonky Style\",\n                basedOn: \"Normal\",\n                next: \"Normal\",\n                quickFormat: true,\n                run: {\n                    italics: true,\n                    color: \"999999\",\n                },\n                paragraph: {\n                    spacing: {\n                        line: 276,\n                    },\n                    indent: {\n                        left: 720,\n                    },\n                },\n            },\n            {\n                id: \"Heading2\",\n                name: \"Heading 2\",\n                basedOn: \"Normal\",\n                next: \"Normal\",\n                quickFormat: true,\n                run: {\n                    size: 26,\n                    bold: true,\n                    color: \"999999\",\n                    underline: {\n                        type: UnderlineType.DOUBLE,\n                        color: \"FF0000\",\n                    },\n                },\n                paragraph: {\n                    spacing: {\n                        before: 240,\n                        after: 120\n                    },\n                },\n            },\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bookmark for Internal Hyperlinks in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a bookmark that will serve as a destination for internal hyperlinks in a document. The bookmark is added to a heading paragraph with an anchor ID and display text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/hyperlinks.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst chapter1 = new Paragraph({\n    heading: HeadingLevel.HEADING_1,\n    children: [\n        new Bookmark({\n            id: \"anchorForChapter1\",\n            children: [new TextRun(\"Chapter 1\")],\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Document Properties in docx Library with TypeScript\nDESCRIPTION: This example shows how to set various document properties such as creator, description, and title when creating a new Document object. These properties provide metadata for the Word document.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/document.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new docx.Document({\n    creator: \"Dolan Miu\",\n    description: \"My extremely interesting document\",\n    title: \"My Document\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Text Run Usage in Paragraph\nDESCRIPTION: Demonstrates how to create multiple text runs within a paragraph using the docx library.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paragraph, TextRun } from \"docx\";\n\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"My awesome text here for my university dissertation\"), new TextRun(\"Foo Bar\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing docx using ES6 import syntax\nDESCRIPTION: Examples of importing the docx library using ES6 import syntax, showing both namespace import and destructured import options.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as docx from \"docx\";\n// or\nimport { ... } from \"docx\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Table in TypeScript using docx\nDESCRIPTION: This snippet demonstrates how to create a basic table and add it to a document section using the docx library. It shows the structure of creating a table with rows and adding it to a document.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new Table({\n    rows: [Array of `TableRow`s]\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [table],\n    }],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Floating Tables in Docx with TypeScript\nDESCRIPTION: This example shows how to create floating tables using the docx library. It demonstrates setting table properties such as floating position, width, and margins, as well as adding content to the table cells.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Document, Paragraph, Table, TableCell, TableRow, WidthType } from \"docx\";\n\nconst doc = new Document({\n    sections: [\n        {\n            children: [\n                new Table({\n                    floating: {\n                        horizontalPosition: {\n                            offset: 2014400,\n                        },\n                        verticalPosition: {\n                            offset: 2014400,\n                        },\n                    },\n                    layout: TableLayoutType.FIXED,\n                    width: {\n                        size: 4535,\n                        type: WidthType.DXA,\n                    },\n                    rows: [\n                        new TableRow({\n                            children: [\n                                new TableCell({\n                                    children: [new Paragraph(\"Hello\")],\n                                }),\n                            ],\n                        }),\n                    ],\n                }),\n                new Paragraph(\"Hello World\"),\n                new Table({\n                    floating: {\n                        horizontalPosition: {\n                            relative: HorizontalPositionRelativeFrom.PAGE,\n                            align: HorizontalPositionAlign.RIGHT,\n                        },\n                        verticalPosition: {\n                            relative: VerticalPositionRelativeFrom.PAGE,\n                            align: VerticalPositionAlign.BOTTOM,\n                        },\n                        wrap: {\n                            type: TextWrappingType.SQUARE,\n                            side: TextWrappingSide.BOTH_SIDES,\n                        },\n                        margins: {\n                            bottom: 201440,\n                        },\n                    },\n                    rows: [\n                        new TableRow({\n                            children: [\n                                new TableCell({\n                                    children: [new Paragraph(\"Hello\")],\n                                }),\n                            ],\n                        }),\n                    ],\n                    width: {\n                        size: 4535,\n                        type: WidthType.DXA,\n                    },\n                }),\n            ],\n        },\n    ],\n});\n\nPacker.toBuffer(doc).then((buffer) => {\n    fs.writeFileSync(\"My Document.docx\", buffer);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing docx using CommonJS require\nDESCRIPTION: Example of importing the docx library using Node.js CommonJS require syntax.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst docx = require(\"docx\");\n```\n\n----------------------------------------\n\nTITLE: Loading External Styles from XML File in docx\nDESCRIPTION: Creates a Document object with external styles loaded from a styles.xml file extracted from a Word document. This allows the document to use custom styles defined in Microsoft Word.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/styling-with-xml.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = fs.readFileSync(\"./styles.xml\", \"utf-8\");\nconst doc = new docx.Document({\n    title: \"Title\",\n    externalStyles: styles,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Headings and Titles in docx.js\nDESCRIPTION: Example of creating a paragraph with heading styles using the HeadingLevel enumeration. This allows for creating document structure with proper heading levels.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HeadingLevel, Paragraph } from \"docx\";\n\nconst paragraph = new Paragraph({\n    text: \"Hello World\",\n    heading: HeadingLevel.TITLE,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Document Background Color in docx Library with TypeScript\nDESCRIPTION: This snippet demonstrates how to set the background color of a Word document using a hexadecimal color value. The background color is specified as part of the Document constructor options.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/document.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new docx.Document({\n    background: {\n        color: \"C45911\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with the docx Library in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a document with a table of contents using the docx library. It requires enabling the updateFields feature for the TableOfContents to update correctly when opened in Word. The example includes a hyperlinked table of contents followed by a heading.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/table-of-contents.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    features: {\n        updateFields: true,\n    },\n    sections: [\n        {\n            children: [\n                new TableOfContents(\"Summary\", {\n                    hyperlink: true,\n                    headingStyleRange: \"1-5\",\n                }),\n                new Paragraph({\n                    text: \"Header #1\",\n                    heading: HeadingLevel.HEADING_1,\n                    pageBreakBefore: true,\n                }),\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Internal Hyperlink in TypeScript\nDESCRIPTION: This code shows how to create an internal hyperlink that references a bookmark within the document. The hyperlink includes styled text and points to a specific anchor ID.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/hyperlinks.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst link = new InternalHyperlink({\n    children: [\n        new TextRun({\n            text: \"See Chapter 1\",\n            style: \"Hyperlink\",\n        }),\n    ],\n    anchor: \"anchorForChapter1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating External Hyperlinks in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an external hyperlink that points to a URL outside the document. It includes styled text and the target URL.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/hyperlinks.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [\n        new ExternalHyperlink({\n            children: [\n                new TextRun({\n                    text: \"This is an external link!\",\n                    style: \"Hyperlink\",\n                }),\n            ],\n            link: \"https://docx.js.org\",\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Numbering with Custom Formatting in TypeScript\nDESCRIPTION: This snippet shows how to create a custom numbering configuration in a Document instance. It demonstrates setting up a numbering style with Roman numerals, custom alignment, and paragraph indentation.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/numbering.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    ...\n    numbering: {\n        config: [\n            {\n                reference: \"my-numbering\",\n                levels: [\n                    {\n                        level: 0,\n                        format: LevelFormat.UPPER_ROMAN,\n                        text: \"%1\",\n                        alignment: AlignmentType.START,\n                        style: {\n                            paragraph: {\n                                indent: { left: 2880, hanging: 2420 },\n                            },\n                        },\n                    },\n                    ...\n                ],\n            },\n        ],\n    },\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraphs using Shorthand Method in DocX (TypeScript)\nDESCRIPTION: The simplest way to create a paragraph with basic text content. This method directly passes the text string to the Paragraph constructor.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paragraph } from \"docx\";\n\nconst paragraph = new Paragraph(\"Short hand Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Basic Text and Paragraph Formatting in TypeScript\nDESCRIPTION: Examples of basic text and paragraph formatting using direct formatting approach. Shows how to create paragraphs with heading styles and alignment, and text runs with bold, font and caps formatting.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/styling-with-js.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst para = new Paragraph({\n    text: \"To whom it may concern:\",\n    heading: HeadingLevel.HEADING_2,\n    alignment: AlignmentType.CENTER,\n});\n\nconst name = new TextRun({\n    text: \"Name:\",\n    bold: true,\n    font: \"Calibri\",\n    allCaps: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Bold Text Formatting\nDESCRIPTION: Shows how to create bold text using TextRun properties.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"Foo Bar\",\n    bold: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraphs using Children Method in DocX (TypeScript)\nDESCRIPTION: Creating a paragraph by adding multiple child elements like TextRun and SymbolRun. This method is useful for combining different text styles or adding symbols within a single paragraph.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"Lorem Ipsum Foo Bar\"), new TextRun(\"Hello World\"), new SymbolRun(\"F071\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to Paragraphs in docx\nDESCRIPTION: Demonstrates how to apply both built-in heading styles and custom named styles to paragraphs in a docx document. Shows three approaches: using the heading1() method, explicitly setting a custom style by name, and creating a default paragraph.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/styling-with-xml.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndoc.createParagraph(\"Cool Heading Text\").heading1();\n\nconst paragraph = new docx.Paragraph('This is a custom named style from the template \"Cool New Style\"');\nparagraph.style(\"Cool New Style\");\ndoc.add(paragraph);\n\ndoc.createParagraph(\"Some normal text\");\n```\n\n----------------------------------------\n\nTITLE: Floating Image with Margin-Relative Positioning in docx\nDESCRIPTION: Creates a floating image positioned relative to the margins rather than the page. This example positions the image relative to the right and bottom margins with specified offsets.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ImageRun({\n    type: 'png',\n    data: buffer,\n    transformation: {\n        width: 903,\n        height: 1149,\n    },\n    floating: {\n        horizontalPosition: {\n            relative: HorizontalPositionRelativeFrom.RIGHT_MARGIN,\n            offset: 1014400,\n        },\n        verticalPosition: {\n            relative: VerticalPositionRelativeFrom.BOTTOM_MARGIN,\n            offset: 1014400,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Image Implementation Pattern in docx\nDESCRIPTION: Shows the standard pattern for creating and adding an image to a document. This includes defining the image type, providing data, and setting dimensions within the document structure.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [\n            new Paragraph({\n                children: [\n                    new ImageRun({\n                        type: [IMAGE_TYPE],\n                        data: [IMAGE_BUFFER],\n                        transformation: {\n                            width: [IMAGE_SIZE],\n                            height: [IMAGE_SIZE],\n                        },\n                    }),\n                ],\n            }),\n        ],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Bullet Points with DocX in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a document with bullet points using the DocX library. It creates two paragraphs and transforms them into bullet points with a specified indentation level.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/bullet-points.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [\n            new Paragraph({\n                text: \"Bullet points\",\n                bullet: {\n                    level: 0 // How deep you want the bullet to be. Maximum level is 9\n                }\n            }),\n            new Paragraph({\n                text: \"Are awesome\",\n                bullet: {\n                    level: 0\n                }\n            })\n        ],\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with Footnotes in docx\nDESCRIPTION: This example demonstrates how to create a document with footnotes using the docx library. It shows how to define footnote content and add footnote references within text. The footnotes are defined in the Document constructor and referenced using FootnoteReferenceRun elements within paragraphs.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/footnotes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    footnotes: {\n        1: { children: [new Paragraph(\"Foo\"), new Paragraph(\"Bar\")] },\n        2: { children: [new Paragraph(\"Test\")] },\n    },\n    sections: [\n        {\n            children: [\n                new Paragraph({\n                    children: [\n                        new TextRun({\n                            children: [\"Hello\"],\n                        }),\n                        new FootnoteReferenceRun(1),\n                        new TextRun({\n                            children: [\" World!\"],\n                        }),\n                        new FootnoteReferenceRun(2),\n                    ],\n                }),\n            ],\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Table Rows and Cells in TypeScript using docx\nDESCRIPTION: This snippet demonstrates how to create table rows and cells, and add them to a table using the docx library. It shows both creating separate variables and adding them directly to the table structure.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tableRow = new TableRow({\n    children: [\n        new TableCell({\n            children: [new Paragraph(\"hello\")],\n        }),\n    ],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new Table({\n    rows: [\n        new TableRow({\n            children: [\n                new TableCell({\n                    children: [new Paragraph(\"hello\")],\n                }),\n            ],\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Floating Image with Text Wrapping and Margins in docx\nDESCRIPTION: Creates a floating image with both text wrapping and margins. The margins create space between the wrapped text and the image itself, improving readability.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ImageRun({\n    type: 'gif',\n    data: fs.readFileSync(\"./demo/images/pizza.gif\"),\n    transformation: {\n        width: 200,\n        height: 200,\n    },\n    floating: {\n        horizontalPosition: {\n            offset: 2014400,\n        },\n        verticalPosition: {\n            offset: 2014400,\n        },\n        wrap: {\n            type: TextWrappingType.SQUARE,\n            side: TextWrappingSide.BOTH_SIDES,\n        },\n        margins: {\n            top: 201440,\n            bottom: 201440,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Page Number Implementation\nDESCRIPTION: Shows how to add a basic page number display using the docx library's Paragraph and TextRun components.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/page-numbers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    children: [\n        new TextRun({\n            children: [\"Page #: \", PageNumber.CURRENT],\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Current Page Number Example\nDESCRIPTION: Complete example showing how to implement current page number display in a paragraph.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/page-numbers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    children: [\n        new TextRun({\n            children: [\"Page Number \", PageNumber.CURRENT],\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Table Width and Indent in TypeScript using docx\nDESCRIPTION: This snippet shows how to set the width and indent of a table using the docx library. It demonstrates setting the width using the WidthType enum and specifying the indent.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new Table({\n    ...,\n    width: {\n        size: 4535,\n        type: WidthType.DXA,\n    }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new Table({\n    ...,\n    indent: {\n        size: 600,\n        type: WidthType.DXA,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Page References to Bookmarks in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a page reference to a bookmark, which displays the page number where the bookmark is located. It combines regular text with a dynamic page reference.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/hyperlinks.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"Chapter 1 can be seen on page \"), new PageReference(\"anchorForChapter1\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Bullet Points to a Paragraph in docx in TypeScript\nDESCRIPTION: Demonstrates how to apply the previously defined bullet point formatting to a paragraph. This uses the reference name and level number to link the paragraph to the bullet point style.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/numbering.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    text: \"Hey you!\",\n    numbering: {\n        reference: \"my-bullet-points\",\n        level: 0,\n    },\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating Numbered Item References in TypeScript\nDESCRIPTION: This code shows how to create cross-references to numbered items in a document. It requires specifying the anchor ID and a cached value for the numbering format.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/hyperlinks.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"See Paragraph \"), new NumberedItemReference(\"anchorForParagraph1\", \"1.1\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Headers and Footers in Document Sections using TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new Document with a section containing headers and footers. It shows the structure for default, first page, and even page headers and footers.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/headers-and-footers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        headers: {\n            default: new Header({ // The standard default header on every page or header on odd pages when the 'Different Odd & Even Pages' option is activated\n                children: [],\n            }),\n            first: new Header({ // The header on first page when the 'Different First Page' option is activated\n                children: [],\n            }),\n            even: new Header({ // The header on even pages when the 'Different Odd & Even Pages' option is activated\n                children: [],\n            }),\n        },\n        footers: {\n            default: new Footer({ // The standard default footer on every page or footer on odd pages when the 'Different Odd & Even Pages' option is activated\n                children: [],\n            }),\n            first: new Footer({ // The footer on first page when the 'Different First Page' option is activated\n                children: [],\n            }),\n            even: new Footer({ // The footer on even pages when the 'Different Odd & Even Pages' option is activated\n                children: [],\n            }),\n        },\n        children: [],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Alternative Text to an Image in docx\nDESCRIPTION: Demonstrates how to add alternative text properties to an image including title, description, and name. These properties are important for accessibility and document information.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ImageRun({\n    type: 'gif',\n    data: fs.readFileSync(\"./demo/images/pizza.gif\"),\n    altText: {\n        title: \"This is an ultimate title\",\n        description: \"This is an ultimate image\",\n        name: \"My Ultimate Image\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Frame with Positioning and Borders in TypeScript\nDESCRIPTION: This example demonstrates how to create a Text Frame using the docx library. It shows setting up frame properties like position coordinates, dimensions, anchoring, alignment, and borders. The frame contains multiple text runs with different formatting.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text-frames.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    frame: {\n        position: {\n            x: 1000,\n            y: 3000,\n        },\n        width: 4000,\n        height: 1000,\n        anchor: {\n            horizontal: FrameAnchorType.MARGIN,\n            vertical: FrameAnchorType.MARGIN,\n        },\n        alignment: {\n            x: HorizontalPositionAlign.CENTER,\n            y: VerticalPositionAlign.TOP,\n        },\n    },\n    border: {\n        top: {\n            color: \"auto\",\n            space: 1,\n            value: \"single\",\n            size: 6,\n        },\n        bottom: {\n            color: \"auto\",\n            space: 1,\n            value: \"single\",\n            size: 6,\n        },\n        left: {\n            color: \"auto\",\n            space: 1,\n            value: \"single\",\n            size: 6,\n        },\n        right: {\n            color: \"auto\",\n            space: 1,\n            value: \"single\",\n            size: 6,\n        },\n    },\n    children: [\n        new TextRun(\"Hello World\"),\n        new TextRun({\n            text: \"Foo Bar\",\n            bold: true,\n        }),\n        new TextRun({\n            text: \"\\tGithub is the best\",\n            bold: true,\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with docx Library in TypeScript\nDESCRIPTION: Example showing how to implement a table of contents in a document using the docx library. It demonstrates setting up a TOC with various options including hyperlinks, heading styles, and custom formatting.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/table-of-contents.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example referenced in the documentation but not directly included in the provided content.\n// The documentation points to https://github.com/dolanmiu/docx/blob/master/demo/28-table-of-contents.ts\n```\n\n----------------------------------------\n\nTITLE: Applying Numbering to a Paragraph in TypeScript\nDESCRIPTION: This snippet demonstrates how to apply a previously defined numbering style to a paragraph. It references the numbering configuration by its identifier and specifies the numbering level.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/numbering.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    text: \"Hey you!\",\n    numbering: {\n        reference: \"my-numbering\",\n        level: 0,\n    },\n}),\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Stop Implementation in TypeScript\nDESCRIPTION: Demonstrates creating a paragraph with basic tab stops using both tab character and Tab object. Shows right-aligned tab stop implementation with mixed text formatting.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [\n        new TextRun({ text: \"Hey everyone\", bold: true }),\n        new TextRun(\"\\t11th November 1999\"),\n        new TextRun({\n            children: [new Tab(), \"11th November 1999\"],\n        }),\n    ],\n    tabStops: [\n        {\n            type: TabStopType.RIGHT,\n            position: TabStopPosition.MAX,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Comments in DOCX Documents with TypeScript\nDESCRIPTION: This example demonstrates how to add comments to a document using the docx library. It shows how to define comment authors, create the comments block, and place comments in the document using both comment ranges and comment references.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/comments.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\nimport {\n    CommentRangeEnd,\n    CommentRangeStart,\n    CommentReference,\n    Document,\n    Packer,\n    Paragraph,\n    TextRun,\n} from \"docx\";\n\nconst doc = new Document({\n    comments: {\n        // Defines the comments for the document\n        comments: [\n            {\n                id: 0,\n                text: \"Is this right?\",\n                author: \"John Doe\",\n                date: new Date(2020, 3, 20),\n            },\n            {\n                id: 1,\n                text: \"Yes, it is!\",\n                author: \"Jane Doe\",\n                date: new Date(2020, 3, 21),\n            },\n        ],\n    },\n    sections: [\n        {\n            properties: {},\n            children: [\n                new Paragraph({\n                    children: [\n                        new TextRun(\"Hello World\"),\n                        new CommentRangeStart(0),\n                        new TextRun(\" with a comment\"),\n                        new CommentRangeEnd(0),\n                        new CommentReference(0),\n                    ],\n                }),\n                new Paragraph({\n                    children: [\n                        new TextRun(\"Hello again\"),\n                        new CommentReference(1),\n                    ],\n                }),\n                new Paragraph({\n                    children: [new TextRun(\"Some more text\")],\n                }),\n            ],\n        },\n    ],\n});\n\nPacker.toBuffer(doc).then((buffer) => {\n    fs.writeFileSync(\"My Document.docx\", buffer);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Document with Paragraph Style for Bullet Points in TypeScript\nDESCRIPTION: Creates a document with both numbering configuration and a paragraph style that uses this numbering. This allows bullet points to be applied through styles rather than directly on paragraphs.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/numbering.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    ...\n    numbering: {\n        config: [\n            {\n                reference: \"my-bullet-points\",\n                levels: [\n                    {\n                        level: 0,\n                        format: LevelFormat.BULLET,\n                        text: \"\\u1F60\",\n                        alignment: AlignmentType.LEFT,\n                        style: {\n                            paragraph: {\n                                indent: { left: convertInchesToTwip(0.5), hanging: convertInchesToTwip(0.25) },\n                            },\n                        },\n                    },\n                ],\n            },\n        ],\n    },\n    styles: {\n        paragraphStyles: [\n            {\n                id: 'bullet',\n                name: 'Bullet',\n                basedOn: 'Normal',\n                next: 'Normal',\n                run: {},\n                paragraph: {\n                    numbering: {\n                        reference: 'my-bullet-points',\n                        level: 0,\n                    },\n                },\n            },\n        ],\n    },\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Underline Formatting\nDESCRIPTION: Demonstrates advanced underline formatting with type and color options.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"and then underlined \",\n    underline: {\n        type: UnderlineType.DOUBLE,\n        color: \"990011\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Columns and Rows in Docx Tables with TypeScript\nDESCRIPTION: This example demonstrates how to create a table with merged columns and rows, and insert images into cells using the docx library. It showcases the creation of a 3x3 table with specific cell merging and image insertion.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\nimport { Document, ImageRun, Paragraph, Table, TableCell, TableRow, WidthType } from \"docx\";\n\nconst doc = new Document({\n    sections: [\n        {\n            children: [\n                new Table({\n                    rows: [\n                        new TableRow({\n                            children: [\n                                new TableCell({\n                                    children: [new Paragraph(\"Hello\")],\n                                    columnSpan: 2,\n                                }),\n                                new TableCell({\n                                    children: [new Paragraph(\"World\")],\n                                }),\n                            ],\n                        }),\n                        new TableRow({\n                            children: [\n                                new TableCell({\n                                    rowSpan: 2,\n                                    children: [\n                                        new Paragraph({\n                                            children: [\n                                                new ImageRun({\n                                                    data: fs.readFileSync(\"./demo/images/dog.png\"),\n                                                    transformation: {\n                                                        width: 100,\n                                                        height: 100,\n                                                    },\n                                                }),\n                                            ],\n                                        }),\n                                    ],\n                                    verticalAlign: VerticalAlign.CENTER,\n                                }),\n                                new TableCell({\n                                    children: [new Paragraph(\"Foo\")],\n                                }),\n                                new TableCell({\n                                    children: [new Paragraph(\"Bar\")],\n                                }),\n                            ],\n                        }),\n                        new TableRow({\n                            children: [\n                                new TableCell({\n                                    children: [new Paragraph(\"Baz\")],\n                                }),\n                                new TableCell({\n                                    children: [new Paragraph(\"Qux\")],\n                                }),\n                            ],\n                        }),\n                    ],\n                    width: {\n                        size: 100,\n                        type: WidthType.PERCENTAGE,\n                    },\n                }),\n            ],\n        },\n    ],\n});\n\nPacker.toBuffer(doc).then((buffer) => {\n    fs.writeFileSync(\"My Document.docx\", buffer);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Numbering in Document Constructor (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add numbering configuration to a Document object. The numbering property accepts a config array that defines the bullet and numbering styles.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/numbering.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Document({\n    numbering: {\n        config: [...]\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Text Shading and Highlighting\nDESCRIPTION: Demonstrates how to apply shading and highlighting effects to text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"shading\",\n    shading: {\n        type: ShadingType.REVERSE_DIAGONAL_STRIPE,\n        color: \"00FFFF\",\n        fill: \"FF0000\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Image to a Document in docx\nDESCRIPTION: Demonstrates how to add an image to a document by inserting it into a paragraph within a section. This is the basic pattern for including images in the document structure.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [\n            new Paragraph({\n                children: [image],\n            }),\n        ],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Floating Image with Text Wrapping in docx\nDESCRIPTION: Creates a floating image that has text wrapping enabled. This example uses square wrapping on both sides, allowing text to flow around the image rather than being hidden behind it.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ImageRun({\n    type: 'gif',\n    data: fs.readFileSync(\"./demo/images/pizza.gif\"),\n    transformation: {\n        width: 200,\n        height: 200,\n    },\n    floating: {\n        horizontalPosition: {\n            offset: 2014400,\n        },\n        verticalPosition: {\n            offset: 2014400,\n        },\n        wrap: {\n            type: TextWrappingType.SQUARE,\n            side: TextWrappingSide.BOTH_SIDES,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Positional Tab Implementation\nDESCRIPTION: Shows how to create a positional tab with right alignment, margin-relative positioning, and dot leader formatting.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    children: [\n        new TextRun(\"Full name\"),\n        new TextRun({\n            children: [\n                new PositionalTab({\n                    alignment: PositionalTabAlignment.RIGHT,\n                    relativeTo: PositionalTabRelativeTo.MARGIN,\n                    leader: PositionalTabLeader.DOT,\n                }),\n                \"John Doe\",\n            ],\n            bold: true,\n        }),\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Combined Page Numbers Implementation\nDESCRIPTION: Shows how to combine current page number and total pages to create a 'Page X of Y' format with additional text content.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/page-numbers.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    children: [\n        new TextRun(\"My awesome text here for my university dissertation. \")\n        new TextRun({\n            children: [\"Page \", PageNumber.CURRENT, \" of \", PageNumber.TOTAL_PAGES],\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Change Tracking in Document Settings (TypeScript)\nDESCRIPTION: This snippet shows how to enable change tracking for new changes in a document using the docx library. It demonstrates setting the trackRevisions feature in the Document constructor.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/change-tracking.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Document } from \"docx\";\n\nconst doc = new Document({\n    features: {\n        trackRevisions: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Inline Image in docx\nDESCRIPTION: Creates an inline image (default behavior) with specified type, data source, and dimensions. Inline images flow with the text rather than floating on top.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ImageRun({\n    type: 'gif',\n    data: fs.readFileSync(\"./demo/images/pizza.gif\"),\n    transformation: {\n        width: 100,\n        height: 100,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Text Alignment in docx.js\nDESCRIPTION: Example of changing the text alignment of a paragraph using the AlignmentType enum. This allows for centering, left-aligning, right-aligning, or justifying text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"Hello World\",\n    heading: HeadingLevel.HEADING_1,\n    alignment: AlignmentType.CENTER,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Paragraph Spacing in docx.js\nDESCRIPTION: Example of adding spacing before a paragraph using the ISpacingProperties interface. This controls the whitespace between paragraphs.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"Paragraph with spacing before\",\n    spacing: {\n        before: 200,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Cell Properties in TypeScript using docx\nDESCRIPTION: This snippet shows how to set various properties for table cells, including width, vertical alignment, and merging cells. It demonstrates the use of WidthType, VerticalAlign, and row/column span.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst cell = new TableCell({\n    ...,\n    width: {\n        size: number,\n        type: WidthType,\n    },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst cell = new TableCell({\n    verticalAlign: VerticalAlign.CENTER,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst cell = new TableCell({\n    ...,\n    rowSpan: 3,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst cell = new TableCell({\n    ...,\n    columnSpan: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Top and Bottom Borders to Paragraphs in docx.js\nDESCRIPTION: Example of adding border properties to the top and bottom sides of a paragraph using the IBorderPropertyOptions interface. The border properties include color, space, style, and size.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"I have borders on my top and bottom sides!\",\n    border: {\n        top: {\n            color: \"auto\",\n            space: 1,\n            style: \"single\",\n            size: 6,\n        },\n        bottom: {\n            color: \"auto\",\n            space: 1,\n            style: \"single\",\n            size: 6,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Page Breaks in docx.js\nDESCRIPTION: Example of inserting a page break within a paragraph using the PageBreak class. This moves content after the break to a new page.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new docx.Paragraph({\n    children: [new TextRun(\"Amazing Heading\"), new PageBreak()],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Table Cell Borders in TypeScript using docx\nDESCRIPTION: This snippet demonstrates how to set custom borders for table cells, including style, size, and color. It shows examples for both standard Word documents and Google Docs compatibility.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst cell = new TableCell({\n    ...,\n    borders: {\n        top: {\n            style: BorderStyle.DASH_DOT_STROKED,\n            size: 1,\n            color: \"ff0000\",\n        },\n        bottom: {\n            style: BorderStyle.THICK_THIN_MEDIUM_GAP,\n            size: 5,\n            color: \"889900\",\n        },\n    },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst cell = new TableCell({\n    ...,\n    borders: {\n        left: {\n            style: BorderStyle.DOT_DOT_DASH,\n            size: 3,\n            color: \"00FF00\",\n        },\n        right: {\n            style: BorderStyle.DOT_DOT_DASH,\n            size: 3,\n            color: \"ff8000\",\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Inserted and Deleted Text in docx (TypeScript)\nDESCRIPTION: This snippet shows how to create a paragraph with normal, inserted, and deleted text using the docx library. It demonstrates the use of TextRun, InsertedTextRun, and DeletedTextRun classes, including the required fields for change tracking.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/change-tracking.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paragraph, TextRun, InsertedTextRun, DeletedTextRun } from \"docx\";\n\nconst paragraph = new Paragraph({\n    children: [\n        new TextRun(\"This is a simple demo \"),\n        new TextRun({\n            text: \"on how to \"\n        }),\n        new InsertedTextRun({\n            text: \"mark a text as an insertion \",\n            id: 0,\n            author: \"Firstname Lastname\",\n            date: \"2020-10-06T09:00:00Z\",\n        }),\n        new DeletedTextRun({\n            text: \"or a deletion.\",\n            id: 1,\n            author: \"Firstname Lastname\",\n            date: \"2020-10-06T09:00:00Z\",\n        })\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Break Before Paragraphs in docx.js\nDESCRIPTION: Example of using the pageBreakBefore property to ensure a paragraph starts on a new page, equivalent to Word's 'Page break before' option.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"Hello World on another page\",\n    pageBreakBefore: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Hyperlinks with Multiple Text Runs in TypeScript\nDESCRIPTION: This example shows how to style hyperlink text with different formatting options. It combines multiple TextRun elements with various styles while maintaining the hyperlink appearance.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/hyperlinks.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst styledLink = new ExternalHyperlink({\n    children: [\n        new TextRun({\n            text: \"This is a \",\n            style: \"Hyperlink\",\n        }),\n        new TextRun({\n            text: \"bold\",\n            bold: true,\n            style: \"Hyperlink\",\n        }),\n        new TextRun({\n            text: \" link!\",\n            style: \"Hyperlink\",\n        }),\n    ],\n    link: \"https://docx.js.org\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Cube Root of a Complex Expression\nDESCRIPTION: Example demonstrating how to create a cube root of a complex expression involving a fraction and addition.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathRadical({\n    children: [\n        new MathFraction({\n            numerator: [new MathRun(\"1\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n        new MathRun('+ 1'),\n    ],\n    degree: [new MathRun(\"3\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Controlling Page Breaks within Paragraphs in docx.js\nDESCRIPTION: Example of using keepLines and keepNext properties to control how paragraphs break across pages, preventing unwanted page breaks within or between paragraphs.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"Stay on the same page\",\n    keepLines: true,\n    keepNext: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Points in docx Document in TypeScript\nDESCRIPTION: Creates a document with a custom numbering configuration for bullet points. This snippet defines a bullet point format with specific indentation and text character, which can be referenced in paragraphs.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/numbering.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    ...\n    numbering: {\n        config: [\n            {\n                reference: \"my-bullet-points\",\n                levels: [\n                    {\n                        level: 0,\n                        format: LevelFormat.BULLET,\n                        text: \"\\u1F60\",\n                        alignment: AlignmentType.LEFT,\n                        style: {\n                            paragraph: {\n                                indent: { left: convertInchesToTwip(0.5), hanging: convertInchesToTwip(0.25) },\n                            },\n                        },\n                    },\n                ],\n            },\n        ],\n    },\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Field to Paragraph in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a simple field (AUTHOR) to a paragraph in a docx document. It creates a new paragraph with text and a SimpleField object.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/fields.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"This document was created by: \"), new SimpleField(\"AUTHOR\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Strike Through Text\nDESCRIPTION: Shows how to apply strike-through formatting to text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"strike\",\n    strike: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Math Object with Fraction in TypeScript\nDESCRIPTION: Example showing how to create a Math object with a basic MathRun and MathFraction component. The MathRun represents simple text in a math expression while the MathFraction creates a fraction with numerator and denominator.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Math({\n    children: [\n        new MathRun(\"2+2\"),\n        new MathFraction({\n            numerator: [new MathRun(\"hi\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Box with Centered Alignment in docx Library\nDESCRIPTION: This example demonstrates how to create a Text Box with centered alignment containing a paragraph with text. The Text Box is configured with a fixed width and automatic height adjustment.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text-box.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Textbox({\n    alignment: \"center\",\n    children: [\n        new Paragraph({\n            children: [new TextRun(\"Hi i'm a textbox!\")],\n        }),\n    ],\n    style: {\n        width: \"200pt\",\n        height: \"auto\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple MathFraction in TypeScript\nDESCRIPTION: Basic example of creating a fraction (1/2) using the MathFraction component.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathFraction({\n    numerator: [new MathRun(\"1\")],\n    denominator: [new MathRun(\"2\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Converting DOCX to String in TypeScript\nDESCRIPTION: Shows how to convert a docx document to a string representation.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPacker.toString(doc).then((string) => {\n    console.log(string);\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Text Formatting Example\nDESCRIPTION: Demonstrates direct text formatting by creating a TextRun with multiple style properties including bold, font family, and all caps.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/styling-with-js.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = new TextRun({\n    text: \"Name:\",\n    bold: true,\n    font: \"Calibri\",\n    allCaps: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Section Type in docx Document\nDESCRIPTION: This snippet demonstrates how to set specific section properties, particularly the section type which determines how content is positioned relative to the previous section. It shows the CONTINUOUS section type implementation.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/sections.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        properties: {\n            type: SectionType.CONTINUOUS,\n        }\n        children: [\n            new Paragraph({\n                children: [new TextRun(\"Hello World\")],\n            }),\n        ],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Converting DOCX to Base64 String in TypeScript\nDESCRIPTION: Demonstrates conversion of a docx document to a base64 encoded string.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPacker.toBase64String(doc).then((string) => {\n    console.log(string);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Justified Text with Breaks in docx.js\nDESCRIPTION: Configuration to prevent justification of incomplete lines ending in soft line breaks, improving the appearance of justified text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nthis.doc.Settings.addCompatibility().doNotExpandShiftReturn();\n```\n\n----------------------------------------\n\nTITLE: Direct Paragraph Formatting Example\nDESCRIPTION: Shows how to apply direct paragraph formatting with heading level and alignment properties.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/styling-with-js.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst para = new Paragraph({\n    text: \"To whom it may concern:\",\n    heading: HeadingLevel.HEADING_2,\n    alignment: AlignmentType.CENTER,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting DOCX to Stream in TypeScript\nDESCRIPTION: Shows how to export a docx document to a Stream.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nPacker.toStream(doc).then((stream) => {\n    // read from stream\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Heading Level for Paragraphs in DocX (TypeScript)\nDESCRIPTION: Example of creating a paragraph with a specific heading level. This is useful for creating document structure with properly formatted headings.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"Hello World\",\n    heading: HeadingLevel.HEADING_1,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Paragraph Shading in docx.js\nDESCRIPTION: Example of applying background shading to an entire paragraph block. The shading properties include type, color, and fill values.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"shading\",\n    shading: {\n        type: ShadingType.REVERSE_DIAGONAL_STRIPE,\n        color: \"00FFFF\",\n        fill: \"FF0000\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Patcher Example with Multiple Content Types\nDESCRIPTION: A comprehensive example showing how to patch a document with various content types including text runs, paragraphs, hyperlinks, and images. The example demonstrates both PARAGRAPH and DOCUMENT patch types.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/patcher.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npatchDocument(fs.readFileSync(\"My Document.docx\"), {\n    patches: {\n        my_patch: {\n            type: PatchType.PARAGRAPH,\n            children: [new TextRun(\"Sir. \"), new TextRun(\"John Doe\"), new TextRun(\"(The Conqueror)\")],\n        },\n        my_second_patch: {\n            type: PatchType.DOCUMENT,\n            children: [\n                new Paragraph(\"Lorem ipsum paragraph\"),\n                new Paragraph(\"Another paragraph\"),\n                new Paragraph({\n                    children: [\n                        new TextRun(\"This is a \"),\n                        new ExternalHyperlink({\n                            children: [\n                                new TextRun({\n                                    text: \"Google Link\",\n                                }),\n                            ],\n                            link: \"https://www.google.co.uk\",\n                        }),\n                        new ImageRun({ type: 'png', data: fs.readFileSync(\"./demo/images/dog.png\"), transformation: { width: 100, height: 100 } }),\n                    ],\n                }),\n            ],\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Tab Stops Configuration\nDESCRIPTION: Shows how to configure multiple tab stops with different positions and types. Includes example of using multiple tab characters to reach different stop positions.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"\\t\\tSecond tab stop here I come!\")],\n    tabStops: [\n        {\n            type: TabStopType.RIGHT,\n            position: TabStopPosition.MAX,\n        },\n        {\n            type: TabStopType.LEFT,\n            position: 1000,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Formula Field with Bookmarks in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a formula field that references bookmarks for calculations. It creates a paragraph with two bookmarks and a formula field that adds their values.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/fields.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [\n        new TextRun(\"Value one is: \"),\n        new Bookmark({ id: \"One\", children: [new TextRun(\"451\")]}),\n        new TextRun(\". The second value is: \"),\n        new Bookmark({ id: \"Two\", children: [new TextRun(\"886\")]}),\n        new TextRun(\". The sum of these values is: \"),\n        new SimpleField(\"=One+Two\"),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Row Options in TypeScript using docx\nDESCRIPTION: This snippet shows how to set various options for table rows, including repeating headers and preventing row pagination. It demonstrates the use of the tableHeader and cantSplit properties.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst row = new TableRow({\n    ...,\n    tableHeader: true,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst row = new Row({\n    ...,\n    cantSplit: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Inline Paragraph Definition in Document Sections in DocX (TypeScript)\nDESCRIPTION: The preferred convention for creating documents is to define paragraphs directly inside the section definition. This reduces the need for variables and creates cleaner code.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [\n            new Paragraph({\n                children: [new TextRun(\"Lorem Ipsum Foo Bar\"), new TextRun(\"Hello World\")],\n            }),\n        ],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Left Tab Stop Configuration\nDESCRIPTION: Shows how to create a left-aligned tab stop with a specific position from the left side.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    tabStops: [\n        {\n            type: TabStopType.LEFT,\n            position: 2268,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Table Display Direction in TypeScript using docx\nDESCRIPTION: This snippet demonstrates how to set the visual direction of a table from right to left, which can be useful for certain languages or layouts.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tables.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new Table({\n    visuallyRightToLeft: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting DOCX to Buffer in TypeScript\nDESCRIPTION: Demonstrates how to export a docx document to a Buffer (Node.js) or UInt8Array (browser) and save it to the filesystem.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPacker.toBuffer(doc).then((buffer) => {\n    fs.writeFileSync(\"My Document.docx\", buffer);\n});\n```\n\n----------------------------------------\n\nTITLE: Center Tab Stop Configuration\nDESCRIPTION: Demonstrates creating a center-aligned tab stop with position specified from the center.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    tabStops: [\n        {\n            type: TabStopType.CENTER,\n            position: 2268,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Compatibility Settings in docx Library with TypeScript\nDESCRIPTION: This example shows how to set compatibility options for a Word document. These settings are used to preserve visual fidelity when working with documents created in earlier word processing applications.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/document.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new docx.Document({\n    compatibility: {\n        version: 15,\n        doNotExpandShiftReturn: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting DOCX to Blob in TypeScript\nDESCRIPTION: Shows how to convert a docx document to a Blob for browser downloads using FileSaver.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPacker.toBlob(doc).then((blob) => {\n    // saveAs from FileSaver will download the file\n    saveAs(blob, \"example.docx\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Symbol Runs to Paragraphs in TypeScript\nDESCRIPTION: Creates a paragraph containing both text and symbol runs. This example shows how to add a checkbox symbol after text in a paragraph.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/symbols.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paragraph, TextRun, SymbolRun } from \"docx\";\n\nconst paragraph = new Paragraph({\n    children: [\n        new TextRun(\"This is a checkbox: \"),\n        new SymbolRun(\"F071\")\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using MathRun Inside a Math Object\nDESCRIPTION: Example showing how to use multiple MathRun components within a Math object to create a simple addition expression.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Math({\n    children: [\n        new MathRun(\"2\"),\n        new MathRun(\"+\"),\n        new MathRun(\"2\"),\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex MathFraction with Nested Components\nDESCRIPTION: Example showing how to create a more complex fraction with a nested radical in the numerator.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathFraction({\n    numerator: [\n        new MathRun(\"1\"),\n        new MathRadical({\n            children: [new MathRun(\"2\")],\n        }),\n    ],\n    denominator: [new MathRun(\"2\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Field with Cached Value in TypeScript\nDESCRIPTION: This example shows how to add a simple field (AUTHOR) with a cached value to a paragraph. The cached value is provided as the second argument to the SimpleField constructor.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/fields.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"This document was created by: \"), new SimpleField(\"AUTHOR\", \"Richard Brodie\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Addition of Fractions Expression\nDESCRIPTION: Example demonstrating how to create a complex math expression showing the addition of two fractions equaling 1.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew Math({\n    children: [\n        new MathFraction({\n            numerator: [new MathRun(\"1\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n        new MathText(\"+\"),\n        new MathFraction({\n            numerator: [new MathRun(\"1\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n        new MathText(\"= 1\"),\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Summation (Sigma) Expression\nDESCRIPTION: Example of using the MathSum component to create a basic summation expression.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathSum({\n    children: [new MathRun(\"i\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a MathRun Component in TypeScript\nDESCRIPTION: Examples of MathRun usage, which is the most basic math component for displaying text in math expressions.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathRun(\"2+2\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathRun(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Summation with Limits\nDESCRIPTION: Example showing how to create a summation with upper and lower limits and a complex term being summed.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathSum({\n    children: [\n        new MathSuperScript({\n            children: [new MathRun(\"e\")],\n            superScript: [new MathRun(\"2\")],\n        })\n    ],\n    subScript: [new MathRun(\"i\")],\n    superScript: [new MathRun(\"10\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Subscript-Superscript Expression\nDESCRIPTION: Example demonstrating how to create an expression with both subscript and superscript elements.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathSubSuperScript({\n    children: [new MathRun(\"test\")],\n    superScript: [new MathRun(\"hello\")],\n    subScript: [new MathRun(\"world\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Italics Text Formatting\nDESCRIPTION: Shows how to create italicized text using TextRun properties.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"Foo Bar\",\n    italics: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Mail Merge Field in TypeScript\nDESCRIPTION: This example shows how to add a mail merge field to a paragraph using the SimpleMailMergeField class. It creates a paragraph with text and a mail merge field for a 'Score' value.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/fields.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"Your score was \"), new SimpleMailMergeField(\"Score\"), new TextRun(\" of 100 points\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Square Root Expression\nDESCRIPTION: Example showing how to create a simple square root expression using MathRadical.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathRadical({\n    children: [new MathRun(\"2\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Text Highlighting\nDESCRIPTION: Shows how to highlight text with a specific color.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"highlighting\",\n    highlight: \"yellow\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Section with a Paragraph in docx\nDESCRIPTION: This example shows how to create a simple document with one section containing a single paragraph with the text 'Hello World'. It demonstrates the basic structure of section creation in the docx library.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/sections.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [\n            new Paragraph({\n                children: [new TextRun(\"Hello World\")],\n            }),\n        ],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Round Brackets in Mathematical Expressions\nDESCRIPTION: Example showing how to enclose a fraction inside round brackets (parentheses).\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathRoundBrackets({\n    children: [\n        new MathFraction({\n            numerator: [new MathRun(\"1\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Double Strike Through\nDESCRIPTION: Shows how to apply double strike-through formatting to text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"doubleStrike\",\n    doubleStrike: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraphs using Explicit Method in DocX (TypeScript)\nDESCRIPTION: Creating a paragraph by explicitly setting the text property in the options object. This method provides clarity about what properties are being set.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"Short hand notation for adding text.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Current Page Number Implementation\nDESCRIPTION: Demonstrates how to display the current page number using PageNumber.CURRENT.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/page-numbers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPageNumber.CURRENT\n```\n\n----------------------------------------\n\nTITLE: Superscript Text\nDESCRIPTION: Shows how to create superscript text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"superScript\",\n    superScript: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Text in Paragraphs in DocX (TypeScript)\nDESCRIPTION: Example of creating a paragraph with basic text content using the text property. This is one of three ways to add text to a paragraph, alongside the shorthand method and adding children.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"Hello World\",\n});\n```\n\n----------------------------------------\n\nTITLE: Total Pages Implementation\nDESCRIPTION: Shows how to display the total number of pages using PageNumber.TOTAL_PAGES.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/page-numbers.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPageNumber.TOTAL_PAGES\n```\n\n----------------------------------------\n\nTITLE: Single Line Break\nDESCRIPTION: Shows how to add a single line break within a text run.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"break\",\n    break: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Underline Formatting\nDESCRIPTION: Shows how to apply basic underline formatting to text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"and then underlined \",\n    underline: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Total Pages Example\nDESCRIPTION: Complete example showing how to implement total pages display in a paragraph.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/page-numbers.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    children: [\n        new TextRun({\n            children: [\"Total Pages Number: \", PageNumber.TOTAL_PAGES],\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Superscript Expression\nDESCRIPTION: Examples showing how to create expressions with superscripts, including a squared variable and inverse cosine.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathSuperScript({\n    children: [new MathRun(\"x\")],\n    superScript: [new MathRun(\"2\")],\n}),\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathSuperScript({\n    children: [new MathRun(\"cos\")],\n    superScript: [new MathRun(\"-1\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring Widow Control in docx.js\nDESCRIPTION: Setting the widow control property to allow first/last lines to display on a separate page, preventing orphaned lines when a paragraph breaks across pages.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    text: \"shading\",\n    widowControl: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Thematic Breaks to Paragraphs in docx.js\nDESCRIPTION: Example of adding a thematic break (horizontal line) directly under a paragraph heading by setting the thematicBreak property to true.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new docx.Paragraph(\"Amazing Heading\");\nconst paragraph = new Paragraph({\n    text: \"Amazing Heading\",\n    heading: HeadingLevel.HEADING_1,\n    thematicBreak: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscript Expression\nDESCRIPTION: Example showing how to create an expression with a subscript, using F with subscript n-1.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathSubScript({\n    children: [new MathRun(\"F\")],\n    subScript: [new MathRun(\"n-1\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Adding Paragraphs to Document Sections in DocX (TypeScript)\nDESCRIPTION: After creating a paragraph, it must be added to a section within a document. This example shows how to add a previously created paragraph to a document section.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [paragraph],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Right Tab Stop Configuration\nDESCRIPTION: Shows implementation of a right-aligned tab stop with position specified from the left side.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    tabStops: [\n        {\n            type: TabStopType.RIGHT,\n            position: 2268,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Expression with Inverse Cosine\nDESCRIPTION: Example showing how to create a mathematical function expression, specifically inverse cosine of 100.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathFunction({\n    name: [\n        new MathSuperScript({\n            children: [new MathRun(\"cos\")],\n            superScript: [new MathRun(\"-1\")],\n        }),\n    ],\n    children: [new MathRun(\"100\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Subscript Text\nDESCRIPTION: Shows how to create subscript text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"subScript\",\n    subScript: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Maximum Right Tab Stop\nDESCRIPTION: Demonstrates setting up a right-aligned tab stop at the maximum position (page edge).\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    tabStops: [\n        {\n            type: TabStopType.RIGHT,\n            position: TabStopPosition.MAX,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Outline Level for Paragraphs in docx.js\nDESCRIPTION: Example of setting the outline level property for a paragraph, which affects its position in the document's outline structure.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/paragraph.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    outlineLevel: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: All Capitals Text\nDESCRIPTION: Shows how to format text in all capital letters.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"allCaps\",\n    allCaps: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Emphasis Mark Formatting\nDESCRIPTION: Shows how to add emphasis marks to text.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"and then emphasis mark\",\n    emphasisMark: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Different First Page in Document Sections using TypeScript\nDESCRIPTION: This snippet shows how to enable the 'Different First Page' option for headers and footers by setting the titlePage property to true in the section properties.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/headers-and-footers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsections: [\n        {\n          properties: {\n            titlePage: true,\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests with Vitest in TypeScript\nDESCRIPTION: Provides a template for writing unit tests using Vitest in TypeScript for the docx project, including setup and teardown methods.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/contribution-guidelines.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { afterEach, beforeEach, describe, expect, it, vi } from \"vitest\";\n\ndescribe(\"ClassName\", () => {\n    afterEach(() => {\n        // TODO\n    });\n\n    beforeEach(() => {\n        // TODO\n    });\n\n    describe(\"#methodName()\", () => {\n        it(\"should \", () => {\n            // TODO\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Small Capitals Text\nDESCRIPTION: Shows how to format text in small capitals.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"smallCaps\",\n    smallCaps: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Square Brackets in Mathematical Expressions\nDESCRIPTION: Example showing how to enclose a fraction inside square brackets.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathSquareBrackets({\n    children: [\n        new MathFraction({\n            numerator: [new MathRun(\"1\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Multiple Tab Stops with Same Type\nDESCRIPTION: Demonstrates using multiple tab stops of the same type with different positions, showing both tab character and Tab object implementations.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/tabs.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"Multiple \\ttab \\tstops!\")],\n    tabStops: [\n        {\n            type: TabStopType.RIGHT,\n            position: TabStopPosition.MAX,\n        },\n        {\n            type: TabStopType.RIGHT,\n            position: 1000,\n        },\n    ],\n});\n\nconst paragraph = new Paragraph({\n    children: [\n        new TextRun({\n            children: [\"Multiple \", new Tab(), \"tab \", new Tab(), \"stops!\"],\n        }),\n    ],\n    tabStops: [\n        {\n            type: TabStopType.RIGHT,\n            position: TabStopPosition.MAX,\n        },\n        {\n            type: TabStopType.RIGHT,\n            position: 1000,\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Patcher Usage with docx Library\nDESCRIPTION: Demonstrates the basic usage of the patchDocument function to modify an existing Word document. This code loads a document from disk and provides a patches object that will be used to modify the document.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/patcher.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\nimport { patchDocument } from \"docx\";\n\npatchDocument(fs.readFileSync(\"My Document.docx\"), {\n    patches: {\n        // Patches here\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Vanish Text\nDESCRIPTION: Shows how to hide text in a document using the vanish property.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"This text will be hidden\",\n    vanish: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Floating Image with Page-Relative Positioning in docx\nDESCRIPTION: Creates a floating image positioned relative to the page. By default, offsets are relative to the top left corner of the page, measured in EMU units.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/images.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ImageRun({\n    type: 'png',\n    data: buffer,\n    transformation: {\n        width: 903,\n        height: 1149,\n    },\n    floating: {\n        horizontalPosition: {\n            offset: 1014400, // relative: HorizontalPositionRelativeFrom.PAGE by default\n        },\n        verticalPosition: {\n            offset: 1014400, // relative: VerticalPositionRelativeFrom.PAGE by default\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Line Breaks\nDESCRIPTION: Shows how to add multiple line breaks within a text run.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"break\",\n    break: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Millimeters to Twips in TypeScript using docx Library\nDESCRIPTION: This snippet shows how to use the convertMillimetersToTwip function from the docx library to convert millimeters to twips. It provides an example of converting 50 millimeters to twips.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/convenience-functions.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertMillimetersToTwip } from \"docx\";\n\nconst twip = convertMillimetersToTwip(50); // returns 2834\n```\n\n----------------------------------------\n\nTITLE: Converting Inches to Twips in TypeScript using docx Library\nDESCRIPTION: This snippet demonstrates how to use the convertInchesToTwip function from the docx library to convert inches to twips. It shows two examples: converting 1 inch and 0.5 inches to twips.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/convenience-functions.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertInchesToTwip } from \"docx\";\n\nconst twip = convertInchesToTwip(1); // returns 1440\nconst twip = convertInchesToTwip(0.5); // returns 720\n```\n\n----------------------------------------\n\nTITLE: Using String Enums in TypeScript\nDESCRIPTION: Illustrates the correct usage of string enums in TypeScript for the docx project, which is preferred over union types.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/contribution-guidelines.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum WeaponType = {\n    BOW = \"bow\",\n    SWORD = \"sword\",\n    WAND = \"wand\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Upper Limit Expressions in Mathematics\nDESCRIPTION: Example showing how to create expressions with an upper limit, such as overbar.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathLimitUpper({\n    children: [new MathRun(\"x\")],\n    limit: [new MathRun(\"-\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Disabling Inherited Bullet Points for a Paragraph in TypeScript\nDESCRIPTION: Shows how to disable the bullet points that would normally be applied through a paragraph style. Setting numbering to false overrides the style's numbering settings.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/numbering.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew Paragraph({\n    text: \"No bullet points!\",\n    style: \"Bullet\",\n    numbering: false,\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining Types Instead of Interfaces in TypeScript\nDESCRIPTION: Shows the preferred method of defining types using the 'type' keyword instead of interfaces in the docx project.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/contribution-guidelines.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype RelationshipFileInfo = { id: number; target: string };\n```\n\n----------------------------------------\n\nTITLE: Creating Lower Limit Expressions in Mathematics\nDESCRIPTION: Example showing how to create expressions with a lower limit, such as limit notation in calculus.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathLimitLower({\n    children: [new MathRun(\"lim\")],\n    limit: [new MathRun(\"x→0\")],\n}),\n```\n\n----------------------------------------\n\nTITLE: Adding Mail Merge Field Using SimpleField in TypeScript\nDESCRIPTION: This snippet demonstrates an alternative way to add a mail merge field using the SimpleField class. It's equivalent to the previous example but uses the MERGEFIELD field code directly.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/fields.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraph = new Paragraph({\n    children: [new TextRun(\"Your score was \"), new SimpleField(\"MERGEFIELD Score\", \"«Score»\"), new TextRun(\" of 100 points\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Patch Interface Definition in docx Library\nDESCRIPTION: Shows the TypeScript interface definition for a Patch object. A Patch includes a type (either DOCUMENT or PARAGRAPH) and an array of children elements to insert into the document.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/patcher.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Patch {\n    type: PatchType;\n    children: FileChild[] | ParagraphChild[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Text Properties to Deleted Text in docx (TypeScript)\nDESCRIPTION: This example demonstrates how to add text properties like color, bold, and size to a DeletedTextRun in the docx library. It shows that additional text properties can be applied to change-tracked text similarly to normal TextRun instances.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/change-tracking.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paragraph, TextRun, InsertedTextRun, DeletedTextRun } from \"docx\";\n\nconst paragraph = new Paragraph({\n    children: [\n        new TextRun(\"This is a simple demo\"),\n        new DeletedTextRun({\n            text: \"with a deletion.\",\n            color: \"ff0000\",\n            bold: true,\n            size: 24,\n            id: 0,\n            author: \"Firstname Lastname\",\n            date: \"2020-10-06T09:00:00Z\",\n        })\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Curly Brackets in Mathematical Expressions\nDESCRIPTION: Example showing how to enclose a fraction inside curly brackets (braces).\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathCurlyBrackets({\n    children: [\n        new MathFraction({\n            numerator: [new MathRun(\"1\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Applying Typographical Formatting to Symbols in TypeScript\nDESCRIPTION: Demonstrates how to apply formatting like bold and italics to symbol runs. This follows the same formatting pattern used for text runs.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/symbols.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst symbol = new SymbolRun({\n    char: \"F071\",\n    bold: true,\n    italics: true,\n});\n```\n\n----------------------------------------\n\nTITLE: SpecVanish Text\nDESCRIPTION: Shows how to permanently hide text while maintaining paragraph style application.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/text.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = new TextRun({\n    text: \"This text will be hidden forever.\",\n    specVanish: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Low-level DOCX Packer API in TypeScript\nDESCRIPTION: Shows how to use the lower-level Packer.pack method for custom format exports.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nPacker.pack(doc, 'string').then((string) => {\n    console.log(string);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting DOCX with Overrides in TypeScript\nDESCRIPTION: Demonstrates how to use optional arguments for XML indentation control and subfile overrides when exporting a docx document.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst overrides = [{ path: \"word/commentsExtended.xml\", data: \"string_data\" }];\nPacker.toString(doc, true, overrides).then((string) => {\n    console.log(string);\n});\n```\n\n----------------------------------------\n\nTITLE: Converting DOCX to ArrayBuffer in TypeScript\nDESCRIPTION: Demonstrates how to export a docx document to ArrayBuffer, useful for Node.js worker contexts.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/packers.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPacker.toArrayBuffer(doc).then((arrayBuffer) => {\n    port.postMessage(arrayBuffer, [arrayBuffer]);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Symbol Fonts in TypeScript\nDESCRIPTION: Shows how to use a custom font for symbols instead of the default Wingdings font. This example demonstrates using Arial as the symbol font.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/symbols.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst symbol = new SymbolRun({\n    char: \"F071\",\n    symbolfont: \"Arial\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters in TypeScript Classes\nDESCRIPTION: Demonstrates the correct way to implement getters in TypeScript classes for the docx project, using capitalized names.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/contribution-guidelines.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npublic get Level() {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Style Revisions to Text in docx (TypeScript)\nDESCRIPTION: This example illustrates how to express style changes in a TextRun using the revision property. It shows how to include previous style attributes in the revision object to track style changes.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/change-tracking.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew TextRun({\n    bold: true,\n    text: \"This text is now bold and was previously not\",\n    revision: {\n        id: 1,\n        author: \"Firstname Lastname\",\n        date: \"2020-10-06T09:05:00Z\",\n        bold: false,\n    }\n}).break()\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists the supported versions of the project for security updates. It indicates that version 9.0.x is currently supported.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/SECURITY.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 9.0.x   | :white_check_mark: |\n```\n\n----------------------------------------\n\nTITLE: Creating Angled Brackets in Mathematical Expressions\nDESCRIPTION: Example showing how to enclose a fraction inside angled brackets.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/usage/math.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nnew MathAngledBrackets({\n    children: [\n        new MathFraction({\n            numerator: [new MathRun(\"1\")],\n            denominator: [new MathRun(\"2\")],\n        }),\n    ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Reference in TypeScript\nDESCRIPTION: Demonstrates how to include a documentation reference as a comment at the top of a TypeScript file in the docx project.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/contribution-guidelines.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// http://officeopenxml.com/WPdocument.php\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Declarative API Usage in TypeScript\nDESCRIPTION: Illustrates the preferred declarative API style for the docx project, showing how to create a document with sections, paragraphs, and text runs.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/contribution-guidelines.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Document({\n    sections: [{\n        children: [\n            new Paragraph({\n                children: [new TextRun(\"Hello World\")],\n            }),\n        ],\n    }];\n});\n```\n\n----------------------------------------\n\nTITLE: Including XML Schema Reference in TypeScript Comments\nDESCRIPTION: Shows how to add a portion of the XML schema as a comment for cross-reference in TypeScript files.\nSOURCE: https://github.com/dolanmiu/docx/blob/master/docs/contribution-guidelines.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// <xsd:element name=\"tbl\" type=\"CT_Tbl\" minOccurs=\"0\" maxOccurs=\"1\"/>\n```"
  }
]