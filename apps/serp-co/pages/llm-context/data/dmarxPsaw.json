[
  {
    "owner": "dmarx",
    "repo": "psaw",
    "content": "TITLE: Querying submissions with date filtering and field selection\nDESCRIPTION: Shows how to search for submissions in a specific subreddit during a time period, with filtered result fields.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport datetime as dt\n\nstart_epoch=int(dt.datetime(2017, 1, 1).timestamp())\n\nlist(api.search_submissions(after=start_epoch,\n                            subreddit='politics',\n                            filter=['url','author', 'title', 'subreddit'],\n                            limit=10))\n```\n\n----------------------------------------\n\nTITLE: Filtering Submissions by Date, Subreddit, and Fields\nDESCRIPTION: Advanced search that filters submissions by date range and subreddit while specifying which fields to return in the results.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport datetime as dt\n\nstart_epoch=int(dt.datetime(2017, 1, 1).timestamp())\n\nlist(api.search_submissions(after=start_epoch,\n                            subreddit='politics',\n                            filter=['url','author', 'title', 'subreddit'],\n                            limit=10))\n```\n\n----------------------------------------\n\nTITLE: Searching comments with text queries and result limiting\nDESCRIPTION: Shows how to search for comments containing specific text in a subreddit, with a limit on the cached results.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngen = api.search_comments(q='OP', subreddit='askreddit')\n\nmax_response_cache = 1000\ncache = []\n\nfor c in gen:\n    cache.append(c)\n\n    # Omit this test to actually return all results. Wouldn't recommend it though: could take a while, but you do you.\n    if len(cache) >= max_response_cache:\n        break\n\n# If you really want to: pick up where we left off to get the rest of the results.\nif False:\n    for c in gen:\n        cache.append(c)\n```\n\n----------------------------------------\n\nTITLE: Searching Comments with Text Query\nDESCRIPTION: Example of text search in comments with result caching and pagination handling. Demonstrates how to limit results or continue fetching.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngen = api.search_comments(q='OP', subreddit='askreddit')\n\nmax_response_cache = 1000\ncache = []\n\nfor c in gen:\n    cache.append(c)\n\n    # Omit this test to actually return all results. Wouldn't recommend it though: could take a while, but you do you.\n    if len(cache) >= max_response_cache:\n        break\n\n# If you really want to: pick up where we left off to get the rest of the results.\nif False:\n    for c in gen:\n        cache.append(c)\n```\n\n----------------------------------------\n\nTITLE: Converting search results to pandas DataFrame\nDESCRIPTION: Shows how to convert Pushshift API search results to a pandas DataFrame for easier data analysis.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.DataFrame([thing.d_ for thing in gen])\n```\n\n----------------------------------------\n\nTITLE: Converting Results to Pandas DataFrame\nDESCRIPTION: Shows how to collect search results in a pandas DataFrame for further analysis using Python data science tools.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.Dataframe([thing.d_ for thing in gen])\n```\n\n----------------------------------------\n\nTITLE: Retrieving recent submissions from Pushshift\nDESCRIPTION: Example showing how to fetch the 100 most recent submissions using the PushshiftAPI search method.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# The `search_comments` and `search_submissions` methods return generator objects\ngen = api.search_submissions(limit=100)\nresults = list(gen)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Submissions\nDESCRIPTION: Example showing how to search for and retrieve the 100 most recent submissions on Reddit using PSAW.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# The `search_comments` and `search_submissions` methods return generator objects\ngen = api.search_submissions(limit=100)\nresults = list(gen)\n```\n\n----------------------------------------\n\nTITLE: Using the redditor_subreddit_activity convenience method\nDESCRIPTION: Shows how to use a specialized method to profile a Reddit user's activity across different subreddits, counting comments and submissions separately.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napi = PushshiftAPI()\nresult = api.redditor_subreddit_activity('nasa')\nresult\n#{'comment':\n#   Counter({\n#      'ExposurePorn': 1,\n#      'IAmA': 300,\n#      'Mars': 1,\n#      'OldSchoolCool': 1,\n#      'news': 1,\n#      'pics': 1,\n#      'reddit.com': 1,\n#      'space': 6}),\n# 'submission':\n#   Counter({\n#      'IAmA': 3,\n#      'ISS': 1,\n#      'Mars': 1,\n#      'space': 3,\n#      'u_nasa': 86})}\n```\n\n----------------------------------------\n\nTITLE: Using the Redditor Activity Convenience Method\nDESCRIPTION: Shows how to use the redditor_subreddit_activity method to get a summary of a user's activity across different subreddits.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napi = PushshiftAPI()\nresult = api.redditor_subreddit_activity('nasa')\nresult\n#{'comment':\n#   Counter({\n#      'ExposurePorn': 1,\n#      'IAmA': 300,\n#      'Mars': 1,\n#      'OldSchoolCool': 1,\n#      'news': 1,\n#      'pics': 1,\n#      'reddit.com': 1,\n#      'space': 6}),\n# 'submission':\n#   Counter({\n#      'IAmA': 3,\n#      'ISS': 1,\n#      'Mars': 1,\n#      'space': 3,\n#      'u_nasa': 86})}\n```\n\n----------------------------------------\n\nTITLE: Using stop_condition to limit search results\nDESCRIPTION: Demonstrates how to use a custom stop condition function to terminate the search when a specific condition is met.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ngen = api.search_submissions(stop_condition=lambda x: 'bot' in x.author)\n\nfor subm in gen:\n    pass\n\nprint(subm.author)\n```\n\n----------------------------------------\n\nTITLE: Using Stop Condition for Conditional Search\nDESCRIPTION: Demonstrates using a custom stop_condition function to halt the search when a specific condition is met.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ngen = api.search_submissions(stop_condition=lambda x: 'bot' in x.author)\n\nfor subm in gen:\n    pass\n\nprint(subm.author)\n```\n\n----------------------------------------\n\nTITLE: Using aggregation to summarize search results\nDESCRIPTION: Demonstrates how to use the 'aggs' parameter to get summaries of search results, such as counting comment distribution across subreddits.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napi = PushshiftAPI()\ngen = api.search_comments(author='nasa', aggs='subreddit')\nnext(gen)\n#  {'subreddit': [\n#    {'doc_count': 300, 'key': 'IAmA'},\n#    {'doc_count': 6, 'key': 'space'},\n#    {'doc_count': 1, 'key': 'ExposurePorn'},\n#    {'doc_count': 1, 'key': 'Mars'},\n#    {'doc_count': 1, 'key': 'OldSchoolCool'},\n#    {'doc_count': 1, 'key': 'news'},\n#    {'doc_count': 1, 'key': 'pics'},\n#    {'doc_count': 1, 'key': 'reddit.com'}]}\nlen(list(gen)) # 312\n```\n\n----------------------------------------\n\nTITLE: Using Aggregation for Result Summaries\nDESCRIPTION: Demonstrates using the 'aggs' parameter to get statistical summaries of search results without fetching all individual items.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napi = PushshiftAPI()\ngen = api.search_comments(author='nasa', aggs='subreddit')\nnext(gen)\n#  {'subreddit': [\n#    {'doc_count': 300, 'key': 'IAmA'},\n#    {'doc_count': 6, 'key': 'space'},\n#    {'doc_count': 1, 'key': 'ExposurePorn'},\n#    {'doc_count': 1, 'key': 'Mars'},\n#    {'doc_count': 1, 'key': 'OldSchoolCool'},\n#    {'doc_count': 1, 'key': 'news'},\n#    {'doc_count': 1, 'key': 'pics'},\n#    {'doc_count': 1, 'key': 'reddit.com'}]}\nlen(list(gen)) # 312\n```\n\n----------------------------------------\n\nTITLE: Accessing special convenience attributes\nDESCRIPTION: Demonstrates how to access the special convenience attributes like .d_ for dictionary access and metadata from the API response.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ngen = api.search_submissions(subreddit='pushshift')\nthing = next(gen)\n```\n\n----------------------------------------\n\nTITLE: Accessing Special Convenience Attributes\nDESCRIPTION: Demonstrates how to access special attributes like the dict representation of results and metadata from the API response.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ngen = api.search_submissions(subreddit='pushshift')\nthing = next(gen)\n```\n\n----------------------------------------\n\nTITLE: Initializing PushshiftAPI with PRAW integration\nDESCRIPTION: Configuring PushshiftAPI to use PRAW for fetching Reddit objects after retrieving IDs from Pushshift.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport praw\nfrom psaw import PushshiftAPI\n\nr = praw.Reddit(...)\napi = PushshiftAPI(r)\n```\n\n----------------------------------------\n\nTITLE: Integrating PRAW with PushshiftAPI\nDESCRIPTION: Setup for using Pushshift to search for IDs and then PRAW to fetch complete Reddit objects.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport praw\nfrom psaw import PushshiftAPI\n\nr = praw.Reddit(...)\napi = PushshiftAPI(r)\n```\n\n----------------------------------------\n\nTITLE: Initializing PushshiftAPI\nDESCRIPTION: Basic initialization of the PushshiftAPI client for searching Reddit content.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom psaw import PushshiftAPI\n\napi = PushshiftAPI()\n```\n\n----------------------------------------\n\nTITLE: Initializing PushshiftAPI in Python\nDESCRIPTION: Basic initialization of the PushshiftAPI client for searching Reddit data through Pushshift.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom psaw import PushshiftAPI\n\napi = PushshiftAPI()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for PSAW\nDESCRIPTION: Setup for enabling logging in PSAW to see details about API requests and responses for debugging purposes.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport logging \n\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.INFO)\n\nlogger = logging.getLogger('psaw')\nlogger.setLevel(logging.INFO)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Searching submissions by URL\nDESCRIPTION: Example demonstrating how to attempt searching submissions by URL, noting that this particular parameter might not work as expected.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurl = 'http://www.politico.com/story/2017/02/mike-flynn-russia-ties-investigation-235272'\nurl_results = list(api.search_submissions(url=url, limit=500))\n\nlen(url_results), any(r.url == url for r in url_results)\n# 500, False\n```\n\n----------------------------------------\n\nTITLE: Testing Unsupported Search Parameter\nDESCRIPTION: Example demonstrating how to attempt searching submissions by URL, which may not be supported, and checking the results.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurl = 'http://www.politico.com/story/2017/02/mike-flynn-russia-ties-investigation-235272'\nurl_results = list(api.search_submissions(url=url, limit=500))\n\nlen(url_results), any(r.url == url for r in url_results)\n# 500, False\n```\n\n----------------------------------------\n\nTITLE: Installing PSAW with pip\nDESCRIPTION: Command to install the PSAW library using pip package manager.\nSOURCE: https://github.com/dmarx/psaw/blob/master/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install psaw\n```\n\n----------------------------------------\n\nTITLE: Installing PSAW via pip\nDESCRIPTION: Simple installation command for the PSAW package using pip package manager.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install psaw\n```\n\n----------------------------------------\n\nTITLE: Accessing PSAW CLI Help Documentation\nDESCRIPTION: Command to display PSAW command-line interface help documentation and available options.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/index.rst#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npsaw --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Toctree for PSAW\nDESCRIPTION: RST directive for configuring the documentation table of contents, setting a maximum depth of 4 levels and including the psaw module documentation.\nSOURCE: https://github.com/dmarx/psaw/blob/master/docs/source/modules.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   psaw\n```"
  }
]