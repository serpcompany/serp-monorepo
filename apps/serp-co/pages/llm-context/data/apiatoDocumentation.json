[
  {
    "owner": "apiato",
    "repo": "documentation",
    "content": "TITLE: Example Hashed ID in URL Path (HTTP Path)\nDESCRIPTION: Illustrates how a hashed ID appears when passed as a path parameter in an HTTP request URL. Apiato's request decoding feature can automatically decode this segment if configured correctly using `$urlParameters` and `$decode` properties on the Request class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/hash-id.md#_snippet_1\n\nLANGUAGE: HTTP Path\nCODE:\n```\n/items/XbPW7awNkzl83LD6\n```\n\n----------------------------------------\n\nTITLE: Implementing Apiato Action with Multiple Tasks (PHP)\nDESCRIPTION: Example of an Apiato Action class demonstrating how to inject and orchestrate multiple Task dependencies (`DemoATask`, `DemoBTask`) within the `run` method. It shows how to pass parameters to the Tasks and process their potential results.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Actions\\Action as ParentAction;\n\nclass DemoAction extends ParentAction\n{\n    public function __construct(\n        private readonly DemoATask $demoATask,\n        private readonly DemoBTask $demoBTask\n    ) {\n    }\n    \n    public function run($xxx, $yyy, $zzz): void\n    {\n        $foo = $this->demoATask->run($xxx, $yyy);\n        $bar = $this->demoBTask->run($zzz);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Action (CreateAdminAction)\nDESCRIPTION: This code snippet demonstrates the creation of an Action class (`CreateAdminAction`) that extends the base `Action` class in Apiato. It utilizes Tasks (`CreateUserByCredentialsTask` and `AssignUserToRoleTask`) to perform specific operations such as creating a user and assigning a role. The `run` method takes parameters for the user's email, password, name, and a boolean indicating if the user is a client. It returns the created User object.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/actions.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass CreateAdminAction extends Action\n{\n    public function run(string $email, string $password, string $name, bool $isClient = false): User\n    {\n        $admin = app(CreateUserByCredentialsTask::class)->run(\n            $isClient,\n            $email,\n            $password,\n            $name\n        );\n\n        app(AssignUserToRoleTask::class)->run($admin, ['admin']);\n\n        return $admin;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Homestead Host Mappings for Apiato\nDESCRIPTION: Example host file configuration mapping Apiato domains to the Vagrant IP address for local development with Homestead.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n192.168.10.10   apiato.test\n192.168.10.10   api.apiato.test\n192.168.10.10   admin.apiato.test\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Authorization Trait and Using it in an Apiato Request Class in PHP\nDESCRIPTION: Exhibits implementation of a custom authorization trait (IsAuthorPermissionTrait) containing an isAuthor() method, which leverages a Task class to validate user roles. The trait is then applied to a Request class, enabling its use within the authorize() function. Dependencies include the Task class, the trait definition, and trait usage within the target Request. Inputs: authenticated user; Outputs: boolean authorization status. Extensible for more complex policies.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ntrait IsAuthorPermissionTrait\n{\n    public function isAuthor()\n    {\n        // The task needs to be implemented properly!\n        return app(CheckIfUserHasProperRoleTask::class)->run($this->user(), ['author']);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass FindUserByIdRequest extends Request\n{\n    use IsAuthorPermissionTrait;\n\n    // ...\n\n    public function authorize(): bool\n    {\n        return $this->check([\n            'isAuthor',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic API Controller in Apiato (PHP)\nDESCRIPTION: Shows a sample PHP class for an API Controller. It must extend `App\\Ship\\Parents\\Controllers\\ApiController`, injects a specific request object (`RegisterUserRequest`), calls the `run` method of an Action (`RegisterUserAction`) passing the request, and uses the `transform` helper to format the response using a specified `UserTransformer`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Controller extends ApiController\n{\n    public function registerUser(RegisterUserRequest $request)\n    {\n        $user = app(RegisterUserAction::class)->run($request);\n        return $this->transform($user, UserTransformer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using mapInput with apiato Request (PHP)\nDESCRIPTION: Demonstrates how to use the `mapInput` helper method on an apiato request object. It takes an associative array where keys are the current field paths (dot notation) and values are the desired new field paths. This modifies the request's internal data for streamlined processing by subsequent tasks or actions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$request->mapInput([\n    'data.name' => 'data.username',\n]);\n```\n\n----------------------------------------\n\nTITLE: Request Validation Rules for User Registration - PHP\nDESCRIPTION: This snippet provides a practical example of defining validation rules within a Request class (RegisterUserRequest). Multiple form fields (email, password, name) have constraints such as required, email format, uniqueness, min/max length, etc. Used with Laravel's automatic validation. Requires App\\Ship\\Parents\\Requests\\Request (aliased as ParentRequest).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Requests\\Request as ParentRequest;\n\nclass RegisterUserRequest extends ParentRequest\n{\n    public function rules(): array\n    {\n        return [\n            'email'    => 'required|email|max:200|unique:users,email',\n            'password' => 'required|min:20|max:300',\n            'name'     => ['required', 'min:2', 'max:400'],\n        ];\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato via Composer\nDESCRIPTION: Creates a new Apiato project using Composer. Requires PHP and Composer to be installed on the system.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project apiato/apiato my-api\n```\n\n----------------------------------------\n\nTITLE: Using getHashedKey method in PHP for Apiato\nDESCRIPTION: This snippet demonstrates how to use the getHashedKey() method on a user model to return a hashed ID, whether the hashing feature is enabled or not. This method should be used whenever returning an ID, especially from transformers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/hash-id.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'id' => $user->getHashedKey(),\n```\n\n----------------------------------------\n\nTITLE: Defining an Apiato Request Class with Access, Validation, and Authorization in PHP\nDESCRIPTION: This snippet demonstrates how to define an Apiato Request class by extending from the base Request parent. It sets custom properties for roles, permissions, and validation logic, specifying the authorization and validation rules for updating a user. Dependencies include extending \\App\\Ship\\Parents\\Requests\\Request. The rules() method returns an array of field validation rules, while the authorize() method checks if the user has access. Expected input includes the request data (email, password, name), and outputs are validated or authorized status. Override and constraints depend on project requirements for access.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UpdateUserRequest extends Request\n{\n    protected array $access = [\n        'permission' => '',\n        'roles'      => 'admin',\n    ];\n\n    protected array $decode = [\n\n    ];\n\n    protected array $urlParameters = [\n\n    ];\n\n    public function rules(): array\n    {\n        return [\n            'email'    => 'email|unique:users,email',\n            'password' => 'min:100|max:200',\n            'name'     => 'min:300|max:400',\n        ];\n    }\n\n    public function authorize(): bool\n    {\n        return $this->check([\n            'hasAccess',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 Token Request Example (shell)\nDESCRIPTION: This `curl` command simulates a POST request to the OAuth token endpoint to retrieve an access token. It includes parameters like `username`, `password`, `client_id`, `client_secret`, and `grant_type`.  It demonstrates how to send user credentials and client credentials via `x-www-form-urlencoded` to the `/oauth/token` endpoint to obtain the access token.  This method is suitable for first-party clients and uses the password grant type.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/oauth/token \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'username=admin%40admin.com&password=admin&client_id=2&client_secret=SGUVv02b1ppQCgI7ZVeoTZDN6z8SSFLYiMOzzfiE&grant_type=password&scope='\n```\n\n----------------------------------------\n\nTITLE: Defining Item Transformer with Includes in PHP\nDESCRIPTION: This code defines an `ItemTransformer` class that extends `Transformer`. It uses `availableIncludes` and `defaultIncludes` to specify related data, such as images and roles, to be included in the API response. The `transform()` method formats the main item data and conditionally includes admin-specific information using the `ifAdmin` helper function. Dependencies include the `Transformer` base class and related transformer classes (e.g., `ItemImageTransformer`, `RoleTransformer`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/transformers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass ItemTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'images',\n    ];\n\n    protected $defaultIncludes = [\n        'roles',\n    ];\n\n    public function transform(Item $item)\n    {\n        $response = [\n            'object'      => $item->getResourceKey(),\n            'id'          => $item->getHashedKey(),\n            'name'        => $item->name,\n            'description' => $item->description,\n            'price'       => (float)$item->price,\n            'weight'      => (float)$item->weight,\n            'created_at'  => $item->created_at,\n            'updated_at'  => $item->updated_at,\n            'readable_created_at' => $item->created_at->diffForHumans(),\n            'readable_updated_at' => $item->updated_at->diffForHumans(),\n        ];\n\n        // add more or modify data for Admins only\n        $response = $this->ifAdmin([\n            'real_id'    => $item->id,\n            'deleted_at' => $item->deleted_at,\n        ], $response);\n\n        return $response;\n    }\n\n    public function includeImages(Item $item)\n    {\n        return $this->collection($item->images, new ItemImageTransformer());\n    }\n\n    public function includeRoles(User $user)\n    {\n        return $this->collection($user->roles, new RoleTransformer());\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Login Fields in Apiato Authentication Configuration (PHP)\nDESCRIPTION: Modifies the appSection-authentication config file to allow users to log in with multiple identifiers such as email or phone. Dependencies: Place this PHP snippet in App\\Containers\\AppSection\\Authentication\\Configs\\appSection-authentication. The 'login.fields' parameter accepts one or more fields, each with associated validation rules, enhancing flexibility for user authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'login' => [\n    'fields' => [\n        'email' => ['email'],\n        'phone' => ['string', 'min:6', 'max:25'],\n    ],\n],\n\n```\n\n----------------------------------------\n\nTITLE: Protecting Web Routes Using auth:web Middleware - PHP Laravel Route\nDESCRIPTION: Example route definition using Laravel's web authentication middleware to restrict access to authenticated users only. The 'auth:web' middleware redirects unauthenticated users to a configured login page. The login page route can be changed in the appSection-authentication.php config file via the 'login-page-url' parameter.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('private/page', [Controller::class, 'showPrivatePage'])\n    ->middleware('auth:web');\n```\n\n----------------------------------------\n\nTITLE: Using Request in Controller\nDESCRIPTION: This code shows how to use the defined request in a controller method.  The `RegisterUserRequest` is type hinted as a parameter, triggering the validation rules defined in the request object. The validated data is then passed to an action and the result is transformed using a transformer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    public function registerUser(RegisterUserRequest $request)\n    {\n        $user = app(RegisterUserAction::class)->run($request);\n        return $this->transform($user, UserTransformer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Apiato Transformer with Multiple Available Includes (PHP)\nDESCRIPTION: Example of a `UserTransformer` configured to allow inclusion of `roles` (a collection) and `avatar` (a single item) relationships upon request. It defines both relationships in `$availableIncludes` and provides the corresponding `includeRoles` and `includeAvatar` methods.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected array $availableIncludes = [\n    'roles',\n    'avatar',\n];\n\npublic function includeRoles(User $user): Collection\n{\n    return $this->collection($user->roles, new RoleTransformer());\n}\n\npublic function includeAvatar(User $user): Item\n{\n    return $this->item($user->avatar, new AvatarTransformer());\n}\n```\n\n----------------------------------------\n\nTITLE: Reward ItemTransformer class with included relations\nDESCRIPTION: Defines a Transformer class for the Item model, extending from a base Transformer, with specified default and available includes. Implements a transform() method to shape the response data, and includes methods to include related images and roles. Incorporates admin-specific data modification.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Item\\UI\\API\\Transformers;\n\nuse App\\Containers\\Item\\Models\\Item;\nuse App\\Ship\\Parents\\Transformers\\Transformer;\n\nclass ItemTransformer extends Transformer\n{\n\n    protected $availableIncludes = [\n        'images',\n    ];\n\n    protected $defaultIncludes = [\n        'roles',\n    ];\n\n    public function transform(Item $item)\n    {\n        $response = [\n            'object'      => 'Item',\n            'id'          => $item->getHashedKey(),\n            'name'        => $item->name,\n            'description' => $item->description,\n            'price'       => (float)$item->price,\n            'weight'      => (float)$item->weight,\n            'created_at'  => $item->created_at,\n            'updated_at'  => $item->updated_at,\n        ];\n\n        // add more or modify data for Admins only\n        $response = $this->ifAdmin([\n            'real_id'    => $user->id,\n            'deleted_at' => $user->deleted_at,\n        ], $response);\n\n        return $response;\n    }\n\n    public function includeImages(Item $item)\n    {\n        return $this->collection($item->images, new ItemImageTransformer());\n    }\n\n    public function includeRoles(User $user)\n    {\n        return $this->collection($user->roles, new RoleTransformer());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending ApiController for User Registration with Transformation (PHP)\nDESCRIPTION: This snippet shows how an API controller in Apiato extends ApiController to handle user registration. It calls an action's run method by passing the HTTP request object, uses Laravel's service container to instantiate the action, and transforms the result with a dedicated transformer. Requires RegisterUserRequest, RegisterUserAction, and UserTransformer. Expects a custom request object as input and returns a transformed user resource as a JSON response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/controllers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Controller extends ApiController\n{\n    public function registerUser(RegisterUserRequest $request)\n    {\n        $user = app(RegisterUserAction::class)->run($request);\n        return $this->transform($user, UserTransformer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transformer in Controller PHP\nDESCRIPTION: This code snippet demonstrates the usage of a transformer from within a controller to transform a user object.  It takes a user object and transforms it using `UserTransformer::class`.  It requires the `UserTransformer` class, and the `getUser()` method is assumed to be available in the controller. The expected output is a transformed user object in the API response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/transformers.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $this->getUser();\n\n$this->transform($user, UserTransformer::class);\n\n// more options are available\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Data from Apiato Request PHP\nDESCRIPTION: This snippet shows how to retrieve input data from an Apiato Request object within an Action's `run()` method (or similar service layer). It uses standard Laravel Request methods like `all()`, accessing properties directly (`$request->name`), or using `input()`. This is done after validation and authorization have passed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function run(CreateAdminRequest $request)\n{\n    $data = $updateUserRequest->all();\n    $name = $updateUserRequest->name;\n    $name = $updateUserRequest->input('name');\n    // etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading relationships via availableIncludes in Transformer (front-end inclusion)\nDESCRIPTION: Defines a Transformer with a list of available includes to specify related data that can be requested via API query parameters. Includes methods to include related tags and user data. The front-end can request these relationships by adding the 'include' query parameter in the API call.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Account\\UI\\API\\Transformers;\n\nuse App\\Ship\\Parents\\Transformers\\Transformer;\nuse App\\Containers\\Account\\Models\\Account;\nuse App\\Containers\\Tag\\Transformers\\TagTransformer;\nuse App\\Containers\\User\\Transformers\\UserTransformer;\n\nclass AccountTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'tags',\n        'user',\n    ];\n\n    public function transform(Account $account)\n    {\n        return [\n            'id'       => (int)$account->id,\n            'url'      => $account->url,\n            'username' => $account->username,\n            'secret'   => $account->secret,\n            'note'     => $account->note,\n        ];\n    }\n\n    public function includeTags(Account $account)\n    {\n        return $this->collection($account->tags, new TagTransformer());\n    }\n\n    public function includeUser(Account $account)\n    {\n        return $this->item($account->user, new UserTransformer());\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Protecting API Endpoint with auth:api\nDESCRIPTION: This snippet demonstrates how to protect an API endpoint using the `auth:api` middleware in Laravel. The middleware ensures that only authenticated users, possessing a valid access token, can access the specified route. It uses Laravel's `Route` facade to define a GET route that calls a controller method and applies the middleware. This example is based on Laravel Passport package.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('secret/info', [Controller::class, 'getSecretInfo'])\n    ->middleware('auth:api');\n```\n\n----------------------------------------\n\nTITLE: Using the 'transform' Response Helper in Apiato Controllers (PHP)\nDESCRIPTION: Demonstrates using the `transform` helper function, available in Apiato controllers via `ResponseTrait.php`. It accepts data (object or collection) and a transformer class as required parameters to structure the API response. Optional parameters allow specifying includes and injecting metadata.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// $user is a User Object\nreturn $this->transform($user, UserTransformer::class);\n\n// $orders is a Collection of Order Objects\nreturn $this->transform($orders, OrderTransformer::class, ['products', 'recipients', 'store', 'invoice']);\n```\n\n----------------------------------------\n\nTITLE: Initializing Apiato Project with Composer (Bash)\nDESCRIPTION: This snippet demonstrates using Composer, a PHP dependency manager, to create a new Apiato project in the terminal. It requires Composer to be installed on the system. Running this command downloads all necessary files and dependencies to initialize a fresh Apiato project named 'example-app'.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project apiato/apiato example-app\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Resource Key on an Apiato Model (PHP)\nDESCRIPTION: Shows two methods for customizing the resource key string used to identify the object type in JSON responses for a model. You can either set the protected `$resourceKey` property or override the public `getResourceKey` method within the model class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass User extends ParentUserModel\n{\n    protected $resourceKey = 'User';\n    // or\n    public function getResourceKey(): string\n    {\n        return 'User';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Fields Validation Error Response\nDESCRIPTION: An example of a JSON response when multiple fields fail validation.  Similar to the single field example, it contains a \"message\" and an \"errors\" key, but now includes errors for both \"email\" and \"password\" fields.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/validation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ],\n    \"password\": [\n      \"The password field is required.\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Class (Apiato/Porto) - PHP\nDESCRIPTION: Demonstrates how to create a custom exception class by extending the base `Exception` class provided by the Apiato/Porto framework. It shows how to set default `code` and `message` properties that represent the HTTP status code and a user-friendly message for the exception.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/exceptions.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass DemoException extends Exception\n{\n    public $code = Response::HTTP_CONFLICT;\n    public $message = 'This is a demo exception.';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tasks within an Action in Apiato (PHP)\nDESCRIPTION: This PHP snippet demonstrates the usage of several injected Tasks within a single Action class, following Apiato's dependency injection pattern. The Action's constructor accepts Tasks for validating confirmation codes, finding users by ID, and confirming user emails. The run method orchestrates these Tasks by validating the code, fetching the user, and confirming the email sequentially, illustrating modular task composition in application logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/tasks.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Email\\Actions;\n\nuse App\\Containers\\Email\\Tasks\\ConfirmUserEmailTask;\nuse App\\Containers\\Email\\Tasks\\ValidateConfirmationCodeTask;\nuse App\\Containers\\User\\Tasks\\FindUserByIdTask;\nuse App\\Ship\\Parents\\Actions\\Action;\n\nclass ValidateUserEmailByConfirmationCodeAction extends Action\n{\n    private $validateConfirmationCodeTask;\n\n    private $findUserByIdTask;\n\n    private $confirmUserEmailTask;\n\n    public function __construct(\n        ValidateConfirmationCodeTask $validateConfirmationCodeTask,\n        FindUserByIdTask $findUserByIdTask,\n        ConfirmUserEmailTask $confirmUserEmailTask\n    ) {\n        $this->validateConfirmationCodeTask = $validateConfirmationCodeTask;\n        $this->findUserByIdTask = $findUserByIdTask;\n        $this->confirmUserEmailTask = $confirmUserEmailTask;\n    }\n\n    public function run($userId, $code)\n    {\n        $this->validateConfirmationCodeTask->run($userId, $code);\n        $user = $this->findUserByIdTask->run($userId);\n        $this->confirmUserEmailTask->run($user);\n        ...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Route Post Method V2 (PHP)\nDESCRIPTION: This example shows another POST route definition for the same '/orders' path, but illustrates versioning. By placing this code in a file like 'CreateOrder.v2.public.php', it maps the v2 endpoint to a potentially different controller ('AnotherCreateOrderController::class'), demonstrating how APIato handles different versions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/routes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('orders', AnotherCreateOrderController::class);\n```\n\n----------------------------------------\n\nTITLE: Paginating API Results Using the Page Query Parameter\nDESCRIPTION: Shows how to request paginated data by specifying the page number with the ?page= parameter in GET requests for listing endpoints. The response includes a meta object containing pagination details such as total results, count, per_page, current_page, total_pages, and links to previous pages. Pagination handling uses the standard Laravel Paginator.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?page=200\n```\n\n----------------------------------------\n\nTITLE: Defining a Protected GET Route with Middleware in Laravel (PHP)\nDESCRIPTION: This snippet shows how to define a GET route in Laravel that is protected by authentication middleware. The route responds to 'users' endpoint requests and delegates them to the 'listAllUsers' method on the Controller class, only allowing authenticated API users to access this endpoint. Laravel's routing system and the 'auth:api' middleware are required dependencies. Input is an HTTP GET request from authenticated clients, and the output is provided by the controller method. Ensure the middleware is properly configured in the Laravel app for this to work.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/routes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', [Controller::class, 'listAllUsers'])\n    ->middleware(['auth:api']);\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules in Apiato Request (PHP)\nDESCRIPTION: Illustrates how to define validation rules within an Apiato Request class. The `rules()` method returns an array where keys are field names and values are Laravel validation rule strings. This example sets rules for email, password, and name fields for a user registration request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/validation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass RegisterUserRequest extends Request\n{\n    /**\n     * @return  array\n     */\n    public function rules()\n    {\n        return [\n            'email'    => 'required|email|max:200|unique:users,email',\n            'password' => 'required|min:20|max:300',\n            'name'     => 'required|min:2|max:400',\n        ];\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting a Password Grant Token (JSON Payload)\nDESCRIPTION: Defines the structure of a JSON request payload to obtain an access token via the OAuth2 password grant endpoint. Requires parameters such as grant_type (set to 'password'), client_id, client_secret, username, password, and optionally scope. Expected output is a JSON containing access_token and refresh_token; fields must match those configured in your Passport client.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"grant_type\": \"password\", // should always be \"password\"\n  \"client_id\": \"client-id\", // required\n  \"client_secret\": \"client-secret\", // required\n  \"username\": \"john@doe.com\",\n  \"password\": \"secret\",\n  \"scope\": \"\" // can be empty\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample User Registration Response Body - JSON\nDESCRIPTION: This JSON response illustrates the structure of the API's reply after a successful user registration. It includes user attributes, timestamps, and associated meta information. Applications integrating with Apiato can use this data to confirm registration, capture user IDs, and process meta relationships like roles.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"7VgmkMw7rR2pWO5j\",\n    \"name\": \"John Doe\",\n    \"email\": \"John@Doe.me\",\n    \"email_verified_at\": null,\n    \"gender\": null,\n    \"birth\": null,\n    \"created_at\": \"2021-04-12T13:33:24.000000Z\",\n    \"updated_at\": \"2021-04-12T13:33:24.000000Z\",\n    \"readable_created_at\": \"1 second ago\",\n    \"readable_updated_at\": \"1 second ago\"\n  },\n  \"meta\": {\n    \"include\": [\n      \"roles\"\n    ],\n    \"custom\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Social Auth Container via Composer in Laravel (Bash)\nDESCRIPTION: Installs the apiato/social-auth-container package to enable social authentication features in an Apiato/Laravel project. Requires composer as a dependency. Run this command at the root of your Laravel project. No input parameters are needed. After installation, further setup such as migrations and configuration is required.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/social-authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require apiato/social-auth-container\n```\n\n----------------------------------------\n\nTITLE: Generate Apiato Repository (Artisan)\nDESCRIPTION: Use the `apiato:generate:repository` Artisan command to interactively create a new repository class within the correct Apiato container structure, simplifying setup and adhering to conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:repository\n```\n\n----------------------------------------\n\nTITLE: Set Default Includes from Backend PHP\nDESCRIPTION: This snippet shows how to set default includes dynamically from the controller. This is used in conjunction with the `transform` helper function to transform a collection of rewards using `ProductsTransformer::class`. Dependencies include the `ProductsTransformer` and the `transform` function. This approach is useful for defining which relationships to include in every response of this transformer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/transformers.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn $this->transform($rewards, ProductsTransformer::class)->setDefaultIncludes(['tags']);\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a Basic Transporter in a Controller (PHP)\nDESCRIPTION: Demonstrates the basic usage of a `DataTransporter` within a controller. It's instantiated with data from the `$request` object, optionally populated with additional data (like `bearerToken`), and then passed to an Action using `Apiato::call`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$dataTransporter = new DataTransporter($request);\n$dataTransporter->bearerToken = $request->bearerToken();\n\nApiato::call('Authentication@ApiLogoutAction', [$dataTransporter]);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Apiato Task (PHP)\nDESCRIPTION: Provides a basic example of an Apiato Task class implementation. The class must extend `App\\Ship\\Parents\\Tasks\\Task` (typically aliased as `ParentTask`) and implements its business logic within the `run` method or other methods called by `run`. This example shows a simple task that adds two integers.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/tasks.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Tasks\\Task as ParentTask;\n\nclass DemoTask extends ParentTask\n{\n    public function run(int $a, int $b): int\n    {\n        return $a + $b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database in Environment File (Bash)\nDESCRIPTION: This snippet shows the environment variables required to configure a MySQL database connection for Apiato in the .env file. It includes parameters for the DB connection type, host, port, database name, username, and password. Properly setting these variables enables the application to connect to the MySQL database server for data persistence.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=your_database_name\nDB_USERNAME=your_username\nDB_PASSWORD=your_password\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response\nDESCRIPTION: This shows how to use the `json` method to return a JSON response in Apiato. The method accepts an array of data that will be represented as JSON.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$this->json($data)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authorization Trait PHP\nDESCRIPTION: This snippet demonstrates creating a custom PHP Trait (`IsAuthorPermissionTrait`) to encapsulate specific authorization logic. The trait contains a method (`isAuthor`) which can then be reused across multiple Request classes. The example `isAuthor` method calls a hypothetical Task to perform the actual check.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ntrait IsAuthorPermissionTrait\n{\n    public function isAuthor()\n    {\n        // The task needs to be implemented properly!\n        return app(CheckIfUserHasProperRoleTask::class)->run($this->user(), ['author']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Google OAuth Server Response Including Social Data (JSON)\nDESCRIPTION: Demonstrates the format of a server response after a successful social login via Google using Apiato, including main user data and social authentication fields. The response features a data object (user and social information) and a meta object indicating included relationships and access tokens. Some URLs are escaped per JSON standard. Actual fields may differ based on the transformer's configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/social-authentication.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        // user data\n        .\n        .\n        .\n        // additional social data if you have updated your transformer as mentioned above\n        \"social_auth_provider\": \"google\",\n        \"social_id\": \"113834952367767922133\",\n        \"social_avatar\": {\n            \"avatar\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\",\n            \"original\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\"\n        }\n    },\n    \"meta\": {\n        \"include\": [\n            \"roles\"\n        ],\n        \"custom\": {\n            \"token_type\": \"personal\",\n            \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9....\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action from Controller (deleteUser)\nDESCRIPTION: This code snippet demonstrates how an Action (`DeleteUserAction`) is used within a Controller method (`deleteUser`). The Controller receives a `DeleteUserRequest`, which is then passed to the `run` method of the `DeleteUserAction`. The result of the Action is used to return a deleted response via the `$this->deleted()` method.  This promotes reusability of the Action across different Controller contexts (Web, Api, Cli).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/actions.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function deleteUser(DeleteUserRequest $request)\n{\n    $user = app(DeleteUserAction::class)->run($request);\n    return $this->deleted($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Endpoint with Permission\nDESCRIPTION: This PHP snippet demonstrates how to protect an endpoint (e.g., delete user) by checking for a specific permission ('delete-users') within a request class. It utilizes Apiato's authorization system to control access based on user permissions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteUserRequest extends Request\n{\n    protected array $access = [\n        'permissions' => 'delete-users',\n        'roles' => '',\n    ];\n\n    public function authorize(): bool\n    {\n        return $this->check([\n            'hasAccess',\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using React Components in Markdown with MDX\nDESCRIPTION: This snippet demonstrates how to use React components inside Markdown documents using MDX. A `Highlight` component is defined and then used within the Markdown content to highlight text with different background colors.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/markdown-features.mdx#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: 'red',\n      padding: '0.2rem',\n    }}>\n    {children}\n  </span>\n);\n\n<Highlight color=\"#25c2a0\">Docusaurus green</Highlight> and <Highlight color=\"#1877F2\">Facebook blue</Highlight> are my favorite colors.\n```\n\n----------------------------------------\n\nTITLE: Requesting OAuth2 Tokens via Password Grant (JSON)\nDESCRIPTION: Shows the JSON payload for a POST request to the standard `/oauth/token` endpoint to obtain access and refresh tokens using the password grant type. Requires `grant_type` ('password'), `client_id`, `client_secret`, `username` (user's login identifier), and `password`. The `scope` parameter is optional.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n  \"grant_type\": \"password\", // should always be \"password\"\n  \"client_id\": \"client-id\", // required\n  \"client_secret\": \"client-secret\", // required\n  \"username\": \"john@doe.com\",\n  \"password\": \"secret\",\n  \"scope\": \"\" // can be empty\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Criteria in PHP\nDESCRIPTION: This PHP code defines a shared Criteria class named `OrderByCreationDateDescendingCriteria`.  This class is designed to order database results by their creation date in descending order. It requires the `PrettusRepositoryInterface` for interaction with the repository and the model to which the criteria is applied. The `apply` method is overridden to apply the ordering.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/criterias.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass OrderByCreationDateDescendingCriteria extends Criteria\n{\n    public function apply($model, PrettusRepositoryInterface $repository)\n    {\n        return $model->orderBy('created_at', 'desc');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting an Apiato Request Object into a Laravel Controller Method in PHP\nDESCRIPTION: Illustrates how to inject an Apiato Request object (e.g., UpdateUserRequest) directly into a controller's method signature. By passing the request class as a parameter, validation and authorization rules are automatically applied. The controller can then perform logic or pass the request object to actions. This requires a properly defined Request class and controller wiring. Inputs are supplied in the HTTP request; output is the properly validated data received in the controller method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function updateUser(UpdateUserRequest $updateUserRequest)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apiato Supported Languages (PHP)\nDESCRIPTION: This PHP code snippet defines the array of supported languages and their optional regional variants within the `localization.php` configuration file. It is located at `app/Containers/Localization/Configs/localization.php` and is used by the framework to validate requested languages, preventing requests for locales not listed here.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/localization.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n    'supported_languages' => [\n        'ar',\n        'en' => [\n            'en-GB',\n            'en-US',\n        ],\n        'es',\n        'fr',\n    ],\n```\n\n----------------------------------------\n\nTITLE: Controller Usage for Single Item Response with Transformer\nDESCRIPTION: Demonstrates how to retrieve a user model, apply a transformer, and generate different response types such as single item, collection, or array response. Utilizes methods like response->item(), response->collection(), and response->array() for various data formats.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// getting any Model\n$user = $this->getUser();\n\n// building the response with the transformer of the Model\n$this->response->item($user, new UserTransformer());\n\n// in case of collection of data\n$this->response->collection($user, new UserTransformer());\n\n// in case of Array\n$this->response->array([\n    'custom_field'  =>  'whatever',\n    'email'         =>  $user->email,\n]);\n\n// more options are available\n\n```\n\n----------------------------------------\n\nTITLE: Getting Decoded Input with getInputByKey - Apiato Request - PHP\nDESCRIPTION: Illustrates the usage of the `getInputByKey` helper method to retrieve data from the request. Crucially, this method returns the *decoded* value for fields that were specified in the `$decode` property, unlike standard Laravel input methods.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$request->getInputByKey('id')\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token using OAuth 2.0 (cURL)\nDESCRIPTION: This snippet shows how to obtain an access token using cURL by sending a POST request to the `/oauth/token` endpoint. It includes example data with username, password, client ID, client secret, and the grant type.  Requires client ID and secret for the app, and user credentials.  The response contains the access and refresh tokens. Ensure correct values are used for the client ID and secret.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/oauth/token \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'username=admin%40admin.com&password=admin&client_id=2&client_secret=SGUVv02b1ppQCgI7ZVeoTZDN6z8SSFLYiMOzzfiE&grant_type=password&scope='\n\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Debugger Container in Shell\nDESCRIPTION: Installs the Apiato debugger container which provides middleware to monitor all HTTP requests to the application. Requires composer package manager to run the installation command in the project root. This setup is typically included by default in fresh Apiato installations.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/debugger.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/debugger-container\n```\n\n----------------------------------------\n\nTITLE: Defining a Location Value Object in Apiato with PHP\nDESCRIPTION: This PHP snippet defines a simple Value Object named Location. It extends the base Value class, accepting latitude and longitude as float parameters in its constructor. Requires the base Value class (App\\Ship\\Parents\\Values\\Value), and is designed to be used for immutable geometric data representation, compatible with Laravel attribute casting when used in Eloquent models. Inputs are float values for latitude and longitude; the class holds data without additional behavior or persistence.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/values.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Location extends Value\n{\n    public function __construct(\n        public float $latitude,\n        public float $longitude,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Endpoint for User Login (PHP)\nDESCRIPTION: This snippet defines a Laravel route that maps a POST request for 'login' to the loginUser method on a controller. It leverages the controller-action mapping convention. Required dependencies include the Controller class and appropriate method definition. Expects HTTP POST data conforming to the endpoint specification. Returns the result produced by the controller's loginUser method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/controllers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('login', [Controller::class, 'loginUser']);\n```\n\n----------------------------------------\n\nTITLE: Running Database Seeders Using Artisan Command (Shell)\nDESCRIPTION: This shell snippet illustrates the standard Laravel Artisan command `php artisan db:seed`, which executes all registered seeder classes to populate the application database with seed data. The command requires Laravel's command-line interface and appropriate seeder configurations in the project. No parameters are required by default, and successful execution will result in the database being populated according to the defined seeders. Users must ensure all migrations are up to date and seeders are properly registered.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/seeders.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Defining Demo Model in apiato (PHP)\nDESCRIPTION: This PHP snippet defines an Eloquent Model named `Demo` according to apiato conventions. It extends the required base `Model` class, specifies the database table, defines mass assignable (`$fillable`) and hidden (`$hidden`) attributes, configures attribute casting (`$casts`), lists date attributes (`$dates`), and establishes a `belongsTo` relationship with a `User` model residing in a different container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/models.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Demo extends Model\n{\n    protected $table = 'demos';\n\n    protected $fillable = [\n        'label',\n        'user_id'\n    ];\n\n    protected $hidden = [\n        'token',\n    ];\n\n    protected $casts = [\n        'total_credits'     => 'float',\n    ];\n\n    protected $dates = [\n        'created_at',\n        'updated_at',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(\\App\\Containers\\AppSection\\User\\Models\\User::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering API Response Fields using filter Parameter (URL)\nDESCRIPTION: Example showing how to limit the fields included in an API response using the `?filter=` query parameter. Specify the desired field names separated by semicolons (`;`). This filtering applies to the main resource object as well as any included relationship objects.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\napi.domain.test/endpoint?filter=id;status\n```\n\n----------------------------------------\n\nTITLE: Starting Docker containers with Laradock\nDESCRIPTION: Launches the required Docker containers (nginx, mysql, redis, beanstalkd) for running Apiato with Laradock.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d nginx mysql redis beanstalkd\n```\n\n----------------------------------------\n\nTITLE: Including Nested Relationships (URL)\nDESCRIPTION: Example showing how to include nested relationships using dot notation within the `?include=` parameter (e.g., `driver.address` includes the 'driver' relationship, and within that, the 'address' relationship). This requires the respective relationships ('driver' in the parent transformer, 'address' in the driver's transformer) to be defined and available for inclusion.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_17\n\nLANGUAGE: http\nCODE:\n```\n?include=driver,driver.address\n```\n\n----------------------------------------\n\nTITLE: Protecting Endpoint Authorization using Apiato Request (PHP)\nDESCRIPTION: Illustrates how to protect an API endpoint by defining required permissions and roles within the `$access` property of an Apiato Request class. The `authorize()` method checks these requirements using the built-in `hasAccess` helper.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteUserRequest extends Request\n{\n    protected array $access = [\n        'permissions' => 'delete-users',\n        'roles' => '',\n    ];\n\n    public function authorize(): bool\n    {\n        return this->check([\n            'hasAccess',\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Error Response\nDESCRIPTION: This JSON shows the example response of an exception.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/exceptions.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"The exception error message.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\",\n      \"Another not translated message\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Multiple Tasks in Action (PHP)\nDESCRIPTION: This code demonstrates how to call multiple Tasks within an Action. The `DemoAction`'s `run` method calls `Sample111Task` and `Sample222Task` with different parameters. The tasks are resolved from the service container using `app()`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/actions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass DemoAction extends Action\n{\n    public function run($xxx, $yyy, $zzz)\n    {\n        $foo = app(Sample111Task::class)->run($xxx, $yyy);\n        $bar = app(Sample222Task::class)->run($zzz);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Apiato project using Composer\nDESCRIPTION: This command creates a new Apiato project named 'example-app' using the `apiato/apiato` package from Composer. It downloads the necessary files and sets up the basic project structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer create-project apiato/apiato example-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Action in Apiato (PHP)\nDESCRIPTION: Demonstrates a basic `SayHelloAction` class extending Apiato's `Action`. The `run` method contains the core business logic, in this case, simply returning the string 'Hello World!'. Actions encapsulate specific tasks or business logic units.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/samples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SayHelloAction extends Action\n{\n\tpublic function run()\n\t{\n\t    return 'Hello World!';\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Criteria Accepting Data Input - Filter by User ID - PHP\nDESCRIPTION: Defines a Criteria class that accepts input data (a user ID) via its constructor. The class stores this data and uses it within the 'apply' method to add a 'where' condition to the query builder, filtering results based on the specified user ID.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/criterias.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Ship\\Features\\Criterias\\Eloquent;\n\nuse App\\Ship\\Parents\\Criterias\\Criteria;\nuse Prettus\\Repository\\Contracts\\RepositoryInterface as PrettusRepositoryInterface;\n\nclass ThisUserCriteria extends Criteria\n{\n\n    private $userId;\n\n    public function __construct($userId)\n    {\n        $this->userId = $userId;\n    }\n\n    public function apply($model, PrettusRepositoryInterface $repository)\n    {\n        return $model->where('user_id', '=', $this->userId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting API Endpoints with Laravel Passport Middleware\nDESCRIPTION: Defines how to secure API routes using the 'auth:api' middleware provided by Laravel Passport. The route example demonstrates applying the middleware to restrict access to authenticated users with a valid access token. This middleware depends on the Laravel Passport package for handling OAuth 2.0 tokens.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::get('secret/info', [Controller::class, 'getSecretInfo'])\n    ->middleware('auth:api');\n```\n\n----------------------------------------\n\nTITLE: Creating Permissions Seeder in Apiato PHP\nDESCRIPTION: This PHP snippet defines a Seeder class inside an Apiato container to seed permissions related to orders. It uses the Apiato facade to call tasks that create individual permissions such as approving, finding, listing, updating, and deleting orders. The class extends the base Seeder class and organizes permission seeding into one coherent operation. This seeder depends on the Apiato framework and the Authorization container's CreatePermissionTask. It is expected to be placed under the proper container directory to be auto-loaded and may include seeding for multiple models within the same class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/seeders.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Order\\Data\\Seeders;\n\nuse App\\Ship\\Parents\\Seeders\\Seeder;\nuse Apiato\\Core\\Foundation\\Facades\\Apiato;\n\nclass OrderPermissionsSeeder_1 extends Seeder\n{\n\n    public function run()\n    {\n        Apiato::call('Authorization@CreatePermissionTask', ['approve-reject-orders']);\n        Apiato::call('Authorization@CreatePermissionTask', ['find-orders']);\n        Apiato::call('Authorization@CreatePermissionTask', ['list-orders']);\n        Apiato::call('Authorization@CreatePermissionTask', ['update-orders']);\n        Apiato::call('Authorization@CreatePermissionTask', ['delete-orders']);\n\n        // ...\n\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Grant Client in Laravel Passport (Shell)\nDESCRIPTION: Runs the Artisan command to create a new Passport OAuth2 client supporting Password Grant authentication, required for issuing access tokens with user credentials. Execute from the Laravel project root; only a configured Laravel Passport installation is needed. Outputs a new client ID and secret used in subsequent token requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:client --password\n\n```\n\n----------------------------------------\n\nTITLE: Setting UI Context on an Action in Apiato (PHP)\nDESCRIPTION: Demonstrates how to explicitly set the User Interface context (e.g., 'Web') on an Action instance using the `setUI()` method before executing it with `run()`. This allows Actions to tailor their behavior based on the calling UI type (API, Web, CLI).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\napp(WebLogoutAction::class)->setUI('Web')->run();\n```\n\n----------------------------------------\n\nTITLE: Example Sorting & Ordering Query Parameters for API Requests\nDESCRIPTION: These parameter examples show how to apply sorting and ordering in API GET requests. The ?orderBy= parameter specifies the field used to order results, and ?sortedBy= defines ascending ('asc') or descending ('desc') order. By default, ordering is ascending. These parameters are interpreted by the L5 Repository package in Laravel to sort query results accordingly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n?orderBy=id&sortedBy=asc\n```\n\nLANGUAGE: shell\nCODE:\n```\n?orderBy=created_at&sortedBy=desc\n?orderBy=name&sortedBy=asc\n```\n\n----------------------------------------\n\nTITLE: Accessing Mail Template Views using Apiato Naming Convention in PHP\nDESCRIPTION: This PHP snippet shows how to access a mail template view using Apiato's naming convention which combines camelCase Section name, '@', and camelCase Container name followed by the template name. The example accesses the 'user-registered' blade template located in the User container within the AppSection section. This syntax is used typically in the build method of mail classes to specify the email content template. Inputs are the section and container names; output is the resolved view.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/mails.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->view('appSection@user::user-registered');\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Passport for Authentication (Bash)\nDESCRIPTION: This command installs Laravel Passport components necessary for secure OAuth2 authentication. It generates encryption keys and sets up clients for personal access tokens and password grants. This installation is essential for enabling Apiato's authentication mechanisms.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan passport:install\n```\n\n----------------------------------------\n\nTITLE: Single Field Validation Error Response\nDESCRIPTION: An example of a JSON response when a single field fails validation. The \"message\" key describes the error, and the \"errors\" key provides details about the specific field(s) that failed validation and the associated error messages.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/validation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Settings via Class - PHP\nDESCRIPTION: This code snippet shows how to retrieve a setting value by creating a dedicated class for that setting. It assumes a corresponding task `findWhateverSettingsTask` exists, which handles the settings retrieval. This approach is suggested when the settings have a more complex logic. It relies on the APIATO framework's structure, specifically a custom task to retrieve the settings.  The output is the value associated with that setting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/system-settings.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$value = $this->findWhateverSettingsTask->run();\n```\n\n----------------------------------------\n\nTITLE: Naming API Endpoint Files for Versioning in Apiato (PHP)\nDESCRIPTION: This snippet describes the convention for naming route files to specify API versions in Apiato. By following the filename pattern `{endpoint}.{version}.{documentation}.php`, developers can create versioned endpoints that are automatically accessible via versioned URLs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/api-versioning.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nMakeOrder.v1.public.php\nMakeOrder.v2.public.php\nListOrders.v1.private.php\n```\n\n----------------------------------------\n\nTITLE: Applying Data-Driven Criteria from Task - Filter by User ID - PHP\nDESCRIPTION: Illustrates how to pass data from an apiato Task to a Criteria that accepts input. It shows instantiating 'ThisUserCriteria' with the user's ID obtained from the Task's input and pushing it onto the 'accountRepository' to filter the accounts by that user ID.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/criterias.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function run($user)\n{\n    $this->accountRepository->pushCriteria(new ThisUserCriteria($user->id));\n\n    $accounts = $this->accountRepository->paginate();\n\n    return $accounts;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrong Client ID or Secret Response (JSON)\nDESCRIPTION: This JSON response is provided when the client authentication fails, usually due to invalid client ID or secret. It provides an error code, description and a message.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Client authentication failed\",\n  \"message\": \"Client authentication failed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Apiato Action (PHP)\nDESCRIPTION: Example of an Apiato Action class (`DemoAction`) extending `App\\Ship\\Parents\\Actions\\Action`. It demonstrates injecting a single Task (`DemoTask`) via the constructor and calling its `run` method within the action's own `run` method, accepting a `DemoRequest`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Actions\\Action as ParentAction;\n\nclass DemoAction extends ParentAction\n{\n    public function __construct(\n        private readonly DemoTask $demoTask\n    ) {\n    }\n\n    public function run(DemoRequest $request)\n    {\n        return $this->demoTask->run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Criteria - Order By Creation Date Descending - PHP\nDESCRIPTION: Defines a reusable Criteria class for ordering query results by the 'created_at' column in descending order. It extends the base Apiato Criteria and implements the 'apply' method to modify the Eloquent model query builder with the desired ordering condition.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/criterias.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Ship\\Features\\Criterias\\Eloquent;\n\nuse App\\Ship\\Parents\\Criterias\\Criteria;\nuse Prettus\\Repository\\Contracts\\RepositoryInterface as PrettusRepositoryInterface;\n\nclass OrderByCreationDateDescendingCriteria extends Criteria\n{\n    public function apply($model, PrettusRepositoryInterface $repository)\n    {\n        return $model->orderBy('created_at', 'desc');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using a Request Class in a Controller - PHP\nDESCRIPTION: Shows how a Request class such as RegisterUserRequest is typehinted into a controller's __invoke method. When invoked, Laravel/Apiato automatically validates the request data before this method is executed. Upon successful validation, the action class is called and the transformed user data is returned. Dependencies: RegisterUserRequest, RegisterUserAction, UserTransformer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function __invoke(RegisterUserRequest $request)\n{\n    $user = app(RegisterUserAction::class)->run($request);\n    \n    return $this->transform($user, UserTransformer::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control on Endpoints via Request Properties - PHP\nDESCRIPTION: Demonstrates how to specify required roles and permissions via the $access property in a Request class, and how to enforce access control in the authorize method by calling hasAccess. This allows granular endpoint-level authorization checks. Requires ParentRequest and a hasAccess implementation backing permission logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRequest extends ParentRequest\n{\n    protected array $access = [\n        'permissions' => 'delete-users',\n        'roles' => 'manager'\n    ];\n\n    public function authorize(): bool\n    {\n        return $this->hasAccess();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Data Structure from Sanitizing Request - PHP\nDESCRIPTION: Shows the associative array structure after calling sanitizeInput in the example scenario. Fields not included in the sanitizeInput argument or absent in the request are omitted from the result. Demonstrates Laravel's type normalization (e.g., empty string to null) and proper nesting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"data\" => [\n    \"description\" => \"Some description\"\n    \"is_private\" => false,\n    \"address\" => null, // empty string is converted to null by Laravel\n    \"foo\" => [\n      \"number\" => 1,\n    ]\n  ],\n  \"meta\" => \"some meta data\",\n]\n```\n\n----------------------------------------\n\nTITLE: Transforming Item Data in PHP\nDESCRIPTION: This code snippet demonstrates a transformer for the `Item` model.  It defines available and default includes for related data, transforms the item data into a specific format for the API response, including handling admin-specific data with the `ifAdmin` helper function.  Dependencies include the `Transformer` class and the models like `Item`. The output is a formatted array of item data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/transformers.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass ItemTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'images',\n    ];\n\n    protected $defaultIncludes = [\n        'roles',\n    ];\n\n    public function transform(Item $item)\n    {\n        $response = [\n            'object'      => $item->getResourceKey(),\n            'id'          => $item->getHashedKey(),\n            'name'        => $item->name,\n            'description' => $item->description,\n            'price'       => (float)$item->price,\n            'weight'      => (float)$item->weight,\n            'created_at'  => $item->created_at,\n            'updated_at'  => $item->updated_at,\n            'readable_created_at' => $item->created_at->diffForHumans(),\n            'readable_updated_at' => $item->updated_at->diffForHumans(),\n        ];\n\n        // add more or modify data for Admins only\n        $response = $this->ifAdmin([\n            'real_id'    => $item->id,\n            'deleted_at' => $item->deleted_at,\n        ], $response);\n\n        return $response;\n    }\n\n    public function includeImages(Item $item)\n    {\n        return $this->collection($item->images, new ItemImageTransformer());\n    }\n\n    public function includeRoles(User $user)\n    {\n        return $this->collection($user->roles, new RoleTransformer());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Calls in Apiato Tests Using makeCall() Helper in PHP\nDESCRIPTION: The makeCall() method is a core helper that performs HTTP requests against the defined API endpoints within tests. It accepts optional arrays for data payload and HTTP headers. This snippet showcases various usages including default calls, authenticated calls with data, custom headers, changing endpoints dynamically, disabling authentication, and injecting URL parameters. makeCall() integrates with the test class properties and Apiato's testing infrastructure to simplify API request generation and automate user authorization headers if required.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tests-helpers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->makeCall();\n\n$response = $this->makeCall([\n    'email'    => $userDetails['email'],\n    'password' => $userDetails['password'],\n]);\n\n$response = $this->makeCall($data, $headers);\n\n$response = $this->endpoint('get@register')->makeCall();\n\n$response = $this->auth(false)->makeCall();\n\n$response = $this->endpoint('get@item/{id}')->injectId($user->id)->makeCall();\n```\n\n----------------------------------------\n\nTITLE: Basic Unit Testing for Actions with Request Object in PHP\nDESCRIPTION: Shows how to create a test request object with injected data for unit testing Actions in Apiato, simulating a user registration process.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'email'    => 'john@doe.test',\n    'name'     => 'John Doe',\n    'password' => 'so-secret',\n];\n\n// create request object with some data\n$request = RegisterUserRequest::injectData($data);\n\n// create instance of the Action\n$action = app(RegisterUserAction::class)->run($request);\n\n// do any kind of assertions..\n$this->assertInstanceOf(User::class, $user);\n```\n\n----------------------------------------\n\nTITLE: Defining an Action Method Accepting a Request Object in PHP\nDESCRIPTION: Defines an Action's `run` method signature that type-hints a `Request` object. This allows passing the raw HTTP request directly to the Action.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// if you have the following function signature\npublic function run(Request $data)\n```\n\n----------------------------------------\n\nTITLE: Defining a Global PHP Helper Function\nDESCRIPTION: This PHP snippet demonstrates how to define a global helper function named 'add' that takes two integers as input and returns their sum. The function is defined only if it does not already exist to prevent redeclaration errors. It requires PHP 7+ for type declarations and can be placed inside helper files that are autoloaded by the Apiato framework, making the function available throughout the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/helpers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (!function_exists('add')) {\n    function add(int $firstNumber, int $secondNumber): int\n    {\n        return $firstNumber + $secondNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Model Hash ID in Apiato (PHP)\nDESCRIPTION: Demonstrates the use of the `getHashedKey()` method on an Apiato Model instance (`$user`) to retrieve its ID. This method automatically returns the hashed ID if the feature is enabled, or the raw ID otherwise, ensuring consistency. It's commonly used in transformers when preparing data for API responses.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/hash-id.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'id' => $user->getHashedKey(),\n```\n\n----------------------------------------\n\nTITLE: Using getInputByKey for Decoded Request Fields - PHP\nDESCRIPTION: Demonstrates retrieving a decoded value from the request using getInputByKey, compared to default input behavior. Allows specifying a default value for absent keys, which enhances robustness in request handling for APIs using obfuscated or transformed identifiers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$request->getInputByKey('data.name', 'Undefined')\n```\n\n----------------------------------------\n\nTITLE: Defining a Location Value Object PHP\nDESCRIPTION: This PHP code defines a `Location` Value Object extending the `Value` class.  It takes latitude and longitude as constructor parameters (both floats) and stores them as public properties. This is a basic example showing how to define a value object to encapsulate location data. It extends the `Value` class to indicate it as a Value Object, and contains the definition of two public properties, latitude and longitude.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/values.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Location extends Value\n{\n    public function __construct(\n        public float $latitude,\n        public float $longitude,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Queue Driver in Laravel\nDESCRIPTION: This snippet checks if the default queue driver in the Laravel application is set to 'database'. If it is, a specific action (commented out as 'do something') will be performed. This is part of Apiato's integration with Laravel's queue system, detecting which driver is being used to create the relevant migration files in case of a database queue driver. The `Config` facade is used to access the queue configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/tasks-queuing.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif (Config::get(\"queue.default\") == \"database\")\n{\n   // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining default and available includes in Transformer (relation inclusion)\nDESCRIPTION: Shows how to declare availableIncludes and defaultIncludes properties in a Transformer to specify which related data can be included, and which should be included automatically. Required to call corresponding include methods like includeUser() and includeTags().\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nprotected $availableIncludes = [\n    'users',\n];\n\nprotected $defaultIncludes = [\n    'tags',\n];\n\n// ..\n\n```\n\n----------------------------------------\n\nTITLE: Adding New Auth Provider to Config - PHP\nDESCRIPTION: Shows how to add a new, custom social authentication provider to the `vendor-socialAuth` configuration file. This registers the new provider for use within the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/social-authentication.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'providers' => [\n    ...\n    'something' => Location\\Of\\Your\\Provider\\SomthingSocialAuthProvider::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Notification (Shell)\nDESCRIPTION: This command interactively generates a new notification class within the Apiato framework. It prompts for necessary information and ensures the generated class extends the required parent Notification class, following Apiato's conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/notifications.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:generate:notification\n```\n\n----------------------------------------\n\nTITLE: Installing Social Authentication Container - Shell\nDESCRIPTION: Installs the apiato/social-auth-container package via Composer. This is the first step in setting up social authentication in your Apiato application.  After installing the package, run the migrations to create the necessary database tables.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/social-authentication.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/social-auth-container\n```\n\n----------------------------------------\n\nTITLE: Defining a Laravel Job Class in PHP\nDESCRIPTION: This PHP snippet defines a Job class named DemoJob extending the base Job class, meant for deferred execution within Laravel's queue system. It requires passing an array of data to the constructor that is stored in a private property. The handle method iterates over the data to perform the desired task. This class relies on inheriting from App\\Ship\\Parents\\Jobs\\Job and is designed to be queued and processed asynchronously by Laravel's queue worker.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/jobs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass DemoJob extends Job\n{\n    private $something;\n\n    public function __construct(array $someData)\n    {\n        $this->something = $someData;\n    }\n\n    public function handle()\n    {\n        foreach ($this->something as $thing) {\n            // do whatever you like\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing an Exception with Validation Errors (Apiato/Porto) - PHP\nDESCRIPTION: Shows how to associate validation or application-specific errors with a thrown exception using the `withErrors()` method. This method accepts an associative array mapping field names to error messages, which can be single strings, arrays of strings, or localization keys for automatic translation. This is useful for returning detailed error feedback to the client.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/exceptions.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nthrow (new AccountFailedException())->withErrors(['email' => 'Email already in use']);\n```\n\nLANGUAGE: PHP\nCODE:\n```\nthrow (new AccountFailedException())->withErrors(['email' => ['Email already in use', 'Another message']]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// translation strings are automatically translated if the translations are found.\nthrow (new AccountFailedException())->withErrors(['email' => 'appSection@user::exceptions.email-taken']);\n```\n\n----------------------------------------\n\nTITLE: Defining Eloquent Model in Porto Framework (PHP)\nDESCRIPTION: This snippet demonstrates how to define an Eloquent Model (`Demo`) within the Porto architecture. It extends the base `Model` class, specifies the database table, defines mass assignable and hidden attributes, configures attribute casting, lists date fields for automatic Carbon conversion, and defines a Eloquent relationship to another Model (`User`) located in a different Container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/models.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Demo extends Model\n{\n    protected $table = 'demos';\n\n    protected $fillable = [\n        'label',\n        'user_id'\n    ];\n\n    protected $hidden = [\n        'token',\n    ];\n\n    protected $casts = [\n        'total_credits'     => 'float',\n    ];\n\n    protected $dates = [\n        'created_at',\n        'updated_at',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(\\\\App\\\\Containers\\\\AppSection\\\\User\\\\Models\\\\User::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Multiple Tasks in an Action (DemoAction)\nDESCRIPTION: This code snippet illustrates how an Action class (`DemoAction`) can call multiple Tasks sequentially.  The `run` method accepts parameters and invokes `Sample111Task` and `Sample222Task` using the `app()` helper function to resolve the Task instances from the service container. Each Task's `run` method is then called with the appropriate parameters.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/actions.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass DemoAction extends Action\n{\n    public function run($xxx, $yyy, $zzz)\n    {\n        $foo = app(Sample111Task::class)->run($xxx, $yyy);\n        $bar = app(Sample222Task::class)->run($zzz);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using transform Helper Function PHP\nDESCRIPTION: Demonstrates how to use the `transform` helper function from `ResponseTrait` to serialize data using a Transformer class. It shows examples for transforming a single object and a collection of objects, including optionally specifying relationship includes to be returned by the transformer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/controllers.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// $user is a User Object\nreturn $this->transform($user, UserTransformer::class);\n\n// $orders is a Collection of Order Objects\nreturn $this->transform($orders, OrderTransformer::class, ['products', 'recipients', 'store', 'invoice']);\n```\n\n----------------------------------------\n\nTITLE: Protecting API Endpoint with Permissions in PHP Request Class\nDESCRIPTION: This PHP code snippet demonstrates how to secure an API endpoint by requiring specific permissions using APIato's Request class. It specifies access control based on the 'delete-users' permission and includes an authorize method to enforce access checks.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authorization.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass DeleteUserRequest extends Request\n{\n\n    /**\n     * Define which Roles and/or Permissions has access to this request.\n     *\n     * @var  array\n     */\n    protected $access = [\n        'permissions' => 'delete-users', // Accepts Array and String ['delete-users', 'create-users'],\n        'roles'       => '',\n    ];\n\n\n    /**\n     * @return  bool\n     */\n    public function authorize()\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Included Relationships via URL (Shell)\nDESCRIPTION: Shows how to request multiple available relationships (`roles`, `avatar`) simultaneously by listing them separated by commas in the `include` query parameter.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\napi.apiato.test/v1/users?include=roles,avatar\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control with the $access Property and Custom Authorization in Apiato Request Class in PHP\nDESCRIPTION: Demonstrates usage of the $access property to specify required roles and permissions and the authorize() function to enforce access via a custom check. Shows both pipe-delimited and array-based notation for roles and permissions. This setup is essential for endpoint security, relying on internal helper methods like hasAccess or custom user-defined logic such as isOwner. Inputs: authenticated user, request object. Outputs: boolean value indicating authorization. Requires proper role/permission infrastructure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteUserRequest extends Request\n{\n    protected array $access = [\n        'permission' => 'delete-users|another-permissions',\n        'roles' => 'manager'\n    ];\n\n    public function authorize(): bool\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n            'isKing',\n        ]);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected $access = [\n        'permission' => ['delete-users', 'another-permissions'],\n        'roles' => ['manager'],\n];\n```\n\n----------------------------------------\n\nTITLE: Helper function: ifAdmin()\nDESCRIPTION: Checks if the current user has admin privileges; if so, merges additional admin-specific data into the response. Otherwise, returns the normal response. Useful for conditionally including sensitive or admin-only information.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nifAdmin($adminResponse, $clientResponse)\n```\n\n----------------------------------------\n\nTITLE: Receiving Registration Response Data - Apiato - JSON\nDESCRIPTION: This JSON snippet illustrates the typical structure of a successful user registration response from the '/register' endpoint. It includes a 'data' object containing user information (object type, id, email, and other optional attributes) as well as a 'meta' object with lists for included resources and custom metadata. Clients should parse both top-level keys to access relevant user data post-registration.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/registration.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"XbPW7awNkzl83LD6\",\n    \"name\": null,\n    \"email\": \"john@doe.com\",\n    \"email_verified_at\": null,\n    \"gender\": null,\n    \"birth\": null\n  },\n  \"meta\": {\n    \"include\": [\n        \"roles\",\n        \"permissions\"\n    ],\n    \"custom\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Helper function: user()\nDESCRIPTION: Returns the current authenticated user object within a Transformer, allowing access to user data in transformation logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuser()\n```\n\n----------------------------------------\n\nTITLE: Example JSON for mapInput Demonstration\nDESCRIPTION: A simple JSON structure used to demonstrate how the mapInput helper method can remap field names from one structure to another.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\" : {\n\t\t\"name\" : \"John Doe\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Hashed IDs with $decode - Apiato Request - PHP\nDESCRIPTION: Explains and demonstrates the use of the `$decode` property to automatically decode specified Hashed IDs from the request payload. This is crucial for validating decoded IDs using rules like `exists:table,id`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRequest extends ParentRequest\n{\n    protected array $decode = [\n        'user_id',\n        'item_id',\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Includes in Transformers (availableIncludes, defaultIncludes) PHP\nDESCRIPTION: This code snippet demonstrates how to define available and default includes within a Transformer class in PHP.  `$availableIncludes` specifies includes that can be requested via query parameters, while `$defaultIncludes` are always included in the response.  The snippet shows arrays containing strings representing the names of relationships to be included.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/query-parameters.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n    protected $availableIncludes = [\n        'products',\n        'store',\n        'recipients',\n    ];\n\n    protected $defaultIncludes = [\n        'invoice',\n    ];\n```\n\n----------------------------------------\n\nTITLE: Registering AuthServiceProvider in MainServiceProvider\nDESCRIPTION: Example showing how to register the AuthServiceProvider in the container's MainServiceProvider to ensure it gets loaded by the framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/policies.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Providers\\MainServiceProvider as ParentMainServiceProvider;\n\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    protected array $serviceProviders = [\n        AuthServiceProvider::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database in Apiato\nDESCRIPTION: Command to seed the database with initial data including a Super User with admin role and necessary permissions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Accessing Views from a PHP Web Controller\nDESCRIPTION: PHP code sample showing how to return a view from a controller method using the view() helper function.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/views.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Controller extends WebController\n{\n    public function sayWelcome()\n    {\n        return view('just-welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Exception in Apiato with PHP\nDESCRIPTION: Defines a container-specific Exception class 'AccountFailedException' in the User container by extending Apiato's base Exception class. It sets HTTP status code to 409 Conflict, a user-friendly message, and an internal error code. Used to represent failure scenarios during user account creation. Requires Symfony HTTP Foundation Response for status constants. Inputs include no constructor parameters; outputs are properties defining the error details.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AccountFailedException extends Exception\n{\n    public $httpStatusCode = Response::HTTP_CONFLICT;\n\n    public $message = 'Failed creating new User.';\n    \n    public $code = 4711;\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing a Basic Custom Exception (Apiato/Porto) - PHP\nDESCRIPTION: Illustrates the standard way to throw an instance of a custom exception class defined within the Apiato/Porto framework. This is the simplest form of using a custom exception without any additional context or modifications.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/exceptions.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nthrow new AccountFailedException();\n```\n\n----------------------------------------\n\nTITLE: Mapping Input Fields in Request - PHP\nDESCRIPTION: This code snippet demonstrates how to use the `mapInput` method to remap input fields in a request. It redefines the `data.name` field to `username`. This is helpful for adjusting request data to match the expected format for processing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$request->mapInput([\n    'data.name' => 'username',\n]);\n```\n\n----------------------------------------\n\nTITLE: Requesting Nested Included Relationships via URL (Shell)\nDESCRIPTION: Explains how to request nested relationships using dot notation in the `include` query parameter. `include=avatar,avatar.image` requests the `avatar` relationship and also the `image` relationship nested within the `avatar`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\napi.apiato.test/v1/users?include=avatar,avatar.image\n```\n\n----------------------------------------\n\nTITLE: Defining Basic User Response Payload Using Fractal DataArraySerializer in JSON\nDESCRIPTION: This code snippet demonstrates the structure of a basic API response when using the DataArraySerializer as configured in Apiato. The output JSON contains a 'data' object wrapping the actual resource payload, here representing a user object with properties 'object', 'id', and 'name'. No pagination or meta information is included in this minimal example. It assumes Fractal and DataArraySerializer are installed and configured as the default serializer in 'app/Ship/Configs/fractal.php'.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/transformers.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"XbPW7awNkzl83LD6\",\n    \"name\": \"Mohammad Alavi\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Criterias to a Repository in PHP\nDESCRIPTION: This code snippet shows how to apply multiple criteria to a UserRepository using the `pushCriteria` method. It applies both `IsNullCriteria` to filter by null email values and `OrderByNameCriteria` to order the results by name, before paginating the data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/criterias.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function run()\n{\n    $this->repository->pushCriteria(new IsNullCriteria('email'));\n    $this->repository->pushCriteria(OrderByNameCriteria::class);\n    return $this->repository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: created Method Usage\nDESCRIPTION: This code demonstrates the `created` method, which returns a response with a 201 status code, typically indicating successful resource creation. It takes data as input to be returned in the response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->created($data)\n```\n\n----------------------------------------\n\nTITLE: Paginate Repository Results (Apiato PHP)\nDESCRIPTION: Retrieve paginated results from a repository using the `paginate()` method. This method automatically processes `page` and `limit` query parameters from the request context, returning a paginated data structure useful for listing collections in APIs.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n{\n    $this->userRepository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: Create Admin Action Sample in Apiato (PHP)\nDESCRIPTION: This code defines an Action to create an admin user. It uses Tasks to create the user with credentials and assign the 'admin' role. The `run` method takes email, password, name, and an optional isClient flag as input, and returns the created User object. It depends on `CreateUserByCredentialsTask` and `AssignUserToRoleTask`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/actions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CreateAdminAction extends Action\n{\n    public function run(string $email, string $password, string $name, bool $isClient = false): User\n    {\n        $admin = app(CreateUserByCredentialsTask::class)->run(\n            $isClient,\n            $email,\n            $password,\n            $name\n        );\n\n        app(AssignUserToRoleTask::class)->run($admin, ['admin']);\n\n        return $admin;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating URL Parameters with $urlParameters - Apiato Request - PHP\nDESCRIPTION: Shows how to enable validation for parameters embedded directly in the URL path using the `$urlParameters` property. It requires listing the parameter names in the array and defining corresponding rules in the `rules()` method.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// URL: /stores/{id}/items\n// GET /stores/999/items\nclass DemoRequest extends ParentRequest\n{\n    protected array $urlParameters = [\n        'id',\n    ];\n\n    public function rules(): array\n    {\n        return [\n            'id'   => 'integer', // url parameter\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Repositories in Apiato\nDESCRIPTION: Shows the recommended folder structure for organizing repositories within the Apiato framework. Repositories should be placed in the Data/Repositories directory of their container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/repositories.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - Data\n                - Repositories\n                    - UserRepository.php\n                    - ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Business Logic in APIato Action PHP\nDESCRIPTION: Defines a simple Action class extending `Action`. The `run` method encapsulates the core business logic, which in this basic example is returning the string 'Hello World!'. Actions are typically invoked by controllers or other actions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/samples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SayHelloAction extends Action\n{\n\tpublic function run()\n\t{\n\t    return 'Hello World!';\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tasks from Action: Validate and Confirm Email - PHP\nDESCRIPTION: This snippet shows the usage of Tasks from an Action. The `ValidateUserEmailByConfirmationCodeAction` class demonstrates how to call `ValidateConfirmationCodeTask`, `FindUserByIdTask`, and `ConfirmUserEmailTask`. It showcases dependency injection via the `app()` helper. The `run` method takes `userId` and `code` as input, validating the code, finding the user, and then confirming their email. This demonstrates how different tasks can be orchestrated by an Action.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/tasks.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass ValidateUserEmailByConfirmationCodeAction extends Action\n{\n    public function run($userId, $code)\n    {\n        app(ValidateConfirmationCodeTask::class)->run($userId, $code);\n        $user = app(FindUserByIdTask::class)->run($userId);\n        app(ConfirmUserEmailTask::class)->run($user);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant virtual machine\nDESCRIPTION: Launches and provisions the Vagrant virtual machine for running Apiato with Homestead.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nhomestead up --provision\n```\n\n----------------------------------------\n\nTITLE: Registering Container EventServiceProvider (php)\nDESCRIPTION: Illustrates the necessary step of registering the container's `EventServiceProvider` by adding its class name to the `$serviceProviders` array in the container's `MainServiceProvider`. This ensures the event service provider is loaded and processed by the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/events.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Providers\\MainServiceProvider as ParentMainServiceProvider;\n\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    protected array $serviceProviders = [\n        EventServiceProvider::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Folder Structure in Apiato\nDESCRIPTION: Illustration of the folder structure for policies in Apiato, highlighting the policy registration point in the AuthServiceProvider.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/policies.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            ├── Policies\n            │   ├── UserPolicy.php\n            │   └── ...\n            └── Providers\n                // highlight-start\n                ├── AuthServiceProvider.php\n                // highlight-end\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Migration - PHP\nDESCRIPTION: This PHP code defines a migration to create a `users` table in the database. It uses the Laravel's Schema builder to define the table's structure, including columns such as `id`, `name`, `email`, `password`, `rememberToken`, `timestamps`, and `softDeletes`. The `up()` method defines the table creation, and the `down()` method defines how to drop the table.  Dependencies include Laravel's database components and the `Schema` facade.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/migrations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nclass CreateUsersTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->string('password');\n            $table->rememberToken();\n            $table->timestamps();\n            $table->softDeletes();\n        });\n    }\n\n    public function down()\n    {\n        Schema::drop('users');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Input Check Example - Laravel - PHP\nDESCRIPTION: Provides a basic example of how one might traditionally check for the presence of nested input data using standard Laravel request methods. This is used to illustrate the verbosity that the `sanitizeInput` method aims to reduce.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif ($request->has('data.name')) {\n   $data['name'] = $request->input('data.name');\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Bronze Sponsors List using HTML iframe\nDESCRIPTION: This HTML iframe embeds the Bronze Sponsors list dynamically from Open Collective. It displays sponsor avatars as an SVG fetched from the specified `src` URL, configured with parameters like `avatarHeight`, `width`, `format`, `button`, and `background`. The `style` attribute sets `border: none` and a specific background color.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/introduction.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://opencollective.com/apiato/tiers/bronze-sponsors.svg?avatarHeight=65&width=800&format=svg&button=false&background=#171923\"\n  width=\"800\"\n  height=\"300\"\n  style={{ border: 'none', backgroundColor: '#171923' }}>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Criteria Accepting Data Input in PHP\nDESCRIPTION: This PHP code defines a Criteria class named `ThisUserCriteria` that accepts data as input. The `userId` is passed through the constructor and used in the `apply` method to filter the model by the user ID. This allows for dynamic query building based on the provided `userId`. It depends on `PrettusRepositoryInterface` for the repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/criterias.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ThisUserCriteria extends Criteria\n{\n    private $userId;\n\n    public function __construct($userId)\n    {\n        $this->userId = $userId;\n    }\n\n    public function apply($model, PrettusRepositoryInterface $repository)\n    {\n        return $model->where('user_id', '=', $this->userId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing an Apiato Request Object to an Action in PHP\nDESCRIPTION: Shows how to pass a validated Apiato Request object from a controller method to an Action's run() method, enabling reuse of request data and pre-validated input. This pattern promotes separation of concerns between controller and business logic layers. Prerequisites: the Request and Action classes must both exist and be properly configured. Input is the request object, and output depends on the action's logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function createAdmin(CreateAdminRequest $request)\n{\n    $admin = app(CreateAdminAction::class)->run($request);\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Register Request Body Example\nDESCRIPTION: Illustrates the JSON payload expected by the `/register` endpoint. It includes the `email` and `password` fields required for creating a new user account.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/registration.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"gandalg@the.grey\",\n  \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Apiato API Routes with auth:api Middleware (PHP)\nDESCRIPTION: Demonstrates applying the `auth:api` middleware to a Laravel route definition within Apiato. This middleware ensures that the specified API endpoint requires a valid OAuth2 Bearer token in the `Authorization` header for access.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('secret/info', Controller::class)\n    ->middleware('auth:api');\n```\n\n----------------------------------------\n\nTITLE: Using json Helper Function PHP\nDESCRIPTION: Illustrates the use of the `json` helper function to return a simple array of data directly as a JSON response. This function is useful for endpoints that don't require complex data transformation via a Transformer and simply need to return arbitrary key-value data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/controllers.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nreturn $this->json([\n    'foo': 'bar'\n]);\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Exception Message when Throwing in Apiato with PHP\nDESCRIPTION: Illustrates overriding the default message of an Exception by passing a custom message string to the constructor during throw. This allows dynamic error messages to be displayed to the user instead of the preset property.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nthrow new AccountFailedException('I am the message to be displayed for the user');\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Apiato Magical Call Facade in PHP\nDESCRIPTION: Shows the minimal pattern to invoke an Action or Task using the static Apiato::call method. This requires specifying the 'Container@ActionOrTask' identifier. Works in any PHP/Laravel code where Apiato Facade is accessible. Requires the container and Action/Task to exist; returns the output of the run method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/magical-call.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$foo = \\Apiato\\Core\\Foundation\\Facades\\Apiato::call('Container@ActionOrTask');\n```\n\n----------------------------------------\n\nTITLE: noContent Method Usage\nDESCRIPTION: This code shows the usage of the `noContent` method, which allows a response with a `204` status code to be returned, indicating that the request was successful, but there is no content to send back.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$this->noContent()\n```\n\n----------------------------------------\n\nTITLE: Example composer.json for Installing a Container in Apiato\nDESCRIPTION: This JSON snippet illustrates a typical composer.json requirement for including an Apiato container in a project. Including this configuration allows Composer to download and install the specified container package into the project.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/readme.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"require\": {\n    \"apiato/some-container\": \"^2.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Resources with Query Parameters - RESTful API - bash\nDESCRIPTION: Shows how to search for resources by specifying query parameters in the HTTP GET request. Dependencies include support for filtering on the server side. The 'search' parameter enables filtering by fields such as maker or color. The endpoint returns matching resources according to the provided criteria.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars?search=maker:mercedes\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars?search=maker:mercedes;color:white\n```\n\n----------------------------------------\n\nTITLE: Defining a Protected API GET Route with Middleware in PHP\nDESCRIPTION: This snippet illustrates defining a protected GET route for an API, typically within a private API route file (e.g., `ListUsers.v1.private.php`). It maps the `users` endpoint to the `listAllUsers` method of a controller and applies the `api.auth` middleware to ensure only authenticated users can access it via the `$router`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/routes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$router->get('users', [\n    'uses'       => 'Controller@listAllUsers',\n    'middleware' => [\n        'api.auth',\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Available and Default Includes in PHP Transformer Classes\nDESCRIPTION: PHP snippet illustrating how to define included relationships in a transformer class using the protected arrays $availableIncludes and $defaultIncludes. $availableIncludes specifies optional relationships that can be included based on request parameters, while $defaultIncludes defines relationships included by default without explicit request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    protected $availableIncludes = [\n        'products',\n        'store',\n        'recipients',\n    ];\n\n    protected $defaultIncludes = [\n        'invoice',\n    ];\n```\n\n----------------------------------------\n\nTITLE: Using injectData for Request Testing\nDESCRIPTION: Shows how to inject data directly into a request object, useful for testing scenarios when you need to provide data without sending it through the request body.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$request = RegisterUserRequest::injectData($data);\n```\n\n----------------------------------------\n\nTITLE: Defining an API Route for a Controller Action in Laravel/Apiato (PHP)\nDESCRIPTION: Example of defining a POST route within Laravel's routing system (used by Apiato). It maps the HTTP POST request on the '/login' URI to the `loginUser` method within the specified `Controller` class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('login', [Controller::class, 'loginUser']);\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules in Request\nDESCRIPTION: This code demonstrates how to define validation rules within an Apiato Request class. The rules method returns an array defining validation constraints for the 'email', 'password', and 'name' fields. This includes specifying the field is required, email format, maximum lengths, and checking for unique email addresses in the users table.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/validation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Containers\\AppSection\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass RegisterUserRequest extends Request\n{\n    /**\n     * @return  array\n     */\n    public function rules()\n    {\n        return [\n            'email'    => 'required|email|max:200|unique:users,email',\n            'password' => 'required|min:20|max:300',\n            'name'     => 'required|min:2|max:400',\n        ];\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Action with Dependency Injection (PHP)\nDESCRIPTION: Provides a basic example of an Apiato Action class (`DemoAction`) extending the `ParentAction`. It demonstrates injecting a single Task (`DemoTask`) via constructor property promotion and calling its `run` method within the Action's `run` method, typically passing data from a Request object.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Actions\\Action as ParentAction;\n\nclass DemoAction extends ParentAction\n{\n    public function __construct(\n        private readonly DemoTask $demoTask\n    ) {\n    }\n\n    public function run(DemoRequest $request)\n    {\n        return $this->demoTask->run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a branch for specific Apiato version upgrade with Git checkout\nDESCRIPTION: This snippet creates a new branch named 'apiato-{version}', where '{version}' is the target Apiato version, facilitating version-specific updates isolated from other development.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b apiato-{version}\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Events/Listeners in Container (php)\nDESCRIPTION: Shows how to manually map events to their corresponding listeners within a container-specific `EventServiceProvider`. The example demonstrates adding an `OrderShipped` event and its `SendShipmentNotification` listener to the protected `$listen` array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/events.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Providers\\EventServiceProvider as ParentEventServiceProvider;\n\nclass EventServiceProvider extends ParentEventServiceProvider\n{\n    protected $listen = [\n        OrderShipped::class => [\n            SendShipmentNotification::class,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model in apiato/Porto SAP - PHP\nDESCRIPTION: This PHP snippet demonstrates how to define a Model (`Demo`) within an apiato Container according to Porto SAP. It extends the base `App\\Ship\\Parents\\Models\\Model`, sets the database table, defines mass assignable (`$fillable`) and hidden (`$hidden`) attributes, configures attribute casting (`$casts`), specifies date fields (`$dates`), and shows a `belongsTo` relationship to another Model (`User`) located in a different Container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/models.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Demo\\Models;\n\nuse App\\Ship\\Parents\\Models\\Model;\n\nclass Demo extends Model\n{\n    protected $table = 'demos';\n\n    protected $fillable = [\n        'label',\n        'user_id'\n    ];\n\n    protected $hidden = [\n        'token',\n    ];\n\n    protected $casts = [\n        'total_credits'     => 'float',\n    ];\n\n    protected $dates = [\n        'created_at',\n        'updated_at',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(\\App\\Containes\\User\\Models\\User::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Transporter with Required Data in PHP\nDESCRIPTION: Shows how to instantiate a Transporter (`ProxyApiLoginTransporter`) that has required fields defined in its schema. Data from the `$request` is merged with required configuration values before passing it to the Transporter's constructor.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$dataTransporter = new ProxyApiLoginTransporter(\n    array_merge($request->all(), [\n        'client_id'       => Config::get('authentication-container.clients.web.admin.id'),\n        'client_password' => Config::get('authentication-container.clients.web.admin.secret')\n    ])\n);\n\n$result = Apiato::call('Authentication@ProxyApiLoginAction', [$dataTransporter]);\n```\n\n----------------------------------------\n\nTITLE: Using Repository Methods in PHP for Data Access\nDESCRIPTION: Shows common usage patterns for repository methods such as paginate, findByField, and findWhere to retrieve data from the underlying storage mechanism.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/repositories.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// paginate the data by 10\n$users = $userRepository->paginate(10);\n\n// search by 1 field\n$cars = $carRepository->findByField('colour', $colour);\n\n// searching multiple fields\n$offer = $offerRepository->findWhere([\n    'offer_id' => $offer_id,\n    'user_id'  => $user_id,\n])->first();\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Including Hashed Model IDs in Test Parameters (PHP)\nDESCRIPTION: Illustrates how to prepare test data containing hashed IDs for parameters like `roles_ids` and `user_id`. It uses the `getHashedKey()` method on model instances (`$role1`, `$role2`, `$randomUser`) to ensure the IDs are correctly hashed before being passed to the `$data` array for an API test call made via `$this->makeCall()`. This ensures tests correctly simulate client requests using hashed IDs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/hash-id.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'roles_ids' => [\n        $role1->getHashedKey(),\n        $role2->getHashedKey(),\n    ],\n    'user_id'   => $randomUser->getHashedKey(),\n];\n$response = $this->makeCall($data);\n```\n\n----------------------------------------\n\nTITLE: Getting Input with Default Value using getInputByKey - Apiato Request - PHP\nDESCRIPTION: Shows how to use the `getInputByKey` method with an optional second argument to provide a default value. This value is returned if the specified key is not found in the request data, and the method supports dot notation.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$request->getInputByKey('data.name', 'Undefined')\n```\n\n----------------------------------------\n\nTITLE: Using urlParameters Property and Applying URL Parameter Validation in Apiato Request Class in PHP\nDESCRIPTION: Illustrates defining the $urlParameters property to specify which URL parameters should be validated and including those parameters in the validation rules array. This enables validation of route parameters typically unavailable to validation in standard Laravel. Input: HTTP request with parameters in the URL (e.g., id, code). Output: validated and accessible URL parameters in the controller. Requires extending the Apiato Request base class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass ConfirmUserEmailRequest extends Request\n{\n    protected array $urlParameters = [\n        'id',\n        'code',\n    ];\n\n    public function rules(): array\n    {\n        return [\n            'id'   => 'required|integer', // url parameter\n            'code' => 'required|min:35|max:45', // url parameter\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fake Request for apiato Action Testing (PHP)\nDESCRIPTION: Shows the standard static method used to create a mock request object (`injectData`) for unit testing apiato actions. This method populates the fake request instance with the necessary data required by the action.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// creating\n$request = RegisterUserRequest::injectData($data);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Retrieving Request Data in Apiato Action Run Methods in PHP\nDESCRIPTION: Demonstrates how to retrieve request input data within an Action's run() method using standard Laravel patterns such as all(), property access, and input('key'). This allows convenient extraction of validated fields within business logic. The Action expects to receive a request object and can access any request parameter. Output is the relevant input data for processing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function run(CreateAdminRequest $request)\n{\n    $data = $updateUserRequest->all();\n    $name = $updateUserRequest->name;\n    $name = $updateUserRequest->input('name');\n    // etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking External Payment Services for Testing in PHP\nDESCRIPTION: This PHP code demonstrates how to mock external payment service API calls, such as Stripe and PayPal, to simulate payment operations during testing without executing real API requests. It uses method stubbing to return predefined responses for the `charge` method of each service.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/payments.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// mock the ChargeWithStripeService external API call\n$this->mockIt(ChargeWithStripeService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'stripe',\n   'description' => $payId\n]);\n\n// mock the ChargeWithPaypalService external API call\n$this->mockIt(ChargeWithPaypalService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'paypal',\n   'description' => $payId\n]);\n```\n\n----------------------------------------\n\nTITLE: Protecting an Endpoint with Permissions in Apiato (PHP)\nDESCRIPTION: This PHP code demonstrates how to protect an API endpoint (specifically, deleting a user) by defining required permissions within a custom Request class. It extends `App\\Ship\\Parents\\Requests\\Request` and utilizes the `$access` property to specify the 'delete-users' permission. The `authorize()` method leverages the `hasAccess()` method (inherited or implemented in the parent) to check if the current user possesses the required permission.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authorization.mdx#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Requests\\Request as ParentRequest;\n\nclass DeleteUserRequest extends ParentRequest\n{\n    protected array $access = [\n        'permissions' => 'delete-users',\n        'roles' => '',\n    ];\n\n    public function authorize(): bool\n    {\n        return $this->hasAccess();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Protected API route with middleware in PHP\nDESCRIPTION: Demonstrates how to define an API route with authentication middleware applied, securing the 'users' endpoint. Requires Laravel routing and middleware setup; inputs include route path, controller, and middleware array. Output is a protected route with access control.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/routes.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::get('users', [Controller::class, 'listAllUsers'])\n    ->middleware(['auth:api']);\n```\n\n----------------------------------------\n\nTITLE: Passing Bearer Access Token in HTTP Request Headers with PHP\nDESCRIPTION: This example demonstrates how to make an API request with a Bearer access token in the Authorization header using Laravel's HTTP client. The code sends a GET request to retrieve users from the API endpoint.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::withHeaders([\n    'Accept' => 'application/json',\n    'Authorization' => 'Bearer '.$accessToken,\n])->get('http://api.apiato.test/v1/users');\n\nreturn $response->json();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Users with Assigned Credentials and Access in Apiato Using getTestingUser() in PHP\nDESCRIPTION: The getTestingUser() method retrieves or creates a test user for use in API requests. It can accept optional user detail arrays to override default attributes such as email, name, and password. Additionally, it accepts an access control array to assign specific roles and permissions to the user dynamically. This function ensures that tests can run with properly authorized users reflecting real-world scenarios. It facilitates accurate testing of protected endpoints by generating valid authentication tokens tied to permissions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tests-helpers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = $this->getTestingUser();\n\n$user = $this->getTestingUser([\n    'email'    => 'hello@mail.test',\n    'name'     => 'Hello',\n    'password' => 'secret',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Criteria Class (PHP)\nDESCRIPTION: This snippet shows how to create a basic Criteria class in PHP that extends the base `Criteria` class. The `apply` method is implemented to add a specific query condition (ordering by creation date descending) to the provided model query builder, making the condition reusable across different repositories.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/criterias.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass OrderByCreationDateDescendingCriteria extends Criteria\n{\n    public function apply($model, PrettusRepositoryInterface $repository)\n    {\n        return $model->orderBy('created_at', 'desc');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Policies in AuthServiceProvider\nDESCRIPTION: Example of how to register policies by adding them to the policies array in the container's AuthServiceProvider class. Maps model classes to their corresponding policy classes.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/policies.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Providers\\AuthServiceProvider as ParentAuthProvider;\n\nclass AuthServiceProvider extends ParentAuthProvider\n{\n    protected $policies = [\n        Post::class => PostPolicy::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Mail using the Facade in Apiato (PHP)\nDESCRIPTION: Illustrates how to send a custom mail instance using the `Mail` facade in Apiato. It involves creating a new instance of the mail class (`UserRegisteredMail` in this example) and passing it to the static `send` method of the `Mail` facade, typically done within an Action or Task.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/mails.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nMail::send(new UserRegisteredMail($user));\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Class in PHP (Apiato)\nDESCRIPTION: Example of a Task class (`FindUserByIdTask`) in Apiato. It extends the base `Task` class, injects a `UserRepository` dependency via the constructor, and defines a `run` method to execute the core logic (finding a user by ID). Includes basic error handling by catching exceptions and throwing a specific `UserNotFoundException`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/tasks.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass FindUserByIdTask extends Task\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function run($id)\n    {\n        try {\n            $user = $this->userRepository->find($id);\n        } catch (Exception $e) {\n            throw new UserNotFoundException();\n        }\n\n        return $user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Hashed Model ID into Test URL (PHP)\nDESCRIPTION: Shows how to use the `injectId()` test helper to automatically hash a raw model ID (`$admin->id`) and insert it into the URL template used by the subsequent `makeCall()`. This helper simplifies testing API endpoints that expect hashed IDs directly in the URL path by handling the hashing process within the test setup.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/hash-id.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->injectId($admin->id)->makeCall();\n```\n\n----------------------------------------\n\nTITLE: Pagination Combined Limit and Page\nDESCRIPTION: This snippet demonstrates combining the 'limit' and 'page' parameters for paginated results.  It shows how to request a specific page with a defined number of results per page. This approach is key when requesting results across multiple pages.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/pagination.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?limit=100&page=2\n```\n\n----------------------------------------\n\nTITLE: Manually Linking a Repository to a Model (PHP)\nDESCRIPTION: Demonstrates how to explicitly link a repository to its corresponding model when Apiato's naming conventions are not followed (i.e., the repository name doesn't match the model name + 'Repository' suffix). Implement the `model()` method within the repository to return the fully qualified class name string of the associated Eloquent model.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Repositories\\Repository as ParentRepository;\n\nclass DemoRepository extends ParentRepository\n{\n    // ...\n    \n    public function model(): string\n    {\n        return AnotherDemo::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tasks within an Action in PHP (Apiato)\nDESCRIPTION: Demonstrates how to use multiple Tasks (`ValidateConfirmationCodeTask`, `FindUserByIdTask`, `ConfirmUserEmailTask`) within an Apiato Action (`ValidateUserEmailByConfirmationCodeAction`). Tasks are resolved and executed sequentially using the `app()` helper, orchestrating a larger piece of business logic (validating a confirmation code and confirming a user's email).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/tasks.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ValidateUserEmailByConfirmationCodeAction extends Action\n{\n    public function run($userId, $code)\n    {\n        app(ValidateConfirmationCodeTask::class)->run($userId, $code);\n        $user = app(FindUserByIdTask::class)->run($userId);\n        app(ConfirmUserEmailTask::class)->run($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating URL Parameters Directly in a Request - PHP\nDESCRIPTION: Demonstrates how the $urlParameters property is used to specify which parameters in the URL (e.g., 'id') should be considered for validation. As shown, rules can then be assigned for those URL parameters, allowing full validation coverage within the Request class. Example includes an integer check for the URL 'id'.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// URL: /stores/{id}/items\n// GET /stores/999/items\nclass DemoRequest extends ParentRequest\n{\n    protected array $urlParameters = [\n        'id',\n    ];\n\n    public function rules(): array\n    {\n        return [\n            'id'   => 'integer', // url parameter\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules in Apiato Request (PHP)\nDESCRIPTION: Example of an Apiato Request class (`RegisterUserRequest`) extending `App\\Ship\\Parents\\Requests\\Request`. It defines validation rules for user registration fields (email, password, name) within the `rules()` method, utilizing standard Laravel validation syntax.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/validation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Containers\\AppSection\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass RegisterUserRequest extends Request\n{\n    /**\n     * @return  array\n     */\n    public function rules()\n    {\n        return [\n            'email'    => 'required|email|max:200|unique:users,email',\n            'password' => 'required|min:20|max:300',\n            'name'     => 'required|min:2|max:400',\n        ];\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Logout Response Body Example - JSON\nDESCRIPTION: Example JSON response confirming successful token revocation after a DELETE request to the logout endpoint. Indicates the authentication token has been invalidated, effectively logging out the user.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Token revoked successfully.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Twitter OAuth Response - JSON\nDESCRIPTION: Sample server response for Twitter social authentication, showing user and token attribute structure as returned to the client. Actual response keys may differ per provider. Used by client applications to proceed with further authentication requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/social-authentication.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"User\": {\n    \"tokentoken\": \"1212\",\n    \"tokentokenSecret\": \"3434\",\n    \"tokenid\": \"777\",\n    \"tokennickname\": \"John_Doe\",\n    \"tokenname\": \"John Doe\",\n    \"tokenemail\": null,\n    \"tokenavatar\": \"http://pbs.twimg.com/images/888/PENrcePC.jpg\",\n    \"tokenuser\": \"token\",\n    \"avatar_original\": \"http://pbs.twimg.com/images/999/PENrcePC.jpg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Searchable Fields in Model Repository (PHP)\nDESCRIPTION: This snippet defines searchable fields for the User model in the repository.  It specifies which fields (name, id, email) are searchable and the search operator to use for each (like, =, =). This is a crucial step for allowing users to search against specific fields.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/search-query-parameter.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Data\\Repositories;\n\nuse App\\Containers\\User\\Contracts\\UserRepositoryInterface;\nuse App\\Ship\\Parents\\Repositories\\Repository;\n\nclass UserRepository extends Repository implements UserRepositoryInterface\n{\n\n    protected $fieldSearchable = [\n        'name'  => 'like',\n        'id'    => '=',\n        'email' => '=',\n    ];\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Access Roles/Permissions - Apiato Request - PHP\nDESCRIPTION: Shows how to specify multiple required permissions or roles within the `$access` property using array notation or pipe delimiters. This allows for more complex access control requirements.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRequest extends ParentRequest\n{\n    protected $access = [\n        'permissions' => ['delete-users', 'another-permissions'],\n        'roles' => 'manager|admin',\n    ];\n        \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Test for User Deletion in PHP\nDESCRIPTION: A PHP example of a functional test class for testing the user deletion API endpoint. It demonstrates how to set up test permissions, define the endpoint, and create a test case that verifies a user can be deleted successfully.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/tests.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteUserTest extends TestCase\n{\n    protected $endpoint = 'delete@v1/users/{id}';\n    \n    protected array $access = [\n        'roles' => '',\n        'permissions' => 'delete-users',\n    ];\n    \n    public function testDeleteExistingUser()\n    {\n        $user = $this->getTestingUser();\n\n        $response = $this->injectId($user->id)->makeCall();\n\n        $response->assertStatus(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apiato SubAction PHP Class\nDESCRIPTION: This PHP code snippet shows a basic structure for an Apiato SubAction class. It extends `App\\Ship\\Parents\\Actions\\SubAction`, typically aliased as `ParentSubAction`. The example demonstrates dependency injection for a `DemoTask` and implements the `run` method to execute the task, showcasing how SubActions delegate work to Tasks.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/subactions.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Actions\\SubAction as ParentSubAction;\n\nclass DemoSubAction extends ParentSubAction\n{\n    public function __construct(\n        private readonly DemoTask $demoTask\n    ) {\n    }\n\n    public function run(array $data)\n    {\n        return $this->demoTask->run($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apiato Multiple Validation Errors Response (JSON)\nDESCRIPTION: Illustrates the JSON structure for an Apiato validation error response when multiple fields fail validation. The 'errors' object lists all invalid fields, each with an array of corresponding error messages. It also includes the 422 'status_code' and a general 'message' indicating validation failure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/validation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": {\n    \"email\": [\n      \"The email field is required.\"\n    ],\n    \"password\": [\n      \"The password field is required.\"\n    ]\n  },\n  \"status_code\": 422,\n  \"message\": \"The given data failed to pass validation.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Related Objects in API Response - RESTful API - bash\nDESCRIPTION: Shows how to request related objects to be included in the API response using the 'include' query parameter. The parameter can accept one or more related resource names (comma-separated), allowing compound documents. Supported only if the API implements serialization of relationships.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars/123?include=drivers\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars/123?include=drivers,owner\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Web Route in PHP\nDESCRIPTION: This snippet demonstrates how to define a simple GET route for a web request using the Laravel router instance (`$router`). It maps the `/hello` URI to the `sayHello` method of a controller within a Web route file (e.g., `main.php`). The `$router` variable is an instance of `Illuminate\\Routing\\Router`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/routes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$router->get('/hello', [\n    'uses' => 'Controller@sayHello',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining apiato Routes PHP\nDESCRIPTION: Provides an example of how Controller methods are registered as API endpoints using a PHP array structure within the apiato routing system. It shows mapping HTTP methods (POST) and URLs to specific controller actions (`Controller@method`), including the application of middleware like `api.auth` for authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/controllers.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$router->post('login', [\n    'uses' => 'Controller@loginUser',\n]);\n\n$router->post('logout', [\n    'uses'       => 'Controller@logoutUser',\n    'middleware' => [\n        'api.auth',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Unit Testing APIato Requests by Injecting Data in PHP\nDESCRIPTION: This snippet illustrates how to create fake request objects with injected data for unit testing purposes using `injectData()`. It enables simulation of various request scenarios, testing the flow of request data through actions and ensuring proper handling and assertions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// creating\n$request = RegisterUserRequest::injectData($data);\n\n// creating a request instance with data\n$data = [\n    'email' => 'john@doe.test',\n    'name' => 'John Doe',\n    'password' => 'so-secret'\n];\n$request = RegisterUserRequest::injectData($data);\n\n// Using in action\n$action = app(RegisterUserAction::class)->run($request);\n\n// Example with authenticated user\n$data = [\n   'store_id' => $this->encode($store->id),\n   'items' => $orderItems,\n   'recipient' => $recipient,\n];\n\n$user = User::factory()->create();\n$request = MakeOrderRequest::injectData($data, $user);\n\n$order = app(MakeOrderAction::class)->run($request);\n```\n\n----------------------------------------\n\nTITLE: Defining Routes - Apiato MVC - PHP\nDESCRIPTION: When defining routes within Apiato's MVC structure, you must use the provided `$router` variable instead of the global `Route::` facade. This snippet illustrates the correct usage for defining basic GET routes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/software-architectural-patterns.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// Use this `$router` variable\n$router->get('/', function () {\n    return view('welcome');\n});\n\n// DO not use the `Route` facade\nRoute::get('/', function () {\n    return view('welcome');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API URL (Subdomain and Prefix)\nDESCRIPTION: Illustrates how to change the default API URL by modifying the `.env` file and the `apiato.php` configuration file. It involves removing the subdomain from `API_URL` in `.env` and setting the `'prefix'` in `app/Ship/Configs/apiato.php`. Additionally, demonstrates updating test endpoints accordingly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/faq.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1. Edit `.env`, change your api domain to `API_URL=http://apiato.test` instead of `API_URL=http://api.apiato.test` to\nremove the subdomain.\n2. Edit `app/Ship/Configs/apiato.php`, set prefix to `'prefix' => 'api/',`.\n3. That's it. Now you might need to update your tests endpoints, if they fail. Since each test can specify which\nendpoint to test, Example: In `app/Containers/AppSection/User/UI/API/Tests/Functional/CreateAdminTest` change `protected $endpoint = 'post@v1/admins';` to\n`protected $endpoint = 'post@api/v1/admins';`, including the new prefix.\n```\n\n----------------------------------------\n\nTITLE: Applying Shared Criteria from Task - Order By Creation Date Descending - PHP\nDESCRIPTION: Demonstrates how to use the 'OrderByCreationDateDescendingCriteria' within an apiato Task. It shows pushing an instance of the criteria onto a repository (`userRepository`) before fetching data, ensuring the results are ordered by creation date descending.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/criterias.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function run()\n{\n    $this->userRepository->pushCriteria(new OrderByCreationDateDescendingCriteria);\n\n    $users = $this->userRepository->paginate();\n\n    return $users;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Request in Controller - Apiato - PHP\nDESCRIPTION: Illustrates how to type-hint and inject an Apiato Request class into a controller method. When injected, the validation rules defined in the Request class are automatically executed before the controller logic runs, handling validation errors gracefully.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function __invoke(RegisterUserRequest $request)\n{\n    $user = app(RegisterUserAction::class)->run($request);\n    \n    return $this->transform($user, UserTransformer::class);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Pagination Meta Object\nDESCRIPTION: Illustrates the JSON structure found within the `meta` key of an API response when data is paginated using Apiato's default settings with the L5 Repository package. It includes details like total items, items per page (`per_page`), current page, total pages, and navigation links.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/pagination.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"data\": [...],\n\"meta\": {\n  \"pagination\": {\n    \"total\": 2000,\n    \"count\": 30,\n    \"per_page\": 30,\n    \"current_page\": 22,\n    \"total_pages\": 1111,\n    \"links\": {\n      \"previous\": \"http://api.domain.test/endpoint?page=21\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Social Auth Container via Composer - Shell\nDESCRIPTION: Installs the apiato/social-auth-container package using Composer. This package is required to enable social authentication functionality in the Apiato application. Run this command in your Laravel project root directory. Composer must be installed beforehand.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/social-authentication.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/social-auth-container\n```\n\n----------------------------------------\n\nTITLE: Generating a Model with Artisan\nDESCRIPTION: Generates a new Model using the Apiato Artisan command. This interactive command assists in creating the Model file in the correct directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/models.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:model\n```\n\n----------------------------------------\n\nTITLE: Requesting a Token via Proxy Endpoint (JSON Payload)\nDESCRIPTION: Crafts a minimal JSON payload for requesting an access token through Apiato's proxy endpoints (e.g., clients/web/login). Requires username and password fields; client credentials are handled by the server. Returns an access_token and refresh_token if credentials are valid. Designed for ease of use by trusted clients.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"john@doe.com\",\n  \"password\": \"secret\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the $decode Property for Automatic Decoding of Hashed IDs in Apiato in PHP\nDESCRIPTION: This example shows how to use the $decode property in an Apiato Request class to specify fields (such as user_id and item_id) that should be automatically decoded when the HashID feature is enabled. This applies transformation before validation rules are enforced and is important when working with encoded identifiers. Requires HashID configuration. Input: request fields containing hashed IDs. Output: decoded IDs available for validation and controller logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass AssignUserToRoleRequest extends Request\n{\n    protected array $decode = [\n        'user_id',\n        'item_id',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Apiato Update User Request (PHP)\nDESCRIPTION: Example of a concrete Request class (`UpdateUserRequest`) in Apiato extending `App\\Ship\\Parents\\Requests\\Request`. It defines access control via the `$access` property, validation rules in the `rules()` method, and authorization logic in the `authorize()` method using the `check()` helper with `hasAccess` and `isOwner` functions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass UpdateUserRequest extends Request\n{\n\n    protected $access = [\n        'permission' => '',\n        'roles'      => 'admin',\n    ];\n\n    protected $decode = [\n\n    ];\n\n    protected $urlParameters = [\n\n    ];\n\n    public function rules()\n    {\n        return [\n            'email'    => 'email|unique:users,email',\n            'password' => 'min:100|max:200',\n            'name'     => 'min:300|max:400',\n        ];\n    }\n\n    public function authorize()\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination in Repository (PHP)\nDESCRIPTION: Shows how to retrieve paginated results from a repository by calling the `paginate()` method. This method leverages the underlying L5 Repository functionality to handle pagination based on request parameters or configured defaults.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n{\n    $this->userRepository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications via Facade in PHP\nDESCRIPTION: Demonstrates how to dispatch a notification (e.g., `BirthdayReminderNotification`) to a specific user from an Action or Task using the static `Notification` facade's `send` method in PHP.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/notifications.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Notification::send($user, new BirthdayReminderNotification($notificationMessage));\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Successful User Registration Json\nDESCRIPTION: This snippet shows a typical JSON response returned by the API upon successfully registering a new user. It contains the user object with fields such as 'id', 'name', 'email', verification status, timestamps, and metadata about included relations. This response helps the client confirm the creation and retrieve user details.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/user-registration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"XbPW7awNkzl83LD6\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@doe.com\",\n    \"email_verified_at\": null,\n    \"gender\": null,\n    \"birth\": null,\n    \"created_at\": \"2021-04-15T14:17:24.000000Z\",\n    \"updated_at\": \"2021-04-15T14:17:24.000000Z\",\n    \"readable_created_at\": \"1 second ago\",\n    \"readable_updated_at\": \"1 second ago\"\n  },\n  \"meta\": {\n    \"include\": [\n      \"roles\"\n    ],\n    \"custom\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control with String Notation in Apiato Request PHP\nDESCRIPTION: This snippet shows how to use the `$access` property in an Apiato Request (`DeleteUserRequest`) to define required permissions and roles for the endpoint, using string notation (`|` as OR). The `authorize()` method then calls `$this->check()` which typically evaluates these access rules (often via the built-in `hasAccess` function) along with other custom authorization checks.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteUserRequest extends Request\n{\n    protected array $access = [\n        'permission' => 'delete-users|another-permissions',\n        'roles' => 'manager'\n    ];\n\n    public function authorize(): bool\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n            'isKing',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the model() method in a Repository\nDESCRIPTION: This code snippet demonstrates how to implement the `model()` method in a repository when the model name differs from the container name.  The method should return the fully qualified class name of the associated model using the `::class` syntax. This allows the repository to correctly interact with the specified model.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/repositories.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass DemoRepository extends Repository\n{\n    // ...\n    \n    public function model(): string\n    {\n        return Demo::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Metadata in API Response (JSON)\nDESCRIPTION: Illustrates the structure of the `meta.pagination` object included in API responses containing paginated data. This metadata provides details such as total items, count per page, current page number, total pages, and links for navigation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"meta\": {\n    \"pagination\": {\n        \"total\": 2000,\n        \"count\": 30,\n        \"per_page\": 10,\n        \"current_page\": 20,\n        \"total_pages\": 200,\n        \"links\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Relationship Inclusion Method in Apiato Transformer (PHP)\nDESCRIPTION: Shows how to define a method (e.g., `includeRoles`) within a Transformer to handle the inclusion of related data. This method receives the parent model instance and should return a Fractal `Item` or `Collection` resource, using the appropriate transformer for the related model(s).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function includeRoles(User $user): Collection\n{\n    return $this->collection($user->roles, new RoleTransformer());\n}\n```\n\n----------------------------------------\n\nTITLE: Web Authentication Route (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to protect a web endpoint using the `auth:web` middleware. This middleware ensures that only authenticated users can access the specified route. When authentication fails, users are redirected to a login page.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('private/page', [Controller::class, 'showPrivatePage'])\n    ->middleware('auth:web');\n```\n\n----------------------------------------\n\nTITLE: Example apiato API Controller PHP\nDESCRIPTION: Illustrates an apiato API Controller extending `ApiController`. It demonstrates calling Actions using `Apiato::call`, passing the Request object as recommended, and handling the response using built-in helper functions like `transform` for data serialization and `deleted` for success messages.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/controllers.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass Controller extends ApiController\n{\n\n    /**\n     * @param \\App\\Containers\\User\\UI\\API\\Requests\\RegisterUserRequest $request\n     *\n     * @return  mixed\n     */\n    public function registerUser(RegisterUserRequest $request)\n    {\n        $user = Apiato::call(RegisterUserAction::class, [$request]);\n\n        return $this->transform($user, UserTransformer::class);\n    }\n\n    /**\n     * @param \\App\\Containers\\User\\UI\\API\\Requests\\DeleteUserRequest $request\n     *\n     * @return  \\Illuminate\\Http\\JsonResponse\n     */\n    public function deleteUser(DeleteUserRequest $request)\n  {\n        $user = Apiato::call(DeleteUserAction::class, [$request]);\n\n        return $this->deleted($user);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action from Controller (PHP)\nDESCRIPTION: This example shows how to use an Action from a Controller. The `deleteUser` method in the Controller calls the `DeleteUserAction`'s `run` method with the request data. The result is then passed to the `deleted` method, presumably for formatting the response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function deleteUser(DeleteUserRequest $request)\n{\n    $user = app(DeleteUserAction::class)->run($request);\n    return $this->deleted($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying RequestCriteria in a Task (PHP)\nDESCRIPTION: Example of applying `RequestCriteria` within an Apiato Task using dependency injection for the repository. Calling `$this->repository->addRequestCriteria()` enables filtering, searching, and sorting based on HTTP request parameters (`search`, `orderBy`, `sortedBy`, etc.) before fetching data (e.g., via `paginate()`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Containers\\AppSection\\User\\Data\\Repositories\\UserRepository;\nuse App\\Ship\\Parents\\Tasks\\Task as ParentTask;\n\nclass ListUsersTask extends ParentTask\n{\n    public function __construct(\n        protected readonly UserRepository $repository\n    ) {\n    }\n\n    public function run(): mixed\n    {\n        // $this->repository->removeRequestCriteria();\n        return $this->repository->addRequestCriteria()->paginate();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in Apiato Using PHP\nDESCRIPTION: This snippet demonstrates two ways to dispatch an event named UserEmailChangedEvent with a user object in Apiato. The first method uses Laravel's global event() helper function for quick firing of events. The second method manually fetches the Dispatcher interface from the service container and dispatches the event class instance. Both approaches trigger event listeners and handlers registered for the specified event.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/events.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// using helper function\nevent(New UserEmailChangedEvent($user));\n\n// manually\n\\App::make(\\Illuminate\\Contracts\\Bus\\Dispatcher\\Dispatcher::class)->dispatch(New UserEmailChangedEvent($user));\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Queued Mail Class in Apiato (PHP)\nDESCRIPTION: Example of a `WelcomeMail` class extending `App\\Ship\\Parents\\Mails\\Mail` (aliased as `ParentMail`). It implements `ShouldQueue` for asynchronous sending, injects a `User` object via the constructor, and configures the email view, recipient, and data within the `build` method using namespaced views.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/mail.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Mails\\Mail as ParentAction;\n\nclass WelcomeMail extends ParentMail ShouldQueue\n{\n    use Queueable;\n\n    public function __construct(protected User $recipient)\n    {\n    }\n\n    public function build()\n    {\n        return $this->view('appSection@user::welcome')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Actions and Tasks via Apiato Magical Call in PHP\nDESCRIPTION: Demonstrates multiple styles to invoke an Apiato Task using the Apiato::call() Facade: the preferred 'containerName@className' string, and the full class namespace. The method dynamically allows invocation from any context, fosters decoupling, and triggers logging warnings if the preferred caller style is not used. Dependencies: Apiato Core installed and class signatures matching those defined in Apiato architecture. The input requires the container and class name or full namespaced class and optional method arguments; the output is the result from the Task or Action's run method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/magical-call.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// Call \"AssignUserToRoleTask\" Task from the \"Authorization\" Container using the apiato caller style\nApiato::call('Authorization@AssignUserToRoleTask');\n\n// Call \"AssignUserToRoleTask\" Task from the \"Authorization\" Container using class full name.\n// This will cause to add an INFO entry to the log file!\nApiato::call(\\App\\Containers\\Authorization\\Tasks\\AssignUserToRoleTask::class);\n```\n\n----------------------------------------\n\nTITLE: Calling an Action with a DataTransporter Instance in PHP\nDESCRIPTION: Demonstrates calling an Apiato Action (`MyContainer@myAction`) that expects a `DataTransporter` by passing a newly instantiated `DataTransporter` containing request data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// you would pass a DataTransporter to it\n$user = Apiato::call('MyContainer@myAction', [new DataTransporter($request)]);\n```\n\n----------------------------------------\n\nTITLE: Migrating and Seeding the Database Simultaneously (Shell)\nDESCRIPTION: This shell code demonstrates how to run Laravel migrations and seeders in a single command with `php artisan migrate --seed`. It applies all pending database migrations and then executes all seeders, automating the process of fully preparing the database schema and initial data. It requires an initialized Laravel project with migration and seeder files present. The output is a ready-to-use, seeded database for development or deployment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/seeders.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate --seed\n```\n\n----------------------------------------\n\nTITLE: Registering Container Aliases (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to register custom class aliases (Facades) within a container's `MainServiceProvider`. Adding key-value pairs to the public `$aliases` array, where the key is the desired alias name and the value is the target class name (e.g., `CustomFacade::class`), allows these aliases to be registered when the MainServiceProvider boots, making them available throughout the container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/service-providers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic array $aliases = [\n    'CustomAlias' => CustomFacade::class,\n    'AnotherCustomAlias' => AnotherCustomFacade::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Example Hashed ID in Request Body (JSON)\nDESCRIPTION: Provides an example of sending a hashed ID within a JSON request body. Apiato requests can be configured to automatically decode specific fields from the body, such as an 'id' field, making the decoded value available for use within the request handler.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/hash-id.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": \"XbPW7awNkzl83LD6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduled Tasks in Laravel (PHP)\nDESCRIPTION: Illustrates how to define various types of tasks (Artisan command, Laravel Job, shell command) and their scheduling frequencies within the `schedule` method of the `ConsoleKernel`. Different methods like `command`, `job`, and `exec` are shown with examples like `everyMinute`, `hourly`, and `dailyAt`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/miscellaneous/tasks-scheduling.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function schedule(Schedule $schedule)\n{\n     $schedule->command('apiato:welcome')->everyMinute();\n     $schedule->job(new myJob)->hourly();\n     $schedule->exec('touch me.txt')->dailyAt('12:00');\n     // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling CLI Commands with Schedule Method in Laravel PHP\nDESCRIPTION: This PHP snippet shows how to define scheduled tasks inside Laravel's ConsoleKernel by utilizing the schedule method. It schedules an Artisan command to run every minute, a Laravel job to execute hourly, and a shell command to run daily at 12:00. The Schedule object is injected as a parameter, and methods like command, job, and exec are chained with timing options. Requires Laravel's scheduling system and that commands/jobs are set up; no explicit registration in the $commands property is needed as Apiato automates discovery. The input is the Schedule instance, and the output is a series of scheduled actions that Laravel executes via the scheduler.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tasks-scheduling.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function schedule(Schedule $schedule)\n{\n     $schedule->command('apiato:welcome')->everyMinute();\n     $schedule->job(new myJob)->hourly();\n     $schedule->exec('touch me.txt')->dailyAt('12:00');\n     // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Branches and Upstream Tracking in Git - Bash\nDESCRIPTION: Guides on creating a new branch and setting it to track an upstream branch from the main Apiato repository. Dependency: Remote named 'upstream' configured. Sets up local development workflow to follow the upstream/master branch for synchronized development and PRs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b apiato\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout apiato\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit branch --set-upstream-to upstream/master\n```\n\n----------------------------------------\n\nTITLE: Access Correct Response (JSON)\nDESCRIPTION: This JSON shows an example of a successful token retrieval. The response provides the token type (Bearer), the token's expiration time, the access token and refresh token. The response should be used for subsequent requests authorization.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400,\n  \"access_token\": \"tnJ1eXAiOiJKV1QiLCJhbGciOiJSUzI1Zx...\",\n  \"refresh_token\": \"ZFDPA1S7H8Wydjkjl+xt+hPGWTagX...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Apiato Middleware Folder Structure\nDESCRIPTION: Illustrates the standard directory layout for Apiato applications, highlighting the locations for container-specific middlewares (`app/Containers/{Section}/{Container}/Middlewares`), general middlewares (`app/Ship/Middlewares`), and their respective registration service providers (`MiddlewareServiceProvider.php` within containers and `HttpKernel.php` in the Ship layer).\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/middlewares.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           ├── Middlewares\n│           │   ├── DemoMiddleware.php\n│           │   └── ...\n│           └── Providers\n                // highlight-start\n│               ├── MiddlewareServiceProvider.php\n                // highlight-end\n│               └── ...\n└── Ship\n    ├── Kernels\n        // highlight-start\n    │   └── HttpKernel.php\n        // highlight-end\n    └── Middlewares\n        ├── AnotherMiddleware.php\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using an Apiato Request in a Controller (PHP)\nDESCRIPTION: Demonstrates how to use type hinting to inject a specific Request object (`UpdateUserRequest`) into a controller method in Apiato. This automatically handles validation and authorization defined in the Request class before the method logic executes. It also shows different ways to access the validated request data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function handle(UpdateUserRequest $updateUserRequest)\n{\n    $data = $updateUserRequest->all();\n    // or\n    $name = $updateUserRequest->name;\n    // or\n    $name = $updateUserRequest['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using View From Controller (PHP)\nDESCRIPTION: This PHP code snippet shows how to render a view from a controller within the Apiato framework. The `view()` function is used to return the specified view file to the browser.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/views.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Controller extends WebController\n{\n    public function sayWelcome()\n    {\n        return view('just-welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of mapInput Method (JSON)\nDESCRIPTION: Illustrates the resulting structure of the request data after the `mapInput` method has been applied. It shows how the original key (`data.name`) has been successfully mapped and renamed to the new key (`data.username`) within the nested structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\" : {\n\t\t\"username\" : \"John Doe\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ValidateAddressSubAction Implementation in PHP\nDESCRIPTION: This code defines a SubAction that validates a recipient's address. It extends the `App\\Ship\\Parents\\Actions\\SubAction` class and utilizes tasks for validating the address with external services like EasyPost and MelissaData. It takes a Recipient model as input.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/subactions.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Shipment\\Actions;\n\nuse App\\Containers\\Recipient\\Models\\Recipient;\nuse App\\Containers\\Recipient\\Tasks\\UpdateRecipientTask;\nuse App\\Containers\\Shipment\\Tasks\\ValidateAddressWithEasyPostTask;\nuse App\\Containers\\Shipment\\Tasks\\ValidateAddressWithMelissaDataTask;\nuse App\\Ship\\Parents\\Actions\\SubAction;\n\nclass ValidateAddressSubAction extends SubAction\n{\n    public function run(Recipient $recipient)\n    {\n        $hasValidAddress = true;\n\n        $easyPostResponse = Apiato::call(ValidateAddressWithEasyPostTask::class, [$recipient]);\n\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Searchable Fields (Apiato PHP Repository)\nDESCRIPTION: Specify which model fields are searchable using the `$fieldSearchable` protected property in an Apiato repository class. This property is an array mapping field names to optional search conditions (e.g., `=`, `like`), enabling dynamic searching via RequestCriteria.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Repositories\\Repository as ParentRepository;\n\nclass UserRepository extends ParentRepository\n{\n    protected $fieldSearchable = [\n        'id' => '=',\n        'name' => 'like',\n        'email' => '=',\n        'email_verified_at' => '=',\n        'created_at' => '=',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Remapped Input Field - PHP\nDESCRIPTION: This snippet shows how to access the remapped input field after using `mapInput`. The value previously accessed via `data.name` is now available using `username`. This allows easy access to the modified request data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$request->input('username');\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control with Array Notation in Apiato Request PHP\nDESCRIPTION: This snippet provides an alternative to the string notation for the `$access` property. It shows how to define the required permissions and roles as arrays, which can improve readability for multiple entries compared to using the pipe `|` separator.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected $access = [\n        'permission' => ['delete-users', 'another-permissions'],\n        'roles' => ['manager'],\n];\n```\n\n----------------------------------------\n\nTITLE: Scheduling Artisan Commands, Jobs, and Exec Commands - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the `schedule` function in Laravel's `ConsoleKernel.php` to schedule Artisan commands, queued jobs and shell commands. It leverages the `Schedule` class to define the frequency of execution, using methods like `everyMinute()`, `hourly()`, and `dailyAt()`.  The `apiato:welcome` is a placeholder artisan command, `myJob` is a queued job.  `touch me.txt` is a shell command executed through `exec` method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/tasks-scheduling.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    protected function schedule(Schedule $schedule)\n    {\n         $schedule->command('apiato:welcome')->everyMinute();\n         $schedule->job(new myJob)->hourly();\n         $schedule->exec('touch me.txt')->dailyAt('12:00');\n         // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller Function in Apiato (PHP)\nDESCRIPTION: Shows the `sayHello` method within an Apiato `ApiController`. It utilizes dependency injection for the `SayHelloRequest` (for validation/authorization) and calls the `SayHelloAction` via the application container (`app()`) to execute business logic, finally returning a JSON response using the `$this->json` helper.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/samples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Controller extends ApiController\n{\n\tpublic function sayHello(SayHelloRequest $request)\n\t{\n            $helloMessage = app(SayHelloAction::class)->run();\n\n            $this->json([\n                $helloMessage\n            ]);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values via Laravel Config System - PHP\nDESCRIPTION: This snippet shows how to retrieve values from a configuration file using both the Laravel Config facade and the config() helper function. The example demonstrates accessing the 'namespace' setting from a container-specific config using the recommended key format. The only dependency is Laravel's configuration system being set up as described above, with the config file in the correct location. Input is the config key string, and output is the stored value (e.g., 'App'). This approach ensures modular, namespaced configuration retrieval in Apiato-based projects.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/configs.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = Config::get('{section-name}-{container-name}.namespace');     // returns 'App'\n$value = config('{section-name}-{container-name}.namespace');          // same, but using laravel helper function\n\n```\n\n----------------------------------------\n\nTITLE: Registering Middlewares in the Ship Layer HTTP Kernel using PHP in Apiato\nDESCRIPTION: This PHP snippet shows how to register global, grouped, and route middlewares inside the Ship layer's HTTP Kernel in an Apiato application. Extending Laravel's base HttpKernel, it defines several arrays: $middleware for global middlewares applied on every request, $middlewareGroups for grouping middlewares under 'web' and 'api', and $routeMiddleware for assigning middlewares to routes individually or to groups. Included middlewares cover Laravel default middlewares, custom Ship layer HTTP middlewares, third-party CORS middleware, and route-specific bindings and throttling. This setup enables both broad and fine-grained HTTP request filtering within the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/middlewares.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Ship\\Kernels;\n\nuse App\\Ship\\Middlewares\\Http\\ProcessETagHeadersMiddleware;\nuse App\\Ship\\Middlewares\\Http\\ProfilerMiddleware;\nuse App\\Ship\\Middlewares\\Http\\ValidateJsonContent;\nuse Illuminate\\Foundation\\Http\\Kernel as LaravelHttpKernel;\n\n/**\n * Class HttpKernel\n *\n * A.K.A (app/Http/Kernel.php)\n *\n * @author  Mahmoud Zalt  <mahmoud@zalt.me>\n */\nclass HttpKernel extends LaravelHttpKernel\n{\n\n    /**\n     * The application's global HTTP middleware stack.\n     *\n     * These middleware are run during every request to your application.\n     *\n     * @var array\n     */\n    protected $middleware = [\n        // Laravel middleware's\n        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n        \\App\\Ship\\Middlewares\\Http\\TrimStrings::class,\n        \\App\\Ship\\Middlewares\\Http\\TrustProxies::class,\n\n        // CORS package middleware\n        \\Barryvdh\\Cors\\HandleCors::class,\n    ];\n\n    /**\n     * The application's route middleware groups.\n     *\n     * @var array\n     */\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Ship\\Middlewares\\Http\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Ship\\Middlewares\\Http\\VerifyCsrfToken::class,\n            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        ],\n\n        'api' => [\n            ValidateJsonContent::class,\n            'bindings',\n            ProcessETagHeadersMiddleware::class,\n            ProfilerMiddleware::class,\n            // The throttle Middleware is registered by the RoutesLoaderTrait in the Core\n        ],\n    ];\n\n    /**\n     * The application's route middleware.\n     *\n     * These middleware may be assigned to groups or used individually.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        'can'      => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'auth'     => \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n    ];\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Web Controller in Apiato (PHP)\nDESCRIPTION: Provides a sample PHP class for a Web Controller. It must extend `App\\Ship\\Parents\\Controllers\\WebController` and demonstrates a simple method `sayWelcome` that returns a Laravel view, suitable for handling web page requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Controller extends WebController\n{\n    public function sayWelcome()\n    {\n        return view('welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exceptions with Overridden Messages in PHP\nDESCRIPTION: This example demonstrates how to throw an AccountFailedException while overriding the default exception message by passing a custom string to the constructor. This allows dynamic or context-specific messaging to the user.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/exceptions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nthrow new AccountFailedException('I am the message to be displayed to the user');\n```\n\n----------------------------------------\n\nTITLE: Typical Porto Project Directory Structure (Markdown)\nDESCRIPTION: Illustrates the standard directory layout for a project implementing the Porto pattern. Shows the organization into Containers (grouped by Sections), the Ship layer for shared code, and common subdirectories for components like Actions, Models, UI interfaces (API, WEB, CLI), Tests, etc. The structure emphasizes separation of concerns and modularity.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/architecture-concepts/porto.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   ├── Section\n│   │   └── Container\n│   │       ├── Actions\n│   │       ├── Configs\n│   │       ├── Data\n│   │       │   ├── Factories\n│   │       │   ├── Migrations\n│   │       │   ├── Repositories\n│   │       │   └── Seeders\n│   │       ├── Mails\n│   │       │   └── Templates\n│   │       ├── Middlewares\n│   │       ├── Models\n│   │       ├── Notifications\n│   │       ├── Providers\n│   │       ├── Tasks\n│   │       ├── Tests\n│   │       ├── Traits\n│   │       └── UI\n│   │           ├── API\n│   │           │   ├── Controllers\n│   │           │   ├── Requests\n│   │           │   ├── Routes\n│   │           │   └── Transformers\n│   │           ├── WEB\n│   │           │   ├── Controllers\n│   │           │   ├── Requests\n│   │           │   ├── Routes\n│   │           │   └── Views\n│   │           └── CLI\n│   │               └── Commands\n│   └── Vendor `// All installed and reusable Containers`\n│       ├── ContainerA\n│       └── ContainerB\n└── Ship `// All shared code between all Containers`\n    ├── Broadcasts\n    ├── Commands\n    ├── Configs\n    ├── Contracts\n    ├── Criterias\n    ├── Events\n    ├── Exceptions\n    ├── Generators\n    ├── Helpers\n    ├── Kernels\n    ├── Listeners\n    ├── Mails\n    ├── Middlewares\n    ├── Migrations\n    ├── Notifications\n    ├── Parents\n    ├── Providers\n    ├── Seeders\n    └── Tests\n```\n\n----------------------------------------\n\nTITLE: Configuring hosts file for Apiato\nDESCRIPTION: Maps the Apiato domains to localhost in the hosts file for local development.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1  apiato.test\n127.0.0.1  api.apiato.test\n127.0.0.1  admin.apiato.test\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Search Conditions with searchFields (URL)\nDESCRIPTION: Examples illustrating how to define the search condition (e.g., 'like', '=') for one or more fields using the `searchFields` query parameter. Conditions are specified as `field:condition` pairs, separated by semicolons if multiple. This overrides repository defaults and can be used in conjunction with the `search` parameter to apply specific conditions to search terms.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_10\n\nLANGUAGE: http\nCODE:\n```\n?searchFields=name:like\n?searchFields=email:=\n?searchFields=name:like;email:=\n?search=git&searchFields=url:like\n```\n\n----------------------------------------\n\nTITLE: Creating New Resources via HTTP POST - RESTful API - bash\nDESCRIPTION: Illustrates creating a new resource collection entry by sending an HTTP POST request to the appropriate endpoint. The request body should include the necessary resource data (format and required fields depend on the API). Authentication and input validation may apply.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPOST http://www.api.apiato.test/v1/cars\n```\n\n----------------------------------------\n\nTITLE: Example JSON response using DataArraySerializer format\nDESCRIPTION: This snippet shows a sample JSON response formatted by the DataArraySerializer, highlighting the data object with user information. It demonstrates how individual resource representations are structured within the 'data' key.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"XbPW7awNkzl83LD6\",\n    \"name\": \"Mohammad Alavi\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a new Container with Apiato Artisan Command using PHP\nDESCRIPTION: This snippet shows how to generate a new Container along with its components in an Apiato project using the interactive artisan command. It requires the Laravel Php artisan CLI. Running the command `php artisan apiato:generate:container` initiates the container generation process, allowing developers to automate the setup of feature modules encapsulated as Containers.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/architecture-concepts/container.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:container\n```\n\n----------------------------------------\n\nTITLE: Logout Success Response (JSON)\nDESCRIPTION: This JSON shows the response received after a successful logout, indicating that the token has been revoked. No dependencies or prerequisites are required, the format is predefined.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Token revoked successfully.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apiato Rate Limiting Settings in PHP\nDESCRIPTION: Defines the configuration array for API rate limiting settings in Apiato using PHP. This snippet shows how to enable or disable throttling, how many attempts are allowed within the expiration window, and the duration of the expiry window in minutes. It relies on environment variables to dynamically set these values. The parameters 'enabled' (boolean) toggles the rate limiting middleware, 'attempts' (integer) sets the maximum requests per expiry window, and 'expires' (integer) sets the length of the window in minutes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/rate-limiting.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'throttle' => [\n    'enabled' => env('API_RATE_LIMIT_ENABLED', true),\n    'attempts' => env('API_RATE_LIMIT_ATTEMPTS', '30'),\n    'expires' => env('API_RATE_LIMIT_EXPIRES', '1'),\n]\n```\n\n----------------------------------------\n\nTITLE: Generating an Apiato Transformer (Shell)\nDESCRIPTION: Uses the `apiato:generate:transformer` Artisan command to interactively create a new Transformer class within an Apiato project. This command scaffolds the necessary file in the correct container directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:transformer\n```\n\n----------------------------------------\n\nTITLE: Apiato Transformer with Default Includes (PHP)\nDESCRIPTION: Example demonstrating how to make a relationship (`avatar`) always included in the response by default. The relationship name is added to the `$defaultIncludes` array, and the corresponding `includeAvatar` method is defined.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected array $defaultIncludes = [\n    'avatar',\n];\n\npublic function includeAvatar(User $user): Item\n{\n    return $this->item($user->avatar, new AvatarTransformer());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting UI on Action\nDESCRIPTION: These code snippets demonstrate how to set and get the UI type on an Action in Apiato. The `setUI` method is used to specify the UI type (e.g., 'web', 'api'), and the `getUI` method is used to retrieve the set UI type. This is useful for handling actions differently based on the UI context.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$action = app(Action::class);\n$action->setUI('web');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$action->getUI(); // will return 'web'\n```\n\n----------------------------------------\n\nTITLE: Set API Documentation Locale\nDESCRIPTION: Sets the locale for the API documentation header by defining the `APIDOC_LOCALE` environment variable.  This allows localizing the documentation header to a different language.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/documentation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nAPIDOC_LOCALE=ru\n```\n\n----------------------------------------\n\nTITLE: Using Custom Authorization Trait in Apiato Request PHP\nDESCRIPTION: This snippet shows how to integrate the custom authorization trait (`IsAuthorPermissionTrait`) into an Apiato Request class (`FindUserByIdRequest`). By `use`-ing the trait, its methods (like `isAuthor`) become available within the Request, allowing them to be included in the `$this->check()` array within the `authorize()` method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass FindUserByIdRequest extends Request\n{\n    use IsAuthorPermissionTrait;\n\n    // ...\n\n    public function authorize(): bool\n    {\n        return $this->check([\n            'isAuthor',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Endpoint and Authentication Properties Dynamically in Apiato Tests Using PHP\nDESCRIPTION: This snippet demonstrates how to override the $endpoint and $auth properties within individual test methods to customize the API request configuration dynamically. Using endpoint('verb@uri') allows a test to specify a different HTTP endpoint than the class default before making an API call. Similarly, auth(false) disables authentication for the subsequent makeCall(), useful for endpoints that do not require a logged-in user. These overrides enable flexible testing of multiple scenarios within the same test class without permanent property changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tests-helpers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->endpoint('get@myEndpoint')->makeCall();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->auth(false)->makeCall();\n```\n\n----------------------------------------\n\nTITLE: CLI Usage of Laravel Artisan Command\nDESCRIPTION: This command shows how to execute the custom 'hello:world' command directly from the terminal using PHP's artisan CLI tool. It provides a simple example of command invocation which triggers the handle() method of the command class, printing 'Hello World :)'. Prerequisites include having the Laravel environment set up and the command registered properly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/commands.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan hello:world\n```\n\n----------------------------------------\n\nTITLE: Reading Setting by Key in Apiato - PHP\nDESCRIPTION: Demonstrates how to retrieve a setting value using the built-in `findSettingsByKeyTask`. You provide the unique key of the setting as a string argument to the `run` method. Requires access to an instance of `findSettingsByKeyTask`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/settings.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = $this->findSettingsByKeyTask->run('whateverSettingsName');\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Request Data for Partial Updates in PHP using APIato\nDESCRIPTION: The snippet demonstrates how to selectively extract and sanitize specific fields from a JSON request using `sanitizeInput()`, supporting dot notation for nested fields. It helps minimize payload and enables partial resource updates by filtering request data based on specified fields, including default values.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$fields = [\n    'data.name',\n    'data.description',\n    'data.is_private',\n    'data.foo.c'\n];\n$data = $request->sanitizeInput($fields);\n```\n\n----------------------------------------\n\nTITLE: Creating Apiato project with Git initialization\nDESCRIPTION: Creates a new Apiato project and initializes a Git repository for it. Requires Git to be installed and configured.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\napiato new my-api --git\n```\n\n----------------------------------------\n\nTITLE: Using Action in Controller (PHP)\nDESCRIPTION: This snippet demonstrates how to use the defined action from a controller. It calls the `ListAndSearchUsersAction` via `Apiato::call`. It then formats the response as a paginated result using the `response->paginator` method and a UserTransformer to ensure proper response formatting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/search-query-parameter.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function listAllUsers()\n{\n    $users = Apiato::call('User@ListAndSearchUsersAction');\n\n    return $this->response->paginator($users, new UserTransformer());\n} \n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Laravel Artisan Command in PHP\nDESCRIPTION: This snippet demonstrates the implementation of a basic custom Laravel command named 'HelloWorldCommand'. It extends the base ConsoleCommand class, sets a command signature and description, and outputs a greeting when executed. Dependencies include the base ConsoleCommand class, and it requires registration within the Laravel application to be callable via CLI.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/commands.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass HelloWorldCommand extends ConsoleCommand\n{\n    protected $signature = 'hello:world';\n    protected $description = 'Hello World!';\n\n    public function handle()\n    {\n        echo \"Hello World :)\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Search Query Parameter Examples (URL)\nDESCRIPTION: Provides examples of using the `?search=` query parameter. It shows searching across all configured searchable fields for a term, searching within a specific field (`name:John`), and handling spaces in search terms by URL-encoding them as `%20`. Requires RequestCriteria to be enabled and `$fieldSearchable` configured in the repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n?search=John\n?search=name:John\n?search=name:John%20Doe\n```\n\n----------------------------------------\n\nTITLE: Passing Apiato Request to Action PHP\nDESCRIPTION: This snippet demonstrates the recommended way to pass data from a controller to an Apiato Action's `run()` method: by passing the Request object itself. This allows the Action to access all validated and authorized input data directly from the Request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function createAdmin(CreateAdminRequest $request)\n{\n    $admin = app(CreateAdminAction::class)->run($request);\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Created Response\nDESCRIPTION: This demonstrates using the `created` method to return a response with a 201 status code in Apiato. This is typically used after successfully creating a resource.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$this->created($data)\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Input with sanitizeInput - Apiato Request - PHP\nDESCRIPTION: Illustrates the usage of the `sanitizeInput` helper method to selectively extract and filter fields from a request payload using dot notation. It shows how to specify desired fields, demonstrating that only listed fields are included in the output array.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$data = $request->sanitizeInput([\n    'data.description',\n    'data.is_private',\n    'data.address',\n    'data.foo.number',\n    'email', // will be ignored\n    'meta',\n]);\n```\n\n----------------------------------------\n\nTITLE: API Controller Example\nDESCRIPTION: This code defines an example API controller within the APIATO framework. It extends `ApiController`, utilizes a `SampleAction` to process requests, and transforms the response using a `SampleTransformer`. Dependencies on `SampleAction` are injected through the constructor.  It takes a `SampleRequest` as input, calls the Action, and transforms the result.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Controllers\\ApiController;\n\nclass Controller extends ApiController\n{\n    public function __construct(\n        private readonly SampleAction $sampleAction,\n    ) {\n    }\n    \n    public function __invoke(SampleRequest $request): array\n    {\n        $sample = $this->sampleAction->run($request);\n        \n        return $this->transform($sample, SampleTransformer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Usage for Multiple Items with Paginator and Transformer\nDESCRIPTION: Shows how to retrieve multiple model instances with pagination and return a transformed paginated response using the transformer. Uses response->paginator() method for handling paginated collections.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// getting many Models Paginated\n$rewards = $this->getRewards();\n\n// building the response with the transformer of the Model\nreturn $this->response->paginator($rewards, new RewardTransformer());\n\n```\n\n----------------------------------------\n\nTITLE: Registering Middlewares in a Container Provider using PHP in Apiato\nDESCRIPTION: This PHP code snippet illustrates how to register middlewares inside an Apiato Container using a MiddlewareServiceProvider class. It extends the parent MiddlewareProvider and defines three arrays for middleware types: general middleware, middleware groups (e.g., 'web' and 'api'), and route-specific middleware. The routeMiddleware array registers JWT package middlewares and the custom 'auth:web' middleware for web authentication. The boot method triggers loading of internal container middlewares, facilitating middleware encapsulation inside containers. This approach depends on Apiato's service provider and middleware structure conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/middlewares.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Authentication\\Providers;\n\nuse App\\Containers\\Authentication\\Middlewares\\WebAuthentication;\nuse App\\Ship\\Parents\\Providers\\MiddlewareProvider;\nuse Tymon\\JWTAuth\\Middleware\\GetUserFromToken;\nuse Tymon\\JWTAuth\\Middleware\\RefreshToken;\n\nclass MiddlewareServiceProvider extends MiddlewareProvider\n{\n\n    protected $middleware = [\n\n    ];\n\n    protected $middlewareGroups = [\n        'web' => [\n\n        ],\n        'api' => [\n\n        ],\n    ];\n\n    protected $routeMiddleware = [\n        'jwt.auth'         => GetUserFromToken::class,\n        'jwt.refresh'      => RefreshToken::class,\n        'auth:web'         => WebAuthentication::class,\n    ];\n\n    public function boot()\n    {\n        $this->loadContainersInternalMiddlewares();\n    }\n\n    public function register()\n    {\n\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching with Hashed IDs in Apiato Repositories\nDESCRIPTION: Shows how to instruct RequestCriteria to decode hashed fields before performing a search by specifying which fields should be treated as hashed IDs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$this->repository->addRequestCriteria(['id', 'parent_id', 'some_hashed_id'])->all();\n```\n\n----------------------------------------\n\nTITLE: Disabling Rate Limiting for Specific Endpoints\nDESCRIPTION: Shows how to disable rate limiting on specific API endpoints by removing the 'api' middleware using the withoutMiddleware method. This allows certain endpoints to bypass the rate limiting restrictions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/framework-features/rate-limiting.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwithoutMiddleware('throttle:api')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Job Class in PHP Using Laravel and APIATO\nDESCRIPTION: This PHP code demonstrates how to define a custom Job class inheriting from the base Job class in the APIATO framework. It includes a constructor for initializing data and a handle method to process the job's logic, suitable for queuing operations. Dependencies include the base Job class and namespaces related to the project structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/jobs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Shipment\\Jobs;\n\nuse App\\Port\\Job\\Abstracts\\Job;\n\nclass CreateAndValidateAddressJob extends Job\n{\n    private $recipients;\n\n    public function __construct(array $recipients)\n    {\n        $this->recipients = $recipients;\n    }\n\n    public function handle()\n    {\n        foreach ($this->recipients as $recipient) {\n            // do whatever you like\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Default Includes PHP\nDESCRIPTION: Demonstrates how to set default includes directly in the transformer.  This snippet defines which relationships (`tags`) are included by default within the transformer.  It requires the relevant `includeTags` function to be defined within the transformer and it's corresponding relationship.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/transformers.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $availableIncludes = [\n    'users',\n];\n\nprotected $defaultIncludes = [\n    'tags',\n];\n\n// ..\n\n```\n\n----------------------------------------\n\nTITLE: Using a Criteria with a Repository (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to apply a defined Criteria to a Repository instance within a Task or Action. The `pushCriteria` method is used to add the `OrderByCreationDateDescendingCriteria` to the repository, ensuring that subsequent query methods like `paginate()` include the criteria's condition.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/criterias.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function run()\n{\n    $this->userRepository->pushCriteria(new OrderByCreationDateDescendingCriteria());\n    return  $this->userRepository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: transform Method Usage\nDESCRIPTION: Illustrates the use of the `transform` method. It takes data, a transformer class, and optional includes and metadata to transform data into a specific response format using a Transformer. It shows how to use includes and metadata, and provides a sample of the generated response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// With Includes\n$this->transform($resource, ResourceTransformer::class, ['foo', 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Defining a Transporter Schema with Required Fields in PHP\nDESCRIPTION: Example of defining a `$schema` within a Transporter class, specifying properties like 'email' and 'password' as required using the 'required' array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n    protected $schema = [\n        'type' => 'object',\n        'properties' => [\n            'email',\n            'password',\n            'clientId',\n            'clientPassword',\n        ],\n        'required'   => [\n            'email',\n            'password',\n            'clientId',\n            'clientPassword',\n        ],\n    ];\n```\n\n----------------------------------------\n\nTITLE: Listing Apiato Generator Commands using Artisan\nDESCRIPTION: This command utilizes the standard Laravel Artisan `list` command, filtered to the `apiato:generate` namespace, to display all available code generation commands provided by the Apiato framework. Running this command in the terminal within an Apiato project root will output a list of generator commands and their descriptions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/framework-features/code-generator.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan list apiato:generate\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Migration in Apiato\nDESCRIPTION: PHP code example demonstrating a Laravel migration class (`CreateDemoTable`) within an Apiato container. It defines the `up` method to create a 'demos' table with standard columns (id, timestamps, softDeletes) using the Schema builder, and the `down` method to drop the table.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/migrations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CreateDemoTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('demos', function (Blueprint $table) {\n            $table->increments('id');\n            // ...\n            $table->timestamps();\n            $table->softDeletes();\n        });\n    }\n\n    public function down()\n    {\n        Schema::drop('demos');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Client Credentials - JSON\nDESCRIPTION: JSON response specifying that the OAuth client authentication failed due to wrong client ID or secret. Includes an error code 'invalid_client' and an explanation in error_description and message fields.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Client authentication failed\",\n  \"message\": \"Client authentication failed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Hashed ID Decoding in Request Class - PHP\nDESCRIPTION: Here, the $decode property lists input fields (e.g., 'user_id', 'item_id') that should be decoded before validation when using hashed IDs. This is required for full compatibility with features such as the Hash ID package in Apiato. Decoded properties become available for validation and logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRequest extends ParentRequest\n{\n    protected array $decode = [\n        'user_id',\n        'item_id',\n    ];\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Searchable Fields in Repository (PHP)\nDESCRIPTION: Shows how to configure searchable fields within a repository using the `$fieldSearchable` property, which is utilized by `RequestCriteria`. You can list field names for exact matching ('='), specify conditions like 'like', or reference related model fields (e.g., 'product.name').\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected $fieldSearchable = [\n    'name',\n    'email',\n    'product.name'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected $fieldSearchable = [\n    'name' => 'like',\n    'email', // Default Condition \"=\"\n    'your_field' => 'condition'\n];\n```\n\n----------------------------------------\n\nTITLE: Applying ModelTrait to Apiato Model (PHP)\nDESCRIPTION: Illustrates how to include the `ModelTrait` in a model class. This trait is essential if the model does not extend the standard Apiato parent Model classes, as it provides necessary functionalities like hash IDs and other framework integrations.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/models.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Apiato\\Core\\Traits\\ModelTrait;\n\nclass Demo\n{\n    use ModelTrait;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Specific Page with URL Parameter (Shell)\nDESCRIPTION: Shows an example HTTP GET request to an API endpoint using the `page` query parameter to retrieve a specific page (page 200 in this case) of paginated data. This parameter is used with endpoints that return lists of records.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/pagination.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\napi.domain.test/endpoint?page=200\n```\n\n----------------------------------------\n\nTITLE: Generating an Action using Artisan Command (Shell)\nDESCRIPTION: Demonstrates the interactive Apiato Artisan command `apiato:generate:action` used to scaffold a new Action class within the appropriate container structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/actions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:action\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Auto-Discovery in Composer.json (JSON)\nDESCRIPTION: This JSON snippet from the main `composer.json` file shows how Laravel's auto-discovery feature is disabled in Apiato by default. The `dont-discover: [\"*\"]` setting prevents Laravel from automatically registering all service providers. To re-enable auto-discovery, remove the `\"*\"` entry from the array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/faq.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"extra\": {\n    \"laravel\": {\n      \"dont-discover\": [\n        \"*\"\n      ]\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Apiato PHP Framework\nDESCRIPTION: Artisan command to run database migrations in an Apiato project, creating the necessary database tables for the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Controlling Sorting via URL Parameters (Text)\nDESCRIPTION: Examples of URL query parameters used with `RequestCriteria` to sort results. The `orderBy` parameter specifies the field to sort by, and `sortedBy` specifies the direction ('asc' for ascending, 'desc' for descending). The default sort order is ascending.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n?orderBy=id&sortedBy=asc\n```\n\nLANGUAGE: text\nCODE:\n```\n?orderBy=created_at&sortedBy=desc\n?orderBy=name&sortedBy=asc\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Route Endpoint in Apiato (PHP)\nDESCRIPTION: Defines a GET route `/hello` that maps to the `sayHello` method of the `Controller` class. This snippet shows how to register an API endpoint in an Apiato application using Laravel's routing syntax.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/samples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/hello', [Controller::class, 'sayHello']);\n```\n\n----------------------------------------\n\nTITLE: Publishing Social Auth Container Configuration (Shell)\nDESCRIPTION: Publishes the configuration file for the social auth container using the Artisan `vendor:publish` command. This copies the default configuration to `app/Ship/Configs/vendor-socialAuth.php`, allowing for customization of providers and other settings.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Example Server API Response for Social Login (JSON)\nDESCRIPTION: Illustrates the JSON response structure returned by the Apiato server endpoint (`auth/{provider}`) after successfully authenticating a user via a social provider (Google in this example). It includes the user's data, optionally embedded social details (if the transformer is updated), and metadata containing a personal access token for subsequent authenticated requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        // user data\n        .\n        .\n        .\n        // additional social data if you have updated your transformer as mentioned above\n        \"social_auth_provider\": \"google\",\n        \"social_id\": \"113834952367767922133\",\n        \"social_avatar\": {\n            \"avatar\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\",\n            \"original\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\"\n        }\n    },\n    \"meta\": {\n        \"include\": [\n            \"roles\"\n        ],\n        \"custom\": {\n            \"token_type\": \"personal\",\n            \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9....\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Listeners Manually\nDESCRIPTION: This code shows how to manually register events and listeners within the `listen` array of the `EventServiceProvider` in a Container. It demonstrates the association between an event (e.g., `OrderShipped`) and its corresponding listener(s) (e.g., `SendShipmentNotification`).\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/events.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Ship\\Parents\\Providers\\EventServiceProvider as ParentEventServiceProvider;\n\nclass EventServiceProvider extends ParentEventServiceProvider\n{\n    protected $listen = [\n        OrderShipped::class => [\n            SendShipmentNotification::class,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination API Endpoint Usage\nDESCRIPTION: This code snippet shows how to use the 'page' parameter in a GET request to paginate through results.  It demonstrates the basic structure of an API endpoint call.  This assumes that pagination is available on the endpoint and will return a paginated response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/pagination.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?page=200\n```\n\n----------------------------------------\n\nTITLE: Sample Profiler Response Structure - JSON\nDESCRIPTION: This snippet demonstrates the structure of a JSON object appended to API responses by the profiler middleware in Apiato. It showcases a realistic response containing metadata, timing measurements, memory usage, route information, logs, queries, and other diagnostic data. There are no external dependencies to parse this JSON, but the actual profiling is powered by the laravel-debugbar package and its configuration in Apiato. The main input is an API request, resulting in an augmented JSON response; outputs include all timing/logging/debug information for the handled request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/profiler.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    // Actual Response Here...\n    \"_profiler\": {\n        \"__meta\": {\n            \"id\": \"X167f293230e3457f1bbd95d9c82aba4a\",\n            \"datetime\": \"2017-09-22 18:45:27\",\n            \"utime\": 1506105927.799299,\n            \"method\": \"GET\",\n            \"uri\": \"/\",\n            \"ip\": \"172.20.0.1\"\n        },\n        \"messages\": {\n            \"count\": 0,\n            \"messages\": []\n        },\n        \"time\": {\n            \"start\": 1506105922.742068,\n            \"end\": 1506105927.799333,\n            \"duration\": 5.057265043258667,\n            \"duration_str\": \"5.06s\",\n            \"measures\": [\n                {\n                    \"label\": \"Booting\",\n                    \"start\": 1506105922.742068,\n                    \"relative_start\": 0,\n                    \"end\": 1506105923.524004,\n                    \"relative_end\": 1506105923.524004,\n                    \"duration\": 0.7819359302520752,\n                    \"duration_str\": \"781.94ms\",\n                    \"params\": [],\n                    \"collector\": null\n                },\n                {\n                    \"label\": \"Application\",\n                    \"start\": 1506105923.535343,\n                    \"relative_start\": 0.7932748794555664,\n                    \"end\": 1506105927.799336,\n                    \"relative_end\": 0.00000286102294921875,\n                    \"duration\": 4.26399302482605,\n                    \"duration_str\": \"4.26s\",\n                    \"params\": [],\n                    \"collector\": null\n                }\n            ]\n        },\n        \"memory\": {\n            \"peak_usage\": 13234248,\n            \"peak_usage_str\": \"12.62MB\"\n        },\n        \"exceptions\": {\n            \"count\": 0,\n            \"exceptions\": []\n        },\n        \"route\": {\n            \"uri\": \"GET /\",\n            \"middleware\": \"api, throttle:30,1\",\n            \"domain\": \"http://api.apiato.test\",\n            \"as\": \"apis_root_page\",\n            \"controller\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\\\\Controller@apiRoot\",\n            \"namespace\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\",\n            \"prefix\": \"/\",\n            \"where\": [],\n            \"file\": \"app/Containers/Welcome/UI/API/Controllers/Controller.php:20-25\"\n        },\n        \"queries\": {\n            \"nb_statements\": 0,\n            \"nb_failed_statements\": 0,\n            \"accumulated_duration\": 0,\n            \"accumulated_duration_str\": \"0μs\",\n            \"statements\": []\n        },\n        \"swiftmailer_mails\": {\n            \"count\": 0,\n            \"mails\": []\n        },\n        \"logs\": {\n            \"count\": 3,\n            \"messages\": [\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694807\n                },\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694811\n                },\n                {\n                    \"message\": \"[2017-09-18 17:38:15] testing.INFO: New User registration. ID = 970ylqvaogmxnbdr | Email = apiato@mail.test.      Thank you for signing up.\\n</div>\\n</body>\\n</html>\\n  \\n\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"info\",\n                    \"time\": 1506105927.694812\n                }\n            ]\n        },\n        \"auth\": {\n            \"guards\": {\n                \"web\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\",\n                \"api\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\"\n            },\n            \"names\": \"\"\n        },\n        \"gate\": {\n            \"count\": 0,\n            \"messages\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining auth Property Example\nDESCRIPTION: This code snippet defines and illustrates the use of the `$auth` property in a functional test. It indicates whether the API endpoint requires authentication. The example sets `$auth` to `false` for a 'list users' endpoint, meaning it does not need authentication. You can override this behavior for individual tests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass ListUsersTest extends ApiTestCase\n{\n    protected string $endpoint = 'get@v1/users';\n    // highlight-start\n    protected bool $auth = false;\n    // highlight-end\n    \n    public function testListUsers(): void\n    {\n        $response = $this->makeCall();\n        // You can override the \"auth\" property in specific test methods\n        // $response = $this->auth(true)->makeCall();\n        \n        $response->assertOk();\n        // other assertions...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Default Values While Sanitizing Input - PHP\nDESCRIPTION: This snippet illustrates providing default values in the sanitizeInput method's field list. If 'name' or 'product.company.address' are missing from the incoming request, their default values are assigned in the sanitized data. Highlights support for dot notation and the utility for partial updates or form defaults.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$sanitizedData = $request->sanitizeInput([\n    'name' => 'John', // If name is not provided, the default value will be set\n    'product.company.address' => 'Somewhere in the world', // dot notation is supported\n    'email',\n    'password'\n]);\n```\n\n----------------------------------------\n\nTITLE: Calling Apiato Action run Method Using Facade and Helper Functions in PHP\nDESCRIPTION: Demonstrates various approaches to invoke the 'run' method of an Apiato Action class using the Apiato facade with caller style or full class name, and with helper call functions. It shows flexibility in executing business logic encapsulated in Action classes, requiring the Apiato framework and relevant Action classes like 'GetDriversAction'. The inputs typically include a request parameter such as an ID, and the output is expected to be the result of the business logic execution. No complex limitations are stated but context requires a properly configured Apiato application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/software-architectural-patterns.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$user = \\Apiato::call('Car@GetDriversAction', [$request->id]);\n$user = \\Apiato::call(GetDriversAction::class, [$request->id]);\n$user = $this->call(GetDriversAction::class, [$request->id]);\n$user = $this->call('Car@GetDriversAction', [$request->id]);\n```\n\n----------------------------------------\n\nTITLE: Sample Controller Method Handling the Request in PHP\nDESCRIPTION: This controller method 'sayHello' handles incoming requests after routing, verifying user access via the request object, calling a business logic action ('SayHelloAction'), and returning the result in a JSON response. The method depends on the Apiato base controller and uses the 'json' helper method to send client data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Controller extends ApiController\n{\n\tpublic function sayHello(SayHelloRequest $request)\n\t{\n            $helloMessage = Apiato::call(SayHelloAction::class);\n\n            $this->json([\n                $helloMessage\n            ]);\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Request Input with Dot Notation - PHP\nDESCRIPTION: Demonstrates use of the sanitizeInput helper method to extract a defined set of fields (using dot notation) from a JSON request payload. This approach ensures only specific fields (including nested ones) are retained, with non-existent fields omitted and empty strings converted to null by Laravel. Data sanitization reduces conditional code and prepares structures for further consumption.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$data = $request->sanitizeInput([\n    'data.description',\n    'data.is_private',\n    'data.address',\n    'data.foo.number',\n    'email', // will be ignored\n    'meta',\n]);\n```\n\n----------------------------------------\n\nTITLE: Passing Bearer Token in API Request with PHP Guzzle\nDESCRIPTION: Demonstrates how to make an authenticated API request to an Apiato endpoint by passing a Bearer token in the Authorization header using Laravel's HTTP facade and Guzzle library.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::withHeaders([\n    'Accept' => 'application/json',\n    'Authorization' => 'Bearer '.$accessToken,\n])->get('http://api.apiato.test/v1/users');\n\nreturn $response->json();\n```\n\n----------------------------------------\n\nTITLE: Defining a Web Authentication Middleware in PHP for Apiato\nDESCRIPTION: This PHP snippet defines a WebAuthentication middleware class within the Authentication container of the Apiato framework. It extends the base Middleware class and uses Laravel's Guard contract to verify user authentication status. If the user is unauthenticated (guest), it returns a login view with an error message; otherwise, it passes the request to the next middleware. Dependencies include Laravel's Request and Closure classes, and it uses the ContainersButler facade to resolve the login page view name.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/middlewares.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Authentication\\Middlewares;\n\nuse App\\Ship\\Engine\\Butlers\\Facades\\ContainersButler;\nuse App\\Ship\\Parents\\Middlewares\\Middleware;\nuse Closure;\nuse Illuminate\\Contracts\\Auth\\Guard;\nuse Illuminate\\Http\\Request;\n\n/**\n * Class WebAuthentication\n *\n * @author  Mahmoud Zalt  <mahmoud@zalt.me>\n */\nclass WebAuthentication extends Middleware\n{\n\n    protected $auth;\n\n    public function __construct(Guard $auth)\n    {\n        $this->auth = $auth;\n    }\n\n    public function handle(Request $request, Closure $next)\n    {\n        if ($this->auth->guest()) {\n            return response()->view(ContainersButler::getLoginWebPageName(), [\n                'errorMessage' => 'Credentials Incorrect.'\n            ]);\n        }\n\n        return $next($request);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Spy for Repository Methods - PHP\nDESCRIPTION: This code snippet illustrates how to create a spy to check if a repository method is called within an Action or Task. It uses the `createSpyWithRepository` method to create a spy for a given task and repository, and then asserts that the desired method has been called with the expected parameters.  It depends on the CreateUserTask and UserRepository classes and is used to verify interactions between them.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function testCanCreateUser(): void\n{\n    $data = [\n        'email' => 'gandalf@the.grey',\n        'password' => 'you-shall-not-pass',\n    ];\n    $taskSpy = $this->createSpyWithRepository(CreateUserTask::class, UserRepository::class);\n    $action = app(CreateUserAction::class);\n\n    $action->run($data);\n    \n    $taskSpy->shouldHaveReceived('run')->once()->with($data);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MainServiceProvider in Apiato Container\nDESCRIPTION: Example of a MainServiceProvider class that extends MainProvider in Apiato. Shows how to register container-specific service providers and aliases that will be automatically loaded by the framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/providers.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass MainServiceProvider extends MainProvider\n{\n    // These providers will we automatically registered\n    public array $serviceProviders = [\n        PassportServiceProvider::class,\n        AuthProvider::class,\n        MiddlewareServiceProvider::class\n        // ...\n    ];\n\n    public array $aliases = [\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Resources via HTTP POST - RESTful Relationships - bash\nDESCRIPTION: Shows how to create a nested resource (e.g., a driver for a specific car) with an HTTP POST request to a parent-child endpoint. The parent resource identifier appears in the URI to associate the new child resource correctly. Input data and permissions depend on API design.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPOST http://www.api.apiato.test/v1/cars/123/drivers\n```\n\n----------------------------------------\n\nTITLE: Overriding Factory Values in PHP\nDESCRIPTION: This code demonstrates how to override default values generated by a factory. It first creates an Offer instance using the factory. Then, it manually sets the `user_id` attribute before saving the model.  The second example demonstrates how to do this for multiple accounts.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/factories.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// creating single Offer and setting a user id\n$offer = factory(Offer::class)->make();\n$offer->user_id = $user->id;\n$offer->save();\n\n// ANOTHER EXAMPLE:\n\n// creating multiple Accounts\nfactory(Account::class, 3)->make()->each(function ($account) use ($user) {\n    $account->user_id = $user->id;\n    $account->save();\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Protected Endpoint with Bearer Token (cURL)\nDESCRIPTION: Shows how to use `curl` to make a GET request to a protected Apiato endpoint. It includes the required `Accept: application/json` header and the `Authorization: Bearer {Token}` header, where `{Token}` should be replaced with a valid access token obtained after authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/requests.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET -H \"Accept: application/json\" -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\" \"http://api.domain.test/v1/users\"\n```\n\n----------------------------------------\n\nTITLE: Setting Results per Page with URL Parameter (Shell)\nDESCRIPTION: Provides an example HTTP GET request using the `limit` query parameter to specify that 100 results should be returned per page for the requested endpoint. This overrides the default pagination limit for this specific request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/pagination.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\napi.domain.test/endpoint?limit=100\n```\n\n----------------------------------------\n\nTITLE: Using the '$access' Property (String Notation) in Apiato Requests (PHP)\nDESCRIPTION: Demonstrates defining access control rules using the `$access` property in an Apiato Request (`DeleteUserRequest`) with pipe-separated strings for permissions and roles. This configuration is checked by the `hasAccess` function, typically called within the `authorize()` method's `check()` array, to control endpoint access based on user roles and permissions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass DeleteUserRequest extends Request\n{\n    /**\n     * Define which Roles and/or Permissions has access to this request.\n     *\n     * @var  array\n     */\n    protected $access = [\n        'permission' => 'delete-users|another-permissions',\n        'roles' => 'manager'\n    ];\n\n    public function authorize()\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n            'isKing',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Web Authentication Middleware PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the `auth:web` middleware to protect a web endpoint from unauthenticated users. It defines a route that uses the middleware, meaning that the user must be authenticated before accessing the `showPrivatePage` controller method. If not authenticated, users are redirected to a login page. The login page view URL can be customized within the Apiato configuration file. Prerequisites: Apiato framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$router->get('private/page', [\n    'uses'       => 'Controller@showPrivatePage',\n    'middleware' => [\n        'auth:web',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Roles and Permissions for Access - PHP\nDESCRIPTION: This snippet shows the use of arrays and pipe-delimited strings in the $access property to define several required permissions or roles. Apiato allows both formatting styles for declaring access control lists, providing flexibility in authorization requirements for a Request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRequest extends ParentRequest\n{\n    protected $access = [\n        'permissions' => ['delete-users', 'another-permissions'],\n        'roles' => 'manager|admin',\n    ];\n        \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mail Notification Using Apiato Mail Facade in PHP\nDESCRIPTION: This PHP snippet demonstrates how to send a mail notification from within an Action or Task by using the Mail facade's send method. It sends an instance of the UserRegisteredMail class, passing a User object. It requires the UserRegisteredMail class to be defined and the mail system properly configured. The input is a User object and the output is the triggering of the mail sending process, typically queued if configured.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/mails.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nMail::send(new UserRegisteredMail($user));\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Class in PHP\nDESCRIPTION: This code example demonstrates how to define a custom exception class named `DemoException`.  It extends the `ParentException` class, setting a specific HTTP code and message. This class is designed to handle specific application errors. It overrides default properties, and ensures that exceptions have a code and message property.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/exceptions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Exceptions\\Exception as ParentException;\n\nclass DemoException extends ParentException\n{\n    protected $code = Response::HTTP_CONFLICT;\n    protected $message = 'This is a demo exception.';\n}\n```\n\n----------------------------------------\n\nTITLE: Profiler Response Example - JSON\nDESCRIPTION: This JSON snippet provides an example of the data returned by the Laravel Debugbar profiler when enabled in the Apiato framework. It contains various performance metrics and debugging information such as request metadata, timing data, memory usage, exception information, route details, database queries, logs, authentication data, and gate information. This data helps developers to analyze and optimize application performance.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/framework-features/profiler.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"_profiler\": {\n        \"__meta\": {\n            \"id\": \"X167f293230e3457f1bbd95d9c82aba4a\",\n            \"datetime\": \"2017-09-22 18:45:27\",\n            \"utime\": 1506105927.799299,\n            \"method\": \"GET\",\n            \"uri\": \"/\",\n            \"ip\": \"172.20.0.1\"\n        },\n        \"messages\": {\n            \"count\": 0,\n            \"messages\": []\n        },\n        \"time\": {\n            \"start\": 1506105922.742068,\n            \"end\": 1506105927.799333,\n            \"duration\": 5.057265043258667,\n            \"duration_str\": \"5.06s\",\n            \"measures\": [\n                {\n                    \"label\": \"Booting\",\n                    \"start\": 1506105922.742068,\n                    \"relative_start\": 0,\n                    \"end\": 1506105923.524004,\n                    \"relative_end\": 1506105923.524004,\n                    \"duration\": 0.7819359302520752,\n                    \"duration_str\": \"781.94ms\",\n                    \"params\": [],\n                    \"collector\": null\n                },\n                {\n                    \"label\": \"Application\",\n                    \"start\": 1506105923.535343,\n                    \"relative_start\": 0.7932748794555664,\n                    \"end\": 1506105927.799336,\n                    \"relative_end\": 0.00000286102294921875,\n                    \"duration\": 4.26399302482605,\n                    \"duration_str\": \"4.26s\",\n                    \"params\": [],\n                    \"collector\": null\n                }\n            ]\n        },\n        \"memory\": {\n            \"peak_usage\": 13234248,\n            \"peak_usage_str\": \"12.62MB\"\n        },\n        \"exceptions\": {\n            \"count\": 0,\n            \"exceptions\": []\n        },\n        \"route\": {\n            \"uri\": \"GET /\",\n            \"middleware\": \"api, throttle:30,1\",\n            \"domain\": \"http://api.apiato.test\",\n            \"as\": \"apis_root_page\",\n            \"controller\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\\\\Controller@apiRoot\",\n            \"namespace\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\",\n            \"prefix\": \"/\",\n            \"where\": [],\n            \"file\": \"app/Containers/Welcome/UI/API/Controllers/Controller.php:20-25\"\n        },\n        \"queries\": {\n            \"nb_statements\": 0,\n            \"nb_failed_statements\": 0,\n            \"accumulated_duration\": 0,\n            \"accumulated_duration_str\": \"0μs\",\n            \"statements\": []\n        },\n        \"logs\": {\n            \"count\": 3,\n            \"messages\": [\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694807\n                },\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694811\n                },\n                {\n                    \"message\": \"[2017-09-18 17:38:15] testing.INFO: New User registration. ID = 970ylqvaogmxnbdr | Email = apiato@mail.test.      Thank you for signing up.\\n</div>\\n</body>\\n</html>\\n  \\n\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"info\",\n                    \"time\": 1506105927.694812\n                }\n            ]\n        },\n        \"auth\": {\n            \"guards\": {\n                \"web\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\",\n                \"api\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\"\n            },\n            \"names\": \"\"\n        },\n        \"gate\": {\n            \"count\": 0,\n            \"messages\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Registration Flow Diagram\nDESCRIPTION: Visual representation of how middlewares are registered in the folder structure, illustrating the flow from service provider loading to middleware being registered in the HttpKernel or relevant providers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/middlewares.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Container\n    MainServiceProvider\n    MiddlewareServiceProvider\n    DemoMiddleware\n  end\n  \n  MainServiceProvider -->|loads| MiddlewareServiceProvider\n  MiddlewareServiceProvider -->|registered in| MainServiceProvider\n  DemoMiddleware -->|registered in| MiddlewareServiceProvider\n  \n  subgraph Ship\n    HttpKernel\n    ShipDemoMiddleware\n  end\n\n  subgraph Application\n    SPLoader[[Service Provider Loader]]-- loads-->MainServiceProvider\n    SPLoader-- loads-->HttpKernel\n  end\n  \n  HttpKernel -->|loads| ShipDemoMiddleware\n  ShipDemoMiddleware -->|registered in| HttpKernel\n```\n\n----------------------------------------\n\nTITLE: Validating URL Parameters in Apiato Request PHP\nDESCRIPTION: This snippet demonstrates how to validate URL parameters using the `$urlParameters` property. By listing parameter names (`id`, `code`) in this array, Apiato makes them available for validation within the `rules()` method and accessible like regular request input. This allows applying validation rules to parameters like `/users/{id}/confirm/{code}`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass ConfirmUserEmailRequest extends Request\n{\n    protected array $urlParameters = [\n        'id',\n        'code',\n    ];\n\n    public function rules(): array\n    {\n        return [\n            'id'   => 'required|integer', // url parameter\n            'code' => 'required|min:35|max:45', // url parameter\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Container Structure with Service Providers in Markdown\nDESCRIPTION: This diagram shows the folder structure of the Apiato framework, highlighting the relationships between different service providers across containers and the Ship directory. It demonstrates how MainServiceProvider serves as the registration point for other service providers in each container.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       ├── ContainerA\n│       │   └── Providers\n│       │       ├── CustomServiceProvider.php ─────────►────────┐\n│       │       ├── EventServiceProvider.php  ─────────►────────┤\n│       │       ├── MainServiceProvider.php  ◄──registered─in─◄─┘\n│       │       └── ...\n│       └── ContainerB\n│           └── Providers\n│               ├── AnotherCustomServiceProvider.php ────────►────────┐\n│               ├── EventServiceProvider.php         ────────►────────┤\n│               ├── MainServiceProvider.php        ◄──registered─in─◄─┤\n│               ├── MiddlewareServiceProvider.php    ────────►────────┘\n│               └── ...\n└── Ship\n    └── Providers\n        ├── CustomGeneralServiceProvider.php ────────►────────┐\n        ├── RouteServiceProvider.php         ────────►────────┤\n        ├── ShipProvider.php               ◄──registered─in─◄─┘\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller with Apiato\nDESCRIPTION: This command is used to generate a new controller within the Apiato framework. It uses the `apiato:generate:controller` artisan command to interactively create the necessary files and folder structure for a controller.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:controller\n```\n\n----------------------------------------\n\nTITLE: Documenting API Endpoint with ApiDocJs (PHP)\nDESCRIPTION: Illustrates how to document a specific API endpoint within an Apiato route file using ApiDocJs docblock comments. It defines metadata like API group, name, method, path, description, version, permissions, headers, parameters, and structured success/error response examples for automatic documentation generation. Docblocks must be placed directly above the route definition.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @apiGroup           Authentication\n * @apiName            UserLogin\n * @api                {post} /clients/web/login User Login\n * @apiDescription     Description Here....\n * @apiVersion         1.0.0\n * @apiPermission      none\n *\n * @apiHeader          Accept application/json\n *\n * @apiParam           {String}     email\n * @apiParam           {String}     password\n *\n * @apiSuccessExample  {json}       Success-Response:\n *   HTTP/1.1 200 OK\n *   {\n *     \"data\": {\n *       \"id\": \"XbPW7awNkzl83LD6\",\n *       \"name\": \"Super Admin\",\n *       \"email\": \"admin@admin.com\"\n *       ...\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"401 Credentials Incorrect.\",\n *      \"status_code\":401\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"Invalid Input.\",\n *      \"errors\":{\n *         \"email\":[\n *            \"The email field is required.\"\n *         ]\n *      },\n *      \"status_code\":422\n *   }\n */\n\nuse App\\Containers\\AppSection\\Authentication\\UI\\API\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::post('clients/web/login', [Controller::class, 'proxyLoginForWebClient']);\n```\n\n----------------------------------------\n\nTITLE: Defining Searchable Fields for Laravel Repository in PHP\nDESCRIPTION: This PHP snippet illustrates setting the $fieldSearchable property in an apiato or Laravel Repository to configure searchable model fields. It supports specifying fields with or without query operators (e.g., 'like', '='). This enables flexible keyword searching in HTTP GET request parameters (?search=). Dependency: Repository extending the L5 Repository package. Input: fields with optional search operators. Output: internal configuration for search queries.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nprotected $fieldSearchable = [\n    'name',\n    'email',\n    // ...\n];\n\n// OR\n\nprotected $fieldSearchable = [\n    'name'  => 'like',\n    'email' => '=',\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Applying a Criteria to a Repository in PHP\nDESCRIPTION: This code snippet shows how to apply the `IsNullCriteria` to a UserRepository using the `pushCriteria` method and then paginate the results. It demonstrates the process of checking for null email values and retrieving paginated user data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/criterias.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function run()\n{\n    $this->repository->pushCriteria(new IsNullCriteria('email'));\n    return $this->repository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Config Values PHP\nDESCRIPTION: Illustrates how to retrieve values from a container-specific configuration file in PHP using both the Laravel `Config::get()` facade and the `config()` helper function. The configuration key is accessed using dot notation, combining the config file name (without `.php`) and the desired key.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/configs.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$value = Config::get('{section-name}-{container-name}.namespace');     // returns 'App'\n$value = config('{section-name}-{container-name}.namespace');          // same, but using laravel helper function\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Scheduler with Cron in Unix Shell\nDESCRIPTION: This shell snippet demonstrates how to configure the Unix cron daemon to invoke the Laravel scheduler every minute by editing the current user's cron table. It adds a line calling 'php /path-to-your-project/artisan schedule:run', redirecting output to /dev/null to prevent email notifications. The path should be changed to the actual Laravel installation. This setup requires a Unix-like OS with cron and PHP installed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tasks-scheduling.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n* * * * * php /path-to-your-project/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Languages\nDESCRIPTION: This code provides an example of how to define supported languages in the `vendor-localization.php` config file. This configuration is essential to restrict users from requesting unsupported languages. The example includes both simple language codes and languages with region specifications.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/localization.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'supported_languages' => [\n    'ar',\n    'en' => [\n        'en-GB',\n        'en-US',\n    ],\n    'es',\n    'fr',\n    'fa',\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring fieldSearchable Property for API Query Parameters\nDESCRIPTION: Shows how to configure the fieldSearchable property in a repository to enable API query parameters like search, allowing filtering data through the API.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/repositories.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\tprotected $fieldSearchable = [\n      'name'  => 'like',\n      'email' => '=',\n\t];\n```\n\n----------------------------------------\n\nTITLE: Debugging Custom Exceptions with Logged Information in PHP\nDESCRIPTION: This snippet shows how to throw an AccountFailedException instance while attaching debugging information by passing an exception or string to the debug() method. It helps developers log internal exceptions or debug messages alongside the thrown exception in Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/exceptions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nthrow (new AccountFailedException())->debug($e); // debug() accepts string or \\Exception instance\n```\n\n----------------------------------------\n\nTITLE: Apiato Event/Listener Directory Structure (php)\nDESCRIPTION: Illustrates the standard folder structure within an Apiato application where events, listeners, and their respective registration points (`EventServiceProvider`) are located. It highlights the `EventServiceProvider.php` files in both the container and ship layers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/events.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           ├── Events\n│           │   ├── DemoEvent.php\n│           │   └── ...\n│           ├── Listeners\n│           │   ├── DemoListener.php\n│           │   └── ...\n│           └── Providers\n                // highlight-start\n│               ├── EventServiceProvider.php\n                // highlight-end\n│               └── ...\n└── Ship\n    ├── Events\n    │   ├── ShipDemoEvent.php\n    │   └── ...\n    ├── Listeners\n    │   ├── ShipDemoListener.php\n    │   └── ...\n    └── Providers\n        // highlight-start\n        ├── EventServiceProvider.php\n        // highlight-end\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications via Notifiable Trait in PHP\nDESCRIPTION: Shows an alternative method for sending notifications in PHP. It involves retrieving a notifiable model instance (like User, which uses the `Illuminate\\Notifications\\Notifiable` trait) and calling the `notify` method directly on the object.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/notifications.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// get any user\n$user = User::firstOrCreate([\n    'name' => 'Mahmoud Zalt',\n    'email' => 'mail@something.com',\n    'phone' => '0096123456789',\n]);\n\n// call notify, found on the Notifiable trait\n$user->notify(new BirthdayReminderNotification($notificationMessage));\n```\n\n----------------------------------------\n\nTITLE: Example Apiato Validation Error Response (Multiple Fields - JSON)\nDESCRIPTION: Shows the JSON format for an Apiato validation error response when multiple input fields fail validation. Similar to the single field error, it contains a general `message`, but the `errors` object includes entries for each field that failed validation (`email` and `password` in this case), along with their respective error message arrays.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/validation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ],\n    \"password\": [\n      \"The password field is required.\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Web Controller Example\nDESCRIPTION: This is an example of a Web controller in Apiato. It extends the `WebController` class and returns a view. It demonstrates how a web request is handled and a view is rendered.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Ship\\Parents\\Controllers\\WebController;\n\nclass Controller extends WebController\n{\n    public function show(): Factory|View|Application\n    {\n        return view('sectionName@containerName::view-name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing environment files for configuration consistency\nDESCRIPTION: No code snippets are provided, but the step involves comparing .env and .env-example files to ensure environment configurations are properly updated after upgrade.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Seeding Database with Initial Data in Apiato PHP Framework\nDESCRIPTION: Artisan command to seed the database with initial data in an Apiato project. Should be run after migrations are complete.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Configure Token Expiration Durations in Apiato - PHP Configuration\nDESCRIPTION: Snippet from the apiato.php configuration file showing how to set access and refresh token expiration durations in days through environment variables. Defaults are set to 3650 days (10 years). This config is used by the authentication system to govern token lifetimes. Adjusting these values requires changes to token issuance logic if switching from days to minutes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Access Token Expiration\n|--------------------------------------------------------------------------\n|\n| In Days. Default to 3650 days = 10 years\n|\n*/\n'expires-in' => env('API_TOKEN_EXPIRES', 3650),\n\n/*\n|--------------------------------------------------------------------------\n| Refresh Token Expiration\n|--------------------------------------------------------------------------\n|\n| In Days. Default to 3650 days = 10 years\n|\n*/\n'refresh-expires-in' => env('API_REFRESH_TOKEN_EXPIRES', 3650),\n```\n\n----------------------------------------\n\nTITLE: Request Payload Containing Encoded IDs - JSON\nDESCRIPTION: This sample JSON exhibits a scenario where a request includes an encoded identifier ('id'). This data illustrates how the getInputByKey API will differ from standard input retrieval by decoding such fields first if decoding is configured.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"XbPW7awNkzl83LD6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting in Apiato using PHP\nDESCRIPTION: This PHP code snippet shows the configuration options for rate limiting within the Apiato framework. It reads values from environment variables to determine if rate limiting is enabled, the number of allowed attempts, and the expiration time in minutes. The configuration is typically found in `app/Ship/Configs/apiato.php`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/rate-limiting.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n'throttle' => [\n    'enabled' => env('API_RATE_LIMIT_ENABLED', true),\n    'attempts' => env('API_RATE_LIMIT_ATTEMPTS', '30'),\n    'expires' => env('API_RATE_LIMIT_EXPIRES', '1'),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-Based Access Control - PHP\nDESCRIPTION: This snippet demonstrates how to configure role-based access control in Apiato to allow certain roles to access all endpoints without explicitly defining them in each Request object. The specified roles (e.g., 'admin') will bypass authorization checks for all routes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'requests' => [\n    'allow-roles-to-access-all-routes' => ['admin'],\n],\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Generator Commands\nDESCRIPTION: This command shows how to access help information for individual generator commands, by adding `--help` to the command. It is used to view available options to pass to the command, providing more control over generated files. It requires `php artisan` and the specific generator command as input.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/code-generator.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nphp artisan apiato:generate:route --help\n```\n\n----------------------------------------\n\nTITLE: Decoding Hashed IDs in Apiato Request PHP\nDESCRIPTION: This snippet shows how to use the `$decode` protected property in an Apiato Request class (`AssignUserToRoleRequest`). Listing parameter names in this array instructs Apiato to automatically decode their corresponding values (assuming HashID is enabled) before validation rules are applied. This is crucial for validation rules like `exists`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass AssignUserToRoleRequest extends Request\n{\n    protected array $decode = [\n        'user_id',\n        'item_id',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting No Criteria Pushed to Repository in PHP\nDESCRIPTION: The `assertNoCriteriaPushedToRepository` method asserts that no Criteria objects are pushed onto a specified Repository class when a certain action is performed. It takes the Repository class name as an argument. This is useful for verifying conditional logic that should *not* apply criteria.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function testCanListAllUsers(): void\n{\n    $this->assertNoCriteriaPushedToRepository(UserRepository::class);\n    $task = app(ListUsersTask::class);\n\n    $task->admin(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Apiato's Ship Layer\nDESCRIPTION: Implementation of the HttpKernel class for registering global middleware in the Ship layer. This defines application-wide middleware stacks, middleware groups, route-specific middleware, and their priority order.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/middlewares.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass HttpKernel extends LaravelHttpKernel\n{\n    /**\n     * The application's global HTTP middleware stack.\n     *\n     * These middleware are run during every request to your application.\n     *\n     * @var array\n     */\n    protected $middleware = [\n        // Laravel middleware's\n        // \\App\\Http\\Middleware\\TrustHosts::class,\n        TrustProxies::class,\n        HandleCors::class,\n        PreventRequestsDuringMaintenance::class,\n        ValidatePostSize::class,\n        TrimStrings::class,\n        ConvertEmptyStringsToNull::class,\n    ];\n\n    /**\n     * The application's route middleware groups.\n     *\n     * @var array\n     */\n    protected $middlewareGroups = [\n        'web' => [\n            EncryptCookies::class,\n            AddQueuedCookiesToResponse::class,\n            StartSession::class,\n//             \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n            ShareErrorsFromSession::class,\n            VerifyCsrfToken::class,\n            SubstituteBindings::class,\n        ],\n\n        'api' => [\n            // Note: The \"throttle\" Middleware is registered by the RoutesLoaderTrait in the Core\n            SubstituteBindings::class,\n            ValidateJsonContent::class,\n            ProcessETagHeadersMiddleware::class,\n            ProfilerMiddleware::class,\n        ],\n    ];\n\n    /**\n     * The application's route middleware.\n     *\n     * These middleware may be assigned to groups or used individually.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'auth' => Authenticate::class,\n        // 'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'cache.headers' => SetCacheHeaders::class,\n        // Note: The \"can\" Middleware is registered by MiddlewareServiceProvider in Authorization Container\n        // 'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        // Note: The \"guest\" Middleware is registered by MiddlewareServiceProvider in Authentication Container\n        // 'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'password.confirm' => RequirePassword::class,\n        'signed' => ValidateSignature::class,\n        'throttle' => ThrottleRequests::class,\n        'verified' => EnsureEmailIsVerified::class,\n    ];\n\n    /**\n     * The priority-sorted list of middleware.\n     *\n     * Forces non-global middleware to always be in the given order.\n     *\n     * @var string[]\n     */\n    protected $middlewarePriority = [\n        EncryptCookies::class,\n        StartSession::class,\n        ShareErrorsFromSession::class,\n        Authenticate::class,\n        ThrottleRequests::class,\n        AuthenticateSession::class,\n        SubstituteBindings::class,\n        Authorize::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Event/Listener Registration Flow Diagram (mermaid)\nDESCRIPTION: A visual diagram using Mermaid syntax illustrating the flow of how service providers, including event service providers, are loaded by the application's Service Provider Loader and how events and listeners are registered within them.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/events.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Container\n    MainServiceProvider\n    EventServiceProvider\n    DemoEvent\n    DemoListener\n  end\n  \n  MainServiceProvider -->|loads| EventServiceProvider\n  EventServiceProvider -->|registered in| MainServiceProvider\n  DemoEvent -->|registered in| EventServiceProvider\n  DemoListener -->|registered in| EventServiceProvider\n  \n  subgraph Ship\n    ShipProvider\n    ShipEventServiceProvider[EventServiceProvider]\n    ShipDemoEvent\n    ShipDemoListener\n  end\n\n  subgraph Application\n    SPLoader[[Service Provider Loader]]-- loads-->MainServiceProvider\n    SPLoader-- loads-->ShipProvider\n  end\n  \n  ShipProvider -->|loads| ShipEventServiceProvider\n  ShipEventServiceProvider -->|registered in| ShipProvider\n  ShipDemoEvent -->|registered in| ShipEventServiceProvider\n  ShipDemoListener -->|registered in| ShipEventServiceProvider\n```\n\n----------------------------------------\n\nTITLE: transform and withMeta Combination\nDESCRIPTION: Demonstrates how to use the `withMeta` method in conjunction with the `transform` method to include metadata in the response. The `withMeta` method adds metadata to the meta key. The `transform` method is then used to transform the data and also include the meta data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$metaData = ['foo' => 999, 'bar'];\n\n$this->withMeta($metaData)->transform($sample, SampleTransformer::class, meta: ['foo' => 'bar', 'baz' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Using getHashedKey for IDs in PHP\nDESCRIPTION: Demonstrates how to retrieve an ID from a model using the getHashedKey() method within Apiato. This method automatically returns the hashed ID if HASH_ID is enabled, or the original ID otherwise, ensuring consistency in data output, particularly within transformers. It requires the model to use the `Apiato\\Core\\Traits\\HashIdTrait`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/hash-id.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'id' => $user->getHashedKey(),\n```\n\n----------------------------------------\n\nTITLE: Action UI Setting Example\nDESCRIPTION: Demonstrates how to set the UI type for an Action, enabling different behavior based on UI context. This example shows how to set the UI type to 'web' using `setUI` and how to retrieve it using `getUI`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$action = app(Action::class);\n$action->setUI('web');\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Token Response (JSON)\nDESCRIPTION: This is the typical JSON response received after a successful Client Credentials Grant request. It includes the token type, expiration time, access token, and refresh token. This token is used to authorize subsequent requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400,\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni...\",\n  \"refresh_token\": \"ZFDPA1S7H8Wydjkjl+xt+hPGWTagX...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Failed Response (JSON)\nDESCRIPTION: This is a typical JSON response for authentication failure. It is the default response, providing a message indicating the reason for the failure and an empty array for errors.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"An Exception occurred when trying to authenticate the User.\",\n  \"errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Apiato Project Folder Structure Example\nDESCRIPTION: Demonstrates the recommended directory structure for organizing helper files in Apiato, showing both container-specific and general helper file locations.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/helpers.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Helpers\n│               ├── helpers.php\n│               ├── mix.php\n│               └── ...\n└── Ship\n    └── Helpers\n        ├── another-helper.php\n        ├── and-another.php\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Registration Mail in PHP using Apiato\nDESCRIPTION: Example of a mail class for user registration that extends the parent Mail class and implements ShouldQueue for queueing capabilities. It demonstrates how to set up the email recipient and template data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/mails.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Mails;\n\nuse App\\Containers\\User\\Models\\User;\nuse Illuminate\\Bus\\Queueable;\nuse App\\Ship\\Parents\\Mails\\Mail;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass UserRegisteredMail extends Mail implements ShouldQueue\n{\n    use Queueable;\n\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function build()\n    {\n        return $this->view('user::user-registered')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: deleted Method Usage\nDESCRIPTION: This code demonstrates the `deleted` method. It returns a response with a 202 status code, generally to indicate success with asynchronous deletion. It takes the deleted model as input and returns a message indicating successful deletion.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->deleted($deletedModel)\n```\n\n----------------------------------------\n\nTITLE: Creating Apiato Project with Custom Git Branch in PHP\nDESCRIPTION: Command to create a new Apiato project with Git repository initialization and a custom initial branch name using the Apiato Installer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\napiato new my-api --git --branch=\"main\"\n```\n\n----------------------------------------\n\nTITLE: Pagination Metadata JSON Structure in API Response\nDESCRIPTION: This snippet illustrates the 'meta' object structure returned alongside paginated data, including counts, current page info, total pages, and navigation links implemented by Laravel's pagination system.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"data\": [...],\n\"meta\": {\n  \"pagination\": {\n    \"total\": 2000,\n    \"count\": 30,\n    \"per_page\": 30,\n    \"current_page\": 22,\n    \"total_pages\": 1111,\n    \"links\": {\n      \"previous\": \"http://api.domain.test/endpoint?page=21\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Model Factory in Laravel\nDESCRIPTION: Example of a User model factory that extends the base Factory class and defines the default attributes for generating fake user data using Faker.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/factories.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass UserFactory extends Factory\n{\n    protected $model = User::class;\n\n    public function definition(): array\n    {\n        static $password;\n\n        return [\n            'name' => $this->faker->name,\n            'email' => $this->faker->unique()->safeEmail,\n            'password' => $password ?: $password = Hash::make('testing-password'),\n            'email_verified_at' => now(),\n            'remember_token' => Str::random(10),\n            'is_admin' => false,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Client Credentials Token (Shell)\nDESCRIPTION: This snippet shows how to request an access token using the Client Credentials Grant, which is suitable for machine-to-machine authentication. It involves sending a POST request to the `/oauth/token` endpoint with the client ID, client secret, grant type, and scope.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/oauth/token \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'client_id=1&client_secret=y1RbtnOvh9rpA91zPI2tiVKmFlepNy9dhHkzUKle&grant_type=client_credentials&scope='\n```\n\n----------------------------------------\n\nTITLE: Generating a New Migration Using Laravel Artisan Command\nDESCRIPTION: This snippet explains how to create new migrations in Apiato using a custom Artisan command that invokes Laravel's migration generator. It is essential for developers to generate migrations following Apiato's structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/migrations.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:migration\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Task or Action Run Methods with Apiato Call in PHP\nDESCRIPTION: Illustrates passing an array of arguments to the underlying run method of an Action or Task using Apiato::call. Requires that the signature of the run method in the called class accepts the specified arguments. Inputs are the container@task string, and an indexed array of parameters to forward to the run method; output is the processed result from the task.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/magical-call.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$foo = Apiato::call('Container@ActionOrTask', [$runArgument1, $runArgument2, $runArgument3]);\n```\n\n----------------------------------------\n\nTITLE: Example Default Apiato DataArraySerializer Response Payload (JSON)\nDESCRIPTION: Illustrates the default JSON payload structure used by Apiato's DataArraySerializer. It shows how single and multiple data items are nested under a 'data' key and includes potential 'meta' information like pagination and available includes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/responses.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 100,\n      ...\n      \"relation 1\": {\n        \"data\": [ // multiple data\n          {\n            \"id\": 11,\n\t\t\t  ...\n          }\n        ]\n      },\n      \"relation 2\": {\n        \"data\": { // single data\n          \"id\": 22,\n          ...\n          }\n        }\n      }\n    },\n    ...\n  ],\n  \"meta\": {\n    \"include\": [ // what can be included\n      \"xxx\",\n      \"yyy\"\n    ],\n    \"custom\": [],\n    \"pagination\": {\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action to Call Task (PHP)\nDESCRIPTION: This action class facilitates the interaction between the controller and the task. It receives an instance of the `ListUsersTask` in its constructor. The `run` method simply invokes the `run` method of the `ListUsersTask` and passes the `$order` parameter.  This action decouples the controller from the task implementation details.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/search-query-parameter.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Actions;\n\nuse App\\Containers\\User\\Tasks\\ListUsersTask;\nuse App\\Port\\Action\\Abstracts\\Action;\n\nclass ListAndSearchUsersAction extends Action\n{\n\n    private $listUsersTask;\n\n    public function __construct(ListUsersTask $listUsersTask)\n    {\n        $this->listUsersTask = $listUsersTask;\n    }\n\n    public function run($order = true)\n    {\n        return $this->listUsersTask->run($order);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Input Keys in APIato Request for Reassigning Data Fields\nDESCRIPTION: This snippet illustrates how to remap request data fields to new key names via `mapInput()`, facilitating data transformation before processing. It is useful when the expected input structure differs from the internal data processing requirements, enabling seamless data adaptation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$request->mapInput([\n    'data.name' => 'data.username'\n]);\n```\n\n----------------------------------------\n\nTITLE: Example Response from Localizations API Endpoint in JSON\nDESCRIPTION: Provides the JSON structure returned by the GET /localizations API endpoint, listing available languages and their regional variants with language codes, default names, and locale native names. Useful for clients to display and select supported languages.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/localization.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"object\": \"Localization\",\n      \"id\": \"de\",\n      \"language\": {\n        \"code\": \"de\",\n        \"default_name\": \"German\",\n        \"locale_name\": \"Deutsch\",\n        \"regions\": [\n          {\n            \"code\": \"de-DE\",\n            \"default_name\": \"Germany\",\n            \"locale_name\": \"Deutschland\"\n          },\n          {\n            \"code\": \"de-AT\",\n            \"default_name\": \"Austria\",\n            \"locale_name\": \"Österreich\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Web Route with auth:web Middleware in Laravel (PHP)\nDESCRIPTION: Secures web routes using Laravel's 'auth:web' middleware, restricting access to logged-in users based on web sessions or cookies. To use, add this snippet to your web routes file. Unauthenticated users are redirected to the login page by default; the login view can be customized in RouteServiceProvider.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('private/page', Controller::class)\n    ->middleware('auth:web');\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Gold Sponsors with Individual Links using HTML\nDESCRIPTION: This HTML snippet uses a `div` with flexbox styling (`display: flex`, `flexWrap: wrap`) to display Gold Sponsor avatars as clickable links. Each sponsor is represented by an `<a>` tag linking to their website (`target=\"_blank\"`, `rel=\"sponsored\"`) and an `<img>` tag displaying their avatar fetched from Open Collective via an SVG URL. This approach is used instead of an iframe to ensure sponsor links do not have the `nofollow` attribute.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/introduction.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px', justifyContent: 'left', alignItems: 'left' }}>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/0/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/0/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/1/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/1/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/2/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/2/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/3/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/3/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/4/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/4/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/5/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/5/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n<a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/6/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/6/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/7/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/7/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/8/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/8/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/9/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/9/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/10/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/10/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/11/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/11/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/12/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/12/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/13/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/13/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/14/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/14/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/15/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/15/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/16/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/16/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/17/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/17/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/18/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/18/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n  <a href=\"https://opencollective.com/apiato/tiers/gold-sponsors/19/website\" target=\"_blank\" rel=\"sponsored\">\n    <img src=\"https://opencollective.com/apiato/tiers/gold-sponsors/19/avatar.svg?button=false&isActive=true&avatarHeight=100\" height=\"115\" />\n  </a>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating ExampleSubAction (PHP)\nDESCRIPTION: This code defines a basic `ExampleSubAction` class that extends `SubAction`. The `run` method is the entry point of the SubAction and accepts a `$request` object. Inside the `run` method, it calls a `SomeTask` and runs it by calling it through the `app` helper function which resolves the dependency injection. It's a typical structure within the apiato framework where SubActions are used to perform smaller operations, often involving tasks.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/subactions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass ExampleSubAction extends SubAction\n{\n    public function run(SomeRequest $request)\n    {\n        app(SomeTask::class)->run($request);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example composer.json for Developing an Apiato Container\nDESCRIPTION: This sample composer.json provides the necessary configuration to publish a custom Apiato container. It specifies the container's name, description, type as 'apiato-container', and required external dependencies. The 'extra' key contains the container's internal folder name, which guides the installer where to place the container within the project.\n\nThe configuration ensures proper registration, installation, and namespace management when developing containers for Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"vendor/project\",\n  \"description\": \"This is a short description for your container.\",\n  \"type\": \"apiato-container\",\n  \"require\": {\n    \"somevendor/somepackage\": \"dev-master\"\n  },\n  \"extra\": {\n    \"apiato\": {\n      \"container\": {\n        \"name\": \"Foo\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Fields Property (PHP)\nDESCRIPTION: Demonstrates the syntax for defining the `$fieldSearchable` property in a Repository class. This array specifies which model attributes can be used for filtering data via API query parameters and the type of comparison (`'like'`, `'='`) to be applied.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/repositories.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\t\n\tprotected $fieldSearchable = [\n\t  'name'  => 'like',\n\t  'email' => '=',\n\t];\n```\n\n----------------------------------------\n\nTITLE: Defining Default Includes in Transformer in PHP\nDESCRIPTION: This code demonstrates how to define default includes directly within a transformer using the `$defaultIncludes` property. When a transformer includes default includes, it automatically includes specified relationships with every response.  It relies on the existence of `includeUser` and `includeTags` methods in the transformer, and it applies to the transformed data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/transformers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n```php\nprotected $availableIncludes = [\n    'users',\n];\n\nprotected $defaultIncludes = [\n    'tags',\n];\n\n// ..\n```\n```\n\n----------------------------------------\n\nTITLE: Merging upstream changes into local branch with Git merge --allow-unrelated-histories\nDESCRIPTION: This command merges the upstream branch into the current branch, allowing unrelated histories to resolve complex integration scenarios during upgrade.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit merge --allow-unrelated-histories --strategy-option=theirs apiato-{version}\n```\n\n----------------------------------------\n\nTITLE: Business Logic Action Returning a Greeting String in PHP\nDESCRIPTION: This class 'SayHelloAction' extends a base Action class and encapsulates the core business logic. Its 'run' method simply returns the string 'Hello World!', which is then used by the controller to generate a JSON response. This separation of concerns promotes modular design.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass SayHelloAction extends Action\n{\n\tpublic function run()\n\t{\n\t    return 'Hello World!';\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning Accepted Response\nDESCRIPTION: This demonstrates how to use the `accepted` method to return a response with a 202 status code in Apiato. This is typically used to acknowledge that a request has been accepted for processing.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$this->accepted($data)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Authorization Trait in an Apiato Request (PHP)\nDESCRIPTION: Demonstrates how to incorporate a custom authorization Trait (`IsAuthorPermissionTrait`) into an Apiato Request class (`FindUserByIdRequest`). By using the `use` statement and calling the trait's method (`isAuthor`) within the `authorize()` function's `check()` array, the custom authorization logic is seamlessly integrated.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Containers\\User\\Traits\\IsAuthorPermissionTrait;\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass FindUserByIdRequest extends Request\n{\n\n    use IsAuthorPermissionTrait;\n\n    // ...\n\n    public function authorize()\n    {\n        return $this->check([\n            'isAuthor',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Query Parameter Examples with Multiple Keywords and Fields\nDESCRIPTION: These HTTP GET examples demonstrate various formats for the ?search= parameter to find results by keyword(s) across any field or specific fields. It supports multiple keywords separated by semicolons, specifying fields explicitly (field:keyword), and searching multiple fields with multiple keywords. Spaces in keywords must be URL-encoded as '%20'. This enables complex search criteria integrated with the Repository's searchable configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n?search=John\n?search=name:John\n?search=name:John%20Doe\n```\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?search=first keyword;second keyword\n```\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?search=field:keyword here\n```\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?search=field1:first field keyword;field2:second field keyword\n```\n\n----------------------------------------\n\nTITLE: Sample API Response JSON\nDESCRIPTION: Illustrates the expected JSON format of the response returned by the `/hello` endpoint. This simple example shows a JSON array containing the string value produced by the business logic implemented in the Action.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/samples.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"Hello World!\"\n]\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Social Auth Provider (PHP)\nDESCRIPTION: Shows how to register a new, custom social authentication provider class within the published configuration file (`vendor-socialAuth.php`). This requires creating a class that implements the `SocialAuthProvider` contract and adding its namespace to the `providers` array.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    'providers' => [\n        ...\n        'something' => Location\\Of\\Your\\Provider\\SomthingSocialAuthProvider::class,\n    ],\n```\n\n----------------------------------------\n\nTITLE: Defining a Criteria Class in PHP\nDESCRIPTION: This code snippet demonstrates how to define a Criteria class in PHP, extending the `ParentCriteria` class and implementing the `apply` method. The `IsNullCriteria` class checks for null values in a specified field within a database model using Prettus Repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/criterias.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Criterias\\Criteria as ParentCriteria;\nuse Prettus\\Repository\\Contracts\\RepositoryInterface as PrettusRepositoryInterface;\n\nclass IsNullCriteria extends ParentCriteria\n{\n    public function __construct(\n        private readonly string $field\n    ) {\n    }\n\n    public function apply($model, PrettusRepositoryInterface $repository)\n    {\n        return $model->whereNull($this->field);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Components via Artisan Commands (bash)\nDESCRIPTION: Provides the command-line tools for generating new event, listener, or provider files within the Apiato framework. These interactive commands help adhere to Apiato's structure and conventions during file creation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/events.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:event\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:listener\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:provider\n```\n\n----------------------------------------\n\nTITLE: Using the '$urlParameters' Property in Apiato Requests (PHP)\nDESCRIPTION: Illustrates how to use the `$urlParameters` property in an Apiato Request (`ConfirmUserEmailRequest`) to specify URL path parameters (e.g., `id`, `code`). Defining these allows applying standard validation rules to them within the `rules()` method and accessing their values like regular request data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Email\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass ConfirmUserEmailRequest extends Request\n{\n\n    /**\n     * Defining the URL parameters (`/stores/999/items`) allows applying\n     * validation rules on them and allows accessing them like request data.\n     *\n     * @var  array\n     */\n    protected $urlParameters = [\n        'id',\n        'code',\n    ];\n\n    public function rules()\n    {\n        return [\n            'id'   => 'required|integer', // url parameter\n            'code' => 'required|min:35|max:45', // url parameter\n        ];\n    }\n\n    public function authorize()\n    {\n        return $this->check([\n            // nothing! this is open endpoint.\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Pagination Limit in .env (DotEnv)\nDESCRIPTION: Shows how to configure the default number of items returned per page for pagination across the entire application. Set the `PAGINATION_LIMIT_DEFAULT` variable in the project's `.env` file.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_7\n\nLANGUAGE: dotenv\nCODE:\n```\nPAGINATION_LIMIT_DEFAULT=10\n```\n\n----------------------------------------\n\nTITLE: Injecting URL Parameters into Request - PHP\nDESCRIPTION: This code shows how to inject URL parameters into a request using the `withUrlParameters` method. This is useful when you need to include properties in the request that are not part of the request body but are required for processing. It's often used with `injectData`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$request = RegisterUserRequest::injectData($data)\n    ->withUrlParameters(['id' => 123]);\n```\n\n----------------------------------------\n\nTITLE: Creating List and Search Task (PHP)\nDESCRIPTION: This code defines a task to list users. It depends on the UserRepositoryInterface to fetch the data. The `run` method retrieves paginated user data. The `$order` parameter defaults to true and could potentially be used for sorting, though this is not used in this code.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/search-query-parameter.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Tasks;\n\nuse App\\Containers\\User\\Contracts\\UserRepositoryInterface;\nuse App\\Port\\Action\\Abstracts\\Action;\n\nclass ListUsersTask extends Action\n{\n    private $userRepository;\n\n    public function __construct(UserRepositoryInterface $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function run($order = true)\n    {\n        return $this->userRepository->paginate();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Dependency Injection in PHP\nDESCRIPTION: This code demonstrates how to inject a UserRepository dependency into a class constructor using PHP. The UserRepository is injected as a protected readonly property, providing access to user data through the repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/criterias.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    protected readonly UserRepository $repository\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Laravel Passport Installation in Apiato (Shell)\nDESCRIPTION: Executes the Laravel Artisan command `passport:install` to set up Laravel Passport. This command creates necessary encryption keys for token generation and sets up default 'personal access' and 'password grant' OAuth2 clients.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:install\n```\n\n----------------------------------------\n\nTITLE: Register User Request (cURL)\nDESCRIPTION: Registers a new user using email, password, and name via a POST request to the `/v1/register` endpoint. The request includes headers for content type and accept, and the data is encoded as `application/x-www-form-urlencoded`. Requires a valid email, password, and name.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/user-registration.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/register \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'email=john%40doe.com&password=password&name=John%20Doe'\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Fields in Apiato Repository (PHP)\nDESCRIPTION: Configures which model fields are searchable via the `?search=` query parameter within an Apiato Repository using the `$fieldSearchable` property. This array lists searchable field names, including related model fields (e.g., 'product.name'). You can optionally specify the comparison condition (default is '=') for each field (e.g., 'name' => 'like'). This configuration is necessary for the RequestCriteria search functionality.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected $fieldSearchable = [\n    'name',\n    'email',\n    'product.name'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected $fieldSearchable = [\n    'name'=>'like',\n    'email', // Default Condition \"=\"\n    'your_field'=>'condition'\n];\n```\n\n----------------------------------------\n\nTITLE: Generating an Apiato Task (Shell)\nDESCRIPTION: Use the `apiato:generate:task` Artisan command to interactively create a new Task class within your Apiato application. This command scaffolds the necessary file in the correct container's Tasks directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/tasks.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:task\n```\n\n----------------------------------------\n\nTITLE: Injecting Data into Request - PHP\nDESCRIPTION: This snippet demonstrates how to inject data directly into a request using the `injectData` method. This is useful for testing or when you need to provide data that is not part of the request body. `RegisterUserRequest` is assumed to be a custom Request object.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$request = RegisterUserRequest::injectData($data);\n```\n\n----------------------------------------\n\nTITLE: Defining a Mail Class\nDESCRIPTION: This PHP code snippet illustrates the structure of an Apiato mail class extending `ParentMail`. It uses a constructor to accept a user as a recipient and the `build` method to configure the email, including the view and recipient details. Dependencies include using namespaces for other required components, especially `ParentMail`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/mail.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Mails\\Mail as ParentAction;\n\nclass WelcomeMail extends ParentMail ShouldQueue\n{\n    use Queueable;\n\n    public function __construct(protected User $recipient)\n    {\n    }\n\n    public function build()\n    {\n        return $this->view('appSection@user::welcome')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the '$access' Property (Array Notation) in Apiato Requests (PHP)\nDESCRIPTION: Shows an alternative array notation for the `$access` property within an Apiato Request. This allows specifying multiple permissions or roles as elements in an array, which can be clearer than the pipe-separated string format when dealing with numerous rules.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    protected $access = [\n            'permission' => ['delete-users', 'another-permissions'],\n            'roles' => ['manager'],\n    ];\n```\n\n----------------------------------------\n\nTITLE: Apiato Container Config File Structure - PHP\nDESCRIPTION: Shows the basic structure of a container-specific configuration file in Apiato. This PHP file returns an associative array where keys are configuration names and values are their corresponding settings. It is typically located in the container's `Configs` directory and follows a specific naming convention (`{container-name}-container.php`). Required context: This file is loaded by the framework to provide configuration values specific to the container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/configs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// app/Containers/{ContainerName}/Configs/{container-name}-container.php\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Namespace\n    |--------------------------------------------------------------------------\n    */\n    'namespace'       => 'App',\n\n    // some other config params here...\n\n```\n\n----------------------------------------\n\nTITLE: Unit Testing with Authenticated User in PHP\nDESCRIPTION: Shows how to create a test request object with injected data and an authenticated user for unit testing Actions that require user authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n   'store_id'  => $this->encode($store->id),\n   'items'     => $orderItems,\n   'recipient' => $receipient,\n];\n\n$user = User::factory()->create();\n\n$request = MakeOrderRequest::injectData($data, $user);\n\n$order = app(MakeOrderAction::class)->run($request);\n```\n\n----------------------------------------\n\nTITLE: Using Apiato::call Magic with Transporter Action and Request Input (PHP)\nDESCRIPTION: Illustrates Apiato's `call` function flexibility. Even if an Action's `run` method type-hints `DataTransporter`, you can pass a `Request` object when using `Apiato::call`. If the Request defines a `$transporter` property, that specific Transporter will be instantiated and passed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// if you have the following function signature\npublic function run(DataTransporter $data)\n\n// you can pass a DataTransporter to it, only if you are using the magical call function, for the magic to work\n$user = Apiato::call('MyContainer@myAction', [$request]);\n\n// if request has Transporter defined on it, it will be the one passed to the Action. So the Action can even type hint the custom Transporter defined on the Request.\n```\n\n----------------------------------------\n\nTITLE: Using a Shared Criteria from a Task in PHP\nDESCRIPTION: This PHP code demonstrates the usage of the `OrderByCreationDateDescendingCriteria` within a Task. It shows how to use `pushCriteria` method of a repository to apply the defined criteria before retrieving data, using `paginate` method.  It assumes that a repository, `userRepository`, is available and injected into the Task.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/criterias.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function run()\n{\n    $this->userRepository->pushCriteria(new OrderByCreationDateDescendingCriteria());\n    return  $this->userRepository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Includes from Controller in PHP\nDESCRIPTION: This snippet demonstrates how to dynamically set the default includes using `setDefaultIncludes()` from the controller.  It calls the `transform` method, passing the data and the transformer class and then uses `setDefaultIncludes` to specify which relationships to include (e.g., 'tags').  This depends on having an `includeTags` function defined in the transformer and assumes `$rewards` contains data to be transformed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/transformers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php\nreturn $this->transform($rewards, ProductsTransformer::class)->setDefaultIncludes(['tags']);\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Code Stubs\nDESCRIPTION: This snippet explains how to customize generated code by overriding the default stubs.  It specifies the location where the custom stubs should be placed (`app/Ship/Generators/CustomStubs`) and the required file structure to override the default ones located in the `vendor/apiato/core/Generator/Stubs` directory. The user can adapt the generator behavior to their specific needs by changing the files that the code generator uses.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/code-generator.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nsay, if you like to change the `action` -> `create.stub`, simply copy the file to `app/Ship/Generators/CustomStubs/actions/create.stub` and \nstart adapting it to your needs. \n```\n\n----------------------------------------\n\nTITLE: Defining a Mail Class in Apiato (PHP)\nDESCRIPTION: Demonstrates how to create a custom mail class in Apiato. It extends the base `Mail` class, implements `ShouldQueue` for asynchronous sending, defines a constructor to accept data (like a User object), and uses the `build` method to configure the email's view, recipient(s), and variables passed to the template.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/mails.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UserRegisteredMail extends Mail implements ShouldQueue\n{\n    use Queueable;\n\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function build()\n    {\n        return $this->view('appSection@user::user-registered')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using sanitizeInput Method in PHP\nDESCRIPTION: Shows how to use the sanitizeInput method to filter and extract specific fields from a request using dot notation, which helps in partially updating resources efficiently.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$fields = [\n    'data.name',\n    'data.description',\n    'data.is_private',\n    'data.blabla',\n    'data.foo.c'\n];\n$data = $request->sanitizeInput($fields);\n```\n\n----------------------------------------\n\nTITLE: Running database migrations in Apiato\nDESCRIPTION: Executes database migrations to create the required database schema for the Apiato application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Example apiato Web Controller PHP\nDESCRIPTION: Shows how to create a simple Web Controller by extending `PortWebController`. It defines a method `sayWelcome` that returns a view named 'welcome', illustrating basic view rendering within an apiato Web Controller.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/controllers.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass Controller extends PortWebController\n{\n\n    public function sayWelcome()\n    {\n        return view('welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Showing Filtered Fields in API Output\nDESCRIPTION: This JSON snippet exemplifies the response output after applying the ?filter= parameter to include only certain fields in the main entity and its related nested objects. Fields not listed in the filter will be omitted or null.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"0one37vjk49rp5ym\",\n      \"status\": \"approved\",\n      \"products\": {\n        \"data\": [\n          {\n            \"id\": \"bmo7y84xpgeza06k\",\n            \"status\": \"pending\"\n          },\n          {\n            \"id\": \"o0wzxbg0q4k7jp9d\",\n            \"status\": \"fulfilled\"\n          }\n        ]\n      },\n      \"recipients\": {\n        \"data\": [\n          {\n            \"id\": \"r6lbekg8rv5ozyad\"\n          }\n        ]\n      },\n      \"store\": {\n        \"data\": {\n          \"id\": \"r6lbekg8rv5ozyad\"\n        }\n      }\n    }...\n\n```\n\n----------------------------------------\n\nTITLE: Passing Data from Task to Criteria in PHP\nDESCRIPTION: This PHP code shows how to pass data from a Task to a Criteria. The `run` method of a Task receives a `$user` object.  It then creates and uses a `ThisUserCriteria` with the user's ID to filter the data using a repository. It depends on `accountRepository` being available and injected into the Task and  `ThisUserCriteria` and a `PrettusRepositoryInterface` for the repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/criterias.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function run($user)\n{\n    $this->accountRepository->pushCriteria(new ThisUserCriteria($user->id));\n    return $this->accountRepository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User Deletion Test Class in PHP\nDESCRIPTION: This PHP code snippet demonstrates the creation of a test class for deleting a user, extending the container's TestCase class, setting an endpoint and access permissions, and testing the deletion functionality by asserting a 204 status code. Dependencies include the base TestCase class and testing helpers provided by the framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/tests.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass DeleteUserTest extends TestCase\n{\n    protected $endpoint = 'delete@v1/users/{id}';\n    \n    protected array $access = [\n        'roles' => '',\n        'permissions' => 'delete-users',\n    ];\n    \n    public function testDeleteExistingUser()\n    {\n        $user = $this->getTestingUser();\n\n        $response = $this->injectId($user->id)->makeCall();\n\n        $response->assertStatus(204);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Apiato::call Magic with Request Action and Transporter Input (PHP)\nDESCRIPTION: Demonstrates Apiato's `call` function flexibility. Even if an Action's `run` method type-hints `Request`, you can pass a `DataTransporter` instance when using `Apiato::call`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// if you have the following function signature\npublic function run(Request $data)\n\n// you can pass a DataTransporter to it, only if you are using the magical call function, for the magic to work\n$user = Apiato::call('MyContainer@myAction', [new DataTransporter($request)]);\n```\n\n----------------------------------------\n\nTITLE: Defining Shared API Response (PHP)\nDESCRIPTION: Defines a reusable ApiDocJs response structure using the `@apiDefine` tag, combined with `@apiSuccessExample`. This allows for consistent documentation of common response patterns across multiple endpoints. The definition is typically placed in a separate file for organization and can be included using `@apiUse`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @apiDefine UserSuccessSingleResponse\n * @apiSuccessExample {json} Success-Response:\nHTTP/1.1 200 OK\n{\n   \"data\":{\n      \"object\":\"User\",\n      \"id\":eqwja3vw94kzmxr0,\n   },\n   \"meta\":{\n      \"include\":[],\n      \"custom\":[]\n   }\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Defining a Web or API route using Laravel syntax in PHP\nDESCRIPTION: Shows how to define a standard route in Laravel style; accepts POST requests at 'hello', routed to a controller method. Dependent on Laravel's routing system and the Controller class. The input is the route path and controller action; the output is a configured route instance.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/routes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::post('hello', [Controller::class, 'sayHello']);\n```\n\n----------------------------------------\n\nTITLE: Generating Repositories and Models using Artisan (Bash)\nDESCRIPTION: Use Apiato's interactive Artisan commands to generate new repositories or a model and its corresponding repository simultaneously. These commands streamline the boilerplate setup process within the Apiato structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:repository\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:model\n```\n\n----------------------------------------\n\nTITLE: Pagination Meta Data Example\nDESCRIPTION: This code snippet provides an example of the meta data returned by the API when pagination is applied.  The meta data includes information like the total number of items, the number of items per page, the current page, and links to previous pages. This is commonly used to provide navigation controls on the client side.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/pagination.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  \"data\": [...],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 2000,\n      \"count\": 30,\n      \"per_page\": 30,\n      \"current_page\": 22,\n      \"total_pages\": 1111,\n      \"links\": {\n        \"previous\": \"http://api.domain.test/endpoint?page=21\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining API Route Post Method (PHP)\nDESCRIPTION: Example demonstrating how to define a POST API route within an APIato route file using standard Laravel syntax. This snippet maps the '/orders' path to the 'CreateOrderController::class' and corresponds to the 'CreateOrder.v1.public.php' file name, making it a public v1 endpoint.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/routes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('orders', CreateOrderController::class);\n```\n\n----------------------------------------\n\nTITLE: Usage examples of Repository Methods\nDESCRIPTION: These code snippets illustrate the usage of common repository methods like `paginate`, `findByField`, and `findWhere`. They showcase how to retrieve data with pagination, search by a single field, or search based on multiple criteria.  The examples assume that `$userRepository`, `$carRepository`, and `$offerRepository` are instances of appropriate repository classes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/repositories.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// paginate the data by 10\n$users = $userRepository->paginate(10);\n\n// search by 1 field\n$cars = $carRepository->findByField('colour', $colour);\n\n// searching multiple fields\n$offer = $offerRepository->findWhere([\n    'offer_id' => $offer_id,\n    'user_id'  => $user_id,\n])->first();\n\n//....\n```\n\n----------------------------------------\n\nTITLE: Including Related Resources using include Parameter (URL)\nDESCRIPTION: Demonstrates how to request related resources (relationships) to be embedded in the API response using the `?include=` query parameter. Relationship names are provided as a comma-separated list. This functionality requires the corresponding relationships to be defined as `$availableIncludes` or `$defaultIncludes` in the resource's Fractal Transformer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_16\n\nLANGUAGE: http\nCODE:\n```\n?include=tags,user\n```\n\n----------------------------------------\n\nTITLE: Apply RequestCriteria for Filtering (Apiato PHP Task)\nDESCRIPTION: Use the `addRequestCriteria()` method on a repository instance, typically within a Task or Action, to enable dynamic filtering, sorting, and searching based on request query parameters (`orderBy`, `sortedBy`, `search`). The results are then often retrieved via `get()` or `paginate()`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Containers\\AppSection\\User\\Data\\Repositories\\UserRepository;\nuse App\\Ship\\Parents\\Tasks\\Task as ParentTask;\n\nclass ListUsersTask extends ParentTask\n{\n    public function __construct(\n        protected readonly UserRepository $repository\n    ) {\n    }\n\n    public function run(): mixed\n    {\n        // $this->repository->removeRequestCriteria();\n        return $this->repository->addRequestCriteria()->paginate();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using sanitizeInput with apiato Request (PHP)\nDESCRIPTION: Shows how to invoke the `sanitizeInput` method on an apiato request object. It accepts an array of keys specified using dot notation. The method filters the request data, returning only the values for the provided keys that are present and not considered 'empty' by the helper.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$fields = ['data.name', 'data.description', 'data.is_private', 'data.blabla', 'data.foo.c'];\n$data = $request->sanitizeInput($fields);\n```\n\n----------------------------------------\n\nTITLE: Adding Social Auth Fields to User Model - PHP\nDESCRIPTION: Updates the `$fillable` array in the `User` model to include social authentication related fields. These fields store information retrieved from social providers. Required for persisting social authentication data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/social-authentication.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected $fillable = [\n    ...\n    'social_provider',\n    'social_nickname',\n    'social_id',\n    'social_token',\n    'social_token_secret',\n    'social_refresh_token',\n    'social_expires_in',\n    'social_avatar',\n    'social_avatar_original',\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Laravel Artisan Command in Shell\nDESCRIPTION: This snippet shows the shell command used to execute the custom Laravel Artisan command 'apiato:welcome' from the CLI terminal. The command 'php artisan apiato:welcome' calls the handle method of the corresponding PHP ConsoleCommand class, triggering its defined behavior. Required prerequisites include a configured Laravel project with the command registered properly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/commands.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:welcome\n```\n\n----------------------------------------\n\nTITLE: Including Meta Information and Pagination in API Response Payload Using Fractal DataArraySerializer in JSON\nDESCRIPTION: This code snippet showcases an extended API response structure when using DataArraySerializer in Apiato, demonstrating how 'meta' information such as included relationships, custom fields, and detailed pagination data can be incorporated alongside the main 'data' payload. The 'data' field typically holds an array of resources, and the 'meta' object tracks related metadata. This structure is useful for APIs requiring complex response features such as paginated collections, and relies on the Fractal package with DataArraySerializer properly configured. Key parameters include the 'data' array, 'meta.include', 'meta.custom', and 'meta.pagination', which detail paging state and navigation links.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/transformers.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [ ... ],\n  \"meta\": {\n    \"include\": [\n      \"xxx\",\n      \"yyy\"\n    ],\n    \"custom\": [],\n    \"pagination\": {\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Social Auth Fields in User Transformer Output (PHP)\nDESCRIPTION: Adds social authentication fields to the output of a Laravel User transformer, enabling inclusion of provider, nickname, ID, and avatar data in API responses. Assumes $user is an instance with the appropriate social auth properties already loaded. Intended for use within private profile transformers to protect sensitive user data. Outputs an associative array with social auth details nested under meaningful keys. Ensure transformer is used in the correct API response context.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/social-authentication.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'social_auth_provider' => $user->social_provider,\n'social_nickname' => $user->social_nickname,\n'social_id' => $user->social_id,\n'social_avatar' => [\n    'avatar' => $user->social_avatar,\n    'original' => $user->social_avatar_original,\n]\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database with Default Super Admin User (Bash)\nDESCRIPTION: This command seeds the database with predefined roles, permissions, and a default Super Admin user for the Apiato application. It requires the database and migrations to be set up first. The default credentials are sourced from the variables configuration and allow immediate access to admin functionality.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Folder Structure in Apiato\nDESCRIPTION: Illustrates the standard directory layout for placing API and Web controllers within an Apiato container's UI layer. This structure organizes code by separating controllers based on the interface type (API, WEB) under the `app/Containers/{section-name}/{container-name}/UI` path.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - UI\n                    - API\n                        - Controllers\n                            - Controller.php\n                    - WEB\n                        - Controllers\n                            - Controller.php\n```\n\n----------------------------------------\n\nTITLE: Listing Apiato Code Generator Commands\nDESCRIPTION: This command lists all available code generation commands within the Apiato framework.  It serves as an overview of the available tools for rapidly creating code components such as containers, actions, controllers, etc.  It helps users to quickly understand what generators are available.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/code-generator.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  php artisan apiato:generate:container        Create a Container for apiato from scratch\n  php artisan apiato:generate:action           Create an Action file for a Container\n  php artisan apiato:generate:configuration    Create a Configuration file for a Container\n  php artisan apiato:generate:container:api    Create a Container for apiato from scratch (API Part)\n  php artisan apiato:generate:container:web    Create a Container for apiato from scratch (WEB Part)\n  php artisan apiato:generate:controller       Create a controller for a container\n  php artisan apiato:generate:event            Create a new Event class and (optionally) its corresponding Listener\n  php artisan apiato:generate:exception        Create a new Exception class\n  php artisan apiato:generate:factory          Create a new Factory class\n  php artisan apiato:generate:job              Create a new Job class\n  php artisan apiato:generate:listener         Create a new Event Listener class\n  php artisan apiato:generate:mail             Create a new Mail class\n  php artisan apiato:generate:middleware       Create a new Middleware class\n  php artisan apiato:generate:migration        Create an \"empty\" migration file for a Container\n  php artisan apiato:generate:model            Create a new Model class\n  php artisan apiato:generate:notification     Create a new Notification class\n  php artisan apiato:generate:policy           Create a new Policy class\n  php artisan apiato:generate:readme           Create a README file for a Container\n  php artisan apiato:generate:repository       Create a new Repository class\n  php artisan apiato:generate:request          Create a new Request class\n  php artisan apiato:generate:route            Create a new Route class\n  php artisan apiato:generate:seeder           Create a new Seeder class\n  php artisan apiato:generate:provider         Create a ServiceProvider, MiddlewareProvider or an EventProvider for a Container\n  php artisan apiato:generate:subaction        Create a new SubAction class\n  php artisan apiato:generate:task             Create a Task file for a Container\n  php artisan apiato:generate:test:functional  Create a Functional Test file.\n  php artisan apiato:generate:test:testcase    Create the TestCase file.\n  php artisan apiato:generate:test:unit        Create a Unit Test file.\n  php artisan apiato:generate:transformer      Create a new Transformer class for a given Model\n  php artisan apiato:generate:value            Create a new Value class\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Email Sender in Apiato (.env)\nDESCRIPTION: Demonstrates how to configure the default sender email address and name for all outbound emails in an Apiato application using the `.env` file. These values are used globally unless overridden within individual Mail class `build` methods, providing a standard sender identity.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/mails.md#_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nMAIL_FROM_ADDRESS=test@test.test\nMAIL_FROM_NAME=\"apiato\"\n```\n\n----------------------------------------\n\nTITLE: Setting up environment file for Laradock\nDESCRIPTION: Copies the example environment file to create a proper .env configuration file for Laradock.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncp env-example .env\n```\n\n----------------------------------------\n\nTITLE: Example API Request with Filter Parameter in Apiato\nDESCRIPTION: Demonstrates how to use the filter parameter in an API request to retrieve only specific fields from a model.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\napi.apiato.test/v1/users?filter=id;status\n```\n\n----------------------------------------\n\nTITLE: Linking Exceptions to Application Error Codes in Apiato with PHP\nDESCRIPTION: Shows how to link an Exception class to a centralized error code by overriding the 'useErrorCode()' method to return a predefined error code constant. This mechanism enables automatic synchronization of the exception error code with the centralized error table, promoting consistent error handling. It notes that explicitly set codes may be overridden by this method and that usage is optional.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass InternalErrorException extends Exception\n{\n\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n\t\n\tpublic code = 4711; // this code will be overwritten by the useErrorCode() method!\n\n    public function useErrorCode()\n    {\n        return ApplicationErrorCodes::BASE_INTERNAL_ERROR;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing DocBlocks for API Routes - Apiato (PHP)\nDESCRIPTION: Demonstrates how to write a structured PHP docblock above a route definition in Apiato to generate API documentation. Requires inclusion in the route file and references annotations like @apiGroup, @apiName, @apiParam, @apiSuccessExample, and @apiErrorExample. Inputs are annotations defining endpoint metadata and sample request/response bodies, and the output is parsed by the documentation generator to create docs. This approach must be repeated for each endpoint to ensure full coverage.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @apiGroup           Authentication\n * @apiName            UserLogin\n * @api                {post} /clients/web/login User Login\n * @apiDescription     Description Here....\n * @apiVersion         1.0.0\n * @apiPermission      none\n *\n * @apiHeader          Accept application/json\n *\n * @apiParam           {String}     email\n * @apiParam           {String}     password\n *\n * @apiSuccessExample  {json}       Success-Response:\n *   HTTP/1.1 200 OK\n *   {\n *     \"data\": {\n *       \"id\": \"XbPW7awNkzl83LD6\",\n *       \"name\": \"Super Admin\",\n *       \"email\": \"admin@admin.com\"\n *       ...\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"401 Credentials Incorrect.\",\n *      \"status_code\":401\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"Invalid Input.\",\n *      \"errors\":{\n *         \"email\":[\n *            \"The email field is required.\"\n *         ]\n *      },\n *      \"status_code\":422\n *   }\n */\n\nuse App\\Containers\\AppSection\\Authentication\\UI\\API\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::post('clients/web/login', [Controller::class, 'proxyLoginForWebClient']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Mail Sender Using .env Environment Variables\nDESCRIPTION: This snippet shows the configuration settings inside a .env file for setting the global 'from' email address and name for outgoing emails in the Apiato framework. It defines MAIL_FROM_ADDRESS and MAIL_FROM_NAME which are used by default in mail classes unless overridden by specific calls like ->to(). The .env configuration is essential for properly routing emails and ensuring consistency across notifications. It assumes usage of Laravel's mail configuration system.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/mails.md#_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nMAIL_FROM_ADDRESS=test@test.test\nMAIL_FROM_NAME=\"apiato\"\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Service Providers\nDESCRIPTION: This snippet illustrates how to register additional service providers within a container's `MainServiceProvider`. The example shows the `serviceProviders` array, where you list other service providers like `AuthServiceProvider` and `EventsServiceProvider` to be loaded within the framework. The Main service provider itself is auto-registered, while the additional providers are registered inside it. \nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/providers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\npublic array $serviceProviders = [\n    AuthServiceProvider::class,\n    EventsServiceProvider::class,\n    // ...\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Access Correct JSON\nDESCRIPTION: This JSON snippet provides the format for a successful access token response. It contains the token type (Bearer), expiration time, access token, and refresh token.  The access token is needed for subsequent requests to protected resources.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 31500,\n  \"access_token\": \"tnJ1eXAiOiJKV1QiLCJhbGciOiJSUzI1Zx...\",\n  \"refresh_token\": \"ZFDPA1S7H8Wydjkjl+xt+hPGWTagX...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mail Class with Laravel Mail and Queueing in PHP\nDESCRIPTION: This PHP snippet defines a mail notification class named UserRegisteredMail which extends the base Mail class and implements ShouldQueue, enabling queueing of email sending jobs. It uses the Queueable trait for dispatching to queues. The constructor accepts a User object which is stored for use in the build method. The build method configures the email view template, recipient address and name, and passes user data to the view. Dependencies include Laravel's mail system, ShouldQueue interface, and Queueable trait. Inputs are a User instance; outputs are the built mail ready for sending or queueing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/mails.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UserRegisteredMail extends Mail implements ShouldQueue\n{\n    use Queueable;\n\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function build()\n    {\n        return $this->view('appSection@user::user-registered')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using mapInput Method in PHP\nDESCRIPTION: Shows how to use the mapInput method to remap the 'name' field to 'username' within the data structure, which is useful when adapting request data to match expected formats in Tasks or Actions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$request->mapInput([\n    'data.name' => 'data.username',\n]);\n```\n\n----------------------------------------\n\nTITLE: Markdown Representation of Apiato Seeders Folder Structure\nDESCRIPTION: This snippet shows the recommended directory structure to store Apiato seeders inside containers. Seeders specific to a container should reside under `app/Containers/{Section}/{Container}/Data/Seeders`. This ensures proper organization and loading according to Apiato's conventions and avoids conflicts and ambiguity between containers. The snippet is for documentation and understanding only.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/seeders.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\napp\n⋂ Containers\n    ⋂ Section\n        ⋂ Container\n            ⋂ Data\n                ⋂ Seeders\n                    ├─ DemoSeeder_1.php\n                    ├─ AnotherDemoSeeder_2.php\n                    └─ ...\n```\n\n----------------------------------------\n\nTITLE: Passing Data to a Criteria from Task (PHP)\nDESCRIPTION: This PHP snippet shows how to instantiate and apply a Criteria that requires data in its constructor. When pushing `ThisUserCriteria` to the repository, the user's ID (`$user->id`) is passed to its constructor, providing the necessary data for the criteria to build the query condition.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/criterias.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function run($user)\n{\n    $this->accountRepository->pushCriteria(new ThisUserCriteria($user->id));\n    return $this->accountRepository->paginate();\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Searches via URL Parameters (Text)\nDESCRIPTION: Examples of using the `search` query parameter with `RequestCriteria` to filter results based on searchable fields defined in the repository. Searches can apply to all searchable fields or be targeted to specific fields using `field:value`. Spaces in search terms must be URL-encoded (`%20`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n?search=John\n```\n\nLANGUAGE: text\nCODE:\n```\n?search=name:John\n```\n\nLANGUAGE: text\nCODE:\n```\n?search=name:John%20Doe\n```\n\n----------------------------------------\n\nTITLE: Requesting Tokens via Apiato Proxy Login Endpoint (JSON)\nDESCRIPTION: Demonstrates the simplified JSON payload for a POST request to Apiato's proxy login endpoint (e.g., `/clients/web/login`). Only `username` and `password` are needed in the request body, as Apiato automatically appends the corresponding client ID and secret configured for that endpoint before forwarding the request to the authentication server.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n  \"username\": \"john@doe.com\",\n  \"password\": \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Test Authentication Status in PHP\nDESCRIPTION: The `auth` method allows overriding the default authentication status defined in the test class's `$auth` property for a specific test method. Pass `true` to require authentication or `false` to make the endpoint public for the duration of the call chain.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->auth(false)->makeCall();\n```\n\n----------------------------------------\n\nTITLE: Setting Up OAuth 2.0 in Apiato PHP Framework\nDESCRIPTION: Artisan command to install Laravel Passport, creating encryption keys for secure access tokens and generating OAuth clients for authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:install\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Login Fields in Apiato Authentication (PHP)\nDESCRIPTION: Illustrates how to modify the `login.fields` array within the `appSection-authentication` configuration file (`App\\Containers\\AppSection\\Authentication\\Configs\\appSection-authentication.php`). This allows users to authenticate using alternative fields (e.g., 'phone') besides the default 'email', including specifying validation rules.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'login' => [\n    'fields' => [\n        'email' => ['email'],\n        'phone' => ['string', 'min:6', 'max:25'],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Sub Actions\nDESCRIPTION: Illustrates the standard directory structure for organizing Sub Action classes within an Apiato container. Sub Actions should be placed inside the 'Actions' directory of a specific container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/subactions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - Actions\n                    - ValidateAddressSubAction.php\n                    - BuildOrderSubAction.php\n                    - ...\n```\n\n----------------------------------------\n\nTITLE: Defining the Folder Structure for Value Objects in Markdown\nDESCRIPTION: This markdown snippet shows the recommended directory layout for placing Value Objects within a typical Apiato project. It serves as a guideline for keeping Value Objects organized either under specific containers or the general Ship directory as dictated by project conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/values.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Values\n                ├── Output.php\n                ├── Region.php\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Migrating to Invokable Controllers in Apiato PHP\nDESCRIPTION: Demonstrates the migration from traditional controller syntax using an array with method name to the newer invokable controller style in Apiato, a PHP framework. This change simplifies route definitions by allowing the controller class to be passed directly without specifying the method, as controllers now implement the __invoke method. This snippet requires familiarity with PHP 8 features and Laravel routing conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/prologue/release-notes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\\\ from\nRoute::get('profile', [GetAuthenticatedUserController::class, 'getAuthenticatedUser']);\n\\\\ to\nRoute::get('profile', GetAuthenticatedUserController::class);\n```\n\n----------------------------------------\n\nTITLE: Pagination Limit Parameter Usage\nDESCRIPTION: This snippet showcases the use of the 'limit' parameter to define the number of results per page. It shows how to specify the number of resources to be returned in a single page. It also indicates how the 'limit' and 'page' parameters can be combined to retrieve subsequent pages of results. \nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/pagination.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?limit=100\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Exception with Error Details in PHP\nDESCRIPTION: These snippets illustrate throwing AccountFailedException instances while attaching additional error details via the withErrors() method. Errors can be passed as a simple associative array with strings or arrays of validation messages. This enhances client response clarity with specific error info.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/exceptions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nthrow (new AccountFailedException())->withErrors(['email' => 'Email already in use']);\n```\n\nLANGUAGE: php\nCODE:\n```\nthrow (new AccountFailedException())->withErrors(['email' => ['Email already in use', 'Another message']]);\n```\n\n----------------------------------------\n\nTITLE: Defining Centralized Application Error Codes in PHP\nDESCRIPTION: Defines a constant error code structure used for centralized management of application errors. The array contains a numeric code, a title, and a description which can be used for error documentation and client responses. This approach allows reusing error metadata across exceptions and eases error code maintenance.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nconst BASE_GENERAL_ERROR = [\n\t'code' => 1001,\n\t'title' => 'Unknown / Unspecified Error.',\n\t'description' => 'Something unexpected happened.',\n];\n```\n\n----------------------------------------\n\nTITLE: Protecting API Endpoint with Permissions in Apiato Authorization Using PHP\nDESCRIPTION: This PHP snippet demonstrates how to protect an API endpoint by enforcing a 'delete-users' permission within a request class extending Apiato's ParentRequest. It defines an access control array specifying required permissions and overrides the authorize method to check if the current user has the necessary permissions via the hasAccess method. This enforces authorization at the request level, preventing unauthorized users from proceeding.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authorization.mdx#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Requests\\Request as ParentRequest;\\n\\nclass DeleteUserRequest extends ParentRequest\\n{\\n    protected array $access = [\\n        'permissions' => 'delete-users',\\n        'roles' => '',\\n    ];\\n\\n    public function authorize(): bool\\n    {\\n        return $this->hasAccess();\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Implementation Equivalent to nullableItem (PHP)\nDESCRIPTION: Shows the explicit PHP code that achieves the same result as the `nullableItem` helper method. It uses a ternary operator to check if the relationship (`$model->relation`) is not null, returning either the transformed item or a Fractal primitive representing null.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse League\\Fractal\\Resource\\Item;\nuse League\\Fractal\\Resource\\Primitive;\n\npublic function includeRelation(Model $model): Primitive|Item\n{\n    return $model->relation ? $this->item($model->relation, new RelationTransformer()) : $this->primitive(null)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Protected Endpoint using cURL\nDESCRIPTION: This snippet shows how to call a protected endpoint, requiring authentication via a Bearer token, using cURL. It sends a GET request, including the `Authorization` header with the bearer token. The request retrieves user data from the endpoint.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/requests.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET -H \"Accept: application/json\" -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\" -H \"http://api.domain.test/v1/users\"\n```\n\n----------------------------------------\n\nTITLE: Using Repository Methods (PHP)\nDESCRIPTION: Provides examples demonstrating common data retrieval methods available on a Repository instance, such as `paginate` for paginating results, `findByField` for searching by a single attribute, and `findWhere` for searching by multiple attributes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/repositories.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// paginate the data by 10\n$users = $userRepository->paginate(10);\n\n// search by 1 field\n$cars = $carRepository->findByField('colour', $colour);\n\n// searching multiple fields\n$offer = $offerRepository->findWhere([\n    'offer_id' => $offer_id,\n    'user_id'  => $user_id,\n])->first();\n\n//....\n```\n\n----------------------------------------\n\nTITLE: Defining Main Service Provider\nDESCRIPTION: This code snippet shows an example of a Main Service Provider class. It extends the `MainProvider` class and defines two properties: `$serviceProviders` which lists additional providers to be registered, and `$aliases` which lists aliases to be registered.  Dependencies: Requires `MainProvider` to be available (presumably from an apiato/ship namespace) and it's part of the main service provider class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/providers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass MainServiceProvider extends MainProvider\n{\n    // These providers will we automatically registered\n    public array $serviceProviders = [\n        PassportServiceProvider::class,\n        AuthProvider::class,\n        MiddlewareServiceProvider::class\n        // ...\n    ];\n\n    public array $aliases = [\n        // ...\n    ];\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Demo Seeder Example in PHP\nDESCRIPTION: Demonstrates a basic seeder class in PHP for creating a role. It utilizes a task (`CreateRoleTask`) to insert data into the database.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/seeders.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass DemoSeeder_1 extends Seeder\n{\n    public function run()\n    {\n        app(CreateRoleTask::class)->run('admin', 'Administrator', 'Administrator Role', 999);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Access Roles in Apiato PHP\nDESCRIPTION: This snippet from the `app/Ship/Configs/apiato.php` configuration file shows how to define roles (`admin` in this example) that are automatically granted access to all routes, bypassing the individual `$access` property checks in Request classes. This is useful for superuser roles.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'requests' => [\n    'allow-roles-to-access-all-routes' => ['admin',],\n],\n```\n\n----------------------------------------\n\nTITLE: Using Model Resource Key in Apiato Transformer (PHP)\nDESCRIPTION: Illustrates how to access the model's resource key within the `transform` method of a Transformer by calling `$model->getResourceKey()`. This value is typically assigned to an 'object' field in the resulting array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Containers\\AppSection\\User\\Models\\User;\nuse App\\Ship\\Parents\\Transformers\\Transformer as ParentTransformer;\n\nclass UserTransformer extends ParentTransformer\n{\n    public function transform(User $user)\n    {\n        return [\n            'object' => $user->getResourceKey(), // <-- here\n            'id' => $user->getHashedKey(),\n            'name' => $user->name,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting an API Route with auth:api Middleware in Laravel (PHP)\nDESCRIPTION: Applies Laravel's 'auth:api' middleware to restrict access to given routes to authenticated users with valid API tokens. Requires Laravel routing; place this code in a routes file. This ensures endpoints like 'secret/info' are accessible only to authorized users presenting access tokens.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('secret/info', Controller::class)\n    ->middleware('auth:api');\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Demo Seeder Class in Laravel (PHP)\nDESCRIPTION: This PHP snippet defines a sample Seeder class, `DemoSeeder_1`, intended for populating a database with initial or demo data using Laravel's seeding infrastructure. The class extends the base Seeder class and implements a `run` method, where data insertion logic (such as assigning roles via a `CreateRoleTask`) is placed. Dependencies include Laravel Framework, proper namespace/imports for `Seeder` and `CreateRoleTask`, and the snippet assumes the existence of model or task classes to be seeded. Parameters to tasks or models (e.g., role identifiers) are specified within the method. The output is data committed to the database, with no direct data returned by the seeder. Limitations include the need for correct container organization and class naming to avoid conflicts.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/seeders.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass DemoSeeder_1 extends Seeder\n{\n    public function run()\n    {\n        app(CreateRoleTask::class)->run('admin', 'Administrator', 'Administrator Role', 999);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Folder Structure\nDESCRIPTION: Illustrates the standard directory structure for organizing Notification classes within Containers and the Ship layer in an Apiato application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/notifications.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n - app\n    - Containers\n        - {container-name}\n            - Notifications\n                - UserRegisteredNotification.php\n                - ...\n    - Ship\n        - Notifications\n            - SystemFailureNotification.php\n            - ...\n```\n\n----------------------------------------\n\nTITLE: Chaining Pre-Run Method Calls on Tasks via Apiato Call in PHP\nDESCRIPTION: Demonstrates how to pass a list of method names to execute on a Task before calling its run method, by providing a third argument array to Apiato::call. Dependencies: Apiato framework with Tasks that have these public methods. Expects an array of method names as the third parameter; invoked methods must not require parameters. Output is the Task run method's return value, after the specified methods have been executed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/magical-call.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = Apiato::call('Container@ActionOrTask', [$runArgument], ['otherFunction1', 'otherFunction2']);\n```\n\n----------------------------------------\n\nTITLE: Conditional Queue Driver Detection in Laravel - PHP\nDESCRIPTION: This PHP snippet checks if the default queue driver configured in Laravel is set to 'database'. This allows Apiato to conditionally trigger logic, such as generating migration files required for database queues. It depends on the Laravel Config facade and the queue configuration in the application's config files. The code snippet executes a conditional check to facilitate setup tasks based on the selected queue driver.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/miscellaneous/tasks-queuing.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (Config::get('queue.default') == 'database')\n{\n   // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shared API Response Templates in PHP\nDESCRIPTION: Example of creating shared response templates to avoid duplicating response examples across multiple endpoints. This helps maintain consistency and makes updates easier.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/api-docs-generator.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @apiDefine UserSuccessSingleResponse\n * @apiSuccessExample {json} Success-Response:\nHTTP/1.1 200 OK\n{\n   \"data\":{\n      \"object\":\"User\",\n      \"id\":eqwja3vw94kzmxr0,\n   },\n   \"meta\":{\n      \"include\":[],\n      \"custom\":[]\n   }\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Pagination Limit per Repository (PHP)\nDESCRIPTION: Demonstrates how to enforce a maximum limit on the number of results that can be requested per page for a specific repository. Define the `protected $maxPaginationLimit` property within the repository class with the desired maximum value.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected $maxPaginationLimit = 20;\n```\n\n----------------------------------------\n\nTITLE: Defining a User Model Factory in PHP\nDESCRIPTION: This code snippet demonstrates how to define a User Model Factory using Laravel's factory functionality. It uses Faker to generate fake data for the user's name, email, and password. This factory is intended for creating User model instances with default fake data for testing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/factories.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// User\n$factory->define(App\\Containers\\User\\Models\\User::class, function (Faker\\Generator $faker) {\n    return [\n        'name'     => $faker->name,\n        'email'    => $faker->email,\n        'password' => bcrypt(str_random(10)),\n    ];\n});\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token via Client Credentials Grant - shell\nDESCRIPTION: Demonstrates how to request an OAuth2 access token using Client Credentials Grant, suited for machine-to-machine authentication between third-party clients and the Apiato API. Requires valid personal client credentials (client_id and client_secret). The POST request to the /oauth/token endpoint must include grant_type=client_credentials and optionally a scope. The expected output is a JSON response containing access_token, token_type, expires_in and refresh_token fields.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/oauth/token \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'client_id=1&client_secret=y1RbtnOvh9rpA91zPI2tiVKmFlepNy9dhHkzUKle&grant_type=client_credentials&scope='\n```\n\n----------------------------------------\n\nTITLE: Route File Naming Convention for API Routes in Laravel\nDESCRIPTION: Defines how API route files should be named based on functionality, API version, and exposure level (public/private). This naming convention facilitates automatic route versioning and exposure management within the APIato framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/routes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nCreateOrder.v1.public.php\nFulfillOrder.v2.public.php\nCancelOrder.v1.private.php\n```\n\n----------------------------------------\n\nTITLE: Example Paginated DataArraySerializer Response JSON\nDESCRIPTION: Demonstrates the JSON structure for API responses when pagination is applied using the `DataArraySerializer`. Highlights the inclusion of the `meta` block containing pagination details.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/responses.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"include\": [\n      \"xxx\",\n      \"yyy\"\n    ],\n    \"custom\": [],\n    \"pagination\": { // pagination meta\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Helper Function using PHP\nDESCRIPTION: This snippet demonstrates how to define a global helper function in PHP within APIato. The function 'add' accepts two integer parameters and returns their sum, and is wrapped in a conditional check to prevent redeclaration. No external dependencies are required beyond PHP itself, and this is intended to be placed in a helpers.php file within the appropriate Helpers directory as per project structure. Inputs are two integers; output is their integer sum.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/helpers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (!function_exists('add')) {\n    function add(int $firstNumber, int $secondNumber): int\n    {\n        return $firstNumber + $secondNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Metadata to a Transformed API Response (PHP)\nDESCRIPTION: This snippet illustrates how to include custom metadata with a transformed API resource using the withMeta helper. The withMeta method attaches key-value pairs to the outgoing JSON response before transformation occurs. Requires ResponseTrait and expects the metadata array and the target resource/transformer. Returns an API response object containing metadata along with the resource data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/controllers.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$metaData = ['total_credits', 10000];\n\nreturn $this->withMeta($metaData)->transform($receipt, ReceiptTransformer::class);\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Laravel Job in PHP\nDESCRIPTION: This PHP snippet demonstrates two ways to dispatch a Job instance (DemoJob) to Laravel's queue system. One method uses the dispatch helper function to push the job onto the queue, while the other manually resolves the Dispatcher contract from the application container and dispatches the job instance. This snippet requires that DemoJob is properly defined and that Laravel's queue system is configured for handling background jobs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/jobs.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// using helper function\ndispatch(new DemoJob($someData));\n\n// manually\napp(\\Illuminate\\Contracts\\Bus\\Dispatcher\\Dispatcher::class)->dispatch(New DemoJob($someData));\n```\n\n----------------------------------------\n\nTITLE: Using Ownership Helper Methods\nDESCRIPTION: Example demonstrating how to use the 'owns' and 'isOwnedBy' helper methods available on models to determine ownership relationships between models.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/policies.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Check if a user owns a post\n$user->owns($post);\n\n// Check if a post is owned by a user\n$post->isOwnedBy($user);\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies (Bash)\nDESCRIPTION: Executes the `composer update` command in the terminal. This command resolves and installs the correct package versions based on the modifications made to `composer.json` during the upgrade process (e.g., from Apiato 4.1 to 5.0).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Running Apiato Action Without Facade Using Plain PHP and Laravel IoC in PHP\nDESCRIPTION: Illustrates how to execute an Apiato Action's 'run' method without relying on the Apiato facade, using direct instantiation of the Action class or Laravel's IoC container. Dependencies include the Apiato Action class and Laravel framework for IoC usage. The examples highlight creating a new instance of the Action and calling 'run' with the required parameters, typically a request ID. This approach provides basic usage flexibility without framework facade abstractions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/software-architectural-patterns.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $action = new GetDriversAction::class;\n$action->run($request->id);\n\n$user = \\App::make(GetDriversAction::class)->run($request->id);\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Database File (Bash)\nDESCRIPTION: This snippet demonstrates creating an SQLite database file using the touch command on Unix-like systems. It is a prerequisite step for using SQLite as the database backend for Apiato. After creating this file, you must update the .env configuration to use SQLite and run migrations to set up the tables.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch database/database.sqlite\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation in Apiato PHP Framework\nDESCRIPTION: Artisan command to generate API documentation using ApiDocJs in an Apiato project. Requires Node.js dependencies to be installed first.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in MainServiceProvider\nDESCRIPTION: Shows how to include the MiddlewareServiceProvider within a container's MainServiceProvider to ensure container-specific middlewares are registered during application bootstrap. It extends a parent provider and lists the service provider in the $serviceProviders array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/middlewares.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    protected array $serviceProviders = [\n        MiddlewareServiceProvider::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato SubAction using Artisan Command\nDESCRIPTION: This shell command initiates the interactive process for generating a new SubAction class within your apiato project. The command will prompt you for necessary details like the Section and Container name.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/subactions.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:generate:subaction\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Keywords Across All Fields (URL)\nDESCRIPTION: Example demonstrating how to search for multiple distinct keywords across any of the configured searchable fields using the `?search=` parameter. Keywords are separated by a semicolon (`;`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\napi.domain.test/endpoint?search=first keyword;second keyword\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs from Action in Laravel / APIATO PHP\nDESCRIPTION: This PHP snippet illustrates two methods of dispatching a job in Laravel: using a helper function for straightforward dispatching, and manually resolving the dispatcher service from the container for advanced control. It demonstrates typical patterns for queuing jobs, with dependencies on the application's dispatching services and job class instantiation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/jobs.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// using helper function\ndispatch(new CreateAndValidateAddressJob($recipients));\n\n// manually\nApp::make(\\Illuminate\\Contracts\\Bus\\Dispatcher\\Dispatcher::class)->dispatch(New StatusChangedJob($object));\n\n```\n\n----------------------------------------\n\nTITLE: Creating Users using Factory in PHP\nDESCRIPTION: This snippet shows how to use the defined User factory to create multiple user instances. It utilizes the `factory()` helper function to create 4 User model instances. This approach is used in tests to generate test data quickly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/factories.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// creating 4 users\nfactory(User::class, 4)->create();\n```\n\n----------------------------------------\n\nTITLE: Requesting Single Included Relationship via URL (Shell)\nDESCRIPTION: Demonstrates how an API consumer can request a specific relationship (defined in `$availableIncludes`) like `roles` to be embedded in the response by appending the `include=roles` query parameter to the request URL.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\napi.apiato.test/v1/users?include=roles\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to API Responses using 'withMeta' in Apiato (PHP)\nDESCRIPTION: Shows how to use the `withMeta` helper function chained before `transform` to include additional metadata in the API response. The metadata is provided as an array and will be added under a 'meta' key in the final JSON output.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$metaData = ['total_credits', 10000];\n\nreturn $this->withMeta($metaData)->transform($receipt, ReceiptTransformer::class);\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespaced Translation Apiato PHP\nDESCRIPTION: This PHP snippet demonstrates how to access a translation string located within a container's `Languages` folder using the `__()` helper. The key includes a namespace formed by the section and container names (`mySection@myContainer`), followed by the file name (`notifications`) and the specific key (`welcome`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/localization.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n__('mySection@myContainer::notifications.welcome')\n```\n\n----------------------------------------\n\nTITLE: Defining a Criteria Accepting Data (PHP)\nDESCRIPTION: This snippet illustrates how to create a Criteria class that accepts data via its constructor. The accepted data (a user ID in this case) is stored and then used within the `apply` method to build a dynamic query condition (filtering records by the specified user ID). This allows for more flexible and data-driven criteria.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/criterias.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ThisUserCriteria extends Criteria\n{\n    private $userId;\n\n    public function __construct($userId)\n    {\n        $this->userId = $userId;\n    }\n\n    public function apply($model, PrettusRepositoryInterface $repository)\n    {\n        return $model->where('user_id', '=', $this->userId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Laravel Artisan Command via Shell\nDESCRIPTION: This snippet shows how to invoke the previously defined Laravel Artisan command 'hello:world' from the command line. It uses the standard PHP artisan utility, which facilitates the execution of Laravel commands. This assumes the current directory contains the Laravel application's entry point and that the command is registered. The output will be the text printed by the handle method of the command class. This example demonstrates the operational usage of Artisan commands.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/commands.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan hello:world\n```\n\n----------------------------------------\n\nTITLE: Adding Social Authentication Fields to User Model - PHP\nDESCRIPTION: Defines additional fillable attributes on the User Eloquent model to store social authentication data such as provider, nickname, and token information. Add these fields to the $fillable array to enable mass-assignment when users sign in via social providers. Requires Laravel Eloquent ORM. Update only those fields relevant to your use case.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/social-authentication.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    protected $fillable = [\n        ...\n        'social_provider',\n        'social_nickname',\n        'social_id',\n        'social_token',\n        'social_token_secret',\n        'social_refresh_token',\n        'social_expires_in',\n        'social_avatar',\n        'social_avatar_original',\n        ...\n    ];\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Generator Command (Shell)\nDESCRIPTION: Executes the Apiato Artisan command to generate API documentation based on the docblocks in the project's route files. This command processes the docblocks and uses ApiDocJs to produce the static documentation files. It must be run from the project's root directory after modifying any docblocks.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Generating Test Users with Specific Attributes/Access in PHP\nDESCRIPTION: The `getTestingUser` method creates a test user instance. By default, it uses randomly generated attributes and assigns roles/permissions defined in the test class's `$access` property. You can override attributes and access rights by passing arrays as the first and second arguments, respectively. Passing `true` as the third argument generates an admin user using the `UserFactory`'s `admin` state. Custom user models require configuration in `app/Ship/Configs/apiato.php`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// The testing user will be created with randomly generated attributes \n// and will inherit the roles and permissions specified in the `$access` property.\n$user = $this->getTestingUser();\n```\n\nLANGUAGE: php\nCODE:\n```\n// The testing user will be created with the provided attributes and access rights.\n$user = $this->getTestingUser([\n    'email' => 'hello@mail.test',\n    'name' => 'Hello',\n    'password' => 'secret',\n], [\n    'permissions' => 'jump',\n    'roles' => 'jumper',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Create an admin user\n$user = $this->getTestingUser(null, null, true);\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameter IDs in Apiato PHP Tests\nDESCRIPTION: Provides an example of how to hash model IDs when including them in the request data payload for API calls within Apiato tests. It uses the getHashedKey() method available on models utilizing the HashIdTrait to ensure IDs are correctly encoded before sending them to the API endpoint that expects hashed IDs. An alternative is using `Hashids::encode($id)` manually.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/hash-id.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'roles_ids' => [\n        $role1->getHashedKey(),\n        $role2->getHashedKey(),\n    ],\n    'user_id'   => $randomUser->getHashedKey(),\n];\n$response = $this->makeCall($data);\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Factories using Artisan Command (Bash)\nDESCRIPTION: This command-line snippet shows how to use the Apiato Artisan command to interactively generate a new factory file. It guides the user through the process of creating a factory that follows Apiato's conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/factories.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan apiato:generate:factory\n```\n\n----------------------------------------\n\nTITLE: Throwing a Localized Exception with Error Messages in PHP\nDESCRIPTION: This snippet demonstrates throwing a localized AccountFailedException with error messages keyed to translation strings using the Localization Container provided by Apiato. When available, these error messages are automatically translated to the target language to improve internationalization.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/exceptions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// translation strings are automatically translated if the translations are found.\nthrow (new AccountFailedException())->withErrors(['email' => 'appSection@user::exceptions.email-taken']);\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 Token Response Example (json)\nDESCRIPTION: This JSON example shows the successful response from the OAuth token endpoint after a successful login attempt.  It contains `token_type`, `expires_in`, `access_token`, and `refresh_token`. The `access_token` is required for subsequent API requests, while the `refresh_token` is used to obtain a new access token when the current one expires.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400,\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUz...\",\n  \"refresh_token\": \"TPSPA1S6H8Wydjkjl+xt+hPGWTagL...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Validated Request in Apiato Controller (PHP)\nDESCRIPTION: Shows how to utilize a validated Request object within an Apiato Controller method. By type-hinting the Request (`RegisterUserRequest`), validation is automatically performed before the method body executes. Validated data can then be accessed directly from the request instance and passed to actions or other components.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    public function registerUser(RegisterUserRequest $request, CreateUserAction $action)\n    {\n        // if the actions takes the request object, you can pass the entire request instance as parameter\n        $user = Apiato::call('User@RegisterUserAction', [\n            [\n                $request['email'],\n                $request['password'],\n                $request['name'],\n                $request['gender'],\n                $request['birth']\n            ]\n        ]);\n        \n        return $this->transform($user, UserTransformer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Request Data for getInputByKey (JSON)\nDESCRIPTION: Shows a sample JSON request body structure typically used with `application/json` content types. It includes nested data and demonstrates different data types to illustrate how `getInputByKey` processes decoded values compared to standard request input methods.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\" : {\n    \"name\"  : \"foo\",\n    \"description\" : \"bar\"\n  },\n  \"id\" : \"a2423nadabada0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying PHPDoc when using native type hints (Apiato) - PHP\nDESCRIPTION: This snippet illustrates the Apiato coding style's approach to PHPDoc when native PHP type hints are used for method parameters and return types. When the native type hint is sufficiently descriptive (e.g., `void`), the corresponding `@param` or `@return` tags can be omitted to reduce redundancy and clutter.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/prologue/contribution-guide.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Execute the job.\n     */\n    public function handle(AudioProcessor $processor): void\n    {\n        //\n    }\n```\n\n----------------------------------------\n\nTITLE: Using withUrlParameters to Add URL Parameters\nDESCRIPTION: Demonstrates how to inject URL parameters into the request that aren't part of the request body but are required for processing, often used with injectData method.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$request = RegisterUserRequest::injectData($data)\n    ->withUrlParameters(['id' => 123]);\n```\n\n----------------------------------------\n\nTITLE: Generating Tests PHP Artisan Command\nDESCRIPTION: This command generates different types of tests. It leverages PHP's artisan command system, providing scaffolding for unit and functional tests. The user is prompted for input to create the test files.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:test:unit\nphp artisan apiato:generate:test:functional\nphp artisan apiato:generate:test:testcase\n```\n\n----------------------------------------\n\nTITLE: Calling makeCall Method\nDESCRIPTION: This code demonstrates the `makeCall` method, which is central to executing API requests within a functional test. The `makeCall` method takes an optional array and a header as parameters and executes a request to an application endpoint, leveraging properties defined in the functional test class. The method returns the response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->makeCall();\n\n$this->makeCall([\n    'email'    => $userDetails['email'],\n    'password' => $userDetails['password'],\n]);\n\n$this->makeCall($data, $headers);\n```\n\n----------------------------------------\n\nTITLE: Listing Code Generator Commands in Apiato - Bash\nDESCRIPTION: This code snippet demonstrates how to list all available Apiato code generator commands using the php artisan CLI tool. Dependencies include PHP, Composer, the Laravel framework, and the Apiato package installed in the project. The command outputs a list of generator commands such as generating containers, actions, controllers, and more, providing developers with an overview of scaffoldable components.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/code-generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan\n```\n\nLANGUAGE: bash\nCODE:\n```\napiato:generate:container        Create a Container for apiato from scratch\napiato:generate:action           Create a Action file for a Container\napiato:generate:configuration    Create a Configuration file for a Container\napiato:generate:controller       Create a controller for a container\napiato:generate:exception        Create a new Exception class\napiato:generate:job              Create a new Job class\napiato:generate:mail             Create a new Mail class\napiato:generate:migration        Create an \"empty\" migration file for a Container\napiato:generate:model            Create a new Model class\napiato:generate:notification     Create a new Notification class\napiato:generate:repository       Create a new Repository class\napiato:generate:request          Create a new Request class\napiato:generate:route            Create a new Route class\napiato:generate:seeder           Create a new Seeder class\napiato:generate:serviceprovider  Create a ServiceProvider for a Container\napiato:generate:subaction        Create a new SubAction class\napiato:generate:task             Create a Task file for a Container\napiato:generate:transformer      Create a new Transformer class for a given Model\n```\n\n----------------------------------------\n\nTITLE: Creating Rewards with Country Relationships using Factory in PHP\nDESCRIPTION: This code demonstrates how to create model instances with relationships using factories.  It first retrieves all available countries, then creates 3 reward instances.  For each reward, it attaches a random country to it using the `countries()` relationship. This example showcases how to create related data for testing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/factories.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$countries = Country::all();\n\n// creating 3 rewards and attaching country relation to them\n$rewards = factory(Reward::class, 3)->make()->each(function ($reward) use ($countries) {\n    $reward->save();\n    $reward->countries()->attach([$countries->random(1)->id, $countries->random(1)->id]);\n    $reward->save();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering New Users via Credential-Based HTTP POST Request Http\nDESCRIPTION: This snippet demonstrates how to register a new user by sending an HTTP POST request with email, password, and name fields to the API endpoint. It requires the endpoint to accept 'application/x-www-form-urlencoded' data and respond with a JSON user object. The example uses curl to submit the request. Key parameters include 'email', 'password', and 'name', which are required for account creation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/user-registration.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/register \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'email=john%40doe.com&password=password&name=John%20Doe'\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links\nDESCRIPTION: This snippet illustrates the creation of Markdown links using URL paths or relative file paths within a Docusaurus document. It shows the basic syntax for creating links in Markdown. The output is a clickable link to a page.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n```md\nLet's see how to [Create a page].\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Credentials in Environment (dotenv)\nDESCRIPTION: Stores the generated OAuth2 client credentials in environment variables for secure retrieval by the Laravel/Apiato application. The CLIENT_WEB_ID and CLIENT_WEB_SECRET keys must be set in the .env file using values generated from the previous installation step. No additional dependencies are required; these values are referenced during authentication requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCLIENT_WEB_ID=2\nCLIENT_WEB_SECRET=nu8B2npfoR4hP6sWHaf90EvWUFe2EDYyJXGnCrso\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching in Apiato Repository Configuration\nDESCRIPTION: Shows how to enable caching for repositories in the configuration file, which is disabled by default.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'cache' => [\n    'enabled' => true,\n],\n```\n\n----------------------------------------\n\nTITLE: Logout Request (Shell)\nDESCRIPTION: This code snippet provides the example of the logout process, which involves sending a DELETE request to the `/logout/` endpoint. The authorization is handled with the access token. The server will revoke the provided token.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nDELETE http://api.apiato.test/v1/logout/\n```\n\n----------------------------------------\n\nTITLE: Localization Folder Structure Using Markdown\nDESCRIPTION: Shows the recommended directory structure for placing language files within containers or the Ship directory. Each language has its own folder with PHP translation files, matching Laravel conventions for organizing translations.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/localization.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Languages\n                ├── en\n                │   ├── messages.php\n                │   ├── users.php\n                │   └── ...\n                ├── ar\n                │   ├── messages.php\n                │   ├── users.php\n                │   └── ...\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Including Relationships in API Responses with the Include Query Parameter\nDESCRIPTION: Examples demonstrating the use of ?include= parameter in API requests to load related data models (relationships) along with the main resource. This requires transformer classes to declare $availableIncludes and $defaultIncludes arrays specifying which relationships can or should be included. Nested includes are supported by chaining with commas (e.g., ?include=driver,driver.address). The transforms are typically implemented using the Fractal Transformer package.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n?include=tags,user\n```\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?include=relationship\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Seeder Using Artisan Command in Shell\nDESCRIPTION: This command generates a new seeder within the Apiato framework. It uses Laravel's Artisan command-line tool extended by Apiato to interactively create container-specific seeders following Apiato's conventions. It requires the Laravel framework with Apiato installed, and inputs are provided interactively. The command outputs the created seeder files within the correct container folders.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/seeders.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:generate:seeder\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions in Apiato with PHP\nDESCRIPTION: Demonstrates how to throw a previously defined custom Exception (AccountFailedException) from anywhere in the application. Throws the exception without parameters, which triggers default message and code properties. This snippet illustrates the usage context of the defined Exception classes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nthrow new AccountFailedException();\n```\n\n----------------------------------------\n\nTITLE: Example Raw JSON Payload for Sanitization - JSON\nDESCRIPTION: This snippet presents a sample JSON request body consumed by the sanitizeInput method in Apiato. Data includes both primitive fields and nested objects, demonstrating the applicability of dot notation during selective extraction within sanitizeInput in subsequent PHP code.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"Demo\",\n    \"description\": \"Some description\",\n    \"is_private\": false,\n    \"address\": \"\",\n    \"foo\": {\n      \"number\": 1,\n      \"bar\": \"bar\"\n    }\n  },\n  \"meta\": \"some meta data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing hashed IDs in URL paths in PHP\nDESCRIPTION: This snippet demonstrates how to inject a hashed ID into a URL path for testing API endpoints in Apiato. It uses the injectId helper method to automatically handle the ID encoding.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/hash-id.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->injectId($admin->id)->makeCall();\n```\n\n----------------------------------------\n\nTITLE: Registering General Service Providers in ShipProvider (PHP)\nDESCRIPTION: Illustrates the registration of general (application-wide) service providers inside the ShipProvider class located in app/Ship/Providers. The $serviceProviders array lists provider classes which will be registered framework-wide, allowing central management of providers that affect the entire application scope, rather than scoped to a single container.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic array $serviceProviders = [\n    CustomServiceProvider::class,\n    AnotherCustomServiceProvider::class,\n    EventsServiceProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Ordering and Sorting Resource Queries - RESTful API - bash\nDESCRIPTION: Demonstrates adding 'orderBy' and 'sortedBy' query parameters to control the order and sorting of results from a resource collection GET request. Relevant for endpoints supporting server-side ordering and sorting. Parameters specify the field to order by and the direction (e.g., 'desc') for sorting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars?orderBy=created_at&sortedBy=desc\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars?search=maker:mercedes&orderBy=created_at&sortedBy=desc\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Response Fields via Filter - RESTful API - bash\nDESCRIPTION: Shows usage of the 'filter' query parameter to request specific fields in the RESTful API response, optimizing payload size and relevancy. The filter is passed as a semicolon-delimited list of desired fields. Applies to both collection and single resource endpoints.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars?filter=id;name;status\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars/123?filter=id;name;status\n```\n\n----------------------------------------\n\nTITLE: Specifying Query Conditions and Search Fields in API Requests\nDESCRIPTION: These examples demonstrate the usage of ?searchFields= parameter alongside ?search= to define the operator conditions (e.g., 'like', '=') applied to searchable fields. Clients can combine fields and operators to customize how search queries are executed in the repository. Multiple search fields can be combined using semicolons.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n?search=field:keyword&searchFields=name:like\n```\n\nLANGUAGE: shell\nCODE:\n```\n?searchFields=name:like\n?searchFields=email:=\n```\n\nLANGUAGE: shell\nCODE:\n```\n?searchFields=name:like;email:=\n```\n\nLANGUAGE: shell\nCODE:\n```\n?search=git&searchFields=url:like\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Tests in Apiato Framework\nDESCRIPTION: A representation of the recommended folder structure for organizing tests in the Apiato framework. It shows how to organize test files across containers, including unit tests and functional tests for different UI layers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/tests.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - Tests\n                    - TestCase.php // the container test case\n                    - Unit\n                        - CreateUserTest.php\n                        - UpdateUserTest.php\n                        - ...\n                - UI\n                    - API\n                        - Tests\n                            - Functional\n                                - LoginTest.php\n                                - LogoutTest.php\n                                - ...\n                    - WEB\n                        - Tests\n                            - Functional\n                                - LoginTest.php\n                                - LogoutTest.php\n                                - ...\n                    - CLI\n                        - Tests\n                            - Functional\n                                - BackupDataTest.php\n                                - ...\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware Inside a Container in Apiato\nDESCRIPTION: Example of middleware registration within a container using the MiddlewareServiceProvider class. This code shows how to register middleware groups and route-specific middleware for a container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/middlewares.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MiddlewareServiceProvider extends MiddlewareProvider\n{\n    protected array $middlewares = [\n        // ..\n    ];\n\n    protected array $middlewareGroups = [\n        'web' => [\n            // ..\n        ],\n        'api' => [\n            // ..\n        ],\n    ];\n\n    protected array $routeMiddleware = [\n        // apiato User Authentication middleware for Web Pages\n        'guest' => RedirectIfAuthenticated::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Registration Data via JSON - Apiato - JSON\nDESCRIPTION: This JSON snippet demonstrates the expected format for sending user credentials in a POST request to the '/register' endpoint. It requires a string 'email' and 'password' key for user authentication. No nested or optional parameters are specified; both fields are mandatory and should be provided as strings in the request body.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/registration.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"gandalg@the.grey\",\n  \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking ListUsersTask with Various Criteria via Apiato Call in PHP\nDESCRIPTION: Provides multiple examples for calling a ListUsersTask with different method chains and arguments, demonstrating how extra methods (like 'ordered', 'clients', 'admins', or 'withRole') can be supplied to customize repository query criteria. Dependencies: User container must provide ListUsersTask class and supporting Criteria classes. Input arrays configure filters such as ordering or roles; output is a paginated user list matching the specified criteria.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/magical-call.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn Apiato::call('User@ListUsersTask', [], ['ordered']);\n// can be called this way as well Apiato::call(ListUsersTask::class, [], ['ordered']);\n\nreturn Apiato::call('User@ListUsersTask', [], ['ordered', 'clients']);\n\nreturn Apiato::call('User@ListUsersTask', [], ['admins']);\n\nreturn Apiato::call('User@ListUsersTask', [], ['admins', ['roles' => ['manager', 'employee']]]);\n```\n\n----------------------------------------\n\nTITLE: Link Repository to Model (Apiato PHP Repository)\nDESCRIPTION: Manually associate a repository with a specific model class by implementing the `model()` method, returning the model's fully qualified class name. This is necessary if the repository naming doesn't automatically link it to the model.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Repositories\\Repository as ParentRepository;\n\nclass DemoRepository extends ParentRepository\n{\n    // ...\n    \n    public function model(): string\n    {\n        return AnotherDemo::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Application Key in Apiato\nDESCRIPTION: Command to generate a random application key required for encryption in Apiato. This key is set in the APP_KEY environment variable.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan key:generate\n```\n\n----------------------------------------\n\nTITLE: Generating a new Job in Apiato using Artisan\nDESCRIPTION: This PHP code snippet demonstrates the command-line instruction to generate a new job within the Apiato framework. It utilizes Laravel's Artisan CLI to create a scaffold for a new job class, which is essential for task automation and background processing.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/jobs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:job\n```\n\n----------------------------------------\n\nTITLE: Setting up OAuth 2.0 in Apiato\nDESCRIPTION: Creates encryption keys and clients for OAuth 2.0 authentication to generate access tokens.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:install\n```\n\n----------------------------------------\n\nTITLE: Mocking External Payment Service Calls for Testing in PHP with Apiato\nDESCRIPTION: Illustrates how to mock external payment service API calls during testing using Apiato's mockIt helper. It mocks the ChargeWithStripeService and ChargeWithPaypalService classes, specifying that their 'charge' method should return predefined arrays to simulate payment gateway responses. This approach facilitates testing payment logic without creating real payment transactions or external API dependencies. The example assumes a test context with access to the mockIt method and a payId variable for description.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/payments.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n// mock the ChargeWithStripeService external API call\n$this->mockIt(ChargeWithStripeService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'stripe',\n   'description' => $payId\n]);\n\n// mock the ChargeWithPaypalService external API call\n$this->mockIt(ChargeWithPaypalService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'paypal',\n   'description' => $payId\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining FindUserByIdTest Class\nDESCRIPTION: This is an example of a functional test class. It defines endpoint, authentication requirement, and access control. It includes a test case `testFindUser` which retrieves and asserts the response of a user based on an ID. The test uses helper methods to inject an ID into the URI and make the API call. It verifies the response is successful and asserts the JSON structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\AppSection\\User\\Tests\\Functional\\API;\n\nuse App\\Containers\\AppSection\\User\\Data\\Factories\\UserFactory;\nuse App\\Containers\\AppSection\\User\\Tests\\Functional\\ApiTestCase;\nuse Illuminate\\Testing\\Fluent\\AssertableJson;\nuse PHPUnit\\Framework\\Attributes\\CoversNothing;\nuse PHPUnit\\Framework\\Attributes\\Group;\n\n#[Group('user')]\n#[CoversNothing]\nclass FindUserByIdTest extends ApiTestCase\n{\n    protected string $endpoint = 'get@v1/users/{id}';\n    protected bool $auth = true;\n    protected array $access = [\n        'permissions' => 'search-users',\n        'roles' => '',\n    ];\n\n    public function testFindUser(): void\n    {\n        $user = $this->getTestingUser();\n\n        $response = $this->injectId($user->id)->makeCall();\n\n        $response->assertOk();\n        $response->assertJson(\n            static fn (AssertableJson $json) => $json->has('data')\n                    ->where('data.id', \\Hashids::encode($user->id))\n                    ->etc()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Hashed ID in Query String (URL)\nDESCRIPTION: Shows how a hashed ID can be passed as a query string parameter in an HTTP request URL. Apiato's request decoding can automatically handle this if configured using `$decode` on the Request class, allowing access to the decoded ID via `$request->id`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/hash-id.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\n/items?id=XbPW7awNkzl83LD6\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Page URL in Apiato Authentication Config - PHP\nDESCRIPTION: Shows how to specify a custom login page URL within the Apiato authentication configuration file. This controls where unauthenticated users are redirected when the 'auth:web' middleware triggers. The value should correspond to a route or view name for the login page template.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'login-page-url' => 'login',\n```\n\n----------------------------------------\n\nTITLE: Implementing the ListUsersTask Class Using Repository Criteria in PHP\nDESCRIPTION: Defines the ListUsersTask for the User container, which injects a UserRepository and provides multiple criteria-setting methods. Each criteria method (clients, admins, ordered, withRole) pushes a corresponding filter onto the repository before invoking the run method, which returns a paginated list of users. Dependencies: UserRepository, criteria classes (AdminsCriteria, ClientsCriteria, RoleCriteria, OrderByCreationDateDescendingCriteria), Task parent class. Inputs are optional calls to criteria methods; output is a paginated Eloquent collection of users filtered according to specified criteria.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/magical-call.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Tasks;\n\nuse App\\Containers\\User\\Data\\Criterias\\AdminsCriteria;\nuse App\\Containers\\User\\Data\\Criterias\\ClientsCriteria;\nuse App\\Containers\\User\\Data\\Criterias\\RoleCriteria;\nuse App\\Containers\\User\\Data\\Repositories\\UserRepository;\nuse App\\Ship\\Criterias\\Eloquent\\OrderByCreationDateDescendingCriteria;\nuse App\\Ship\\Parents\\Tasks\\Task;\n\nclass ListUsersTask extends Task\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function run()\n    {\n        return $this->userRepository->paginate();\n    }\n\n    public function clients()\n    {\n        $this->userRepository->pushCriteria(new ClientsCriteria());\n    }\n\n    public function admins()\n    {\n        $this->userRepository->pushCriteria(new AdminsCriteria());\n    }\n\n    public function ordered()\n    {\n        $this->userRepository->pushCriteria(new OrderByCreationDateDescendingCriteria());\n    }\n\n    public function withRole($roles)\n    {\n        $this->userRepository->pushCriteria(new RoleCriteria($roles));\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Apiato Tasks (Shell)\nDESCRIPTION: Execute the `apiato:list:tasks` Artisan command to display a list of all existing Task classes found within your Apiato application's Containers.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/tasks.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:list:tasks\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Documentation Container (Shell)\nDESCRIPTION: Installs the Apiato documentation generator container dependency using Composer. This command adds the necessary package to your project's dependencies, providing the core functionality for generating API documentation within the Apiato framework. It's a standard Composer installation process.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/documentation-generator-container\n```\n\n----------------------------------------\n\nTITLE: Listing API Routes in Terminal - PHP\nDESCRIPTION: This snippet demonstrates how to list all available API routes in the terminal using the `php artisan route:list` command. This command is crucial for developers to quickly inspect all defined routes, including their methods, URIs, and associated controllers. It's a command-line utility available in Laravel, which Apiato is built upon.\n\nDependencies: Laravel framework and the `artisan` CLI tool. Expected output is a table displaying all routes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/default-endpoints.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan route:list\n```\n\n----------------------------------------\n\nTITLE: Defining Apiato Container Dependency in composer.json - JSON\nDESCRIPTION: This snippet shows how to specify a dependency on an Apiato container (such as apiato/welcome-container) in your project's composer.json file under the require section. The only prerequisite is an existing PHP project using Composer. The key parameter is the package name with a version constraint (e.g., ^2.0.1). This enables automatic installation and updating of Apiato containers to the correct directory. Inputs are the package metadata, and the output is a correctly configured dependency section for Composer. The limitation is that additional configuration may be needed for proper integration into your application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/container-installer.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"apiato/welcome-container\": \"^2.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Event/Listener Registration Structure (php)\nDESCRIPTION: Provides a diagrammatic representation of the file structure involved in the manual registration flow. It visually connects events and listeners to their respective `EventServiceProvider` files and shows how container service providers are registered within the `MainServiceProvider`/`ShipProvider`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/events.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           ├── Events\n│           │   ├── DemoEvent.php ────►─┐\n│           │   └── ...                 │\n│           ├── Listeners               │\n│           │   ├── DemoListener.php ─►─┤\n│           │   └── ...                 │\n│           └── Providers               ▼\n│               ├── EventServiceProvider.php ─────────►─────────┐\n│               ├── MainServiceProvider.php ◄───registered─in─◄─┘\n│               └── ...\n└── Ship\n    ├── Events\n    │   ├── ShipDemoEvent.php ──►─┐\n    │   └── ...                   │\n    ├── Listeners                 │\n    │   ├── ShipDemoListener.php ►┤\n    │   └── ...                   │\n    └── Providers                 ▼\n        ├── EventServiceProvider.php ─────────►─────────┐\n        ├── ShipProvider.php        ◄───registered─in─◄─┘\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Defining endpoint Property Example\nDESCRIPTION: This code snippet shows how to define an `endpoint` property within a functional test class. The `endpoint` property specifies the HTTP method and URI for the API call the test will execute. It allows overriding it in the specific test methods.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass FindUserByIdTest extends ApiTestCase\n{\n    // highlight-start\n    protected string $endpoint = 'get@v1/profile';\n    // highlight-end\n    \n    public function testGetAuthenticatedUser(): void\n    {\n        $user = $this->getTestingUser();\n\n        $response = $this->makeCall();\n        // You can override the \"endpoint\" property in specific test methods\n        // $response = $this->endpoint('get@v1/users')->makeCall();\n                \n        $response->assertOk();\n        // other assertions...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Middleware Service Provider Class in Container\nDESCRIPTION: Defines a container-specific MiddlewareServiceProvider class extending from a parent, used to register container middlewares. It includes properties for middleware arrays, allowing customization per container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/middlewares.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass MiddlewareServiceProvider extends ParentMiddlewareServiceProvider\n{\n    protected array $middlewares = [];\n    protected array $middlewareGroups = [];\n    protected array $middlewarePriority = [];\n    protected array $middlewareAliases = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Routing to Invokable Controller\nDESCRIPTION: Demonstrates how to switch from traditional controller method routing to invokable controllers in Apiato. It illustrates the change from specifying both the controller class and method name to directly referencing the controller class in route definitions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/prologue/release-notes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\\\ from\nRoute::get('profile', [GetAuthenticatedUserController::class, 'getAuthenticatedUser']);\n\\\\ to\nRoute::get('profile', GetAuthenticatedUserController::class);\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with Filename Flag\nDESCRIPTION: Command to list all implemented Tasks in an Apiato application with their corresponding file names. This helps developers understand all the available tasks in the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/useful-commands.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napiato:list:tasks --withfilename\n```\n\n----------------------------------------\n\nTITLE: Throwing Exception with Debug Logging in Apiato with PHP\nDESCRIPTION: Shows how to throw a custom Exception and simultaneously attach a debug log by invoking the 'debug' method on the Exception instance. The debug method accepts either a string or an Exception to enrich error context for troubleshooting. This enhances error visibility during development and debugging.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nthrow (new AccountFailedException())->debug($e); // debug() accepts string or \\Exception instance\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Installer globally\nDESCRIPTION: Installs the Apiato Installer as a global Composer dependency for easier project creation with additional features.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global require apiato/installer\n```\n\n----------------------------------------\n\nTITLE: Defining a FindUserById Task in Apiato (PHP)\nDESCRIPTION: This PHP snippet defines a Task class responsible for finding a user by their ID using the UserRepositoryInterface. The Task employs dependency injection to receive the repository instance and implements error handling by catching generic exceptions and throwing a UserNotFoundException. The run method accepts a user ID as input and returns the corresponding user object on success.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/tasks.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Tasks;\n\nuse App\\Containers\\User\\Contracts\\UserRepositoryInterface;\nuse App\\Ship\\Parents\\Tasks\\Task;\nuse Exception;\n\nclass FindUserByIdTask extends Task\n{\n    private $userRepository;\n\n    public function __construct(UserRepositoryInterface $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function run($id)\n    {\n        try {\n            $user = $this->userRepository->find($id);\n        } catch (Exception $e) {\n            throw new UserNotFoundException();\n        }\n\n        return $user;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Social Authentication Data to User Transformer - PHP\nDESCRIPTION: Adds social authentication-related fields to a user transformer array, enhancing API responses with social profile data when appropriate. Place this in the private user transformer to avoid exposing sensitive information in public responses. The $user variable represents the user instance.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/social-authentication.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'social_auth_provider' => $user->social_provider,\n    'social_nickname' => $user->social_nickname,\n    'social_id' => $user->social_id,\n    'social_avatar' => [\n        'avatar' => $user->social_avatar,\n        'original' => $user->social_avatar_original,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Paginated Response Example\nDESCRIPTION: This JSON snippet illustrates the `meta` section of a paginated API response in Apiato. It provides details like total items, items per page, current page, and pagination links.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/responses.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  },\n  \"include\": [ // what can be included\n    \"xxx\",\n    \"yyy\"\n  ],\n  \"custom\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Example Filtered API Response (JSON)\nDESCRIPTION: Shows a sample JSON response structure where the `?filter=id;status` query parameter has been applied. Only the 'id' and 'status' fields are present for the main resource and its included relationships ('products', 'recipients', 'store'). All other fields defined in the transformer are excluded.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"0one37vjk49rp5ym\",\n      \"status\": \"approved\",\n      \"products\": {\n        \"data\": [\n          {\n            \"id\": \"bmo7y84xpgeza06k\",\n            \"status\": \"pending\"\n          },\n          {\n            \"id\": \"o0wzxbg0q4k7jp9d\",\n            \"status\": \"fulfilled\"\n          }\n        ]\n      },\n      \"recipients\": {\n        \"data\": [\n          {\n            \"id\": \"r6lbekg8rv5ozyad\"\n          }\n        ]\n      },\n      \"store\": {\n        \"data\": {\n          \"id\": \"r6lbekg8rv5ozyad\"\n        }\n      }\n    }...\n\n```\n\n----------------------------------------\n\nTITLE: Chaining Pre-Run Methods with Arguments on Tasks via Apiato Call in PHP\nDESCRIPTION: Illustrates advanced usage of Apiato::call where pre-run methods (with or without arguments) are executed before the run method. The third argument is an array of either method names or associative arrays mapping method names to argument lists. This feature enables dynamic Task configuration in a single call. Dependencies: Apiato Task class methods must support called parameter lists. Output is the result of run, after all specified configuration methods execute.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/magical-call.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$foo = Apiato::call('Container@ActionOrTask', [$runArgument], [\n    [\n       'function1' => ['function1-argument1', 'function1-argument2']\n    ],\n    [\n       'function2' => ['function2-argument1']\n    ],\n]);\n\n$foo = Apiato::call('Container@ActionOrTask', [$runArgument], [\n    'function-without-argument',\n    [\n      'function1' => ['function1-argument1', 'function1-argument2']\n    ],\n]);\n\n$foo = Apiato::call('Container@ActionOrTask', [], [\n    'function-without-argument',\n    [\n      'function1' => ['function1-argument1', 'function1-argument2']\n    ],\n    'another-function-without-argument',\n    [\n      'function2' => ['function2-argument1', 'function2-argument2', 'function2-argument3']\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Data on a Transporter Instance (Basic) in PHP\nDESCRIPTION: Illustrates setting data on a `DataTransporter` instance after its creation by assigning values to its public properties, such as setting `bearerToken` from the request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$dataTransporter = new DataTransporter($request);\n$dataTransporter->bearerToken = $request->bearerToken();\n```\n\n----------------------------------------\n\nTITLE: Protecting API Endpoint with API Authentication\nDESCRIPTION: This snippet demonstrates how to protect an API endpoint using the `auth:api` middleware in Apiato. The middleware ensures that only authenticated users with a valid access token can access the endpoint.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$router->get('secret/info', [\n    'uses'       => 'Controller@getSecretInfo',\n    'middleware' => [\n        'auth:api',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Asserting Criteria Pushed to Repository in PHP\nDESCRIPTION: The `assertCriteriaPushedToRepository` method asserts that a specific Criteria object is pushed onto a specified Repository class when a certain action (like calling a Task method) is performed. It takes the Repository class name, the Criteria class name, and optionally an array of arguments passed to the Criteria constructor.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function testCanListAdminUsers(): void\n{\n    $this->assertCriteriaPushedToRepository(\n        UserRepository::class,\n        UserIsAdminCriteria::class,\n        ['admin' => true],\n    );\n    $task = app(ListUsersTask::class);\n\n    $task->admin();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering EventServiceProvider in MainServiceProvider\nDESCRIPTION: This code demonstrates how to register the `EventServiceProvider` within the `MainServiceProvider` in a Container. It shows the `EventServiceProvider::class` being added to the `$serviceProviders` array.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/events.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Ship\\Parents\\Providers\\MainServiceProvider as ParentMainServiceProvider;\n\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    protected array $serviceProviders = [\n        EventServiceProvider::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Getter Methods to Apiato Request Class PHP\nDESCRIPTION: Lists newly introduced getter methods added to the Apiato Request abstract class to facilitate easier access to URL parameters and data decoding. Methods include withUrlParameters(), getAccessArray(), getDecodeArray(), and getUrlParametersArray(). These additions aim to improve request data handling robustness and should be used to access request data in a consistent manner across the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/prologue/release-notes.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nwithUrlParameters()\ngetAccessArray()\ngetDecodeArray()\ngetUrlParametersArray()\n```\n\n----------------------------------------\n\nTITLE: Conditional Assignment from Request Data - PHP\nDESCRIPTION: Exemplifies traditional conditional extraction of request data for PATCH updates using has and input methods. PHP's falsy/empty handling is noted, demonstrating typical patterns prior to the sanitizeInput helper. No dependencies beyond Laravel's Request object.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nif ($request->has('data.name')) {\n   $data['name'] = $request->input('data.name');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Model via Artisan Command (Shell)\nDESCRIPTION: This command is used to interactively generate new Model files within the Apiato framework's structure. It prompts the user for necessary information to create the model correctly placed in the container's Models directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/models.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:generate:model\n```\n\n----------------------------------------\n\nTITLE: Registering Container Service Providers in Apiato using PHP\nDESCRIPTION: This snippet shows how to register container-level service providers, including a custom EventServiceProvider, by extending the MainProvider class. The array serviceProviders lists service providers that will be automatically registered by the framework, enabling features such as events within the container. This registration is essential for enabling container-specific services in Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/events.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Car\\Providers;\n\nuse App\\Ship\\Parents\\Providers\\MainProvider;\n\n/**\n * Class MainServiceProvider.\n *\n * The Main Service Provider of this container, it will be automatically registered in the framework.\n */\nclass MainServiceProvider extends MainProvider\n{\n\n    /**\n     * Container Service Providers.\n     *\n     * @var array\n     */\n    public $serviceProviders = [\n        EventServiceProvider::class,\n    ];\n\n```\n\n----------------------------------------\n\nTITLE: Generating Route using APIato Artisan Command (Shell)\nDESCRIPTION: Use this interactive command provided by Apiato's core to generate a new route file quickly. The command prompts for necessary information like the container, endpoint name, version, and visibility (public/private) to ensure the new file adheres to the framework's conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/routes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:route\n```\n\n----------------------------------------\n\nTITLE: Defining General Exception with Custom Data in Apiato with PHP\nDESCRIPTION: Defines a general Exception class 'AwesomeExceptionWithCustomData' in Ship layer, extending Apiato's Exception. It adds not only status code and message but also a method 'addCustomData' to return structured additional data that will be included in formatted exception output. This enables detailed error information or metadata alongside the standard properties. It requires Symfony Response for status code constants. Inputs are the class properties and custom data method; outputs include extended error details for frontend or logging.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Ship\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response as SymfonyResponse;\n\nclass AwesomeExceptionWithCustomData extends Exception\n{\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n    \n    public $code = 1234;\n    \n    /*\n     * Everything you add here will be automatically added to the ExceptionFormatter on the top level!\n     * You can define any structure you want or maybe include translated messages\n     */\n    public function addCustomData() {\n        return [\n            'title' => 'nice',\n            'description' => 'one fancy description here',\n            'foo' => true,\n            'meta' => [\n                'bar' => 1234,\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting a Token With Alternative Login Field (JSON Payload)\nDESCRIPTION: Demonstrates a JSON request to the authentication endpoint where the username field is used for a phone number instead of an email, requiring 'username' and 'password'. The backend must be configured to accept phone as a login field for this to work. This flexibility supports multi-field authentication workflows.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"+1234567890\",\n  \"password\": \"secret\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies for API Documentation in Apiato\nDESCRIPTION: NPM command to install required Node.js dependencies, including ApiDocJs, for generating API documentation in an Apiato project.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Apiato Single Validation Error Response (JSON)\nDESCRIPTION: Provides the standard JSON format returned by Apiato when a single field fails validation. It includes an 'errors' object mapping the field name to an array containing the error message(s), a 'status_code' (typically 422 Unprocessable Entity), and a general 'message'.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/validation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ]\n  },\n  \"status_code\": 422,\n  \"message\": \"The given data failed to pass validation.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Service Providers in MainServiceProvider\nDESCRIPTION: Code snippet showing how to register additional container-specific service providers in the MainServiceProvider within an Apiato container. This enables loading of job-specific providers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/providers.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic array $serviceProviders = [\n    AuthServiceProvider::class,\n    EventsServiceProvider::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Middleware Registration Flow Diagram (Mermaid)\nDESCRIPTION: Provides a Mermaid graph visualizing the registration sequence for middlewares in Apiato. It shows how container-specific middlewares (`DemoMiddleware`) are registered via their `MiddlewareServiceProvider`, which is loaded by the `MainServiceProvider`. Ship-level middlewares (`ShipDemoMiddleware`) are registered directly in the `HttpKernel`. Both `MainServiceProvider` and `HttpKernel` are loaded by the application's Service Provider Loader.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/middlewares.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Container\n    MainServiceProvider\n    MiddlewareServiceProvider\n    DemoMiddleware\n  end\n  \n  MainServiceProvider -->|loads| MiddlewareServiceProvider\n  MiddlewareServiceProvider -->|registered in| MainServiceProvider\n  DemoMiddleware -->|registered in| MiddlewareServiceProvider\n  \n  subgraph Ship\n    HttpKernel\n    ShipDemoMiddleware\n  end\n\n  subgraph Application\n    SPLoader[[Service Provider Loader]]-- loads-->MainServiceProvider\n    SPLoader-- loads-->HttpKernel\n  end\n  \n  HttpKernel -->|loads| ShipDemoMiddleware\n  ShipDemoMiddleware -->|registered in| HttpKernel\n```\n\n----------------------------------------\n\nTITLE: Generating a New Container using Artisan\nDESCRIPTION: This command generates a new container along with all its components within an Apiato application. It uses the `apiato:generate:container` Artisan command.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/architecture-concepts/container.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:container\n```\n\n----------------------------------------\n\nTITLE: Injecting Hashed URL IDs in Apiato PHP Tests\nDESCRIPTION: Illustrates using the injectId() helper function within Apiato API tests to correctly format the URL for endpoints that expect hashed IDs in the path. This function takes the original ID, hashes it (by default, unless skipEncoding is true), and injects it into the test URL template (`{id}` by default) before making the API call, ensuring test requests match the expected format.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/hash-id.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->injectId($admin->id)->makeCall();\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Data Seeder in Apiato with Artisan CLI in Bash\nDESCRIPTION: Shows how to manually seed deployment (production) data using a special Apiato seeder found at `app/Ship/Seeders/SeedDeploymentData.php`. Like the testing seeder, this is triggered manually through an artisan command.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/seeders.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:seed-deployment\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Dependencies with Composer\nDESCRIPTION: Command to install all required dependency packages for Apiato after manual installation via Git or direct download.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Container Views in Apiato\nDESCRIPTION: Shows the recommended directory structure for organizing Views within an Apiato Container. Views should be placed inside the UI/WEB/Views directory of their respective Container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/views.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n - app\n    - Containers\n        - {container-name}\n            - UI\n                - WEB\n                    - Views\n                        - welcome.php\n                        - profile.php\n                        - ...\n```\n\n----------------------------------------\n\nTITLE: Changing Documentation URLs (.env)\nDESCRIPTION: Shows how to override the default URLs for accessing the generated public and private API documentation using environment variables in the `.env` file. Setting `PUBLIC_DOCS_URL` and `PRIVATE_DOCS_URL` allows customizing the routes where the documentation is served within the application. The values are relative paths.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_6\n\nLANGUAGE: dotenv\nCODE:\n```\nPUBLIC_DOCS_URL=docs/public\nPRIVATE_DOCS_URL=docs/private\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Exception in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to throw an instance of the AccountFailedException, which is a custom exception presumably extending the base Exception class. This basic throw statement triggers exception handling with the default message and code.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/exceptions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nthrow new AccountFailedException();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Queued Event with Custom Delay and Queue in Apiato Using PHP\nDESCRIPTION: This PHP class defines an event, ExampleEvent, that implements the custom ShouldHandle interface signaling it should be handled asynchronously. It sets properties to configure the job's delay (60 seconds) and the specific queue name 'example_queue'. The handle() method contains the logic to execute when the event job runs. This requires the Apiato event abstractions and Laravel's queueing system to process events asynchronously with custom parameters.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/events.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Containers\\Example\\Events;\n\n\nuse Apiato\\Core\\Abstracts\\Events\\Interfaces\\ShouldHandle;\nuse App\\Ship\\Parents\\Events\\Event;\n\nclass ExampleEvent extends Event implements ShouldHandle\n{\n    /**\n     * If ShouldHandle interface is implemented this variable\n     * sets the time (in seconds or timestamp) to wait before a job is executed\n     *\n     * @var \\DateTimeInterface|\\DateInterval|int|null $jobDelay\n     */\n    public $jobDelay = 60;\n\n    /**\n     * If ShouldHandle interface is implemented this variable\n     * sets the name of the queue to push the job on\n     *\n     * @var string $jobQueue\n     */\n    public $jobQueue = \"example_queue\";\n\n    public function handle()\n    {\n        // Do some handling here\n    }\n    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint and Authorization in Apiato Tests Using PHP\nDESCRIPTION: This snippet shows how to configure a test class using the $endpoint, $auth, and $access properties in Apiato tests. $endpoint specifies the HTTP verb and URI for the API call (e.g., 'post@register'). $auth controls whether authentication is required for the call, defaulting to true. $access defines roles and permissions assigned to the testing user, influencing authorization during tests. The snippet's example demonstrates setting these properties and making a POST request with makeCall(), then asserting the HTTP response status. It enables streamlined test setup by defining request and authorization context at the class level.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tests-helpers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass RegisterUserTest extends ApiTestCase\n{\n    protected string $endpoint = 'post@register';\n    protected bool $auth = false;\n    protected array $access = [\n        'roles'       => '',\n        'permissions' => '',\n    ];\n\n    public function testRegisterNewUserWithCredentials()\n    {\n        // prepare your post data\n        $data = [\n            'email'    => 'john@doe.test',\n            'name'     => 'John Doe',\n            'password' => 'secret',\n        ];\n\n        // send the HTTP request\n        $response = $this->makeCall($data);\n\n        // assert response status is correct\n        $this->assertEquals('200', $response->getStatusCode());\n\n        // ... add all your assertions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Facade Aliases in Container MainServiceProvider (PHP)\nDESCRIPTION: Shows how to declare facade aliases in the $aliases array property of a container's MainServiceProvider class. These aliases map string keys to fully qualified facade class names, easing their usage via simplified names across the application. This enables better abstraction and convenience when referencing complex classes.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic array $aliases = [\n    \"CustomAlias\" => CustomFacade::class,\n    \"AnotherCustomAlias\" => AnotherCustomFacade::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Factories in Apiato Containers\nDESCRIPTION: Demonstrates the recommended folder structure for organizing factory files within Apiato Containers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/factories.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                 - Data\n                    - Factories\n                        - UserFactory.php\n                        - ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Languages in PHP\nDESCRIPTION: This PHP snippet demonstrates how to define supported languages within the localization configuration file, including main language codes and regional variants like 'en-GB' and 'en-US'. Modifying this array helps prevent unsupported language requests and manages localization options.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/localization.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    'supported_languages' => [\n        'ar',\n        'en' => {\n            'en-GB',\n            'en-US',\n        },\n        'es',\n        'fr',\n        'fa',\n    ],\n```\n\n----------------------------------------\n\nTITLE: Adding Social Auth Fields to User Transformer (PHP)\nDESCRIPTION: Demonstrates how to optionally include social authentication fields in an Apiato user API response transformer. This makes social provider details (provider name, ID, avatar) available to clients consuming the API. It's recommended to add these fields to a private transformer for data privacy.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'social_auth_provider' => $user->social_provider,\n    'social_nickname' => $user->social_nickname,\n    'social_id' => $user->social_id,\n    'social_avatar' => [\n        'avatar' => $user->social_avatar,\n        'original' => $user->social_avatar_original,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using withMeta Helper Function PHP\nDESCRIPTION: Shows how to use the `withMeta` helper function to add custom metadata to the response payload before transforming the data using `transform`. This allows including additional information like totals or pagination alongside the serialized resource data in the API response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/controllers.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$metaData = ['total_credits', 10000];\n\nreturn $this->withMeta($metaData)->transform($receipt, ReceiptTransformer::class);\n```\n\n----------------------------------------\n\nTITLE: Switching Back to Upgrade Branch\nDESCRIPTION: Returns to the upgrade-apiato branch where you'll merge the latest Apiato changes with your custom project code.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout upgrade-apiato\n```\n\n----------------------------------------\n\nTITLE: Referencing an Email Template in Apiato (PHP)\nDESCRIPTION: Explains the specific syntax used within the `build` method of an Apiato Mail class to reference an email template located in a container's `Mails/Templates` directory. The format `sectionName@containerName::templateFileName` is used to locate the Blade view file.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/mails.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->view('appSection@user::user-registered');\n```\n\n----------------------------------------\n\nTITLE: Implementing the model() Method for Different Model and Container Names\nDESCRIPTION: Demonstrates how to implement the model() method in a repository when the model name differs from the container name, allowing proper model association.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/repositories.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRepository extends Repository\n{\n    // ...\n    \n    public function model(): string\n    {\n        return Demo::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository for Your Project - Bash\nDESCRIPTION: Shows how to initialize a new Git repository in your project directory. Dependency: Git must be installed. This command sets up version control in the current directory, creating an empty repository and .git folder.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: json Method Usage\nDESCRIPTION: This code snippet shows how to utilize the `json` method in the APIATO framework. The `json` method allows you to send an array of data, which is then represented as a JSON response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->json($data)\n```\n\n----------------------------------------\n\nTITLE: Guidelines for Third-Party Middleware Registration\nDESCRIPTION: Provides instructions for integrating third-party package middlewares either within specific containers' MiddlewareServiceProviders or globally in HttpKernel, depending on usage scope.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/middlewares.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Registering a New Social Auth Provider in Vendor Config (PHP)\nDESCRIPTION: Shows the syntax for registering a custom social authentication provider in the Apiato vendor-socialAuth.php configuration file. Requires implementing the SocialAuthProvider contract in a new provider class. Add your provider key and fully qualified class name to the providers array, maintaining existing providers as needed. Ensure the class exists and adheres to contract requirements.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/social-authentication.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'providers' => [\n    ...\n    'something' => Location\\Of\\Your\\Provider\\SomthingSocialAuthProvider::class,\n],\n```\n\n----------------------------------------\n\nTITLE: Example Apiato Validation Error Response (Single Field - JSON)\nDESCRIPTION: Illustrates the JSON structure of an Apiato validation error response when a single input field fails validation. The response includes a general `message` and an `errors` object containing the specific field (`email` in this example) and an array of corresponding error messages.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/validation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composer Configuration for Container Development (example)\nDESCRIPTION: This snippet shows the basic structure of a `composer.json` file for developing an Apiato container. It specifies the container's name, description, type ('apiato-container'), dependencies, and Apiato-specific metadata. Key elements are the `type` field, which must be set to `apiato-container`, and the `extra.apiato.container.name` field, which defines the container's name within the `app/Containers/VendorSection` folder.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/container-installer.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"vendor/project\",\n  \"description\": \"This is a short description for your container.\",\n  \"type\": \"apiato-container\",   // you must set the type to \"apiato-container\" here.\n  \"require\": {\n    \"somevendor/somepackage\" : \"dev-master\"\n    // some other requirements here\n  },\n  \"extra\": {\n    \"apiato\": {\n      \"container\": {\n        \"name\": \"Foo\"   // The name of the container within the /app/Containers/VendorSection folder\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Events with Artisan\nDESCRIPTION: These commands are used to generate new event and listener files using the Apiato Artisan command.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/events.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:event\n```\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:listener\n```\n\n----------------------------------------\n\nTITLE: Transforming Single Item Data Using Controller in PHP\nDESCRIPTION: This snippet demonstrates how to use a transformer from a controller to format data for a single item. It calls the `transform()` method, passing the item data and the transformer class (`UserTransformer::class`). The controller relies on a `getUser()` method, which likely retrieves a user object. This is a basic example of how to apply the transformer to the retrieved data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/transformers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\n$user = $this->getUser();\n\n$this->transform($user, UserTransformer::class);\n\n// more options are available\n```\n```\n\n----------------------------------------\n\nTITLE: Returning Raw JSON Responses using 'json' Helper in Apiato (PHP)\nDESCRIPTION: Example of using the `json` helper function in Apiato controllers (from `ResponseTrait.php`). This allows returning a simple JSON response directly from a PHP associative array, bypassing the transformer layer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->json([\n    'foo': 'bar'\n])\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Configuration File - Apiato/Laravel - PHP\nDESCRIPTION: This snippet represents a basic configuration file in an Apiato container, following naming and placement conventions described in the documentation. The file is returned as a PHP array of key-value pairs for various settings, with a sample 'namespace' key defined. No external dependencies are needed beyond Laravel, and there are no required parameters to edit unless the project dictates new keys. The file should be located as app/Containers/{SectionName}/{ContainerName}/Configs/{section-name}-{container-name}.php. It returns the configuration array for use via Laravel's Config system. The config file must follow the documented naming convention to avoid conflicts, and should not be placed in the root config directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/configs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/Containers/{SectionName}/{ContainerName}/Configs/{section-name}-{container-name}.php\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Namespace\n    |--------------------------------------------------------------------------\n    */\n    'namespace'       => 'App',\n\n    // some other config params here...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Scheduler via Cron Job (Shell)\nDESCRIPTION: Sets up a server-level Cron job to trigger the Laravel scheduler runner (`artisan schedule:run`) every minute. This single entry is crucial for enabling the application's defined schedules to be executed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/miscellaneous/tasks-scheduling.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncrontab -e\n* * * * * php /path-to-your-project/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Example of Unprotected API Endpoint Call using cURL\nDESCRIPTION: This snippet demonstrates how to perform a POST request to an unprotected endpoint with form data, including necessary headers such as 'Accept' and 'Content-Type'. It shows how to pass user credentials for registration or login in form-url-encoded format.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/requests.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Accept: application/json\" -H \"Content-Type: application/x-www-form-urlencoded\" -F \"email=admin@admin.com\" -F \"password=admin\" \"http://api.domain.test/v2/register\"\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Middleware Registration Flow\nDESCRIPTION: Displays the relevant folder structure to understand the middleware registration flow. It points out the middleware file (`DemoMiddleware.php`), its registration provider (`MiddlewareServiceProvider.php`), the main provider (`MainServiceProvider.php`), the ship kernel (`HttpKernel.php`), and a ship-level middleware (`AnotherMiddleware.php`).\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/middlewares.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           ├── Middlewares\n│           │   ├── DemoMiddleware.php ─►─┐\n│           │   └── ...                   │\n│           └── Providers                 ▼\n│               ├── MiddlewareServiceProvider.php ─────►─────┐\n│               ├── MainServiceProvider.php ◄─registered─in─◄┘\n│               └── ...\n└── Ship\n    ├── Kernels\n    │   ├── HttpKernel.php ◄─registered─in─◄┐\n    │   └── ...                             │\n    └── Middlewares                         │\n        ├── AnotherMiddleware.php ─────►────┘\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Social Auth (Shell)\nDESCRIPTION: Executes the necessary database migrations after installing the social auth container using the Artisan command. This step updates the database schema, adding tables or columns required for social authentication. Requires a configured database connection.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Welcome Page View in Apiato\nDESCRIPTION: Sample HTML code for a simple welcome page View in an Apiato Container. This demonstrates the basic structure of an HTML view file that can be used in the framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/views.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome</title>\n</head>\n<body>\n<div class=\"container\">\n    <div class=\"content\">\n        <div class=\"title\">Welcome</div>\n    </div>\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Apiato Service Providers (PHP)\nDESCRIPTION: Displays the folder hierarchy illustrating how service providers are organized in Apiato. Container-specific providers live under app/Containers/{Section}/{Container}/Providers, while general (Ship) providers reside in app/Ship/Providers. The highlighted entries emphasize MainServiceProvider and ShipProvider as central registration points. This structure facilitates modular registration and scoped provider management.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Providers\n│               ├── AuthServiceProvider.php\n│               ├── BroadcastServiceProvider.php\n│               ├── EventServiceProvider.php\n                // highlight-start\n│               ├── MainServiceProvider.php\n                // highlight-end\n│               ├── MiddlewareServiceProvider.php\n│               ├── RouteServiceProvider.php\n│               ├── CustomServiceProvider.php\n│               └── ...\n└── Ship\n    └── Providers\n        ├── RouteServiceProvider.php\n        // highlight-start\n        ├── ShipProvider.php\n        // highlight-end\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Supported Languages Configuration in PHP\nDESCRIPTION: Defines the 'supported_languages' array within the Localization container's config file to specify which languages and language variants (regions) are allowed in the application, preventing unsupported language requests. Supports nested arrays for regional variants.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/localization.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'supported_languages' => [\n    'ar',\n    'en' => [\n        'en-GB',\n        'en-US',\n    ],\n    'es',\n    'fr',\n    'fa',\n],\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato via Composer (Development Branch)\nDESCRIPTION: Command to install the development version of Apiato, which includes upcoming features but may be unstable. Requires regular syncing with upstream repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project apiato/apiato my-api dev-master\n```\n\n----------------------------------------\n\nTITLE: Customizing the ApiDocJs Executable Path in Config - Apiato (PHP)\nDESCRIPTION: Shows a code snippet for configuring the path to the ApiDocJs executable in an Apiato configuration file. Typically placed in a configuration PHP file after publishing vendor configs. The 'executable' key specifies how the apidoc tool should be invoked or located. Ensure the specified path matches the actual installation location of apidoc within your project, otherwise documentation generation may fail.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    /*\n    |--------------------------------------------------------------------------\n    | Executable\n    |--------------------------------------------------------------------------\n    |\n    | Specify how you run or access the `apidoc` tool on your machine.\n    |\n    */\n\n    'executable' => 'node_modules/.bin/apidoc',\n    // 'executable' => 'apidoc',\n```\n\n----------------------------------------\n\nTITLE: Allowing Request Criteria Invocation in Repository Mock - PHP\nDESCRIPTION: This code snippet demonstrates how to allow the `addRequestCriteria` method to be invoked on a mocked repository within a test. It sets up a test case for verifying the correct usage of RequestCriteria in a repository. It requires a mocked repository, a criteria class, and optional parameters for the criteria.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function testCanListAdminUsers(): void\n{\n    $repositoryMock = $this->assertCriteriaPushedToRepository(\n        UserRepository::class,\n        UserIsAdminCriteria::class,\n        ['admin' => true],\n    );\n    // highlight-next-line\n    $this->allowAddRequestCriteriaInvocation($repositoryMock);\n    $task = app(ListUsersTask::class);\n\n    $task->admin();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Apiato Transporter Class in PHP\nDESCRIPTION: Example of a Transporter class (`ProxyApiLoginTransporter`) extending the base `Transporter`. It defines a schema with properties, required fields, and default values using the `$schema` property, leveraging the underlying DTO package.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Authentication\\Transporters;\n\nuse App\\Ship\\Parents\\Transporters\\Transporter;\n\nclass ProxyApiLoginTransporter extends Transporter\n{\n\n    /**\n     * @var array\n     */\n    protected $schema = [\n        'properties' => [\n            'email',\n            'password',\n            'client_id',\n            'client_password',\n            'grant_type',\n            'scope',\n        ],\n        'required'   => [\n            'email',\n            'password',\n            'client_id',\n            'client_password',\n        ],\n        'default'    => [\n            'scope' => '',\n        ]\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Fillable Social Auth Fields to Laravel User Model (PHP)\nDESCRIPTION: Extends the $fillable array in the Laravel User model to include fields required for storing social authentication data such as provider, nickname, ID, tokens, and avatars. This enables mass assignment for these attributes. Prerequisites include a working User model and a compatible database structure to accommodate the new fields. Fields should match those expected by the social authentication process.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/social-authentication.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected $fillable = [\n    ...\n    'social_provider',\n    'social_nickname',\n    'social_id',\n    'social_token',\n    'social_token_secret',\n    'social_refresh_token',\n    'social_expires_in',\n    'social_avatar',\n    'social_avatar_original',\n    ...\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from apiato Request with retrieve (PHP)\nDESCRIPTION: Demonstrates how to retrieve data previously stored on the apiato request object using the `keep` method. The `retrieve` method accesses the stored value using the key it was associated with.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$someValue = $request->retrieve('someKey')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Pagination Limit in .env\nDESCRIPTION: This snippet shows the configuration in the .env file which changes the default pagination limit used by the L5 Repository package. It is a global setting that affects pagination across the project. The variable `PAGINATION_LIMIT_DEFAULT` can be set to change this limit.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/pagination.md#_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nPAGINATION_LIMIT_DEFAULT=10\n```\n\n----------------------------------------\n\nTITLE: Creating a Spy with Repository - Apiato Core (PHP)\nDESCRIPTION: This snippet illustrates the use of createSpyWithRepository to generate a spy for a Task class (CreateUserTask) tied to its repository (UserRepository). It enables verification that the Task's run method is invoked with the expected data when called from within an Action (CreateUserAction). The test expects specific input data (email, password) and checks the spy's received method calls. Dependencies include both the Task and Repository classes, and an application container is required to resolve the Action. This method facilitates behavioral testing of internal Task-Action interactions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function testCanCreateUser(): void\n{\n    $data = [\n        'email' => 'gandalf@the.grey',\n        'password' => 'you-shall-not-pass',\n    ];\n    $taskSpy = $this->createSpyWithRepository(CreateUserTask::class, UserRepository::class);\n    $action = app(CreateUserAction::class);\n\n    $action->run($data);\n    \n    $taskSpy->shouldHaveReceived('run')->once()->with($data);\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting local branch to match remote upstream branch with Git reset --hard\nDESCRIPTION: Resets the current local branch to match the specified upstream branch exactly, discarding local changes to ensure the branch reflects the latest upstream state.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit reset --hard upstream/{upstream-branch-name}\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Job via Artisan Command - PHP\nDESCRIPTION: This snippet demonstrates the use of the Apiato Artisan command `apiato:generate:job` to generate new jobs.  It's an interactive command and likely prompts for job name, etc.  It leverages Laravel's Artisan command system.  No dependencies are explicitly listed but it depends on the Apiato framework and Laravel.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/jobs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:job\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Keywords in Specific Fields (URL)\nDESCRIPTION: Shows how to search for different keywords within specific fields simultaneously using the `?search=` parameter. Each field-keyword pair is specified using `field:keyword` syntax, and pairs are separated by semicolons (`;`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\napi.domain.test/endpoint?search=field1:first field keyword;field2:second field keyword\n```\n\n----------------------------------------\n\nTITLE: Config Folder Structure - Apiato - Markdown\nDESCRIPTION: This snippet shows the recommended folder structure for configuration files in an Apiato project.  It organizes configurations by Container, Section and Ship layers to keep configs organized and easy to locate. The root `config` folder should only contain Laravel configuration files.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/configs.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Configs\n│               ├── section-container.php\n│               ├── another.php\n│               └── ...\n├── Ship\n│   └── Configs\n│       ├── another-thing.php\n│       ├── and-another.php\n│       └── ...\n└── config\n    ├── app.php\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests to API Endpoints with makeCall() in PHP\nDESCRIPTION: Details the makeCall() helper function used to send HTTP requests to API endpoints defined by the $endpoint property or method overrides. This function supports passing request payloads and custom headers, toggling authentication, and substituting route parameters dynamically. The examples illustrate different common usages including GET and POST requests, disabling authentication, and injecting dynamic route IDs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/miscellaneous/tests-helpers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->makeCall();\n\n$response = $this->makeCall([\n    'email'    => $userDetails['email'],\n    'password' => $userDetails['password'],\n]);\n\n$response = $this->makeCall($data, $headers);\n\n$response = $this->endpoint('get@register')->makeCall();\n\n$response = $this->auth(false)->makeCall();\n\n$response = $this->endpoint('get@item/{id}')->injectId($user->id)->makeCall();\n```\n\n----------------------------------------\n\nTITLE: Inspecting Rate Limiting Headers in HTTP Responses\nDESCRIPTION: This snippet demonstrates the HTTP response headers used by Laravel rate limiting within Apiato. The 'X-RateLimit-Limit' header reports the total allowed requests per window, while 'X-RateLimit-Remaining' shows how many requests are left in the current window. These headers are included automatically in API responses with rate limiting enabled. No external dependencies are required, but the feature is enabled by default in Apiato's API middleware configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/framework-features/rate-limiting.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nX-RateLimit-Limit → 30\nX-RateLimit-Remaining → 29\n```\n\n----------------------------------------\n\nTITLE: Example JSON Error Response Format\nDESCRIPTION: This JSON snippet represents the typical structure of the API response body returned when an exception containing validation errors is thrown. It includes a general message and an errors object with specific field error messages as arrays.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/exceptions.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"The exception error message.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant Virtual Machine for Apiato Development\nDESCRIPTION: Command to start the Homestead Vagrant virtual machine with provisioning, setting up the development environment for Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nhomestead up --provision\n```\n\n----------------------------------------\n\nTITLE: Change Login Page (PHP)\nDESCRIPTION: This code snippet explains how to configure the login page URL. The default is determined in the configuration file and can be modified to match the specific name of the login page.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'login-page-url' => 'login',\n```\n\n----------------------------------------\n\nTITLE: Creating composer.json for an Apiato Container Package - JSON\nDESCRIPTION: This snippet provides an example composer.json required when developing and packaging a custom Apiato container for public distribution. Required dependencies include Composer and adherence to Apiato's packaging conventions. The key parameters are \"type\": \"apiato-container\" and the \"extra.apiato.container.name\" metadata, which enable custom installer handling and define the target installation folder. Inputs are package metadata and requirements, outputs are a composer.json that enables Composer installation via Packagist. Failure to set the correct type or metadata will prevent proper installation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/container-installer.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"vendor/project\",\n  \"description\": \"This is a short description for your container.\",\n  \"type\": \"apiato-container\",   // you must set the type to \\\"apiato-container\\\" here.\n  \"require\": {\n    \"somevendor/somepackage\" : \"dev-master\"\n    // some other requirements here\n  },\n  \"extra\": {\n    \"apiato\": {\n      \"container\": {\n        \"name\": \"Foo\"   // The name of the container within the /app/Containers/Vendor folder\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling an Action with a Request Object in PHP\nDESCRIPTION: Shows how to call an Apiato Action (`MyContainer@myAction`) that expects a `Request` object by directly passing the `$request` variable. If the Request class has a specific Transporter defined via `$transporter`, that Transporter might be passed instead, allowing the Action to type-hint the custom Transporter.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// you would pass a Request to it\n$user = Apiato::call('MyContainer@myAction', [$request]);\n\n// if request has Transporter defined on it, it will be the one passed to the Action. So the Action can even type hint the custom Transporter defined on the Request.\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Languages Apiato PHP\nDESCRIPTION: This PHP code snippet shows the structure of the `supported_languages` array within the `vendor-localization.php` configuration file. It defines the top-level supported languages and their optional regional variations, used by the localization middleware to validate requested languages.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/localization.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n    'supported_languages' => [\n        'ar',\n        'en' => [\n            'en-GB',\n            'en-US',\n        ],\n        'es',\n        'fr',\n        'fa',\n    ],\n```\n\n----------------------------------------\n\nTITLE: Recommended Folder Structure for Apiato Actions (Markdown)\nDESCRIPTION: Illustrates the standard directory layout for organizing Action classes within an Apiato container's dedicated 'Actions' subfolder.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/actions.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Actions\n                ├── CreateResourceAction.php\n                ├── DeleteResourceAction.php\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Views from a Web Controller in PHP\nDESCRIPTION: Demonstrates how to render a View from a Web Controller in Apiato. The example shows the controller class structure and the proper method for loading a view within a Container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/views.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Welcome\\UI\\WEB\\Controllers;\n\nuse App\\Ship\\Parents\\Controllers\\WebController;\n\nclass Controller extends WebController\n{\n    public function sayWelcome()\n    {\n        return view('just-welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller with Specific File Name in Apiato - Bash\nDESCRIPTION: This snippet shows how to generate a new controller in Apiato using the artisan command with the --file option to specify the desired filename. Requires a configured Laravel project with the Apiato package installed. The command will prompt for the associated container if not provided and the generated controller will follow project scaffolding conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/code-generator.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:controller --file=UserController\n```\n\n----------------------------------------\n\nTITLE: Setting Up OAuth in Apiato\nDESCRIPTION: Command to create encryption keys and OAuth clients necessary for generating secure access tokens with Passport.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:install\n```\n\n----------------------------------------\n\nTITLE: Configuring Apiato Database & Passport Client via Artisan\nDESCRIPTION: This snippet shows the necessary Artisan commands to prepare an Apiato project for use with Postman. It includes migrating the database, seeding it, and creating a Passport client.  The `php artisan apiato:permissions:toRole admin` command grants the admin user full permissions to access all routes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/postman.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate:refresh --seed\nphp artisan passport:client --password\nphp artisan apiato:permissions:toRole admin\n```\n\n----------------------------------------\n\nTITLE: Checking if Hashed ID exists in Collection - PHP\nDESCRIPTION: This snippet demonstrates the usage of the `inIds` method to determine if a given hashed ID exists within a model collection.  It takes a hashed ID and a collection as input and returns a boolean value indicating whether the hashed ID is present in the collection.  It's useful for testing scenarios involving hashed identifiers, ensuring they are present in the relevant model collections.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$hashedId = 'hashed_123';\n$collection = Model::all();\n\n$isInCollection = $this->inIds($hashedId, $collection);\n```\n\n----------------------------------------\n\nTITLE: Configure Token Expiration PHP\nDESCRIPTION: This PHP code snippet shows how to configure access and refresh token expiration times. It shows the configuration options in `app/Ship/Configs/apiato.php`, where you can set the expiration in days. By default, it's set to 3650 days (10 years) for both access and refresh tokens, but this can be changed via the API_TOKEN_EXPIRES and API_REFRESH_TOKEN_EXPIRES environment variables. It also mentions where to change expiration time to minutes. Prerequisites:  Apiato framework environment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n|--------------------------------------------------------------------------\n| Access Token Expiration\n|--------------------------------------------------------------------------\n|\n| In Days. Default to 3650 days = 10 years\n|\n*/\n'expires-in' => env('API_TOKEN_EXPIRES', 3650),\n\n/*\n|--------------------------------------------------------------------------\n| Refresh Token Expiration\n|--------------------------------------------------------------------------\n|\n| In Days. Default to 3650 days = 10 years\n|\n*/\n'refresh-expires-in' => env('API_REFRESH_TOKEN_EXPIRES', 3650),\n```\n\n----------------------------------------\n\nTITLE: Example Twitter OAuth Client Response (JSON)\nDESCRIPTION: Provides a sample JSON structure representing the response payload from a Twitter OAuth client. Fields include token, token secret, user ID, nickname, avatar URLs, and other identifiers. This serves as a reference for expected data formats when integrating Twitter login functionality in mobile, web, or other clients. Actual payload structure may vary per provider, so always refer to provider documentation for up-to-date schemas.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/social-authentication.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"User\": {\n    \"tokentoken\": \"1212\",\n    \"tokentokenSecret\": \"3434\",\n    \"tokenid\": \"777\",\n    \"tokennickname\": \"John_Doe\",\n    \"tokenname\": \"John Doe\",\n    \"tokenemail\": null,\n    \"tokenavatar\": \"https://pbs.twimg.com/images/888/PENrcePC.jpg\",\n    \"tokenuser\": \"token\",\n    \"avatar_original\": \"https://pbs.twimg.com/images/999/PENrcePC.jpg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Data on apiato Request with keep (PHP)\nDESCRIPTION: Shows how to store arbitrary data directly onto the apiato request object using the `keep` method. This allows passing information between different parts of the request lifecycle or subsequent internal processes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$request->keep(['someKey' => $someValue]);\n```\n\n----------------------------------------\n\nTITLE: Installing Localization Container via Composer (Shell)\nDESCRIPTION: This shell snippet shows the command to require the APIato localization container package, enabling localization features in your APIato project. It depends on Composer and should be run in the project root to install the package.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/localization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/localization-container\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Caching Properties (PHP)\nDESCRIPTION: Illustrates examples of caching-related properties available through the underlying `andersao/l5-repository` package integrated into apiato Repositories. These properties, like `$cacheMinutes` and `$cacheOnly`, control data caching behavior.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/repositories.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\t // ...\n\n    protected $cacheMinutes = 1440; // 1 day\n\n    protected $cacheOnly = ['all'];\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ETag Middleware in APIato PHP configuration\nDESCRIPTION: This snippet explains how to enable the ETag middleware within the APIato PHP configuration file `apiato.php`. Setting `use-etag` to true activates the middleware, which by default is disabled. The client must send the `If-None-Match` header in requests for the middleware to function properly. Key parameters include the configuration file path and the toggle flag.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/etag.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    // Other configuration options\n    'use-etag' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Testing Upgraded Apiato Installation\nDESCRIPTION: Runs Composer to install dependencies and executes PHP unit tests to verify that the upgraded project is working correctly after the merge.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install  &&  vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Creating new Apiato project with installer\nDESCRIPTION: Creates a new Apiato project using the Apiato Installer, which allows selecting containers during installation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napiato new my-api\n```\n\n----------------------------------------\n\nTITLE: Migrations Folder Structure - Markdown\nDESCRIPTION: This markdown snippet shows the folder structure for storing migrations in Apiato projects.  It includes the Containers specific migrations and Ship migrations.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/migrations.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Data\n│               └── Migrations\n│                   ├── 0000_01_01_000001_create_things_table.php\n│                   └── ...\n└── Ship\n    └── Migrations\n        ├── 0000_02_02_000002_create_another_things_table.php\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Sorting API Results using orderBy and sortedBy (URL)\nDESCRIPTION: Demonstrates how to sort API results using the `orderBy` (specifies field) and `sortedBy` (`asc` or `desc`) query parameters. The default sort order is ascending. This functionality is provided by the L5 Repository package.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n?orderBy=id&sortedBy=asc\n```\n\nLANGUAGE: http\nCODE:\n```\n?orderBy=created_at&sortedBy=desc\n?orderBy=name&sortedBy=asc\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Grant Client Credentials in .env (dotenv)\nDESCRIPTION: Sets the environment variables `CLIENT_WEB_ID` and `CLIENT_WEB_SECRET` in the `.env` file. These values correspond to the ID and secret of the password grant client generated during Passport installation or manual client creation, and are used by Apiato's proxy login endpoints.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCLIENT_WEB_ID=2\nCLIENT_WEB_SECRET=nu8B2npfoR4hP6sWHaf90EvWUFe2EDYyJXGnCrso\n```\n\n----------------------------------------\n\nTITLE: Defining a Distributable Apiato Container in Composer (JSON)\nDESCRIPTION: This composer.json example demonstrates the configuration needed for a container package intended for redistribution in Apiato. The 'type' must be set to 'apiato-container' to trigger Apiato's custom installer, and 'extra.apiato.container.name' specifies the destination folder name under /app/Containers. The 'require' section details package dependencies. Developers must place this file at the root of their container and publish it to GitHub and Packagist for external use. Ensure that all required keys and structure are present for compatibility with Apiato's install process.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/container-installer.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"vendor/project\",\n  \"description\": \"This is a short description for your container.\",\n  \"type\": \"apiato-container\",   // you must set the type to \"apiato-container\" here!\n  \"require\": {\n    \"somevendor/somepackage\" : \"dev-master\"\n    // some other requirements here\n  },\n  \"extra\": {\n    \"apiato\": {\n      \"container\": {\n        \"name\": \"Foo\"   // The name of the container within the /app/Containers folder\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Generator Package\nDESCRIPTION: Command to install the Apiato documentation generator package via Composer.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/documentation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/documentation-generator-container\n```\n\n----------------------------------------\n\nTITLE: Generating Container Middleware using Artisan Command (Shell)\nDESCRIPTION: Use the `apiato:generate:middleware` Artisan command to interactively create a new middleware file within a specified Apiato container. This command scaffolds the middleware class in the correct directory structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/middlewares.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:middleware\n```\n\n----------------------------------------\n\nTITLE: Seeding Test Data with Apiato Testing Seeder Command in Shell\nDESCRIPTION: This shell snippet illustrates how to seed test data in the Apiato framework using a dedicated Artisan command `php artisan apiato:seed-test`. This command enables developers to populate large sets of testing data conveniently, typically defined inside the `app/Ship/Seeders/SeedTestingData.php` file. It requires defining the test data seeder class and assumes that the project is set up to recognize and execute this custom command, which is helpful for staging or testing environments.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/seeders.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:seed-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Role Access in Apiato (PHP)\nDESCRIPTION: Shows how to configure Apiato to grant specific roles (e.g., 'admin') access to all endpoints by default. This is done by listing the roles in the `requests.allow-roles-to-access-all-routes` array within the `app/Ship/Configs/apiato.php` configuration file. This avoids needing to add the specified roles to the `$access` property of every Request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'requests' => [\n    'allow-roles-to-access-all-routes' => ['admin',],\n],\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Service Provider in Apiato (PHP)\nDESCRIPTION: Shows the boilerplate code for defining a container's MainServiceProvider class extending Apiato's ParentMainServiceProvider. It declares two properties: $serviceProviders - an array of service provider classes to register; and $aliases - an array for class aliases (facades). This class is the central point for registering all additional service providers within the container, ensuring proper bootstrapping and registration according to Apiato's rules. The parent class must be extended and aliased as ParentMainServiceProvider.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Providers\\MainServiceProvider as ParentMainServiceProvider;\n\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    public array $serviceProviders = [\n        CustomServiceProvider::class,\n        MiddlewareServiceProvider::class,\n        PassportServiceProvider::class,\n    ];\n\n    public array $aliases = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Access JSON Response Format in Apiato Authorization\nDESCRIPTION: This JSON snippet defines the standard structure for responses returned when a user attempts to access a protected resource without the required authorization. It contains a message explaining the authorization failure and an empty errors array, which can be expanded to include detailed error information if needed.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authorization.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"message\": \"This action is unauthorized.\",\\n  \"errors\": []\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Property in Repository (PHP)\nDESCRIPTION: Shows how to explicitly set the `$container` property within a Repository class when the associated Model's name does not match the name of its containing Container. This ensures the framework correctly associates the Repository with its Container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/repositories.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Authorization\\Data\\Repositories;\n\nuse App\\Ship\\Parents\\Repositories\\Repository;\n\nclass RoleRepository extends Repository\n{\n    protected $container = 'Authorization'; // the container name. Must be set when the model has different name than the container\n\n    protected $fieldSearchable = [\n\n    ];\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Readme File using Artisan\nDESCRIPTION: This command generates a new readme file for a container within an Apiato application. It uses the `apiato:generate:readme` Artisan command. The Readme explains the Container's purpose and usage.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/architecture-concepts/container.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:readme\n```\n\n----------------------------------------\n\nTITLE: Finalizing Upgrade by Merging to Master\nDESCRIPTION: Completes the upgrade process by merging the upgraded branch into your stable branch (typically master) and verifies the PHP/Laravel version.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit merge upgrade-apiato\n\nphp artisan -V\n```\n\n----------------------------------------\n\nTITLE: Running Composer install and PHPUnit tests to verify upgrade success\nDESCRIPTION: Executes composer install to install dependencies and then runs PHPUnit tests to confirm that the upgraded application functions correctly, ensuring stability after upgrade.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install  &&  vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Setting API Rate Limiting Environment Variables in Bash\nDESCRIPTION: Shows the environment variable declarations used to configure the API rate limiting feature in Apiato. These variables include enabling/disabling the rate limiter ('API_RATE_LIMIT_ENABLED'), the number of allowed attempts per expiry window ('API_RATE_LIMIT_ATTEMPTS'), and the time window in minutes ('API_RATE_LIMIT_EXPIRES'). These should be set in the .env file to customize behavior without modifying the PHP source code.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/rate-limiting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPI_RATE_LIMIT_ENABLED=true\nAPI_RATE_LIMIT_ATTEMPTS=30\nAPI_RATE_LIMIT_EXPIRES=1\n```\n\n----------------------------------------\n\nTITLE: Generating New Apiato Container (CLI)\nDESCRIPTION: This command-line instruction uses the Apiato Artisan tool to generate a new container within your Apiato project. It automates the creation of the necessary file structure and boilerplate code for a new container based on the Porto architecture conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/software-architectural-patterns.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan apiato:generate:container\n```\n\n----------------------------------------\n\nTITLE: Basic Git Commit in Shell\nDESCRIPTION: A command to stage all changes and create a commit with a descriptive message. This is a fundamental operation for submitting changes to any Git-based repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/contribution-guide.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit add . && git commit -m 'first commit'\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Successful Token Refresh\nDESCRIPTION: Example JSON response returned when a token refresh request succeeds, containing a new access token, token type, expiration, and a new refresh token. This response format aligns with Laravel Passport's OAuth2 token refresh mechanism.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 31500,\n  \"access_token\": \"tnJ1eXAiOiJKV1QiLCJhbGciOiJSUzI1Zx...\",\n  \"refresh_token\": \"ZFDPA1S7H8Wydjkjl+xt+hPGWTagX...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Decoded Input Data from APIato Request in PHP\nDESCRIPTION: This snippet explains how to extract specific data from an API request, utilizing the `getInputByKey` method for decoded values, with optional default values if the key isn't present. It helps in handling JSON input data and simplifies data extraction in PHP-based API endpoints.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$request->getInputByKey('id')\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Apiato Project Using Composer - Bash\nDESCRIPTION: Demonstrates how to create a new project from the Apiato starter template using Composer. Dependencies: Composer installed, network access to the Packagist repository. The command fetches a stable or development version of the project scaffold depending on the options used. 'project-a' will be your new directory. If '--stability=dev' is used, the master branch is pulled for latest changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project apiato/apiato project-a\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project apiato/apiato project-a --stability=dev\n```\n\n----------------------------------------\n\nTITLE: Loading relationships dynamically in backend (controller)\nDESCRIPTION: Demonstrates how to set default includes for a transformer dynamically within a controller using setDefaultIncludes(). This allows including specific relationships automatically in the response, enhancing flexibility for backend data requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transformers.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn $this->response->paginator($rewards, (new ProductsTransformer())->setDefaultIncludes(['tags']));\n\n```\n\n----------------------------------------\n\nTITLE: Defining User Repository Class (PHP)\nDESCRIPTION: Illustrates the structure for defining a Repository class for the User model in apiato. It shows extending the base `Repository` class, implementing a contract interface, and configuring the `$fieldSearchable` property to enable API query parameters for specific fields.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/repositories.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Data\\Repositories;\n\nuse App\\Containers\\User\\Contracts\\UserRepositoryInterface;\nuse App\\Containers\\User\\Models\\User;\nuse App\\Ship\\Parents\\Repositories\\Repository;\n\nclass UserRepository extends Repository implements UserRepositoryInterface\n{\n    protected $fieldSearchable = [\n        'name'  => 'like',\n        'email' => '=',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Apiato Configuration Values - PHP\nDESCRIPTION: Demonstrates how to retrieve configuration values defined in Apiato config files using Laravel's `Config` facade or the global `config()` helper function. Values are accessed using dot notation, specifying the config file name (without `.php`) followed by the key path. Includes an example of providing a default value for a non-existent key. Dependencies: Laravel's `Config` facade or the `config()` helper.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/configs.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$value = Config::get('{container-name}-container.namespace');     // returns 'App'\n$value = config('{container-name}-container.namespace');          // same, but using a function\n\n$defaultValue = Config::get('{container-name}-container.unknown.key', 'defaultvalue');   // returns 'defaultvalue' as this key is not set!\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Route File\nDESCRIPTION: This is a demonstration of how to generate a route file using the `apiato:generate:route` command. The user interacts with the wizard-style prompts by providing answers to questions asked by the command-line interface. The result is a new route file tailored to user input. The dependencies include the Apiato framework and the command line.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/code-generator.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ php artisan apiato:generate:route\n\n Enter the name of the Section [AppSection]:\n >\n\n Enter the name of the Container:\n > Car\n\n Enter the name of the Route file [DefaultRoute]:\n > CreateCar\n\n> Generating (CreateCar) in (AppSection:Car) Container.\n\n Select the UI for the controller [API]:\n  [0] API\n  [1] WEB\n > 0\n\n Enter the endpoint version (integer)[1]:\n > 1\n\n Select the type for this endpoint?[private]:\n  [0] private\n  [1] public\n > 1\n\n Enter the name of the controller function that needs to be invoked when calling this endpoint:\n > createNewCar\n\n Enter the HTTP verb of this endpoint (GET, POST,...):\n > POST\n\n Enter the endpoint URI (foo/bar/{id}):\n > cars\n\nRoute generated successfully.\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Headers Example in HTTP Response\nDESCRIPTION: Example of HTTP response headers related to rate limiting. These headers indicate the maximum number of requests allowed (X-RateLimit-Limit) and the remaining number of requests in the current time window (X-RateLimit-Remaining).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/rate-limiting.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nX-RateLimit-Limit →30\nX-RateLimit-Remaining →29\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request Payload Structure\nDESCRIPTION: Demonstrates the format of a JSON request payload in Apiato with nested data structure. This structure is used as an example to explain how the various input helper methods process data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\" : {\n    \"name\"  : \"foo\",\n    \"description\" : \"bar\"\n  },\n  \"id\" : \"a2423nadabada0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Request in APIato Controller PHP\nDESCRIPTION: Implements the `sayHello` method within a controller that extends `ApiController`. It automatically handles request validation via `SayHelloRequest`, calls a `SayHelloAction` to execute business logic, and formats the result into a JSON response using the `$this->json()` helper.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/samples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Controller extends ApiController\n{\n\tpublic function sayHello(SayHelloRequest $request)\n\t{\n            $helloMessage = app(SayHelloAction::class)->run();\n\n            $this->json([\n                $helloMessage\n            ]);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Apiato Project Using Composer in Shell\nDESCRIPTION: These commands demonstrate how to create a personal project from the Apiato starter using Composer. They distinguish between creating a project for stable releases and for development branches by specifying the stability flag. This setup is a prerequisite for making contributions to Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/contribution-guide.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project apiato/apiato project-a\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer create-project apiato/apiato project-a --stability=dev\n```\n\n----------------------------------------\n\nTITLE: Committing Upgrade Changes via Git (Bash)\nDESCRIPTION: Stages all modified and untracked files using `git add .` and then creates a Git commit with a descriptive message indicating the completion of the Apiato upgrade (specifically shown for the 4.1 to 5.0 upgrade). This preserves the state after the upgrade.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m 'upgrade Apiato from 4.1 to 5.0'\n```\n\n----------------------------------------\n\nTITLE: Reset Local Apiato Branch to Match Upstream Branch Exactly - Shell\nDESCRIPTION: Performs a hard reset of the local 'apiato-{version}' branch to match exactly the state of the upstream branch from the official Apiato repository. This overwrites any local changes in this branch to ensure it reflects the latest upstream updates.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngit reset --hard upstream/{upstream-branch-name}\n// Example:   git reset --hard upstream/8.0\n```\n\n----------------------------------------\n\nTITLE: Apiato Project Folder Structure for Helpers\nDESCRIPTION: Demonstrates the expected folder structure for organizing helper files in an Apiato project, showing both container-specific and general helper file placement.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/helpers.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Helpers\n│               ├── helpers.php\n│               ├── mix.php\n│               └── ...\n└── Ship\n    └── Helpers\n        ├── another-helper.php\n        ├── and-another.php\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiDoc Executable Path (PHP)\nDESCRIPTION: Shows the configuration setting within the Apiato documentation container's config file (`vendor-documentation.php`) to specify the path for the `apidoc` executable. This is crucial if the `apidoc` command is not found in the system's default PATH, allowing you to point directly to its location, commonly within `node_modules/.bin`. You can uncomment the alternative `apidoc` path if it's globally available.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    /*\n    |--------------------------------------------------------------------------\n    | Executable\n    |--------------------------------------------------------------------------\n    |\n    | Specify how you run or access the `apidoc` tool on your machine.\n    |\n    */    'executable' => 'node_modules/.bin/apidoc',\n    // 'executable' => 'apidoc',\n```\n\n----------------------------------------\n\nTITLE: Updating User Model Fillable Properties (PHP)\nDESCRIPTION: Modifies the `$fillable` array in the Apiato `User` model to allow mass assignment of social authentication-related fields retrieved from providers like Google, Facebook, or Twitter. This step is necessary for persisting user social profile data.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    protected $fillable = [\n        ...\n        'social_provider',\n        'social_nickname',\n        'social_id',\n        'social_token',\n        'social_token_secret',\n        'social_refresh_token',\n        'social_expires_in',\n        'social_avatar',\n        'social_avatar_original',\n        ...\n    ];\n```\n\n----------------------------------------\n\nTITLE: Example Environment Configuration for Social Providers - Shell\nDESCRIPTION: Environment variables for client ID, client secret, and redirect URL required by Facebook, Twitter, and Google social authentication. Add these to the .env file in your Laravel project. You must fill the values for the providers you wish to support.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/social-authentication.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nAUTH_FACEBOOK_CLIENT_ID=\nAUTH_FACEBOOK_CLIENT_SECRET=\nAUTH_FACEBOOK_CLIENT_REDIRECT=\n\nAUTH_TWITTER_CLIENT_ID=\nAUTH_TWITTER_CLIENT_SECRET=\nAUTH_TWITTER_CLIENT_REDIRECT=\n\nAUTH_GOOGLE_CLIENT_ID=\nAUTH_GOOGLE_CLIENT_SECRET=\nAUTH_GOOGLE_CLIENT_REDIRECT=\n```\n\n----------------------------------------\n\nTITLE: Using Shared API Response (PHP)\nDESCRIPTION: Demonstrates how to incorporate a previously defined shared response into an endpoint's docblock using the `@apiUse` tag. This tag references a definition created with `@apiDefine`, effectively copying its content (like `@apiSuccessExample`) into the current docblock. This promotes consistency and reduces duplication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n* @apiUse UserSuccessSingleResponse\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response Headers after User Registration - Text\nDESCRIPTION: This snippet lists typical HTTP response headers returned by the Apiato API after a user registration request. These headers include cache control, content type, server information, rate limit, and connection management data. Understanding these headers is important for debugging and integrating with client applications.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nAccess-Control-Allow-Origin → ...\nCache-Control → ...\nConnection → keep-alive\nContent-Language → en\nContent-Type → application/json\nDate → Wed, 11 Apr 2000 22:55:88 GMT\nServer → nginx\nTransfer-Encoding → chunked\nVary → Origin\nX-Powered-By → PHP/7.7.7\nX-RateLimit-Limit → 30\nX-RateLimit-Remaining → 29\n```\n\n----------------------------------------\n\nTITLE: Writing PHP Docblock for API Endpoint in PHP\nDESCRIPTION: Example of a PHP docblock that should be placed above endpoint definitions in route files to generate API documentation. Includes parameters for apiGroup, apiName, HTTP method, description, version, permissions, headers, parameters, and response examples.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/api-docs-generator.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @apiGroup           Authentication\n * @apiName            UserLogin\n * @api                {post} /users/login User Login\n * @apiDescription     Description Here....\n * @apiVersion         1.0.0\n * @apiPermission      none\n *\n * @apiHeader          Accept application/json\n *\n * @apiParam           {String}     email\n * @apiParam           {String}     password\n *\n * @apiSuccessExample  {json}       Success-Response:\n *   HTTP/1.1 200 OK\n *   {\n *     \"data\": {\n *       \"id\": \"owpzanmh\",\n *       \"name\": \"Super Admin\",\n *       \"email\": \"admin@admin.com\"\n *       ...\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"401 Credentials Incorrect.\",\n *      \"status_code\":401\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"Invalid Input.\",\n *      \"errors\":{\n *         \"email\":[\n *            \"The email field is required.\"\n *         ]\n *      },\n *      \"status_code\":422\n *   }\n */\n\n$router->post('users/login', [\n    'uses' => 'Controller@userLogin',\n]);\n```\n\n----------------------------------------\n\nTITLE: Update Project Environment Variables by Comparing .env Files - Shell\nDESCRIPTION: Instructs the user to manually compare and update the project's '.env' file with the updated '.env-example' file after merging upstream changes. This step ensures environment variables are consistent with the upgraded version. This step requires manual editing and careful validation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Publishing Vendor Configuration for Social Auth Container (Bash)\nDESCRIPTION: Uses Laravel's artisan CLI to publish the configuration file for the social auth container, allowing project-level customization of supported providers and behaviors. Requires php and artisan as dependencies, and must be run from the project root. After execution, config will be available in app/Ship/Configs/vendor-socialAuth.php for further editing. No parameters are needed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/social-authentication.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Generating Homestead Configuration File for Apiato\nDESCRIPTION: Command to create a Homestead configuration file for an Apiato project, necessary for setting up the Vagrant-based development environment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nvendor/bin/homestead make\n```\n\n----------------------------------------\n\nTITLE: Running Testing Data Seeder in Apiato with Artisan CLI in Bash\nDESCRIPTION: Provides the artisan command to manually seed testing data using a special Apiato seeder located at `app/Ship/Seeders/SeedTestingData.php`. This seeder is not automatically loaded and must be executed explicitly for test environment setup.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/seeders.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:seed-test\n```\n\n----------------------------------------\n\nTITLE: Extending WebController to Define a Simple Web Controller (PHP)\nDESCRIPTION: This snippet demonstrates how to extend the base WebController class to create a custom web controller in Apiato. The sayWelcome method returns a Blade view called 'welcome'. Dependencies include the WebController class and Blade view system. No explicit parameters are accepted, expected to be used within routes targeting web endpoints. Returns an HTTP response rendering the specified view.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/controllers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Controller extends WebController\n{\n    public function sayWelcome()\n    {\n        return view('welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Mail Component in Apiato\nDESCRIPTION: Demonstrates the recommended folder structure for organizing mail classes and templates within Apiato's container architecture.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/mails.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n - app\n    - Containers\n        - {container-name}\n            - Mails\n                - UserRegisteredMail.php\n                - ...\n                - Templates\n                    - user-registered.blade.php\n                    - ...\n    - Ship\n        - Mails\n            - SomeMail.php\n            - ...\n            - Templates\n                - some-template.blade.php\n                - ...\n```\n\n----------------------------------------\n\nTITLE: Defining Container Specific Config PHP\nDESCRIPTION: Demonstrates the structure and required file path for a container-specific configuration file in Apiato. This PHP file, named using the section and container names (e.g., `{section-name}-{container-name}.php`), defines an associative array of configuration parameters accessible within the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/configs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// app/Containers/{SectionName}/{ContainerName}/Configs/{section-name}-{container-name}.php\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Namespace\n    |--------------------------------------------------------------------------\n    */\n    'namespace'       => 'App',\n\n    // some other config params here...\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception Class in PHP\nDESCRIPTION: This snippet shows a PHP class named DemoException extending the base Exception class. It sets default HTTP error code and message properties for the exception. This class acts as a template for creating custom exceptions within the Apiato framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/exceptions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass DemoException extends Exception\n{\n    public $code = Response::HTTP_CONFLICT;\n    public $message = 'This is a demo exception.';\n}\n```\n\n----------------------------------------\n\nTITLE: Example Profiler Response (JSON)\nDESCRIPTION: This JSON represents a sample profiler response, providing detailed performance metrics, route information, query data, logs, authentication details, and other relevant data. This is the data appended to the response by the ProfilerMiddleware.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/profiler.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    // Actual Response Here...\n    \"_profiler\": {\n        \"__meta\": {\n            \"id\": \"X167f293230e3457f1bbd95d9c82aba4a\",\n            \"datetime\": \"2017-09-22 18:45:27\",\n            \"utime\": 1506105927.799299,\n            \"method\": \"GET\",\n            \"uri\": \"/\",\n            \"ip\": \"172.20.0.1\"\n        },\n        \"messages\": {\n            \"count\": 0,\n            \"messages\": []\n        },\n        \"time\": {\n            \"start\": 1506105922.742068,\n            \"end\": 1506105927.799333,\n            \"duration\": 5.057265043258667,\n            \"duration_str\": \"5.06s\",\n            \"measures\": [\n                {\n                    \"label\": \"Booting\",\n                    \"start\": 1506105922.742068,\n                    \"relative_start\": 0,\n                    \"end\": 1506105923.524004,\n                    \"relative_end\": 1506105923.524004,\n                    \"duration\": 0.7819359302520752,\n                    \"duration_str\": \"781.94ms\",\n                    \"params\": [],\n                    \"collector\": null\n                },\n                {\n                    \"label\": \"Application\",\n                    \"start\": 1506105923.535343,\n                    \"relative_start\": 0.7932748794555664,\n                    \"end\": 1506105927.799336,\n                    \"relative_end\": 0.00000286102294921875,\n                    \"duration\": 4.26399302482605,\n                    \"duration_str\": \"4.26s\",\n                    \"params\": [],\n                    \"collector\": null\n                }\n            ]\n        },\n        \"memory\": {\n            \"peak_usage\": 13234248,\n            \"peak_usage_str\": \"12.62MB\"\n        },\n        \"exceptions\": {\n            \"count\": 0,\n            \"exceptions\": []\n        },\n        \"route\": {\n            \"uri\": \"GET /\",\n            \"middleware\": \"api, throttle:30,1\",\n            \"domain\": \"http://api.apiato.test\",\n            \"as\": \"apis_root_page\",\n            \"controller\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\\\\Controller@apiRoot\",\n            \"namespace\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\",\n            \"prefix\": \"/\",\n            \"where\": [],\n            \"file\": \"app/Containers/Welcome/UI/API/Controllers/Controller.php:20-25\"\n        },\n        \"queries\": {\n            \"nb_statements\": 0,\n            \"nb_failed_statements\": 0,\n            \"accumulated_duration\": 0,\n            \"accumulated_duration_str\": \"0μs\",\n            \"statements\": []\n        },\n        \"swiftmailer_mails\": {\n            \"count\": 0,\n            \"mails\": []\n        },\n        \"logs\": {\n            \"count\": 3,\n            \"messages\": [\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694807\n                },\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694811\n                },\n                {\n                    \"message\": \"[2017-09-18 17:38:15] testing.INFO: New User registration. ID = 970ylqvaogmxnbdr | Email = apiato@mail.test.      Thank you for signing up.\\n</div>\\n</body>\\n</html>\\n  \\n\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"info\",\n                    \"time\": 1506105927.694812\n                }\n            ]\n        },\n        \"auth\": {\n            \"guards\": {\n                \"web\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\",\n                \"api\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\"\n            },\n            \"names\": \"\"\n        },\n        \"gate\": {\n            \"count\": 0,\n            \"messages\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting SQL for Default OR Search Logic (SQL)\nDESCRIPTION: Shows the resulting SQL query generated from a multi-field search when the default OR logic is applied (i.e., `searchJoin` parameter is omitted or set to 'or'). The conditions are combined using `OR` in the WHERE clause.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE age = 17 OR email = 'john@gmail.com';\n```\n\n----------------------------------------\n\nTITLE: Injecting IDs into Test Endpoints in PHP\nDESCRIPTION: The `injectId` method dynamically replaces placeholders (like `{id}`) in a test endpoint URL with a specified ID. It supports chaining multiple calls for endpoints with multiple parameters and automatically handles Hash ID encoding if enabled, which can be bypassed using the `skipEncoding` parameter. The placeholder name defaults to `{id}` but can be customized using the `replace` parameter.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// user with ID 100\n// endpoint = 'get@v1/users/{id}'\n\n$this->injectId($user->id)->makeCall();\n```\n\nLANGUAGE: php\nCODE:\n```\n// endpoint = 'get@v1/users/{user_id}/articles/{id}'\n// You can also chain multiple `injectId` calls!\n\n$this->injectId($articles->id)->injectId($user->id, replace: '{user_id}')->makeCall();\n```\n\nLANGUAGE: php\nCODE:\n```\n// endpoint = 'get@v1/users/{user_id}'\n\n// this will encode the id automatically\n$this->injectId($user->id, skipEncoding: false, replace: '{user_id}')->makeCall($data);\n// this will skip the encoding\n$this->injectId($user->getHashedKey(), skipEncoding: true, replace: '{user_id}')->makeCall($data);\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger/OpenAPI JSON Schema in Shell\nDESCRIPTION: Command to generate a Swagger/OpenAPI JSON schema from the apiDoc comments in your route files. This provides an alternative documentation format that can be used with Swagger UI.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/api-docs-generator.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:swagger\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Fractal Serializer in PHP\nDESCRIPTION: Shows the specific configuration line within the `app/Ship/Configs/fractal.php` file used to change the default serializer employed by Fractal in Apiato. Lists available serializers like `ArraySerializer`, `DataArraySerializer`, and `JsonApiSerializer`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/responses.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n'default_serializer' => League\\Fractal\\Serializer\\DataArraySerializer::class,\n```\n\n----------------------------------------\n\nTITLE: Using AND Logic for Multi-Field Search with searchJoin (URL)\nDESCRIPTION: Demonstrates how to force the search criteria for multiple fields (specified in the `search` parameter) to use AND logic instead of the default OR. This is achieved by adding the `searchJoin=and` query parameter to the request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_13\n\nLANGUAGE: http\nCODE:\n```\napi.domain.test/v1/endpoint?search=age:17;email:john@gmail.com&searchJoin=and\n```\n\n----------------------------------------\n\nTITLE: Switching to SQLite Database Connection in Environment File (Bash)\nDESCRIPTION: This snippet configures Apiato to use SQLite by setting the DB_CONNECTION environment variable in the .env file. This is needed to inform Laravel's database settings to use SQLite instead of the default MySQL.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTION=sqlite\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Resources via HTTP GET - RESTful API - bash\nDESCRIPTION: Illustrates retrieving all resources of a certain type using HTTP GET in a RESTful API. No authentication or query parameters are required unless specified by the API. The response contains a list of resources, and optional filters or pagination may be supported by the endpoint.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars\n```\n\n----------------------------------------\n\nTITLE: Publishing Localization Container Configuration in Shell\nDESCRIPTION: Publishes the configuration file of the Localization container into the application's config folder using Laravel's Artisan CLI. This enables customization of localization settings.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/localization.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Container Installation (example)\nDESCRIPTION: This snippet demonstrates a sample `composer.json` file that includes a container dependency. The `require` section lists the container package with its version constraint. The `composer update` command is then used to install the container, placing it in the specified directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/container-installer.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"apiato/settings-container\": \"^2.0.6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting Custom Data in Exception Usage in Apiato with PHP\nDESCRIPTION: Demonstrates how to override pre-defined custom data in an Exception by calling 'overrideCustomData' method with a new associative array. This replaces custom error metadata at runtime before throwing, enhancing flexibility in error reporting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nthrow (new AwesomeExceptionWithCustomData())->overrideCustomData(['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Creating Apiato project with custom Git branch\nDESCRIPTION: Creates a new Apiato project, initializes Git repository with a specified initial branch name.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\napiato new my-api --git --branch=\"main\"\n```\n\n----------------------------------------\n\nTITLE: Skip Pagination API Endpoint\nDESCRIPTION: This code snippet demonstrates how to disable pagination. By setting the 'limit' parameter to 0, all matching data is returned without pagination. This allows clients to retrieve all records without the page limits imposed by the pagination logic.  This can be configured globally or per repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/pagination.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?limit=0\n```\n\n----------------------------------------\n\nTITLE: Enabling API Rate Limiting Environment Variable (env)\nDESCRIPTION: Adds the `API_RATE_LIMIT_ENABLED` variable set to `true` to the project's `.env` file. This step is part of the upgrade process from Apiato 4.1 to 5.0 and enables the API rate limiting feature.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nAPI_RATE_LIMIT_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Notification - Shell\nDESCRIPTION: Provides the command-line instruction to generate a new notification class using the Apiato Artisan command. This interactive command guides the user through naming and placing the notification within the project's container or ship directories, adhering to Apiato's conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/notifications.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:generate:notification\n```\n\n----------------------------------------\n\nTITLE: Listing Apiato Generator CLI Commands using Laravel Artisan - text\nDESCRIPTION: Shows the full set of php artisan commands provided by Apiato for code generation purposes. Running these commands in the terminal allows quick scaffolding of various Laravel project artifacts such as containers, controllers, models, routes, events, mail, and tests. Requires a Laravel project with Apiato installed and available in the php artisan binary's command list. Each command offers options, with common flags like --section, --container, and --file, and some supporting additional options such as --ui.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/code-generator.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  php artisan apiato:generate:container        Create a Container for apiato from scratch\n  php artisan apiato:generate:action           Create an Action file for a Container\n  php artisan apiato:generate:configuration    Create a Configuration file for a Container\n  php artisan apiato:generate:container:api    Create a Container for apiato from scratch (API Part)\n  php artisan apiato:generate:container:web    Create a Container for apiato from scratch (WEB Part)\n  php artisan apiato:generate:controller       Create a controller for a container\n  php artisan apiato:generate:event            Create a new Event class and its corresponding Handler\n  php artisan apiato:generate:eventhandler     Create a new EventHandler class\n  php artisan apiato:generate:exception        Create a new Exception class\n  php artisan apiato:generate:job              Create a new Job class\n  php artisan apiato:generate:mail             Create a new Mail class\n  php artisan apiato:generate:migration        Create an \"empty\" migration file for a Container\n  php artisan apiato:generate:model            Create a new Model class\n  php artisan apiato:generate:notification     Create a new Notification class\n  php artisan apiato:generate:readme           Create a README file for a Container\n  php artisan apiato:generate:repository       Create a new Repository class\n  php artisan apiato:generate:request          Create a new Request class\n  php artisan apiato:generate:route            Create a new Route class\n  php artisan apiato:generate:seeder           Create a new Seeder class\n  php artisan apiato:generate:serviceprovider  Create a ServiceProvider for a Container\n  php artisan apiato:generate:subaction        Create a new SubAction class\n  php artisan apiato:generate:task             Create a Task file for a Container\n  php artisan apiato:generate:test:functional  Create a Functional Test file.\n  php artisan apiato:generate:test:testcase    Create the TestCase file.\n  php artisan apiato:generate:test:unit        Create a Unit Test file.\n  php artisan apiato:generate:transformer      Create a new Transformer class for a given Model\n  php artisan apiato:generate:value            Create a new Value class\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Translation Using Laravel Localization in PHP\nDESCRIPTION: Demonstrates retrieving a translation string using Laravel's __() helper function with the namespaced translation key style specific to Apiato localization containers. The key combines a camelCase Section and Container name separated by '@' along with the file and translation key.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/localization.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n__('mySection@myContainer::messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Migration in Apiato/Laravel (PHP)\nDESCRIPTION: This PHP code snippet demonstrates a typical Laravel database migration class (`CreateDemoTable`) used within Apiato. The `up` method defines the schema for the 'demos' table using the `Schema` facade and `Blueprint` object, including standard timestamps and soft deletes. The `down` method provides the logic to reverse the migration by dropping the 'demos' table. Migrations should be placed within the container's `Data/Migrations` directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/migrations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass CreateDemoTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('demos', function (Blueprint $table) {\n            $table->increments('id');\n            // ...\n            $table->timestamps();\n            $table->softDeletes();\n        });\n    }\n\n    public function down()\n    {\n        Schema::drop('demos');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Results per Page Using Limit Query Parameter\nDESCRIPTION: Examples of using ?limit= to restrict the maximum number of records returned in one API response page. It can be combined with ?page= to paginate through results. Setting limit to zero disables pagination and returns all matching entities if enabled in the Repository by overriding the $allowDisablePagination property.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?limit=100\n```\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?limit=100&page=2\n```\n\n----------------------------------------\n\nTITLE: Example Twitter Response - JSON\nDESCRIPTION: Example JSON response from Twitter, showing the structure of the data returned after successful authentication. The client application needs to handle this response and pass relevant parts to the server.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/social-authentication.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"User\": {\n    \"tokentoken\": \"1212\",\n    \"tokentokenSecret\": \"3434\",\n    \"tokenid\": \"777\",\n    \"tokennickname\": \"John_Doe\",\n    \"tokenname\": \"John Doe\",\n    \"tokenemail\": null,\n    \"tokenavatar\": \"http://pbs.twimg.com/images/888/PENrcePC.jpg\",\n    \"tokenuser\": \"token\",\n    \"avatar_original\": \"http://pbs.twimg.com/images/999/PENrcePC.jpg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant Machine with Homestead\nDESCRIPTION: Command to start the Vagrant virtual machine with provisioning for Apiato development using Homestead.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nhomestead up --provision\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Composer Vendor Directory - Bash\nDESCRIPTION: Shows the command to run all automated tests using PHPUnit as installed in the vendor directory. Requires dependencies installed via Composer and test suites defined. Ensures code changes do not break existing functionality and are properly covered by tests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Installer as Global Composer Dependency in PHP\nDESCRIPTION: Command to install the Apiato Installer as a global Composer dependency, enabling project creation with additional features.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global require apiato/installer\n```\n\n----------------------------------------\n\nTITLE: Merging Latest Apiato Changes (Option A1)\nDESCRIPTION: Merges the latest Apiato changes with your custom code, using a strategy that prioritizes upstream changes over your custom code when conflicts occur.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit merge --allow-unrelated-histories --strategy-option=theirs apiato-{version}\n// Example:   git merge --allow-unrelated-histories --strategy-option=theirs apiato-8.0\n```\n\n----------------------------------------\n\nTITLE: Generating Test Users Without Access Rights in PHP\nDESCRIPTION: The `getTestingUserWithoutAccess` method creates a test user instance without any assigned permissions or roles, effectively ignoring the `$access` property defined in the test class. It serves as a shortcut for `$this->getTestingUser(null, null)`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $this->getTestingUserWithoutAccess();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sub Action in PHP\nDESCRIPTION: Provides a basic example of a Sub Action class (`ExampleSubAction`) in PHP. It demonstrates the requirement to extend the `App\\Ship\\Parents\\Actions\\SubAction` base class and implement a `run` method, which typically orchestrates the execution of specific Tasks (e.g., `SomeTask`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/subactions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ExampleSubAction extends SubAction\n{\n    public function run(SomeRequest $request)\n    {\n        app(SomeTask::class)->run($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Container MiddlewareServiceProvider in PHP\nDESCRIPTION: Shows the basic structure of a `MiddlewareServiceProvider` class within an Apiato container, responsible for registering container-specific middlewares. It extends `ParentMiddlewareServiceProvider` and utilizes properties like `$middlewares`, `$middlewareGroups`, `$middlewareAliases`, etc., to manage middleware registration.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/middlewares.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Providers\\MiddlewareServiceProvider as ParentMiddlewareServiceProvider;\n\nclass MiddlewareServiceProvider extends ParentMiddlewareServiceProvider\n{\n    protected array $middlewares = [];\n    protected array $middlewareGroups = [];\n    protected array $middlewarePriority = [];\n    protected array $middlewareAliases = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Pagination Limit in .env\nDESCRIPTION: Demonstrates setting the default number of items per page globally for the application by assigning a value (e.g., 10) to the `PAGINATION_LIMIT_DEFAULT` variable in the project's `.env` file. This value is referenced by the L5 Repository package configuration (`config/repository.php`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/pagination.md#_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nPAGINATION_LIMIT_DEFAULT=10\n```\n\n----------------------------------------\n\nTITLE: Defining Search Condition via Query Parameter (URL)\nDESCRIPTION: Example showing how to specify the comparison operator (e.g., 'like') for a specific field search dynamically using the `searchFields` query parameter alongside the `search` parameter. This overrides the default '=' condition or any condition set for that field in the repository's `$fieldSearchable` array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_8\n\nLANGUAGE: http\nCODE:\n```\napi.domain.test/endpoint?search=field:keyword&searchFields=name:like\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Homestead\nDESCRIPTION: Installs Laravel Homestead as a development dependency for setting up the local development environment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/homestead --dev\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Payload Example for sanitizeInput\nDESCRIPTION: An example of a more complex JSON request payload with various data types (boolean, string, null, number, nested objects and arrays) used to demonstrate the sanitizeInput method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\" : {\n\t\t\"is_private\" : false,\n\t\t\"description\" : \"this is a rather long description text\",\n\t\t\"a\" : null,\n\t\t\"b\" : 3453,\n\t\t\"foo\" : {\n\t\t\t\"a\" : \"a\",\n\t\t\t\"b\" : \"b\",\n\t\t\t\"c\" : 1234\n\t\t},\n\t\t\"bar\" : [\n\t\t    \"a\", \"b\", \"c\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Finalize Upgrade by Merging Upgrade Branch into Stable Branch - Shell\nDESCRIPTION: Checks out the stable branch (typically 'master') and merges in the fully upgraded 'upgrade-apiato' branch. Then, displays the Laravel Artisan version to confirm successful upgrade. This finalizes the upgrade in the main codebase.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit merge upgrade-apiato\n\nphp artisan -V\n```\n\n----------------------------------------\n\nTITLE: Defining an API POST Route for Login in PHP\nDESCRIPTION: This example shows how to define a POST route for an API endpoint, specifically for user login, within an API route file (e.g., `LoginUser.v1.public.php`). It maps the `login` endpoint (relative path) to the `loginUser` method of a controller using the `$router` instance.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/routes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$router->post('login', [\n    'uses' => 'Controller@loginUser',\n]);\n```\n\n----------------------------------------\n\nTITLE: Verifying Branch Tracking Configuration\nDESCRIPTION: Shows branch information to verify that your local branch is correctly tracking the specified upstream branch from the Apiato repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -vv\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository and Remotes in Shell\nDESCRIPTION: This snippet provides step-by-step shell commands to initialize a Git repository for a project built on Apiato, set up remote origins pointing to private and forked repositories, and verify remotes configuration. It helps contributors prepare their local project for syncing with upstream Apiato changes and pushing their contributions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/contribution-guide.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit init\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote add origin git@bitbucket.org:username/repo.git\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote set-url origin git@bitbucket.org:username/project-a.git\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote add upstream git@github.com:username/apiato.git\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote -vv\n```\n\n----------------------------------------\n\nTITLE: Installing ApiDocJs Documentation Generator Dependencies (Bash)\nDESCRIPTION: This snippet installs the node module dependencies required by ApiDocJs, the documentation generator used by Apiato. npm, Node.js package manager, must be installed on the system beforehand. This prepares the environment for generating API documentation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Assigning permissions to admin role\nDESCRIPTION: Gives the admin role access to all seeded permissions in the system. Can be run at any time after seeding.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:permissions:toRole admin\n```\n\n----------------------------------------\n\nTITLE: Cherry-Picking Specific Commits (Option B)\nDESCRIPTION: Selectively applies individual commits from the Apiato upstream branch to your project, allowing for more fine-grained control over which changes to include.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit cherry-pick {commit-ID}\n```\n\n----------------------------------------\n\nTITLE: Merging Latest Apiato Changes (Option A2)\nDESCRIPTION: Merges the latest Apiato changes with your custom code, requiring manual resolution of any conflicts, which is more time-consuming but may be more secure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit merge --allow-unrelated-histories apiato-{version}\n// Example:   git merge --allow-unrelated-histories apiato-8.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Apiato Core Dependency Version (JSON)\nDESCRIPTION: Manually sets the required version constraint for the `apiato/core` package within the `App/Ship/composer.json` file during the upgrade from Apiato 7.3 to 7.4. This ensures compatibility with the updated framework components.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"apiato/core\": \"2.4.*\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Test Endpoint and Configuration in PHP\nDESCRIPTION: Shows how to define the $endpoint, $auth, and $access properties inside a PHPUnit test class to specify the API route, authentication requirement, and user access roles or permissions respectively. The snippet includes an example of a POST register endpoint test using the makeCall() helper. These properties enable flexible configuration of test behavior, including automatic token injection for authenticated requests. Overrides are possible by method calls for specific tests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/miscellaneous/tests-helpers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass RegisterUserTest extends ApiTestCase\n{\n    protected string $endpoint = 'post@register';\n    protected bool $auth = false;\n    protected array $access = [\n        'roles'       => '',\n        'permissions' => '',\n    ];\n\n    public function testRegisterNewUserWithCredentials()\n    {\n        // prepare your post data\n        $data = [\n            'email'    => 'john@doe.test',\n            'name'     => 'John Doe',\n            'password' => 'secret',\n        ];\n\n        // send the HTTP request\n        $response = $this->makeCall($data);\n\n        // assert response status is correct\n        $this->assertEquals('200', $response->getStatusCode());\n\n        // ... add all your assertions\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->endpoint('get@myEndpoint')->makeCall();\n```\n\nLANGUAGE: php\nCODE:\n```\n$response = $this->auth(false)->makeCall();\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected $access = [\n    'roles'         => 'admin', // or   ['client', 'admin']\n    'permissions'   => 'delete-users',\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->getTestingUser(null, ['permissions' => 'jump', 'roles' => 'jumper']);\n```\n\n----------------------------------------\n\nTITLE: Conditional Input Handling Before sanitizeInput (PHP)\nDESCRIPTION: Demonstrates a common, verbose approach using conditional statements (`$request->has`) and standard input retrieval (`$request->input`) to check for and assign request fields. This pattern is often used before utilizing the `sanitizeInput` helper to simplify such logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// ...\nif($request->has('data.name')) {\n   $data['name'] = $request->input('data.name'); // or use getInputByKey()\n}\nif($request->has('data.description')) {\n   $data['description'] = $request->input('data.description'); // or use getInputByKey()\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Mocking and Asserting Gate Calls in PHP Tests\nDESCRIPTION: The `getGateMock` method creates a mock object for `Illuminate\\Contracts\\Auth\\Gate` to test authorization logic, specifically verifying if `Gate::allows` is called with the expected policy method name and arguments. This is useful for testing FormRequest `authorize` methods. The example shows setting up the mock, injecting it into the request, and asserting the authorization result.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// PUT '/users/{id}'\n\n// UpdateUserRequest.php\npublic function authorize(Gate $gate): bool\n{\n    // Here, we check if the user's id sent in the request has the necessary permissions to 'update'.\n    return $gate->allows('update', [User::find($this->id)]);\n}\n\n// UpdateUserRequestTest.php  \npublic function testAuthorizeMethodGateCall(): void\n{\n    $user = $this->getTestingUserWithoutAccess();\n    $request = UpdateUserRequest::injectData([], $user)\n        ->withUrlParameters(['id' => $user->id]);\n    // If the id is sent as a body parameter in the request, you can use the following:\n    // $request = UpdateUserRequest::injectData(['id' => $user->getHashedKey()], $ user);\n    \n    $gateMock = $this->getGateMock(policyMethodName: 'update', args: [\n        // Ensure you obtain a fresh model instance; using the $user variable directly will cause the test to fail.\n        User::find($user->id),\n    ]);\n    \n    $this->assertTrue($request->authorize($gateMock));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Pagination Limit in Laravel .env file\nDESCRIPTION: This snippet demonstrates setting a default pagination limit by editing the environment configuration. The `PAGINATION_LIMIT_DEFAULT` value determines the number of items returned per page by default in the repository settings.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/pagination.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nPAGINATION_LIMIT_DEFAULT=10\n```\n\n----------------------------------------\n\nTITLE: transform with Meta Usage\nDESCRIPTION: Illustrates the use of the `transform` method with metadata. It shows how to include metadata along with the transformation using the optional `meta` parameter. It provides a sample of the resulting response that includes the metadata.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// With Meta\n$this->transform($resource, ResourceTransformer::class, meta: ['foo' => 'bar', 'baz' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Unit Testing apiato Action with Authenticated Fake Request (PHP)\nDESCRIPTION: Presents a unit test example for an apiato action that requires an authenticated user. It shows how to create a fake request using `injectData`, passing both the necessary request data and a mock user object to simulate an authenticated request context.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n   'store_id'  => $this->encode($store->id),\n   'items'     => $orderItems,\n   'recipient' => $receipient,\n];\n\n$user = factory(User::class)->create();\n\n$request = MakeOrderRequest::injectData($data, $user);\n\n$order = App::make(MakeOrderAction::class)->run($request);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Model Factories in Tests\nDESCRIPTION: Demonstrates how to use the User model factory to create multiple user instances for testing purposes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/factories.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// creating 4 users\nUser::factory()->count(4)->create();\n```\n\n----------------------------------------\n\nTITLE: Install ApiDocJs Dependency\nDESCRIPTION: Installs ApiDocJs, the tool used to generate API documentation. This step is a prerequisite for using the Documentation Generator Container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/documentation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install apidoc\n```\n\n----------------------------------------\n\nTITLE: Example Twitter OAuth Response (JSON)\nDESCRIPTION: Shows an example JSON structure returned by Twitter after a successful client-side OAuth authentication request. This data, containing tokens and basic user info, is typically sent by the client application to the server's social authentication endpoint.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"User\": {\n    \"tokentoken\": \"1212\",\n    \"tokentokenSecret\": \"3434\",\n    \"tokenid\": \"777\",\n    \"tokennickname\": \"John_Doe\",\n    \"tokenname\": \"John Doe\",\n    \"tokenemail\": null,\n    \"tokenavatar\": \"https://pbs.twimg.com/images/888/PENrcePC.jpg\",\n    \"tokenuser\": \"token\",\n    \"avatar_original\": \"https://pbs.twimg.com/images/999/PENrcePC.jpg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Configured Git Remote Repositories - Shell\nDESCRIPTION: Lists all configured Git remotes along with their fetch and push URLs to verify that the 'upstream' remote was added successfully. Useful for confirming repository configuration before fetching upstream changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -vv\n\norigin      git@bitbucket.org:username/my-awesome-api.git (fetch)\norigin      git@bitbucket.org:username/my-awesome-api.git (push)\nupstream    git@github.com:apiato/apiato.git (fetch)\nupstream    git@github.com:apiato/apiato.git (push)\n```\n\n----------------------------------------\n\nTITLE: Update .env for SQLite\nDESCRIPTION: This code snippet shows the changes required in the `.env` file to configure the application to use SQLite as the database driver. It sets the `DB_CONNECTION` to `sqlite` and removes the MySQL-related configuration options.  It is important to only include the `DB_CONNECTION` and not the other commented out lines.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n+ DB_CONNECTION=sqlite\n- DB_CONNECTION=mysql\n- DB_HOST=127.0.0.1\n- DB_PORT=3306\n- DB_DATABASE=homestead\n- DB_USERNAME=homestead\n- DB_PASSWORD=secret\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Object Instances from a Transporter in PHP\nDESCRIPTION: Demonstrates how to retrieve an object instance previously stored on a Transporter using `setInstance()`. Access the instance directly via the key used during setting (e.g., `$data->command_instance`). Note that these instances are not included in `toArray()` output.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$console = $data->command_instance;\n```\n\n----------------------------------------\n\nTITLE: Listing upstream branch commits for cherry-pick\nDESCRIPTION: Lists all commits in the upstream branch to identify specific changes for cherry-picking into the local branch.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit log {upstream-branch-name}\n```\n\n----------------------------------------\n\nTITLE: Migrate & Seed Simultaneously with Artisan\nDESCRIPTION: Shows how to run migrations and seed in the same command using the `--seed` option.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/seeders.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate --seed\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Service Providers in a Container\nDESCRIPTION: Code example showing how to register additional service providers in a container's Main Service Provider. This demonstrates the proper way to make container-specific providers available to the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/providers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nprivate $containerServiceProviders = [\n    AuthServiceProvider::class,\n    EventsServiceProvider::class,\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Illustrating the Request Lifecycle Using Mermaid Diagram - Mermaid\nDESCRIPTION: This Mermaid diagram visualizes the architectural flow of request handling within APIato's Porto architecture, covering Web, API, and CLI entry points. It identifies component relationships and dependencies, including mandatory/optional flows, response generation edges, and various actors like Tasks, Actions, Controllers, Repositories, and Events. The diagram requires the Mermaid.js library or a compatible markdown renderer for visualization and supports highlighting of optional vs. required dependencies using custom class definitions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/architecture-concepts/request-lifecycle.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  classDef dashedBorder stroke:#0f0,stroke-dasharray: 5 5;\n  classDef response stroke:red,stroke-width:2px;\n  subgraph Container\n    WebRoute[Web Route]\n    WebMiddleware[Middleware]\n    WebRequest[\\Request/]\n    WebController{Controller}\n    WebAction[Action]\n    \n    CLI[CLI]\n    Command\n    CLIAction[Action]\n    \n    SubAction[SubAction]\n    \n    APIRoute[API Route]\n    APIMiddleware[Middleware]\n    APIRequest[\\Request/]\n    APIController{Controller}\n    APIAction[Action]\n    \n    TaskA[Task]\n    TaskB[Task]\n    TaskC[Task]\n    TaskD[Task]\n    TaskE[Task]\n    \n    Job[Job]\n    \n    View[\\View\\]:::response\n    Transformer[/Transformer/]:::response\n    \n    RepositoryA[Repository]\n    RepositoryB[Repository]\n    \n    ModelA[Model]\n    ModelB[Model]\n    \n    ValueObject[Value Object]\n    \n    Event[Event]\n    ListenerA[Listener]\n    ListenerB[Listener]\n  end\n  \n  WebRoute[Web Route]-->WebMiddleware\n  WebMiddleware-->WebRequest\n  WebRequest-->WebController\n  WebController-->View\n  WebController<-->WebAction\n  WebAction<-..->TaskA{{Task}}\n  WebAction<-.->SubAction\n  \n  APIRoute[API Route]-->APIMiddleware\n  APIMiddleware-->APIRequest\n  APIRequest-->APIController\n  APIController<-->APIAction\n  APIController-->Transformer\n  APIAction<-..->TaskD{{Task}}\n  APIAction<-..->TaskE{{Task}}\n  APIAction-.->Job:::dashedBorder\n  \n  CLI[CLI]---->Command[[Command]]\n  Command-->CLIAction\n  CLIAction<-.->SubAction:::dashedBorder\n  CLIAction<-..->TaskD{{Task}}\n  \n  SubAction<-.->TaskB{{Task}}\n  SubAction<-.->TaskC{{Task}}\n  \n  TaskA-.-RepositoryA[(Repository)]:::dashedBorder\n  TaskB-.-RepositoryA[(Repository)]:::dashedBorder\n  TaskC-.-RepositoryB[(Repository)]:::dashedBorder\n  TaskD-.-RepositoryB[(Repository)]:::dashedBorder\n  \n  RepositoryA-.-ModelA\n  RepositoryB-.-ModelB\n  \n  ModelA(((Model)))-.-ValueObject[/ValueObject\\]:::dashedBorder\n  ModelB(((Model)))-.-ValueObject[/ValueObject\\]:::dashedBorder\n  \n  TaskE-.->Event:::dashedBorder\n  Event-.-ListenerA([Listener]):::dashedBorder\n  Event-.-ListenerB([Listener]):::dashedBorder\n  \n  Web--request-->Framework\n  Mobile--request-->Framework\n  etc[etc...]--request-->Framework\n  Framework-->WebRoute((Web Route))\n  Framework-->CLI((CLI))\n  Framework-->APIRoute((API Route))\n```\n\n----------------------------------------\n\nTITLE: Defining API Route Get Method (PHP)\nDESCRIPTION: An example of defining a GET route in an APIato route file. This snippet maps the '/orders' path to the 'ListOrdersController::class' for retrieving data. Placed in a file like 'ListOrders.v1.private.php', it would be a v1 endpoint intended for private access.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/routes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('orders', ListOrdersController::class);\n```\n\n----------------------------------------\n\nTITLE: Fetching a specific upstream branch for upgrade\nDESCRIPTION: This command fetches the latest changes from the specified upstream branch (e.g., '8.0'), updating your local tracking info to prepare for merging or rebasing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream {upstream-branch-name}\n```\n\n----------------------------------------\n\nTITLE: Verifying Apiato and Laravel Versions After Upgrade (Bash)\nDESCRIPTION: These commands check the installed versions of Apiato and the underlying Laravel framework using PHP Artisan commands after performing an upgrade, specifically shown in the context of upgrading from Apiato 8.0 to 9.0. The expected output confirms a successful upgrade to Apiato 9.0 and Laravel 7.x.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan -V\n```\n\n----------------------------------------\n\nTITLE: Setting Log Channel Environment Variable (env)\nDESCRIPTION: Adds the `LOG_CHANNEL` environment variable set to `stack` in the project's `.env` file. This configuration is required as part of the upgrade to Apiato 7.4, which incorporates Laravel 5.6 logging features.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nLOG_CHANNEL=stack\n```\n\n----------------------------------------\n\nTITLE: Seeding the database in Apiato\nDESCRIPTION: Seeds the database with initial data required for the application to function properly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Requesting Tokens with Custom Login Field (JSON)\nDESCRIPTION: Example JSON payload for requesting tokens when custom login fields (like 'phone') are configured via the `appSection-authentication` config. The `username` key in the request body should contain the value corresponding to one of the allowed login fields (e.g., a phone number instead of an email).\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n  \"username\": \"+1234567890\",\n  \"password\": \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HashIdTrait Namespace Usage (PHP)\nDESCRIPTION: Requires a search and replace operation across the project codebase. Any usage of the old `HashIdTrait` namespace (`App\\Ship\\Engine\\Traits\\HashIdTrait`) must be updated to the new core namespace (`Apiato\\Core\\Traits\\HashIdTrait`) as part of the upgrade from Apiato 4.1 to 5.0.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Find:\nApp\\Ship\\Engine\\Traits\\HashIdTrait\n\n// Replace with:\nApiato\\Core\\Traits\\HashIdTrait\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato via Composer (Stable Version)\nDESCRIPTION: Command to install the latest stable version of Apiato using Composer. This creates a new project with all dependencies installed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project apiato/apiato my-api\n```\n\n----------------------------------------\n\nTITLE: Apiato Request Folder Structure\nDESCRIPTION: Illustrates the standard directory layout for organizing Request classes within an Apiato container. Requests are typically separated based on the User Interface (API or WEB) they serve.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n - app\n    - Containers\n        - {container-name}\n            - UI\n                - API\n                    - Requests\n                        - UpdateUserRequest.php\n                        - DeleteUserRequest.php\n                        - ...\n                - WEB\n                    - Requests\n                        - UpdateUserRequest.php\n                        - DeleteUserRequest.php\n                        - ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Local Git Branches and Tracking Info - Bash\nDESCRIPTION: Displays local branches with tracking references and latest commit IDs. Requires an initialized repository with at least one branch present. Useful for reviewing tracking relationships before submitting changes or creating PRs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -vv\n```\n\n----------------------------------------\n\nTITLE: Publishing Social Auth Container Config - Shell\nDESCRIPTION: Publishes the configuration file for the social-auth-container to allow customization. This command copies the configuration file to `app/Ship/Configs/vendor-socialAuth.php`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/social-authentication.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch to Track Specific Upstream Branch\nDESCRIPTION: Fetches a specific branch from the upstream Apiato repository and configures your local branch to track it, enabling easier syncing of changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream {upstream-branch-name}\n// Example:   git fetch upstream 8.0\n\ngit branch --set-upstream-to upstream/{upstream-branch-name}\n// Example:   git branch --set-upstream-to upstream/8.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Self-Handling Event Class in Apiato with PHP\nDESCRIPTION: This PHP snippet defines a self-handling event class named UserRegisteredEvent that extends the base Event class and implements the ShouldQueue interface, meaning the event will be queued automatically. It contains a constructor that accepts a User model instance and assigns it to a protected property. The handle() method logs the new user registration details. The broadcastOn() method declares the broadcast channel. This requires Laravel's queue, logging systems, and the Apiato event base classes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/events.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Events;\n\nuse App\\Containers\\User\\Models\\User;\nuse App\\Ship\\Parents\\Events\\Event;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass UserRegisteredEvent extends Event implements ShouldQueue\n{\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function handle()\n    {\n        Log::info('New User registration. ID = ' . $this->user->getHashedKey() . ' | Email = ' . $this->user->email . '.');\n\n        // ...\n    }\n\n    public function broadcastOn()\n    {\n        return new PrivateChannel('channel-name');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Header Filename in apidoc.json - Apiato (JSON)\nDESCRIPTION: Presents a JSON code block demonstrating the structure of the apidoc.json file for customizing the documentation header location. The 'header.filename' property should point to the markdown file containing the desired documentation header. Ensure the custom path is valid relative to the project root for proper header rendering.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"header\": {\n        \"filename\": \"Containers/NEW_SECTION_NAME/Documentation/UI/WEB/Views/documentation/header.md\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Rate Limiting in Apiato\nDESCRIPTION: Environment variables configuration for rate limiting in Apiato. These variables define whether rate limiting is enabled globally, the number of allowed API calls per minute, and the expiration time in minutes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/rate-limiting.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nGLOBAL_API_RATE_LIMIT_ENABLED=true\nGLOBAL_API_RATE_LIMIT_ATTEMPTS_PER_MIN=30\nGLOBAL_API_RATE_LIMIT_EXPIRES_IN_MIN=1\n```\n\n----------------------------------------\n\nTITLE: Controlling Pagination via URL Parameters (Text)\nDESCRIPTION: Examples of URL query parameters used to control pagination in API requests. The `page` parameter specifies the desired page number, `limit` controls the number of results per page, and `limit=0` can disable pagination if allowed by configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\napi.apiato.test/v1/users?page=200\n```\n\nLANGUAGE: text\nCODE:\n```\napi.apiato.test/v1/users?limit=100\n```\n\nLANGUAGE: text\nCODE:\n```\napi.apiato.test/v1/users?limit=100&page=2\n```\n\nLANGUAGE: text\nCODE:\n```\napi.apiato.test/v1/users?limit=0\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Apiato\nDESCRIPTION: Command to run database migrations, which create the necessary database tables for the Apiato application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Notifications (Markdown)\nDESCRIPTION: This snippet illustrates the recommended directory structure for organizing notification classes within an Apiato project. It shows where container-specific notifications and general Ship-level notifications should be placed.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/notifications.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Notifications\n│               ├── UserRegisteredNotification.php\n│               └── ...\n└── Ship\n    └── Notifications\n        ├── SystemFailureNotification.php\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Generating Provider using Apiato Command\nDESCRIPTION: Command to interactively generate a new service provider in Apiato using the artisan command-line tool.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/policies.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:provider\n```\n\n----------------------------------------\n\nTITLE: Calling Unprotected Endpoint using cURL\nDESCRIPTION: This snippet demonstrates how to call an unprotected endpoint using the cURL command-line tool. It sends a POST request with specified headers and form data to a register endpoint. The endpoint being called requires an email and password for registration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/requests.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Accept: application/json\" -H \"Content-Type: application/x-www-form-urlencoded; -F \"email=admin@admin.com\" -F \"password=admin\" -F \"=\" \"http://api.domain.test/v2/register\"\n```\n\n----------------------------------------\n\nTITLE: Create Admin User (Interactive)\nDESCRIPTION: This command starts an interactive prompt for creating a new admin user in the Apiato application. It guides the user through the process of entering the necessary information, such as email and password.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan apiato:create:admin\n```\n\n----------------------------------------\n\nTITLE: Reading Settings by Key - PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a settings value by its key using the `findSettingsByKeyTask`.  It expects the settings key name as an argument. This is a basic operation to retrieve a single setting. The output is the value of the requested setting. No specific dependencies are shown but likely relies on the APIATO framework's Settings container and associated Task.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/system-settings.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$value = $this->findSettingsByKeyTask->run('whateverSettingsName');\n```\n\n----------------------------------------\n\nTITLE: Setting API Client Credentials in .env File\nDESCRIPTION: This snippet demonstrates setting the `client_id` and `client_secret` obtained after running `php artisan passport:client --password` in the `.env` file. It defines environment variables for both web admin and mobile admin clients, necessary for API authentication and authorization.  These values must be replaced with your actual credentials.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/postman.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCLIENT_WEB_ADMIN_ID={CLIENT_ID}\nCLIENT_WEB_ADMIN_SECRET={CLIENT_SECRET}\n\nCLIENT_MOBILE_ADMIN_ID={CLIENT_ID}\nCLIENT_MOBILE_ADMIN_SECRET={CLIENT_SECRET}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Laravel Artisan Command in PHP\nDESCRIPTION: This snippet defines a basic Laravel Artisan command class by extending the ConsoleCommand parent class. It registers a command signature 'hello:world' and provides a description. The handle method contains the command's main logic, which outputs a greeting message to the console. Dependencies include Laravel's ConsoleCommand base class, and it assumes the command is placed within the prescribed folder structure. The command can be invoked from the CLI using its signature. The snippet demonstrates minimal business logic, adhering to principles that business logic should reside in actions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/commands.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorldCommand extends ConsoleCommand\n{\n    protected $signature = 'hello:world';\n    protected $description = 'Hello World!';\n\n    public function handle()\n    {\n        echo \"Hello World :)\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Account Transformer with Include Functions PHP\nDESCRIPTION: This code snippet showcases an `AccountTransformer` with methods to include related data, namely `tags` and `user`. It defines what relations can be included through the `availableIncludes` array. The `transform` method formats the basic account data. The `includeTags` and `includeUser` methods demonstrate including the related data using other transformers (TagTransformer and UserTransformer) and helper functions like `collection` and `item`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/transformers.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass AccountTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'tags',\n        'user',\n    ];\n\n    public function transform(Account $account)\n    {\n        return [\n            'id'       => (int)$account->id,\n            'url'      => $account->url,\n            'username' => $account->username,\n            'secret'   => $account->secret,\n            'note'     => $account->note,\n        ];\n    }\n\n    public function includeTags(Account $account)\n    {\n        // use collection with `multi` relationship\n        return $this->collection($account->tags, new TagTransformer());\n    }\n\n    public function includeUser(Account $account)\n    {\n        // use `item` with single relationship\n        return $this->item($account->user, new UserTransformer());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apiato Transformer Folder Structure (Markdown)\nDESCRIPTION: Illustrates the standard directory structure for placing Transformer classes within an Apiato container. Transformers reside in the `UI/API/Transformers` subdirectory of a specific container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── UI\n                └── API\n                    └── Transformers\n                        ├── TransformerA.php\n                        ├── TransformerB.php\n                        └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiDocJs Header File Path (JSON)\nDESCRIPTION: Shows the structure within the `apidoc.json` file to configure the path to the documentation header file. The `header.filename` property specifies the markdown file that will be used as the introductory content for the generated documentation. This path should be updated if the documentation container is moved or renamed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/documentation.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"header\": {\n        \"filename\": \"Containers/NEW_SECTION_NAME/Documentation/UI/WEB/Views/documentation/header.md\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing an Exception with Debugging Context (Apiato/Porto) - PHP\nDESCRIPTION: Demonstrates how to attach debug information to an exception instance using the `debug()` method before throwing it. This method accepts a string or an instance of `\\Exception`, allowing developers to include relevant context for debugging purposes, which is typically logged but not exposed to the user.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/exceptions.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nthrow (new AccountFailedException())->debug($e); // debug() accepts string or \\Exception instance\n```\n\n----------------------------------------\n\nTITLE: Generating Mail Command\nDESCRIPTION: This snippet shows the command-line instruction to generate a new mail class using Apiato's interactive generator.  It uses the `apiato:generate:mail` command, which likely prompts the user for necessary information to create the mail.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/mail.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:mail\n```\n\n----------------------------------------\n\nTITLE: Configuring Origin and Upstream Git Remotes - Bash\nDESCRIPTION: Explains how to add or update remote repositories for origin and upstream in a cloned project. Dependencies: Existing Git repository initialized, remote access permissions. 'origin' should point to the user's personal repo, while 'upstream' points to Apiato's main repository or your fork. Use 'set-url' to change an already existing remote.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin git@bitbucket.org:username/repo.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote set-url origin git@bitbucket.org:username/project-a.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:username/apiato.git\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespaced Translations in Apiato PHP\nDESCRIPTION: Demonstrates how to retrieve a translated string in PHP using Apiato's namespacing convention. The `__()` helper function accesses the 'welcome' key from the 'messages' file within the 'MyContainer' container located in the 'MySection' section. The namespace format is `sectionName@containerName::fileName.key`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/languages.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n__('mySection@myContainer::messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Example composer.json for Developing a Custom Apiato Container\nDESCRIPTION: This JSON snippet shows the essential structure of a composer.json file for developing a new Apiato container, including setting the container type and specifying container-specific metadata via the 'extra' section.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/readme.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"vendor/project\",\n  \"description\": \"This is a short description for your container.\",\n  \"type\": \"apiato-container\",\n  \"require\": {\n    \"somevendor/somepackage\": \"dev-master\"\n  },\n  \"extra\": {\n    \"apiato\": {\n      \"container\": {\n        \"name\": \"Foo\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Vendor Configs Artisan Shell\nDESCRIPTION: This Artisan command is used to publish vendor assets, including the `vendor-localization.php` configuration file. Executing this command copies the configuration file from the vendor package to your application's `app/Ship/Configs` directory, allowing you to customize supported languages and other localization settings.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/localization.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Charging Users with Payment Accounts Using Apiato Payment Container in PHP\nDESCRIPTION: Demonstrates how to charge a user by selecting one of their payment accounts and specifying the amount and currency. The snippet depends on the user model implementing the ChargeableTrait and the ChargeableInterface. It retrieves the first payment account from the user's paymentAccounts collection and calls the charge method with the amount and 'USD' as currency. Inputs include the user instance, the chosen payment account, the amount (9.99), and the currency ('USD'). This example assumes that payment accounts are polymorphic and can be converted to dedicated payment account types if necessary.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/payments.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// in this example we are selecting a random payment account.\n$acccount = $user->paymentAccounts->first();\n\n$amount = 9.99;\n\n// charge the user with the 'USD' currency\n$user->charge($acccount, $amount, 'USD');\n```\n\n----------------------------------------\n\nTITLE: Sample Response for OAuth2 Token Request - JSON\nDESCRIPTION: Provides a typical JSON response for successful token issuance using Laravel Passport's OAuth2 implementation with the Client Credentials grant. Contains the fields: token_type indicating the authentication scheme, expires_in with token validity duration in seconds, access_token which is the JWT used for subsequent authorization, and refresh_token allowing token renewal without re-authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400,\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni...\",\n  \"refresh_token\": \"ZFDPA1S7H8Wydjkjl+xt+hPGWTagX...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Review Git Commit Log for Current Branch - Shell\nDESCRIPTION: Displays the commit history of the currently checked out branch, allowing verification of the latest commits after syncing with upstream or before merging. Useful for manual inspection of changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example\nDESCRIPTION: Shows the recommended folder structure for seeders within an Apiato container. This structure ensures proper loading and organization of seeder classes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/seeders.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n - App\n    - Containers\n        - {section-name}\n            - {container-name}\n                 - Data\n                    - Seeders\n                        - ContainerNameRolesSeeder_1.php\n                        - ContainerNamePermissionsSeeder_2.php\n                        - ...\n```\n\n----------------------------------------\n\nTITLE: Example Request Data for sanitizeInput (JSON)\nDESCRIPTION: Provides a comprehensive sample JSON request body used to demonstrate the functionality of the `sanitizeInput` helper. It includes various data types (boolean, string, null, number, nested objects, arrays) to show how the method handles different input structures.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\" : {\n\t\t\"is_private\" : false,\n\t\t\"description\" : \"this is a rather long description text\",\n\t\t\"a\" : null,\n\t\t\"b\" : 3453,\n\t\t\"foo\" : {\n\t\t\t\"a\" : \"a\",\n\t\t\t\"b\" : \"b\",\n\t\t\t\"c\" : 1234\n\t\t},\n\t\t\"bar\" : [\n\t\t    \"a\", \"b\", \"c\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a route for the 'hello' endpoint in PHP\nDESCRIPTION: This snippet registers a GET route '/hello' that directs requests to the 'sayHello' method of the Controller class. It requires the APIATO routing system and setup, allowing incoming HTTP GET requests to trigger the specified controller action.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$router->get('hello', [\n    'uses' => 'Controller@sayHello',\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Host File Configuration Example for Apiato Local Development\nDESCRIPTION: Example of host file entries mapping domain names to localhost for Apiato development, enabling access to the API and web interfaces.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1  apiato.test\n127.0.0.1  api.apiato.test\n127.0.0.1  admin.apiato.test\n```\n\n----------------------------------------\n\nTITLE: Executable Path Configuration\nDESCRIPTION: Shows the configuration options for the `apidoc` executable path.  The `executable` option allows specifying how to access and run the `apidoc` tool on the machine, handling cases where it's not globally accessible.  Adjust the path if getting an `apidoc not found` error.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/documentation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/*\n|\n| Specify how you run or access the `apidoc` tool on your machine.\n|\n*/\n\n'executable' => 'node_modules/.bin/apidoc',\n// 'executable' => 'apidoc',\n```\n\n----------------------------------------\n\nTITLE: Registering Generator Commands in Apiato Service Provider (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to register custom generator command classes (like `ActionGenerator`, `RouteGenerator`, `TaskGenerator`) within the `registerGenerators` method of the `GeneratorsServiceProvider` in an Apiato application. This step makes the new generator command available through the Artisan console and is required when adding new component generators.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/contribution-guide.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->registerGenerators([\n    ActionGenerator::class,\n    RouteGenerator::class,\n    TaskGenerator::class,\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding a new remote repository for Apiato using Git remote add\nDESCRIPTION: This snippet adds the official Apiato repository as a remote named 'upstream', allowing for fetching updates directly from the source for version control synchronization.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/apiato/apiato\n```\n\n----------------------------------------\n\nTITLE: Implementing React Greeting Component in Docusaurus MDX - jsx\nDESCRIPTION: This snippet provides a simple React functional component named HelloDocusaurus in a Docusaurus MDX file. The component returns an h1 header displaying a greeting message. The code uses standard JSX syntax and can be inserted into Docusaurus documentation for live or static code display. Requires Docusaurus with MDX and JSX support; no external dependencies. Inputs and outputs are static, with no props expected.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/markdown-features.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the Code Generator to Create a Container in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to generate a new container in Apiato using the artisan command line tool. It facilitates standardized container creation, streamlining the development process.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/software-architectural-patterns.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:container\n```\n\n----------------------------------------\n\nTITLE: Sanitized Data Result in PHP\nDESCRIPTION: Shows the resulting PHP array structure after applying the sanitizeInput method, demonstrating how it filters and preserves the requested fields from the original request data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"data\" => [\n    \"is_private\" => false\n    \"description\" => \"this is a rather long description text\"\n    \"foo\" => [\n      \"c\" => 1234\n    ]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning Apiato Repository with Git\nDESCRIPTION: Command to manually clone the Apiato repository using Git. This approach requires additional setup steps compared to using Composer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apiato/apiato.git\n```\n\n----------------------------------------\n\nTITLE: Publishing Configs in Laravel\nDESCRIPTION: This command publishes the configuration files for the localization container to the application's configuration directory. This action makes the configurations accessible and allows modification of settings such as supported languages.  The `vendor:publish` command copies the package's configuration file to the application's config directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/localization.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Accessing Translated Strings\nDESCRIPTION: This code snippet demonstrates retrieving a translated string using the `__()` helper function within the APIATO framework. It shows how to access translations by specifying the section, container, file, and key. This utilizes the namespacing convention for translation files.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/localization.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n__('mySection@myContainer::messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Running Seeders using Laravel Artisan in Shell/Bash\nDESCRIPTION: This snippet describes commands executed in the shell or bash environment to run database seeders using Laravel's Artisan CLI within Apiato. The commands include running all seeders with `php artisan db:seed`, targeting a specific seeder class with the `--class` option, and combining the migration and seeding process in a single command. These commands require a properly configured Laravel environment with seeders registered in the correct container locations and assume access to command-line interface.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/seeders.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan db:seed --class=\"your\\single\\seeder\\goes-here\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan migrate --seed\n```\n\n----------------------------------------\n\nTITLE: Example Output of sanitizeInput Method (PHP)\nDESCRIPTION: Illustrates the resulting array structure after applying the `sanitizeInput` method with the example input JSON and specified fields. It demonstrates how requested fields that exist are included, nested structures are preserved, and fields not present or not requested are omitted.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"data\" => [\n    \"is_private\" => false\n    \"description\" => \"this is a rather long description text\"\n    \"foo\" => [\n      \"c\" => 1234\n    ]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing FindUserByIdTask - PHP\nDESCRIPTION: This snippet defines a `FindUserByIdTask` class that extends the base `Task` class. It utilizes a `UserRepository` to search for a user by their ID. The `run` method attempts to find the user, throwing a `UserNotFoundException` if the user isn't found and returning the user if found. The constructor receives a `UserRepository` instance and assigns it to a private property for later use. This task exemplifies retrieving a user by ID using repository pattern within the architecture.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/tasks.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass FindUserByIdTask extends Task\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function run($id)\n    {\n        try {\n            $user = $this->userRepository->find($id);\n        } catch (Exception $e) {\n            throw new UserNotFoundException();\n        }\n\n        return $user;\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Transformer with Relationships in PHP\nDESCRIPTION: This code provides an example of an `AccountTransformer` with `availableIncludes` defined for related data such as tags and user. The `transform()` method formats the main account data. The `includeTags()` and `includeUser()` methods define how to include the related data (tags and user) using the `collection` and `item` methods respectively.  This example also shows how to include nested transformers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/transformers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\nclass AccountTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'tags',\n        'user',\n    ];\n\n    public function transform(Account $account)\n    {\n        return [\n            'id'       => (int)$account->id,\n            'url'      => $account->url,\n            'username' => $account->username,\n            'secret'   => $account->secret,\n            'note'     => $account->note,\n        ];\n    }\n\n    public function includeTags(Account $account)\n    {\n        // use collection with `multi` relationship\n        return $this->collection($account->tags, new TagTransformer());\n    }\n\n    public function includeUser(Account $account)\n    {\n        // use `item` with single relationship\n        return $this->item($account->user, new UserTransformer());\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating a New Request Class in Apiato - PHP\nDESCRIPTION: This snippet shows the command-line instruction to generate a new Request class in an Apiato Laravel application. It uses Laravel's Artisan CLI with the apiato:generate:request command, prompting an interactive creation flow for a new Request, which will be scaffolded in the appropriate directory structure. No PHP dependencies are required beyond Apiato and Laravel being present.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:request\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Driver Configuration in Laravel PHP\nDESCRIPTION: This PHP snippet demonstrates how to check the configured default queue driver within a Laravel or Apiato application using the `Config` facade. It specifically checks if the driver is set to 'database', which is relevant for triggering driver-specific actions like creating necessary migration files in Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tasks-queuing.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif (Config::get('queue.default') == 'database')\n{\n   // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Login Response JSON\nDESCRIPTION: This snippet represents a successful login response in JSON format. It includes the token type, expiration time in seconds, the access token, and the refresh token. This response is returned after successful authentication, providing the client with the necessary credentials to access protected resources.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 31536000,\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni...\",\n  \"refresh_token\": \"ZFDPA1S7H8Wydjkjl+xt+hPGWTagX...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example\nDESCRIPTION: This snippet shows the folder structure where SubActions are located within a container in the Apiato framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/subactions.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n - app\n    - Containers\n        - {container-name}\n            - Actions\n                - ValidateAddressSubAction.php\n                - BuildOrderSubAction.php\n                - ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-based Route Access Bypass\nDESCRIPTION: Shows how to configure specific roles to bypass authorization checks for all endpoints in the system by modifying the apiato.php configuration file.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'requests' => [\n    'allow-roles-to-access-all-routes' => ['admin'],\n],\n```\n\n----------------------------------------\n\nTITLE: Example Request Data for mapInput (JSON)\nDESCRIPTION: Presents a simple sample JSON request body intended to demonstrate the `mapInput` helper function. It shows a nested structure with a specific key (`data.name`) that will be targeted for renaming by the mapping function.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"data\" : {\n\t\t\"name\" : \"John Doe\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation Locale in .env File\nDESCRIPTION: Example of how to change the documentation header language by setting the locale in the .env file.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/documentation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nAPIDOC_LOCALE=ru\n```\n\n----------------------------------------\n\nTITLE: Generate Apiato API documentation\nDESCRIPTION: This command generates the API documentation for the Apiato application using ApiDocJs. It scans the codebase for API annotations and creates a documentation output that can be served as HTML files.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Configuring User Access Roles and Permissions in Apiato Tests Using PHP\nDESCRIPTION: The snippet illustrates how to assign specific roles and permissions to test users with the $access property or dynamically during test execution. Defining $access as an array with roles and permissions ensures that the testing user created by getTestingUser() inherits these access rights for the tests. Alternatively, calling getTestingUser() with explicit roles and permissions overrides the default $access. There is also support for getTestingUserWithoutAccess() to create users without assigned roles or permissions. This capability is critical for testing authorization and access control mechanisms accurately.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/miscellaneous/tests-helpers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected $access = [\n    'roles'         => 'admin', // or   ['client', 'admin']\n    'permissions'   => 'delete-users',\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->getTestingUser(null, ['permissions' => 'jump', 'roles' => 'jumper']);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Apiato Transformer (PHP)\nDESCRIPTION: Provides a basic example of a `UserTransformer` class in Apiato. It extends the parent transformer, defines available/default includes, and implements the `transform` method to map `User` model attributes (like hashed ID and name) to a structured array for JSON output, including the object's resource key.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Transformers\\Transformer as ParentTransformer;\n\nclass UserTransformer extends ParentTransformer\n{\n    protected $availableIncludes = [];\n\n    protected $defaultIncludes = [];\n\n    public function transform(User $user)\n    {\n        return [\n            'object' => $user->getResourceKey(),\n            'id' => $user->getHashedKey(),\n            'name' => $user->name,\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Main Service Provider in Apiato\nDESCRIPTION: Example of a Main Service Provider implementation in the Excel container that extends from MainProvider. It demonstrates how to register container service providers, aliases, and bind interfaces to implementations.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/providers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Excel\\Providers;\n\nuse App\\Ship\\Parents\\Providers\\MainProvider;\nuse Maatwebsite\\Excel\\ExcelServiceProvider;\nuse Maatwebsite\\Excel\\Facades\\Excel;\n\nclass MainServiceProvider extends MainProvider\n{\n\n    /**\n     * Container Service Providers.\n     *\n     * @var array\n     */\n    public $serviceProviders = [\n        // ...            \n    ];\n\n    /**\n     * Container Aliases\n     *\n     * @var  array\n     */\n    public $aliases = [\n        // ...\n    ];\n\n    /**\n     * Register anything in the container.\n     */\n    public function register()\n    {\n        parent::register();\n\n        $this->app->bind(UserRepositoryInterface::class, UserRepository::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation in Apiato\nDESCRIPTION: Command to generate API documentation using ApiDocJS. This parses inline documentation in the code and creates HTML documentation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Defining access Property Example\nDESCRIPTION: This snippet demonstrates the usage of the `$access` property. This property defines the roles and permissions for a testing user, enabling access control. The example configures a test to use a testing user with 'delete-users' permission and 'admin' role.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/tests.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass DeleteUserTest extends ApiTestCase\n{\n    protected string $endpoint = 'delete@v1/users/{id}';\n    // highlight-start\n    protected array $access = [\n        'permissions' => 'delete-users',\n        'roles' => 'admin',\n    ];\n    // highlight-end\n    \n    public function testDeleteUser(): void\n    {\n        // The testing user will have the \"delete-users\" permission and \"admin\" role.\n        // highlight-start\n        $user = $this->getTestingUser();\n        // highlight-end\n    \n        $response = $this->injectId($user->id)->makeCall();\n\n        $response->assertNoContent();        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking specific commits by commit ID\nDESCRIPTION: Incorporates individual commits into the current branch by their commit IDs, allowing selective upgrades or fixes from upstream history.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit cherry-pick {commit-ID}\n```\n\n----------------------------------------\n\nTITLE: Asserting Model Casts Property is Empty in PHP\nDESCRIPTION: The `assertModelCastsIsEmpty` method asserts that a model's `$casts` property is empty, excluding default values like `id` and `deleted_at` (if applicable). Additional keys to ignore during the check can be provided as an array in the second argument. This helps ensure model attributes are not unexpectedly being cast.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->assertModelCastsIsEmpty($model);\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->assertModelCastsIsEmpty($model, ['value1', 'value2']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Homestead sites\nDESCRIPTION: Example configuration for mapping domains to specific directories in Homestead.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nsites:\n\t- map: api.apiato.test\n  \t  to: /{full-path-to}/apiato/public\n```\n\n----------------------------------------\n\nTITLE: Defining Transformer Includes in PHP\nDESCRIPTION: This PHP snippet demonstrates how to define `$availableIncludes` and `$defaultIncludes` properties within a transformer class.  `$availableIncludes` lists the available includes to be requested via the API and will be listed in the response. `$defaultIncludes` defines includes that are always included.  Requires the Apiato framework or a similar structure for transformers.  The output is influenced by the request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n    protected \\$availableIncludes = [\n        'products',\n        'store',\n        'recipients',\n    ];\n\n    protected \\$defaultIncludes = [\n        'invoice',\n    ];\n```\n\n----------------------------------------\n\nTITLE: Default OR Logic for Multi-Field Search (URL)\nDESCRIPTION: Example of a multi-field search query (`?search=field1:value1;field2:value2`). By default, when the `searchJoin` parameter is not specified, the conditions for each field are combined using the logical OR operator.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_11\n\nLANGUAGE: http\nCODE:\n```\napi.domain.test/v1/endpoint?search=age:17;email:john@gmail.com\n```\n\n----------------------------------------\n\nTITLE: Referencing Shared Response in Endpoint DocBlock - Apiato (PHP)\nDESCRIPTION: Illustrates how to reference a previously defined shared API response within an endpoint's docblock using the @apiUse directive. The referenced key ('UserSuccessSingleResponse') must match an existing @apiDefine entry elsewhere. Enables documentation reuse and centralized response management.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n* @apiUse UserSuccessSingleResponse\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Filtered Fields and Relationships in Apiato\nDESCRIPTION: Example of a more complex JSON response showing how filtering applies to both the main model and its relationships.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"0one37vjk49rp5ym\",\n      \"status\": \"approved\",\n      \"products\": {\n        \"data\": [\n          {\n            \"id\": \"bmo7y84xpgeza06k\",\n            \"status\": \"pending\"\n          },\n          {\n            \"id\": \"o0wzxbg0q4k7jp9d\",\n            \"status\": \"fulfilled\"\n          }\n        ]\n      },\n      \"recipients\": {\n        \"data\": [\n          {\n            \"id\": \"r6lbekg8rv5ozyad\"\n          }\n        ]\n      },\n      \"store\": {\n        \"data\": {\n          \"id\": \"r6lbekg8rv5ozyad\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Returning No Content Response\nDESCRIPTION: This shows how to use the `noContent` method to return a response with a 204 status code in Apiato. This is typically used when an action has been performed successfully, but there is no content to return.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$this->noContent()\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Backers using Markdown Image Links\nDESCRIPTION: These Markdown snippets display lists of project backers ('Awesome Backers' and 'Donate' tiers) fetched dynamically from Open Collective. Each line uses standard Markdown image link syntax `[![Alt text](Image URL)](Link URL)`. The image URL points to an SVG generated by Open Collective showing backer avatars, and the link URL points to the Apiato contributors page on Open Collective.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/introduction.mdx#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open Collective backers](https://opencollective.com/apiato/tiers/awesome-backers.svg?width=800&avatarHeight=65&button=false&isActive=false)](https://opencollective.com/apiato#contributors)\n[![Open Collective backers](https://opencollective.com/apiato/tiers/donate.svg?width=800&avatarHeight=65&button=false&isActive=false)](https://opencollective.com/apiato#contributors)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for the 'Hello' Endpoint\nDESCRIPTION: The client receives a JSON array containing the string 'Hello World!', representing the server's greeting message. This output matches the response structure built by the controller's json helper.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/overview.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    \"Hello World!\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Adding Social Auth Fields to User Transformer - PHP\nDESCRIPTION: Optionally adds social authentication fields to the User transformer. This allows the API to return social authentication data in user responses.  It is recommended to do this in a private transformer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/social-authentication.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'social_auth_provider' => $user->social_provider,\n'social_nickname' => $user->social_nickname,\n'social_id' => $user->social_id,\n'social_avatar' => [\n    'avatar' => $user->social_avatar,\n    'original' => $user->social_avatar_original,\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Homestead configuration\nDESCRIPTION: Creates the Homestead configuration file for setting up the virtual machine.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nvendor/bin/homestead make\n```\n\n----------------------------------------\n\nTITLE: Reading Setting via Dedicated Task in Apiato - PHP\nDESCRIPTION: Shows an alternative method to retrieve a setting using a dedicated task class specifically created for that setting (e.g., `findWhateverSettingsTask`). This can be useful for encapsulating logic related to a specific setting. Requires the dedicated task class to exist and be accessible.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/settings.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = $this->findWhateverSettingsTask->run();\n```\n\n----------------------------------------\n\nTITLE: Creating Admonitions\nDESCRIPTION: This demonstrates the syntax for creating admonitions (callouts) within Docusaurus Markdown. Admonitions are used to highlight important information, such as tips, warnings, or dangers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/markdown-features.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n:::tip My tip\n\nUse this awesome feature option\n\n:::\n\n:::danger Take care\n\nThis action is dangerous\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limiting Environment Variables\nDESCRIPTION: This PHP code snippet demonstrates how to set the environment variables for rate limiting in Apiato. These variables control whether rate limiting is enabled (`API_RATE_LIMIT_ENABLED`), the maximum number of requests allowed per minute (`API_RATE_LIMIT_ATTEMPTS`), and the duration of the rate limiting window in minutes (`API_RATE_LIMIT_EXPIRES`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/rate-limiting.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nAPI_RATE_LIMIT_ENABLED=true\nAPI_RATE_LIMIT_ATTEMPTS=30\nAPI_RATE_LIMIT_EXPIRES=1\n```\n\n----------------------------------------\n\nTITLE: Authorization Failed JSON Response\nDESCRIPTION: This JSON snippet represents the expected response when a user attempts to access a resource without the necessary authorization in Apiato. It conveys a clear message indicating that the requested action is not permitted.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authorization.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"This action is unauthorized.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Specific Fields (URL)\nDESCRIPTION: Examples demonstrating two syntaxes for searching multiple specific fields using the `?search=` parameter. The first uses separate field:value pairs in the query string, while the second combines them into a single `search` parameter value, separated by semicolons.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\n?search=name:John&email:john@main.com\n?search=name:John;email:john@main.com\n```\n\n----------------------------------------\n\nTITLE: Web Controller Example\nDESCRIPTION: This code illustrates an example Web controller within the APIATO framework. It extends `WebController` and defines a `show` method that returns a view. The view is located in the specified container and section, and the view's name is passed to the view method.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Controllers\\WebController;\n\nclass Controller extends WebController\n{\n    public function show(): Factory|View|Application\n    {\n        return view('sectionName@containerName::view-name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Container Service Providers in MainServiceProvider (PHP)\nDESCRIPTION: Demonstrates how additional service providers should be added to the $serviceProviders array property within a container's MainServiceProvider class. This allows the automatic registration of these providers managed by the container's scope. Providers listed here can include both built-in and custom ones, facilitating modular and explicit service registration within the container.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic array $serviceProviders = [\n    CustomServiceProvider::class,\n    AnotherCustomServiceProvider::class,\n    EventsServiceProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hashed ID from User Model in PHP\nDESCRIPTION: Shows how to properly retrieve a hashed ID from a user model using the getHashedKey method. This approach works whether Hash ID is enabled or disabled.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/hash-id.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'id' => $user->getHashedKey(),\n```\n\n----------------------------------------\n\nTITLE: Running Apiato Deployment Seeder via Artisan Command in Shell\nDESCRIPTION: This command manually invokes the deployment seeder located at `app/Ship/Seeders/SeedDeploymentData.php`. Like the testing seeder, it is not automatically loaded and must be run explicitly to populate production data. The command depends on Laravel's Artisan and Apiato seeder setup. It uses no inputs and outputs updated database production seed data.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/seeders.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:seed-deployment\n```\n\n----------------------------------------\n\nTITLE: Restarting Vagrant when facing issues\nDESCRIPTION: Restarts the Vagrant virtual machine with provisioning to resolve potential configuration issues.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nhomestead halt && homestead up --provision\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Upgrading Apiato\nDESCRIPTION: Creates a new Git branch specifically for performing the Apiato upgrade process, which helps isolate the upgrade changes from the stable codebase.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b upgrade-apiato\n```\n\n----------------------------------------\n\nTITLE: Defining Language File Structure in Apiato Containers\nDESCRIPTION: Illustrates the standard directory structure for organizing language files within Apiato containers. Translation files (e.g., `messages.php`, `users.php`) are placed under language-specific subdirectories (like `en`, `ar`) within the `Resources/Languages` folder of a container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/languages.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- app\n  - Containers\n    - {section-name}\n      - {container-name}\n        - Resources\n          - Languages\n            - en\n              - messages.php\n              - users.php\n            - ar\n              - messages.php\n              - users.php\n```\n\n----------------------------------------\n\nTITLE: Creating New Apiato Project using Apiato Installer in PHP\nDESCRIPTION: Command to create a new Apiato project using the Apiato Installer. Offers additional installation options not available with direct Composer installation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napiato new my-api\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Filtered Fields in Apiato\nDESCRIPTION: Shows the structure of a JSON response when using the filter parameter, including only the specified fields from the model.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"0one37vjk49rp5ym\",\n      \"status\": \"approved\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Seeders with Artisan\nDESCRIPTION: Shows how to run the database seeders using the `php artisan db:seed` command.  Also includes how to run migrations and seed in the same command.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/seeders.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Registering Ship Service Providers (PHP)\nDESCRIPTION: This PHP snippet shows how to register service providers that belong to the Ship layer and are used application-wide, not specific to a single container. By adding the fully qualified class names of these providers to the public `$serviceProviders` array within the `App\\Ship\\Providers\\ShipProvider` class, they are registered globally for the entire application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/service-providers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic array $serviceProviders = [\n    CustomServiceProvider::class,\n    AnotherCustomServiceProvider::class,\n    EventsServiceProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Notification Class in PHP\nDESCRIPTION: Example of a simple notification class `BirthdayReminderNotification` in PHP. It extends Apiato's base `Notification`, implements `ShouldQueue` for queueing, uses the `Queueable` trait, accepts a message via constructor, and defines `toArray` and `toMail` methods for different delivery channels.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/notifications.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\User\\Notifications;\n\nuse App\\Containers\\User\\Models\\User;\nuse App\\Ship\\Parents\\Notifications\\Notification;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass BirthdayReminderNotification extends Notification implements ShouldQueue\n{\n\n    use Queueable;\n\n    protected $notificationMessage;\n\n    public function __construct($notificationMessage)\n    {\n        $this->notificationMessage = $notificationMessage;\n    }\n    \n    public function toArray($notifiable)\n    {\n        return [\n            'content' => $this->notificationMessage,\n        ];\n    }\n\n    public function toMail($notifiable)\n    {\n        // $notifiable is the object you want to notify \"e.g. user\"\n        return (new MailMessage)\n            ->subject(\"Hello World\")\n            ->line(\"Hi, $notifiable->name\")\n            ->line($this->notificationMessage);\n    }\n\n    public function toSms($notifiable)\n    {\n        // ...\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Settings Container - Shell\nDESCRIPTION: Installs the Apiato settings container package using Composer. This is the first step to integrate the settings management functionality into your project. Requires Composer installed globally.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/settings.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/settings-container\n```\n\n----------------------------------------\n\nTITLE: Configuring domains for monolithic Apiato setup\nDESCRIPTION: Maps all domains to the Apiato public directory when running a monolithic setup.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n    - map: api.apiato.test\n      to: /{full-path-to}/apiato/public\n    - map: apiato.test\n      to: /{full-path-to}/apiato/public\n    - map: admin.apiato.test\n      to: /{full-path-to}/apiato/public\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Upstream Repository for Apiato Official Source - Shell\nDESCRIPTION: Configures a new remote named 'upstream' pointing to the official Apiato GitHub repository. This configuration allows fetching and merging official updates from the Apiato source. Assumes network access to GitHub and proper Git configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/apiato/apiato\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Markdown Links in Docusaurus - md\nDESCRIPTION: This snippet showcases the syntax for creating internal page links using regular Markdown in Docusaurus. The example demonstrates referencing another documentation page with [Create a page], which gets resolved to the appropriate internal route or file. The main input is the link text; output is a clickable link rendered in the generated documentation. Proper page slugs or anchor references within your project are required for link resolution.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/markdown-features.mdx#_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nLet's see how to [Create a page].\n\n```\n\n----------------------------------------\n\nTITLE: Run database migrations\nDESCRIPTION: This command executes the database migrations defined in the Apiato application. It creates the necessary tables in the configured database (MySQL or SQLite) based on the migration files.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Protecting Apiato Web Routes with auth:web Middleware (PHP)\nDESCRIPTION: Shows how to apply the `auth:web` middleware to a Laravel route definition in Apiato for protecting web-based endpoints. This middleware relies on Laravel's default session-based authentication. Unauthenticated users are typically redirected to the login page specified by the `LOGIN` constant in `app/Ship/Providers/RouteServiceProvider.php`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('private/page', Controller::class)\n    ->middleware('auth:web');\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Views in Porto SAP\nDESCRIPTION: The hierarchical folder structure for organizing views within containers in the Porto SAP architecture.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/views.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - UI\n                    - WEB\n                        - Views\n                            - welcome.php\n                            - profile.php\n                            - ...\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Resources via GET - RESTful Relationships - bash\nDESCRIPTION: Demonstrates nested resource retrieval with relationships (e.g., drivers for a car) by specifying hierarchical URI paths. Requires API endpoints that are structured following RESTful relationship conventions. Useful for accessing related entities within a resource hierarchy.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars/123/drivers\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars/123/drivers/123/addresses\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Apiato Upgrade - Shell\nDESCRIPTION: Initializes a new local Git branch named 'upgrade-apiato' from the current stable branch. This branch will be used as the working branch for the upgrade process. Requires that Git is installed and the repository is properly initialized.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b upgrade-apiato\n```\n\n----------------------------------------\n\nTITLE: Setting up Database Notifications via Artisan\nDESCRIPTION: Outlines the necessary Artisan commands for enabling database notifications. While `php artisan notifications:table` generates the migration, Apiato includes this by default, so typically only `php artisan migrate` is needed to create the `notifications` table in the database.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/notifications.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan notifications:table\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to the API with cURL (User Registration)\nDESCRIPTION: This cURL command sends a POST request to the `/v1/register` endpoint of the API. It includes headers to accept JSON and disable caching, and uses form data to submit user registration details (email, password, and name). The expected output is a JSON response containing user information upon successful registration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Accept: application/json\" -H \"Cache-Control: no-cache\" -F \"email=mahmoud@zalt.me\" -F \"password=so-secret\" -F \"name=Mahmoud Zalt\" \"http://api.apiato.test/v1/register\"\n```\n\n----------------------------------------\n\nTITLE: Apiato Mail Folder Structure\nDESCRIPTION: Defines the standard directory layout for Mail classes and Blade templates in Apiato. Container-specific mails reside within `app/Containers/{Section}/{Container}/Mails`, while general mails are placed in `app/Ship/Mails`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/mail.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Mails\n│               ├── ForgetPassword.php\n│               ├── ...\n│               └── Templates\n│                   ├── forgot-password.blade.php\n│                   └── ...\n└── Ship\n    └── Mails\n        └── Newsletter.php\n            ├── ...\n            └── Templates\n                ├── newsletter.blade.php\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Combining Limit and Page URL Parameters (Shell)\nDESCRIPTION: Illustrates how to combine the `limit` and `page` query parameters in an HTTP GET request. This example requests the second page (`page=2`) of results, where each page contains 100 items (`limit=100`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/pagination.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\napi.domain.test/endpoint?limit=100&page=2\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Configuration via Artisan Command\nDESCRIPTION: Demonstrates how to use the interactive `apiato:generate:configuration` Artisan command to create new configuration files within an Apiato application. This command simplifies the process of adhering to Apiato's configuration structure conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/configs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:configuration\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Request Class with Validation - PHP\nDESCRIPTION: This snippet demonstrates how to define a custom Request class in Apiato by extending the ParentRequest base class. It implements the required rules and authorize methods. The rules method returns validation logic (e.g., for 'field'), and the authorize method returns a boolean indicating permission to proceed. Dependencies: App\\Ship\\Parents\\Requests\\Request (aliased as ParentRequest).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Requests\\Request as ParentRequest;\n\nclass DemoRequest extends ParentRequest\n{\n    protected array $access = [];\n    protected array $decode = [];\n    protected array $urlParameters = [];\n\n    public function rules(): array\n    {\n        return [\n            'field' => 'min:3|max:50',\n        ];\n    }\n\n    public function authorize(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Role Access for All Apiato Endpoints in PHP\nDESCRIPTION: Shows how to globally allow one or more roles (e.g., 'admin') to access every endpoint by updating the Apiato configuration file. When these roles are specified, they are dynamically added to all roles access checks across Request objects, easing management of admin-level users. To implement, update the 'app/Ship/Configs/apiato.php' configuration. Inputs: list of privileged roles. Outputs: system-wide access rights for specified roles.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'requests' => [\n    'allow-roles-to-access-all-routes' => ['admin',],\n],\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from User Registration Endpoint\nDESCRIPTION: This JSON represents a sample response that is expected from a successful user registration request. It includes details like the user's object type, ID, name, email, and creation/update timestamps.  Dependencies include a running API endpoint and valid user input.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": 77,\n    \"name\": \"Mahmoud Zalt\",\n    \"email\": \"apiato@mail.com\",\n    \"confirmed\": null,\n    \"nickname\": \"Mega\",\n    \"gender\": \"male\",\n    \"birth\": null,\n    \"social_auth_provider\": null,\n    \"social_id\": null,\n    \"social_avatar\": {\n      \"avatar\": null,\n      \"original\": null\n    },\n    \"created_at\": {\n      \"date\": \"2017-04-05 16:17:26.000000\",\n      \"timezone_type\": 3,\n      \"timezone\": \"UTC\"\n    },\n    \"updated_at\": {\n      \"date\": \"2017-04-05 16:17:26.000000\",\n      \"timezone_type\": 3,\n      \"timezone\": \"UTC\"\n    },\n    \"roles\": {\n      \"data\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Response Definitions for API Endpoints - Apiato (PHP)\nDESCRIPTION: Defines a shared API response using @apiDefine and @apiSuccessExample annotations for reuse across multiple endpoints' documentation blocks. The shared response can be referenced via @apiUse, promoting consistency and reducing duplication. Assumes docblocks are parsed by the documentation generator and that the shared response is placed in a designated responses PHP file such as _user.v1.public.php.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @apiDefine UserSuccessSingleResponse\n * @apiSuccessExample {json} Success-Response:\nHTTP/1.1 200 OK\n{\n   \"data\":{\n      \"object\":\"User\",\n      \"id\":eqwja3vw94kzmxr0,\n   },\n   \"meta\":{\n      \"include\":[],\n      \"custom\":[]\n   }\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Accessing Ship Namespaced Views\nDESCRIPTION: This code snippet demonstrates how to access a view located in the app/Ship directory. These views are namespaced using the word 'ship'.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/views.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nview(ship::welcome-page)\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch to Hold Latest Apiato Changes\nDESCRIPTION: Creates a new branch specifically to hold the latest Apiato changes from the upstream repository before merging them into your upgrade branch.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b apiato-{version}\n// Example:   git checkout -b apiato-8.0\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH with Yarn\nDESCRIPTION: This command deploys the Docusaurus website without using SSH.  It likely relies on a different deployment method, such as pushing to a GitHub Pages branch.  The `GIT_USER` environment variable is used to configure the deployment, likely to specify the GitHub username.  The output is the deployed website on the chosen hosting platform.\nSOURCE: https://github.com/apiato/documentation/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Removing Factory Loader from phpunit.xml (XML)\nDESCRIPTION: Instructs to delete a specific `<file>` tag entry from the `phpunit.xml` configuration file. This entry refers to an obsolete factory loader path and needs removal during the upgrade from Apiato 4.1 to 5.0.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<file>./app/Ship/Engine/Loaders/FactoryMixer/FactoriesLoader.php</file>\n```\n\n----------------------------------------\n\nTITLE: Listing Container Dependencies with Apiato Command\nDESCRIPTION: Command to display dependencies between containers in an Apiato application. This command analyzes the codebase to identify how containers are interlinked with each other by detecting Apiato::call() and $this->call() method usages.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/useful-commands.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:list:dependencies app/Containers/{container-name}\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving UI Context for Actions (PHP)\nDESCRIPTION: These snippets illustrate how to specify and obtain the UI context on actions in Apiato, such as distinguishing between API, Web, or CLI user interfaces. The setUI('Web') method informs the action about the current interface context, while getUI() retrieves it. Requires a properly constructed action class supporting setUI and getUI. No explicit input, returns or sets context internally for conditional logic inside actions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/controllers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\napp(WebLogoutAction::class)->setUI('Web')->run();\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->getUI();\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Route in Laravel (PHP)\nDESCRIPTION: This snippet demonstrates how to register a new POST route in a Laravel-based application using the Route facade. The route responds to requests to the 'hello' URI and dispatches them to the 'sayHello' method of the referenced Controller class. No additional dependencies are needed beyond Laravel's routing system. Input is any HTTP POST request to the specified path, and output is determined by the controller logic. This route does not include authentication or additional middleware.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/routes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::post('hello', [Controller::class, 'sayHello']);\n```\n\n----------------------------------------\n\nTITLE: Documentation Container Configuration in PHP\nDESCRIPTION: Configuration file for the Documentation Container that specifies how to run the documentation tools, defines public and private API types, and sets output locations for generated files.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/api-docs-generator.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Executable\n    |--------------------------------------------------------------------------\n    |\n    | Specify how you run or access the `apidoc` tool on your machine.\n    |\n    */\n\n    'executable' => 'apidoc',\n\n    /*\n    |--------------------------------------------------------------------------\n    | API Types\n    |--------------------------------------------------------------------------\n    |\n    | The `types` helps generating multiple documentations, by grouping them\n    | under types names. You can add or remove any type. By default\n    | `public` and `private` types are set.\n    |\n    | url: The url to access that generated API documentation.\n    |\n    | routes: The route file to read when generating this documentation.\n    |         Every route file will have the following name format:\n    |         `{endpoint-name}.v{version-number}.{documentation-type}.php`.\n    |\n    */\n\n    'types' => [\n\n        'public' => [\n            'url' => 'api/documentation',\n            'routes' => [\n                'public',\n            ],\n        ],\n\n        'private' => [\n            'url' => 'api/private/documentation',\n            'routes' => [\n                'private',\n                'public',\n            ],\n        ],\n    ],\n\n\n    /*\n    |--------------------------------------------------------------------------\n    | HTML files\n    |--------------------------------------------------------------------------\n    |\n    | Specify where to put the generated HTML files.\n    |\n    */\n\n    'html_files' => 'public/'\n\n\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Using Apiato ModelTrait for Factory Discovery (PHP)\nDESCRIPTION: Include the `Apiato\\Core\\Traits\\ModelTrait` in your custom model classes that do not extend Apiato's base model classes. This trait is necessary for Apiato's factory discovery mechanism to correctly locate the associated factory for the model across different containers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/factories.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Apiato\\Core\\Traits\\ModelTrait;\n\nclass Demo\n{\n    use ModelTrait;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Branch to Match Upstream Apiato\nDESCRIPTION: Resets your local branch to be identical to the remote upstream branch, ensuring you have all the latest Apiato code changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit reset --hard upstream/{upstream-branch-name}\n// Example:   git reset --hard upstream/8.0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Environment with Laradock\nDESCRIPTION: Command to start Docker containers for Apiato development using Laradock. Includes containers for Nginx, MySQL, Redis, and Beanstalkd.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d nginx mysql redis beanstalkd\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Transporter with Required Data via Constructor in PHP\nDESCRIPTION: Demonstrates instantiating a Transporter (`ProxyApiLoginTransporter`) that has required fields. Data from the `$request` is merged with necessary configuration values (`clientId`, `clientPassword`) and passed as an array to the constructor to satisfy the schema requirements.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$dataTransporter = new ProxyApiLoginTransporter(\n    array_merge($request->all(), [\n        'clientId'       => Config::get('authentication-container.clients.web.admin.id'),\n        'clientPassword' => Config::get('authentication-container.clients.web.admin.secret')\n    ])\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Standard PHPDoc Blocks in PHP\nDESCRIPTION: This example illustrates the required PHPDoc format for Apiato methods, following PSR-12 with modifications. It includes `@param` tags specifying the type and name of parameters, a `@return` tag for the return type (void in this case), and an `@throws` tag for potential exceptions. Note the specific spacing: one space after `@param`, the type, another space, and then the variable name.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/prologue/contribution-guide.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Register a binding with the container.\n     *\n     * @param string|array $abstract\n     * @param \\Closure|string|null $concrete\n     * @param bool $shared\n     * @return void\n     *\n     * @throws \\Exception\n     */\n    public function bind($abstract, $concrete = null, $shared = false)\n    {\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Generator Commands in Service Provider - PHP\nDESCRIPTION: This snippet demonstrates how to register multiple generator command classes within the GeneratorsServiceProvider by passing their class references to the registerGenerators method. Dependencies are the assumed existence of ActionGenerator, RouteGenerator, and TaskGenerator classes, and the method requires PHP namespaces to be properly resolved. The input is an array of command class names; output is the registration of these commands with the service provider, allowing them to be recognized and executed by the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$this->registerGenerators([\n    ActionGenerator::class,\n    RouteGenerator::class,\n    TaskGenerator::class,\n    // ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting up Cron Job in Server - Shell Script\nDESCRIPTION: This snippet shows how to add a cron job entry to the server's crontab file. This entry is necessary for Laravel's scheduler to function correctly. The cron job executes the `schedule:run` Artisan command every minute.  The `path-to-your-project` needs to be replaced with the actual path. The output of the command is redirected to `/dev/null` to suppress output and standard error is redirected to standard output.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/tasks-scheduling.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n* * * * * php /path-to-your-project/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Viewing Rate Limiting Headers in API Responses\nDESCRIPTION: Shows the HTTP headers that indicate rate limiting status for an API endpoint. The X-RateLimit-Limit header shows the maximum allowed requests, while X-RateLimit-Remaining shows how many requests are left in the current time window.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/framework-features/rate-limiting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nX-RateLimit-Limit → 30\nX-RateLimit-Remaining → 29\n```\n\n----------------------------------------\n\nTITLE: Generating Policies using Apiato Command\nDESCRIPTION: Command to interactively generate a new policy in Apiato using the artisan command-line tool.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/policies.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:policy\n```\n\n----------------------------------------\n\nTITLE: ETag Middleware Implementation in APIato PHP (ProcessETagHeadersMiddleware.php)\nDESCRIPTION: This snippet describes the ETag middleware class located at `app/Ship/Middlewares/Http/ProcessETagHeadersMiddleware.php`. It implements the Shallow technique to generate etags for responses, reducing bandwidth. The middleware inspects incoming requests for the `If-None-Match` header, compares it with the computed etag, and responds with a 304 status if they match. Dependencies include the middleware pipeline and HTTP request/response handling logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/etag.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Ship\\Middlewares\\Http;\n\nuse Closure;\n\nclass ProcessETagHeadersMiddleware\n{\n    public function handle($request, Closure $next)\n    {\n        // Generate etag based on response content\n        // Check for 'If-None-Match' header in request\n        // If etag matches, return 304 response\n        // Else continue processing\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Notification Class (PHP)\nDESCRIPTION: Defines a custom notification class that extends the Apiato base Notification parent and implements `ShouldQueue` for asynchronous dispatching. It includes a constructor to pass data, and methods (`toArray`, `toMail`, `toSms`) to define the notification's representation for different channels. Requires the `Illuminate\\Bus\\Queueable` trait.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/notifications.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass BirthdayReminderNotification extends Notification implements ShouldQueue\n{\n    use Queueable;\n\n    protected $notificationMessage;\n\n    public function __construct($notificationMessage)\n    {\n        $this->notificationMessage = $notificationMessage;\n    }\n    \n    public function toArray($notifiable)\n    {\n        return [\n            'content' => $this->notificationMessage,\n        ];\n    }\n\n    public function toMail($notifiable)\n    {\n        // $notifiable is the object you want to notify \"e.g. user\"\n        return (new MailMessage)\n            ->subject(\"Hello World\")\n            ->line(\"Hi, $notifiable->name\")\n            ->line($this->notificationMessage);\n    }\n\n    public function toSms($notifiable)\n    {\n        // ...\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Gold Sponsors List (Commented Out) using HTML iframe\nDESCRIPTION: This commented-out HTML iframe was intended to embed the Gold Sponsors list dynamically from Open Collective using an SVG representation. It was replaced by individual links to provide SEO benefits (`rel=\"sponsored\"` without `nofollow`), as noted in the surrounding comment. The iframe specifies source URL, dimensions, and basic styling.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/introduction.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://opencollective.com/apiato/tiers/gold-sponsors.svg?avatarHeight=120&width=800&format=svg&button=false&background=#1B1B1D\"\n  width=\"800\"\n  height=\"200\"\n  style={{ border: 'none', backgroundColor: '#1B1B1D' }}>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Payment Gateway Container in Apiato Configuration Using PHP\nDESCRIPTION: Shows how to register a new payment gateway by adding a configuration entry in the payment-container.php file. This example demonstrates registering a fictional 'Foo' payment gateway by specifying its container name and the corresponding ChargeWithFooTask class to handle charging logic. This setup enables the Payment container to recognize and use the custom gateway for processing payments. The snippet should be added inside the 'payment-container.gateways' configuration array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/payments.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n    // ...\n    'foo' => [\n        'container'   => 'Foo',\n        'charge_task' => \\App\\Containers\\Foo\\Tasks\\ChargeWithFooTask::class,\n    ],\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing an Apiato Sub Action in PHP\nDESCRIPTION: Provides a basic PHP code example of a Sub Action class (`DemoSubAction`). It demonstrates extending the required parent class (`App\\Ship\\Parents\\Actions\\SubAction` aliased as `ParentSubAction`), injecting dependencies (like `DemoTask`) through the constructor using PHP 8 constructor property promotion, and implementing the `run` method to execute the injected task logic. This example shows how a Sub Action encapsulates and reuses a sequence of tasks.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/subactions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Actions\\SubAction as ParentSubAction;\n\nclass DemoSubAction extends ParentSubAction\n{\n    public function __construct(\n        private readonly DemoTask $demoTask\n    ) {\n    }\n\n    public function run(array $data)\n    {\n        return $this->demoTask->run($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Folder Structure for Request Classes - Markdown\nDESCRIPTION: This snippet visualizes the recommended directory structure where API and Web Request classes should reside within an Apiato project. It highlights the separation of API and WEB Request folders under each container/section and provides example file names. The structure is depicted as a Markdown code block for illustration only and does not execute.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/requests.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── UI\n                ├── API\n                │   └── Requests\n                │       ├── CreateUserRequest.php\n                │       ├── DeleteUserRequest.php\n                │       └── ...\n                └── WEB\n                    └── Requests\n                        ├── Login.php\n                        ├── Logout.php\n                        └── ...\n```\n\n----------------------------------------\n\nTITLE: Generate Apiato Model and Repository (Artisan)\nDESCRIPTION: Use the `apiato:generate:model` Artisan command to simultaneously create both a model and its corresponding repository, enforcing the Apiato pattern where each model has a repository.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:model\n```\n\n----------------------------------------\n\nTITLE: Adding Apiato's Official Repository as a Remote Upstream\nDESCRIPTION: Configures a new remote called 'upstream' that points to the official Apiato repository, allowing you to fetch the latest changes from the Apiato project.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/apiato/apiato\n```\n\n----------------------------------------\n\nTITLE: Laravel View Access with Namespacing in APIato\nDESCRIPTION: Explains how to access views using namespacing conventions based on the Section and Container names, utilizing camelCase notation, e.g., `view(mySection@myContainer::view-name)`. Describes exceptions for views in specific directories (`app/Ship/Views` and `app/Ship/Mails/Templates`) which use the `ship` namespace.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/views.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nview(mySection@myContainer::welcome-page)\n// Access a container-specific view\n\n// Exception for views in 'app/Ship/Views' and 'app/Ship/Mails/Templates'\nview(ship::welcome-page)\n```\n\n----------------------------------------\n\nTITLE: Using the nullableItem Helper in Apiato Transformer (PHP)\nDESCRIPTION: Demonstrates the `nullableItem` helper method within an `include*` method. It simplifies conditionally including a related item: if `$model->relation` exists, it transforms it using `RelationTransformer`; otherwise, it returns null.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse League\\Fractal\\Resource\\Item;\nuse League\\Fractal\\Resource\\Primitive;\n\npublic function includeRelation(Model $model): Primitive|Item\n{\n    return $this->nullableItem($model->relation, new RelationTransformer();\n}\n```\n\n----------------------------------------\n\nTITLE: Omitting Redundant PHPDoc Tags with Native Types in PHP\nDESCRIPTION: Demonstrates that when using native PHP type hints (like `AudioProcessor` for a parameter and `void` for the return type), redundant `@param` and `@return` PHPDoc tags can be omitted. This practice is encouraged for cleaner documentation when the type information is clearly defined in the method signature itself.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/prologue/contribution-guide.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Execute the job.\n     */\n    public function handle(AudioProcessor $processor): void\n    {\n        //\n    }\n```\n\n----------------------------------------\n\nTITLE: Allowing addRequestCriteria Invocation in Repository Mock - Apiato Core (PHP)\nDESCRIPTION: This snippet demonstrates how to allow invocation of the addRequestCriteria method on a repository mock when testing features that utilize RequestCriteria. The test uses assertCriteriaPushedToRepository to set expectations for repository interactions, and allowAddRequestCriteriaInvocation enables the stub method on the mock object. Dependencies include an instance of UserRepository, UserIsAdminCriteria, and ListUsersTask. The method streamlines repository-testing when criteria are involved, especially for admin-related filtering logic.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function testCanListAdminUsers(): void\n{\n    $repositoryMock = $this->assertCriteriaPushedToRepository(\n        UserRepository::class,\n        UserIsAdminCriteria::class,\n        ['admin' => true],\n    );\n    // highlight-next-line\n    $this->allowAddRequestCriteriaInvocation($repositoryMock);\n    $task = app(ListUsersTask::class);\n\n    $task->admin();\n}\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Grant Shell\nDESCRIPTION: This snippet demonstrates a shell command using curl to request an access token using the Client Credentials Grant. It sends a POST request to the /oauth/token endpoint with client credentials, the grant type, and scope. The output is a JSON response containing the access token, refresh token, and expiration details. Prerequisites include having a client ID and secret, as well as the server configured with the OAuth2 server.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/oauth/token \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'client_id=1&client_secret=y1RbtnOvh9rpA91zPI2tiVKmFlepNy9dhHkzUKle&grant_type=client_credentials&scope='\n\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Seeders Using Artisan CLI in Bash\nDESCRIPTION: Shows the artisan command to generate new seeders within the Apiato framework. This command provides an interactive prompt for seeder creation and requires the Laravel Artisan CLI environment configured with Apiato commands.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/seeders.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:seeder\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache with skipCache Query Parameter in Laravel API Requests\nDESCRIPTION: This example introduces using the ?skipCache=true query parameter to disable eager query caching on specific API endpoints. It requires Eloquent Query Caching to be enabled in the configuration. Using this parameter forces the system to run fresh queries but is discouraged for continuous use due to its negative impact on performance.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n?skipCache=true\n```\n\n----------------------------------------\n\nTITLE: Throwing an Exception and Overriding Default Message (Apiato/Porto) - PHP\nDESCRIPTION: Illustrates how to override the default message defined in the custom exception class constructor by passing a custom message string when creating the exception instance. This provides flexibility to use the same exception class for different scenarios while providing context-specific messages to the user.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/exceptions.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nthrow new AccountFailedException('I am the message to be displayed to the user');\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branches to Remote Git Repository - Bash\nDESCRIPTION: Describes how to push a local feature branch to the remote upstream repository for PR creation. Replace 'feature-awesome' with your specific branch name. Preconditions: remote 'upstream' set, necessary permissions granted. Required before opening a Pull Request on GitHub.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push upstream feature-awesome\n```\n\n----------------------------------------\n\nTITLE: Calling Unprotected Endpoint with Form Data (cURL)\nDESCRIPTION: Demonstrates how to use `curl` to make a POST request to an unprotected Apiato endpoint. It sets the `Accept` header to `application/json` and the `Content-Type` header to `application/x-www-form-urlencoded`, passing form data fields (`email`, `password`) using the `-F` flag.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/requests.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Accept: application/json\" -H \"Content-Type: application/x-www-form-urlencoded;\" -F \"email=admin@admin.com\" -F \"password=admin\" \"http://api.domain.test/v2/register\"\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Service Provider (Artisan Command)\nDESCRIPTION: This command-line instruction uses the Laravel Artisan tool (`php artisan`) to execute the custom `apiato:generate:provider` command. It's an interactive command designed to guide the user through the process of creating a new service provider within the Apiato structure, ensuring correct placement and adherence to conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/service-providers.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:provider\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Traits from TestCase in Apiato PHP\nDESCRIPTION: Shows the removal of two redundant traits, TestsMockHelperTrait and TestsResponseHelperTrait, from the base TestCase in Apiato version 12. This change aims to simplify the test infrastructure and reduce unnecessary code dependencies in the testing suite. Implementers should ensure any custom testing utilities formerly provided by these traits are refactored accordingly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/prologue/release-notes.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nTestsMockHelperTrait\nTestsResponseHelperTrait\n```\n\n----------------------------------------\n\nTITLE: Generating Value Objects via Apiato Artisan Command in Shell\nDESCRIPTION: This snippet demonstrates the command-line instruction to generate a new Value Object using Apiato's artisan tooling. Requires a Laravel environment with Apiato installed. The command launches an interactive prompt, taking inputs to scaffold a Value Object class and place it within the project's designated directory structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/values.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:value\n```\n\n----------------------------------------\n\nTITLE: Logout Response JSON\nDESCRIPTION: This snippet is a JSON response indicating successful logout. The response includes a message confirming that the token was revoked successfully. It's the typical output of the logout endpoint, which is triggered by sending a DELETE request with the token in the header.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Token revoked successfully.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit tests in Apiato\nDESCRIPTION: Executes the PHPUnit tests to ensure the application is functioning correctly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Apiato Task Folder Structure (Markdown)\nDESCRIPTION: Illustrates the standard directory structure for placing Task classes within an Apiato application. Tasks must reside in the `Tasks` subdirectory of a specific Container, following the path `app/Containers/{Section}/{Container}/Tasks`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/tasks.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Tasks\n                ├── CreateResourceTask.php\n                ├── DeleteResourceTask.php\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer.json for Container Installation in Apiato\nDESCRIPTION: This code snippet demonstrates how to specify a container dependency in a project's composer.json file to enable installation via Composer. The requirement ensures that the specified container (e.g., apiato/some-container) is fetched and installed correctly in the application.\n\nDependencies like containers are managed through Composer, allowing straightforward inclusion and updates. The example shows how to require version ^2.0.1 of a container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"apiato/some-container\": \"^2.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Apiato Request PHP Class\nDESCRIPTION: This snippet shows a basic Apiato Request class (`UpdateUserRequest`) extending the parent `Request` class. It demonstrates the use of protected properties `$access`, `$decode`, and `$urlParameters` (though empty in this example) and defines the mandatory `rules()` method for validation and `authorize()` method for access control.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UpdateUserRequest extends Request\n{\n    protected array $access = [\n        'permission' => '',\n        'roles'      => 'admin',\n    ];\n\n    protected array $decode = [\n\n    ];\n\n    protected array $urlParameters = [\n\n    ];\n\n    public function rules(): array\n    {\n        return [\n            'email'    => 'email|unique:users,email',\n            'password' => 'min:100|max:200',\n            'name'     => 'min:300|max:400',\n        ];\n    }\n\n    public function authorize(): bool\n    {\n        return $this->check([\n            'hasAccess',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Controller using Artisan Command\nDESCRIPTION: This snippet demonstrates the command to generate a new controller within the APIATO framework using the Artisan CLI. It generates the necessary controller files and sets up the basic structure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:controller\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving a Testing User with getTestingUser() in PHP\nDESCRIPTION: Explains how to use the getTestingUser() helper method to obtain a user model suitable for testing purposes, optionally providing specific user details and access control data such as roles and permissions. This method integrates with the $access property to automatically assign the necessary access scopes, facilitating authentication and authorization in API tests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/miscellaneous/tests-helpers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $this->getTestingUser();\n\n$user = $this->getTestingUser([\n    'email'    => 'hello@mail.test',\n    'name'     => 'Hello',\n    'password' => 'secret',\n]);\n```\n\n----------------------------------------\n\nTITLE: Documenting Generic Native Types using PHPDoc in PHP\nDESCRIPTION: Illustrates the requirement to use PHPDoc tags like `@return` or `@param` when a native type hint is generic, such as `array`. Although the method signature specifies `array` as the return type, the `@return` tag clarifies the specific structure of the array (e.g., `array<int, \\Illuminate\\Mail\\Mailables\\Attachment>`), providing essential detail about the expected elements.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/prologue/contribution-guide.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Get the attachments for the message.\n     *\n     * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n     */\n    public function attachments(): array\n    {\n        return [\n            Attachment::fromStorage('/path/to/file'),\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File for Vagrant/Homestead\nDESCRIPTION: Example host file configuration to map domains to the Vagrant IP address (192.168.10.10) for Homestead development environment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n192.168.10.10   apiato.test\n192.168.10.10   api.apiato.test\n192.168.10.10   admin.apiato.test\n```\n\n----------------------------------------\n\nTITLE: Example Apiato Profiler JSON Response\nDESCRIPTION: Illustrates the structure of the profiling data added to the API response by the `ProfilerMiddleware` when `DEBUGBAR_ENABLED` is true. This data, generated by Laravel Debugbar, includes request metadata, timing, memory usage, route details, database queries, logs, and authentication information.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/framework-features/profiler.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_profiler\": {\n        \"__meta\": {\n            \"id\": \"X167f293230e3457f1bbd95d9c82aba4a\",\n            \"datetime\": \"2017-09-22 18:45:27\",\n            \"utime\": 1506105927.799299,\n            \"method\": \"GET\",\n            \"uri\": \"/\",\n            \"ip\": \"172.20.0.1\"\n        },\n        \"messages\": {\n            \"count\": 0,\n            \"messages\": []\n        },\n        \"time\": {\n            \"start\": 1506105922.742068,\n            \"end\": 1506105927.799333,\n            \"duration\": 5.057265043258667,\n            \"duration_str\": \"5.06s\",\n            \"measures\": [\n                {\n                    \"label\": \"Booting\",\n                    \"start\": 1506105922.742068,\n                    \"relative_start\": 0,\n                    \"end\": 1506105923.524004,\n                    \"relative_end\": 1506105923.524004,\n                    \"duration\": 0.7819359302520752,\n                    \"duration_str\": \"781.94ms\",\n                    \"params\": [],\n                    \"collector\": null\n                },\n                {\n                    \"label\": \"Application\",\n                    \"start\": 1506105923.535343,\n                    \"relative_start\": 0.7932748794555664,\n                    \"end\": 1506105927.799336,\n                    \"relative_end\": 0.00000286102294921875,\n                    \"duration\": 4.26399302482605,\n                    \"duration_str\": \"4.26s\",\n                    \"params\": [],\n                    \"collector\": null\n                }\n            ]\n        },\n        \"memory\": {\n            \"peak_usage\": 13234248,\n            \"peak_usage_str\": \"12.62MB\"\n        },\n        \"exceptions\": {\n            \"count\": 0,\n            \"exceptions\": []\n        },\n        \"route\": {\n            \"uri\": \"GET /\",\n            \"middleware\": \"api, throttle:30,1\",\n            \"domain\": \"http://api.apiato.test\",\n            \"as\": \"apis_root_page\",\n            \"controller\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\\\\Controller@apiRoot\",\n            \"namespace\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\",\n            \"prefix\": \"/\",\n            \"where\": [],\n            \"file\": \"app/Containers/Welcome/UI/API/Controllers/Controller.php:20-25\"\n        },\n        \"queries\": {\n            \"nb_statements\": 0,\n            \"nb_failed_statements\": 0,\n            \"accumulated_duration\": 0,\n            \"accumulated_duration_str\": \"0μs\",\n            \"statements\": []\n        },\n        \"logs\": {\n            \"count\": 3,\n            \"messages\": [\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694807\n                },\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694811\n                },\n                {\n                    \"message\": \"[2017-09-18 17:38:15] testing.INFO: New User registration. ID = 970ylqvaogmxnbdr | Email = apiato@mail.test.      Thank you for signing up.\\n</div>\\n</body>\\n</html>\\n  \\n\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"info\",\n                    \"time\": 1506105927.694812\n                }\n            ]\n        },\n        \"auth\": {\n            \"guards\": {\n                \"web\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\",\n                \"api\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\"\n            },\n            \"names\": \"\"\n        },\n        \"gate\": {\n            \"count\": 0,\n            \"messages\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation Command\nDESCRIPTION: Command to generate the API documentation based on the DocBlocks in route files.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/documentation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Writing API Endpoint DocBlocks in PHP\nDESCRIPTION: Example of how to write comprehensive DocBlocks for API endpoints in route files, including parameters, responses, and error examples.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/documentation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @apiGroup           Authentication\n * @apiName            UserLogin\n * @api                {post} /clients/web/login User Login\n * @apiDescription     Description Here....\n * @apiVersion         1.0.0\n * @apiPermission      none\n *\n * @apiHeader          Accept application/json\n *\n * @apiParam           {String}     email\n * @apiParam           {String}     password\n *\n * @apiSuccessExample  {json}       Success-Response:\n *   HTTP/1.1 200 OK\n *   {\n *     \"data\": {\n *       \"id\": \"XbPW7awNkzl83LD6\",\n *       \"name\": \"Super Admin\",\n *       \"email\": \"admin@admin.com\"\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"401 Credentials Incorrect.\",\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"Invalid Input.\",\n *      \"errors\":{\n *         \"email\":[\n *            \"The email field is required.\"\n *         ]\n *      },\n *   }\n */\n\nuse App\\Containers\\AppSection\\Authentication\\UI\\API\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::post('clients/web/login', Controller::class);\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Discovery\nDESCRIPTION: This method allows disabling Laravel's automatic event discovery by overriding the `shouldDiscoverEvents` method in a Container's `EventServiceProvider`. By returning `false`, automatic event registration is prevented.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/events.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Determine if events and listeners should be automatically discovered.\n */\npublic function shouldDiscoverEvents(): bool\n{\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a New User via Apiato API - Shell\nDESCRIPTION: This cURL command demonstrates how to register a new user by sending a POST request to the Apiato API. It specifies headers to accept JSON responses and disables cache, while sending required user credentials (email, password, name) as form data. cURL is the only external requirement; upon success, the API responds with user details in JSON format.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Accept: application/json\" -H \"Cache-Control: no-cache\" -F \"email=John@Doe.me\" -F \"password=so-secret\" -F \"name=John Doe\" \"http://api.apiato.test/v1/register\"\n```\n\n----------------------------------------\n\nTITLE: User Registration Success Response JSON\nDESCRIPTION: This snippet provides the expected JSON response structure upon successful registration of a new user via the `/v1/register` endpoint. It contains the registered user object with details like id, name, email, creation timestamps, and roles.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/user-registration.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": XbPW7awNkzl83LD6,\n    \"name\": \"Mahmoud Zalt\",\n    \"email\": \"apiato@mail.com\",\n    \"confirmed\": null,\n    \"nickname\": \"Mega\",\n    \"gender\": \"male\",\n    \"birth\": null,\n    \"social_auth_provider\": null,\n    \"social_id\": null,\n    \"social_avatar\": {\n      \"avatar\": null,\n      \"original\": null\n    },\n    \"created_at\": \"2021-03-24T15:02:56.000000Z\",\n    \"updated_at\": \"2021-03-24T15:02:56.000000Z\",\n    \"readable_created_at\": \"19 seconds ago\",\n    \"readable_updated_at\": \"19 seconds ago\"\n    \"roles\": {\n      \"data\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Apiato Testing Seeder via Artisan Command in Shell\nDESCRIPTION: This command manually triggers the special testing data seeder located at `app/Ship/Seeders/SeedTestingData.php`. It is not loaded automatically by Apiato, so this command allows developers to seed testing datasets into the database via Laravel's Artisan. Prerequisites include an Apiato project with the testing seeder implemented as per Apiato standards. No additional inputs are required, and the outcome is populating the database with test data.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/seeders.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:seed-test\n```\n\n----------------------------------------\n\nTITLE: Checking Git Log for Verification\nDESCRIPTION: Shows commit history to verify that your branch now contains the latest changes from the Apiato upstream branch.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Docusaurus project using Yarn. It fetches and installs packages listed in the `package.json` file. It's a prerequisite for running other commands like `yarn start` and `yarn build`.  The output is a list of packages installed, and the project's node_modules directory is populated.\nSOURCE: https://github.com/apiato/documentation/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Sample Profiler Response in JSON Format\nDESCRIPTION: This code snippet presents a sample JSON response structure for the profiler data collected during a request. It includes metadata, timing measures, memory usage, logged messages, route details, database queries, email activity, and logs. The response helps developers analyze performance and troubleshoot issues effectively.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/profiler.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Actual Response Here...\n    \"_profiler\": {\n        \"__meta\": {\n            \"id\": \"X167f293230e3457f1bbd95d9c82aba4a\",\n            \"datetime\": \"2017-09-22 18:45:27\",\n            \"utime\": 1506105927.799299,\n            \"method\": \"GET\",\n            \"uri\": \"/\",\n            \"ip\": \"172.20.0.1\"\n        },\n        \"messages\": {\n            \"count\": 0,\n            \"messages\": []\n        },\n        \"time\": {\n            \"start\": 1506105922.742068,\n            \"end\": 1506105927.799333,\n            \"duration\": 5.057265043258667,\n            \"duration_str\": \"5.06s\",\n            \"measures\": [\n                {\n                    \"label\": \"Booting\",\n                    \"start\": 1506105922.742068,\n                    \"relative_start\": 0,\n                    \"end\": 1506105923.524004,\n                    \"relative_end\": 1506105923.524004,\n                    \"duration\": 0.7819359302520752,\n                    \"duration_str\": \"781.94ms\",\n                    \"params\": [],\n                    \"collector\": null\n                },\n                {\n                    \"label\": \"Application\",\n                    \"start\": 1506105923.535343,\n                    \"relative_start\": 0.7932748794555664,\n                    \"end\": 1506105927.799336,\n                    \"relative_end\": 0.00000286102294921875,\n                    \"duration\": 4.26399302482605,\n                    \"duration_str\": \"4.26s\",\n                    \"params\": [],\n                    \"collector\": null\n                }\n            ]\n        },\n        \"memory\": {\n            \"peak_usage\": 13234248,\n            \"peak_usage_str\": \"12.62MB\"\n        },\n        \"exceptions\": {\n            \"count\": 0,\n            \"exceptions\": []\n        },\n        \"route\": {\n            \"uri\": \"GET /\",\n            \"middleware\": \"api, throttle:30,1\",\n            \"domain\": \"http://api.apiato.test\",\n            \"as\": \"apis_root_page\",\n            \"controller\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\\\\Controller@apiRoot\",\n            \"namespace\": \"App\\\\Containers\\\\Welcome\\\\UI\\\\API\\\\Controllers\",\n            \"prefix\": \"/\",\n            \"where\": [],\n            \"file\": \"app/Containers/Welcome/UI/API/Controllers/Controller.php:20-25\"\n        },\n        \"queries\": {\n            \"nb_statements\": 0,\n            \"nb_failed_statements\": 0,\n            \"accumulated_duration\": 0,\n            \"accumulated_duration_str\": \"0μs\",\n            \"statements\": []\n        },\n        \"swiftmailer_mails\": {\n            \"count\": 0,\n            \"mails\": []\n        },\n        \"logs\": {\n            \"count\": 3,\n            \"messages\": [\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694807\n                },\n                {\n                    \"message\": \"...\",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"error\",\n                    \"time\": 1506105927.694811\n                },\n                {\n                    \"message\": \"[2017-09-18 17:38:15] testing.INFO: New User registration. ID = 970ylqvaogmxnbdr | Email = apiato@mail.test.      Thank you for signing up.\\n</div>\\n</body>\\n</html>\\n  \",\n                    \"message_html\": null,\n                    \"is_string\": false,\n                    \"label\": \"info\",\n                    \"time\": 1506105927.694812\n                }\n            ]\n        },\n        \"auth\": {\n            \"guards\": {\n                \"web\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\",\n                \"api\": \"array:2 [\\n  \\\"name\\\" => \\\"Guest\\\"\\n  \\\"user\\\" => array:1 [\\n    \\\"guest\\\" => true\\n  ]\\n]\"\n            },\n            \"names\": \"\"\n        },\n        \"gate\": {\n            \"count\": 0,\n            \"messages\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Service Provider Registration Flow with Mermaid\nDESCRIPTION: This Mermaid diagram visualizes the hierarchical registration flow of service providers in Apiato. It shows how the Service Provider Loader loads the MainServiceProviders from each container, which in turn load their respective service providers.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n  subgraph ContainerB[Container B]\n    BMP[MainServiceProvider]\n    BEP[EventServiceProvider]\n    subgraph BServiceProviders[Service Providers]\n      AnotherCustomServiceProvider\n      BEP\n      MiddlewareServiceProvider\n    end\n    BMP\n  end\n    \n  subgraph ContainerA[Container A]\n    AMP[MainServiceProvider]\n    subgraph AServiceProviders[Service Providers]\n      CustomServiceProvider\n      EventServiceProvider\n    end\n    AMP\n  end\n  \n  subgraph Application\n    SPLoader[[Service Provider Loader]]-- loads-->AMP\n    SPLoader-- loads-->BMP\n  end\n  \n  AMP -->|loads| AServiceProviders\n  AServiceProviders -->|registered in| AMP\n  BMP -->|loads| BServiceProviders\n  BServiceProviders -->|registered in| BMP\n```\n\n----------------------------------------\n\nTITLE: Generating a Configuration File Using Custom Stubs in Apiato - Bash\nDESCRIPTION: This command generates a configuration file for a container in Apiato using a custom stub template if placed in the specified CustomStubs folder. Prerequisites include creating a config.stub file in app/Ship/Generators/CustomStubs. Executes the code generator to produce the resulting config file using the user's customized boilerplate.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/code-generator.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:configuration\n```\n\n----------------------------------------\n\nTITLE: Example Google User Response After Social Authentication - JSON\nDESCRIPTION: Represents a typical success response after Google-based social authentication, including user data, their social authentication details, and a personal access token. Sensitive user details are present if the transformer is customized as suggested. Actual key structure depends on transformer implementation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/social-authentication.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        // user data + additional social data if you have updated your transformer as mentioned above\n        .\n        .\n        .\n        \"social_auth_provider\": \"google\",\n        \"social_id\": \"113834952367767922133\",\n        \"social_avatar\": {\n            \"avatar\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\",\n            \"original\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\"\n        }\n    },\n    \"meta\": {\n        \"include\": [\n            \"roles\"\n        ],\n        \"custom\": {\n            \"token_type\": \"personal\",\n            \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9....\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Admin User in Apiato (Bash)\nDESCRIPTION: This artisan command facilitates the creation of a new admin user within the Apiato application, allowing further administrative access beyond the default seeded user. It is typically executed after the database has been migrated and seeded.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:create:admin\n```\n\n----------------------------------------\n\nTITLE: Seeding Testing Data with Apiato Custom Artisan Command (Shell)\nDESCRIPTION: This shell snippet exemplifies the use of a custom Apiato Artisan command, `php artisan apiato:seed-test`, intended for loading large datasets of test data for staging or testing environments. It depends on a properly defined seeder at `app/Ship/Seeders/SeedTestingData.php`. When this command is run, custom testing seeders execute to populate the database with data useful for QA or development validation scenarios.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/seeders.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:seed-test\n```\n\n----------------------------------------\n\nTITLE: Filtering API Response Fields using the Filter Query Parameter\nDESCRIPTION: This example shows how to limit the fields returned in API responses using the ?filter= query parameter, which restricts the output to specified fields (e.g., id and status). The filtering applies not only to the main data but recursively to relationships included in the response. This uses the L5 Repository package and is typically used to minimize payload size.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/query-parameters.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\napi.domain.test/endpoint?filter=id;status\n```\n\n----------------------------------------\n\nTITLE: Example Default DataArraySerializer Response JSON\nDESCRIPTION: Illustrates the default JSON structure for API responses in Apiato when using the `DataArraySerializer`. Shows how both single and multiple related resources are nested under a `data` key.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/responses.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 100,\n      ...\n      \"relation 1\": {\n        \"data\": [ // multiple data\n          {\n            \"id\": 11,\n\t\t\t  ...\n          }\n        ]\n      },\n      \"relation 2\": {\n        \"data\": { // single data\n          \"id\": 22,\n          ...\n          }\n        }\n      }\n    },\n    ...\n  ],\n  \"meta\": {\n    \"include\": [ // what can be included\n      \"xxx\",\n      \"yyy\"\n    ],\n    \"custom\": [],\n    \"pagination\": {\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the '$decode' Property in Apiato Requests (PHP)\nDESCRIPTION: Example showing the usage of the `$decode` property within an Apiato Request class (`AssignUserToRoleRequest`). This property lists request parameters (e.g., `user_id`, `item_id`) whose values are Hashed IDs that need to be automatically decoded before validation rules are applied. This is essential when Apiato's HashID feature is enabled.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Authorization\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass AssignUserToRoleRequest extends Request\n{\n\n    protected $decode = [\n        'user_id',\n        'item_id',\n    ];\n\n    public function rules()\n    {\n        return [\n\n        ];\n    }\n\n    public function authorize()\n    {\n        return $this->check([\n            // ..\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit History for Cherry-Picking (Option B)\nDESCRIPTION: Shows the commit history of the upstream branch to identify specific commits that you might want to selectively apply to your project.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit log {upstream-branch-name}\n```\n\n----------------------------------------\n\nTITLE: Authentication Failure JSON\nDESCRIPTION: This JSON snippet displays a common authentication failure response. It indicates that the access token is either missing or invalid. It provides an error message and a status code (403), signaling that the user is unauthenticated. This response helps the client understand the reason for the failed authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": \"Missing or invalid Access Token!\",\n  \"status_code\": 403,\n  \"message\": \"Unauthenticated.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Localizations Response Example\nDESCRIPTION: This is an example JSON response from the `GET /localizations` endpoint.  It demonstrates the structure and data returned. This endpoint provides information about the languages and regions supported by the application, used to allow users to select their preferred language.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/localization.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"object\": \"Localization\",\n      \"id\": \"de\", // The language code (same as 'language.code')\n      \"language\": {\n        \"code\": \"de\", // The language code\n        \"default_name\": \"German\", // The language name in the application's default language\n        \"locale_name\": \"Deutsch\" // The language name in its native form\n        \"regions\": [\n          {\n            \"code\": \"de-DE\", // The region code\n            \"default_name\": \"Germany\", // The region name in the application's default language\n            \"locale_name\": \"Deutschland\" // The region name in its native form\n          },\n          {\n            \"code\": \"de-AT\", // The region code\n            \"default_name\": \"Austria\", // The region name in the application's default language\n            \"locale_name\": \"Österreich\" // The region name in its native form\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Remote Repositories Configuration\nDESCRIPTION: Lists all configured remote repositories to verify that both the origin (your project) and upstream (official Apiato) remotes are properly set up.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/upgrade-guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -vv\n```\n\n----------------------------------------\n\nTITLE: Register User Response (JSON)\nDESCRIPTION: Represents the JSON response returned after a successful user registration. Contains user details such as ID, name, email, timestamps, and meta information. The `data` field holds the user object, and `meta` contains information about included relations like `roles`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/user-registration.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"XbPW7awNkzl83LD6\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@doe.com\",\n    \"email_verified_at\": null,\n    \"gender\": null,\n    \"birth\": null,\n    \"created_at\": \"2021-04-15T14:17:24.000000Z\",\n    \"updated_at\": \"2021-04-15T14:17:24.000000Z\",\n    \"readable_created_at\": \"1 second ago\",\n    \"readable_updated_at\": \"1 second ago\"\n  },\n  \"meta\": {\n    \"include\": [\n      \"roles\"\n    ],\n    \"custom\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Folder Structure (Markdown)\nDESCRIPTION: Illustrates the standard directory structure for placing repository classes within an Apiato containerized application. Repositories must reside in the `app/Containers/{section}/{container}/Data/Repositories` directory for features like auto-linking to work correctly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Data\n                └── Repositories\n                    ├── UserRepository.php\n                    └── ...\n```\n\n----------------------------------------\n\nTITLE: Action Orchestrating Multiple Tasks (PHP)\nDESCRIPTION: Shows an example of an Apiato Action (`DemoAction`) coordinating multiple Tasks (`DemoATask`, `DemoBTask`). Both Tasks are injected via the constructor using property promotion. The Action's `run` method then calls the `run` method of each injected Task, passing the necessary parameters.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/actions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Actions\\Action as ParentAction;\n\nclass DemoAction extends ParentAction\n{\n    public function __construct(\n        private readonly DemoATask $demoATask,\n        private readonly DemoBTask $demoBTask\n    ) {\n    }\n    \n    public function run($xxx, $yyy, $zzz): void\n    {\n        $foo = $this->demoATask->run($xxx, $yyy);\n        $bar = $this->demoBTask->run($zzz);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Mails (Markdown)\nDESCRIPTION: This Markdown code provides a clear representation of the expected directory structure for mail components within an Apiato project. It illustrates the hierarchical organization for both container-specific and general (ship) mail components, including their template locations. This structure is crucial for adhering to Apiato conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/mail.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Mails\n│               ├── ForgetPassword.php\n│               ├── ...\n│               └── Templates\n│                   ├── forgot-password.blade.php\n│                   └── ...\n└── Ship\n    └── Mails\n        └── Newsletter.php\n            ├── ...\n            └── Templates\n                ├── newsletter.blade.php\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Transforming Resources with Meta\nDESCRIPTION: This example shows how to use the `transform` method to transform a resource with specified meta data in Apiato. The `meta` parameter of the `transform` method is an array of key-value pairs that will be included in the response's meta section.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// With Meta\n$this->transform($resource, ResourceTransformer::class, meta: ['foo' => 'bar', 'baz' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Container Folder Structure for Service Providers in Apiato\nDESCRIPTION: Example directory structure showing how Service Providers are organized within a User Container in Apiato. Shows the typical folder hierarchy with MainServiceProvider and additional specialized providers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/providers.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n - app\n     - Containers\n        - {section-name}\n            - User\n                - Providers\n                    - MainServiceProvider.php\n                    - AuthServiceProvider.php\n                    - EventsServiceProvider.php\n                    - ...\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter in Markdown\nDESCRIPTION: This snippet demonstrates the use of front matter at the beginning of a Markdown document in Docusaurus. Front matter allows you to define metadata for the document. The example uses `id`, `title`, `description`, and `sidebar_label` properties to set document attributes. The output is the metadata defined at the top of the file.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```md\n---\nid: my-doc\ntitle: My document title\ndescription: My document description\nsidebar_label: My doc\n---\n\nMarkdown content\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting method parameters and return types with PHPDoc (Apiato) - PHP\nDESCRIPTION: This snippet demonstrates the standard Apiato PHPDoc style for documenting a method, adhering to PSR-12 modifications. It shows how to use the `@param` tag with type, variable name, and description (not shown in this minimal example), the `@return` tag for the return type, and the `@throws` tag for potential exceptions. This detailed documentation helps with code understanding and static analysis.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/prologue/contribution-guide.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Register a binding with the container.\n     *\n     * @param string|array $abstract\n     * @param \\Closure|string|null $concrete\n     * @param bool $shared\n     * @return void\n     *\n     * @throws \\Exception\n     */\n    public function bind($abstract, $concrete = null, $shared = false)\n    {\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Request - Apiato - Bash\nDESCRIPTION: Provides the command-line instruction to generate a new Request class file within the Apiato framework using the built-in artisan command. This interactive command helps scaffold the necessary file structure and basic class definition.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:request\n```\n\n----------------------------------------\n\nTITLE: Running the API Documentation Generator Command in Shell\nDESCRIPTION: Command to generate API documentation from the PHP docblocks in your route files. This needs to be run from the project root directory whenever documentation is updated.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/api-docs-generator.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Generating Laravel Service Providers via Apiato Artisan Command (PHP)\nDESCRIPTION: Demonstrates the usage of the Apiato artisan command to generate new service providers interactively. This requires the Apiato framework and Laravel's artisan CLI tooling. The command scaffolds boilerplate code necessary to create compliant service providers according to Apiato's conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/service-providers.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:provider\n```\n\n----------------------------------------\n\nTITLE: Passing Hashed ID in URL Path\nDESCRIPTION: Demonstrates how to pass a hashed ID to the API as part of the URL path. The ID is encoded as a string.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/hash-id.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/items/XbPW7awNkzl83LD6\n```\n\n----------------------------------------\n\nTITLE: Using mapInput to Remap Request Fields\nDESCRIPTION: Demonstrates how to use the mapInput method to remap input fields from a structured request to different keys for easier processing.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"John Doe\"\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$request->mapInput([\n    'data.name' => 'username',\n]);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"John Doe\"\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$request->input('username');\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespaced Views\nDESCRIPTION: This code snippet demonstrates how to access a namespaced view in Apiato. The view is located in a specific container and is accessed using the Section and Container names in camelCase, separated by '@'. The view name follows after '::'.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/views.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nview(mySection@myContainer::welcome-page)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Fractal Serializer in Apiato (PHP)\nDESCRIPTION: Provides the configuration line used to set the default Fractal serializer in Apiato. This line, found in the `app/Ship/Configs/fractal.php` file, allows developers to switch between supported serializers like DataArraySerializer, ArraySerializer, or JsonApiSerializer.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/responses.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'default_serializer' => League\\Fractal\\Serializer\\DataArraySerializer::class,\n```\n\n----------------------------------------\n\nTITLE: Creating Apiato Project with Git Repository Initialization in PHP\nDESCRIPTION: Command to create a new Apiato project and initialize a Git repository simultaneously using the Apiato Installer. Requires Git to be installed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\napiato new my-api --git\n```\n\n----------------------------------------\n\nTITLE: Install Passport for authentication\nDESCRIPTION: This command installs Laravel Passport, which provides OAuth2 server implementation for API authentication. It generates the necessary encryption keys and sets up the required database tables and client configurations for issuing access tokens.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan passport:install\n```\n\n----------------------------------------\n\nTITLE: Configuring API Versioning to Use Headers Instead of URL Prefix in Apiato (PHP)\nDESCRIPTION: This snippet outlines the steps to switch API versioning from URL-based to header-based in Apiato. The main requirement is to modify the `apiato.php` config file to disable URL prefix versioning and implement custom header versioning, which is noted as not yet supported natively.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/api-versioning.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nFirst remove the URL version prefix:\n\n1. Edit `app/Ship/Configs/apiato.php`, set prefix to `'enable_version_prefix' => 'false',`.\n2. Implement the Header versioning anyway you prefer. (this is not implemented in Apiato yet. _Consider a contribution_).\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Apiato Repository (PHP)\nDESCRIPTION: Example of a standard `UserRepository` extending the base Apiato Repository (aliased as `ParentRepository`). It defines the `$fieldSearchable` property, which maps model attributes to the type of search condition (e.g., '=' for exact match, 'like' for partial match) to be used when `RequestCriteria` is applied.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Repositories\\Repository as ParentRepository;\n\nclass UserRepository extends ParentRepository\n{\n    protected $fieldSearchable = [\n        'id' => '=',\n        'name' => 'like',\n        'email' => '=',\n        'email_verified_at' => '=',\n        'created_at' => '=',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Default Apiato Response Payload Example\nDESCRIPTION: This JSON snippet demonstrates the default payload structure used by Apiato's `DataArraySerializer`. It includes `data`, `meta` (pagination), `include` (available relationships), and `custom` keys.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/responses.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 100,\n      ...\n      \"relation 1\": {\n        \"data\": [ // multiple data\n          {\n            \"id\": 11,\n\t\t\t  ...\n          }\n        ]\n      },\n      \"relation 2\": {\n        \"data\": { // single data\n          \"id\": 22,\n          ...\n          }\n        }\n      }\n    },\n    ...\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  },\n  \"include\": [ // what can be included\n    \"xxx\",\n    \"yyy\"\n  ],\n  \"custom\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Location Value Object in PHP\nDESCRIPTION: This PHP code snippet demonstrates the creation of a 'Location' Value Object class within the Apiato framework. The class extends 'App\\Ship\\Parents\\Values\\Value', has private properties for x and y coordinates, a protected 'resourceKey', a constructor to initialize the coordinates, and a method to return coordinates as a string. Value Objects like this are used to represent simple, immutable data structures.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/values.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Location extends Value\n{\n    private $x = null;\n    private $y = null;\n    protected $resourceKey = 'locales';\n    \n    public function __construct($x, $y)\n    {\n        $this->x = $x;\n        $this->y = $y;\n    }\n\n    public function getCoordinatesAsString()\n    {\n        return $this->x . ' - ' . $this->y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Authentication Failure - JSON\nDESCRIPTION: Illustrates a JSON response returned when user authentication fails due to an exception. Contains an error message and an empty errors array for potential future error details.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authentication.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"An Exception occurred when trying to authenticate the User.\",\n  \"errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React Components in Markdown\nDESCRIPTION: This snippet demonstrates the use of React components inside Markdown, enabled by MDX. The code defines a functional component `Highlight` which is then used within the Markdown content.  The output renders the highlighted text with a background color.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: 'red',\n      padding: '0.2rem',\n    }}>\n    {children}\n  </span>\n);\n\n<Highlight color=\"#25c2a0\">Docusaurus green</Highlight> and <Highlight color=\"#1877F2\">Facebook blue</Highlight> are my favorite colors.\n```\n```\n\n----------------------------------------\n\nTITLE: Example Apiato Paginated Response Meta Payload (JSON)\nDESCRIPTION: Shows the specific 'meta' object structure included in the response when data is paginated. It contains details about the pagination state, such as total items, current page, items per page, total pages, and navigation links.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/responses.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"include\": [\n      \"xxx\",\n      \"yyy\"\n    ],\n    \"custom\": [],\n    \"pagination\": { // pagination meta\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ETag Support for Cache Validation\nDESCRIPTION: Explains how to enable the ETag feature in Apiato to support HTTP cache validation, which reduces bandwidth usage by preventing full response transmission when content hasn't changed.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Yarn\nDESCRIPTION: This command starts a local development server for the Docusaurus website using Yarn.  It compiles the website's source code and serves it on a local web server, typically accessible through a web browser.  Changes made to the website's source code are automatically reflected in the browser, providing a live development environment. The output is a running local server and the browser opens with the website.\nSOURCE: https://github.com/apiato/documentation/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Using a Validation Request in Apiato Controller (PHP)\nDESCRIPTION: Demonstrates how to use a custom Request class (`RegisterUserRequest`) with validation rules in an Apiato Controller method (`registerUser`). By type-hinting the request object as a parameter, Apiato automatically validates the incoming request data based on the rules defined in `RegisterUserRequest` before executing the controller logic. The validated request data is then passed to an Action (`RegisterUserAction`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    public function registerUser(RegisterUserRequest $request)\n    {\n        $user = app(RegisterUserAction::class)->run($request);\n        return $this->transform($user, UserTransformer::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Container Service Providers (PHP)\nDESCRIPTION: This PHP snippet shows how to register additional container-specific service providers within the container's `MainServiceProvider`. By adding the fully qualified class names of providers (e.g., `CustomServiceProvider::class`) to the public `$serviceProviders` array, Apiato automatically registers them during the application bootstrap process, centralizing registration for that specific container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/service-providers.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic array $serviceProviders = [\n    CustomServiceProvider::class,\n    AnotherCustomServiceProvider::class,\n    EventsServiceProvider::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining General Internal Error Exception in Apiato with PHP\nDESCRIPTION: Defines a general Exception class 'InternalErrorException' in the Ship layer extending Apiato's base Exception. It sets HTTP status to 500 Internal Server Error and a standard error message. Utilizes Symfony HTTP Foundation Response alias. Intended for generic internal server errors outside specific containers. The output is standardized error response properties.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/exceptions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Ship\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response as SymfonyResponse;\n\nclass InternalErrorException extends Exception\n{\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n}\n```\n\n----------------------------------------\n\nTITLE: Register Endpoint URL\nDESCRIPTION: Shows the API endpoint used for user registration via credentials. This URL should be used for POST requests to register new users.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/registration.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napi.apiato.test/v1/register\n```\n\n----------------------------------------\n\nTITLE: Example JSON response with metadata and pagination using DataArraySerializer\nDESCRIPTION: This snippet illustrates a detailed JSON response including 'data' as an array and 'meta' information such as included relationships and pagination details. It demonstrates the serializer's capability to handle complex responses with metadata and navigation links.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [ ... ],\n  \"meta\": {\n    \"include\": [\n      \"xxx\",\n      \"yyy\"\n    ],\n    \"custom\": [],\n    \"pagination\": {\n      \"total\": 999,\n      \"count\": 999,\n      \"per_page\": 999,\n      \"current_page\": 999,\n      \"total_pages\": 999,\n      \"links\": {\n        \"next\": \"http://api.apiato.test/v1/accounts?page=999\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Exception using Artisan Command\nDESCRIPTION: This code snippet showcases how to generate a new exception using the `apiato:generate:exception` artisan command. The command is executed in the terminal to create a new exception class, which allows for custom exception handling in the application.  It triggers an interactive process that generates a new exception class based on user input.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/exceptions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:exception\n```\n\n----------------------------------------\n\nTITLE: Fractal Serializer Configuration\nDESCRIPTION: This code snippet shows the configuration key that needs to be modified in `app/Ship/Configs/fractal.php` to change the default Fractal Serializer used for API responses. It demonstrates how to switch between different serializers like `DataArraySerializer`, `ArraySerializer`, or `JsonApiSerializer`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/responses.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n'default_serializer' => League\\Fractal\\Serializer\\DataArraySerializer::class,\n```\n\n----------------------------------------\n\nTITLE: Using the transform Helper for API Responses (PHP)\nDESCRIPTION: These snippets demonstrate the use of the transform helper within an ApiController to return API entities (objects or collections) in a standardized format using a specific transformer. Requires the data entity or collection and its transformer. Accepts optional includes and metadata. Returns a formatted API response, throws if the transformer or data is invalid.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/controllers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// $user is a User Object\nreturn $this->transform($user, UserTransformer::class);\n```\n\nLANGUAGE: php\nCODE:\n```\n// $orders is a Collection of Order Objects\nreturn $this->transform($orders, OrderTransformer::class, ['products', 'recipients', 'store', 'invoice']);\n```\n\n----------------------------------------\n\nTITLE: Checkout a New Branch Tracking Specific Apiato Upstream Version - Shell\nDESCRIPTION: Creates and switches to a new local branch named 'apiato-{version}' which will track a specific branch from the upstream Apiato repository. Enables isolating changes per major version upgrade. The {version} and {upstream-branch-name} placeholders must be replaced by the user with the target branch name (e.g., '8.0').\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b apiato-{version}\n// Example:   git checkout -b apiato-8.0\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream {upstream-branch-name}\n// Example:   git fetch upstream 8.0\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit branch --set-upstream-to upstream/{upstream-branch-name}\n// Example:   git branch --set-upstream-to upstream/8.0\n```\n\n----------------------------------------\n\nTITLE: Running the Passport Installation Command in Laravel (Shell)\nDESCRIPTION: Executes the Laravel Passport Artisan command to generate OAuth2 client credentials and encryption keys necessary for issuing secure access tokens. No special dependencies are required outside a working Laravel environment. Run this command from the root of your Laravel project in the terminal; outputs are the access credentials for clients.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authentication.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:install\n\n```\n\n----------------------------------------\n\nTITLE: Install Composer Dependencies and Run Tests to Verify Upgrade - Shell\nDESCRIPTION: Runs 'composer install' to update project dependencies according to the upgraded codebase, and then runs PHPUnit tests to verify that the upgrade did not break functionality. Assumes Composer and PHP unit test tools are installed and configured.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install  &&  vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Specifying generic types in PHPDoc with native type hints (Apiato) - PHP\nDESCRIPTION: This snippet demonstrates how to use PHPDoc tags, specifically `@return`, even when a native type hint (like `array`) is present, to provide more specific information about the generic type contained within the structure. This is useful for static analysis tools to understand the expected content of collections.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/prologue/contribution-guide.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Get the attachments for the message.\n     *\n     * @return array<int, \\Illuminate\\Mail\\Mailables\\Attachment>\n     */\n    public function attachments(): array\n    {\n        return [\n            Attachment::fromStorage('/path/to/file'),\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Searchable Fields for API Query Parameters\nDESCRIPTION: This code snippet shows how to enable API query parameters (e.g., `?search=text`) by defining the `$fieldSearchable` property in the Repository class. The array keys are the fields to search, and the values are the comparison operators (e.g., 'like', '='). This allows flexible querying of your model through the API.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/repositories.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nprotected $fieldSearchable = [\n      'name'  => 'like',\n      'email' => '=',\n\t];\n```\n\n----------------------------------------\n\nTITLE: Configuring Apiato Debugger Log File in PHP\nDESCRIPTION: Allows customization of the log file name used by the Apiato debugger middleware for storing HTTP request logs. Modify the 'log_file' key in the 'Debugger/Configs/debugger.php' configuration file to specify the desired log filename within the 'storage/log' directory. This enables redirecting logs to different files as needed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/debugger.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/*\n\n |-------------------------------------------------------------------------\n | Log File\n |-------------------------------------------------------------------------\n |\n | What to name the log file in the `storage/log` path.\n |\n */\n\n'log_file' => 'debugger.log',\n```\n\n----------------------------------------\n\nTITLE: Unit Testing apiato Action with Fake Request (PHP)\nDESCRIPTION: Provides a complete example of writing a unit test for an apiato action. It demonstrates setting up test data, creating a fake request object using `injectData`, running the action, and performing assertions on the returned result.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'email'    => 'Mahmoud@test.test',\n    'name'     => 'Mahmoud',\n    'password' => 'so-secret',\n];\n\n// create request object with some data\n$request = RegisterUserRequest::injectData($data);\n\n// create instance of the Action\n$action = App::make(RegisterUserAction::class)->run($request);\n\n// do any kind of assertions..\n$this->assertInstanceOf(User::class, $user);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Request Class Definition - Apiato - PHP\nDESCRIPTION: Demonstrates the fundamental structure of an Apiato Request class. It illustrates extending the `ParentRequest` and defining the required `rules` and `authorize` methods, along with common properties used for access control, decoding, and URL parameters.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Requests\\Request as ParentRequest;\n\nclass DemoRequest extends ParentRequest\n{\n    protected array $access = [];\n    protected array $decode = [];\n    protected array $urlParameters = [];\n\n    public function rules(): array\n    {\n        return [\n            'field' => 'min:3|max:50',\n        ];\n    }\n\n    public function authorize(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Test Endpoint Definitions in PHP\nDESCRIPTION: The `endpoint` method allows overriding the default endpoint specified in the test class's `$endpoint` property for a specific test method. It requires the endpoint definition string (e.g., 'verb@version/resource') as an argument. This method must be called *before* `injectId` to ensure ID injection works correctly on the overridden endpoint.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->endpoint('get@v1/register')->makeCall();\n```\n\n----------------------------------------\n\nTITLE: Output of sanitizeInput Method - Apiato Request - PHP\nDESCRIPTION: Displays the expected PHP array structure resulting from applying the `sanitizeInput` method to the example JSON payload. It shows how specified fields are extracted, how empty strings are handled (converted to null by Laravel), and how unspecified fields are omitted.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"data\" => [\n    \"description\" => \"Some description\"\n    \"is_private\" => false,\n    \"address\" => null, // empty string is converted to null by Laravel\n    \"foo\" => [\n      \"number\" => 1,\n    ]\n  ],\n  \"meta\" => \"some meta data\",\n]\n```\n\n----------------------------------------\n\nTITLE: Manually Cherry-Pick Specific Commits from Upstream Apiato Branch - Shell\nDESCRIPTION: Provides an alternative upgrade strategy by cherry-picking individual commits from the upstream branch onto the 'upgrade-apiato' branch. The user first lists commits via 'git log' and then applies commits one-by-one via 'git cherry-pick'. Conflict resolution is done manually as necessary. This approach allows selective integration of changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ngit log {upstream-branch-name}\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit cherry-pick {commit-ID}\n```\n\n----------------------------------------\n\nTITLE: Installing the Documentation Generator Container - Apiato (Shell)\nDESCRIPTION: Shows the shell command required to install Apiato's documentation generator container using Composer. This must be executed in the project root. Assumes prior installation of Composer and appropriate PHP environment. This makes the doc generator available for subsequent documentation generation or customization.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/documentation-generator-container\n```\n\n----------------------------------------\n\nTITLE: Generating Value Objects in Apiato PHP\nDESCRIPTION: This snippet describes the command for generating new Value Objects within the Apiato framework. It utilizes the `apiato:generate:value` artisan command, and is used to interactively create new value objects.  No parameters or inputs are provided. The output is a new Value Object file, that conforms to the directory structure requirements defined elsewhere in the documentation.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/values.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:value\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato API Documentation (Bash)\nDESCRIPTION: This command triggers the Apiato documentation generator, invoking Laravel's artisan command to produce API documentation based on ApiDocJs standards. It requires prior installation of dependencies and proper project setup.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Helper Function in PHP\nDESCRIPTION: Example of how to define a global helper function in PHP with proper function existence check. This simple function adds two integers and returns their sum.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/helpers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (!function_exists('add')) {\n    function add(int $firstNumber, int $secondNumber): int\n    {\n        return $firstNumber + $secondNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using translation strings with withErrors Method in PHP\nDESCRIPTION: This code snippet shows how to use translation strings with the `withErrors` method for localization.  It demonstrates how to associate error messages with translation keys to enable the use of localized error messages in the application. The framework uses the `Localization Container` to translate the error messages.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/exceptions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Example 1\nthrow (new AccountFailedException())->withErrors(['email' => 'appSection@user::exceptions.email-taken']);\n// Example 2\nthrow (new AccountFailedException())->withErrors(['email' => 'appSection@user::exceptions.email-taken', 'Another not translated message']);\n```\n\n----------------------------------------\n\nTITLE: Adding Factory Discovery Trait to Custom Model (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to include the 'Apiato\\Core\\Traits\\ModelTrait' in a model that does not inherit from Apiato's base Model or UserModel classes. This trait is essential for Apiato to correctly locate and use the corresponding factory for the model, overriding Laravel's default factory discovery convention.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/factories.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Apiato\\Core\\Traits\\ModelTrait;\n\nclass Demo\n{\n    use ModelTrait;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Object Instances on a Transporter in PHP\nDESCRIPTION: Shows how to store an object instance (e.g., a command instance `$this`) on a Transporter using the `setInstance()` method. This is necessary because direct assignment of objects might not work due to hydration limitations of the underlying DTO package.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$transporter = new DataTransporter();\n$transporter->setInstance(\"command_instance\", $this);\n```\n\n----------------------------------------\n\nTITLE: Using withErrors Method in PHP\nDESCRIPTION: The `withErrors` method allows for setting multiple error messages associated with an exception.  It accepts an array where keys represent fields, and values are error messages or an array of error messages. This allows for providing a detailed description of the occurred error.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/exceptions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Example 1\nthrow (new AccountFailedException())->withErrors(['email' => 'The email has already been taken.']);\n// Example 2\nthrow (new AccountFailedException())->withErrors(['email' => ['The email has already been taken.', 'Another message']]);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in JavaScript\nDESCRIPTION: This snippet demonstrates importing the 'DocCardList' component from the '@theme' package for use within a JavaScript or React project, and rendering it in a document. It facilitates displaying a list of documentation cards related to Apiato components. No specific dependencies are noted besides the '@theme/DocCardList' component; it assumes a React environment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList/>\n```\n\n----------------------------------------\n\nTITLE: Generating API documentation\nDESCRIPTION: Runs the Apiato command to generate API documentation using the installed ApiDocJs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Creating Admonitions and Callouts\nDESCRIPTION: This snippet uses a specific Docusaurus syntax to create admonitions (or callouts). It demonstrates the use of `:::tip` and `:::danger` blocks to display information with different visual styles. The output will render these elements with the respective styling within the document.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n```md\n:::tip My tip\n\nUse this awesome feature option\n\n:::\n\n:::danger Take care\n\nThis action is dangerous\n\n:::\n```\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Apiato Commands\nDESCRIPTION: Illustrates the standard folder hierarchy for organizing console commands within an Apiato application. Container-specific commands reside within their respective container's `UI/CLI/Commands` directory, while general or shared commands are placed in the `app/Ship/Commands` directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/commands.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── UI\n│               └── CLI\n│                   └── Commands\n│                       ├── FirstCommand.php\n│                       ├── SecondCommand.php\n│                       └── ...\n└── Ship\n    └── Commands\n        ├── FirstCommand.php\n        ├── SecondCommand.php\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Returning a JSON Response with the json Helper (PHP)\nDESCRIPTION: This snippet shows how to return a simple array as a JSON HTTP response using the json helper in an Apiato controller. The helper accepts an associative array and outputs a valid JSON response. No external dependencies aside from the Controller and framework utilities. Expects input data array and returns an HTTP JSON response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/controllers.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->json([\n    'foo': 'bar'\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Project via Composer in PHP\nDESCRIPTION: Command to create a new Apiato project using Composer. Requires PHP and Composer to be installed on the system.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer create-project apiato/apiato my-api\n```\n\n----------------------------------------\n\nTITLE: Controlling Access with $access - Apiato Request - PHP\nDESCRIPTION: Demonstrates using the `$access` property within a Request class to define required user permissions and roles for accessing an endpoint. The `authorize` method is updated to utilize the `hasAccess()` helper method based on this property.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRequest extends ParentRequest\n{\n    protected array $access = [\n        'permissions' => 'delete-users',\n        'roles' => 'manager'\n    ];\n\n    public function authorize(): bool\n    {\n        return $this->hasAccess();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Resources with Meta and withMeta\nDESCRIPTION: This example demonstrates using both `withMeta` and the `meta` parameter of the `transform` function to add metadata to the response. `withMeta` adds metadata directly under the `meta` key, while the `meta` parameter adds it under a nested `custom` key within `meta`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$metaData = ['foo' => 999, 'bar'];\n\n$this->withMeta($metaData)->transform($sample, SampleTransformer::class, meta: ['foo' => 'bar', 'baz' => 1]);\n```\n\n----------------------------------------\n\nTITLE: API Documentation Configuration in JSON\nDESCRIPTION: Example of an apidoc.json configuration file that controls how the API documentation is generated. Includes settings for title, description, version, URL, and template options.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/api-docs-generator.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apiato\",\n  \"description\": \"Apiato (Private API) Documentation\",\n  \"title\": \"Welcome to Apiato\",\n  \"version\": \"1.0.0\",\n  \"url\" : \"http://api.apiato.test\",\n  \"template\": {\n    \"withCompare\": true,\n    \"withGenerator\": true\n  },\n  \"header\": {\n    \"title\": \"API Overview\",\n    \"filename\": \"app/Containers/Documentation/ApiDocJs/private/header.md\"\n  },\n  \"footer\": {\n    \"title\": \"Footer\",\n    \"filename\": \"app/Containers/Documentation/ApiDocJs/private/header.md\"\n  },\n  \"order\": [\n\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Route with Help Option in Apiato - Bash\nDESCRIPTION: This snippet demonstrates how to invoke the code generator for creating a new route file in Apiato and display detailed help information about its usage. Dependencies include a properly set up Laravel+Apiato environment. The command will show available options such as --container, --file, and any generator-specific flags for customizing the generated route class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/code-generator.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:route --help\n```\n\n----------------------------------------\n\nTITLE: Set Max Pagination Limit (Apiato PHP Repository)\nDESCRIPTION: Define the maximum number of items allowed per page for pagination specifically for this repository. Setting the `$maxPaginationLimit` protected property prevents clients from requesting excessive data amounts, overriding the global configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected $maxPaginationLimit = 20;\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Front-End Code within Apiato\nDESCRIPTION: Shows the recommended directory structure for placing front-end code (HTML, views) within an Apiato container when serving HTML directly from Apiato. This structure resides under the `UI/WEB` directory of a specific container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/faq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- MyProject\n  - app\n    - Containers\n      - Section-Z\n        - Container-X\n          - UI\n            - API\n            - WEB  // <<\n              - Views\n            - CLI\n        - Container-Y\n          - UI\n            - API\n            - WEB  // <<\n              - Views\n            - CLI\n```\n\n----------------------------------------\n\nTITLE: Listing Actions with Filename Flag\nDESCRIPTION: Command to list all implemented Actions in an Apiato application with their corresponding file names. This is useful for getting an overview of all use cases implemented in the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/useful-commands.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napiato:list:actions --withfilename\n```\n\n----------------------------------------\n\nTITLE: Querying Apiato API Base Endpoint Using JSON - JSON\nDESCRIPTION: This snippet displays the JSON response returned by querying the main Apiato API endpoint. No external dependencies are required other than an HTTP client capable of making GET requests. The output is a simple JSON array showing a welcome message, which confirms basic API connectivity.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n\"Welcome to Apiato\"\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Website using SSH with Yarn\nDESCRIPTION: This command deploys the Docusaurus website using SSH.  It likely uses a deployment script or configuration that pushes the contents of the `build` directory to a remote server via SSH. The `USE_SSH=true` environment variable indicates that SSH deployment is desired.  The output is the deployed website on the remote server.\nSOURCE: https://github.com/apiato/documentation/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Sending Notification via Facade (PHP)\nDESCRIPTION: Illustrates how to dispatch a notification using the `\\Notification` facade from within Actions or Tasks. This method requires passing the notifiable object (e.g., a User model instance) and a new instance of the notification class to the `send` method. This is a common way to trigger notifications.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/notifications.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Notification::send($user, new BirthdayReminderNotification($notificationMessage));\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Custom Data on APIato Request Object\nDESCRIPTION: The example shows how to temporarily store custom data within the request object using `keep()`, and retrieve it later using `retrieve()`. This pattern supports passing supplementary data through the request lifecycle, especially useful in complex workflows or multi-step actions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/requests.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$request->keep(['someKey' => $someValue]);\n$someValue = $request->retrieve('someKey');\n```\n\n----------------------------------------\n\nTITLE: API Controller Example\nDESCRIPTION: This is an example of an API controller in Apiato. It extends the `ApiController` class, uses dependency injection for actions, and transforms the output using a transformer. It demonstrates how a request is processed and a response is formatted.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Ship\\Parents\\Controllers\\ApiController;\n\nclass Controller extends ApiController\n{\n    public function __construct(\n        private readonly SampleAction $sampleAction,\n    ) {\n    }\n    \n    public function __invoke(SampleRequest $request): array\n    {\n        $sample = $this->sampleAction->run($request);\n        \n        return $this->transform($sample, SampleTransformer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branches and Cherry-Picking Commits in Git - Bash\nDESCRIPTION: Explains how to create a new feature branch, list commits, and cherry-pick specific commits for contribution. Requires intermediate Git knowledge and informative commit IDs from 'git log'. Useful for selective sharing of changes and organizing implementation for PRs.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout apiato\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature-awesome\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit log master\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick {commit-ID}\n```\n\n----------------------------------------\n\nTITLE: Example PHP code for accessing translations\nDESCRIPTION: This code snippet demonstrates how to retrieve a localized string using the __() helper function with the namespace notation in a Laravel-based application. It requires the translation files to be properly structured according to the specified naming conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/languages.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n__('mySection@myContainer::messages.welcome');\n```\n\n----------------------------------------\n\nTITLE: Registering User by Credentials via cURL HTTP\nDESCRIPTION: This snippet shows an example HTTP POST request using cURL to register a new user with an email, password, and name via the `/v1/register` endpoint. It specifies the required headers and the data payload.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/user-registration.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\ncurl --request POST \\\n  --url http://api.apiato.test/v1/register \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'email=apiato%40mail.com1&password=password&name=Mahmoud%20Zalt'\n```\n\n----------------------------------------\n\nTITLE: Building Static Content with Yarn\nDESCRIPTION: This command builds the Docusaurus website into static content, generating HTML, CSS, and JavaScript files. These files are placed in the `build` directory. This directory can then be deployed to a static content hosting service. The output is a 'build' directory with all website assets.\nSOURCE: https://github.com/apiato/documentation/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from a Transporter Object in PHP\nDESCRIPTION: Shows two ways to access data from a Transporter object: directly accessing properties (e.g., `$transporter->name`) for simple fields, and using the `getInputByKey()` method for nested or complex fields (e.g., `$transporter->getInputByKey('your.nested.username.field')`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// \"simple\" access via direct properties\n$name = $transporter->name;\n\n// complex access via method\n$username = $transporter->getInputByKey('your.nested.username.field');\n```\n\n----------------------------------------\n\nTITLE: Verifying configured remotes with Git remote -vv\nDESCRIPTION: This code lists all configured remote repositories along with their fetch and push URLs, confirming that the 'origin' and 'upstream' remotes are correctly set up.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -vv\n\norigin\tgit@bitbucket.org:username/my-awesome-api.git (fetch)\norigin\tgit@bitbucket.org:username/my-awesome-api.git (push)\nupstream\tgit@github.com:apiato/apiato.git (fetch)\nupstream\tgit@github.com:apiato/apiato.git (push)\n```\n\n----------------------------------------\n\nTITLE: Asserting Database Table Structure in PHP\nDESCRIPTION: The `assertDatabaseTable` method verifies if a specific database table exists and contains the expected columns with their corresponding data types. It takes the table name as the first argument and an associative array `['column_name' => 'column_type']` as the second argument.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->assertDatabaseTable('users', ['id' => 'bigint']);\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules - Apiato Request - PHP\nDESCRIPTION: Shows how to define validation rules for request input data within the `rules` method of an Apiato Request class. It utilizes standard Laravel validation syntax to specify constraints for various fields.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Requests\\Request as ParentRequest;\n\nclass RegisterUserRequest extends ParentRequest\n{\n    public function rules(): array\n    {\n        return [\n            'email'    => 'required|email|max:200|unique:users,email',\n            'password' => 'required|min:20|max:300',\n            'name'     => ['required', 'min:2', 'max:400'],\n        ];\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Route Endpoint Using Apiato CLI Wizard - text\nDESCRIPTION: Demonstrates the interactive php artisan apiato:generate:route command session to create a new route/endpoint file in an Apiato container. The step-by-step process prompts for section, container, route file name, UI, version, endpoint type, controller function, HTTP verb, and URI. The generator then produces a new PHP file in the appropriate location (e.g., App\\Containers\\AppSection\\Car\\UI\\API\\Routes\\CreateCar.v1.public.php). Requires Apiato with a properly installed and initialized Laravel app; results depend on answers provided to the wizard.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/code-generator.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ php artisan apiato:generate:route\n\n Enter the name of the Section [AppSection]:\n >\n\n Enter the name of the Container:\n > Car\n\n Enter the name of the Route file [DefaultRoute]:\n > CreateCar\n\n> Generating (CreateCar) in (AppSection:Car) Container.\n\n Select the UI for the controller [API]:\n  [0] API\n  [1] WEB\n > 0\n\n Enter the endpoint version (integer)[1]:\n > 1\n\n Select the type for this endpoint?[private]:\n  [0] private\n  [1] public\n > 1\n\n Enter the name of the controller function that needs to be invoked when calling this endpoint:\n > createNewCar\n\n Enter the HTTP verb of this endpoint (GET, POST,...):\n > POST\n\n Enter the endpoint URI (foo/bar/{id}):\n > cars\n\nRoute generated successfully.\n\n```\n\n----------------------------------------\n\nTITLE: Allow Disabling Pagination (Apiato PHP Repository)\nDESCRIPTION: Enable the ability for API clients to disable pagination for this repository by setting the `$allowDisablePagination` protected property to `true`. This allows requesting all matching data with the `limit=0` query parameter.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/repository/repositories.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected $allowDisablePagination = true;\n```\n\n----------------------------------------\n\nTITLE: Apiato Migration Folder Structure\nDESCRIPTION: Illustrates the standard directory structure for placing database migration files within an Apiato container's Data/Migrations folder.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/migrations.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n   - app\n      - Containers\n          - {section-name}\n              - {container-name}\n                  - Data\n                      - Migrations\n                          - 2200_01_01_000001_create_something_table.php\n                          - ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Included Relationships in Apiato Transformer (PHP)\nDESCRIPTION: Explains how to register relationships for inclusion in the Transformer's output. Add the relationship name (matching the `include{RelationshipName}` method without 'include') to `$availableIncludes` for on-demand inclusion or `$defaultIncludes` for automatic inclusion in every response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected array $availableIncludes = [\n    'roles',\n];\n\n// or\n\nprotected array $defaultIncludes = [\n    'roles',\n];\n```\n\n----------------------------------------\n\nTITLE: Register Response Body Example\nDESCRIPTION: Provides an example of the JSON response returned after successfully registering a user.  It includes user data such as ID, email, and metadata about included relationships.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/registration.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"XbPW7awNkzl83LD6\",\n    \"name\": null,\n    \"email\": \"john@doe.com\",\n    \"email_verified_at\": null,\n    \"gender\": null,\n    \"birth\": null\n  },\n  \"meta\": {\n    \"include\": [\n        \"roles\",\n        \"permissions\"\n    ],\n    \"custom\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Protected API Endpoint Call with Bearer Token using cURL\nDESCRIPTION: This snippet shows how to perform a GET request to a protected endpoint by including an 'Authorization' header with a Bearer token. It requires prior authentication to obtain the token and access secured resources like user data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/requests.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET -H \"Accept: application/json\" -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\" \"http://api.domain.test/v1/users\"\n```\n\n----------------------------------------\n\nTITLE: Example User Registration JSON Response from Apiato\nDESCRIPTION: Example JSON response body from a successful user registration in an Apiato application, showing user data structure and metadata.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\",\n    \"id\": \"7VgmkMw7rR2pWO5j\",\n    \"name\": \"John Doe\",\n    \"email\": \"John@Doe.me\",\n    \"email_verified_at\": null,\n    \"gender\": null,\n    \"birth\": null,\n    \"created_at\": \"2021-04-12T13:33:24.000000Z\",\n    \"updated_at\": \"2021-04-12T13:33:24.000000Z\",\n    \"readable_created_at\": \"1 second ago\",\n    \"readable_updated_at\": \"1 second ago\"\n  },\n  \"meta\": {\n    \"include\": [\n      \"roles\"\n    ],\n    \"custom\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MiddlewareServiceProvider in MainServiceProvider (PHP)\nDESCRIPTION: Illustrates how to register a container's `MiddlewareServiceProvider` within that container's `MainServiceProvider`. This is done by adding the `MiddlewareServiceProvider::class` reference to the `$serviceProviders` array, ensuring it's loaded by the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/middlewares.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse ...\nuse App\\Ship\\Parents\\Providers\\MainServiceProvider as ParentMainServiceProvider;\n\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    protected array $serviceProviders = [\n        MiddlewareServiceProvider::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using getHashedKey for ID in Transformer (PHP)\nDESCRIPTION: Demonstrates how to use the `getHashedKey()` method on a model within an Apiato transformer. This method returns the hashed ID if Hash ID is enabled, or the original ID if disabled, ensuring consistent output regardless of configuration. It's crucial for exposing model identifiers publicly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/hash-id.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n'id' => $user->getHashedKey(),\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Resource via HTTP GET - RESTful API - bash\nDESCRIPTION: Demonstrates how to retrieve a single resource from a RESTful API using the HTTP GET method. No dependencies other than a RESTful HTTP client are needed. The endpoint expects the resource identifier in the URI path and returns the resource data in response. Response format and authentication requirements depend on the API implementation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGET http://www.api.apiato.test/v1/cars/123\n```\n\n----------------------------------------\n\nTITLE: Testing hashed IDs in parameter arrays in PHP\nDESCRIPTION: This example shows how to create a test data array with properly hashed IDs for multiple resources. It demonstrates using getHashedKey() on different models when preparing test data for API calls.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/hash-id.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'roles_ids' => [\n        $role1->getHashedKey(),\n        $role2->getHashedKey(),\n    ],\n    'user_id'   => $randomUser->getHashedKey(),\n];\n$response = $this->makeCall($data);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Event Discovery (php)\nDESCRIPTION: Demonstrates how to explicitly disable Laravel's automatic event discovery feature within an Apiato container's `EventServiceProvider`. By default, discovery is enabled, but overriding this method and returning `false` allows for strict manual registration only.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/events.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Determine if events and listeners should be automatically discovered.\n */\npublic function shouldDiscoverEvents(): bool\n{\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the User Factory in PHP\nDESCRIPTION: This code snippet demonstrates how to use the User Model Factory to create multiple users. It uses the `factory()` method on the User model to create 4 users in this example. This code is typically used within tests or other parts of the application where fake user data is needed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/factories.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// creating 4 users\nUser::factory()->count(4)->create();\n```\n\n----------------------------------------\n\nTITLE: Using debug Method in PHP\nDESCRIPTION: The `debug` method is used for logging error messages, particularly useful during development and debugging phases. The `debug` method accepts either a string containing an error message or an instance of the `Exception` class. It outputs the error message to help diagnose issues.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/exceptions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nthrow (new AccountFailedException())->debug($e);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Transporter in a PHP Test\nDESCRIPTION: Illustrates how to create a `DataTransporter` instance with mock data within a test environment. The transporter is then used to run an Action (`RegisterUserAction`) retrieved via the service container (`App::make`).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n\t'foo' => 'bar'\n];\n\n$transporter = new DataTransporter($data);\n$action = App::make(RegisterUserAction::class);\n\n$user = $action->run($transporter);\n```\n\n----------------------------------------\n\nTITLE: Sending Notification via Notifiable Trait (PHP)\nDESCRIPTION: Shows an alternative approach to sending a notification by calling the `notify` method directly on the notifiable object (e.g., a User model). This method is available if the notifiable object uses the `Illuminate\\Notifications\\Notifiable` trait. It provides a cleaner syntax for sending notifications directly from the model.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/notifications.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// call notify, found on the Notifiable trait\n$user->notify(new BirthdayReminderNotification($notificationMessage));\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Included Relationship\nDESCRIPTION: Illustrates the JSON output structure when a relationship (`roles`) is included in the response. The primary resource data contains a key (`roles`) with an array of the related resource objects.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"object\": \"User\",\n      \"id\": \"0one37vjk49rp5ym\",\n      \"roles\": [\n        {\n          \"object\": \"Role\",\n          \"id\": \"bmo7y84xpgeza06k\"\n        },\n        // ...\n      ]\n    },\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Apiato Request in Controller PHP\nDESCRIPTION: This snippet illustrates how to inject a custom Apiato Request class (`UpdateUserRequest`) directly into a controller method (`updateUser`). By injecting the Request object, Apiato automatically handles validation and authorization defined within the Request class before the controller method's logic is executed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function updateUser(UpdateUserRequest $updateUserRequest)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Client Authentication Failure JSON\nDESCRIPTION: This JSON response indicates a failure in client authentication. It uses the error code `invalid_client` with a corresponding message, which means the client's credentials (ID or secret) are incorrect. This response is commonly returned by the authentication server in response to invalid client credentials during token requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/core-features/authentication.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid_client\",\n  \"message\": \"Client authentication failed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Migrations to Create Database Tables (Bash)\nDESCRIPTION: This command runs Laravel's migration system to create database tables based on defined migration files. It is required after setting up the database and configuring the connection to ensure all necessary tables exist for Apiato to function properly.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Apiato Factory Folder Structure (Markdown)\nDESCRIPTION: This markdown snippet visualizes the expected directory structure for Apiato factories within a container. It illustrates that factory files should be placed inside the Data/Factories directory specific to the container.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/factories.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Data\n                └── Factories\n                    ├── ModelFactory.php\n                    └── ...\n```\n\n----------------------------------------\n\nTITLE: Defining a custom Value Object class in PHP\nDESCRIPTION: This PHP code defines a custom Value Object class 'Location' that extends the base Value class from APIATO. It encapsulates coordinate data with private properties, a constructor for initialization, and a method to return coordinates as a formatted string. The class demonstrates typical usage of Value Objects to represent immutable data structures.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/values.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse App\\Ship\\Parents\\Values\\Value;\n\nclass Location extends Value\n{\n    private $x = null;\n    \n    private $y = null;\n\n    protected $resourceKey = 'locales';\n    \n    public function __construct($x, $y)\n    {\n        $this->x = $x;\n        $this->y = $y;\n    }\n\n    public function getCoordinatesAsString()\n    {\n        return $this->x . ' - ' . $this->y;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating a new Migration using Artisan - PHP\nDESCRIPTION: This command is used to generate a new migration file within the Apiato project structure. It utilizes the `apiato:generate:migration` Artisan command, which likely includes interactive prompts for specifying the migration details such as table name and schema.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/migrations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan apiato:generate:migration\n```\n\n----------------------------------------\n\nTITLE: Authorization Failed Response Example (JSON)\nDESCRIPTION: This JSON object shows the default structure of the response returned by Apiato when a user request fails authorization checks defined in the Request class. It contains a generic 'message' indicating the unauthorized action and an empty 'errors' array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/security/authorization.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"This action is unauthorized.\",\n  \"errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Apiato Sub Action Folder Structure\nDESCRIPTION: Illustrates the standard directory structure for placing Sub Action classes within an Apiato container. Sub Actions must reside in the `Actions` directory of a specific container and section (e.g., `app/Containers/Section/Container/Actions`).\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/subactions.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Actions\n                ├── ValidateAddressSubAction.php\n                ├── BuildOrderSubAction.php\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter in Markdown\nDESCRIPTION: This snippet demonstrates how to define front matter in a Markdown document. Front matter is metadata at the top of the document that can be used to configure various aspects of the page, such as the title, description, and sidebar label.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/markdown-features.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nid: my-doc\ntitle: My document title\ndescription: My document description\nsidebar_label: My doc\n---\n\nMarkdown content\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Grant Client with Artisan (Shell)\nDESCRIPTION: Uses the Laravel Artisan command `passport:client` with the `--password` option to specifically create an OAuth2 password grant client. This is necessary if the `passport:install` command was not run or if additional password grant clients are required.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/authentication.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan passport:client --password\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Input with Default Values - Apiato Request - PHP\nDESCRIPTION: Demonstrates how to provide default values within the `sanitizeInput` method. If a field is not present in the request, the specified default value is used in the resulting sanitized array, supporting dot notation for nested paths.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$sanitizedData = $request->sanitizeInput([\n    'name' => 'John', // If name is not provided, the default value will be set\n    'product.company.address' => 'Somewhere in the world', // dot notation is supported\n    'email',\n    'password'\n]);\n```\n\n----------------------------------------\n\nTITLE: Using sanitizeInput with Default Values in PHP\nDESCRIPTION: Demonstrates how to provide default values while sanitizing input data from the request, which is useful when certain fields might be missing from the request.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$sanitizedData = $request->sanitizeInput([\n    'name' => 'John', // if name is not provided then default value will be set\n    'product.company.address' => 'Somewhere in the world', // dot notation is also supported\n    'email',\n    'password'\n]);\n```\n\n----------------------------------------\n\nTITLE: Converting an Apiato Request Object to a Transporter in PHP\nDESCRIPTION: Demonstrates how to convert an Apiato `Request` object directly into its corresponding `Transporter` instance using the `toTransporter()` method. This respects the `$transporter` property defined in the Request class or defaults to `DataTransporter`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$transporter = $request->toTransporter();\n```\n\n----------------------------------------\n\nTITLE: Verify Local Branch Tracking Upstream Apiato Branch - Shell\nDESCRIPTION: Shows the current branches along with their upstream tracking information to confirm that the local branch 'apiato-{version}' is tracking the correct upstream branch. Important for ensuring synchronization before merging.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -vv\n\n apiato          77b4d945 [upstream/{upstream-branch-name}] ...\n master          77d302aa [origin/master] ...\n```\n\n----------------------------------------\n\nTITLE: Creating a User Model Factory in PHP\nDESCRIPTION: This code snippet demonstrates how to create a User Model Factory in PHP using Laravel's Factory class. It defines the model and the attributes with fake data using Faker. It extends `App\\Ship\\Parents\\Factories\\Factory` and is used for generating fake user data for testing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/factories.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass UserFactory extends Factory\n{\n    protected $model = User::class;\n\n    public function definition(): array\n    {\n        static $password;\n\n        return [\n            'name' => $this->faker->name,\n            'email' => $this->faker->unique()->safeEmail,\n            'password' => $password ?: $password = Hash::make('testing-password'),\n            'email_verified_at' => now(),\n            'remember_token' => Str::random(10),\n            'is_admin' => false,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Factory using Artisan CLI\nDESCRIPTION: Use this command to interactively generate a new factory file for a specific model within your Apiato project. The command ensures the factory is created in the correct container directory and extends the required parent class.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/factories.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan apiato:generate:factory\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Showing Resource Key\nDESCRIPTION: Sample JSON response demonstrating the use of the resource key. The `object` field within the data structure holds the string value (`User`) defined by the model's resource key.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/transformers.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"object\": \"User\", // <-- ResourceKey\n    \"id\": \"XbPW7awNkzl83LD6\",\n    \"name\": \"Mohammad Alavi\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: accepted Method Usage\nDESCRIPTION: This code shows the usage of the `accepted` method, which allows a response with a `202` status code to be returned, signalling that the request has been accepted for processing. It accepts an array of data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$this->accepted($data)\n```\n\n----------------------------------------\n\nTITLE: Email Configuration in Apiato using Environment Variables\nDESCRIPTION: Environment variable configuration for setting up global email settings in Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/mails.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nMAIL_FROM_ADDRESS=test@test.test\nMAIL_FROM_NAME=\"apiato\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Configured Git Remotes - Bash\nDESCRIPTION: Lists all configured remotes and their URLs for fetch and push operations in the current project. Dependency: Git repository initialized and at least one remote configured. Reveals the fetch and push URLs for troubleshooting and verification.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -vv\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response Headers from Apiato API\nDESCRIPTION: Example HTTP response headers returned by an Apiato API endpoint, showing content type, rate limiting, and other standard headers.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nAccess-Control-Allow-Origin → ...\nCache-Control → ...\nConnection → keep-alive\nContent-Language → en\nContent-Type → application/json\nDate → Wed, 11 Apr 2000 22:55:88 GMT\nServer → nginx\nTransfer-Encoding → chunked\nVary → Origin\nX-Powered-By → PHP/7.7.7\nX-RateLimit-Limit → 30\nX-RateLimit-Remaining → 29\n```\n\n----------------------------------------\n\nTITLE: Installing NPM dependencies for API documentation\nDESCRIPTION: Installs the required Node.js dependencies including ApiDocJs for API documentation generation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from a Transporter in PHP\nDESCRIPTION: Illustrates methods for retrieving data from a Transporter object. Use `$data->toArray()` or `$data->toJson()` to get all data, or access specific properties directly like `$data->username`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nTo get all data from the Transporter you can call `$data->toArray()` or `$data->toJson()`... there are many other functions on the class.\n\nTo get specific data just call the data name, as you would when accessing data from a Request object `$data->username`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for 3rd Party Apiato Containers in JSON\nDESCRIPTION: This JSON snippet is an example composer.json used to specify external 3rd party containers in an Apiato project. It defines the 'apiato/containers' package for the application and declares a dependency on 'johannesschobel/apiato-null' via the require field. To use, place this file in the /app/Containers directory and run 'composer update' to install all required packages into the containers folder. Ensure you do not manually edit installed container contents, as changes may be overwritten on updates.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/container-installer.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"apiato/containers\",\n  \"description\": \"Composer file to include 3rd party containers.\",\n  \"require\": {\n    \"johannesschobel/apiato-null\" : \"dev-master\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Apiato Configuration Directory Structure\nDESCRIPTION: Provides a visual representation of the standard folder structure for Apiato configuration files using Markdown. It shows the designated locations for container-specific configs (`app/Containers/{Section}/{Container}/Configs`), general ship configs (`app/Ship/Configs`), and core Laravel configs (`config`).\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/configs.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n├── Containers\n│   └── Section\n│       └── Container\n│           └── Configs\n│               ├── section-container.php\n│               ├── another.php\n│               └── ...\n├── Ship\n│   └── Configs\n│       ├── another-thing.php\n│       ├── and-another.php\n│       └── ...\n└── config\n    ├── app.php\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Model Trait Usage\nDESCRIPTION: Demonstrates how to include the `ModelTrait` in a Model class that does not extend the default Apiato Model classes.  This ensures the Model has necessary functionalities such as hash IDs. It requires the `Apiato\\Core\\Traits\\ModelTrait`.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/models.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Apiato\\Core\\Traits\\ModelTrait;\n\nclass Demo\n{\n    use ModelTrait;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing User Registration Endpoint with cURL in Apiato\nDESCRIPTION: cURL command to test the user registration endpoint in an Apiato application, sending name, email, and password as form data and expecting a JSON response.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Accept: application/json\" -H \"Cache-Control: no-cache\" -F \"email=John@Doe.me\" -F \"password=so-secret\" -F \"name=John Doe\" \"http://api.apiato.test/v1/register\"\n```\n\n----------------------------------------\n\nTITLE: HTML View Example\nDESCRIPTION: This code snippet demonstrates a basic HTML view structure for a welcome page. It includes the standard HTML boilerplate with a title and a simple container with welcome message.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/views.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"content\">\n            <div class=\"title\">Welcome</div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code Blocks with JSX\nDESCRIPTION: This snippet showcases how to include code blocks with syntax highlighting in Markdown documents.  The `title` attribute is used to display the file path above the code block. This example uses JSX syntax highlighting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/markdown-features.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response (JSON)\nDESCRIPTION: Illustrates the expected JSON response returned by the `/hello` endpoint. This shows the output generated by the controller after executing the action, which is the string 'Hello World!' wrapped in a JSON array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/samples.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"Hello World!\"\n]\n```\n\n----------------------------------------\n\nTITLE: Transforming Resources with Includes\nDESCRIPTION: This example shows how to use the `transform` method to transform a resource with specified includes in Apiato. The third parameter of the `transform` method is an array of includes that should be returned in the response.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// With Includes\n$this->transform($resource, ResourceTransformer::class, ['foo', 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Defining GET Route in APIato PHP\nDESCRIPTION: Defines a GET endpoint `/hello` that maps incoming requests to the `sayHello` method of the `Controller` class. This serves as the initial entry point for the request within the APIato routing system.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/samples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/hello', [Controller::class, 'sayHello']);\n```\n\n----------------------------------------\n\nTITLE: Using if-blocks for Request Validation in PHP\nDESCRIPTION: Demonstrates the verbose way of checking for the presence of keys in a request using if blocks, which the sanitizeInput helper method aims to replace.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nif($request->has('data.name')) {\n   $data['name'] = $request->input('data.name'); // or use getInputByKey()\n}\n\nif($request->has('data.description')) {\n   $data['description'] = $request->input('data.description'); // or use getInputByKey()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Searchable Fields in a Repository\nDESCRIPTION: This code snippet demonstrates how to define searchable fields within a repository using the `$fieldSearchable` property. It allows specifying which model attributes can be searched and the type of search operation (e.g., `like`, `=`). This enables API query parameters to filter data.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/repositories.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass DemoRepository extends Repository\n{\n    protected $fieldSearchable = [\n        'name'  => 'like',\n        'email' => '=',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Repository in PHP with Apiato\nDESCRIPTION: Demonstrates how to define a basic repository class that extends from the base Repository parent class. Includes a fieldSearchable property for API query parameters.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/optional-components/repositories.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass DemoRepository extends Repository\n{\n    protected $fieldSearchable = [\n        'name'  => 'like',\n        'email' => '=',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Deleted Response\nDESCRIPTION: This shows how to use the `deleted` method to return a response with a 202 status code and a success message after deleting a model in Apiato. It takes the deleted model as an argument.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/controllers.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$this->deleted($deletedModel)\n```\n\n----------------------------------------\n\nTITLE: Publishing Vendor Configurations for Customization - Apiato (Shell)\nDESCRIPTION: Shows a shell command that publishes vendor configuration files, enabling further customization of the documentation generator. Should be run from the project root. This creates a copy of the config in the application's config path for editing.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Installing Localization Container via Composer\nDESCRIPTION: This code snippet demonstrates installing the APIATO Localization Container using Composer.  The command downloads and installs the package and its dependencies into the project.  It is a prerequisite for utilizing the localization features.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/localization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/localization-container\n```\n\n----------------------------------------\n\nTITLE: Defining an Action Method Accepting a DataTransporter in PHP\nDESCRIPTION: Defines an Action's `run` method signature that type-hints a `DataTransporter`. When calling this action using `Apiato::call`, an instance of `DataTransporter` should be passed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// if you have the following function signature\npublic function run(DataTransporter $data)\n```\n\n----------------------------------------\n\nTITLE: Generating an Apiato Sub Action using Artisan\nDESCRIPTION: Demonstrates the interactive Artisan command used to generate a new Sub Action class within an Apiato project. This command simplifies the creation process by scaffolding the necessary file.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/subactions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:subaction\n```\n\n----------------------------------------\n\nTITLE: Seed the database\nDESCRIPTION: This command seeds the database with default data, including a Super Admin user and predefined roles and permissions. It populates the database with initial values for the application to function correctly.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan db:seed\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links\nDESCRIPTION: This snippet demonstrates how to create regular Markdown links using URL paths or relative file paths. These links can point to other pages within the documentation or to external websites.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/markdown-features.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nLet's see how to [Create a page].\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nLet's see how to [Create a page].\n```\n\n----------------------------------------\n\nTITLE: Generating New Container - Apiato - Bash\nDESCRIPTION: Use the Apiato code generator command-line tool to automatically create a new Container folder structure. This is the recommended method for creating new containers compared to manual creation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/software-architectural-patterns.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan apiato:container\n```\n\n----------------------------------------\n\nTITLE: ApiDocJS Command Used Behind the Scenes\nDESCRIPTION: The actual ApiDocJS command that runs when you execute apiato:apidoc. This specifies configuration, files to process, and output location.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\napidoc -c app/Containers/Documentation/ApiDocJs/public -f public.php -i app -o public/api/documentation\n```\n\n----------------------------------------\n\nTITLE: Alternative merge strategy to manually resolve conflicts in Git\nDESCRIPTION: Performs a merge that prompts the user to manually resolve conflicts, providing greater control over conflict resolution during the upgrade process.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit merge --allow-unrelated-histories apiato-{version}\n```\n\n----------------------------------------\n\nTITLE: Defining React Components in Markdown (Alternative)\nDESCRIPTION: This snippet demonstrates the use of React components inside Markdown, enabled by MDX. The code defines a functional component `Highlight` which is then used within the Markdown content. The output renders the highlighted text with a background color. It also includes the use of inline components in a different context.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: '#fff',\n      padding: '0.2rem',\n    }}>\n    {children}\n  </span>\n);\n\n<Highlight color=\"#25c2a0\">Docusaurus green</Highlight> and <Highlight color=\"#1877F2\">\n  Facebook blue\n</Highlight> are my favorite colors.\n```\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple Domains in Homestead Configuration\nDESCRIPTION: Example of mapping multiple domains (main site, API, admin panel) to different web applications in Homestead configuration.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n\t- map: apiato.test\n  \t  to: /{full-path-to}/clients/web/user\n\t- map: admin.apiato.test\n  \t  to: /{full-path-to}/clients/web/admin\n```\n\n----------------------------------------\n\nTITLE: Generating Apiato Action (Shell)\nDESCRIPTION: Command-line interface command to interactively generate a new Action class within an Apiato container. Prompts the user for necessary details like section, container, and action name.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/actions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:action\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Original Request from a Transporter in PHP\nDESCRIPTION: Explains how to access the original `Request` object from which a `Transporter` was created (using `toTransporter()`) via the `$transporter->request` property.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$originalRequest = $transporter->request;\n```\n\n----------------------------------------\n\nTITLE: API Endpoint DocBlock Example\nDESCRIPTION: Example of a DocBlock for documenting an API endpoint. It includes information like the API group, name, method, description, version, permissions, headers, parameters, and success/error responses.  These DocBlocks must be written in the Routes files to be loaded by the documentation generator.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/documentation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @apiGroup           Authentication\n * @apiName            UserLogin\n * @api                {post} /clients/web/login User Login\n * @apiDescription     Description Here....\n * @apiVersion         1.0.0\n * @apiPermission      none\n *\n * @apiHeader          Accept application/json\n *\n * @apiParam           {String}     email\n * @apiParam           {String}     password\n *\n * @apiSuccessExample  {json}       Success-Response:\n *   HTTP/1.1 200 OK\n *   {\n *     \"data\": {\n *       \"id\": \"XbPW7awNkzl83LD6\",\n *       \"name\": \"Super Admin\",\n *       \"email\": \"admin@admin.com\"\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"401 Credentials Incorrect.\",\n *   }\n *\n * @apiErrorExample  {json}       Error-Response:\n *   {\n *      \"message\":\"Invalid Input.\",\n *      \"errors\":{\n *         \"email\":[\n *            \"The email field is required.\"\n *         ]\n *      },\n *   }\n */\n\nuse App\\Containers\\AppSection\\Authentication\\UI\\API\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::post('clients/web/login', Controller::class);\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Actions using Artisan Command (Shell)\nDESCRIPTION: Shows the Apiato Artisan command `apiato:list:actions` used to display a list of all defined Action classes within the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/actions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:list:actions\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Generation Command - Apiato (Shell)\nDESCRIPTION: Demonstrates the shell command to invoke the Apiato documentation generator via Artisan. Assumes prior installation of the documentation generator and all dependencies. Must be run from the project root. On execution, generates API documentation from docblocks present in the project's route files.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/documentation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Generating a new Config File - Apiato - PHP\nDESCRIPTION: This command generates a new configuration file in the Apiato framework. It uses the `apiato:generate:configuration` Artisan command. The command is interactive and prompts the user for the required details.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/configs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:configuration\n```\n\n----------------------------------------\n\nTITLE: Authorization Failed API Response (JSON)\nDESCRIPTION: Shows the standard JSON format returned by the Apiato framework when an authorization check fails for a request. It contains a single key, 'message', indicating the reason for failure.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/authorization.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"This action is unauthorized.\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Markdown\nDESCRIPTION: This snippet demonstrates how to embed images in a Markdown document. The image should be placed in the `static/img/` directory, and the Markdown declaration should use a relative path to the image.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/markdown-features.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![Docusaurus logo](/img/logo.png)\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Welcome Page View\nDESCRIPTION: HTML code sample demonstrating a basic welcome page view structure with title and content elements.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/views.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"content\">\n            <div class=\"title\">Welcome</div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing the Social Auth Container using Composer (Shell)\nDESCRIPTION: Installs the `apiato/social-auth-container` package using Composer. This is the first step in adding social authentication functionality to an Apiato project. Requires Composer to be installed.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/social-authentication.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/social-auth-container\n```\n\n----------------------------------------\n\nTITLE: Publish Documentation Configs\nDESCRIPTION: Publishes the default configuration file for the Documentation Generator Container to allow customization. The configuration file will be located at `app/Ship/Configs/vendor-documentation.php`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/documentation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Listing Apiato Actions (Shell)\nDESCRIPTION: Command-line interface command to display a list of all existing Action classes registered within the Apiato application's containers. Useful for inspecting available actions.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/actions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:list:actions\n```\n\n----------------------------------------\n\nTITLE: Create SQLite Database\nDESCRIPTION: This command creates an empty SQLite database file named `database.sqlite` inside the `database` directory of the Apiato application. This file will store the application's data.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntouch database/database.sqlite\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Apiato PHP Framework\nDESCRIPTION: Command to run the PHPUnit test suite in an Apiato project. Make sure the environments in phpunit.xml are correctly configured first.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers with Laradock for Apiato\nDESCRIPTION: Docker Compose command to start the necessary containers (NGINX, MySQL, Redis, Beanstalkd) for running an Apiato application with Laradock.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d nginx mysql redis beanstalkd\n```\n\n----------------------------------------\n\nTITLE: Generating a Service Provider using Artisan Command (Shell)\nDESCRIPTION: Demonstrates using the `apiato:generate:provider` Artisan command to create various service providers, including the `MiddlewareServiceProvider` needed for registering container-specific middlewares.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/middlewares.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:generate:provider\n```\n\n----------------------------------------\n\nTITLE: Example Homestead Site Configuration for Apiato\nDESCRIPTION: Example Homestead configuration for mapping domain names to the Apiato public directory, enabling proper routing in the development environment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nsites:\n\t- map: api.apiato.test\n  \t  to: /{full-path-to}/apiato/public\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Models\nDESCRIPTION: Illustrates the directory structure where Models should reside within an Apiato project. Models are located within the `app/Containers/{Section}/{Container}/Models` directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/models.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── Models\n                ├── Model.php\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Assigning Permissions to Admin Role\nDESCRIPTION: Command to give the admin role access to all seeded permissions in the system. This is optional and can be run at any time.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:permissions:toRole admin\n```\n\n----------------------------------------\n\nTITLE: Installing Localization Container Using Composer in Shell\nDESCRIPTION: Installs the Localization container package from Composer to enable localization features in the Apiato application. Requires a PHP environment with Composer installed.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/localization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/localization-container\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File for Local Development\nDESCRIPTION: Example configuration for the hosts file to map domain names to localhost or the Docker/Vagrant IP address.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1  apiato.test\n127.0.0.1  api.apiato.test\n127.0.0.1  admin.apiato.test\n```\n\n----------------------------------------\n\nTITLE: Generating Mails using Artisan Command\nDESCRIPTION: Use the `apiato:generate:mail` Artisan command to interactively create new Mail classes within an Apiato project, following the framework's conventions.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/mail.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:mail\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Laravel Artisan Command in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a simple custom Laravel Artisan command by extending the APIATO base ConsoleCommand class. It defines the console command's signature, description, constructor, and the handle method which executes the command logic, in this case printing a welcome message. Dependencies include the App\\Ship\\Parents\\Commands\\ConsoleCommand base class. The signature property specifies the CLI command name, and the handle method processes the command when invoked. No business logic should be included here, instead it should delegate to Actions. Expected output is a console message 'Welcome to apiato :)' in green color.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/commands.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Welcome\\UI\\CLI\\Commands;\n\nuse App\\Ship\\Parents\\Commands\\ConsoleCommand;\n\n/**\n * Class SayWelcomeCommand\n *\n * @author  Mahmoud Zalt  <mahmoud@zalt.me>\n */\nclass SayWelcomeCommand extends ConsoleCommand\n{\n\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = \"apiato:welcome\";\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = \"Just saying Welcome.\";\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return void\n     */\n    public function handle()\n    {\n        $this->info('Welcome to apiato :)'); // green color\n        // $this->line('Welcome to apiato :)'); // normal color\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Homestead for Apiato Development\nDESCRIPTION: Example Homestead configuration for mapping domains to the Apiato public directory. Useful when using Vagrant for development.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nsites:\n\t- map: api.apiato.test\n  \t  to: /{full-path-to}/apiato/public\n```\n\n----------------------------------------\n\nTITLE: Running Testing Seeder Command with Artisan\nDESCRIPTION: Demonstrates how to run the testing seeder using `php artisan apiato:seed-test`.  The seeder is defined in `app/Ship/Seeders/SeedTestingData.php`\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/optional-components/seeders.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:seed-test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables with Laradock in Docker\nDESCRIPTION: Command to copy the example environment file to create a .env file for Laradock Docker configuration in an Apiato project.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncp env-example .env\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middlewares in HttpKernel\nDESCRIPTION: Indicates where general (application-wide) middlewares are registered within the HttpKernel class. These middlewares affect all requests within the application.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/middlewares.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Available Apiato Artisan Generator Commands\nDESCRIPTION: This comprehensive list details the specific Artisan commands available for generating various Apiato components. Each command scaffolds the respective file structure within a container, automating boilerplate code creation for elements like Actions, Configurations, Containers (API/Web), Controllers, Events, Exceptions, Factories, Jobs, Listeners, Mailables, Middleware, Migrations, Models, Notifications, Policies, Providers, READMEs, Repositories, Requests, Routes, Seeders, SubActions, Tasks, Tests (Functional/Unit/TestCase), Transformers, and Value objects.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/framework-features/code-generator.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan apiato:generate:action           Create a Action file for a Container\nphp artisan apiato:generate:configuration    Create a Configuration file for a Container\nphp artisan apiato:generate:container        Create a Container for apiato from scratch\nphp artisan apiato:generate:container:api    Create a Container for apiato from scratch (API Part)\nphp artisan apiato:generate:container:web    Create a Container for apiato from scratch (WEB Part)\nphp artisan apiato:generate:controller       Create a controller for a container\nphp artisan apiato:generate:event            Create a new Event class and its corresponding Listener\nphp artisan apiato:generate:exception        Create a new Exception class\nphp artisan apiato:generate:factory          Create a new Model Factory class for a given Model\nphp artisan apiato:generate:job              Create a new Job class\nphp artisan apiato:generate:listener         Create a new Event Listener class\nphp artisan apiato:generate:mail             Create a new Mail class\nphp artisan apiato:generate:middleware       Create a new Middleware class\nphp artisan apiato:generate:migration        Create an \"empty\" migration file for a Container\nphp artisan apiato:generate:model            Create a new Model class\nphp artisan apiato:generate:notification     Create a new Notification class\nphp artisan apiato:generate:policy           Create a new Policy class\nphp artisan apiato:generate:provider         Create a Service Provider for a Container\nphp artisan apiato:generate:readme           Create a README file for a Container\nphp artisan apiato:generate:repository       Create a new Repository class\nphp artisan apiato:generate:request          Create a new Request class\nphp artisan apiato:generate:route            Create a new Route class\nphp artisan apiato:generate:seeder           Create a new Seeder class\nphp artisan apiato:generate:subaction        Create a new SubAction class\nphp artisan apiato:generate:task             Create a Task file for a Container\nphp artisan apiato:generate:test:functional  Create a Functional Test file.\nphp artisan apiato:generate:test:testcase    Create the TestCase file.\nphp artisan apiato:generate:test:unit        Create a Unit Test file.\nphp artisan apiato:generate:transformer      Create a new Transformer class for a given Model\nphp artisan apiato:generate:value            Create a new Value class\n```\n\n----------------------------------------\n\nTITLE: Action UI Getting Example\nDESCRIPTION: This snippet is a companion to the Action UI setting example. It shows how to retrieve the UI type set previously on the Action using the `getUI` method. The method will return the UI string previously assigned via `setUI`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/controllers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$action->getUI(); // will return 'web'\n```\n\n----------------------------------------\n\nTITLE: Generating a Container README file with Apiato Artisan Command using PHP\nDESCRIPTION: This snippet demonstrates how to generate a README file for a Container in an Apiato project via an artisan command. The snippet relies on the Laravel artisan CLI being available. By executing `php artisan apiato:generate:readme`, developers can create descriptive documentation files at the root of a Container to explain its purpose and usage.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/architecture-concepts/container.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan apiato:generate:readme\n```\n\n----------------------------------------\n\nTITLE: Login Endpoint Body with Example Credentials (JSON)\nDESCRIPTION: This JSON snippet shows the expected body structure for the 'login' endpoint in the Apiato API collection within Postman.  It illustrates the email and password fields required for user authentication.  The provided example credentials should be changed to test with alternative users and credentials.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/miscellaneous/postman.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"email\": \"admin@admin.com\",\n\t\"password\": \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Events in Apiato Using PHP\nDESCRIPTION: This snippet shows how to enable event handling by adding the EventServiceProvider class to the serviceProviders array in the MainServiceProvider of a container. This registration is necessary before events can be used, allowing the Laravel event system to integrate properly within Apiato. It requires a PHP environment with appropriate Laravel service providers set up.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/events.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Containers\\Car\\Providers;\n\nclass MainServiceProvider extends MainProvider\n{\n\n    /**\n     * Container Service Providers.\n     *\n     * @var array\n     */\n    public $serviceProviders = [\n        EventServiceProvider::class,\n    ];\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring hosts file for Vagrant\nDESCRIPTION: Maps the Apiato domains to the Vagrant IP address in the hosts file for local development.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n192.168.10.10   apiato.test\n192.168.10.10   api.apiato.test\n192.168.10.10   admin.apiato.test\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple domains in Homestead\nDESCRIPTION: Example configuration for mapping multiple domains to different applications in Homestead.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/getting-started/installation.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n\t- map: apiato.test\n  \t  to: /{full-path-to}/clients/web/user\n\t- map: admin.apiato.test\n  \t  to: /{full-path-to}/clients/web/admin\n```\n\n----------------------------------------\n\nTITLE: Sending Mail from Action in PHP using Apiato\nDESCRIPTION: Example of how to use the Mail facade to send an email from an Action or Task in Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/mails.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nMail::send(new UserRegisteredMail($user));\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to create the .env file by copying the example template. The .env file contains environment-specific configuration variables.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching in Apiato via Environment Variable\nDESCRIPTION: Alternative method to enable repository caching using an environment variable in the .env file.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/repository/repositories.md#_snippet_18\n\nLANGUAGE: dotenv\nCODE:\n```\nELOQUENT_QUERY_CACHE=true\n```\n\n----------------------------------------\n\nTITLE: Merge Upstream Apiato Changes into Upgrade Branch with Conflict Handling - Shell\nDESCRIPTION: Merges the 'apiato-{version}' branch containing upstream changes into the current 'upgrade-apiato' branch using one of two strategies: (A1) automatic overwrite of local changes by upstream changes or (A2) manual conflict resolution. Options include parameters to allow unrelated histories. This step integrates upgraded code into the working branch.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ngit merge --allow-unrelated-histories --strategy-option=theirs apiato-{version}\n// Example:   git merge --allow-unrelated-histories --strategy-option=theirs apiato-8.0\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit merge --allow-unrelated-histories apiato-{version}\n// Example:   git merge --allow-unrelated-histories apiato-8.0\n```\n\n----------------------------------------\n\nTITLE: Generate API Documentation\nDESCRIPTION: Generates the API documentation based on the DocBlocks defined in the routes files.  Requires ApiDocJs to be installed.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/documentation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan apiato:apidoc\n```\n\n----------------------------------------\n\nTITLE: Token Expiration Configuration (PHP)\nDESCRIPTION: This code snippet shows how to configure the token expiration times within the `apiato.php` configuration file. It allows setting the expiration time in days for access and refresh tokens. Modifying these values allows customization of the token lifetimes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/authentication.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Access Token Expiration\n|--------------------------------------------------------------------------\n|\n| In Days. Default to 3650 days = 10 years\n|\n*/\n'expires-in' => env('API_TOKEN_EXPIRES', 3650),\n\n/*\n|--------------------------------------------------------------------------\n| Refresh Token Expiration\n|--------------------------------------------------------------------------\n|\n| In Days. Default to 3650 days = 10 years\n|\n*/\n'refresh-expires-in' => env('API_REFRESH_TOKEN_EXPIRES', 3650)\n```\n\n----------------------------------------\n\nTITLE: Generating Event Service Provider\nDESCRIPTION: This command generates an EventServiceProvider using the Apiato Artisan command.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/events.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan apiato:generate:provider\n```\n\n----------------------------------------\n\nTITLE: Installing ApiDocJs Dependency\nDESCRIPTION: Command to install the ApiDocJs npm package which is required for the documentation generator.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/documentation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install apidoc\n```\n\n----------------------------------------\n\nTITLE: Passing Hashed ID in Request Body as JSON\nDESCRIPTION: Demonstrates how to include a hashed ID in the HTTP request body using JSON format.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/hash-id.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"XbPW7awNkzl83LD6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Hashed ID as Query Parameter\nDESCRIPTION: Shows how to pass a hashed ID to the API as a query string parameter.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/security/hash-id.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/items?id=XbPW7awNkzl83LD6\n```\n\n----------------------------------------\n\nTITLE: Install Documentation Generator Container\nDESCRIPTION: Installs the Documentation Generator Container package using Composer. This adds the package to the project's dependencies.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/pacakges/documentation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/documentation-generator-container\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Apiato\nDESCRIPTION: Command to run automated tests using PHPUnit to verify the application functionality.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Publishing Package Configuration Files\nDESCRIPTION: Command to publish the package configuration files to your application.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/pacakges/documentation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan vendor:publish\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Translation Functions for String Localization in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve and display translated strings using Laravel's __() helper function. It shows how to fetch the 'welcome' translation from the 'messages' language file based on the current locale. Dependencies include a properly configured Laravel environment with corresponding language files present in the correct directory structure. The 'messages.welcome' key is used as an example, and the output can be returned, echoed, or dumped for debugging. Inputs are the translation key strings; outputs are the localized strings.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/optional-components/languages.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n__('messages.welcome');\n\necho __('messages.welcome');\n\ndd(__('messages.welcome'));\n```\n\n----------------------------------------\n\nTITLE: Result of Route Generation\nDESCRIPTION: This example shows the location of the generated `CreateCar.v1.public.php` route file.  It highlights how the generator organizes the files within the project structure based on the inputs provided during the generation process.  It shows the expected output of the previous code snippet.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/code-generator.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCreateCar.v1.public.php file will be created in App\\Containers\\AppSection\\Car\\UI\\API\\Routes\\\n```\n\n----------------------------------------\n\nTITLE: Accessing Ship Folder Translation Apiato PHP\nDESCRIPTION: This example shows how to access a translation string located specifically within the `Ship` folder's `Languages` directory. Translations in the Ship folder are accessed using the special `ship` namespace with the `__()` helper, formatted as `'ship::filename.key'`. \nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/localization.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n__('ship::notifications.welcome')\n```\n\n----------------------------------------\n\nTITLE: Attempting Non-Namespaced Translation Access Apiato PHP\nDESCRIPTION: This snippet illustrates what happens when attempting to access a namespaced translation string without providing the correct namespace. Using `__('notifications.welcome')` for a translation defined in `mySection@myContainer` will fail to find the translation, typically resulting in the helper returning the key string itself.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/localization.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n__('notifications.welcome')\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations (Shell)\nDESCRIPTION: This command executes all pending database migrations in an Apiato project. Apiato provides a pre-configured migration for the notifications table, making it unnecessary to generate it manually. Running this command creates the required table for database notifications.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/notifications.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Changes to Git - Bash\nDESCRIPTION: Stages all changes and performs the initial commit with a message. Dependency: Git repository initialized and working files present. 'git add .' stages all files; 'git commit -m' records them with a commit message. Used typically as the first commit after project initialization.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add . && git commit -m 'first commit'\n```\n\n----------------------------------------\n\nTITLE: Defining Container Main Service Provider (PHP)\nDESCRIPTION: This PHP code demonstrates the basic structure of a container's `MainServiceProvider`. It extends `App\\Ship\\Parents\\Providers\\MainServiceProvider` (aliased as `ParentMainServiceProvider`) and defines public arrays `$serviceProviders` and `$aliases`. These arrays are used by Apiato's parent class to automatically register container-specific providers and facades listed within them.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/service-providers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Ship\\Parents\\Providers\\MainServiceProvider as ParentMainServiceProvider;\n\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    public array $serviceProviders = [\n        CustomServiceProvider::class,\n        MiddlewareServiceProvider::class,\n        PassportServiceProvider::class,\n    ];\n\n    public array $aliases = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Homestead for Apiato Development Environment\nDESCRIPTION: Composer command to install Laravel Homestead as a development dependency for Apiato, providing a virtualized development environment.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/installation.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require laravel/homestead --dev\n```\n\n----------------------------------------\n\nTITLE: Example Google Response - JSON\nDESCRIPTION: Example JSON response from the server, containing user data and a Personal Access Token after authenticating with Google. This shows the data structure returned by the API after successful social authentication.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/social-authentication.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        // user data\n        .\n        .\n        .\n        // additional social data if you have updated your transformer as mentioned above\n        \"social_auth_provider\": \"google\",\n        \"social_id\": \"113834952367767922133\",\n        \"social_avatar\": {\n            \"avatar\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\",\n            \"original\": \"https:\\/\\/lh6.googleusercontent.com\\/-OSItz6IHbSw\\/AAA\\/AMZuucltEs\\/s96-c\\/photo.jpg\"\n        }\n    },\n    \"meta\": {\n        \"include\": [\n            \"roles\"\n        ],\n        \"custom\": {\n            \"token_type\": \"personal\",\n            \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9....\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Authorization Trait for Apiato Requests (PHP)\nDESCRIPTION: Example of creating a reusable PHP Trait (`IsAuthorPermissionTrait`) to encapsulate custom authorization logic. The `isAuthor` method within the trait calls an Apiato Task (`User@CheckIfUserHasProperRoleTask`) to determine if the authenticated user has the 'author' role. This promotes code reuse for authorization checks across multiple Requests.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/requests.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Containers\\User\\Traits;\n\nuse Apiato\\Core\\Foundation\\Facades\\Apiato;\n\ntrait IsAuthorPermissionTrait\n{\n    public function isAuthor()\n    {\n        // The task needs to be implemented properly!\n        return Apiato::call('User@CheckIfUserHasProperRoleTask', [$this->user(), ['author']]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching a Specific Field (URL)\nDESCRIPTION: Example demonstrating how to target a specific field for searching using the `?search=field:keyword` syntax. The specified 'field' must be defined in the repository's `$fieldSearchable` array.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_5\n\nLANGUAGE: http\nCODE:\n```\napi.domain.test/endpoint?search=field:keyword here\n```\n\n----------------------------------------\n\nTITLE: Switch Back to Upgrade Working Branch - Shell\nDESCRIPTION: Checks out the 'upgrade-apiato' branch, which is the target branch where the official Apiato changes will be merged. Prepares the working environment for integrating and testing upgrade changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout upgrade-apiato\n```\n\n----------------------------------------\n\nTITLE: Retrieving UI Context within an Action in Apiato (PHP)\nDESCRIPTION: Shows how to retrieve the currently set User Interface context (previously set using `setUI()`) within an Action using the `getUI()` method. This enables conditional logic inside the Action based on the origin of the call (Web, API, or CLI).\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/main-components/controllers.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->getUI();\n```\n\n----------------------------------------\n\nTITLE: Verifying tracking branches with Git branch -vv\nDESCRIPTION: Displays all local branches with their upstream tracking status, confirming that the local branch is correctly linked to the desired remote branch.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -vv\n```\n\n----------------------------------------\n\nTITLE: Installing Apiato Localization Container Shell\nDESCRIPTION: This command installs the Apiato localization container package into your project using Composer. It adds the necessary dependencies to enable localization features within the framework.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/additional-features/localization.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require apiato/localization-container\n```\n\n----------------------------------------\n\nTITLE: Installing Payment Container via Composer and Running Migrations\nDESCRIPTION: This shell script installs the APIato payment container package via Composer and initializes the database by executing migrations, setting up the environment for payment functionalities.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/additional-features/apiato-containers/payments.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require apiato/payment-container\n\nNow run `php artisan migrate`\n```\n\n----------------------------------------\n\nTITLE: Enabling Hashed ID Decoding for Search Criteria (PHP)\nDESCRIPTION: Demonstrates how to configure `addRequestCriteria` in an Apiato Task or Action to automatically decode specific hashed ID fields before searching. Pass an array of field names that contain hashed IDs as the second argument. This is necessary when using Apiato's Hash ID feature and searching these fields via the `?search=` parameter (e.g., `?search=parent_id:aYOxlpzRMwrX3gD7`). The 'id' field and single hashed value searches (e.g., `?search=XbPW7awNkzl83LD6`) are decoded by default.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n   app(GetAllUsersTask::class)->addRequestCriteria(null, ['id', 'parent_id', 'some_hashed_id'])->run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting in Apiato PHP Configuration\nDESCRIPTION: PHP configuration snippet showing rate limiting settings in the Apiato config file. It specifies whether rate limiting is enabled, the number of allowed attempts per minute, and the expiration time in minutes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/core-features/rate-limiting.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'throttle' => [\n    'enabled' => env('GLOBAL_API_RATE_LIMIT_ENABLED', true),\n    'attempts' => env('GLOBAL_API_RATE_LIMIT_ATTEMPTS_PER_MIN', '30'),\n    'expires' => env('GLOBAL_API_RATE_LIMIT_EXPIRES_IN_MIN', '1'),\n]\n```\n\n----------------------------------------\n\nTITLE: Storing Data on Request Objects in PHP\nDESCRIPTION: Demonstrates how to store and retrieve temporary data on request objects during the request lifecycle, which can be useful for passing data between different components.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/main-components/requests.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$request->keep(['someKey' => $someValue]);\n\n// Later in the request lifecycle\n$someValue = $request->retrieve('someKey');\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request Payload - API - JSON\nDESCRIPTION: Presents a sample JSON request body structure containing nested objects and different data types, including an empty string and a boolean. This payload is used as the input for demonstrating the `sanitizeInput` helper method.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/requests.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"Demo\",\n    \"description\": \"Some description\",\n    \"is_private\": false,\n    \"address\": \"\",\n    \"foo\": {\n      \"number\": 1,\n      \"bar\": \"bar\"\n    }\n  },\n  \"meta\": \"some meta data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling RequestCriteria in Apiato Action (PHP)\nDESCRIPTION: Shows how to enable standard query parameter processing (like sorting, searching, filtering via L5 Repository's RequestCriteria) within an Apiato Action by calling `addRequestCriteria()` on a Task instance. The `removeRequestCriteria()` method can be used to disable it if previously enabled. Requires the `Apiato\\Core\\Traits\\HasRequestCriteriaTrait`.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/core-features/query-parameters.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass GetAllAdminsAction extends Action\n{\n    public function run()\n    {\n        return app(GetAllUsersTask::class)->addRequestCriteria()->run();\n//        return app(GetAllUsersTask::class)->removeRequestCriteria()->run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Apiato Seeders Illustrated in Markdown\nDESCRIPTION: Illustrates the required folder convention for placing Apiato seeders within the project. Seeders must reside in a container-specific directory under `app/Containers/{Section}/{Container}/Data/Seeders`. This structure enforces separation of concerns by section and container within the Apiato architecture.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/optional-components/seeders.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└│ Containers\n  └│ Section\n    └│ Container\n      └│ Data\n        └│ Seeders\n          └│ DemoSeeder_1.php\n          └│ AnotherDemoSeeder_2.php\n          └│ ...\n```\n\n----------------------------------------\n\nTITLE: Setting local branch to track an upstream branch with Git branch --set-upstream-to\nDESCRIPTION: This snippet sets the local branch to track the remote upstream branch, ensuring synchronization and ease of updates during the upgrade process.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit branch --set-upstream-to upstream/{upstream-branch-name}\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Metadata in Docusaurus Markdown - md\nDESCRIPTION: This snippet demonstrates how to define front matter metadata at the top of a Docusaurus Markdown file using Markdown syntax. The front matter block (delimited by ---) can include keys such as id, title, description, and sidebar_label, providing metadata for routing, navigation, and sidebar labeling within the Docusaurus site. The remainder of the file contains regular Markdown content as the document body. No external dependencies are required, but a Docusaurus-compatible Markdown parser is needed to utilize these fields.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/markdown-features.mdx#_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n---\nid: my-doc\ntitle: My document title\ndescription: My document description\nsidebar_label: My doc\n---\n\nMarkdown content\n\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for View Files in Laravel APIato\nDESCRIPTION: Defines the directory organization for container-specific and general view files, ensuring a standardized placement for views within the project structure. It helps developers locate and organize view templates appropriately, following the specified hierarchy.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/components/main-components/views.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── UI\n                └── WEB\n                    └── Views\n                        ├── view-a.php\n                        ├── view-b.php\n                        └── ...\n```\n\n----------------------------------------\n\nTITLE: Updating and Synchronizing Remotes and Branches in Git - Bash\nDESCRIPTION: Covers how to fetch remote updates and hard reset a local branch to synchronize with the upstream repository. Essential for keeping feature or contribution branches up to date with latest changes. Requires no uncommitted changes, as 'reset --hard' will overwrite local history.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/contribution-guide.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --all\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout apiato\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard upstream/master\n```\n\n----------------------------------------\n\nTITLE: Views Folder Structure\nDESCRIPTION: This code shows the recommended folder structure for Views within an Apiato container. Views are located under the UI/WEB/Views directory within the container.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/main-components/views.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\napp\n└── Containers\n    └── Section\n        └── Container\n            └── UI\n                └── WEB\n                    └── Views\n                        ├── view-a.php\n                        ├── view-b.php\n                        └── ...\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in Markdown Using MDX - jsx\nDESCRIPTION: This snippet defines and uses a custom React component (Highlight) inside a Markdown file via MDX syntax. The Highlight component is designed to display its children with custom background and text colors, using inline styles. Two highlights are rendered with different color props and inner text. Requires a Docusaurus setup with MDX support, and the necessary JSX/React environment. The main parameters are children (the content to highlight) and color (background color); the output is styled spans inline with the text.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/markdown-features.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: 'red',\n      padding: '0.2rem',\n    }}>\n    {children}\n  </span>\n);\n\n<Highlight color=\"#25c2a0\">Docusaurus green</Highlight> and <Highlight color=\"#1877F2\">Facebook blue</Highlight> are my favorite colors.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Transporter Folder Structure in Apiato\nDESCRIPTION: Illustrates the standard directory structure for organizing Transporter classes within an Apiato container. Transporters are typically placed within the 'Data/Transporters' subdirectory of a specific container.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/main-components/transporters.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n - App\n    - Containers\n        - {container-name}\n            - Data\n                - Transporters\n                    - CreateUserTransporter.php\n                    - ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PHP Helper Function in Apiato\nDESCRIPTION: Example of defining a basic helper function that adds two integers together. It includes a function existence check to prevent redefinition errors.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/helpers.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (!function_exists('add')) {\n    function add(int $firstNumber, int $secondNumber): int\n    {\n        return $firstNumber + $secondNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies for API Documentation\nDESCRIPTION: Command to install ApiDocJS and other Node.js dependencies required for generating API documentation.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking Hashed IDs in Model Collection Using inIds - Apiato Core (PHP)\nDESCRIPTION: This snippet shows how to use the inIds test helper to verify whether a given hashed ID exists in a collection of models. The method takes a hashed string and a collection, returning a boolean if the ID is present. It is especially useful in test scenarios where hashed identifiers, not raw IDs, are used for model references. No additional dependencies are required beyond a model class with a collection and a valid hashed ID. This method is deprecated and will be removed in future releases.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/components/optional-components/tests.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$hashedId = 'hashed_123';\n$collection = Model::all();\n\n$isInCollection = $this->inIds($hashedId, $collection);\n```\n\n----------------------------------------\n\nTITLE: Mapping All Domains to Apiato in Homestead\nDESCRIPTION: Example configuration for mapping all domains (main, API, admin) to the same Apiato public directory when all applications are within Apiato.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/installation.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n    - map: api.apiato.test\n      to: /{full-path-to}/apiato/public\n    - map: apiato.test\n      to: /{full-path-to}/apiato/public\n    - map: admin.apiato.test\n      to: /{full-path-to}/apiato/public\n```\n\n----------------------------------------\n\nTITLE: Running Tests After Upgrade (Bash)\nDESCRIPTION: Executes the project's PHPUnit test suite using the `vendor/bin/phpunit` command. This step is crucial after completing an upgrade (like from 4.1 to 5.0) to verify that the application functionality remains intact and no regressions were introduced.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Merging upgrade branch back into main branch with Git checkout and merge\nDESCRIPTION: Switches to the main branch (e.g., master) and merges the upgraded changes from 'upgrade-apiato' to finalize the upgrade process. Then, checks the Laravel version.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit merge upgrade-apiato\n\nphp artisan -V\n```\n\n----------------------------------------\n\nTITLE: Updating Service Provider in config/app.php (PHP)\nDESCRIPTION: Requires replacing the old `PortoServiceProvider` class reference with the new `ApiatoProvider` class reference within the `providers` array in the `config/app.php` file. This change is necessary when upgrading from Apiato 4.1 to 5.0.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Replace this:\nApp\\Ship\\Engine\\Providers\\PortoServiceProvider::class\n\n// With this:\nApiato\\Core\\Providers\\ApiatoProvider::class\n```\n\n----------------------------------------\n\nTITLE: Removing Obsolete Composer Dependencies (JSON)\nDESCRIPTION: Lists specific Composer dependencies that must be removed from the `require` section of the `app/Ship/composer.json` file when upgrading from Apiato 4.1 to 5.0. These packages are either replaced or no longer needed in the newer version.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/upgrade-guide.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nguzzlehttp/guzzle,\nprettus/l5-repository,\nbarryvdh/laravel-cors,\nspatie/laravel-fractal,\nvinkla/hashids,\njohannesschobel/apiato-container-installer\n```\n\n----------------------------------------\n\nTITLE: Creating and Tracking Branches with Git in Shell\nDESCRIPTION: Commands to create a new branch named 'apiato', switch to it, and set it to track the upstream master branch. This setup is crucial for synchronizing local contributions with the central Apiato repository's main development line.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/contribution-guide.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b apiato\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout apiato\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit branch --set-upstream-to upstream/master\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit branch -vv\n```\n\n----------------------------------------\n\nTITLE: Synchronizing, Cherry-Picking, and Pushing Changes Using Git in Shell\nDESCRIPTION: This snippet outlines the recommended workflow before contributing: fetching all remotes, checking out and resetting the apiato branch to match the upstream master branch, creating a feature branch from apiato, cherry-picking commits selectively from master, pushing to upstream, and finally creating a PR. It ensures contributors work on up-to-date code and submit focused changes.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/contribution-guide.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit fetch --all\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout apiato\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit reset --hard upstream/master\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout apiato\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b feature-awesome\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit log master\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit cherry-pick {commit-ID}\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit push upstream feature-awesome\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch from the current branch using Git checkout command\nDESCRIPTION: This snippet demonstrates how to create a new branch named 'upgrade-apiato' from the current branch to prepare for the upgrade process, ensuring changes are isolated.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-10.x/upgrade-guide.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b upgrade-apiato\n```\n\n----------------------------------------\n\nTITLE: Displaying Code Blocks with Syntax Highlighting (Alternative)\nDESCRIPTION: This snippet demonstrates how to display code blocks with syntax highlighting in Markdown. It utilizes the ````jsx` syntax with an optional `title` attribute. This snippet shows the same function `HelloDocusaurus`. The output is the rendered code block with syntax highlighting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx title=\"src/components/HelloDocusaurus.js\"\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Install NPM dependencies\nDESCRIPTION: This command installs the Node.js dependencies required by the documentation generator. It reads the `package.json` file and downloads the necessary packages into the `node_modules` directory.\nSOURCE: https://github.com/apiato/documentation/blob/master/docs/getting-started/installation.mdx#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Displaying Code Blocks with Syntax Highlighting\nDESCRIPTION: This snippet demonstrates how to display code blocks with syntax highlighting in Markdown. It utilizes the ````jsx` syntax with an optional `title` attribute for the code block, showcasing the `HelloDocusaurus` function. The output is the rendered code block with syntax highlighting.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx title=\"src/components/HelloDocusaurus.js\"\nfunction HelloDocusaurus() {\n    return (\n        <h1>Hello, Docusaurus!</h1>\n    )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Images\nDESCRIPTION: This snippet shows how to insert an image in a Markdown document. It specifies the image path using a relative file path. This method is applicable for inserting images in Docusaurus documents.  The output is the display of an image from the specified location.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-9.x/getting-started/markdown-features.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n```md\n![Docusaurus logo](/img/logo.png)\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Silver Sponsors List using HTML iframe\nDESCRIPTION: This HTML iframe embeds the Silver Sponsors list dynamically from Open Collective. It displays sponsor avatars as an SVG fetched from the specified `src` URL, configured with parameters like `avatarHeight`, `width`, `format`, `button`, and `background`. The `style` attribute sets `border: none` and a specific background color.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-12.x/getting-started/introduction.mdx#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://opencollective.com/apiato/tiers/silver-sponsors.svg?avatarHeight=90&width=800&format=svg&button=false&background=#171923\"\n  width=\"800\"\n  height=\"200\"\n  style={{ border: 'none', backgroundColor: '#171923' }}>\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Formatting Images with Markdown in Docusaurus - md\nDESCRIPTION: This snippet demonstrates embedding an image through standard Markdown syntax in a Docusaurus documentation file. The example references an image placed in the static/img directory, accessible at /img/logo.png. The input is the image alt text and the relative URL path; the output is the rendered image. The referenced image must exist in the project's static assets; ensure the correct image path to prevent broken links.\nSOURCE: https://github.com/apiato/documentation/blob/master/versioned_docs/version-11.x/getting-started/markdown-features.mdx#_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n![Docusaurus logo](/img/logo.png)\n\n```"
  }
]