[
  {
    "owner": "onesignal",
    "repo": "onesignal-ios-sdk",
    "content": "TITLE: Initializing OneSignal SDK in iOS\nDESCRIPTION: Initializes the OneSignal SDK during application startup. This is the first method that should be called to set up OneSignal with your app ID and the launch options.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.initialize(\"YOUR_ONESIGNAL_APP_ID\", withLaunchOptions: launchOptions)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal initialize:@\"YOUR_ONESIGNAL_APP_ID\" withLaunchOptions:launchOptions]\n```\n\n----------------------------------------\n\nTITLE: Updating OneSignal Initialization in Swift\nDESCRIPTION: Code comparison showing how to update the OneSignal initialization in Swift from v3 to v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n    OneSignal.initWithLaunchOptions(launchOptions)\n    OneSignal.setAppId(\"YOUR_ONESIGNAL_APP_ID\")\n```\n\nLANGUAGE: swift\nCODE:\n```\n    OneSignal.initialize(\"YOUR_ONESIGNAL_APP_ID\", withLaunchOptions: launchOptions)\n```\n\n----------------------------------------\n\nTITLE: Requesting Push Notification Permission in iOS with OneSignal\nDESCRIPTION: This snippet shows how to request push notification permission using OneSignal's SDK. It includes examples for both standard permission requests and requests with a fallback to settings.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_61\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.Notifications requestPermission:^(BOOL accepted) {\n    NSLog(@\"User accepted notifications: %d\", accepted);\n}];\n\n// If using the fallbackToSettings flag\n[OneSignal.Notifications requestPermission:^(BOOL accepted) {\n    NSLog(@\"User accepted notifications: %d\", accepted);\n} fallbackToSettings:true];\n```\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.Notifications.requestPermission { accepted in\n    print(\"User accepted notifications: \\(accepted)\")\n}\n\n// If using the fallbackToSettings flag\nOneSignal.Notifications.requestPermission({ accepted in\n    print(\"User accepted notifications: \\(accepted)\")\n}, fallbackToSettings: true)\n```\n\n----------------------------------------\n\nTITLE: Updating OneSignal Initialization in Objective-C\nDESCRIPTION: Code comparison showing how to update the OneSignal initialization in Objective-C from v3 to v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n    [OneSignal initWithLaunchOptions:launchOptions];\n    [OneSignal setAppId:@\"YOUR_ONESIGNAL_APP_ID\"];\n```\n\nLANGUAGE: objc\nCODE:\n```\n    [OneSignal initialize:@\"YOUR_ONESIGNAL_APP_ID\" withLaunchOptions:launchOptions];\n```\n\n----------------------------------------\n\nTITLE: Requiring User Consent in OneSignal\nDESCRIPTION: Configures whether users must provide privacy consent before their data is sent to OneSignal. Should be set to true before initializing the SDK to ensure compliance with privacy regulations.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.setConsentRequired(true)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal setConsentRequired:true]\n```\n\n----------------------------------------\n\nTITLE: Setting User Consent Status in OneSignal\nDESCRIPTION: Indicates whether privacy consent has been granted by the user. This is only relevant when the application has opted into data privacy protections using setConsentRequired.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.setConsentGiven(true)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal setConsentGiven:true]\n```\n\n----------------------------------------\n\nTITLE: Logging in a User to OneSignal\nDESCRIPTION: Authenticates a user with OneSignal using an external ID. This switches the context to that specific user, transferring push notification and in-app messaging subscriptions from the current user to the newly logged in user.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.login(\"USER_EXTERNAL_ID\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal login:@\"USER_EXTERNAL_ID\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Click Listener with OneSignal iOS SDK\nDESCRIPTION: This snippet demonstrates how to implement a notification click listener using OneSignal's iOS SDK. It shows how to add a listener and handle notification click events.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_65\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Add this method to object implementing the OSNotificationClickListener protocol\n- (void)onClickNotification:(OSNotificationClickEvent * _Nonnull)event {\n    OSNotification *notification = event.notification;\n    OSNotificationClickResult *result = event.result;\n    NSString *actionId = result.actionId;\n    NSString *url = result.url;\n    NSLog(@\"onClickNotification with event %@\", [event jsonRepresentation]);\n}\n\n// Add your object as a listener\n[OneSignal.Notifications addClickListener:myListener];\n```\n\nLANGUAGE: Swift\nCODE:\n```\nclass MyNotificationClickListener : NSObject, OSNotificationClickListener {\n    func onClick(event: OSNotificationClickEvent) {\n        let notification: OSNotification = event.notification\n        let result: OSNotificationClickResult = event.result\n        let actionId = result.actionId\n        let url = result.url\n    }\n}\n\n// Add your object as a listener\nlet myListener = MyNotificationClickListener()\nOneSignal.Notifications.addClickListener(myListener)\n```\n\n----------------------------------------\n\nTITLE: User Login in OneSignal with Swift\nDESCRIPTION: Example of how to use the new login method to identify a user in Swift for OneSignal v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n    OneSignal.login(\"USER_EXTERNAL_ID\")\n```\n\n----------------------------------------\n\nTITLE: User Login in OneSignal with Objective-C\nDESCRIPTION: Example of how to use the new login method to identify a user in Objective-C for OneSignal v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n    [OneSignal login:@\"USER_EXTERNAL_ID\"];\n```\n\n----------------------------------------\n\nTITLE: Logging out a User from OneSignal\nDESCRIPTION: Logs out the previously authenticated user and switches to a device-scoped user. This device-scoped user has no retrievable identity beyond the current device as long as the app remains installed and app data is not cleared.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.logout()\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal logout]\n```\n\n----------------------------------------\n\nTITLE: Entering and Exiting Live Activities - Objective-C\nDESCRIPTION: Implementation examples for entering and exiting Live Activities with callback handling in Objective-C. Shows how to associate and remove associations between activity IDs and push tokens, including success and error handling callbacks.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_23\n\nLANGUAGE: objc\nCODE:\n```\n    // Enter a Live Activity\n    [OneSignal.LiveActivities enter:@\"ACTIVITY_ID\" withToken:@\"TOKEN\" withSuccess:^(NSDictionary *result) {\n        NSLog(@\"enter success with result: %@\", result);\n    } withFailure:^(NSError *error) {\n        NSLog(@\"enter error: %@\", error);\n    }];\n\n    // Exit a Live Activity\n    [OneSignal.LiveActivities exit:@\"ACTIVITY_ID\" withSuccess:^(NSDictionary *result) {\n        NSLog(@\"exit success with result: %@\", result);\n    } withFailure:^(NSError *error) {\n        NSLog(@\"exit error: %@\", error);\n        // handle failure case\n    }];\n\n    // Success Output Example:\n    /*\n      {\n          success = 1\n      }\n     */\n```\n\n----------------------------------------\n\nTITLE: Entering and Exiting Live Activities - Swift\nDESCRIPTION: Implementation examples for entering and exiting Live Activities with callback handling in Swift. Demonstrates how to manage Live Activity lifecycles including success and error handling with closure-based callbacks.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n    // Enter a Live Activity\n    OneSignal.LiveActivities.enter(\"ACTIVITY_ID\", withToken: \"TOKEN\") { result in\n        print(\"enter success with result: \\(result ?? [:])\")\n    } withFailure: { error in\n        print(\"enter error: \\(String(describing: error))\")\n    }\n\n    // Exit a Live Activity\n    OneSignal.LiveActivities.exit(\"ACTIVITY_ID\") { result in\n        print(\"exit success with result: \\(result ?? [:])\")\n    } withFailure: { error in\n        print(\"exit error: \\(String(describing: error))\")\n        // handle failure case\n    }\n\n    // Success Output Example:\n    /*\n      {\n          success = 1\n      }\n     */\n```\n\n----------------------------------------\n\nTITLE: User Logout in OneSignal with Swift\nDESCRIPTION: Example of how to use the new logout method in Swift for OneSignal v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n    OneSignal.logout()\n```\n\n----------------------------------------\n\nTITLE: User Logout in OneSignal with Objective-C\nDESCRIPTION: Example of how to use the new logout method in Objective-C for OneSignal v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_8\n\nLANGUAGE: objc\nCODE:\n```\n    [OneSignal logout];\n```\n\n----------------------------------------\n\nTITLE: Implementing User State Observer in Objective-C\nDESCRIPTION: Shows how to implement the OSUserStateObserver protocol in Objective-C. Demonstrates setting up an observer in AppDelegate to monitor user state changes and accessing user properties.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_44\n\nLANGUAGE: objc\nCODE:\n```\n    // AppDelegate.h\n    // Add OSUserStateObserver after UIApplicationDelegate\n    @interface AppDelegate : UIResponder <UIApplicationDelegate, OSUserStateObserver>\n    @end\n\n    // AppDelegate.m\n    @implementation AppDelegate\n\n    - (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n        // Add your AppDelegate as an observer\n        [OneSignal.User addObserver:self];\n    }\n\n    // Add this new method\n    - (void)onUserStateDidChangeWithState:(OSUserChangedState * _Nonnull)state {\n        // prints out all properties\n        NSLog(@\"OSUserChangedState:\\n%@\", [state jsonRepresentation]);\n        NSLog(@\"current externalId: %@\", state.current.externalId);\n        NSLog(@\"current onesignalId: %@\", state.current.onesignalId);\n    }\n    @end\n\n    // Remove the observer\n    [OneSignal.User removeObserver:self];\n```\n\n----------------------------------------\n\nTITLE: Implementing User State Observer in Swift\nDESCRIPTION: Shows how to implement the OSUserStateObserver protocol in Swift. Demonstrates setting up an observer in AppDelegate to monitor user state changes and accessing user properties.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_45\n\nLANGUAGE: swift\nCODE:\n```\n    // AppDelegate.swift\n    // Add OSUserStateObserver after UIApplicationDelegate\n    class AppDelegate: UIResponder, UIApplicationDelegate, OSUserStateObserver {\n\n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n            // Add your AppDelegate as an observer\n            OneSignal.User.addObserver(self)\n        }\n\n        // Add this new method\n        func onUserStateDidChange(state: OSUserChangedState) {\n            // prints out all properties\n            print(\"OSUserChangedState: \\n\\(state.jsonRepresentation())\")\n            print(state.current.externalId)\n            print(state.current.onesignalId)\n        }\n    }\n\n    // Remove the observer\n    OneSignal.User.removeObserver(self)\n```\n\n----------------------------------------\n\nTITLE: Opting In to Push Notifications in Swift\nDESCRIPTION: This code shows how to opt in to push notifications using Swift. This method will prompt the user for push notifications permission if needed.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\n    OneSignal.User.pushSubscription.optIn()\n```\n\n----------------------------------------\n\nTITLE: Opting In to Push Notifications in Objective-C\nDESCRIPTION: This code shows how to opt in to push notifications using Objective-C. This method will prompt the user for push notifications permission if needed.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_12\n\nLANGUAGE: Objective-C\nCODE:\n```\n    [OneSignal.User.pushSubscription optIn];\n```\n\n----------------------------------------\n\nTITLE: Implementing In-App Message Lifecycle Listener in Swift\nDESCRIPTION: Shows how to implement the OSInAppMessageLifecycleListener protocol in Swift to handle in-app message events including will display, did display, will dismiss, and did dismiss events.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_76\n\nLANGUAGE: swift\nCODE:\n```\n// AppDelegate.swift\n// Add OSInAppMessageLifecycleListener as an implemented protocol of the class that will handle the In-App Message lifecycle events.\nclass AppDelegate: UIResponder, UIApplicationDelegate, OSInAppMessageLifecycleListener {\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n        // Add your implementing class as the listener\n        OneSignal.InAppMessages.addLifecycleListener(self)\n    }\n\n    // Add one or more of the following optional lifecycle methods\n\n    func onWillDisplay(event: OSInAppMessageWillDisplayEvent) {\n        print(\"OSInAppMessageLifecycleListener: onWillDisplay Message: \\(event.message.messageId)\")\n    }\n    func onDidDisplay(event: OSInAppMessageDidDisplayEvent) {\n        print(\"OSInAppMessageLifecycleListener: onDidDisplay Message: \\(event.message.messageId)\")\n    }\n    func onWillDismiss(event: OSInAppMessageWillDismissEvent) {\n        print(\"OSInAppMessageLifecycleListener: onWillDismiss Message: \\(event.message.messageId)\")\n    }\n    func onDidDisplay(event: OSInAppMessageDidDisplayEvent) {\n        print(\"OSInAppMessageLifecycleListener: onDidDismiss Message: \\(event.message.messageId)\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing In-App Message Lifecycle Listener in Objective-C\nDESCRIPTION: Shows how to implement the OSInAppMessageLifecycleListener protocol in Objective-C to handle in-app message events including will display, did display, will dismiss, and did dismiss events.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_75\n\nLANGUAGE: objc\nCODE:\n```\n// AppDelegate.h\n// Add OSInAppMessageLifecycleListener as an implemented protocol of the class that will handle the In-App Message lifecycle events.\n@interface AppDelegate : UIResponder <UIApplicationDelegate, OSInAppMessageLifecycleListener>\n@end\n\n// AppDelegate.m\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // Add your implementing class as the listener.\n    [OneSignal.InAppMessages addLifecycleListener:self];\n}\n\n// Add one or more of the following optional lifecycle methods\n\n- (void)onWillDisplayInAppMessage:(OSInAppMessageWillDisplayEvent *)event {\n    NSLog(@\"OSInAppMessageLifecycleListener: onWillDisplay Message: %@\", event.message.messageId);\n}\n- (void)onDidDisplayInAppMessage:(OSInAppMessageDidDisplayEvent *)event {\n    NSLog(@\"OSInAppMessageLifecycleListener: onDidDisplay Message: %@\", event.message.messageId);\n}\n- (void)onWillDismissInAppMessage:(OSInAppMessageWillDismissEvent *)event {\n    NSLog(@\"OSInAppMessageLifecycleListener: onWillDismiss Message: %@\", event.message.messageId);\n}\n- (void)onDidDismissInAppMessage:(OSInAppMessageDidDismissEvent *)event {\n    NSLog(@\"OSInAppMessageLifecycleListener: onDidDismiss Message: %@\", event.message.messageId);\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Push Notifications in Swift\nDESCRIPTION: This code demonstrates how to opt out of push notifications on the current device using Swift, preventing the user from receiving push notifications regardless of system-level permission status.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\n    OneSignal.User.pushSubscription.optOut()\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Push Notifications in Objective-C\nDESCRIPTION: This code demonstrates how to opt out of push notifications on the current device using Objective-C, preventing the user from receiving push notifications regardless of system-level permission status.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_14\n\nLANGUAGE: Objective-C\nCODE:\n```\n    [OneSignal.User.pushSubscription optOut];\n```\n\n----------------------------------------\n\nTITLE: Implementing In-App Message Click Listener in Swift\nDESCRIPTION: Shows how to implement a custom class conforming to the OSInAppMessageClickListener protocol in Swift to handle in-app message click events and extract event details.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_78\n\nLANGUAGE: swift\nCODE:\n```\nclass MyInAppMessageClickListener : NSObject, OSInAppMessageClickListener {\n    func onClick(event: OSInAppMessageClickEvent) {\n        let messageId = event.message.messageId\n        let result: OSInAppMessageClickResult = event.result\n        let actionId = result.actionId\n        let url = result.url\n        let urlTarget: OSInAppMessageActionUrlType = result.urlTarget\n        let closingMessage = result.closingMessage\n    }\n}\n\n// Add your object as a listener\nlet myListener = MyInAppMessageClickListener()\nOneSignal.InAppMessages.addClickListener(myListener)\n```\n\n----------------------------------------\n\nTITLE: Registering for Provisional Authorization with OneSignal iOS SDK\nDESCRIPTION: This code demonstrates how to register for provisional authorization using OneSignal's iOS SDK. Provisional authorization allows sending quiet notifications without explicit user permission.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_62\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.Notifications registerForProvisionalAuthorization:^(BOOL accepted) {\n    // handle authorization\n}];\n```\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.Notifications.registerForProvisionalAuthorization({ accepted in\n    // handle authorization\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Native Notification Permission in OneSignal iOS SDK\nDESCRIPTION: Methods to get the native permission enum value for the device. Returns one of OSNotificationPermissionNotDetermined, OSNotificationPermissionDenied, OSNotificationPermissionAuthorized, OSNotificationPermissionProvisional, or OSNotificationPermissionEphemeral.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_52\n\nLANGUAGE: Swift\nCODE:\n```\nlet permissionNative: OSNotificationPermission = OneSignal.Notifications.permissionNative\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nOSNotificationPermission permissionNative = [OneSignal.Notifications permissionNative]\n```\n\n----------------------------------------\n\nTITLE: Accessing Push Subscription Properties in OneSignal iOS SDK\nDESCRIPTION: Retrieves push subscription properties associated with the current user. These properties can be used to determine the current push notification subscription state.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_26\n\nLANGUAGE: Swift\nCODE:\n```\nlet pushSubscriptionProperty = OneSignal.User.pushSubscription.<PROPERTY>\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nid pushSubscriptionProperty = OneSignal.User.pushSubscription.<PROPERTY>\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permission in OneSignal iOS SDK\nDESCRIPTION: Methods to prompt the user for permission to receive push notifications. This displays the native system prompt to request push notification permission.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_55\n\nLANGUAGE: Swift\nCODE:\n```\nfunc requestPermission(block: OSUserResponseBlock?, fallbackToSettings: Bool)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n(void)requestPermission:(OSUserResponseBlock _Nullable )block fallbackToSettings:(BOOL)fallback\n```\n\n----------------------------------------\n\nTITLE: Accessing Push Subscription Properties in Swift\nDESCRIPTION: This code demonstrates how to access the current device's push subscription properties such as ID, token, and opt-in status using Swift.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n    OneSignal.User.pushSubscription.id\n    OneSignal.User.pushSubscription.token\n    OneSignal.User.pushSubscription.optedIn\n```\n\n----------------------------------------\n\nTITLE: Accessing Push Subscription Properties in Objective-C\nDESCRIPTION: This code demonstrates how to access the current device's push subscription properties such as ID, token, and opt-in status using Objective-C.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_10\n\nLANGUAGE: Objective-C\nCODE:\n```\n    OneSignal.User.pushSubscription.id;\n    OneSignal.User.pushSubscription.token;\n    OneSignal.User.pushSubscription.optedIn;\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Observer in OneSignal iOS SDK\nDESCRIPTION: Methods to add an observer that will be notified when notification permission settings change. This happens when the user enables or disables notifications for your app from the system settings.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_57\n\nLANGUAGE: Swift\nCODE:\n```\nfunc addPermissionObserver(observer: OSNotificationPermissionObserver)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n(void)addPermissionObserver:(NSObject<OSNotificationPermissionObserver>*_Nonnull)observer\n```\n\n----------------------------------------\n\nTITLE: Retrieving OneSignal ID in iOS SDK\nDESCRIPTION: Returns the nullable OneSignal ID for the current user. This is the unique identifier assigned by OneSignal.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\nlet id: String? = OneSignal.User.onesignalId\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSString* id = OneSignal.User.onesignalId\n```\n\n----------------------------------------\n\nTITLE: Retrieving External ID in OneSignal iOS SDK\nDESCRIPTION: Returns the nullable external ID for the current user. This is the ID that was previously set via the OneSignal API or SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\nlet id: String? = OneSignal.User.externalId\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSString* id = OneSignal.User.externalId\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Tags in OneSignal iOS SDK\nDESCRIPTION: Adds multiple tags (key-value pairs) to the current user simultaneously. If any tag keys already exist, they will be replaced with the new values.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_40\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.addTags([\"KEY_01\": \"VALUE_01\", \"KEY_02\": \"VALUE_02\"])\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User addTags:@{@\"KEY_01\": @\"VALUE_01\", @\"KEY_02\": @\"VALUE_02\"}]\n```\n\n----------------------------------------\n\nTITLE: Adding User State Observer in OneSignal iOS SDK\nDESCRIPTION: Adds an observer that will be notified when user state changes. The observer's onUserStateDidChange method will be called when the OneSignal ID or external ID changes.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.addObserver(_ observer: OSUserStateObserver)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User addObserver:self]\n```\n\n----------------------------------------\n\nTITLE: Adding Foreground Lifecycle Listener in OneSignal iOS SDK\nDESCRIPTION: Methods to add a listener that will be called before displaying a notification while the app is in focus. This allows deciding whether to show the notification or not by calling event.preventDefault() or event.notification.display().\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_59\n\nLANGUAGE: Swift\nCODE:\n```\nfunc addForegroundLifecycleListener(listener: OSNotificationLifecycleListener?)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\naddForegroundLifecycleListener:(NSObject<OSNotificationLifecycleListener> *)listener\n```\n\n----------------------------------------\n\nTITLE: Removing User State Observer in OneSignal iOS SDK\nDESCRIPTION: Removes a previously added user state observer to stop receiving notifications about user state changes.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.removeObserver(_ observer: OSUserStateObserver)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User removeObserver:self]\n```\n\n----------------------------------------\n\nTITLE: Adding Click Listener in OneSignal iOS SDK\nDESCRIPTION: Methods to add a listener that will be called whenever a notification is clicked on by the user. Can be removed using removeClickListener(listener).\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_60\n\nLANGUAGE: Swift\nCODE:\n```\nfunc addClickListener(listener: OSNotificationClickListener)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n(void)addClickListener:(NSObject<OSNotificationClickListener>*)listener\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Subscription Observer in Swift\nDESCRIPTION: Demonstrates implementation of the OSPushSubscriptionObserver protocol in Swift. Shows how to monitor push subscription changes and handle state updates.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_47\n\nLANGUAGE: swift\nCODE:\n```\n    // AppDelegate.swift\n    // Add OSPushSubscriptionObserver after UIApplicationDelegate\n    class AppDelegate: UIResponder, UIApplicationDelegate, OSPushSubscriptionObserver {\n\n       func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n        // Add your AppDelegate as an observer\n        OneSignal.User.pushSubscription.addObserver(self as OSPushSubscriptionObserver)\n       }\n\n      // Add this new method\n      func onPushSubscriptionDidChange(state: OSPushSubscriptionChangedState) {\n        // prints out all properties\n        print(\"OSPushSubscriptionStateChanges: \\n\\(state)\")\n      }\n    }\n\n    // Remove the observer\n    OneSignal.User.pushSubscription.removeObserver(self as OSPushSubscriptionObserver)\n```\n\n----------------------------------------\n\nTITLE: Checking Notification Permission in OneSignal iOS SDK\nDESCRIPTION: Methods to check if the app has push notification permission. Returns true if the user has accepted permissions or if the app has ephemeral or provisional permission.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_51\n\nLANGUAGE: Swift\nCODE:\n```\nlet permission: Bool = OneSignal.Notifications.permission\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nBOOL permission = [OneSignal.Notifications permission]\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Subscription Observer in Objective-C\nDESCRIPTION: Demonstrates implementation of the OSPushSubscriptionObserver protocol in Objective-C. Shows how to monitor push subscription changes and handle state updates.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_46\n\nLANGUAGE: objc\nCODE:\n```\n    // AppDelegate.h\n    // Add OSPushSubscriptionObserver after UIApplicationDelegate\n    @interface AppDelegate : UIResponder <UIApplicationDelegate, OSPushSubscriptionObserver>\n    @end\n\n    // AppDelegate.m\n    @implementation AppDelegate\n\n    - (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n      // Add your AppDelegate as an observer\n      [OneSignal.User.pushSubscription addObserver:self];\n    }\n\n    // Add this new method\n    - (void)onPushSubscriptionDidChangeWithState:(OSPushSubscriptionChangedState*)state {\n       // prints out all properties\n       NSLog(@\"OSPushSubscriptionChangedState:\\n%@\", state);\n    }\n    @end\n\n    // Remove the observer\n    [OneSignal.User.pushSubscription removeObserver:self];\n```\n\n----------------------------------------\n\nTITLE: Adding Click Listener\nDESCRIPTION: Methods to add a click listener that will be called whenever an in-app message is clicked by the user.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_74\n\nLANGUAGE: Swift\nCODE:\n```\nfunc addClickListener(listener: OSInAppMessageClickListener)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n(void)addClickListener:(NSObject<OSNotificationClickListener>*_Nonnull)listener\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Observer with OneSignal iOS SDK\nDESCRIPTION: This snippet shows how to implement a permission observer using OneSignal's iOS SDK. It demonstrates adding and removing an observer, as well as handling permission changes.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_63\n\nLANGUAGE: Objective-C\nCODE:\n```\n// AppDelegate.h\n// Add OSNotificationPermissionObserver after UIApplicationDelegate\n@interface AppDelegate : UIResponder <UIApplicationDelegate, OSNotificationPermissionObserver>\n@end\n\n// AppDelegate.m\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // Add your AppDelegate as an observer\n  [OneSignal.Notifications addPermissionObserver:self];\n}\n\n// Add this new method\n- (void)onNotificationPermissionDidChange:(BOOL)permission {\n    // Example of detecting the curret permission\n    if (permission) {\n        NSLog(@\"Device has permission to display notifications\");\n    } else {\n         NSLog(@\"Device does not have permission to display notifications\");\n    }\n}\n\n// Output:\n/*\n Device has permission to display notifications\n */\n\n@end\n\n// Remove the observer\n[OneSignal.Notifications removePermissionObserver:self];\n```\n\nLANGUAGE: Swift\nCODE:\n```\n// AppDelegate.swift\n// Add OSNotificationPermissionObserver after UIApplicationDelegate\nclass AppDelegate: UIResponder, UIApplicationDelegate, OSNotificationPermissionObserver {\n\n   func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n        // Add your AppDelegate as an observer\n        OneSignal.Notifications.addPermissionObserver(self as OSNotificationPermissionObserver)\n    }\n\n    // Add this new method\n    func onNotificationPermissionDidChange(_ permission: Bool) {\n        // Example of detecting the curret permission\n        if permission {\n            print(\"Device has permission to display notifications\")\n        } else {\n            print(\"Device does not have permission to display notifications\")\n        }\n    }\n}\n\n// Output:\n/*\n Device has permission to display notifications\n PermissionState:\n <OSPermissionState: permission: 1>\n */\n\n// Remove the observer\nOneSignal.Notifications.removePermissionObserver(self as OSNotificationPermissionObserver)\n```\n\n----------------------------------------\n\nTITLE: Checking If Permission Request Is Possible in OneSignal iOS SDK\nDESCRIPTION: Methods to check if attempting to request notification permission will show a prompt. Returns true if the device has not been prompted for push notification permission already.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_53\n\nLANGUAGE: Swift\nCODE:\n```\nlet canRequest: Bool = OneSignal.Notifications.canRequestPermission\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nBOOL canRequest = [OneSignal.Notifications canRequestPermission]\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Foreground Lifecycle Listener with OneSignal iOS SDK\nDESCRIPTION: This code shows how to implement a notification foreground lifecycle listener using OneSignal's iOS SDK. It demonstrates adding and removing a listener, as well as handling notification display events.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_64\n\nLANGUAGE: Objective-C\nCODE:\n```\n// AppDelegate.h\n// Add OSNotificationLifecycleListener after UIApplicationDelegate\n@interface AppDelegate : UIResponder <UIApplicationDelegate, OSNotificationLifecycleListener>\n@end\n\n// AppDelegate.m\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // Add your AppDelegate as an observer\n  [OneSignal.Notifications addForegroundLifecycleListener:self];\n}\n\n// Add this new method\n\n- (void)onWillDisplayNotification:(OSNotificationWillDisplayEvent *)event {\n    NSLog(@\"Received Notification - %@\", event.notification.notificationId);\n    if ([event.notification.notificationId isEqualToString:@\"silent_notif\"]) {\n        [event preventDefault];\n    }\n\n    // If you called preventDefault, you can call display within 25 seconds\n    [event.notification display];\n}\n\n@end\n\n// Remove the observer\n[OneSignal.Notifications removeForegroundLifecycleListener:self];\n```\n\nLANGUAGE: Swift\nCODE:\n```\nclass MyNotificationLifecycleListener : NSObject, OSNotificationLifecycleListener {\n    func onWillDisplay(event: OSNotificationWillDisplayEvent) {\n        // Example of conditionally displaying a notification\n        if event.notification.notificationId == \"example_silent_notif\" {\n            event.preventDefault()\n        }\n\n        // If you called preventDefault, you can call display within 25 seconds to display the notification\n        event.notification.display()\n    }\n}\n\n// Add your object as a listener\nlet myListener = MyNotificationLifecycleListener()\nOneSignal.Notifications.addForegroundLifecycleListener(myListener)\n```\n\n----------------------------------------\n\nTITLE: Configuring Location Sharing with OneSignal iOS SDK\nDESCRIPTION: This code snippet shows how to configure location sharing using OneSignal's iOS SDK. It demonstrates how to check if location is shared and how to enable or disable location sharing.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_66\n\nLANGUAGE: Swift\nCODE:\n```\nlet isShared: Bool = OneSignal.Location.isShared\n\nOneSignal.Location.isShared = true\n\nOneSignal.Location.requestPermission()\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nBOOL isShared = [OneSignal.Location isShared];\n\n[OneSignal.Location setShared:true];\n\n[OneSignal.Location requestPermission];\n```\n\n----------------------------------------\n\nTITLE: Implementing In-App Message Click Listener in Objective-C\nDESCRIPTION: Shows how to implement the OSInAppMessageClickListener protocol in Objective-C to capture in-app message click events and extract event details such as messageId, actionId, URL, and closing status.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_77\n\nLANGUAGE: objc\nCODE:\n```\n// Add this method to object implementing the OSInAppMessageClickListener protocol\n- (void)onClickInAppMessage:(OSInAppMessageClickEvent * _Nonnull)event {\n    NSLog(@\"onClickInAppMessage event: %@\", [event jsonRepresentation]);\n    NSString *message = [NSString stringWithFormat:@\"In App Message Click Occurred: messageId: %@ actionId: %@ url: %@ urlTarget: %@ closingMessage: %i\",\n                        event.message.messageId,\n                        event.result.actionId,\n                        event.result.url,\n                        @(event.result.urlTarget),\n                        event.result.closingMessage];\n}\n\n// Add your object as a listener\n[OneSignal.InAppMessages addClickListener:self];\n```\n\n----------------------------------------\n\nTITLE: Registering for Provisional Authorization in OneSignal iOS SDK\nDESCRIPTION: Methods to request provisional authorization for push notifications without prompting the user explicitly.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_56\n\nLANGUAGE: Swift\nCODE:\n```\nfunc registerForProvisionalAuthorization(block: OSUserResponseBlock?)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n(void)registerForProvisionalAuthorization:(OSUserResponseBlock _Nullable)block\n```\n\n----------------------------------------\n\nTITLE: Adding Lifecycle Listener\nDESCRIPTION: Methods to add an in-app message lifecycle listener that can be later removed with removeLifecycleListener.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_73\n\nLANGUAGE: Swift\nCODE:\n```\nfunc addLifecycleListener(listener: OSInAppMessageLifecycleListener?)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n(void)addLifecycleListener:(NSObject<OSInAppMessageLifecycleListener> *_Nullable)listener\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Triggers\nDESCRIPTION: Methods to add multiple string-value triggers simultaneously for the current user. Existing triggers with matching keys will be replaced.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_69\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.InAppMessages.addTriggers([\"KEY_01\": \"VALUE_01\", \"KEY_02\": \"VALUE_02\"])\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.InAppMessages addTriggers:@{@\"KEY_01\": @\"VALUE_01\", @\"KEY_02\": @\"VALUE_02\"}]\n```\n\n----------------------------------------\n\nTITLE: Managing In-App Message Pause State\nDESCRIPTION: Methods to get and set whether in-app messaging is paused. When paused, no in-app messages will be shown to users regardless of qualification.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_67\n\nLANGUAGE: Swift\nCODE:\n```\nlet paused = OneSignal.InAppMessages.paused\nOneSignal.InAppMessages.paused = true\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nBOOL paused = [OneSignal.InAppMessages paused]\n[OneSignal.InAppMessages paused:true]\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Outcome in OneSignal iOS SDK\nDESCRIPTION: Adds an outcome with the provided name, captured against the current session. This method tracks a simple occurrence of the specified outcome name.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_48\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.Session.addOutcome(\"OUTCOME_NAME\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.Session addOutcome:@\"OUTCOME_NAME\"]\n```\n\n----------------------------------------\n\nTITLE: Setting User Language in OneSignal iOS SDK\nDESCRIPTION: Sets the 2-character language code for the current user. This allows for localization of push notifications and other content.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_25\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.setLanguage(\"en\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User setLanguage:@\"en\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Outcome in OneSignal iOS SDK\nDESCRIPTION: Adds a unique outcome with the provided name, captured against the current session. This ensures the outcome is only counted once per session.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_49\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.Session.addUniqueOutcome(\"OUTCOME_NAME\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.Session addUniqueOutcome:@\"OUTCOME_NAME\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Single Alias in OneSignal iOS SDK\nDESCRIPTION: Sets an alias for the current user. An alias is a key-value pair that can be used to identify the user. If the alias label already exists, it will be overwritten.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_31\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.addAlias(label: \"ALIAS_LABEL\", id: \"ALIAS_ID\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User addAliasWithLabel:@\"ALIAS_LABEL\" id:@\"ALIAS_ID\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Single Trigger\nDESCRIPTION: Methods to add a single string-value trigger for the current user. Triggers determine IAM display eligibility and are stored locally.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_68\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.InAppMessages.addTrigger(\"KEY\", withValue: \"VALUE\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.InAppMessages addTrigger:@\"KEY\" withValue:@\"VALUE\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Aliases in OneSignal iOS SDK\nDESCRIPTION: Sets multiple aliases for the current user simultaneously. Any existing aliases with the same labels will be overwritten with the new values.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_32\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.addAliases([\"ALIAS_LABEL_01\": \"ALIAS_ID_01\", \"ALIAS_LABEL_02\": \"ALIAS_ID_02\"])\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User addAliases:@{@\"ALIAS_LABEL_01\": @\"ALIAS_ID_01\", @\"ALIAS_LABEL_02\": @\"ALIAS_ID_02\"}]\n```\n\n----------------------------------------\n\nTITLE: Removing Permission Observer in OneSignal iOS SDK\nDESCRIPTION: Methods to remove a previously added notification permission observer.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_58\n\nLANGUAGE: Swift\nCODE:\n```\nfunc removePermissionObserver(observer: OSNotificationPermissionObserver)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n(void)removePermissionObserver:(NSObject<OSNotificationPermissionObserver>*_Nonnull)observer\n```\n\n----------------------------------------\n\nTITLE: Removing Single Alias in OneSignal iOS SDK\nDESCRIPTION: Removes a specific alias from the current user by providing the alias label.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_33\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.removeAlias(\"ALIAS_LABEL\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User removeAlias:@\"ALIAS_LABEL\"]\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Tags in OneSignal iOS SDK\nDESCRIPTION: Removes multiple tags from the current user by providing an array of tag keys to be removed.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_43\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.removeTags([\"KEY_01\", \"KEY_02\"])\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User removeTags:@[@\"KEY_01\", @\"KEY_02\"]]\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Aliases in OneSignal iOS SDK\nDESCRIPTION: Removes multiple aliases from the current user by providing an array of alias labels to be removed.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_34\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.removeAliases([\"ALIAS_LABEL_01\", \"ALIAS_LABEL_02\"])\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User removeAliases:@[@\"ALIAS_LABEL_01\", @\"ALIAS_LABEL_02\"]]\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Triggers\nDESCRIPTION: Methods to remove multiple triggers simultaneously from the current user.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_71\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.InAppMessages.removeTriggers([\"KEY_01\", \"KEY_02\"])\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.InAppMessages removeTriggers:@[@\"KEY_01\", @\"KEY_02\"]]\n```\n\n----------------------------------------\n\nTITLE: Adding Email Subscription in OneSignal iOS SDK\nDESCRIPTION: Adds an email subscription for the current user. This enables sending notifications to the user's email address.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_35\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.addEmail(\"customer@company.com\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User addEmail:@\"customer@company.com\"]\n```\n\n----------------------------------------\n\nTITLE: Clearing All Notifications in OneSignal iOS SDK\nDESCRIPTION: Methods to remove all OneSignal notifications from the device.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_54\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.Notifications.clearAll()\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.Notifications clearAll]\n```\n\n----------------------------------------\n\nTITLE: Adding SMS Subscription in OneSignal iOS SDK\nDESCRIPTION: Adds an SMS subscription for the current user. This enables sending notifications to the user's phone number via SMS.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_37\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.addSms(\"+15558675309\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User addSms:@\"+15558675309\"]\n```\n\n----------------------------------------\n\nTITLE: Clearing All Triggers\nDESCRIPTION: Methods to remove all triggers from the current user.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_72\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.InAppMessages.clearTriggers()\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.InAppMessages clearTriggers]\n```\n\n----------------------------------------\n\nTITLE: Removing Email Subscription in OneSignal iOS SDK\nDESCRIPTION: Removes a specific email subscription from the current user. If the specified email doesn't exist for the user, this operation does nothing.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_36\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.removeEmail(\"customer@company.com\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User removeEmail:@\"customer@company.com\"]\n```\n\n----------------------------------------\n\nTITLE: Removing SMS Subscription in OneSignal iOS SDK\nDESCRIPTION: Removes a specific SMS subscription from the current user. If the specified phone number doesn't exist for the user, this operation does nothing.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_38\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.removeSms(\"+15558675309\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User removeSms:@\"+15558675309\"]\n```\n\n----------------------------------------\n\nTITLE: Managing Email and SMS Subscriptions in Swift\nDESCRIPTION: This code shows how to add and remove email and SMS subscriptions for a user using Swift. The remove methods will not make a request if the specified email or SMS number doesn't exist.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\n    // Add email subscription\n    OneSignal.User.addEmail(\"customer@company.com\")\n    // Remove previously added email subscription\n    OneSignal.User.removeEmail(\"customer@company.com\")\n\n    // Add SMS subscription\n    OneSignal.User.addSms(\"+15558675309\")\n    // Remove previously added SMS subscription\n    OneSignal.User.removeSms(\"+15558675309\")\n```\n\n----------------------------------------\n\nTITLE: Managing Email and SMS Subscriptions in Objective-C\nDESCRIPTION: This code shows how to add and remove email and SMS subscriptions for a user using Objective-C. The remove methods will not make a request if the specified email or SMS number doesn't exist.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_16\n\nLANGUAGE: Objective-C\nCODE:\n```\n    // Add email subscription\n    [OneSignal.User addEmail:@\"customer@company.com\"];\n    // Remove previously added email subscription\n    [OneSignal.User removeEmail:@\"customer@company.com\"];\n\n    // Add SMS subscription\n    [OneSignal.User addSms:@\"+15558675309\"];\n    // Remove previously added SMS subscription\n    [OneSignal.User removeSms:@\"+15558675309\"];\n```\n\n----------------------------------------\n\nTITLE: Adding Single Tag in OneSignal iOS SDK\nDESCRIPTION: Adds a tag (key-value pair) to the current user. Tags are used for targeting specific users or personalizing messages. If the tag key already exists, it will be replaced.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_39\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.addTag(key: \"KEY\", value: \"VALUE\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User addTagWithKey:@\"KEY\" value:@\"VALUE\"]\n```\n\n----------------------------------------\n\nTITLE: Removing Single Tag in OneSignal iOS SDK\nDESCRIPTION: Removes a specific tag from the current user by providing the tag key.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_41\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.User.removeTag(\"KEY\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.User removeTag:@\"KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Getting All User Tags in OneSignal iOS SDK\nDESCRIPTION: Returns a dictionary containing all the local tags for the current user. These tags are stored locally in the SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_42\n\nLANGUAGE: Swift\nCODE:\n```\nlet tags = OneSignal.User.getTags()\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSDictionary<NSString *, NSString*> *tags = [OneSignal.User getTags]\n```\n\n----------------------------------------\n\nTITLE: Adding Outcome with Value in OneSignal iOS SDK\nDESCRIPTION: Adds an outcome with the provided name and numerical value, captured against the current session. This method allows tracking outcomes that have an associated value such as purchase amount.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_50\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.Session.addOutcome(\"OUTCOME_NAME\", 18.76)\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.Session addOutcomeWithValue:@\"OUTCOME_NAME\" value:@18.76]\n```\n\n----------------------------------------\n\nTITLE: Removing Single Trigger\nDESCRIPTION: Methods to remove a single trigger by key from the current user.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_70\n\nLANGUAGE: Swift\nCODE:\n```\nOneSignal.InAppMessages.removeTrigger(\"KEY\")\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n[OneSignal.InAppMessages removeTrigger:@\"KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for OneSignal SDK in Objective-C\nDESCRIPTION: Code snippets showing how to update the import statements in Objective-C when migrating from OneSignal iOS SDK v3 to v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\n    // Replace the old import statement\n    #import <OneSignal/OneSignal.h>\n\n    // With the new import statement\n    #import <OneSignalFramework/OneSignalFramework.h>\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for OneSignal SDK in Swift\nDESCRIPTION: Code snippets showing how to update the import statements in Swift when migrating from OneSignal iOS SDK v3 to v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n    // Replace the old import statement\n    import OneSignal\n\n    // With the new import statement\n    import OneSignalFramework\n```\n\n----------------------------------------\n\nTITLE: OneSignal CocoaPods Installation with Subspecs\nDESCRIPTION: Example of CocoaPods installation with subspecs for modular functionality in OneSignal v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n  pod 'OneSignal/OneSignal', '>= 5.0.0', '< 6.0'\n  # Remove either of the following if the functionality is unwanted\n  pod 'OneSignal/OneSignalLocation', '>= 5.0.0', '< 6.0'\n  pod 'OneSignal/OneSignalInAppMessages', '>= 5.0.0', '< 6.0'\n```\n\n----------------------------------------\n\nTITLE: OneSignal CocoaPods Full Installation\nDESCRIPTION: Example of CocoaPods installation with all OneSignal functionality included for v5.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npod 'OneSignal', '>= 5.0.0', '< 6.0'\n```\n\n----------------------------------------\n\nTITLE: Formatting Instructions in Markdown\nDESCRIPTION: This snippet contains markdown-formatted instructions for users on how to fill out the issue template. It emphasizes the importance of providing complete information and searching existing issues before submitting.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/issue_template.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n 1. IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MAY CLOSE YOUR ISSUE WITHOUT INVESTIGATION\n 2. SEARCH EXISTING ISSUES FOR AN ANSWER: https://goo.gl/WiaCcG\n 3. See our Common Issues documentation: https://goo.gl/68ntg2\n 4. See our contributing guidelines: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/master/CONTRIBUTING.md\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining OneSignalUser Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the documentation for the OneSignalUser module. It includes placeholders for summary, overview, and topics sections, using special tokens to denote editable areas.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/iOS_SDK/OneSignalSDK/OneSignalUser/OneSignalUser.docc/OneSignalUser.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ``OneSignalUser``\n\n<!--@START_MENU_TOKEN@-->Summary<!--@END_MENU_TOKEN@-->\n\n## Overview\n\n<!--@START_MENU_TOKEN@-->Text<!--@END_MENU_TOKEN@-->\n\n## Topics\n\n### <!--@START_MENU_TOKEN@-->Group<!--@END_MENU_TOKEN@-->\n\n- <!--@START_MENU_TOKEN@-->``Symbol``<!--@END_MENU_TOKEN@-->\n```\n\n----------------------------------------\n\nTITLE: Environment Description Example in Markdown\nDESCRIPTION: This snippet provides an example of how to describe the environment in which the issue occurs, including the SDK version and installation method.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/issue_template.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Example:\n1. What version of the iOS SDK are you using?\n2. How did you add the SDK to your project (eg. cocoapods)\n -->\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure Template in Markdown\nDESCRIPTION: Basic documentation structure template with menu tokens for dynamic content insertion in OneSignalCore SDK documentation.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/iOS_SDK/OneSignalSDK/OneSignalCore/OneSignalCore.docc/OneSignalCore.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ``OneSignalCore``\n\n<!--@START_MENU_TOKEN@-->Summary<!--@END_MENU_TOKEN@-->\n\n## Overview\n\n<!--@START_MENU_TOKEN@-->Text<!--@END_MENU_TOKEN@-->\n\n## Topics\n\n### <!--@START_MENU_TOKEN@-->Group<!--@END_MENU_TOKEN@-->\n\n- <!--@START_MENU_TOKEN@-->``Symbol``<!--@END_MENU_TOKEN@-->\n```\n\n----------------------------------------\n\nTITLE: Steps to Reproduce Example in Markdown\nDESCRIPTION: This snippet demonstrates how to format the steps to reproduce the issue, providing a clear example for users to follow.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/issue_template.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n  Example:\n\n  1. Install iOS SDK version 2.8.2 with Cocoapods into a project\n  2. Initialize the SDK in didFinishLaunchingWithOptions:\n  3. Attempt to receive a push notification\n\n  (write below this line) -->\n```\n\n----------------------------------------\n\nTITLE: Final Reminder in Markdown\nDESCRIPTION: This snippet reminds users to search existing issues before submitting a new one, reinforcing the importance of avoiding duplicate reports.\nSOURCE: https://github.com/OneSignal/OneSignal-iOS-SDK/blob/main/issue_template.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n  SEARCH EXISTING ISSUES FOR AN ANSWER: https://goo.gl/WiaCcG\n-->\n```"
  }
]