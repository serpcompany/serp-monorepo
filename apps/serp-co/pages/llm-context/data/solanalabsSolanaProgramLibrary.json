[
  {
    "owner": "solana-labs",
    "repo": "solana-program-library",
    "content": "TITLE: Invoking `transfer_checked` Instruction in Solana Program (Rust)\nDESCRIPTION: Illustrates how to construct and invoke the `spl_token_2022::instruction::transfer_checked` instruction within a Solana program. It requires unpacking the mint state to get decimals, then calling the instruction builder with necessary accounts (token program, source, mint, destination, authority), amount, and decimals, followed by `invoke`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nlet decimals = StateWithExtensions::<Mint>::unpack(&mint.data.borrow()).map(|m| m.base)?.decimals;\nlet ix = spl_token_2022::instruction::transfer_checked(\n  token_program.key,\n  source.key,\n  mint.key,\n  destination.key,\n  authority.key,\n  &[],\n  amount,\n  decimals,\n)?;\ninvoke(\n  &ix,\n  &[source, mint, destination, authority, token_program],\n)\n```\n\n----------------------------------------\n\nTITLE: Sender-Funded Token Transfer - CLI - console\nDESCRIPTION: Transfers SPL tokens while simultaneously creating and funding the recipient's associated token account if it does not exist, using the 'spl-token transfer --fund-recipient' command. Outputs sender, recipient addresses, funding amounts, transaction details, and resulting signature. This approach simplifies transfers when the recipient's token account is absent.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token transfer --fund-recipient AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nTransfer 50 tokens\n  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\n  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks\n  Funding recipient: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks (0.00203928 SOL)\n\nSignature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd\n```\n\n----------------------------------------\n\nTITLE: Creating Mint and Token Accounts, Assigning Multisig Authority - Solana CLI - console\nDESCRIPTION: This sequence creates an SPL token mint, then an associated account, and finally assigns multisig mint authority to the new address. Requires spl-token CLI and addresses from prior steps. Each command returns details and the relevant transaction signatures. Takes token mint address, multisig address, and account address as arguments.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_55\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-token\nCreating token 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\nSignature: 3n6zmw3hS5Hyo5duuhnNvwjAbjzC42uzCA3TTsrgr9htUonzDUXdK1d8b8J77XoeSherqWQM8mD8E1TMYCpksS2r\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\nCreating account EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nSignature: 5mVes7wjE7avuFqzrmSCWneKBQyPAjasCLYZPNSkmqmk2YFosYWAP9hYSiZ7b7NKpV866x5gwyKbbppX3d8PcE9s\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token authorize 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o mint 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\nUpdating 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Current mint authority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n  New mint authority: 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\nSignature: yy7dJiTx1t7jvLPCRX5RQWxNRNtFwvARSfbMJG94QKEiNS4uZcp3GhhjnMgZ1CaWMWe4jVEMy9zQBoUhzomMaxC\n```\n\n----------------------------------------\n\nTITLE: Initializing Mint with Metadata and Pointer via @solana/spl-token - JavaScript\nDESCRIPTION: Provides a complete JavaScript implementation for creating a Solana mint with metadata embedded and the metadata pointer extension enabled using @solana/web3.js, @solana/spl-token, and @solana/spl-token-metadata. The script sets up and funds keypairs, calculates space for both mint and metadata, and issues all needed initialize instructions for the mint, metadata pointer, and metadata itself. Dependencies are @solana/web3.js, @solana/spl-token, and @solana/spl-token-metadata. Key parameters include mint authority and metadata fields (name, symbol, URI, additional metadata). The transaction creates the mint and embeds metadata, output is an initialized mint with all extensions on devnet.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_52\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  clusterApiUrl,\n  Connection,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  sendAndConfirmTransaction,\n  SystemProgram,\n  Transaction,\n} from '@solana/web3.js';\nimport {\n  createInitializeMetadataPointerInstruction,\n  createInitializeMintInstruction,\n  ExtensionType,\n  getMintLen,\n  LENGTH_SIZE,\n  TOKEN_2022_PROGRAM_ID,\n  TYPE_SIZE,\n} from '@solana/spl-token';\nimport { createInitializeInstruction, pack, TokenMetadata } from '@solana/spl-token-metadata';\n\n(async () => {\n  const payer = Keypair.generate();\n\n  const mint = Keypair.generate();\n  const decimals = 9;\n\n  const metadata: TokenMetadata = {\n    mint: mint.publicKey,\n    name: 'TOKEN_NAME',\n    symbol: 'SMBL',\n    uri: 'URI',\n    additionalMetadata: [['new-field', 'new-value']],\n  };\n\n  const mintLen = getMintLen([ExtensionType.MetadataPointer]);\n\n  const metadataLen = TYPE_SIZE + LENGTH_SIZE + pack(metadata).length;\n\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n  const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n  await connection.confirmTransaction({\n    signature: airdropSignature,\n    ...(await connection.getLatestBlockhash()),\n  });\n\n  const mintLamports = await connection.getMinimumBalanceForRentExemption(mintLen + metadataLen);\n  const mintTransaction = new Transaction().add(\n    SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: mint.publicKey,\n      space: mintLen,\n      lamports: mintLamports,\n      programId: TOKEN_2022_PROGRAM_ID,\n    }),\n    createInitializeMetadataPointerInstruction(mint.publicKey, payer.publicKey, mint.publicKey, TOKEN_2022_PROGRAM_ID),\n    createInitializeMintInstruction(mint.publicKey, decimals, payer.publicKey, null, TOKEN_2022_PROGRAM_ID),\n    createInitializeInstruction({\n      programId: TOKEN_2022_PROGRAM_ID,\n      mint: mint.publicKey,\n      metadata: mint.publicKey,\n      name: metadata.name,\n      symbol: metadata.symbol,\n      uri: metadata.uri,\n      mintAuthority: payer.publicKey,\n      updateAuthority: payer.publicKey,\n    }),\n  );\n  await sendAndConfirmTransaction(connection, mintTransaction, [payer, mint]);\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating/Getting Associated NFT Token Account using JavaScript SDK\nDESCRIPTION: Gets an existing associated token account or creates a new one for the specified NFT mint and owner using the `getOrCreateAssociatedTokenAccount` function from `@solana/spl-token`. This is the standard way to manage token accounts for users in JavaScript.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\nconst associatedTokenAccount = await getOrCreateAssociatedTokenAccount(\n    connection,\n    wallet,\n    mint,\n    wallet.publicKey\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fungible Token using spl-token JS\nDESCRIPTION: Creates a new SPL token mint programmatically using the `createMint` function from the `@solana/spl-token` library. It requires a `connection` object, a `payer` keypair, public keys for the `mintAuthority` and `freezeAuthority`, and the desired number of `decimals` for the token (9 in this example). The mint's public key is logged.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMint } from '@solana/spl-token';\nimport { clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nconst payer = Keypair.generate();\nconst mintAuthority = Keypair.generate();\nconst freezeAuthority = Keypair.generate();\n\nconst connection = new Connection(\n  clusterApiUrl('devnet'),\n  'confirmed'\n);\n\nconst mint = await createMint(\n  connection,\n  payer,\n  mintAuthority.publicKey,\n  freezeAuthority.publicKey,\n  9 // We are using 9 to match the CLI decimal default exactly\n);\n\nconsole.log(mint.toBase58());\n// AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Token Account with Immutable Ownership - SPL Token-2022 - JavaScript\nDESCRIPTION: This snippet programmatically creates an associated token account for a given mint and owner using the createAccount utility in SPL Token-2022 JavaScript API. Associated token accounts automatically include the immutable owner extension, so no additional flags are required. Dependencies: '@solana/web3.js' and '@solana/spl-token'. Inputs are the connection, payer, mint, and owner's public key. Output is the public key of the created associated account; no reassignment of owner is possible afterward.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n    const associatedAccount = await createAccount(\n        connection,\n        payer,\n        mint,\n        owner.publicKey,\n        undefined,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n```\n\n----------------------------------------\n\nTITLE: Transferring SPL Tokens via CLI\nDESCRIPTION: Transfers a specified amount (50) of SPL tokens of a given mint (`AQoK...`) to a specific recipient token account (`CqAx...`) using the `spl-token transfer` command. The sender account is implicitly the default signer's associated token account unless specified otherwise. The command outputs the sender, recipient, amount, and transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ\nTransfer 50 tokens\n  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n  Recipient: CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ\n\nSignature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Mint via CLI\nDESCRIPTION: Creates a new SPL token mint with zero decimals using `spl-token create-token --decimals 0`. A mint with zero decimals is typically used to represent Non-Fungible Tokens (NFTs). The command outputs the address of the new token mint and the transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-token --decimals 0\nCreating token 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\nSignature: 4kz82JUey1B9ki1McPW7NYv1NqPKCod6WNptSkYqtuiEsQb9exHaktSAHJJsm4YxuGNW4NugPJMFX9ee6WA2dXts\n```\n\n----------------------------------------\n\nTITLE: Safely Checking Token Program Account Owners - Rust\nDESCRIPTION: These two Rust code fragments highlight the change in checking account ownership for token accounts. The first implementation checks if an account owner matches a hard-coded SPL Token ID, which doesn't work for multiple token program types like Token-2022. The revised snippet uses 'spl_token_2022::check_spl_token_program_account', a helper for robust owner validation. This approach is required when supporting a wider set of SPL-compliant tokens. Inputs are the account owner's key; outputs are error or success for owner verification. Limitations exist if new program IDs are introduced.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nif token_account_info.owner != &spl_token::id() { ... }\n```\n\nLANGUAGE: rust\nCODE:\n```\nif spl_token_2022::check_spl_token_program_account(token_account_info.owner).is_err() { ... }\n```\n\n----------------------------------------\n\nTITLE: Minting NFT Token via CLI\nDESCRIPTION: Mints exactly one token (`1`) of the specified NFT mint (`559u...`) into the designated recipient token account (`7Kqp...`) using the `spl-token mint` command. This action creates the single NFT instance.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_42\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z 1 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nMinting 1 tokens\n  Token: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n  Recipient: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nSignature: 2Kzg6ZArQRCRvcoKSiievYy3sfPqGV91Whnz6SeimhJQXKBTYQf3E54tWg3zPpYLbcDexxyTxnj4QF69ucswfdY\n```\n\n----------------------------------------\n\nTITLE: Creating Mint with Transfer Fee Config via Solana CLI (Console)\nDESCRIPTION: This CLI command creates a new mint using the Token-2022 program, enabling transfer fee capabilities on the mint at initialization. Parameters specify the fee rate in basis points and the maximum fee amount, as well as the program ID. The output provides the new mint's address, decimal configuration, and signature; all fee configuration is applied at creation.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --transfer-fee-basis-points 50 --transfer-fee-maximum-fee 5000\nCreating token Dg3i18BN7vzsbAZDnDv3H8nQQjSaPUTqhwX41J7NZb5H under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  Dg3i18BN7vzsbAZDnDv3H8nQQjSaPUTqhwX41J7NZb5H\nDecimals:  9\n\nSignature: 39okFGqW23wQZ1HqH2tdJvtFP5aYgpfbmNktCZpV5XKTpKuA9xJmvBmrBwcLdfAT632VEC4y4dJJfDoeAvMWRPYP\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Mint with Transfer Hook via SPL Token CLI - Console\nDESCRIPTION: Demonstrates how to create a new token mint on Solana with an attached transfer-hook using the SPL Token CLI. This requires the spl-token CLI tool, a valid program ID for Token-2022, and the transfer-hook program's address. Key parameters include --program-id for targeting Token-2022 and --transfer-hook for specifying the transfer-hook extension. The output includes the newly created mint address, its decimal precision, and the transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_45\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --transfer-hook 7N4HggYEJAtCLJdnHGCtFqfxcB5rhQCsQTze3ftYstVj\nCreating token HFg1FFaj4PqFHmkYrqbZsarNJEZT436aXAXgQFMJihwc under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  HFg1FFaj4PqFHmkYrqbZsarNJEZT436aXAXgQFMJihwc\nDecimals:  9\n\nSignature: 3ug4Ejs16jJgEm1WyBwDDxzh9xqPzQ3a2cmy1hSYiPFcLQi9U12HYF1Dbhzb2bx75SSydfU6W4e11dGUXaPbJqVc\n```\n\n----------------------------------------\n\nTITLE: Creating SPL Token Mint with Permanent Delegate using JS\nDESCRIPTION: Provides a JavaScript example using `@solana/web3.js` and `@solana/spl-token` to create a Token-2022 mint with the `PermanentDelegate` extension. The process involves creating the mint account (`SystemProgram.createAccount`) with the correct size calculated by `getMintLen` for the specified extensions, initializing the permanent delegate using `createInitializePermanentDelegateInstruction`, and finally initializing the mint details with `createInitializeMintInstruction`. Requires a Solana connection, a funded payer keypair, a new mint keypair, the mint authority keypair, the permanent delegate's public key, and uses `TOKEN_2022_PROGRAM_ID`. Dependencies include `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\n\nimport {\n    ExtensionType,\n    createInitializeMintInstruction,\n    createInitializePermanentDelegateInstruction,\n    mintTo,\n    createAccount,\n    getMintLen,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const payer = Keypair.generate();\n\n    const mintAuthority = Keypair.generate();\n    const mintKeypair = Keypair.generate();\n    const mint = mintKeypair.publicKey;\n    const permanentDelegate = Keypair.generate();\n\n    const extensions = [ExtensionType.PermanentDelegate];\n    const mintLen = getMintLen(extensions);\n    const decimals = 9;\n\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintLamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const mintTransaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: mint,\n            space: mintLen,\n            lamports: mintLamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializePermanentDelegateInstruction(mint, permanentDelegate.publicKey, TOKEN_2022_PROGRAM_ID),\n        createInitializeMintInstruction(mint, decimals, mintAuthority.publicKey, null, TOKEN_2022_PROGRAM_ID)\n    );\n    await sendAndConfirmTransaction(connection, mintTransaction, [payer, mintKeypair], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Sender-Funded Token Transfer - JavaScript - jsx\nDESCRIPTION: Transfers SPL tokens to a recipient, funding their associated token account if necessary by signing with both the sender and recipient (using @solana/web3.js and @solana/spl-token). Inputs are the connection, recipient wallet, source and destination token accounts, and required signers. This method ensures the recipient can receive tokens even if their account was not previously created.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nconst signature = await transfer(\n    connection,\n    toWallet,\n    fromTokenAccount.address,\n    toTokenAccount.address,\n    fromWallet.publicKey,\n    50,\n    [fromWallet, toWallet]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating SPL Token Account via CLI\nDESCRIPTION: Creates a new SPL token account for a given token mint (`AQoK...`) using the `spl-token create-account` command. An optional auxiliary keypair file can be provided to define the new account's address; otherwise, a new keypair is generated. The command outputs the address of the created account and the transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM /path/to/auxiliary_keypair.json\nCreating account CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ\nSignature: 4yPWj22mbyLu5mhfZ5WATNfYzTt5EQ7LGzryxM7Ufu7QCVjTE7czZdEBqdKR7vjKsfAqsBdjU58NJvXrTqCXvfWW\n```\n\n----------------------------------------\n\nTITLE: Transferring SPL Tokens Between Accounts - CLI - console\nDESCRIPTION: Facilitates transferring a specified amount of SPL tokens from the sender's wallet to a recipient using the 'spl-token transfer' command. The command takes token mint, amount, and recipient address. Prints sender/recipient details, associated accounts, and the signature of the resulting transaction. Prior setup of associated token accounts is assumed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nTransfer 50 tokens\n  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\n  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks\n\nSignature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd\n```\n\n----------------------------------------\n\nTITLE: Creating SPL Token Mint with Permanent Delegate via CLI\nDESCRIPTION: Demonstrates using the `spl-token` CLI to create a new token mint under the Token-2022 program (`TokenzQdBN...`) with the permanent delegate extension enabled. The `--enable-permanent-delegate` flag activates this feature. By default, the CLI assigns the mint authority as the permanent delegate.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-permanent-delegate\nCreating token 7LUgoQCqhk3VMPhpAnmS1zdCFW4C6cupxgbqWrTwydGx under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  7LUgoQCqhk3VMPhpAnmS1zdCFW4C6cupxgbqWrTwydGx\nDecimals:  9\n\nSignature: 439yVq2WfUEegAPv5BAkFampBPo696UbZ58RAYCzvUcbcBcxhfThpt1pcdKmiQrurHj65CqmWiHzrfT12BhL3Nxb\n```\n\n----------------------------------------\n\nTITLE: Deriving Associated Token Account Address in TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to calculate the deterministic Program Derived Address (PDA) for an Associated Token Account (ATA) given a wallet's public key and a token mint's public key. It utilizes the `findProgramAddressSync` method from `@solana/web3.js`, requiring the wallet address, the SPL Token program ID, and the token mint address as seeds, along with the SPL Associated Token Account program ID. The function returns the derived PublicKey of the associated token account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/associated-token-account.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nfunction findAssociatedTokenAddress(\n    walletAddress: PublicKey,\n    tokenMintAddress: PublicKey\n): PublicKey {\n    return PublicKey.findProgramAddressSync(\n        [\n            walletAddress.toBuffer(),\n            TOKEN_PROGRAM_ID.toBuffer(),\n            tokenMintAddress.toBuffer(),\n        ],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swap Instruction Interfaces with Single and Multiple Token Programs - Rust\nDESCRIPTION: These code snippets illustrate the evolution of the Token-Swap instruction interface in Rust. The first snippet shows the previous interface, which accepts a single token program for all token types, while the second shows the revised interface that provides separate token program IDs for each token type (Token A, Token B, and Pool Token). Dependencies include Solana account structures and consistent account ordering, with key parameters being 'amount_in' and 'minimum_amount_out'. The primary input is a complex instruction account layout; outputs are tokens swapped accordingly. The main limitation is increased account array size and transaction space as multiple token programs must be specified.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n///   Swap the tokens in the pool.\\n///\\n///   0. `[]` Token-swap\\n///   1. `[]` swap authority\\n///   2. `[]` user transfer authority\\n///   3. `[writable]` token_(A|B) SOURCE Account, amount is transferable by user transfer authority,\\n///   4. `[writable]` token_(A|B) Base Account to swap INTO.  Must be the SOURCE token.\\n///   5. `[writable]` token_(A|B) Base Account to swap FROM.  Must be the DESTINATION token.\\n///   6. `[writable]` token_(A|B) DESTINATION Account assigned to USER as the owner.\\n///   7. `[writable]` Pool token mint, to generate trading fees\\n///   8. `[writable]` Fee account, to receive trading fees\\n///   9. `[]` Token program id\\n///   10. `[optional, writable]` Host fee account to receive additional trading fees\\nSwap {\\n    pub amount_in: u64,\\n    pub minimum_amount_out: u64\\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\n///   Swap the tokens in the pool.\\n///\\n///   0. `[]` Token-swap\\n///   1. `[]` swap authority\\n///   2. `[]` user transfer authority\\n///   3. `[writable]` token_(A|B) SOURCE Account, amount is transferable by user transfer authority,\\n///   4. `[writable]` token_(A|B) Base Account to swap INTO.  Must be the SOURCE token.\\n///   5. `[writable]` token_(A|B) Base Account to swap FROM.  Must be the DESTINATION token.\\n///   6. `[writable]` token_(A|B) DESTINATION Account assigned to USER as the owner.\\n///   7. `[writable]` Pool token mint, to generate trading fees\\n///   8. `[writable]` Fee account, to receive trading fees\\n///   9. `[]` Token (A|B) SOURCE program id\\n///   10. `[]` Token (A|B) DESTINATION program id\\n///   11. `[]` Pool Token program id\\n///   12. `[optional, writable]` Host fee account to receive additional trading fees\\nSwap {\\n    pub amount_in: u64,\\n    pub minimum_amount_out: u64\\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping SOL into WSOL - JavaScript - jsx\nDESCRIPTION: Performs a similar operation to the CLI for wrapping SOL into an SPL Token (WSOL) using JavaScript and @solana/web3.js and @solana/spl-token libraries. Demonstrates airdropping SOL, creating an associated token account for WSOL, transferring SOL, and synchronizing the WSOL balance. Outputs account details after wrapping. Prerequisites: Node.js and both libraries.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport {NATIVE_MINT, createAssociatedTokenAccountInstruction, getAssociatedTokenAddress, createSyncNativeInstruction, getAccount} from \"@solana/spl-token\";\nimport {clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL, SystemProgram, Transaction, sendAndConfirmTransaction} from \"@solana/web3.js\";\n\n(async () => {\n\nconst connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\nconst wallet = Keypair.generate();\n\nconst airdropSignature = await connection.requestAirdrop(\n  wallet.publicKey,\n  2 * LAMPORTS_PER_SOL,\n);\n\nawait connection.confirmTransaction(airdropSignature);\n\nconst associatedTokenAccount = await getAssociatedTokenAddress(\n  NATIVE_MINT,\n  wallet.publicKey\n)\n\n// Create token account to hold your wrapped SOL\nconst ataTransaction = new Transaction()\n  .add(\n    createAssociatedTokenAccountInstruction(\n      wallet.publicKey,\n      associatedTokenAccount,\n      wallet.publicKey,\n      NATIVE_MINT\n    )\n  );\n\nawait sendAndConfirmTransaction(connection, ataTransaction, [wallet]);\n\n// Transfer SOL to associated token account and use SyncNative to update wrapped SOL balance\nconst solTransferTransaction = new Transaction()\n  .add(\n    SystemProgram.transfer({\n        fromPubkey: wallet.publicKey,\n        toPubkey: associatedTokenAccount,\n        lamports: LAMPORTS_PER_SOL\n      }),\n      createSyncNativeInstruction(\n        associatedTokenAccount\n    )\n  )\n\nawait sendAndConfirmTransaction(connection, solTransferTransaction, [wallet]);\n\nconst accountInfo = await getAccount(connection, associatedTokenAccount);\n\nconsole.log(`Native: ${accountInfo.isNative}, Lamports: ${accountInfo.amount}`);\n\n})();\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Withheld Tokens from Mint using Solana JS Library\nDESCRIPTION: Uses the `withdrawWithheldTokensFromMint` function from the `@solana/spl-token` library (`TOKEN_2022_PROGRAM_ID`). This allows the configured withdraw withheld authority to move withheld fees previously harvested to the mint into a specific destination account. Requires `@solana/web3.js` and `@solana/spl-token` dependencies.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n    await withdrawWithheldTokensFromMint(\n        connection,\n        payer,\n        mint,\n        destinationAccount,\n        withdrawWithheldAuthority,\n        [],\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n```\n\n----------------------------------------\n\nTITLE: Enabling CPI Guard Using SPL Token CLI - Console\nDESCRIPTION: This snippet demonstrates enabling the CPI Guard extension on a Solana token account using the SPL Token CLI. The command 'spl-token enable-cpi-guard <ACCOUNT_ADDRESS>' initiates the action, and a transaction signature is returned upon success. Requires SPL Token CLI installed and a valid token account address. Input is the token account address, and output is the transaction signature confirming the operation.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_41\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token enable-cpi-guard 4YfkXX89TrsWqSSxb3av36Rk8EZBoDqxGzuaDNXr7UnL\n\nSignature: 2fohon7oraTCgBZB3dfzhpGsBobYmYPgA8nvgCqKzjqpdX6EYZaBY3VwzjNuwDpsFYYNbpTVYBjxqiaMBrvXM8S2\n```\n\n----------------------------------------\n\nTITLE: Creating Mint with Transfer Fee Config in Solana Token-2022 (JavaScript)\nDESCRIPTION: This script shows how to create a new mint with transfer fee configuration in the Solana Token-2022 program using JavaScript. It sets authorities, rent calculations, basis point fee, and max fee. Extensions are specified prior to account creation, and SPL plus Web3 dependencies are required. The mint's transferFeeConfig is initialized before mint creation to enable protocol-level transfer fee assessments.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\n\nimport {\n    ExtensionType,\n    createInitializeMintInstruction,\n    mintTo,\n    createAccount,\n    getMintLen,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\nimport {\n    createInitializeTransferFeeConfigInstruction,\n    harvestWithheldTokensToMint,\n    transferCheckedWithFee,\n    withdrawWithheldTokensFromAccounts,\n    withdrawWithheldTokensFromMint,\n} from '@solana/spl-token';\n\n(async () => {\n    const payer = Keypair.generate();\n\n    const mintAuthority = Keypair.generate();\n    const mintKeypair = Keypair.generate();\n    const mint = mintKeypair.publicKey;\n    const transferFeeConfigAuthority = Keypair.generate();\n    const withdrawWithheldAuthority = Keypair.generate();\n\n    const extensions = [ExtensionType.TransferFeeConfig];\n\n    const mintLen = getMintLen(extensions);\n    const decimals = 9;\n    const feeBasisPoints = 50;\n    const maxFee = BigInt(5_000);\n\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintLamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const mintTransaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: mint,\n            space: mintLen,\n            lamports: mintLamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeTransferFeeConfigInstruction(\n            mint,\n            transferFeeConfigAuthority.publicKey,\n            withdrawWithheldAuthority.publicKey,\n            feeBasisPoints,\n            maxFee,\n            TOKEN_2022_PROGRAM_ID\n        ),\n        createInitializeMintInstruction(mint, decimals, mintAuthority.publicKey, null, TOKEN_2022_PROGRAM_ID)\n    );\n    await sendAndConfirmTransaction(connection, mintTransaction, [payer, mintKeypair], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Viewing SPL Token Accounts - CLI - console\nDESCRIPTION: Lists all SPL Token accounts owned by the user via the CLI using the 'spl-token accounts' command. Requires the Solana CLI tools to be installed and the user to be authenticated. Outputs a table of token mints and balances for the current wallet. Useful for quickly auditing wallet token holdings.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token accounts\nToken                                         Balance\n------------------------------------------------------------\n7e2X5oeAAJyUTi4PfSGXFLGhyPw2H8oELm1mx87ZCgwF  84\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  100\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  0    (Aux-1*)\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  1    (Aux-2*)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Solana Devnet using web3.js\nDESCRIPTION: Establishes a connection to the Solana Devnet cluster using the `@solana/web3.js` library. It imports necessary components and creates a `Connection` object, specifying the cluster URL and commitment level ('confirmed').\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst web3 = require('@solana/web3.js');\nconst connection = new web3.Connection(web3.clusterApiUrl('devnet'), 'confirmed');\n```\n\n----------------------------------------\n\nTITLE: Checking Token Account Balance via CLI\nDESCRIPTION: Checks the balance of a specific SPL token within the default keypair's associated token account using the `spl-token` CLI utility. Requires the token's mint address as an argument. Initially, the balance is 0.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n0\n```\n\n----------------------------------------\n\nTITLE: Initializing a Token-2022 Account with ImmutableOwner Extension in Rust\nDESCRIPTION: Rust example for creating a Token-2022 token account with the `ImmutableOwner` extension. It involves calculating space with `ExtensionType::try_calculate_account_len`, creating the account using `system_instruction::create_account`, initializing the extension via `initialize_immutable_owner` (before `initialize_account`), and creating a transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse spl_token_2022::{extension::ExtensionType, instruction::*, state::Account};\nuse solana_sdk::{system_instruction, transaction::Transaction};\n\n// Calculate the space required using the `ExtensionType`\nlet space = ExtensionType::try_calculate_account_len::<Account>(&[ExtensionType::ImmutableOwner]).unwrap();\n\n// get the Rent object and calculate the rent required\nlet rent_required = rent.minimum_balance(space);\n\n// and then create the account using those parameters\nlet create_instruction = system_instruction::create_account(&payer.pubkey(), account_pubkey, rent_required, space, token_program_id);\n\n// Important: you must initialize immutable owner *BEFORE* initializing the account\nlet initialize_immutable_owner_instruction = initialize_immutable_owner(token_program_id, account_pubkey).unwrap();\nlet initialize_account_instruction = initialize_account(token_program_id, account_pubkey, mint_pubkey, owner_pubkey).unwrap();\n\n// Make the transaction with all of these instructions\nlet create_account_transaction = Transaction::new(&[create_instruction, initialize_immutable_owner_instruction, initialize_account_instruction], Some(&payer.pubkey));\n\n// Sign it and send it however you want!\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with Fee Check using Solana JS Library\nDESCRIPTION: Uses functions like `createAccount`, `mintTo`, and `transferCheckedWithFee` from the `@solana/spl-token` library (for `TOKEN_2022_PROGRAM_ID`) to programmatically create accounts, mint tokens, calculate the required fee based on `feeBasisPoints`, and execute a transfer that validates the provided fee amount. Requires `@solana/web3.js` and `@solana/spl-token` dependencies.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n    const mintAmount = BigInt(1_000_000_000);\n    const owner = Keypair.generate();\n    const sourceAccount = await createAccount(\n        connection,\n        payer,\n        mint,\n        owner.publicKey,\n        undefined,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n    await mintTo(\n        connection,\n        payer,\n        mint,\n        sourceAccount,\n        mintAuthority,\n        mintAmount,\n        [],\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n\n    const accountKeypair = Keypair.generate();\n    const destinationAccount = await createAccount(\n        connection,\n        payer,\n        mint,\n        owner.publicKey,\n        accountKeypair,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n\n    const transferAmount = BigInt(1_000_000);\n    const fee = (transferAmount * BigInt(feeBasisPoints)) / BigInt(10_000);\n    await transferCheckedWithFee(\n        connection,\n        payer,\n        sourceAccount,\n        mint,\n        destinationAccount,\n        owner,\n        transferAmount,\n        decimals,\n        fee,\n        [],\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n```\n\n----------------------------------------\n\nTITLE: Checking SPL Token Account Balances via CLI\nDESCRIPTION: Lists all token accounts associated with a specific token mint (`AQoK...`) along with their balances using the `spl-token accounts` command. The `-v` flag provides verbose output, including the account address, token mint, and balance.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v\nAccount                                       Token                                         Balance\n--------------------------------------------------------------------------------------------------------\n7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  100\nCqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  0    (Aux-1*)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zero Transfer Fee Config for Token-2022 Mint in Rust\nDESCRIPTION: Creates an instruction using `spl_token_2022::extension::transfer_fee::instruction::initialize_transfer_fee_config` to set up the transfer fee configuration on a Token-2022 mint. This specific example initializes the fee percentage and maximum fee to zero as part of adding the extension.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nlet rate_authority = Keypair::new();\nlet withdraw_authority = Keypair::new();\n\nlet instruction = spl_token_2022::extension::transfer_fee::instruction::initialize_transfer_fee_config(\n    program_id, &mint_key, rate_authority.pubkey(), withdraw_authority.pubkey(), 0, 0\n).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Checking NFT Account Info via CLI\nDESCRIPTION: Displays detailed information about a specific NFT token account (`7Kqp...`) using `spl-token account-info`. This verifies that the account holds a balance of 1 for the correct mint and shows other account properties like owner and state.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_46\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token account-info 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n\nAddress: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nBalance: 1\nMint: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\nOwner: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nState: Initialized\nDelegation: (not set)\nClose authority: (not set)\n```\n\n----------------------------------------\n\nTITLE: Creating a Token with Default Frozen Accounts - SPL CLI - console\nDESCRIPTION: This snippet walks through creating an SPL token mint with all derived accounts defaulting to the 'Frozen' state using the CLI. It involves creating the mint with --enable-freeze and --default-account-state frozen, creating a token account, and displaying its details to verify state. Prerequisites: spl-token CLI tool installed and a configured Solana environment. Requires proper keypair setup and sufficient funds for transactions. The process outputs the mint address, transaction signature, and token account info indicating the 'Frozen' state.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-freeze --default-account-state frozen\nCreating token 8Sqz2zV8TFTnkLtnCdqRkjJsre3GKRwHcZd3juE5jJHf under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  8Sqz2zV8TFTnkLtnCdqRkjJsre3GKRwHcZd3juE5jJHf\nDecimals:  9\n\nSignature: 5wfYvovguPEbyv2uSWxGt9JcpTWgyuP4hY3wutjS32Ahnoni4qd7gf6sLre855WvT6xLHwrvV7J8bVmXymNU2qUz\n\n$ spl-token create-account 8Sqz2zV8TFTnkLtnCdqRkjJsre3GKRwHcZd3juE5jJHf\nCreating account 6XpKagP1N3K1XnzStufpV5YZ6DksEkQWgLNG9kPpLyvv\n\nSignature: 2awxWdQMgv89ew34sEyG361vshB2wPXHHfva5iJ43dWr18f2Pr6awoXfsqYPpyS2eSbH6jhfVY9EUck8iJ4wCSN6\n\n$ spl-token display 6XpKagP1N3K1XnzStufpV5YZ6DksEkQWgLNG9kPpLyvv\nSPL Token Account\n  Address: 6XpKagP1N3K1XnzStufpV5YZ6DksEkQWgLNG9kPpLyvv\n  Program: TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n  Balance: 0\n  Decimals: 9\n  Mint: 8Sqz2zV8TFTnkLtnCdqRkjJsre3GKRwHcZd3juE5jJHf\n  Owner: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\n  State: Frozen\n  Delegation: (not set)\n  Close authority: (not set)\nExtensions:\n  Immutable owner\n```\n\n----------------------------------------\n\nTITLE: Minting NFT Token using JavaScript SDK\nDESCRIPTION: Mints exactly one token (`1`) into the specified associated token account using the `mintTo` function from `@solana/spl-token`. This is the JavaScript equivalent of minting the NFT. Requires the connection, payer, mint address, destination account address, mint authority, and amount (1 for NFT).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_43\n\nLANGUAGE: jsx\nCODE:\n```\nawait mintTo(\n    connection,\n    wallet,\n    mint,\n    associatedTokenAccount.address,\n    wallet,\n    1\n  );\n```\n\n----------------------------------------\n\nTITLE: Checking NFT Total Supply via CLI\nDESCRIPTION: Checks the total supply of a specific NFT mint (`559u...`) using `spl-token supply`. After minting one token and disabling the mint authority, the supply should be 1.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_47\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token supply 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n1\n```\n\n----------------------------------------\n\nTITLE: Initializing Non-Zero Transfer Fee Config for Token-2022 Mint in Rust\nDESCRIPTION: Creates an instruction using `spl_token_2022::extension::transfer_fee::instruction::initialize_transfer_fee_config` to set up the transfer fee configuration on a Token-2022 mint with a non-zero fee (100 basis points, i.e., 1%) and a maximum fee. This is used to test the program's handling of transfer fees.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nlet rate_authority = Keypair::new();\nlet withdraw_authority = Keypair::new();\nlet transfer_fee_basis_points = 100;\nlet maximum_transfer_fee = 1_000_000_000;\n\nlet instruction = spl_token_2022::extension::transfer_fee::instruction::initialize_transfer_fee_config(\n    program_id, &mint_key, rate_authority.pubkey(), withdraw_authority.pubkey(), \n    transfer_fee_basis_points, maximum_transfer_fee\n).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens using spl-token JS\nDESCRIPTION: Mints a specified amount of an SPL token to a destination token account using the `mintTo` function from `@solana/spl-token`. Requires a `connection`, `payer` keypair, the `mint` address, the destination `tokenAccount.address`, the `mintAuthority` keypair (or signer), and the `amount` in the smallest denomination (considering token decimals). Note the amount calculation based on decimals.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nawait mintTo(\n  connection,\n  payer,\n  mint,\n  tokenAccount.address,\n  mintAuthority,\n  100000000000 // because decimals for the mint are set to 9 \n)\n```\n\n----------------------------------------\n\nTITLE: Creating Mint and Token Accounts, Assigning Multisig Authority - Solana JS - jsx\nDESCRIPTION: Creates an SPL token mint setting the multisig account as mint authority, and derives or creates an associated token account for a signer. Requires '@solana/web3.js', SPL Token JS SDK, multisigKey, payer, and signer1. Returns JS Mint and token account objects for further minting operations.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_56\n\nLANGUAGE: jsx\nCODE:\n```\nconst mint = await createMint(\n    connection,\n    payer,\n    multisigKey,\n    multisigKey,\n    9\n  );\n\nconst associatedTokenAccount = await getOrCreateAssociatedTokenAccount(\n  connection,\n  payer,\n  mint,\n  signer1.publicKey\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @solana/spl-token with Yarn\nDESCRIPTION: Adds the `@solana/spl-token` JavaScript library to a project using the Yarn package manager. This library provides functions for interacting with the SPL Token program.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nyarn add @solana/spl-token\n```\n\n----------------------------------------\n\nTITLE: Disabling NFT Mint Authority using JavaScript SDK\nDESCRIPTION: Disables the mint authority for an NFT mint using the `createSetAuthorityInstruction` from `@solana/spl-token`. A transaction is created containing this instruction, which sets the `MintTokens` authority to `null`. The transaction is then sent and confirmed. Requires the mint address, current mint authority public key, and the `AuthorityType.MintTokens`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\n\nlet transaction = new Transaction()\n  .add(createSetAuthorityInstruction(\n    mint,\n    wallet.publicKey,\n    AuthorityType.MintTokens,\n    null\n  ));\n\nawait web3.sendAndConfirmTransaction(connection, transaction, [wallet]);\n```\n\n----------------------------------------\n\nTITLE: Creating Token-2022 Mint with Group Extension Enabled using spl-token CLI\nDESCRIPTION: This command uses `spl-token` CLI to create a new Token-2022 mint and enables the Group extension (`--enable-group`). This automatically adds the Group Pointer extension pointing to the mint itself, preparing it to store group configurations directly. A subsequent `initialize-group` command is needed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_60\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-group\nCreating token 812A34SxxYx9KqFwUNAuW7Wpwtmuj2pc5u1TGQcvPnj3 under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\nTo initialize group configurations inside the mint, please run `spl-token initialize-group 812A34SxxYx9KqFwUNAuW7Wpwtmuj2pc5u1TGQcvPnj3 <MAX_SIZE>`, and sign with the mint authority.\n\nAddress:  812A34SxxYx9KqFwUNAuW7Wpwtmuj2pc5u1TGQcvPnj3\nDecimals:  9\n\nSignature: 2BZH8KE7zVcBj7Mmnu6uCM9NT4ey7qHasZmEk6Bt3tyx1wKCXS3JtcgEvrXXEMFB5numQgA9wvR67o2Z4YQdEw7m\n```\n\n----------------------------------------\n\nTITLE: Mint Attempt with Insufficient Multisig Signers - Solana CLI - console\nDESCRIPTION: Attempts to mint a token with only one signer provided to a multisig-controlled mint account. Fails due to insufficient signatures, as shown by the returned error message. Useful for demonstrating enforced multisig rules. Requires prior multisig setup.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_57\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer signer-1.json\n```\n\nLANGUAGE: console\nCODE:\n```\nMinting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nRPC response error -32002: Transaction simulation failed: Error processing Instruction 0: missing required signature for instruction\n```\n\n----------------------------------------\n\nTITLE: Checking Token Account Balance using spl-token JS\nDESCRIPTION: Fetches and logs the balance (amount) of a specific token account using the `getAccount` function from the `@solana/spl-token` library. Requires a `connection` object and the `tokenAccount.address`. The amount is accessed via the `amount` property of the returned account info.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nconst tokenAccountInfo = await getAccount(\n  connection,\n  tokenAccount.address\n)\n\nconsole.log(tokenAccountInfo.amount);\n// 0\n```\n\n----------------------------------------\n\nTITLE: Fetching Token and Token-2022 Accounts using web3.js\nDESCRIPTION: This TypeScript snippet demonstrates how to fetch both standard SPL Token accounts and Token-2022 accounts for a specific wallet address using `@solana/web3.js`. It makes two separate calls to `connection.getTokenAccountsByOwner`, filtering by `programId` for `TOKEN_PROGRAM_ID` and `TOKEN_2022_PROGRAM_ID` respectively. Wallets need to merge these results.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nconst TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n);\nconst TOKEN_2022_PROGRAM_ID = new PublicKey(\n  'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'\n);\nconst walletPublicKey = new PublicKey('11111111111111111111111111111111'); // insert your key\nconst connection = new Connection('http://127.0.0.1:8899', 'confirmed');\n\nconst tokenAccounts = await connection.getTokenAccountsByOwner(\n  walletPublicKey, { programId: TOKEN_PROGRAM_ID }\n);\nconst token2022Accounts = await connection.getTokenAccountsByOwner(\n  walletPublicKey, { programId: TOKEN_2022_PROGRAM_ID }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing SPL Token CLI Utility\nDESCRIPTION: Installs the `spl-token-cli` command-line utility using Rust's package manager, Cargo. This utility allows interaction with the SPL Token program directly from the command line. Requires Rust and Cargo to be installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo install spl-token-cli\n```\n\n----------------------------------------\n\nTITLE: Generating Multisig Signer Keypairs - Solana JS - jsx\nDESCRIPTION: Creates three new Solana Keypair instances for use as signers in a multisig authority. Requires '@solana/web3.js' and access to the Keypair class. Outputs three Keypair objects (signer1, signer2, signer3) for subsequent use.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_50\n\nLANGUAGE: jsx\nCODE:\n```\nconst signer1 = Keypair.generate();\nconst signer2 = Keypair.generate();\nconst signer3 = Keypair.generate();\n```\n\n----------------------------------------\n\nTITLE: Generating Multisig Signer Keypairs - Solana CLI - console\nDESCRIPTION: Generates three new Solana keypair JSON files (signer-1.json, signer-2.json, signer-3.json) to be used as multisig signers. Requires solana-keygen CLI tool installed and available in the PATH. No input parameters are needed; output is three separate keypair files. Used for multisig setup.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_49\n\nLANGUAGE: console\nCODE:\n```\n$ for i in $(seq 3); do solana-keygen new --no-passphrase -so \"signer-${i}.json\"; done\nWrote new keypair to signer-1.json\nWrote new keypair to signer-2.json\nWrote new keypair to signer-3.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Signer Public Keys - Solana CLI - console\nDESCRIPTION: Retrieves the public keys from the generated keypair files for use as the multisig signer set. Requires the three signer-*.json files and solana-keygen in the environment. Prints each filename and corresponding public key.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_51\n\nLANGUAGE: console\nCODE:\n```\n$ for i in $(seq 3); do SIGNER=\"signer-${i}.json\"; echo \"$SIGNER: $(solana-keygen pubkey \"$SIGNER\")\"; done\nsigner-1.json: BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\nsigner-2.json: DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\nsigner-3.json: D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG\n```\n\n----------------------------------------\n\nTITLE: Logging Multisig Signer Public Keys - Solana JS - jsx\nDESCRIPTION: Logs the public keys (as base58 strings) for the three generated signers to the console. Requires signer1, signer2, and signer3 Keypair objects. Output is plain base58 strings; no return value.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_52\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(signer1.publicKey.toBase58());\nconsole.log(signer2.publicKey.toBase58());\nconsole.log(signer3.publicKey.toBase58());\n/*\n  BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\n  DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\n  D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG\n */\n```\n\n----------------------------------------\n\nTITLE: Creating Durable Nonce Accounts and Querying State with Solana Web3.js (jsx)\nDESCRIPTION: Illustrates the use of Solana Web3.js to establish a connection, create a nonce account, fund it, and fetch its nonce status, necessary for nonce-based transaction flows. Dependencies: '@solana/web3.js', SystemProgram, and corresponding keypairs. Key parameters: public keys for both the funder and the nonce account, and the minimum lamports for rent exemption. Outputs include nonce account data, such as current nonce and authority.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_62\n\nLANGUAGE: jsx\nCODE:\n```\nconst connection = new Connection(\n  clusterApiUrl('devnet'),\n  'confirmed',\n);\n\nconst onlineAccount = Keypair.generate();\nconst nonceAccount = Keypair.generate();\n\nconst minimumAmount = await connection.getMinimumBalanceForRentExemption(\n  NONCE_ACCOUNT_LENGTH,\n);\n\n// Form CreateNonceAccount transaction\nconst transaction = new Transaction()\n  .add(\n  SystemProgram.createNonceAccount({\n    fromPubkey: onlineAccount.publicKey,\n    noncePubkey: nonceAccount.publicKey,\n    authorizedPubkey: onlineAccount.publicKey,\n    lamports: minimumAmount,\n  }),\n);\n\nawait web3.sendAndConfirmTransaction(connection, transaction, [onlineAccount, nonceAccount])\n\nconst nonceAccountData = await connection.getNonce(\n  nonceAccount.publicKey,\n  'confirmed',\n);\n\nconsole.log(nonceAccountData);\n/*\nNonceAccount {\n  authorizedPubkey: '5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE'\n  nonce: '6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E',\n  feeCalculator: { lamportsPerSignature: 5000 }\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Initializing Member Configurations on Mint using spl-token CLI\nDESCRIPTION: This command initializes the Member configurations on a Token-2022 mint (9uyq...) that was previously created with `--enable-member`. It specifies the update authority for the member configurations. This command must be signed by the mint authority.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_64\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token initialize-member 9uyqmf9Ued4yQKi4hXT5wMzPF5Nv1S6skAjkjxcCaAyV --update-authority 3pGiHDDek35npQuyWQ7FGcWxqJdHvVPDHDDmBFs2YxQj\nSignature: 2H16XtBqdwSbvvq8g5o2jhy4TknP6zgt71KHawEdyPvNuvusQrV4dPccUrMqjFeNTbk75AtzmzUVueH3yWiTjBCG\n```\n\n----------------------------------------\n\nTITLE: Setting Default Keypair from File via CLI\nDESCRIPTION: Configures the Solana CLI to use a specific keypair file as the default identity for signing transactions. The path should point to a valid Solana keypair JSON file.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --keypair ${HOME}/new-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Account - Solana CLI - console\nDESCRIPTION: Creates a 2-of-3 multisig SPL token account using public keys as signers. First argument is the required number of signers (2), followed by the public keys. Requires spl-token CLI tool and the previously acquired public keys. Outputs the new multisig address and transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_53\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-multisig 2 BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\nDhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG\n```\n\nLANGUAGE: console\nCODE:\n```\nCreating 2/3 multisig 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\nSignature: 2FN4KXnczAz33SAxwsuevqrD1BvikP6LUhLie5Lz4ETt594X8R7yvMZzZW2zjmFLPsLQNHsRuhQeumExHbnUGC9A\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Transferable Token Mint using spl-token CLI\nDESCRIPTION: This command uses the `spl-token` CLI to create a new token mint under the Token-2022 program (`TokenzQd...`). The `--enable-non-transferable` flag initializes the mint with the NonTransferable extension, preventing the tokens from being transferred after minting. It outputs the address of the created token and the transaction signature. Requires `spl-token` CLI installed and configured.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-non-transferable\nCreating token 7De7wwkvNLPXpShbPDeRCLukb3CRzCNcC3iUuHtD6k4f under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  7De7wwkvNLPXpShbPDeRCLukb3CRzCNcC3iUuHtD6k4f\nDecimals:  9\n\nSignature: 2QtCBwCo2J9hf2Prd2t4CBBUxEXQCBSSD5gkNc59AwhxsKgRp92czNAvwWDxjeXGFCWSuNmzAcD19cEpqubovDDv\n```\n\n----------------------------------------\n\nTITLE: Setting Solana Cluster RPC URL via CLI\nDESCRIPTION: Configures the Solana CLI to use a specific cluster's RPC URL. This example sets the URL to the Solana Devnet.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Tallying Votes for a Feature Proposal - Shell\nDESCRIPTION: This snippet demonstrates how to tally community votes for a proposed Solana feature using spl-feature-proposal tally. It is a single-step command that anyone can run, with the only input being the proposal address, and prints feedback to the console. Essential to finalizing the proposal process, tallying is permissionless and automatically activates the feature when the acceptance threshold is met at epoch boundary.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/feature-proposal.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-feature-proposal tally 8CyUVvio2oYAP28ZkMBPHq88ikhRgWet6i4NYsCW5Cxa\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Token Account Instruction with Program ID using spl-token\nDESCRIPTION: This TypeScript snippet demonstrates creating an instruction to initialize an Associated Token Account (ATA) using `createAssociatedTokenAccountInstruction` from `@solana/spl-token`. It correctly passes the `tokenProgramId` (which could be either Token or Token-2022) as a parameter, alongside the payer, derived ATA address, owner, and mint.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { createAssociatedTokenAccountInstruction } from '@solana/spl-token';\n\nconst tokenProgramId = new PublicKey(\n  'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'\n); // either `Tokenz...` or `Tokenkeg...`\nconst wallet = new PublicKey('11111111111111111111111111111111'); // insert your key\nconst mint = new PublicKey('11111111111111111111111111111111'); // insert mint key\nconst associatedTokenAccount = associatedTokenAccountAddress(mint, wallet, tokenProgramId);\n\nconst instruction = createAssociatedTokenAccountInstruction(\n  wallet,                 // payer\n  associatedTokenAccount, // associated token account\n  wallet,                 // owner\n  tokenProgramId,         // token program id\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Token Mint with Transfer Hook via @solana/spl-token - JavaScript\nDESCRIPTION: Illustrates using @solana/web3.js and @solana/spl-token to create a Solana mint with a transfer-hook extension in JavaScript. Dependencies include these two libraries and a devnet connection. The script handles keypair generation, airdrop funding, account allocation, and initializing both the transfer hook and the mint itself. Inputs include the transfer-hook program ID and desired decimals; output is a fully initialized mint on devnet. Requires network connectivity and access to devnet.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    PublicKey,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\n\nimport {\n    ExtensionType,\n    createInitializeMintInstruction,\n    createInitializeTransferHookInstruction,\n    mintTo,\n    createAccount,\n    getMintLen,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const payer = Keypair.generate();\n\n    const mintAuthority = Keypair.generate();\n    const mintKeypair = Keypair.generate();\n    const mint = mintKeypair.publicKey;\n\n    const extensions = [ExtensionType.TransferHook];\n    const mintLen = getMintLen(extensions);\n    const decimals = 9;\n    const transferHookProgramId = new PublicKey('7N4HggYEJAtCLJdnHGCtFqfxcB5rhQCsQTze3ftYstVj')\n\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintLamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const mintTransaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: mint,\n            space: mintLen,\n            lamports: mintLamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeTransferHookInstruction(mint, payer.publicKey, transferHookProgramId, TOKEN_2022_PROGRAM_ID),\n        createInitializeMintInstruction(mint, decimals, mintAuthority.publicKey, null, TOKEN_2022_PROGRAM_ID)\n    );\n    await sendAndConfirmTransaction(connection, mintTransaction, [payer, mintKeypair], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mint with Embedded Metadata via SPL Token CLI - Console\nDESCRIPTION: Shows the step-by-step workflow for setting up a token mint with embedded metadata using the SPL Token CLI. First, you create the mint with --enable-metadata, and then initialize its metadata using spl-token initialize-metadata, providing token name, symbol, URI, and optionally an update authority. Requires the CLI and mint authority signature. Output includes mint address, decimals, and transaction signatures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_51\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-metadata\nCreating token 5K8RVdjpY3CHujyKjQ7RkyiCJqTG8Kba9krNfpZnmvpS under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\nTo initialize metadata inside the mint, please run `spl-token initialize-metadata 5K8RVdjpY3CHujyKjQ7RkyiCJqTG8Kba9krNfpZnmvpS <YOUR_TOKEN_NAME> <YOUR_TOKEN_SYMBOL> <YOUR_TOKEN_URI>`, and sign with the mint authority\n\nAddress:  5K8RVdjpY3CHujyKjQ7RkyiCJqTG8Kba9krNfpZnmvpS\nDecimals:  9\n\nSignature: 2BZH8KE7zVcBj7Mmnu6uCM9NT4ey7qHasZmEk6Bt3tyx1wKCXS3JtcgEvrXXEMFB5numQgA9wvR67o2Z4YQdEw7m\n\n$ spl-token initialize-metadata 5K8RVdjpY3CHujyKjQ7RkyiCJqTG8Kba9krNfpZnmvpS MyTokenName TOKEN http://my.token --update-authority 3pGiHDDek35npQuyWQ7FGcWxqJdHvVPDHDDmBFs2YxQj\nSignature: 2H16XtBqdwSbvvq8g5o2jhy4TknP6zgt71KHawEdyPvNuvusQrV4dPccUrMqjFeNTbk75AtzmzUVueH3yWiTjBCG\n```\n\n----------------------------------------\n\nTITLE: Querying Solana for Token Accounts by Owner using JSON RPC (Shell)\nDESCRIPTION: This cURL command illustrates using the Solana JSON RPC `getProgramAccounts` method to find all SPL Token accounts owned by a specific wallet address (`vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg`). It targets the Token program (`TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`), filters for accounts with data size 165 bytes, and uses `memcmp` to match the owner's public key at offset 32 within the token account data structure. Requires a running Solana RPC endpoint accessible via HTTP.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://api.mainnet-beta.solana.com -X POST -H \"Content-Type: application/json\" -d '\\n  {\\n    \"jsonrpc\": \"2.0\",\\n    \"id\": 1,\\n    \"method\": \"getProgramAccounts\",\\n    \"params\": [\\n      \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\\n      {\\n        \"encoding\": \"jsonParsed\",\\n        \"filters\": [\\n          {\\n            \"dataSize\": 165\\n          },\\n          {\\n            \"memcmp\": {\\n              \"offset\": 32,\\n              \"bytes\": \"vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\"\\n            }\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n'\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Confidential Tokens to Non-Confidential Balance\nDESCRIPTION: Moves a specified amount of tokens from the user's available confidential balance back into their non-confidential balance within the same account using the `spl-token` CLI. Replace `<MINT_PUBKEY>` with the mint's public key, `<AMOUNT>` with the number of tokens to withdraw, and `<ACCOUNT_PUBKEY>` with the user's token account public key. Ensure any pending balance is applied first.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/quickstart.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token withdraw-confidential-tokens <MINT_PUBKEY> <AMOUNT> --address <ACCOUNT_PUBKEY>\n```\n\n----------------------------------------\n\nTITLE: Depositing Tokens into Confidential Balance\nDESCRIPTION: Moves a specified amount of non-confidential tokens from a user's standard balance into their confidential balance within the same account using the `spl-token` CLI. Replace `<MINT_PUBKEY>` with the mint's public key, `<AMOUNT>` with the number of tokens to deposit, and `<ACCOUNT_PUBKEY>` with the user's token account public key. The account must first be configured for confidential transfers.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/quickstart.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token deposit-confidential-tokens <MINT_PUBKEY> <AMOUNT> --address <ACCOUNT_PUBKEY>\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Token Account via CLI\nDESCRIPTION: Creates a new SPL token account for a specific NFT mint (`559u...`) using the `spl-token create-account` command. This account will be used to hold the NFT. The command outputs the new account address and the transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_40\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\nCreating account 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nSignature: sjChze6ecaRtvuQVZuwURyg6teYeiH8ZwT6UTuFNKjrdayQQ3KNdPB7d2DtUZ6McafBfEefejHkJ6MWQEfVHLtC\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with Required Memo using spl-token CLI\nDESCRIPTION: This `spl-token` CLI command executes a token transfer (`transfer`) while simultaneously providing the required memo using the `--with-memo` flag. This is necessary when sending tokens to an account where the `MemoTransfer` extension has been enabled. It specifies the token mint address, amount, destination account address, and the memo text. Requires `spl-token` CLI.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token transfer EbPBt3XkCb9trcV4c8fidhrvoeURbDbW87Acustzyi8N 10 4Uzz67txwYbfYpF8r5UGEMYJwhPAYQ5eFUY89KTYc2bL --with-memo \"memo text\"\nSignature: 5a9X8JrWzwZqb3iMonfUfSZbisQ57aEmW5cFntWGYRv2UZx8ACkMineBEQRHwLMzYHeyFDEHMXu8zqAMv5tm4u1g\n```\n\n----------------------------------------\n\nTITLE: Illustrating TransferChecked Instruction Byte Representation in Solana Token Programs\nDESCRIPTION: This snippet shows the byte representation for a `TransferChecked` instruction used in both the original Token program and Token-2022. It demonstrates transferring 75 base units of a token (representing 0.75 UI amount for a mint with 2 decimals). The byte array consists of the instruction identifier (12), the amount (75 as a little-endian 64-bit unsigned integer), and the number of decimals (2 as a byte). This format ensures backward compatibility between the two programs.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[12, 75, 0, 0, 0, 0, 0, 0, 0, 2]\n ^^ TransferChecked enum\n     ^^^^^^^^^^^^^^^^^^^^^^^^ 75, as a little-endian 64-bit unsigned integer\n                               ^ 2, as a byte\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Required Memo Transfers using spl-token CLI\nDESCRIPTION: These `spl-token` CLI commands demonstrate how an account owner can disable (`disable-required-transfer-memos`) or enable (`enable-required-transfer-memos`) the requirement for memos on incoming transfers for a specific token account. Requires `spl-token` CLI and the account address.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token disable-required-transfer-memos 4Uzz67txwYbfYpF8r5UGEMYJwhPAYQ5eFUY89KTYc2bL\nSignature: 5a9X8JrWzwZqb3iMonfUfSZbisQ57aEmW5cFntWGYRv2UZx8ACkMineBEQRHwLMzYHeyFDEHMXu8zqAMv5tm4u1g\n\n$ spl-token enable-required-transfer-memos 4Uzz67txwYbfYpF8r5UGEMYJwhPAYQ5eFUY89KTYc2bL\nSignature: 5MnWtrhMK32zkbacDMwBNft48VAUpr4EoRM87hkT9AFYvPgPEU7V7ERV6gdfb3kASri4wnUnr13hNKuYJ66pD8Fs\n```\n\n----------------------------------------\n\nTITLE: Checking SPL Token Balances After Transfer via CLI\nDESCRIPTION: Re-checks the balances of token accounts for a specific mint (`AQoK...`) using `spl-token accounts -v` after a transfer operation to verify the updated balances.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v\nAccount                                       Token                                         Balance\n--------------------------------------------------------------------------------------------------------\n7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  50\nCqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  50  (Aux-1*)\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Withheld Tokens from Accounts using Solana JS Library\nDESCRIPTION: Uses the `withdrawWithheldTokensFromAccounts` function from the `@solana/spl-token` library (`TOKEN_2022_PROGRAM_ID`) to move withheld fees from a list of source accounts (`accountsToWithdrawFrom`) to a designated destination account. Requires the signature of the configured withdraw withheld authority. Dependencies include `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n    await withdrawWithheldTokensFromAccounts(\n        connection,\n        payer,\n        mint,\n        destinationAccount,\n        withdrawWithheldAuthority,\n        [],\n        [destinationAccount], // Example: withdrawing from the destination account itself if it held fees\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components in MDX\nDESCRIPTION: This snippet imports the `Tabs` and `TabItem` components from the `@theme` library, likely within an MDX file, to enable tabbed navigation for presenting code snippets or related content.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via CLI\nDESCRIPTION: Mints a specified amount of an SPL token into a recipient account using the `spl-token` CLI utility. Requires the token mint address and the amount to mint. By default, it mints to the associated token account of the default keypair.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100\nMinting 100 tokens\n  Token: AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n  Recipient: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\nSignature: 41mARH42fPkbYn1mvQ6hYLjmJtjW98NXwd6pHqEYg9p8RnuoUsMxVd16RkStDHEzcS2sfpSEpFscrJQn3HkHzLaa\n```\n\n----------------------------------------\n\nTITLE: Transferring SPL Tokens Between Accounts - JavaScript - jsx\nDESCRIPTION: Implements the workflow for minting and transferring SPL tokens from one account to another using @solana/web3.js and @solana/spl-token. Flow includes generating wallets, airdropping SOL, minting new tokens, creating or fetching token accounts for both sender and recipient, minting to sender, and transferring a specified amount to the recipient. Each step relies on the respective library functions and requires Solana network connectivity. Transaction signatures are logged.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport { clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createMint, getOrCreateAssociatedTokenAccount, mintTo, transfer } from '@solana/spl-token';\n\n(async () => {\n    // Connect to cluster\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    // Generate a new wallet keypair and airdrop SOL\n    const fromWallet = Keypair.generate();\n    const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n\n    // Wait for airdrop confirmation\n    await connection.confirmTransaction(fromAirdropSignature);\n\n    // Generate a new wallet to receive newly minted token\n    const toWallet = Keypair.generate();\n\n    // Create new token mint\n    const mint = await createMint(connection, fromWallet, fromWallet.publicKey, null, 9);\n\n    // Get the token account of the fromWallet address, and if it does not exist, create it\n    const fromTokenAccount = await getOrCreateAssociatedTokenAccount(\n        connection,\n        fromWallet,\n        mint,\n        fromWallet.publicKey\n    );\n\n    // Get the token account of the toWallet address, and if it does not exist, create it\n    const toTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, toWallet.publicKey);\n\n    // Mint 1 new token to the \"fromTokenAccount\" account we just created\n    let signature = await mintTo(\n        connection,\n        fromWallet,\n        mint,\n        fromTokenAccount.address,\n        fromWallet.publicKey,\n        1000000000\n    );\n    console.log('mint tx:', signature);\n\n    // Transfer the new token to the \"toTokenAccount\" we just created\n    signature = await transfer(\n        connection,\n        fromWallet,\n        fromTokenAccount.address,\n        toTokenAccount.address,\n        fromWallet.publicKey,\n        50\n    );\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing Group Configurations on Mint using spl-token CLI\nDESCRIPTION: This command initializes the Group configurations on a Token-2022 mint (812A...) that was previously created with `--enable-group`. It sets the maximum size of the group (12) and specifies the update authority. This command must be signed by the mint authority.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_61\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token initialize-group 812A34SxxYx9KqFwUNAuW7Wpwtmuj2pc5u1TGQcvPnj3 12 --update-authority 3pGiHDDek35npQuyWQ7FGcWxqJdHvVPDHDDmBFs2YxQj\nSignature: 2H16XtBqdwSbvvq8g5o2jhy4TknP6zgt71KHawEdyPvNuvusQrV4dPccUrMqjFeNTbk75AtzmzUVueH3yWiTjBCG\n```\n\n----------------------------------------\n\nTITLE: Calculating Solana Account Size with TransferFeeConfig in Rust\nDESCRIPTION: Shows how to calculate the required space for Mint and Account structures including the `TransferFeeConfig` and `TransferFeeAmount` extensions using `ExtensionType::try_calculate_account_len`. This modification is necessary to accommodate the state for transfer fees when initializing Token-2022 mints and accounts.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nlet mint_space = ExtensionType::try_calculate_account_len::<Mint>(&[ExtensionType::MintCloseAuthority, ExtensionType::TransferFeeConfig]).unwrap();\nlet account_space = ExtensionType::try_calculate_account_len::<Account>(&[ExtensionType::ImmutableOwner, ExtensionType::TransferFeeAmount]).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Finding Solana Token Accounts with Withheld Fees using JS\nDESCRIPTION: Demonstrates querying the Solana blockchain using `connection.getProgramAccounts` for all accounts associated with a specific mint under the `TOKEN_2022_PROGRAM_ID`. It then iterates through the results, unpacks each account using `unpackAccount`, checks for withheld fees using `getTransferFeeAmount`, and collects the public keys of accounts holding a non-zero withheld amount. Requires `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n    const allAccounts = await connection.getProgramAccounts(TOKEN_2022_PROGRAM_ID, {\n        commitment: 'confirmed',\n        filters: [\n            {\n                memcmp: {\n                    offset: 0,\n                    bytes: mint.toString(),\n                },\n            },\n        ],\n    });\n    const accountsToWithdrawFrom = [];\n    for (const accountInfo of allAccounts) {\n        const account = unpackAccount(accountInfo.account, accountInfo.pubkey, TOKEN_2022_PROGRAM_ID);\n        const transferFeeAmount = getTransferFeeAmount(account);\n        if (transferFeeAmount !== null && transferFeeAmount.withheldAmount > BigInt(0)) {\n            accountsToWithdrawFrom.push(accountInfo.pubkey);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Stake Pool via Bash Script - Solana CLI - Bash\nDESCRIPTION: This Bash snippet runs the setup-stake-pool.sh script to create a new Solana stake pool. The sole parameter is the amount of SOL (15 in the sample) deposited into the pool at creation. The script leverages the spl-stake-pool create-pool command and configures fees, validator count, and pool authorities using various keypairs. Dependencies: Solana CLI, SPL Stake Pool CLI, and initialized environment. Output includes accounts created and their mint/token info, as well as transaction signatures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./setup-stake-pool.sh 15\nCreating pool\n+ spl-stake-pool create-pool --epoch-fee-numerator 3 --epoch-fee-denominator 1000 --withdrawal-fee-numerator 3 --withdrawal-fee-denominator 1000 --deposit-fee-numerator 3 --deposit-fee-denominator 1000 --referral-fee 50 --max-validators 2350 --pool-keypair keys/stake-pool.json --validator-list-keypair keys/validator-list.json --mint-keypair keys/mint.json --reserve-keypair keys/reserve.json\nCreating reserve stake 4tvTkLB4X7ahUYZ2NaTohkG3mud4UBBvu9ZEGD4Wk9mt\nCreating mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\nCreating associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nCreating pool fee collection account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ\nSignature: 51yf2J6dSGAx42KPs2oTMTV4ufEm1ncAHyLPQ6PNf4sbeMHGqno7BGn2tHkUnrd7PRXiWBbGzCWpJNevYjmoLgn2\nCreating stake pool Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR with validator list 86VZZCuqiz7sDJpFKjQy9c9dZQN9vwDKbYgY8pcwHuaF\nSignature: 47QHcWMEa5Syg13C3SQRA4n88Y8iLx1f39wJXQAStRUxpt2VD5t6pYgAdruNRHUQt1ZBY8QwbvEC1LX9j3nPrAzn\nDepositing SOL into stake pool\nUpdate not required\nUsing existing associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nSignature: 4jnS368HcofZ1rUpsGZtmSK9kVxFzJRndSX5VS7eMV3kVgzyg9efA4mcgd2C6BoSNksTmTonRGXTVM1WMywFpiKq\n```\n\n----------------------------------------\n\nTITLE: Depositing Stake with Custom Token Receiver and Authority - Shell (Console)\nDESCRIPTION: Illustrates how to deposit stake to a pool specifying a custom SPL token account as the receiver and providing a withdraw authority file. Dependencies are the spl-stake-pool CLI, valid stake account, stake pool address, and optional JSON file for authority. Key parameters: token receiver account, authority file, and pool addresses. Outputs a confirmation and transaction signature for the operation.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool deposit-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ --token-receiver 34XMHa3JUPv46ftU4dGHvemZ9oKVjnciRePYMcX3rjEF --withdraw-authority authority.json\nDepositing stake 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ into stake pool account F8e8Ympp4MkDSPZdvRxdQUZXRkMBDdyqgHa363GShAPt\nSignature: 4AESGZzqBVfj5xQnMiPWAwzJnAtQDRFK1Ha6jqKKTs46Zm5fw3LqgU1mRAT6CKTywVfFMHZCLm1hcQNScSMwVvjQ\n\n```\n\n----------------------------------------\n\nTITLE: Transferring Confidential Tokens\nDESCRIPTION: Performs a confidential transfer of tokens from the sender's available confidential balance to another account configured for confidential transfers using the `spl-token` CLI. Replace `<MINT_PUBKEY>` with the mint's public key, `<AMOUNT>` with the number of tokens, and `<DESTINATION_PUBKEY>` with the recipient's token account public key. The `--confidential` flag specifies that this is a confidential transfer. Requires available confidential balance in the sender's account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/quickstart.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token transfer <MINT_PUBKEY> <AMOUNT> <DESTINATION_PUBKEY> --confidential\n```\n\n----------------------------------------\n\nTITLE: Adding Another Validator to Solana Stake Pool\nDESCRIPTION: Demonstrates adding a second validator, identified by vote account `J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H`, to the stake pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR` using the `spl-stake-pool add-validator` command. This continues the process of distributing stake across multiple validators.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool add-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H\nAdding stake account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr, delegated to J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H\nSignature: 4xeve6gWuiffqBLAMcqa8s7dCMvBmSVdKbDu5WQhigLiXHdCjSNEwoZRexTZji786qgEjXg3nrUh4HcTt3RauZV5\n```\n\n----------------------------------------\n\nTITLE: Updating Interest Rate for SPL Token Mint using JS\nDESCRIPTION: Provides a JavaScript snippet using the `updateRateInterestBearingMint` function from `@solana/spl-token` to change the interest rate of an existing interest-bearing mint. Requires the Solana connection, a funded payer keypair, the mint address, the rate authority keypair (previously assigned during mint creation), the new rate (in basis points), and uses `TOKEN_2022_PROGRAM_ID`. Dependencies include `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\n    const updateRate = 50;\n    await updateRateInterestBearingMint(\n        connection,\n        payer,\n        mint,\n        rateAuthority,\n        updateRate,\n        [],\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n```\n\n----------------------------------------\n\nTITLE: Listing Validator Stake Accounts for Depositing - SPL CLI - Shell\nDESCRIPTION: Shows how to list validator stake accounts associated with a stake pool before making a deposit. The 'spl-stake-pool list' command is used with the pool address as a parameter. The command prints out all associated vote accounts, balances, and pool status, enabling the user to select the correct validator.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nStake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nPool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\nPreferred Deposit Validator: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk\nEpoch Fee: 3/100 of epoch rewards\nWithdrawal Fee: none\nStake Deposit Fee: none\nSOL Deposit Fee: none\nSOL Deposit Referral Fee: none\nStake Deposit Referral Fee: none\nReserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5   Available Balance: ◎10.006848640\nVote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ      Balance: ◎35.000000000  Last Update Epoch: 8\nVote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H      Balance: ◎35.000000000  Last Update Epoch: 8\nVote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk      Balance: ◎35.000000000  Last Update Epoch: 8\nTotal Pool Stake: ◎115.006848640\nTotal Pool Tokens: 115.00684864\nCurrent Number of Validators: 3\nMax Number of Validators: 1000\n```\n\n----------------------------------------\n\nTITLE: Minting Token-2022 Tokens with spl-token CLI\nDESCRIPTION: This console command mints a specified amount of tokens from a Token-2022 mint to a destination token account. It requires the mint address, the amount, and the recipient token account address.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token -ul mint E5SUrbnx7bMBp3bRdMWNCFS3FXp5VpvFDdNFp8rjrMLM 100000 4L45ZpFS6dqTyLMofmQZ9yuTqYvQrfCJfWL2xAjd5WDW\nMinting 100000 tokens\n  Token: E5SUrbnx7bMBp3bRdMWNCFS3FXp5VpvFDdNFp8rjrMLM\n  Recipient: 4L45ZpFS6dqTyLMofmQZ9yuTqYvQrfCJfWL2xAjd5WDW\n\nSignature: 43rsisVeLKjBCgLruwTFJXtGTBgwyfpLjwm44dY2YLHH9WJaazEvkyYGdq6omqs4thRfCS4G8z4KqzEGRP2xoMo9\n```\n\n----------------------------------------\n\nTITLE: Transferring SPL Tokens using JavaScript SDK\nDESCRIPTION: Demonstrates transferring SPL tokens using the `@solana/spl-token` library in JavaScript. It involves setting up a connection, generating wallets, airdropping SOL, creating a mint, creating a custom token account (`auxiliaryTokenAccount`), getting/creating an associated token account, minting initial tokens, and finally transferring tokens from the associated account to the custom account using the `transfer` function. Balances are logged before and after the transfer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\nimport {getAccount, createMint, createAccount, mintTo, getOrCreateAssociatedTokenAccount, transfer} from \"@solana/spl-token\";\nimport {clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL} from \"@solana/web3.js\";\n\n(async () => {\n\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n  const wallet = Keypair.generate();\n  const auxiliaryKeypair = Keypair.generate();\n\n  const airdropSignature = await connection.requestAirdrop(\n    wallet.publicKey,\n    LAMPORTS_PER_SOL,\n  );\n\n  await connection.confirmTransaction(airdropSignature);\n\n  const mint = await createMint(\n    connection,\n    wallet,\n    wallet.publicKey,\n    wallet.publicKey,\n    9\n  );\n\n  // Create custom token account\n  const auxiliaryTokenAccount = await createAccount(\n    connection,\n    wallet,\n    mint,\n    wallet.publicKey,\n    auxiliaryKeypair\n  );\n\n  const associatedTokenAccount = await getOrCreateAssociatedTokenAccount(\n    connection,\n    wallet,\n    mint,\n    wallet.publicKey\n  );\n\n  await mintTo(\n    connection,\n    wallet,\n    mint,\n    associatedTokenAccount.address,\n    wallet,\n    50\n  );\n\n  const accountInfo = await getAccount(connection, associatedTokenAccount.address);\n\n  console.log(accountInfo.amount);\n  // 50\n\n  await transfer(\n    connection,\n    wallet,\n    associatedTokenAccount.address,\n    auxiliaryTokenAccount,\n    wallet,\n    50\n  );\n\n  const auxAccountInfo = await getAccount(connection, auxiliaryTokenAccount);\n\n  console.log(auxAccountInfo.amount);\n  // 50\n})();\n```\n\n----------------------------------------\n\nTITLE: Managing Transfer Hook Program via Cargo and SPL CLI - Console\nDESCRIPTION: Provides the sequence for building and deploying a custom transfer-hook program on Solana, then initializing a transfer-hook account using the spl-transfer-hook CLI. Steps include building with cargo build-sbf, deploying with solana program deploy, and then using spl-transfer-hook create-extra-metas with program and mint IDs. Prerequisites include Rust, Solana CLI, and access to build/deploy binaries. Must have the custom CLI and source access.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_49\n\nLANGUAGE: console\nCODE:\n```\n$ cargo build-sbf\n$ solana program deploy target/deploy/spl-transfer-hook-example.so\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-transfer-hook create-extra-metas <PROGRAM_ID> <MINT_ID> [<ACCOUNT_PUBKEY>:<ROLE> ...]\n```\n\n----------------------------------------\n\nTITLE: Adding a Reserve to a Lending Market with spl-token-lending CLI (Usage)\nDESCRIPTION: Outlines the command syntax for adding a new liquidity reserve to a specified lending market. Key parameters include the program ID (`--program`), fee payer (`--fee-payer`), market owner signer (`--market-owner`), source liquidity owner signer (`--source-owner`), target market pubkey (`--market`), source SPL token account pubkey (`--source`), the initial deposit amount (`--amount`), and the Pyth oracle product (`--pyth-product`) and price (`--pyth-price`) account public keys for price feeds.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/cli/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nspl-token-lending \\\n  --program      PUBKEY \\\n  --fee-payer    SIGNER \\\n  add-reserve \\\n  --market-owner SIGNER \\\n  --source-owner SIGNER \\\n  --market       PUBKEY \\\n  --source       PUBKEY \\\n  --amount       DECIMAL_AMOUNT \\\n  --pyth-product PUBKEY \\\n  --pyth-price   PUBKEY\n```\n\n----------------------------------------\n\nTITLE: Replacing a Leaf in a ConcurrentMerkleTree Using an Off-Chain Indexer - Solana TS SDK (TypeScript)\nDESCRIPTION: Replaces an existing leaf at a specified index in a ConcurrentMerkleTree with a new leaf, leveraging an off-chain MerkleTree instance to generate the required Merkle proof. The example assumes the indexer tracks modifying tree operations, but can be out-of-date up to maxBufferSize. Inputs include the tree public key, payer, new leaf, and Merkle proof from the off-chain state. Dependencies are as above, and the output is a chain transaction replacing the node at the identified index.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/usage.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume: `offChainTree` is a MerkleTree instance\n// that has been indexing the `cmtKeypair.publicKey` transactions\n// Get a new leaf\nconst newLeaf: Buffer = crypto.randomBytes(32);\n// Query off-chain records for information about the leaf\n// you wish to replace by its index in the tree\nconst leafIndex = 314;\n// Replace the leaf at `leafIndex` with `newLeaf`\nconst replaceIx = createReplaceIx(\n    cmtKeypair.publicKey,          \n    payer.publicKey,\n    newLeaf,\n    offChainTree.getProof(leafIndex) \n);\nconst tx = new Transaction().add(replaceIx);\nawait sendAndConfirmTransaction(connection, tx, [payer]);\n```\n\n----------------------------------------\n\nTITLE: Creating a ConcurrentMerkleTree with the Solana TS SDK - TypeScript\nDESCRIPTION: Initializes a new ConcurrentMerkleTree account in Solana using supporting utilities from the SPL and web3.js SDKs. The snippet demonstrates keypair generation for the tree, space allocation via a system instruction, creating and initializing the Merkle tree on-chain, constructing a transaction, and submitting it with the payer and tree keypairs as signers. Requires @solana/spl-account-compression, @solana/web3.js, and access to a configured connection object. Inputs include payer and tree keypairs, depth parameters, and a network connection; outputs are side-effectful, creating an on-chain Merkle tree account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/usage.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume: known `payer` Keypair\n// Generate a keypair for the ConcurrentMerkleTree\nconst cmtKeypair = Keypair.generate();\n// Create a system instruction to allocate enough \n// space for the tree\nconst allocAccountIx = await createAllocTreeIx(\n    connection,\n    cmtKeypair.publicKey,\n    payer.publicKey,\n    { maxDepth, maxBufferSize },\n    canopyDepth,\n);\n// Create an SPL compression instruction to initialize\n// the newly created ConcurrentMerkleTree\nconst initTreeIx = createInitEmptyMerkleTreeIx(\n    cmtKeypair.publicKey, \n    payer.publicKey, \n    { maxDepth, maxBufferSize }\n);\nconst tx = new Transaction().add(allocAccountIx).add(initTreeIx);\nawait sendAndConfirmTransaction(connection, tx, [cmtKeypair, payer]);\n```\n\n----------------------------------------\n\nTITLE: Enabling CPI Guard Programmatically with SPL-Token and Web3.js - JavaScript\nDESCRIPTION: This code example enables CPI Guard on a token account using the '@solana/web3.js' and '@solana/spl-token' libraries in JavaScript. It creates necessary accounts, initializes them with CPI Guard enabled, then optionally enables the guard directly. Required dependencies include @solana/web3.js, @solana/spl-token, and related Solana programs. Parameters involve connections, keypairs, and token accounts; outputs are transaction confirmations. Limitations: must run in an async JS environment and requires sufficient SOL for airdrops and rent.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_42\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport {\n    createMint,\n    createEnableCpiGuardInstruction,\n    createInitializeAccountInstruction,\n    disableCpiGuard,\n    enableCpiGuard,\n    getAccountLen,\n    ExtensionType,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const payer = Keypair.generate();\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintAuthority = Keypair.generate();\n    const decimals = 9;\n    const mint = await createMint(\n        connection,\n        payer,\n        mintAuthority.publicKey,\n        mintAuthority.publicKey,\n        decimals,\n        undefined,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n\n    const accountLen = getAccountLen([ExtensionType.CpiGuard]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(accountLen);\n\n    const owner = Keypair.generate();\n    const destinationKeypair = Keypair.generate();\n    const destination = destinationKeypair.publicKey;\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: destination,\n            space: accountLen,\n            lamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeAccountInstruction(destination, mint, owner.publicKey, TOKEN_2022_PROGRAM_ID),\n        createEnableCpiGuardInstruction(destination, owner.publicKey, [], TOKEN_2022_PROGRAM_ID)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, owner, destinationKeypair], undefined);\n\n    // OR\n    await enableCpiGuard(connection, payer, destination, owner, [], undefined, TOKEN_2022_PROGRAM_ID);\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Flash Loan Instruction in Solana Lending Program (Rust)\nDESCRIPTION: This snippet defines the 'LendingInstruction' enum with a variant 'FlashLoan' for initiating a flash loan operation within Solana's token-lending program. The FlashLoan instruction specifies the input parameter 'amount' and lists the mandatory accounts required for secure and compliant execution, including source/destination liquidity accounts, fee recipients, and the flash loan receiver program. This definition is crucial for ensuring that lending protocol and external programs interact correctly; dependencies include Solana's program interface and token program, and all accounts must conform to stated structure. Inputs are provided as Solana accounts via CPI, and the expected outcome is a validated, fee-returned flash loan transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/flash_loan_design.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub enum LendingInstruction {\n    // ....\n    /// Make a flash loan.\n    ///\n    /// Accounts expected by this instruction:\n    ///\n    ///   0. `[writable]` Source liquidity token account.\n    ///                     Minted by reserve liquidity mint.\n    ///                     Must match the reserve liquidity supply.\n    ///   1. `[writable]` Destination liquidity token account.\n    ///                     Minted by reserve liquidity mint.\n    ///   2. `[writable]` Reserve account.\n    ///   3. `[]` Lending market account.\n    ///   4. `[]` Derived lending market authority.\n    ///   5. `[]` Flash loan receiver program account.\n    ///             Must implement an instruction that has tag of 0 and a signature of `(repay_amount: u64)`\n    ///             This instruction must return the amount to the source liquidity account.\n    ///   6. `[]` Token program id.\n    ///   7. `[writable]` Flash loan fee receiver account.\n    ///                     Must match the reserve liquidity fee receiver.\n    ///   8. `[writable]` Host fee receiver.\n    ///   .. `[any]` Additional accounts expected by the receiving program's `ReceiveFlashLoan` instruction.\n    FlashLoan {\n        /// The amount that is to be borrowed\n        amount: u64,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Encrypted Account Structure - Solana Confidential Extension - Rust\nDESCRIPTION: This Rust code snippet defines an Account structure used in the Solana confidential extension, illustrating the inclusion of a dedicated encryption key and the use of the PKE::encrypt function to encrypt account balances. It demonstrates how confidential accounts store mint, owner, a unique encryption key, and the encrypted token amount. Dependencies include the PKE encryption library and the ConfidentialTransferInstruction interface. Expected input parameters are public keys and numeric amounts; outputs are encrypted data stored within the account structure. This design enables account-level encryption independent from the owner signing key.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 5vBrLAPeMjJr9UfssGbjUaBmWtrXTg2vZuMN6L4c8HE6,\n    encryption_key: mpbpvs1LksLmdMhCEzyu5UEWEb3dsRPbB5, // pke_pubkey\n    amount: PKE::encrypt(pke_pubkey, 50),\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pending and Available Balances in Account Structure - Solana Confidential Tokens - Rust\nDESCRIPTION: This Rust code example demonstrates the creation of pending and available balance ciphertexts using the PKE::encrypt function and stores them within an Account struct. It emphasizes the separation of pending and available balances to prevent front-running and improve account security. The snippet depends on the PKE encryption implementation and expects public keys and amount values as input. Outputs are encrypted balances assigned to account fields, supporting secure incoming/outgoing fund tracking.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nlet ct_pending = PKE::encrypt(pke_pubkey, 10);\nlet ct_available = PKE::encryption(pke_pubkey, 50);\n\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 5vBrLAPeMjJr9UfssGbjUaBmWtrXTg2vZuMN6L4c8HE6,\n    encryption_key: mpbpvs1LksLmdMhCEzyu5UEWEb3dsRPbB5,\n    pending_balance: ct_pending,\n    account_balance: ct_available,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Token-2022 Mint with Confidential Transfers (Auto)\nDESCRIPTION: Creates a new Token-2022 mint with the confidential transfer extension enabled using the `spl-token` CLI. The `--enable-confidential-transfers auto` flag allows any token user to permissionlessly configure their account for confidential transfers. The `--program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb` specifies the Token-2022 program. Confidential transfers must be enabled at mint creation.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/quickstart.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-confidential-transfers auto\n```\n\n----------------------------------------\n\nTITLE: Implementing Flash Loan Receiver Instruction in Solana Program (Rust)\nDESCRIPTION: This snippet defines the 'FlashLoanReceiverInstruction' enum, which specifies the format for receiver programs to accept and process flash loaned assets. The key variant 'ReceiveFlashLoan' includes an amount parameter and requires specific account types (source/destination liquidity and token program ID) followed by any extra accounts necessary for custom operations. Dependencies comprise the Solana token program and conformance to the CPI contract established by LendingInstruction. Upon invocation, this instruction should perform client logic and return borrowed funds plus fee to the reserve. Inputs are accounts and the amount, and the output must be the properly returned liquidity.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/flash_loan_design.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub enum FlashLoanReceiverInstruction {\n\t\n    /// Receive a flash loan and perform user-defined operation and finally return the fund back.\n    ///\n    /// Accounts expected:\n    ///\n    ///   0. `[writable]` Source liquidity (matching the destination from above).\n    ///   1. `[writable]` Destination liquidity (matching the source from above).\n    ///   2. `[]` Token program id\n    ///   .. `[any]` Additional accounts provided to the lending program's `FlashLoan` instruction above.\n    ReceiveFlashLoan {\n\t\t// Amount that is loaned to the receiver program\n        amount: u64\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Instruction Structure - Rust\nDESCRIPTION: This code models a simplified 'Transfer' struct for token transactions, accompanied by documentation on required accounts and their roles (source, destination, signer). The struct contains an 'amount' field representing the quantity to transfer. This model assumes familiarity with Rust, u64 integer types, and SPL Token program instruction formats.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Transfer instruction data\n///\n/// Accounts expected:\n///   0. `[writable]` The source account.\n///   1. `[writable]` The destination account.\n///   2. `[signer]` The source account's owner.\nstruct Transfer {\n  amount: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling CPI Guard Using SPL Token CLI - Console\nDESCRIPTION: This snippet shows how to disable the CPI Guard extension on a Solana token account through the SPL Token CLI. The command 'spl-token disable-cpi-guard <ACCOUNT_ADDRESS>' removes the guard and outputs a transaction signature. It requires SPL Token CLI to be set up and the relevant token account address. Input is a token account address, output is the signature of the successful transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_43\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token disable-cpi-guard 4YfkXX89TrsWqSSxb3av36Rk8EZBoDqxGzuaDNXr7UnL\n\nSignature: 4JJSBSc1UAtArbBqYRpTk9264WwJuZ8n6NqyXtCSmyVQpmHoetzyVDwHxtxrdK8wQawoocDxFD9rRPhpAMzJ6EdG\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Tab Components in MDX\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from `@theme/Tabs` for use within an MDX file. These components are likely used to create tabbed interfaces for displaying code snippets or information for different environments (like CLI, Web3.js).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Stake Account for a Solana Single Pool (CLI, TypeScript)\nDESCRIPTION: Creates and delegates a new stake account at a program-derived address (default deposit address) associated with the specified pool. This simplifies the deposit flow as the user doesn't need to manage a separate keypair for the stake account. Requires the pool address (CLI) or vote account address (TS), user wallet, and the amount of lamports to stake.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ spl-single-pool create-default-stake --pool DkE6XFGbqSyYzRugLVSmmB42F9BQZ7mZU837e2Cti7kb 1000000000\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Classic\\nconst transaction = await SinglePoolProgram.createAndDelegateUserStake(\\n  connection,\\n  voteAccountAddress,\\n  userWallet,\\n  1000000000,\\n);\\n\\n// sign with user wallet\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Next\\nconst transaction = await SinglePoolProgram.createAndDelegateUserStake(\\n  rpc,\\n  voteAccountAddress,\\n  userWallet,\\n  1000000000n,\\n);\\n\\n// sign with user wallet, which is used as the fee payer and as the base address for a seeded account\n```\n\n----------------------------------------\n\nTITLE: Installing @solana/spl-account-compression via npm\nDESCRIPTION: Installs the SPL Account Compression library and its required peer dependency @solana/web3.js using the Node Package Manager (npm). This command adds both packages to the project's dependencies.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/account-compression/sdk/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @solana/spl-account-compression @solana/web3.js@1\n```\n\n----------------------------------------\n\nTITLE: Exporting Solana Pyth Aggregator Account Data using Solana CLI (Shell Script)\nDESCRIPTION: This shell script configures the Solana CLI to use the devnet endpoint and exports account data for Pyth SOL/USD and SRM/USD product and price accounts. Dependencies include a working installation of the solana CLI tool with network access. Arguments provide URLs for account endpoints and specify binary output files; the script outputs four .bin files representing serialized account data, useful for fixture or integration testing. Ensure the proper network and permissions are set to query these accounts without failure.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/program/tests/fixtures/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsolana config set --url https://api.devnet.solana.com\n\n# Pyth product: SOL/USD\nsolana account 3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E --output-file 3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E.bin\n# Pyth price: SOL/USD\nsolana account J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix --output-file J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix.bin\n# Pyth product: SRM/USD\nsolana account 6MEwdxe4g1NeAF9u6KDG14anJpFsVEa2cvr5H6iriFZ8 --output-file 6MEwdxe4g1NeAF9u6KDG14anJpFsVEa2cvr5H6iriFZ8.bin\n# Pyth price: SRM/USD\nsolana account 992moaMQKs32GKZ9dxi8keyM2bUmbrwBZpK4p2K6X5Vs --output-file 992moaMQKs32GKZ9dxi8keyM2bUmbrwBZpK4p2K6X5Vs.bin\n```\n\n----------------------------------------\n\nTITLE: Creating Mint with MintCloseAuthority via Solana CLI (Console)\nDESCRIPTION: This snippet demonstrates how to initialize a Solana Token-2022 mint with MintCloseAuthority enabled using the spl-token command-line interface. It requires specifying the Token-2022 program ID and the --enable-close flag during token creation. The command outputs the new token's address and associated program; input parameters include the program ID, and optional close authority.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-close\nCreating token C47NXhUTVEisCfX7s16KrxYyimnui7HpUXZecE2TmLdB under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata Field using spl-token CLI\nDESCRIPTION: This command uses the `spl-token` CLI to add a new custom field ('new-field') with a specific value ('new-value') to the metadata of a Token-2022 mint identified by its address (5K8...). It requires the `spl-token` tool to be installed and configured.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_55\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token update-metadata 5K8RVdjpY3CHujyKjQ7RkyiCJqTG8Kba9krNfpZnmvpS new-field new-value\nSignature: 31uerYNa6yhb21k5CCX69k7RLUKEhJEV99UadEpPnZtWWpykwr7vkTFkuFeJ7AaEyQPrepe8m8xr4N23JEAeuTRY\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Metadata Field using spl-token CLI\nDESCRIPTION: This command uses the `spl-token` CLI to remove an existing custom field ('new-field') from the metadata of a Token-2022 mint (5K8...). The `--remove` flag indicates the field should be deleted rather than updated. Requires `spl-token` tool.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_57\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token update-metadata 5K8RVdjpY3CHujyKjQ7RkyiCJqTG8Kba9krNfpZnmvpS new-field --remove\nSignature: 52s1mxRqnr2jcZNvcmcgsQuXfVyT2w1TuRsEE3J6YwEZBu74BbFcHh2DvwnJG7qC7Cy6C5ZrTfnoPREFjFS7kXjF\n```\n\n----------------------------------------\n\nTITLE: Installing Solana SPL Account Compression Packages - Shell\nDESCRIPTION: Installs the core JavaScript dependencies needed to use Solana SPL account compression with either npm or yarn. Runs in a Unix-like shell (bash). Required before using any TypeScript SDK workflows described in the subsequent examples.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @solana/spl-account-compression @solana/web3.js@1\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fungible Token via CLI\nDESCRIPTION: Creates a new SPL token mint using the `spl-token` CLI utility. The command outputs the unique public key (address) of the newly created token mint and the transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-token\nCreating token AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\nSignature: 47hsLFxWRCg8azaZZPSnQR8DNTRsGyPNfUK7jqyzgt7wf9eag3nSnewqoZrVZHKm8zt3B6gzxhr91gdQ5qYrsRG4\n```\n\n----------------------------------------\n\nTITLE: Checking Token Supply and Balance After Minting using spl-token JS\nDESCRIPTION: Fetches and logs the total supply (using `getMint`) and a specific account's balance (using `getAccount`) after a mint operation using the `@solana/spl-token` library. This confirms the state changes resulting from minting.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nconst mintInfo = await getMint(\n  connection,\n  mint\n)\n\nconsole.log(mintInfo.supply);\n// 100\n\nconst tokenAccountInfo = await getAccount(\n  connection,\n  tokenAccount.address\n)\n\nconsole.log(tokenAccountInfo.amount);\n// 100\n```\n\n----------------------------------------\n\nTITLE: Querying SPL Token Accounts - JavaScript - jsx\nDESCRIPTION: Programmatically lists all SPL Token accounts for a given owner public key using @solana/spl-token and @solana/web3.js. Requires dependencies: '@solana/web3.js' and '@solana/spl-token'. Takes an owner's address, fetches all token accounts controlled by it, decodes the account data and prints mint IDs with balances. Output is formatted to mirror the CLI display.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport {AccountLayout, TOKEN_PROGRAM_ID} from \"@solana/spl-token\";\nimport {clusterApiUrl, Connection, PublicKey} from \"@solana/web3.js\";\n\n(async () => {\n\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n  const tokenAccounts = await connection.getTokenAccountsByOwner(\n    new PublicKey('8YLKoCu7NwqHNS8GzuvA2ibsvLrsg22YMfMDafxh1B15'),\n    {\n      programId: TOKEN_PROGRAM_ID,\n    }\n  );\n\n  console.log(\"Token                                         Balance\");\n  console.log(\"------------------------------------------------------------\");\n  tokenAccounts.value.forEach((tokenAccount) => {\n    const accountData = AccountLayout.decode(tokenAccount.account.data);\n    console.log(`${new PublicKey(accountData.mint)}   ${accountData.amount}`);\n  })\n\n})();\n\n/*\nToken                                         Balance\n------------------------------------------------------------\n7e2X5oeAAJyUTi4PfSGXFLGhyPw2H8oELm1mx87ZCgwF  84\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  100\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  0\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  1\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing SPL Token Lending with Yarn (Shell)\nDESCRIPTION: This command uses the Yarn package manager to install the SPL Token Lending client library (`@solana/spl-token-lending`) along with its required peer dependencies: the SPL Token library (`@solana/spl-token`) and version 1 of the Solana Web3.js library (`@solana/web3.js@1`). Requires Yarn to be installed in the environment.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @solana/spl-token-lending @solana/spl-token @solana/web3.js@1\n```\n\n----------------------------------------\n\nTITLE: Generating Execute Instruction Discriminator String Literal\nDESCRIPTION: Defines the string literal that is hashed (first 8 bytes) to produce the discriminator for the required `Execute` instruction of the Transfer Hook interface. This instruction contains the custom transfer logic.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/specification.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"spl-transfer-hook-interface:execute\"\n```\n\n----------------------------------------\n\nTITLE: Generating InitializeExtraAccountMetaList Discriminator String Literal\nDESCRIPTION: Defines the string literal that is hashed (first 8 bytes) to produce the discriminator for the optional `InitializeExtraAccountMetaList` instruction. This instruction initializes the validation account with configurations for extra accounts needed by `Execute`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/specification.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"spl-transfer-hook-interface:initialize-extra-account-metas\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Mint with MintCloseAuthority in Solana Token-2022 (JavaScript)\nDESCRIPTION: This snippet sets up and initializes a new mint account with the MintCloseAuthority extension enabled using the Solana Token-2022 JavaScript APIs. It sets up keypairs for various authorities, calculates rent-exemption, and constructs a transaction that creates the account and initializes both the mint and its close authority extensions. Dependencies include @solana/web3.js and @solana/spl-token. Key parameters: payer, authorities, mint configuration, extension array. Input: none (the script manages all keys); Output: mint is created on-chain.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    closeAccount,\n    createInitializeMintInstruction,\n    createInitializeMintCloseAuthorityInstruction,\n    getMintLen,\n    ExtensionType,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\n\n(async () => {\n    const payer = Keypair.generate();\n\n    const mintKeypair = Keypair.generate();\n    const mint = mintKeypair.publicKey;\n    const mintAuthority = Keypair.generate();\n    const freezeAuthority = Keypair.generate();\n    const closeAuthority = Keypair.generate();\n\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const extensions = [ExtensionType.MintCloseAuthority];\n    const mintLen = getMintLen(extensions);\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: mint,\n            space: mintLen,\n            lamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeMintCloseAuthorityInstruction(mint, closeAuthority.publicKey, TOKEN_2022_PROGRAM_ID),\n        createInitializeMintInstruction(\n            mint,\n            9,\n            mintAuthority.publicKey,\n            freezeAuthority.publicKey,\n            TOKEN_2022_PROGRAM_ID\n        )\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, mintKeypair], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Closing Mint with MintCloseAuthority via Solana CLI (Console)\nDESCRIPTION: This command uses the spl-token CLI to close a mint account that has the MintCloseAuthority extension enabled. It requires the address of the mint to close. If the token supply is zero and the authority is valid, the command will reclaim lamports from the closed mint and output the resulting transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token close-mint C47NXhUTVEisCfX7s16KrxYyimnui7HpUXZecE2TmLdB \nSignature: 5nidwS9fJGJGdmaQjcwvNGVtk2ba5Zyu9ZLubjUKSsaAyzLUYvB6LK5RfUA767veBr45x7R1WW9N7WkYZ3Rqsb5B\n```\n\n----------------------------------------\n\nTITLE: Parametrizing Rust Tests for Token Program IDs using test-case\nDESCRIPTION: Illustrates how to use the `test-case` crate to parametrize a `tokio` test function (`test_swap`). The function now accepts a `token_program_id` of type `Pubkey`, enabling it to be run against both the standard Token and Token-2022 program IDs.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[test_case(spl_token::id() ; \"Token Program\")]\n#[test_case(spl_token_2022::id() ; \"Token-2022 Program\")]\n#[tokio::test]\nasync fn test_swap(token_program_id: Pubkey) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Transfer Hook Program in Mint via SPL Token CLI - Console\nDESCRIPTION: Shows how to update the transfer-hook program for an existing mint using the SPL Token CLI. The command requires the set-transfer-hook subcommand, the mint address, and the new transfer-hook program ID. Output includes a transaction signature confirming the update. Requires the appropriate permissions and access to the target Solana cluster.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_47\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token set-transfer-hook HFg1FFaj4PqFHmkYrqbZsarNJEZT436aXAXgQFMJihwc EbPBt3XkCb9trcV4c8fidhrvoeURbDbW87Acustzyi8N\n\nSignature: 3Ffw6yjseDsL3Az5n2LjdwXXwVPYxDF3JUU1JC1KGAEb1LE68S9VN4ebtAyvKeYMHvhjdz1LJVyugGNdWHyotzay\n```\n\n----------------------------------------\n\nTITLE: Installing honggfuzz for Rust Fuzz Testing (sh)\nDESCRIPTION: This snippet shows how to install the 'honggfuzz' fuzzing tool for Rust with 'cargo install honggfuzz'. 'honggfuzz' is a required dependency for fuzz testing the Token Swap program. Executing this command prepares the development setup for advanced testing by installing the binary into the user's Cargo bin directory. No arguments are needed, and installation output is shown upon completion.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo install honggfuzz\n\n```\n\n----------------------------------------\n\nTITLE: Harvesting Withheld Tokens to Mint using Solana JS Library\nDESCRIPTION: Uses the `harvestWithheldTokensToMint` function from the `@solana/spl-token` library (`TOKEN_2022_PROGRAM_ID`). This permissionless instruction moves any withheld fees from the specified source accounts (e.g., `destinationAccount`) directly to the associated mint's fee coffers, allowing the source accounts to potentially be closed later. Requires `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n    await harvestWithheldTokensToMint(connection, payer, mint, [destinationAccount], undefined, TOKEN_2022_PROGRAM_ID);\n```\n\n----------------------------------------\n\nTITLE: Defining Mixed Token Program Test Cases Using #[test_case] Macro - Rust\nDESCRIPTION: These snippets show how test cases in Rust are updated to accommodate multiple token programs for Token-Swap initialization tests. The original snippet uses a single program id; the revised version provides three, covering permutations of Token and Token-2022. Dependencies include the 'test_case' macro and correct importing of token program IDs. Key parameters are the various program IDs, allowing tests to ensure all token program combinations are handled correctly. Inputs are program IDs; output is the test execution for each combination. Incomplete or mismatched IDs will test program correctness or yield failing tests.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[test_case(spl_token::id(); \"token\")]\\n#[test_case(spl_token_2022::id(); \"token-2022\")]\\nfn test_initialize(token_program_id: Pubkey) {\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[test_case(spl_token::id(), spl_token::id(), spl_token::id(); \"all-token\")]\\n#[test_case(spl_token_2022::id(), spl_token_2022::id(), spl_token_2022::id(); \"all-token-2022\")]\\n#[test_case(spl_token::id(), spl_token_2022::id(), spl_token_2022::id(); \"mixed-pool-token\")]\\n#[test_case(spl_token_2022::id(), spl_token_2022::id(), spl_token::id(); \"mixed-pool-token-2022\")]\\nfn test_initialize(pool_token_program_id: Pubkey, token_a_program_id: Pubkey, token_b_program_id: Pubkey) {\\n    ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Classic Bindings via npm\nDESCRIPTION: Command to install the Solana Single Pool JavaScript bindings for Web3.js Classic (`@solana/spl-single-pool-classic`) using the `npm` package manager.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ npm install @solana/spl-single-pool-classic\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Classic Bindings via pnpm\nDESCRIPTION: Command to install the Solana Single Pool JavaScript bindings specifically for Web3.js Classic (`@solana/spl-single-pool-classic`) using the `pnpm` package manager.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ pnpm install @solana/spl-single-pool-classic\n```\n\n----------------------------------------\n\nTITLE: Creating/Getting an Associated Token Account using spl-token JS\nDESCRIPTION: Creates a new associated token account (ATA) for a given mint and owner, or retrieves it if it already exists, using the `getOrCreateAssociatedTokenAccount` function from `@solana/spl-token`. Requires a `connection`, `payer` keypair, the `mint` address, and the `owner`'s public key. The token account's address is logged.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst tokenAccount = await getOrCreateAssociatedTokenAccount(\n  connection,\n  payer,\n  mint,\n  payer.publicKey\n)\n\nconsole.log(tokenAccount.address.toBase58());\n// 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n```\n\n----------------------------------------\n\nTITLE: Checking Token Supply using spl-token JS\nDESCRIPTION: Fetches and logs the current total supply of a given SPL token mint using the `getMint` function from the `@solana/spl-token` library. Requires a `connection` object and the `mint` address. The supply is accessed via the `supply` property of the returned mint info.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst mintInfo = await getMint(\n  connection,\n  mint\n)\n\nconsole.log(mintInfo.supply);\n// 0\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Mint using JavaScript SDK\nDESCRIPTION: Creates a new SPL token mint with zero decimals using the `createMint` function from the `@solana/spl-token` library. The `decimals` parameter is set to 0, indicating this mint is intended for NFTs. Requires a `connection`, a payer `wallet`, `mintAuthority`, and `freezeAuthority`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\nconst mint = await createMint(\n  connection,\n  wallet,\n  wallet.publicKey,\n  wallet.publicKey,\n  0\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Default Account State - SPL Token-2022 - JavaScript\nDESCRIPTION: This JavaScript call updates the default account state on an existing mint to 'Initialized' (i.e., not frozen by default) for all future token accounts. Uses the updateDefaultAccountState function with proper authorities and connection. Requires prior mint creation with the extension enabled and the freeze authority's signature. Inputs include connection, payer, mint, new state, and authority; outputs a transaction confirmation.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n    await updateDefaultAccountState(\n        connection,\n        payer,\n        mint,\n        AccountState.Initialized,\n        freezeAuthority,\n        [],\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n```\n\n----------------------------------------\n\nTITLE: Calculating Solana Account Size without TransferFeeConfig in Rust\nDESCRIPTION: Demonstrates calculating the required space for Mint and Account structures using `ExtensionType::try_calculate_account_len` with only `MintCloseAuthority` and `ImmutableOwner` extensions. This represents the state before adding transfer fee support in the Token-2022 tests.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlet mint_space = ExtensionType::try_calculate_account_len::<Mint>(&[ExtensionType::MintCloseAuthority]).unwrap();\nlet account_space = ExtensionType::try_calculate_account_len::<Account>(&[ExtensionType::ImmutableOwner]).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Checking for Mint Close Authority in Solana Program Processor (Rust)\nDESCRIPTION: This snippet shows the logic within a Solana program's processor to check if a given mint account (`pool_mint_info`) has the `MintCloseAuthority` extension enabled. It unpacks the mint's state using `StateWithExtensions`, attempts to retrieve the extension, and returns a `ProgramError::InvalidAccountData` if a close authority `Pubkey` is present (i.e., not `None`), effectively preventing the operation (like token swap initialization) from proceeding.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nlet pool_mint_data = pool_mint_info.data.borrow();\nlet pool_mint = StateWithExtensions::<Mint>::unpack(pool_mint_data)?;\nif let Ok(extension) = pool_mint.get_extension::<MintCloseAuthority>() {\n    let close_authority: Option<Pubkey> = extension.close_authority.into();\n    if close_authority.is_some() {\n        return Err(ProgramError::InvalidAccountData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SPL Token Lending with NPM (Shell)\nDESCRIPTION: This command uses the NPM package manager to install the SPL Token Lending client library (`@solana/spl-token-lending`) along with its required peer dependencies: the SPL Token library (`@solana/spl-token`) and version 1 of the Solana Web3.js library (`@solana/web3.js@1`). Requires Node.js and NPM to be installed in the environment.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/js/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @solana/spl-token-lending @solana/spl-token @solana/web3.js@1\n```\n\n----------------------------------------\n\nTITLE: Saving Solana Account Data to Files using Solana CLI\nDESCRIPTION: These console commands demonstrate how to save the account data for a token account, a mint account, and a wallet address to separate JSON files using the `solana account` command. This is useful for persisting test setup data.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir test-accounts\n$ solana -ul account --output-file test-accounts/token-account.json --output json 4L45ZpFS6dqTyLMofmQZ9yuTqYvQrfCJfWL2xAjd5WDW\n... output truncated ...\n$ solana -ul account --output-file test-accounts/mint.json --output json E5SUrbnx7bMBp3bRdMWNCFS3FXp5VpvFDdNFp8rjrMLM\n... output truncated ...\n$ solana -ul account --output-file test-accounts/wallet.json --output json <TEST_WALLET_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Mint Attempt with Insufficient Multisig Signers - Solana JS - jsx\nDESCRIPTION: Attempts to mint a token with only the multisig authority but insufficient signers. The operation fails and triggers an error, which gets logged. Requires SPL Token functions, multisigKey, and related Mint and Account information. Demonstrates signature rule enforcement.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_58\n\nLANGUAGE: jsx\nCODE:\n```\ntry {\n  await mintTo(\n    connection,\n    payer,\n    mint,\n    associatedTokenAccount.address,\n    multisigKey,\n    1\n  )\n} catch (error) {\n  console.log(error);\n}\n// Error: Signature verification failed\n```\n\n----------------------------------------\n\nTITLE: Depositing a Default Stake Account into a Solana Single Pool (CLI, TypeScript)\nDESCRIPTION: Deposits the previously created default stake account into its associated pool after it becomes active (typically the next epoch). The CLI uses the `--default-stake-account` flag along with the pool address. TypeScript versions use the `depositFromDefaultAccount: true` option, requiring connection/rpc, pool address, and user wallet.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ spl-single-pool deposit --pool DkE6XFGbqSyYzRugLVSmmB42F9BQZ7mZU837e2Cti7kb --default-stake-account\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Classic\\nconst transaction = await SinglePoolProgram.deposit({\\n  connection,\\n  pool: poolAddress,\\n  userWallet,\\n  depositFromDefaultAccount: true,\\n});\\n\\n// sign with user wallet\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Next\\nconst transaction = await SinglePoolProgram.deposit({\\n  rpc,\\n  pool: poolAddress,\\n  userWallet,\\n  depositFromDefaultAccount: true,\\n});\\n\\n// sign with user wallet, which is used as the fee payer and as the base address for a seeded account\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components for Doc Tabs (React/JSX)\nDESCRIPTION: This snippet imports the necessary React components used to create tabbed code blocks in MDX documentation files. Dependencies include the @theme/Tabs and @theme/TabItem modules, which must be present in the doc site's component library. There are no parameters or outputs; the code simply sets up the environment for subsequent UI elements.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Starting Solana Test Validator with Pre-loaded Accounts\nDESCRIPTION: This console command starts the `solana-test-validator` with the `--reset` (`-r`) flag and loads accounts specified in the `test-accounts` directory using the `--account-dir` flag. This allows restarting the validator with a consistent set of test accounts.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ solana-test-validator -r --account-dir test-accounts\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Docusaurus - Shell\nDESCRIPTION: This shell command runs the Docusaurus local development server for the documentation site via npm scripts. It opens the site in a web browser and supports live reload for most changes, allowing preview and rapid testing. This is intended for local development only and requires dependencies to have been previously installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\n$ npm run start\n```\n```\n\n----------------------------------------\n\nTITLE: Reallocating SPL Token Account via CLI for Memo Transfers\nDESCRIPTION: Demonstrates using the `spl-token` CLI to create a token account and subsequently enable the 'Required Memo Transfers' feature. The CLI automatically handles the necessary account reallocation instruction if the account doesn't have enough space for the extension data when `enable-required-transfer-memos` is used.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account EbPBt3XkCb9trcV4c8fidhrvoeURbDbW87Acustzyi8N\nCreating account 4Uzz67txwYbfYpF8r5UGEMYJwhPAYQ5eFUY89KTYc2bL\n\nSignature: 57wZHDaQtSzszDkusrnozZNj5PemQhpqHMEFLWFKpqASCErcDuBuYuEky5g3evHtkjMrKgh1s3aEap1L8y5UhW5W\n$ spl-token enable-required-transfer-memos 4Uzz67txwYbfYpF8r5UGEMYJwhPAYQ5eFUY89KTYc2bL\nSignature: 5MnWtrhMK32zkbacDMwBNft48VAUpr4EoRM87hkT9AFYvPgPEU7V7ERV6gdfb3kASri4wnUnr13hNKuYJ66pD8Fs\n```\n\n----------------------------------------\n\nTITLE: Checking Token Supply and Balance After Minting via CLI\nDESCRIPTION: Demonstrates checking the total supply of an SPL token and the balance of a specific token account after minting operations using the `spl-token` CLI. Both commands require the token mint address.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n100\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n100\n```\n\n----------------------------------------\n\nTITLE: Calculating Transfer Fee Adjusted Amount in Solana Program (Rust)\nDESCRIPTION: Demonstrates how to check if a Token-2022 mint has the `TransferFeeConfig` extension and calculate the amount after the fee. It unpacks the mint state, attempts to get the extension, calculates the epoch-specific fee using `calculate_epoch_fee` if present, and subtracts it from the original amount.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nuse solana_program::{clock::Clock, sysvar::Sysvar};\nuse spl_token_2022::{extension::{StateWithExtensions, transfer_fee::TransferFeeConfig}, state::Mint};\n\nlet mint_data = token_mint_info.data.borrow();\nlet mint = StateWithExtensions::<Mint>::unpack(&mint_data)?;\nlet actual_amount = if let Ok(transfer_fee_config) = mint.get_extension::<TransferFeeConfig>() {\n    let fee = transfer_fee_config\n        .calculate_epoch_fee(Clock::get()?.epoch, amount)\n        .ok_or(ProgramError::InvalidArgument)?;\n    amount.saturating_sub(fee)\n} else {\n    amount\n};\n```\n\n----------------------------------------\n\nTITLE: Minting with Sufficient Multisig Signers - Solana JS - jsx\nDESCRIPTION: Mints tokens successfully by supplying the minimum required array of signer Keypair objects to the mintTo function. Also queries mint info and logs the supply after minting. Requires mint, associatedTokenAccount, multisigKey, signer Keypairs, and SPL Token JS tooling. Returns no output; status is logged.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_60\n\nLANGUAGE: jsx\nCODE:\n```\nawait mintTo(\n  connection,\n  payer,\n  mint,\n  associatedTokenAccount.address,\n  multisigKey,\n  1,\n  [\n    signer1,\n    signer2\n  ]\n)\n\nconst mintInfo = await getMint(\n  connection,\n  mint\n)\n\nconsole.log(`Minted ${mintInfo.supply} token`);\n// Minted 1 token\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Owner Program ID using web3.js\nDESCRIPTION: This TypeScript snippet demonstrates an alternative approach to determine the correct program ID for a token account. It uses `connection.getParsedAccountInfo` to fetch the account details for a given public key and extracts the `owner` field, which corresponds to the program ID (either Token or Token-2022). This requires an additional network call before creating instructions.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nconst connection = new Connection('http://127.0.0.1:8899', 'confirmed');\nconst accountPublicKey = new PublicKey('11111111111111111111111111111111'); // insert your account key here\nconst accountInfo = await connection.getParsedAccountInfo(accountPublicKey);\nif (accountInfo.value === null) {\n    throw new Error('Account not found');\n}\nconst programId = accountInfo.value.owner;\n```\n\n----------------------------------------\n\nTITLE: Disabling CPI Guard Programmatically with SPL-Token and Web3.js - JavaScript\nDESCRIPTION: This single-line JavaScript code snippet disables the CPI Guard on an existing Solana token account using the '@solana/web3.js' and '@solana/spl-token' libraries. It calls 'disableCpiGuard' with connection, payer, destination, and owner as arguments. Dependencies are the Solana Web3 and SPL Token libraries. Inputs are the relevant connection and keypairs; output is the result of the transaction removing the guard. Requires that the account currently has CPI Guard enabled.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\n    await disableCpiGuard(connection, payer, destination, owner, [], undefined, TOKEN_2022_PROGRAM_ID);\n```\n\n----------------------------------------\n\nTITLE: Creating Token-2022 Mint with spl-token CLI\nDESCRIPTION: This console command demonstrates how to create a new Token-2022 mint using the `spl-token` CLI. It specifies the Token-2022 program ID (`TokenzQd...`) and enables the 'Mint Close Authority' extension, which results in a larger mint account size that wallets need to handle.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token -ul create-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb --enable-close\nCreating token E5SUrbnx7bMBp3bRdMWNCFS3FXp5VpvFDdNFp8rjrMLM under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  E5SUrbnx7bMBp3bRdMWNCFS3FXp5VpvFDdNFp8rjrMLM\nDecimals:  9\n\nSignature: 2dYhT1M3dHjbGd9GFCFPXmHMtjujXBGhM8b5wBkx3mtUptQa5U9jjRTWHCEmUQnv8XLt2x5BHdbDUkZpNJFqfJn1\n```\n\n----------------------------------------\n\nTITLE: Running SPL Token Program Specific Unit Tests\nDESCRIPTION: Provides an example of how to run unit tests for a specific program, in this case, the SPL Token program. It involves changing to the program's directory (`token/program`) and then using `cargo test` for host tests and `cargo test-sbf` for on-chain SBF tests. Requires `cargo` and the Solana toolchain.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd token/program\n$ cargo test      # <-- runs host-based tests\n$ cargo test-sbf  # <-- runs BPF program tests\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM - Shell\nDESCRIPTION: This shell command installs all project dependencies defined in the package.json file using npm. It is required before running any build or development tasks, ensuring all necessary Docusaurus and related modules are available. No parameters are required, and the output installs node_modules locally in the project directory.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```\n$ npm install\n```\n```\n\n----------------------------------------\n\nTITLE: Appending a Leaf to a ConcurrentMerkleTree - Solana TS SDK (TypeScript)\nDESCRIPTION: Demonstrates adding a new cryptographic leaf to an existing ConcurrentMerkleTree on Solana. Involves generating a random 32-byte leaf buffer, creating an append instruction, building a transaction, and signing with the payer. Dependencies include the Solana web3.js and SPL account compression package; requires the cmtKeypair and payer context from previous tree creation steps. The expected input is the new leaf buffer, and the output is an updated on-chain tree state.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/usage.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new leaf\nconst newLeaf: Buffer = crypto.randomBytes(32);\n// Add the new leaf to the existing tree\nconst appendIx = createAppendIx(cmtKeypair.publicKey, payer.publicKey, newLeaf);\nconst tx = new Transaction().add(appendIx);\nawait sendAndConfirmTransaction(connection, tx, [payer]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Escrow Account with spl-token-upgrade\nDESCRIPTION: Uses the `spl-token-upgrade` CLI to create a new token account for the *new* mint, owned by the program-derived escrow authority. The authority is derived from the provided original and new mint addresses. The command outputs the created escrow account address and the transaction signature. It requires the public keys of the original mint (`o1d...`) and the new mint (`NewnQ...`) as arguments.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-token-upgrade create-escrow o1d5Jt8z8vszx4FJ2gNJ3FZH34cer9sbparg7GVt7qm NewnQeoDG4BbHRCodgjscuypfXdiixcWDPyLiseziQZ\nCreating escrow account 2mW9oGUbaJiCHtkhN5TNTaucY2ziJmAdcJtp5Ud6m4Jy owned by escrow authority A38VXB1Qgssz2qkKgzEkyZNQ27oTuy18T6tA9HRP5mpE\nSignature: 4tuJffE4DTrsXb7AM3UWNjd286vyAQcvhQaSKPVThaZMzaBiptKCKudaMWjbbygTUEaho87Ar288Mih5Hx6PpKke\n```\n\n----------------------------------------\n\nTITLE: Installing Grcov and Rust Nightly Toolchain (Bash)\nDESCRIPTION: This snippet demonstrates the installation of a specific grcov version using cargo, and the installation of the Rust nightly toolchain for Apple Darwin targets via rustup. The commands are intended for MacOS developers setting up their build environment for Solana SPL development, as some tools may require nightly features or specific binaries. Required dependencies are Cargo and Rustup.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install grcov --version 0.6.1\\n$ rustup toolchain install nightly-x86_64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Enforcing Homomorphic Addition for Encrypted Sums - Rust\nDESCRIPTION: This code demonstrates testing additivity in a linearly homomorphic encryption scheme. It generates a keypair, encrypts two values under the same key, and verifies that homomorphic addition on ciphertexts produces a valid decryption of the sum. It presumes the presence of a homomorphic-friendly encryption implementation and awareness of safe arithmetic and encryption in Rust.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet (sk, pk) = PKE::keygen();\n\nlet ct_0 = PKE::encrypt(pk, x_0);\nlet ct_1 = PKE::encrypt(pk, x_1);\n\nassert_eq!(x_0 + x_1, PKE::decrypt(sk, ct_0 + ct_1));\n```\n\n----------------------------------------\n\nTITLE: Applying Pending Confidential Balance\nDESCRIPTION: Moves the balance from the 'pending' state to the 'available' state for a confidential token account using the `spl-token` CLI. This is necessary after receiving confidential tokens (via deposit or transfer) before they can be spent. Replace `<ACCOUNT_PUBKEY>` with the user's token account public key.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/quickstart.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token apply-pending-balance --address <ACCOUNT_PUBKEY>\n```\n\n----------------------------------------\n\nTITLE: Creating Token-2022 Mint with External Group Pointer using spl-token CLI\nDESCRIPTION: This command uses the `spl-token` CLI to create a new Token-2022 mint (--program-id Tokenz...) and adds the Group Pointer extension, pointing it to an external account specified by `--group-address`. This designates the mint as belonging to an external group definition.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_59\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --group-address 7ZJVSav7y76M41eFeyA3xz39UDigQspVNwyJ469TgR1S\nCreating token EUMhJgfvjZa7Lb7fSqfD6WCUwELzzRVKunKSnSi4xK42 under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  EUMhJgfvjZa7Lb7fSqfD6WCUwELzzRVKunKSnSi4xK42\nDecimals:  9\n\nSignature: 3ug4Ejs16jJgEm1WyBwDDxzh9xqPzQ3a2cmy1hSYiPFcLQi9U12HYF1Dbhzb2bx75SSydfU6W4e11dGUXaPbJqVc\n```\n\n----------------------------------------\n\nTITLE: Minting New Tokens into the Escrow Account\nDESCRIPTION: Uses the `spl-token` command-line tool to mint a specified quantity (1000) of tokens from the *new* mint (`NewnQ...`) directly into the designated escrow account (`2mW9...`). This action requires the user to have minting authority over the new mint. It's one way to fund the escrow for upgrades.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-token mint NewnQeoDG4BbHRCodgjscuypfXdiixcWDPyLiseziQZ 1000 2mW9oGUbaJiCHtkhN5TNTaucY2ziJmAdcJtp5Ud6m4Jy\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake with Custom Pool Account - Shell (Console)\nDESCRIPTION: Demonstrates specifying a custom SPL token pool account to source pool tokens when withdrawing from a stake pool. Uses --pool-account to override the default. Dependencies: spl-stake-pool CLI, proper token accounts. Outputs the withdrawal transaction including involved accounts and confirmation signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_44\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 5 --pool-account 34XMHa3JUPv46ftU4dGHvemZ9oKVjnciRePYMcX3rjEF\nWithdrawing \\u25ce5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nCreating account to receive stake CZF2z3JJoDmJRcVjtsrz1BKUUGNL3VPW5FPFqge1bzmQ\nSignature: 2xBPVPJ749AE4hHNCNYdjuHv1EdMvxm9uvvraWfTA7Urrvecwh9w64URCyLLroLQ2RKDGE2QELM2ZHd8qRkjavJM\n\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with Required Memo using @solana/spl-token JS\nDESCRIPTION: This JavaScript snippet demonstrates transferring tokens to an account requiring memos. It first creates and funds a source token account. Then, it constructs a transaction that includes both a `createMemoInstruction` (from `@solana/spl-memo`) and the `createTransferInstruction` (from `@solana/spl-token`). The memo instruction must precede the transfer instruction in the transaction. Dependencies include `@solana/web3.js`, `@solana/spl-memo`, and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\n    const sourceTokenAccount = await createAssociatedTokenAccount(\n        connection,\n        payer,\n        mint,\n        payer.publicKey,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n    await mintTo(connection, payer, mint, sourceTokenAccount, mintAuthority, 100, [], undefined, TOKEN_2022_PROGRAM_ID);\n\n    const transferTransaction = new Transaction().add(\n        createMemoInstruction('Hello, memo-transfer!', [payer.publicKey]),\n        createTransferInstruction(sourceTokenAccount, destination, payer.publicKey, 100, [], TOKEN_2022_PROGRAM_ID)\n    );\n    await sendAndConfirmTransaction(connection, transferTransaction, [payer], undefined);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Token Account for Receiving Upgraded Tokens\nDESCRIPTION: Uses the `spl-token` command-line tool to create a new token account for the *new* mint (`NewnQ...`). This account will be owned by the user performing the upgrade and will receive the new tokens during the exchange process. It's a prerequisite for the user before they can perform the upgrade.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-token create-account NewnQeoDG4BbHRCodgjscuypfXdiixcWDPyLiseziQZ\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake with Custom Stake Receiver - Shell (Console)\nDESCRIPTION: Withdraws a set amount from the pool, specifying the vote account and existing stake account to receive the withdraw using --stake-receiver and --vote-account flags. Requires spl-stake-pool CLI, correct pool and vote account addresses, and a prepared stake account. Outputs a transaction signature for the withdrawal.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_43\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR  --amount 0.02 --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ --stake-receiver CZF2z3JJoDmJRcVjtsrz1BKUUGNL3VPW5FPFqge1bzmQ\nWithdrawing \\u25ce5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nSignature: 2xBPVPJ749AE4hHNCNYdjuHv1EdMvxm9uvvraWfTA7Urrvecwh9w64URCyLLroLQ2RKDGE2QELM2ZHd8qRkjavJM\n\n```\n\n----------------------------------------\n\nTITLE: Closing the Old Token Account After Upgrade\nDESCRIPTION: Uses the `spl-token` command-line tool to close the user's token account associated with the *original* mint (`o1d...`) after the upgrade is complete. This command closes the specified account (implicitly the associated token account derived from the mint address) and transfers the remaining rent-exempt lamports back to the user's wallet.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-token close o1d5Jt8z8vszx4FJ2gNJ3FZH34cer9sbparg7GVt7qm\n```\n\n----------------------------------------\n\nTITLE: Performing Token Upgrade Using Specified Accounts\nDESCRIPTION: Executes the token upgrade using the `spl-token-upgrade` CLI, explicitly specifying all relevant accounts. It requires the original (`o1d...`) and new (`NewnQ...`) mint addresses. Additionally, it uses the `--burn-from` flag to specify the user's original token account (`4Yfp...`), the `--destination` flag for the user's new token account (`JCaW...`), and the `--escrow` flag for the pre-funded escrow account (`2mW9...`).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-token-upgrade exchange o1d5Jt8z8vszx4FJ2gNJ3FZH34cer9sbparg7GVt7qm NewnQeoDG4BbHRCodgjscuypfXdiixcWDPyLiseziQZ --burn-from 4YfpfMzHYCCYVBJqvTG9VtTPLMuPzVBi77aMRxVB4TDg --destination JCaWYSvLZkja51RbToWBaV4kp1PhfddX64cTLUqpdMzE --escrow 2mW9oGUbaJiCHtkhN5TNTaucY2ziJmAdcJtp5Ud6m4Jy\nBurning tokens from account 4YfpfMzHYCCYVBJqvTG9VtTPLMuPzVBi77aMRxVB4TDg, receiving tokens into account JCaWYSvLZkja51RbToWBaV4kp1PhfddX64cTLUqpdMzE\nSignature: 3P4o4Fxnm4yvB9i6jQzyniqNUqnNLsaQZmCw5q5n5J8nwv9wxJ73ZRYH3XNFT4ferDbCXMqc5egCkhZEkyfCxhgC\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Account - Solana JS - jsx\nDESCRIPTION: Creates a new 2-of-3 multisig SPL token account using JavaScript and logs its public key. Depends on '@solana/web3.js' and SPL Token JS SDK. Inputs are Connection, fee payer, array of public keys, and required signers (2). Outputs the address of the new multisig account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_54\n\nLANGUAGE: jsx\nCODE:\n```\nconst multisigKey = await createMultisig(\n  connection,\n  payer,\n  [\n    signer1.publicKey,\n    signer2.publicKey,\n    signer3.publicKey\n  ],\n  2\n);\n\nconsole.log(`Created 2/3 multisig ${multisigKey.toBase58()}`);\n// Created 2/3 multisig 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\n```\n\n----------------------------------------\n\nTITLE: Requesting SOL Airdrop using web3.js\nDESCRIPTION: Requests an airdrop of 1 SOL (specified in Lamports) to a newly generated keypair's public key on the Devnet using `@solana/web3.js`. It then waits for the transaction confirmation. Requires `@solana/web3.js`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nconst payer = Keypair.generate();\n\nconst connection = new Connection(\n  clusterApiUrl('devnet'),\n  'confirmed'\n);\n\nconst airdropSignature = await connection.requestAirdrop(\n  payer.publicKey,\n  LAMPORTS_PER_SOL,\n);\n\nawait connection.confirmTransaction(airdropSignature);\n```\n\n----------------------------------------\n\nTITLE: Using Token Program References When Invoking Token Actions in Instruction Processor - Rust\nDESCRIPTION: These two Rust snippets show how a swap function in the Token-Swap processor is updated to reference the correct token program information. The first snippet incorrectly reuses 'pool_token_program_info' for different actions, while the second uses the specific 'source_token_program_info' for source token transfers. Dependencies are the processor's context and safe handling of the correct token program account. Key parameters are the program info, source and destination accounts, authorization, and swap details. The inputs include account info references and swap data; outputs are token transfer results on-chain. Failing to use the correct program reference can cause failed or erroneous transactions.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nSelf::token_transfer(\\n    swap_info.key,\\n    pool_token_program_info.clone(),\\n    source_info.clone(),\\n    swap_source_info.clone(),\\n    user_transfer_authority_info.clone(),\\n    token_swap.bump_seed(),\\n    to_u64(result.source_amount_swapped)?,\\n)?;\n```\n\nLANGUAGE: rust\nCODE:\n```\nSelf::token_transfer(\\n    swap_info.key,\\n    source_token_program_info.clone(),\\n    source_info.clone(),\\n    swap_source_info.clone(),\\n    user_transfer_authority_info.clone(),\\n    token_swap.bump_seed(),\\n    to_u64(result.source_amount_swapped)?,\\n)?;\n```\n\n----------------------------------------\n\nTITLE: Updating Mint Metadata Field via @solana/spl-token-metadata in JS - JavaScript\nDESCRIPTION: Demonstrates updating a metadata field of a mint (e.g., name) with the createUpdateFieldInstruction helper from @solana/spl-token-metadata in JavaScript. Requires @solana/web3.js and @solana/spl-token-metadata. Inputs include metadata and update authority public keys, program ID, target field, and new value. This is wrapped in a transaction and sent to Solana devnet; output is a successfully applied metadata update on-chain.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_54\n\nLANGUAGE: js\nCODE:\n```\nimport { createUpdateFieldInstruction } from \"@solana/spl-token-metadata\";\n\n(async () => {\n  const tx = new Transaction().add(\n    createUpdateFieldInstruction({\n      metadata: mint.publicKey,\n      updateAuthority: payer.publicKey,\n      programId: TOKEN_2022_PROGRAM_ID,\n      field: 'name',\n      value: 'YourToken',\n    }),\n  );\n  await sendAndConfirmTransaction(connection, tx, [ payer, mint ]);\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating Account Balances Post Transfer - Solana Confidential Extension - Rust\nDESCRIPTION: This snippet illustrates how an Account structure is updated after processing a transfer instruction by decrementing the available balance by the encrypted transfer amount and reflecting the new pending balance. The code shows available and pending balances being managed as ciphertexts, promoting defense against invalidation attacks. It depends on arithmetic over encrypted values and the correct use of PKE::encrypt outputs. The inputs are the ciphertexts for sender balances and transfer amount; outputs are updated ciphertexts in the account fields.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 5vBrLAPeMjJr9UfssGbjUaBmWtrXTg2vZuMN6L4c8HE6,\n    encryption_key: mpbpvs1LksLmdMhCEzyu5UEWEb3dsRPbB5,\n    pending_balance: ct_sender_pending,\n    available_balance: ct_sender_available - ct_transfer_sender,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Accounts for Swap Instruction Processing - Rust\nDESCRIPTION: These two snippets demonstrate how the account iterator is updated in a Token-Swap Rust instruction processor function. The first snippet shows the previous account extraction order, while the second includes additional token program variables for distinguishing between multiple token program inputs. The function depends on Solana's account model and expects accounts provided in the declared order. Inputs are the account info array; outputs are local variable bindings for use in further token actions. Incorrect account order or missing inputs will cause runtime errors.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlet account_info_iter = &mut accounts.iter();\\nlet swap_info = next_account_info(account_info_iter)?;\\nlet authority_info = next_account_info(account_info_iter)?;\\nlet user_transfer_authority_info = next_account_info(account_info_iter)?;\\nlet source_info = next_account_info(account_info_iter)?;\\nlet swap_source_info = next_account_info(account_info_iter)?;\\nlet swap_destination_info = next_account_info(account_info_iter)?;\\nlet destination_info = next_account_info(account_info_iter)?;\\nlet pool_mint_info = next_account_info(account_info_iter)?;\\nlet pool_fee_account_info = next_account_info(account_info_iter)?;\\nlet token_program_info = next_account_info(account_info_iter)?;\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet account_info_iter = &mut accounts.iter();\\nlet swap_info = next_account_info(account_info_iter)?;\\nlet authority_info = next_account_info(account_info_iter)?;\\nlet user_transfer_authority_info = next_account_info(account_info_iter)?;\\nlet source_info = next_account_info(account_info_iter)?;\\nlet swap_source_info = next_account_info(account_info_iter)?;\\nlet swap_destination_info = next_account_info(account_info_iter)?;\\nlet destination_info = next_account_info(account_info_iter)?;\\nlet pool_mint_info = next_account_info(account_info_iter)?;\\nlet pool_fee_account_info = next_account_info(account_info_iter)?;\\nlet source_token_program_info = next_account_info(account_info_iter)?; // added\\nlet destination_token_program_info = next_account_info(account_info_iter)?; // added\\nlet pool_token_program_info = next_account_info(account_info_iter)?; // renamed\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake for Pool Tokens - Shell (Console)\nDESCRIPTION: Withdraws a specified amount of SOL and accrued rewards in exchange for pool tokens from a stake pool. The command will output the withdrawal action, the involved accounts, and a transaction signature. Dependencies are the spl-stake-pool CLI and token/pool ownership. Parameters include pool address, token amount, and optional account configuration. After withdrawal, the user receives SOL in a new or specified stake account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_41\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 5\nWithdrawing \\u25ce5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nCreating account to receive stake 5GuAyPAt6577HoGhSVRNBv6aHohVtjQ8q7q5i3X1p4tB\nSignature: 5fzaKt5MU8bLjJRgNZyEktKsgweSQzFRpubCGKPeuk9shNQb4CtTkbgZ2X5MmC1VRDZ3YcCTPdtL9sFpXYfoqaeV\n\n```\n\n----------------------------------------\n\nTITLE: Creating External PDA ExtraAccountMeta Configuration in Rust\nDESCRIPTION: Shows how to create an ExtraAccountMeta for a PDA off an external program using ExtraAccountMeta::new_external_pda_with_seeds. Key parameters include the program\\_index (position in account list), an array of Seed entries for PDA derivation, and booleans for signer and writable status. Assumes the existence and correct import of the ExtraAccountMeta struct and Seed struct/enum. The function prepares the configuration, possibly returning an error (?). Inputs are program index, seeds array, and flags; the output is an ExtraAccountMeta instance or error.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/configuring-extra-accounts.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet program_index = 7;\nlet seeds = &[seed1, seed2, seed3];\nlet is_signer = false;\nlet is_writable = true;\n\nlet extra_meta = ExtraAccountMeta::new_external_pda_with_seeds(\n  program_index,\n  seeds,\n  is_signer,\n  is_writable,\n)?;\n```\n\n----------------------------------------\n\nTITLE: Depositing Existing Stake into a Solana Single Pool (CLI, TypeScript)\nDESCRIPTION: Deposits an existing, active stake account into the specified single pool. The CLI version automatically infers the pool address from the stake account. The TypeScript versions require connection/rpc details, pool address, user wallet (acting as payer, authority, and lamport recipient), and the user's stake account. Requires the stake account to be active and delegated to the pool's vote account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ spl-single-pool deposit 9cc4cmLcZA89fYmcVPPTLmHPQ5gab3R6jMqj124abkSi\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Classic\\nconst transaction = await SinglePoolProgram.deposit({\\n  connection,\\n  pool: poolAddress,\\n  userWallet,\\n  userStakeAccount,\\n});\\n\\n// sign with the fee payer and stake account withdraw authority, if these signers differ\\n// userWallet is a convenience parameter to use one account as a payer, authority, and lamport recipient\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Next\\nconst transaction = await SinglePoolProgram.deposit({\\n  rpc,\\n  pool: poolAddress,\\n  userWallet,\\n  userStakeAccount,\\n});\\n\\n// sign with the fee payer and stake account withdraw authority, if these signers differ\\n// userWallet is a convenience parameter to use one account as a payer, authority, and lamport recipient\n```\n\n----------------------------------------\n\nTITLE: Defining InitializeExtraAccountMetaList Data Structure\nDESCRIPTION: Specifies the data payload structure for the `InitializeExtraAccountMetaList` instruction. It includes a vector (`Vec`) of `ExtraAccountMeta` configurations to be written into the validation account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/specification.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nextra_account_metas: Vec<ExtraAccountMeta>\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Minimum Stake to Remove Validator using spl-stake-pool (Console)\nDESCRIPTION: This command withdraws the minimum required SOL stake (`1.00228288 SOL`) from the specified stake pool (`Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR`). This action is used to effectively remove a validator when all associated validator stake accounts hold only the minimum balance (`1 SOL + rent exemption`). The specified SOL amount corresponds to the equivalent value in pool tokens.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_47\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 1.00228288 SOL\nWithdrawing ◎1.00228288 or 1.00228288 pool tokens, from stake account J5XB7mWpeaUZxZ6ogXT57qSCobczx27vLZYSgfSbZoBB\nCreating account to receive stake 51XdXiBSsVzeuY79xJwWAGZgeKzzgFKWajkwvWyrRiNE\nSignature: yQH9n7Go6iCMEYXqWef38ZYBPwXDmbwKAJFJ4EHD6TusBpusKsfNuT3TV9TL8FmxR2N9ExZTZwbD9Njc3rMvUcf\n```\n\n----------------------------------------\n\nTITLE: Updating Token Metadata via Web3.js Classic in TypeScript\nDESCRIPTION: TypeScript code using `@solana/spl-single-pool-classic` to create a transaction for updating a pool's token metadata. It requires the `voteAccountAddress`, the `authorizedWithdrawerAddress`, the new name, symbol, and optional URI. The transaction must be signed by both the fee payer and the authorized withdrawer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await SinglePoolProgram.updateTokenMetadata(\n  voteAccountAddress,\n  authorizedWithdrawerAddress,\n  'My Cool Pool',\n  'cPool',\n  'https://www.cool.pool/token.jpg',\n);\n\n// sign with the fee payer and authorized withdrawer\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Required Memo Transfers using @solana/spl-token JS\nDESCRIPTION: This JavaScript snippet calls the `disableRequiredMemoTransfers` and `enableRequiredMemoTransfers` functions from the `@solana/spl-token` library to toggle the memo requirement on a specified token account (`destination`). It requires the connection, payer, account address, owner keypair, and the Token-2022 program ID. Dependencies include `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n    await disableRequiredMemoTransfers(connection, payer, destination, owner, [], undefined, TOKEN_2022_PROGRAM_ID);\n\n    await enableRequiredMemoTransfers(connection, payer, destination, owner, [], undefined, TOKEN_2022_PROGRAM_ID);\n```\n\n----------------------------------------\n\nTITLE: Creating and Delegating Stake using Solana CLI - Shell (Console)\nDESCRIPTION: This snippet shows how to generate a new Solana keypair, create a stake account, and delegate it to a validator using the solana command-line tools. Dependencies include the solana CLI suite (solana-keygen, solana), and prerequisite access to a validator vote account. Parameters include the output JSON file for the keypair, stake amount, and target vote account. Inputs are on-disk keypair files and stake amounts; outputs are transaction signatures and confirmations. Ensure the vote account is managed by the stake pool for compatibility.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ solana-keygen new --no-passphrase -o stake-account.json\nGenerating a new keypair\nWrote new keypair to stake-account.json\n============================================================================\npubkey: 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ\n============================================================================\nSave this seed phrase to recover your new keypair:\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n============================================================================\n$ solana create-stake-account stake-account.json 10\nSignature: 5Y9r6MNoqJzVX8TWryAJbdp8i2DvintfxbYWoY6VcLEPgphK2tdydhtJTd3o3dF7QdM2Pg8sBFDZuyNcMag3nPvj\n$ solana delegate-stake 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk\nSignature: 2cDjHXSHjuadGQf1NQpPi43A8R19aCifsY16yTcictKPHcSAXN5TvXZ58nDJwkYs12tuZfTh5WVgAMSvptfrKdPP\n\n```\n\n----------------------------------------\n\nTITLE: Creating an SPL Concurrent Merkle Tree in TypeScript\nDESCRIPTION: Demonstrates how to create a new SPL Concurrent Merkle Tree on the Solana blockchain using the @solana/spl-account-compression library. It involves generating a keypair for the tree, creating instructions to allocate account space and initialize the tree, and sending these instructions in a transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/account-compression/sdk/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume: known `payer` Keypair\n\n// Generate a keypair for the ConcurrentMerkleTree\nconst cmtKeypair = Keypair.generate();\n\n// Create a system instruction to allocate enough \n// space for the tree\nconst allocAccountIx = await createAllocTreeIx(\n    connection,\n    cmtKeypair.publicKey,\n    payer.publicKey,\n    { maxDepth, maxBufferSize },\n    canopyDepth,\n);\n\n// Create an SPL compression instruction to initialize\n// the newly created ConcurrentMerkleTree\nconst initTreeIx = createInitEmptyMerkleTreeIx(\n    cmtKeypair.publicKey, \n    payer.publicKey, \n    { maxDepth, maxBufferSize }\n);\n\nconst tx = new Transaction().add(allocAccountIx).add(initTreeIx);\n\nawait sendAndConfirmTransaction(connection, tx, [cmtKeypair, payer]);\n```\n\n----------------------------------------\n\nTITLE: Transferring Stake Pool Manager Privileges or Fee Receiver (Console)\nDESCRIPTION: These commands transfer management authority or fee receiver account for a given stake pool, using the pool's public key. The --new-manager flag moves admin privileges, while --new-fee-receiver changes the fee destination. Each produces a transaction and signature. Requires valid SPL token mint account for the fee receiver and properly configured CLI.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool set-manager Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --new-manager 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nSignature: 39N5gkaqXuWm6JPEUWfenKXeG4nSa71p7iHb9zurvdZcsWmbjdmSXwLVYfhAVHWucTY77sJ8SkUNpVpVAhe4eZ53\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool set-manager Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --new-fee-receiver HoCsh97wRxRXVjtG7dyfsXSwH9VxdDzC7GvAsBE1eqJz\nSignature: 4aK8yzYvPBkP4PyuXTcCm529kjEH6tTt4ixc5D5ZyCrHwc4pvxAHj6wcr4cpAE1e3LddE87J1GLD466aiifcXoAY\n```\n\n----------------------------------------\n\nTITLE: Creating a Stake Pool with a Deposit Authority Restriction (Console)\nDESCRIPTION: This command adds a deposit authority to restrict who can deposit to the pool upon creation. By providing the --deposit-authority flag with a keypair file, only the owner of that keypair can sign deposits. The CLI outputs creation steps and signatures. Requires that the specified keypair file exists and is under the creator's control.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool create-pool --epoch-fee-numerator 3 --epoch-fee-denominator 100 --max-validators 1000 --deposit-authority authority_keypair.json\nCreating reserve stake DVwDn4LTRztuai4QeenM6fyzgiwUGpVXVNZ1mgKE1Pyc\nCreating mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\nCreating associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nCreating pool fee collection account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ\nSignature: qQwqahLuC24wPwVdgVXtd7v5htSSPDAH3JxFNmXCv9aDwjjqygQ64VMg3WdPCiNzc4Bn8vtS3qcnUVHVP5MbKgL\nCreating stake pool Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nDeposits will be restricted to 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn only, this can be changed using the set-funding-authority command.\nSignature: 5z6uH3EuPcujeWGpAjBtciSUR3TxtMBgWYU4ULagUso4QGzE9JenhYHwYthJ4b3rS57ByUNEXTr2BFyF5PjWC42Y\n```\n\n----------------------------------------\n\nTITLE: Creating Proposal Keypair and Deriving Feature ID - Shell\nDESCRIPTION: This snippet shows the process for creating a keypair with solana-keygen and then using spl-feature-proposal to derive the associated feature ID, token mint address, and acceptance token address. Dependencies include solana-keygen and spl-feature-proposal utilities installed through Rust's cargo. Inputs are the desired output filepath for the keypair and the newly created keypair itself; outputs include various addresses necessary for the feature proposal workflow. This setup step is required before you can begin community voting, and all commands must be run from a shell terminal with proper Solana CLI configuration.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/feature-proposal.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ solana-keygen new --outfile feature-proposal.json --silent --no-passphrase\nWrote new keypair to feature-proposal.json\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-feature-proposal address feature-proposal.json\nFeature Id: HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA\nToken Mint Address: ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d\nAcceptance Token Address: AdqKm3mSJf8AtTWjfpA5ZbJszWQPcwyLA2XkRyLbf3Di\n```\n\n----------------------------------------\n\nTITLE: Creating a Stake Pool with Specified Fee and Validators (Console)\nDESCRIPTION: This command initializes a new Solana stake pool using the `spl-stake-pool create-pool` command, specifying an epoch fee (3%), fee denominator, and a limit on the number of validator accounts (1000). The process outputs account creation steps and transaction signatures. Prerequisites: SPL Stake Pool CLI, configured Solana CLI, sufficient SOL for transaction fees.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool create-pool --epoch-fee-numerator 3 --epoch-fee-denominator 100 --max-validators 1000\nCreating reserve stake DVwDn4LTRztuai4QeenM6fyzgiwUGpVXVNZ1mgKE1Pyc\nCreating mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\nCreating associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nCreating pool fee collection account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ\nSignature: qQwqahLuC24wPwVdgVXtd7v5htSSPDAH3JxFNmXCv9aDwjjqygQ64VMg3WdPCiNzc4Bn8vtS3qcnUVHVP5MbKgL\nCreating stake pool Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nSignature: 5z6uH3EuPcujeWGpAjBtciSUR3TxtMBgWYU4ULagUso4QGzE9JenhYHwYthJ4b3rS57ByUNEXTr2BFyF5PjWC42Y\n```\n\n----------------------------------------\n\nTITLE: Example Solana Memo Program Success Log\nDESCRIPTION: This log line signifies that the Memo program instruction completed execution successfully.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/memo.md#_snippet_4\n\nLANGUAGE: log\nCODE:\n```\nProgram MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr success\n```\n\n----------------------------------------\n\nTITLE: Disabling NFT Mint Authority via CLI\nDESCRIPTION: Disables the minting authority for a specific token mint (`559u...`) using the `spl-token authorize` command with the `mint --disable` options. This prevents any further tokens of this type from being created, ensuring the NFT's uniqueness.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_44\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token authorize 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z mint --disable\nUpdating 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n  Current mint authority: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\n  New mint authority: disabled\nSignature: 5QpykLzZsceoKcVRRFow9QCdae4Dp2zQAcjebyEWoezPFg2Np73gHKWQicHG1mqRdXu3yiZbrft3Q8JmqNRNqhwU\n```\n\n----------------------------------------\n\nTITLE: Creating Transfer Instruction with Correct Program ID using spl-token\nDESCRIPTION: This TypeScript snippet shows fetching both Token and Token-2022 accounts, storing their respective program IDs along with account data. It then demonstrates creating a transfer instruction using `createTransferInstruction` from `@solana/spl-token`, ensuring the correct `programId` (either `TOKEN_PROGRAM_ID` or `TOKEN_2022_PROGRAM_ID`) is passed based on the specific token account being used.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { createTransferInstruction } from '@solana/spl-token';\n\nconst TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n);\nconst TOKEN_2022_PROGRAM_ID = new PublicKey(\n  'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'\n);\nconst walletPublicKey = new PublicKey('11111111111111111111111111111111'); // insert your key\nconst connection = new Connection('http://127.0.0.1:8899', 'confirmed');\n\nconst tokenAccounts = await connection.getTokenAccountsByOwner(\n  walletPublicKey, { programId: TOKEN_PROGRAM_ID }\n);\nconst token2022Accounts = await connection.getTokenAccountsByOwner(\n  walletPublicKey, { programId: TOKEN_2022_PROGRAM_ID }\n);\nconst accountsWithProgramId = [...tokenAccounts.value, ...token2022Accounts.value].map(\n  ({ account, pubkey }) =>\n    {\n      account,\n      pubkey,\n      programId: account.data.program === 'spl-token' ? TOKEN_PROGRAM_ID : TOKEN_2022_PROGRAM_ID,\n    },\n);\n\n// later on...\nconst accountWithProgramId = accountsWithProgramId[0];\nconst instruction = createTransferInstruction(\n  accountWithProgramId.pubkey,    // source\n  accountWithProgramId.pubkey,    // destination\n  walletPublicKey,                // owner\n  1,                              // amount\n  [],                             // multisigners\n  accountWithProgramId.programId, // token program id\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3.js Next RPC Connection in TypeScript\nDESCRIPTION: TypeScript code showing how to set up an RPC connection for Web3.js Next using `createDefaultRpcTransport` and `createSolanaRpc` from `@solana/web3.js`. This example connects to the Devnet cluster.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDefaultRpcTransport, createSolanaRpc } from '@solana/web3.js';\nconst transport = createDefaultRpcTransport({ url: 'https://api.devnet.solana.com' });\nconst rpc = createSolanaRpc({ transport });\n```\n\n----------------------------------------\n\nTITLE: Initializing Token-2022 Mint with Close Authority in Rust\nDESCRIPTION: This snippet demonstrates how to create and initialize a Token-2022 mint account with the `MintCloseAuthority` extension enabled. It calculates the required space, determines the necessary rent, creates the account via system instruction, and then initializes the close authority *before* initializing the mint itself. This setup is typically used for creating a test case to ensure the program correctly handles mints with close authorities.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nuse spl_token_2022::{extension::ExtensionType, instruction::*, state::Mint};\nuse solana_sdk::{system_instruction, transaction::Transaction};\n\n// Calculate the space required using the `ExtensionType`\nlet space = ExtensionType::try_calculate_account_len::<Mint>(&[ExtensionType::MintCloseAuthority]).unwrap();\n\n// get the Rent object and calculate the rent required\nlet rent_required = rent.minimum_balance(space);\n\n// and then create the account using those parameters\nlet create_instruction = system_instruction::create_account(&payer.pubkey(), mint_pubkey, rent_required, space, token_program_id);\n\n// Important: you must initialize the mint close authority *BEFORE* initializing the mint,\n// and only when working with Token-2022, since the instruction is unsupported by Token.\nlet initialize_close_authority_instruction = initialize_mint_close_authority(token_program_id, mint_pubkey, Some(close_authority)).unwrap();\nlet initialize_mint_instruction = initialize_mint(token_program_id, mint_pubkey, mint_authority_pubkey, freeze_authority, 9).unwrap();\n\n// Make the transaction with all of these instructions\nlet create_mint_transaction = Transaction::new(&[create_instruction, initialize_close_authority_instruction, initialize_mint_instruction], Some(&payer.pubkey));\n```\n\n----------------------------------------\n\nTITLE: Adding Validators to an Existing Stake Pool from File - Bash Script - Bash\nDESCRIPTION: This Bash snippet runs add-validators.sh with the stake pool and a text file listing validator accounts. It iterates through each validator listed in the file, creating and delegating stake accounts to them. Required: stake pool JSON, validator account file output by setup-test-validator.sh. Each addition outputs a signature confirming the stake assignment. Care must be taken that for each validator, there is at least 1 SOL available in the reserve.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./add-validators.sh keys/stake-pool.json local_validators.txt\nAdding validator stake accounts to the pool\nAdding stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nSignature: 5Vm2n3umPXFzQgDiaib1B42k7GqsNYHZWrauoe4DUyFszczB7Hjv9r1DKWKrypc8KDiUccdWmJhHBqM1fdP6WiCm\nSignature: 3XtmYu9msqnMeKJs9BopYjn5QTc5hENMXXiBwvEw6HYzU5w6z1HUkGwNW24io4Vu9WRKFFN6SAtrfkZBLK4fYjv4\n... (something similar repeated 9 more times)\n```\n\n----------------------------------------\n\nTITLE: Listing Stake Pool State and Validator Balances - SPL CLI - Shell\nDESCRIPTION: Shows the use of 'spl-stake-pool list' to view details of a stake pool, including validator account balances, total pool stake, and preferred validators. Requires the pool address as a parameter. The command outputs human-readable information about pool tokens, current validators, fees, and configuration, helpful for verifying stake distribution.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nStake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nPool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\nPreferred Deposit Validator: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk\nEpoch Fee: 3/100 of epoch rewards\nWithdrawal Fee: none\nStake Deposit Fee: none\nSOL Deposit Fee: none\nSOL Deposit Referral Fee: none\nStake Deposit Referral Fee: none\nReserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5   Available Balance: ◎10.006848640\nVote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ      Balance: ◎40.000000000  Last Update Epoch: 8\nVote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H      Balance: ◎40.000000000  Last Update Epoch: 8\nVote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk      Balance: ◎40.000000000  Last Update Epoch: 8\nTotal Pool Stake: ◎130.006848640\nTotal Pool Tokens: 130.00684864\nCurrent Number of Validators: 3\nMax Number of Validators: 1000\n```\n\n----------------------------------------\n\nTITLE: Increasing Validator Stake with SPL CLI - Shell\nDESCRIPTION: Demonstrates how to use the SPL stake pool CLI to increase stake for specific validators. The commands take the pool address, validator vote account address, and amount of SOL to stake as parameters. Outputs include transaction signatures confirming the successful increase; ensure access to the CLI tool and that stake pool accounts are initialized.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool increase-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H 30\nSignature: 3GJACzjUGLPjcd9RLUW86AfBLWKapZRkxnEMc2yHT6erYtcKBgCapzyrVH6VN8Utxj7e2mtvzcigwLm6ZafXyTMw\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool increase-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk 30\nSignature: 4zaKYu3MQ3as8reLbuHKaXN8FNaHvpHuiZtsJeARo67UKMo6wUUoWE88Fy8N4EYQYicuwULTNffcUD3a9jY88PoU\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake from a Solana Pool via Shell Script (Bash)\nDESCRIPTION: This command runs the `withdraw.sh` script to withdraw 1 SOL (or the specified amount) from the stake pool defined by `keys/stake-pool.json`. The withdrawal is distributed across the validator stake accounts listed in `local_validators.txt`. The script handles removing both stake and SOL.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./withdraw.sh keys/stake-pool.json local_validators.txt 1\n```\n\n----------------------------------------\n\nTITLE: Setting Solana CLI Default Keypair (Hardware Wallet)\nDESCRIPTION: Command to configure the Solana CLI to use a hardware wallet (specifically a Ledger device connected via USB in this example) as the default keypair, using the hardware wallet URL specification.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --keypair usb://ledger/\n```\n\n----------------------------------------\n\nTITLE: Initializing Single-Validator Pool via CLI\nDESCRIPTION: Demonstrates using the `spl-single-pool` CLI tool to initialize a new single-validator stake pool. The command takes the target validator's vote account address as an argument.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ spl-single-pool manage initialize Ammgaa2iZfA745BmZMhkcS27uh87fEVDC6Gm2RXz5hrC\n```\n\n----------------------------------------\n\nTITLE: Initializing a Token-2022 Mint with MintCloseAuthority Extension in Rust\nDESCRIPTION: Rust code showing the process of creating a Token-2022 mint account with the `MintCloseAuthority` extension. Key steps include calculating the required space using `ExtensionType::try_calculate_account_len`, creating the account via `system_instruction::create_account`, initializing the extension using `initialize_mint_close_authority` (before `initialize_mint`), and bundling these into a Solana transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse spl_token_2022::{extension::ExtensionType, instruction::*, state::Mint};\nuse solana_sdk::{system_instruction, transaction::Transaction};\n\n// Calculate the space required using the `ExtensionType`\nlet space = ExtensionType::try_calculate_account_len::<Mint>(&[ExtensionType::MintCloseAuthority]).unwrap();\n\n// get the Rent object and calculate the rent required\nlet rent_required = rent.minimum_balance(space);\n\n// and then create the account using those parameters\nlet create_instruction = system_instruction::create_account(&payer.pubkey(), mint_pubkey, rent_required, space, token_program_id);\n\n// Important: you must initialize the mint close authority *BEFORE* initializing the mint,\n// and only when working with Token-2022, since the instruction is unsupported by Token.\nlet initialize_close_authority_instruction = initialize_mint_close_authority(token_program_id, mint_pubkey, Some(close_authority)).unwrap();\nlet initialize_mint_instruction = initialize_mint(token_program_id, mint_pubkey, mint_authority_pubkey, freeze_authority, 9).unwrap();\n\n// Make the transaction with all of these instructions\nlet create_mint_transaction = Transaction::new(&[create_instruction, initialize_close_authority_instruction, initialize_mint_instruction], Some(&payer.pubkey));\n\n// Sign it and send it however you want!\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Deactivating Stake Account After Validator Removal\nDESCRIPTION: Uses `solana stake-account` to inspect the transient stake account (`nHEEyey8KkgHuVRAUDzkH5Q4PkA4veSHuTxgG6C8L2G`) created during the `remove-validator` process. The output confirms its balance, delegation details, and importantly, the epoch (`10` in this example) starting from which the stake deactivates before being merged back into the pool's reserve.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ solana stake-account nHEEyey8KkgHuVRAUDzkH5Q4PkA4veSHuTxgG6C8L2G\nBalance: 1.002282880 SOL\nRent Exempt Reserve: 0.00228288 SOL\nDelegated Stake: 1.000000000 SOL\nActive Stake: 1.000000000 SOL\nStake deactivates starting from epoch: 10\nDelegated Vote Account Address: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H\nStake Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nWithdraw Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3.js Classic Connection in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to establish a connection to a Solana cluster (Devnet in this case) using the `Connection` class from `@solana/web3.js` (Classic version). The commitment level is set to 'confirmed'.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Connection, clusterApiUrl } from '@solana/web3.js';\nconst connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n```\n\n----------------------------------------\n\nTITLE: Setting Solana CLI RPC URL\nDESCRIPTION: Command to configure the Solana CLI to connect to a specific cluster's RPC endpoint. This example sets the RPC URL to Solana's Devnet cluster.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Initializing Single-Validator Pool via Web3.js Next in TypeScript\nDESCRIPTION: TypeScript snippet using the `@solana/spl-single-pool` library (for Web3.js Next) to create a transaction for initializing a single-validator pool. It requires the `rpc` client, the validator's `voteAccountAddress` (as a string literal type `VoteAccountAddress`), and the `feePayerAddress`. The resulting transaction must be signed by the fee payer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst voteAccountAddress = 'Ammgaa2iZfA745BmZMhkcS27uh87fEVDC6Gm2RXz5hrC' as VoteAccountAddress;\nconst transaction = await SinglePoolProgram.initialize(\n  rpc,\n  voteAccountAddress,\n  feePayerAddress,\n);\n\n// sign with the fee payer\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Next Bindings via npm\nDESCRIPTION: Command to install the Solana Single Pool JavaScript bindings for Web3.js Next (`@solana/spl-single-pool`) using the `npm` package manager.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ npm install @solana/spl-single-pool\n```\n\n----------------------------------------\n\nTITLE: Enumerating Trade Scenario Orderings using Notation\nDESCRIPTION: Lists the six possible distinct orderings of three key variables in a trade: the number of contracts traded ('n'), the number of short contracts owned by the buyer ('n_b'), and the number of long contracts owned by the seller ('n_s'). This enumeration helps in analyzing all potential scenarios within the 'Trade' instruction logic.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1) n_b > n_s > n\n2) n_s > n_b > n\n3) n   > n_b > n_s\n4) n   > n_s > n_b\n5) n_b > n   > n_s\n6) n_s > n   > n_b\n```\n\n----------------------------------------\n\nTITLE: Handling Deprecation Warning for spl_token_2022::instruction::transfer in Rust\nDESCRIPTION: Illustrates the Rust compiler warning encountered when using the deprecated `transfer` instruction from `spl-token-2022`. It recommends switching to `transfer_checked` or `transfer_checked_with_fee` to ensure compatibility with token extensions like transfer fees.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nwarning: use of deprecated function `spl_token_2022::instruction::transfer`: please use `transfer_checked` or `transfer_checked_with_fee` instead\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with Fee Check via Solana CLI\nDESCRIPTION: Demonstrates creating accounts, minting tokens, and transferring tokens using `spl-token transfer --expected-fee`. This sequence shows setting up two accounts, minting tokens to one, and then transferring tokens to the second account while specifying the expected transfer fee using the `--expected-fee` flag. This ensures the transfer only succeeds if the calculated fee matches the expectation. Requires `spl-token` CLI and `solana-keygen`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account Dg3i18BN7vzsbAZDnDv3H8nQQjSaPUTqhwX41J7NZb5H\nCreating account 7UKuG4W68hW9eGrDms6BenRf8DCEHKGN49xewtWyB5cx\n\nSignature: 6h591BMuguh9TtSdQPRPcPy97mLqJiybeaxGVZzD8mvPEsYypjZ2jjKgHzji5FGh8CJE3NAzqrqGxfyMdnbWrs7\n$ solana-keygen new -o destination.json\n$ spl-token create-account Dg3i18BN7vzsbAZDnDv3H8nQQjSaPUTqhwX41J7NZb5H destination.json\nCreating account 5wY8fiMZG5wGbQmtzKgqqEEp4vsCMJZ53RXEagUUWhEr\n\nSignature: 2SyA17AJRWLH2j7svgxgW7nouUGioeWoRDWjz2Wq8j1eisThezSvqgN4NbHfj9uWmDh2XRp56ttZtHV1SxaUC7ys\n$ spl-token mint Dg3i18BN7vzsbAZDnDv3H8nQQjSaPUTqhwX41J7NZb5H 1000000000\nMinting 1000000000 tokens\n  Token: Dg3i18BN7vzsbAZDnDv3H8nQQjSaPUTqhwX41J7NZb5H\n  Recipient: 7UKuG4W68hW9eGrDms6BenRf8DCEHKGN49xewtWyB5cx\n\nSignature: 5MFJGpLaWe3yLLU8X4ax3KofeqPVzdxJsa3ScjChJJHJawKsRx4og9eaFkWn3CPF7JXaxdj5v4LdAW56LiNTuP6s\n$ spl-token transfer --expected-fee 0.000005 Dg3i18BN7vzsbAZDnDv3H8nQQjSaPUTqhwX41J7NZb5H 1000000 destination.json\nTransfer 1000000 tokens\n  Sender: 7UKuG4W68hW9eGrDms6BenRf8DCEHKGN49xewtWyB5cx\n  Recipient: 5wY8fiMZG5wGbQmtzKgqqEEp4vsCMJZ53RXEagUUWhEr\n\nSignature: 3hc3CCiETiuCArJ6yZ76ScyfMeK1rw8CTfZ3aDGnYoEMeoqXfSNAtnM3ATFjm7UihthzEkEWzeUfWL4qqqB4ofgv\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Metadata Field using Solana JS SDK\nDESCRIPTION: This JavaScript snippet shows how to remove a key from Token-2022 metadata programmatically. It uses `createRemoveKeyInstruction` from `@solana/spl-token-metadata`. Parameters include the Token-2022 program ID, metadata account address, update authority, the key to remove (`key`), and an `idempotent` flag. If `idempotent` is true, the transaction won't fail if the key doesn't exist; if false, it will.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRemoveKeyInstruction } from \"@solana/spl-token-metadata\";\n\n(async () => {\n  const tx = new Transaction().add(\n    createRemoveKeyInstruction({\n      programId: TOKEN_2022_PROGRAM_ID,\n      metadata: mint.publicKey,\n      updateAuthority: payer.publicKey,\n      key: 'new-field',\n      idempotent: true, // If false the operation will fail if the field does not exist in the metadata\n    }),\n  );\n  await sendAndConfirmTransaction(connection, tx, [ payer, mint ]);\n})();\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Next Bindings via Yarn\nDESCRIPTION: Command to install the Solana Single Pool JavaScript bindings for Web3.js Next (`@solana/spl-single-pool`) using the `yarn` package manager.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ yarn add @solana/spl-single-pool\n```\n\n----------------------------------------\n\nTITLE: Deriving Associated Token Account Address with Program ID using web3.js\nDESCRIPTION: This TypeScript snippet defines a function `associatedTokenAccountAddress` that correctly derives the address for an Associated Token Account (ATA). It takes the `programId` (either Token or Token-2022) as an explicit parameter, along with the mint and wallet public keys, ensuring the correct derivation using `PublicKey.findProgramAddressSync`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicKey } from '@solana/web3.js';\n\nconst ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nfunction associatedTokenAccountAddress(\n  mint: PublicKey,\n  wallet: PublicKey,\n  programId: PublicKey,\n): PublicKey {\n  return PublicKey.findProgramAddressSync(\n    [wallet.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  )[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Standard Account Instantiation - Rust\nDESCRIPTION: An illustrative instantiation of an 'Account' struct is shown, filled with representative (sampled) mint and owner public keys and an explicit amount. This serves to clarify data layout prior to introducing encryption concepts and presumes developer familiarity with Rust structure syntax and public key formats.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 5vBrLAPeMjJr9UfssGbjUaBmWtrXTg2vZuMN6L4c8HE6,\n    amount: 50,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Instruction with Encrypted Amount - Rust\nDESCRIPTION: Showcases a modified 'Transfer' struct where the transfer amount is encrypted with the sender’s public key. This demonstrates how transaction confidentiality can be achieved and requires the availability of a PKE::encrypt operation and understanding of secure value transmission.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nTransfer {\n  amount: PKE::encrypt(pubkey_owner, 10),\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Local Test Validator with Validator Accounts - Bash\nDESCRIPTION: This Bash snippet demonstrates running the setup-test-validator.sh script to initialize a local Solana test validator and automatically generate a specified number of validator vote accounts. The first parameter controls the number of accounts and the second is the output file path. The prerequisites are the Solana CLI and script permissions. The output is a text file containing base58-encoded validator public keys that can be used for stake pool operations.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./setup-test-validator.sh 10 local_validators.txt\n```\n\n----------------------------------------\n\nTITLE: Example Swap Calculation for Constant Product Curve\nDESCRIPTION: Provides a step-by-step numerical example for a constant product swap. Given initial pool quantities (A_total = 100, B_total = 5000) and an input amount (A_in = 10), it first calculates the invariant and then solves for the output amount (B_out).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-swap.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nA_total * B_total = 100 * 5,000 = 500,000 = invariant\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n(A_total + A_in) * (B_total - B_out) = invariant\n(100 + 10) * (5,000 - B_out) = 500,000\n5,000 - B_out = 500,000 / 110\n5,000 - (500,000 / 110) = B_out\nB_out = 454.5454...\n```\n\n----------------------------------------\n\nTITLE: Defining Confidential Transfer Account Structure - Rust\nDESCRIPTION: This Rust struct defines the confidential transfer account state including approval, ElGamal encryption keys, and available/pending balances as encrypted ciphertexts. Dependencies include associated cryptographic types like PodBool, ElGamalPubkey, ElGamalCiphertext, and AeCiphertext. Each field participates in enforcing confidentiality and correctness in transfer flows, with the available and pending balances encrypted and ready for secure transfer operations.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/encryption.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct ConfidentialTransferAccount {\n  /// `true` if this account has been approved for use. All confidential\n  /// transfer operations for\n  /// the account will fail until approval is granted.\n  approved: PodBool,\n\n  /// The public key associated with ElGamal encryption\n  encryption_pubkey: ElGamalPubkey,\n\n  /// The low-bits of the pending balance (encrypted by `encryption_pubkey`)\n  pending_balance_lo: ElGamalCiphertext,\n\n  /// The high-bits of the pending balance (encrypted by `encryption_pubkey`)\n  pending_balance_hi: ElGamalCiphertext,\n\n  /// The available balance (encrypted by `encryption_pubkey`)\n  available_balance: ElGamalCiphertext,\n\n  /// The decryptable available balance\n  decryptable_available_balance: AeCiphertext,\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing SOL into an Existing Stake Pool - Solana CLI - Bash\nDESCRIPTION: This Bash snippet uses the spl-stake-pool deposit-sol CLI command to deposit SOL into an existing pool, returning pool tokens to the associated token account. The command takes the stake pool public key and the SOL amount as arguments. It requires the SPL Stake Pool CLI, a funded account, and an associated token account. Output includes confirmation and deposit signature. Limitation: sufficient SOL wallets and proper initial pool setup are prerequisites.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ spl-stake-pool deposit-sol Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 10\nUsing existing associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nSignature: 4AJv6hSznYoMGnaQvjWXSBjKqtjYpjBx2MLezmRRjWRDa8vUaBLQfPNGd3kamZNs1JeWSvnzczwtzsMD5WkgKamA\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Token Account\nDESCRIPTION: Creates a standard token account associated with a specific mint using the `spl-token` CLI. Replace `<MINT_PUBKEY>` with the public key of the token mint. This command does not yet configure the account for confidential transfers.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/quickstart.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account <MINT_PUBKEY>\n```\n\n----------------------------------------\n\nTITLE: Unwrapping WSOL to SOL - JavaScript - jsx\nDESCRIPTION: Closes the WSOL associated token account using JavaScript and returns the SOL balance to the owner's main account. Assumes prior use of @solana/web3.js and @solana/spl-token libraries, and that 'wallet', 'connection', and 'associatedTokenAccount' are set. Displays balances before and after unwrapping, noting that transaction fees are deducted. Useful for programmatically reclaiming SOL.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nconst walletBalance = await connection.getBalance(wallet.publicKey);\n\nconsole.log(`Balance before unwrapping 1 WSOL: ${walletBalance}`)\n\nawait closeAccount(connection, wallet, associatedTokenAccount, wallet.publicKey, wallet);\n\nconst walletBalancePostClose = await connection.getBalance(wallet.publicKey);\n\nconsole.log(`Balance after unwrapping 1 WSOL: ${walletBalancePostClose}`)\n\n/*\nBalance before unwrapping 1 WSOL: 997950720\nBalance after unwrapping 1 WSOL: 1999985000\n*/\n```\n\n----------------------------------------\n\nTITLE: Resolving Off-Chain Extra Account Metas for Transaction Instructions in Rust\nDESCRIPTION: This asynchronous Rust code snippet demonstrates the off-chain process of resolving extra account metadata required for an instruction, specifically `ExecuteInstruction` from the Transfer Hook interface. It requires a function (`fetch_account_data_fn`, likely RPC-based) to retrieve account data. It fetches the validation account data, uses `ExtraAccountMetaList::add_to_instruction` to dynamically add the required `AccountMeta` entries to an `ExecuteInstruction` based on the stored configuration, and appends these resolved accounts, along with the program ID and validation state account, to the final instruction's account list.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/examples.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// You'll need to provide an \"account data function\", which is a function that\n// can, given a `Pubkey`, return account data within an `AccountDataResult`.\n// This is most likely based off of an RPC call like `getAccountInfo`.\n\n// Load the validation state data\nlet validate_state_pubkey = get_extra_account_metas_address(mint_pubkey, program_id);\nlet validate_state_data = fetch_account_data_fn(validate_state_pubkey)\n    .await?\n    .ok_or(ProgramError::InvalidAccountData)?;\n\n\n// First create an `ExecuteInstruction`\nlet mut execute_instruction = execute(\n    program_id,\n    source_pubkey,\n    mint_pubkey,\n    destination_pubkey,\n    authority_pubkey,\n    &validate_state_pubkey,\n    amount,\n);\n\n// Resolve all additional required accounts for `ExecuteInstruction`\nExtraAccountMetaList::add_to_instruction::<ExecuteInstruction, _, _>(\n    &mut execute_instruction,\n    fetch_account_data_fn,\n    &validate_state_data,\n)\n.await?;\n\n// Add only the extra accounts resolved from the validation state\ninstruction\n    .accounts\n    .extend_from_slice(&execute_instruction.accounts[5..]);\n\n// Add the program id and validation state account\ninstruction\n    .accounts\n    .push(AccountMeta::new_readonly(*program_id, false));\ninstruction\n    .accounts\n    .push(AccountMeta::new_readonly(validate_state_pubkey, false));\n```\n\n----------------------------------------\n\nTITLE: Creating Mint with Metadata Pointer via SPL Token CLI - Console\nDESCRIPTION: This code demonstrates creating a new token mint with a metadata pointer to an external account using the SPL Token CLI. You specify the metadata address extension using the --metadata-address parameter. Outputs include the mint address, decimals, and transaction signature post-creation. Requires the spl-token CLI and a target Token-2022 program ID.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_50\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --metadata-address 7N4HggYEJAtCLJdnHGCtFqfxcB5rhQCsQTze3ftYstVj\nCreating token HFg1FFaj4PqFHmkYrqbZsarNJEZT436aXAXgQFMJihwc under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  HFg1FFaj4PqFHmkYrqbZsarNJEZT436aXAXgQFMJihwc\nDecimals:  9\n\nSignature: 3ug4Ejs16jJgEm1WyBwDDxzh9xqPzQ3a2cmy1hSYiPFcLQi9U12HYF1Dbhzb2bx75SSydfU6W4e11dGUXaPbJqVc\n```\n\n----------------------------------------\n\nTITLE: Initializing On-Chain Extra Account Metas using ExtraAccountMetaList in Rust\nDESCRIPTION: This Rust function `process_initialize_extra_account_meta_list` shows the on-chain process of creating and initializing an account to store extra account metadata for a Solana program. It verifies the validation account address derived from the mint and program ID, allocates space using `system_instruction::allocate`, assigns the program ID using `system_instruction::assign` via CPI signed with PDA seeds, and serializes the provided `extra_account_metas` into the account's data buffer using `ExtraAccountMetaList::init::<ExecuteInstruction>`. This setup prepares the account to store configurations needed by instructions like the Transfer Hook's `ExecuteInstruction`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/examples.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub fn process_initialize_extra_account_meta_list(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    extra_account_metas: &[ExtraAccountMeta],\n) -> ProgramResult {\n  let account_info_iter = &mut accounts.iter();\n\n  let validation_info = next_account_info(account_info_iter)?;\n  let mint_info = next_account_info(account_info_iter)?;\n  let authority_info = next_account_info(account_info_iter)?;\n  let _system_program_info = next_account_info(account_info_iter)?;\n\n  // Check validation account\n  let (expected_validation_address, bump_seed) =\n      get_extra_account_metas_address_and_bump_seed(mint_info.key, program_id);\n  if expected_validation_address != *validation_info.key {\n      return Err(ProgramError::InvalidSeeds);\n  }\n\n  // Create the account\n  let bump_seed = [bump_seed];\n  let signer_seeds = collect_extra_account_metas_signer_seeds(mint_info.key, &bump_seed);\n  let length = extra_account_metas.len();\n  let account_size = ExtraAccountMetaList::size_of(length)?;\n  invoke_signed(\n      &system_instruction::allocate(validation_info.key, account_size as u64),\n      &[validation_info.clone()],\n      &[&signer_seeds],\n  )?;\n  invoke_signed(\n      &system_instruction::assign(validation_info.key, program_id),\n      &[validation_info.clone()],\n      &[&signer_seeds],\n  )?;\n\n  // Write the data\n  let mut data = validation_info.try_borrow_mut_data()?;\n  ExtraAccountMetaList::init::<ExecuteInstruction>(&mut data, extra_account_metas)?;\n\n  Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving On-Chain Extra Account Metas for CPI Calls in Rust\nDESCRIPTION: This Rust code snippet illustrates the on-chain process for resolving extra account metadata when preparing for a Cross-Program Invocation (CPI) to a transfer hook program. It locates the necessary `AccountInfo` structures (validation state, program ID) from the currently executing instruction's accounts. It initializes an `ExecuteInstruction` and its base `AccountInfo` list, then uses `ExtraAccountMetaList::add_to_cpi_instruction` to dynamically populate both the CPI instruction's `accounts` list (`AccountMeta`) and the `cpi_account_infos` list (`AccountInfo`) based on the metadata stored in the validation account's data. This ensures the CPI call includes all required accounts and their corresponding `AccountInfo` structures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/examples.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Find the validation account from the list of `AccountInfo`s and load its\n// data\nlet validate_state_pubkey = get_extra_account_metas_address(mint_info.key, program_id);\nlet validate_state_info = account_infos\n    .iter()\n    .find(|&x| *x.key == validate_state_pubkey)\n    .ok_or(TransferHookError::IncorrectAccount)?;\n\n// Find the transfer hook program ID\nlet program_info = account_infos\n    .iter()\n    .find(|&x| x.key == program_id)\n    .ok_or(TransferHookError::IncorrectAccount)?;\n\n// First create an `ExecuteInstruction`\nlet mut execute_instruction = instruction::execute(\n    program_id,\n    source_info.key,\n    mint_info.key,\n    destination_info.key,\n    authority_info.key,\n    &validate_state_pubkey,\n    amount,\n);\nlet mut execute_account_infos = vec![\n    source_info,\n    mint_info,\n    destination_info,\n    authority_info,\n    validate_state_info.clone(),\n];\n\n// Resolve all additional required accounts for `ExecuteInstruction`\nExtraAccountMetaList::add_to_cpi_instruction::<instruction::ExecuteInstruction>(\n    &mut execute_instruction,\n    &mut execute_account_infos,\n    &validate_state_info.try_borrow_data()?,\n    account_infos,\n)?;\n\n// Add only the extra accounts resolved from the validation state\ncpi_instruction\n    .accounts\n    .extend_from_slice(&execute_instruction.accounts[5..]);\ncpi_account_infos.extend_from_slice(&execute_account_infos[5..]);\n\n// Add the program id and validation state account\ncpi_instruction\n    .accounts\n    .push(AccountMeta::new_readonly(*program_id, false));\ncpi_instruction\n    .accounts\n    .push(AccountMeta::new_readonly(validate_state_pubkey, false));\ncpi_account_infos.push(program_info.clone());\ncpi_account_infos.push(validate_state_info.clone());\n```\n\n----------------------------------------\n\nTITLE: Checking SPL Token Balance - Shell (Console)\nDESCRIPTION: This snippet checks the SPL token balance associated with a given mint address using the spl-token CLI. Dependencies include the spl-token command installed and the proper mint address provided. Input is the token mint; output is the current balance to high precision.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token balance BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\n10.00000000\n\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Logic Case: Both Reduce Inventory (Notation)\nDESCRIPTION: A logical condition expressed in pseudocode/notation representing a trade scenario within the 'Trade' instruction. This condition ('n_b >= n && n_s >= n') covers cases where both the buyer and the seller have sufficient existing positions (buyer shorts >= trade size, seller longs >= trade size) to simply reduce their inventory by the trade size 'n'.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nn_b >= n && n_s >= n\n```\n\n----------------------------------------\n\nTITLE: Building Solana On-Chain Programs using Cargo SBF\nDESCRIPTION: Provides commands to compile Solana programs written in Rust into SBF (Solana Bytecode Format). The first command builds all programs in the repository, while the second set of commands navigates to a specific program's directory and builds only that program. Requires `cargo` and the Solana toolchain (`cargo build-sbf`) installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To build all on-chain programs\n$ cargo build-sbf\n\n# To build a specific on-chain program\n$ cd <program_name>/program\n$ cargo build-sbf\n```\n\n----------------------------------------\n\nTITLE: Unwrapping WSOL to SOL - CLI - console\nDESCRIPTION: Converts a wrapped SOL (WSOL) token account back into native SOL using the 'spl-token unwrap' CLI command. Prints details of the account, the amount, recipient address, and transaction signature. Requires the token account address and wallet access. This operation is typically followed to reclaim SOL from a WSOL account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token unwrap GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje\nUnwrapping GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje\n  Amount: 1 SOL\n  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nSignature: f7opZ86ZHKGvkJBQsJ8Pk81v8F3v1VUfyd4kFs4CABmfTnSZK5BffETznUU3tEWvzibgKJASCf7TUpDmwGi8Rmh\n```\n\n----------------------------------------\n\nTITLE: Replacing a Leaf Using a 3rd Party Indexer in a Solana ConcurrentMerkleTree - TypeScript\nDESCRIPTION: Shows how to replace an existing leaf in a Merkle tree using a Merkle proof provided by a third-party indexer (e.g., via a REST endpoint). The code queries for a proof associated with a previous leaf, constructs a tree replacement instruction, and dispatches it. Requires earlier code context for cmtKeypair, payer, and the custom getProofFromAnIndexer implementation. Assumes access to crypto, network, and Merkle proof structures as inputs.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/usage.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a new leaf\nconst newLeaf: Buffer = crypto.randomBytes(32);\n// Query off-chain indexer for a MerkleProof\n// possibly by executing GET request against a REST api\nconst proof = await getProofFromAnIndexer(myOldLeaf);\n// Replace `myOldLeaf` with `newLeaf` at the same index in the tree\nconst replaceIx = createReplaceIx(\n    cmtKeypair.publicKey,          \n    payer.publicKey,\n    newLeaf,\n    proof\n);\nconst tx = new Transaction().add(replaceIx);\nawait sendAndConfirmTransaction(connection, tx, [payer]);\n```\n\n----------------------------------------\n\nTITLE: Checking NFT Account and Mint Info using JavaScript SDK\nDESCRIPTION: Fetches and logs information about the NFT token account and the NFT mint using `getAccount` and `getMint` from `@solana/spl-token`. This verifies the account balance is 1 and checks mint properties like total supply and whether the mint authority has been disabled (set to null).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\nconst accountInfo = await getAccount(connection, associatedTokenAccount.address);\n\nconsole.log(accountInfo.amount);\n// 1\nconst mintInfo = await getMint(\n    connection,\n    mint\n  );\n\nconsole.log(mintInfo);\n/*\n{\n  address: \"7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\",\n  mintAuthority: \"559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\",\n  supply: 1,\n  decimals: 0,\n  isInitialized: true,\n  freezeAuthority: \"vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\"\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Updating Stake Pool Without Merge - Shell (sh)\nDESCRIPTION: This snippet updates only the balances in the stake pool, skipping merge attempts if transient stakes are not ready. Requires spl-stake-pool CLI and the '--no-merge' flag. Output includes standard transaction signatures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --no-merge\nSignature: 5cjdZG727uzwnEEG3vJ1vskA9WsXibaEHh7imXSb2S1cwEYK4Q3btr2GEeAV8EffK4CEQ2WM6PQxawkJAHoZ4jsQ\nSignature: EBHbSRstJ3HxKwYKak8vEwVMKr1UBxdbqs5KuX3XYt4ppPjhaziGEtvL2TJCm1HLokbrtMeTEv57Ef4xhByJtJP\n\n```\n\n----------------------------------------\n\nTITLE: Applying Pending to Available Balances - Solana Confidential Account - Rust\nDESCRIPTION: This code sample demonstrates the update to an Account structure upon execution of the ApplyPendingBalance instruction. It shows pending_balance decremented by the transfer amount and available_balance updated to the post-transfer ciphertext. Dependencies include the PKE encryption interface and transaction signature verification. Inputs are the pre-update ciphertexts and transfer amount ciphertext; outputs are the updated pending and available balances. This operation maintains consistency in encrypted state transitions and requires authorization by the account owner.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 5vBrLAPeMjJr9UfssGbjUaBmWtrXTg2vZuMN6L4c8HE6,\n    encryption_key: mpbpvs1LksLmdMhCEzyu5UEWEb3dsRPbB5,\n    pending_balance: ct_pending_receiver - ct_transfer_receiver,\n    available_balance: ct_available_receiver,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Redundant Stake Pool Update - Shell (sh)\nDESCRIPTION: Shows how the spl-stake-pool CLI responds when an update is attempted but not required for the current epoch. Requires spl-stake-pool CLI and the pool address. No transactions are sent; the output informs the user no update is needed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nUpdate not required\n\n```\n\n----------------------------------------\n\nTITLE: Structuring Confidential Transfer Instruction Data - Rust\nDESCRIPTION: This struct represents the cryptographic instruction data for a confidential transfer, segregating the transfer amount into low and high bit encrypted ciphertexts using ElGamal under different public keys. Prerequisites include sender and receiver ElGamal key management. Encrypted fields map directly to sender and receiver balance updates in the protocol and are critical for secure confidential token transfer operations.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/encryption.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Actual cryptographic components are organized in `VerifyTransfer`\n// instruction data\nstruct ConfidentialTransferInstructionData {\n  /// The transfer amount encrypted under the sender ElGamal public key\n  encrypted_amount_sender: ElGamalCiphertext,\n  /// The low-bits of the transfer amount encrypted under the receiver\n  /// ElGamal public key\n  encrypted_amount_lo_receiver: ElGamalCiphertext,\n  /// The high-bits of the transfer amount encrypted under the receiver\n  /// ElGamal public key\n  encrypted_amount_hi_receiver: ElGamalCiphertext,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token-2022 Mint with Member Extension Enabled using spl-token CLI\nDESCRIPTION: This command uses `spl-token` CLI to create a new Token-2022 mint and enables the Member extension (`--enable-member`). This automatically adds the Member Pointer extension pointing to the mint itself, preparing it to store member configurations directly. A subsequent `initialize-member` command is needed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_63\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --enable-member\nCreating token 9uyqmf9Ued4yQKi4hXT5wMzPF5Nv1S6skAjkjxcCaAyV under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\nTo initialize group member configurations inside the mint, please run `spl-token initialize-member 9uyqmf9Ued4yQKi4hXT5wMzPF5Nv1S6skAjkjxcCaAyV`, and sign with the mint authority.\n\nAddress:  9uyqmf9Ued4yQKi4hXT5wMzPF5Nv1S6skAjkjxcCaAyV\nDecimals:  9\n\nSignature: 2BZH8KE7zVcBj7Mmnu6uCM9NT4ey7qHasZmEk6Bt3tyx1wKCXS3JtcgEvrXXEMFB5numQgA9wvR67o2Z4YQdEw7m\n```\n\n----------------------------------------\n\nTITLE: Depositing Stake Accounts Into Pool via Script - Bash\nDESCRIPTION: This Bash example uses the deposit.sh script to automate depositing stake accounts into the pool using the stake pool JSON and the validator file. The SOL amount is specified as an argument (here, 10). The script requires prior pool and validator initialization. This process is more error-sensitive on local test validator networks with short epochs, but simple command retries mitigate failures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./deposit.sh keys/stake-pool.json local_validators.txt 10\n```\n\n----------------------------------------\n\nTITLE: Identifying Default SPL Governance Shared Instance Address on Mainnet\nDESCRIPTION: Provides the public key address for the default shared instance of the SPL Governance program deployed on the Solana mainnet. This instance can be used by DAOs that don't require a self-owned deployment and prefer using a common, pre-deployed version.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/governance/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw\n```\n\n----------------------------------------\n\nTITLE: Running a Local Solana Test Validator and Switching the CLI URL (Console)\nDESCRIPTION: This pair of commands demonstrates launching a local Solana validator for testing with specific programs loaded from Devnet and reducing epoch length for faster experimentation. The subsequent command points the CLI config to the local node. Requires the solana-test-validator binary and local network access; program IDs must be valid.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ solana-test-validator -c SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy -c EmiU8AQkB2sswTxVB6aCmsAJftoowZGGDXuytm6X65R3 --url devnet --slots-per-epoch 32\n$ solana config set --url http://127.0.0.1:8899\n```\n\n----------------------------------------\n\nTITLE: Defining Accounts for Token-Swap `Swap` Instruction in Rust\nDESCRIPTION: Defines the accounts required by the `Swap` instruction in the token-swap program, updated to include the source and destination token mint accounts (indices 9 and 10). This change is necessary to support the `transfer_checked` instruction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n///   Swap the tokens in the pool.\n///\n///   0. `[]` Token-swap\n///   1. `[]` swap authority\n///   2. `[]` user transfer authority\n///   3. `[writable]` token_(A|B) SOURCE Account, amount is transferable by user transfer authority,\n///   4. `[writable]` token_(A|B) Base Account to swap INTO.  Must be the SOURCE token.\n///   5. `[writable]` token_(A|B) Base Account to swap FROM.  Must be the DESTINATION token.\n///   6. `[writable]` token_(A|B) DESTINATION Account assigned to USER as the owner.\n///   7. `[writable]` Pool token mint, to generate trading fees\n///   8. `[writable]` Fee account, to receive trading fees\n///   9. `[]` Token (A|B) SOURCE mint\n///   10. `[]` Token (A|B) DESTINATION mint\n///   11. `[]` Token (A|B) SOURCE program id\n///   12. `[]` Token (A|B) DESTINATION program id\n///   13. `[]` Pool Token program id\n///   14. `[optional, writable]` Host fee account to receive additional trading fees\nSwap(...),\n```\n\n----------------------------------------\n\nTITLE: Replacing a Leaf using Library's MerkleTree Indexer in TypeScript\nDESCRIPTION: Illustrates how to replace an existing leaf in an SPL Concurrent Merkle Tree using a proof generated by the library's built-in `MerkleTree` class. This assumes the `MerkleTree` instance (`offChainTree`) has been indexing the on-chain tree's transactions. It fetches the proof for the target leaf index and uses `createReplaceIx` to build the replacement instruction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/account-compression/sdk/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume: `offChainTree` is a MerkleTree instance\n// that has been indexing the `cmtKeypair.publicKey` transactions\n\n// Get a new leaf\nconst newLeaf: Buffer = crypto.randomBytes(32);\n\n// Query off-chain records for information about the leaf\n// you wish to replace by its index in the tree\nconst leafIndex = 314;\n\n// Replace the leaf at `leafIndex` with `newLeaf`\nconst replaceIx = createReplaceIx(\n    cmtKeypair.publicKey,          \n    payer.publicKey,\n    newLeaf,\n    offChainTree.getProof(leafIndex) \n);\n\nconst tx = new Transaction().add(replaceIx);\n\nawait sendAndConfirmTransaction(connection, tx, [payer]);\n```\n\n----------------------------------------\n\nTITLE: Encrypting Transfer Amounts with Global Auditor Support - Solana Token Program - Rust\nDESCRIPTION: This Rust snippet shows the structure of a Transfer object that encrypts transfer amounts under the sender's, receiver's, and auditor's public keys using PKE::encrypt. Additionally, it includes zero-knowledge proofs (range and equality proofs) to verify the correctness of encrypted amounts. Dependencies are the PKE library, RangeProof, and EqualityProof constructs. Inputs include relevant public keys and transfer amount; the output is a Transfer structure containing multiple ciphertexts for each key. This snippet is integral for enabling global auditability of transfers in the confidential extension.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nTransfer {\n  amount_sender: PKE::encrypt(pke_pubkey_sender, 10),\n  amount_receiver: PKE::encrypt(pke_pubkey_receiver, 10),\n  amount_auditor: PKE::encrypt(pke_pubkey_auditor, 10),\n  range_proof: RangeProof,\n  equality_proof: EqualityProof,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zero-Knowledge Proofs Trait Interface - Rust\nDESCRIPTION: Declares a generic Rust trait 'ZKP' for modeling zero-knowledge proof systems. It describes associated types and methods for generating and verifying proofs based on public and private data. This model underpins the proof requirement for confidential token operations and requires comprehension of traits, generics, and proof logic.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\ntrait ZKP<PublicData, PrivateData> {\n  type Proof;\n\n  prove(PublicData, PrivateData) -> Proof;\n  verify(PublicData, Proof) -> bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Verifying a Range Proof - Rust\nDESCRIPTION: This example demonstrates generating a zero-knowledge range proof to validate that an encrypted value lies within specified bounds, leveraging the previously introduced encryption and proof interfaces. The snippet shows both successful and unsuccessful verification flows. Dependencies are the PKE trait, a suitable RangeProof implementation, and a background in cryptographic protocol design in Rust.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet ct = PKE::encrypt(pk, x);\nlet public_data = (pk, ct);\nlet private_data = (sk, x);\n\nlet proof = RangeProof::prove(public_data, private_data);\nassert_eq!(RangeProof::verify(public_data, proof), true);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Keypair from Hardware Wallet via CLI\nDESCRIPTION: Configures the Solana CLI to use a hardware wallet (e.g., Ledger) as the default identity by specifying its URL. This allows signing transactions using the hardware device.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --keypair usb://ledger/\n```\n\n----------------------------------------\n\nTITLE: Defining Account Data Structure - Rust\nDESCRIPTION: This snippet presents the 'Account' struct, used to store a user's token balance and metadata. Core fields include associated 'mint', 'owner' public key, and the token 'amount'; other fields are not shown. It's integral for user balances within the Token program and presumes conventional knowledge of Rust and Pubkey representations.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Account data.\nstruct Account {\n    mint: Pubkey,\n    owner: Pubkey,\n    amount: u64,\n    ... // other fields omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Transfer Hook Program for Mint via JavaScript SDK - JavaScript\nDESCRIPTION: Demonstrates updating the transfer-hook program for a mint using a helper function within a JavaScript application. Assumes the function updateTransferHook is already imported or defined as part of the SDK or user utilities. Inputs include connections, mint/payer keypairs, and the new transfer hook program ID; final output is an updated mint with the new extension assignment. No explicit output is shown; success is inferred from lack of error.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_48\n\nLANGUAGE: js\nCODE:\n```\nawait updateTransferHook(\n  connection,\n  payer, mint,\n  newTransferHookProgramId,\n  payer.publicKey,\n  [],\n  undefined,\n  TOKEN_2022_PROGRAM_ID\n);\n```\n\n----------------------------------------\n\nTITLE: Minting with Sufficient Multisig Signers - Solana CLI - console\nDESCRIPTION: Performs a successful SPL token mint operation by supplying two out of three allowed multisig signer JSON files. Requires setup from previous snippets and access to appropriate signer files. Outputs signature on success.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_59\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer signer-1.json \\\n--multisig-signer signer-2.json\n```\n\nLANGUAGE: console\nCODE:\n```\nMinting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nSignature: 2ubqWqZb3ooDuc8FLaBkqZwzguhtMgQpgMAHhKsWcUzjy61qtJ7cZ1bfmYktKUfnbMYWTC1S8zdKgU6m4THsgspT\n```\n\n----------------------------------------\n\nTITLE: Adding a Reserve to a Lending Market with spl-token-lending CLI (Example)\nDESCRIPTION: Provides a practical example of the `add-reserve` command. It specifies the program ID, uses `owner.json` as the keypair file for the fee payer, market owner, and source liquidity owner, identifies the target market (`7uX...`), the source token account (`AJ2...`), deposits an amount of `5.0`, and links specific Pyth product (`8yr...`) and price (`Bdg...`) accounts. The commented output shows the new reserve's public key and the associated transaction signatures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/cli/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nspl-token-lending \\\n  --program      6TvznH3B2e3p2mbhufNBpgSrLx6UkgvxtVQvopEZ2kuH \\\n  --fee-payer    owner.json \\\n  add-reserve \\\n  --market-owner owner.json \\\n  --source-owner owner.json \\\n  --market       7uX9ywsk1X2j6wLoywMDVQLNWAqhDpVqZzL4qm4CuMMT \\\n  --source       AJ2sgpgj6ZeQazPPiDyTYqN9vbj58QMaZQykB9Sr6XY \\\n  --amount       5.0  \\\n  --pyth-product 8yrQMUyJRnCJ72NWwMiPV9dNGw465Z8bKUvnUC8P5L6F \\\n  --pyth-price   BdgHsXrH1mXqhdosXavYxZgX6bGqTdj5mh2sxDhF8bJy\n\n# Adding reserve 69BwFhpQBzZfcp9MCj9V8TLvdv9zGfQQPQbb8dUHsaEa\n# Signature: 2yKHnmBSqBpbGdsxW75nnmZMys1bZMbHiczdZitMeQHYdpis4eVhuMWGE29hhgtHpNDjdPj5YVbqkWoAEBw1WaU\n# Signature: 33x8gbn2RkiA5844eCZq151DuVrYTvUoF1bQ5xA3mqkibJZaJja2hj8RoyjKZpZqg2ckcSKMAeqWbMeWC6vAySQS\n# Signature: 3dk79hSgzFhxPrmctYnS5dxRhojfKkDwwLxEda9bTXqVELHSL4ux8au4jwvL8xuraVhaZAmugCn4TA1YCfLM4sVL\n```\n\n----------------------------------------\n\nTITLE: Example of Account Instantiation with Encrypted Balance - Rust\nDESCRIPTION: Demonstrates how account balances are protected by encryption: the 'amount' is encrypted with the owner's public key using the PKE scheme. It requires the encryption method previously declared, an understanding of public key cryptography, and knowledge of how confidential balances differ in storage.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 5vBrLAPeMjJr9UfssGbjUaBmWtrXTg2vZuMN6L4c8HE6, // pubkey_owner\n    amount: PKE::encrypt(pubkey_owner, 50), // amount encrypted\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Range Proof Verification Failure Case - Rust\nDESCRIPTION: Shows that when a value falls outside specified bounds, no valid proof can cause the verification to succeed, further enforcing range constraints in confidential transactions. It illustrates the negative case in the cryptographic protocol, requiring implementations of both encryption and RangeProof logic.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet ct = PKE::encrypt(pk, x);\nlet public_data = (pk, ct);\n\nassert_eq!(RangeProof::verify(public_data, proof), false);\n```\n\n----------------------------------------\n\nTITLE: Starting Solana Test Validator with Token-2022 Program\nDESCRIPTION: Console command to launch the `solana-test-validator` with the `-c` flag, which clones the specified program (Token-2022, identified by `TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb`) into the test environment. This makes the Token-2022 program available for interactions during testing.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ solana-test-validator -c TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n```\n\n----------------------------------------\n\nTITLE: Example Solana Memo Program Signer Verification Log\nDESCRIPTION: This log line is output by the Memo program for each account provided in the instruction that is verified as a valid signer of the transaction. `<BASE_58_ADDRESS>` is a placeholder for the actual signer's public key address.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/memo.md#_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nProgram log: Signed by <BASE_58_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Confidential Transfer Account Structure With Counters - Rust\nDESCRIPTION: This struct extends the confidential transfer account with two public unsigned integer counters: one limiting the number of deposit/transfer credits before a mandatory balance apply operation, and one tracking received transfer operations. The construction helps mitigate overflow risks in encrypted balances by enforcing upper bounds and partitioning transferred values. Dependencies remain on ElGamal cryptographic types, and these counters directly affect transaction validity and account safety.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/encryption.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct ConfidentialTransferAccount {\n  ... // `approved`, `encryption_pubkey`, available balance fields omitted\n\n  /// The low bits of the pending balance (encrypted by `encryption_pubkey`)\n  pending_balance_lo: ElGamalCiphertext,\n\n  /// The high bits of the pending balance (encrypted by `encryption_pubkey`)\n  pending_balance_hi: ElGamalCiphertext,\n\n  /// The maximum number of `Deposit` and `Transfer` instructions that can credit\n  /// `pending_balance` before the `ApplyPendingBalance` instruction is executed\n  pub maximum_pending_balance_credit_counter: u64,\n\n  /// The number of incoming transfers since the `ApplyPendingBalance` instruction\n  /// was executed\n  pub pending_balance_credit_counter: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Example Solana Memo Program Memo Content Log\nDESCRIPTION: This log line shows the Memo program logging the length and the UTF-8 content of the memo provided in the instruction data. In this example, the memo is the leopard emoji \"🐆\" with a byte length of 4.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/memo.md#_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nProgram log: Memo (len 4): \"🐆\"\n```\n\n----------------------------------------\n\nTITLE: Creating Token-2022 Associated Token Account with spl-token CLI\nDESCRIPTION: This console command creates an associated token account (ATA) for a previously created Token-2022 mint. It specifies the mint address and the owner's public key. The resulting ATA includes the 'Immutable Owner' extension, contributing to a larger account size for testing wallet compatibility.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token -ul create-account E5SUrbnx7bMBp3bRdMWNCFS3FXp5VpvFDdNFp8rjrMLM --owner <TEST_WALLET_ADDRESS> --fee-payer <FEE_PAYER_KEYPAIR>\nCreating account 4L45ZpFS6dqTyLMofmQZ9yuTqYvQrfCJfWL2xAjd5WDW\n\nSignature: 5Cjvvzid7w2tNZojrWVCmZ2MFiezxxnWgJHLJKkvJNByZU2sLN97y85CghxHwPaVf5d5pJAcDV9R4N1MNigAbBMN\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata Field using Solana JS SDK\nDESCRIPTION: This JavaScript snippet demonstrates how to add a custom field to Token-2022 metadata programmatically. It uses the `createUpdateFieldInstruction` from `@solana/spl-token-metadata` to build the instruction, adds it to a transaction, and sends it using `@solana/web3.js`. Key parameters include the metadata account address (`metadata`), the update authority's public key, the Token-2022 program ID, the field name (`field`), and the field value (`value`).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createUpdateFieldInstruction } from \"@solana/spl-token-metadata\";\n\n(async () => {\n  const tx = new Transaction().add(\n    createUpdateFieldInstruction({\n      metadata: mint.publicKey,\n      updateAuthority: payer.publicKey,\n      programId: TOKEN_2022_PROGRAM_ID,\n      field: 'new-field',\n      value: 'new-value',\n    }),\n  );\n  await sendAndConfirmTransaction(connection, tx, [ payer, mint ]);\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating Mint Metadata Field via SPL Token CLI - Console\nDESCRIPTION: This example demonstrates updating a specific field in an existing mint's metadata using the SPL Token CLI. The update-metadata subcommand takes mint address, field name (e.g., name), and new value, and outputs a transaction signature confirming the update. Requires prior initialization of metadata and sufficient permissions to update.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_53\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token update-metadata 5K8RVdjpY3CHujyKjQ7RkyiCJqTG8Kba9krNfpZnmvpS name YourToken\nSignature: 2H16XtBqdwSbvvq8g5o2jhy4TknP6zgt71KHawEdyPvNuvusQrV4dPccUrMqjFeNTbk75AtzmzUVueH3yWiTjBCG\n```\n\n----------------------------------------\n\nTITLE: Refining Confidential Transfer Account with Decryptable Balance in Rust\nDESCRIPTION: Defines an updated Rust struct `ConfidentialTransferAccount` addressing ElGamal decryption inefficiency. It adds `decryptable_available_balance`, an `AeCiphertext` (authenticated symmetric encryption, likely AES-GCM-SIV), alongside the ElGamal-encrypted `available_balance`. This allows clients to efficiently decrypt the available balance using a symmetric key.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/encryption.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct ConfidentialTransferAccount {\n  /// `true` if this account has been approved for use. All confidential\n  /// transfer operations for\n  /// the account will fail until approval is granted.\n  approved: PodBool,\n\n  /// The public key associated with ElGamal encryption\n  encryption_pubkey: ElGamalPubkey,\n\n  /// The pending balance (encrypted by `encryption_pubkey`)\n  pending_balance: ElGamalCiphertext,\n\n  /// The available balance (encrypted by `encryption_pubkey`)\n  available_balance: ElGamalCiphertext,\n\n  /// The decryptable available balance\n  decryptable_available_balance: AeCiphertext,\n}\n```\n\n----------------------------------------\n\nTITLE: Example Solana Memo Program Missing Signature Failure Log\nDESCRIPTION: This log line indicates that the Memo program instruction failed because one or more accounts provided were required to be signers but did not sign the transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/memo.md#_snippet_5\n\nLANGUAGE: log\nCODE:\n```\nProgram MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr failed: missing required signature for instruction\n```\n\n----------------------------------------\n\nTITLE: Example Solana Memo Program Invalid Data Failure Log\nDESCRIPTION: This log line indicates that the Memo program instruction failed due to invalid data, such as a memo that could not be parsed as valid UTF-8.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/memo.md#_snippet_6\n\nLANGUAGE: log\nCODE:\n```\nProgram MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr failed: invalid instruction data\n```\n\n----------------------------------------\n\nTITLE: Enhancing TransferProof for Net Balance Verification in Rust\nDESCRIPTION: Updates the `TransferProof` structure to clarify that the included `RangeProof` now serves a dual purpose: certifying the validity of the transfer amount (split into low and high bits) and ensuring the source account has sufficient funds by proving the post-transfer balance (`source_available_balance - transfer_amount`) is a positive 64-bit value. The `TransferData` structure incorporates this enhanced proof.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/zkps.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct TransferProof {\n  validity_proof: ValidityProof,\n  range_proof: RangeProof, // certifies ciphertext amount and net-balance\n}\n\nstruct TransferData {\n  ciphertext_lo: TransferAmountEncryption,\n  ciphertext_hi: TransferAmountEncryption,\n  transfer_pubkeys: TransferPubkeys,\n  proof: TransferProof,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fee Encryption Structure for TransferWithFeeData in Rust\nDESCRIPTION: Defines the `FeeEncryption` struct for handling confidential transfer fees. It includes a Pedersen commitment and decryption handles for the destination and withdraw withheld authority ElGamal keys. Introduces the `TransferWithFeeData` struct, which builds upon `TransferData` by adding `fee_ciphertext` (of type `FeeEncryption`) to securely include the encrypted fee amount required for the `TransferWithFee` instruction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/zkps.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nstruct FeeEncryption {\n    commitment: PedersenCommitment,\n    destination_handle: DecryptHandle,\n    withdraw_withheld_authority_handle: DecryptHandle,\n}\n\nstruct TransferWithFeeData {\n  ... // `TransferData` components\n  fee_ciphertext: FeeEncryption,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Client Tests via Shell\nDESCRIPTION: Shell command to execute the Python test suite for the binary option client. It runs the tests located within the 'client.test' module, presumably interacting with the binary option program deployed on the Solana devnet. Requires the Python environment and dependencies to be set up first.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m client.test\n```\n\n----------------------------------------\n\nTITLE: Creating a Token with Default Frozen Accounts - SPL Token-2022 - JavaScript\nDESCRIPTION: This JavaScript snippet programmatically creates a new SPL token mint with the default account state set to 'Frozen' using Token-2022 and initializes it on Solana. It submits an airdrop, creates the mint with extension, and sets authority and decimals accordingly. Dependencies: '@solana/web3.js' and '@solana/spl-token' libraries; requires Devnet connection, system keypairs, and proper Solana setup. Key parameters include payer, authorities, extension type, decimals, and the use of TOKEN_2022_PROGRAM_ID. Inputs are handled by keypair generation; output is a blockchain transaction that creates and initializes the mint with default frozen state.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport {\n    AccountState,\n    createInitializeMintInstruction,\n    createInitializeDefaultAccountStateInstruction,\n    getMintLen,\n    updateDefaultAccountState,\n    ExtensionType,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const payer = Keypair.generate();\n\n    const mintAuthority = Keypair.generate();\n    const freezeAuthority = Keypair.generate();\n    const mintKeypair = Keypair.generate();\n    const mint = mintKeypair.publicKey;\n\n    const extensions = [ExtensionType.DefaultAccountState];\n    const mintLen = getMintLen(extensions);\n    const decimals = 9;\n\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const defaultState = AccountState.Frozen;\n\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: mint,\n            space: mintLen,\n            lamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeDefaultAccountStateInstruction(mint, defaultState, TOKEN_2022_PROGRAM_ID),\n        createInitializeMintInstruction(\n            mint,\n            decimals,\n            mintAuthority.publicKey,\n            freezeAuthority.publicKey,\n            TOKEN_2022_PROGRAM_ID\n        )\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, mintKeypair], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Transferable Token Mint using @solana/spl-token JS\nDESCRIPTION: This JavaScript snippet demonstrates creating a non-transferable token mint on the Solana devnet using `@solana/web3.js` and `@solana/spl-token`. It funds a payer account, calculates the required space and rent exemption for a mint with the `NonTransferable` extension, creates the mint account via `SystemProgram.createAccount`, initializes the non-transferable extension using `createInitializeNonTransferableMintInstruction`, and initializes the mint itself using `createInitializeMintInstruction` within a single transaction. Dependencies include `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport {\n    createInitializeNonTransferableMintInstruction,\n    createInitializeMintInstruction,\n    getMintLen,\n    ExtensionType,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const payer = Keypair.generate();\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintAuthority = Keypair.generate();\n    const decimals = 9;\n\n    const mintKeypair = Keypair.generate();\n    const mint = mintKeypair.publicKey;\n    const mintLen = getMintLen([ExtensionType.NonTransferable]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: mint,\n            space: mintLen,\n            lamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeNonTransferableMintInstruction(mint, TOKEN_2022_PROGRAM_ID),\n        createInitializeMintInstruction(mint, decimals, mintAuthority.publicKey, null, TOKEN_2022_PROGRAM_ID)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, mintKeypair], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Interest-Bearing SPL Token Mint using JS\nDESCRIPTION: Provides a JavaScript example using `@solana/web3.js` and `@solana/spl-token` to create an interest-bearing token mint associated with the Token-2022 program. It utilizes the `createInterestBearingMint` function, specifying necessary authorities (mint, freeze, rate), the initial interest rate (in basis points), decimals, and uses `TOKEN_2022_PROGRAM_ID`. Requires a Solana connection and a funded payer keypair. Dependencies include `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nimport { clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createInterestBearingMint, updateRateInterestBearingMint, TOKEN_2022_PROGRAM_ID } from '@solana/spl-token';\n\n(async () => {\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const payer = Keypair.generate();\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintAuthority = Keypair.generate();\n    const freezeAuthority = Keypair.generate();\n    const rateAuthority = Keypair.generate();\n    const mintKeypair = Keypair.generate();\n    const rate = 10;\n    const decimals = 9;\n    const mint = await createInterestBearingMint(\n        connection,\n        payer,\n        mintAuthority.publicKey,\n        freezeAuthority.publicKey,\n        rateAuthority.publicKey,\n        rate,\n        decimals,\n        mintKeypair,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n})();\n```\n\n----------------------------------------\n\nTITLE: Wrapping SOL into WSOL - CLI - console\nDESCRIPTION: Wraps native SOL into a wrapped SPL Token (WSOL) account using the CLI, specifically the 'spl-token wrap' command. This operation moves SOL into an associated SPL Token account on the native mint. A successful transaction prints the account address and signature for tracking. The CLI must have access to the wallet and network.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token wrap 1\nWrapping 1 SOL into GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje\nSignature: 4f4s5QVMKisLS6ihZcXXPbiBAzjnvkBcp2A7KKER7k9DwJ4qjbVsQBKv2rAyBumXC1gLn8EJQhwWkybE4yJGnw2Y\n```\n\n----------------------------------------\n\nTITLE: Defining Initialize Instruction Interface for Token-Swap - Rust\nDESCRIPTION: This Rust snippet defines the account structure for the Token-Swap 'Initialize' instruction. The comment block specifies the access patterns, required account types, and intended access constraints (writable, signers, etc.) for initializing a token-swap pool. The code depends on correct Solana account configuration, expects accounts for swap state, authority, pool mint, fee destinations, and token program. The inputs are the specified accounts, with the output being an initialized Token-Swap instance. Some field details are omitted for brevity.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n///   Initializes a new swap\\n///\\n///   0. `[writable, signer]` New Token-swap to create.\\n///   1. `[]` swap authority derived from `create_program_address(&[Token-swap account])`\\n///   2. `[]` token_a Account. Must be non zero, owned by swap authority.\\n///   3. `[]` token_b Account. Must be non zero, owned by swap authority.\\n///   4. `[writable]` Pool Token Mint. Must be empty, owned by swap authority.\\n///   5. `[]` Pool Token Account to deposit trading and withdraw fees.\\n///   Must be empty, not owned by swap authority\\n///   6. `[writable]` Pool Token Account to deposit the initial pool token\\n///   supply.  Must be empty, not owned by swap authority.\\n///   7. `[]` Token program id\\nInitialize { ... } // details omitted\n```\n\n----------------------------------------\n\nTITLE: Reallocating SPL Token Account using JS for Memo Transfers\nDESCRIPTION: Provides a JavaScript example using `@solana/web3.js` and `@solana/spl-token` to programmatically reallocate an existing token account (`createReallocateInstruction`) to add space for the `MemoTransfer` extension, and then enables the extension (`createEnableRequiredMemoTransfersInstruction`). It requires a Solana connection, a funded payer keypair, the mint address, the account owner keypair, the account address, and uses the `TOKEN_2022_PROGRAM_ID`. Dependencies include `@solana/web3.js` and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport {\n    createAccount,\n    createMint,\n    createEnableRequiredMemoTransfersInstruction,\n    createReallocateInstruction,\n    ExtensionType,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const payer = Keypair.generate();\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintAuthority = Keypair.generate();\n    const decimals = 9;\n    const mint = await createMint(\n        connection,\n        payer,\n        mintAuthority.publicKey,\n        mintAuthority.publicKey,\n        decimals,\n        undefined,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n\n    const owner = Keypair.generate();\n    const account = await createAccount(\n        connection,\n        payer,\n        mint,\n        owner.publicKey,\n        undefined,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n\n    const extensions = [ExtensionType.MemoTransfer];\n    const transaction = new Transaction().add(\n        createReallocateInstruction(\n            account,\n            payer.publicKey,\n            extensions,\n            owner.publicKey,\n            undefined,\n            TOKEN_2022_PROGRAM_ID\n        ),\n        createEnableRequiredMemoTransfersInstruction(account, owner.publicKey, [], TOKEN_2022_PROGRAM_ID)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, owner], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Account with Required Memo Transfers using @solana/spl-token JS\nDESCRIPTION: This JavaScript snippet creates a token mint and then creates a new token account specifically initialized with the `MemoTransfer` extension enabled. It calculates the necessary account size using `getAccountLen`, creates the account using `SystemProgram.createAccount`, initializes it using `createInitializeAccountInstruction`, and enables the memo requirement using `createEnableRequiredMemoTransfersInstruction` within a transaction. Dependencies include `@solana/web3.js`, `@solana/spl-memo`, and `@solana/spl-token`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport { createMemoInstruction } from '@solana/spl-memo';\nimport {\n    createAssociatedTokenAccount,\n    createMint,\n    createEnableRequiredMemoTransfersInstruction,\n    createInitializeAccountInstruction,\n    createTransferInstruction,\n    disableRequiredMemoTransfers,\n    enableRequiredMemoTransfers,\n    getAccountLen,\n    mintTo,\n    ExtensionType,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const payer = Keypair.generate();\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintAuthority = Keypair.generate();\n    const decimals = 9;\n    const mint = await createMint(\n        connection,\n        payer,\n        mintAuthority.publicKey,\n        mintAuthority.publicKey,\n        decimals,\n        undefined,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n\n    const accountLen = getAccountLen([ExtensionType.MemoTransfer]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(accountLen);\n\n    const owner = Keypair.generate();\n    const destinationKeypair = Keypair.generate();\n    const destination = destinationKeypair.publicKey;\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: destination,\n            space: accountLen,\n            lamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeAccountInstruction(destination, mint, owner.publicKey, TOKEN_2022_PROGRAM_ID),\n        createEnableRequiredMemoTransfersInstruction(destination, owner.publicKey, [], TOKEN_2022_PROGRAM_ID)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, owner, destinationKeypair], undefined);\n\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Account via CLI\nDESCRIPTION: Creates a new account associated with a specific SPL token mint using the `spl-token` CLI utility. Requires the token's mint address as an argument. The command outputs the public key of the newly created token account and the transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\nCreating account 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\nSignature: 42Sa5eK9dMEQyvD9GMHuKxXf55WLZ7tfjabUKDhNoZRAxj9MsnN7omriWMEHXLea3aYpjZ862qocRLVikvkHkyfy\n```\n\n----------------------------------------\n\nTITLE: Generating UpdateExtraAccountMetaList Discriminator String Literal\nDESCRIPTION: Defines the string literal that is hashed (first 8 bytes) to produce the discriminator for the optional `UpdateExtraAccountMetaList` instruction. This instruction allows updating the extra account configurations stored in the validation account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/specification.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"spl-transfer-hook-interface:update-extra-account-metas\"\n```\n\n----------------------------------------\n\nTITLE: Creating Account with Required Memo Transfers using spl-token CLI\nDESCRIPTION: This sequence of `spl-token` CLI commands first creates a standard token mint (`create-token`), then creates an associated token account for that mint (`create-account`), and finally enables the required memo transfer extension on the newly created account (`enable-required-transfer-memos`). This ensures incoming transfers to this account must be preceded by a memo instruction. Requires `spl-token` CLI.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token\nCreating token EbPBt3XkCb9trcV4c8fidhrvoeURbDbW87Acustzyi8N under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  EbPBt3XkCb9trcV4c8fidhrvoeURbDbW87Acustzyi8N\nDecimals:  9\n\nSignature: 2mCoV3ujSUArgZMyayiYtLZp2QzpqKx3NXnv9W8DpinY39rBU2yGmYLfp2tZ9uZqVbfJ6Mf3SqDHexdCcFcDAEvc\n$ spl-token create-account EbPBt3XkCb9trcV4c8fidhrvoeURbDbW87Acustzyi8N\nCreating account 4Uzz67txwYbfYpF8r5UGEMYJwhPAYQ5eFUY89KTYc2bL\n\nSignature: 57wZHDaQtSzszDkusrnozZNj5PemQhpqHMEFLWFKpqASCErcDuBuYuEky5g3evHtkjMrKgh1s3aEap1L8y5UhW5W\n$ spl-token enable-required-transfer-memos 4Uzz67txwYbfYpF8r5UGEMYJwhPAYQ5eFUY89KTYc2bL\nSignature: 5MnWtrhMK32zkbacDMwBNft48VAUpr4EoRM87hkT9AFYvPgPEU7V7ERV6gdfb3kASri4wnUnr13hNKuYJ66pD8Fs\n```\n\n----------------------------------------\n\nTITLE: Depositing SOL into Stake Pool - SPL CLI - Shell\nDESCRIPTION: Shows how to deposit SOL from a wallet into the stake pool using the 'deposit-sol' command. Requires stake pool address and the amount of SOL as parameters. Outputs include confirmation of the associated token account and a transaction signature; user must have wallet access and sufficient balance.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool deposit-sol Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 100\nUsing existing associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nSignature: 23CptpZaq33njCpJPAvk8XS53xXwpfqF1sGxChk3VDB5mzz7XPKQqwsreun3iwZ6b51AyHqGBaUyc6tx9fqvF9JK\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Token Account with Immutable Ownership - SPL CLI - console\nDESCRIPTION: This snippet demonstrates the creation of an associated token account, which by default includes the immutable owner extension in Token-2022, using spl-token CLI. The 'create-account' command shows standard usage and behavior when the redundant --immutable argument is supplied. Assumes CLI environment, a valid mint, and enough funds. Outputs are the new account address and transaction signature; the extension is included by default for associated accounts.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token create-account CZxztd7SEZWxg6B9PH5xa7QwKpMCpWBJiTLftw1o3qyV\nCreating account 4nvfLgYMERdNbbf1pADUSp44XukAyjeWWXCMkM1gMqC4\n\nSignature: w4TRYDdCpTfmQh96E4UNgFFeiAHphWNaeYrJTu6bGyuPMokJrKFR33Ntj3iNQ5QQuFqom2CaYkhXiX9sBpWEW23\n```\n\nThe CLI will tell us that it's unnecessary to specify the `--immutable` argument\nif it's provided:\n\n```console\n$ spl-token create-account CZxztd7SEZWxg6B9PH5xa7QwKpMCpWBJiTLftw1o3qyV --immutable\nCreating account 4nvfLgYMERdNbbf1pADUSp44XukAyjeWWXCMkM1gMqC4\nNote: --immutable specified, but Token-2022 ATAs are always immutable, ignoring\n\nSignature: w4TRYDdCpTfmQh96E4UNgFFeiAHphWNaeYrJTu6bGyuPMokJrKFR33Ntj3iNQ5QQuFqom2CaYkhXiX9sBpWEW23\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Requirements via requirements.txt - Plaintext\nDESCRIPTION: Defines a list of Python package dependencies with exact version pins for project reproducibility. This format is processed by package managers like pip to automate environment setup. Each line consists of a package name and an optional version specifier, with no code execution; lines are parsed as instructions by pip. Limitations include lack of support for direct installation instructions, only specifying package versions.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/client/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nattrs==21.2.0\\nbase58==2.1.0\\ncertifi==2024.7.4\\ncffi==1.14.5\\nchardet==4.0.0\\ncheroot==8.5.2\\nCherryPy==18.6.0\\nconstruct==2.10.67\\ncryptography==43.0.1\\ned25519==1.5\\nidna==3.7\\niniconfig==1.1.1\\njaraco.classes==3.2.1\\njaraco.collections==3.3.0\\njaraco.functools==3.3.0\\njaraco.text==3.5.0\\nmore-itertools==8.8.0\\nnumpy==1.22.0\\npackaging==20.9\\npandas==1.3.0\\npluggy==0.13.1\\nportend==2.7.1\\npy==1.10.0\\npycparser==2.20\\nPyNaCl==1.4.0\\npyparsing==2.4.7\\npytest==6.2.4\\npython-dateutil==2.8.1\\npytz==2021.1\\nrequests==2.32.0\\nsix==1.16.0\\nsolana==0.10.0\\ntempora==4.1.1\\ntoml==0.10.2\\ntyping-extensions==3.10.0.0\\nurllib3==1.26.19\\nwebsockets==9.1\\nzc.lockfile==2.0\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateExtraAccountMetaList Data Structure\nDESCRIPTION: Specifies the data payload structure for the `UpdateExtraAccountMetaList` instruction. It includes a vector (`Vec`) of `ExtraAccountMeta` configurations that will overwrite the existing configurations in the validation account.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/specification.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nextra_account_metas: Vec<ExtraAccountMeta>\n```\n\n----------------------------------------\n\nTITLE: Defining Execute Instruction Data Structure\nDESCRIPTION: Specifies the data payload structure for the `Execute` instruction, following the discriminator. It includes the `amount` of the transfer as a 64-bit unsigned integer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/specification.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\namount: u64\n```\n\n----------------------------------------\n\nTITLE: Explicit Account Creation with Immutable Ownership - SPL Token-2022 - JavaScript\nDESCRIPTION: This JavaScript example shows how to create a token account with the immutable owner extension by composing SPL Token-2022 instructions. It involves requesting an airdrop, creating a mint, calculating extension-dependent account size, and initializing both the extension and the base account. Requires '@solana/web3.js' and '@solana/spl-token', and Devnet setup. Inputs include authorities and keypairs; outcome is a submitted transaction that produces a token account that cannot be reassigned.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    clusterApiUrl,\n    sendAndConfirmTransaction,\n    Connection,\n    Keypair,\n    SystemProgram,\n    Transaction,\n    LAMPORTS_PER_SOL,\n} from '@solana/web3.js';\nimport {\n    createAccount,\n    createMint,\n    createInitializeImmutableOwnerInstruction,\n    createInitializeAccountInstruction,\n    getAccountLen,\n    ExtensionType,\n    TOKEN_2022_PROGRAM_ID,\n} from '@solana/spl-token';\n\n(async () => {\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    const payer = Keypair.generate();\n    const airdropSignature = await connection.requestAirdrop(payer.publicKey, 2 * LAMPORTS_PER_SOL);\n    await connection.confirmTransaction({ signature: airdropSignature, ...(await connection.getLatestBlockhash()) });\n\n    const mintAuthority = Keypair.generate();\n    const decimals = 9;\n    const mint = await createMint(\n        connection,\n        payer,\n        mintAuthority.publicKey,\n        mintAuthority.publicKey,\n        decimals,\n        undefined,\n        undefined,\n        TOKEN_2022_PROGRAM_ID\n    );\n\n    const accountLen = getAccountLen([ExtensionType.ImmutableOwner]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(accountLen);\n\n    const owner = Keypair.generate();\n    const accountKeypair = Keypair.generate();\n    const account = accountKeypair.publicKey;\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: account,\n            space: accountLen,\n            lamports,\n            programId: TOKEN_2022_PROGRAM_ID,\n        }),\n        createInitializeImmutableOwnerInstruction(account, TOKEN_2022_PROGRAM_ID),\n        createInitializeAccountInstruction(account, mint, owner.publicKey, TOKEN_2022_PROGRAM_ID)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, accountKeypair], undefined);\n})();\n```\n\n----------------------------------------\n\nTITLE: Withdrawing SOL from Stake Pool - SPL CLI - Shell\nDESCRIPTION: Shows how to withdraw SOL from the stake pool to a specified wallet address using the SPL CLI. Command parameters are the stake pool address, recipient address, and amount. Successful withdrawal outputs include the transaction signature; recipient account receives SOL and pool tokens are burned accordingly.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool withdraw-sol Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 7VXPpSxneL6JLj18Naw2gkukXtjBZfbmPh18cnoUCMD8 2\nSignature: 4bqZKUUrjVspqTGqGqX4zxnHnJB67WbeukKUZRmxJ2yFmr275CtHPjZNzQJD9Pe7Q6mSxnUpcVv9FUdAbGP9RyBc\n```\n\n----------------------------------------\n\nTITLE: Creating Interest-Bearing SPL Token Mint via CLI\nDESCRIPTION: Demonstrates using the `spl-token` CLI to create a new token mint with the interest-bearing extension enabled under the Token-2022 program. It specifies the Token-2022 program ID (`TokenzQdBN...`) and sets an initial annual interest rate in basis points using the `--interest-rate` flag.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --interest-rate 10\nCreating token 7N4HggYEJAtCLJdnHGCtFqfxcB5rhQCsQTze3ftYstVj under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  7N4HggYEJAtCLJdnHGCtFqfxcB5rhQCsQTze3ftYstVj\nDecimals:  9\n\nSignature: 5dSW5QUacEsaKYb3MwYp4ycqq4jpNJ1rpLhS5rotoe3CWv9XhhjrncUFpk14R1fRamS1xprziC3NkpbYno4c8JxD\n```\n\n----------------------------------------\n\nTITLE: Checking Token Supply via CLI\nDESCRIPTION: Checks the current total supply of a given SPL token using the `spl-token` CLI utility. Requires the token's mint address as an argument. Initially, the supply is 0.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n0\n```\n\n----------------------------------------\n\nTITLE: Running Host and SBF Unit Tests using Cargo\nDESCRIPTION: Demonstrates commands for executing unit tests within the repository. `cargo test` runs standard host-based Rust tests, while `cargo test-sbf` executes tests specifically targeting the Solana SBF runtime environment for on-chain programs. Requires `cargo` and the Solana toolchain.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo test      # <-- runs host-based tests\n$ cargo test-sbf  # <-- runs BPF program tests\n```\n\n----------------------------------------\n\nTITLE: Explicit Account Creation with Immutable Ownership - SPL CLI - console\nDESCRIPTION: This sequence of spl-token and solana-keygen CLI commands creates a mint and then an account with the immutable ownership extension, ensuring the account cannot have its owner reassigned. The account is created against a keypair output with --immutable. Requires spl-token and solana-keygen tools, a valid keypair file, and sufficient funds. Output includes confirmation with account and signature details. Immutable owner is enforced upon creation and cannot be removed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token\nCreating token CZxztd7SEZWxg6B9PH5xa7QwKpMCpWBJiTLftw1o3qyV under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  CZxztd7SEZWxg6B9PH5xa7QwKpMCpWBJiTLftw1o3qyV\nDecimals:  9\n\nSignature: 4fT19YaE3zAscj71n213K22M3wDSXgwSn39RBCVtiCTxMX7pZhAoHywP2QMKqWpZMB5vT7diQ8QaFp3abHztpyPC\n$ solana-keygen new -o account.json\n$ spl-token create-account CZxztd7SEZWxg6B9PH5xa7QwKpMCpWBJiTLftw1o3qyV account.json --immutable\nCreating account EV2xsZto1TRqehewwWHUUQm68X6C6MepBSkbfZcVdShy\n\nSignature: 5NqXiE3LPFnufnZhcwKPoZt7DaPR7qwfhmRr9W9ykhNM7rnu6MDdx7n5eTpEisiaSET2R4fZW7a91Ai6pCuskXF8\n```\n\n----------------------------------------\n\nTITLE: Constructing and Executing Offline Multisig Mint Transactions with Solana Web3.js (jsx)\nDESCRIPTION: Outlines the JavaScript implementation for building, serializing, signing (online and offline), and submitting a multisig token mint transaction using a durable nonce. Requires '@solana/web3.js', 'tweetnacl', and token-program instructions. Inputs are public keys, transaction buffers, and signer keypairs. Outputs include serialized transactions, signature buffers, and transaction receipt, with special handling for offline/air-gapped signing.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_64\n\nLANGUAGE: jsx\nCODE:\n```\nconst nonceAccountInfo = await connection.getAccountInfo(\n  nonceAccount.publicKey,\n  'confirmed'\n);\n\nconst nonceAccountFromInfo = web3.NonceAccount.fromAccountData(nonceAccountInfo.data);\n\nconsole.log(nonceAccountFromInfo);\n\nconst nonceInstruction = web3.SystemProgram.nonceAdvance({\n  authorizedPubkey: onlineAccount.publicKey,\n  noncePubkey: nonceAccount.publicKey\n});\n\nconst nonce = nonceAccountFromInfo.nonce;\n\nconst mintToTransaction = new web3.Transaction({\n  feePayer: onlineAccount.publicKey,\n  nonceInfo: {nonce, nonceInstruction}\n})\n  .add(\n    createMintToInstruction(\n      mint,\n      associatedTokenAccount.address,\n      multisigkey,\n      1,\n      [\n        signer1,\n        onlineAccount\n      ],\n      TOKEN_PROGRAM_ID\n    )\n  );\n```\n\nLANGUAGE: jsx\nCODE:\n```\nlet mintToTransactionBuffer = mintToTransaction.serializeMessage();\n\nlet onlineSIgnature = nacl.sign.detached(mintToTransactionBuffer, onlineAccount.secretKey);\nmintToTransaction.addSignature(onlineAccount.publicKey, onlineSIgnature);\n\n// Handed to offline signer for signature\nlet offlineSignature = nacl.sign.detached(mintToTransactionBuffer, signer1.secretKey);\nmintToTransaction.addSignature(signer1.publicKey, offlineSignature);\n\nlet rawMintToTransaction = mintToTransaction.serialize();\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Send to online signer for broadcast to network\nawait web3.sendAndConfirmRawTransaction(connection, rawMintToTransaction);\n```\n\n----------------------------------------\n\nTITLE: Setting Solana CLI Default Keypair (File)\nDESCRIPTION: Command to set the default keypair used by the Solana CLI by specifying the file path to the keypair JSON file. This keypair is often used as the default fee payer and signing authority.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --keypair ${HOME}/new-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Setting Default Solana CLI Keypair to a File (Console)\nDESCRIPTION: This snippet illustrates configuring the Solana CLI to use a specific keypair file as the active key. This ensures all subsequent commands are signed by the selected private key. The provided file path should point to a valid Solana keypair JSON file.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --keypair ${HOME}/new-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Building Client Applications using Cargo Build\nDESCRIPTION: Shows how to compile the client-side Rust applications (e.g., CLIs) associated with the Solana programs. Use `cargo build` at the root to build all clients or navigate to a specific `cli` directory and run `cargo build` there. Requires `cargo`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# To build all clients\n$ cargo build\n\n# To build a specific client\n$ cd <program_name>/cli\n$ cargo build\n```\n\n----------------------------------------\n\nTITLE: Running Clippy Linter on Rust Code using Cargo\nDESCRIPTION: A command to execute the Clippy linter using `cargo`. Clippy analyzes Rust code for potential errors, style issues, and non-idiomatic patterns to improve code quality and maintainability. Requires `cargo` and the `clippy` component installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo clippy\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Withheld Tokens from Mint via Solana CLI\nDESCRIPTION: Shows the `spl-token withdraw-withheld-tokens --include-mint` command. This command allows the configured withdraw authority to move tokens accumulated in the mint's fee coffers (typically after being harvested from other accounts) to a specified destination account (in this example, `7UKuG4W68hW9eGrDms6BenRf8DCEHKGN49xewtWyB5cx`). Requires `spl-token` CLI.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token withdraw-withheld-tokens --include-mint 7UKuG4W68hW9eGrDms6BenRf8DCEHKGN49xewtWyB5cx\n\nSignature: 5KzdgcKgi3rLaBRfDbG5pxZwyKppyVjAA8TUCjTMfb1vMYv7CLQWaxgFz81jz4reUaF7oP67Gdqoc91Ted6qr1Hb\n```\n\n----------------------------------------\n\nTITLE: Querying Solana for Token Accounts by Mint using JSON RPC (Shell)\nDESCRIPTION: This cURL command demonstrates how to use the Solana JSON RPC `getProgramAccounts` method to find all SPL Token accounts associated with a specific mint address (`TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM`). It filters accounts belonging to the Token program (`TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`), ensures the account data size is 165 bytes (standard for token accounts), and uses `memcmp` to match the mint address at offset 0 within the account data. Requires a running Solana RPC endpoint accessible via HTTP.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://api.mainnet-beta.solana.com -X POST -H \"Content-Type: application/json\" -d '\\n  {\\n    \"jsonrpc\": \"2.0\",\\n    \"id\": 1,\\n    \"method\": \"getProgramAccounts\",\\n    \"params\": [\\n      \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\\n      {\\n        \"encoding\": \"jsonParsed\",\\n        \"filters\": [\\n          {\\n            \"dataSize\": 165\\n          },\\n          {\\n            \"memcmp\": {\\n              \"offset\": 0,\\n              \"bytes\": \"TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM\"\\n            }\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n'\n```\n\n----------------------------------------\n\nTITLE: Defining ExtraAccountMeta Struct in Rust\nDESCRIPTION: Defines the ExtraAccountMeta struct, central to the TLV Account Resolution library, for configuring extra accounts. This struct includes a discriminator, address configuration (either a public key or serialized seeds), and boolean flags indicating if the account is a signer or writable. No dependencies are explicitly shown, but it assumes PodBool and related SPL/Pod traits are available. Input values allow users to specify static or derived account configs, and the struct is serialized into a 35-byte fixed layout for on-chain parsing.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/configuring-extra-accounts.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct ExtraAccountMeta {\n    /// Discriminator to tell whether this represents a standard\n    /// `AccountMeta` or a PDA\n    pub discriminator: u8,\n    /// This `address_config` field can either be the pubkey of the account\n    /// or the seeds used to derive the pubkey from provided inputs\n    pub address_config: [u8; 32],\n    /// Whether the account should sign\n    pub is_signer: PodBool,\n    /// Whether the account should be writable\n    pub is_writable: PodBool,\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing a SPL Program Release (Git/Bash)\nDESCRIPTION: This code snippet shows how to create an annotated Git tag for a specific program and version, then push that tag upstream. It targets maintainers preparing a SPL release, requiring local repository access and permissions to push tags upstream. The key parameters are the tag name (of format <program>-vX.Y.Z) and the specified commit hash. Outputs are the new tag created locally and published to the remote repository.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag token-v1.0.0 b24bfe7\\n$ git push upstream --tags\n```\n\n----------------------------------------\n\nTITLE: Preparing and Signing Multisig Token Mint Transactions via Solana CLI (console)\nDESCRIPTION: Details the step-by-step minting of tokens using the 'spl-token' CLI, constructing a transaction with multisig and durable nonce settings. The templates outline how absent signer placeholders are replaced by signers, and offline signatures are collected before the transaction is broadcast. Prerequisites: 'spl-token' CLI and appropriate multisig keypairs. Important arguments: --owner, --multisig-signer, --blockhash, --nonce, --sign-only, among others. Output includes signature records and token mint operation results.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_63\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\n--multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--sign-only \\\n--mint-decimals 9\n```\n\nLANGUAGE: console\nCODE:\n```\nMinting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\n\nBlockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nAbsent Signers (Pubkey):\n 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\n DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer signer-1.json \\\n--multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--sign-only \\\n--mint-decimals 9\n```\n\nLANGUAGE: console\nCODE:\n```\nMinting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\n\nBlockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nSigners (Pubkey=Signature):\n BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX\nAbsent Signers (Pubkey):\n 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\n--multisig-signer signer-2.json \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--sign-only \\\n--mint-decimals 9\n```\n\nLANGUAGE: console\nCODE:\n```\nMinting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\n\nBlockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nSigners (Pubkey=Signature):\n DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU\nAbsent Signers (Pubkey):\n 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\n```\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\n--multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer hot-wallet.json \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority hot-wallet.json \\\n--signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX \\\n--signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU\n```\n\nLANGUAGE: console\nCODE:\n```\nMinting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nSignature: 2AhZXVPDBVBxTQLJohyH1wAhkkSuxRiYKomSSXtwhPL9AdF3wmhrrJGD7WgvZjBPLZUFqWrockzPp9S3fvzbgicy\n```\n\n----------------------------------------\n\nTITLE: Creating Default Token Metadata via Web3.js Next in TypeScript\nDESCRIPTION: TypeScript code using `@solana/spl-single-pool` (Web3.js Next version) to build a transaction that creates the default Metaplex token metadata for a given pool address. Requires the `poolAddress` and `feePayerAddress`. The transaction must be signed by the fee payer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await SinglePoolProgram.createTokenMetadata(poolAddress, feePayerAddress);\n\n// sign with the fee payer\n```\n\n----------------------------------------\n\nTITLE: Structuring Encrypted Transfer Amount in TransferData using Rust\nDESCRIPTION: Defines `TransferAmountEncryption` to structure the encrypted transfer amount, including a Pedersen commitment and decryption handles for source, destination, and auditor keys, leveraging ElGamal's randomness-reuse. Updates `TransferData` to include two `TransferAmountEncryption` instances: `ciphertext_lo` (low 16 bits) and `ciphertext_hi` (high 32 bits) of the 48-bit transfer amount.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/zkps.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Ciphertext structure of the transfer amount encrypted under three ElGamal\n/// public keys\nstruct TransferAmountEncryption {\n  commitment: PedersenCommitment,\n  source_handle: DecryptHandle,\n  destination_handle: DecryptionHandle,\n  auditor_handle: DecryptHandle,\n}\n\nstruct TransferData {\n  ciphertext_lo: TransferAmountEncryption,\n  ciphertext_hi: TransferAmountEncryption,\n  transfer_pubkeys: TransferPubkeys,\n}\n```\n\n----------------------------------------\n\nTITLE: Packing Seed Entries into Address Config with Seed::pack_into_address_config in Rust\nDESCRIPTION: Demonstrates how to pack a list of Seed entries into a 32-byte address_config array using Seed::pack_into_address_config. This is required for configuring derived accounts (PDAs) by serializing literal, instruction data, account key, or account data seeds. This snippet relies on the Seed enum, and the function returns a [u8; 32] suitable for use within ExtraAccountMeta. Expects input as an array of Seed objects and outputs a 32-byte array, returning a Result to indicate packing success or failure.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/transfer-hook-interface/configuring-extra-accounts.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet seed1 = Seed::Literal { bytes: vec![1; 8] };\nlet seed2 = Seed::InstructionData {\n    index: 0,\n    length: 4,\n};\nlet seed3 = Seed::AccountKey { index: 0 };\nlet address_config: [u8; 32] = Seed::pack_into_address_config(\n  &[seed1, seed2, seed3]\n)?;\n```\n\n----------------------------------------\n\nTITLE: Executing Code Coverage Script\nDESCRIPTION: Runs the `coverage.sh` script located in the project root to generate code coverage reports. Note that the accompanying comment indicates potential issues running this script on macOS due to dependencies like `grcov` and XCode mismatches. Requires the `coverage.sh` script and its dependencies.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./coverage.sh  # Help wanted! Coverage build currently fails on MacOS due to an XCode `grcov` mismatch...\n```\n\n----------------------------------------\n\nTITLE: Harvesting Withheld Tokens via Account Close using Solana CLI\nDESCRIPTION: Explains that while there isn't a direct `harvest` command in the CLI, closing an account using `spl-token close` requires harvesting any withheld tokens to the mint first. This snippet shows the `spl-token close` command for a specific account address, which implicitly triggers the harvest instruction before closing. Requires `spl-token` CLI.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token close --address 5wY8fiMZG5wGbQmtzKgqqEEp4vsCMJZ53RXEagUUWhEr\nSignature: KAKXryAdGSVFqpQhrwrvP6NCAQwLQp2Sj1WiAqCHxxwJsvRLKx4JzWgN9zYUaJNmfrZnQQw9yYoDw5Xx1YrwY6i\n\nSignature: 2i5KGekFFtwzkX2W71cxPvQsGEH21qmZ3ieNQz7Mz2qGqp2pyzMNZhSVRfxJxQuAxnKQoZKjAb62FBx2gxaq25Le\n```\n\n----------------------------------------\n\nTITLE: Creating Default Token Metadata via Web3.js Classic in TypeScript\nDESCRIPTION: TypeScript code using `@solana/spl-single-pool-classic` to build a transaction that creates the default Metaplex token metadata for a given pool address. Requires the `poolAddress` and `feePayerAddress`. The transaction must be signed by the fee payer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await SinglePoolProgram.createTokenMetadata(poolAddress, feePayerAddress);\n\n// sign with the fee payer\n```\n\n----------------------------------------\n\nTITLE: Adding ElGamal Public Keys to TransferData in Rust\nDESCRIPTION: Defines the `TransferPubkeys` struct to hold the source, destination, and auditor ElGamal public keys required for a confidential transfer. It then updates the `TransferData` struct to include an instance of `TransferPubkeys`. Auditor pubkey is zero bytes if no auditor is associated.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/zkps.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct TransferPubkeys {\n  source_pubkey: ElGamalPubkey,\n  destination_pubkey: ElGamal Pubkey,\n  auditor_pubkey: ElGamalPubkey,\n}\n\nstruct TransferData {\n  transfer_pubkeys: TransferPubkeys,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Stake Pool Fee Types and Values (Console)\nDESCRIPTION: Updates any fee associated with the stake pool (such as epoch, withdrawal, or deposit fees) by specifying the pool, fee type, numerator, and denominator for the new rate. The new fee takes effect after approximately two epochs to protect users from sudden changes. The fee cannot increase beyond 1.5x per update for withdrawals. Requires management authority over the pool.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool set-fee Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR epoch 10 100\nSignature: 5yPXfVj5cbKBfZiEVi2UR5bXzVDuc2c3ruBwSjkAqpvxPHigwGHiS1mXQVE4qwok5moMWT5RNYAMvkE9bnfQ1i93\n```\n\n----------------------------------------\n\nTITLE: Building the On-Chain Program using npm (Shell)\nDESCRIPTION: Executes the `build:program` script defined in the project's `package.json` file using npm. This command compiles the on-chain component of the Token-swap program, typically written in Rust, making it ready for deployment or testing. This step should be performed after installing dependencies.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/js/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run build:program\n```\n\n----------------------------------------\n\nTITLE: Setting SOL Withdraw Authority for Solana Stake Pool\nDESCRIPTION: Uses the `spl-stake-pool set-funding-authority` command to restrict SOL withdrawals from the specified stake pool (`Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR`). This command requires withdrawals to be signed by the specified authority's public key (`AZ1PgxWSxw4ezX8gvpNgGsr39jJHCwtkaXr1mNMwWWeK`).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool set-funding-authority Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR sol-withdraw AZ1PgxWSxw4ezX8gvpNgGsr39jJHCwtkaXr1mNMwWWeK\nSignature: 3gx7ckGNSL7gUUyxh4CU3RH3Lyt88hiCvYQ4QRKtnmrZHvAS93ebP6bf39WYGTeKDMVSJUuwBEmk9VFSaWtXsHVV\n```\n\n----------------------------------------\n\nTITLE: Depositing Stake into SPL Stake Pool - Shell (Console)\nDESCRIPTION: Demonstrates how to deposit an active stake account into an SPL stake pool using the spl-stake-pool CLI. Requires a previously created and delegated stake account, the stake pool's address, and optionally receiver token accounts or withdraw authority. Parameters include stake pool and stake account addresses, with optional flags for token receiver and withdraw authority. Output includes confirmation of deposit and resulting pool tokens.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool deposit-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ\nDepositing stake 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ into stake pool account F8e8Ympp4MkDSPZdvRxdQUZXRkMBDdyqgHa363GShAPt\nUsing existing associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nSignature: 45x2UtA1b49eBPtRHdkvA3k8JneZzfwjptNN1kKQZaPABYiJ4hSA8qwi7qLNN5b3Fr4Z6vXhJprrTCpkk3f8UqgD\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install all the necessary project dependencies defined in the `package.json` file, including the `@solana/web3.js` library. It's the initial step required to set up the development environment for the Token-swap JavaScript library.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/js/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Client Environment via Shell\nDESCRIPTION: Shell commands to create a Python 3 virtual environment named 'venv', activate it, and install the necessary dependencies listed in 'client/requirements.txt' using pip. This setup is required to run the Python client and test suite for the binary option protocol.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m virtualenv venv\nsource venv/bin/activate\npip install -r client/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Encrypted Value to Account in Transfer - Rust\nDESCRIPTION: Demonstrates incrementing an account’s encrypted balance with a homomorphic addition, reflecting receipt of a confidential transfer. This operation depends on dual encryption of amounts and their public keys, and assumes arithmetic compatibility within the encryption scheme.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7, // pubkey_receiver\n    amount: PKE::encrypt(pubkey_receiver, 50) + PKE::encrypt(pubkey_receiver, 10),\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Permanent Delegate for SPL Token Mint via CLI\nDESCRIPTION: Demonstrates using the `spl-token authorize` command to change the permanent delegate authority for a token mint created with the permanent delegate extension under the Token-2022 program. It requires the mint address, specifying `permanent-delegate` as the authority type to change, and providing the public key of the new delegate.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_39\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token authorize 7LUgoQCqhk3VMPhpAnmS1zdCFW4C6cupxgbqWrTwydGx permanent-delegate GFMniFoE5X4F87L9jzjHaW4MTkXyX1AYHNfhFencgamg\nUpdating 7LUgoQCqhk3VMPhpAnmS1zdCFW4C6cupxgbqWrTwydGx \n  Current permanent delegate: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\n  New permanent delegate: GFMniFoE5X4F87L9jzjHaW4MTkXyX1AYHNfhFencgamg\n\nSignature: 2ABDrR6meXk4rrAwd2LsHaTsnM5BuTC9RbiZmgBxgzze8ZM2yxuYp8iyg8viHgVaKRbXGzjKsFjF5RR9Kkzn4Prj\n```\n\n----------------------------------------\n\nTITLE: Updating Token Metadata via Web3.js Next in TypeScript\nDESCRIPTION: TypeScript code using `@solana/spl-single-pool` (Web3.js Next version) to create a transaction for updating a pool's token metadata. It requires the `voteAccountAddress`, the `authorizedWithdrawerAddress`, the new name, symbol, and optional URI. The transaction needs signing by both the fee payer and the authorized withdrawer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await SinglePoolProgram.updateTokenMetadata(\n  voteAccountAddress,\n  authorizedWithdrawerAddress,\n  'My Cool Pool',\n  'cPool',\n  'https://www.cool.pool/token.jpg',\n);\n\n// sign with the fee payer and authorized withdrawer\n```\n\n----------------------------------------\n\nTITLE: Updating SPL Stake Pool to Correct Token Value - Shell (Console)\nDESCRIPTION: Demonstrates how to update the stake pool to calculate the correct value of stake pool tokens after epoch rewards. Requires spl-stake-pool CLI and the address of the pool. Input is the stake pool address, output is one or more transaction signatures. Updating is permissionless and necessary before deposit/withdraw each epoch.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_37\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nSignature: 2rtPNGKFSSnXFCb6MKG5wHp34dkB5hJWNhro8EU2oGh1USafAgzu98EgoRnPLi7ojQfmTpvXk4S7DWXYGu5t85Ka\nSignature: 5V2oCNvZCNJfC6QXHmR2UHGxVMip6nfZixYkVjFQBTyTf2Z9s9GJ9BjkxSFGvUsvW6zc2cCRv9Lqucu1cgHMFcVU\n\n```\n\n----------------------------------------\n\nTITLE: Decreasing Stake Delegated to a Validator in Solana Stake Pool\nDESCRIPTION: Uses `spl-stake-pool decrease-validator-stake` to reduce the amount of stake delegated to validator `J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H` within pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR` by 6.5 SOL. This command is often used to prepare a validator stake account for removal, requiring it to hold exactly 1 SOL delegated plus the rent-exempt reserve.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool decrease-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H 6.5\nSignature: ZpQGwT85rJ8Y9afdkXhKo3TVv4xgTz741mmZj2vW7mihYseAkFsazWxza2y8eNGY4HDJm15c1cStwyiQzaM3RpH\n```\n\n----------------------------------------\n\nTITLE: Installing the SPL Token Lending CLI using Cargo\nDESCRIPTION: This command uses Rust's package manager, Cargo, to install the `spl-token-lending-cli` binary from its source or registry. Successful execution makes the `spl-token-lending` command available in the user's shell environment.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/cli/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install spl-token-lending-cli\n```\n\n----------------------------------------\n\nTITLE: Subtracting Encrypted Value from Account in Transfer - Rust\nDESCRIPTION: Illustrates how an account’s encrypted balance can be decremented by a homomorphic subtraction representing a confidential transfer. The operation relies on compatible ciphertext arithmetic and assumes prior encryption with the sender’s public key. Dependencies include the PKE trait, public key management, and arithmetic over ciphertext representations.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nAccount {\n    mint: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB,\n    owner: 5vBrLAPeMjJr9UfssGbjUaBmWtrXTg2vZuMN6L4c8HE6, // pubkey_sender\n    amount: PKE::encrypt(pubkey_sender, 50) - PKE::encrypt(pubkey_sender, 10),\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Single-Validator Pool via Web3.js Classic in TypeScript\nDESCRIPTION: TypeScript snippet using the `@solana/spl-single-pool-classic` library to create a transaction for initializing a single-validator pool. It requires the `connection` object, the validator's `voteAccountAddress` (as a PublicKey), and the `feePayerAddress`. The resulting transaction must be signed by the fee payer.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst voteAccountAddress = new PublicKey('Ammgaa2iZfA745BmZMhkcS27uh87fEVDC6Gm2RXz5hrC');\nconst transaction = await SinglePoolProgram.initialize(\n  connection,\n  voteAccountAddress,\n  feePayerAddress,\n);\n\n// sign with the fee payer\n```\n\n----------------------------------------\n\nTITLE: Updating Interest Rate for SPL Token Mint via CLI\nDESCRIPTION: Demonstrates using the `spl-token` CLI command `set-interest-rate` to update the annual interest rate (in basis points) for an existing interest-bearing token mint created under the Token-2022 program. Requires the mint address and the new rate value.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token set-interest-rate 7N4HggYEJAtCLJdnHGCtFqfxcB5rhQCsQTze3ftYstVj 50\nSetting Interest Rate for 7N4HggYEJAtCLJdnHGCtFqfxcB5rhQCsQTze3ftYstVj to 50 bps\n\nSignature: 5DQs6hzkfGq3uotESuVwF7MGeMawwfQcm1e9RHaUeVySDV6xpUzYhzdb6ygqJfsEZqewgiDR5KuxaGzkdTMcDrTn\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake from a Solana Single Pool (CLI, TypeScript)\nDESCRIPTION: Withdraws a specified amount of stake from the pool by burning the equivalent amount of pool tokens held by the user. Stake can be withdrawn to a new stake account (as shown in TS examples where `createStakeAccount: true`) or an existing active one. The CLI requires the pool address and the amount (in lamports) to withdraw. TS versions require connection/rpc, pool address, user wallet, target stake account public key, and the token amount (pool tokens) to burn.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ spl-single-pool withdraw --pool DkE6XFGbqSyYzRugLVSmmB42F9BQZ7mZU837e2Cti7kb 1000000000\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Classic\\nconst withdrawAccount = new Keypair();\\nconst transaction = await SinglePoolProgram.withdraw({\\n  connection,\\n  pool: poolAddress,\\n  userWallet,\\n  userStakeAccount: withdrawAccount.publicKey,\\n  tokenAmount: 1000000000,\\n  createStakeAccount: true,\\n});\\n\\n// sign with fee payer, and the stake account keypair if a new account is being created\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Web3.JS Next\\nconst { publicKey, privateKey } = await generateKeyPair();\\nconst transaction = await SinglePoolProgram.withdraw({\\n  rpc,\\n  pool: poolAddress,\\n  userWallet,\\n  userStakeAccount: publicKey,\\n  tokenAmount: 1000000000n,\\n  createStakeAccount: true,\\n});\\n\\n// sign with fee payer, and the stake account keypair if a new account is being created\n```\n\n----------------------------------------\n\nTITLE: Performing Token Upgrade Using Default Associated Accounts\nDESCRIPTION: Executes the token upgrade using the `spl-token-upgrade` CLI with default account resolution. It requires the original (`o1d...`) and new (`NewnQ...`) mint addresses. The tool automatically finds and uses the user's associated token account for the original mint (for burning), the user's associated token account for the new mint (as the destination), and the escrow authority's associated token account for the new mint (as the source of new tokens).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-token-upgrade exchange o1d5Jt8z8vszx4FJ2gNJ3FZH34cer9sbparg7GVt7qm NewnQeoDG4BbHRCodgjscuypfXdiixcWDPyLiseziQZ\nBurning tokens from account 4YfpfMzHYCCYVBJqvTG9VtTPLMuPzVBi77aMRxVB4TDg, receiving tokens into account JCaWYSvLZkja51RbToWBaV4kp1PhfddX64cTLUqpdMzE\nSignature: 3Zs1PtMV7XyRpfX9k7cPg7Hd43URvBD3aYEnd6hb5deKvSWXrEW5yoRaCuqtYJSsoa2WtkdprTsHEh3VLYWEGhkb\n```\n\n----------------------------------------\n\nTITLE: Finalizing TransferProof with Equality Proof and New Commitment in Rust\nDESCRIPTION: Completes the `TransferProof` structure by adding `new_source_commitment` (a Pedersen commitment to the sender's remaining balance after the transfer) and an `equality_proof` (a `CtxtCommEqualityProof` certifying that the ciphertext representing the remaining balance encrypts the same value as the `new_source_commitment`). This allows verification without requiring a Pedersen opening for the original source balance ciphertext. `TransferData` includes this final proof structure.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/zkps.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct TransferProof {\n  new_source_commitment: PedersenCommitment,\n  equality_proof: CtxtCommEqualityProof,\n  validity_proof: ValidityProof,\n  range_proof: RangeProof,\n}\n\nstruct TransferData {\n  ciphertext_lo: TransferAmountEncryption,\n  ciphertext_hi: TransferAmountEncryption,\n  transfer_pubkeys: TransferPubkeys,\n  proof: TransferProof,\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Merkle Tree Proof Swapping with Changelog - Plain Text\nDESCRIPTION: Demonstrates, using a textual diagram, the process for updating Merkle tree proofs via changelog swapping during concurrent writes. The associated steps visually depict the old and new proof arrays, and the swap depth calculation using XOR of leaf indices. This is intended for documentation and teaching rather than execution, helping readers reason about proof substitutions.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/concepts.md#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n             2   1\nChangelog: [X5',X2']\nNew Leaf: X6'' at leaf index 2\n\n                         2   1\nOld proof for new leaf: [X7,X2]\n\n1 XOR 2 = 001 XOR 010 = 011 (no leading zeroes)\ndepth to swap at = 0 + 1 = 1\n\n                          2   1\nNew proof for new leaf: [X7,X2']\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Stake Account Status\nDESCRIPTION: Uses the standard `solana stake-account` CLI command to display details about a specific stake account (`5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr`). This includes its balance, rent-exempt reserve, delegation status (active/activating stake), activation epoch, delegated vote account address, and stake/withdraw authorities. This account was likely created via `spl-stake-pool add-validator`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ solana stake-account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr\nBalance: 1.00228288 SOL\nRent Exempt Reserve: 0.00228288 SOL\nDelegated Stake: 1 SOL\nActive Stake: 0 SOL\nActivating Stake: 1 SOL\nStake activates starting from epoch: 5\nDelegated Vote Account Address: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H\nStake Authority: DS3AyFN9dF1ruNBcSeo8XXQR8UyVMhcCPcnjU5GnY18S\nWithdraw Authority: DS3AyFN9dF1ruNBcSeo8XXQR8UyVMhcCPcnjU5GnY18S\n```\n\n----------------------------------------\n\nTITLE: Adding a Third Validator to Solana Stake Pool\nDESCRIPTION: Shows adding a third validator, identified by vote account `EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ`, to the stake pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR` via the `spl-stake-pool add-validator` command, further diversifying the pool's delegations.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool add-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nAdding stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nSignature: 4VJYHpPmWkP99TdgYUTgLYixmhqmqsEkWtg4j7zvGZFjYbnLgryu48aV6ub8bqDyULzKckUhb6tvcmZmMX5AFf5G\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Durable Nonce Accounts using Solana CLI (console)\nDESCRIPTION: Demonstrates the Solana CLI workflow for generating nonce account keypairs, creating a nonce account, and querying its state. This setup is foundational for enabling durable nonces in offline transaction signing. Required: Solana CLI installed and account access. Inputs: keypair filepaths, lamport amounts; Outputs: public keys, account status, and nonce blockhash.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_61\n\nLANGUAGE: console\nCODE:\n```\n$ solana-keygen new -o nonce-keypair.json\n...\n======================================================================\npubkey: Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj\n======================================================================\n```\n\nLANGUAGE: console\nCODE:\n```\n$ solana create-nonce-account nonce-keypair.json 1\nSignature: 3DALwrAAmCDxqeb4qXZ44WjpFcwVtgmJKhV4MW5qLJVtWeZ288j6Pzz1F4BmyPpnGLfx2P8MEJXmqPchX5y2Lf3r\n```\n\nLANGUAGE: console\nCODE:\n```\n$ solana nonce-account Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj\nBalance: 0.01 SOL\nMinimum Balance Required: 0.00144768 SOL\nNonce blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nFee: 5000 lamports per signature\nAuthority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n```\n\n----------------------------------------\n\nTITLE: Listing Solana Stake Pool Status Showing Unbalanced Stake\nDESCRIPTION: Runs `spl-stake-pool list` on pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR` again, this time illustrating a scenario where stake distribution among validators is uneven. One validator (`EhRbK...`) holds significantly more stake (100 SOL) than the others (10 SOL each). This output highlights the need for rebalancing.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nStake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nPool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\nEpoch Fee: 3/100 of epoch rewards\nWithdrawal Fee: none\nStake Deposit Fee: none\nSOL Deposit Fee: none\nSOL Deposit Referral Fee: none\nStake Deposit Referral Fee: none\nReserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5   Available Balance: ◎10.006848640\nVote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ      Balance: ◎100.000000000 Last Update Epoch: 4\nVote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H      Balance: ◎10.000000000  Last Update Epoch: 4\nVote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk      Balance: ◎10.000000000  Last Update Epoch: 4\nTotal Pool Stake: ◎130.006848640\nTotal Pool Tokens: 130.00684864\nCurrent Number of Validators: 3\nMax Number of Validators: 1000\n```\n\n----------------------------------------\n\nTITLE: Adding Validator to Solana Stake Pool\nDESCRIPTION: Uses the `spl-stake-pool add-validator` command to add a new validator, identified by the vote account address `38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk`, to the stake pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR`. This operation creates a new stake account delegated to the specified validator, funded with SOL from the pool's reserve account. Requires sufficient SOL in the reserve.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool add-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk\nAdding stake account F8e8Ympp4MkDSPZdvRxdQUZXRkMBDdyqgHa363GShAPt, delegated to 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk\nSignature: 5tdpsx64mVcSHBK8vMbBzFDHnEZB6GUmVpqSXXE5hezMAzPYwZbJCBtAHakDAiuWNcrMongGrmwDaeywhVz4i8pi\n```\n\n----------------------------------------\n\nTITLE: Extracting Account Infos for Token-Swap `Swap` Processor in Rust\nDESCRIPTION: Demonstrates extracting `AccountInfo` structs from the input `accounts` iterator within the token-swap program's processor logic for the `Swap` instruction. This includes the newly added `source_token_mint_info` and `destination_token_mint_info` needed for `transfer_checked`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nlet account_info_iter = &mut accounts.iter();\nlet swap_info = next_account_info(account_info_iter)?;\nlet authority_info = next_account_info(account_info_iter)?;\nlet user_transfer_authority_info = next_account_info(account_info_iter)?;\nlet source_info = next_account_info(account_info_iter)?;\nlet swap_source_info = next_account_info(account_info_iter)?;\nlet swap_destination_info = next_account_info(account_info_iter)?;\nlet destination_info = next_account_info(account_info_iter)?;\nlet pool_mint_info = next_account_info(account_info_iter)?;\nlet pool_fee_account_info = next_account_info(account_info_iter)?;\nlet source_token_mint_info = next_account_info(account_info_iter)?;\nlet destination_token_mint_info = next_account_info(account_info_iter)?;\nlet source_token_program_info = next_account_info(account_info_iter)?;\nlet destination_token_program_info = next_account_info(account_info_iter)?;\nlet pool_token_program_info = next_account_info(account_info_iter)?;\n```\n\n----------------------------------------\n\nTITLE: Calculating Stake Pool Deposit Fee - Generic Shell (Plaintext Calculation)\nDESCRIPTION: Provides a calculation example for the total fee incurred when depositing into a stake pool, using both stake delegation and rent-exempt SOL basis. No shell execution; serves as documentation for fee logic for reference or scripting. Required parameters are stake_delegation, stake_deposit_fee, rent_exemption, and sol_deposit_fee; returns the calculated total fee for the deposit.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\ntotal_fee = stake_delegation * stake_deposit_fee + rent_exemption * sol_deposit_fee\ntotal_fee = 10 * 1% + .00228288 * 5%\ntotal_fee = 0.100114144\n\n```\n\n----------------------------------------\n\nTITLE: Forced Stake Delegation on Local Testnet - Solana CLI - Bash\nDESCRIPTION: This Bash command illustrates using the solana delegate-stake CLI tool with the --force flag, which is required when no voting activity is present (such as when using solana-test-validator locally). It forces delegating the provided stake account to a validator key. Dependencies are Solana CLI and an initialized validator plus stake account JSON files. On networks with voting activity, --force is not needed. Inputs: stake account file and validator account; output: stake delegation signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ solana delegate-stake --force stake.json CzDy6uxLTko5Jjcdm46AozMmrARY6R2aDBagdemiBuiT\n```\n\n----------------------------------------\n\nTITLE: Removing Validator from Solana Stake Pool\nDESCRIPTION: Employs the `spl-stake-pool remove-validator` command to remove the validator `J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H` (and its associated stake account `5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr`) from the stake pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR`. This operation deactivates the validator's stake account and creates a new transient account (`nHEEyey8KkgHuVRAUDzkH5Q4PkA4veSHuTxgG6C8L2G`) to receive the stake, which will be merged into the reserve during the next epoch. Requires the validator stake account to be at the minimum balance (1 SOL + rent).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool remove-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H\nRemoving stake account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr, delegated to J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H\nCreating account to receive stake nHEEyey8KkgHuVRAUDzkH5Q4PkA4veSHuTxgG6C8L2G\nSignature: 4XprnR768Ch6LUvqUVLTjMCiqdYvtjNfECh4izErqwbsASTGjUBz7NtLZHAiraTqhs7b9PoSAazetdsgXa6J4wVu\n```\n\n----------------------------------------\n\nTITLE: Illustrating Concurrent Leaf Replacement in Merkle Trees - Plain Text\nDESCRIPTION: Provides a visual diagram of concurrent updates in a Merkle tree, showing how multiple node replacements impact tree structure and state. This snippet serves to clarify the ramifications of simultaneous mutations and the necessity for precise changelog management. No dependencies or runtime context exist; it supports the narrative explanation above.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/concepts.md#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n          X1'              X1''\n        /    \\           /    \\\n      X2'      X3       X2      X3''\n     / \\     / \\       / \\     / \\\n   X4  X5'   X6  X7   X4  X5  X6'' X7\n```\n\n----------------------------------------\n\nTITLE: Building Token Swap Program Using cargo build-sbf (sh)\nDESCRIPTION: This snippet demonstrates building the Token Swap program using Solana's build system with the 'cargo build-sbf' command. It requires Rust and the Solana build environment to be set up. Upon execution from the program's root directory, it compiles the project for Solana's SBF target, producing binaries suitable for deployment. No arguments are needed, and output files are generated in the default target directory.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build-sbf\n\n```\n\n----------------------------------------\n\nTITLE: Closing Mint Account with MintCloseAuthority (JavaScript)\nDESCRIPTION: This snippet calls the closeAccount function from @solana/spl-token to close a mint account that has the MintCloseAuthority extension in Token-2022. It requires a connection, the payer's keypair, mint address, destination pubkey, close authority, and the correct program ID. Expected outcome is that if the supply is zero and the correct authority is used, the mint account is closed and funds reclaimed; otherwise, an error will occur.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nawait closeAccount(connection, payer, mint, payer.publicKey, closeAuthority, [], undefined, TOKEN_2022_PROGRAM_ID);\n```\n\n----------------------------------------\n\nTITLE: Installing @solana/spl-token with npm\nDESCRIPTION: Installs the `@solana/spl-token` JavaScript library to a project using the npm package manager. This library provides functions for interacting with the SPL Token program.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnpm install @solana/spl-token\n```\n\n----------------------------------------\n\nTITLE: Checking Stake Account Status after Withdrawal - Shell (Console)\nDESCRIPTION: Queries a stake account to display its SOL balance, rent exemption, delegated stake, and associated authority accounts post-withdrawal. Dependencies include solana CLI and a valid stake account address. Output includes all account status fields after receiving withdrawn funds.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_42\n\nLANGUAGE: console\nCODE:\n```\n$ solana stake-account 5GuAyPAt6577HoGhSVRNBv6aHohVtjQ8q7q5i3X1p4tB\nBalance: 5.00228288 SOL\nRent Exempt Reserve: 0.00228288 SOL\nDelegated Stake: 5 SOL\nActive Stake: 5 SOL\nDelegated Vote Account Address: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nStake Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nWithdraw Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\n\n```\n\n----------------------------------------\n\nTITLE: Defining Public Key Encryption Trait Interface - Rust\nDESCRIPTION: This snippet introduces a generic Rust trait 'PKE' parameterized by a message type to model a public key encryption scheme. Essential associated types (secret key, public key, ciphertext) and required methods (keygen, encrypt, decrypt) are declared. It conveys the cryptographic API assumptions necessary for modeling encrypted token balances and requires understanding of Rust generics and trait syntax.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ntrait PKE<Message> {\n  type SecretKey;\n  type PublicKey;\n  type Ciphertext;\n\n  keygen() -> (SecretKey, PublicKey);\n  encrypt(PublicKey, Message) -> Ciphertext;\n  decrypt(SecretKey, Ciphertext) -> Message;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing libssl1.1 on Debian/Ubuntu for Build Compatibility\nDESCRIPTION: Shell commands to download and install the `libssl1.1` package on Debian-based Linux distributions like Ubuntu. This is presented as a workaround for a common shared library error (`libssl.so.1.1 not found`) encountered during the build process. Requires `wget`, `dpkg`, and `sudo` privileges.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1l-1ubuntu1.2_amd64.deb\nsudo dpkg -i libssl1.1_1.1.1l-1ubuntu1.2_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Replacing a Leaf using a 3rd Party Indexer in TypeScript\nDESCRIPTION: Demonstrates replacing a leaf in an SPL Concurrent Merkle Tree by obtaining the necessary Merkle proof from an external, third-party indexer service (represented by the placeholder function `getProofFromAnIndexer`). The obtained proof is then used with `createReplaceIx` to construct and send the replacement transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/account-compression/sdk/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a new leaf\nconst newLeaf: Buffer = crypto.randomBytes(32);\n\n// Query off-chain indexer for a MerkleProof\n// possibly by executing GET request against a REST api\nconst proof = await getProofFromAnIndexer(myOldLeaf);\n\n// Replace `myOldLeaf` with `newLeaf` at the same index in the tree\nconst replaceIx = createReplaceIx(\n    cmtKeypair.publicKey,          \n    payer.publicKey,\n    newLeaf,\n    proof\n);\n\nconst tx = new Transaction().add(replaceIx);\n\nawait sendAndConfirmTransaction(connection, tx, [payer]);\n```\n\n----------------------------------------\n\nTITLE: Creating Token-2022 Mint with External Member Pointer using spl-token CLI\nDESCRIPTION: This command uses the `spl-token` CLI to create a new Token-2022 mint and adds the Member Pointer extension, pointing it to an external account specified by `--member-address`. This designates the mint as having its membership details defined externally.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_62\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token --program-id TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb create-token --member-address CXWuFdWifFQSvMMZ3UxZZVKtjYi2bZt89f5v3yV8zdVE\nCreating token 5anZzJbbj6rBkrXW7zzw7MH28xXufj7AB5oKX1Cv4fdh under program TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\n\nAddress:  5anZzJbbj6rBkrXW7zzw7MH28xXufj7AB5oKX1Cv4fdh\nDecimals:  9\n\nSignature: 3ug4Ejs16jJgEm1WyBwDDxzh9xqPzQ3a2cmy1hSYiPFcLQi9U12HYF1Dbhzb2bx75SSydfU6W4e11dGUXaPbJqVc\n```\n\n----------------------------------------\n\nTITLE: Setting Stake Pool Referral Fee (Console)\nDESCRIPTION: This command sets the referral fee percentage for stake deposits, designating the split between manager and referrer. Only the pool manager can execute this update. The fee is an integer percent value, and the outputs confirm the update with transaction signatures. Pool must exist, and the user must have manager authority.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool set-referral-fee Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR stake 80\nSignature: 4vhaBEDhuKkVwMxy7TpyfHEk3Z5kGZKerD1AgajQBdiMRQLZuNZKVR3KQaqbUYZM7UyfRXgkZNdAeP1NfvmwKdqb\n```\n\n----------------------------------------\n\nTITLE: Deserializing Token-2022 Account/Mint State with Extensions in Rust\nDESCRIPTION: Rust code demonstrating the use of `StateWithExtensions::<Account>::unpack` and `StateWithExtensions::<Mint>::unpack` to deserialize token account and mint account data, respectively. This method correctly handles accounts that may contain Token-2022 extensions, whereas standard `Account::unpack` or `Mint::unpack` would fail.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse spl_token_2022::{extension::StateWithExtensions, state::{Account, Mint}};\nlet account_state = StateWithExtensions::<Account>::unpack(&token_account_info.data.borrow())?;\nlet mint_state = StateWithExtensions::<Mint>::unpack(&mint_account_info.data.borrow())?;\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Withheld Tokens from Accounts via Solana CLI\nDESCRIPTION: Shows the `spl-token withdraw-withheld-tokens` command to move accumulated transfer fees from specified source token accounts (identified by their public keys) to a designated destination account. This operation requires the authority configured during mint initialization. Requires the `spl-token` CLI.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token withdraw-withheld-tokens 7UKuG4W68hW9eGrDms6BenRf8DCEHKGN49xewtWyB5cx 5wY8fiMZG5wGbQmtzKgqqEEp4vsCMJZ53RXEagUUWhEr\nSignature: 2NfjbEnRQC7kXkf86stb6u7eUtaQTGDebo8ktCdz4gP4wCD93xtx75rSJxJDQVePNAa8NqtVLjUm19ZBDRVaYurt\n```\n\n----------------------------------------\n\nTITLE: Updating Token Metadata via CLI\nDESCRIPTION: Shows the `spl-single-pool` CLI command for updating the Metaplex token metadata associated with a single-validator pool. This action is permissioned and must be executed by the vote account's authorized withdrawer. It requires the pool address, the new token name, symbol, and optionally, a URI.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ spl-single-pool manage update-token-metadata DkE6XFGbqSyYzRugLVSmmB42F9BQZ7mZU837e2Cti7kb \"My Cool Pool\" cPool \"https://www.cool.pool/token.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Encrypted Transfer Values with Multiple Recipients - Solana Confidential Transfer - Rust\nDESCRIPTION: This Rust code snippet demonstrates the encryption of transfer amounts for sender, receiver, and auditor using the PKE::encrypt function before constructing a Transfer object. It ensures that the transfer values are confidential to each party by encrypting under their respective public keys. The snippet depends on the PKE encryption and expects public keys and amount as input. Outputs are ciphertexts used in constructing confidential transfer objects, forming the basis for privacy-preserving transactions.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nlet ct_transfer_sender = PKE::encrypt(pke_pubkey_sender, 10);\nlet ct_transfer_receiver = PKE::encrypt(pke_pubkey_receiver, 10);\nlet ct_transfer_auditor = PKE::encrypt(pke_pubkey_auditor, 10);\n\nTransfer {\n  amount_sender: ct_transfer_sender,\n  amount_receiver: ct_transfer_receiver,\n  amount_auditor: ct_transfer_auditor,\n  range_proof: RangeProof,\n  equality_proof: EqualityProof,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting SOL Withdraw Authority for Solana Stake Pool\nDESCRIPTION: Uses the `spl-stake-pool set-funding-authority` command with the `--unset` flag to remove the previously set authority requirement for SOL withdrawals from the stake pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR`. After this command, anyone can withdraw SOL if available in the reserve.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool set-funding-authority Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR sol-withdraw --unset\nSignature: 5kWeBqoxyvANMHCP4ydsZRf8QU4hMotLnKkFbTEdvqEVywo4F3MpZtay7D57FbjJZpdp72fc3vrbxJi9qDLfLCnD\n```\n\n----------------------------------------\n\nTITLE: Creating a Lending Market with spl-token-lending CLI (Usage)\nDESCRIPTION: Demonstrates the command syntax for creating a new SPL Token Lending market. It requires specifying the lending program ID (`--program`), a signer for transaction fees (`--fee-payer`), and the public key of the entity that will own the market (`--market-owner`). The market owner must sign subsequent transactions to add reserves.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/cli/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nspl-token-lending \\\n  --program      PUBKEY \\\n  --fee-payer    SIGNER \\\n  create-market \\\n  --market-owner PUBKEY\n```\n\n----------------------------------------\n\nTITLE: Updating Default Account State - SPL CLI - console\nDESCRIPTION: This CLI snippet shows how to update a previously created mint's default account state from 'Frozen' to 'Initialized' (unfrozen by default) using spl-token. The update-default-account-state command changes the default state for subsequent accounts, requiring the freeze authority. Requires the spl-token CLI, the mint address, and appropriate freeze authority permissions. Output is a confirmation of the transaction signature; only impacts newly created accounts after this command.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/extensions.mdx#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token update-default-account-state 8Sqz2zV8TFTnkLtnCdqRkjJsre3GKRwHcZd3juE5jJHf initialized\n\nSignature: 3Mm2JCPrf6SrAe9awV3QzYvHiYmatiGWTmrQ7YnmzJSqyNCf75rLNMyH7jU26uZwX7q3MmBEBj1A36o5sGk9Vakb\n```\n\n----------------------------------------\n\nTITLE: Integrating Validity and Range Proofs into TransferData in Rust\nDESCRIPTION: Introduces the `TransferProof` struct containing a `ValidityProof` (to ensure ciphertexts are correctly formed) and a `RangeProof` (to certify encrypted amounts `amount_lo` and `amount_hi` are positive 16/32-bit values). Updates `TransferData` to include an instance of `TransferProof`, adding necessary zero-knowledge proofs for security.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/zkps.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct TransferProof {\n  validity_proof: ValidityProof,\n  range_proof: RangeProof,\n}\n\nstruct TransferData {\n  ciphertext_lo: TransferAmountEncryption,\n  ciphertext_hi: TransferAmountEncryption,\n  transfer_pubkeys: TransferPubkeys,\n  proof: TransferProof,\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Token-2022 Program Bytecode using Solana CLI\nDESCRIPTION: Console command using `solana program dump` to download the on-chain bytecode for the Token-2022 program (identified by its public key `TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb`) into a local file named `spl_token_2022.so`. This is needed for local testing setups like `program-test`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ solana program dump TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb spl_token_2022.so\n```\n\n----------------------------------------\n\nTITLE: Running the Test Client with Validator using npm (Shell)\nDESCRIPTION: Runs the `start-with-test-validator` script defined in the project's `package.json` via npm. This command usually launches a local Solana test validator instance and then executes the JavaScript test client against it to verify the functionality of the Token-swap program and library. This step typically follows dependency installation and program building.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/js/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run start-with-test-validator\n```\n\n----------------------------------------\n\nTITLE: Creating a Lending Market with spl-token-lending CLI (Example)\nDESCRIPTION: Shows a practical example of the `create-market` command. It uses a specific program ID (`6Tv...`), specifies `owner.json` as the keypair file for the fee payer, and designates a specific public key (`JAg...`) as the market owner. The commented output shows the newly created lending market's public key and the transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-lending/cli/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nspl-token-lending \\\n  --program      6TvznH3B2e3p2mbhufNBpgSrLx6UkgvxtVQvopEZ2kuH \\\n  --fee-payer    owner.json \\\n  create-market \\\n  --market-owner JAgN4SZLNeCo9KTnr8EWt4FzEV1UDgHkcZwkVtWtfp6P\n\n# Creating lending market 7uX9ywsk1X2j6wLoywMDVQLNWAqhDpVqZzL4qm4CuMMT\n# Signature: 51mi4Ve42h4PQ1RXjfz141T6KCdqnB3UDyhEejviVHrX4SnQCMx86TZa9CWUT3efFYkkmfmseG5ZQr2TZTHJ8S95\n```\n\n----------------------------------------\n\nTITLE: Transfer Instruction with Sender and Receiver Encrypted Amounts - Rust\nDESCRIPTION: Models a transfer structure where the amount is separately encrypted for sender and receiver public keys. This ensures that, under homomorphic encryption, both parties’ respective accounts can be updated securely. Requires understanding of public key encryption and the rationale for dual encryptions in confidential token flows.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nTransfer {\n  amount_sender: PKE::encrypt(pubkey_sender, 10),\n  amount_receiver: PKE::encrypt(pubkey_receiver, 10),\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Solana CLI Configuration\nDESCRIPTION: Demonstrates how to view the current Solana command-line tool configuration using `solana config get`. This displays settings like the configuration file path, RPC URL, WebSocket URL, default keypair path, and commitment level.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ solana config get\nConfig File: ${HOME}/.config/solana/cli/config.yml\nRPC URL: https://api.mainnet-beta.solana.com\nWebSocket URL: wss://api.mainnet-beta.solana.com/ (computed)\nKeypair Path: ${HOME}/.config/solana/id.json\nCommitment: confirmed\n```\n\n----------------------------------------\n\nTITLE: Transferring SOL with Solana CLI\nDESCRIPTION: This console command transfers a specified amount of SOL to a recipient address using the `solana` CLI. The `--allow-unfunded-recipient` flag permits transferring to an address that might not yet exist on-chain.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/wallet.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ solana -ul transfer <TEST_WALLET_ADDRESS> 10 --allow-unfunded-recipient\nSignature: 5A4MbdMTgGiV7hzLesKbzmrPSCvYPG15e1bg3d7dViqMaPbZrdJweKSuY1BQAfq245RMMYeGudxyKQYkgKoGT1Ui\n```\n\n----------------------------------------\n\nTITLE: Configuring a Token Account for Confidential Transfers\nDESCRIPTION: Configures an existing token account to enable confidential transfers using the `spl-token` CLI. This command must be run by the account owner, as it involves setting the encryption key. Replace `<ACCOUNT_PUBKEY>` with the public key of the token account to be configured.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/quickstart.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ spl-token configure-confidential-transfer-account --address <ACCOUNT_PUBKEY>\n```\n\n----------------------------------------\n\nTITLE: Defining Idealized Confidential Transfer Instruction Data in Rust\nDESCRIPTION: Defines a simplified Rust struct `ConfidentialTransferInstructionData` for a confidential transfer. It contains the transfer amount encrypted separately under the sender's and receiver's ElGamal public keys. This structure is presented before the introduction of zero-knowledge proof components.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/encryption.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Actual cryptographic components are organized in `VerifyTransfer`\n// instruction data\nstruct ConfidentialTransferInstructionData {\n  /// The transfer amount encrypted under the sender ElGamal public key\n  encrypted_amount_sender: ElGamalCiphertext,\n  /// The transfer amount encrypted under the receiver ElGamal public key\n  encrypted_amount_receiver: ElGamalCiphertext,\n}\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Stake in a Solana Pool via Shell Script (Bash)\nDESCRIPTION: This command executes the `rebalance.sh` script to increase the stake allocated to each validator listed in `local_validators.txt` by 1 SOL (or the specified amount) for the stake pool defined by `keys/stake-pool.json`. This is presented as a simple example and lacks sophisticated validation or logic.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/quickstart.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./rebalance.sh keys/stake-pool.json local_validators.txt 1\n```\n\n----------------------------------------\n\nTITLE: Debugging Fuzz Failures Using cargo hfuzz run-debug (sh)\nDESCRIPTION: This snippet attaches a debugger to failing fuzz test runs using 'cargo hfuzz run-debug'. It provides a path to the generated '.fuzz' crash file, enabling the developer to inspect the exact failing case. This command requires that at least one fuzz failure file exists and that 'honggfuzz' is installed. Output includes an interactive debug session and detailed trace of the error cause.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo hfuzz run-debug token-swap-instructions hfuzz_workspace/token-swap-instructions/*fuzz\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Base State Fields after Deserializing with StateWithExtensions in Rust\nDESCRIPTION: Shows how to access the underlying state fields (e.g., `amount`) after deserializing account data using `StateWithExtensions`. Access to the original `Account` struct's fields requires using the `.base` property, like `account_state.base.amount`.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet token_amount = account_state.base.amount;\n```\n\n----------------------------------------\n\nTITLE: Revised Confidential Transfer Instruction Data Structure With Bit-Width Partitioning - Rust\nDESCRIPTION: This struct models the revised split for encrypted transfer amounts: a 48-bit amount divided into a 16-bit and a 32-bit encrypted ElGamal ciphertext for the receiver, with the sender's encrypted value included. The partitioning improves decryption efficiency and is tightly coupled with the above-mentioned counters in account state. Dependencies are unchanged, and practical limits on the allowed transfer value are embedded in this design.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/encryption.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// Actual cryptographic components are organized in `VerifyTransfer`\n// instruction data\nstruct ConfidentialTransferInstructionData {\n  /// The transfer amount encrypted under the sender ElGamal public key\n  encrypted_amount_sender: ElGamalCiphertext,\n  /// The low *16-bits* of the transfer amount encrypted under the receiver\n  /// ElGamal public key\n  encrypted_amount_lo_receiver: ElGamalCiphertext,\n  /// The high *32-bits* of the transfer amount encrypted under the receiver\n  /// ElGamal public key\n  encrypted_amount_hi_receiver: ElGamalCiphertext,\n}\n```\n\n----------------------------------------\n\nTITLE: Appending a Leaf to a Concurrent Merkle Tree in TypeScript\nDESCRIPTION: Shows how to add a new leaf to an existing SPL Concurrent Merkle Tree using the @solana/spl-account-compression library. It creates a new leaf buffer, constructs an append instruction using `createAppendIx`, and sends it in a transaction.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/account-compression/sdk/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new leaf\nconst newLeaf: Buffer = crypto.randomBytes(32);\n\n// Add the new leaf to the existing tree\nconst appendIx = createAppendIx(cmtKeypair.publicKey, payer.publicKey, newLeaf);\n\nconst tx = new Transaction().add(appendIx);\n\nawait sendAndConfirmTransaction(connection, tx, [payer]);\n```\n\n----------------------------------------\n\nTITLE: Installing Solana SPL Account Compression Packages (Yarn) - Shell\nDESCRIPTION: Provides an alternative installation command using yarn instead of npm for setting up the Solana SPL account-compression and web3.js packages. This is functionally identical to the npm example and is required before running TypeScript code samples.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/usage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @solana/spl-account-compression @solana/web3.js@1\n```\n\n----------------------------------------\n\nTITLE: Checking Stake Pool Token Balance Using SPL Token CLI - Shell\nDESCRIPTION: Demonstrates querying the balance of pool tokens using the 'spl-token balance' command. Requires the pool token mint address as a parameter. The command outputs the pool token balance for the current wallet, which reflects recent deposits or withdrawals.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-token balance BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\n100.00000000\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-token balance BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\n98.00000000\n```\n\n----------------------------------------\n\nTITLE: Forcing Stake Pool Update Within Same Epoch - Shell (sh)\nDESCRIPTION: Forces an update of the stake pool even if one has already occurred in the current epoch, typically to handle merge cases after transient stakes are ready. Requires spl-stake-pool CLI and '-force' flag. Input is the stake pool address, output is the confirmation signatures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --force\nSignature: 5RneEBwJkFytBJaJdkvCTHFrG3QzE3SGf9vdBm9gteCcHV4HwaHzj3mjX1hZg4yCREQSgmo3H9bPF6auMmMFTSTo\nSignature: 1215wJUY7vj82TQoGCacQ2VJZ157HnCTvfsUXkYph3nZzJNmeDaGmy1nCD7hkhFfxnQYYxVtec5TkDFGGB4e7EvG\n\n```\n\n----------------------------------------\n\nTITLE: Installing @solana/spl-account-compression via yarn\nDESCRIPTION: Installs the SPL Account Compression library and its required peer dependency @solana/web3.js using the Yarn package manager. This command adds both packages to the project's dependencies.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/account-compression/sdk/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @solana/spl-account-compression @solana/web3.js@1\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Stake with Specific Vote Account - Shell (Console)\nDESCRIPTION: Withdraws a set amount of pool tokens, instructing the CLI to withdraw stake delegated to a specific validator by providing the --vote-account flag. Requires pool address, vote account, and optionally stake receiver accounts. Outputs the withdrawal operation details and relevant transaction signature.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_45\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR  --amount 5 --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nWithdrawing \\u25ce5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nCreating account to receive stake CZF2z3JJoDmJRcVjtsrz1BKUUGNL3VPW5FPFqge1bzmQ\nSignature: 2xBPVPJ749AE4hHNCNYdjuHv1EdMvxm9uvvraWfTA7Urrvecwh9w64URCyLLroLQ2RKDGE2QELM2ZHd8qRkjavJM\n\n```\n\n----------------------------------------\n\nTITLE: Setting Solana CLI Keypair to a Hardware Wallet (Console)\nDESCRIPTION: This command sets the active keypair for the Solana CLI to a hardware wallet, such as a Ledger device. It uses a URL scheme (`usb://ledger/`) for device discovery. This enables secure signing of transactions without exposing the private key in the filesystem.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --keypair usb://ledger/\n```\n\n----------------------------------------\n\nTITLE: Defining Mint Data Structure - Rust\nDESCRIPTION: This snippet defines the 'Mint' struct representing global token information on Solana. Its primary fields include the optional authority and the supply of tokens, with additional details omitted for brevity. It serves as the foundational datatype for token classes and requires familiarity with Rust, the Pubkey type, and Solana's SPL Token structures.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/overview.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Mint data.\nstruct Mint {\n    mint_authority: Option<Pubkey>,\n    supply: u64,\n    ... // other fields omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Idealized Confidential Transfer Account Structure in Rust\nDESCRIPTION: Defines a hypothetical Rust struct `ConfidentialTransferAccount` representing a confidential account before considering decryption performance. It includes an approval flag, an ElGamal public key, and ElGamal ciphertexts for pending and available balances. This serves as a conceptual starting point.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/encryption.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct ConfidentialTransferAccount {\n  /// `true` if this account has been approved for use. All confidential\n  /// transfer operations for\n  /// the account will fail until approval is granted.\n  approved: PodBool,\n\n  /// The public key associated with ElGamal encryption\n  encryption_pubkey: ElGamalPubkey,\n\n  /// The pending balance (encrypted by `encryption_pubkey`)\n  pending_balance: ElGamalCiphertext,\n\n  /// The available balance (encrypted by `encryption_pubkey`)\n  available_balance: ElGamalCiphertext,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Solana Test Validator and npm (sh)\nDESCRIPTION: This snippet executes all integration and JavaScript-based tests for the Token Swap program by running 'npm run start-with-test-validator'. It relies on having all Node.js dependencies installed and the Solana Tool Suite available. Invoking this command spins up a test blockchain environment, runs the bindings and integration scripts, and prints results to the console.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start-with-test-validator\n\n```\n\n----------------------------------------\n\nTITLE: Creating Default Token Metadata via CLI\nDESCRIPTION: Command using the `spl-single-pool` CLI tool to create the default Metaplex token metadata for an existing single-validator pool. This is typically used if metadata creation was skipped during initialization. Requires the `--pool` flag specifying the pool address.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ spl-single-pool manage create-token-metadata --pool DkE6XFGbqSyYzRugLVSmmB42F9BQZ7mZU837e2Cti7kb\n```\n\n----------------------------------------\n\nTITLE: Decreasing Stake from Over-Allocated Validator for Rebalancing (sh)\nDESCRIPTION: Uses `spl-stake-pool decrease-validator-stake` within a shell environment (`sh`) to decrease the stake on the over-allocated validator `EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ` in pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR` by 60 SOL. This is the first step in rebalancing the pool; the decreased stake is moved to a transient account, deactivated, and eventually merged into the reserve for redistribution.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-stake-pool decrease-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ 60\nSignature: ZpQGwT85rJ8Y9afdkXhKo3TVv4xgTz741mmZj2vW7mihYseAkFsazWxza2y8eNGY4HDJm15c1cStwyiQzaM3RpH\n```\n\n----------------------------------------\n\nTITLE: Listing Solana Stake Pool Status After Adding Validators\nDESCRIPTION: Executes `spl-stake-pool list` for the pool `Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR` to show its overall state after adding validators. The output includes the pool token mint, fees, reserve account balance, details of delegated vote accounts (address, balance, last update epoch), total pool stake, total pool tokens, and validator counts.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nStake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR\nPool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB\nEpoch Fee: 3/100 of epoch rewards\nWithdrawal Fee: none\nStake Deposit Fee: none\nSOL Deposit Fee: none\nSOL Deposit Referral Fee: none\nStake Deposit Referral Fee: none\nReserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5   Available Balance: ◎6.99315136\nVote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ      Balance: ◎1.002282880 Last Update Epoch: 4\nVote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H      Balance: ◎1.002282880 Last Update Epoch: 4\nVote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk      Balance: ◎1.002282880 Last Update Epoch: 4\nTotal Pool Stake: ◎10.000000000\nTotal Pool Tokens: 10.00000000\nCurrent Number of Validators: 3\nMax Number of Validators: 1000\n```\n\n----------------------------------------\n\nTITLE: Running Fuzz Tests with honggfuzz for Token Swap (sh)\nDESCRIPTION: This snippet runs the fuzz testing suite for the Token Swap program using 'cargo hfuzz run token-swap-instructions'. It is intended to be executed from the './program/fuzz' directory. The command uses 'honggfuzz' to repeatedly test the program with random inputs in order to detect defects or security issues. Required prerequisites include 'honggfuzz' installed and test cases defined in the fuzz directory.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo hfuzz run token-swap-instructions\n\n```\n\n----------------------------------------\n\nTITLE: Requesting SOL Airdrop via CLI\nDESCRIPTION: Uses the Solana CLI to request an airdrop of 1 SOL to the default keypair's address. This is useful for obtaining funds for transaction fees and rent on test networks (like Devnet) that have a faucet.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ solana airdrop 1\n```\n\n----------------------------------------\n\nTITLE: Assigning Staker Authority to a New Account (Console)\nDESCRIPTION: Allows the stake pool manager (or existing staker) to transfer staker authority to a different account, thus granting it permission to add/remove validators and rebalance stake. The command takes the pool account and new staker's address as arguments, producing transaction signatures. Only stake authority is transferred; withdraw authority remains protected.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool set-staker Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn\nSignature: 39N5gkaqXuWm6JPEUWfenKXeG4nSa71p7iHb9zurvdZcsWmbjdmSXwLVYfhAVHWucTY77sJ8SkUNpVpVAhe4eZ53\n```\n\n----------------------------------------\n\nTITLE: Setting and Unsetting Preferred Deposit/Withdraw Validators - SPL CLI - Shell\nDESCRIPTION: Illustrates how to configure a stake pool's preferred deposit or withdraw validator with the SPL CLI. The 'set-preferred-validator' command sets or unsets the preferred vote account for deposits or withdrawals. Signatures confirm successful updates; prerequisites include stake pool initialization and appropriate authority access.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool set-preferred-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR deposit --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nSignature: j6fbTqGJ8ehgKnSPns1adaSeFwg5M3wP1a32qYwZsQjymYoSejFUXLNGwvHSouJcFm4C78HUoC8xd7cvb5iActL\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool set-preferred-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR withdraw --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ\nSignature: 4MKdYLyFqU6H3311YZDeLtsoeGZMzswBHyBCRjHfkzuN1rB4LXJbPfkgUGLKkdbsxJvPRub7SqB1zNPTqDdwti2w\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-stake-pool set-preferred-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR withdraw --unset\nSignature: 5Qh9FA3EXtJ7nKw7UyxmMWXnTMLRKQqcpvfEsEyBtxSPqzPAXp2vFXnPg1Pw8f37JFdvyzYay65CtA8Z1ewzVkvF\n```\n\n----------------------------------------\n\nTITLE: Calculating Swap Output for Constant Product Curve\nDESCRIPTION: Shows the formula used to calculate the output amount of token B (B_out) when a specific amount of token A (A_in) is swapped in, based on the constant product invariant. It demonstrates how the pool balances adjust while maintaining the invariant.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-swap.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(A_total + A_in) * (B_total - B_out) = invariant\n```\n\n----------------------------------------\n\nTITLE: Setting Solana Cluster RPC URL (Console)\nDESCRIPTION: This command updates the active RPC URL to connect the Solana CLI (and tools sharing its config, like `spl-stake-pool`) to a different network, such as devnet. Adjusting the URL targets commands to the intended test or production cluster. The --url argument must be a valid Solana RPC endpoint.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ solana config set --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Identifying Test SPL Governance Shared Instance Address on Mainnet\nDESCRIPTION: Provides the public key address for the test shared instance of the SPL Governance program deployed on the Solana mainnet. This instance is intended for setting up and experimenting with test DAOs without affecting the default instance or requiring a custom deployment.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/governance/README.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGTesTBiEWE32WHXXE2S4XbZvA5CrEc4xs6ZgRe895dP\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Solana CLI Configuration (Console)\nDESCRIPTION: This snippet shows the command and sample output for checking the current `solana` CLI configuration, which is also shared by the `spl-stake-pool` tool. The configuration includes file paths, RPC URLs, WebSocket addresses, and the currently used keypair. No dependencies beyond the installed `solana` CLI are required.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ solana config get\nConfig File: ${HOME}/.config/solana/cli/config.yml\nRPC URL: https://api.mainnet-beta.solana.com\nWebSocket URL: wss://api.mainnet-beta.solana.com/ (computed)\nKeypair Path: ${HOME}/.config/solana/id.json\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Pool Tokens from Reserve Stake using spl-stake-pool (Console)\nDESCRIPTION: This command withdraws 5 pool tokens from the specified stake pool (`Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR`) by utilizing the reserve stake. This is a special case applicable when all validator stake accounts are at the minimum required balance (`1 SOL + rent exemption`), potentially due to a delinquent staker. The `--use-reserve` flag directs the withdrawal from the reserve.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_46\n\nLANGUAGE: console\nCODE:\n```\n$ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 5 --use-reserve\nWithdrawing ◎5.000000000, or 5 pool tokens, from stake account J5XB7mWpeaUZxZ6ogXT57qSCobczx27vLZYSgfSbZoBB\nCreating account to receive stake 51XdXiBSsVzeuY79xJwWAGZgeKzzgFKWajkwvWyrRiNE\nSignature: yQH9n7Go6iCMEYXqWef38ZYBPwXDmbwKAJFJ4EHD6TusBpusKsfNuT3TV9TL8FmxR2N9ExZTZwbD9Njc3rMvUcf\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Solana CLI Configuration\nDESCRIPTION: Retrieves and displays the current configuration settings for the Solana command-line tool, including the configuration file path, RPC URL, WebSocket URL, and default keypair path.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ solana config get\nConfig File: ${HOME}/.config/solana/cli/config.yml\nRPC URL: https://api.mainnet-beta.solana.com\nWebSocket URL: wss://api.mainnet-beta.solana.com/ (computed)\nKeypair Path: ${HOME}/.config/solana/id.json\n```\n\n----------------------------------------\n\nTITLE: Checking Recipient SOL Balance with Solana CLI - Shell\nDESCRIPTION: Demonstrates verification of the recipient SOL balance after a withdrawal using the 'solana balance' command. Takes the recipient wallet address as an argument. The output shows the updated balance in SOL, confirming the withdrawal was successful; requires Solana CLI to be installed and configured.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n$ solana balance 7VXPpSxneL6JLj18Naw2gkukXtjBZfbmPh18cnoUCMD8\n2 SOL\n```\n\n----------------------------------------\n\nTITLE: Installing Single Pool CLI via Cargo\nDESCRIPTION: Command to install the `spl-single-pool-cli` command-line interface tool using Rust's package manager, `cargo`. This requires having Rust and cargo installed on the system. This tool allows interaction with the single-validator stake pool program from the command line.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo install spl-single-pool-cli\n```\n\n----------------------------------------\n\nTITLE: Transferring Existing Tokens into the Escrow Account\nDESCRIPTION: Uses the `spl-token` command-line tool to transfer a specified quantity (1000) of existing tokens of the *new* mint (`NewnQ...`) into the designated escrow account (`2mW9...`). This assumes the user executing the command owns sufficient tokens of the new mint in their source account (implicitly the default/associated account). This is an alternative way to fund the escrow.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ spl-token transfer NewnQeoDG4BbHRCodgjscuypfXdiixcWDPyLiseziQZ 1000 2mW9oGUbaJiCHtkhN5TNTaucY2ziJmAdcJtp5Ud6m4Jy\n```\n\n----------------------------------------\n\nTITLE: Calculating Invariant for Constant Product Curve\nDESCRIPTION: Defines the core invariant formula for the Constant Product AMM curve. This formula states that the product of the total quantities of token A (A_total) and token B (B_total) in the pool must remain constant during swaps (excluding fees).\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-swap.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA_total * B_total = invariant\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Name Service Bindings with npm\nDESCRIPTION: This command installs the `@solana/spl-name-service` package using the Node Package Manager (npm). This package provides JavaScript bindings to interact with the Solana Name Service program. Executing this command adds the package as a dependency to your project's `package.json` and downloads it into the `node_modules` folder. Requires npm and Node.js to be installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/name-service/js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solana/spl-name-service\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Logic Case: Buyer Reduces, Seller Swaps (Notation)\nDESCRIPTION: A logical condition expressed in pseudocode/notation for the 'Trade' instruction. This condition ('n_b >= n && n_s < n') describes the scenario where the buyer has enough existing short contracts ('n_b') to cover the trade size 'n', but the seller does not have enough long contracts ('n_s'). The buyer reduces inventory, while the seller closes their long position and opens a new short position.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/README.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nn_b >= n && n_s <  n\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Name Service Bindings with Yarn\nDESCRIPTION: This command installs the `@solana/spl-name-service` package using the Yarn package manager. Similar to the npm command, this adds the package as a dependency and downloads it. It requires Yarn and Node.js to be installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/name-service/js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @solana/spl-name-service\n```\n\n----------------------------------------\n\nTITLE: Initiating Feature Proposal and Token Distribution - Shell\nDESCRIPTION: This snippet demonstrates how to initiate a feature proposal using spl-feature-proposal propose, distribute voting tokens to validators, and includes associated status outputs. It expects the proposer to provide the feature proposal keypair and follow up with solana-tokens commands to handle SPL token distribution and account balance checks. Dependencies include spl-feature-proposal, solana-tokens, and spl-token CLIs. Key parameters are validator and token account addresses, inputs are keypair files and CSV address lists, and outputs are console summaries and result files. This workflow is required for community proposals and may incur network fees.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/feature-proposal.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ spl-feature-proposal propose feature-proposal.json\nFeature Id: HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA\nToken Mint Address: ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d\nDistributor Token Address: GK55hNft4TGc3Hg4KzbjEmju8VfaNuXK8jQNDTZKcsNF\nAcceptance Token Address: AdqKm3mSJf8AtTWjfpA5ZbJszWQPcwyLA2XkRyLbf3Di\nNumber of validators: 376\nTokens to be minted: 134575791.53064314\nTokens required for acceptance: 90165780.3255309 (67%)\nToken distribution file: feature-proposal.csv\nJSON RPC URL: http://api.mainnet-beta.solana.com\n\nDistribute the proposal tokens to all validators by running:\n    $ solana-tokens distribute-spl-tokens --from GK55hNft4TGc3Hg4KzbjEmju8VfaNuXK8jQNDTZKcsNF --input-csv feature-proposal.csv --db-path db.8CyUVvio --fee-payer ~/.config/solana/id.json --owner <FEATURE_PROPOSAL_KEYPAIR>\n    $ solana-tokens spl-token-balances --mint ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d --input-csv feature-proposal.csv\n\nOnce the distribution is complete, request validators vote for the proposal. To vote, validators should first look up their token account address:\n    $ spl-token --owner ~/validator-keypair.json accounts ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d\nand then submit their vote by running:\n    $ spl-token --owner ~/validator-keypair.json transfer <TOKEN_ACCOUNT_ADDRESS> ALL AdqKm3mSJf8AtTWjfpA5ZbJszWQPcwyLA2XkRyLbf3Di\n\nPeriodically the votes must be tallied by running:\n  $ spl-feature-proposal tally 8CyUVvio2oYAP28ZkMBPHq88ikhRgWet6i4NYsCW5Cxa\nTallying is permissionless and may be run by anybody.\nOnce this feature proposal is accepted, the HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA feature will be activated at the next epoch.\n\nAdd --confirm flag to initiate the feature proposal\n```\n\n----------------------------------------\n\nTITLE: Defining Initial TransferData Struct in Rust\nDESCRIPTION: Defines the initial, placeholder `TransferData` struct in Rust. This structure will hold the necessary cryptographic components for a confidential transfer instruction within the Solana confidential extension, and its fields will be detailed in subsequent steps.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/confidential-token/deep-dive/zkps.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct TransferData {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SPL Stake Pool CLI using Cargo (Console)\nDESCRIPTION: This snippet provides a command to install the `spl-stake-pool-cli` utility via Rust's Cargo package manager. Prerequisite: Rust and Cargo must be installed. Running this command downloads and installs the CLI globally, enabling subsequent stake pool management commands. The command produces a shell prompt and can prompt for updates based on current toolchain.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/stake-pool/cli.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo install spl-stake-pool-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Next Bindings via pnpm\nDESCRIPTION: Command to install the Solana Single Pool JavaScript bindings compatible with Web3.js Next (`@solana/spl-single-pool`) using the `pnpm` package manager.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ pnpm install @solana/spl-single-pool\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Classic Bindings via Yarn\nDESCRIPTION: Command to install the Solana Single Pool JavaScript bindings for Web3.js Classic (`@solana/spl-single-pool-classic`) using the `yarn` package manager.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/single-pool.mdx#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ yarn add @solana/spl-single-pool-classic\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies for Token Swap Bindings (sh)\nDESCRIPTION: This snippet installs all required Node.js dependencies in the JavaScript bindings directory of the Token Swap program using 'npm i'. The command should be run from the './js' folder. It sets up the environment for integration and on-chain tests, ensuring all necessary tooling and packages are in place. Prerequisites include Node.js and npm installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\n\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Token Swap Program Using cargo test (sh)\nDESCRIPTION: This snippet runs all unit tests for the Token Swap program using the 'cargo test' command. It assumes that dependencies are already installed and should be executed from the './program/' directory. The command compiles and then runs all test suites defined in the codebase, reporting results to the terminal. No input arguments are necessary. Output includes test summaries and potential error traces.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/token-swap/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo test\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Standard Tokio Test Function in Rust\nDESCRIPTION: Example of a basic asynchronous test function using the `tokio` runtime attribute macro (`#[tokio::test]`), before modifications to support multiple token programs.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-2022/onchain.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::test]\nasync fn test_swap() {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Example Solana Programs with Make - Bash\nDESCRIPTION: This snippet demonstrates how to use the 'make' utility from the terminal to build all Solana C program examples and execute their tests. The command requires that 'make', 'gcc', and the appropriate Solana CLI tools (version 1.4.6 or later) are installed on the system as per the preceding setup instructions. Running this command compiles the sample programs and runs associated tests. Input: invoked via command line. Output: build artifacts and any test output. Limitations include reliance on current test frameworks, which may not support all functionality.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/examples/c/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Logic Case: Buyer Swaps, Seller Reduces (Notation)\nDESCRIPTION: A logical condition expressed in pseudocode/notation for the 'Trade' instruction. This condition ('n_b < n && n_s >= n') represents the scenario where the buyer's existing short position ('n_b') is less than the trade size 'n', but the seller has sufficient existing long contracts ('n_s'). The buyer swaps position (short to long), while the seller reduces their long inventory.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/README.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nn_b <  n && n_s >= n\n```\n\n----------------------------------------\n\nTITLE: Example Solana Memo Program Invocation Log\nDESCRIPTION: This log line indicates the entry point into the Memo program execution within a Solana transaction. `MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr` is the program ID, and `invoke [1]` signifies the start of the program call.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/memo.md#_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nProgram MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr invoke [1]\n```\n\n----------------------------------------\n\nTITLE: Installing the Solana Token Upgrade CLI Tool\nDESCRIPTION: Installs the `spl-token-upgrade-cli` command-line utility using Rust's package manager, Cargo. This command downloads and builds the tool, making it available in the user's environment. Requires Rust and Cargo to be previously installed.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/token-upgrade.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install spl-token-upgrade-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Logic Case: Both Swap Positions (Notation)\nDESCRIPTION: A logical condition expressed in pseudocode/notation for the 'Trade' instruction. This condition ('n_b < n && n_s < n') represents the scenario where both the buyer's existing short position ('n_b') and the seller's existing long position ('n_s') are smaller than the trade size 'n'. This requires both parties to close their existing positions and open new, opposite positions.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/binary-option/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nn_b < n && n_s < n\n```\n\n----------------------------------------\n\nTITLE: Example Solana Memo Program UTF-8 Parsing Error Log\nDESCRIPTION: This log line indicates that the Memo program encountered invalid UTF-8 encoding within the provided memo data, specifying the byte offset where the error occurred.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/memo.md#_snippet_3\n\nLANGUAGE: log\nCODE:\n```\nProgram log: Invalid UTF-8, from byte 4\n```\n\n----------------------------------------\n\nTITLE: Illustrating Merkle Tree Structure - Plain Text\nDESCRIPTION: Presents a visual representation of a Merkle tree of depth 2 for conceptual understanding. This diagram helps explain how parent and leaf nodes are structured and hashed together. There are no actual dependencies, parameters, or programmatic inputs or outputs; it is intended solely for quick human reference when learning data structure layout.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/src/account-compression/concepts.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n        X1\n      /    \\\n    X2      X3\n   / \\     / \\\n X4  X5   X6  X7\n```\n\n----------------------------------------\n\nTITLE: Building Static Documentation Locally with Custom Script - Shell\nDESCRIPTION: This shell command executes a custom build script (docs/build.sh) that generates the static documentation site, outputting it into the build directory. The result can be served by any static hosting provider, and this step is necessary before production deployment. All dependencies must be installed and environment configuration (if any) should be set prior to running the build.\nSOURCE: https://github.com/solana-labs/solana-program-library/blob/master/docs/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```\n$ docs/build.sh\n```\n```"
  }
]