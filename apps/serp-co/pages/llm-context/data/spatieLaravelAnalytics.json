[
  {
    "owner": "spatie",
    "repo": "laravel-analytics",
    "content": "TITLE: Querying Google Analytics Data with Laravel Analytics in PHP\nDESCRIPTION: The 'get' function allows for custom Google Analytics queries. It accepts parameters for period, metrics, dimensions, limit, ordering, and filtering. This function returns a Collection of results based on the specified criteria.\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function get(Period $period, array $metrics, array $dimensions = [], int $limit = 10, array $orderBy = [], FilterExpression $dimensionFilter = null, FilterExpression $metricFilter = null): Collection\n```\n\n----------------------------------------\n\nTITLE: Fetching Most Visited Pages and Visitor Data in PHP\nDESCRIPTION: Examples of using the Analytics facade to retrieve the most visited pages and visitor/pageview data for the past week. These methods return Collections containing the results.\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Analytics\\Facades\\Analytics;\nuse Spatie\\Analytics\\Period;\n\n//fetch the most visited pages for today and the past week\nAnalytics::fetchMostVisitedPages(Period::days(7));\n\n//fetch visitors and page views for the past week\nAnalytics::fetchVisitorsAndPageViews(Period::days(7));\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Analytics Package in PHP\nDESCRIPTION: Configuration file for the laravel-analytics package. It specifies the Google Analytics property ID, service account credentials, caching settings, and other options for interacting with the Google Analytics API.\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * The property id of which you want to display data.\n     */\n    'property_id' => env('ANALYTICS_PROPERTY_ID'),\n\n    /*\n     * Path to the client secret json file. Take a look at the README of this package\n     * to learn how to get this file. You can also pass the credentials as an array\n     * instead of a file path.\n     */\n    'service_account_credentials_json' => storage_path('app/analytics/service-account-credentials.json'),\n\n    /*\n     * The amount of minutes the Google API responses will be cached.\n     * If you set this to zero, the responses won't be cached at all.\n     */\n    'cache_lifetime_in_minutes' => 60 * 24,\n\n    /*\n     * Here you may configure the \"store\" that the underlying Google_Client will\n     * use to store it's data.  You may also add extra parameters that will\n     * be passed on setCacheConfig (see docs for google-api-php-client).\n     *\n     * Optional parameters: \"lifetime\", \"prefix\"\n     */\n    'cache' => [\n        'store' => 'file',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Periods for Analytics Data Retrieval in PHP\nDESCRIPTION: Examples of using the Period class to specify date ranges for analytics data retrieval. Demonstrates fetching data for the last 7 days, last 6 months, and a custom date range using Carbon dates.\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Analytics\\Facades\\Analytics;\n\n//retrieve visitors and page view data for the current day and the last seven days\n$analyticsData = Analytics::fetchVisitorsAndPageViews(Period::days(7));\n\n//retrieve visitors and page views since the 6 months ago\n$analyticsData = Analytics::fetchVisitorsAndPageViews(Period::months(6));\n\n$startDate = Carbon::now()->subYear();\n$endDate = Carbon::now();\n\nPeriod::create($startDate, $endDate);\n```\n\n----------------------------------------\n\nTITLE: Creating a Metric Filter for Google Analytics Queries in PHP\nDESCRIPTION: Example of creating a FilterExpression for metric filtering in Google Analytics queries. This snippet demonstrates how to filter results to include only those with an event count greater than 3.\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Analytics\\Data\\V1beta\\Filter;\nuse Google\\Analytics\\Data\\V1beta\\FilterExpression;\nuse Google\\Analytics\\Data\\V1beta\\Filter\\NumericFilter;\nuse Google\\Analytics\\Data\\V1beta\\NumericValue;\nuse Google\\Analytics\\Data\\V1beta\\Filter\\NumericFilter\\Operation;\n\n$metricFilter = new FilterExpression([\n    'filter' => new Filter([\n        'field_name' => 'eventCount',\n        'numeric_filter' => new NumericFilter([\n            'operation' => Operation::GREATER_THAN,\n            'value' => new NumericValue([\n                'int64_value' => 3,\n            ]),\n        ]),\n    ]),    \n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Dimension Filter for Google Analytics Queries in PHP\nDESCRIPTION: Example of creating a FilterExpression for dimension filtering in Google Analytics queries. This snippet shows how to filter results to include only events with the exact name 'click'.\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Analytics\\Data\\V1beta\\Filter;\nuse Google\\Analytics\\Data\\V1beta\\FilterExpression;\nuse Google\\Analytics\\Data\\V1beta\\Filter\\StringFilter;\nuse Google\\Analytics\\Data\\V1beta\\Filter\\StringFilter\\MatchType;\n\n$dimensionFilter = new FilterExpression([\n    'filter' => new Filter([\n        'field_name' => 'eventName',\n        'string_filter' => new StringFilter([\n            'match_type' => MatchType::EXACT,\n            'value' => 'click',\n        ]),\n    ]),    \n]);\n```\n\n----------------------------------------\n\nTITLE: Ordering Google Analytics Results in PHP\nDESCRIPTION: Example of how to create an OrderBy array for sorting Google Analytics query results. This snippet demonstrates ordering by date (ascending) and pageViews (descending).\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$orderBy = [\n    OrderBy::dimension('date', true),\n    OrderBy::metric('pageViews', false),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Analytics Package via Composer\nDESCRIPTION: Command to install the laravel-analytics package through Composer, and an optional command to publish the package's configuration file.\nSOURCE: https://github.com/spatie/laravel-analytics/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-analytics\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=\"analytics-config\"\n```"
  }
]