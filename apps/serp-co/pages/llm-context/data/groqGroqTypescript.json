[
  {
    "owner": "groq",
    "repo": "groq-typescript",
    "content": "TITLE: Basic Usage of Groq SDK in JavaScript\nDESCRIPTION: Demonstrates how to import the Groq SDK, create a client, and make a chat completion request.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Groq from 'groq-sdk';\n\nconst client = new Groq({\n  apiKey: process.env['GROQ_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const chatCompletion = await client.chat.completions.create({\n    messages: [{ role: 'user', content: 'Explain the importance of low latency LLMs' }],\n    model: 'llama3-8b-8192',\n  });\n\n  console.log(chatCompletion['choices[0].message.content']);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Completions in TypeScript\nDESCRIPTION: Method for creating chat completions using the Groq API. It sends a POST request to the /openai/v1/chat/completions endpoint and returns a ChatCompletion object.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.chat.completions.create({ ...params }) -> ChatCompletion\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Types with Groq SDK\nDESCRIPTION: Shows how to use TypeScript type definitions for request params and response fields in the Groq SDK.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Groq from 'groq-sdk';\n\nconst client = new Groq({\n  apiKey: process.env['GROQ_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const params: Groq.Chat.CompletionCreateParams = {\n    messages: [\n      { role: 'system', content: 'You are a helpful assistant.' },\n      { role: 'user', content: 'Explain the importance of low latency LLMs' },\n    ],\n    model: 'llama3-8b-8192',\n  };\n  const chatCompletion: Groq.Chat.ChatCompletion = await client.chat.completions.create(params);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Groq SDK\nDESCRIPTION: Shows how to handle API errors when using the Groq SDK, including checking for specific error types and accessing error details.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const chatCompletion = await client.chat.completions\n    .create({\n      messages: [\n        { role: 'system', content: 'You are a helpful assistant.' },\n        { role: 'user', content: 'Explain the importance of low latency LLMs' },\n      ],\n      model: 'llama3-8b-8192',\n    })\n    .catch(async (err) => {\n      if (err instanceof Groq.APIError) {\n        console.log(err.status); // 400\n        console.log(err.name); // BadRequestError\n        console.log(err.headers); // {server: 'nginx', ...}\n      } else {\n        throw err;\n      }\n    });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddings in TypeScript\nDESCRIPTION: Method for creating embeddings using the Groq API. It sends a POST request to the /openai/v1/embeddings endpoint and returns a CreateEmbeddingResponse object.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.embeddings.create({ ...params }) -> CreateEmbeddingResponse\n```\n\n----------------------------------------\n\nTITLE: File Upload Methods in Groq SDK\nDESCRIPTION: Demonstrates various methods for file uploads using the Groq SDK, including using fs.ReadStream, File API, fetch Response, and the toFile helper.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport fetch from 'node-fetch';\nimport Groq, { toFile } from 'groq-sdk';\n\nconst client = new Groq();\n\n// If you have access to Node `fs` we recommend using `fs.createReadStream()`:\nawait client.audio.transcriptions.create({\n  model: 'whisper-large-v3',\n  file: fs.createReadStream('/path/to/file'),\n});\n\n// Or if you have the web `File` API you can pass a `File` instance:\nawait client.audio.transcriptions.create({ model: 'whisper-large-v3', file: new File(['my bytes'], 'file') });\n\n// You can also pass a `fetch` `Response`:\nawait client.audio.transcriptions.create({\n  model: 'whisper-large-v3',\n  file: await fetch('https://somesite/file'),\n});\n\n// Finally, if none of the above are convenient, you can use our `toFile` helper:\nawait client.audio.transcriptions.create({\n  model: 'whisper-large-v3',\n  file: await toFile(Buffer.from('my bytes'), 'file'),\n});\nawait client.audio.transcriptions.create({\n  model: 'whisper-large-v3',\n  file: await toFile(new Uint8Array([0, 1, 2]), 'file'),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in Groq SDK\nDESCRIPTION: Demonstrates how to configure retry behavior for API requests using the Groq SDK, both globally and per-request.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new Groq({\n  maxRetries: 0, // default is 2\n});\n\n// Or, configure per-request:\nawait client.chat.completions.create({ messages: [{ role: 'system', content: 'You are a helpful assistant.' }, { role: 'user', content: 'Explain the importance of low latency LLMs' }], model: 'llama3-8b-8192' }, {\n  maxRetries: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts in Groq SDK\nDESCRIPTION: Shows how to set custom timeout durations for API requests using the Groq SDK, both globally and per-request.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Configure the default for all requests:\nconst client = new Groq({\n  timeout: 20 * 1000, // 20 seconds (default is 1 minute)\n});\n\n// Override per-request:\nawait client.chat.completions.create({ messages: [{ role: 'system', content: 'You are a helpful assistant.' }, { role: 'user', content: 'Explain the importance of low latency LLMs' }], model: 'llama3-8b-8192' }, {\n  timeout: 5 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Making Custom Requests with Groq SDK\nDESCRIPTION: Shows how to make custom or undocumented requests using the Groq SDK, including accessing undocumented endpoints and using undocumented parameters.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.post('/some/path', {\n  body: { some_prop: 'foo' },\n  query: { some_query_arg: 'bar' },\n});\n\nclient.foo.create({\n  foo: 'my_param',\n  bar: 12,\n  // @ts-expect-error baz is not yet public\n  baz: 'undocumented option',\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Models in TypeScript\nDESCRIPTION: Methods for retrieving, listing, and deleting models using the Groq API. These methods interact with the /openai/v1/models endpoint.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.models.retrieve(model) -> Model\nclient.models.list() -> ModelListResponse\nclient.models.delete(model) -> ModelDeleted\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Response Data in Groq SDK\nDESCRIPTION: Demonstrates how to access the raw Response object and its data when making API requests with the Groq SDK.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Groq();\n\nconst response = await client.chat.completions\n  .create({\n    messages: [\n      { role: 'system', content: 'You are a helpful assistant.' },\n      { role: 'user', content: 'Explain the importance of low latency LLMs' },\n    ],\n    model: 'llama3-8b-8192',\n  })\n  .asResponse();\nconsole.log(response.headers.get('X-My-Header'));\nconsole.log(response.statusText); // access the underlying Response object\n\nconst { data: chatCompletion, response: raw } = await client.chat.completions\n  .create({\n    messages: [\n      { role: 'system', content: 'You are a helpful assistant.' },\n      { role: 'user', content: 'Explain the importance of low latency LLMs' },\n    ],\n    model: 'llama3-8b-8192',\n  })\n  .withResponse();\nconsole.log(raw.headers.get('X-My-Header'));\nconsole.log(chatCompletion.id);\n```\n\n----------------------------------------\n\nTITLE: Generating Speech from Text in TypeScript\nDESCRIPTION: Method for generating speech from text using the Groq API. It sends a POST request to the /openai/v1/audio/speech endpoint and returns a Response object.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.audio.speech.create({ ...params }) -> Response\n```\n\n----------------------------------------\n\nTITLE: Transcribing Audio in TypeScript\nDESCRIPTION: Method for transcribing audio using the Groq API. It sends a POST request to the /openai/v1/audio/transcriptions endpoint and returns a Transcription object.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.audio.transcriptions.create({ ...params }) -> Transcription\n```\n\n----------------------------------------\n\nTITLE: Translating Audio in TypeScript\nDESCRIPTION: Method for translating audio using the Groq API. It sends a POST request to the /openai/v1/audio/translations endpoint and returns a Translation object.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.audio.translations.create({ ...params }) -> Translation\n```\n\n----------------------------------------\n\nTITLE: Installing Groq SDK via NPM\nDESCRIPTION: Command to install the Groq SDK package using npm.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install groq-sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fetch Function for Logging in Groq SDK\nDESCRIPTION: This example demonstrates how to provide a custom fetch function when instantiating the Groq client to log requests and responses. The custom fetch wrapper allows inspection of both request details and responses.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from 'undici'; // as one example\nimport Groq from 'groq-sdk';\n\nconst client = new Groq({\n  fetch: async (url: RequestInfo, init?: RequestInit): Promise<Response> => {\n    console.log('About to make a request', url, init);\n    const response = await fetch(url, init);\n    console.log('Got response', response);\n    return response;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/HTTPS Agent for Proxies in Groq SDK\nDESCRIPTION: This snippet shows how to configure an HTTP agent for all requests to the Groq API, including using a proxy. It demonstrates both global configuration and per-request overrides of HTTP agent settings.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'http';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\n// Configure the default for all requests:\nconst client = new Groq({\n  httpAgent: new HttpsProxyAgent(process.env.PROXY_URL),\n});\n\n// Override per-request:\nawait client.chat.completions.create(\n  {\n    messages: [\n      { role: 'system', content: 'You are a helpful assistant.' },\n      { role: 'user', content: 'Explain the importance of low latency LLMs' },\n    ],\n    model: 'llama3-8b-8192',\n  },\n  {\n    httpAgent: new http.Agent({ keepAlive: false }),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch Client in Groq SDK\nDESCRIPTION: Demonstrates how to customize the fetch client used by the Groq SDK, including using a global web-standards-compliant fetch function in Node environments.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Tell TypeScript and the package to use the global web fetch instead of node-fetch.\n// Note, despite the name, this does not add any polyfills, but expects them to be provided if needed.\nimport 'groq-sdk/shims/web';\nimport Groq from 'groq-sdk';\n```\n\n----------------------------------------\n\nTITLE: Managing Files in TypeScript\nDESCRIPTION: Methods for creating, listing, deleting, retrieving content, and getting info about files using the Groq API. These methods interact with the /openai/v1/files endpoint.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.files.create({ ...params }) -> FileCreateResponse\nclient.files.list() -> FileListResponse\nclient.files.delete(fileId) -> FileDeleteResponse\nclient.files.content(fileId) -> Response\nclient.files.info(fileId) -> FileInfoResponse\n```\n\n----------------------------------------\n\nTITLE: Managing Batches in TypeScript\nDESCRIPTION: Methods for creating, retrieving, listing, and canceling batches using the Groq API. These methods interact with the /openai/v1/batches endpoint.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/api.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.batches.create({ ...params }) -> BatchCreateResponse\nclient.batches.retrieve(batchId) -> BatchRetrieveResponse\nclient.batches.list() -> BatchListResponse\nclient.batches.cancel(batchId) -> BatchCancelResponse\n```\n\n----------------------------------------\n\nTITLE: Setting up Groq TypeScript SDK environment\nDESCRIPTION: Commands to install dependencies and build the SDK. This process installs all required dependencies and generates output files in the 'dist/' directory.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Groq TypeScript SDK from Git\nDESCRIPTION: Command to install the SDK directly from the GitHub repository using npm. This method allows using the latest version from the repository.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install git+ssh://git@github.com:groq/groq-typescript.git\n```\n\n----------------------------------------\n\nTITLE: Importing Node Shims in Groq SDK\nDESCRIPTION: Example of manually importing Node.js-specific shims to ensure compatibility in Node environments. This import helps resolve issues when TypeScript's module resolution doesn't properly handle conditional exports.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/src/_shims/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'groq-sdk/shims/node'\n```\n\n----------------------------------------\n\nTITLE: Importing Web Shims in Groq SDK\nDESCRIPTION: Example of manually importing web-specific shims to ensure compatibility in browser and other web-like environments. This import helps resolve issues when TypeScript's module resolution doesn't properly handle conditional exports.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/src/_shims/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'groq-sdk/shims/web'\n```\n\n----------------------------------------\n\nTITLE: Setting up mock server for testing\nDESCRIPTION: Command to set up a mock server using Prism against the OpenAPI specification. This is required for running most tests in the SDK.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ npx prism mock path/to/your/openapi.yml\n```\n\n----------------------------------------\n\nTITLE: Running tests for Groq TypeScript SDK\nDESCRIPTION: Command to execute the test suite for the SDK. This should be run after setting up the mock server.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn run test\n```\n\n----------------------------------------\n\nTITLE: Linking local Groq TypeScript SDK with Yarn\nDESCRIPTION: Steps to clone the repository and link it locally using Yarn. This process allows developers to use a local copy of the SDK in their projects.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Clone\n$ git clone https://www.github.com/groq/groq-typescript\n$ cd groq-typescript\n\n# With yarn\n$ yarn link\n$ cd ../my-package\n$ yarn link groq-sdk\n```\n\n----------------------------------------\n\nTITLE: Linking local Groq TypeScript SDK with pnpm\nDESCRIPTION: Steps to clone the repository and link it locally using pnpm. This process allows developers to use a local copy of the SDK in their projects managed by pnpm.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Clone\n$ git clone https://www.github.com/groq/groq-typescript\n$ cd groq-typescript\n\n# With pnpm\n$ pnpm link --global\n$ cd ../my-package\n$ pnpm link -—global groq-sdk\n```\n\n----------------------------------------\n\nTITLE: Running an example script\nDESCRIPTION: Commands to make an example script executable and run it against the API. This process uses 'yarn tsn' to execute TypeScript files directly.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ chmod +x examples/<your-example>.ts\n# run the example against your api\n$ yarn tsn -T examples/<your-example>.ts\n```\n\n----------------------------------------\n\nTITLE: Adding an example script in TypeScript\nDESCRIPTION: Template for creating a new example script in the 'examples/' directory. The shebang line allows direct execution of the TypeScript file using 'yarn tsn'.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n#!/usr/bin/env -S npm run tsn -T\n…\n```\n\n----------------------------------------\n\nTITLE: Formatting and fixing lint issues\nDESCRIPTION: Command to automatically format the code and fix lint issues in the SDK. This uses Prettier and ESLint to ensure consistent code style.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn fix\n```\n\n----------------------------------------\n\nTITLE: Linting Groq TypeScript SDK\nDESCRIPTION: Command to run the linter on the SDK codebase. This uses ESLint to check for code quality and style issues.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn lint\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Version Header in Markdown\nDESCRIPTION: Demonstrates how to format a version header in a Markdown changelog, including the version number, release date, and a link to compare with the previous version.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.5.0 (2024-06-11)\n\nFull Changelog: [v0.4.0...v0.5.0](https://github.com/groq/groq-typescript/compare/v0.4.0...v0.5.0)\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Hash in Markdown\nDESCRIPTION: Shows how to reference a Git commit hash in a Markdown changelog entry. This is used to link specific changes to their corresponding commits in the repository.\nSOURCE: https://github.com/groq/groq-typescript/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n([90c2d43](https://github.com/groq/groq-typescript/commit/90c2d4340def37b2ad379ea838e63305e9dd4405))\n```"
  }
]