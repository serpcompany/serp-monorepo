[
  {
    "owner": "zotero",
    "repo": "zotero.git",
    "content": "TITLE: Building Firefox XPIs for Zotero (Shell)\nDESCRIPTION: This script builds distributable Firefox XPIs (cross-platform installers) from the Zotero core repository. It is used to create installable packages for the Firefox browser extension version of Zotero.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/scripts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nxpi\n```\n\n----------------------------------------\n\nTITLE: Updating citeproc.js in Zotero (Shell)\nDESCRIPTION: This script updates citeproc.js from Frank Bennett's Bitbucket source. It is used to keep the citation processing module up-to-date in the Zotero project.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nupdate-citeproc.sh\n```\n\n----------------------------------------\n\nTITLE: EPUB Annotation Data Structure in JSON\nDESCRIPTION: Defines reading positions and highlights within an EPUB document, including CFI locations, highlighted text, styling information, and timestamps. Contains both active and removed annotations with UUIDs for tracking.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/test/tests/data/moby_dick/calibre_bookmarks.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"pos\": \"epubcfi(/10/2/4/2[extracts-supplied-by-a-sub-sub-librarian]/8[extracts]/14/2/1:37)\", \"pos_type\": \"epubcfi\", \"timestamp\": \"2024-10-23T20:08:02.266712+00:00\", \"type\": \"last-read\"}, {\"removed\": true, \"timestamp\": \"2024-10-23T17:32:22.392Z\", \"type\": \"highlight\", \"uuid\": \"GI1I0eS4k9RretvdbyMpCw\"}, {\"end_cfi\": \"/2/4/2[extracts-supplied-by-a-sub-sub-librarian]/8[extracts]/20/2/1:66\", \"highlighted_text\": \"visited this country also with a view of catching horse-whales\", \"notes\": \"test\", \"spine_index\": 4, \"spine_name\": \"epub/text/extracts.xhtml\", \"start_cfi\": \"/2/4/2[extracts-supplied-by-a-sub-sub-librarian]/8[extracts]/20/2/1:4\", \"style\": {\"kind\": \"color\", \"type\": \"builtin\", \"which\": \"yellow\"}, \"timestamp\": \"2024-10-23T17:33:06.197Z\", \"toc_family_titles\": [\"Extracts\"], \"type\": \"highlight\", \"uuid\": \"kWtQxyscZswxIC8CxGaFXw\"}, {\"end_cfi\": \"/2/4/2[extracts-supplied-by-a-sub-sub-librarian]/8[extracts]/14/2/1:139\", \"highlighted_text\": \"down it goes all incontinently\", \"spine_index\": 4, \"spine_name\": \"epub/text/extracts.xhtml\", \"start_cfi\": \"/2/4/2[extracts-supplied-by-a-sub-sub-librarian]/8[extracts]/14/2/1:109\", \"style\": {\"kind\": \"decoration\", \"type\": \"builtin\", \"which\": \"strikeout\"}, \"timestamp\": \"2024-10-23T18:54:44.546Z\", \"toc_family_titles\": [\"Extracts\"], \"type\": \"highlight\", \"uuid\": \"bNUp2TQzi-7bClEbqYM8Iw\"}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox to Zotero Executable Transformation\nDESCRIPTION: INI configuration that defines file naming and resource modification commands. Specifies input/output filenames with architecture placeholders and commands to replace icons and version information.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/resource-hacker-config.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[FILENAMES]\nOpen=firefox-{{ARCH}}.exe\nSave=zotero_{{ARCH}}.exe\nLog=CONSOLE\n[COMMANDS]\n-addoverwrite zotero.ico, ICONGROUP,1,\n-addoverwrite zotero.ico, ICONGROUP,32512,\n-delete VERSIONINFO,1\n-addoverwrite VersionInfo1.res, VERSIONINFO,1,\n```\n\n----------------------------------------\n\nTITLE: Configuring Updater Executable Modifications with INI Format\nDESCRIPTION: Configuration script that defines file operations and commands for updating version information in an executable. It specifies the files to open and save with architecture placeholders, sets console logging, and defines commands to delete existing version information and add new resources.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/resource-hacker-config-updater.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[FILENAMES]\nOpen=updater-{{ARCH}}.exe\nSave=updater-{{ARCH}}-new.exe\nLog=CONSOLE\n[COMMANDS]\n-delete VERSIONINFO,1\n-addoverwrite VersionInfo1-updater.res, VERSIONINFO,1,\n```\n\n----------------------------------------\n\nTITLE: Implementing LZMA Properties Decoding in C\nDESCRIPTION: Code snippet showing how to decode LZMA properties from a compressed stream. This is the first step in the decompression process, reading the 5-byte properties header.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nCLzmaDecoderState state;  /* it's 24-140 bytes structure, if int is 32-bit */\n\nif (LzmaDecodeProperties(&state.Properties, properties, LZMA_PROPERTIES_SIZE) != LZMA_RESULT_OK)\n  return PrintError(rs, \"Incorrect stream properties\");\n```\n\n----------------------------------------\n\nTITLE: Single-call LZMA Decompression Interface in C\nDESCRIPTION: Implementation of the simple single-call LZMA decompression interface for RAM-to-RAM operations. This approach requires full input and output buffers.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint res = LzmaDecode(&state, \n    inStream, compressedSize, &inProcessed,\n    outStream, outSize, &outProcessed);\n```\n\n----------------------------------------\n\nTITLE: Multi-call LZMA Decompression with Output Buffer in C\nDESCRIPTION: Code showing how to implement multi-call LZMA decompression with an output buffer. This approach is suitable for RAM-to-File decompression, processing data in chunks.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstate.Dictionary = (unsigned char *)malloc(state.Properties.DictionarySize);\n\nLzmaDecoderInit(&state);\ndo\n{\n  LzmaDecode(&state,\n    inBuffer, inAvail, &inProcessed,\n    g_OutBuffer, outAvail, &outProcessed);\n  inAvail -= inProcessed;\n  inBuffer += inProcessed;\n}\nwhile you need more bytes\n```\n\n----------------------------------------\n\nTITLE: Using Input Callback for LZMA Decompression in C\nDESCRIPTION: Demonstrates how to use the input callback interface for LZMA decompression. This approach is suitable for File-to-RAM or Flash-to-RAM decompression scenarios.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nCBuffer g_InBuffer;\n\ng_InBuffer.File = inFile;\ng_InBuffer.InCallback.Read = LzmaReadCompressed;\nint res = LzmaDecode(&state, \n    &g_InBuffer.InCallback,\n    outStream, outSize, &outProcessed);\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Callback for LZMA Decompression in C\nDESCRIPTION: Code that defines an input callback structure and function for streaming compressed data from a file to the LZMA decoder. Used in the single-call with callback decompression approach.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct _CBuffer\n{\n  ILzmaInCallback InCallback;\n  FILE *File;\n  unsigned char Buffer[kInBufferSize];\n} CBuffer;\n\nint LzmaReadCompressed(void *object, const unsigned char **buffer, SizeT *size)\n{\n  CBuffer *bo = (CBuffer *)object;\n  *buffer = bo->Buffer;\n  *size = MyReadFile(bo->File, bo->Buffer, kInBufferSize);\n  return LZMA_RESULT_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-call State LZMA Decompression in C\nDESCRIPTION: Shows implementation of multi-call state LZMA decompression with a zlib-like interface. This approach is suitable for File-to-File decompression scenarios.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstate.Dictionary = (unsigned char *)malloc(state.Properties.DictionarySize);\n\n\nLzmaDecoderInit(&state);\ndo\n{\n  res = LzmaDecode(&state,\n    inBuffer, inAvail, &inProcessed,\n    g_OutBuffer, outAvail, &outProcessed,\n    finishDecoding);\n  inAvail -= inProcessed;\n  inBuffer += inProcessed;\n}\nwhile you need more bytes\n```\n\n----------------------------------------\n\nTITLE: Listing Archive Contents in C\nDESCRIPTION: Code snippet demonstrating how to iterate through and display files in a 7z archive, showing file sizes and names\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/7zC.txt#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n{\n  UInt32 i;\n  for (i = 0; i < db.Database.NumFiles; i++)\n  {\n    CFileItem *f = db.Database.Files + i;\n    printf(\"%10d  %s\\n\", (int)f->Size, f->Name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling LZMA for UNIX/Linux\nDESCRIPTION: Instructions for compiling the C++ version of file->file LZMA on UNIX/Linux systems. It also includes a note about compiling with static libraries if needed.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd C/7zip/Compress/LZMA_Alone\nmake clean all\n```\n\n----------------------------------------\n\nTITLE: Allocating Memory for LZMA Internal Structures in C\nDESCRIPTION: Shows how to allocate memory for internal LZMA decoder structures. The CProb array size depends on the properties of the compressed data.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstate.Probs = (CProb *)malloc(LzmaGetNumProbs(&state.Properties) * sizeof(CProb));\nif (state.Probs == 0)\n  return PrintError(rs, kCantAllocateMessage);\n```\n\n----------------------------------------\n\nTITLE: LZMA Encoder/Decoder Usage\nDESCRIPTION: Command-line usage instructions for the LZMA encoder/decoder executable, including basic commands and available switches for customizing compression and decompression.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nLZMA <e|d> inputFile outputFile [<switches>...]\n```\n\n----------------------------------------\n\nTITLE: 7z Archive Creation Command\nDESCRIPTION: Command line example for creating a 7z archive with specific compression parameters\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/7zC.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n7za.exe a archive.7z *.htm -r -mx -m0fb=255 -mf=off\n```\n\n----------------------------------------\n\nTITLE: Defining LZMA Result Codes in C\nDESCRIPTION: Defines the possible return codes for the LZMA decoder. LZMA_RESULT_OK (0) indicates successful decompression, while LZMA_RESULT_DATA_ERROR (1) indicates a data error during decompression.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/lzma.txt#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define LZMA_RESULT_OK 0\n#define LZMA_RESULT_DATA_ERROR 1\n```\n\n----------------------------------------\n\nTITLE: Creating Partly-Solid Archives\nDESCRIPTION: Command for creating partly-solid archives with 512KB blocks for faster extraction\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/7zC.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n7za.exe a archive.7z *.htm -ms=512K -r -mx -m0fb=255 -m0d=512K -mf=off\n```\n\n----------------------------------------\n\nTITLE: LZMA Configuration Defines\nDESCRIPTION: Preprocessor definitions for configuring LZMA decoder behavior and features\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/7zC.txt#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define SZ_OK (0)\n#define SZE_DATA_ERROR (1)\n#define SZE_OUTOFMEMORY (2)\n#define SZE_CRC_ERROR (3)\n\n#define SZE_NOTIMPL (4)\n#define SZE_FAIL (5)\n\n#define SZE_ARCHIVE_ERROR (6)\n```\n\n----------------------------------------\n\nTITLE: GNU LGPL Copyright Notice Template\nDESCRIPTION: Standard copyright notice template to be placed at the start of source files when applying the GNU LGPL license to a library.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/copying.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: Sample copyright disclaimer template for employers or organizations to disclaim copyright interest in a library.\nSOURCE: https://github.com/zotero/zotero.git/blob/main/app/win/installer/7zstub/src/DOC/copying.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```"
  }
]