[
  {
    "owner": "silexphp",
    "repo": "silex",
    "content": "TITLE: Defining and Mounting Controllers in Silex PHP\nDESCRIPTION: This snippet shows how to create controller collections for different sections of a Silex application (blog, forum, admin) and mount them with specific URL prefixes. It demonstrates the use of the controllers_factory and the mount() method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/organizing_controllers.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// define controllers for a blog\n$blog = $app['controllers_factory'];\n$blog->get('/', function () {\n    return 'Blog home page';\n});\n// ...\n\n// define controllers for a forum\n$forum = $app['controllers_factory'];\n$forum->get('/', function () {\n    return 'Forum home page';\n});\n\n// define \"global\" controllers\n$app->get('/', function () {\n    return 'Main home page';\n});\n\n$app->mount('/blog', $blog);\n$app->mount('/forum', $forum);\n\n// define controllers for an admin\n$app->mount('/admin', function ($admin) {\n    // recursively mount\n    $admin->mount('/blog', function ($user) {\n        $user->get('/', function () {\n            return 'Admin Blog home page';\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Application Class with Traits in Silex\nDESCRIPTION: Shows how to create a custom Application class using Silex traits to include additional functionality from service providers.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Application;\n\nclass MyApplication extends Application\n{\n    use Application\\TwigTrait;\n    use Application\\SecurityTrait;\n    use Application\\FormTrait;\n    use Application\\UrlGeneratorTrait;\n    use Application\\SwiftmailerTrait;\n    use Application\\MonologTrait;\n    use Application\\TranslationTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Silex Application with Route Handler\nDESCRIPTION: Basic example showing how to set up a Silex application with autoloader, define a GET route with a name parameter, and run the application. The route handler returns an escaped greeting using the provided name parameter.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/intro.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// web/index.php\nrequire_once __DIR__.'/../vendor/autoload.php';\n\n$app = new Silex\\Application();\n\n$app->get('/hello/{name}', function ($name) use ($app) {\n    return 'Hello '.$app->escape($name);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Class-based Controllers in PHP Silex\nDESCRIPTION: Define controllers as class methods instead of anonymous functions with dependency injection support.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/', 'Acme\\\\Foo::bar');\n\nuse Silex\\Application;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nnamespace Acme\n{\n    class Foo\n    {\n        public function bar(Request $request, Application $app)\n        {\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Silex Application in PHP\nDESCRIPTION: A simple example showing how to create a Silex application with a route that returns a greeting. The code loads the Silex autoloader, instantiates the Application class, defines a GET route with a name parameter, and runs the application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/README.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__.'/../vendor/autoload.php';\n\n$app = new Silex\\Application();\n\n$app->get('/hello/{name}', function ($name) use ($app) {\n  return 'Hello '.$app->escape($name);\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Extending Form Types in Silex PHP Application\nDESCRIPTION: Shows how to register custom form types by extending the form.types service in Silex.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$app['your.type.service'] = function ($app) {\n    return new YourServiceFormType();\n};\n$app->extend('form.types', function ($types) use ($app) {\n    $types[] = new YourFormType();\n    $types[] = 'your.type.service';\n\n    return $types;\n});\n```\n\n----------------------------------------\n\nTITLE: Example GET Route Implementation\nDESCRIPTION: Demonstrates implementing a GET route for a blog listing page using a closure and array data.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$blogPosts = array(\n    1 => array(\n        'date'      => '2011-03-29',\n        'author'    => 'igorw',\n        'title'     => 'Using Silex',\n        'body'      => '...',\n    ),\n);\n\n$app->get('/blog', function () use ($blogPosts) {\n    $output = '';\n    foreach ($blogPosts as $post) {\n        $output .= $post['title'];\n        $output .= '<br />';\n    }\n\n    return $output;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering TwigServiceProvider in Silex\nDESCRIPTION: Code example showing how to register the Twig service provider in a Silex application with a specified template directory.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\TwigServiceProvider(), array(\n    'twig.path' => __DIR__.'/views',\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateless Authentication in Silex\nDESCRIPTION: Configuration for enabling stateless authentication in the security firewall. This is useful for API authentication methods like certificates, HTTP authentication, or WSSE where credentials are sent with each request.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$app['security.firewalls'] = array(\n    'default' => array(\n        'stateless' => true,\n        'wsse' => true,\n\n        // ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template Rendering in Silex Routes\nDESCRIPTION: Example of rendering a Twig template with parameters from a Silex route handler.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/hello/{name}', function ($name) use ($app) {\n    return $app['twig']->render('hello.twig', array(\n        'name' => $name,\n    ));\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Request Body in Silex Middleware\nDESCRIPTION: This snippet demonstrates how to create a before middleware in Silex that parses the JSON request body when the Content-Type header indicates JSON content. It decodes the JSON and replaces the request data.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/json_request_body.rst#2025-04-15_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\ParameterBag;\n\n$app->before(function (Request $request) {\n    if (0 === strpos($request->headers->get('Content-Type'), 'application/json')) {\n        $data = json_decode($request->getContent(), true);\n        $request->request->replace(is_array($data) ? $data : array());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Input Escaping for Security in Silex\nDESCRIPTION: Examples of proper input escaping techniques for HTML and JSON responses to prevent Cross-Site-Scripting attacks.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$app->get('/name', function (Request $request, Silex\\Application $app) {\n    $name = $request->get('name');\n\n    return \"You provided the name {$app->escape($name)}.\"; \n});\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$app->get('/name.json', function (Request $request, Silex\\Application $app) {\n    $name = $request->get('name');\n\n    return $app->json(array('name' => $name));\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Silex Application Bootstrap\nDESCRIPTION: Initializes a basic Silex application by requiring the autoloader and creating an Application instance.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// web/index.php\nrequire_once __DIR__.'/../vendor/autoload.php';\n\n$app = new Silex\\Application();\n\n// ... definitions\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Registering AssetServiceProvider in Silex with Configuration\nDESCRIPTION: Shows how to register the AssetServiceProvider with Silex and configure it with different version formats and named packages for assets like CSS and images.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/asset.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\AssetServiceProvider(), array(\n    'assets.version' => 'v1',\n    'assets.version_format' => '%s?version=%s',\n    'assets.named_packages' => array(\n        'css' => array('version' => 'css2', 'base_path' => '/whatever-makes-sense'),\n        'images' => array('base_urls' => array('https://img.example.com')),\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Querying Database with Doctrine in Silex PHP\nDESCRIPTION: This example shows how to use the 'db' service provided by DoctrineServiceProvider to execute a SQL query and fetch data from a 'posts' table. It demonstrates parameter binding for safe queries.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/doctrine.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/blog/{id}', function ($id) use ($app) {\n    $sql = \"SELECT * FROM posts WHERE id = ?\";\n    $post = $app['db']->fetchAssoc($sql, array((int) $id));\n\n    return  \"<h1>{$post['title']}</h1>\".\n            \"<p>{$post['body']}</p>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Access Rules for Application URLs in Silex\nDESCRIPTION: This code configures access rules that restrict access to different areas of the application based on user roles and protocol requirements.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$app['security.access_rules'] = array(\n    array('^/admin', 'ROLE_ADMIN', 'https'),\n    array('^.*$', 'ROLE_USER'),\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Handling in Silex PHP\nDESCRIPTION: Demonstrates how to return JSON responses using Silex's json helper method. Includes error handling for non-existent resources with appropriate HTTP status codes.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/users/{id}', function ($id) use ($app) {\n    $user = getUser($id);\n\n    if (!$user) {\n        $error = array('message' => 'The user was not found.');\n\n        return $app->json($error, 404);\n    }\n\n    return $app->json($user);\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Monolog Factory with Convention-based Handler Configuration\nDESCRIPTION: This code creates an advanced factory function that checks for channel-specific handlers in the container, defaulting to the standard handler if none exist. It demonstrates how to register custom handlers for the payments channel using this pattern.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/multiple_loggers.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\n\n$app['monolog.factory'] = $app->protect(function ($name) use ($app) {\n    $log = new $app['monolog.logger.class']($name);\n\n    $handlers = isset($app['monolog.'.$name.'.handlers'])\n        ? $app['monolog.'.$name.'.handlers']\n        : array($app['monolog.handler']);\n\n    foreach ($handlers as $handler) {\n        $log->pushHandler($handler);\n    }\n\n    return $log;\n});\n\n$app['monolog.payments.handlers'] = function ($app) {\n    return array(\n        new StreamHandler(__DIR__.'/../payments.log', Logger::DEBUG),\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering DoctrineServiceProvider in Silex PHP\nDESCRIPTION: This snippet demonstrates how to register the DoctrineServiceProvider with Silex and configure a SQLite database connection. It sets the driver to 'pdo_sqlite' and specifies the database file path.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/doctrine.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\DoctrineServiceProvider(), array(\n    'db.options' => array(\n        'driver'   => 'pdo_sqlite',\n        'path'     => __DIR__.'/app.db',\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: File Response Handling in Silex\nDESCRIPTION: Examples of sending file responses using Silex's sendFile helper method, including customization of response headers and content disposition.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/files/{path}', function ($path) use ($app) {\n    if (!file_exists('/base/path/' . $path)) {\n        $app->abort(404);\n    }\n\n    return $app->sendFile('/base/path/' . $path);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn $app\n    ->sendFile('/base/path/' . $path)\n    ->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'pic.jpg')\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Firewall with Custom Authentication Provider\nDESCRIPTION: Example of using a custom authentication provider in the security firewall configuration. This shows how to enable the WSSE authentication method defined previously.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\SecurityServiceProvider(), array(\n    'security.firewalls' => array(\n        'default' => array(\n            'wsse' => true,\n\n            // ...\n        ),\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Authenticator Class in PHP\nDESCRIPTION: A PHP class extending AbstractGuardAuthenticator to handle API token authentication. It processes X-AUTH-TOKEN headers, validates credentials, and manages authentication success/failure responses.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/guard_authentication.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Security;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserProviderInterface;\nuse Symfony\\Component\\Security\\Guard\\AbstractGuardAuthenticator;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface;\n\nclass TokenAuthenticator extends AbstractGuardAuthenticator\n{\n    private $encoderFactory;\n\n    public function __construct(EncoderFactoryInterface $encoderFactory)\n    {\n        $this->encoderFactory = $encoderFactory;\n    }\n\n    public function getCredentials(Request $request)\n    {\n        // Checks if the credential header is provided\n        if (!$token = $request->headers->get('X-AUTH-TOKEN')) {\n            return;\n        }\n\n        // Parse the header or ignore it if the format is incorrect.\n        if (false === strpos($token, ':')) {\n            return;\n        }\n        list($username, $secret) = explode(':', $token, 2);\n\n        return array(\n            'username' => $username,\n            'secret' => $secret,\n        );\n    }\n\n    public function getUser($credentials, UserProviderInterface $userProvider)\n    {\n        return $userProvider->loadUserByUsername($credentials['username']);\n    }\n\n    public function checkCredentials($credentials, UserInterface $user)\n    {\n        // check credentials - e.g. make sure the password is valid\n        // return true to cause authentication success\n\n        $encoder = $this->encoderFactory->getEncoder($user);\n\n        return $encoder->isPasswordValid(\n            $user->getPassword(),\n            $credentials['secret'],\n            $user->getSalt()\n        );\n    }\n\n    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)\n    {\n        // on success, let the request continue\n        return;\n    }\n\n    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)\n    {\n        $data = array(\n            'message' => strtr($exception->getMessageKey(), $exception->getMessageData()),\n\n            // or to translate this message\n            // $this->translator->trans($exception->getMessageKey(), $exception->getMessageData())\n        );\n\n        return new JsonResponse($data, 403);\n    }\n\n    /**\n     * Called when authentication is needed, but it's not sent\n     */\n    public function start(Request $request, AuthenticationException $authException = null)\n    {\n        $data = array(\n            // you might translate this message\n            'message' => 'Authentication Required',\n        );\n\n        return new JsonResponse($data, 401);\n    }\n\n    public function supportsRememberMe()\n    {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handlers in PHP Silex\nDESCRIPTION: Register custom error handlers to handle exceptions and display appropriate error pages.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$app->error(function (\\Exception $e, Request $request, $code) {\n    switch ($code) {\n        case 404:\n            $message = 'The requested page could not be found.';\n            break;\n        default:\n            $message = 'We are sorry, but something went terribly wrong.';\n    }\n\n    return new Response($message);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PdoSessionHandler with Dedicated PDO Service in Silex\nDESCRIPTION: This snippet demonstrates how to set up PdoSessionHandler using a dedicated PDO service in a Silex application. It includes configuration for database connection, session options, and creating the session storage handler.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/session_storage.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler;\n\n$app->register(new Silex\\Provider\\SessionServiceProvider());\n\n$app['pdo.dsn'] = 'mysql:dbname=mydatabase';\n$app['pdo.user'] = 'myuser';\n$app['pdo.password'] = 'mypassword';\n\n$app['session.db_options'] = array(\n    'db_table'    => 'session',\n    'db_id_col'   => 'session_id',\n    'db_data_col' => 'session_value',\n    'db_time_col' => 'session_time',\n);\n\n$app['pdo'] = function () use ($app) {\n    return new PDO(\n        $app['pdo.dsn'],\n        $app['pdo.user'],\n        $app['pdo.password']\n    );\n};\n\n$app['session.storage.handler'] = function () use ($app) {\n    return new PdoSessionHandler(\n        $app['pdo'],\n        $app['session.db_options']\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom User Provider in Silex\nDESCRIPTION: This function shows how to register a custom user provider service that integrates with a database to manage users.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'users' => function () use ($app) {\n    return new UserProvider($app['db']);\n},\n```\n\n----------------------------------------\n\nTITLE: Securing Routes with Role Requirements in Silex\nDESCRIPTION: Example of using the SecurityTrait to secure a route with role requirements. This allows restricting access to specific routes based on user roles.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/', function () {\n    // do something but only for admins\n})->secure('ROLE_ADMIN');\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Firewall in PHP\nDESCRIPTION: Configuration of security firewalls to use the token authenticator with a hardcoded user for testing.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/guard_authentication.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app['security.firewalls'] = array(\n    'main' => array(\n        'guard' => array(\n            'authenticators' => array(\n                'app.token_authenticator'\n            ),\n\n            // Using more than 1 authenticator, you must specify\n            // which one is used as entry point.\n            // 'entry_point' => 'app.token_authenticator',\n        ),\n        // configure where your users come from. Hardcode them, or load them from somewhere\n        // https://silex.symfony.com/doc/providers/security.html#defining-a-custom-user-provider\n        'users' => array(\n        //raw password = foo\n            'victoria' => array('ROLE_USER', '$2y$10$3i9/lVd8UOFIJ6PAMFt8gu3/r5g0qeCJvoSlLCsvMTythye19F77a'),\n        ),\n        // 'anonymous' => true\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Sharing Security Context Between Multiple Firewalls in Silex\nDESCRIPTION: This configuration demonstrates how to share the same security context between multiple firewalls by setting a common context identifier.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$app['security.firewalls'] = array(\n    'login' => array(\n        'context' => 'admin_security',\n        'pattern' => '^/login',\n        // ...\n    ),\n    'secured' => array(\n        'context' => 'admin_security',\n        'pattern' => '^/admin/',\n        'form' => array('login_path' => '/login', 'check_path' => '/admin/login_check'),\n        'users' => array(\n            'admin' => array('ROLE_ADMIN', '$2y$10$3i9/lVd8UOFIJ6PAMFt8gu3/r5g0qeCJvoSlLCsvMTythye19F77a'),\n        ),\n        // ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Before Middleware in Silex PHP\nDESCRIPTION: Adds a 'before' middleware that modifies the Request object before controller execution. This middleware runs after routing and security by default.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->before(function (Request $request, Application $app) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Authentication Provider in Silex\nDESCRIPTION: Implementation of a custom WSSE authentication provider and listener. The example shows how to register a new authentication mechanism that can be used in the security firewall configuration.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$app['security.authentication_listener.factory.wsse'] = $app->protect(function ($name, $options) use ($app) {\n    // define the authentication provider object\n    $app['security.authentication_provider.'.$name.'.wsse'] = function () use ($app) {\n        return new WsseProvider($app['security.user_provider.default'], __DIR__.'/security_cache');\n    };\n\n    // define the authentication listener object\n    $app['security.authentication_listener.'.$name.'.wsse'] = function () use ($app) {\n        return new WsseListener($app['security.token_storage'], $app['security.authentication_manager']);\n    };\n\n    return array(\n        // the authentication provider id\n        'security.authentication_provider.'.$name.'.wsse',\n        // the authentication listener id\n        'security.authentication_listener.'.$name.'.wsse',\n        // the entry point id\n        null,\n        // the position of the listener in the stack\n        'pre_auth'\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Firewalls with Conditional Authentication in Silex\nDESCRIPTION: This snippet demonstrates how to configure security firewalls with a conditional authentication mechanism that can be toggled based on debug mode.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app['security.firewalls'] = array(\n    'api' => array(\n        'pattern' => '^/api',\n        'security' => $app['debug'] ? false : true,\n        'wsse' => true,\n\n        // ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: View Handlers in PHP Silex\nDESCRIPTION: Register view handlers to transform controller results before returning responses.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$app->view(function (array $controllerResult) use ($app) {\n    return $app->json($controllerResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking User Role Permissions in Silex\nDESCRIPTION: This code demonstrates how to check if a user has a specific role using the security authorization checker.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif ($app['security.authorization_checker']->isGranted('ROLE_ADMIN')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory Function for Multiple Monolog Loggers in PHP\nDESCRIPTION: This code creates a factory function that generates new Monolog logger instances with different channel names but the same handler. It then uses a loop to create loggers for 'auth', 'payments', and 'stats' channels.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/multiple_loggers.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app['monolog.factory'] = $app->protect(function ($name) use ($app) {\n    $log = new $app['monolog.logger.class']($name);\n    $log->pushHandler($app['monolog.handler']);\n\n    return $log;\n});\n\nforeach (array('auth', 'payments', 'stats') as $channel) {\n    $app['monolog.'.$channel] = function ($app) use ($channel) {\n        return $app['monolog.factory']($channel);\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Serializer Service in Silex\nDESCRIPTION: Complete example showing how to use the serializer service in a Silex application. This creates a route that accepts requests for pages in different formats (XML or JSON) and serializes the page object accordingly.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/serializer.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Application;\nuse Silex\\Provider\\SerializerServiceProvider;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$app = new Application();\n\n$app->register(new SerializerServiceProvider());\n\n// only accept content types supported by the serializer via the assert method.\n$app->get(\"/pages/{id}.{_format}\", function (Request $request, $id) use ($app) {\n    // assume a page_repository service exists that returns Page objects. The\n    // object returned has getters and setters exposing the state.\n    $page = $app['page_repository']->find($id);\n    $format = $request->getRequestFormat();\n\n    if (!$page instanceof Page) {\n        $app->abort(\"No page found for id: $id\");\n    }\n\n    return new Response($app['serializer']->serialize($page, $format), 200, array(\n        \"Content-Type\" => $request->getMimeType($format)\n    ));\n})->assert(\"_format\", \"xml|json\")\n  ->assert(\"id\", \"\\d+\");\n```\n\n----------------------------------------\n\nTITLE: Basic Route Implementation with Repository\nDESCRIPTION: Demonstrates the basic implementation of a route using a post repository and JSON response.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/service_controller.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Application;\nuse Demo\\Repository\\PostRepository;\n\n$app = new Application();\n\n$app['posts.repository'] = function() {\n    return new PostRepository;\n};\n\n$app->get('/posts.json', function() use ($app) {\n    return $app->json($app['posts.repository']->findAll());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Service Provider in Silex\nDESCRIPTION: Demonstrates how to create a custom service provider implementing ServiceProviderInterface, BootableProviderInterface, and EventListenerProviderInterface. The example provider registers a 'hello' service.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme;\n\nuse Pimple\\Container;\nuse Pimple\\ServiceProviderInterface;\nuse Silex\\Application;\nuse Silex\\Api\\BootableProviderInterface;\nuse Silex\\Api\\EventListenerProviderInterface;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nclass HelloServiceProvider implements ServiceProviderInterface, BootableProviderInterface, EventListenerProviderInterface\n{\n    public function register(Container $app)\n    {\n        $app['hello'] = $app->protect(function ($name) use ($app) {\n            $default = $app['hello.default_name'] ? $app['hello.default_name'] : '';\n            $name = $name ?: $default;\n\n            return 'Hello '.$app->escape($name);\n        });\n    }\n\n    public function boot(Application $app)\n    {\n        // do something\n    }\n\n    public function subscribe(Container $app, EventDispatcherInterface $dispatcher)\n    {\n        $dispatcher->addListener(KernelEvents::REQUEST, function(FilterResponseEvent $event) use ($app) {\n            // do something\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Container Parameters in Silex\nDESCRIPTION: Example showing how to set and retrieve parameters in the Silex/Pimple service container.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/services.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app['some_parameter'] = 'value';\n$app['asset.host'] = 'http://cdn.mysite.com/';\necho $app['some_parameter'];\n```\n\n----------------------------------------\n\nTITLE: Using Monolog in Route Handler\nDESCRIPTION: Example of using Monolog logger in a POST route handler to log user registration events.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/monolog.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$app->post('/user', function () use ($app) {\n    // ...\n\n    $app['monolog']->info(sprintf(\"User '%s' registered.\", $username));\n\n    return new Response('', 201);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering ErrorHandler in Silex to Convert PHP Errors to Exceptions\nDESCRIPTION: Demonstrates how to register Symfony's ErrorHandler to catch PHP errors and notices by converting them to exceptions which can then be caught by Silex.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/error_handler.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Debug\\ErrorHandler;\n\nErrorHandler::register();\n```\n\n----------------------------------------\n\nTITLE: Using Translation Shortcuts in Silex PHP\nDESCRIPTION: Demonstrates the use of translation shortcuts provided by the TranslationTrait in a Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app->trans('Hello World');\n\n$app->transChoice('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Creating Users Database Schema in Silex\nDESCRIPTION: This code creates a database schema for storing user data and inserts sample users, including usernames, hashed passwords, and assigned roles.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\DBAL\\Schema\\Table;\n\n$schema = $app['db']->getSchemaManager();\nif (!$schema->tablesExist('users')) {\n    $users = new Table('users');\n    $users->addColumn('id', 'integer', array('unsigned' => true, 'autoincrement' => true));\n    $users->setPrimaryKey(array('id'));\n    $users->addColumn('username', 'string', array('length' => 32));\n    $users->addUniqueIndex(array('username'));\n    $users->addColumn('password', 'string', array('length' => 255));\n    $users->addColumn('roles', 'string', array('length' => 255));\n\n    $schema->createTable($users);\n\n    $app['db']->insert('users', array(\n      'username' => 'fabien',\n      'password' => '$2y$10$3i9/lVd8UOFIJ6PAMFt8gu3/r5g0qeCJvoSlLCsvMTythye19F77a',\n      'roles' => 'ROLE_USER'\n    ));\n\n    $app['db']->insert('users', array(\n      'username' => 'admin',\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebTestCase for Silex\nDESCRIPTION: Example of extending Silex WebTestCase class and implementing the required createApplication method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/testing.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\WebTestCase;\n\nclass ContactFormTest extends WebTestCase\n{\n    public function createApplication()\n    {\n        return require __DIR__.'/path/to/app.php';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Controller Collection in Silex PHP\nDESCRIPTION: This snippet demonstrates how to apply middleware (in this case, a login check) to an entire collection of controllers. It uses the before() method on a controller collection to ensure all routes in that collection require logged-in users.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/organizing_controllers.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$backend = $app['controllers_factory'];\n\n// ensure that all controllers require logged-in users\n$backend->before($mustBeLogged);\n```\n\n----------------------------------------\n\nTITLE: Configuring Swiftmailer Plugins in Silex\nDESCRIPTION: Example of adding plugins to SwiftmailerServiceProvider. This snippet shows how to configure a PopBeforeSmtp plugin which authenticates with a POP3 server before sending mail via SMTP.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app['swiftmailer.plugins'] = function ($app) {\n    return array(\n        new \\Swift_Plugins_PopBeforeSmtpPlugin('pop3.example.com'),\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route with Parameters\nDESCRIPTION: Shows how to create a route with dynamic parameters and handle 404 errors for individual blog post views.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/blog/{id}', function (Silex\\Application $app, $id) use ($blogPosts) {\n    if (!isset($blogPosts[$id])) {\n        $app->abort(404, \"Post $id does not exist.\");\n    }\n\n    $post = $blogPosts[$id];\n\n    return  \"<h1>{$post['title']}</h1>\".\n            \"<p>{$post['body']}</p>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Using URL Generator with Silex Routes\nDESCRIPTION: Example showing how to define named routes and use the url_generator service to create links. This demonstrates binding route names and generating URLs with parameters.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/routing.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/', function () {\n    return 'welcome to the homepage';\n})\n->bind('homepage');\n\n$app->get('/hello/{name}', function ($name) {\n    return \"Hello $name!\";\n})\n->bind('hello');\n\n$app->get('/navigation', function () use ($app) {\n    return '<a href=\"'.$app['url_generator']->generate('homepage').'\">Home</a>'.'\n           ' | '.'\n           '<a href=\"'.$app['url_generator']->generate('hello', array('name' => 'Igor')).'\">Hello Igor</a>';\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Role Hierarchy in Silex Security\nDESCRIPTION: This configuration establishes a role hierarchy where higher-level roles automatically inherit permissions from lower-level roles.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$app['security.role_hierarchy'] = array(\n    'ROLE_ADMIN' => array('ROLE_USER', 'ROLE_ALLOWED_TO_SWITCH'),\n);\n```\n\n----------------------------------------\n\nTITLE: Redirects and Forwards in PHP Silex\nDESCRIPTION: Implement page redirects and internal forwards between controllers.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\n$app->get('/', function () use ($app) {\n    // forward to /hello\n    $subRequest = Request::create('/hello', 'GET');\n\n    return $app->handle($subRequest, HttpKernelInterface::SUB_REQUEST);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Twig Environment\nDESCRIPTION: Example of extending the Twig service to add global variables and custom filters.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$app->extend('twig', function($twig, $app) {\n    $twig->addGlobal('pi', 3.14);\n    $twig->addFilter('levenshtein', new \\Twig_Filter_Function('levenshtein'));\n\n    return $twig;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Database Connections in Silex PHP\nDESCRIPTION: This example demonstrates how to use multiple database connections in a Silex application. It performs a read operation on one connection and a write operation on another, showcasing the flexibility of the DoctrineServiceProvider.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/doctrine.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/blog/{id}', function ($id) use ($app) {\n    $sql = \"SELECT * FROM posts WHERE id = ?\";\n    $post = $app['dbs']['mysql_read']->fetchAssoc($sql, array((int) $id));\n\n    $sql = \"UPDATE posts SET value = ? WHERE id = ?\";\n    $app['dbs']['mysql_write']->executeUpdate($sql, array('newValue', (int) $id));\n\n    return  \"<h1>{$post['title']}</h1>\".\n            \"<p>{$post['body']}</p>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing a Specific Monolog Logger in Silex\nDESCRIPTION: This snippet shows how to customize a specific logger (payments) with its own configuration including a dedicated log file and log level. It creates a new StreamHandler for the payments logger.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/multiple_loggers.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Monolog\\Handler\\StreamHandler;\n\n$app['monolog.payments'] = function ($app) {\n    $log = new $app['monolog.logger.class']('payments');\n    $handler = new StreamHandler($app['monolog.payments.logfile'], $app['monolog.payment.level']);\n    $log->pushHandler($handler);\n\n    return $log;\n};\n```\n\n----------------------------------------\n\nTITLE: Global Controller Configuration in PHP Silex\nDESCRIPTION: Apply configuration settings to all controllers including converters, middleware, requirements and default values.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$app['controllers']\n    ->value('id', '1')\n    ->assert('id', '\\d+')\n    ->requireHttps()\n    ->method('get')\n    ->convert('id', function () { /* ... */ })\n    ->before(function () { /* ... */ })\n    ->when('request.isSecure() == true')\n;\n```\n\n----------------------------------------\n\nTITLE: Disabling CSRF Protection When Creating a Form in Silex PHP\nDESCRIPTION: This snippet demonstrates how to disable CSRF protection on a form by setting the 'csrf_protection' option to false when creating a form builder. This is useful in scenarios where CSRF protection is not needed, such as when embedding forms in HTML emails.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/form_no_csrf.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = $app['form.factory']->createBuilder('form', null, array('csrf_protection' => false));\n```\n\n----------------------------------------\n\nTITLE: Session Authentication Example in Silex\nDESCRIPTION: Complete example demonstrating user authentication with session management in Silex. Shows how to create and access session data for user authentication.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/session.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$app->get('/login', function (Request $request) use ($app) {\n    $username = $request->server->get('PHP_AUTH_USER', false);\n    $password = $request->server->get('PHP_AUTH_PW');\n\n    if ('igor' === $username && 'password' === $password) {\n        $app['session']->set('user', array('username' => $username));\n        return $app->redirect('/account');\n    }\n\n    $response = new Response();\n    $response->headers->set('WWW-Authenticate', sprintf('Basic realm=\"%s\"', 'site_login'));\n    $response->setStatusCode(401, 'Please sign in.');\n    return $response;\n});\n\n$app->get('/account', function () use ($app) {\n    if (null === $user = $app['session']->get('user')) {\n        return $app->redirect('/login');\n    }\n\n    return \"Welcome {$user['username']}!\";\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Email Values in Silex\nDESCRIPTION: Demonstrates how to validate email addresses using the validator service with Assert\\Email constraint.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/validator.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n$app->get('/validate/{email}', function ($email) use ($app) {\n    $errors = $app['validator']->validate($email, new Assert\\Email());\n\n    if (count($errors) > 0) {\n        return (string) $errors;\n    } else {\n        return 'The email is valid';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Stacking Multiple Route Middleware in Silex PHP\nDESCRIPTION: Demonstrates how to add multiple before and after middleware to a specific route. The middleware is executed in the order they are added.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/somewhere', function () {\n    // ...\n})\n->before($before1)\n->before($before2)\n->after($after1)\n->after($after2)\n;\n```\n\n----------------------------------------\n\nTITLE: Advanced Fragment Rendering Strategies in Twig\nDESCRIPTION: Shows different fragment rendering strategies including standard render, ESI (Edge Side Includes), and HInclude methods for handling sub-requests.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_fragment.rst#2025-04-15_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n{{ render(url('route_name')) }}\n\n{{ render_esi(url('route_name')) }}\n\n{{ render_hinclude(url('route_name')) }}\n```\n\n----------------------------------------\n\nTITLE: Streaming Response Implementation in Silex\nDESCRIPTION: Shows how to implement streaming responses for serving large files or data streams. Includes examples of basic streaming and chunked transfer with buffer flushing.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/images/{file}', function ($file) use ($app) {\n    if (!file_exists(__DIR__.'/images/'.$file)) {\n        return $app->abort(404, 'The image was not found.');\n    }\n\n    $stream = function () use ($file) {\n        readfile($file);\n    };\n\n    return $app->stream($stream, 200, array('Content-Type' => 'image/png'));\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$stream = function () {\n    $fh = fopen('http://www.example.com/', 'rb');\n    while (!feof($fh)) {\n        echo fread($fh, 1024);\n        ob_flush();\n        flush();\n    }\n    fclose($fh);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Silex Applications\nDESCRIPTION: Minimum Nginx configuration to run a Silex application. This handles URL rewriting, PHP-FPM configuration, and proper security practices for preventing direct access to PHP files.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/web_servers.rst#2025-04-15_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    server_name domain.tld www.domain.tld;\n    root /var/www/project/web;\n\n    location / {\n        # try to serve file directly, fallback to front controller\n        try_files $uri /index.php$is_args$args;\n    }\n\n    # If you have 2 front controllers for dev|prod use the following line instead\n    # location ~ ^/(index|index_dev)\\.php(/|$) {\n    location ~ ^/index\\.php(/|$) {\n        # the ubuntu default\n        fastcgi_pass   unix:/var/run/php/phpX.X-fpm.sock;\n        # for running on centos\n        #fastcgi_pass   unix:/var/run/php-fpm/www.sock;\n\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTPS off;\n    \n        # Prevents URIs that include the front controller. This will 404:\n        # http://domain.tld/index.php/some-path\n        # Enable the internal directive to disable URIs like this\n        # internal;\n    }\n\n    #return 404 for all php files as we do have a front controller\n    location ~ \\.php$ {\n        return 404;\n    }\n\n    error_log /var/log/nginx/project_error.log;\n    access_log /var/log/nginx/project_access.log;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Associative Arrays in Silex\nDESCRIPTION: Shows how to validate nested associative arrays using collection constraints with multiple validation rules.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/validator.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n$book = array(\n    'title' => 'My Book',\n    'author' => array(\n        'first_name' => 'Fabien',\n        'last_name'  => 'Potencier',\n    ),\n);\n\n$constraint = new Assert\\Collection(array(\n    'title' => new Assert\\Length(array('min' => 10)),\n    'author' => new Assert\\Collection(array(\n        'first_name' => array(new Assert\\NotBlank(), new Assert\\Length(array('min' => 10))),\n        'last_name'  => new Assert\\Length(array('min' => 10)),\n    )),\n));\n$errors = $app['validator']->validate($book, $constraint);\n```\n\n----------------------------------------\n\nTITLE: Building and Handling Forms in Silex PHP Application\nDESCRIPTION: Demonstrates how to create, configure, and handle a form using the form.factory service in a Silex application route.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\n\n$app->match('/form', function (Request $request) use ($app) {\n    // some default data for when the form is displayed the first time\n    $data = array(\n        'name' => 'Your name',\n        'email' => 'Your email',\n    );\n\n    $form = $app['form.factory']->createBuilder(FormType::class, $data)\n        ->add('name')\n        ->add('email')\n        ->add('billing_plan', ChoiceType::class, array(\n            'choices' => array('free' => 1, 'small business' => 2, 'corporate' => 3),\n            'expanded' => true,\n        ))\n        ->add('submit', SubmitType::class, [\n            'label' => 'Save',\n        ])\n        ->getForm();\n\n    $form->handleRequest($request);\n\n    if ($form->isValid()) {\n        $data = $form->getData();\n\n        // do something with the data\n\n        // redirect somewhere\n        return $app->redirect('...');\n    }\n\n    // display the form\n    return $app['twig']->render('index.twig', array('form' => $form->createView()));\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Middleware Priority in Silex PHP\nDESCRIPTION: Specifies the execution priority of a middleware by providing a numeric value as the second parameter. Higher values indicate higher priority.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$app->before(function (Request $request) {\n    // ...\n}, 32);\n```\n\n----------------------------------------\n\nTITLE: Registering ExceptionHandler in Silex to Handle Fatal Errors\nDESCRIPTION: Shows how to register Symfony's ExceptionHandler to catch and handle fatal PHP errors in Silex applications.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/error_handler.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Debug\\ExceptionHandler;\n\nExceptionHandler::register();\n```\n\n----------------------------------------\n\nTITLE: Implementing Application After Middleware in Silex PHP\nDESCRIPTION: Adds an 'after' middleware that can modify the Response object before it's sent to the client. This is registered on the Symfony 'response' event.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app->after(function (Request $request, Response $response) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying Route After Middleware in Silex PHP\nDESCRIPTION: Creates an after middleware function and attaches it to a specific route. This middleware executes after the route callback but before application-wide after middleware.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$after = function (Request $request, Response $response, Application $app) {\n    // ...\n};\n\n$app->get('/somewhere', function () {\n    // ...\n})\n->after($after);\n```\n\n----------------------------------------\n\nTITLE: User Impersonation Controls in Twig Templates\nDESCRIPTION: These templates provide UI elements for user switching, including both switch-to-user functionality and exit switching when already impersonating a user.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_11\n\nLANGUAGE: jinja\nCODE:\n```\n{% if is_granted('ROLE_ALLOWED_TO_SWITCH') %}\n    <a href=\"?_switch_user=fabien\">Switch to user Fabien</a>\n{% endif %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% if is_granted('ROLE_PREVIOUS_ADMIN') %}\n    You are an admin but you've switched to another user,\n    <a href=\"?_switch_user=_exit\"> exit</a> the switch.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy-Loaded Services in Silex\nDESCRIPTION: Demonstrates how to define services using closures for lazy instantiation and dependency injection.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/services.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app['some_service'] = function () {\n    return new Service();\n};\n\n$service = $app['some_service'];\n```\n\n----------------------------------------\n\nTITLE: Registering RoutingServiceProvider in Silex\nDESCRIPTION: Example of how to register the Routing Service Provider in a Silex application. This provides the url_generator service for generating URLs from route names.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/routing.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\RoutingServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Basic Route Parameter Assert Validation in PHP Silex\nDESCRIPTION: Configure route parameter validation using regex patterns to ensure postId and commentId are digits.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n->assert('postId', '\\d+')\n->assert('commentId', '\\d+');\n```\n\n----------------------------------------\n\nTITLE: Configuring Logout Functionality in Silex Security\nDESCRIPTION: This code configures logout functionality for a secured area of a Silex application, specifying the logout path and session invalidation settings.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$app['security.firewalls'] = array(\n    'secured' => array(\n        'pattern' => '^/admin/',\n        'form' => array('login_path' => '/login', 'check_path' => '/admin/login_check'),\n        'logout' => array('logout_path' => '/admin/logout', 'invalidate_session' => true),\n\n        // ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Link in Twig Template\nDESCRIPTION: This Twig template snippet creates a logout link using the path helper, accessing the automatically generated route from the security configuration.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_6\n\nLANGUAGE: jinja\nCODE:\n```\n<a href=\"{{ path('admin_logout') }}\">Logout</a>\n```\n\n----------------------------------------\n\nTITLE: Validating Objects with Runtime Metadata in Silex\nDESCRIPTION: Demonstrates object validation by defining constraints at runtime using class metadata factory.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/validator.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Book\n{\n    public $title;\n    public $author;\n}\n\nclass Author\n{\n    public $first_name;\n    public $last_name;\n}\n\n$author = new Author();\n$author->first_name = 'Fabien';\n$author->last_name = 'Potencier';\n\n$book = new Book();\n$book->title = 'My Book';\n$book->author = $author;\n\n$metadata = $app['validator.mapping.class_metadata_factory']->getMetadataFor('Author');\n$metadata->addPropertyConstraint('first_name', new Assert\\NotBlank());\n$metadata->addPropertyConstraint('first_name', new Assert\\Length(array('min' => 10)));\n$metadata->addPropertyConstraint('last_name', new Assert\\Length(array('min' => 10)));\n\n$metadata = $app['validator.mapping.class_metadata_factory']->getMetadataFor('Book');\n$metadata->addPropertyConstraint('title', new Assert\\Length(array('min' => 10)));\n$metadata->addPropertyConstraint('author', new Assert\\Valid());\n```\n\n----------------------------------------\n\nTITLE: Creating and Validating CSRF Tokens in Silex (PHP)\nDESCRIPTION: This snippet shows how to create and validate CSRF tokens using the CSRF token manager provided by the CsrfServiceProvider. It demonstrates creating a token for a specific ID and then validating it.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/csrf.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\n$csrfToken = $app['csrf.token_manager']->getToken('token_id'); //'TOKEN'\n\n// Then check it:\n$app['csrf.token_manager']->isTokenValid(new CsrfToken('token_id', 'TOKEN'));\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON User Persistence Service in PHP\nDESCRIPTION: Example class that demonstrates dependency injection by accepting a base path parameter and using it to persist User objects as JSON files.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/services.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass JsonUserPersister\n{\n    private $basePath;\n\n    public function __construct($basePath)\n    {\n        $this->basePath = $basePath;\n    }\n\n    public function persist(User $user)\n    {\n        $data = $user->getAttributes();\n        $json = json_encode($data);\n        $filename = $this->basePath.'/'.$user->id.'.json';\n        file_put_contents($filename, $json, LOCK_EX);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache with mod_rewrite for Silex\nDESCRIPTION: Apache .htaccess configuration using mod_rewrite to route all requests to the Silex front controller. This handles URL rewriting for clean URLs in Silex applications.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/web_servers.rst#2025-04-15_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_rewrite.c>\n    Options -MultiViews\n\n    RewriteEngine On\n    #RewriteBase /path/to/app\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.php [QSA,L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Databases in Silex with DoctrineServiceProvider\nDESCRIPTION: This snippet shows how to configure multiple database connections using the DoctrineServiceProvider in Silex. It sets up separate read and write connections for a MySQL database with different hosts.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/doctrine.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\DoctrineServiceProvider(), array(\n    'dbs.options' => array (\n        'mysql_read' => array(\n            'driver'    => 'pdo_mysql',\n            'host'      => 'mysql_read.someplace.tld',\n            'dbname'    => 'my_database',\n            'user'      => 'my_username',\n            'password'  => 'my_password',\n            'charset'   => 'utf8mb4',\n        ),\n        'mysql_write' => array(\n            'driver'    => 'pdo_mysql',\n            'host'      => 'mysql_write.someplace.tld',\n            'dbname'    => 'my_database',\n            'user'      => 'my_username',\n            'password'  => 'my_password',\n            'charset'   => 'utf8mb4',\n        ),\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Factory Services in Silex\nDESCRIPTION: Shows how to create factory services that return a new instance on each access using the factory() method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/services.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app['some_service'] = $app->factory(function () {\n    return new Service();\n});\n```\n\n----------------------------------------\n\nTITLE: Service Controller Class Implementation\nDESCRIPTION: Shows how to create a dedicated controller class with proper dependency injection for handling post-related requests.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/service_controller.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace Demo\\Controller;\n\nuse Demo\\Repository\\PostRepository;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\nclass PostController\n{\n    protected $repo;\n\n    public function __construct(PostRepository $repo)\n    {\n        $this->repo = $repo;\n    }\n\n    public function indexJsonAction()\n    {\n        return new JsonResponse($this->repo->findAll());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Post Creation Controller in Silex\nDESCRIPTION: This controller handles the creation of a new blog post. It extracts data from the request, simulates post creation, and returns a JSON response with a 201 status code. The controller assumes the existence of a createPost function.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/json_request_body.rst#2025-04-15_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$app->post('/blog/posts', function (Request $request) use ($app) {\n    $post = array(\n        'title' => $request->request->get('title'),\n        'body'  => $request->request->get('body'),\n    );\n\n    $post['id'] = createPost($post);\n\n    return $app->json($post, 201);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Routing Functions in Twig Templates\nDESCRIPTION: Examples of using path() and url() functions in Twig templates for generating URLs.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n{{ path('homepage') }}\n{{ url('homepage') }} {# generates the absolute url http://example.org/ #}\n{{ path('hello', {name: 'Fabien'}) }}\n{{ url('hello', {name: 'Fabien'}) }} {# generates the absolute url http://example.org/hello/Fabien #}\n```\n\n----------------------------------------\n\nTITLE: Adding Validation to Forms in Silex PHP Application\nDESCRIPTION: Demonstrates how to add validation constraints to form fields when using the ValidatorServiceProvider.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n$app->register(new Silex\\Provider\\ValidatorServiceProvider());\n$app->register(new Silex\\Provider\\TranslationServiceProvider(), array(\n    'translator.domains' => array(),\n));\n\n$form = $app['form.factory']->createBuilder(FormType::class)\n    ->add('name', TextType::class, array(\n        'constraints' => array(new Assert\\NotBlank(), new Assert\\Length(array('min' => 5)))\n    ))\n    ->add('email', TextType::class, array(\n        'constraints' => new Assert\\Email()\n    ))\n    ->add('billing_plan', ChoiceType::class, array(\n        'choices' => array('free' => 1, 'small business' => 2, 'corporate' => 3),\n        'expanded' => true,\n        'constraints' => new Assert\\Choice(array(1, 2, 3)),\n    ))\n    ->add('submit', SubmitType::class, [\n        'label' => 'Save',\n    ])\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Validating Objects with Static Metadata in Silex\nDESCRIPTION: Shows how to validate objects using static loadValidatorMetadata method to define constraints within the class.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/validator.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Book\n{\n    public $title;\n    public $author;\n\n    static public function loadValidatorMetadata(ClassMetadata $metadata)\n    {\n        $metadata->addPropertyConstraint('title', new Assert\\Length(array('min' => 10)));\n        $metadata->addPropertyConstraint('author', new Assert\\Valid());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database-backed UserProvider in Silex\nDESCRIPTION: This class implements the UserProviderInterface to load users from a database, providing user authentication and management functionality.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Security\\Core\\User\\UserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\User;\nuse Symfony\\Component\\Security\\Core\\Exception\\UnsupportedUserException;\nuse Symfony\\Component\\Security\\Core\\Exception\\UsernameNotFoundException;\nuse Doctrine\\DBAL\\Connection;\n\nclass UserProvider implements UserProviderInterface\n{\n    private $conn;\n\n    public function __construct(Connection $conn)\n    {\n        $this->conn = $conn;\n    }\n\n    public function loadUserByUsername($username)\n    {\n        $stmt = $this->conn->executeQuery('SELECT * FROM users WHERE username = ?', array(strtolower($username)));\n\n        if (!$user = $stmt->fetch()) {\n            throw new UsernameNotFoundException(sprintf('Username \"%s\" does not exist.', $username));\n        }\n\n        return new User($user['username'], $user['password'], explode(',', $user['roles']), true, true, true, true);\n    }\n\n    public function refreshUser(UserInterface $user)\n    {\n        if (!$user instanceof User) {\n            throw new UnsupportedUserException(sprintf('Instances of \"%s\" are not supported.', get_class($user)));\n        }\n\n        return $this->loadUserByUsername($user->getUsername());\n    }\n\n    public function supportsClass($class)\n    {\n        return $class === 'Symfony\\Component\\Security\\Core\\User\\User';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Implementation for Sub-Request in PHP\nDESCRIPTION: Example of a Silex controller that creates and returns a sub-request response.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/sub_requests.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Application;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\n$app->get('/foo', function (Application $app, Request $request) {\n    $subRequest = Request::create('/', ...);\n    $response = $app->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);\n\n    return $response;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering FormServiceProvider in Silex PHP Application\nDESCRIPTION: Shows how to register the FormServiceProvider in a Silex application. Also mentions the need for TranslationServiceProvider if using the default form layout.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Provider\\FormServiceProvider;\n\n$app->register(new FormServiceProvider());\n\n$app->register(new Silex\\Provider\\TranslationServiceProvider(), array(\n    'translator.domains' => array(),\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Swiftmailer Options in Silex\nDESCRIPTION: Example of setting SMTP configuration options for the SwiftmailerServiceProvider in Silex. This shows how to configure host, port, authentication credentials, encryption and auth mode.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app['swiftmailer.options'] = array(\n    'host' => 'host',\n    'port' => '25',\n    'username' => 'username',\n    'password' => 'password',\n    'encryption' => null,\n    'auth_mode' => null\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Route Class with Security Traits\nDESCRIPTION: Example of creating a custom Route class that uses the SecurityTrait to enable the secure() method for role-based access control on routes.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Route;\n\nclass MyRoute extends Route\n{\n    use Route\\SecurityTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: Trusting Proxies in Silex Application\nDESCRIPTION: This snippet demonstrates how to configure a Silex application to trust X-Forwarded-For headers from a reverse proxy. It sets the trusted proxies to localhost IP addresses.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_cache.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nRequest::setTrustedProxies(array('127.0.0.1', '::1'));\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Basic Sub-Request Handling in PHP\nDESCRIPTION: Demonstrates how to create and handle a basic sub-request using Silex's handle method. Uses the HttpKernelInterface to process the request as a sub-request.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/sub_requests.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\n$subRequest = Request::create('/');\n$response = $app->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation Domains in Silex PHP\nDESCRIPTION: Illustrates how to set up translation domains with multiple languages and message types in a Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app['translator.domains'] = array(\n    'messages' => array(\n        'en' => array(\n            'hello'     => 'Hello %name%',\n            'goodbye'   => 'Goodbye %name%',\n        ),\n        'de' => array(\n            'hello'     => 'Hallo %name%',\n            'goodbye'   => 'Tschüss %name%',\n        ),\n        'fr' => array(\n            'hello'     => 'Bonjour %name%',\n            'goodbye'   => 'Au revoir %name%',\n        ),\n    ),\n    'validators' => array(\n        'fr' => array(\n            'This value should be a valid number.' => 'Cette valeur doit être un nombre.',\n        ),\n    ),\n);\n\n$app->get('/{_locale}/{message}/{name}', function ($message, $name) use ($app) {\n    return $app['translator']->trans($message, array('%name%' => $name));\n});\n```\n\n----------------------------------------\n\nTITLE: Registering HttpCacheServiceProvider in Silex\nDESCRIPTION: This snippet demonstrates how to register the HttpCacheServiceProvider with a Silex application. It specifies the cache directory for storing HTTP cache data.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_cache.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\HttpCacheServiceProvider(), array(\n    'http_cache.cache_dir' => __DIR__.'/cache/',\n));\n```\n\n----------------------------------------\n\nTITLE: Conditional Route Matching in PHP Silex\nDESCRIPTION: Define route matching conditions based on request headers using Symfony Expression Language.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/blog/{id}', function ($id) {\n    // ...\n})\n->when(\"request.headers.get('User-Agent') matches '/firefox/i'\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Sub-Request with Request Forwarding in PHP\nDESCRIPTION: Shows how to create a sub-request while forwarding cookies, server information, and session data from the master request.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/sub_requests.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\n$subRequest = Request::create('/', 'GET', array(), $request->cookies->all(), array(), $request->server->all());\nif ($request->getSession()) {\n    $subRequest->setSession($request->getSession());\n}\n\n$response = $app->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Twig Templates\nDESCRIPTION: Examples of accessing the global variable in Twig templates to get request, user, session, debug information and flash messages.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_5\n\nLANGUAGE: jinja\nCODE:\n```\n{# The current Request #}\n{{ global.request }}\n\n{# The current User (when security is enabled) #}\n{{ global.user }}\n\n{# The current Session #}\n{{ global.session }}\n\n{# The debug flag #}\n{{ global.debug }}\n\n{# The flash messages (Symfony 3.3 or later) #}\n{{ global.flashes }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Registering ExceptionHandler Based on PHP SAPI\nDESCRIPTION: Shows how to selectively register the ExceptionHandler only for web requests while avoiding it for command-line interfaces to prevent HTML output in CLI environments.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/error_handler.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Debug\\ExceptionHandler;\n\nif (!in_array(PHP_SAPI, ['cli', 'phpdbg'])) {\n    ExceptionHandler::register();\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Flushing Email Queue in Console Commands for Silex\nDESCRIPTION: Example of manually flushing the email spool queue when using SwiftmailerServiceProvider in console commands to ensure emails are sent.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$app['swiftmailer.spooltransport']\n    ->getSpool()\n    ->flushQueue($app['swiftmailer.transport'])\n;\n```\n\n----------------------------------------\n\nTITLE: Installing Silex with Composer\nDESCRIPTION: Command to install Silex version 2.0 using Composer package manager. This is the recommended installation method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/README.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silex/silex \"~2.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Silex Application with HTTP Cache\nDESCRIPTION: This example shows how to run a Silex application using the http_cache service provided by the HttpCacheServiceProvider. It also sets the trusted proxy to localhost.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_cache.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n    \nRequest::setTrustedProxies(array('127.0.0.1'));\n$app['http_cache']->run();\n```\n\n----------------------------------------\n\nTITLE: Short-circuiting Controller Execution with Before Middleware in Silex PHP\nDESCRIPTION: Demonstrates how a before middleware can short-circuit the request handling by returning a Response object. This prevents subsequent middleware and the route callback from executing.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$app->before(function (Request $request) {\n    // redirect the user to the login screen if access to the Resource is protected\n    if (...) {\n        return new RedirectResponse('/login');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Service Controller Registration and Route Definition\nDESCRIPTION: Demonstrates how to register a controller as a service and define its route using service:method syntax.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/service_controller.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app['posts.controller'] = function() use ($app) {\n    return new PostController($app['posts.repository']);\n};\n\n$app->get('/posts.json', \"posts.controller:indexJsonAction\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Email Spooling for Console Commands in Silex\nDESCRIPTION: Shows how to disable the memory spool when sending emails from console commands, as the TERMINATE event isn't fired for commands.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$app['swiftmailer.use_spool'] = false;\n```\n\n----------------------------------------\n\nTITLE: Registering the SessionServiceProvider in Silex\nDESCRIPTION: Code snippet showing how to register the SessionServiceProvider with a Silex application instance.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/session.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\SessionServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Controller Provider in Silex\nDESCRIPTION: Demonstrates implementing the ControllerProviderInterface to create a reusable set of routes. The example provider creates a controller that redirects from '/' to '/hello'.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme;\n\nuse Silex\\Application;\nuse Silex\\Api\\ControllerProviderInterface;\n\nclass HelloControllerProvider implements ControllerProviderInterface\n{\n    public function connect(Application $app)\n    {\n        // creates a new controller based on the default route\n        $controllers = $app['controllers_factory'];\n\n        $controllers->get('/', function (Application $app) {\n            return $app->redirect('/hello');\n        });\n\n        return $controllers;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ESI in Silex with HTTP Cache\nDESCRIPTION: This snippet demonstrates how to use Edge Side Includes (ESI) with HTTP caching in Silex. It defines two routes: one with an ESI include and another for the included content.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_cache.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/', function() {\n    $response = new Response(<<<EOF\n<html>\n    <body>\n        Hello\n        <esi:include src=\"/included\" />\n    </body>\n</html>\n\nEOF\n    , 200, array(\n        'Surrogate-Control' => 'content=\"ESI/1.0\"',\n    ));\n\n    $response->setTtl(20);\n\n    return $response;\n});\n\n$app->get('/included', function() {\n    $response = new Response('Foo');\n    $response->setTtl(5);\n\n    return $response;\n});\n\n$app['http_cache']->run();\n```\n\n----------------------------------------\n\nTITLE: Functional Controller Registration\nDESCRIPTION: Demonstrates how to register and use a functional controller as a service.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/service_controller.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$app['posts.controller'] = function($app) {\n    return Demo\\Controller\\postIndexJson($app['posts.repository']);\n};\n\n$app->get('/posts.json', 'posts.controller');\n```\n\n----------------------------------------\n\nTITLE: Default Route Values in PHP Silex\nDESCRIPTION: Set default values for route parameters when not provided in the URL.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/{pageName}', function ($pageName) {\n    // ...\n})\n->value('pageName', 'index');\n```\n\n----------------------------------------\n\nTITLE: Rendering Controllers from Twig Templates\nDESCRIPTION: Examples of using the render function to call other controllers from within Twig templates.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_6\n\nLANGUAGE: jinja\nCODE:\n```\n{{ render(url('sidebar')) }}\n\n{# or you can reference a controller directly without defining a route for it #}\n{{ render(controller(controller)) }}\n```\n\n----------------------------------------\n\nTITLE: Checking User Roles in Twig Templates\nDESCRIPTION: These Twig templates demonstrate how to check user roles and authentication status to conditionally display content like user switching links and login/logout options.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_9\n\nLANGUAGE: jinja\nCODE:\n```\n{% if is_granted('ROLE_ADMIN') %}\n    <a href=\"/secured?_switch_user=fabien\">Switch to Fabien</a>\n{% endif %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% if is_granted('IS_AUTHENTICATED_FULLY') %}\n    <a href=\"{{ path('logout') }}\">Logout</a>\n{% else %}\n    <a href=\"{{ path('login') }}\">Login</a>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: POST Route for Form Handling\nDESCRIPTION: Example of handling POST requests for a feedback form with email notification.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$app->post('/feedback', function (Request $request) {\n    $message = $request->get('message');\n    mail('feedback@yoursite.com', '[YourSite] Feedback', $message);\n\n    return new Response('Thank you for your feedback!', 201);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Test Class Structure\nDESCRIPTION: Full example of a test class showing namespace, WebTestCase extension, and test method structure.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/testing.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace YourApp\\Tests;\n\nuse Silex\\WebTestCase;\n\nclass YourTest extends WebTestCase\n{\n    public function createApplication()\n    {\n        return require __DIR__.'/../../../app.php';\n    }\n\n    public function testFooBar()\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache with SerializerServiceProvider in Silex\nDESCRIPTION: Example showing how to register custom normalizers with a cache for the serializer service. This replaces the default normalizers with custom ones that use Doctrine cache.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/serializer.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\SerializerServiceProvider());\n$app['serializer.normalizers'] = function () use ($app) {\n    return [new \\Symfony\\Component\\Serializer\\Normalizer\\CustomNormalizer(),\n        new \\Symfony\\Component\\Serializer\\Normalizer\\GetSetMethodNormalizer(new ClassMetadataFactory(new  AnnotationLoader(new AnnotationReader()), $app['my_custom_cache']))\n    ];\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine DBAL via Composer for Silex\nDESCRIPTION: This command installs Doctrine DBAL as a dependency for the Silex project using Composer. It specifies version 2.2 or higher of the doctrine/dbal package.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/doctrine.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"doctrine/dbal:~2.2\"\n```\n\n----------------------------------------\n\nTITLE: Using Security Traits for Password Encoding in Silex\nDESCRIPTION: Example of using the SecurityTrait to encode a password in a Silex application. This trait provides a convenient shortcut for password encoding functionality.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$encoded = $app->encodePassword($app['user'], 'foo');\n```\n\n----------------------------------------\n\nTITLE: Login Form Template in Twig\nDESCRIPTION: Twig template for rendering a basic login form with error handling and last username display.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n<form action=\"{{ path('admin_login_check') }}\" method=\"post\">\n    {{ error }}\n    <input type=\"text\" name=\"_username\" value=\"{{ last_username }}\" />\n    <input type=\"password\" name=\"_password\" value=\"\" />\n    <input type=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Encoder in Silex\nDESCRIPTION: Example of overriding the default BCrypt password encoder to use another predefined encoder like PBKDF2. This allows customizing how passwords are hashed and stored in the system.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$app['security.default_encoder'] = function ($app) {\n    return $app['security.encoder.pbkdf2'];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Finish Middleware in Silex PHP\nDESCRIPTION: Adds a 'finish' middleware that executes tasks after the Response has been sent to the client. Any modifications to Request or Response objects are ignored at this stage.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app->finish(function (Request $request, Response $response) {\n    // ...\n    // Warning: modifications to the Request or Response will be ignored\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Monolog Configuration\nDESCRIPTION: Demonstrates how to extend the Monolog service to add or modify handlers.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/monolog.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app->extend('monolog', function($monolog, $app) {\n    $monolog->pushHandler(...);\n\n    return $monolog;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Anonymous Authentication in Silex\nDESCRIPTION: This snippet shows how to enable anonymous authentication for non-secured areas while still making user information accessible throughout the application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$app['security.firewalls'] = array(\n    'unsecured' => array(\n        'anonymous' => true,\n\n        // ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Feedback Form Email Handler in Silex\nDESCRIPTION: Example of a route handler that processes form submissions and sends feedback emails using the SwiftmailerServiceProvider. This demonstrates creating and sending a Swift_Message within a route callback.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$app->post('/feedback', function (Request $request) use ($app) {\n    $message = \\Swift_Message::newInstance()\n        ->setSubject('[YourSite] Feedback')\n        ->setFrom(array('noreply@yoursite.com'))\n        ->setTo(array('feedback@yoursite.com'))\n        ->setBody($request->get('message'));\n\n    $app['mailer']->send($message);\n\n    return new Response('Thank you for your feedback!', 201);\n});\n```\n\n----------------------------------------\n\nTITLE: Using TwigTrait for Simplified Rendering\nDESCRIPTION: Examples of using the TwigTrait to render templates and return Response objects or string content.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn $app->render('index.html', ['name' => 'Fabien']);\n\n$response = new Response();\n$response->setTtl(10);\n\nreturn $app->render('index.html', ['name' => 'Fabien'], $response);\n```\n\n----------------------------------------\n\nTITLE: Registering Early Application Before Middleware in Silex PHP\nDESCRIPTION: Adds a 'before' middleware that executes even if an exception is thrown early (like on 404/403 errors). It runs before routing and security are executed.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app->before(function (Request $request, Application $app) {\n    // ...\n}, Application::EARLY_EVENT);\n```\n\n----------------------------------------\n\nTITLE: Registering LocaleServiceProvider in Silex\nDESCRIPTION: Shows how to register the LocaleServiceProvider with a Silex application. This provider manages application locales and defaults to 'en' if not specified. The locale can be set via the _locale request attribute.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/locale.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\LocaleServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Using Path and URL Functions in Twig with Twig-Bridge\nDESCRIPTION: Example of using the path() and url() Twig functions available when twig-bridge is installed. These functions simplify URL generation in templates with optional parameters.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/routing.rst#2025-04-15_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{{ path('homepage') }}\n{{ url('homepage') }} {# generates the absolute url http://example.org/ #}\n{{ path('hello', {name: 'Fabien'}) }}\n{{ url('hello', {name: 'Fabien'}) }} {# generates the absolute url http://example.org/hello/Fabien #}\n```\n\n----------------------------------------\n\nTITLE: Registering Remember Me Provider with Security Configuration in Silex\nDESCRIPTION: Shows how to register the RememberMeServiceProvider alongside SecurityServiceProvider and configure the security firewall with remember-me options. Includes basic setup with form authentication and remember-me settings.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/remember_me.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\SecurityServiceProvider());\n$app->register(new Silex\\Provider\\RememberMeServiceProvider());\n\n$app['security.firewalls'] = array(\n    'my-firewall' => array(\n        'pattern'     => '^/secure$',\n        'form'        => true,\n        'logout'      => true,\n        'remember_me' => array(\n            'key'                => 'Choose_A_Unique_Random_Key',\n            'always_remember_me' => true,\n            /* Other options */\n        ),\n        'users' => array( /* ... */ ),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Form Component via Composer\nDESCRIPTION: Commands to install the Symfony Form component and related dependencies using Composer.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/form\n\ncomposer require symfony/validator symfony/config\n\ncomposer require symfony/twig-bridge\n```\n\n----------------------------------------\n\nTITLE: Custom Route Class with Security Trait in Silex\nDESCRIPTION: Demonstrates creating a custom Route class with security traits and configuring the application to use it.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Route;\n\nclass MyRoute extends Route\n{\n    use Route\\SecurityTrait;\n}\n\n$app['route_class'] = 'MyRoute';\n```\n\n----------------------------------------\n\nTITLE: Using UrlGeneratorTrait Shortcuts in Silex\nDESCRIPTION: Example of using the path() and url() methods provided by the UrlGeneratorTrait in Silex applications. These shortcuts simplify URL generation in PHP code.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/routing.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app->path('homepage');\n$app->url('homepage');\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Template in Twig\nDESCRIPTION: Shows how to render a form in a Twig template using the form_widget function.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n<form action=\"#\" method=\"post\">\n    {{ form_widget(form) }}\n\n    <input type=\"submit\" name=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Session Handler for Custom Configuration\nDESCRIPTION: Code example showing how to disable the default NativeFileSessionHandler when using a custom session handler configuration like Redis.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/session.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$app['session.storage.handler'] = null;\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Output in Production Using ExceptionHandler\nDESCRIPTION: Demonstrates how to register ExceptionHandler with debug mode disabled for production environments to prevent detailed error information from being displayed.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/error_handler.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Debug\\ExceptionHandler;\n\nExceptionHandler::register(false);\n```\n\n----------------------------------------\n\nTITLE: Accessing Container from Service Definition\nDESCRIPTION: Example of accessing the service container from within a service definition closure for dependency management.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/services.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app['some_service'] = function ($app) {\n    return new Service($app['some_other_service'], $app['some_service.config']);\n};\n```\n\n----------------------------------------\n\nTITLE: Mounting a Controller Provider in Silex\nDESCRIPTION: Shows how to mount a controller provider under a specific URL path in a Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app = new Silex\\Application();\n\n$app->mount('/blog', new Acme\\BlogControllerProvider());\n```\n\n----------------------------------------\n\nTITLE: Registering MonologServiceProvider in Silex\nDESCRIPTION: Shows how to register the MonologServiceProvider with Silex application and configure the log file location.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/monolog.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\MonologServiceProvider(), array(\n    'monolog.logfile' => __DIR__.'/development.log',\n));\n```\n\n----------------------------------------\n\nTITLE: Separating Controller Collections into Files in Silex PHP\nDESCRIPTION: This snippet shows how to improve code organization by separating controller collections into individual files. It demonstrates defining a blog controller collection in a separate file and then mounting it in the main application file.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/organizing_controllers.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// blog.php\n$blog = $app['controllers_factory'];\n$blog->get('/', function () { return 'Blog home page'; });\n\nreturn $blog;\n\n// app.php\n$app->mount('/blog', include 'blog.php');\n```\n\n----------------------------------------\n\nTITLE: Using FormTrait Shortcuts in Silex PHP Application\nDESCRIPTION: Shows how to use the form and namedForm shortcuts provided by the Silex\\Application\\FormTrait.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$app->form($data);\n\n$app->namedForm($name, $data, $options, $type);\n```\n\n----------------------------------------\n\nTITLE: Loading Translation Resources in Silex PHP\nDESCRIPTION: Shows how to load translation resources from an array into the translator service in a Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app = new Application();\n\n$app->register(new TranslationServiceProvider());\n$app->extend('translator.resources', function ($resources, $app) {\n    $resources = array_merge($resources, array(\n        array('array', array('This value should be a valid number.' => 'Cette valeur doit être un nombre.'), 'fr', 'validators'),\n    ));\n\n    return $resources;\n});\n```\n\n----------------------------------------\n\nTITLE: Functional Service Controller Implementation\nDESCRIPTION: Shows how to implement a controller as a callable function instead of a class.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/service_controller.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Demo\\Controller;\n\nuse Demo\\Repository\\PostRepository;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\nfunction postIndexJson(PostRepository $repo) {\n    return function() use ($repo) {\n        return new JsonResponse($repo->findAll());\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Security Service Provider in PHP\nDESCRIPTION: Shows how to register the SecurityServiceProvider with Silex application configuration.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\SecurityServiceProvider(), array(\n    'security.firewalls' => // see below\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing PHPUnit Test Case for Contact Form\nDESCRIPTION: Example of creating a basic PHPUnit test case class for testing a contact form. Shows class setup and test method structure.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/testing.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PHPUnit\\Framework\\TestCase;\n\nclass ContactFormTest extends TestCase\n{\n    public function testInitialPage()\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment Rendering in Twig Templates\nDESCRIPTION: Demonstrates the basic usage of the render() function to include sub-pages within a main template using internal sub-requests.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_fragment.rst#2025-04-15_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\nThe main page content.\n\n{{ render('/foo') }}\n\nThe main page content resumes here.\n```\n\n----------------------------------------\n\nTITLE: Setting Early and Late Execution Constants for Middleware in Silex PHP\nDESCRIPTION: Uses predefined constants to register middleware to execute as early or as late as possible in the middleware chain. This provides a convenient way to control execution order.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$app->before(function (Request $request) {\n    // ...\n}, Application::EARLY_EVENT);\n\n$app->before(function (Request $request) {\n    // ...\n}, Application::LATE_EVENT);\n```\n\n----------------------------------------\n\nTITLE: Registering TranslationServiceProvider in Silex PHP\nDESCRIPTION: Demonstrates how to register the LocaleServiceProvider and TranslationServiceProvider in a Silex application, setting locale fallbacks to English.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\LocaleServiceProvider());\n$app->register(new Silex\\Provider\\TranslationServiceProvider(), array(\n    'locale_fallbacks' => array('en'),\n));\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Asset Component via Composer\nDESCRIPTION: Command to install the required Symfony Asset Component dependency for the AssetServiceProvider.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/asset.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/asset\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Headers in Silex Response\nDESCRIPTION: This example shows how to set Cache-Control headers in a Silex route response. It creates a new Response object with a 's-maxage' directive set to 5 seconds.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_cache.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$app->get('/', function() {\n    return new Response('Foo', 200, array(\n        'Cache-Control' => 's-maxage=5',\n    ));\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Mailer Service in Silex\nDESCRIPTION: Example showing how to send an email using the mailer service provided by SwiftmailerServiceProvider. This creates a new message instance and sends it through the mailer service.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$message = \\Swift_Message::newInstance();\n\n// ...\n\n$app['mailer']->send($message);\n```\n\n----------------------------------------\n\nTITLE: Registering Validator Service Provider in Silex\nDESCRIPTION: Shows how to register the ValidatorServiceProvider in a Silex application and add the required Symfony validator dependency.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/validator.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\ValidatorServiceProvider());\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/validator\n```\n\n----------------------------------------\n\nTITLE: Registering CsrfServiceProvider in Silex (PHP)\nDESCRIPTION: This snippet demonstrates how to register the CsrfServiceProvider in a Silex application. It imports the necessary class and adds the provider to the application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/csrf.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Silex\\Provider\\CsrfServiceProvider;\n\n$app->register(new CsrfServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Twig Bridge via Composer\nDESCRIPTION: Command to install the Symfony Twig Bridge which is needed to use assets in Twig templates.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/asset.rst#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/twig-bridge\n```\n\n----------------------------------------\n\nTITLE: Using PHP's Built-in Server with Silex\nDESCRIPTION: PHP code for the front controller to work with PHP's built-in development server. This allows static files to be served directly while routing other requests to the Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/web_servers.rst#2025-04-15_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// web/index.php\n\n$filename = __DIR__.preg_replace('#(\\?.*)$#', '', $_SERVER['REQUEST_URI']);\nif (php_sapi_name() === 'cli-server' && is_file($filename)) {\n    return false;\n}\n\n$app = require __DIR__.'/../src/app.php';\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Registering YAML Translation Files in Silex PHP\nDESCRIPTION: Demonstrates how to register a YAML file loader and add YAML translation resources to the translator service in a Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Translation\\Loader\\YamlFileLoader;\n\n$app->extend('translator', function($translator, $app) {\n    $translator->addLoader('yaml', new YamlFileLoader());\n\n    $translator->addResource('yaml', __DIR__.'/locales/en.yml', 'en');\n    $translator->addResource('yaml', __DIR__.'/locales/de.yml', 'de');\n    $translator->addResource('yaml', __DIR__.'/locales/fr.yml', 'fr');\n\n    return $translator;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering the SwiftmailerServiceProvider in Silex\nDESCRIPTION: Shows how to register the SwiftmailerServiceProvider with a Silex application to enable email functionality.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\SwiftmailerServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Using the json Helper Method in PHP\nDESCRIPTION: Shows the usage of the added json helper method which simplifies creating JSON responses from PHP arrays or objects.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$data = array('some' => 'data');\n$response = $app->json($data);\n```\n\n----------------------------------------\n\nTITLE: Streaming a Twig Template Response\nDESCRIPTION: Example of streaming a Twig template response using StreamedResponse.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// stream a view\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\n\nreturn $app->render('index.html', ['name' => 'Fabien'], new StreamedResponse());\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Validation Rules for Silex\nDESCRIPTION: Example YAML validation configuration defining validation rules for a Post entity. It includes NotNull and NotBlank constraints for the title property and a Min constraint for the body property.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/validator_yaml.rst#2025-04-15_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# validation.yml\nPost:\n  properties:\n    title:\n      - NotNull: ~\n      - NotBlank: ~\n    body:\n      - Min: 100\n```\n\n----------------------------------------\n\nTITLE: Testing with WebTestCase Client and Crawler\nDESCRIPTION: Shows how to use the WebTestCase client to make HTTP requests and use the crawler to inspect response content.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/testing.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function testInitialPage()\n{\n    $client = $this->createClient();\n    $crawler = $client->request('GET', '/');\n\n    $this->assertTrue($client->getResponse()->isOk());\n    $this->assertCount(1, $crawler->filter('h1:contains(\"Contact us\")'));\n    $this->assertCount(1, $crawler->filter('form'));\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Silex Exception Handler\nDESCRIPTION: Shows how to disable the default exception handler in Silex after version 1.0.0. This change was introduced to improve the way exception handling is managed.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Before:\nunset($app['exception_handler']);\n\n// After:\n$app['exception_handler']->disable();\n```\n\n----------------------------------------\n\nTITLE: Named Routes in PHP Silex\nDESCRIPTION: Assign explicit names to routes for reference in URL generation.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$app->get('/', function () {\n    // ...\n})\n->bind('homepage');\n\n$app->get('/blog/{id}', function ($id) {\n    // ...\n})\n->bind('blog_post');\n```\n\n----------------------------------------\n\nTITLE: Using MonologTrait Shortcut\nDESCRIPTION: Example of using the log shortcut method provided by MonologTrait.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/monolog.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app->log(sprintf(\"User '%s' registered.\", $username));\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Translation File in Silex\nDESCRIPTION: Illustrates the structure of a YAML translation file for use with the TranslationServiceProvider in Silex.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhello: Hello %name%\ngoodbye: Goodbye %name%\n```\n\n----------------------------------------\n\nTITLE: Testing Page Response with PHPUnit Assertions\nDESCRIPTION: Demonstrates how to write test assertions to verify HTTP status code and page content for a contact form page.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/testing.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function testInitialPage()\n{\n    $statusCode = ...\n    $pageContent = ...\n\n    $this->assertEquals(200, $statusCode);\n    $this->assertContains('Contact us', $pageContent);\n    $this->assertContains('<form', $pageContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Config and Yaml Components via Composer\nDESCRIPTION: Shows the command to add Symfony Config and Yaml components as dependencies using Composer for YAML-based translations.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/config symfony/yaml\n```\n\n----------------------------------------\n\nTITLE: Using the SwiftmailerTrait Mail Shortcut in Silex\nDESCRIPTION: Example of using the mail shortcut method provided by the SwiftmailerTrait to send emails more concisely.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$app->mail(\\Swift_Message::newInstance()\n    ->setSubject('[YourSite] Feedback')\n    ->setFrom(array('noreply@yoursite.com'))\n    ->setTo(array('feedback@yoursite.com'))\n    ->setBody($request->get('message')));\n```\n\n----------------------------------------\n\nTITLE: Using Protected Closures in Silex\nDESCRIPTION: Demonstrates how to protect closures from automatic execution by the container using the protect() method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/services.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$app['closure_parameter'] = $app->protect(function ($a, $b) {\n    return $a + $b;\n});\n\n// will not execute the closure\n$add = $app['closure_parameter'];\n\n// calling it now\necho $add(2, 3);\n```\n\n----------------------------------------\n\nTITLE: Registering a Service Provider in Silex\nDESCRIPTION: Shows how to register a service provider in a Silex application. The example demonstrates registering a DatabaseServiceProvider with configuration parameters.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app = new Silex\\Application();\n\n$app->register(new Acme\\DatabaseServiceProvider());\n\n$app->register(new Acme\\DatabaseServiceProvider(), array(\n    'database.dsn'      => 'mysql:host=localhost;dbname=myapp',\n    'database.user'     => 'root',\n    'database.password' => 'secret_root_password',\n));\n```\n\n----------------------------------------\n\nTITLE: Generating Silex Documentation with Sphinx\nDESCRIPTION: Commands to build the HTML documentation for Silex using Sphinx. This process converts the reStructuredText files into HTML format.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/contributing.rst#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd doc\n$ sphinx-build -b html . build\n```\n\n----------------------------------------\n\nTITLE: Extending Form Extensions in Silex PHP Application\nDESCRIPTION: Demonstrates how to register custom form extensions by extending the form.extensions service in Silex.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$app->extend('form.extensions', function ($extensions) use ($app) {\n    $extensions[] = new YourTopFormExtension();\n\n    return $extensions;\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Registered Service Provider in a Route\nDESCRIPTION: Demonstrates accessing a service from a registered provider within a route definition. The example shows using a 'hello' service that was registered by a custom service provider.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$app = new Silex\\Application();\n\n$app->register(new Acme\\HelloServiceProvider(), array(\n    'hello.default_name' => 'Igor',\n));\n\n$app->get('/hello', function (Request $request) use ($app) {\n    $name = $request->get('name');\n\n    return $app['hello']($name);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering VarDumperServiceProvider in Silex\nDESCRIPTION: This snippet shows how to register the VarDumperServiceProvider in a Silex application. The service provider adds the ability to dump PHP variables for debugging purposes.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/var_dumper.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\VarDumperServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig Template as a String\nDESCRIPTION: Example of rendering a Twig template as a string using the renderView method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$content = $app->renderView('index.html', ['name' => 'Fabien']);\n```\n\n----------------------------------------\n\nTITLE: Extending Form Type Guessers in Silex PHP Application\nDESCRIPTION: Demonstrates how to register custom form type guessers by extending the form.type.guessers service in Silex.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$app['your.type.guesser.service'] = function ($app) {\n    return new YourServiceFormTypeGuesser();\n};\n$app->extend('form.type.guessers', function ($guessers) use ($app) {\n    $guessers[] = new YourFormTypeGuesser();\n    $guessers[] = 'your.type.guesser.service';\n\n    return $guessers;\n});\n```\n\n----------------------------------------\n\nTITLE: Using URL Generator in Twig Templates\nDESCRIPTION: Example of basic URL generation in Twig templates using the url_generator service. This direct method accesses the service through the app variable.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/routing.rst#2025-04-15_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n{{ app.url_generator.generate('homepage') }}\n```\n\n----------------------------------------\n\nTITLE: Page Rendering in Twig Template\nDESCRIPTION: Shows how to use the render function provided by TwigServiceProvider to embed pages in Twig templates.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/sub_requests.rst#2025-04-15_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{{ render('/sidebar') }}\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Override Form\nDESCRIPTION: HTML form example showing how to override HTTP methods using _method hidden field for PUT/DELETE requests.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/my/target/route/\" method=\"post\">\n    <!-- ... -->\n    <input type=\"hidden\" id=\"_method\" name=\"_method\" value=\"PUT\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring PdoSessionHandler with DoctrineServiceProvider in Silex\nDESCRIPTION: This snippet shows how to set up PdoSessionHandler using the DoctrineServiceProvider in a Silex application. It utilizes the existing database connection from Doctrine and configures the session storage handler accordingly.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/session_storage.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler;\n\n$app->register(new Silex\\Provider\\SessionServiceProvider());\n\n$app['session.storage.handler'] = function () use ($app) {\n    return new PdoSessionHandler(\n        $app['db']->getWrappedConnection(),\n        array(\n            'db_table'        => 'session',\n            'db_id_col'       => 'session_id',\n            'db_data_col'     => 'session_value',\n            'db_lifetime_col' => 'session_lifetime',\n            'db_time_col'     => 'session_time',\n        )\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Authenticator Service in PHP\nDESCRIPTION: Service registration for the token authenticator in Silex's dependency injection container.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/guard_authentication.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app['app.token_authenticator'] = function ($app) {\n    return new App\\Security\\TokenAuthenticator($app['security.encoder_factory']);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Route Class in Silex\nDESCRIPTION: Configuration for using a custom Route class in a Silex application. This allows the application to use the custom route implementations with added security functionality.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$app['route_class'] = 'MyRoute';\n```\n\n----------------------------------------\n\nTITLE: ESI Implementation in Twig\nDESCRIPTION: Demonstrates how to use Edge Side Includes (ESI) to embed and cache page fragments.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/sub_requests.rst#2025-04-15_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n<esi:include src=\"/sidebar\" />\n```\n\n----------------------------------------\n\nTITLE: Request Base URL Handling in PHP\nDESCRIPTION: Shows how to properly handle base URLs when creating sub-requests to prevent path matching issues.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/sub_requests.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$url = $request->getUriForPath('/');\n$subRequest = Request::create($url, 'GET', array(), $request->cookies->all(), array(), $request->server->all());\n```\n\n----------------------------------------\n\nTITLE: Registering XLIFF Translation Files in Silex PHP\nDESCRIPTION: Shows how to add XLIFF translation resources to the translator service in a Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$translator->addResource('xliff', __DIR__.'/locales/en.xlf', 'en');\n$translator->addResource('xliff', __DIR__.'/locales/de.xlf', 'de');\n$translator->addResource('xliff', __DIR__.'/locales/fr.xlf', 'fr');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Plaintext Password Encoder in Silex\nDESCRIPTION: Example of defining a fully customized password encoder using the PlaintextPasswordEncoder, which is typically used for debugging purposes as it doesn't encrypt passwords.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder;\n\n$app['security.default_encoder'] = function ($app) {\n    // Plain text (e.g. for debugging)\n    return new PlaintextPasswordEncoder();\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling ESI in HttpCacheServiceProvider\nDESCRIPTION: This example shows how to disable ESI support when registering the HttpCacheServiceProvider. This can slightly improve performance if the application doesn't use ESI.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_cache.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\HttpCacheServiceProvider(), array(\n   'http_cache.cache_dir' => __DIR__.'/cache/',\n   'http_cache.esi'       => null,\n));\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration XML\nDESCRIPTION: Example phpunit.xml.dist configuration file that sets up PHPUnit test suite settings and directory structure.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/testing.rst#2025-04-15_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"./vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"YourApp Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Using Apache FallbackResource for Silex\nDESCRIPTION: Simplified Apache configuration using the FallbackResource directive for Apache 2.2.16+. This provides an easier way to route requests to the Silex front controller.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/web_servers.rst#2025-04-15_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nFallbackResource index.php\n```\n\n----------------------------------------\n\nTITLE: Configuring User Impersonation in Silex\nDESCRIPTION: This code configures the user switching functionality, allowing users with appropriate permissions to impersonate other users for testing or support purposes.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$app['security.firewalls'] = array(\n    'unsecured' => array(\n        'switch_user' => array('parameter' => '_switch_user', 'role' => 'ROLE_ALLOWED_TO_SWITCH'),\n\n        // ...\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication System with cURL Commands\nDESCRIPTION: Example cURL commands to test the authentication system under different scenarios including no token, invalid token, and valid token.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/guard_authentication.rst#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# test with no token\ncurl http://localhost:8000/\n# {\"message\":\"Authentication Required\"}\n\n# test with a bad token\ncurl -H \"X-AUTH-TOKEN: alan\" http://localhost:8000/\n# {\"message\":\"Username could not be found.\"}\n\n# test with a working token\ncurl -H \"X-AUTH-TOKEN: victoria:foo\" http://localhost:8000/\n# the homepage controller is executed: the page loads normally\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Service with YAML Loader in Silex\nDESCRIPTION: PHP code to register the validator service provider and configure it to use a YAML file instead of the default StaticMethodLoader. This sets up the LazyLoadingMetadataFactory with a YamlFileLoader pointing to the validation.yml file.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/validator_yaml.rst#2025-04-15_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new ValidatorServiceProvider());\n\n$app['validator.mapping.class_metadata_factory'] = new Symfony\\Component\\Validator\\Mapping\\Factory\\LazyLoadingMetadataFactory(\n    new Symfony\\Component\\Validator\\Mapping\\Loader\\YamlFileLoader(__DIR__.'/validation.yml')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache VirtualHost with FallbackResource for Silex\nDESCRIPTION: Apache VirtualHost configuration example using the FallbackResource directive. This demonstrates how to set up a Silex application in a VirtualHost directory context.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/web_servers.rst#2025-04-15_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80>\n    # other directives\n\n    Alias /app/ /path/to/app/\n    <Directory /path/to/app>\n        # other directives\n\n        FallbackResource /app/index.php\n    </Directory>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Using Asset Functions in Twig Templates\nDESCRIPTION: Examples showing how to use the asset() and asset_version() functions in Twig templates with both named and unnamed packages.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/asset.rst#2025-04-15_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{{ asset('/css/foo.png') }}\n{{ asset('/css/foo.css', 'css') }}\n{{ asset('/img/foo.png', 'images') }}\n\n{{ asset_version('/css/foo.png') }}\n```\n\n----------------------------------------\n\nTITLE: Installing Silex with Composer\nDESCRIPTION: Commands to install Silex either using the skeleton project or as a standalone package via Composer.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/usage.rst#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project fabpot/silex-skeleton path/to/install \"~2.0\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silex/silex:~2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS for Silex Applications using web.config\nDESCRIPTION: Internet Information Services (IIS) configuration using web.config. This handles URL rewriting for Silex applications on Windows servers, setting index.php as the default document.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/web_servers.rst#2025-04-15_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n    <system.webServer>\n        <defaultDocument>\n            <files>\n                <clear />\n                <add value=\"index.php\" />\n            </files>\n        </defaultDocument>\n        <rewrite>\n            <rules>\n                <rule name=\"Silex Front Controller\" stopProcessing=\"true\">\n                    <match url=\"^(.*)$\" ignoreCase=\"false\" />\n                    <conditions logicalGrouping=\"MatchAll\">\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" ignoreCase=\"false\" negate=\"true\" />\n                    </conditions>\n                    <action type=\"Rewrite\" url=\"index.php\" appendQueryString=\"true\" />\n                </rule>\n            </rules>\n        </rewrite>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Dependencies with Composer\nDESCRIPTION: Command to add Twig as a dependency to your Silex project using Composer.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/twig\n```\n\n----------------------------------------\n\nTITLE: Updated Controller Method Configuration in PHP\nDESCRIPTION: Shows the change in how HTTP methods are configured for controllers, moving from a parameter in the match method to a method call on the returned controller object.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$app->match('/', function () { echo 'foo'; }, 'GET|POST');\n```\n\nLANGUAGE: php\nCODE:\n```\n$app->match('/', function () { echo 'foo'; })->method('GET|POST');\n```\n\n----------------------------------------\n\nTITLE: Installing Swiftmailer with Composer\nDESCRIPTION: Command for installing the SwiftMailer library as a dependency using Composer package manager.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/swiftmailer.rst#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require swiftmailer/swiftmailer\n```\n\n----------------------------------------\n\nTITLE: Registering SerializerServiceProvider in Silex\nDESCRIPTION: Shows how to register the SerializerServiceProvider in a Silex application. This registers the serializer service which can be used to serialize objects into different formats.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/serializer.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\SerializerServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Fragment Service Provider in Silex\nDESCRIPTION: Shows how to register the HttpFragmentServiceProvider in a Silex application to enable fragment handling functionality.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/http_fragment.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\HttpFragmentServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Updating ControllerCollection Instantiation in PHP\nDESCRIPTION: Shows the change in how to instantiate a ControllerCollection, which now requires a Route instance as a constructor argument. The recommended approach is to use the application's controllers_factory.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$controllers = new ControllerCollection();\n```\n\nLANGUAGE: php\nCODE:\n```\n$controllers = new ControllerCollection(new Route());\n\n// or even better\n$controllers = $app['controllers_factory'];\n```\n\n----------------------------------------\n\nTITLE: Installing Security Component via Composer\nDESCRIPTION: Command to add Symfony Security Component as a dependency using Composer.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/security\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony YAML Component in Silex\nDESCRIPTION: Commands to install the Symfony YAML component via Composer, which is required for YAML-based validation configuration.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/validator_yaml.rst#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/yaml\n```\n\n----------------------------------------\n\nTITLE: Replacing twig.configure Service with extend Method in PHP\nDESCRIPTION: Demonstrates the replacement of the twig.configure service with the extend method. This change affects how Twig configurations are applied in Silex applications.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app['twig.configure'] = $app->protect(function ($twig) use ($app) {\n    // do something\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$app['twig'] = $app->share($app->extend('twig', function($twig, $app) {\n    // do something\n\n    return $twig;\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying Route Before Middleware in Silex PHP\nDESCRIPTION: Creates a before middleware function and attaches it to a specific route. This middleware executes after application-wide before middleware but before the route callback.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/middlewares.rst#2025-04-15_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$before = function (Request $request, Application $app) {\n    // ...\n};\n\n$app->get('/somewhere', function () {\n    // ...\n})\n->before($before);\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for PHP-CGI\nDESCRIPTION: Apache configuration required when using php-cgi to properly handle HTTP authorization headers.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/security.rst#2025-04-15_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\nRewriteEngine On\nRewriteCond %{HTTP:Authorization} ^(.+)$\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ app.php [QSA,L]\n```\n\n----------------------------------------\n\nTITLE: Registering a Symfony Route with Host Matching in Silex\nDESCRIPTION: Demonstrates how to register a route in Silex with host matching support introduced in version 1.0.0. This allows routing based on the request hostname.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$app->match('/', function() {\n    // app-specific action\n})->host('example.com');\n\n$app->match('/', function ($user) {\n    // user-specific action\n})->host('{user}.example.com');\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Translation Component via Composer\nDESCRIPTION: Shows the command to add the Symfony Translation Component as a dependency using Composer.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/translation.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Extending Monolog Configuration in Silex\nDESCRIPTION: Illustrates the change in how to configure Monolog in Silex after version 1.0.0. The 'monolog.configure' service was removed in favor of using the 'extend' method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Before:\n$app['monolog.configure'] = $app->protect(function ($monolog) use ($app) {\n    // do something\n});\n\n// After:\n$app['monolog'] = $app->share($app->extend('monolog', function($monolog, $app) {\n    // do something\n\n    return $monolog;\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Twig Bridge\nDESCRIPTION: Command to add Symfony's Twig bridge as a dependency for additional integration features.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/twig.rst#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/twig-bridge\n```\n\n----------------------------------------\n\nTITLE: Changing Reusable Application Structure in PHP\nDESCRIPTION: Demonstrates the change in how reusable applications work, now using ControllerCollection instead of Application instances when using the mount() method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/changelog.rst#2025-04-15_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$app = new Application();\n$app->get('/bar', function() { return 'foo'; });\n\nreturn $app;\n```\n\nLANGUAGE: php\nCODE:\n```\n$app = new ControllerCollection();\n$app->get('/bar', function() { return 'foo'; });\n\nreturn $app;\n```\n\n----------------------------------------\n\nTITLE: Installing Monolog via Composer\nDESCRIPTION: Command to add Monolog as a project dependency using Composer package manager.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/monolog.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require monolog/monolog\n```\n\n----------------------------------------\n\nTITLE: Extending Twig Service in Silex\nDESCRIPTION: Shows how to modify an existing service after its definition using the extend() method.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/services.rst#2025-04-15_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$app->extend('twig', function($twig, $app) {\n    $twig->addGlobal('pi', 3.14);\n    $twig->addFilter('levenshtein', new \\Twig_Filter_Function('levenshtein'));\n    \n    return $twig;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Serializer Component with Composer\nDESCRIPTION: Command to install the Symfony Serializer Component as a dependency using Composer, which is required for the SerializerServiceProvider to work.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/serializer.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/serializer\n```\n\n----------------------------------------\n\nTITLE: Extending Form Type Extensions in Silex PHP Application\nDESCRIPTION: Shows how to register custom form type extensions by extending the form.type.extensions service in Silex.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/form.rst#2025-04-15_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$app['your.type.extension.service'] = function ($app) {\n    return new YourServiceFormTypeExtension();\n};\n$app->extend('form.type.extensions', function ($extensions) use ($app) {\n    $extensions[] = new YourFormTypeExtension();\n    $extensions[] = 'your.type.extension.service';\n\n    return $extensions;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony VarDumper Component via Composer\nDESCRIPTION: This command installs the required Symfony VarDumper Component via Composer, which is a dependency for the VarDumperServiceProvider to function correctly.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/var_dumper.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/var-dumper\n```\n\n----------------------------------------\n\nTITLE: Configuring Lighttpd for Silex Applications\nDESCRIPTION: Lighttpd configuration with URL rewriting for Silex. This sample simple-vhost configuration demonstrates how to route requests to the Silex front controller while preserving access to static assets.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/web_servers.rst#2025-04-15_snippet_5\n\nLANGUAGE: lighttpd\nCODE:\n```\nserver.document-root = \"/path/to/app\"\n\nurl.rewrite-once = (\n    # configure some static files\n    \"^/assets/.+\" => \"$0\",\n    \"^/favicon\\.ico$\" => \"$0\",\n\n    \"^(/[^\\?]*)(\\?.*)?\"\n => \"/index.php$1$2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ServiceControllerServiceProvider in Silex\nDESCRIPTION: Shows how to register the ServiceControllerServiceProvider in a Silex application.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/service_controller.rst#2025-04-15_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$app->register(new Silex\\Provider\\ServiceControllerServiceProvider());\n```\n\n----------------------------------------\n\nTITLE: Running Silex Test Suite\nDESCRIPTION: Commands for setting up and running the Silex test suite. First installs dependencies with Composer, then executes tests with PHPUnit.\nSOURCE: https://github.com/silexphp/Silex/blob/master/README.rst#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\nphpunit\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Silex Service Providers in reStructuredText\nDESCRIPTION: This code snippet creates a table of contents using reStructuredText syntax. It sets up a toctree directive with a maximum depth of 1 and lists all the available built-in service providers in Silex.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/index.rst#2025-04-15_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    twig\n    asset\n    monolog\n    session\n    swiftmailer\n    locale\n    translation\n    validator\n    form\n    csrf\n    http_cache\n    http_fragment\n    security\n    remember_me\n    serializer\n    service_controller\n    var_dumper\n    doctrine\n    routing\n```\n\n----------------------------------------\n\nTITLE: Testing JSON API with cURL\nDESCRIPTION: This bash command demonstrates how to test the blog post creation API using cURL. It sends a POST request with JSON data and the appropriate Content-Type header to the specified endpoint.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/cookbook/json_request_body.rst#2025-04-15_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl http://blog.lo/blog/posts -d '{\"title\":\"Hello World!\",\"body\":\"This is my first post!\"}' -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for Silex Documentation\nDESCRIPTION: This reStructuredText snippet defines a table of contents for the Silex framework documentation. It uses the toctree directive with maxdepth:1 parameter to list all main sections of the documentation book.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/index.rst#2025-04-15_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    intro\n    usage\n    middlewares\n    organizing_controllers\n    services\n    providers\n    testing\n    cookbook/index\n    internals\n    contributing\n    providers/index\n    web_servers\n    changelog\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Security CSRF Component (Bash)\nDESCRIPTION: This command installs the Symfony Security CSRF Component using Composer. This component is a dependency for the CsrfServiceProvider.\nSOURCE: https://github.com/silexphp/Silex/blob/master/doc/providers/csrf.rst#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/security-csrf\n```"
  }
]