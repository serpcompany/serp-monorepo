[
  {
    "owner": "ethereum",
    "repo": "web3.py",
    "content": "TITLE: Calling Smart Contract Methods with Web3.py\nDESCRIPTION: Example demonstrating how to call smart contract methods using both direct contract interface and raw eth_call. Shows setting and getting a variable value through a contract function.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> myContract.functions.setVar(1).transact()\nHexBytes('0x79af0c7688afba7588c32a61565fd488c422da7b5773f95b242ea66d3d20afda')\n>>> myContract.functions.getVar().call()\n1\n# The above call equivalent to the raw call:\n>>> web3.eth.call({'value': 0, 'gas': 21736, 'maxFeePerGas': 2000000000, 'maxPriorityFeePerGas': 1000000000, 'to': '0xc305c901078781C232A2a521C2aF7980f8385ee9', 'data': '0x477a5c98'})\nHexBytes('0x0000000000000000000000000000000000000000000000000000000000000001')\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Raw Transactions in Python with Web3.py\nDESCRIPTION: This snippet demonstrates how to create, sign, and send a raw transaction using Web3.py. It includes setting up transaction parameters, signing with a private key, and sending the raw transaction.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntransaction = {\n    'to': '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n    'value': 1000000000,\n    'gas': 2000000,\n    'maxFeePerGas': 2000000000,\n    'maxPriorityFeePerGas': 1000000000,\n    'nonce': 0,\n    'chainId': 1,\n    'type': '0x2',\n    'accessList': (\n        {\n            'address': '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n            'storageKeys': (\n                '0x0000000000000000000000000000000000000000000000000000000000000003',\n                '0x0000000000000000000000000000000000000000000000000000000000000007',\n            )\n        },\n        {\n            'address': '0xbb9bc244d798123fde783fcc1c72d3bb8c189413',\n            'storageKeys': ()\n        },\n    )\n}\nkey = '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318'\nsigned = w3.eth.account.sign_transaction(transaction, key)\n\n# Send raw transaction\nw3.eth.send_raw_transaction(signed.raw_transaction)\n```\n\n----------------------------------------\n\nTITLE: Complete Event Subscription Example with web3.py in Python\nDESCRIPTION: A comprehensive example that combines all subscription concepts to listen for new block headers and WETH transfer events. This demonstrates subscription setup, handler definition, and event processing.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom web3 import AsyncWeb3, WebSocketProvider\nfrom web3.utils.subscriptions import (\n    NewHeadsSubscription,\n    NewHeadsSubscriptionContext,\n    LogsSubscription,\n    LogsSubscriptionContext,\n)\n\n# -- declare handlers --\nasync def new_heads_handler(\n    handler_context: NewHeadsSubscriptionContext,\n) -> None:\n    header = handler_context.result\n    print(f\"New block header: {header}\\n\")\n\nasync def log_handler(\n    handler_context: LogsSubscriptionContext,\n) -> None:\n    log_receipt = handler_context.result\n    print(f\"Log receipt: {log_receipt}\\n\")\n\nasync def sub_manager():\n\n    # -- initialize provider --\n    w3 = await AsyncWeb3(WebSocketProvider(\"wss://...\"))\n\n    # -- subscribe to event(s) --\n    await w3.subscription_manager.subscribe(\n        [\n            NewHeadsSubscription(\n                label=\"new-heads-mainnet\",\n                handler=new_heads_handler\n            ),\n            LogsSubscription(\n                label=\"WETH transfers\",\n                address=w3.to_checksum_address(\n                    \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n                ),\n                topics=[\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"],\n                handler=log_handler,\n            ),\n        ]\n    )\n\n    # -- listen for events --\n    await w3.subscription_manager.handle_subscriptions()\n\nasyncio.run(sub_manager())\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Ethereum Accounts using Web3.py\nDESCRIPTION: Examples of signing messages with Ethereum accounts using Web3.py. This method uses 'eth_sign' RPC method and demonstrates signing with different input types (text, bytes, and hexstr).\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\n>>> web3.eth.sign(\n      '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n      text='some-text-tÃ¶-sign')\n'0x1a8bbe6eab8c72a219385681efefe565afd3accee35f516f8edf5ae82208fbd45a58f9f9116d8d88ba40fcd29076d6eada7027a3b412a9db55a0164547810cc401'\n\n>>> web3.eth.sign(\n      '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n      data=b'some-text-t\\xc3\\xb6-sign')\n'0x1a8bbe6eab8c72a219385681efefe565afd3accee35f516f8edf5ae82208fbd45a58f9f9116d8d88ba40fcd29076d6eada7027a3b412a9db55a0164547810cc401'\n\n>>> web3.eth.sign(\n      '0xd3CdA913deB6f67967B99D67aCDFa1712C293601',\n      hexstr='0x736f6d652d746578742d74c3b62d7369676e')\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Contract Factory in Web3.py\nDESCRIPTION: Demonstrates how to create a contract factory class that can be reused to initialize multiple contract instances at different addresses. Shows both checksum address and ENS name usage.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\n\nw3 = Web3(...)\n\nContract = w3.eth.contract(abi=...)\n\n# later, initialize contracts with the same metadata at different addresses:\ncontract1 = Contract(address='0x000000000000000000000000000000000000dEaD')\ncontract2 = Contract(address='mycontract.eth')\n```\n\n----------------------------------------\n\nTITLE: Modifying Ethereum Transactions with Web3.py\nDESCRIPTION: Example of modifying a pending Ethereum transaction using Web3.py. This method uses 'eth_sendTransaction' RPC method and returns the transaction hash of the newly modified transaction as a HexBytes object.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\n>>> tx = web3.eth.send_transaction({\n        'to': '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n        'from': web3.eth.accounts[0],\n        'value': 1000\n    })\nHexBytes('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331')\n>>> web3.eth.modify_transaction('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', value=2000)\nHexBytes('0xec6434e6701771606e55d6b4ca35a1a6b75ee3d73315145a921026d15299d05')\n```\n\n----------------------------------------\n\nTITLE: Deploying and Interacting with Smart Contracts in Python\nDESCRIPTION: Examples of deploying a smart contract and interacting with its functions using Web3.py. Shows contract deployment, transaction execution, and reading contract data.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/overview.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> ExampleContract = w3.eth.contract(abi=abi, bytecode=bytecode)\n>>> tx_hash = ExampleContract.constructor().transact()\n>>> tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n>>> tx_receipt.contractAddress\n'0x8a22225eD7eD460D7ee3842bce2402B9deaD23D3'\n\n>>> deployed_contract = w3.eth.contract(address=tx_receipt.contractAddress, abi=abi)\n>>> deployed_contract.functions.myFunction(42).transact()\n\n# Using ContractFunction.call\n>>> deployed_contract.functions.getMyValue().call()\n42\n\n# Using ContractCaller\n>>> deployed_contract.caller().getMyValue()\n42\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Filters with Web3.py\nDESCRIPTION: Example of creating different types of filters (block, transaction, and log filters) using the filter method. Filters allow monitoring blockchain events such as new blocks, pending transactions, or specific log events.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.filter('latest')\n<BlockFilter at 0x10b72dc28>\n>>> web3.eth.filter('pending')\n<TransactionFilter at 0x10b780340>\n>>> web3.eth.filter({'fromBlock': 1000000, 'toBlock': 1000100, 'address': '0x6C8f2A135f6ed072DE4503Bd7C4999a1a17F824B'})\n<LogFilter at 0x10b7803d8>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local Ethereum Nodes using Web3.py\nDESCRIPTION: Demonstrates various methods to connect to locally run Ethereum nodes using IPC, HTTP, and WebSocket providers. Includes both synchronous and asynchronous connection examples.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/quickstart.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, AsyncWeb3\n\n# IPCProvider:\n>>> w3 = Web3(Web3.IPCProvider('./path/to/filename.ipc'))\n>>> w3.is_connected()\nTrue\n\n# HTTPProvider:\n>>> w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8545'))\n>>> w3.is_connected()\nTrue\n\n# AsyncHTTPProvider:\n>>> w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider('http://127.0.0.1:8545'))\n>>> await w3.is_connected()\nTrue\n\n# -- Persistent Connection Providers -- #\n\n# WebSocketProvider:\n>>> w3 = await AsyncWeb3(AsyncWeb3.WebSocketProvider('ws://127.0.0.1:8546'))\n>>> await w3.is_connected()\nTrue\n\n# AsyncIPCProvider:\n>>> w3 = await AsyncWeb3(AsyncWeb3.AsyncIPCProvider('./path/to/filename.ipc'))\n>>> await w3.is_connected()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Generating Gas Price with Web3.py's Gas Price Strategy\nDESCRIPTION: Example of using the generate_gas_price method which applies the selected gas price strategy to calculate a gas price in wei. This helps determine appropriate gas prices for transactions based on current network conditions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.generate_gas_price()\n20000000000\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 Providers in Python\nDESCRIPTION: Examples of initializing different types of Web3 providers including IPC, HTTP, WebSocket and Async providers. Shows how to establish and verify connections to Ethereum nodes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/overview.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, AsyncWeb3\n\n# IPCProvider:\n>>> w3 = Web3(Web3.IPCProvider('./path/to/filename.ipc'))\n>>> w3.is_connected()\nTrue\n\n# HTTPProvider:\n>>> w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8545'))\n>>> w3.is_connected()\nTrue\n\n# AsyncHTTPProvider:\n>>> w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider('http://127.0.0.1:8545'))\n>>> await w3.is_connected()\nTrue\n\n# -- Persistent Connection Providers -- #\n\n# WebSocketProvider:\n>>> w3 = await AsyncWeb3(AsyncWeb3.WebSocketProvider('ws://127.0.0.1:8546'))\n>>> await w3.is_connected()\nTrue\n\n# AsyncIPCProvider\n>>> w3 = await AsyncWeb3(AsyncWeb3.AsyncIPCProvider('./path/to/filename.ipc'))\n>>> await w3.is_connected()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Ethereum Transactions with Web3.py\nDESCRIPTION: Example of sending a signed and serialized Ethereum transaction using Web3.py. This method uses 'eth_sendRawTransaction' RPC method and returns the transaction hash as a HexBytes object.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n>>> signed_txn = w3.eth.account.sign_transaction(dict(\n    nonce=w3.eth.get_transaction_count(public_address_of_senders_account),\n    maxFeePerGas=3000000000,\n    maxPriorityFeePerGas=2000000000,\n    gas=100000,\n    to='0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n    value=12345,\n    data=b'',\n    type=2,  # (optional) the type is now implicitly set based on appropriate transaction params\n    chainId=1,\n  ),\n  private_key_for_senders_account,\n)\n>>> w3.eth.send_raw_transaction(signed_txn.raw_transaction)\nHexBytes('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331')\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Provider with Context Manager\nDESCRIPTION: Example demonstrating how to use AsyncWeb3 with WebSocketProvider as a context manager to subscribe to new block headers and process responses asynchronously.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import asyncio\n>>> from web3 import AsyncWeb3\n>>> from web3.providers.persistent import (\n...     AsyncIPCProvider,\n...     WebSocketProvider,\n... )\n\n>>> LOG = True  # toggle debug logging\n>>> if LOG:\n...     import logging\n...     # logger = logging.getLogger(\"web3.providers.AsyncIPCProvider\")  # for the AsyncIPCProvider\n...     logger = logging.getLogger(\"web3.providers.WebSocketProvider\")  # for the WebSocketProvider\n...     logger.setLevel(logging.DEBUG)\n...     logger.addHandler(logging.StreamHandler())\n\n>>> async def context_manager_subscription_example():\n...     #  async with AsyncWeb3(AsyncIPCProvider(\"./path/to.filename.ipc\") as w3:  # for the AsyncIPCProvider\n...     async with AsyncWeb3(WebSocketProvider(f\"ws://127.0.0.1:8546\")) as w3:  # for the WebSocketProvider\n...         # subscribe to new block headers\n...         subscription_id = await w3.eth.subscribe(\"newHeads\")\n...\n...         async for response in w3.socket.process_subscriptions():\n...             print(f\"{response}\\n\")\n...             # handle responses here\n...\n...             if some_condition:\n...                 # unsubscribe from new block headers and break out of\n...                 # iterator\n...                 await w3.eth.unsubscribe(subscription_id)\n...                 break\n...\n...         # still an open connection, make any other requests and get\n...         # responses via send / receive\n...         latest_block = await w3.eth.get_block(\"latest\")\n...         print(f\"Latest block: {latest_block}\")\n...\n...         # the connection closes automatically when exiting the context\n...         # manager (the `async with` block)\n\n>>> asyncio.run(context_manager_subscription_example())\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Contracts with Address in Web3.py\nDESCRIPTION: Shows how to create a contract instance using Web3.py by providing a contract address (either checksum address or ENS name) and ABI. Demonstrates direct address usage and ENS name resolution.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\n\nw3 = Web3(...)\n\ncontract = w3.eth.contract(address='0x000000000000000000000000000000000000dEaD', abi=...)\n\n# alternatively:\ncontract = w3.eth.contract(address='mycontract.eth', abi=...)\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Contract Transactions in Python with Web3.py\nDESCRIPTION: This snippet shows how to interact with a smart contract, build a transaction for a contract function call, sign it locally, and send it as a raw transaction using Web3.py.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, EthereumTesterProvider\nw3 = Web3(EthereumTesterProvider())\n\nunicorns = w3.eth.contract(address=\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\", abi=EIP20_ABI)\n\nnonce = w3.eth.get_transaction_count('0x5ce9454909639D2D17A3F753ce7d93fa0b9aB12E')\n\n# Build a transaction that invokes this contract's function, called transfer\nunicorn_txn = unicorns.functions.transfer(\n    '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359',\n    1,\n).build_transaction({\n    'chainId': 1,\n    'gas': 70000,\n    'maxFeePerGas': w3.to_wei('2', 'gwei'),\n    'maxPriorityFeePerGas': w3.to_wei('1', 'gwei'),\n    'nonce': nonce,\n})\n\nprivate_key = b\"\\xb2\\}\\xb3\\x1f\\xee\\xd9\\x12''\\xbf\\t9\\xdcv\\x9a\\x96VK-\\xe4\\xc4rm\\x03[6\\xec\\xf1\\xe5\\xb3d\"\nsigned_txn = w3.eth.account.sign_transaction(unicorn_txn, private_key=private_key)\n\n# Send raw transaction\nw3.eth.send_raw_transaction(signed_txn.raw_transaction)\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Subscriptions with Web3.py WebSocket Provider\nDESCRIPTION: Example of creating a subscription to Ethereum events using the subscribe method. This requires a persistent connection provider like WebSocketProvider or AsyncIPCProvider and returns a subscription ID.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> subscription_id = await web3.eth.subscribe('newHeaders')\n>>> subscription_id\n'0xbd63bb89e7475591a0a6fc9014307bc4'\n```\n\n----------------------------------------\n\nTITLE: Sending Ethereum Transactions with Web3.py\nDESCRIPTION: Examples of sending Ethereum transactions using Web3.py, including simple, dynamic fee (EIP-1559), and legacy transactions. The method demonstrates how to set transaction parameters like 'to', 'from', 'value', 'gas', 'maxFeePerGas', and 'maxPriorityFeePerGas'.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n# simple example (web3.py and / or client determines gas and fees, typically defaults to a dynamic fee transaction post London fork)\n>>> web3.eth.send_transaction({\n  'to': '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n  'from': web3.eth.accounts[0],\n  'value': 12345\n})\n\n# Dynamic fee transaction, introduced by EIP-1559:\nHexBytes('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331')\n>>> web3.eth.send_transaction({\n  'to': '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n  'from': web3.eth.accounts[0],\n  'value': 12345,\n  'gas': 21000,\n  'maxFeePerGas': web3.to_wei(250, 'gwei'),\n  'maxPriorityFeePerGas': web3.to_wei(2, 'gwei'),\n})\nHexBytes('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331')\n\n# Legacy transaction (less efficient)\nHexBytes('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331')\n>>> web3.eth.send_transaction({\n  'to': '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n  'from': web3.eth.accounts[0],\n  'value': 12345,\n  'gas': 21000,\n  'gasPrice': web3.to_wei(50, 'gwei'),\n})\nHexBytes('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain ID in Web3.py\nDESCRIPTION: Demonstrates how to get the current Chain ID value using the web3.eth.chain_id property. Also shows how to enable request caching for this frequently called method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.chain_id\n61\n\n>>> w3.provider.cache_allowed_requests = True\n```\n\n----------------------------------------\n\nTITLE: Fetching Events for Multiple Contracts Using eth_getLogs in Web3.py\nDESCRIPTION: A stateless method to retrieve events using the eth_getLogs API. This function works with any Ethereum node, including those that don't support eth_newFilter like Infura. It constructs filter parameters from event ABIs and converts raw JSON-RPC logs to Python event objects.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef _fetch_events_for_all_contracts(\n        w3,\n        event,\n        argument_filters: Dict[str, Any],\n        from_block: int,\n        to_block: int) -> Iterable:\n    \"\"\"Get events using eth_getLogs API.\n\n    This method is detached from any contract instance.\n\n    This is a stateless method, as opposed to create_filter.\n    It can be safely called against nodes which do not provide `eth_newFilter` API, like Infura.\n    \"\"\"\n\n    if from_block is None:\n        raise Web3TypeError(\"Missing mandatory keyword argument to get_logs: from_block\")\n\n    # Currently no way to poke this using a public web3.py API.\n    # This will return raw underlying ABI JSON object for the event\n    abi = event._get_event_abi()\n\n    # Depending on the Solidity version used to compile\n    # the contract that uses the ABI,\n    # it might have Solidity ABI encoding v1 or v2.\n    # We just assume the default that you set on Web3 object here.\n    # More information here https://eth-abi.readthedocs.io/en/latest/index.html\n    codec: ABICodec = w3.codec\n\n    # Here we need to poke a bit into Web3 internals, as this\n    # functionality is not exposed by default.\n    # Construct JSON-RPC raw filter presentation based on human readable Python descriptions\n    # Namely, convert event names to their keccak signatures\n    # More information here:\n    # https://github.com/ethereum/web3.py/blob/e176ce0793dafdd0573acc8d4b76425b6eb604ca/web3/_utils/filters.py#L71\n    data_filter_set, event_filter_params = construct_event_filter_params(\n        abi,\n        codec,\n        address=argument_filters.get(\"address\"),\n        argument_filters=argument_filters,\n        from_block=from_block,\n        to_block=to_block\n    )\n\n    logger.debug(f\"Querying eth_getLogs with the following parameters: {event_filter_params}\")\n\n    # Call JSON-RPC API on your Ethereum node.\n    # get_logs() returns raw AttributedDict entries\n    logs = w3.eth.get_logs(event_filter_params)\n\n    # Convert raw binary data to Python proxy objects as described by ABI\n    all_events = []\n    for log in logs:\n        # Convert raw JSON-RPC log result to human readable event by using ABI data\n        # More information how process_log works here\n        # https://github.com/ethereum/web3.py/blob/fbaf1ad11b0c7fac09ba34baff2c256cffe0a148/web3/_utils/events.py#L200\n        evt = get_event_data(codec, abi, log)\n        # Note: This was originally yield,\n        # but deferring the timeout exception caused the throttle logic not to work\n        all_events.append(evt)\n    return all_events\n```\n\n----------------------------------------\n\nTITLE: Connecting to Geth Dev Node with POA Middleware in Python\nDESCRIPTION: This code shows how to connect to a local Geth development node using Web3.py and inject the Proof of Authority (POA) middleware. It's necessary for connecting to Geth dev nodes or other EVM-compatible chains like Polygon or BNB Chain.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, IPCProvider\n\n# connect to the IPC location started with 'geth --dev --datadir ~/mynode'\nw3 = Web3(IPCProvider('~/mynode/geth.ipc'))\n\nfrom web3.middleware import ExtraDataToPOAMiddleware\n\n# inject the poa compatibility middleware to the innermost layer (0th layer)\nw3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)\n\n# confirm that the connection succeeded\nw3.client_version\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions with eth-tester Provider\nDESCRIPTION: Demonstrates how to send a basic transaction using web3.py with the EthereumTesterProvider. The example shows auto-signing of transactions using test accounts provided by eth-tester.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/transactions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, EthereumTesterProvider\n\nw3 = Web3(EthereumTesterProvider())\n\n# eth-tester populates accounts with test ether:\nacct1 = w3.eth.accounts[0]\n\nsome_address = \"0x0000000000000000000000000000000000000000\"\n\n# when using one of its generated test accounts,\n# eth-tester signs the tx (under the hood) before sending:\ntx_hash = w3.eth.send_transaction({\n    \"from\": acct1,\n    \"to\": some_address,\n    \"value\": 123123123123123\n})\n\ntx = w3.eth.get_transaction(tx_hash)\nassert tx[\"from\"] == acct1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details with Web3.py\nDESCRIPTION: Demonstrates how to retrieve transaction details using the get_transaction method. This method returns an AttributeDict containing various transaction properties such as blockHash, from address, gas, and value.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_transaction('0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060')\nAttributeDict({'blockHash': HexBytes('0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd'),\n    'blockNumber': 46147,\n    'from': '0xA1E4380A3B1f749673E270229993eE55F35663b4',\n    'gas': 21000,\n    'gasPrice': 50000000000000,\n    'hash': HexBytes('0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060'),\n    'input': HexBytes('0x'),\n    'nonce': 0,\n     'r': HexBytes('0x88ff6cf0fefd94db46111149ae4bfc179e9b94721fffd821d38d16464b3f71d0'),\n     's': HexBytes('0x45e0aff800961cfce805daef7016b9b675c137a6a41a548f7b60a3484c06a33a'),\n     'to': '0x5DF9B87991262F6BA471F09758CDE1c0FC1De734',\n     'transactionIndex': 0,\n     'type': 0,\n     'v': 28,\n     'value': 31337\n})\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Token Transfer Scanner Demo Implementation in Web3.py\nDESCRIPTION: A complete example that demonstrates scanning all Transfer events for an ERC-20 token (RCC). It uses a JSON file for maintaining persistent state between scans and implements a custom JSONifiedState class that inherits from EventScannerState to store and restore the scanning progress.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # Simple demo that scans all the token transfers of RCC token (11k).\n    # The demo supports persistent state by using a JSON file.\n    # You will need an Ethereum node for this.\n    # Running this script will consume around 20k JSON-RPC calls.\n    # With locally running Geth, the script takes 10 minutes.\n    # The resulting JSON state file is 2.9 MB.\n    import sys\n    import json\n    from web3.providers.rpc import HTTPProvider\n\n    # We use tqdm library to render a nice progress bar in the console\n    # https://pypi.org/project/tqdm/\n    from tqdm import tqdm\n\n    # RCC has around 11k Transfer events\n    # https://etherscan.io/token/0x9b6443b0fb9c241a7fdac375595cea13e6b7807a\n    RCC_ADDRESS = \"0x9b6443b0fb9c241a7fdac375595cea13e6b7807a\"\n\n    # Reduced ERC-20 ABI, only Transfer event\n    ABI = \"\"\"[\n        {\n            \"anonymous\": false,\n            \"inputs\": [\n                {\n                    \"indexed\": true,\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": true,\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": false,\n                    \"name\": \"value\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"Transfer\",\n            \"type\": \"event\"\n        }\n    ]\n    \"\"\"\n\n    class JSONifiedState(EventScannerState):\n        \"\"\"Store the state of scanned blocks and all events.\n\n        All state is an in-memory dict.\n        Simple load/store massive JSON on start up.\n        \"\"\"\n\n        def __init__(self):\n            self.state = None\n            self.fname = \"test-state.json\"\n            # How many second ago we saved the JSON file\n            self.last_save = 0\n\n        def reset(self):\n            \"\"\"Create initial state of nothing scanned.\"\"\"\n            self.state = {\n                \"last_scanned_block\": 0,\n                \"blocks\": {},\n            }\n\n        def restore(self):\n            \"\"\"Restore the last scan state from a file.\"\"\"\n            try:\n                self.state = json.load(open(self.fname, \"rt\"))\n                print(f\"Restored the state, previously {self.state['last_scanned_block']} blocks have been scanned\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Middleware for Web3.py in Python\nDESCRIPTION: This code defines a custom middleware class for Web3.py, extending the base Web3Middleware class. It shows how to override request and response processing methods for both synchronous and asynchronous operations.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.middleware import Web3Middleware\n\nclass CustomMiddleware(Web3Middleware):\n\n    def request_processor(self, method, params):\n        # Pre-request processing goes here before passing to the next middleware.\n        return (method, params)\n\n    def response_processor(self, method, response):\n        # Response processing goes here before passing to the next middleware.\n        return response\n\n    # If your provider is asynchronous, override the async methods instead:\n\n    async def async_request_processor(self, method, params):\n        # Pre-request processing goes here before passing to the next middleware.\n        return (method, params)\n\n    async def async_response_processor(self, method, response):\n        # Response processing goes here before passing to the next middleware.\n        return response\n```\n\n----------------------------------------\n\nTITLE: Sending Dynamic Fee Transactions in Ethereum using Web3.py\nDESCRIPTION: This code snippet shows how to create and send a dynamic fee transaction (EIP-1559) using Web3.py. It includes necessary parameters like maxFeePerGas and maxPriorityFeePerGas.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# dynamic fee transaction, introduced by EIP-1559:\n>>> dynamic_fee_transaction = {\n...     'type': '0x2',  # optional - defaults to '0x2' when dynamic fee transaction params are present\n...     'from': acct.address,  # optional if w3.eth.default_account was set with acct.address\n...     'to': receiving_account_address,\n...     'value': 22,\n...     'maxFeePerGas': 2000000000,  # required for dynamic fee transactions\n...     'maxPriorityFeePerGas': 1000000000,  # required for dynamic fee transactions\n... }\n>>> w3.eth.send_transaction(dynamic_fee_transaction)\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Data in Web3.py\nDESCRIPTION: Demonstrates how to retrieve the latest block data using web3.eth.get_block() and access its properties. Shows the use of AttributeDict for convenient attribute-style access to dictionary keys.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> block = web3.eth.get_block('latest')\nAttributeDict({\n  'hash': '0xe8ad537a261e6fff80d551d8d087ee0f2202da9b09b64d172a5f45e818eb472a',\n  'number': 4022281,\n  # ... etc ...\n})\n\n>>> block['number']\n4022281\n>>> block.number\n4022281\n\n>>> block.number = 4022282\nTraceback # ... etc ...\nTypeError: This data is immutable -- create a copy instead of modifying\n```\n\n----------------------------------------\n\nTITLE: Checking Encodability of Values in Python\nDESCRIPTION: Demonstrates the use of w3.is_encodable method to check if a value can be encoded as a given Solidity type. It shows examples with different data types and sizes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3.auto.gethdev import w3\n>>> w3.is_encodable('bytes2', b'12')\nTrue\n>>> w3.is_encodable('bytes2', '0x1234')\nTrue\n>>> w3.is_encodable('bytes2', '1234')  # not 0x-prefixed, no assumptions will be made\nFalse\n>>> w3.is_encodable('bytes2', b'1')  # does not match specified bytes size\nFalse\n>>> w3.is_encodable('bytes2', b'123')  # does not match specified bytes size\nFalse\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with web3.py\nDESCRIPTION: This Python code demonstrates how to sign a message using a private key with web3.py. It uses the EthereumTesterProvider for testing purposes and the eth_account module for message encoding and signing.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, EthereumTesterProvider\n>>> from eth_account.messages import encode_defunct\n\n>>> w3 = Web3(EthereumTesterProvider())\n>>> msg = \"Iâ¥SF\"\n>>> private_key = b\"\\xb2\\\\}\\xb3\\x1f\\xee\\xd9\\x12''\\xbf\\t9\\xdcv\\x9a\\x96VK-\\xe4\\xc4rm\\x03[6\\xec\\xf1\\xe5\\xb3d\"\n>>> message = encode_defunct(text=msg)\n>>> signed_message = w3.eth.account.sign_message(message, private_key=private_key)\n>>> signed_message\nSignedMessage(message_hash=HexBytes('0x1476abb745d423bf09273f1afd887d951181d25adc66c4834a70491911b7f750'),\n r=104389933075820307925104709181714897380569894203213074526835978196648170704563,\n s=28205917190874851400050446352651915501321657673772411533993420917949420456142,\n v=28,\n signature=HexBytes('0xe6ca9bba58c88611fad66a6ce8f996908195593807c4b38bd528d2cff09d4eb33e5bfbbf4d3e39b1a2fd816a7680c19ebebaf3a141b239934ad43cb33fcec8ce1c'))\n```\n\n----------------------------------------\n\nTITLE: Reading Private Key from Environment Variable and Setting Up Signing Middleware\nDESCRIPTION: This Python script demonstrates how to read a private key from an environment variable, create an account from it, and set up signing middleware for transaction handling. It includes error checking and prints the resulting hot wallet address.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom web3 import Web3, EthereumTesterProvider\nfrom web3.middleware import SignAndSendRawMiddlewareBuilder\n\nw3 = Web3(EthereumTesterProvider())\n\nprivate_key = os.environ.get(\"PRIVATE_KEY\")\nassert private_key is not None, \"You must set PRIVATE_KEY environment variable\"\nassert private_key.startswith(\"0x\"), \"Private key must start with 0x hex prefix\"\n\naccount: LocalAccount = Account.from_key(private_key)\nw3.middleware_onion.inject(SignAndSendRawMiddlewareBuilder.build(account), layer=0)\n\nprint(f\"Your hot wallet address is {account.address}\")\n\n# Now you can use web3.eth.send_transaction(), Contract.functions.xxx.transact() functions\n# with your local private key through middleware and you no longer get the error\n# \"ValueError: The method eth_sendTransaction does not exist/is not available\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Deployment and Interaction\nDESCRIPTION: Shows how to deploy a smart contract and interact with it using both transact() method and manual transaction building/signing approaches.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/transactions.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# After compiling the contract, initialize the contract factory:\ninit_bytecode = \"60806040523480156200001157600080fd5b5060...\"\nabi = '[{\"inputs\": [{\"internalType\": \"string\",\"name\": \"_message\",...'\nBillboard = w3.eth.contract(bytecode=init_bytecode, abi=abi)\n\n# Deploy a contract using `transact` + the signer middleware:\ntx_hash = Billboard.constructor(\"gm\").transact({\"from\": acct2.address})\nreceipt = w3.eth.get_transaction_receipt(tx_hash)\ndeployed_addr = receipt[\"contractAddress\"]\n\n# Reference the deployed contract:\nbillboard = w3.eth.contract(address=deployed_addr, abi=abi)\n\n# Manually build and sign a transaction:\nunsent_billboard_tx = billboard.functions.writeBillboard(\"gn\").build_transaction({\n    \"from\": acct2.address,\n    \"nonce\": w3.eth.get_transaction_count(acct2.address),\n})\nsigned_tx = w3.eth.account.sign_transaction(unsent_billboard_tx, private_key=acct2.key)\n\n# Send the raw transaction:\nassert billboard.functions.message().call() == \"gm\"\ntx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)\nw3.eth.wait_for_transaction_receipt(tx_hash)\nassert billboard.functions.message().call() == \"gn\"\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for Ethereum Transactions with Web3.py\nDESCRIPTION: Example of using the estimate_gas method to calculate the gas required for a transaction without actually executing it on the blockchain. This method helps determine appropriate gas limits for transactions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.estimate_gas({'to': '0xd3CdA913deB6f67967B99D67aCDFa1712C293601', 'from':web3.eth.accounts[0], 'value': 12345})\n21000\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Signing with send_raw_transaction\nDESCRIPTION: Demonstrates the manual process of building, signing, and sending a transaction using send_raw_transaction without middleware.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/transactions.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# 1. Build a new tx\ntransaction = {\n    'from': acct2.address,\n    'to': some_address,\n    'value': 1000000000,\n    'nonce': w3.eth.get_transaction_count(acct2.address),\n    'gas': 200000,\n    'maxFeePerGas': 2000000000,\n    'maxPriorityFeePerGas': 1000000000,\n}\n\n# 2. Sign tx with a private key\nsigned = w3.eth.account.sign_transaction(transaction, pk)\n\n# 3. Send the signed transaction\ntx_hash = w3.eth.send_raw_transaction(signed.raw_transaction)\ntx = w3.eth.get_transaction(tx_hash)\nassert tx[\"from\"] == acct2.address\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with EthereumTesterProvider in Python\nDESCRIPTION: Sets up a test provider using EthereumTesterProvider for learning and prototyping. Requires additional dependencies installed via 'pip install \"web3[tester]\"'.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/quickstart.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, EthereumTesterProvider\n>>> w3 = Web3(EthereumTesterProvider())\n>>> w3.is_connected()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Calling Ethereum Contract Function with Complex Arguments in Python\nDESCRIPTION: Demonstrates how to call an Ethereum contract function with a complex dictionary argument using web3.py.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncontract_instance.functions.updateMapping({\"sa\": \"0x0000000000000000000000000000000000000000\", \"sb\": HexBytes(123)}).transact()\n```\n\n----------------------------------------\n\nTITLE: Batch Request Examples\nDESCRIPTION: Shows different ways to make batch requests including context manager, direct usage, and contract interactions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith w3.batch_requests() as batch:\n    batch.add(w3.eth.get_block(6))\n    batch.add(w3.eth.get_block(4))\n    batch.add(w3.eth.get_block(2))\n\n    responses = batch.execute()\n    assert len(responses) == 3\n```\n\nLANGUAGE: python\nCODE:\n```\nbatch = w3.batch_requests()\nbatch.add(w3.eth.get_block(1))\nbatch.add(w3.eth.get_block(2))\nresponses = batch.execute()\nassert len(responses) == 2\n```\n\nLANGUAGE: python\nCODE:\n```\nbatch.add(math_contract.functions.multiply7(0))\n```\n\nLANGUAGE: python\nCODE:\n```\nbatch = w3.batch_requests()\nbatch.add_mapping(\n    {\n        math_contract.functions.multiply7: [1, 2],\n        w3.eth.get_block: [3, 4],\n    }\n)\nresponses = batch.execute()\nassert len(responses) == 4\n```\n\nLANGUAGE: python\nCODE:\n```\nbatch = w3.batch_requests()\nbatch.add(w3.eth.get_block(1))\nbatch.add(w3.eth.get_block(2))\nassert len(batch._requests_info) == 2\n\nbatch.clear()\nassert batch._requests_info == []\n```\n\n----------------------------------------\n\nTITLE: Implementing Signing Middleware in Python\nDESCRIPTION: This code shows how to use the SignAndSendRawMiddlewareBuilder to automatically capture, sign, and send transactions as raw transactions. It's particularly useful for interacting with hosted nodes that only support signed transactions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, EthereumTesterProvider\nw3 = Web3(EthereumTesterProvider)\nfrom web3.middleware import SignAndSendRawMiddlewareBuilder\nfrom eth_account import Account\nacct = Account.create('KEYSMASH FJAFJKLDSKF7JKFDJ 1530')\nw3.middleware_onion.inject(SignAndSendRawMiddlewareBuilder.build(acct), layer=0)\nw3.eth.default_account = acct.address\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 Account and Middleware for Ethereum Transactions in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Web3 account from a private key, inject signing middleware, and set the default account for transactions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> acct = async_w3.eth.account.from_key(os.environ.get('PRIVATE_KEY'))\n>>> async_w3.middleware_onion.inject(SignAndSendRawMiddlewareBuilder.build(acct), layer=0)\n>>> async_w3.eth.default_account = acct.address\n\n>>> # use `eth_sendTransaction` to automatically sign and send the raw transaction\n>>> await async_w3.eth.send_transaction(tx_dict)\nHexBytes('0x09511acf75918fd03de58141d2fd409af4fd6d3dce48eb3aa1656c8f3c2c5c21')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Block Information using Web3.py\nDESCRIPTION: Demonstrates how to fetch and display detailed information about the latest block on the Ethereum blockchain using the Web3.py library.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/quickstart.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.eth.get_block('latest')\n{'difficulty': 1,\n 'gasLimit': 6283185,\n 'gasUsed': 0,\n 'hash': HexBytes('0x53b983fe73e16f6ed8178f6c0e0b91f23dc9dad4cb30d0831f178291ffeb8750'),\n 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),\n 'miner': '0x0000000000000000000000000000000000000000',\n 'mixHash': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000000'),\n 'nonce': HexBytes('0x0000000000000000'),\n 'number': 0,\n 'parentHash': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000000'),\n 'proofOfAuthorityData': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000000dddc391ab2bf6701c74d0c8698c2e13355b2e4150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),\n 'receiptsRoot': HexBytes('0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'),\n 'sha3Uncles': HexBytes('0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'),\n 'size': 622,\n 'stateRoot': HexBytes('0x1f5e460eb84dc0606ab74189dbcfe617300549f8f4778c3c9081c119b5b5d1c1'),\n 'timestamp': 0,\n 'totalDifficulty': 1,\n 'transactions': [],\n 'transactionsRoot': HexBytes('0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'),\n 'uncles': []}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Ethereum Nodes using Web3.py\nDESCRIPTION: Shows how to connect to remote Ethereum nodes using HTTP and WebSocket providers. The endpoint URL is typically provided by the remote node service after account creation.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/quickstart.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, AsyncWeb3\n\n>>> w3 = Web3(Web3.HTTPProvider('https://<your-provider-url>'))\n\n>>> w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider('https://<your-provider-url>'))\n\n>>> w3 = await AsyncWeb3(AsyncWeb3.WebSocketProvider('wss://<your-provider-url>'))\n```\n\n----------------------------------------\n\nTITLE: Converting Ethereum Currency Denominations with Web3.py in Python\nDESCRIPTION: Shows how to use web3.py methods to convert between different Ethereum currency denominations, such as wei and ether. It also demonstrates best practices for handling precision in currency conversions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.from_wei(3841357360894980500000001, 'ether')\nDecimal('3841357.360894980500000001')\n\n>>> from decimal import Decimal\n>>> web3.to_wei(Decimal('3841357.360894980500000001'), 'ether')\n3841357360894980500000001\n\n>>> web3.to_wei(Decimal('0.000000005'), 'ether')\n5000000000\n>>> web3.from_wei(5000000000, 'gwei')\nDecimal('5')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Count with Web3.py in Python\nDESCRIPTION: This code shows how to get the number of peers currently connected to the client using the web3.net.peer_count property. It delegates to the net_peerCount RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.net.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.net.peer_count\n1\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Event Logs in Python\nDESCRIPTION: Example demonstrating how to query Transfer events from a WETH contract using Web3.py Contract object and get_logs method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWETH_ADDRESS = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'\nWETH_ABI = '[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},... truncated for brevity ...}]'\n\nweth_contract = w3.eth.contract(address=WETH_ADDRESS, abi=WETH_ABI)\n\n# fetch transfer events in the last block\nlogs = weth_contract.events.Transfer().get_logs(from_block=w3.eth.block_number)\n\nfor log in logs:\n   print(f\"Transfer of {w3.from_wei(log.args.wad, 'ether')} WETH from {log.args.src} to {log.args.dst}\")\n```\n\n----------------------------------------\n\nTITLE: Value-Based Gas Price Strategy Implementation\nDESCRIPTION: Example implementation of a custom gas price strategy that sets different gas prices based on transaction value threshold of 1 Ether.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/gas_price.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\n\ndef value_based_gas_price_strategy(web3, transaction_params):\n    if transaction_params['value'] > Web3.to_wei(1, 'ether'):\n        return Web3.to_wei(20, 'gwei')\n    else:\n        return Web3.to_wei(5, 'gwei')\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Contract Events in Real-time using Python\nDESCRIPTION: Asynchronous example showing how to subscribe to Transfer events from a WETH contract using WebSocketProvider for real-time updates.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom web3 import AsyncWeb3, WebSocketProvider\nfrom eth_abi.abi import decode\n\nWETH_ADDRESS = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n\nasync def subscribe_to_transfer_events():\n    async with AsyncWeb3(WebSocketProvider(\"...\")) as w3:\n        transfer_event_topic = w3.keccak(text=\"Transfer(address,address,uint256)\")\n        filter_params = {\n            \"address\": WETH_ADDRESS,\n            \"topics\": [transfer_event_topic],\n        }\n        subscription_id = await w3.eth.subscribe(\"logs\", filter_params)\n        print(f\"Subscribing to transfer events for WETH at {subscription_id}\")\n\n        async for payload in w3.socket.process_subscriptions():\n            result = payload[\"result\"]\n\n            from_addr = decode([\"address\"], result[\"topics\"][1])[0]\n            to_addr = decode([\"address\"], result[\"topics\"][2])[0]\n            amount = decode([\"uint256\"], result[\"data\"])[0]\n            print(f\"{w3.from_wei(amount, 'ether')} WETH from {from_addr} to {to_addr}\")\n\nasyncio.run(subscribe_to_transfer_events())\n```\n\n----------------------------------------\n\nTITLE: Sending raw Ethereum transaction with Web3.py\nDESCRIPTION: Demonstrates how to send a signed raw transaction to the Ethereum network using the send_raw_transaction method from web3.py.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.eth.send_raw_transaction(signed_txn.raw_transaction)  # doctest: +SKIP\n```\n\n----------------------------------------\n\nTITLE: Verifying a Signed Message with web3.py\nDESCRIPTION: This Python code shows how to verify a signed message using web3.py. It recovers the address that signed the message using the original message text and the signature.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> message = encode_defunct(text=\"Iâ¥SF\")\n>>> w3.eth.account.recover_message(message, signature=signed_message.signature)\n'0x5ce9454909639D2D17A3F753ce7d93fa0b9aB12E'\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Function with New API in Python\nDESCRIPTION: Example of calling a contract function using the new API introduced in v4.0.0-beta.6, which is preferred over the deprecated call() API.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nmy_contract.functions.my_func().call()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Middleware to Web3.py Stack in Python\nDESCRIPTION: This code demonstrates how to add a custom middleware to the Web3.py middleware stack. It shows the process of creating a Web3 instance and adding the custom middleware to it.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\nfrom my_module import (\n    CustomMiddleware,\n)\n\nw3 = Web3(HTTPProvider(endpoint_uri=\"...\"))\n\n# add the middleware to the stack as the class\nw3.middleware_onion.add(CustomMiddleware, name=\"custom_middleware\")\n```\n\n----------------------------------------\n\nTITLE: Subscription Manager Subscribe Method in Python\nDESCRIPTION: Example showing how to use the subscription_manager module to subscribe to multiple events at once. The subscription_manager simplifies managing multiple subscriptions compared to the manual approach.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait w3.subscription_manager.subscribe([sub1, sub2, ...])\n```\n\n----------------------------------------\n\nTITLE: Getting the Resolver for an ENS Record in Python\nDESCRIPTION: This example demonstrates how to obtain the resolver for an ENS name using the resolver() method in Web3.py. It also shows how to access the resolver's address.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> resolver = ns.resolver('ens.eth')\n>>> resolver.address\n'0x5B2063246F2191f18F2675ceDB8b28102e957458'\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Scanning and Processing in Python\nDESCRIPTION: This snippet defines the core logic for scanning and processing blockchain events in chunks. It includes methods for fetching events, processing them, and estimating optimal chunk sizes for efficient scanning.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndef scan_chunk(self, start_block, end_block) -> Tuple[int, datetime.datetime, list]:\n    \"\"\"Read and process events between to block numbers.\n\n    Dynamically decrease the size of the chunk if the case JSON-RPC server pukes out.\n\n    :return: tuple(actual end block number, when this block was mined, processed events)\n    \"\"\"\n\n    block_timestamps = {}\n    get_block_timestamp = self.get_block_timestamp\n\n    # Cache block timestamps to reduce some RPC overhead\n    # Real solution might include smarter models around block\n    def get_block_when(block_num):\n        if block_num not in block_timestamps:\n            block_timestamps[block_num] = get_block_timestamp(block_num)\n        return block_timestamps[block_num]\n\n    all_processed = []\n\n    for event_type in self.events:\n\n        # Callable that takes care of the underlying web3 call\n        def _fetch_events(_start_block, _end_block):\n            return _fetch_events_for_all_contracts(self.w3,\n                                                   event_type,\n                                                   self.filters,\n                                                   from_block=_start_block,\n                                                   to_block=_end_block)\n\n        # Do `n` retries on `eth_getLogs`,\n        # throttle down block range if needed\n        end_block, events = _retry_web3_call(\n            _fetch_events,\n            start_block=start_block,\n            end_block=end_block,\n            retries=self.max_request_retries,\n            delay=self.request_retry_seconds)\n\n        for evt in events:\n            idx = evt[\"logIndex\"]  # Integer of the log index position in the block, null when its pending\n\n            # We cannot avoid minor chain reorganisations, but\n            # at least we must avoid blocks that are not mined yet\n            assert idx is not None, \"Somehow tried to scan a pending block\"\n\n            block_number = evt[\"blockNumber\"]\n\n            # Get UTC time when this event happened (block mined timestamp)\n            # from our in-memory cache\n            block_when = get_block_when(block_number)\n\n            logger.debug(f\"Processing event {evt['event']}, block: {evt['blockNumber']} count: {evt['blockNumber']}\")\n            processed = self.state.process_event(block_when, evt)\n            all_processed.append(processed)\n\n    end_block_timestamp = get_block_when(end_block)\n    return end_block, end_block_timestamp, all_processed\n\ndef estimate_next_chunk_size(self, current_chuck_size: int, event_found_count: int):\n    \"\"\"Try to figure out optimal chunk size\n\n    Our scanner might need to scan the whole blockchain for all events\n\n    * We want to minimize API calls over empty blocks\n\n    * We want to make sure that one scan chunk does not try to process too many entries once, as we try to control commit buffer size and potentially asynchronous busy loop\n\n    * Do not overload node serving JSON-RPC API by asking data for too many events at a time\n\n    Currently Ethereum JSON-API does not have an API to tell when a first event occurred in a blockchain\n    and our heuristics try to accelerate block fetching (chunk size) until we see the first event.\n\n    These heuristics exponentially increase the scan chunk size depending on if we are seeing events or not.\n    When any transfers are encountered, we are back to scanning only a few blocks at a time.\n    It does not make sense to do a full chain scan starting from block 1, doing one JSON-RPC call per 20 blocks.\n    \"\"\"\n\n    if event_found_count > 0:\n        # When we encounter first events, reset the chunk size window\n        current_chuck_size = self.min_scan_chunk_size\n    else:\n        current_chuck_size *= self.chunk_size_increase\n\n    current_chuck_size = max(self.min_scan_chunk_size, current_chuck_size)\n    current_chuck_size = min(self.max_scan_chunk_size, current_chuck_size)\n    return int(current_chuck_size)\n```\n\n----------------------------------------\n\nTITLE: Querying Transactions for Contract Interactions in Python\nDESCRIPTION: Example showing how to query the latest block for transactions interacting with a specific contract address (WETH contract in this case).\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nWETH_ADDRESS = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'\n\nblock = w3.eth.get_block('latest')\nfor tx_hash in block.transactions:\n    tx = w3.eth.get_transaction(tx_hash)\n    if tx['to'] == WETH_ADDRESS:\n        print(f'Found interaction with WETH contract! {tx}')\n```\n\n----------------------------------------\n\nTITLE: Injecting Middleware to Specific Layer in Web3.py\nDESCRIPTION: Demonstrates how to inject a named middleware to a specific layer (innermost or outermost) using the inject() method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Either of these will put the gas_price_strategy middleware at the innermost layer\n>>> w3 = Web3(...)\n>>> w3.middleware_onion.inject(web3.middleware.GasPriceStrategyMiddleware, layer=0)\n# or\n>>> w3.middleware_onion.inject(web3.middleware.GasPriceStrategyMiddleware, 'gas_price_strategy', layer=0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Beacon Client in Python\nDESCRIPTION: Creates a new Beacon client instance by connecting to a local or remote beacon node endpoint.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.beacon import Beacon\nbeacon = Beacon(\"http://localhost:5051\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Block Data with Web3.py\nDESCRIPTION: This method retrieves block data for a specified block identifier, using either eth_getBlockByNumber or eth_getBlockByHash RPC methods. It can return full transaction objects or just transaction hashes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_block(2000000)\nAttributeDict({\n    'difficulty': 49824742724615,\n    'extraData': '0xe4b883e5bda9e7a59ee4bb99e9b1bc',\n    'gasLimit': 4712388,\n    'gasUsed': 21000,\n    'hash': '0xc0f4906fea23cf6f3cce98cb44e8e1449e455b28d684dfa9ff65426495584de6',\n    'logsBloom': '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n    'miner': '0x61c808d82a3ac53231750dadc13c777b59310bd9',\n    'nonce': '0x3b05c6d5524209f1',\n    'number': 2000000,\n    'parentHash': '0x57ebf07eb9ed1137d41447020a25e51d30a0c272b5896571499c82c33ecb7288',\n    'receiptsRoot': '0x84aea4a7aad5c5899bd5cfc7f309cc379009d30179316a2a7baa4a2ea4a438ac',\n    'sha3Uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n    'size': 650,\n    'stateRoot': '0x96dbad955b166f5119793815c36f11ffa909859bbfeb64b735cca37cbf10bef1',\n    'timestamp': 1470173578,\n    'totalDifficulty': 44010101827705409388,\n    'transactions': ['0xc55e2b90168af6972193c1f86fa4d7d7b31a29c156665d15b9cd48618b5177ef'],\n    'transactionsRoot': '0xb31f174d27b99cdae8e746bd138a01ce60d8dd7b224f7c60845914def05ecc58',\n    'uncles': [],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Event Filter with Topics in Web3.py\nDESCRIPTION: Example demonstrating how to create an event filter with topic parameters using Web3.py. Shows how to hash event signatures and specify indexed argument filters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nevent_signature_hash = web3.keccak(text=\"eventName(uint32)\").hex()\nevent_filter = web3.eth.filter({\n    \"address\": myContract_address,\n    \"topics\": [event_signature_hash,\n               \"0x000000000000000000000000000000000000000000000000000000000000000a\"],\n    })\n```\n\n----------------------------------------\n\nTITLE: Threaded Event Listening in Web3.py\nDESCRIPTION: Implementation of event listening using a separate thread for the event loop, allowing the main thread to handle other tasks.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, IPCProvider\nfrom threading import Thread\nimport time\n\n# instantiate Web3 instance\nw3 = Web3(IPCProvider(...))\n\ndef handle_event(event):\n    print(event)\n    # and whatever\n\n\ndef log_loop(event_filter, poll_interval):\n    while True:\n        for event in event_filter.get_new_entries():\n            handle_event(event)\n        time.sleep(poll_interval)\n\n\ndef main():\n    block_filter = w3.eth.filter('latest')\n    worker = Thread(target=log_loop, args=(block_filter, 5), daemon=True)\n    worker.start()\n        # .. do some other stuff\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Receipt with Web3.py\nDESCRIPTION: Demonstrates how to wait for a transaction to be included in a block and retrieve its receipt. This method allows specifying a timeout and poll latency.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.wait_for_transaction_receipt('0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060')\n# If transaction is not yet in a block, time passes, while the thread sleeps...\n# ...\n# Then when the transaction is added to a block, its receipt is returned:\nAttributeDict({\n    'blockHash': HexBytes('0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd'),\n    'blockNumber': 46147,\n    'contractAddress': None,\n    'cumulativeGasUsed': 21000,\n    'from': '0xA1E4380A3B1f749673E270229993eE55F35663b4',\n    'gasUsed': 21000,\n    'logs': [],\n    'logsBloom': HexBytes('0x000000000000000000000000000000000000000000000000...0000'),\n    'status': 1,\n    'to': '0x5DF9B87991262F6BA471F09758CDE1c0FC1De734',\n    'transactionHash': HexBytes('0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060'),\n    'transactionIndex': 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gas Price Example\nDESCRIPTION: Demonstrates how to retrieve the gas price using the selected strategy using the generate_gas_price method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/gas_price.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.generate_gas_price()\n20000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Types with web3.py in Python\nDESCRIPTION: Shows how to define different subscription types using the specialized classes provided by web3.py. Each subscription includes a handler function and can have additional configuration like filtering by contract address or topics for logs.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.utils.subscriptions import (\n    NewHeadsSubscription,\n    PendingTxSubscription,\n    LogsSubscription,\n)\n\nsub1 = NewHeadsSubscription(\n    label=\"new-heads-mainnet\",  # optional label\n    handler=new_heads_handler\n)\n\nsub2 = PendingTxSubscription(\n    label=\"pending-tx-mainnet\",  # optional label\n    full_transactions=True,\n    handler=pending_tx_handler,\n)\n\nsub3 = LogsSubscription(\n    label=\"WETH transfers\",  # optional label\n    address=weth_contract.address,\n    topics=[weth_contract.events.Transfer().topic],\n    handler=log_handler,\n    # optional `handler_context` args to help parse a response\n    handler_context={\"transfer_event\": weth_contract.events.Transfer()},\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncHTTPProvider with Custom Session\nDESCRIPTION: Example demonstrating how to create an AsyncWeb3 instance with an AsyncHTTPProvider and configure it with a custom aiohttp.ClientSession.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from aiohttp import ClientSession\n>>> from web3 import AsyncWeb3, AsyncHTTPProvider\n\n>>> w3 = AsyncWeb3(AsyncHTTPProvider(endpoint_uri))\n\n>>> # If you want to pass in your own session:\n>>> custom_session = ClientSession()\n>>> await w3.provider.cache_async_session(custom_session) # This method is an async method so it needs to be handled accordingly\n>>> # when you're finished, disconnect:\n>>> w3.provider.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Initializing IPCProvider with Specific IPC Path\nDESCRIPTION: Example showing how to create a Web3 instance with an IPCProvider to connect to a local Ethereum node via an IPC socket at a specified path.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3\n>>> w3 = Web3(Web3.IPCProvider(\"~/Library/Ethereum/geth.ipc\"))\n```\n\n----------------------------------------\n\nTITLE: Replacing Ethereum Transactions with Web3.py\nDESCRIPTION: Example of replacing a pending Ethereum transaction using Web3.py. This method uses 'eth_sendTransaction' RPC method and returns the transaction hash of the replacement transaction as a HexBytes object.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n>>> tx = web3.eth.send_transaction({\n        'to': '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n        'from': web3.eth.accounts[0],\n        'value': 1000\n    })\nHexBytes('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331')\n>>> web3.eth.replace_transaction('0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331', {\n        'to': '0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD',\n        'from': web3.eth.accounts[0],\n        'value': 2000\n    })\nHexBytes('0x4177e670ec6431606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1528989')\n```\n\n----------------------------------------\n\nTITLE: Adding Local Filter Middleware in Python\nDESCRIPTION: This snippet demonstrates how to add the LocalFilterMiddleware to Web3.py, which provides an alternative to ethereum node managed filters. It handles Log and Block filter logic locally while using the same web3 filter API.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, EthereumTesterProvider\nw3 = Web3(EthereumTesterProvider())\nfrom web3.middleware import LocalFilterMiddleware\nw3.middleware_onion.add(LocalFilterMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Names to Addresses in Python\nDESCRIPTION: Demonstrates how to get an Ethereum address from an ENS name using the address() method. Also shows multichain address resolution with the coin_type parameter.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ens.auto import ns\neth_address = ns.address('ens.eth')\nassert eth_address == '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7'\n```\n\n----------------------------------------\n\nTITLE: Getting Network ID with Web3.py in Python\nDESCRIPTION: This snippet illustrates how to retrieve the current network id using the web3.net.version property. It delegates to the net_version RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.net.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.net.version\n'8996'\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Methods to Web3 Instance in Python\nDESCRIPTION: Demonstrates how to add or overwrite methods within a Web3 module using the attach_methods function. It shows an example of attaching a custom method to the eth module.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.eth.attach_methods({\n...    'example_method': Method(\n...       'eth_example',\n...       mungers=[...],\n...       request_formatters=[...],\n...       result_formatters=[...],\n...       is_property=False,\n...    ),\n... })\n>>> w3.eth.example_method()\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from All Events at Once in Python\nDESCRIPTION: Shows how to unsubscribe from all active subscriptions at once using the unsubscribe_all method, which is useful when shutting down an application.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait w3.subscription_manager.unsubscribe_all()\nassert subscription_manager.subscriptions == []\n```\n\n----------------------------------------\n\nTITLE: Tracing Ethereum Transactions with Debug API in Python\nDESCRIPTION: Examples of transaction tracing using different tracers including default tracer, prestateTracer, and callTracer with various configuration options\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.debug.trace_transaction('0x96014f00980a25dc7275a5eb5ed25ce0dd79c9233628c421ae373601236949b3')\n    AttributeDict({\n      'gas': 21000,\n      'failed': False,\n      'returnValue': '',\n      'structLogs': []\n    })\n\n>>> web3.geth.debug.trace_transaction('0x96014f00980a25dc7275a5eb5ed25ce0dd79c9233628c421ae373601236949b3', {\n        \"tracer\": \"prestateTracer\",\n    })\n    AttributeDict({\n      '0x0000000000000000000000000000000000000000': AttributeDict({'balance': 0}),\n      '0x7fE3e4C21bDE162214B715AabcE05391301e9F5B': AttributeDict({'balance': 115792089237316195423570985008687907853269984665640564039457584007913129639927}),\n      '0x91fe3039271d43d3f8479f60Cc5293Bc8A461b75': AttributeDict({'balance': 0})\n    })\n\n>>> web3.geth.debug.trace_transaction('0x96014f00980a25dc7275a5eb5ed25ce0dd79c9233628c421ae373601236949b3', {\n        \"tracer\": \"prestateTracer\",\n        \"traceConfig\": {\"diffMode\": True}\n    })\n    AttributeDict({\n      'post': AttributeDict({\n        '0x0000000000000000000000000000000000000000': AttributeDict({'balance': 63000}),\n        '0xcF888Cc4FAe8a3D774e574Ef8C6a261958287d04': AttributeDict({\n          'balance': 115792089237316195423570985008687907853269984665640564039457583959368602105927,\n          'nonce': 3\n        }),\n        '0xD2593D3445a9F0f4c776715f5206FBf4CA6A0475': AttributeDict({'balance': 100000})}),\n      'pre': AttributeDict({\n        '0x0000000000000000000000000000000000000000': AttributeDict({'balance': 42000}),\n        '0xcF888Cc4FAe8a3D774e574Ef8C6a261958287d04': AttributeDict({\n          'balance': 115792089237316195423570985008687907853269984665640564039457583973451623990927,\n          'nonce': 2\n        }),\n        '0xD2593D3445a9F0f4c776715f5206FBf4CA6A0475': AttributeDict({'balance': 0})\n      })\n    })\n```\n\n----------------------------------------\n\nTITLE: Signing Ethereum Transactions with Web3.py\nDESCRIPTION: Example of signing an Ethereum transaction using Web3.py without sending it. This method uses 'eth_signTransaction' RPC method and returns a signed transaction that can be later submitted using 'send_raw_transaction'.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n>>> signed_txn = w3.eth.sign_transaction(dict(\n    nonce=w3.eth.get_transaction_count(w3.eth.accounts[0]),\n    maxFeePerGas=2000000000,\n    maxPriorityFeePerGas=1000000000,\n    gas=100000,\n    to='0xd3CdA913deB6f67967B99D67aCDFa1712C293601',\n    value=1,\n    data=b'',\n    )\n)\nb\"\\xf8d\\x80\\x85\\x040\\xe24\\x00\\x82R\\x08\\x94\\xdcTM\\x1a\\xa8\\x8f\\xf8\\xbb\\xd2\\xf2\\xae\\xc7T\\xb1\\xf1\\xe9\\x9e\\x18\\x12\\xfd\\x01\\x80\\x1b\\xa0\\x11\\r\\x8f\\xee\\x1d\\xe5=\\xf0\\x87\\x0en\\xb5\\x99\\xed;\\xf6\\x8f\\xb3\\xf1\\xe6,\\x82\\xdf\\xe5\\x97lF|\\x97%;\\x15\\xa04P\\xb7=*\\xef \\t\\xf0&\\xbc\\xbf\\tz%z\\xe7\\xa3~\\xb5\\xd3\\xb7=\\xc0v\\n\\xef\\xad+\\x98\\xe3'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Key with web3.py\nDESCRIPTION: This snippet demonstrates how to create a new Ethereum private key and account using web3.py from the command line. It generates a random private key and prints both the key and the corresponding Ethereum address.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -c \"from web3 import Web3; w3 = Web3(); acc = w3.eth.account.create(); print(f'private key={w3.to_hex(acc.key)}, account={acc.address}')\"\n```\n\n----------------------------------------\n\nTITLE: Linking an ENS Name to an Address in Python\nDESCRIPTION: Demonstrates how to set up forward resolution for an ENS name to point to a specific address. Includes options for using the owner's address by default.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nns.setup_address('ens.eth', '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7')\n```\n\n----------------------------------------\n\nTITLE: Checking Network Listening Status with Web3.py in Python\nDESCRIPTION: This snippet demonstrates how to check if the client is actively listening for network connections using the web3.net.listening property. It delegates to the net_listening RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.net.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.net.listening\nTrue\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Block Data in Python\nDESCRIPTION: New eth.get_block method to retrieve block data, deprecating eth.getBlock.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nweb3.eth.get_block(block_identifier)\n```\n\n----------------------------------------\n\nTITLE: Time Travel in Ethereum Test Blockchain\nDESCRIPTION: Demonstrates how to use the timeTravel method to advance the test blockchain by one block, setting the new block's timestamp. This method delegates to the testing_timeTravel RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.testing.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTesting.timeTravel(timestamp)\n```\n\n----------------------------------------\n\nTITLE: Basic Event Subscription Example with WebSocketProvider in Python\nDESCRIPTION: A simple example demonstrating how to subscribe to new block headers using the WebSocketProvider, process incoming events, and unsubscribe when a condition is met. This shows the manual approach to handling subscriptions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom web3 import AsyncWeb3, WebSocketProvider\n\nasync def example():\n    # connect to a node:\n    async with AsyncWeb3(WebSocketProvider(\"wss://...\")) as w3:\n\n    # subscribe to new block headers:\n    subscription_id = await w3.eth.subscribe(\"newHeads\")\n    print(subscription_id)\n\n    # listen for events as they occur:\n    async for response in w3.socket.process_subscriptions():\n        # handle each event:\n        print(response)\n\n        # unsubscribe:\n        if response[\"number\"] > 42012345:\n            await w3.eth.unsubscribe(subscription_id)\n            break\n\nasyncio.run(example())\n```\n\n----------------------------------------\n\nTITLE: Using Async Methods with Web3.py in Python\nDESCRIPTION: Example demonstrating the usage of async methods for Ethereum interactions, including multiple async methods added across different versions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nfrom web3 import AsyncHTTPProvider, AsyncWeb3\n\nasync def main():\n    # Create async web3 instance\n    w3 = AsyncWeb3(AsyncHTTPProvider('http://localhost:8545'))\n    \n    # Examples of async methods\n    chain_id = await w3.eth.chain_id()\n    accounts = await w3.eth.accounts\n    is_mining = await w3.eth.mining()\n    hashrate = await w3.eth.hashrate()\n    logs = await w3.eth.get_logs({'fromBlock': 'latest'})\n    tx_receipt = await w3.eth.get_transaction_receipt(tx_hash)\n    \n    # Wait for transaction receipt\n    receipt = await w3.eth.wait_for_transaction_receipt(tx_hash)\n    \n    # Get storage at address\n    storage = await w3.eth.get_storage_at(address, position)\n    \n    # Check sync status\n    sync_status = await w3.eth.syncing\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Processing ERC-20 Transfer Events in Python\nDESCRIPTION: This method processes an ERC-20 transfer event and records it in the scanner's state. It extracts relevant information from the event and organizes it by block number, transaction hash, and log index.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef process_event(self, block_when: datetime.datetime, event: AttributeDict) -> str:\n    \"\"\"Record a ERC-20 transfer in our database.\"\"\"\n    # Events are keyed by their transaction hash and log index\n    # One transaction may contain multiple events\n    # and each one of those gets their own log index\n\n    # event_name = event.event # \"Transfer\"\n    log_index = event.logIndex  # Log index within the block\n    # transaction_index = event.transactionIndex  # Transaction index within the block\n    txhash = event.transactionHash.hex()  # Transaction hash\n    block_number = event.blockNumber\n\n    # Convert ERC-20 Transfer event to our internal format\n    args = event[\"args\"]\n    transfer = {\n        \"from\": args[\"from\"],\n        \"to\": args.to,\n        \"value\": args.value,\n        \"timestamp\": block_when.isoformat(),\n    }\n\n    # Create empty dict as the block that contains all transactions by txhash\n    if block_number not in self.state[\"blocks\"]:\n        self.state[\"blocks\"][block_number] = {}\n\n    block = self.state[\"blocks\"][block_number]\n    if txhash not in block:\n        # We have not yet recorded any transfers in this transaction\n        # (One transaction may contain multiple events if executed by a smart contract).\n        # Create a tx entry that contains all events by a log index\n        self.state[\"blocks\"][block_number][txhash] = {}\n\n    # Record ERC-20 transfer in our database\n    self.state[\"blocks\"][block_number][txhash][log_index] = transfer\n\n    # Return a pointer that allows us to look up this event later if needed\n    return f\"{block_number}-{txhash}-{log_index}\"\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Provider with Async Iterator\nDESCRIPTION: Example showing how to use AsyncWeb3 with WebSocketProvider as an async iterator for maintaining an indefinite websocket connection with automatic reconnection.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import asyncio\n>>> import websockets\n>>> from web3 import AsyncWeb3\n>>> from web3.providers.persistent import (\n...     AsyncIPCProvider,\n...     WebSocketProvider,\n... )\n\n>>> async def subscription_iterator_example():\n...     # async for w3 in AsyncWeb3(AsyncIPCProvider(\"./path/to/filename.ipc\")):  # for the AsyncIPCProvider\n...     async for w3 in AsyncWeb3(WebSocketProvider(f\"ws://127.0.0.1:8546\")):  # for the WebSocketProvider\n...         try:\n...             ...\n...         except websockets.ConnectionClosed:\n...             continue\n\n# run the example\n>>> asyncio.run(subscription_iterator_example())\n```\n\n----------------------------------------\n\nTITLE: Custom Revert Error Handler\nDESCRIPTION: Support for handling custom revert errors and extracting raw data returned by the node\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nclass ContractLogicError(Exception):\n    def __init__(self, data):\n        self.data = data\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Count with Web3.py\nDESCRIPTION: Demonstrates how to get the number of transactions sent from an account using the get_transaction_count method. This method can specify a block identifier for historical queries.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_transaction_count('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\n340\n```\n\n----------------------------------------\n\nTITLE: Migrating WebSocket Provider Implementation in Python\nDESCRIPTION: Shows the changes in WebSocket provider instantiation between v6 and v7, removing the requirement for persistent_websocket method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# WebsocketsProviderV2:\nAsyncWeb3.persistent_websocket(WebsocketProviderV2('...'))\n\n# WebSocketProvider:\nAsyncWeb3(WebSocketProvider('...'))\n```\n\n----------------------------------------\n\nTITLE: Simulating Ethereum Transactions with eth_simulateV1\nDESCRIPTION: Example showing how to simulate an Ethereum transaction using eth_simulateV1 RPC method. Includes block state overrides, custom baseFeePerGas, and balance modifications.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.eth.simulateV1(\n...   {\n...     \"blockStateCalls\": [\n...       {\n...         \"blockOverrides\": {\n...           \"baseFeePerGas\": Wei(10),\n...         },\n...         \"stateOverrides\": {\n...           \"0xc100000000000000000000000000000000000000\": {\n...             \"balance\": Wei(500000000),\n...           }\n...         },\n...         \"calls\": [\n...           {\n...             \"from\": \"0xc100000000000000000000000000000000000000\",\n...             \"to\": \"0xc100000000000000000000000000000000000000\",\n...             \"maxFeePerGas\": Wei(10),\n...             \"maxPriorityFeePerGas\": Wei(10),\n...           }\n...         ],\n...       }\n...     ],\n...     \"validation\": True,\n...     \"traceTransfers\": True,\n...   },\n...   \"latest\",\n... )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fee History Data with Ethereum Web3.py\nDESCRIPTION: Example of using the fee_history method to retrieve historical gas fee data including base fees per gas and priority fees at specified percentiles. The method returns an AttributeDict with fee information for the requested block range.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.eth.fee_history(4, 'latest', [10, 90])\nAttributeDict({\n    'oldestBlock': 3,\n    'reward': [[220, 7145389], [1000000, 6000213], [550, 550], [125, 12345678]],\n    'baseFeePerGas': [202583058, 177634473, 155594425, 136217133, 119442408],\n    'gasUsedRatio': [0.007390479689642084, 0.0036988514889990873, 0.0018512333048507866, 0.00741217041320997]\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Subscriptions with handle_subscriptions Method in Python\nDESCRIPTION: Shows how to use the handle_subscriptions method to process multiple subscriptions, including handling subscriptions across multiple chains by gathering multiple web3 instances.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def sub_manager():\n    ...\n\n    # handle subscriptions via configured handlers:\n    await w3.subscription_manager.handle_subscriptions()\n\n    # or, gather one w3 instance per chain:\n    await asyncio.gather(\n        w3.subscription_manager.handle_subscriptions(),\n        l2_w3.subscription_manager.handle_subscriptions(),\n    )\n\nasyncio.run(sub_manager())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipt with Web3.py\nDESCRIPTION: Shows how to retrieve a transaction receipt using the get_transaction_receipt method. This method returns detailed information about the transaction's execution.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_transaction_receipt('0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060')  # not yet mined\nTraceback # ... etc ...\nTransactionNotFound: Transaction with hash: 0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060 not found.\n\n# wait for it to be mined....\n>>> web3.eth.get_transaction_receipt('0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060')\nAttributeDict({\n    'blockHash': '0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd',\n    'blockNumber': 46147,\n    'contractAddress': None,\n    'cumulativeGasUsed': 21000,\n    'from': '0xA1E4380A3B1f749673E270229993eE55F35663b4',\n    'gasUsed': 21000,\n    'logs': [],\n    'logsBloom': '0x000000000000000000000000000000000000000000000000...0000',\n    'status': 1, # 0 or 1\n    'to': '0x5DF9B87991262F6BA471F09758CDE1c0FC1De734',\n    'transactionHash': '0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060',\n    'transactionIndex': 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Signing Middleware with Hosted Nodes in Python\nDESCRIPTION: This snippet demonstrates how to use the SignAndSendRawMiddlewareBuilder with hosted nodes like Infura or Alchemy. It automates the process of signing and sending raw transactions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\nw3 = Web3(Web3.HTTPProvider('HTTP_ENDPOINT'))\nfrom web3.middleware import SignAndSendRawMiddlewareBuilder\nfrom eth_account import Account\nimport os\nacct = w3.eth.account.from_key(os.environ.get('PRIVATE_KEY'))\nw3.middleware_onion.inject(SignAndSendRawMiddlewareBuilder.build(acct), layer=0)\nw3.eth.default_account = acct.address\n\n# use `eth_sendTransaction` to automatically sign and send the raw transaction\nw3.eth.send_transaction(tx_dict)\n```\n\n----------------------------------------\n\nTITLE: WebsocketProvider Example - Python\nDESCRIPTION: Code example showing usage of new WebsocketProvider class with connection parameters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.providers.websocket import WebsocketProvider\nw3 = Web3(WebsocketProvider(\"ws://localhost:8546\", websocket_kwargs={\"max_size\": 1000000}))\n```\n\n----------------------------------------\n\nTITLE: JSON Conversion Examples\nDESCRIPTION: Demonstrates converting Python objects to their JSON string representation using to_json method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.to_json(3)\n'3'\n>>> Web3.to_json({'one': 1})\n'{\"one\": 1}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up ENS Address and Text Record in Python\nDESCRIPTION: This snippet demonstrates how to set up an ENS address and set a text record for it using Web3.py. It includes an example of passing a custom transaction dictionary.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nns.setup_address('ens.eth', '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7')\nns.set_text('ens.eth', 'url', 'https://example.com')\n\ntransaction_dict = {'from': '0x123...'}\nns.set_text('ens.eth', 'url', 'https://example.com', transaction_dict)\n```\n\n----------------------------------------\n\nTITLE: Getting Max Priority Fee in Web3.py\nDESCRIPTION: Demonstrates how to retrieve the suggested max priority fee for dynamic fee transactions using the web3.eth.max_priority_fee property.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.max_priority_fee\n2000000000\n```\n\n----------------------------------------\n\nTITLE: Setting up Multichain Address Support for ENS in Python\nDESCRIPTION: Shows how to set up ENS names to resolve to addresses on different blockchains using the coin_type parameter according to ENSIP-9 standard.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom ens.auto import ns\nns.setup_address('ens.eth', coin_type=60)  # ETH is coin_type 60\nassert ns.address('ens.eth', coin_type=60) == '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7'\n```\n\n----------------------------------------\n\nTITLE: Generating Contract Address with CREATE Opcode in Python\nDESCRIPTION: This function returns the checksummed contract address generated using the CREATE opcode. It takes the sender address and nonce as parameters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.utils.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nutils.get_create_address(sender, nonce)\n```\n\n----------------------------------------\n\nTITLE: Accessing String Constants in Web3.py\nDESCRIPTION: This snippet demonstrates how to access predefined string constants in Web3.py. It includes ADDRESS_ZERO (20 bytes of zero), MAX_INT (hexadecimal max uint256), and HASH_ZERO (32 bytes of zero).\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/constants.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#The Address Zero, which is 20 bytes (40 nibbles) of zero.\nweb3.constants.ADDRESS_ZERO\n\n#The hexadecimal version of Max uint256.\nweb3.constants.MAX_INT\n\n#The Hash Zero, which is 32 bytes (64 nibbles) of zero.\nweb3.constants.HASH_ZERO\n```\n\n----------------------------------------\n\nTITLE: Advanced Subscription Management with Multiple Handlers\nDESCRIPTION: Shows how to manage multiple subscriptions with different handlers for new headers, pending transactions, and contract logs using the subscription manager.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import (\n    AsyncWeb3,\n    WebSocketProvider,\n    AsyncIPCProvider,\n)\nfrom web3.utils.subscriptions import (\n    EthSubscription,\n    NewHeadsSubscription,\n    NewHeadsSubscriptionContext,\n    PendingTxSubscription,\n    PendingTxSubscriptionContext,\n    LogsSubscription,\n    LogsSubscriptionContext,\n)\n\nasync def new_heads_handler(\n    handler_context: NewHeadsSubscriptionContext,\n) -> None:\n    header = handler_context.result\n    print(f\"New block header: {header}\\n\")\n    if header[\"number\"] > 1234567:\n        await handler_context.subscription.unsubscribe()\n\nasync def pending_txs_handler(\n    handler_context: PendingTxSubscriptionContext,\n) -> None:\n    ...\n\nasync def log_handler(\n    handler_context: LogsSubscriptionContext,\n) -> None:\n    log_receipt = handler_context.result\n    event_data = handler_context.transfer_event.process_log(log_receipt)\n    print(f\"Log event data: {event_data}\\n\")\n\nasync def sub_manager():\n    local_w3 = await AsyncWeb3(AsyncIPCProvider(LOCAL_IPC))\n    weth_contract = local_w3.eth.contract(\n        address=local_w3.to_checksum_address(\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"),\n        abi=WETH_ABI,\n    )\n    transfer_event = weth_contract.events.Transfer()\n    await local_w3.subscription_manager.subscribe(\n        [\n            NewHeadsSubscription(label=\"new-heads-mainnet\", handler=new_heads_handler),\n            PendingTxSubscription(\n                label=\"pending-tx-mainnet\",\n                full_transactions=True,\n                handler=pending_tx_handler,\n            ),\n            LogsSubscription(\n                label=\"WETH transfers\",\n                address=weth_contract.address,\n                topics=[transfer_event.topic],\n                handler=log_handler,\n                handler_context={\"transfer_event\": transfer_event},\n            ),\n        ]\n    )\n\n    public_w3 = await AsyncWeb3(WebSocketProvider(PUBLIC_PROVIDER_WS))\n    await public_w3.eth.subscribe(\"public_newHeads\", handler=pending_tx_handler, label=\"new-heads-public-ws\")\n    await asyncio.gather(\n        public_w3.subscription_manager.handle_subscriptions(),\n        local_w3.subscription_manager.handle_subscriptions(),\n    )\n    await local_w3.provider.disconnect()\n    await public_w3.provider.disconnect()\n\nasyncio.run(sub_manager())\n```\n\n----------------------------------------\n\nTITLE: Setting Web3 Provider in Python\nDESCRIPTION: Example of setting the Web3 provider using the new API introduced in v4.0.0-beta.4. This allows specifying providers like IPCProvider.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nw3.providers = [IPCProvider()]\n```\n\n----------------------------------------\n\nTITLE: Accessing Integer Constants in Web3.py\nDESCRIPTION: This snippet shows how to access the WEI_PER_ETHER constant, which represents the number of Wei in one Ether. This is a crucial constant for Ethereum-related calculations.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/constants.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#The amount of Wei in one Ether\nweb3.constants.WEI_PER_ETHER\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Bytecode with Web3.py\nDESCRIPTION: This method retrieves the bytecode for a given account (contract address or ENS name) at a specified block using the eth_getCode RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# For a contract address.\n>>> web3.eth.get_code('0x6C8f2A135f6ed072DE4503Bd7C4999a1a17F824B')\n'0x6060604052361561027c5760e060020a60003504630199.....'\n# For a private key address.\n>>> web3.eth.get_code('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\n'0x'\n```\n\n----------------------------------------\n\nTITLE: Web3.py Request Batching Context Manager\nDESCRIPTION: Context manager implementation for handling batch requests in both synchronous and asynchronous contexts.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nw3.batch_requests()\n```\n\n----------------------------------------\n\nTITLE: Resolving Multichain Addresses from ENS Names in Python\nDESCRIPTION: Shows how to use the coin_type parameter to resolve addresses for different blockchains using ENSIP-9 standard.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ens.auto import ns\neth_address = ns.address('ens.eth', coin_type=60)  # ETH is coin_type 60\nassert eth_address == '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Syncing Status in Web3.py\nDESCRIPTION: Shows how to check if the Ethereum node is syncing and retrieve sync status information using the web3.eth.syncing property.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.syncing\nAttributeDict({\n    'currentBlock': 2177557,\n    'highestBlock': 2211611,\n    'knownStates': 0,\n    'pulledStates': 0,\n    'startingBlock': 2177365,\n})\n```\n\n----------------------------------------\n\nTITLE: Keccak Hash Examples\nDESCRIPTION: Shows various ways to compute Keccak-256 hashes using different input formats.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.keccak(0x747874)\n>>> Web3.keccak(b'\\x74\\x78\\x74')\n>>> Web3.keccak(hexstr='0x747874')\n>>> Web3.keccak(hexstr='747874')\n>>> Web3.keccak(text='txt')\n```\n\n----------------------------------------\n\nTITLE: Replacing Middleware in Web3.py Instance\nDESCRIPTION: Demonstrates how to replace one middleware with another in a Web3.py instance, preserving the name if applicable.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3.middleware import GasPriceStrategyMiddleware, AttributeDictMiddleware\n>>> w3 = Web3(provider, middleware=[GasPriceStrategyMiddleware, AttributeDictMiddleware])\n\n>>> w3.middleware_onion.replace(GasPriceStrategyMiddleware, AttributeDictMiddleware)\n# this is now referenced by the new middleware object, so to remove it:\n>>> w3.middleware_onion.remove(AttributeDictMiddleware)\n\n# or, if it was named\n\n>>> w3.middleware_onion.replace('gas_price_strategy', AttributeDictMiddleware)\n# this is still referenced by the original name, so to remove it:\n>>> w3.middleware_onion.remove('gas_price_strategy')\n```\n\n----------------------------------------\n\nTITLE: Calculating Solidity Keccak Hash in Python\nDESCRIPTION: Demonstrates the use of Web3.solidity_keccak method to compute Keccak-256 hashes compatible with Solidity's keccak function. It shows examples with different data types including boolean, integers, arrays, and addresses.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.solidity_keccak(['bool'], [True])\nHexBytes(\"0x5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2\")\n\n>>> Web3.solidity_keccak(['uint8', 'uint8', 'uint8'], [97, 98, 99])\nHexBytes(\"0x4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45\")\n\n>>> Web3.solidity_keccak(['uint8[]'], [[97, 98, 99]])\nHexBytes(\"0x233002c671295529bcc50b76a2ef2b0de2dac2d93945fca745255de1a9e4017e\")\n\n>>> Web3.solidity_keccak(['address'], [\"0x49EdDD3769c0712032808D86597B84ac5c2F5614\"])\nHexBytes(\"0x2ff37b5607484cd4eecf6d13292e22bd6e5401eaffcc07e279583bc742c68882\")\n\n>>> Web3.solidity_keccak(['address'], [\"ethereumfoundation.eth\"])\nHexBytes(\"0x913c99ea930c78868f1535d34cd705ab85929b2eaaf70fcd09677ecd6e5d75e9\")\n```\n\n----------------------------------------\n\nTITLE: Generating Contract Address with CREATE2 Opcode in Python\nDESCRIPTION: This function returns the checksummed contract address generated using the CREATE2 opcode. It takes the sender address, salt, and contract bytecode as parameters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.utils.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nutils.get_create2_address(sender, salt, init_code)\n```\n\n----------------------------------------\n\nTITLE: Creating Event Filters in Python\nDESCRIPTION: Examples showing how to create filters for events using the contract instance API and manual filter parameter construction.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nevent_filter = my_contract.events.myEvent.create_filter(from_block='latest', argument_filters={'arg1':10})\n\n# Or built manually\nevent_filter = w3.eth.filter({\"address\": contract_address})\n\n# Attaching to existing filter\nexisting_filter = w3.eth.filter(filter_id=\"0x0\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Transaction Data with Web3.py\nDESCRIPTION: Shows how to retrieve the raw form of a transaction using the get_raw_transaction method. This method returns the transaction data as HexBytes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_raw_transaction('0x86fbfe56cce542ff0a2a2716c31675a0c9c43701725c4a751d20ee2ddf8a733d')\nHexBytes('0xf86907843b9aca0082520894dc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd018086eecac466e115a0f9db4e25484b28f486b247a372708d4cd0643fc63e604133afac577f4cc1eab8a044841d84e799d4dc18ba146816a937e8a0be8bc296bd8bb8aea126de5e627e06')\n```\n\n----------------------------------------\n\nTITLE: Currency Conversion Examples\nDESCRIPTION: Shows conversion between wei and other Ethereum denominations using to_wei and from_wei methods.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.to_wei(1, 'ether')\n1000000000000000000\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.from_wei(1000000000000000000, 'ether')\nDecimal('1')\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation for Log Events in Python\nDESCRIPTION: A sample handler function for processing log events. The handler receives a context object that contains the result data, the subscription instance, and any custom context values that were provided during subscription setup.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def new_heads_handler(\n    handler_context: LogsSubscriptionContext,\n) -> None:\n    log_receipt = handler_context.result\n    print(f\"New log: {log_receipt}\\n\")\n\n    event_data = handler_context.transfer_event.process_log(log_receipt)\n    print(f\"Log event data: {event_data}\\n\")\n\n    if log_receipt[\"blockNumber\"] > 42012345:\n        await handler_context.subscription.unsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Removing Middleware from Web3.py Instance\nDESCRIPTION: Shows how to remove middleware from a Web3.py instance using either the middleware object or its name.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> w3 = Web3(...)\n>>> w3.middleware_onion.remove(web3.middleware.GasPriceStrategyMiddleware)\n# or\n>>> w3.middleware_onion.remove('gas_price_strategy')\n```\n\n----------------------------------------\n\nTITLE: Retry Mechanism for Web3 API Calls with Dynamic Block Range Adjustment\nDESCRIPTION: A retry function that throttles down block range when JSON-RPC server fails to serve a request. It progressively reduces the block range by half on each retry, helping to handle API limitations from Ethereum nodes like Go Ethereum.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef _retry_web3_call(func, start_block, end_block, retries, delay) -> Tuple[int, list]:\n    \"\"\"A custom retry loop to throttle down block range.\n\n    If our JSON-RPC server cannot serve all incoming `eth_getLogs` in a single request,\n    we retry and throttle down block range for every retry.\n\n    For example, Go Ethereum does not indicate what is an acceptable response size.\n    It just fails on the server-side with a \"context was cancelled\" warning.\n\n    :param func: A callable that triggers Ethereum JSON-RPC, as func(start_block, end_block)\n    :param start_block: The initial start block of the block range\n    :param end_block: The initial start block of the block range\n    :param retries: How many times we retry\n    :param delay: Time to sleep between retries\n    \"\"\"\n    for i in range(retries):\n        try:\n            return end_block, func(start_block, end_block)\n        except Exception as e:\n            # Assume this is HTTPConnectionPool(host='localhost', port=8545): Read timed out. (read timeout=10)\n            # from Go Ethereum. This translates to the error \"context was cancelled\" on the server side:\n            # https://github.com/ethereum/go-ethereum/issues/20426\n            if i < retries - 1:\n                # Give some more verbose info than the default middleware\n                logger.warning(\n                    f\"Retrying events for block range {start_block} - {end_block} ({end_block-start_block}) failed with {e} , retrying in {delay} seconds\")\n                # Decrease the `eth_getBlocks` range\n                end_block = start_block + ((end_block - start_block) // 2)\n                # Let the JSON-RPC to recover e.g. from restart\n                time.sleep(delay)\n                continue\n            else:\n                logger.warning(\"Out of retries\")\n                raise\n```\n\n----------------------------------------\n\nTITLE: Setting up Reverse Resolution for ENS in Python\nDESCRIPTION: How to link an address to an ENS name for reverse resolution (like caller ID). Enables looking up what name points to a given address.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nns.setup_name('ens.eth', '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7')\n```\n\n----------------------------------------\n\nTITLE: Getting Latest Block Number in Web3.py\nDESCRIPTION: Shows how to retrieve the number of the most recent block using the web3.eth.block_number property.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.block_number\n2206939\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block and Index with Web3.py\nDESCRIPTION: Demonstrates how to retrieve a transaction using block identifier and transaction index. This method can use either block number or block hash as the identifier.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_transaction_by_block(46147, 0)\nAttributeDict({\n    'blockHash': '0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd',\n    'blockNumber': 46147,\n    'from': '0xA1E4380A3B1f749673E270229993eE55F35663b4',\n    'gas': 21000,\n    'gasPrice': None,\n    'hash': '0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060',\n    'input': '0x',\n    'maxFeePerGas': 2000000000,\n    'maxPriorityFeePerGas': 1000000000,\n    'nonce': 0,\n    'to': '0x5DF9B87991262F6BA471F09758CDE1c0FC1De734',\n    'transactionIndex': 0,\n    'value': 31337,\n})\n>>> web3.eth.get_transaction_by_block('0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd', 0)\nAttributeDict({\n    'blockHash': '0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd',\n    'blockNumber': 46147,\n    'from': '0xA1E4380A3B1f749673E270229993eE55F35663b4',\n    'gas': 21000,\n    'gasPrice': None,\n    'hash': '0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060',\n    'input': '0x',\n    'maxFeePerGas': 2000000000,\n    'maxPriorityFeePerGas': 1000000000,\n    'nonce': 0,\n    'to': '0x5DF9B87991262F6BA471F09758CDE1c0FC1De734',\n    'transactionIndex': 0,\n    'value': 31337,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Blockchain Scanning Methods in Python\nDESCRIPTION: This snippet includes methods for scanning blockchain events, including getting block timestamps, determining scan start and end blocks, and processing events in chunks. It also includes logic for handling potential blockchain reorganizations.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef get_block_timestamp(self, block_num) -> datetime.datetime:\n    \"\"\"Get Ethereum block timestamp\"\"\"\n    try:\n        block_info = self.w3.eth.get_block(block_num)\n    except BlockNotFound:\n        # Block was not mined yet,\n        # minor chain reorganisation?\n        return None\n    last_time = block_info[\"timestamp\"]\n    return datetime.datetime.utcfromtimestamp(last_time)\n\ndef get_suggested_scan_start_block(self):\n    \"\"\"Get where we should start to scan for new token events.\n\n    If there are no prior scans, start from block 1.\n    Otherwise, start from the last end block minus ten blocks.\n    We rescan the last ten scanned blocks in the case there were forks to avoid\n    misaccounting due to minor single block works (happens once in an hour in Ethereum).\n    These heuristics could be made more robust, but this is for the sake of simple reference implementation.\n    \"\"\"\n\n    end_block = self.get_last_scanned_block()\n    if end_block:\n        return max(1, end_block - self.NUM_BLOCKS_RESCAN_FOR_FORKS)\n    return 1\n\ndef get_suggested_scan_end_block(self):\n    \"\"\"Get the last mined block on Ethereum chain we are following.\"\"\"\n\n    # Do not scan all the way to the final block, as this\n    # block might not be mined yet\n    return self.w3.eth.block_number - 1\n\ndef get_last_scanned_block(self) -> int:\n    return self.state.get_last_scanned_block()\n\ndef delete_potentially_forked_block_data(self, after_block: int):\n    \"\"\"Purge old data in the case of blockchain reorganisation.\"\"\"\n    self.state.delete_data(after_block)\n```\n\n----------------------------------------\n\nTITLE: Preparing a Signed Message for Solidity's ecrecover\nDESCRIPTION: This Python function prepares a signed message for use with Solidity's ecrecover function. It formats the message hash, v, r, and s values as expected by Solidity and web3.js.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3\n\n# ecrecover in Solidity expects v as a uint8, but r and s as left-padded bytes32\n# Remix / web3.js expect r and s to be encoded to hex\n# This convenience method will do the pad & hex for us:\n>>> def to_32byte_hex(val):\n...   return Web3.to_hex(Web3.to_bytes(val).rjust(32, b'\\0'))\n\n>>> ec_recover_args = (msghash, v, r, s) = (\n...   Web3.to_hex(signed_message.message_hash),\n...   signed_message.v,\n...   to_32byte_hex(signed_message.r),\n...   to_32byte_hex(signed_message.s),\n```\n\n----------------------------------------\n\nTITLE: Awaiting WebSocket Provider Instantiation\nDESCRIPTION: Example demonstrating how to await the instantiation of AsyncWeb3 with a WebSocketProvider and handle manual connection cleanup.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> async def await_instantiation_example():\n...     # w3 = await AsyncWeb3(AsyncIPCProvider(\"./path/to/filename.ipc\"))  # for the AsyncIPCProvider\n...     w3 = await AsyncWeb3(WebSocketProvider(f\"ws://127.0.0.1:8546\"))  # for the WebSocketProvider\n...\n...     # some code here\n...\n...     # manual cleanup\n...     await w3.provider.disconnect()\n\n# run the example\n>>> asyncio.run(await_instantiation_example())\n```\n\n----------------------------------------\n\nTITLE: Creating EIP-2930 Access Lists with Web3.py\nDESCRIPTION: Example showing how to create an EIP-2930 access list for a transaction using eth_createAccessList RPC method. Returns storage slots and addresses accessed by the transaction.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.eth.create_access_list(\n...     {\n...         \"to\": to_checksum_address(\"0xF0109fC8DF283027b6285cc889F5aA624EaC1F55\"),\n...         \"gasPrice\": 10**11,\n...         \"value\": 0,\n...         \"data\": \"0x608060806080608155\",\n...     },\n...     \"pending\",\n... )\n```\n\n----------------------------------------\n\nTITLE: Connecting to Geth Dev Proof of Authority Node in Python\nDESCRIPTION: Code example demonstrating how to connect to a geth --dev Proof of Authority instance with the POA middleware loaded by default, and how to confirm the connection succeeded.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3.auto.gethdev import w3\n\n# confirm that the connection succeeded\n>>> w3.is_connected()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Proof in Web3.py\nDESCRIPTION: Demonstrates how to get the Merkle proof for an account using web3.eth.get_proof(). Returns account details and storage proofs for specified positions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_proof('0x6C8f2A135f6ed072DE4503Bd7C4999a1a17F824B', [0], 3391)\nAttributeDict({\n    'address': '0x4CB06C43fcdABeA22541fcF1F856A6a296448B6c',\n    'accountProof': ['0xf90211a03841a7ddd65c70c94b8efa79190d00f0ab134b26f18dcad508f60a7e74559d0ba0464b07429a05039e22931492d6c6251a860c018ea390045d596b1ac11b5c7aa7a011f4b89823a03c9c4b5a8ab079ee1bc0e2a83a508bb7a5dc7d7fb4f2e95d3186a0b5f7c51c3b2d51d97f171d2b38a4df1a7c0acc5eb0de46beeff4d07f5ed20e19a0b591a2ce02367eda31cf2d16eca7c27fd44dbf0864b64ea8259ad36696eb2a04a02b646a7552b8392ae94263757f699a27d6e9176b4c06b9fc0a722f893b964795a02df05d68bceb88eebf68aafde61d10ab942097afc1c58b8435ffd3895358a742a0c2f16143c4d1db03276c433696dddb3e9f3b113bcd854b127962262e98f43147a0828820316cc02bfefd899aba41340659fd06df1e0a0796287ec2a4110239f6d2a050496598670b04df7bbff3718887fa36437d6d8c7afb4eff86f76c5c7097dcc4a0c14e9060c6b3784e35b9e6ae2ad2984142a75910ccc89eb89dc1e2f44b6c58c2a009804db571d0ce07913e1cbacc4f1dc4fb8265c936f5c612e3a47e91c64d8e9fa063d96f38b3cb51b1665c6641e25ffe24803f2941e5df79942f6a53b7169647e4a0899f71abb18c6c956118bf567fac629b75f7e9526873e429d3d8abb6dbb58021a00fd717235298742623c0b3cafb3e4bd86c0b5ab1f71097b4dd19f3d6925d758da0096437146c16097f2ccc1d3e910d65a4132803baee2249e72c8bf0bcaaeb37e580',\n                         '0xf90151a097b17a89fd2c03ee98cb6459c08f51b269da5cee46650e84470f62bf83b43efe80a03b269d284a4c3cf8f8deacafb637c6d77f607eec8d75e8548d778e629612310480a01403217a7f1416830c870087c524dabade3985271f6f369a12b010883c71927aa0f592ac54c879817389663be677166f5022943e2fe1b52617a1d15c2f353f27dda0ac8d015a9e668f5877fcc391fae33981c00577096f0455b42df4f8e8089ece24a003ba34a13e2f2fb4bf7096540b42d4955c5269875b9cf0f7b87632585d44c9a580a0b179e3230b07db294473ae57f0170262798f8c551c755b5665ace1215cee10ca80a0552d24252639a6ae775aa1df700ffb92c2411daea7286f158d44081c8172d072a0772a87d08cf38c4c68bfde770968571abd16fd3835cb902486bd2e515d53c12d80a0413774f3d900d2d2be7a3ad999ffa859a471dc03a74fb9a6d8275455f5496a548080',\n                         '0xf869a020d13b52a61d3c1325ce3626a51418adebd6323d4840f1bdd93906359d11c933b846f8440180a01ab7c0b0a2a4bbb5a1495da8c142150891fc64e0c321e1feb70bd5f881951f7ea0551332d96d085185ab4019ad8bcf89c45321e136c261eb6271e574a2edf1461f'\n                         ],\n    'balance': 0,\n    'codeHash': '0x551332d96d085185ab4019ad8bcf89c45321e136c261eb6271e574a2edf1461f',\n    'nonce': 1,\n    'storageHash': '0x1ab7c0b0a2a4bbb5a1495da8c142150891fc64e0c321e1feb70bd5f881951f7e',\n    'storageProof': [\n        AttributeDict({\n            'key': '0x00',\n            'value': '0x48656c6c6f00000000000000000000000000000000000000000000000000000a',\n            'proof': ['0xf9019180a01ace80e7bed79fbadbe390876bd1a7d9770edf9462049ef8f4b555d05715d53ea049347a3c2eac6525a3fd7e3454dab19d73b4adeb9aa27d29493b9843f3f88814a085079b4abcd07fd4a5d6c52d35f4c4574aecc85830e90c478ca8c18fcbe590de80a02e3f8ad7ea29e784007f51852b9c3e470aef06b11bac32586a8b691134e4c27da064d2157a14bc31f195f73296ea4dcdbe7698edbf3ca81c44bf7730179d98d94ca09e7dc2597c9b7f72ddf84d7eebb0fe2a2fa2ab54fe668cd14fee44d9b40b1a53a0aa5d4acc7ac636d16bc9655556770bc325e1901fb62dc53770ef9110009e080380a0d5fde962bd2fb5326ddc7a9ca7fe0ee47c5bb3227f838b6d73d3299c22457596a08691410eff46b88f929ef649ea25025f62a5362ca8dc8876e5e1f4fc8e79256d80a0673e88d3a8a4616f676793096b5ae87cff931bd20fb8dd466f97809a1126aad8a08b774a45c2273553e2daf4bbc3a8d44fb542ea29b6f125098f79a4d211b3309ca02fed3139c1791269acb9365eddece93e743900eba6b42a6a8614747752ba268f80',\n                          '0xf891808080a0c7d094301e0c54da37b696d85f72de5520b224ab2cf4f045d8db1a3374caf0488080a0fc5581783bfe27fab9423602e1914d719fd71433e9d7dd63c95fe7e58d10c9c38080a0c64f346fc7a21f6679cba8abdf37ca2de8c4fcd8f8bcaedb261b5f77627c93908080808080a0ddef2936a67a3ac7d3d4ff15a935a45f2cc4976c8f0310aed85daf763780e2b480',\n                          '0xf843a0200decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563a1a048656c6c6f00000000000000000000000000000000000000000000000000000a'\n                          ]\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Transaction by Block and Index with Web3.py\nDESCRIPTION: Shows how to retrieve the raw transaction data using block identifier and transaction index. This method supports both block number and block hash as identifiers.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_raw_transaction_by_block('latest', 0)\nHexBytes('0x02f87582053901843b9aca00843b9aca008301d8a894e2dfcfa89a45abdc3de91f7a2844b276b8451d2e888ac7230489e8000080c001a028dcd2e11682288c00237f377280bc6a478a6b27e9c2d745262152add1b1dfcba04e7a33b7ce2a37fc3cd3af7bdc7d7beff721664d56508defa188df35afd77c2c')\n>>> web3.eth.get_raw_transaction_by_block(2, 0)\nHexBytes('0x02f87582053901843b9aca00843b9aca008301d8a894e2dfcfa89a45abdc3de91f7a2844b276b8451d2e888ac7230489e8000080c001a028dcd2e11682288c00237f377280bc6a478a6b27e9c2d745262152add1b1dfcba04e7a33b7ce2a37fc3cd3af7bdc7d7beff721664d56508defa188df35afd77c2c')\n>>> web3.eth.get_raw_transaction_by_block('0xca609fb606a04ce6aaec76415cd0b9d8c2bc83ad2a4d17db7fd403ee7d97bf40', 0)\nHexBytes('0x02f87582053901843b9aca00843b9aca008301d8a894e2dfcfa89a45abdc3de91f7a2844b276b8451d2e888ac7230489e8000080c001a028dcd2e11682288c00237f377280bc6a478a6b27e9c2d745262152add1b1dfcba04e7a33b7ce2a37fc3cd3af7bdc7d7beff721664d56508defa188df35afd77c2c')\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Custom Middleware for Web3.py in Python\nDESCRIPTION: This snippet shows how to create a more advanced custom middleware for Web3.py by overriding the wrap_make_request method. It allows for pre-request processing, conditional request handling, and response processing.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.middleware import Web3Middleware\n\nclass CustomMiddleware(Web3Middleware):\n\n    def wrap_make_request(self, make_request):\n        def middleware(method, params):\n            # pre-request processing goes here\n            response = make_request(method, params)  # make the request\n            # response processing goes here\n            return response\n\n        return middleware\n\n    # If your provider is asynchronous, override the async method instead:\n\n    async def async_wrap_make_request(self, make_request):\n        async def middleware(method, params):\n            # pre-request processing goes here\n            response = await make_request(method, params)\n            # response processing goes here\n            return response\n\n        return middleware\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Connection in AsyncWeb3 with Python\nDESCRIPTION: Updated API for interacting with a persistent WebSocket connection using AsyncWeb3 and WebsocketProviderV2.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nw3.ws.subscribe('newHeads')\n```\n\n----------------------------------------\n\nTITLE: Bytes Conversion Examples\nDESCRIPTION: Demonstrates converting various inputs to their bytes equivalents using to_bytes method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.to_bytes(0)\nb'\\x00'\n>>> Web3.to_bytes(0x000F)\nb'\\x0f'\n>>> Web3.to_bytes(b'')\nb''\n>>> Web3.to_bytes(b'\\x00\\x0F')\nb'\\x00\\x0f'\n>>> Web3.to_bytes(False)\nb'\\x00'\n>>> Web3.to_bytes(True)\nb'\\x01'\n>>> Web3.to_bytes(hexstr='0x000F')\nb'\\x00\\x0f'\n>>> Web3.to_bytes(hexstr='000F')\nb'\\x00\\x0f'\n>>> Web3.to_bytes(text='')\nb''\n>>> Web3.to_bytes(text='cowmÃ¶')\nb'cowm\\xc3\\xb6'\n```\n\n----------------------------------------\n\nTITLE: Sending Legacy Transactions in Ethereum using Web3.py\nDESCRIPTION: This snippet demonstrates how to create and send a legacy transaction in Ethereum using Web3.py. It includes the basic parameters needed for a legacy transaction.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> legacy_transaction = {\n...     'to': receiving_account_address,\n...     'value': 22,\n...     'gasPrice': 123456,  # optional - if not provided, gas_price_strategy (if exists) or eth_gasPrice is used\n... }\n>>> w3.eth.send_transaction(legacy_transaction)\n```\n\n----------------------------------------\n\nTITLE: Getting Account Balance in Web3.py\nDESCRIPTION: Shows how to retrieve the balance of an Ethereum account using web3.eth.get_balance(). The account can be specified by a checksum address or ENS name.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_balance('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\n77320681768999138915\n```\n\n----------------------------------------\n\nTITLE: Initializing LegacyWebSocketProvider in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Web3 instance using the LegacyWebSocketProvider. It connects to a WebSocket endpoint and allows for optional timeout configuration.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3\n>>> w3 = Web3(Web3.LegacyWebSocketProvider(\"ws://127.0.0.1:8546\"))\n\n>>> from web3 import Web3\n>>> w3 = Web3(Web3.LegacyWebSocketProvider(\"ws://127.0.0.1:8546\", websocket_timeout=60))\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price Strategy\nDESCRIPTION: Shows how to set a custom gas price strategy using set_gas_price_strategy method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/gas_price.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\n\ndef value_based_gas_price_strategy(web3, transaction_params):\n    ...\n\nw3 = Web3(...)\nw3.eth.set_gas_price_strategy(value_based_gas_price_strategy)\n```\n\n----------------------------------------\n\nTITLE: Getting Blob Base Fee in Web3.py\nDESCRIPTION: Shows how to fetch the expected base fee for blobs in the next block using web3.eth.blob_base_fee(). Returns the fee in Wei.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.blob_base_fee()\n537070730\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Provider Retry Mechanism in Python\nDESCRIPTION: This snippet demonstrates how to configure the retry mechanism for HTTP providers in Web3.py using the ExceptionRetryConfiguration class. It shows how to set custom retry parameters including errors to retry on, number of retries, backoff factor, and allowlisted methods.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, HTTPProvider\nfrom web3.providers.rpc.utils import (\n    REQUEST_RETRY_ALLOWLIST,\n    ExceptionRetryConfiguration,\n)\n\nw3 = Web3(HTTPProvider(\n    endpoint_uri=\"...\",\n    exception_retry_configuration=ExceptionRetryConfiguration(\n        errors=DEFAULT_EXCEPTIONS,\n\n        # number of retries to attempt\n        retries=5,\n\n        # initial delay multiplier, doubles with each retry attempt\n        backoff_factor=0.125,\n\n        # an in-house default list of retryable methods\n        method_allowlist=REQUEST_RETRY_ALLOWLIST,\n    ),\n))\n```\n\n----------------------------------------\n\nTITLE: Getting Validator Balances\nDESCRIPTION: Returns current balances for all validators.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_validator_balances()\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Filter Logs with Web3.py\nDESCRIPTION: Example of using the get_filter_logs method to retrieve all log entries for a specific filter. Returns an array of all log objects that match the filter criteria since its creation.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n>>> filter = web3.eth.filter()\n>>> web3.eth.get_filter_logs(filter.filter_id)\n[\n    {\n        'address': '0xDc3A9Db694BCdd55EBaE4A89B22aC6D12b3F0c24',\n        'blockHash': '0xb72256286ca528e09022ffd408856a73ef90e7216ac560187c6e43b4c4efd2f0',\n        'blockNumber': 2217196,\n        'data': '0x0000000000000000000000000000000000000000000000000000000000000001',\n        'logIndex': 0,\n        'topics': ['0xe65b00b698ba37c614af350761c735c5f4a82b4ab365a1f1022d49d9dfc8e930',\n        '0x000000000000000000000000754c50465885f1ed1fa1a55b95ee8ecf3f1f4324',\n        '0x296c7fb6ccafa3e689950b947c2895b07357c95b066d5cdccd58c301f41359a3'],\n        'transactionHash': '0xfe1289fd3915794b99702202f65eea2e424b2f083a12749d29b4dd51f6dce40d',\n        'transactionIndex': 1,\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Value in Web3.py\nDESCRIPTION: Demonstrates how to get a value from a storage position for a given account using web3.eth.get_storage_at(). The account can be specified by a checksum address or ENS name.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_storage_at('0x6C8f2A135f6ed072DE4503Bd7C4999a1a17F824B', 0)\n'0x00000000000000000000000000000000000000000000000000120a0b063499d4'\n```\n\n----------------------------------------\n\nTITLE: Building Contract Transaction Offline in Python\nDESCRIPTION: Example of building a contract transaction offline using the new buildTransaction method introduced in v4.0.0-beta.4.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\ncontract.buildTransaction()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Transaction Pool Content in Python\nDESCRIPTION: Example showing detailed transaction pool content including pending and queued transactions with full transaction details like gas prices, nonces, and input data\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.txpool.content()\n{\n  'pending': {\n    '0x0216D5032f356960Cd3749C31Ab34eEFF21B3395': {\n      806: [{\n        'blockHash': \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        'blockNumber': None,\n        'from': \"0x0216D5032f356960Cd3749C31Ab34eEFF21B3395\",\n        'gas': \"0x5208\",\n        'gasPrice': None,\n        'hash': \"0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586\",\n        'input': \"0x\",\n        'maxFeePerGas': '0x77359400',\n        'maxPriorityFeePerGas': '0x3b9aca00',\n        'nonce': \"0x326\",\n        'to': \"0x7f69a91A3CF4bE60020fB58B893b7cbb65376db8\",\n        'transactionIndex': None,\n        'value': \"0x19a99f0cf456000\"\n      }]\n    },\n    '0x24d407e5A0B506E1Cb2fae163100B5DE01F5193C': {\n      34: [{\n        'blockHash': \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        'blockNumber': None,\n        'from': \"0x24d407e5A0B506E1Cb2fae163100B5DE01F5193C\",\n        'gas': \"0x44c72\",\n        'gasPrice': None,\n        'hash': \"0xb5b8b853af32226755a65ba0602f7ed0e8be2211516153b75e9ed640a7d359fe\",\n        'input': \"0xb61d27f600000000000000000000000024d407e5a0b506e1cb2fae163100b5de01f5193c00000000000000000000000000000000000000000000000053444835ec580000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        'maxFeePerGas': '0x77359400',\n        'maxPriorityFeePerGas': '0x3b9aca00',\n        'nonce': \"0x22\",\n        'to': \"0x7320785200f74861B69C49e4ab32399a71b34f1a\",\n        'transactionIndex': None,\n        'value': \"0x0\"\n      }]\n    }\n  },\n  'queued': {\n    '0x976A3Fc5d6f7d259EBfb4cc2Ae75115475E9867C': {\n      3: [{\n        'blockHash': \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        'blockNumber': None,\n        'from': \"0x976A3Fc5d6f7d259EBfb4cc2Ae75115475E9867C\",\n        'gas': \"0x15f90\",\n        'gasPrice': None,\n        'hash': \"0x57b30c59fc39a50e1cba90e3099286dfa5aaf60294a629240b5bbec6e2e66576\",\n        'input': \"0x\",\n        'maxFeePerGas': '0x77359400',\n        'maxPriorityFeePerGas': '0x3b9aca00',\n        'nonce': \"0x3\",\n        'to': \"0x346FB27dE7E7370008f5da379f74dd49F5f2F80F\",\n        'transactionIndex': None,\n        'value': \"0x1f161421c8e0000\"\n      }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ENS Address Pointing to Owner in Python\nDESCRIPTION: Simplified method to set up an ENS name to point to the owner's address without explicitly providing the address.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nns.setup_address('ens.eth')\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.py using pip\nDESCRIPTION: Command to install Web3.py using pip package manager. It's recommended to install in a virtual environment.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/quickstart.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install web3\n```\n\n----------------------------------------\n\nTITLE: Getting Single Validator\nDESCRIPTION: Retrieves details for a specific validator by their ID.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_validator(110280)\n```\n\n----------------------------------------\n\nTITLE: Reading Private Keys from Environment Variables in Python\nDESCRIPTION: Example showing how to securely read private keys from environment variables for Ethereum transactions, as documented in v6.0.0-beta.2.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nfrom eth_account import Account\n\n# Get private key from environment variable\nprivate_key = os.environ.get('ETH_PRIVATE_KEY')\nif private_key:\n    account = Account.from_key(private_key)\nelse:\n    # Handle missing private key\n    raise ValueError(\"Private key not found in environment variables\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gas Price in Web3.py\nDESCRIPTION: Shows how to get the current gas price in Wei using the web3.eth.gas_price property.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.gas_price\n20000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Web3.py Applications in Python\nDESCRIPTION: Provides a function to set up logging for a web3.py application, including adjusting log levels for specific modules and using colored log output. This is useful for debugging and controlling verbosity of JSON-RPC traffic.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport coloredlogs\n\ndef setup_logging(log_level=logging.DEBUG):\n    \"\"\"Setup root logger and quiet some levels.\"\"\"\n    logger = logging.getLogger()\n\n    # Set log format to display the logger name to hunt down verbose logging modules\n    fmt = \"%(name)-25s %(levelname)-8s %(message)s\"\n\n    # Use colored logging output for console with the coloredlogs package\n    # https://pypi.org/project/coloredlogs/\n    coloredlogs.install(level=log_level, fmt=fmt, logger=logger)\n\n    # Disable logging of JSON-RPC requests and replies\n    logging.getLogger(\"web3.RequestManager\").setLevel(logging.WARNING)\n    logging.getLogger(\"web3.providers.HTTPProvider\").setLevel(logging.WARNING)\n    # logging.getLogger(\"web3.RequestManager\").propagate = False\n\n    # Disable all internal debug logging of requests and urllib3\n    # E.g. HTTP traffic\n    logging.getLogger(\"requests\").setLevel(logging.WARNING)\n    logging.getLogger(\"urllib3\").setLevel(logging.WARNING)\n\n    return logger\n```\n\n----------------------------------------\n\nTITLE: Instantiating ENS Objects in Python\nDESCRIPTION: Three different ways to create an ENS object: automatic detection, specifying a provider instance, or from an existing Web3 object. This allows flexibility in how the ENS functionality is accessed.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# automatic detection\nfrom ens.auto import ns\n\n# or, with a provider\nfrom web3 import IPCProvider\nfrom ens import ENS\n\nprovider = IPCProvider(...)\nns = ENS(provider)\n\n# or, with a w3 instance\n# Note: This inherits the w3 middleware from the w3 instance and adds a stalecheck middleware to the middleware onion.\n# It also inherits the provider and codec from the w3 instance, as well as the ``strict_bytes_type_checking`` flag value.\nfrom ens import ENS\nw3 = Web3(...)\nns = ENS.from_web3(w3)\n```\n\n----------------------------------------\n\nTITLE: Filtering Contract Event Logs by Non-Indexed Arguments in Python\nDESCRIPTION: Example of filtering contract event logs by non-indexed arguments using the get_logs() method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ncontract.events.SomeEvent.get_logs(fromBlock='latest', argument_filters={'non_indexed_arg': 'value'})\n```\n\n----------------------------------------\n\nTITLE: Event Scanner Class Implementation in Web3.py\nDESCRIPTION: Advanced implementation of a stateful event scanner for Ethereum blockchains, handling batch and incremental event scanning.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A stateful event scanner for Ethereum-based blockchains using web3.py.\n\nWith the stateful mechanism, you can do one batch scan or incremental scans,\nwhere events are added wherever the scanner left off.\n\"\"\"\n\nimport datetime\nimport time\nimport logging\nfrom abc import ABC, abstractmethod\nfrom typing import Tuple, Optional, Callable, List, Iterable, Dict, Any\n\nfrom web3 import Web3\nfrom web3.contract import Contract\nfrom web3.datastructures import AttributeDict\nfrom web3.exceptions import BlockNotFound\nfrom eth_abi.codec import ABICodec\n\n# Currently this method is not exposed over official web3 API,\n# but we need it to construct eth_getLogs parameters\nfrom web3._utils.filters import construct_event_filter_params\nfrom web3._utils.events import get_event_data\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass EventScannerState(ABC):\n    \"\"\"Application state that remembers what blocks we have scanned in the case of crash.\n    \"\"\"\n\n    @abstractmethod\n```\n\n----------------------------------------\n\nTITLE: Web3 toJSON Method Example (Python)\nDESCRIPTION: Example usage of the Web3.toJSON method added in v5.0.0-alpha.5 for JSON serialization\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nWeb3.toJSON()\n```\n\n----------------------------------------\n\nTITLE: Using SignAndSendRawMiddleware for Transaction Signing\nDESCRIPTION: Shows how to use the SignAndSendRawMiddleware to automatically sign transactions from a specific account. Includes setting up an account from a private key and configuring the middleware.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/transactions.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.middleware import SignAndSendRawMiddlewareBuilder\nimport os\n\n# Note: Never commit your key in your code! Use env variables instead:\npk = os.environ.get('PRIVATE_KEY')\n\n# Instantiate an Account object from your key:\nacct2 = w3.eth.account.from_key(pk)\n\n# For the sake of this example, fund the new account:\nw3.eth.send_transaction({\n    \"from\": acct1,\n    \"value\": w3.to_wei(3, 'ether'),\n    \"to\": acct2.address\n})\n\n# Add acct2 as auto-signer:\nw3.middleware_onion.inject(SignAndSendRawMiddlewareBuilder.build(acct2), layer=0)\n\n# Transactions from `acct2` will then be signed, under the hood, in the middleware:\ntx_hash = w3.eth.send_transaction({\n    \"from\": acct2.address,\n    \"value\": 3333333333,\n    \"to\": some_address\n})\n\ntx = w3.eth.get_transaction(tx_hash)\nassert tx[\"from\"] == acct2.address\n```\n\n----------------------------------------\n\nTITLE: Contract Function Decoding - Python\nDESCRIPTION: Example of decoding a transaction's input data to original function call and arguments.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ncontract.decode_function_input(transaction.input)\n```\n\n----------------------------------------\n\nTITLE: Raw WebSocket Subscription Processing\nDESCRIPTION: Demonstrates how to manually process WebSocket subscription responses using the PersistentConnection API and async iterator pattern.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def ws_subscription_example():\n    async with AsyncWeb3(WebSocketProvider(f\"ws://127.0.0.1:8546\")) as w3:\n        subscription_id = await w3.eth.subscribe(\"newHeads\")\n        async for response in w3.socket.process_subscriptions():\n            print(f\"{response}\\n\")\n            if some_condition:\n                is_unsubscribed = await w3.eth.unsubscribe(subscription_id)\n                if is_unsubscribed:\n                    break\n\nasyncio.run(ws_subscription_example())\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPProvider with Custom Connection Pool\nDESCRIPTION: Example demonstrating how to create a custom requests.Session with specific connection pool settings and pass it to an HTTPProvider.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3\n>>> adapter = requests.adapters.HTTPAdapter(pool_connections=20, pool_maxsize=20)\n>>> session = requests.Session()\n>>> session.mount('http://', adapter)\n>>> session.mount('https://', adapter)\n>>> w3 = Web3(Web3.HTTPProvider(\"http://127.0.0.1:8545\", session=session))\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 Synchronous vs Async Example\nDESCRIPTION: Example showing how to initialize both synchronous and asynchronous Web3 instances with HTTP providers after the v6 separation of Web3 and AsyncWeb3 classes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, AsyncWeb3\n\nw3 = Web3(Web3.HTTPProvider(<provider.url>))\nasync_w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(<provider.url>))\n```\n\n----------------------------------------\n\nTITLE: Checking Web3.py Connection Status\nDESCRIPTION: Commands to check connection status of a Web3.py instance with optional traceback for debugging.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.is_connected()\nFalse\n\n>>> w3.is_connected(show_traceback=True)\n# this is an example, your error may differ\n\n# <long stack trace output>\nProviderConnectionError: Problem connecting to provider with error: <class 'FileNotFoundError'>: cannot connect to IPC socket at path: None\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment for Web3.py\nDESCRIPTION: Shell commands to set up a clean Python virtual environment and install Web3.py dependencies.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install pip if it is not available:\n$ which pip || curl https://bootstrap.pypa.io/get-pip.py | python\n\n# Install virtualenv if it is not available:\n$ which virtualenv || pip install --upgrade virtualenv\n\n# *If* the above command displays an error, you can try installing as root:\n$ sudo pip install virtualenv\n\n# Create a virtual environment:\n$ virtualenv -p python3 ~/.venv-py3\n\n# Activate your new virtual environment:\n$ source ~/.venv-py3/bin/activate\n\n# With virtualenv active, make sure you have the latest packaging tools\n$ pip install --upgrade pip setuptools\n\n# Now we can install web3.py...\n$ pip install --upgrade web3\n```\n\n----------------------------------------\n\nTITLE: Initializing Stalecheck Middleware in Python\nDESCRIPTION: This snippet demonstrates how to create and add the Stalecheck middleware to the Web3 middleware onion. It sets up a check that will raise a StaleBlockchain exception if the latest block is older than 2 days.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntwo_day_stalecheck = StalecheckMiddlewareBuilder.build(60 * 60 * 24 * 2)\nweb3.middleware_onion.add(two_day_stalecheck)\n```\n\n----------------------------------------\n\nTITLE: Preparing Message for Solidity ecrecover in Python\nDESCRIPTION: This snippet demonstrates how to prepare a message and signature for use with Solidity's ecrecover function. It includes encoding the message, hashing it, and splitting the signature into its components.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\nfrom eth_account.messages import encode_defunct, _hash_eip191_message\n\nhex_message = '0x49e299a55346'\nhex_signature = '0xe6ca9bba58c88611fad66a6ce8f996908195593807c4b38bd528d2cff09d4eb33e5bfbbf4d3e39b1a2fd816a7680c19ebebaf3a141b239934ad43cb33fcec8ce1c'\n\n# Encode the message\nmessage = encode_defunct(hexstr=hex_message)\n\n# Hash the message explicitly\nmessage_hash = _hash_eip191_message(message)\n\n# Convert message hash to hex string\nhex_message_hash = Web3.to_hex(message_hash)\n\n# Split signature into v, r, s components\nsig = Web3.to_bytes(hexstr=hex_signature)\nv, hex_r, hex_s = Web3.to_int(sig[-1]), Web3.to_hex(sig[:32]), Web3.to_hex(sig[32:64])\n\n# Prepare arguments for Solidity ecrecover\nec_recover_args = (hex_message_hash, v, hex_r, hex_s)\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket One-to-One Requests in Python\nDESCRIPTION: This example demonstrates how to make a one-to-one request using a WebSocket provider in Web3.py to get the latest block number asynchronously.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> async def ws_one_to_one_example():\n...     async with AsyncWeb3(WebSocketProvider(f\"ws://127.0.0.1:8546\")) as w3:\n...         # make a request and expect a single response returned on the same line\n...         latest_block_num = await w3.eth.block_number\n\n>>> asyncio.run(ws_one_to_one_example())\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPProvider with Custom Request Timeout\nDESCRIPTION: Example showing how to customize request parameters for an HTTPProvider by setting a 60-second timeout for each request.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3\n>>> w3 = Web3(Web3.HTTPProvider(\"http://127.0.0.1:8545\", request_kwargs={'timeout': 60}))\n```\n\n----------------------------------------\n\nTITLE: Tracing Ethereum Transaction with Web3.py Debug API\nDESCRIPTION: This snippet shows how to use the Web3.py library's debug API to trace a transaction on the Ethereum blockchain with the '4byteTracer' tracer option. The transaction trace reveals a complex interaction between multiple contracts including token transfers and swaps.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.geth.debug.trace_transaction(tx_hash, {'tracer': '4byteTracer'})\n```\n\n----------------------------------------\n\nTITLE: Computing Ethereum transaction hash with Web3.py\nDESCRIPTION: Shows how to calculate the transaction hash by applying the keccak hash function to the raw transaction data, which matches the transaction ID returned by send_raw_transaction.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> w3.to_hex(w3.keccak(signed_txn.raw_transaction))\n'0x748db062639a45e519dba934fce09c367c92043867409160c9989673439dc817'\n```\n\n----------------------------------------\n\nTITLE: Transaction Modification Function\nDESCRIPTION: Implementation of modify_transaction method for AsyncEth class to support asynchronous transaction modification\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nasync def modify_transaction(self, transaction_hash, **kwargs):\n    # Async implementation of transaction modification\n    pass\n```\n\n----------------------------------------\n\nTITLE: Resolving Addresses to ENS Names in Python\nDESCRIPTION: How to perform reverse resolution to get an ENS name from an Ethereum address. Demonstrates how it works for both string and bytes addresses.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndomain = ns.name('0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7')\n\n# name() also accepts the bytes version of the address\nassert ns.name(b'\\xfe\\x89\\xccz\\xbb,A\\x83h:\\xb7\\x16S\\xc4\\xcd\\xc9\\xb0-D\\xb7') == domain\n\n# confirm that the name resolves back to the address that you looked up:\nassert ns.address(domain) == '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7'\n```\n\n----------------------------------------\n\nTITLE: Running Event Scanner for ERC-20 Transfers in Python\nDESCRIPTION: This function sets up and runs the event scanner for ERC-20 transfers. It initializes the Web3 instance, prepares the contract object, restores the state, and performs the scan with progress tracking.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef run():\n\n    if len(sys.argv) < 2:\n        print(\"Usage: eventscanner.py http://your-node-url\")\n        sys.exit(1)\n\n    api_url = sys.argv[1]\n\n    # Enable logs to the stdout.\n    # DEBUG is very verbose level\n    logging.basicConfig(level=logging.INFO)\n\n    provider = HTTPProvider(api_url)\n\n    # Disable the default JSON-RPC retry configuration\n    # as it correctly cannot handle eth_getLogs block range\n    provider.exception_retry_configuration = None\n\n    w3 = Web3(provider)\n\n    # Prepare stub ERC-20 contract object\n    abi = json.loads(ABI)\n    ERC20 = w3.eth.contract(abi=abi)\n\n    # Restore/create our persistent state\n    state = JSONifiedState()\n    state.restore()\n\n    # chain_id: int, w3: Web3, abi: Dict, state: EventScannerState, events: List, filters: Dict, max_chunk_scan_size: int=10000\n    scanner = EventScanner(\n        w3=w3,\n        contract=ERC20,\n        state=state,\n        events=[ERC20.events.Transfer],\n        filters={\"address\": RCC_ADDRESS},\n        # How many maximum blocks at the time we request from JSON-RPC\n        # and we are unlikely to exceed the response size limit of the JSON-RPC server\n        max_chunk_scan_size=10000\n    )\n\n    # Assume we might have scanned the blocks all the way to the last Ethereum block\n    # that mined a few seconds before the previous scan run ended.\n    # Because there might have been a minor Ethereum chain reorganisations\n    # since the last scan ended, we need to discard\n    # the last few blocks from the previous scan results.\n    chain_reorg_safety_blocks = 10\n    scanner.delete_potentially_forked_block_data(state.get_last_scanned_block() - chain_reorg_safety_blocks)\n\n    # Scan from [last block scanned] - [latest ethereum block]\n    # Note that our chain reorg safety blocks cannot go negative\n    start_block = max(state.get_last_scanned_block() - chain_reorg_safety_blocks, 0)\n    end_block = scanner.get_suggested_scan_end_block()\n    blocks_to_scan = end_block - start_block\n\n    print(f\"Scanning events from blocks {start_block} - {end_block}\")\n\n    # Render a progress bar in the console\n    start = time.time()\n    with tqdm(total=blocks_to_scan) as progress_bar:\n        def _update_progress(start, end, current, current_block_timestamp, chunk_size, events_count):\n            if current_block_timestamp:\n                formatted_time = current_block_timestamp.strftime(\"%d-%m-%Y\")\n            else:\n                formatted_time = \"no block time available\"\n            progress_bar.set_description(f\"Current block: {current} ({formatted_time}), blocks in a scan batch: {chunk_size}, events processed in a batch {events_count}\")\n            progress_bar.update(chunk_size)\n\n        # Run the scan\n        result, total_chunks_scanned = scanner.scan(start_block, end_block, progress_callback=_update_progress)\n\n    state.save()\n    duration = time.time() - start\n    print(f\"Scanned total {len(result)} Transfer events, in {duration} seconds, total {total_chunks_scanned} chunk scans performed\")\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Installing web3.py using pip\nDESCRIPTION: This command installs the web3.py library using pip, the Python package installer. It allows users to quickly set up the library for use in their Python projects.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install web3\n```\n\n----------------------------------------\n\nTITLE: Getting ENS Name Owner in Python\nDESCRIPTION: How to retrieve the owner address of an ENS name using the owner() method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\neth_address = ns.owner('exchange.eth')\n```\n\n----------------------------------------\n\nTITLE: Connecting to Async Web3 Instance with Geth Dev\nDESCRIPTION: Example showing how to connect to an async web3 instance using gethdev and verify the connection using async calls.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3.auto.gethdev import async_w3\n>>> await async_w3.provider.connect()\n\n# confirm that the connection succeeded\n>>> await async_w3.is_connected()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous ENS Support in Python\nDESCRIPTION: How to use the asynchronous version of ENS via the AsyncENS module. This allows for non-blocking ENS operations.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ens import AsyncENS\n\nns = AsyncENS(provider)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filter Changes with Web3.py\nDESCRIPTION: Example of using the get_filter_changes method to retrieve new log entries that occurred since the last poll for a specific filter. Returns an array of log objects that match the filter criteria.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n>>> filter = web3.eth.filter()\n>>> web3.eth.get_filter_changes(filter.filter_id)\n[\n    {\n        'address': '0xDc3A9Db694BCdd55EBaE4A89B22aC6D12b3F0c24',\n        'blockHash': '0xb72256286ca528e09022ffd408856a73ef90e7216ac560187c6e43b4c4efd2f0',\n        'blockNumber': 2217196,\n        'data': '0x0000000000000000000000000000000000000000000000000000000000000001',\n        'logIndex': 0,\n        'topics': ['0xe65b00b698ba37c614af350761c735c5f4a82b4ab365a1f1022d49d9dfc8e930',\n        '0x000000000000000000000000754c50465885f1ed1fa1a55b95ee8ecf3f1f4324',\n        '0x296c7fb6ccafa3e689950b947c2895b07357c95b066d5cdccd58c301f41359a3'],\n        'transactionHash': '0xfe1289fd3915794b99702202f65eea2e424b2f083a12749d29b4dd51f6dce40d',\n        'transactionIndex': 1,\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Adding New Subscriptions from within a Handler in Python\nDESCRIPTION: Demonstrates how to subscribe to additional events from within a handler function, which allows dynamically adding subscriptions based on events received from other subscriptions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def log_handler(\n    handler_context: LogsSubscriptionContext,\n) -> None:\n    log_receipt = handler_context.result\n    print(f\"Log receipt: {log_receipt}\\n\")\n\n    # reference the w3 instance\n    w3 = handler_context.async_w3\n\n    # initialize a new subscription\n    await w3.subscription_manager.subscribe(\n        NewHeadsSubscription(handler=new_heads_handler)\n    )\n```\n\n----------------------------------------\n\nTITLE: Web3.py Log Processing Function\nDESCRIPTION: Function for processing logs when parsing events with indexed and non-indexed inputs, comparing log topics and event ABIs as hex values.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprocess_log()\nget_event_data()\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Web3.py Instance\nDESCRIPTION: Example of adding a middleware to the outermost layer of a Web3.py instance using the add() method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> w3 = Web3(...)\n>>> w3.middleware_onion.add(web3.middleware.GasPriceStrategyMiddleware)\n# or\n>>> w3.middleware_onion.add(web3.middleware.GasPriceStrategyMiddleware, 'gas_price_strategy')\n```\n\n----------------------------------------\n\nTITLE: Scanning Token Balances in Chunks with Ethereum Web3.py\nDESCRIPTION: A method to scan token balance events from a blockchain in manageable chunks. It processes blocks from start_block to end_block, dynamically adjusting chunk sizes based on performance, and returns all processed events along with the number of chunks used.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef scan(self, start_block, end_block, start_chunk_size=20, progress_callback=Optional[Callable]) -> Tuple[\n    list, int]:\n    \"\"\"Perform a token balances scan.\n\n    Assumes all balances in the database are valid before start_block (no forks sneaked in).\n\n    :param start_block: The first block included in the scan\n\n    :param end_block: The last block included in the scan\n\n    :param start_chunk_size: How many blocks we try to fetch over JSON-RPC on the first attempt\n\n    :param progress_callback: If this is an UI application, update the progress of the scan\n\n    :return: [All processed events, number of chunks used]\n    \"\"\"\n\n    assert start_block <= end_block\n\n    current_block = start_block\n\n    # Scan in chunks, commit between\n    chunk_size = start_chunk_size\n    last_scan_duration = last_logs_found = 0\n    total_chunks_scanned = 0\n\n    # All processed entries we got on this scan cycle\n    all_processed = []\n\n    while current_block <= end_block:\n\n        self.state.start_chunk(current_block, chunk_size)\n\n        # Print some diagnostics to logs to try to fiddle with real world JSON-RPC API performance\n        estimated_end_block = min(current_block + chunk_size, end_block)\n        logger.debug(\n            f\"Scanning token transfers for blocks: {current_block} - {estimated_end_block}, chunk size {chunk_size}, last chunk scan took {last_scan_duration}, last logs found {last_logs_found}\"\n        )\n\n        start = time.time()\n        actual_end_block, end_block_timestamp, new_entries = self.scan_chunk(current_block, estimated_end_block)\n\n        # Where does our current chunk scan ends - are we out of chain yet?\n        current_end = actual_end_block\n\n        last_scan_duration = time.time() - start\n        all_processed += new_entries\n\n        # Print progress bar\n        if progress_callback:\n            progress_callback(start_block, end_block, current_block, end_block_timestamp, chunk_size, len(new_entries))\n\n        # Try to guess how many blocks to fetch over `eth_getLogs` API next time\n        chunk_size = self.estimate_next_chunk_size(chunk_size, len(new_entries))\n\n        # Set where the next chunk starts\n        current_block = current_end + 1\n        total_chunks_scanned += 1\n        self.state.end_chunk(current_end)\n\n    return all_processed, total_chunks_scanned\n```\n\n----------------------------------------\n\nTITLE: Hex Conversion Examples\nDESCRIPTION: Demonstrates converting various data types to hexadecimal representation using to_hex method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.to_hex(0)\n'0x0'\n>>> Web3.to_hex(1)\n'0x1'\n>>> Web3.to_hex(0x0)\n'0x0'\n>>> Web3.to_hex(0x000F)\n'0xf'\n>>> Web3.to_hex(b'')\n'0x'\n>>> Web3.to_hex(b'\\x00\\x0F')\n'0x000f'\n>>> Web3.to_hex(False)\n'0x0'\n>>> Web3.to_hex(True)\n'0x1'\n>>> Web3.to_hex(hexstr='0x000F')\n'0x000f'\n>>> Web3.to_hex(hexstr='000F')\n'0x000f'\n>>> Web3.to_hex(text='')\n'0x'\n>>> Web3.to_hex(text='cowmÃ¶')\n'0x636f776dc3b6'\n```\n\n----------------------------------------\n\nTITLE: Creating and Attaching External Modules to Web3 Instance in Python\nDESCRIPTION: Shows how to create external modules and attach them to a Web3 instance, either at instantiation or using the attach_modules method. It demonstrates module hierarchy and nested submodules.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, HTTPProvider\n>>> from external_module_library import (\n...     ModuleClass1,\n...     ModuleClass2,\n...     ModuleClass3,\n...     ModuleClass4,\n...     ModuleClass5,\n... )\n>>> w3 = Web3(\n...     HTTPProvider(provider_uri),\n...     external_modules={\n...         'module1': ModuleClass1,\n...         'module2': (ModuleClass2, {\n...             'submodule1': ModuleClass3,\n...             'submodule2': (ModuleClass4, {\n...                 'submodule2a': ModuleClass5,  # submodule children may be nested further if necessary\n...             })\n...         })\n...     }\n... )\n\n# `return_zero`, in this case, is an example attribute of the `ModuleClass1` object\n>>> w3.module1.return_zero()\n0\n>>> w3.module2.submodule1.return_one()\n1\n>>> w3.module2.submodule2.submodule2a.return_two()\n2\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA3 Hash in Python 2 and 3\nDESCRIPTION: Examples of calculating SHA3 hash in Python 2 and 3 using Web3.py, demonstrating the differences in handling binary and text data between versions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Python 2\nWeb3.sha3('I\\xe2\\x99\\xa5SF')\nWeb3.sha3(text=u'Iâ¥SF')\n\n# Python 3\nWeb3.sha3(b'I\\xe2\\x99\\xa5SF')\nWeb3.sha3(text='Iâ¥SF')\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Ethereum Filters with Web3.py\nDESCRIPTION: Demonstrates how to uninstall an Ethereum filter using Web3.py. Shows the filter creation and subsequent uninstallation attempts, illustrating successful uninstallation and the false return when attempting to uninstall an already uninstalled filter.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n>>> filter = web3.eth.filter()\n>>> web3.eth.uninstall_filter(filter.filter_id)\nTrue\n>>> web3.eth.uninstall_filter(filter.filter_id)\nFalse  # already uninstalled.\n```\n\n----------------------------------------\n\nTITLE: Time-Based Strategy Implementation Example\nDESCRIPTION: Example of using a built-in time-based gas price strategy with caching enabled.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/gas_price.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\nfrom web3.gas_strategies.time_based import medium_gas_price_strategy\n\nw3 = Web3(...)\nw3.eth.set_gas_price_strategy(medium_gas_price_strategy)\n\nw3.provider.cache_allowed_requests = True\n```\n\n----------------------------------------\n\nTITLE: Initializing EventScanner Class in Python\nDESCRIPTION: This snippet defines the EventScanner class constructor, which sets up parameters for scanning blockchain events efficiently. It includes configuration for chunk sizes, retry attempts, and filtering options.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass EventScanner:\n    \"\"\"Scan blockchain for events and try not to abuse JSON-RPC API too much.\n\n    Can be used for real-time scans, as it detects minor chain reorganisation and rescans.\n    Unlike the easy web3.contract.Contract, this scanner can scan events from multiple contracts at once.\n    For example, you can get all transfers from all tokens in the same scan.\n\n    You *should* disable the default ``exception_retry_configuration`` on your provider for Web3,\n    because it cannot correctly throttle and decrease the `eth_getLogs` block number range.\n    \"\"\"\n\n    def __init__(self, w3: Web3, contract: Contract, state: EventScannerState, events: List, filters: Dict[str, Any],\n                 max_chunk_scan_size: int = 10000, max_request_retries: int = 30, request_retry_seconds: float = 3.0):\n        \"\"\"\n        :param contract: Contract\n        :param events: List of web3 Event we scan\n        :param filters: Filters passed to get_logs\n        :param max_chunk_scan_size: JSON-RPC API limit in the number of blocks we query. (Recommendation: 10,000 for mainnet, 500,000 for testnets)\n        :param max_request_retries: How many times we try to reattempt a failed JSON-RPC call\n        :param request_retry_seconds: Delay between failed requests to let JSON-RPC server to recover\n        \"\"\"\n\n        self.logger = logger\n        self.contract = contract\n        self.w3 = w3\n        self.state = state\n        self.events = events\n        self.filters = filters\n\n        # Our JSON-RPC throttling parameters\n        self.min_scan_chunk_size = 10  # 12 s/block = 120 seconds period\n        self.max_scan_chunk_size = max_chunk_scan_size\n        self.max_request_retries = max_request_retries\n        self.request_retry_seconds = request_retry_seconds\n\n        # Factor how fast we increase the chunk size if results are found\n        # # (slow down scan after starting to get hits)\n        self.chunk_size_decrease = 0.5\n\n        # Factor how fast we increase chunk size if no results are found\n        self.chunk_size_increase = 2.0\n```\n\n----------------------------------------\n\nTITLE: Awaiting WebSocket Provider Connect Method\nDESCRIPTION: Example showing how to instantiate AsyncWeb3 with a WebSocketProvider and explicitly await the provider's connect method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> async def await_provider_connect_example():\n...     # w3 = AsyncWeb3(AsyncIPCProvider(\"./path/to/filename.ipc\"))  # for the AsyncIPCProvider\n...     w3 = AsyncWeb3(WebSocketProvider(f\"ws://127.0.0.1:8546\"))  # for the WebSocketProvider\n...     await w3.provider.connect()\n...\n...     # some code here\n...\n...     # manual cleanup\n...     await w3.provider.disconnect()\n\n# run the example\n>>> asyncio.run(await_provider_connect_example())\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Event Filter in Python\nDESCRIPTION: Example of creating a filter for contract events using the new API introduced in v4.0.0-beta.13.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\ncontract.events.$my_event.createFilter()\n```\n\n----------------------------------------\n\nTITLE: Async Batch Request Examples\nDESCRIPTION: Demonstrates asynchronous batch requests using async/await syntax.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync with w3.batch_requests() as batch:\n    batch.add(w3.eth.get_block(6))\n    batch.add(w3.eth.get_block(4))\n    batch.add(w3.eth.get_block(2))\n\n    responses = await batch.async_execute()\n    assert len(responses) == 3\n```\n\nLANGUAGE: python\nCODE:\n```\nbatch = w3.batch_requests()\nbatch.add(w3.eth.get_block(1))\nbatch.add(w3.eth.get_block(2))\nresponses = await batch.async_execute()\nassert len(responses) == 2\n```\n\n----------------------------------------\n\nTITLE: Setting up ENS Reverse Resolution with Default Address in Python\nDESCRIPTION: Simplified method to set up reverse resolution using the address that the name already points to.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nns.setup_name('ens.eth')\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Ethereum Events with Web3.py\nDESCRIPTION: Example of canceling a subscription to Ethereum events using the unsubscribe method with a subscription ID. This method returns True when successfully unsubscribed from the event stream.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> result = await web3.eth.unsubscribe(subscription_id)\n>>> result\nTrue\n```\n\n----------------------------------------\n\nTITLE: Verifying Ethereum Get Proof in Python\nDESCRIPTION: This function verifies the values returned in an AttributeDict are included in the state of a given trie root. It checks both account and storage proofs.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom eth_utils import (\n    keccak,\n)\nimport rlp\nfrom rlp.sedes import (\n    Binary,\n    big_endian_int,\n)\nfrom trie import (\n    HexaryTrie,\n)\nfrom web3._utils.encoding import (\n    pad_bytes,\n)\n\ndef format_proof_nodes(proof):\n    trie_proof = []\n    for rlp_node in proof:\n        trie_proof.append(rlp.decode(bytes(rlp_node)))\n    return trie_proof\n\ndef verify_eth_get_proof(proof, root):\n    trie_root = Binary.fixed_length(32, allow_empty=True)\n    hash32 = Binary.fixed_length(32)\n\n    class _Account(rlp.Serializable):\n        fields = [\n                    ('nonce', big_endian_int),\n                    ('balance', big_endian_int),\n                    ('storage', trie_root),\n                    ('code_hash', hash32)\n                ]\n    acc = _Account(\n        proof.nonce, proof.balance, proof.storageHash, proof.codeHash\n    )\n    rlp_account = rlp.encode(acc)\n    trie_key = keccak(bytes.fromhex(proof.address[2:]))\n\n    assert rlp_account == HexaryTrie.get_from_proof(\n        root, trie_key, format_proof_nodes(proof.accountProof)\n    ), f\"Failed to verify account proof {proof.address}\"\n\n    for storage_proof in proof.storageProof:\n        trie_key = keccak(pad_bytes(b'\\x00', 32, storage_proof.key))\n        root = proof.storageHash\n        if storage_proof.value == b'\\x00':\n            rlp_value = b''\n        else:\n            rlp_value = rlp.encode(storage_proof.value)\n\n        assert rlp_value == HexaryTrie.get_from_proof(\n            root, trie_key, format_proof_nodes(storage_proof.proof)\n        ), f\"Failed to verify storage proof {storage_proof.key}\"\n\n    return True\n\nblock = w3.eth.get_block(3391)\nproof = w3.eth.get_proof('0x6C8f2A135f6ed072DE4503Bd7C4999a1a17F824B', [0, 1], 3391)\nassert verify_eth_get_proof(proof, block.stateRoot)\n```\n\n----------------------------------------\n\nTITLE: Handling OffchainLookup Reverts in Python\nDESCRIPTION: This function handles OffchainLookup reverts on contract function calls manually. It takes the offchain_lookup_payload and transaction as parameters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.utils.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nutils.handle_offchain_lookup(offchain_lookup_payload, transaction)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beacon Chain State Data (Python)\nDESCRIPTION: Methods for querying beacon chain state information including the current state, heads, and blob sidecars. These methods provide detailed information about the chain's current status and history.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> beacon.get_beacon_state()\n{\n  'data': {\n    'genesis_time': '1',\n    'genesis_validators_root': '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2',\n    'slot': '1',\n    'fork': {\n      'previous_version': '0x00000000',\n      'current_version': '0x00000000',\n      'epoch': '1'\n    },\n    # ... additional state data\n  }\n}\n\n>>> beacon.get_beacon_heads()\n{\n  'data': [\n    {\n      'slot': '221600',\n      'root': '0x9987754077fe6100a60c75d81a51b1ef457d019404d1546a66f4f5d6c23fae45'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Solidity Keccak Hashing\nDESCRIPTION: Shows the Solidity equivalent of the Web3.py solidity_keccak method, using keccak256 and abi.encodePacked to compute hashes for comparison with Python results.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 data1 = keccak256(abi.encodePacked(true));\nassert(data1 == hex\"5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2\");\nbytes32 data2 = keccak256(abi.encodePacked(uint8(97), uint8(98), uint8(99)));\nassert(data2 == hex\"4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45\");\n```\n\n----------------------------------------\n\nTITLE: Verifying ENS Reverse Resolution in Python\nDESCRIPTION: Demonstrates how to verify that reverse resolution is working correctly by checking that a name resolves to the expected address.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nassert ns.name('0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7') == 'ens.eth'\n```\n\n----------------------------------------\n\nTITLE: Async Iteration Over WebSocket Messages in Python\nDESCRIPTION: Updated pattern for asynchronously iterating over a persistent stream of messages from a WebSocket connection.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nasync for message in websocket_stream:\n    # Process message\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Handling OffchainLookup Reverts in Python\nDESCRIPTION: This is the async version of the handle_offchain_lookup() utility method. It takes the offchain_lookup_payload and transaction as parameters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.utils.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nutils.async_handle_offchain_lookup(offchain_lookup_payload, transaction)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Web3.py Provider\nDESCRIPTION: This code snippet shows the required methods for implementing a custom Web3.py provider, including make_request and is_connected.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BaseProvider:\n    def make_request(method, params):\n        # Implementation here\n        pass\n\n    def is_connected(show_traceback=False):\n        # Implementation here\n        pass\n\n    middleware = []  # Iterable of middleware\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Subscription Messages in Python\nDESCRIPTION: This snippet shows how to use the subscription manager API in Web3.py to handle multiple responses from a WebSocket subscription, specifically for new block headers.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> async def new_heads_handler(\n...     handler_context: NewHeadsSubscriptionContext,\n... ) -> None:\n...     result = handler_context.result\n...     print(f\"New block header: {result}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Counting Block Transactions with Web3.py\nDESCRIPTION: This method returns the number of transactions in a specified block using either eth_getBlockTransactionCountByNumber or eth_getBlockTransactionCountByHash RPC methods.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_block_transaction_count(46147)\n1\n>>> web3.eth.get_block_transaction_count('0x4e3a3754410177e6937ef1f84bba68ea139e8d1a2258c5f85db9f1cd715a1bdd')  # block 46147\n1\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTPProvider with Basic Configuration\nDESCRIPTION: Example of creating a Web3 instance with an HTTPProvider to connect to a local Ethereum node running on port 8545.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3\n>>> w3 = Web3(Web3.HTTPProvider(\"http://127.0.0.1:8545\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3.py Provider with Request Caching\nDESCRIPTION: This example demonstrates how to configure a Web3.py HTTPProvider with request caching options, including cache_allowed_requests and request_cache_validation_threshold.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, HTTPProvider\nfrom web3.utils import RequestCacheValidationThreshold\n\nw3 = Web3(HTTPProvider(\n    endpoint_uri=\"...\",\n\n    # optional flag to turn on cached requests, defaults to ``False``\n    cache_allowed_requests=True,\n\n```\n\n----------------------------------------\n\nTITLE: Using Filters in Web3.py v3 and v4\nDESCRIPTION: Comparison of using filters to watch for new blocks in Web3.py v3 and v4, showing the change from automatic polling to manual polling.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# v3\ndef new_block_callback(block_hash):\n    print(f\"New Block: {block_hash}\")\n\nnew_block_filter = web3.eth.filter('latest')\nnew_block_filter.watch(new_block_callback)\n\n# v4\nnew_block_filter = web3.eth.filter('latest')\nfor block_hash in new_block_filter.get_new_entries():\n    print(f\"New Block: {block_hash}\")\n```\n\n----------------------------------------\n\nTITLE: Reading Text Metadata from an ENS Record in Python\nDESCRIPTION: This code snippet shows how to read text metadata from an ENS record using Web3.py. It retrieves the 'url' text record for the 'ens.eth' domain.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nurl = ns.get_text('ens.eth', 'url')\nassert url == 'https://example.com'\n```\n\n----------------------------------------\n\nTITLE: Mining Blocks in Ethereum Test Blockchain\nDESCRIPTION: Shows how to use the mine method to mine a specified number of new blocks in the test blockchain. This method delegates to the evm_mine RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.testing.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTesting.mine(num_blocks=1)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Web3.py with Custom Middleware\nDESCRIPTION: Shows how to initialize a Web3.py instance with a custom list of middleware, replacing the default middleware.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nWeb3(middleware=[my_middleware1, my_middleware2])\n```\n\n----------------------------------------\n\nTITLE: Accessing ENS Module from Web3 Instance in Python\nDESCRIPTION: Accessing the ENS module directly from a Web3 instance. The module is instantiated automatically the first time it's used.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# instantiate w3 instance\nfrom web3 import Web3, IPCProvider\nw3 = Web3(IPCProvider(...))\n\n# use the module\nw3.ens.address('ethereum.eth')\n```\n\n----------------------------------------\n\nTITLE: Creating EVM Snapshot in Ethereum Test Blockchain\nDESCRIPTION: Illustrates how to create a snapshot of the current EVM state using the snapshot method. This method delegates to the evm_snapshot RPC method and returns an integer identifier for the snapshot.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.testing.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTesting.snapshot()\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Method at Specific Block in Python\nDESCRIPTION: Example of calling a contract method at a specific block using the block_identifier keyword argument, introduced in v4.0.0-beta.13.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\ncontract.functions.myMethod().call(block_identifier='latest')\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Event Filtering with asyncio in Web3.py\nDESCRIPTION: Example of asynchronous event filtering using Python's asyncio library to handle multiple filters concurrently.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, IPCProvider\nimport asyncio\n\n# instantiate Web3 instance\nw3 = Web3(IPCProvider(...))\n\ndef handle_event(event):\n    print(event)\n    # and whatever\n\nasync def log_loop(event_filter, poll_interval):\n    while True:\n        for event in event_filter.get_new_entries():\n            handle_event(event)\n        await asyncio.sleep(poll_interval)\n\ndef main():\n    block_filter = w3.eth.filter('latest')\n    tx_filter = w3.eth.filter('pending')\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_until_complete(\n            asyncio.gather(\n                log_loop(block_filter, 2),\n                log_loop(tx_filter, 2)))\n    finally:\n        loop.close()\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uncle Block Data with Web3.py\nDESCRIPTION: This method retrieves uncle block data for a specified block and uncle index using either eth_getUncleByBlockHashAndIndex or eth_getUncleByBlockNumberAndIndex RPC methods.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_uncle_by_block(56160, 0)\nAttributeDict({\n  'author': '0xbe4532e1b1db5c913cf553be76180c1777055403',\n  'difficulty': '0x17dd9ca0afe',\n  'extraData': '0x476574682f686261722f76312e302e312f6c696e75782f676f312e342e32',\n  'gasLimit': '0x2fefd8',\n  'gasUsed': '0x0',\n  'hash': '0xc78c35720d930f9ef34b4e6fb9d02ffec936f9b02a8f0fa858456e4afd4d5614',\n  'logsBloom':'0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  'miner': '0xbe4532e1b1db5c913cf553be76180c1777055403',\n  'mixHash': '0x041e14603f35a82f6023802fec96ef760433292434a39787514f140950597e5e',\n  'nonce': '0x5d2b7e3f1af09995',\n  'number': '0xdb5e',\n  'parentHash': '0xcc30e8a9b15c548d5bf113c834143a8f0e1909fbfea96b2a208dc154293a78cf',\n  'receiptsRoot': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n  'sealFields': ['0xa0041e14603f35a82f6023802fec96ef760433292434a39787514f140950597e5e', '0x885d2b7e3f1af09995'],\n  'sha3Uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n  'size': None, 'stateRoot': '0x8ce2b1bf8e25a06a8ca34c647ff5fd0fa48ac725cc07f657ae1645ab8ef68c91',\n  'timestamp': '0x55c6a972',\n  'totalDifficulty': '0xce4c4f0a0b810b',\n  'transactions': [],\n  'transactionsRoot': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n  'uncles': []\n})\n\n# You can also refer to the block by hash:\n>>> web3.eth.get_uncle_by_block('0x685b2226cbf6e1f890211010aa192bf16f0a0cba9534264a033b023d7367b845', 0)\nAttributeDict({\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Ethereum Account Balance in Python\nDESCRIPTION: Example of using the getBalance method to retrieve an account balance.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nweb3.eth.getBalance(account_address)\n```\n\n----------------------------------------\n\nTITLE: Reverting EVM State in Ethereum Test Blockchain\nDESCRIPTION: Demonstrates how to revert the EVM to a previous state using the revert method. It can revert to the most recent snapshot or a specific snapshot if an index is provided. This method delegates to the evm_revert RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.testing.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTesting.revert(snapshot_idx=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Retry Middleware in Python\nDESCRIPTION: Example of configuring the exception_retry_middleware with custom allow list and backoff factor.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nexception_retry_middleware(allow_list=['custom_rpc_endpoint'], backoff_factor=0.5)\n```\n\n----------------------------------------\n\nTITLE: Attaching External Modules After Web3 Instantiation in Python\nDESCRIPTION: Demonstrates how to attach external modules to a Web3 instance after it has been created using the attach_modules method. It shows the same module hierarchy as the previous example.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, HTTPProvider\n>>> from external_module_library import (\n...     ModuleClass1,\n...     ModuleClass2,\n...     ModuleClass3,\n...     ModuleClass4,\n...     ModuleClass5,\n... )\n>>> w3 = Web3(HTTPProvider(provider_uri))\n\n>>> w3.attach_modules({\n...     'module1': ModuleClass1,  # the module class itself may be used for a single module with no submodules\n...     'module2': (ModuleClass2, {  # a tuple with module class and corresponding submodule dict may be used for modules with submodules\n...         'submodule1': ModuleClass3,\n...         'submodule2': (ModuleClass4, {  # this pattern may be repeated as necessary\n...             'submodule2a': ModuleClass5,\n...         })\n...     })\n... })\n>>> w3.module1.return_zero()\n0\n>>> w3.module2.submodule1.return_one()\n1\n>>> w3.module2.submodule2.submodule2a.return_two()\n2\n```\n\n----------------------------------------\n\nTITLE: Counting Uncle Blocks with Web3.py\nDESCRIPTION: This method returns the number of uncles associated with a specified block using either eth_getUncleCountByBlockHash or eth_getUncleCountByBlockNumber RPC methods.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.get_uncle_count(56160)\n1\n\n# You can also refer to the block by hash:\n>>> web3.eth.get_uncle_count('0x685b2226cbf6e1f890211010aa192bf16f0a0cba9534264a033b023d7367b845')\n1\n```\n\n----------------------------------------\n\nTITLE: Using AsyncHTTPProvider with Session Caching in Python\nDESCRIPTION: Example demonstrating the usage of AsyncHTTPProvider with session caching functionality, a feature added in v6.0.0-beta.1 to improve performance with async HTTP requests.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nfrom web3 import AsyncHTTPProvider\n\n# Creating an AsyncHTTPProvider with session caching\nasync_provider = AsyncHTTPProvider(endpoint_uri)\n\n# The provider will automatically cache the session for better performance\nasync_w3 = Web3(async_provider)\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Storage in Python\nDESCRIPTION: New get_storage_at method to query Ethereum storage, deprecating getStorageAt.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nweb3.eth.get_storage_at(account, position)\n```\n\n----------------------------------------\n\nTITLE: Processing Transaction Receipt with Contract Event in Python\nDESCRIPTION: Example of processing a transaction receipt with a contract event using the new API introduced in v4.0.0-beta.7.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nContract.events.myEvent(*args, **kwargs).processReceipt(transaction_receipt)\n```\n\n----------------------------------------\n\nTITLE: Initializing HttpProvider with Custom Session in Python\nDESCRIPTION: Allow initializing HttpProvider with a custom requests.Session to tune the connection pool as desired.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nHttpProvider(endpoint_uri, session=custom_session)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beacon Chain Configuration Data (Python)\nDESCRIPTION: Methods for getting chain configuration data including fork schedule, specification parameters, and deposit contract details.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> beacon.get_fork_schedule()\n{\n  'data': [\n    {\n      'previous_version': '0x00002009',\n      'current_version': '0x00002009',\n      'epoch': '0'\n    }\n  ]\n}\n\n>>> beacon.get_spec()\n{\n  'data': {\n    'DEPOSIT_CONTRACT_ADDRESS': '0x8c5fecdC472E27Bc447696F431E425D02dd46a8c',\n    'MIN_ATTESTATION_INCLUSION_DELAY': '1',\n    'SLOTS_PER_EPOCH': '32',\n    'SHUFFLE_ROUND_COUNT': '90',\n    'MAX_EFFECTIVE_BALANCE': '32000000000',\n    'DOMAIN_BEACON_PROPOSER': '0x00000000',\n    'MAX_ATTESTER_SLASHINGS': '2',\n    'DOMAIN_SELECTION_PROOF': '0x05000000',\n    ...\n  }\n}\n\n>>> beacon.get_deposit_contract()\n{\n  'data': {\n    'chain_id': '5',\n    'address': '0x8c5fecdC472E27Bc447696F431E425D02dd46a8c'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Persistent WebSocket Connection with Async/Await in Python\nDESCRIPTION: Example of initializing a persistent WebSocket connection using the await pattern with the _PersistentConnectionWeb3 class.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nawait _PersistentConnectionWeb3()\n```\n\n----------------------------------------\n\nTITLE: Synchronous Event Listening in Web3.py\nDESCRIPTION: Implementation of a synchronous event listener that continuously polls for new events using a simple loop structure.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, IPCProvider\nimport time\n\n# instantiate Web3 instance\nw3 = Web3(IPCProvider(...))\n\ndef handle_event(event):\n    print(event)\n\ndef log_loop(event_filter, poll_interval):\n    while True:\n        for event in event_filter.get_new_entries():\n            handle_event(event)\n        time.sleep(poll_interval)\n\ndef main():\n    block_filter = w3.eth.filter('latest')\n    log_loop(block_filter, 2)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Saving Event Scanner State in Python\nDESCRIPTION: This method saves the current state of the event scanner to a file. It uses JSON to serialize the state and includes a timestamp for the last save.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef save(self):\n    \"\"\"Save everything we have scanned so far in a file.\"\"\"\n    with open(self.fname, \"wt\") as f:\n        json.dump(self.state, f)\n    self.last_save = time.time()\n```\n\n----------------------------------------\n\nTITLE: Querying Node Information (Python)\nDESCRIPTION: Methods for retrieving information about the beacon node including identity, peers, health status, version, and sync status.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> beacon.get_node_identity()\n{\n  'data': {\n    'peer_id': '16Uiu2HAmLZ1CYVFKpa3wwn4cnknZqosum8HX3GHDhUpEULQc9ixE',\n    'enr': 'enr:-KG4QCIp6eCZ6hG_fd93qsw12qmbfsl2rUTfQvwVP4FOTlWeNXYo0Gg9y3WVYIdF6FQC6R0E8CbK0Ywq_6TKMx1BpGlAhGV0aDKQOwiHlQAAIAn__________4JpZIJ2NIJpcIR_AAABiXNlY3AyNTZrMaEDdVT4g1gw86BfbrtLCq2fRBlG0AnMxsXtAQgA327S5FeDdGNwgiMog3VkcIIjKA',\n    'p2p_addresses': ['/ip4/127.0.0.1/tcp/9000/p2p/16Uiu2HAmLZ1CYVFKpa3wwn4cnknZqosum8HX3GHDhUpEULQc9ixE'],\n    'discovery_addresses': ['/ip4/127.0.0.1/udp/9000/p2p/16Uiu2HAmLZ1CYVFKpa3wwn4cnknZqosum8HX3GHDhUpEULQc9ixE'],\n    'metadata': {'seq_number': '0', 'attnets': '0x0000000000000000'}\n  }\n}\n\n>>> beacon.get_health()\n200\n\n>>> beacon.get_version()\n{\n  'data': {\n    'version': 'teku/v20.12.0+9-g9392008/osx-x86_64/adoptopenjdk-java-15'\n  }\n}\n\n>>> beacon.get_syncing()\n{\n  'data': {\n    'head_slot': '222270'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Validators List\nDESCRIPTION: Returns a list of all validators with their status and details.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_validators()\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Middleware in Web3.py\nDESCRIPTION: Demonstrates how to export middleware from one Web3.py instance and import it into another, preserving custom middleware.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> w3_1 = Web3(...)\n# add uniquely named middleware:\n>>> w3_1.middleware_onion.add(web3.middleware.GasPriceStrategyMiddleware, 'test_middleware')\n# export middleware from first w3 instance\n>>> middleware = w3_1.middleware_onion.middleware\n\n# import into second instance\n>>> w3_2 = Web3(..., middleware=middleware)\n>>> assert w3_1.middleware_onion.middleware == w3_2.middleware_onion.middleware\n>>> assert w3_2.middleware_onion.get('test_middleware')\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3.py Instance\nDESCRIPTION: Example of configuring a Web3.py instance with an HTTP provider to connect to an Ethereum node.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3\n>>> w3 = Web3(Web3.HTTPProvider('http://localhost:8545'))\n\n# now `w3` is available to use:\n>>> w3.is_connected()\nTrue\n>>> w3.eth.send_transaction(...)\n```\n\n----------------------------------------\n\nTITLE: Implementing ecrecover in Solidity\nDESCRIPTION: This Solidity contract snippet shows a simple implementation of the ecrecover function, which can be used to verify message signatures and recover the signer's address.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.4.19;\n\ncontract Recover {\n  function ecr (bytes32 msgh, uint8 v, bytes32 r, bytes32 s) public pure\n  returns (address sender) {\n    return ecrecover(msgh, v, r, s);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing EthereumTesterProvider in Python\nDESCRIPTION: This code snippet shows how to initialize a Web3 instance using the EthereumTesterProvider. This provider is used for testing purposes and integrates with the eth-tester library.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/providers.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, EthereumTesterProvider\n>>> w3 = Web3(EthereumTesterProvider())\n```\n\n----------------------------------------\n\nTITLE: ENS Text Record Lookup in Python\nDESCRIPTION: Example showing how to use the new 'get_text' method for ENS to look up text record values, added in v6.0.0-beta.2.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n# Look up an ENS text record value\ntext_value = w3.ens.get_text('example.eth', 'key_name')\n```\n\n----------------------------------------\n\nTITLE: Getting Epoch Committees\nDESCRIPTION: Retrieves committee assignments for the current epoch.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_epoch_committees()\n```\n\n----------------------------------------\n\nTITLE: Listing Ethereum Accounts in Web3.py\nDESCRIPTION: Demonstrates how to retrieve the list of known Ethereum accounts using the web3.eth.accounts property.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.eth.accounts\n['0x582AC4D8929f58c217d4a52aDD361AE470a8a4cD']\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Events Using handler_context in Python\nDESCRIPTION: Demonstrates how to unsubscribe from events using the handler_context object, which allows unsubscribing without needing to track the subscription ID manually.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/subscriptions.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def new_heads_handler(handler_context):\n    ...\n    if some_condition:\n        await handler_context.subscription.unsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Updating WebSocket Subscription Processing in Python\nDESCRIPTION: Demonstrates the change in handling incoming subscription messages using the new socket namespace instead of ws.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# WebsocketsProviderV2:\nasync for message in w3.ws.process_subscriptions():\n  ...\n\n# WebSocketProvider:\nasync for message in w3.socket.process_subscriptions():\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing EventScannerState Abstract Methods in Python\nDESCRIPTION: This snippet defines abstract methods for the EventScannerState class, including getting the last scanned block, managing chunk processing, and handling events. These methods must be implemented by concrete subclasses.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/filters.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef get_last_scanned_block(self) -> int:\n    \"\"\"Number of the last block we have scanned on the previous cycle.\n\n    :return: 0 if no blocks scanned yet\n    \"\"\"\n\n@abstractmethod\ndef start_chunk(self, block_number: int):\n    \"\"\"Scanner is about to ask data of multiple blocks over JSON-RPC.\n\n    Start a database session if needed.\n    \"\"\"\n\n@abstractmethod\ndef end_chunk(self, block_number: int):\n    \"\"\"Scanner finished a number of blocks.\n\n    Persistent any data in your state now.\n    \"\"\"\n\n@abstractmethod\ndef process_event(self, block_when: datetime.datetime, event: AttributeDict) -> object:\n    \"\"\"Process incoming events.\n\n    This function takes raw events from Web3, transforms them to your application internal\n    format, then saves them in a database or some other state.\n\n    :param block_when: When this block was mined\n\n    :param event: Symbolic dictionary of the event data\n\n    :return: Internal state structure that is the result of event transformation.\n    \"\"\"\n\n@abstractmethod\ndef delete_data(self, since_block: int) -> int:\n    \"\"\"Delete any data since this block was scanned.\n\n    Purges any potential minor reorg data.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Subscription Example\nDESCRIPTION: Demonstrates a basic WebSocket subscription to new block headers using AsyncWeb3 and subscription manager.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def ws_subscription_example():\n    async with AsyncWeb3(WebSocketProvider(f\"ws://127.0.0.1:8546\")) as w3:\n        subscription_id = await w3.eth.subscribe(\"newHeads\", handler=new_heads_handler)\n        await w3.subscription_manager.handle_subscriptions(run_forever=False)\nasyncio.run(ws_subscription_example())\n```\n\n----------------------------------------\n\nTITLE: Example Newsfragment Filenames for Web3.py\nDESCRIPTION: Provides examples of correctly formatted newsfragment filenames, illustrating the application of the naming convention.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/newsfragments/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n123.feature.rst, 456.bugfix.rst\n```\n\n----------------------------------------\n\nTITLE: Comparing AttributeDict Equality Using Hashes in Python\nDESCRIPTION: Fix for comparing equality of two AttributeDict classes by using hashes instead of direct comparison.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nhash(attribute_dict1) == hash(attribute_dict2)\n```\n\n----------------------------------------\n\nTITLE: Adding a Peer to Geth Node\nDESCRIPTION: Demonstrates how to add a new remote node to the list of tracked static nodes using admin.add_peer().\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.add_peer('enode://e54eebad24dce1f6d246bea455ffa756d97801582420b9ed681a2ea84bf376d0bd87ae8dd6dc06cdb862a2ca89ecabe1be1050be35b4e70d62bc1a092cb7e2d3@52.71.255.237:30303')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Visualizing Middleware Layers in Web3.py\nDESCRIPTION: ASCII diagram illustrating the layered structure of middleware in Web3.py, showing how requests and responses flow through different layers.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                         New request from web3.py\n\n                                                     |\n                                                     |\n                                                     v\n\n                                             `````Layer 2``````\n                                      ```````                  ```````\n                                 `````               |                ````\n                              ````                   v                    ````\n                           ```                                                ```\n                         `.               ````````Layer 1```````                `.`\n                       ``             ````                      `````              .`\n                     `.            ```               |               ```            `.`\n                    .`          ```                  v                  ```           `.`\n                  `.          `.`                                         ```           .`\n                 ``          .`                  `Layer 0`                  ``           .`\n                ``         `.               `````        ``````               .           .`\n               `.         ``             ```         |        ```              .`          .\n               .         ``            `.`           |           ``             .           .\n              .         `.            ``       JSON-RPC call       .`            .          .`\n              .         .            ``              |              .            ``          .\n             ``         .            .               v               .            .          .\n             .         .`           .                                .            .          ``\n             .         .            .          Ethereum node         .`           .           .\n             .         .            .                                .            .           .\n             .         ``           `.               |               .            .           .\n             .          .            .`              |              .`            .          .\n             `.         .`            .`          Response         .`            .`          .\n              .          .             `.`           |           `.`            `.           .\n              `.          .              ```         |        ````             `.           .\n               .          `.               `````     v     ````               `.           ``\n                .           .`                 ```Layer 0``                  ``           `.`\n                 .           `.                                            `.`           `.`\n                  .            `.                    |                   `.`            `.`\n                   .`            ```                 |                 ```             .`\n                    `.              ```              v             ````              `.`\n                      ``               ``````                 `````                 .`\n                        ``                   `````Layer 1`````                   `.`\n                          ```                                                  ```\n                            ````                     |                      ```\n                               `````                 v                  ````\n                                   ``````                          `````\n                                         `````````Layer 2``````````\n\n                                                     |\n                                                     v\n\n                                          Returned value in web3.py\n```\n\n----------------------------------------\n\nTITLE: Stopping WebSocket RPC Server in Geth\nDESCRIPTION: Demonstrates how to stop the WebSocket-based JSON RPC server using admin.stop_ws().\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.stop_ws()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Gas Price Strategy Function Signature\nDESCRIPTION: Shows the required function signature for implementing a custom gas price strategy.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/gas_price.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef gas_price_strategy(web3, transaction_params=None):\n...\n```\n\n----------------------------------------\n\nTITLE: Resetting EVM to Genesis State in Ethereum Test Blockchain\nDESCRIPTION: Shows how to reset the EVM back to its genesis state using the reset method. This method delegates to the evm_reset RPC method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.testing.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTesting.reset()\n```\n\n----------------------------------------\n\nTITLE: Web3 Transaction Receipt Checking\nDESCRIPTION: Code pattern for transaction receipt checking using HexBytes transaction hash.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ntransaction_hash = HexBytes(transaction_hash)\nw3.eth.wait_for_transaction_receipt(transaction_hash)\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Peers in Geth\nDESCRIPTION: Shows how to use admin.peers() to get a list of current peers the Geth node is connected to.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.peers()\n[\n    {\n        'caps': ['eth/63'],\n        'id': '146e8e3e2460f1e18939a5da37c4a79f149c8b9837240d49c7d94c122f30064e07e4a42ae2c2992d0f8e7e6f68a30e7e9ad31d524349ec9d17effd2426a37b40',\n        'name': 'Geth/v1.4.10-stable/windows/go1.6.2',\n        'network': {\n            'localAddress': '10.0.3.115:64478',\n            'remoteAddress': '72.208.167.127:30303',\n        },\n        'protocols': {\n            'eth': {\n                'difficulty': 17179869184,\n                'head': '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3',\n                'version': 63,\n            },\n        }\n    },\n    # ... more peers ...\n]\n```\n\n----------------------------------------\n\nTITLE: Starting WebSocket RPC Server in Geth\nDESCRIPTION: Demonstrates starting the WebSocket-based JSON RPC API server using admin.start_ws() with configurable options.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.start_ws()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using construct_sign_and_send_raw_middleware with Hosted Node in Python\nDESCRIPTION: Example for the 'construct_sign_and_send_raw_middleware' when connected to a hosted node, documented in v6.0.0-beta.2.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nfrom web3 import Web3\nfrom web3.middleware import construct_sign_and_send_raw_middleware\nfrom eth_account import Account\n\n# Initialize web3 with a hosted node\nw3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/YOUR-PROJECT-ID'))\n\n# Set up account with private key\nprivate_key = 'your_private_key_here'\naccount = Account.from_key(private_key)\n\n# Add middleware to sign transactions\nw3.middleware_onion.add(construct_sign_and_send_raw_middleware(account))\n\n# Set default account\nw3.eth.default_account = account.address\n\n# Now you can send transactions that will be signed locally\ntx_hash = w3.eth.send_transaction({\n    'to': '0xRecipientAddress',\n    'value': w3.to_wei(0.1, 'ether'),\n    'gas': 21000,\n    'gasPrice': w3.eth.gas_price,\n    'nonce': w3.eth.get_transaction_count(account.address)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Bytes Type Checking in Python\nDESCRIPTION: Shows how to disable and re-enable strict bytes type checking using the w3.strict_bytes_type_checking attribute. This affects the behavior of the is_encodable method for bytes types.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3.auto.gethdev import w3\n\n>>> w3.is_encodable('bytes2', b'12')\nTrue\n\n>>>  # not of exact size bytes2\n>>> w3.is_encodable('bytes2', b'1')\nFalse\n\n>>> w3.strict_bytes_type_checking = False\n\n>>> # zero-padded, so encoded to: b'1\\x00'\n>>> w3.is_encodable('bytes2', b'1')\nTrue\n\n>>> # re-enable it\n>>> w3.strict_bytes_type_checking = True\n>>> w3.is_encodable('bytes2', b'1')\nFalse\n```\n\n----------------------------------------\n\nTITLE: Getting Block Attestations\nDESCRIPTION: Returns attestations included in a specific block.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_block_attestations(1)\n```\n\n----------------------------------------\n\nTITLE: Web3.py Type Annotation Example\nDESCRIPTION: Example of type hints for the eth_signTypedData JSON data argument.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\neth_signTypedData[JSON]\n```\n\n----------------------------------------\n\nTITLE: Managing ENS Strict Bytes Type Checking with Modules in Python\nDESCRIPTION: Example showing how strict_bytes_type_checking flag behaves when accessing ENS as a module on the Web3 instance. Changes to the flag on the parent Web3 instance affect all modules.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, EthereumTesterProvider\n>>> w3 = Web3(EthereumTesterProvider())\n\n>>> assert w3.strict_bytes_type_checking  # assert strict by default\n>>> w3.is_encodable('bytes2', b'1')\nFalse\n\n>>> w3.strict_bytes_type_checking = False\n>>> w3.is_encodable('bytes2', b'1')  # zero-padded, so encoded to: b'1\\x00'\nTrue\n\n>>> assert w3 == w3.ens.w3  # assert same object\n>>> assert not w3.ens.w3.strict_bytes_type_checking\n>>> w3.ens.w3.is_encodable('bytes2', b'1')\nTrue\n\n>>> # sanity check on eth module as well\n>>> assert not w3.eth.w3.strict_bytes_type_checking\n>>> w3.eth.w3.is_encodable('bytes2', b'1')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Builder Implementation in Python\nDESCRIPTION: Demonstrates the change in middleware construction pattern from function-based to class-based builders.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# v6 (no longer supported)\nfrom web3.middleware import construct_sign_and_send_raw_middleware\nw3.middleware_onion.add(construct_sign_and_send_raw_middleware(private_key))\n\n# v7\nfrom web3.middleware import SignAndSendRawMiddlewareBuilder\nw3.middleware_onion.inject(SignAndSendRawMiddlewareBuilder.build(private_key), layer=0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Web3 Middleware Stack in Python\nDESCRIPTION: Example of using the 'middlewares' property added to 'NamedElementOnion' in v5.26.0, which returns the current middlewares in proper order for importing into a new Web3 instance.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n# Get the current middlewares from an existing Web3 instance\ncurrent_middlewares = w3.middleware_onion.middlewares\n\n# Create a new Web3 instance with the same middleware stack\nnew_w3 = Web3(provider)\nfor middleware in current_middlewares:\n    new_w3.middleware_onion.add(middleware)\n```\n\n----------------------------------------\n\nTITLE: Querying Basic Beacon Chain Data (Python)\nDESCRIPTION: Methods for retrieving basic beacon chain data including attestations, slashings, and voluntary exits. Each method returns an empty data array if no relevant records exist.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> beacon.get_attestations()\n{'data': []}\n\n>>> beacon.get_attester_slashings()\n{'data': []}\n\n>>> beacon.get_proposer_slashings()\n{'data': []}\n\n>>> beacon.get_voluntary_exits()\n{'data': []}\n```\n\n----------------------------------------\n\nTITLE: Text Conversion Examples\nDESCRIPTION: Shows conversion of various inputs to their string equivalents using to_text method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.to_text(0x636f776dc3b6)\n'cowmÃ¶'\n>>> Web3.to_text(b'cowm\\xc3\\xb6')\n'cowmÃ¶'\n>>> Web3.to_text(hexstr='0x636f776dc3b6')\n'cowmÃ¶'\n>>> Web3.to_text(hexstr='636f776dc3b6')\n'cowmÃ¶'\n>>> Web3.to_text(text='cowmÃ¶')\n'cowmÃ¶'\n```\n\n----------------------------------------\n\nTITLE: Setting up Deep ENS Subdomain in Python\nDESCRIPTION: Example showing how to claim arbitrarily deep ENS subdomains. Includes a warning about increased gas costs with more subdomains.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nns.setup_address('supreme.executive.power.derives.from.a.mandate.from.the.masses.ens.eth')\n\n# wait for the transaction to be mined, then:\nassert (\n    ns.address('supreme.executive.power.derives.from.a.mandate.from.the.masses.ens.eth')\n    == '0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7'\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Single Block Header\nDESCRIPTION: Retrieves header for a specific block by ID.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_block_header(1)\n```\n\n----------------------------------------\n\nTITLE: Web3.py Cache Utility Methods\nDESCRIPTION: Implementation of popitem() and async_await_and_popitem() methods for the SimpleCache class.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npopitem()\nasync_await_and_popitem()\n```\n\n----------------------------------------\n\nTITLE: Getting Finality Checkpoint\nDESCRIPTION: Retrieves the finality checkpoint data including previous justified, current justified and finalized epochs and roots.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_finality_checkpoint()\n```\n\n----------------------------------------\n\nTITLE: Importing Testing Module in Python\nDESCRIPTION: Shows how to import the Testing module from web3.testing in Python. This module provides access to non-standard RPC APIs for Ethereum testing.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.testing.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.testing import Testing\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP RPC Server in Geth\nDESCRIPTION: Shows how to start the HTTP-based JSON RPC API server using admin.start_http() with customizable parameters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.start_http()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Getting Block Data\nDESCRIPTION: Returns full block data including messages, signatures and attestations.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_block(1)\n```\n\n----------------------------------------\n\nTITLE: Address Validation Examples\nDESCRIPTION: Demonstrates address validation and checksum methods.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.is_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.is_checksum_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> Web3.is_checksum_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.to_checksum_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\n'0xd3CdA913deB6f67967B99D67aCDFa1712C293601'\n```\n\n----------------------------------------\n\nTITLE: Managing ENS Strict Bytes Type Checking with Inheritance in Python\nDESCRIPTION: Example demonstrating how the strict_bytes_type_checking flag works with ENS instances created from Web3 objects. Shows how the flag is inherited but then can be modified independently.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/ens_overview.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from web3 import Web3, EthereumTesterProvider\n>>> from ens import ENS\n>>> w3 = Web3(EthereumTesterProvider())\n\n>>> assert w3.strict_bytes_type_checking  # assert strict by default\n>>> w3.is_encodable('bytes2', b'1')\nFalse\n\n>>> w3.strict_bytes_type_checking = False\n>>> w3.is_encodable('bytes2', b'1')  # zero-padded, so encoded to: b'1\\x00'\nTrue\n\n>>> ns = ENS.from_web3(w3)\n>>> # assert inherited from w3 at time of instantiation via ENS.from_web3()\n>>> assert ns.strict_bytes_type_checking is False\n>>> ns.w3.is_encodable('bytes2', b'1')\nTrue\n\n>>> # assert these are now separate instances\n>>> ns.strict_bytes_type_checking = True\n>>> ns.w3.is_encodable('bytes2', b'1')\nFalse\n\n>>> # assert w3 flag value remains\n>>> assert w3.strict_bytes_type_checking is False\n>>> w3.is_encodable('bytes2', b'1')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Retrieving transaction signature value in Web3.py\nDESCRIPTION: Example of accessing the 'v' value from a signed Ethereum transaction, which is part of the signature (v,r,s).\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> signed_txn.v\n1\n```\n\n----------------------------------------\n\nTITLE: Stopping HTTP RPC Server in Geth\nDESCRIPTION: Shows how to stop the HTTP-based JSON RPC server using admin.stop_http().\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.stop_http()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Getting Fork Data\nDESCRIPTION: Returns fork data including previous version, current version and epoch.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_fork_data()\n```\n\n----------------------------------------\n\nTITLE: Web3.py Data Type Examples\nDESCRIPTION: Examples of using different data types with Web3.py contract interactions including booleans, integers, addresses and bytes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncontract_instance.functions.updateBool(True).transact()\ncontract_instance.functions.updateUint8(255).transact()\ncontract_instance.functions.updateUint256(2**256 - 1).transact()\ncontract_instance.functions.updateUintArray([1, 2, 3]).transact()\ncontract_instance.functions.updateInt8(-128).transact()\ncontract_instance.functions.updateAddr(\"0x0000000000000000000000000000000000000000\").transact()\ncontract_instance.functions.updateBytes1(HexBytes(255)).transact()\n```\n\n----------------------------------------\n\nTITLE: Updated String Parameter Handling in Web3.py v4\nDESCRIPTION: String values must now be explicitly passed using either 'hexstr' or 'text' keyword arguments. This affects methods like sha3() and toBytes().\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Example of new string parameter passing\nw3.sha3(hexstr='0x123')\nw3.toBytes(text='hello')\n```\n\n----------------------------------------\n\nTITLE: Example Solidity Panic Error Code\nDESCRIPTION: Code demonstrating the Solidity Panic error codes feature added in Solidity 0.8.0, which raises ContractPanicError with appropriate messaging\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nclass ContractPanicError(Exception):\n    def __init__(self, panic_code):\n        self.panic_code = panic_code\n```\n\n----------------------------------------\n\nTITLE: RST Issue Reference Example\nDESCRIPTION: Example of how GitHub issues are referenced in the changelog using reStructuredText syntax\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_2\n\nLANGUAGE: RST\nCODE:\n```\n`#3653 <https://github.com/ethereum/web3.py/issues/3653>`__\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Implementation in Python\nDESCRIPTION: Shows the transition from function-based to class-based middleware model in web3.py v7.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# v6 (no longer supported)\nfrom web3.middleware import pythonic_middleware\nw3.middleware_onion.add(pythonic_middleware)\n\n# v7\nfrom web3.middleware import PythonicMiddleware\nw3.middleware_onion.add(PythonicMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Getting Client Version\nDESCRIPTION: Demonstrates retrieving the Ethereum client version using the client_version attribute.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.client_version\n'Geth/v1.4.11-stable-fed692f6/darwin/go1.7'\n```\n\n----------------------------------------\n\nTITLE: Inspecting Geth Transaction Pool\nDESCRIPTION: Uses txpool.inspect() to get a textual summary of all transactions currently pending or queued in the Geth node.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.txpool.inspect()\n{\n    'pending': {\n        '0x26588a9301b0428d95e6Fc3A5024fcE8BEc12D51': {\n          31813: [\"0x3375Ee30428b2A71c428afa5E89e427905F95F7e: 0 wei + 500000 Ã 20000000000 gas\"]\n        },\n        # ... more pending transactions ...\n    },\n    'queued': {\n        '0x0F6000De1578619320aBA5e392706b131FB1dE6f': {\n          6: [\"0x8383534d0bcd0186d326C993031311c0Ac0D9B2d: 9000000000000000000 wei + 21000 Ã 20000000000 gas\"]\n        },\n        # ... more queued transactions ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ubuntu 16.04 Web3.py Setup Script\nDESCRIPTION: Complete setup script for installing Web3.py on Ubuntu 16.04. Includes system updates, installing build dependencies, Python development packages, creating virtual environment, and installing Web3.py with development dependencies.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-linux.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\n\nsudo apt-get update\nsudo apt-get -y upgrade\n\nsudo apt-get -y install build-essential\n#RESOLVES ERROR:  unable to execute 'x86_64-linux-gnu-gcc': No such file or directory error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n\nsudo apt-get -y install python3-dev\n#RESOLVES ERROR:  cytoolz/dicttoolz.c:17:20: fatal error: Python.h: No such file or directory compilation terminated. error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n\nsudo apt-get -y install python3-venv\n#RESOLVES ERROR: The virtual environment was not created successfully because ensurepip is not available.  On Debian/Ubuntu systems, you need to install the python3-venv package using the following command.\n\ncd ~\ngit clone https://github.com/ethereum/web3.py.git\ncd web3.py\npython3 -m venv venv\n. venv/bin/activate\npip install --upgrade pip\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: ENS Wildcard Resolution Support in Python\nDESCRIPTION: Example showing how to use ENS wildcard resolution support (ENSIP-10) added in v6.0.0-beta.0.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n# Resolve a wildcard ENS name\nresolved_address = w3.ens.address('*.eth.eth')\n\n# You can also resolve subdomains with wildcards\nresolved_address = w3.ens.address('*.mydomain.eth')\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync Distance for Ethereum Web3.py\nDESCRIPTION: This JSON snippet defines the sync_distance parameter, which is likely used to specify the maximum number of blocks to sync in the Ethereum network using Web3.py.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  'sync_distance': '190861'\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing JSON-RPC Decoding for Web3.py in Python\nDESCRIPTION: Provides a function to patch the web3.py provider for faster JSON decoding using ujson library. This optimization is particularly useful for large responses and batch jobs.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/troubleshooting.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"JSON-RPC decoding optimised for web3.py\"\"\"\n\nfrom typing import cast\n\nimport ujson\n\nfrom web3.providers import JSONBaseProvider\nfrom web3.types import RPCResponse\n\n\ndef _fast_decode_rpc_response(raw_response: bytes) -> RPCResponse:\n    decoded = ujson.loads(raw_response)\n    return cast(RPCResponse, decoded)\n\n\ndef patch_provider(provider: JSONBaseProvider):\n    \"\"\"Monkey-patch web3.py provider for faster JSON decoding.\n\n    Call this on your provider after construction.\n\n    This greatly improves JSON-RPC API access speeds, when fetching\n    multiple and large responses.\n    \"\"\"\n    provider.decode_rpc_response = _fast_decode_rpc_response\n```\n\n----------------------------------------\n\nTITLE: Attaching External Modules to Web3 Instance in Python\nDESCRIPTION: Code example showing how to attach external modules to a Web3 instance using the 'external_modules' argument or the 'attach_modules()' method, introduced in v5.26.0.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n# Using external_modules argument when instantiating Web3\nw3 = Web3(provider, external_modules={'external_module_name': ExternalModuleClass})\n\n# Using attach_modules() method\nw3 = Web3(provider)\nw3.attach_modules({'external_module_name': ExternalModuleClass})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Geth Node Data Directory\nDESCRIPTION: Uses the admin.datadir() method to get the system path of the node's data directory.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.datadir()\n'/Users/snakecharmers/Library/Ethereum'\n```\n\n----------------------------------------\n\nTITLE: Getting Block Root\nDESCRIPTION: Retrieves the root hash for a specific block.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_block_root(1)\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies for Linux Systems\nDESCRIPTION: Commands for installing required system packages on different Linux distributions including Debian/Ubuntu, ArchLinux, and Fedora. Includes essential packages like libssl-dev, libffi-dev, and build tools.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-linux.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install libssl-dev libffi-dev autoconf automake libtool\n# ^ This is for Debian-like systems. TODO: Add more platforms\n\nsudo pacman -Sy libsecp256k1\n# ^ This is for ArchLinux systems\n\nsudo dnf install openssl-devel libffi-dev autoconf automake libtool\n# ^ This is for Fedora.\n```\n\n----------------------------------------\n\nTITLE: Running the Private Key Script in UNIX Shell\nDESCRIPTION: This shell script generates a new private key using OpenSSL, sets it as an environment variable, and then runs the Python script that uses this private key for account management.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.eth.account.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Generate a new 256-bit random integer using openssl UNIX command that acts as a private key.\n# You can also do:\n# python -c \"from web3 import Web3; w3 = Web3(); acc = w3.eth.account.create(); print(f'private key={w3.to_hex(acc.key)}, account={acc.address}'\"\n# Store this in a safe place, like in your password manager.\nexport PRIVATE_KEY=0x`openssl rand -hex 32`\n\n# Run our script\npython account_test_script.py\n```\n\n----------------------------------------\n\nTITLE: Integer Conversion Examples\nDESCRIPTION: Shows conversion of various inputs to their integer equivalents using to_int method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> Web3.to_int(0)\n0\n>>> Web3.to_int(0x000F)\n15\n>>> Web3.to_int(b'\\x00\\x0F')\n15\n>>> Web3.to_int(False)\n0\n>>> Web3.to_int(True)\n1\n>>> Web3.to_int(hexstr='0x000F')\n15\n>>> Web3.to_int(hexstr='000F')\n15\n```\n\n----------------------------------------\n\nTITLE: Querying Genesis Data\nDESCRIPTION: Retrieves the genesis information including genesis time, validators root and fork version.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_genesis()\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for web3.py\nDESCRIPTION: Commands to install the development dependencies for web3.py using pip and set up pre-commit hooks.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -e \".[dev]\"\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Disabling Retries for HTTP Provider in Python\nDESCRIPTION: This code snippet shows how to disable retries on exceptions for an HTTP provider instance in Web3.py by setting the retry_configuration parameter to None.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3, HTTPProvider\n\nw3 = Web3(HTTPProvider(endpoint_uri=\"...\", retry_configuration=None))\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Geth Version with py-geth\nDESCRIPTION: Command to install a specific version of Geth using py-geth tool for testing purposes\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ python -m geth.install v1.15.5\n```\n\n----------------------------------------\n\nTITLE: Example EIP-1559 Transaction Code Structure\nDESCRIPTION: Example structure of an EIP-1559 (Type 2) transaction showing maxFeePerGas and maxPriorityFeePerGas parameters.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"maxFeePerGas\": \"0xsomevalue\",\n  \"maxPriorityFeePerGas\": \"0xsomevalue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Function Lookup - Python\nDESCRIPTION: API example for looking up contract functions by name.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfn = contract.functions['function_name_here']\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Return Type Changes in Web3.py v4\nDESCRIPTION: Contract ABI string types now return Python str objects decoded with UTF-8, while bytes types return Python bytes objects.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Contract return types\nstring_value = contract.functions.getStringValue().call()  # returns str\nbytes_value = contract.functions.getBytesValue().call()  # returns bytes\n```\n\n----------------------------------------\n\nTITLE: Web3.py Tracing Methods Declaration\nDESCRIPTION: Declaration of available tracing methods in the web3.tracing namespace for interacting with Ethereum trace endpoints.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.tracing.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nweb3.tracing.trace_replay_transaction\nweb3.tracing.trace_replay_block_transactions\nweb3.tracing.trace_filter\nweb3.tracing.trace_block\nweb3.tracing.trace_transaction\nweb3.tracing.trace_call\nweb3.tracing.trace_raw_transaction\n```\n\n----------------------------------------\n\nTITLE: Installing web3.py with dev dependencies (ZSH workaround)\nDESCRIPTION: This command demonstrates the correct way to install web3.py with dev dependencies on macOS Catalina and above, using quotes to avoid ZSH globbing issues.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-osx.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .'[dev]'\n```\n\n----------------------------------------\n\nTITLE: Clearing All Middleware in Web3.py Instance\nDESCRIPTION: Shows how to remove all middleware, including default ones, from a Web3.py instance using the clear() method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/middleware.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> w3 = Web3(...)\n>>> w3.middleware_onion.clear()\n>>> assert len(w3.middleware_onion) == 0\n```\n\n----------------------------------------\n\nTITLE: Web3.py Installation Commands\nDESCRIPTION: Shell commands for installing dependencies, setting up virtual environment, and installing web3.py with development dependencies.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-freebsd.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo pkg install python3 py36-virtualenv git leveldb libxml2 libxslt pkgconf gmake secp256k1\n\n# hack around https://github.com/ethereum/ethash/pull/107#issuecomment-445072692\nsudo touch /usr/local/include/alloca.h\n\nmkdir -p /tmp/venv_python\nvirtualenv-3.6 /tmp/venv_python/python3\nsource /tmp/venv_python/python3/bin/activate.csh\n\npip install coincurve\n\ncd /tmp\ngit clone https://github.com/ethereum/web3.py.git\ncd web3.py\n\n# assuming you're using tcsh\npip install -e .\\[dev\\]\n```\n\n----------------------------------------\n\nTITLE: Getting Block Headers\nDESCRIPTION: Returns headers for all blocks.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_block_headers()\n```\n\n----------------------------------------\n\nTITLE: Compiling Test Contracts for web3.py\nDESCRIPTION: Commands to compile all test contracts or a specific contract for web3.py using the compile_contracts.py script.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../web3.py/web3/_utils/contract_sources\n$ python compile_contracts.py -v 0.8.17\n\n$ python compile_contracts.py -v 0.8.17 -f OffchainLookup.sol\n```\n\n----------------------------------------\n\nTITLE: Installing XCode Command Line Tools on macOS\nDESCRIPTION: This command installs the XCode command line tools, which are required for development on macOS.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-osx.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Getting Hash Root\nDESCRIPTION: Retrieves the hash root for a given state ID (defaults to 'head').\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.beacon.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbeacon.get_hash_root()\n```\n\n----------------------------------------\n\nTITLE: Package Testing Commands for Release\nDESCRIPTION: Series of commands for testing package before release, including checkout, build and validation\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout main && git pull\n$ make package-test\n$ make docs\n$ make validate-newsfragments\n```\n\n----------------------------------------\n\nTITLE: Cloning the web3.py Repository with Submodules\nDESCRIPTION: Command to clone the web3.py repository including submodules, which are required for development.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recursive https://github.com/<your-github-username>/web3.py.git\n$ cd web3.py\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure for Web3.py\nDESCRIPTION: ReStructuredText table of contents configuration that organizes the Web3.py documentation into logical sections including intro, guides, API reference, and community resources. Uses toctree directives to structure the documentation hierarchy.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/toc.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Intro\n\n    quickstart\n    overview\n    release_notes\n\n.. toctree::\n    :maxdepth: 1\n    :caption: Guides\n\n    providers\n    web3.eth.account\n    transactions\n    web3.contract\n    filters\n    subscriptions\n    middleware\n    internals\n    ens_overview\n    troubleshooting\n    migration\n\n.. toctree::\n    :maxdepth: 1\n    :caption: API\n\n    web3.main\n    web3.eth\n    web3.beacon\n    web3.net\n    web3.geth\n    web3.tracing\n    web3.utils\n    gas_price\n    ens\n    constants\n\n.. toctree::\n    :maxdepth: 1\n    :caption: Community\n\n    resources\n    contributing\n    code_of_conduct\n```\n\n----------------------------------------\n\nTITLE: Naming Convention for Web3.py Newsfragments\nDESCRIPTION: Specifies the file naming pattern for newsfragments. Each file should be named '<ISSUE>.<TYPE>.rst', where <ISSUE> is an issue number and <TYPE> is a predefined category of change.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/newsfragments/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<ISSUE>.<TYPE>.rst\n```\n\n----------------------------------------\n\nTITLE: Importing Web3 with Infura Auto Provider (Python)\nDESCRIPTION: Demonstrates importing a Web3 instance configured for Infura's Ropsten testnet provider\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom web3.auto.infura.ropsten import w3\n```\n\n----------------------------------------\n\nTITLE: Illustrating Web3.py Request Lifecycle\nDESCRIPTION: This diagram shows the flow of a Web3.py RPC call through the Manager, Middleware, and Provider layers.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/internals.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n               ***********    ************\n               | Request |    | Response |\n               ***********    ************\n                   |                ^\n                   v                |\n             +-----------------------------+\n             |           Manager           |\n             +-----------------------------+\n                   |                ^\n                   v                |\n             +-----------------------------+\n             |         Middleware          |\n             +-----------------------------+\n                   |                ^\n                   v                |\n             +-----------------------------+\n             |          Provider           |\n             +-----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout for Beacon API in Python\nDESCRIPTION: Example of passing a float value for request_timeout when making requests to the Beacon API.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nbeacon.some_method(request_timeout=2.5)\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting for web3.py\nDESCRIPTION: Commands to run the full test suite and linting checks for web3.py.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n\n$ make lint\n```\n\n----------------------------------------\n\nTITLE: Web3.py Dictionary Check Methods\nDESCRIPTION: Reference to three utility methods in web3.py library used for checking dictionary values: all_in_dict (checks if all items exist), any_in_dict (checks if at least one item exists), and none_in_dict (checks if no items exist).\nSOURCE: https://github.com/ethereum/web3.py/blob/main/newsfragments/3667.performance.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nweb3._utils.utility_methods.all_in_dict\nweb3._utils.utility_methods.any_in_dict\nweb3._utils.utility_methods.none_in_dict\n```\n\n----------------------------------------\n\nTITLE: Categories for Web3.py Newsfragments\nDESCRIPTION: Lists the valid categories (types) for newsfragments. These categories help classify the nature of changes in the release notes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/newsfragments/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- `breaking`\n- `bugfix`\n- `deprecation`\n- `docs`\n- `feature`\n- `internal`\n- `misc`\n- `performance`\n- `removal`\n```\n\n----------------------------------------\n\nTITLE: String Formatting Code Pattern\nDESCRIPTION: String interpolation pattern referenced in bugfix for contract function call decoding exceptions.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nmessage = \"Contract function call {function_name} {error}\"\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for web3.py Development\nDESCRIPTION: Command to start the Docker development environment for web3.py using docker-compose.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies for web3.py on macOS\nDESCRIPTION: This command uses Homebrew to install necessary package dependencies for web3.py development, including openssl, libffi, autoconf, automake, and libtool.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-osx.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install openssl libffi autoconf automake libtool\n```\n\n----------------------------------------\n\nTITLE: Installing Contract Compilation Dependencies for web3.py\nDESCRIPTION: Command to install dependencies required for compiling test contracts in web3.py.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install py-solc-x black\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Docker for web3.py\nDESCRIPTION: Commands to run different test suites for web3.py within the Docker environment.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose exec sandbox bash -c 'pytest tests/core'\n\n$ docker compose exec sandbox bash -c 'pytest tests/integration -k \"not goethereum\"'\n```\n\n----------------------------------------\n\nTITLE: Previewing Web3.py Release Notes with Towncrier\nDESCRIPTION: Demonstrates the command to generate a draft of the release notes using the towncrier tool. This allows contributors to preview how their newsfragments will appear in the final release notes.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/newsfragments/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntowncrier build --draft\n```\n\n----------------------------------------\n\nTITLE: Installing leveldb on macOS\nDESCRIPTION: This command installs leveldb using Homebrew, which is a required dependency for web3.py.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-osx.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install leveldb\n```\n\n----------------------------------------\n\nTITLE: Python Distribution Configuration\nDESCRIPTION: Configuration for Python package building with include and library paths in ~/.pydistutils.cfg.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-freebsd.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[build_ext]\ninclude_dirs=/usr/local/include\nlibrary_dirs=/usr/local/lib\n```\n\n----------------------------------------\n\nTITLE: RST Version Header Example\nDESCRIPTION: Example of version header formatting used in the changelog using reStructuredText syntax\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\nweb3.py v7.10.0 (2025-03-27)\n---------------------------\n```\n\n----------------------------------------\n\nTITLE: Generating Geth Fixtures for Testing\nDESCRIPTION: Command to generate new Geth fixtures using a specific Geth binary for integration testing\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ GETH_BINARY=~/.py-geth/geth-v1.15.5/bin/geth python ./tests/integration/generate_fixtures/go_ethereum.py\n```\n\n----------------------------------------\n\nTITLE: Installing web3.py with dev dependencies (ZSH error example)\nDESCRIPTION: This command shows an example of the error that may occur when trying to install web3.py with dev dependencies using ZSH on macOS Catalina and above.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-osx.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .[dev]\nzsh: no matches found: .[dev]\n```\n\n----------------------------------------\n\nTITLE: Release Process Commands\nDESCRIPTION: Commands for building release notes and publishing a new version to GitHub and PyPI\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ make notes bump=$$VERSION_PART_TO_BUMP$$\n$ make release bump=$$VERSION_PART_TO_BUMP$$\n```\n\n----------------------------------------\n\nTITLE: Fetching Geth Node Information\nDESCRIPTION: Demonstrates the use of admin.node_info() to retrieve detailed information about the currently running Geth node.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.geth.admin.node_info()\n{\n    'enode': 'enode://e54eebad24dce1f6d246bea455ffa756d97801582420b9ed681a2ea84bf376d0bd87ae8dd6dc06cdb862a2ca89ecabe1be1050be35b4e70d62bc1a092cb7e2d3@[::]:30303',\n    'id': 'e54eebad24dce1f6d246bea455ffa756d97801582420b9ed681a2ea84bf376d0bd87ae8dd6dc06cdb862a2ca89ecabe1be1050be35b4e70d62bc1a092cb7e2d3',\n    'ip': '::',\n    'listenAddr': '[::]:30303',\n    'name': 'Geth/v1.4.11-stable-fed692f6/darwin/go1.7',\n    'ports': {'discovery': 30303, 'listener': 30303},\n    'protocols': {\n        'eth': {\n            'difficulty': 57631175724744612603,\n            'genesis': '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3',\n            'head': '0xaaef6b9dd0d34088915f4c62b6c166379da2ad250a88f76955508f7cc81fb796',\n            'network': 1,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies for Web3.py\nDESCRIPTION: Command to install test dependencies required for generating fixtures and running tests\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ python -m pip install -e \".[test]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies for web3.py\nDESCRIPTION: Command to install the test dependencies for web3.py using pip.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -e \".[test]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for web3.py Development\nDESCRIPTION: Command to configure Git to ignore specific commits in blame history for web3.py development.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/contributing.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Geth Installation Commands\nDESCRIPTION: Commands for installing and building Geth from source on FreeBSD for integration testing.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-freebsd.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npkg install go\ncd /tmp\ngit clone https://github.com/ethereum/go-ethereum\ncd go-ethereum\nmake geth\ncp build/bin/geth /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeBSD Login Configuration\nDESCRIPTION: UTF-8 charset configuration in ~/.login_conf to ensure proper Python 3 module installation.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/README-freebsd.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nme:\\\n\t:charset=UTF-8:\\\n\t:lang=en_US.UTF-8:\n```\n\n----------------------------------------\n\nTITLE: Required Pytest Fixtures for Web3.py Integration Tests\nDESCRIPTION: List of mandatory session-scoped pytest fixtures needed for Web3.py integration testing. These fixtures include web3 instance configuration, block data, contract deployments, account information, and transaction hashes. Each fixture serves a specific testing purpose and must be properly configured for integration tests to function.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/tests/integration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nweb3\nempty_block\nblock_with_txn\nmath_contract\nkeyfile_account_address\nkeyfile_account_pkey\nmath_contract_deploy_txn_hash\nmined_txn_hash\nemitter_contract\nblock_with_txn_with_log\ntxn_hash_with_log\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Pool Status in Python\nDESCRIPTION: Simple example showing the transaction pool status format with pending and queued transaction counts\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.geth.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{\n    pending: 10,\n    queued: 7,\n}\n```\n\n----------------------------------------\n\nTITLE: Personal API Method Updates in Web3.py v4\nDESCRIPTION: The signAndSendTransaction method has been deprecated in favor of sendTransaction in the personal namespace.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/migration.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Use this instead of signAndSendTransaction\nw3.personal.sendTransaction({...}, 'password')\n```\n\n----------------------------------------\n\nTITLE: Estimating Contract Gas with Block Identifier in Python\nDESCRIPTION: Accept a block identifier in the Contract.estimateGas method.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nContract.estimateGas(transaction, block_identifier=block_id)\n```\n\n----------------------------------------\n\nTITLE: Checking Web3 Version\nDESCRIPTION: Shows how to check the current Web3 version using the api attribute.\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/web3.main.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> web3.api\n\"4.7.0\"\n```\n\n----------------------------------------\n\nTITLE: RST Section Header Example\nDESCRIPTION: Example of section header formatting using reStructuredText syntax\nSOURCE: https://github.com/ethereum/web3.py/blob/main/docs/release_notes.rst#2025-04-23_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\nMiscellaneous Changes\n~~~~~~~~~~~~~~~~~~~~~\n```"
  }
]