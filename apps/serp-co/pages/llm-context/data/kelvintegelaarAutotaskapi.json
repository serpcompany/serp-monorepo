[
  {
    "owner": "kelvintegelaar",
    "repo": "autotaskapi",
    "content": "TITLE: Authenticating with Autotask REST API - PowerShell\nDESCRIPTION: Authenticates against the Autotask REST API by fetching user credentials via 'Get-Credential' and passing them with an API integration code to 'Add-AutotaskAPIAuth'. Requires credentials and the API code. Prepares the environment for subsequent API operations by setting required headers.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Creds = Get-Credential\n\nAdd-AutotaskAPIAuth -ApiIntegrationCode 'ABCDEFGH00100244MMEEE333' -credentials $Creds\n```\n\n----------------------------------------\n\nTITLE: Installing AutotaskAPI Module with PowerShellGet - PowerShell\nDESCRIPTION: Installs the AutotaskAPI module from the PowerShell Gallery. Requires PowerShellGet and internet access. The 'Install-Module' command downloads and installs the module globally or for the user, enabling cmdlet usage for Autotask REST API resource management.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module AutotaskAPI\n```\n\n----------------------------------------\n\nTITLE: Manually Setting the API Base URI - PowerShell\nDESCRIPTION: Sets a custom Base URI for the Autotask REST API with 'Add-AutotaskBaseURI'. Used if the zone auto-detection fails during authentication. Required parameter is the endpoint base URI, which must match the user's geographical Autotask zone.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-AutotaskBaseURI -BaseURI https://webservices1.autotask.net/atservicesrest\n```\n\n----------------------------------------\n\nTITLE: Building a New Company Resource Body - PowerShell\nDESCRIPTION: Creates a new hashtable/object representing a company using 'New-AutotaskBody', auto-filling all required and optional fields defined by the API model. The command also supports tab completion for resource names.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Body = New-AutotaskBody -Resource Companies\n```\n\n----------------------------------------\n\nTITLE: Creating a New Company in Autotask - PowerShell\nDESCRIPTION: Submits a new company resource to Autotask using the 'New-AutotaskAPIResource' cmdlet after populating the $body object. Requires prior authentication, a well-formed body, and appropriate API permissions.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-AutotaskAPIResource -Resource Companies -Body $body\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Company Record - PowerShell\nDESCRIPTION: Updates fields on a company entity by passing a $body object to 'Set-AutotaskAPIResource' with method PATCH. Properties not specified in $body remain unchanged. Must ensure $body only contains fields to be updated to prevent unintended overwrites.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AutotaskAPIResource -Body $body\n```\n\n----------------------------------------\n\nTITLE: Filtering Companies by Active Status with SearchQuery - PowerShell\nDESCRIPTION: Fetches all active companies using 'Get-AutotaskAPIResource' with a JSON filter via the '-SearchQuery' parameter. This approach allows for precise, arbitrary filter expressions following Autotask's supported filter syntax. Requires a valid JSON string and targeting the correct resource.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource Companies -SearchQuery '{\"filter\":[{\"op\":\"eq\",\"field\":\"isactive\",\"value\":\"true\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Filtering Companies by Active Status with SimpleSearch - PowerShell\nDESCRIPTION: Gets all companies marked as active using the simpler DSL-like '-SimpleSearch' option, which abstracts filter JSON behind a query string. Expects a single, straightforward filter condition. Suitable for basic queries only.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource Companies -SimpleSearch \"isactive eq $true\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Companies by Name Prefix - PowerShell\nDESCRIPTION: Retrieves companies whose names start with the letter 'A' using '-SimpleSearch' with the 'beginswith' operator. Intended for filtered listing of companies, returns matching company objects. Only supports single-condition queries.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource Companies -SimpleSearch \"companyname beginswith A\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Alerts for a Company - PowerShell\nDESCRIPTION: Fetches all child alerts associated with a specified company ID by targeting the 'CompanyAlertsChild' resource. The '-verbose' flag can provide extended output for debug or exploration. Requires company ID and proper module authentication.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource CompanyAlertsChild -ID 1234 -verbose\n```\n\n----------------------------------------\n\nTITLE: Enumerating Picklist Options for Tickets - PowerShell\nDESCRIPTION: Lists all available status picklist options for the Tickets resource by invoking a NoContent body and selecting the 'status' property. Returns valid status values to inform users when composing or filtering ticket data.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n(New-AutotaskBody -Resource Tickets -NoContent).status\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Ticket by ID - PowerShell\nDESCRIPTION: Fetches a ticket resource by its ID using simple search, storing it into a variable for subsequent updates or inspection. Useful as the first step in workflow scripts that manipulate tickets.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Ticket = Get-AutotaskAPIResource -Resource tickets -SimpleSearch \"id eq 12345\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Company by ID via Autotask REST API - PowerShell\nDESCRIPTION: Retrieves a company entity from Autotask by specifying its resource type and unique ID in 'Get-AutotaskAPIResource'. Returns detailed company data as a PowerShell object. Requires successful authentication and a valid company ID.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource Companies -ID 12345\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Resource Body - PowerShell\nDESCRIPTION: Generates an empty body for a given resource (e.g., company), resulting in a schema-compliant but unpopulated object. Useful when only selectively setting fields or for advanced customizations to the request payload.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Body = New-AutotaskBody -Resource Companies -NoContent\n```\n\n----------------------------------------\n\nTITLE: Bulk-Closing Tickets with a Given Subject - PowerShell\nDESCRIPTION: Retrieves all tickets matching a specific title, modifies their status, and then applies the update in bulk using pipeline semantics. Demonstrates fetching, updating in-memory objects, and committing changes via the API.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n$TicketList = Get-AutotaskAPIResource -Resource Tickets -SimpleSearch \"title eq Nope!\"\n$TicketList | ForEach-Object { $_.status = \"12\" }\n$TicketList | Set-AutotaskAPIResource -Resource Tickets\n```\n\n----------------------------------------\n\nTITLE: One-Liner for Bulk Updating Company Web Addresses - PowerShell\nDESCRIPTION: Fetches all active companies, updates each with a new web address, and applies the changes in a single piped command. Illustrates the power of PowerShell pipelines and the module's support for object chaining.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource Companies -SimpleSearch 'Isactive eq true' | ForEach-Object {$_.Webaddress = \"www.google.com\"; $_} | Set-AutotaskAPIResource -Resource Companies\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Child Alert in a Company - PowerShell\nDESCRIPTION: Obtains a single child alert ('ChildID') for a given parent company by specifying both the parent resource ID and the child's ID. Useful when inspecting or processing a specific alert linked to a company.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource CompanyAlertsChild -ID 29683578 -ChildID 7\n```\n\n----------------------------------------\n\nTITLE: Deleting a Company by ID - PowerShell\nDESCRIPTION: Removes a company from Autotask by ID using 'Remove-AutotaskAPIResource' with '-Confirm $false' to bypass the confirmation prompt. Irreversible; there is no recycle bin or restore. Meant for deliberate, filtered removal only.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-AutotaskAPIResource -Resource Companies -ID 1234 -Confirm $false\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Companies Using the Pipeline - PowerShell\nDESCRIPTION: Selects active companies with '-SimpleSearch' and pipes them to 'Remove-AutotaskAPIResource' for deletion. Confirmation is suppressed and operations are performed in batch. Danger of accidental data loss if filters are broad.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AutotaskAPIResource -Resource Companies -SimpleSearch 'Isactive eq true' | Remove-AutotaskAPIResource -Confirm $false\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft Teams for Open Projects with AutotaskAPI - PowerShell\nDESCRIPTION: Combines AutotaskAPI and MicrosoftTeams modules to dynamically create Microsoft Teams for all open projects. Integrates data by fetching projects, creating Teams, and assigning users using both modules. Requires both modules installed, Teams admin rights, and Autotask access.\nSOURCE: https://github.com/kelvintegelaar/autotaskapi/blob/master/README.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module MicrosoftTeams\nConnect-MicrosoftTeams\nAdd-AutotaskAPIAuth\n$Projects = Get-AutotaskAPIResource -Resource Projects -SimpleSearch 'status ne completed'\nforeach ($Project in $Projects) {\n    $NewTeam = New-Team -MailNickname \"$($project.projectnumber)\" -DisplayName \"$($project.projectnumber) - $($project.name)\" -Visibility \"private\"\n    $TeamLeadEmail = (Get-AutotaskAPIResource -Resource resources -ID $($project.projectLeadResourceID)).email\n    Add-TeamUser -GroupId $NewTeam.GroupId -User $TeamLeadEmail\n}\n```"
  }
]