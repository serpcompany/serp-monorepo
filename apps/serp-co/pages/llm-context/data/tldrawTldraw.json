[
  {
    "owner": "tldraw",
    "repo": "tldraw",
    "content": "TITLE: Implementing PDF Editor Component with tldraw in TypeScript React\nDESCRIPTION: This code snippet defines a React component for a basic PDF editor using tldraw. It includes camera options, constraints, and event handlers for zooming and panning. The component renders a tldraw Editor with custom tools and UI components.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/pdf-editor/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport {\n\tTldrawEditor,\n\tTldrawUiComponents,\n\tTldrawUiContextProvider,\n\tToolbar,\n\tUiComponentsProvider,\n\tuseActions,\n\tuseEditor,\n\tuseKeyboardShortcuts,\n\tuseTool,\n\tuseTools,\n\tZoomMenu,\n} from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function PdfEditorExample() {\n\tconst [pdfUrl, setPdfUrl] = React.useState(\n\t\t'https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf'\n\t)\n\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0, display: 'flex', flexDirection: 'column' }}>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={pdfUrl}\n\t\t\t\t\tonChange={(e) => setPdfUrl(e.target.value)}\n\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div style={{ flexGrow: 1, width: '100%', height: '100%', overflow: 'hidden' }}>\n\t\t\t\t<TldrawEditor\n\t\t\t\t\tsharedDocument={false}\n\t\t\t\t\tinitialState={{\n\t\t\t\t\t\tshapes: {\n\t\t\t\t\t\t\tpdf: {\n\t\t\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\t\t\turl: pdfUrl,\n\t\t\t\t\t\t\t\tw: 600,\n\t\t\t\t\t\t\t\th: 800,\n\t\t\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tcameraOptions={{\n\t\t\t\t\t\tviewportGap: 75,\n\t\t\t\t\t\tsnap: {\n\t\t\t\t\t\t\tcamera: 'view',\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tconstraints={{\n\t\t\t\t\t\tminScale: 0.1,\n\t\t\t\t\t\tmaxScale: 8,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<TldrawUiContextProvider>\n\t\t\t\t\t\t<UiComponentsProvider components={TldrawUiComponents}>\n\t\t\t\t\t\t\t<PdfEditor />\n\t\t\t\t\t\t</UiComponentsProvider>\n\t\t\t\t\t</TldrawUiContextProvider>\n\t\t\t\t</TldrawEditor>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nfunction PdfEditor() {\n\tconst editor = useEditor()\n\tconst actions = useActions()\n\tconst tools = useTools()\n\tconst { useZoom } = useTool('zoom')\n\tuseKeyboardShortcuts()\n\n\tconst onPan = React.useCallback(\n\t\t(dx: number, dy: number) => {\n\t\t\teditor.pan(dx, dy)\n\t\t},\n\t\t[editor]\n\t)\n\n\tconst onZoom = React.useCallback(\n\t\t(delta: number, point: { x: number; y: number }) => {\n\t\t\teditor.zoomToCursor(delta, point)\n\t\t},\n\t\t[editor]\n\t)\n\n\tuseZoom(useZoom, useZoom, useZoom)\n\n\treturn (\n\t\t<>\n\t\t\t<Toolbar\n\t\t\t\titems={[\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\ticon: 'tool-pointer',\n\t\t\t\t\t\tlabel: 'Select',\n\t\t\t\t\t\tonClick: () => editor.setSelectedTool('select'),\n\t\t\t\t\t\tSelected: () => editor.getCurrentToolId() === 'select',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\ticon: 'tool-hand',\n\t\t\t\t\t\tlabel: 'Hand',\n\t\t\t\t\t\tonClick: () => editor.setSelectedTool('hand'),\n\t\t\t\t\t\tSelected: () => editor.getCurrentToolId() === 'hand',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\ticon: 'tool-draw',\n\t\t\t\t\t\tlabel: 'Draw',\n\t\t\t\t\t\tonClick: () => editor.setSelectedTool('draw'),\n\t\t\t\t\t\tSelected: () => editor.getCurrentToolId() === 'draw',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\ticon: 'tool-eraser',\n\t\t\t\t\t\tlabel: 'Erase',\n\t\t\t\t\t\tonClick: () => editor.setSelectedTool('eraser'),\n\t\t\t\t\t\tSelected: () => editor.getCurrentToolId() === 'eraser',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<ZoomMenu\n\t\t\t\tonZoomIn={actions.zoomIn}\n\t\t\t\tonZoomOut={actions.zoomOut}\n\t\t\t\tonZoomTo={actions.zoomTo}\n\t\t\t\tonResetZoom={actions.resetZoom}\n\t\t\t/>\n\t\t</>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Shortcuts in tldraw with TypeScript\nDESCRIPTION: This code snippet demonstrates how to override default keyboard shortcuts and add new ones in tldraw. It includes custom shortcuts for toggling grid visibility, selecting the Draw tool, and copying as PNG. The example uses the Tldraw component with a customized store.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/keyboard-shortcuts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react'\nimport { Tldraw, createTldrawStore, defaultShapeUtils } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function KeyboardShortcutsExample() {\n\tconst store = createTldrawStore({\n\t\tshapeUtils: defaultShapeUtils,\n\t})\n\n\tconst [isGridMode, setIsGridMode] = React.useState(false)\n\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tstore={store}\n\t\t\t\tshapeUtils={defaultShapeUtils}\n\t\t\t\toverrides={{\n\t\t\t\t\tstore: {\n\t\t\t\t\t\t// Override the grid mode\n\t\t\t\t\t\tget gridMode() {\n\t\t\t\t\t\t\treturn isGridMode\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tactions: {\n\t\t\t\t\t\t// Add a new action\n\t\t\t\t\t\t'toggle-grid': {\n\t\t\t\t\t\t\tonSelect: () => {\n\t\t\t\t\t\t\t\tsetIsGridMode(!isGridMode)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttools: {\n\t\t\t\t\t\t'copy-as-png': {\n\t\t\t\t\t\t\tonSelect: () => {\n\t\t\t\t\t\t\t\tstore.copyAs('png')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tkeyboardShortcutsOverrides: {\n\t\t\t\t\t\t'toggle-grid': {\n\t\t\t\t\t\t\tkeys: ['x'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdraw: {\n\t\t\t\t\t\t\tkeys: ['p'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'copy-as-png': {\n\t\t\t\t\t\t\tkeys: ['ctrl+1', 'cmd+1'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frame Shape in tldraw with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use ShapeUtil.configure to customize the built-in 'frame' shape in tldraw. It adds support for colorful borders and labels by extending the default options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/configure-shape-util/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tldraw, TLComponents, TLShape, useEditor, Editor } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nconst CustomFrame = TLComponents.FrameShapeUtil.configure({\n\t// Add color to the shape's props\n\tprops: (props) => ({\n\t\t...props,\n\t\tcolor: { type: 'string', default: 'black' },\n\t}),\n\t// Use the color in the shape's component\n\tcomponent(shape) {\n\t\tconst bounds = this.bounds(shape)\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<rect\n\t\t\t\t\twidth={bounds.width}\n\t\t\t\t\theight={bounds.height}\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke={shape.props.color}\n\t\t\t\t\tstroke-width={4}\n\t\t\t\t/>\n\t\t\t\t<text x={4} y={20} fill={shape.props.color}>\n\t\t\t\t\t{shape.props.name}\n\t\t\t\t</text>\n\t\t\t</>\n\t\t)\n\t},\n})\n\nfunction ShapesMenu() {\n\tconst editor = useEditor()\n\n\tfunction insertColoredFrame(color: string) {\n\t\tconst { width, height } = editor.viewportScreenBounds\n\t\teditor.createShape<TLShape>({\n\t\t\ttype: 'frame',\n\t\t\tx: width / 2,\n\t\t\ty: height / 2,\n\t\t\tprops: { w: 200, h: 200, color },\n\t\t})\n\t}\n\n\treturn (\n\t\t<div style={{ position: 'absolute', top: 64, left: 10 }}>\n\t\t\t<button onClick={() => insertColoredFrame('red')}>Red Frame</button>\n\t\t\t<button onClick={() => insertColoredFrame('blue')}>Blue Frame</button>\n\t\t\t<button onClick={() => insertColoredFrame('green')}>Green Frame</button>\n\t\t</div>\n\t)\n}\n\nexport default function ConfigureShapeUtilExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tshapeUtils={{\n\t\t\t\t\tframe: CustomFrame,\n\t\t\t\t}}\n\t\t\t\tcomponents={{\n\t\t\t\t\tTopPanel: ShapesMenu,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Geometry2d Class for TLDraw\nDESCRIPTION: An abstract class that provides the foundation for 2D geometric shapes in TLDraw. It includes methods for hit testing, distance calculations, transformations, and other geometry operations common to all shapes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class Geometry2d {\n    constructor(opts: Geometry2dOptions);\n    // (undocumented)\n    get area(): number;\n    // (undocumented)\n    get bounds(): Box;\n    // (undocumented)\n    get center(): Vec;\n    // (undocumented)\n    debugColor?: string;\n    // (undocumented)\n    distanceToLineSegment(A: Vec, B: Vec, filters?: Geometry2dFilters): number;\n    // (undocumented)\n    distanceToPoint(point: Vec, hitInside?: boolean, filters?: Geometry2dFilters): number;\n    // (undocumented)\n    getArea(): number;\n    // (undocumented)\n    getBounds(): Box;\n    // (undocumented)\n    getLength(): number;\n    // (undocumented)\n    abstract getSvgPathData(first: boolean): string;\n    // (undocumented)\n    abstract getVertices(filters: Geometry2dFilters): Vec[];\n    // (undocumented)\n    hitTestLineSegment(A: Vec, B: Vec, distance?: number, filters?: Geometry2dFilters): boolean;\n    // (undocumented)\n    hitTestPoint(point: Vec, margin?: number, hitInside?: boolean, _filters?: Geometry2dFilters): boolean;\n    // (undocumented)\n    ignore?: boolean;\n    // (undocumented)\n    intersectCircle(center: VecLike, radius: number, _filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    intersectLineSegment(A: VecLike, B: VecLike, _filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    intersectPolygon(polygon: VecLike[], _filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    intersectPolyline(polyline: VecLike[], _filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    isClosed: boolean;\n    // (undocumented)\n    isExcludedByFilter(filters?: Geometry2dFilters): boolean;\n    // (undocumented)\n    isFilled: boolean;\n    // (undocumented)\n    isInternal: boolean;\n    // (undocumented)\n    isLabel: boolean;\n    // (undocumented)\n    isPointInBounds(point: Vec, margin?: number): boolean;\n    // (undocumented)\n    get length(): number;\n    // (undocumented)\n    abstract nearestPoint(point: Vec, _filters?: Geometry2dFilters): Vec;\n    // @deprecated (undocumented)\n    nearestPointOnLineSegment(A: Vec, B: Vec): Vec;\n    // (undocumented)\n    toSimpleSvgPath(): string;\n    // (undocumented)\n    transform(transform: MatModel, opts?: TransformedGeometry2dOptions): Geometry2d;\n    // (undocumented)\n    get vertices(): Vec[];\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Controlling the tldraw Canvas with the Editor API\nDESCRIPTION: Example demonstrating how to use the Editor API to programmatically control the tldraw canvas. This code creates a text shape, selects it, and then zooms to the selection with animation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/quick-start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw, toRichText } from 'tldraw'\nimport 'tldraw/tldraw.css'\n\nexport default function App() {\n\tconst handleMount = (editor) => {\n\t\teditor.createShape({\n\t\t\ttype: 'text',\n\t\t\tx: 200,\n\t\t\ty: 200,\n\t\t\tprops: {\n\t\t\t\trichText: toRichText('Hello world!'),\n\t\t\t},\n\t\t})\n\n\t\teditor.selectAll()\n\n\t\teditor.zoomToSelection({\n\t\t\tanimation: { duration: 5000 },\n\t\t})\n\t}\n\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw onMount={handleMount} />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing tldraw Package in a React Project\nDESCRIPTION: Command to install the tldraw package from NPM, which is the first step in implementing tldraw in a React project.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/quick-start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tldraw\n```\n\n----------------------------------------\n\nTITLE: Defining ShapeUtil Abstract Class for Custom Shape Behavior in TypeScript\nDESCRIPTION: An abstract class that defines the behavior for a custom shape type in the editor. It includes methods for handling various shape operations like binding, cropping, resizing, and rendering, serving as a base for shape-specific utilities.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {\n    constructor(editor: Editor);\n    // @internal\n    backgroundComponent?(shape: Shape): any;\n    canBeLaidOut(_shape: Shape, _info: TLShapeUtilCanBeLaidOutOpts): boolean;\n    canBind(_opts: TLShapeUtilCanBindOpts): boolean;\n    canCrop(_shape: Shape): boolean;\n    canDropShapes(_shape: Shape, _shapes: TLShape[]): boolean;\n    canEdit(_shape: Shape): boolean;\n    canEditInReadOnly(_shape: Shape): boolean;\n    canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']): boolean;\n    canResize(_shape: Shape): boolean;\n    canScroll(_shape: Shape): boolean;\n    canSnap(_shape: Shape): boolean;\n    canTabTo(_shape: Shape): boolean;\n    abstract component(shape: Shape): any;\n    static configure<T extends TLShapeUtilConstructor<any, any>>(this: T, options: T extends new (...args: any[]) => {\n        options: infer Options;\n    } ? Partial<Options> : never): T;\n    // (undocumented)\n    editor: Editor;\n    // @internal (undocumented)\n    expandSelectionOutlinePx(shape: Shape): Box | number;\n    // (undocumented)\n    getAriaDescriptor(_shape: Shape): string | undefined;\n    getBoundsSnapGeometry(_shape: Shape): BoundsSnapGeometry;\n    getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[];\n    abstract getDefaultProps(): Shape['props'];\n    getFontFaces(shape: Shape): TLFontFace[];\n    abstract getGeometry(shape: Shape, opts?: TLGeometryOpts): Geometry2d;\n    getHandles?(shape: Shape): TLHandle[];\n    getHandleSnapGeometry(_shape: Shape): HandleSnapGeometry;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic tldraw Canvas in React\nDESCRIPTION: Basic implementation of the tldraw canvas in a React component. This code creates a full-screen canvas with the default shapes, tools, and user interface.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/quick-start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport 'tldraw/tldraw.css'\n\nexport default function App() {\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TldrawProps Interface in TypeScript\nDESCRIPTION: Type definition for TldrawProps that combines base props with editor store props. These props are used for the main Tldraw component to initialize and configure the drawing editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TldrawProps = TldrawBaseProps & TldrawEditorStoreProps;\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Core tldraw Components\nDESCRIPTION: Comprehensive type definitions for the tldraw application including shapes, assets, instances and state management. Includes interfaces for different shape types, instance management, presence tracking and data structures.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TLGroupShape = TLBaseShape<'group', TLGroupShapeProps>;\n\nexport interface TLGroupShapeProps {\n}\n\nexport interface TLHandle {\n    canSnap?: boolean;\n    id: string;\n    index: IndexKey;\n    type: TLHandleType;\n    x: number;\n    y: number;\n}\n\nexport type TLHandleType = SetValue<typeof TL_HANDLE_TYPES>;\n\nexport type TLHighlightShape = TLBaseShape<'highlight', TLHighlightShapeProps>;\n\nexport interface TLHighlightShapeProps {\n    color: TLDefaultColorStyle;\n    isComplete: boolean;\n    isPen: boolean;\n    scale: number;\n    segments: TLDrawShapeSegment[];\n    size: TLDefaultSizeStyle;\n}\n\nexport type TLImageAsset = TLBaseAsset<'image', {\n    fileSize?: number;\n    h: number;\n    isAnimated: boolean;\n    mimeType: null | string;\n    name: string;\n    src: null | string;\n    w: number;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Custom Shape in Tldraw with TypeScript and React\nDESCRIPTION: This code snippet demonstrates the implementation of an editable custom shape in Tldraw. It includes the shape's properties, rendering logic, and editing functionality. The shape displays an emoji that can be changed when in the editing state.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/editable-shape/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseBoxShapeUtil, TLBaseShape, Vec2d } from '@tldraw/tldraw'\n\ntype EditableShape = TLBaseShape<'editable', { emoji: string }>\n\nexport class EditableShapeUtil extends BaseBoxShapeUtil<EditableShape> {\n\tgetDefaultProps(): EditableShape['props'] {\n\t\treturn {\n\t\t\tw: 200,\n\t\t\th: 200,\n\t\t\temoji: '👋',\n\t\t}\n\t}\n\n\tcanEdit = () => true\n\n\tcomponent(shape: EditableShape) {\n\t\tconst bounds = this.bounds(shape)\n\t\tconst center = bounds.center\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\twidth: bounds.width,\n\t\t\t\t\theight: bounds.height,\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\tpointerEvents: 'all',\n\t\t\t\t\tfontSize: 64,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{shape.props.emoji}\n\t\t\t</div>\n\t\t)\n\t}\n\n\tindicator(shape: EditableShape) {\n\t\treturn (\n\t\t\t<rect\n\t\t\t\twidth={shape.props.w}\n\t\t\t\theight={shape.props.h}\n\t\t\t\tpointerEvents=\"none\"\n\t\t\t/>\n\t\t)\n\t}\n\n\textras(shape: EditableShape) {\n\t\tconst bounds = this.bounds(shape)\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: `calc(${bounds.maxY}px + 16px)`,\n\t\t\t\t\tleft: bounds.minX,\n\t\t\t\t\tfontFamily: 'sans-serif',\n\t\t\t\t\tfontSize: 12,\n\t\t\t\t\tcolor: 'var(--color-text)',\n\t\t\t\t\tpointerEvents: 'none',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tDouble click to edit\n\t\t\t</div>\n\t\t)\n\t}\n\n\tasync onEditEnd(shape: EditableShape) {\n\t\tconst text = prompt('Enter a new emoji')\n\t\treturn {\n\t\t\t...shape,\n\t\t\tprops: {\n\t\t\t\t...shape.props,\n\t\t\t\temoji: text ?? shape.props.emoji,\n\t\t\t},\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Store Loading and Snapshot Functions\nDESCRIPTION: Functions for loading state snapshots into TLStore instances, allowing application state to be restored from saved snapshots or session states.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function loadSessionStateSnapshotIntoStore(store: TLStore, snapshot: TLSessionStateSnapshot, opts?: TLLoadSessionStateSnapshotOptions): void;\n\nexport function loadSnapshot(store: TLStore, _snapshot: Partial<TLEditorSnapshot> | TLStoreSnapshot, opts?: TLLoadSnapshotOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Search in tldraw Editor with TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement text search functionality in the tldraw editor using TypeScript. It utilizes the editor's API to search for text within shapes, highlight matching results, and provide navigation controls in the HelperButtons UI component.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/text-search/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./TextSearchExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Sync in React with tldraw\nDESCRIPTION: This code demonstrates how to implement the client side of tldraw sync in a React component. It shows how to create a sync client using the useSync hook, configure asset handling, and set up URL handling for bookmark shapes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/sync.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw, TLAssetStore, Editor } from 'tldraw'\nimport { useSync } from '@tldraw/sync'\nimport { uploadFileAndReturnUrl } from './assets'\nimport { convertUrlToBookmarkAsset } from './unfurl'\n\nfunction MyEditorComponent({myRoomId}) {\n\t// This hook creates a sync client that manages the websocket connection to the server\n\t// and coordinates updates to the document state.\n\tconst store = useSync({\n\t\t// This is how you tell the sync client which server and room to connect to.\n\t\turi: `wss://my-custom-backend.com/connect/${myRoomId}`,\n\t\t// This is how you tell the sync client how to store and retrieve blobs.\n\t\tassets: myAssetStore,\n\t})\n\t// When the tldraw Editor mounts, you can register an asset handler for the bookmark URLs.\n\treturn <Tldraw store={store} onMount={registerUrlHandler} />\n}\n\nconst myAssetStore: TLAssetStore {\n\tupload(file, asset) {\n\t\treturn uploadFileAndReturnUrl(file)\n\t},\n\tresolve(asset) {\n\t\treturn asset.props.src\n\t},\n}\n\nfunction registerUrlHandler(editor: Editor) {\n\teditor.registerExternalAssetHandler('url', async ({url}) => {\n\t\treturn await convertUrlToBookmarkAsset(url)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TLDraw Editor with onMount\nDESCRIPTION: Example showing how to access the editor instance through the Tldraw component's onMount callback.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n\treturn (\n\t\t<Tldraw\n\t\t\tonMount={(editor) => {\n\t\t\t\t// your editor code here\n\t\t\t}}\n\t\t/>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Store Class Definition in TypeScript\nDESCRIPTION: Core Store class implementation with methods for CRUD operations, history tracking, and query capabilities. Includes type parameters for record types and store properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {\n    constructor(config: {\n        schema: StoreSchema<R, Props>;\n        initialData?: SerializedStore<R>;\n        id?: string;\n        props: Props;\n    });\n    allRecords(): R[];\n    applyDiff(diff: RecordsDiff<R>, { runCallbacks, ignoreEphemeralKeys, }?: {\n        ignoreEphemeralKeys?: boolean;\n        runCallbacks?: boolean;\n    }): void;\n    get<K extends IdOf<R>>(id: K): RecordFromId<K> | undefined;\n    put(records: R[], phaseOverride?: 'initialize'): void;\n    remove(ids: IdOf<R>[]): void;\n    update<K extends IdOf<R>>(id: K, updater: (record: RecordFromId<K>) => RecordFromId<K>): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Local Persistence to tldraw Canvas\nDESCRIPTION: Enhanced implementation with local persistence using the persistenceKey prop. This enables the canvas state to survive browser refreshes and synchronize between browser tabs.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/quick-start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw persistenceKey=\"example\" />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Time-Based Permissions Logic to TLDraw Shapes\nDESCRIPTION: Implementation showing how to add custom permissions to TLDraw shapes using meta properties and time-based conditions. The code demonstrates preventing shape updates after 5 seconds from creation and only allowing deletion after 5 seconds.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/permissions-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Editor, TLShapeId, TLStore, computed } from '@tldraw/tldraw'\nimport { track } from 'signia'\n\n// When shapes are created, add a `createdAt` property to their meta object\nexport function setupPermissions(editor: Editor) {\n\teditor.sideEffects.register({\n\t\tonCreate: ({ shapes }) => {\n\t\t\tfor (const shape of shapes) {\n\t\t\t\teditor.updateShape({\n\t\t\t\t\tid: shape.id,\n\t\t\t\t\tmeta: { createdAt: Date.now() },\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t})\n\n\t// Original change handler\n\tconst originalOnChange = editor.store.onCommand\n\n\t// Our new change handler\n\teditor.store.onCommand = (cmd) => {\n\t\tif (cmd.type === 'update_shapes') {\n\t\t\tfor (const { id } of cmd.shapes) {\n\t\t\t\tconst shape = editor.getShape(id)\n\t\t\t\tif (!shape) continue\n\n\t\t\t\tconst createdAt = shape.meta?.createdAt ?? Date.now()\n\t\t\t\tconst age = Date.now() - createdAt\n\n\t\t\t\t// Prevent changes to shapes older than 5 seconds\n\t\t\t\tif (age > 5000) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (cmd.type === 'delete_shapes') {\n\t\t\tfor (const { id } of cmd.shapes) {\n\t\t\t\tconst shape = editor.getShape(id)\n\t\t\t\tif (!shape) continue\n\n\t\t\t\tconst createdAt = shape.meta?.createdAt ?? Date.now()\n\t\t\t\tconst age = Date.now() - createdAt\n\n\t\t\t\t// Prevent deletion of shapes younger than 5 seconds\n\t\t\t\tif (age < 5000) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Allow the change to go through\n\t\treturn originalOnChange.call(editor.store, cmd)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary for TLDraw Shapes in TypeScript\nDESCRIPTION: This code snippet represents an error boundary component for TLDraw shapes. It catches errors in individual shapes to prevent the entire editor from crashing when something goes wrong in a specific shape.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/error-boundary/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n./ErrorBoundaryExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic tldraw React Component Implementation\nDESCRIPTION: Basic example showing how to import and use the Tldraw component in a React application. Requires importing both the component and its associated CSS styles.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport 'tldraw/tldraw.css'\n\nexport default function () {\n\treturn <Tldraw />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Shapes in tldraw Component\nDESCRIPTION: Demonstrates how to pass custom shape utils to the Tldraw component and create a custom shape using the Editor API.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/shapes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyCustomShapes = [CardShapeUtil]\n\nexport default function () {\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw\n\t\t\t\tshapeUtils={MyCustomShapes}\n\t\t\t\tonMount={(editor) => {\n\t\t\t\t\teditor.createShapes([{ type: 'card' }])\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UI-Related Components and Functions in TypeScript\nDESCRIPTION: Functions related to UI components and user interactions, including menu components, event handling, and DOM operations like pointer capture and window management.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function MenuClickCapture(): false | JSX_2.Element;\nexport function normalizeWheel(event: React.WheelEvent<HTMLElement> | WheelEvent): {\n    x: number;\n    y: number;\n    z: number;\n};\nexport function openWindow(url: string, target?: string): void;\nexport function OptionalErrorBoundary({ children, fallback, ...props }: Omit<TLErrorBoundaryProps, 'fallback'> & {\n    fallback: TLErrorFallbackComponent;\n}): boolean | JSX_2.Element | Iterable<React_3.ReactNode> | null | number | string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Paste Handler for Single Frame Shapes in tldraw (TypeScript/TSX)\nDESCRIPTION: This code snippet demonstrates how to create a custom paste handler for tldraw. It specifically targets single frame shapes, modifying their paste behavior to find an empty space rather than using the original copy location. The example utilizes tldraw's external content handler to achieve this customization.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-paste/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n./CustomPasteExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing tldraw Sync Package for Real-time Collaboration\nDESCRIPTION: Command to install the @tldraw/sync package, which enables real-time collaboration features in tldraw applications.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/quick-start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tldraw/sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom BindingUtil Class in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom BindingUtil class for a 'StickerBinding'. It includes methods for setting default props and handling shape changes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BindingUtil } from 'tldraw'\n\nclass StickerBindingUtil extends BindingUtil<StickerBinding> {\n\tstatic override type = 'sticker' as const\n\n\toverride getDefaultProps() {\n\t\treturn { x: 0.5, y: 0.5 }\n\t}\n\n\toverride onAfterChangeToShape({ binding }) {\n\t\tconst sticker = this.editor.getShape(binding.fromShape)\n\n\t\t// move the sticker so it stays attached to the to shape\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for SVG Path Generation in TLDraw\nDESCRIPTION: Functions for generating SVG path data from points, including getSvgPathFromPoints which creates a path string from a series of points with optional closure.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getSvgPathFromPoints(points: VecLike[], closed?: boolean): string;\n```\n\n----------------------------------------\n\nTITLE: Using Tldraw Component with License Key\nDESCRIPTION: Example of using the Tldraw component with a business license key to disable the \"Made with tldraw\" link.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Tldraw licenseKey={YOUR_LICENSE_KEY} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Tldraw Editors in React\nDESCRIPTION: This code snippet demonstrates how to create a React component that renders multiple Tldraw editors on a single page. It uses the Tldraw component and manages focus state for each editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/multiple/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport * as React from 'react'\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function MultipleExample() {\n\tconst [focusedEditor, setFocusedEditor] = React.useState<null | 1 | 2>(null)\n\n\treturn (\n\t\t<div style={{ display: 'flex', padding: 32, gap: 32 }}>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: 500,\n\t\t\t\t\theight: 500,\n\t\t\t\t\toutline: focusedEditor === 1 ? '2px solid blue' : 'none',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Tldraw\n\t\t\t\t\tautofocus\n\t\t\t\t\tonMount={(editor) => {\n\t\t\t\t\t\teditor.updateInstanceState({ isReadonly: false })\n\t\t\t\t\t}}\n\t\t\t\t\tonFocus={() => setFocusedEditor(1)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: 500,\n\t\t\t\t\theight: 500,\n\t\t\t\t\toutline: focusedEditor === 2 ? '2px solid blue' : 'none',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Tldraw\n\t\t\t\t\tautofocus\n\t\t\t\t\tonMount={(editor) => {\n\t\t\t\t\t\teditor.updateInstanceState({ isReadonly: false })\n\t\t\t\t\t}}\n\t\t\t\t\tonFocus={() => setFocusedEditor(2)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tldraw Component in React\nDESCRIPTION: This example shows how to use the Tldraw component as a regular React component in your project. The component is set up to take up the full height and width of its container. Note that by default, the component doesn't persist data between refreshes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/basic/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n./BasicExample.tsx\n```\n\n----------------------------------------\n\nTITLE: HistoryManager Class Implementation\nDESCRIPTION: A class that manages history operations for an editor, enabling undo/redo functionality. It tracks state changes and provides methods for batching operations, marking history points, and navigating through history.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class HistoryManager<R extends UnknownRecord> {\n    constructor(opts: {\n        annotateError?(error: unknown): void;\n        store: Store<R>;\n    });\n    // (undocumented)\n    bail(): this;\n    // (undocumented)\n    bailToMark(id: string): this;\n    // (undocumented)\n    batch(fn: () => void, opts?: TLHistoryBatchOptions): this;\n    // (undocumented)\n    clear(): void;\n    // @internal (undocumented)\n    debug(): {\n        pendingDiff: {\n            diff: RecordsDiff<R>;\n            isEmpty: boolean;\n        };\n        redos: (NonNullable<TLHistoryEntry<R>> | undefined)[];\n        state: string;\n        undos: (NonNullable<TLHistoryEntry<R>> | undefined)[];\n    };\n    // (undocumented)\n    readonly dispose: () => void;\n    // @internal (undocumented)\n    getMarkIdMatching(idSubstring: string): null | string;\n    // (undocumented)\n    getNumRedos(): number;\n    // (undocumented)\n    getNumUndos(): number;\n    // @internal (undocumented)\n    _isInBatch: boolean;\n    // @internal (undocumented)\n    _mark(id: string): void;\n    // (undocumented)\n    redo(): this;\n    // (undocumented)\n    squashToMark(id: string): this;\n    // (undocumented)\n    undo(): this;\n    // (undocumented)\n    _undo({ pushToRedoStack, toMark }: {\n        pushToRedoStack: boolean;\n        toMark?: string;\n    }): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Records in TypeScript with @tldraw/store RecordStore\nDESCRIPTION: This code demonstrates various operations on a RecordStore, including creating, adding, updating, and removing records. It showcases the flexibility of the store in handling different record types.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tolkeinId = Author.createCustomId('tolkein')\n\nstore.put([\n\tAuthor.create({\n\t\tid: jrrTolkeinId,\n\t\tname: 'J.R.R Tolkein',\n\t}),\n])\n\nstore.update(tolkeinId, (author) => ({\n\t...author,\n\tname: 'DJJ Tolkz',\n\tisPseudonym: true,\n}))\n\nstore.remove(tolkeinId)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tldraw Component with Editor Context in TSX\nDESCRIPTION: This code snippet shows the implementation of the main Tldraw component, which sets up the editor and provides it to child components via the EditorContext.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/external-ui-context/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw, useEditor as useTldrawEditor } from '@tldraw/tldraw'\nimport { EditorContext } from './EditorContext'\n\nexport default function TldrawComponent() {\n\treturn (\n\t\t<Tldraw>\n\t\t\t<InnerTldrawComponent />\n\t\t</Tldraw>\n\t)\n}\n\nfunction InnerTldrawComponent() {\n\tconst editor = useTldrawEditor()\n\treturn (\n\t\t<EditorContext.Provider value={editor}>\n\t\t\t<ExternalControls />\n\t\t</EditorContext.Provider>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Grid Mode Changes in tldraw using TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Editor's side effects API in tldraw to prevent changes to the 'isGridMode' property of the instance. It sets up a side effect that checks for changes to the instance record and cancels any attempt to turn off grid mode.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/prevent-instance-change/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Editor, TLEventMapHandler, useEditor } from '@tldraw/tldraw'\nimport { useEffect } from 'react'\n\nexport default function PreventInstanceChangeExample() {\n\tconst editor = useEditor()\n\n\tuseEffect(() => {\n\t\tconst handleInstanceChange: TLEventMapHandler<'instance-change'> = (change) => {\n\t\t\tif (change.isPaused) return\n\n\t\t\tif (change.changes.isGridMode === false) {\n\t\t\t\tchange.cancel()\n\t\t\t}\n\t\t}\n\n\t\teditor.sideEffects.registerBeforeHandler('instance-change', handleInstanceChange)\n\n\t\treturn () => {\n\t\t\teditor.sideEffects.unregisterBeforeHandler('instance-change', handleInstanceChange)\n\t\t}\n\t}, [editor])\n\n\treturn null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing tldraw Package with npm\nDESCRIPTION: Command to install the tldraw package using npm package manager.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i tldraw\n```\n\n----------------------------------------\n\nTITLE: Using Self-Hosted Assets with Tldraw\nDESCRIPTION: Example of using self-hosted assets with the Tldraw component using the getAssetUrls helper function.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAssetUrls } from '@tldraw/assets/selfHosted'\n\nconst assetUrls = getAssetUrls()\n\n<Tldraw assetUrls={assetUrls} />\n```\n\n----------------------------------------\n\nTITLE: Loading and Saving tldraw Editor Contents with Local Storage in TypeScript/TSX\nDESCRIPTION: This code snippet demonstrates how to implement local storage functionality for the tldraw editor. It loads the editor contents from localStorage on component mount and saves changes back to localStorage using a debounced function.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/local-storage/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { Tldraw, useEditor, TLUiEventHandler } from '@tldraw/tldraw'\nimport { debounce } from './debounce'\n\nconst STORAGE_KEY = 'tldraw-localStorage-example'\n\nexport default function LocalStorageExample() {\n\tconst [snapshot, setSnapshot] = React.useState<string | null>(null)\n\n\tReact.useEffect(() => {\n\t\tconst savedSnapshot = localStorage.getItem(STORAGE_KEY)\n\t\tif (savedSnapshot) {\n\t\t\tsetSnapshot(savedSnapshot)\n\t\t}\n\t}, [])\n\n\tconst handleMount: TLUiEventHandler = React.useCallback((editor) => {\n\t\tconst savedSnapshot = localStorage.getItem(STORAGE_KEY)\n\t\tif (savedSnapshot) {\n\t\t\teditor.loadSnapshot(JSON.parse(savedSnapshot))\n\t\t}\n\t}, [])\n\n\tconst editor = useEditor()\n\n\tconst handleChanges = React.useCallback(\n\t\tdebounce(() => {\n\t\t\tif (!editor) return\n\t\t\tconst snapshot = JSON.stringify(editor.store.getSnapshot())\n\t\t\tlocalStorage.setItem(STORAGE_KEY, snapshot)\n\t\t}, 500),\n\t\t[editor]\n\t)\n\n\tReact.useEffect(() => {\n\t\tif (!editor) return\n\t\teditor.on('change', handleChanges)\n\t\treturn () => {\n\t\t\teditor.off('change', handleChanges)\n\t\t}\n\t}, [editor, handleChanges])\n\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tsnapshot={snapshot ? JSON.parse(snapshot) : undefined}\n\t\t\t\tonMount={handleMount}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RecordType Instances in TypeScript for @tldraw/store\nDESCRIPTION: This code shows how to create RecordType instances for Book and Author records. It demonstrates using createRecordType and setting default properties for the Author type.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Book = createRecordType<Book>('book')\n\nconst Author = createRecordType<Author>('author').withDefaultProperties(() => ({\n\tisPseudonym: false,\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ShapeUtil Class in TypeScript\nDESCRIPTION: Shows the implementation of a ShapeUtil class for a custom card shape, including methods for default props, geometry, component rendering, and indicator.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/shapes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HTMLContainer, ShapeUtil } from 'tldraw'\n\nclass CardShapeUtil extends ShapeUtil<CardShape> {\n\tstatic override type = 'card' as const\n\n\tgetDefaultProps(): CardShape['props'] {\n\t\treturn {\n\t\t\tw: 100,\n\t\t\th: 100,\n\t\t}\n\t}\n\n\tgetGeometry(shape: CardShape) {\n\t\treturn new Rectangle2d({\n\t\t\twidth: shape.props.w,\n\t\t\theight: shape.props.h,\n\t\t\tisFilled: true,\n\t\t})\n\t}\n\n\tcomponent(shape: CardShape) {\n\t\treturn <HTMLContainer>Hello</HTMLContainer>\n\t}\n\n\tindicator(shape: CardShape) {\n\t\treturn <rect width={shape.props.w} height={shape.props.h} />\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Layout for Tldraw Component in React TSX\nDESCRIPTION: This code snippet demonstrates how to use the Tldraw component with inline layout in a React application. It creates multiple instances of the Tldraw component with different sizes to showcase the editor's appearance at various dimensions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/inline/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function InlineExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<h2>Small</h2>\n\t\t\t<Tldraw className=\"small\" />\n\t\t\t<h2>Medium</h2>\n\t\t\t<Tldraw className=\"medium\" />\n\t\t\t<h2>Large</h2>\n\t\t\t<Tldraw className=\"large\" />\n\t\t</div>\n\t)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing tldraw sync in React\nDESCRIPTION: This snippet demonstrates how to use the useSyncDemo hook to enable real-time collaboration in a tldraw React component.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/blog/announcing-tldraw-sync.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport { useSyncDemo } from '@tldraw/sync'\n\nfunction MyApp() {\n  const store = useSyncDemo({ roomId: 'MY_ROOM_ID' })\n  return <Tldraw store={store} />\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix (Mat) Class Implementation\nDESCRIPTION: A comprehensive class for 2D matrix operations, providing methods for transformation, composition, decomposition, and applying matrices to points and shapes. Essential for coordinate transformations in a drawing application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Mat {\n    constructor(a: number, b: number, c: number, d: number, e: number, f: number);\n    // (undocumented)\n    a: number;\n    // (undocumented)\n    static Absolute(m: MatLike): MatModel;\n    // (undocumented)\n    static applyToBounds(m: MatLike, box: Box): Box;\n    // (undocumented)\n    applyToPoint(point: VecLike): Vec;\n    // (undocumented)\n    static applyToPoint(m: MatLike, point: VecLike): Vec;\n    // (undocumented)\n    applyToPoints(points: VecLike[]): Vec[];\n    // (undocumented)\n    static applyToPoints(m: MatLike, points: VecLike[]): Vec[];\n    // (undocumented)\n    static applyToXY(m: MatLike, x: number, y: number): number[];\n    // (undocumented)\n    b: number;\n    // (undocumented)\n    c: number;\n    // (undocumented)\n    static Cast(m: MatLike): Mat;\n    // (undocumented)\n    clone(): Mat;\n    // (undocumented)\n    static Compose(...matrices: MatLike[]): Mat;\n    // (undocumented)\n    d: number;\n    // (undocumented)\n    static Decompose(m: MatLike): {\n        rotation: number;\n        scaleX: number;\n        scaleY: number;\n        x: number;\n        y: number;\n    };\n    // (undocumented)\n    decompose(): {\n        rotation: number;\n        scaleX: number;\n        scaleY: number;\n        x: number;\n        y: number;\n    };\n    // (undocumented)\n    decomposed(): {\n        rotation: number;\n        scaleX: number;\n        scaleY: number;\n        x: number;\n        y: number;\n    };\n    // (undocumented)\n    e: number;\n    // (undocumented)\n    equals(m: Mat | MatModel): boolean;\n    // (undocumented)\n    f: number;\n    // (undocumented)\n    static From(m: MatLike): Mat;\n    // (undocumented)\n    static Identity(): Mat;\n    // (undocumented)\n    identity(): this;\n    // (undocumented)\n    static Inverse(m: MatModel): MatModel;\n    // (undocumented)\n    invert(): this;\n    // (undocumented)\n    static Multiply(m1: MatModel, m2: MatModel): MatModel;\n    // (undocumented)\n    multiply(m: Mat | MatModel): this;\n    // (undocumented)\n    static Point(m: MatLike): Vec;\n    // (undocumented)\n    point(): Vec;\n    // (undocumented)\n    static Rotate(r: number, cx?: number, cy?: number): Mat;\n    // (undocumented)\n    rotate(r: number, cx?: number, cy?: number): Mat;\n    // (undocumented)\n    static Rotation(m: MatLike): number;\n    // (undocumented)\n    rotation(): number;\n    // (undocumented)\n    static Scale(x: number, y: number): MatModel;\n    // (undocumented)\n    static Scale(x: number, y: number, cx: number, cy: number): MatModel;\n    // (undocumented)\n    scale(x: number, y: number): this;\n    // (undocumented)\n    setTo(model: MatModel): this;\n    // (undocumented)\n    static Smooth(m: MatLike, precision?: number): MatLike;\n    // (undocumented)\n    toCssString(): string;\n    // (undocumented)\n    static toCssString(m: MatLike): string;\n    // (undocumented)\n    static Translate(x: number, y: number): Mat;\n    // (undocumented)\n    translate(x: number, y: number): Mat;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Paste Handler in tldraw\nDESCRIPTION: Example configuration showing file path and component setup for handling external content paste operations. The example focuses on handling text/html content type and rendering it in a custom shape.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/external-content-sources/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./ExternalContentSourcesExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing tldraw and sync package\nDESCRIPTION: This command installs the tldraw and @tldraw/sync packages using npm.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/blog/announcing-tldraw-sync.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tldraw @tldraw/sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Options in Tldraw with React\nDESCRIPTION: This code snippet shows a React component that renders a Tldraw instance with custom options. It limits the maximum number of pages to 3 and slows down camera animations for zooming.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-options/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function CustomOptionsExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\toptions={{\n\t\t\t\t\tmaxPages: 3,\n\t\t\t\t\tcameraAnimationTime: 500,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Tldraw Component in Scrollable Container (TSX)\nDESCRIPTION: This code snippet demonstrates how to import and render the Tldraw component within a scrollable container. It includes a ScrollExample component that wraps Tldraw in a div with specific styling for scrolling.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/scroll/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function ScrollExample() {\n\treturn (\n\t\t<div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\n\t\t\t<div>Some content above</div>\n\t\t\t<div style={{ flex: 1, overflow: 'auto', padding: 8, paddingBottom: 40 }}>\n\t\t\t\t<div style={{ height: 1000 }}>\n\t\t\t\t\t<Tldraw persistenceKey=\"example\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div>Some content below</div>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating custom tools in tldraw with UI overrides\nDESCRIPTION: Demonstrates how to add a custom tool to tldraw by implementing the tools method in TLUiOverrides. This creates a new 'card' tool with its own icon, label, and keyboard shortcut.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/user-interface.mdx#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst myOverrides: TLUiOverrides = {\n\ttools(editor, tools) {\n\t\t// Create a tool item in the ui's context.\n\t\ttools.card = {\n\t\t\tid: 'card',\n\t\t\ticon: 'color',\n\t\t\tlabel: 'tools.card',\n\t\t\tkbd: 'c',\n\t\t\tonSelect: () => {\n\t\t\t\t// Whatever you want to happen when the tool is selected.\n\t\t\t\teditor.setCurrentTool('card')\n\t\t\t},\n\t\t}\n\t\treturn tools\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Deep Links in tldraw (TSX)\nDESCRIPTION: This snippet demonstrates how to customize the `deepLinks` prop on the `<Tldraw />` component. It shows how to change the parameter name, target specific parts of the document, handle URL changes, and adjust the debounce interval.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/deep-links/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Tldraw\n\tdeepLinks={{\n\t\t// change the param name to `page`\n\t\tparamName: 'page',\n\t\t// only link to the current page\n\t\tgetTarget(editor) {\n\t\t\treturn { type: 'page', pageId: editor.getCurrentPageId() }\n\t\t},\n\t\t// log the new search params to the console instead of updating `window.location`\n\t\tonChange(url) {\n\t\t\tconsole.log('the new search params are', url.searchParams)\n\t\t},\n\t\t// set the debounce interval to 100ms instead of 500ms\n\t\tdebounceMs: 100,\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Store Schema Class Definition in TypeScript\nDESCRIPTION: Schema class for defining store record types, migrations and integrity checking. Handles schema serialization and record migration between versions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class StoreSchema<R extends UnknownRecord, P = unknown> {\n    static create<R extends UnknownRecord, P = unknown>(types: {\n        [TypeName in R['typeName']]: {\n            createId: any;\n        };\n    }, options?: StoreSchemaOptions<R, P>): StoreSchema<R, P>;\n    getMigrationsSince(persistedSchema: SerializedSchema): Result<Migration[], string>;\n    migratePersistedRecord(record: R, persistedSchema: SerializedSchema, direction?: 'down' | 'up'): MigrationResult<R>;\n    migrateStoreSnapshot(snapshot: StoreSnapshot<R>): MigrationResult<SerializedStore<R>>;\n    serialize(): SerializedSchemaV2;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a tldraw Store Before Rendering\nDESCRIPTION: Creates a store outside the tldraw component, loads a snapshot from localStorage, and passes the configured store to the Tldraw component.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function () {\n\tconst [store] = useState(() => {\n\t\t// Create the store\n\t\tconst newStore = createTLStore()\n\n\t\t// Get the snapshot\n\t\tconst stringified = localStorage.getItem('my-editor-snapshot')\n\t\tconst snapshot = JSON.parse(stringified)\n\n\t\t// Load the snapshot\n\t\tloadSnapshot(newStore, snapshot)\n\n\t\treturn newStore\n\t})\n\n\treturn <Tldraw persistenceKey=\"my-persistence-key\" store={store} />\n}\n```\n\n----------------------------------------\n\nTITLE: Editor State Selection Operations\nDESCRIPTION: Example showing basic shape selection operations using the editor instance.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\neditor.selectNone()\neditor.select(myShapeId, myOtherShapeId)\neditor.getSelectedShapeIds() // [myShapeId, myOtherShapeId]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom House Shape with SVG Geometry in TLDraw\nDESCRIPTION: This example demonstrates how to create a custom house shape with an SVG path in TLDraw. The shape includes a house outline with a door, showing how to implement custom geometry in a TLDraw shape component.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/shape-with-geometry/README.md#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\ntitle: Shape with geometry\ncomponent: ./ShapeWithGeometry.tsx\ncategory: shapes/tools\npriority: 3\nkeywords: [svg, path, house, door]\n```\n\n----------------------------------------\n\nTITLE: Starting tldraw Development Server\nDESCRIPTION: Command to start the local development server for working on tldraw packages. Runs the examples app at localhost:5420.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: React Provider Components\nDESCRIPTION: React provider components for breakpoints and asset URLs with their respective props interfaces.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function BreakPointProvider({ forceMobile, children }: BreakPointProviderProps): JSX_2.Element;\n\nexport interface BreakPointProviderProps {\n    children: ReactNode;\n    forceMobile?: boolean;\n}\n\nexport function AssetUrlsProvider({ assetUrls, children, }: {\n    assetUrls: TLUiAssetUrls;\n    children: React.ReactNode;\n}): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of tldraw in React\nDESCRIPTION: Simple example showing how to implement tldraw in a React application. The component is positioned to fill the entire viewport and imports the required CSS file.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport 'tldraw/tldraw.css'\n\nexport default function App() {\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Data into a tldraw Store Asynchronously\nDESCRIPTION: Demonstrates loading a remote snapshot asynchronously with a loading state, creating a store with the data, and providing it to the Tldraw component using TLStoreWithStatus.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function () {\n\tconst [storeWithStatus, setStoreWithStatus] = useState<TLStoreWithStatus>({\n\t\tstatus: 'loading',\n\t})\n\n\tuseEffect(() => {\n\t\tlet cancelled = false\n\t\tasync function loadRemoteSnapshot() {\n\t\t\t// Get the snapshot\n\t\t\tconst snapshot = await getRemoteSnapshot()\n\t\t\tif (cancelled) return\n\n\t\t\t// Create the store\n\t\t\tconst newStore = createTLStore()\n\n\t\t\t// Load the snapshot\n\t\t\tloadSnapshot(newStore, snapshot)\n\n\t\t\t// Update the store with status\n\t\t\tsetStoreWithStatus({\n\t\t\t\tstore: newStore,\n\t\t\t\tstatus: 'ready',\n\t\t\t})\n\t\t}\n\n\t\tloadRemoteSnapshot()\n\n\t\treturn () => {\n\t\t\tcancelled = true\n\t\t}\n\t})\n\n\treturn <Tldraw persistenceKey=\"my-persistence-key\" store={storeWithStatus} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Shape with Custom Click Handlers in tldraw\nDESCRIPTION: Demonstrates how to implement custom pointer event handling in a tldraw shape by using pointer-events: all CSS property and stopping event propagation. The example focuses on creating a todo list item shape with an interactive checkbox.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/interactive-shape/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\npointer-events: all;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Math Class in TypeScript\nDESCRIPTION: Comprehensive vector mathematics class with methods for vector operations including addition, subtraction, multiplication, normalization, rotation, and distance calculations. Supports both static and instance methods.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Vec {\n    constructor(x?: number, y?: number, z?: number);\n    // (undocumented)\n    static Abs(A: VecLike): Vec;\n    // (undocumented)\n    abs(): this;\n    // (undocumented)\n    static Add(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    add(V: VecLike): this;\n    // (undocumented)\n    static AddScalar(A: VecLike, n: number): Vec;\n    // (undocumented)\n    addScalar(n: number): this;\n    // (undocumented)\n    static AddXY(A: VecLike, x: number, y: number): Vec;\n    // (undocumented)\n    addXY(x: number, y: number): this;\n    // (undocumented)\n    static Angle(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    angle(B: VecLike): number;\n    // (undocumented)\n    static Average(arr: VecLike[]): Vec;\n    // (undocumented)\n    static Cast(A: VecLike): Vec;\n    // (undocumented)\n    static Clamp(A: Vec, min: number, max?: number): Vec;\n    // (undocumented)\n    clamp(min: number, max?: number): this;\n    // (undocumented)\n    static Clockwise(A: VecLike, B: VecLike, C: VecLike): boolean;\n    // (undocumented)\n    clone(): Vec;\n    static Cpr(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    cpr(V: VecLike): number;\n    // (undocumented)\n    static Cross(A: VecLike, V: VecLike): Vec;\n    // (undocumented)\n    cross(V: VecLike): this;\n    // (undocumented)\n    static Dist(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    dist(V: VecLike): number;\n    // (undocumented)\n    static Dist2(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    static DistanceToLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp?: boolean): number;\n    // (undocumented)\n    distanceToLineSegment(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    static DistanceToLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): number;\n    // (undocumented)\n    static DistMin(A: VecLike, B: VecLike, n: number): boolean;\n    // (undocumented)\n    static Div(A: VecLike, t: number): Vec;\n    // (undocumented)\n    div(t: number): this;\n    // (undocumented)\n    static DivV(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    divV(V: VecLike): this;\n    static Dpr(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    dpr(V: VecLike): number;\n    // (undocumented)\n    static Equals(A: VecLike, B: VecLike): boolean;\n    // (undocumented)\n    equals(B: VecLike): boolean;\n    // (undocumented)\n    static EqualsXY(A: VecLike, x: number, y: number): boolean;\n    // (undocumented)\n    equalsXY(x: number, y: number): boolean;\n    // (undocumented)\n    static From({ x, y, z }: VecModel): Vec;\n    // (undocumented)\n    static FromAngle(r: number, length?: number): Vec;\n    // (undocumented)\n    static FromArray(v: number[]): Vec;\n    // (undocumented)\n    static IsNaN(A: VecLike): boolean;\n    // (undocumented)\n    static Len(A: VecLike): number;\n    // (undocumented)\n    len(): number;\n    // (undocumented)\n    static Len2(A: VecLike): number;\n    // (undocumented)\n    len2(): number;\n    static Lrp(A: VecLike, B: VecLike, t: number): Vec;\n    // (undocumented)\n    lrp(B: VecLike, t: number): Vec;\n    // (undocumented)\n    static Max(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    static Med(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    static Min(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    static Mul(A: VecLike, t: number): Vec;\n    // (undocumented)\n    mul(t: number): this;\n    // (undocumented)\n    static MulV(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    mulV(V: VecLike): this;\n    // (undocumented)\n    static NearestPointOnLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp?: boolean): Vec;\n    static NearestPointOnLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): Vec;\n    // (undocumented)\n    static Neg(A: VecLike): Vec;\n    // (undocumented)\n    neg(): this;\n    // (undocumented)\n    norm(): this;\n    // (undocumented)\n    static Nudge(A: VecLike, B: VecLike, distance: number): Vec;\n    // (undocumented)\n    nudge(B: VecLike, distance: number): this;\n    static Per(A: VecLike): Vec;\n    // (undocumented)\n    per(): this;\n    static PointsBetween(A: VecModel, B: VecModel, steps?: number): Vec[];\n    // (undocumented)\n    get pressure(): number;\n    static Pry(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    pry(V: VecLike): number;\n    // (undocumented)\n    static Rescale(A: VecLike, n: number): Vec;\n    // (undocumented)\n    static Rot(A: VecLike, r?: number): Vec;\n    // (undocumented)\n    rot(r: number): this;\n    // (undocumented)\n    static RotWith(A: VecLike, C: VecLike, r: number): Vec;\n    // (undocumented)\n    rotWith(C: VecLike, r: number): this;\n    // (undocumented)\n    static ScaleWithOrigin(A: VecLike, scale: number, origin: VecLike): Vec;\n    // (undocumented)\n    set(x?: number, y?: number, z?: number): this;\n    // (undocumented)\n    setTo({ x, y, z }: VecLike): this;\n    // (undocumented)\n    static Slope(A: VecLike, B: VecLike): number;\n    // (undocumented)\n    slope(B: VecLike): number;\n    // (undocumented)\n    static Snap(A: VecLike, step?: number): Vec;\n    // (undocumented)\n    static SnapToGrid(A: VecLike, gridSize?: number): Vec;\n    // (undocumented)\n    snapToGrid(gridSize: number): this;\n    // (undocumented)\n    static Sub(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    sub(V: VecLike): this;\n    // (undocumented)\n    static SubScalar(A: VecLike, n: number): Vec;\n    // (undocumented)\n    subScalar(n: number): this;\n    // (undocumented)\n    static SubXY(A: VecLike, x: number, y: number): Vec;\n    // (undocumented)\n    subXY(x: number, y: number): this;\n    // (undocumented)\n    static Tan(A: VecLike, B: VecLike): Vec;\n    // (undocumented)\n    tan(V: VecLike): Vec;\n    // (undocumented)\n    static ToAngle(A: VecLike): number;\n    // (undocumented)\n    toAngle(): number;\n    // (undocumented)\n    static ToArray(A: VecLike): number[];\n    // (undocumented)\n    toArray(): number[];\n    // (undocumented)\n    static ToCss(A: VecLike): string;\n    // (undocumented)\n    static ToFixed(A: VecLike): Vec;\n    // (undocumented)\n    toFixed(): Vec;\n    // (undocumented)\n    static ToInt(A: VecLike): Vec;\n    // (undocumented)\n    static ToJson(A: VecLike): {\n        x: number;\n        y: number;\n        z: number | undefined;\n    };\n    // (undocumented)\n    toJson(): VecModel;\n    // (undocumented)\n    static ToString(A: VecLike): string;\n    // (undocumented)\n    toString(): string;\n    static Uni(A: VecLike): Vec;\n    // (undocumented)\n    uni(): Vec;\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    y: number;\n    // (undocumented)\n    z: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Circle2d Class Implementation\nDESCRIPTION: Implements a 2D circle geometry class with methods for bounds calculation, hit testing, and path generation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Circle2d extends Geometry2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed'> & {\n        isFilled: boolean;\n        radius: number;\n        x?: number;\n        y?: number;\n    });\n    _center: Vec;\n    radius: number;\n    x: number;\n    y: number;\n    getBounds(): Box;\n    getSvgPathData(): string;\n    getVertices(): Vec[];\n    hitTestLineSegment(A: Vec, B: Vec, distance?: number): boolean;\n    nearestPoint(point: Vec): Vec;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Persistence Key in Tldraw React Component\nDESCRIPTION: This snippet shows how to use the persistenceKey prop in the Tldraw component to enable local data persistence. The persistenceKey is used as a unique identifier for storing the editor's data in local storage.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/peristence-key/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIf the `persistenceKey` prop is provided to the `<Tldraw/>` component, the editor will persist its data locally under that key.\n```\n\n----------------------------------------\n\nTITLE: Defining Tldraw Component in JSX\nDESCRIPTION: Function declaration for the main Tldraw component that renders the drawing application. Takes TldrawProps to configure and initialize the editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_34\n\nLANGUAGE: JSX\nCODE:\n```\nexport function Tldraw(props: TldrawProps): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Custom Canvas Components in tldraw\nDESCRIPTION: This code snippet shows how to import and configure custom React components to replace tldraw's default on-canvas UI elements. It includes components for background, brush, cursor, and various collaborative features.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-components/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nimport { Background } from './components/Background'\nimport { SvgDefs } from './components/SvgDefs'\nimport { Brush } from './components/Brush'\nimport { ZoomBrush } from './components/ZoomBrush'\nimport { ShapeIndicator } from './components/ShapeIndicator'\nimport { Cursor } from './components/Cursor'\nimport { Canvas } from './components/Canvas'\nimport { CollaboratorBrush } from './components/CollaboratorBrush'\nimport { CollaboratorCursor } from './components/CollaboratorCursor'\nimport { CollaboratorHint } from './components/CollaboratorHint'\nimport { CollaboratorShapeIndicator } from './components/CollaboratorShapeIndicator'\nimport { Grid } from './components/Grid'\nimport { Scribble } from './components/Scribble'\nimport { CollaboratorScribble } from './components/CollaboratorScribble'\nimport { SnapIndicator } from './components/SnapIndicator'\nimport { Handles } from './components/Handles'\nimport { Handle } from './components/Handle'\nimport { Spinner } from './components/Spinner'\nimport { SelectionForeground } from './components/SelectionForeground'\nimport { SelectionBackground } from './components/SelectionBackground'\nimport { OnTheCanvas } from './components/OnTheCanvas'\nimport { InFrontOfTheCanvas } from './components/InFrontOfTheCanvas'\nimport { LoadingScreen } from './components/LoadingScreen'\n\nexport default function CustomComponentsExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tcomponents={{\n\t\t\t\t\tBackground,\n\t\t\t\t\tSvgDefs,\n\t\t\t\t\tBrush,\n\t\t\t\t\tZoomBrush,\n\t\t\t\t\tShapeIndicator,\n\t\t\t\t\tCursor,\n\t\t\t\t\tCanvas,\n\t\t\t\t\tCollaboratorBrush,\n\t\t\t\t\tCollaboratorCursor,\n\t\t\t\t\tCollaboratorHint,\n\t\t\t\t\tCollaboratorShapeIndicator,\n\t\t\t\t\tGrid,\n\t\t\t\t\tScribble,\n\t\t\t\t\tCollaboratorScribble,\n\t\t\t\t\tSnapIndicator,\n\t\t\t\t\tHandles,\n\t\t\t\t\tHandle,\n\t\t\t\t\tSpinner,\n\t\t\t\t\tSelectionForeground,\n\t\t\t\t\tSelectionBackground,\n\t\t\t\t\tOnTheCanvas,\n\t\t\t\t\tInFrontOfTheCanvas,\n\t\t\t\t\tLoadingScreen,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for tldraw State Changes\nDESCRIPTION: Sets up an event listener for document changes in the tldraw store, filtering by scope and source to get specific types of updates.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst unlisten = editor.store.listen(\n\t(update) => {\n\t\tconsole.log('update', update)\n\t},\n\t{ scope: 'document', source: 'user' }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Mode in Tldraw Component (JSX)\nDESCRIPTION: This snippet shows how to set up the Tldraw component in read-only mode. When the 'readonly' prop is provided, users can't modify the document content but can still perform actions like moving the camera, selecting shapes, and copying.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/readonly/README.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tldraw readonly />\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Toolbar in React for tldraw\nDESCRIPTION: This code snippet demonstrates how to create a ContextToolbar component in React for the tldraw project. The toolbar appears above selected shapes and allows users to adjust the size of the shapes, similar to the Style panel functionality.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/context-toolbar/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ContextToolbar.tsx\n// Implementation details would go here\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Changes in tldraw\nDESCRIPTION: Demonstrates how to merge changes from a remote source into the tldraw store, tagging them as remote changes so they can be filtered appropriately.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nmyRemoteSource.on('change', (changes) => {\n\teditor.store.mergeRemoteChanges(() => {\n\t\tchanges.forEach((change) => {\n\t\t\t// Apply the changes to the store\n\t\t\teditor.store.put(/* ... */)\n\t\t})\n\t})\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using RecordStore in TypeScript with @tldraw/store\nDESCRIPTION: This snippet demonstrates the creation of a RecordStore instance and various methods for interacting with it, including put, update, remove, get, and other utility functions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = new RecordStore()\n\nconst record = Author.create({\n\tname: 'J.R.R Tolkein',\n\tid: Author.createCustomId('tolkein'),\n})\n\nstore.put([record])\n\nconst id = Author.createCustomId('tolkein')\n\nstore.update(id, (r) => ({ ...r, name: 'Jimmy Tolks' }))\n\nstore.remove([id])\n\nconst result = store.get(id)\n\nconst results = store.allRecords()\n\nstore.clear()\n\nconst hasRecord = store.has(id)\n\nconst serialized = store.serialize()\n\nconst serializedFiltered = store.serialize((record) => record.name === 'J.R.R Tolkein')\n\nstore.deserialize(serialized)\n\nstore.listen((entry) => doSomethingWith(entry))\n\nstore.mergeRemoteChanges(() => {\n\tstore.put(recordsFromRemoteSource)\n})\n\nconst derivationCache = createDerivationCache('popular_authors', (record) => {\n\treturn record.popularity > 62 ? record : undefined\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Canvas as Image using Editor.toImage() in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Editor.toImage() function to export the entire canvas as an image file in tldraw. It creates an image with all shapes on the canvas and provides a way to download it using a link element's download attribute.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/export-canvas-settings/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n./ExportCanvasImageSettingsExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Interface Methods for TLDraw Interaction Handling in TypeScript\nDESCRIPTION: Defines event handler method signatures for a TLDraw interface component, including methods for exiting, interrupting, and handling keyboard events. These methods manage application state during user interactions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_115\n\nLANGUAGE: TypeScript\nCODE:\n```\nonInteractionEnd: string;\n    }): void;\n    // (undocumented)\n    onExit(): void;\n    // (undocumented)\n    onInterrupt(): void;\n    // (undocumented)\n    onKeyDown(): void;\n    // (undocumented)\n    onKeyUp(info: TLKeyboardEventInfo): void;\n```\n\n----------------------------------------\n\nTITLE: Blocking Pointer Events in tldraw (TypeScript)\nDESCRIPTION: This snippet demonstrates how to stop pointer events from propagating to the canvas in tldraw. It involves calling the stopPropagation method on user pointer events to prevent interactions from affecting the canvas.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/event-blocker/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example usage (not provided in the original text)\nevent.stopPropagation();\n```\n\n----------------------------------------\n\nTITLE: Exporting Canvas as Image using Editor.toImage() in TLDraw\nDESCRIPTION: This code snippet demonstrates how to export the entire TLDraw canvas as an image file. It uses the Editor.toImage() function to create an image blob containing all shapes on the canvas. The resulting image is then downloaded using a link element with the download attribute.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/export-canvas-as-image/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEditor, TLUiOverrides } from '@tldraw/tldraw'\nimport { useCallback } from 'react'\n\nexport default function ExportCanvasImageExample() {\n\tconst editor = useEditor()\n\n\tconst handleExport = useCallback(() => {\n\t\tif (!editor) return\n\n\t\teditor.toImage().then((blob) => {\n\t\t\tconst url = URL.createObjectURL(blob)\n\t\t\tconst link = document.createElement('a')\n\t\t\tlink.href = url\n\t\t\tlink.download = 'canvas.png'\n\t\t\tlink.click()\n\t\t})\n\t}, [editor])\n\n\tconst uiOverrides: TLUiOverrides = {\n\t\ttools(editor, tools) {\n\t\t\ttool.push({\n\t\t\t\ticon: 'color',\n\t\t\t\tlabel: 'Export canvas as image',\n\t\t\t\tonSelect: () => {\n\t\t\t\t\thandleExport()\n\t\t\t\t\treturn false\n\t\t\t\t},\n\t\t\t})\n\t\t\treturn tools\n\t\t},\n\t}\n\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw autoFocus={true} overrides={uiOverrides} />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Note Shape Resize Mode in tldraw Editor Options\nDESCRIPTION: This snippet shows how to configure the resizing behavior for note shapes in the tldraw editor. The 'noteShapeResizeMode' option can be set to either 'none' for default behavior or 'scale' to allow users to scale the note.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/resize-note/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptions.noteShapeResizeMode = 'none' // or 'scale'\n```\n\n----------------------------------------\n\nTITLE: Defining TldrawOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the TldrawOptions interface, which specifies various configuration options for the TLDraw editor, including animation timings, collaboration settings, and UI preferences.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TldrawOptions {\n    readonly actionShortcutsLocation: 'menu' | 'swap' | 'toolbar';\n    readonly adjacentShapeMargin: number;\n    readonly animationMediumMs: number;\n    readonly cameraMovingTimeoutMs: number;\n    readonly cameraSlideFriction: number;\n    readonly coarseDragDistanceSquared: number;\n    readonly coarseHandleRadius: number;\n    readonly coarsePointerWidth: number;\n    readonly collaboratorCheckIntervalMs: number;\n    readonly collaboratorIdleTimeoutMs: number;\n    readonly collaboratorInactiveTimeoutMs: number;\n    readonly createTextOnCanvasDoubleClick: boolean;\n    readonly defaultSvgPadding: number;\n    readonly doubleClickDurationMs: number;\n    readonly dragDistanceSquared: number;\n    readonly edgeScrollDelay: number;\n    readonly edgeScrollDistance: number;\n    readonly edgeScrollEaseDuration: number;\n    readonly edgeScrollSpeed: number;\n    readonly enableToolbarKeyboardShortcuts: boolean;\n    readonly exportProvider: ComponentType<{\n        children: React.ReactNode;\n    }>;\n    readonly flattenImageBoundsExpand: number;\n    readonly flattenImageBoundsPadding: number;\n    readonly followChaseViewportSnap: number;\n    readonly gridSteps: readonly {\n        readonly mid: number;\n        readonly min: number;\n        readonly step: number;\n    }[];\n    readonly handleRadius: number;\n    readonly hitTestMargin: number;\n    readonly laserDelayMs: number;\n    readonly longPressDurationMs: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLArrowInfo Type in TypeScript\nDESCRIPTION: Type definition for TLArrowInfo, which represents arrow information in tldraw. This union type handles both straight and curved arrows with their respective geometric properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TLArrowInfo = {\n    bindings: TLArrowBindings;\n    bodyArc: TLArcInfo;\n    end: TLArrowPoint;\n    handleArc: TLArcInfo;\n    isStraight: false;\n    isValid: boolean;\n    middle: VecLike;\n    start: TLArrowPoint;\n} | {\n    bindings: TLArrowBindings;\n    end: TLArrowPoint;\n    isStraight: true;\n    isValid: boolean;\n    length: number;\n    middle: VecLike;\n    start: TLArrowPoint;\n};\n```\n\n----------------------------------------\n\nTITLE: Listening for Deep Link Changes in tldraw (TSX)\nDESCRIPTION: This snippet shows how to use the `Editor#registerDeepLinkListener` method to listen for deep link changes. It demonstrates setting up a listener with custom options and properly cleaning up the listener when the component unmounts.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/deep-links/README.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n\tconst unlisten = editor.registerDeepLinkListener({\n\t\tparamName: 'page',\n\t\tgetTarget(editor) {\n\t\t\treturn { type: 'page', pageId: editor.getCurrentPageId() }\n\t\t},\n\t\tonChange(url) {\n\t\t\tconsole.log('the new search params are', url.searchParams)\n\t\t},\n\t\tdebounceMs: 100,\n\t})\n\treturn () => {\n\t\tunlisten()\n\t}\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Implementing Inset Tldraw Editor in React\nDESCRIPTION: This code snippet demonstrates how to use the Tldraw component in a React application, placing it within a non-full-screen layout. The example shows that the editor's functionality remains intact even when inset into a page layout.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/inset/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n./InsetExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing TextShapeUtil Class in TypeScript\nDESCRIPTION: Definition of the TextShapeUtil class that extends ShapeUtil for text shapes. This utility class handles rendering, editing, and manipulating text shapes with methods for geometry, resizing, and SVG export.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TextShapeUtil extends ShapeUtil<TLTextShape> {\n    // (undocumented)\n    canEdit(): boolean;\n    // (undocumented)\n    component(shape: TLTextShape): JSX_2.Element;\n    // (undocumented)\n    getDefaultProps(): TLTextShape['props'];\n    // (undocumented)\n    getFontFaces(shape: TLTextShape): TLFontFace[];\n    // (undocumented)\n    getGeometry(shape: TLTextShape, opts: TLGeometryOpts): Rectangle2d;\n    // (undocumented)\n    getMinDimensions(shape: TLTextShape): {\n        height: number;\n        width: number;\n    };\n    // (undocumented)\n    getText(shape: TLTextShape): string;\n    // (undocumented)\n    indicator(shape: TLTextShape): JSX_2.Element | null;\n    // (undocumented)\n    isAspectRatioLocked(): boolean;\n    // (undocumented)\n    static migrations: TLPropsMigrations;\n    // (undocumented)\n    onBeforeUpdate(prev: TLTextShape, next: TLTextShape): {\n        id: TLShapeId;\n        index: IndexKey;\n        isLocked: boolean;\n        meta: JsonObject;\n        opacity: number;\n        parentId: TLParentId;\n        props: {\n            autoSize: boolean;\n            color: \"black\" | \"blue\" | \"green\" | \"grey\" | \"light-blue\" | \"light-green\" | \"light-red\" | \"light-violet\" | \"orange\" | \"red\" | \"violet\" | \"white\" | \"yellow\";\n            font: \"draw\" | \"mono\" | \"sans\" | \"serif\";\n            richText: {\n                content: unknown[];\n                type: string;\n            };\n            scale: number;\n            size: \"l\" | \"m\" | \"s\" | \"xl\";\n            textAlign: \"end\" | \"middle\" | \"start\";\n            w: number;\n        };\n        rotation: number;\n        type: \"text\";\n        typeName: \"shape\";\n        x: number;\n        y: number;\n    } | undefined;\n    // (undocumented)\n    onEditEnd(shape: TLTextShape): void;\n    // (undocumented)\n    onResize(shape: TLTextShape, info: TLResizeInfo<TLTextShape>): {\n        id: TLShapeId;\n        props: {\n            autoSize: boolean;\n            w: number;\n        };\n        type: \"text\";\n        x: number;\n        y: number;\n    } | {\n        id: TLShapeId;\n        props: {\n            scale: number;\n        };\n        type: \"text\";\n        x: number;\n        y: number;\n    };\n    // (undocumented)\n    options: TextShapeOptions;\n    // (undocumented)\n    static props: RecordProps<TLTextShape>;\n    // (undocumented)\n    toSvg(shape: TLTextShape, ctx: SvgExportContext): JSX_2.Element;\n    // (undocumented)\n    static type: \"text\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing tldraw Styles with ShapeWithTldrawStylesExample Component\nDESCRIPTION: This component demonstrates how to integrate tldraw's style panel with custom shapes. The example shows how the style panel responds to selection states and handles mixed values when multiple shapes are selected.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/shape-with-tldraw-styles/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./ShapeWithTldrawStylesExample.tsx\n```\n\n----------------------------------------\n\nTITLE: PNG Helper Class\nDESCRIPTION: A utility class for working with PNG image data, including chunk parsing, DPI settings and validation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/utils/api-report.api.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PngHelpers {\n    static findChunk(view: DataView, type: string): {\n        dataOffset: number;\n        size: number;\n        start: number;\n    };\n    static getChunkType(view: DataView, offset: number): string;\n    static isPng(view: DataView, offset: number): boolean;\n    static parsePhys(view: DataView, offset: number): {\n        ppux: number;\n        ppuy: number;\n        unit: number;\n    };\n    static readChunks(view: DataView, offset?: number): Record<string, {\n        dataOffset: number;\n        size: number;\n        start: number;\n    }>;\n    static setPhysChunk(view: DataView, dpr?: number, options?: BlobPropertyBag): Blob;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Content Sync in Tldraw Multiplayer (TypeScript/TSX)\nDESCRIPTION: This code snippet demonstrates how to create a Tldraw component with private content synchronization for multiplayer sessions. It includes functionality for toggling private mode, managing user presence, and handling shape creation with ownership.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/sync-private-content/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TLShape, Tldraw, track, useEditor } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\nimport { useCallback, useEffect, useState } from 'react'\n\nconst PERSIST_KEY = 'tldraw_private_content_example'\n\nexport default function SyncPrivateContentExample() {\n\tconst [userId] = useState(() => Math.random().toString(36).slice(2))\n\tconst [isPrivate, setIsPrivate] = useState(false)\n\n\tconst handleMount = useCallback((editor: Editor) => {\n\t\tconst savedValue = localStorage.getItem(PERSIST_KEY)\n\t\tif (savedValue) {\n\t\t\ttry {\n\t\t\t\tconst savedStore = JSON.parse(savedValue)\n\t\t\t\teditor.store.loadSnapshot(savedStore)\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err)\n\t\t\t}\n\t\t}\n\n\t\teditor.user.updateUserPreferences({ id: userId })\n\n\t\t// Set up callback to save the document when it changes\n\t\tconst cleanupFn = editor.store.listen(() => {\n\t\t\tlocalStorage.setItem(PERSIST_KEY, JSON.stringify(editor.store.getSnapshot()))\n\t\t})\n\n\t\treturn () => {\n\t\t\tcleanupFn()\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tshapeUtils={[]}\n\t\t\t\tpersistenceKey=\"example\"\n\t\t\t\tshowPages={false}\n\t\t\t\tshowMultiplayerMenu={false}\n\t\t\t\tstreamsPerClient={1}\n\t\t\t\tonMount={handleMount}\n\t\t\t\tcomponents={{\n\t\t\t\t\tTopPanel: () => (\n\t\t\t\t\t\t<TogglePrivateMode userId={userId} isPrivate={isPrivate} setIsPrivate={setIsPrivate} />\n\t\t\t\t\t),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<PrivateShapes userId={userId} isPrivate={isPrivate} />\n\t\t\t</Tldraw>\n\t\t</div>\n\t)\n}\n\nconst TogglePrivateMode = track(function TogglePrivateMode({\n\tuserId,\n\tisPrivate,\n\tsetIsPrivate,\n}: {\n\tuserId: string\n\tisPrivate: boolean\n\tsetIsPrivate: (isPrivate: boolean) => void\n}) {\n\tconst editor = useEditor()\n\n\tuseEffect(() => {\n\t\tconst unsub = editor.store.listen(function updatePresence() {\n\t\t\teditor.updateInstanceState({ isPrivate }, { ephemeral: true })\n\t\t})\n\t\treturn () => {\n\t\t\tunsub()\n\t\t}\n\t}, [editor, isPrivate])\n\n\treturn (\n\t\t<div style={{ position: 'absolute', top: 64, left: 12, zIndex: 99999, display: 'flex' }}>\n\t\t\t<div style={{ padding: 8, border: '1px solid black', backgroundColor: 'white' }}>\n\t\t\t\tUser ID: {userId}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tstyle={{ cursor: 'pointer', padding: 8, border: '1px solid black', backgroundColor: 'white' }}\n\t\t\t\tonClick={() => setIsPrivate(!isPrivate)}\n\t\t\t>\n\t\t\t\tPrivate mode: {isPrivate ? 'ON' : 'OFF'}\n\t\t\t</div>\n\t\t</div>\n\t)\n})\n\nconst PrivateShapes = track(function PrivateShapes({\n\tuserId,\n\tisPrivate,\n}: {\n\tuserId: string\n\tisPrivate: boolean\n}) {\n\tconst editor = useEditor()\n\n\tuseEffect(() => {\n\t\tconst unsub = editor.store.listen(function hidePrivateShapes() {\n\t\t\tfor (const shape of editor.store.allShapes()) {\n\t\t\t\tif (shape.meta.ownerId === userId) {\n\t\t\t\t\tif (isPrivate) {\n\t\t\t\t\t\teditor.setOpacity(shape.id, 1)\n\t\t\t\t\t} else {\n\t\t\t\t\t\teditor.setOpacity(shape.id, 0.2)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst otherUser = editor.store.get(shape.meta.ownerId)\n\t\t\t\t\tif (otherUser?.isPrivate) {\n\t\t\t\t\t\teditor.setOpacity(shape.id, 0)\n\t\t\t\t\t} else {\n\t\t\t\t\t\teditor.setOpacity(shape.id, 1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn () => {\n\t\t\tunsub()\n\t\t}\n\t}, [editor, isPrivate, userId])\n\n\tconst handleShapeCreated = useCallback(\n\t\t(shape: TLShape) => {\n\t\t\teditor.updateShape({\n\t\t\t\tid: shape.id,\n\t\t\t\ttype: shape.type,\n\t\t\t\tmeta: { ...shape.meta, ownerId: userId },\n\t\t\t})\n\t\t},\n\t\t[editor, userId]\n\t)\n\n\tuseEffect(() => {\n\t\treturn editor.on('shape-created', handleShapeCreated)\n\t}, [editor, handleShapeCreated])\n\n\treturn null\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Non-Lockable Tool in TypeScript\nDESCRIPTION: Example showing how to create a custom tool that cannot be locked by overriding the isLockable property of StateNode class.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyCustomTool extends StateNode {\n   static override isLockable = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom UI Zones in tldraw with React and TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the topZone and shareZone props of the Tldraw component to inject custom React components into specific areas of the tldraw UI.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/zones/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function ZonesExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\ttopZone={<div>My custom top component</div>}\n\t\t\t\tshareZone={<div>My custom share menu</div>}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Supported Languages Configuration\nDESCRIPTION: Defines the list of supported languages with their labels and locale codes for internationalization.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const LANGUAGES: readonly [{\n    readonly label: \"Bahasa Indonesia\";\n    readonly locale: \"id\";\n}, {\n    readonly label: \"Bahasa Melayu\";\n    readonly locale: \"ms\";\n}, /* ... many more language entries ... */ {\n    readonly label: \"繁體中文 (台灣)\";\n    readonly locale: \"zh-tw\";\n}];\n```\n\n----------------------------------------\n\nTITLE: Custom Tool Lock Configuration in TypeScript\nDESCRIPTION: Example of how to configure a custom tool to opt out of being lockable by overriding the StateNode's isLockable field.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyCustomTool extends StateNode {\n   static override isLockable = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Shape Type in TypeScript\nDESCRIPTION: Demonstrates how to define a custom shape type using the TLBaseShape helper, specifying the shape's type and props.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/shapes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TLBaseShape } from 'tldraw'\n\ntype CardShape = TLBaseShape<'card', { w: number; h: number }>\n```\n\n----------------------------------------\n\nTITLE: Updating Shapes in TLDraw\nDESCRIPTION: Demonstrates how to update existing shapes using the Editor's updateShapes method. Shows required fields (id and type) and how to update position and properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\neditor.updateShapes([\n\t{\n\t\tid: shape.id, // required\n\t\ttype: shape.type, // required\n\t\tx: 100,\n\t\ty: 100,\n\t\tprops: {\n\t\t\tw: 200,\n\t\t},\n\t},\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Shape IDs in TLDraw\nDESCRIPTION: Demonstrates how to create shape IDs using the createShapeId helper function. The function can generate random UUIDs or use provided strings, and returns properly typed shape identifiers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createShapeId } from 'tldraw'\n\ncreateShapeId() // `shape:some-random-uuid`\ncreateShapeId('kyle') // `shape:kyle`\n```\n\n----------------------------------------\n\nTITLE: Implementing SnapManager and Related Interfaces in TypeScript\nDESCRIPTION: Class and interfaces for managing snap functionality in tldraw, including snap indicators, data structures, and methods for managing snappable shapes and thresholds.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface SnapData {\n    // (undocumented)\n    nudge: Vec;\n}\n\n// @public (undocumented)\nexport type SnapIndicator = GapsSnapIndicator | PointsSnapIndicator;\n\n// @public (undocumented)\nexport class SnapManager {\n    constructor(editor: Editor);\n    // (undocumented)\n    clearIndicators(): void;\n    // (undocumented)\n    readonly editor: Editor;\n    // (undocumented)\n    getCurrentCommonAncestor(): TLShapeId | undefined;\n    // (undocumented)\n    getIndicators(): SnapIndicator[];\n    // (undocumented)\n    getSnappableShapes(): Set<TLShapeId>;\n    // (undocumented)\n    getSnapThreshold(): number;\n    // (undocumented)\n    readonly handles: HandleSnaps;\n    // (undocumented)\n    setIndicators(indicators: SnapIndicator[]): void;\n    // (undocumented)\n    readonly shapeBounds: BoundsSnaps;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing actions in tldraw with UI overrides\nDESCRIPTION: Shows how to override tldraw's default actions by implementing the actions method in TLUiOverrides. This example deletes an existing action and creates a new custom action.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/user-interface.mdx#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst myOverrides: TLUiOverrides = {\n\tactions(editor, actions) {\n\t\t// You can delete actions, but remember to\n\t\t// also delete the menu items that reference them!\n\t\tdelete actions['insert-embed']\n\n\t\t// Create a new action or replace an existing one\n\t\tactions['my-new-action'] = {\n\t\t\tid: 'my-new-action',\n\t\t\tlabel: 'My new action',\n\t\t\treadonlyOk: true,\n\t\t\tkbd: 'cmd+u,ctrl+u',\n\t\t\tonSelect(source: any) {\n\t\t\t\t// Whatever you want to happen when the action is run\n\t\t\t\twindow.alert('My new action just happened!')\n\t\t\t},\n\t\t}\n\t\treturn actions\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Editor via useEditor Hook\nDESCRIPTION: Demonstrates how to access the editor instance using the useEditor hook within the Tldraw component context.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction InsideOfContext() {\n\tconst editor = useEditor()\n\t// your editor code here\n\treturn null // or whatever\n}\n\nfunction App() {\n\treturn (\n\t\t<Tldraw>\n\t\t\t<InsideOfContext />\n\t\t</Tldraw>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline TLDraw Editor Component\nDESCRIPTION: This component demonstrates key implementation details for using TLDraw as an inline editor, including focus management, tool selection, UI visibility control, and edge scrolling configuration. The implementation emphasizes maintaining clean interaction between the main document editor and embedded TLDraw instances.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/inline-behavior/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n./InlineBehavior.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Binding Type in TypeScript\nDESCRIPTION: This code defines a custom binding type called 'StickerBinding' using TLBaseBinding. It specifies the binding type as 'sticker' and includes x and y coordinates in the props.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TLBaseBinding } from 'tldraw'\n\ntype StickerBinding = TLBaseBinding<'sticker', { x: number; y: number }>\n```\n\n----------------------------------------\n\nTITLE: Implementing External UI Control for tldraw Editor in TypeScript React\nDESCRIPTION: This code snippet demonstrates how to set up external UI control for the tldraw editor using TypeScript and React. It defines a component that renders the Tldraw editor and external UI buttons, managing the editor instance in state for external control.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/external-ui/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback, useState } from 'react'\nimport { Tldraw, Editor, TLEditorComponents, TLUiOverrides } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function ExternalUiExample() {\n\tconst [editor, setEditor] = useState<Editor | null>(null)\n\n\tconst handleMount = useCallback((editor: Editor) => {\n\t\tsetEditor(editor)\n\t}, [])\n\n\tconst components: TLEditorComponents = {\n\t\tTopPanel: () => {\n\t\t\treturn null\n\t\t},\n\t}\n\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tcomponents={components}\n\t\t\t\tonMount={handleMount}\n\t\t\t\tshape=\"rect\"\n\t\t\t\thoverStyle=\"frame\"\n\t\t\t\tfillStyle=\"solid\"\n\t\t\t\tdash=\"draw\"\n\t\t\t\treadonly={false}\n\t\t\t/>\n\t\t\t<div className=\"custom-ui\">\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\teditor?.updateInstanceState(\n\t\t\t\t\t\t\t{ stylesForNextShape: { ...editor.getInstanceState().stylesForNextShape, color: 'red' } },\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tRed\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\teditor?.updateInstanceState(\n\t\t\t\t\t\t\t{ stylesForNextShape: { ...editor.getInstanceState().stylesForNextShape, color: 'green' } },\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tGreen\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\teditor?.updateInstanceState(\n\t\t\t\t\t\t\t{ stylesForNextShape: { ...editor.getInstanceState().stylesForNextShape, color: 'blue' } },\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tBlue\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GeoShape Style Properties\nDESCRIPTION: Defines an enumerated style property for geometric shapes that specifies the available shape types.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GeoShapeGeoStyle: EnumStyleProp<\"arrow-down\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"check-box\" | \"cloud\" | \"diamond\" | \"ellipse\" | \"heart\" | \"hexagon\" | \"octagon\" | \"oval\" | \"pentagon\" | \"rectangle\" | \"rhombus-2\" | \"rhombus\" | \"star\" | \"trapezoid\" | \"triangle\" | \"x-box\">;\n```\n\n----------------------------------------\n\nTITLE: Implementing GeoShapeUtil Class in TypeScript\nDESCRIPTION: A utility class for geometric shapes that handles rendering, transformation, and interaction behaviors for various geometric shapes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {\n    // (undocumented)\n    canEdit(): boolean;\n    // (undocumented)\n    component(shape: TLGeoShape): JSX_2.Element;\n    // (undocumented)\n    getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[];\n    // (undocumented)\n    getDefaultProps(): TLGeoShape['props'];\n    // (undocumented)\n    getFontFaces(shape: TLGeoShape): TLFontFace[];\n    // (undocumented)\n    getGeometry(shape: TLGeoShape): Group2d;\n    // (undocumented)\n    getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry;\n    // (undocumented)\n    getInterpolatedProps(startShape: TLGeoShape, endShape: TLGeoShape, t: number): TLGeoShapeProps;\n    // (undocumented)\n    getText(shape: TLGeoShape): string;\n    // (undocumented)\n    indicator(shape: TLGeoShape): JSX_2.Element;\n    // (undocumented)\n    static migrations: TLPropsMigrations;\n    // (undocumented)\n    onBeforeCreate(shape: TLGeoShape): {\n        id: TLShapeId;\n        index: IndexKey;\n        isLocked: boolean;\n        meta: JsonObject;\n        opacity: number;\n        parentId: TLParentId;\n        props: {\n            align: \"end-legacy\" | \"end\" | \"middle-legacy\" | \"middle\" | \"start-legacy\" | \"start\";\n            color: \"black\" | \"blue\" | \"green\" | \"grey\" | \"light-blue\" | \"light-green\" | \"light-red\" | \"light-violet\" | \"orange\" | \"red\" | \"violet\" | \"white\" | \"yellow\";\n            dash: \"dashed\" | \"dotted\" | \"draw\" | \"solid\";\n            fill: \"fill\" | \"none\" | \"pattern\" | \"semi\" | \"solid\";\n            font: \"draw\" | \"mono\" | \"sans\" | \"serif\";\n            geo: \"arrow-down\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"check-box\" | \"cloud\" | \"diamond\" | \"ellipse\" | \"heart\" | \"hexagon\" | \"octagon\" | \"oval\" | \"pentagon\" | \"rectangle\" | \"rhombus-2\" | \"rhombus\" | \"star\" | \"trapezoid\" | \"triangle\" | \"x-box\";\n            growY: number;\n            h: number;\n            labelColor: \"black\" | \"blue\" | \"green\" | \"grey\" | \"light-blue\" | \"light-green\" | \"light-red\" | \"light-violet\" | \"orange\" | \"red\" | \"violet\" | \"white\" | \"yellow\";\n            richText: {\n                content: unknown[];\n                type: string;\n            };\n            scale: number;\n            size: \"l\" | \"m\" | \"s\" | \"xl\";\n            url: string;\n            verticalAlign: \"end\" | \"middle\" | \"start\";\n            w: number;\n        };\n        rotation: number;\n        type: \"geo\";\n        typeName: \"shape\";\n        x: number;\n        y: number;\n    } | undefined;\n    // (undocumented)\n    onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape): {\n        id: TLShapeId;\n        index: IndexKey;\n        isLocked: boolean;\n        meta: JsonObject;\n        opacity: number;\n        parentId: TLParentId;\n        props: {\n            align: \"end-legacy\" | \"end\" | \"middle-legacy\" | \"middle\" | \"start-legacy\" | \"start\";\n            color: \"black\" | \"blue\" | \"green\" | \"grey\" | \"light-blue\" | \"light-green\" | \"light-red\" | \"light-violet\" | \"orange\" | \"red\" | \"violet\" | \"white\" | \"yellow\";\n            dash: \"dashed\" | \"dotted\" | \"draw\" | \"solid\";\n            fill: \"fill\" | \"none\" | \"pattern\" | \"semi\" | \"solid\";\n            font: \"draw\" | \"mono\" | \"sans\" | \"serif\";\n            geo: \"arrow-down\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"check-box\" | \"cloud\" | \"diamond\" | \"ellipse\" | \"heart\" | \"hexagon\" | \"octagon\" | \"oval\" | \"pentagon\" | \"rectangle\" | \"rhombus-2\" | \"rhombus\" | \"star\" | \"trapezoid\" | \"triangle\" | \"x-box\";\n            growY: number;\n            h: number;\n            labelColor: \"black\" | \"blue\" | \"green\" | \"grey\" | \"light-blue\" | \"light-green\" | \"light-red\" | \"light-violet\" | \"orange\" | \"red\" | \"violet\" | \"white\" | \"yellow\";\n            richText: {\n                content: unknown[];\n                type: string;\n            };\n            scale: number;\n            size: \"l\" | \"m\" | \"s\" | \"xl\";\n            url: string;\n            verticalAlign: \"end\" | \"middle\" | \"start\";\n            w: number;\n        };\n        rotation: number;\n        type: \"geo\";\n        typeName: \"shape\";\n        x: number;\n        y: number;\n    } | undefined;\n    // (undocumented)\n    onDoubleClick(shape: TLGeoShape): {\n        id: TLShapeId;\n        index: IndexKey;\n        isLocked: boolean;\n        meta: JsonObject;\n        opacity: number;\n        parentId: TLParentId;\n        props: {\n            geo: \"check-box\";\n        };\n        rotation: number;\n        type: \"geo\";\n        typeName: \"shape\";\n        x: number;\n        y: number;\n    } | {\n        id: TLShapeId;\n        index: IndexKey;\n        isLocked: boolean;\n        meta: JsonObject;\n        opacity: number;\n        parentId: TLParentId;\n        props: {\n            geo: \"rectangle\";\n        };\n        rotation: number;\n        type: \"geo\";\n        typeName: \"shape\";\n        x: number;\n        y: number;\n    } | undefined;\n    // (undocumented)\n    onResize(shape: TLGeoShape, { handle, newPoint, scaleX, scaleY, initialShape }: TLResizeInfo<TLGeoShape>): {\n        props: {\n            growY: number;\n            h: number;\n            w: number;\n        };\n        x: number;\n        y: number;\n    };\n    // (undocumented)\n    static props: RecordProps<TLGeoShape>;\n    // (undocumented)\n    toSvg(shape: TLGeoShape, ctx: SvgExportContext): JSX_2.Element;\n    // (undocumented)\n    static type: \"geo\";\n}\n```\n\n----------------------------------------\n\nTITLE: Box Class Implementation in TypeScript\nDESCRIPTION: Defines a Box class for 2D rectangle manipulation with methods for geometry calculations, transformations and collision detection.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Box {\n    constructor(x?: number, y?: number, w?: number, h?: number);\n    get aspectRatio(): number;\n    get center(): Vec;\n    set center(v: Vec);\n    clone(): Box;\n    static Collides(A: Box, B: Box): boolean;\n    collides(B: Box): boolean;\n    static Common(boxes: Box[]): Box;\n    static Contains(A: Box, B: Box): boolean;\n    contains(B: Box): boolean;\n    // ... additional methods omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Atom Interface and Function in TypeScript\nDESCRIPTION: Declares an Atom interface extending Signal, and a function to create an Atom with options for computing diffs and managing history.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/state/api-report.api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Atom<Value, Diff = unknown> extends Signal<Value, Diff> {\n    set(value: Value, diff?: Diff): Value;\n    update(updater: (value: Value) => Value): Value;\n}\n\nexport function atom<Value, Diff = unknown>(\nname: string,\ninitialValue: Value,\noptions?: AtomOptions<Value, Diff>): Atom<Value, Diff>;\n```\n\n----------------------------------------\n\nTITLE: Creating External Controls for Tldraw Editor in TSX\nDESCRIPTION: This snippet demonstrates how to create external controls for the Tldraw editor using the custom useEditor hook to access the editor instance from the context.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/external-ui-context/README.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditor } from './EditorContext'\n\nfunction ExternalControls() {\n\tconst editor = useEditor()\n\n\treturn (\n\t\t<div className=\"external-controls\">\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\teditor.selectAll()\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tSelect All\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\teditor.deleteShapes(editor.getSelectedShapeIds())\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tDelete Selected\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Shapes in TLDraw\nDESCRIPTION: Shows two methods for deleting shapes using the Editor's deleteShapes method - either by ID or by passing the shape object directly.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\neditor.deleteShapes([shape.id])\neditor.deleteShapes([shape])\n```\n\n----------------------------------------\n\nTITLE: Registering After Delete Shape Handler in tldraw\nDESCRIPTION: This code demonstrates how to register a handler that runs after shapes are deleted. The example shows a pattern for deleting frames after the last shape inside them is removed, illustrating how to implement side effects after record deletion.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/after-delete-shape/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./AfterDeleteShapeExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Shape Interaction and State Methods in TLDraw\nDESCRIPTION: Methods for interacting with shapes, managing selection state, and handling user interactions with shapes in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDroppingOverShape(point: VecLike, droppingShapes?: TLShape[]): TLUnknownShape | undefined;\ngetEditingShape(): TLShape | undefined;\ngetEditingShapeId(): null | TLShapeId;\ngetErasingShapeIds(): TLShapeId[];\ngetErasingShapes(): NonNullable<TLShape | undefined>[];\ngetFocusedGroup(): TLShape | undefined;\ngetFocusedGroupId(): TLPageId | TLShapeId;\ngetHighestIndexForParent(parent: TLPage | TLParentId | TLShape): IndexKey;\ngetHintingShape(): NonNullable<TLShape | undefined>[];\ngetHintingShapeIds(): TLShapeId[];\ngetHoveredShape(): TLShape | undefined;\ngetHoveredShapeId(): null | TLShapeId;\ngetInitialMetaForShape(_shape: TLShape): JsonObject;\ngetInitialZoom(): number;\ngetInstanceState(): TLInstance;\n// (undocumented)\ngetIsFocused(): boolean;\n// @deprecated (undocumented)\ngetIsMenuOpen(): boolean;\n// (undocumented)\ngetIsReadonly(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Camera and Viewport Control Methods in TLDraw\nDESCRIPTION: Methods for managing the camera, viewport, and view state in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetCamera(): TLCamera;\ngetCameraOptions(): TLCameraOptions;\ngetCameraState(): \"idle\" | \"moving\";\ngetCanRedo(): boolean;\ngetCanUndo(): boolean;\ngetCollaborators(): TLInstancePresence[];\ngetCollaboratorsOnCurrentPage(): TLInstancePresence[];\ngetContainer: () => HTMLElement;\ngetContentFromCurrentPage(shapes: TLShape[] | TLShapeId[]): TLContent | undefined;\n// @internal\ngetCrashingError(): unknown;\ngetCroppingShapeId(): null | TLShapeId;\ngetCulledShapes(): Set<TLShapeId>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic tldraw Component in React\nDESCRIPTION: This snippet shows how to use the Tldraw component in a React application without collaboration features.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/blog/announcing-tldraw-sync.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tldraw } from 'tldraw'\n\nfunction MyApp() {\n  return <Tldraw />\n}\n```\n\n----------------------------------------\n\nTITLE: Shape Retrieval and Manipulation Methods in TLDraw\nDESCRIPTION: Methods for retrieving, manipulating, and querying shapes and their properties in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetShape<T extends TLShape = TLShape>(shape: TLParentId | TLShape): T | undefined;\ngetShapeAncestors(shape: TLShape | TLShapeId, acc?: TLShape[]): TLShape[];\ngetShapeAndDescendantIds(ids: TLShapeId[]): Set<TLShapeId>;\ngetShapeAtPoint(point: VecLike, opts?: {\n    filter?(shape: TLShape): boolean;\n    hitFrameInside?: boolean | undefined;\n    hitInside?: boolean | undefined;\n    hitLabels?: boolean | undefined;\n    hitLocked?: boolean | undefined;\n    margin?: number | undefined;\n    renderingOnly?: boolean | undefined;\n}): TLShape | undefined;\ngetShapeClipPath(shape: TLShape | TLShapeId): string | undefined;\ngetShapeGeometry<T extends Geometry2d>(shape: TLShape | TLShapeId, opts?: TLGeometryOpts): T;\ngetShapeHandles<T extends TLShape>(shape: T | T['id']): TLHandle[] | undefined;\ngetShapeLocalTransform(shape: TLShape | TLShapeId): Mat;\ngetShapeMask(shape: TLShape | TLShapeId): undefined | VecLike[];\ngetShapeMaskedPageBounds(shape: TLShape | TLShapeId): Box | undefined;\n// @internal\ngetShapeNearestSibling(siblingShape: TLShape, targetShape: TLShape | undefined): TLShape | undefined;\ngetShapePageBounds(shape: TLShape | TLShapeId): Box | undefined;\ngetShapePageGeometry<T extends Geometry2d>(shape: TLShape | TLShapeId, opts?: TLGeometryOpts): T;\ngetShapePageTransform(shape: TLShape | TLShapeId): Mat;\ngetShapeParent(shape?: TLShape | TLShapeId): TLShape | undefined;\ngetShapeParentTransform(shape: TLShape | TLShapeId): Mat;\ngetShapesAtPoint(point: VecLike, opts?: {\n    hitInside?: boolean | undefined;\n    margin?: number | undefined;\n}): TLShape[];\n```\n\n----------------------------------------\n\nTITLE: Creating Editor Context in TypeScript for Tldraw\nDESCRIPTION: This snippet defines a React Context for the Tldraw editor, including a custom hook for easy access to the editor instance.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/external-ui-context/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createContext, useContext } from 'react'\nimport { Editor } from '@tldraw/tldraw'\n\nconst EditorContext = createContext<Editor | null>(null)\n\nexport function useEditor() {\n\tconst editor = useContext(EditorContext)\n\tif (!editor) {\n\t\tthrow new Error('useEditor must be used within an EditorProvider')\n\t}\n\treturn editor\n}\n\nexport { EditorContext }\n```\n\n----------------------------------------\n\nTITLE: Shape Grouping and Utility Methods in TLDraw\nDESCRIPTION: Methods for grouping shapes and checking relationships between shapes in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\ngroupShapes(shapes: TLShape[], opts?: Partial<{\n    groupId: TLShapeId;\n    select: boolean;\n}>): this;\n// (undocumented)\ngroupShapes(ids: TLShapeId[], opts?: Partial<{\n    groupId: TLShapeId;\n    select: boolean;\n}>): this;\nhasAncestor(shape: TLShape | TLShapeId | undefined, ancestorId: TLShapeId): boolean;\n// (undocumented)\nhasExternalAssetHandler(type: TLExternalAsset['type']): boolean;\nhasShapeUtil<S extends TLUnknownShape>(shape: S | TLShapePartial<S>): boolean;\n// (undocumented)\nhasShapeUtil<S extends TLUnknownShape>(type: S['type']): boolean;\n// (undocumented)\nhasShapeUtil<T extends ShapeUtil>(type: T extends ShapeUtil<infer R> ? R['type'] : string): boolean;\nprotected readonly history: HistoryManager<TLRecord>;\n// (undocumented)\nreadonly id: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Record Types in TypeScript for @tldraw/store\nDESCRIPTION: This snippet demonstrates how to create interface definitions for record types in @tldraw/store. It shows the structure for Book and Author records, extending the BaseRecord type.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Book extends BaseRecord<'book'> {\n\ttitle: string\n\tauthor: ID<Author>\n\tnumPages: number\n}\n\ninterface Author extends BaseRecord<'author'> {\n\tname: string\n\tisPseudonym: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Saving tldraw State with getSnapshot\nDESCRIPTION: Creates a save button component that uses getSnapshot to capture the current document and session state, which can then be saved to an external storage system.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SaveButton({ documentId, userId }) {\n\tconst editor = useEditor()\n\treturn (\n\t\t<button\n\t\t\tonClick={() => {\n\t\t\t\tconst { document, session } = getSnapshot(editor.store)\n\t\t\t\t// If you are building a multi-user app, you probably want to store\n\t\t\t\t// the document and session states separately because the\n\t\t\t\t// session state is user-specific and normally shouldn't be shared.\n\t\t\t\tawait saveDocumentState(documentId, document)\n\t\t\t\tawait saveSessionState(documentId, userId, session)\n\t\t\t}}\n\t\t>\n\t\t\tSave\n\t\t</button>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Control for Tldraw Editor in TypeScript\nDESCRIPTION: This React component demonstrates how to implement focus control for a Tldraw editor. It uses the useEditor hook to access the editor instance and manages focus state with React's useState. The component includes buttons to focus and blur the editor, affecting keyboard shortcut functionality.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/editor-focus/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function EditorFocusExample() {\n\tconst [isFocused, setIsFocused] = React.useState(false)\n\n\tconst focusEditor: TLUiEventHandler = React.useCallback((editor) => {\n\t\teditor.setFocusedState(true)\n\t\tsetIsFocused(true)\n\t}, [])\n\n\tconst blurEditor: TLUiEventHandler = React.useCallback((editor) => {\n\t\teditor.setFocusedState(false)\n\t\tsetIsFocused(false)\n\t}, [])\n\n\treturn (\n\t\t<div className=\"editorWithControls\">\n\t\t\t<div className=\"controls\">\n\t\t\t\t<button onClick={focusEditor}>Focus editor</button>\n\t\t\t\t<button onClick={blurEditor}>Blur editor</button>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"editor\"\n\t\t\t\tstyle={{\n\t\t\t\t\toutline: isFocused ? '2px solid blue' : 'none',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Tldraw onMount={focusEditor} autoFocus />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding the UI in tldraw with hideUi prop in React\nDESCRIPTION: This example demonstrates how to hide the default tldraw user interface using the hideUi prop, which disables both visual UI elements and keyboard shortcuts.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/user-interface.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n\treturn <Tldraw hideUi />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current Tool in tldraw\nDESCRIPTION: Examples of how to change the active tool using editor.setCurrentTool(), including basic and deep transitions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/tools.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\neditor.setCurrentTool('select')\n```\n\nLANGUAGE: typescript\nCODE:\n```\neditor.setCurrentTool('select.eraser.pointing')\n```\n\n----------------------------------------\n\nTITLE: Creating TLDraw Store Schema and Store\nDESCRIPTION: Functions for initializing TLDraw store schema and store instances. These are building blocks for setting up the data store for TLDraw applications.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useTLSchemaFromUtils(opts: TLStoreSchemaOptions): StoreSchema<TLRecord, TLStoreProps>;\n\nexport function useTLStore(opts: TLStoreOptions): TLStore;\n```\n\n----------------------------------------\n\nTITLE: LocalIndexedDb Class Implementation\nDESCRIPTION: A class that handles persistence of application data in IndexedDB, providing methods to store and retrieve assets, changes, and snapshots. It manages database connections and session data.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class LocalIndexedDb {\n    constructor(persistenceKey: string);\n    // (undocumented)\n    close(): Promise<void>;\n    // (undocumented)\n    static connectedInstances: Set<LocalIndexedDb>;\n    // (undocumented)\n    getAsset(assetId: string): Promise<File | undefined>;\n    // (undocumented)\n    load({ sessionId }?: {\n        sessionId?: string;\n    }): Promise<{\n        records: any[];\n        schema: any;\n        sessionStateSnapshot: TLSessionStateSnapshot | undefined;\n    }>;\n    pending(): Promise<void>;\n    // (undocumented)\n    pruneSessions(): Promise<void>;\n    // (undocumented)\n    removeAssets(assetId: string[]): Promise<void>;\n    // (undocumented)\n    storeAsset(assetId: string, blob: File): Promise<void>;\n    // (undocumented)\n    storeChanges({ schema, changes, sessionId, sessionStateSnapshot, }: {\n        changes: RecordsDiff<any>;\n        schema: TLStoreSchema;\n        sessionId?: null | string;\n        sessionStateSnapshot?: null | TLSessionStateSnapshot;\n    }): Promise<void>;\n    // (undocumented)\n    storeSnapshot({ schema, snapshot, sessionId, sessionStateSnapshot, }: {\n        schema: TLStoreSchema;\n        sessionId?: null | string;\n        sessionStateSnapshot?: null | TLSessionStateSnapshot;\n        snapshot: SerializedStore<any>;\n    }): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Tldraw Component in React\nDESCRIPTION: Example of importing the Tldraw component and its CSS, and using it in a React component with full-screen styling.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport 'tldraw/tldraw.css'\n\nexport default function () {\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1VideoAsset Interface in TypeScript\nDESCRIPTION: Interface for video assets in tldraw version 1, extending the base asset interface. The interface is incomplete in the provided code snippet.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1VideoAsset extends TLV1BaseAsset {\n    // (undocumented)\n\n```\n\n----------------------------------------\n\nTITLE: Navigation and Shape Finding Methods in TLDraw\nDESCRIPTION: Methods for navigating between shapes, finding shapes at specific points, and managing selection in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\ngetMarkIdMatching(idSubstring: string): null | string;\ngetNearestAdjacentShape(currentShapeId: TLShapeId, direction: 'down' | 'left' | 'right' | 'up'): TLShapeId;\ngetOnlySelectedShape(): null | TLShape;\ngetOnlySelectedShapeId(): null | TLShapeId;\n// @deprecated (undocumented)\ngetOpenMenus(): string[];\ngetOutermostSelectableShape(shape: TLShape | TLShapeId, filter?: (shape: TLShape) => boolean): TLShape;\ngetPage(page: TLPage | TLPageId): TLPage | undefined;\ngetPages(): TLPage[];\ngetPageShapeIds(page: TLPage | TLPageId): Set<TLShapeId>;\ngetPageStates(): TLInstancePageState[];\ngetPath(): string;\ngetPointInParentSpace(shape: TLShape | TLShapeId, point: VecLike): Vec;\ngetPointInShapeSpace(shape: TLShape | TLShapeId, point: VecLike): Vec;\ngetRenderingShapes(): TLRenderingShape[];\ngetRichTextEditor(): null | TiptapEditor;\ngetSelectedShapeAtPoint(point: VecLike): TLShape | undefined;\ngetSelectedShapeIds(): TLShapeId[];\ngetSelectedShapes(): TLShape[];\ngetSelectionPageBounds(): Box | null;\ngetSelectionRotatedPageBounds(): Box | undefined;\ngetSelectionRotatedScreenBounds(): Box | undefined;\ngetSelectionRotation(): number;\n```\n\n----------------------------------------\n\nTITLE: Implementing StateNode Class for Event Handling in TypeScript\nDESCRIPTION: Abstract class for creating hierarchical state nodes that handle tldraw events, with methods for state transitions, event handling, and lifecycle management.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport abstract class StateNode implements Partial<TLEventHandlers> {\n    constructor(editor: Editor, parent?: StateNode);\n    // (undocumented)\n    static children?: () => TLStateNodeConstructor[];\n    // (undocumented)\n    children?: Record<string, StateNode>;\n    _currentToolIdMask: Atom<string | undefined, unknown>;\n    // (undocumented)\n    editor: Editor;\n    // (undocumented)\n    enter(info: any, from: string): void;\n    // (undocumented)\n    exit(info: any, from: string): void;\n    getCurrent(): StateNode | undefined;\n    // (undocumented)\n    getCurrentToolIdMask(): string | undefined;\n    getIsActive(): boolean;\n    getPath(): string;\n    // (undocumented)\n    handleEvent(info: Exclude<TLEventInfo, TLPinchEventInfo>): void;\n    // (undocumented)\n    static id: string;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    static initial?: string;\n    // (undocumented)\n    initial?: string;\n    // (undocumented)\n    static isLockable: boolean;\n    // (undocumented)\n    isLockable: boolean;\n    // (undocumented)\n    onCancel?(info: TLCancelEventInfo): void;\n    // (undocumented)\n    onComplete?(info: TLCompleteEventInfo): void;\n    // (undocumented)\n    onDoubleClick?(info: TLClickEventInfo): void;\n    // (undocumented)\n    onEnter?(info: any, from: string): void;\n    // (undocumented)\n    onExit?(info: any, to: string): void;\n    // (undocumented)\n    onInterrupt?(info: TLInterruptEventInfo): void;\n    // (undocumented)\n    onKeyDown?(info: TLKeyboardEventInfo): void;\n    // (undocumented)\n    onKeyRepeat?(info: TLKeyboardEventInfo): void;\n    // (undocumented)\n    onKeyUp?(info: TLKeyboardEventInfo): void;\n    // (undocumented)\n    onLongPress?(info: TLPointerEventInfo): void;\n    // (undocumented)\n    onMiddleClick?(info: TLPointerEventInfo): void;\n    // (undocumented)\n    onPointerDown?(info: TLPointerEventInfo): void;\n    // (undocumented)\n    onPointerMove?(info: TLPointerEventInfo): void;\n    // (undocumented)\n    onPointerUp?(info: TLPointerEventInfo): void;\n    // (undocumented)\n    onQuadrupleClick?(info: TLClickEventInfo): void;\n    // (undocumented)\n    onRightClick?(info: TLPointerEventInfo): void;\n    // (undocumented)\n    onTick?(info: TLTickEventInfo): void;\n    // (undocumented)\n    onTripleClick?(info: TLClickEventInfo): void;\n    // (undocumented)\n    onWheel?(info: TLWheelEventInfo): void;\n    // (undocumented)\n    parent: StateNode;\n    // (undocumented)\n    _path: Computed<string>;\n    // (undocumented)\n    performanceTracker: PerformanceTracker;\n    // (undocumented)\n    setCurrentToolIdMask(id: string | undefined): void;\n    // (undocumented)\n    shapeType?: string;\n    transition(id: string, info?: any): this;\n    // (undocumented)\n    type: 'branch' | 'leaf' | 'root';\n    // (undocumented)\n    static useCoalescedEvents: boolean;\n    // (undocumented)\n    useCoalescedEvents: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Persistence with persistenceKey in tldraw\nDESCRIPTION: Sets up a tldraw component with local persistence using the persistenceKey prop, which stores the editor contents to the browser's IndexedDB and allows retrieval on subsequent visits.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport 'tldraw/tldraw.css'\n\nexport default function () {\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw persistenceKey=\"my-persistence-key\" />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in tldraw (TSX)\nDESCRIPTION: This snippet demonstrates how to parse and navigate to deep links using the `parseDeepLinkString` and `Editor#navigateToDeepLink` methods. It shows different ways to pass deep link information to the editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/deep-links/README.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\neditor.navigateToDeepLink(parseDeepLinkString('pabc123'))\n// or pass in a url\neditor.navigateToDeepLink({ url: 'https://my-app.com/document-name?d=pabc123' })\n// or call without options to use the current `window.location`\neditor.navigateToDeepLink()\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Multiple tldraw Instances with persistenceKey\nDESCRIPTION: Demonstrates how to synchronize two tldraw instances using the same persistenceKey, allowing them to share document content while maintaining independent instance states like selections.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport 'tldraw/tldraw.css'\n\nexport default function () {\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<div style={{ width: '50%', height: '100%' }}>\n\t\t\t\t<Tldraw persistenceKey=\"my-persistence-key\" />\n\t\t\t</div>\n\t\t\t<div style={{ width: '50%', height: '100%' }}>\n\t\t\t\t<Tldraw persistenceKey=\"my-persistence-key\" />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading tldraw State with loadSnapshot\nDESCRIPTION: Creates a load button component that retrieves document and session state from an external storage system and loads it into the editor using loadSnapshot.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LoadButton({ documentId, userId }) {\n\tconst editor = useEditor()\n\treturn (\n\t\t<button\n\t\t\tonClick={() => {\n\t\t\t\tconst document = await loadDocumentState(documentId)\n\t\t\t\tconst session = await loadSessionState(documentId, userId)\n\t\t\t\teditor.setCurrentTool('select') // need to reset tool state separately\n\t\t\t\tloadSnapshot(editor.store, { document, session })\n\t\t\t}}\n\t\t>\n\t\t\tLoad\n\t\t</button>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Image Shape Utility Implementation\nDESCRIPTION: TypeScript class extending BaseBoxShapeUtil to handle image shape operations including resizing, cropping and SVG export.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {\n    canCrop(): boolean;\n    component(shape: TLImageShape): JSX_2.Element;\n    getAriaDescriptor(shape: TLImageShape): string;\n    getDefaultProps(): TLImageShape['props'];\n    getInterpolatedProps(startShape: TLImageShape, endShape: TLImageShape, t: number): TLImageShapeProps;\n    indicator(shape: TLImageShape): JSX_2.Element | null;\n    isAspectRatioLocked(): boolean;\n    static migrations: TLPropsMigrations;\n    onDoubleClickEdge(shape: TLImageShape): void;\n    onResize(shape: TLImageShape, info: TLResizeInfo<TLImageShape>): TLImageShape;\n    static props: RecordProps<TLImageShape>;\n    toSvg(shape: TLImageShape, ctx: SvgExportContext): Promise<JSX_2.Element | null>;\n    static type: \"image\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FrameShapeUtil Class in TypeScript\nDESCRIPTION: A utility class for frame shapes that handles rendering, interaction, and transformation of frame shapes in tldraw.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FrameShapeUtil extends BaseBoxShapeUtil<TLFrameShape> {\n    // (undocumented)\n    canDropShapes(shape: TLFrameShape, _shapes: TLShape[]): boolean;\n    // (undocumented)\n    canEdit(): boolean;\n    // (undocumented)\n    canReceiveNewChildrenOfType(shape: TLShape, _type: TLShape['type']): boolean;\n    // (undocumented)\n    component(shape: TLFrameShape): JSX_2.Element;\n    // (undocumented)\n    static configure<T extends TLShapeUtilConstructor<any, any>>(this: T, options: T extends new (...args: any[]) => {\n        options: infer Options;\n    } ? Partial<Options> : never): T;\n    // (undocumented)\n    getAriaDescriptor(shape: TLFrameShape): string;\n    // (undocumented)\n    getDefaultProps(): TLFrameShape['props'];\n    // (undocumented)\n    getGeometry(shape: TLFrameShape): Geometry2d;\n    // (undocumented)\n    getInterpolatedProps(startShape: TLFrameShape, endShape: TLFrameShape, t: number): TLFrameShapeProps;\n    // (undocumented)\n    getText(shape: TLFrameShape): string | undefined;\n    // (undocumented)\n    indicator(shape: TLFrameShape): JSX_2.Element;\n    // (undocumented)\n    static migrations: TLPropsMigrations;\n    // (undocumented)\n    onDragShapesOut(_shape: TLFrameShape, shapes: TLShape[]): void;\n    // (undocumented)\n    onDragShapesOver(frame: TLFrameShape, shapes: TLShape[]): void;\n    // (undocumented)\n    onResize(shape: any, info: TLResizeInfo<any>): any;\n    // (undocumented)\n    options: FrameShapeOptions;\n    // (undocumented)\n    static props: RecordProps<TLFrameShape>;\n    // (undocumented)\n    providesBackgroundForChildren(): boolean;\n    // (undocumented)\n    toSvg(shape: TLFrameShape, ctx: SvgExportContext): JSX_2.Element;\n    // (undocumented)\n    static type: \"frame\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using DerivationCache in TypeScript with @tldraw/store\nDESCRIPTION: This snippet shows how to create and use a DerivationCache, which is used to create a cache of derived records based on certain conditions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst derivationCache = new DerivationCache('popular_authors', (record) => {\n\treturn record.popularity > 62 ? record : undefined\n})\n```\n\n----------------------------------------\n\nTITLE: TLDraw Editor API Documentation Header\nDESCRIPTION: Frontmatter metadata for the TLDraw editor API documentation, specifying component path, category, and relevant keywords.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Controlling the editor\ncomponent: ./APIExample.tsx\ncategory: editor-api\npriority: 1\nkeywords: [api, create shape, update shape, mount, context]\n---\n```\n\n----------------------------------------\n\nTITLE: Shape Management Method Declarations\nDESCRIPTION: Method signatures for managing shapes including creation, deletion, duplication and manipulation operations\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePage(page: Partial<TLPage>): this;\ncreateShape<T extends TLUnknownShape>(shape: OptionalKeys<TLShapePartial<T>, 'id'>): this;\ncreateShapes<T extends TLUnknownShape>(shapes: OptionalKeys<TLShapePartial<T>, 'id'>[]): this;\ndeleteShape(id: TLShapeId): this;\ndeleteShapes(ids: TLShapeId[]): this;\nduplicateShapes(shapes: TLShape[] | TLShapeId[], offset?: VecLike): this;\ndistributeShapes(shapes: TLShape[] | TLShapeId[], operation: 'horizontal' | 'vertical'): this;\n```\n\n----------------------------------------\n\nTITLE: Initializing Tldraw Component for Slideshow in React TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Tldraw component in a React application for a slideshow presentation. It includes custom styles for full-width and height, and uses the useTldrawApp hook for accessing the Tldraw instance.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/slideshow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw, useApp } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function SlideShowExample() {\n\treturn (\n\t\t<div style={{ position: 'relative', width: '100%', height: '100%' }}>\n\t\t\t<Tldraw\n\t\t\t\tshowMenu={false}\n\t\t\t\tshowPages={false}\n\t\t\t\tshowStyles={false}\n\t\t\t\tshowTools={false}\n\t\t\t\tshowUI={false}\n\t\t\t\tshowZoom={false}\n\t\t\t\tautofocus\n\t\t\t>\n\t\t\t\t<Controls />\n\t\t\t</Tldraw>\n\t\t</div>\n\t)\n}\n\nfunction Controls() {\n\tconst app = useApp()\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Custom Grid on Canvas using TypeScript in tldraw\nDESCRIPTION: This code snippet demonstrates how to create a custom grid on the canvas using tldraw. It uses a 2D canvas context to draw major and minor grid lines, allowing for a customized background layout.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-grid/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code not provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Defining Serialization Functions for tldraw in TypeScript\nDESCRIPTION: Function declarations for serializing tldraw content to JSON and Blob formats. These utility functions convert the editor state to a portable format for saving or sharing.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function serializeTldrawJson(editor: Editor): Promise<string>;\n\nexport function serializeTldrawJsonBlob(editor: Editor): Promise<Blob>;\n```\n\n----------------------------------------\n\nTITLE: TLDraw Shape Modification Documentation\nDESCRIPTION: Example demonstrates registering handlers to intercept shape creation and updates, allowing for custom modifications before the shape is stored. This can be used to enforce constraints or modify shape properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/before-create-update-shape/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Before create/update shape\ncomponent: ./BeforeCreateUpdateShapeExample.tsx\ncategory: editor-api\npriority: 4\nkeywords: [handler, register, side effects, records]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Default Style Types in TypeScript\nDESCRIPTION: Defines default style types for shapes in tldraw, including color, dash, fill, font, and alignment styles.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type TLDefaultBinding = TLArrowBinding;\n\n// @public (undocumented)\nexport type TLDefaultColorStyle = T.TypeOf<typeof DefaultColorStyle>;\n\n// @public (undocumented)\nexport type TLDefaultColorTheme = Expand<{\n    background: string;\n    id: 'dark' | 'light';\n    solid: string;\n    text: string;\n} & Record<(typeof defaultColorNames)[number], TLDefaultColorThemeColor>>;\n\n// @public (undocumented)\nexport interface TLDefaultColorThemeColor {\n    // (undocumented)\n    fill: string;\n    // (undocumented)\n    frame: {\n        fill: string;\n        headingFill: string;\n        headingStroke: string;\n        stroke: string;\n        text: string;\n    };\n    // (undocumented)\n    highlight: {\n        p3: string;\n        srgb: string;\n    };\n    // (undocumented)\n    note: {\n        fill: string;\n        text: string;\n    };\n    // (undocumented)\n    pattern: string;\n    // (undocumented)\n    semi: string;\n    // (undocumented)\n    solid: string;\n}\n\n// @public (undocumented)\nexport type TLDefaultDashStyle = T.TypeOf<typeof DefaultDashStyle>;\n\n// @public (undocumented)\nexport type TLDefaultFillStyle = T.TypeOf<typeof DefaultFillStyle>;\n\n// @public (undocumented)\nexport type TLDefaultFontStyle = T.TypeOf<typeof DefaultFontStyle>;\n\n// @public (undocumented)\nexport type TLDefaultHorizontalAlignStyle = T.TypeOf<typeof DefaultHorizontalAlignStyle>;\n\n// @public\nexport type TLDefaultShape = TLArrowShape | TLBookmarkShape | TLDrawShape | TLEmbedShape | TLFrameShape | TLGeoShape | TLGroupShape | TLHighlightShape | TLImageShape | TLLineShape | TLNoteShape | TLTextShape | TLVideoShape;\n\n// @public (undocumented)\nexport type TLDefaultSizeStyle = T.TypeOf<typeof DefaultSizeStyle>;\n\n// @public (undocumented)\nexport type TLDefaultTextAlignStyle = T.TypeOf<typeof DefaultTextAlignStyle>;\n\n// @public (undocumented)\nexport type TLDefaultVerticalAlignStyle = T.TypeOf<typeof DefaultVerticalAlignStyle>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Shapes and Bindings for Tldraw Sync\nDESCRIPTION: This example shows how to configure custom shapes and bindings for tldraw sync on both client and server sides. It demonstrates passing custom utils to the useSync hook and creating a schema for the server using createTLSchema.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/sync.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw, defaultShapeUtils, defaultBindingUtils } from 'tldraw'\nimport { useSync } from '@tldraw/sync'\n\nfunction MyApp() {\n\tconst store = useSync({\n\t\turi: '...',\n\t\tassets: myAssetStore,\n\t\tshapeUtils: useMemo(() => [...customShapeUtils, ...defaultShapeUtils], []),\n\t\tbindingUtils: useMemo(() => [...customBindingUtils, ...defaultBindingUtils], []),\n\t})\n\n\treturn <Tldraw store={store} shapeUtils={customShapeUtils} bindingUtils={customBindingUtils} />\n}\n\nimport { createTLSchema, defaultShapeSchemas, defaultBindingSchemas } from '@tldraw/tlschema'\nimport { TLSocketRoom } from '@tldraw/sync-core'\n\nconst schema = createTLSchema({\n\tshapes: {\n\t\t...defaultShapeSchemas,\n\n\t\tmyCustomShape: {\n\t\t\t// Validations for this shapes `props`.\n\t\t\tprops: myCustomShapeProps,\n\t\t\t// Migrations between versions of this shape.\n\t\t\tmigrations: myCustomShapeMigrations,\n\t\t},\n\n\t\t// The schema knows about this shape, but it has no migrations or validation.\n\t\tmySimpleShape: {},\n\t},\n\tbindings: defaultBindingSchemas,\n})\n\n// Later, in your app server:\nconst room = new TLSocketRoom({\n\tschema: schema,\n\t// ...\n})\n```\n\n----------------------------------------\n\nTITLE: Running tldraw Migrations Manually\nDESCRIPTION: Shows how to manually run migrations on a snapshot without loading it into the store, checking for success or failure of the migration process.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTLSchema } from 'tldraw'\n\nconst snapshot = await getSnapshotFromSomewhere()\nconst migrationResult = createTLSchema().migrateStoreSnapshot(snapshot)\nif (migrationResult.type === 'success') {\n\tconsole.log('Migrated snapshot', migrationResult.value)\n} else {\n\tconsole.error('Migration failed', migrationResult.reason)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode in TLDraw\nDESCRIPTION: Shows how to enable dark mode using the UserPreferencesManager.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\neditor.user.updateUserPreferences({ colorScheme: 'dark' })\n```\n\n----------------------------------------\n\nTITLE: Defining TLDraw Editor State Types\nDESCRIPTION: TypeScript interface defining the core editor state including active states, inputs, shapes, and collaboration features\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  activeStateNode: string;\n  collaboratorCount: number;\n  editingShape: TLUnknownShape | undefined;\n  inputs: {\n    buttons: Set<number>;\n    keys: Set<string>;\n    originScreenPoint: Vec;\n    originPagePoint: Vec;\n    currentScreenPoint: Vec;\n    currentPagePoint: Vec;\n    previousScreenPoint: Vec;\n    previousPagePoint: Vec;\n    pointerVelocity: Vec;\n    altKey: boolean;\n    ctrlKey: boolean;\n    isPen: boolean;\n    metaKey: boolean;\n    shiftKey: boolean;\n    isDragging: boolean;\n    isEditing: boolean;\n    isPanning: boolean;\n    isPinching: boolean;\n    isPointing: boolean;\n    isSpacebarPanning: boolean;\n  };\n  instanceState: TLInstance;\n  pageState: TLInstancePageState;\n  selectedShapes: [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Toast and Dialog Component Example\nDESCRIPTION: Example file path and metadata for the toast and dialog implementation example, including component location and related keywords for UI components.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/toasts-and-dialogs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Toasts and dialogs\ncomponent: ./ToastsDialogsExample.tsx\ncategory: ui\npriority: 3\nkeywords: [ui, components, dialogs, toasts]\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Frame Colors in tldraw Editor (TypeScript)\nDESCRIPTION: This code snippet shows how to enable colored fills and headings for frame shapes in tldraw by setting the 'showFrameColors' editor option to true.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/frame-colors/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\neditor.showFrameColors\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Content Types in TypeScript\nDESCRIPTION: Defines configuration objects for various embeddable content types including dimensions, hostnames, and URL transformation functions. Each object specifies properties like width, height, resize capabilities, and domain restrictions for different platforms.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly fromEmbedUrl: (url: string) => string | undefined;\nreadonly height: 400;\nreadonly hostnames: readonly [\"scratch.mit.edu\"];\nreadonly title: \"Scratch\";\nreadonly toEmbedUrl: (url: string) => string | undefined;\nreadonly type: \"scratch\";\nreadonly width: 520;\n```\n\n----------------------------------------\n\nTITLE: Implementing toSvg Method for Custom Shape in tldraw\nDESCRIPTION: This snippet demonstrates how to define the toSvg method in a shape util for a custom shape in tldraw. The method determines how the shape appears when exported or copied as an SVG or PNG image.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/toSvg-method-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example implementation would go here\n```\n\n----------------------------------------\n\nTITLE: Implementing useEditableRichText hook for rich text editing in TLDraw\nDESCRIPTION: A custom React hook that provides rich text editing functionality for shapes, supporting formatted text with various styling options and event handlers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_112\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useEditableRichText(shapeId: TLShapeId, type: string, richText?: TLRichText): {\n    handleBlur: () => void;\n    handleChange: ({ richText }: {\n        richText: TLRichText;\n    }) => void;\n    handleDoubleClick: (e: any) => any;\n    handleFocus: () => void;\n    handleInputPointerDown: (e: PointerEvent_2<Element>) => void;\n    handleKeyDown: (e: KeyboardEvent) => void;\n    isEditing: boolean;\n    isEmpty: boolean | undefined;\n    isReadyForEditing: boolean;\n    rInput: RefObject<HTMLDivElement>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Bookmark Types in TypeScript\nDESCRIPTION: Defines bookmark asset and shape types for the tldraw application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type TLBookmarkAsset = TLBaseAsset<'bookmark', {\n    description: string;\n    favicon: string;\n    image: string;\n    src: null | string;\n    title: string;\n}>;\n\n// @public (undocumented)\nexport type TLBookmarkShape = TLBaseShape<'bookmark', TLBookmarkShapeProps>;\n\n// @public (undocumented)\nexport interface TLBookmarkShapeProps {\n    // (undocumented)\n    assetId: null | TLAssetId;\n    // (undocumented)\n    h: number;\n    // (undocumented)\n    url: string;\n    // (undocumented)\n    w: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration for New Property in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement up and down migrations for adding and removing the 'ownerId' property in the shapeTypeMigrations object.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const shapeTypeMigrations = defineMigrations({\n  currentVersion: Versions.Initial,\n  firstVersion: Versions.Initial,\n  migrators: {\n    [Versions.AddOwnerId]: {\n      // add ownerId property\n      up: (shape) => ({...shape, ownerId: null}),\n      // remove ownerId property\n      down: ({ownerId, ...shape}) => shape,\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Creating Shapes in TLDraw\nDESCRIPTION: Shows how to create new shapes using the Editor's createShapes method. Example creates a rectangle with specific properties like size, color and dash style.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\neditor.createShapes([\n\t{\n\t\tid,\n\t\ttype: 'geo',\n\t\tx: 0,\n\t\ty: 0,\n\t\tprops: {\n\t\t\tgeo: 'rectangle',\n\t\t\tw: 100,\n\t\t\th: 100,\n\t\t\tdash: 'draw',\n\t\t\tcolor: 'blue',\n\t\t\tsize: 'm',\n\t\t},\n\t},\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Default Shape Tools\nDESCRIPTION: Defines an array of default shape tools including Text, Draw, Geo, Note, Line, Frame, Arrow and Highlight tools.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const defaultShapeTools: readonly [typeof TextShapeTool, typeof DrawShapeTool, typeof GeoShapeTool, typeof NoteShapeTool, typeof LineShapeTool, typeof FrameShapeTool, typeof ArrowShapeTool, typeof HighlightShapeTool];\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in TypeScript for @tldraw/store\nDESCRIPTION: This snippet shows how to define custom types using the BaseRecord type provided by @tldraw/store. It demonstrates creating a custom AuthorRecord type.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype AuthorRecord extends BaseRecord<\"author\"> {\n  name: string\n  age: number\n  living: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Address for Copyright Infringement Notices in Markdown\nDESCRIPTION: This snippet shows how to format an email address for copyright infringement notices using Markdown syntax. It's part of the contact information provided for users to report alleged copyright infringements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/dotcom/client/TERMS_OF_SERVICE.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Email:** hello@tldraw.com\n```\n\n----------------------------------------\n\nTITLE: Defining TLStore and TLStoreProps in TypeScript\nDESCRIPTION: Defines the TLStore type and TLStoreProps interface, which are core components for managing the application state in TLDraw. TLStoreProps includes properties for assets, collaboration settings, and initialization functions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TLStore = Store<TLRecord, TLStoreProps>;\n\n// @public (undocumented)\nexport interface TLStoreProps {\n    // (undocumented)\n    assets: Required<TLAssetStore>;\n    // (undocumented)\n    collaboration?: {\n        mode?: null | Signal<'readonly' | 'readwrite'>;\n        status: null | Signal<'offline' | 'online'>;\n    };\n    // (undocumented)\n    defaultName: string;\n    onMount(editor: unknown): (() => void) | void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GroupShapeUtil for TLDraw Group Shapes\nDESCRIPTION: A utility class for working with group shapes in TLDraw. It extends ShapeUtil and provides methods for handling group-specific behaviors like binding, geometry calculation, and rendering indicators.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport class GroupShapeUtil extends ShapeUtil<TLGroupShape> {\n    // (undocumented)\n    canBind(): boolean;\n    // (undocumented)\n    canTabTo(): boolean;\n    // (undocumented)\n    component(shape: TLGroupShape): JSX_2.Element | null;\n    // (undocumented)\n    getDefaultProps(): TLGroupShape['props'];\n    // (undocumented)\n    getGeometry(shape: TLGroupShape): Geometry2d;\n    // (undocumented)\n    hideSelectionBoundsFg(): boolean;\n    // (undocumented)\n    indicator(shape: TLGroupShape): JSX_2.Element;\n    // (undocumented)\n    static migrations: TLPropsMigrations;\n    // (undocumented)\n    onChildrenChange(group: TLGroupShape): void;\n    // (undocumented)\n    static props: RecordProps<TLGroupShape>;\n    // (undocumented)\n    static type: \"group\";\n}\n```\n\n----------------------------------------\n\nTITLE: Timer Management Class\nDESCRIPTION: A class for managing timers with context-based scoping, including setTimeout, setInterval and requestAnimationFrame.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/utils/api-report.api.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Timers {\n    constructor();\n    dispose(contextId: string): void;\n    disposeAll(): void;\n    forContext(contextId: string): {\n        dispose: () => void;\n        requestAnimationFrame: (callback: FrameRequestCallback) => number;\n        setInterval: (handler: TimerHandler, timeout?: number, ...args: any[]) => number;\n        setTimeout: (handler: TimerHandler, timeout?: number, ...args: any[]) => number;\n    };\n    requestAnimationFrame(contextId: string, callback: FrameRequestCallback): number;\n    setInterval(contextId: string, handler: TimerHandler, timeout?: number, ...args: any[]): number;\n    setTimeout(contextId: string, handler: TimerHandler, timeout?: number, ...args: any[]): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angle and Trigonometric Utility Functions in TypeScript\nDESCRIPTION: Utility functions for angle manipulation and trigonometric calculations, including shortAngleDist for finding the shortest angle between two angles and snapAngle for snapping angles to segments.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function shortAngleDist(a0: number, a1: number): number;\n\n// @public (undocumented)\nexport const SIDES: readonly [\"top\", \"right\", \"bottom\", \"left\"];\n\nexport { Signal }\n\n// @public (undocumented)\nexport const SIN: (x: number) => number;\n\n// @public\nexport function snapAngle(r: number, segments: number): number;\n```\n\n----------------------------------------\n\nTITLE: Getting Shape References in TLDraw\nDESCRIPTION: Shows how to retrieve shape references using the Editor's getShape method, either by ID or shape object.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\neditor.getShape(myShapeId)\neditor.getShape(myShape)\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Document Interface in TypeScript\nDESCRIPTION: Interface for the document structure in tldraw version 1. It includes properties for assets, pages, page states, version, and document metadata.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1Document {\n    // (undocumented)\n    assets: Record<string, TLV1Asset>;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    pages: Record<string, TLV1Page>;\n    // (undocumented)\n    pageStates: Record<string, TLV1PageState>;\n    // (undocumented)\n    version: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Shape Utilities\nDESCRIPTION: Defines an array of shape utility classes for handling different types of shapes like Text, Bookmark, Draw, Geo, Note, etc.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const defaultShapeUtils: readonly [typeof TextShapeUtil, typeof BookmarkShapeUtil, typeof DrawShapeUtil, typeof GeoShapeUtil, typeof NoteShapeUtil, typeof LineShapeUtil, typeof FrameShapeUtil, typeof ArrowShapeUtil, typeof HighlightShapeUtil, typeof EmbedShapeUtil, typeof ImageShapeUtil, typeof VideoShapeUtil];\n```\n\n----------------------------------------\n\nTITLE: Registering After Create Handler for Arrow Shapes in TypeScript\nDESCRIPTION: This snippet demonstrates how to register an after-create handler for shape records in the editor. It specifically logs a message when a new arrow shape is created.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\neditor.sideEffects.registerAfterCreateHandler('shape', (newShape) => {\n\tif (newShape.type === 'arrow') {\n\t\tconsole.log('A new arrow shape was created', newShape)\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Geometric Intersection Functions\nDESCRIPTION: A collection of functions for calculating intersections between different geometric shapes (circles, lines, polygons, polylines). These are essential for various drawing and selection operations.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function intersectCircleCircle(c1: VecLike, r1: number, c2: VecLike, r2: number): Vec[];\n\nexport function intersectCirclePolygon(c: VecLike, r: number, points: VecLike[]): null | VecLike[];\n\nexport function intersectCirclePolyline(c: VecLike, r: number, points: VecLike[]): null | VecLike[];\n\nexport function intersectLineSegmentCircle(a1: VecLike, a2: VecLike, c: VecLike, r: number): null | VecLike[];\n\nexport function intersectLineSegmentLineSegment(a1: VecLike, a2: VecLike, b1: VecLike, b2: VecLike): null | Vec;\n\nexport function intersectLineSegmentPolygon(a1: VecLike, a2: VecLike, points: VecLike[]): null | VecLike[];\n\nexport function intersectLineSegmentPolyline(a1: VecLike, a2: VecLike, points: VecLike[]): null | VecLike[];\n\nexport function intersectPolygonBounds(points: VecLike[], bounds: Box): null | VecLike[];\n\nexport function intersectPolygonPolygon(polygonA: VecLike[], polygonB: VecLike[]): null | VecLike[];\n```\n\n----------------------------------------\n\nTITLE: Defining UI Components in JSX\nDESCRIPTION: These components represent various UI elements in the TLDraw application, such as toolbars and menu items.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_23\n\nLANGUAGE: JSX\nCODE:\n```\nexport function NoteToolbarItem(): JSX_2.Element;\n\nexport function OfflineIndicator(): JSX_2.Element;\n\nexport function OpacitySlider(): JSX_2.Element | null;\n\nexport function OvalToolbarItem(): JSX_2.Element;\n\nexport function OverflowingToolbar({ children }: OverflowingToolbarProps): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining TLVideoShape and TLVideoShapeProps in TypeScript\nDESCRIPTION: Defines the TLVideoShape type and TLVideoShapeProps interface, which represent video shapes in the TLDraw application. TLVideoShapeProps includes properties for video dimensions, playback state, and asset references.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type TLVideoShape = TLBaseShape<'video', TLVideoShapeProps>;\n\n// @public (undocumented)\nexport interface TLVideoShapeProps {\n    // (undocumented)\n    altText: string;\n    // (undocumented)\n    assetId: null | TLAssetId;\n    // (undocumented)\n    h: number;\n    // (undocumented)\n    playing: boolean;\n    // (undocumented)\n    time: number;\n    // (undocumented)\n    url: string;\n    // (undocumented)\n    w: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TipTap Extension in TLDraw\nDESCRIPTION: Example showing how to add a custom FontFamily extension to the TLDraw editor by configuring textOptions with custom TipTap extensions. The code demonstrates integration of custom extensions while maintaining default functionality.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/shapes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst textOptions = {\n\ttipTapConfig: {\n\t\textensions: [...tipTapDefaultExtensions, FontFamily],\n\t},\n}\n\nexport default function RichTextCustomExtensionExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tpersistenceKey=\"rich-text-custom-extension\"\n\t\t\t\tcomponents={components}\n\t\t\t\ttextOptions={textOptions}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Meta Data for Shapes in TypeScript\nDESCRIPTION: Demonstrates how to set default meta data for shapes using the Editor's getInitialMetaForShape method.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/shapes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\neditor.getInitialMetaForShape = (shape: TLShape) => {\n\tif (shape.type === 'text') {\n\t\treturn { createdBy: currentUser.id, lastModified: Date.now() }\n\t} else {\n\t\treturn { createdBy: currentUser.id }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding All UI Components in tldraw using TypeScript\nDESCRIPTION: This code snippet demonstrates how to hide all configurable UI components in tldraw by setting their values to null in the components object. This approach allows for complete customization of the tldraw interface.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/ui-components-hidden/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\n\nexport default function UiComponentsHiddenExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw\n\t\t\t\tcomponents={{\n\t\t\t\t\tActionMenu: null,\n\t\t\t\t\tHelpMenu: null,\n\t\t\t\t\tMenu: null,\n\t\t\t\t\tMenuZone: null,\n\t\t\t\t\tNavigationZone: null,\n\t\t\t\t\tPrimaryTools: null,\n\t\t\t\t\tQuickActions: null,\n\t\t\t\t\tStatusBar: null,\n\t\t\t\t\tStyleMenu: null,\n\t\t\t\t\tToolsPanel: null,\n\t\t\t\t\tTopPanel: null,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Schema Compatibility TypeScript Example\nDESCRIPTION: Example showing the recommended way to check schema compatibility by attempting to get migrations between schemas\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/validate/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstore.schema.getMigrationsSince(persistedSchema)\n```\n\n----------------------------------------\n\nTITLE: Using Editor with Signals\nDESCRIPTION: Example of using editor properties with signals to track selected shape IDs.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { track, useEditor } from 'tldraw'\n\nexport const SelectedShapeIdsCount = track(() => {\n\tconst editor = useEditor()\n\n\treturn <div>{editor.getSelectedShapeIds().length}</div>\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Stadium2d Geometry Class in TypeScript\nDESCRIPTION: Definition of a Stadium2d geometry class extending Geometry2d for creating stadium-shaped (rounded rectangle) geometries with hit testing and measurement methods.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class Stadium2d extends Geometry2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed'> & {\n        height: number;\n        width: number;\n    });\n    // (undocumented)\n    a: Arc2d;\n    // (undocumented)\n    b: Edge2d;\n    // (undocumented)\n    c: Arc2d;\n    // (undocumented)\n    config: Omit<Geometry2dOptions, 'isClosed'> & {\n        height: number;\n        width: number;\n    };\n    // (undocumented)\n    d: Edge2d;\n    // (undocumented)\n    getBounds(): Box;\n    // (undocumented)\n    getLength(): number;\n    // (undocumented)\n    getSvgPathData(): string;\n    // (undocumented)\n    getVertices(): Vec[];\n    // (undocumented)\n    h: number;\n    // (undocumented)\n    hitTestLineSegment(A: Vec, B: Vec): boolean;\n    // (undocumented)\n    nearestPoint(A: Vec): Vec;\n    // (undocumented)\n    w: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dialogs Context Type Interface in TypeScript\nDESCRIPTION: Interface for the dialogs context, providing methods to add, remove, and manage dialogs in the UI.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialogsContextType {\n    // (undocumented)\n    addDialog(dialog: Omit<TLUiDialog, 'id'> & {\n        id?: string;\n    }): string;\n    // (undocumented)\n    clearDialogs(): void;\n    // (undocumented)\n    dialogs: Atom<TLUiDialog[]>;\n    // (undocumented)\n    removeDialog(id: string): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TextManager Class for Text Measurement in TypeScript\nDESCRIPTION: Class for managing text measurement and rendering in tldraw, including methods for measuring HTML elements and text node spans.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class TextManager {\n    constructor(editor: Editor);\n    // (undocumented)\n    editor: Editor;\n    measureElementTextNodeSpans(element: HTMLElement, { shouldTruncateToFirstLine }?: {\n        shouldTruncateToFirstLine?: boolean;\n    }): {\n        didTruncate: boolean;\n        spans: {\n            box: BoxModel;\n            text: string;\n        }[];\n    };\n    // (undocumented)\n    measureHtml(html: string, opts: {\n        maxWidth: null | number;\n        disableOverflowWrapBreaking?: boolean;\n        fontFamily: string;\n        fontSize: number;\n        fontStyle: string;\n        fontWeight: string;\n        lineHeight: number;\n        minWidth?: null | number;\n        padding: string;\n    }): BoxModel & {\n```\n\n----------------------------------------\n\nTITLE: Defining Point2d Class for 2D Point Geometry in TypeScript\nDESCRIPTION: A class extending Geometry2d that represents a single point in 2D space. It includes methods for SVG path generation, vertex retrieval, line segment hit testing, and nearest point calculation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Point2d extends Geometry2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & {\n        margin: number;\n        point: Vec;\n    });\n    // (undocumented)\n    getSvgPathData(): string;\n    // (undocumented)\n    getVertices(): Vec[];\n    // (undocumented)\n    hitTestLineSegment(A: Vec, B: Vec, margin: number): boolean;\n    // (undocumented)\n    nearestPoint(): Vec;\n    // (undocumented)\n    point: Vec;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Fonts in TLDraw with FontManager Class\nDESCRIPTION: A class that handles font loading and management for shapes in the TLDraw editor. It tracks which fonts are required by shapes, ensures they are loaded, and can generate CSS declarations for embedded fonts.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport class FontManager {\n    constructor(editor: Editor, assetUrls?: {\n        [key: string]: string | undefined;\n    } | undefined);\n    // (undocumented)\n    ensureFontIsLoaded(font: TLFontFace): Promise<void>;\n    // (undocumented)\n    getShapeFontFaces(shape: TLShape | TLShapeId): TLFontFace[];\n    // (undocumented)\n    loadRequiredFontsForCurrentPage(limit?: number): Promise<void>;\n    // (undocumented)\n    requestFonts(fonts: TLFontFace[]): void;\n    // (undocumented)\n    toEmbeddedCssDeclaration(font: TLFontFace): Promise<string>;\n    // (undocumented)\n    trackFontsForShape(shape: TLShape | TLShapeId): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Asset URLs for Tldraw Component\nDESCRIPTION: Example of customizing asset URLs for the Tldraw component, specifically for the hand tool icon.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst assetUrls = {\n    icons: {\n        'tool-hand': './custom-tool-hand.svg',\n    },\n}\n\n<Tldraw assetUrls={assetUrls} />\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Information to Shapes in TypeScript\nDESCRIPTION: Shows how to add and update meta information for shapes, including typing the meta property and using the Editor API.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/shapes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyShapeWithMeta = TLGeoShape & { meta: { createdBy: string } }\n\nconst shape = editor.getShape<MyShapeWithMeta>(myGeoShape.id)\n\neditor.updateShapes<MyShapeWithMeta>([\n\t{\n\t\tid: myGeoShape.id,\n\t\ttype: 'geo',\n\t\tmeta: {\n\t\t\tcreatedBy: 'Steve',\n\t\t},\n\t},\n])\n```\n\n----------------------------------------\n\nTITLE: Shape Collection and Style Methods in TLDraw\nDESCRIPTION: Methods for working with collections of shapes, shape styles, and utilities in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal (undocumented)\ngetShapesPageBounds(shapeIds: TLShapeId[]): Box | null;\n// @internal (undocumented)\ngetShapesRotatedPageBounds(shapeIds: TLShapeId[]): Box | undefined;\n// @internal (undocumented)\ngetShapesSharedRotation(shapeIds: TLShapeId[]): number;\n// (undocumented)\ngetShapeStyleIfExists<T>(shape: TLShape, style: StyleProp<T>): T | undefined;\ngetShapeUtil<S extends TLUnknownShape>(shape: S | TLShapePartial<S>): ShapeUtil<S>;\n// (undocumented)\ngetShapeUtil<S extends TLUnknownShape>(type: S['type']): ShapeUtil<S>;\n// (undocumented)\ngetShapeUtil<T extends ShapeUtil>(type: T extends ShapeUtil<infer R> ? R['type'] : string): T;\ngetSharedOpacity(): SharedStyle<number>;\ngetSharedStyles(): ReadonlySharedStyleMap;\n// (undocumented)\ngetSnapshot(): TLEditorSnapshot;\ngetSortedChildIdsForParent(parent: TLPage | TLParentId | TLShape): TLShapeId[];\ngetStateDescendant<T extends StateNode>(path: string): T | undefined;\ngetStyleForNextShape<T>(style: StyleProp<T>): T;\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Shape Types in TypeScript\nDESCRIPTION: Defines the arrow shape type and its properties interface, including styling properties like arrowhead style, color, dash, and text.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLArrowShape = TLBaseShape<'arrow', TLArrowShapeProps>;\n\n// @public (undocumented)\nexport type TLArrowShapeArrowheadStyle = T.TypeOf<typeof ArrowShapeArrowheadStartStyle>;\n\n// @public (undocumented)\nexport interface TLArrowShapeProps {\n    // (undocumented)\n    arrowheadEnd: TLArrowShapeArrowheadStyle;\n    // (undocumented)\n    arrowheadStart: TLArrowShapeArrowheadStyle;\n    // (undocumented)\n    bend: number;\n    // (undocumented)\n    color: TLDefaultColorStyle;\n    // (undocumented)\n    dash: TLDefaultDashStyle;\n    // (undocumented)\n    end: VecModel;\n    // (undocumented)\n    fill: TLDefaultFillStyle;\n    // (undocumented)\n    font: TLDefaultFontStyle;\n    // (undocumented)\n    labelColor: TLDefaultColorStyle;\n    // (undocumented)\n    labelPosition: number;\n    // (undocumented)\n    scale: number;\n    // (undocumented)\n    size: TLDefaultSizeStyle;\n    // (undocumented)\n    start: VecModel;\n    // (undocumented)\n    text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling UI events with onUiEvent in tldraw\nDESCRIPTION: Example of implementing an event handler for tldraw UI interactions using the onUiEvent prop, which receives event names and associated data.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/user-interface.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n\tfunction handleEvent(name, data) {\n\t\t// do something with the event\n\t}\n\n\treturn <Tldraw onUiEvent={handleEvent} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextShapeTool Class in TypeScript\nDESCRIPTION: Definition of the TextShapeTool class that extends StateNode. This class represents the tool for creating and manipulating text shapes in the tldraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TextShapeTool extends StateNode {\n    // (undocumented)\n    static children(): TLStateNodeConstructor[];\n    // (undocumented)\n    static id: string;\n    // (undocumented)\n    static initial: string;\n    // (undocumented)\n    shapeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Element Transformations in React\nDESCRIPTION: Hook for applying CSS transformations to HTML or SVG elements. Takes a reference to the element and transformation parameters like position, scale, and rotation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useTransform(ref: React.RefObject<HTMLElement | SVGElement>, x?: number, y?: number, scale?: number, rotate?: number, additionalOffset?: VecLike): void;\n```\n\n----------------------------------------\n\nTITLE: Edge2d Class Definition\nDESCRIPTION: Implements geometric Edge class for handling 2D line segments with methods for hit testing and path calculations.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Edge2d extends Geometry2d {\n    constructor(config: {\n        end: Vec;\n        start: Vec;\n    });\n    d: Vec;\n    end: Vec;\n    getLength(): number;\n    getSvgPathData(first?: boolean): string;\n    getVertices(): Vec[];\n    hitTestLineSegment(A: Vec, B: Vec, distance?: number): boolean;\n    midPoint(): Vec;\n    nearestPoint(point: Vec): Vec;\n    start: Vec;\n    u: Vec;\n    ul: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Record Types in TypeScript\nDESCRIPTION: Defines base record types for assets, bindings, and shapes used in the tldraw application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLBaseAsset<Type extends string, Props> extends BaseRecord<'asset', TLAssetId> {\n    // (undocumented)\n    meta: JsonObject;\n    // (undocumented)\n    props: Props;\n    // (undocumented)\n    type: Type;\n}\n\n// @public (undocumented)\nexport interface TLBaseBinding<Type extends string, Props extends object> extends BaseRecord<'binding', TLBindingId> {\n    // (undocumented)\n    fromId: TLShapeId;\n    // (undocumented)\n    meta: JsonObject;\n    // (undocumented)\n    props: Props;\n    // (undocumented)\n    toId: TLShapeId;\n    // (undocumented)\n    type: Type;\n}\n\n// @public (undocumented)\nexport interface TLBaseShape<Type extends string, Props extends object> extends BaseRecord<'shape', TLShapeId> {\n    // (undocumented)\n    index: IndexKey;\n    // (undocumented)\n    isLocked: boolean;\n    // (undocumented)\n    meta: JsonObject;\n    // (undocumented)\n    opacity: TLOpacityType;\n    // (undocumented)\n    parentId: TLParentId;\n    // (undocumented)\n    props: Props;\n    // (undocumented)\n    rotation: number;\n    // (undocumented)\n    type: Type;\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Derived View in TLDraw Editor API (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a derived view in the TLDraw editor API. It uses incremental derivations to efficiently retrieve specific data from the editor's document, optimizing performance for data-dependent operations.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/derived-view/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./DerivedViewExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Arrow Binding API Changes\nDESCRIPTION: Breaking changes showing the migration from using editor instance methods to standalone utility functions for arrow-related operations.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Old\neditor.getArrowInfo(shape)\neditor.getArrowsBoundTo(shape)\n\n// New\ngetArrowInfo(editor, shape)\neditor.getBindingsToShape(shape, 'arrow')\n```\n\n----------------------------------------\n\nTITLE: Updated canBind API Change\nDESCRIPTION: Breaking change showing the modification of the canBind method signature from accepting a shape parameter directly to accepting an options object containing the shape.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Old\ncanBind(shape) {}\n\n// New\ncanBind({shape}) {}\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Meta Tag for Full-Screen App\nDESCRIPTION: HTML meta tag for setting the viewport options, recommended for full-screen tldraw applications.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Hidden Shapes Selection in TLDraw\nDESCRIPTION: Shows how to handle hidden shapes in selection using signal reaction and shape visibility settings.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<Tldraw\n\tgetShapeVisibility={(shape) => (shape.meta.hidden ? 'hidden' : 'inherit')}\n\tonMount={(editor) => {\n\t\t// We don't prevent hidden shapes from being selected out of the box, because there are some situations where it's desirable.\n\t\t// If you want to prevent hidden shapes from being selected, you can do so like this:\n\t\treturn react('clean up selection', () => {\n\t\t\tconst selectedShapeIds = editor.getSelectedShapeIds()\n\t\t\tconst filteredSelectedShapeIds = selectedShapeIds.filter((id) => !editor.isShapeHidden(id))\n\t\t\tif (selectedShapeIds.length !== filteredSelectedShapeIds.length) {\n\t\t\t\teditor.setSelectedShapes(filteredSelectedShapeIds)\n\t\t\t}\n\t\t})\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ErrorScreen Component in React for TLDraw\nDESCRIPTION: A React component that displays an error screen. It accepts LoadingScreenProps with children as a property.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport function ErrorScreen({ children }: LoadingScreenProps): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Modifying Locked Shapes in TLDraw\nDESCRIPTION: Demonstrates how to modify locked shapes without unlocking them using the Editor's run method.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\neditor.run(\n\t() => {\n\t\teditor.deleteShapes(myLockedShapes)\n\t},\n\t{ ignoreShapeLock: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Geo Shape Types in TypeScript\nDESCRIPTION: Defines geometric shape types in tldraw, including its properties and style options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLGeoShape = TLBaseShape<'geo', TLGeoShapeProps>;\n\n// @public (undocumented)\nexport type TLGeoShapeGeoStyle = T.TypeOf<typeof GeoShapeGeoStyle>;\n\n// @public (undocumented)\nexport interface TLGeoShapeProps {\n    // (undocumented)\n    align: TLDefaultHorizontalAlignStyle;\n    // (undocumented)\n    color: TLDefaultColorStyle;\n    // (undocumented)\n    dash: TLDefaultDashStyle;\n    // (undocumented)\n    fill: TLDefaultFillStyle;\n    // (undocumented)\n    font: TLDefaultFontStyle;\n    // (undocumented)\n    geo: TLGeoShapeGeoStyle;\n    // (undocumented)\n    growY: number;\n    // (undocumented)\n    h: number;\n    // (undocumented)\n    labelColor: TLDefaultColorStyle;\n    // (undocumented)\n    richText: TLRichText;\n    // (undocumented)\n    scale: number;\n    // (undocumented)\n    size: TLDefaultSizeStyle;\n    // (undocumented)\n    url: string;\n    // (undocumented)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing tldraw with a Snapshot Prop\nDESCRIPTION: Loads document and session state asynchronously, then provides it to the Tldraw component as a snapshot prop for initial state configuration.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyApp({ userId, documentId }) {\n\tconst [snapshot, setSnapshot] = useState(null)\n\n\tuseEffect(() => {\n\t\tasync function load() {\n\t\t\tconst document = await getDocumentState(documentId)\n\t\t\tconst session = await getSessionState(documentId, userId)\n\t\t\tsetSnapshot({ document, session })\n\t\t}\n\n\t\tload()\n\t}, [documentId, userId])\n\n\treturn snapshot ? <Tldraw snapshot={snapshot} /> : null\n}\n```\n\n----------------------------------------\n\nTITLE: TLSocketRoom Constructor Parameters Type Definition\nDESCRIPTION: TypeScript interface defining the configuration options for initializing a TLSocketRoom instance, including handlers for message processing and room state management.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/sync-core/api-report.api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(opts: {\n    clientTimeout?: number;\n    initialSnapshot?: RoomSnapshot | TLStoreSnapshot;\n    log?: TLSyncLog;\n    onAfterReceiveMessage?: (args: {\n        message: TLSocketServerSentEvent<R>;\n        meta: SessionMeta;\n        sessionId: string;\n        stringified: string;\n    }) => void;\n    onBeforeSendMessage?: (args: {\n        message: TLSocketServerSentEvent<R>;\n        meta: SessionMeta;\n        sessionId: string;\n        stringified: string;\n    }) => void;\n    onDataChange?: () => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Text Rendering Functions in TypeScript\nDESCRIPTION: These functions handle the rendering of rich text content in TLDraw, converting between different formats.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function renderHtmlFromRichText(editor: Editor, richText: TLRichText): string;\n\nexport function renderHtmlFromRichTextForMeasurement(editor: Editor, richText: TLRichText): string;\n\nexport function renderPlaintextFromRichText(editor: Editor, richText: TLRichText): string;\n\nexport function renderRichTextFromHTML(editor: Editor, html: string): TLRichText;\n```\n\n----------------------------------------\n\nTITLE: Defining tlmenus Utility Object in TypeScript\nDESCRIPTION: This code snippet defines the tlmenus utility object, which provides functionality for managing menus in the tldraw editor. It includes methods for tracking open menus, checking menu states, and handling menu visibility across different contexts.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tlmenus: {\n    _hiddenMenus: string[];\n    menus: Atom<string[], unknown>;\n    addOpenMenu(id: string, contextId?: string): void;\n    clearOpenMenus(contextId?: string): void;\n    deleteOpenMenu(id: string, contextId?: string): void;\n    getOpenMenus(contextId?: string): string[];\n    isMenuOpen(id: string, contextId?: string): boolean;\n    hasOpenMenus(contextId: string): boolean;\n    hasAnyOpenMenus(): boolean;\n    hideOpenMenus(contextId?: string): void;\n    showOpenMenus(contextId?: string): void;\n    forContext(contextId: string): {\n        addOpenMenu: (id: string) => void;\n        clearOpenMenus: () => void;\n        deleteOpenMenu: (id: string) => void;\n        getOpenMenus: () => string[];\n        hasAnyOpenMenus: () => boolean;\n        hasOpenMenus: () => boolean;\n        isMenuOpen: (id: string) => boolean;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1BaseShape Interface in TypeScript\nDESCRIPTION: Interface for the base shape in tldraw version 1. It includes common properties like id, type, point, style, and parent-child relationships.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1BaseShape {\n    // (undocumented)\n    assetId?: string;\n    // (undocumented)\n    childIndex: number;\n    // (undocumented)\n    children?: string[];\n    // (undocumented)\n    handles?: Record<string, TLV1Handle>;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    isAspectRatioLocked?: boolean;\n    // (undocumented)\n    isGenerated?: boolean;\n    // (undocumented)\n    isGhost?: boolean;\n    // (undocumented)\n    isHidden?: boolean;\n    // (undocumented)\n    isLocked?: boolean;\n    // (undocumented)\n    label?: string;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    parentId: string;\n    // (undocumented)\n    point: number[];\n    // (undocumented)\n    rotation?: number;\n    // (undocumented)\n    style: TLV1ShapeStyles;\n    // (undocumented)\n    type: TLV1ShapeType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RecordType Class in TypeScript\nDESCRIPTION: Class definition for RecordType, which includes methods for creating, cloning, and validating records.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RecordType<R extends UnknownRecord, RequiredProperties extends keyof Omit<R, 'id' | 'typeName'>> {\n    constructor(\n    typeName: R['typeName'], config: {\n        readonly createDefaultProperties: () => Exclude<Omit<R, 'id' | 'typeName'>, RequiredProperties>;\n        readonly ephemeralKeys?: {\n            readonly [K in Exclude<keyof R, 'id' | 'typeName'>]: boolean;\n        };\n        readonly scope?: RecordScope;\n        readonly validator?: StoreValidator<R>;\n    });\n    clone(record: R): R;\n    create(properties: Expand<Pick<R, RequiredProperties> & Omit<Partial<R>, RequiredProperties>>): R;\n    createCustomId(id: string): IdOf<R>;\n    readonly createDefaultProperties: () => Exclude<Omit<R, 'id' | 'typeName'>, RequiredProperties>;\n    createId(customUniquePart?: string): IdOf<R>;\n    readonly ephemeralKeys?: {\n        readonly [K in Exclude<keyof R, 'id' | 'typeName'>]: boolean;\n    };\n    readonly ephemeralKeySet: ReadonlySet<string>;\n    isId(id?: string): id is IdOf<R>;\n    isInstance(record?: UnknownRecord): record is R;\n    parseId(id: IdOf<R>): string;\n    readonly scope: RecordScope;\n    readonly typeName: R['typeName'];\n    validate(record: unknown, recordBefore?: R): R;\n    readonly validator: StoreValidator<R>;\n    withDefaultProperties<DefaultProps extends Omit<Partial<R>, 'id' | 'typeName'>>(createDefaultProperties: () => DefaultProps): RecordType<R, Exclude<RequiredProperties, keyof DefaultProps>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tool with ID\nDESCRIPTION: Example of creating a custom tool class with a static ID property for state chart identification.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/tools.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyTool extends StateNode {\n\tstatic override id = 'my-tool'\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Camera Movement in TLDraw\nDESCRIPTION: Demonstrates how to prevent user camera movement using setCameraOptions method.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\neditor.setCameraOptions({ isLocked: true })\n```\n\n----------------------------------------\n\nTITLE: Defining UI Event Map Interface in TypeScript\nDESCRIPTION: Comprehensive interface mapping event names to their data structures for the TLDraw UI event system.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiEventMap {\n    // (undocumented)\n    'a11y-repeat-shape-announce': null;\n    // (undocumented)\n    'align-shapes': {\n        operation: 'bottom' | 'center-horizontal' | 'center-vertical' | 'left' | 'right' | 'top';\n    };\n    // (undocumented)\n    'change-language': {\n        locale: string;\n    };\n    // (undocumented)\n    'change-page': {\n        direction?: 'next' | 'prev';\n    };\n    // (undocumented)\n    'change-user-name': null;\n    // (undocumented)\n    'close-menu': {\n        id: string;\n    };\n    // (undocumented)\n    'color-scheme': {\n        value: string;\n    };\n    // (undocumented)\n    'convert-to-bookmark': null;\n    // (undocumented)\n    'convert-to-embed': null;\n    // (undocumented)\n    'copy-as': {\n        format: 'json' | 'png' | 'svg';\n    };\n    // (undocumented)\n    'copy-link': null;\n    // (undocumented)\n    'create-new-project': null;\n    // (undocumented)\n    'delete-page': null;\n    // (undocumented)\n    'delete-shapes': null;\n    // (undocumented)\n    'distribute-shapes': {\n        operation: 'horizontal' | 'vertical';\n    };\n    // (undocumented)\n    'duplicate-page': null;\n    // (undocumented)\n    'duplicate-shapes': null;\n    // (undocumented)\n    'edit-link': null;\n    // (undocumented)\n    'enlarge-shapes': null;\n    // (undocumented)\n    'exit-pen-mode': null;\n    // (undocumented)\n    'export-all-as': {\n        format: 'json' | 'png' | 'svg';\n    };\n    // (undocumented)\n    'export-as': {\n        format: 'json' | 'png' | 'svg';\n    };\n    // (undocumented)\n    'fit-frame-to-content': null;\n    // (undocumented)\n    'flatten-to-image': null;\n    // (undocumented)\n    'flip-shapes': {\n        operation: 'horizontal' | 'vertical';\n    };\n    // (undocumented)\n    'group-shapes': null;\n    // (undocumented)\n    'insert-embed': null;\n    // (undocumented)\n    'insert-media': null;\n    // (undocumented)\n    'move-page': null;\n    // (undocumented)\n    'move-to-new-page': null;\n    // (undocumented)\n    'move-to-page': null;\n    // (undocumented)\n    'new-page': null;\n    // (undocumented)\n    'open-cursor-chat': null;\n    // (undocumented)\n    'open-embed-link': null;\n    // (undocumented)\n    'open-file': null;\n    // (undocumented)\n    'open-menu': {\n        id: string;\n    };\n    // (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Defining Draw Shape Types in TypeScript\nDESCRIPTION: Defines draw shape types for free-form drawing in tldraw, including its properties and segment structure.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLDrawShape = TLBaseShape<'draw', TLDrawShapeProps>;\n\n// @public (undocumented)\nexport interface TLDrawShapeProps {\n    // (undocumented)\n    color: TLDefaultColorStyle;\n    // (undocumented)\n    dash: TLDefaultDashStyle;\n    // (undocumented)\n    fill: TLDefaultFillStyle;\n    // (undocumented)\n    isClosed: boolean;\n    // (undocumented)\n    isComplete: boolean;\n    // (undocumented)\n    isPen: boolean;\n    // (undocumented)\n    scale: number;\n    // (undocumented)\n    segments: TLDrawShapeSegment[];\n    // (undocumented)\n    size: TLDefaultSizeStyle;\n}\n\n// @public (undocumented)\nexport interface TLDrawShapeSegment {\n    // (undocumented)\n    points: VecModel[];\n    // (undocumented)\n    type: 'free' | 'straight';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating useImageOrVideoAsset hook for asset loading in TLDraw\nDESCRIPTION: A custom React hook that loads image or video assets for a shape. It returns the asset object and URL based on the provided shape ID, asset ID, and width parameters.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_109\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useImageOrVideoAsset({ shapeId, assetId, width }: UseImageOrVideoAssetOptions): {\n    asset: (TLImageAsset | TLVideoAsset) | null;\n    url: null | string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing GeoShapeTool Class in TypeScript\nDESCRIPTION: A tool for creating geometric shapes, implementing the state pattern with child states for different interaction modes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GeoShapeTool extends StateNode {\n    // (undocumented)\n    static children(): TLStateNodeConstructor[];\n    // (undocumented)\n    static id: string;\n    // (undocumented)\n    static initial: string;\n    // (undocumented)\n    shapeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tldraw Components\nDESCRIPTION: Example of customizing various components of the Tldraw editor using the components prop.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst components: TLComponents = {\n\tBackground: YourCustomBackground,\n\tSvgDefs: YourCustomSvgDefs,\n\tBrush: YourCustomBrush,\n\tZoomBrush: YourCustomBrush,\n\tCollaboratorBrush: YourCustomBrush,\n\tCursor: YourCustomCursor,\n\tCollaboratorCursor: YourCustomCursor,\n\tCollaboratorHint: YourCustomCollaboratorHint,\n\tCollaboratorShapeIndicator: YourCustomdicator,\n\tGrid: YourCustomGrid,\n\tScribble: YourCustomScribble,\n\tSnapLine: YourCustomSnapLine,\n\tHandles: YourCustomHandles,\n\tHandle: YourCustomHandle,\n\tCollaboratorScribble: YourCustomScribble,\n\tErrorFallback: YourCustomErrorFallback,\n\tShapeErrorFallback: YourCustomShapeErrorFallback,\n\tShapeIndicatorErrorFallback: YourCustomShapeIndicatorErrorFallback,\n\tSpinner: YourCustomSpinner,\n\tSelectionBackground: YourCustomSelectionBackground,\n\tSelectionForeground: YourCustomSelectionForeground,\n\tHoveredShapeIndicator: YourCustomHoveredShapeIndicator,\n\t// ...\n}\n\n<Tldraw components={components}/>\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Types in TypeScript\nDESCRIPTION: Defines the asset types and related interfaces for handling bookmark, image, and video assets in the tldraw application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLAsset = TLBookmarkAsset | TLImageAsset | TLVideoAsset;\n\n// @public (undocumented)\nexport interface TLAssetContext {\n    dpr: number;\n    networkEffectiveType: null | string;\n    screenScale: number;\n    shouldResolveToOriginal: boolean;\n    steppedScreenScale: number;\n}\n\n// @public (undocumented)\nexport type TLAssetId = RecordId<TLBaseAsset<any, any>>;\n\n// @public (undocumented)\nexport type TLAssetPartial<T extends TLAsset = TLAsset> = T extends T ? {\n    id: TLAssetId;\n    meta?: Partial<T['meta']>;\n    props?: Partial<T['props']>;\n    type: T['type'];\n} & Partial<Omit<T, 'id' | 'meta' | 'props' | 'type'>> : never;\n\n// @public (undocumented)\nexport type TLAssetShape = Extract<TLShape, {\n    props: {\n        assetId: TLAssetId;\n    };\n}>;\n\n// @public\nexport interface TLAssetStore {\n    remove?(assetIds: TLAssetId[]): Promise<void>;\n    resolve?(asset: TLAsset, ctx: TLAssetContext): null | Promise<null | string> | string;\n    upload(asset: TLAsset, file: File, abortSignal?: AbortSignal): Promise<{\n        meta?: JsonObject;\n        src: string;\n    }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing tldraw Sync Package\nDESCRIPTION: Command to install the @tldraw/sync package which enables collaboration features.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/collaboration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tldraw/sync\n```\n\n----------------------------------------\n\nTITLE: Installing tldraw via npm\nDESCRIPTION: Command to install the tldraw package using npm package manager.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i tldraw\n```\n\n----------------------------------------\n\nTITLE: Defining Dialogs Provider Props Interface in TypeScript\nDESCRIPTION: Interface for the dialogs provider component props, allowing context customization and overrides.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialogsProviderProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    context?: string;\n    // (undocumented)\n    overrides?(editor: Editor): TLUiDialogsContextType;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up corepack for local development\nDESCRIPTION: Command to install corepack globally, ensuring the correct version of yarn is available for local development.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g corepack\n```\n\n----------------------------------------\n\nTITLE: Implementing Group2d Class for Composite Geometry in TLDraw\nDESCRIPTION: A class that extends Geometry2d to represent a group of geometric shapes. It handles operations on collections of child geometries, including hit testing, intersection, and transformations across all children.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Group2d extends Geometry2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & {\n        children: Geometry2d[];\n    });\n    // (undocumented)\n    children: Geometry2d[];\n    // (undocumented)\n    distanceToPoint(point: Vec, hitInside?: boolean, filters?: Geometry2dFilters): number;\n    // (undocumented)\n    getArea(): number;\n    // (undocumented)\n    getLength(): number;\n    // (undocumented)\n    getSvgPathData(): string;\n    // (undocumented)\n    getVertices(filters: Geometry2dFilters): Vec[];\n    // (undocumented)\n    hitTestLineSegment(A: Vec, B: Vec, zoom: number, filters?: Geometry2dFilters): boolean;\n    // (undocumented)\n    hitTestPoint(point: Vec, margin: number, hitInside: boolean, filters?: Geometry2dFilters): boolean;\n    // (undocumented)\n    ignoredChildren: Geometry2d[];\n    // (undocumented)\n    intersectCircle(center: VecLike, radius: number, filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    intersectLineSegment(A: VecLike, B: VecLike, filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    intersectPolygon(polygon: VecLike[], filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    intersectPolyline(polyline: VecLike[], filters?: Geometry2dFilters): VecLike[];\n    // (undocumented)\n    nearestPoint(point: Vec, filters?: Geometry2dFilters): Vec;\n    // (undocumented)\n    toSimpleSvgPath(): string;\n    // (undocumented)\n    transform(transform: Mat): Geometry2d;\n}\n```\n\n----------------------------------------\n\nTITLE: Using RecordType in TypeScript with @tldraw/store\nDESCRIPTION: This code demonstrates the usage of the RecordType class, including creating instances, cloning records, creating IDs, and checking instance types. It shows various utility methods provided by RecordType.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst recordType = new RecordType('author', () => ({ living: true }))\n\nconst record = recordType.create({ name: 'J.R.R Tolkein' })\n\nconst clone = recordType.clone(record)\n\nconst id = recordType.createId()\n\nconst customId = recordType.createCustomId('tolkein')\n\nconst result1 = recordType.isInstance(record) // true\nconst result2 = recordType.isInstance(someOtherRecord) // false\n\nconst idResult1 = recordType.isId(id) // true\nconst idResult2 = recordType.isId(someOtherId) // false\n\nconst youngLivingAuthor = new RecordType('author', () => ({ age: 28, living: true }))\n\nconst oldDeadAuthor = recordType.withDefaultProperties({ age: 93, living: false })\n```\n\n----------------------------------------\n\nTITLE: DrawShapeUtil Class Definition\nDESCRIPTION: Utility class for handling draw shape operations including rendering, geometry calculations, and property management.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DrawShapeUtil extends ShapeUtil<TLDrawShape> {\n    static type: \"draw\";\n    static props: RecordProps<TLDrawShape>;\n    static migrations: TLPropsMigrations;\n    options: DrawShapeOptions;\n    getDefaultProps(): TLDrawShape['props'];\n    component(shape: TLDrawShape): JSX_2.Element;\n    indicator(shape: TLDrawShape): JSX_2.Element;\n    getGeometry(shape: TLDrawShape): Circle2d | Polyline2d;\n    canTabTo(): boolean;\n    getInterpolatedProps(startShape: TLDrawShape, endShape: TLDrawShape, t: number): TLDrawShapeProps;\n    hideResizeHandles(shape: TLDrawShape): boolean;\n    hideRotateHandle(shape: TLDrawShape): boolean;\n    hideSelectionBoundsFg(shape: TLDrawShape): boolean;\n    expandSelectionOutlinePx(shape: TLDrawShape): number;\n    getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[];\n    onResize(shape: TLDrawShape, info: TLResizeInfo<TLDrawShape>): {\n        props: {\n            segments: TLDrawShapeSegment[];\n        }\n    };\n    toSvg(shape: TLDrawShape, ctx: SvgExportContext): JSX_2.Element;\n}\n```\n\n----------------------------------------\n\nTITLE: DrawShapeTool Class Definition\nDESCRIPTION: Class definition for the drawing shape tool with state management and tool properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DrawShapeTool extends StateNode {\n    static id: string;\n    static initial: string;\n    static isLockable: boolean;\n    static useCoalescedEvents: boolean;\n    shapeType: string;\n    static children(): TLStateNodeConstructor[];\n    onExit(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TldrawEditor Component in TypeScript React\nDESCRIPTION: This code snippet shows how to import and use the TldrawEditor component to create a minimal editor with basic functionality. It demonstrates the usage of the component with default props.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/only-editor/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n<TldrawEditor/>\n```\n\n----------------------------------------\n\nTITLE: Implementing useLocalStorageState hook for persistent state management\nDESCRIPTION: A custom React hook that provides state management with local storage persistence, allowing components to maintain state across page reloads.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_114\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useLocalStorageState<T = any>(key: string, defaultValue: T): readonly [T, (setter: ((value: T) => T) | T) => void];\n```\n\n----------------------------------------\n\nTITLE: Defining TldrawEditorProps Interface in TypeScript\nDESCRIPTION: This snippet defines the TldrawEditorProps interface, which combines TldrawEditorBaseProps and TldrawEditorStoreProps to specify the properties for the TLDraw editor component.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TldrawEditorProps = TldrawEditorBaseProps & TldrawEditorStoreProps;\n```\n\n----------------------------------------\n\nTITLE: Converting SVG to Image in TLDraw\nDESCRIPTION: Function to convert an SVG string to an image blob. Takes options for image dimensions, quality, pixel ratio, and output format (jpeg, png, or webp).\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getSvgAsImage(svgString: string, options: {\n    height: number;\n    pixelRatio?: number;\n    quality?: number;\n    type: 'jpeg' | 'png' | 'webp';\n    width: number;\n}): Promise<Blob | null>;\n```\n\n----------------------------------------\n\nTITLE: Class Definition - Ellipse2d Geometry\nDESCRIPTION: Class definition for 2D ellipse geometry with methods for bounds calculation, hit testing, and path generation\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Ellipse2d extends Geometry2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed'> & {\n        height: number;\n        width: number;\n    });\n    config: Omit<Geometry2dOptions, 'isClosed'> & {\n        height: number;\n        width: number;\n    };\n    get edges(): Edge2d[];\n    _edges?: Edge2d[];\n    getBounds(): Box;\n    getLength(): number;\n    getSvgPathData(first?: boolean): string;\n    getVertices(): any[];\n    h: number;\n    hitTestLineSegment(A: Vec, B: Vec): boolean;\n    nearestPoint(A: Vec): Vec;\n    w: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Array and Object Identity Optimization Hooks\nDESCRIPTION: Internal utility hooks for optimizing React renders by maintaining reference identity for shallow equal arrays and objects. Prevents unnecessary re-renders when contents haven't changed.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useShallowArrayIdentity<T extends null | readonly any[] | undefined>(arr: T): T;\n\nexport function useShallowObjectIdentity<T extends null | object | undefined>(obj: T): T;\n```\n\n----------------------------------------\n\nTITLE: Defining TLBindingUtilConstructor Interface in TypeScript\nDESCRIPTION: This snippet defines the TLBindingUtilConstructor interface, which is used for creating binding utilities in the TLDraw editor. It includes a constructor, migrations, props, and a type property.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TLBindingUtilConstructor<T extends TLUnknownBinding, U extends BindingUtil<T> = BindingUtil<T>> {\n    new (editor: Editor): U;\n    migrations?: TLPropsMigrations;\n    props?: RecordProps<T>;\n    type: T['type'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selection Event Handlers in TLDraw\nDESCRIPTION: Function for creating pointer event handlers for selection handles. Returns event handler functions for pointer down, move, and up events to manage selection interactions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useSelectionEvents(handle: TLSelectionHandle): {\n    onPointerDown: PointerEventHandler<Element>;\n    onPointerMove: (e: React.PointerEvent) => void;\n    onPointerUp: PointerEventHandler<Element>;\n};\n```\n\n----------------------------------------\n\nTITLE: Input Management and State Methods in TLDraw\nDESCRIPTION: Properties and methods for managing input state, checking editor state, and interacting with shapes in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ninputs: {\n    buttons: Set<number>;\n    keys: Set<string>;\n    originScreenPoint: Vec;\n    originPagePoint: Vec;\n    currentScreenPoint: Vec;\n    currentPagePoint: Vec;\n    previousScreenPoint: Vec;\n    previousPagePoint: Vec;\n    pointerVelocity: Vec;\n    altKey: boolean;\n    ctrlKey: boolean;\n    isPen: boolean;\n    metaKey: boolean;\n    shiftKey: boolean;\n    isDragging: boolean;\n    isEditing: boolean;\n    isPanning: boolean;\n    isPinching: boolean;\n    isPointing: boolean;\n    isSpacebarPanning: boolean;\n};\ninterrupt(): this;\nisAncestorSelected(shape: TLShape | TLShapeId): boolean;\nisDisposed: boolean;\nisIn(path: string): boolean;\nisInAny(...paths: string[]): boolean;\nisPointInShape(shape: TLShape | TLShapeId, point: VecLike, opts?: {\n    hitInside?: boolean | undefined;\n    margin?: number | undefined;\n}): boolean;\n// (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Shape and Asset Management Methods in TLDraw\nDESCRIPTION: A collection of methods for retrieving and manipulating shapes, assets, and their properties in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly fonts: FontManager;\ngetAncestorPageId(shape?: TLShape | TLShapeId): TLPageId | undefined;\ngetAsset<T extends TLAsset>(asset: T | T['id']): T | undefined;\ngetAssetForExternalContent(info: TLExternalAsset): Promise<TLAsset | undefined>;\ngetAssets(): (TLBookmarkAsset | TLImageAsset | TLVideoAsset)[];\ngetBaseZoom(): number;\ngetBinding(id: TLBindingId): TLBinding | undefined;\ngetBindingsFromShape<Binding extends TLUnknownBinding = TLBinding>(shape: TLShape | TLShapeId, type: Binding['type']): Binding[];\ngetBindingsInvolvingShape<Binding extends TLUnknownBinding = TLBinding>(shape: TLShape | TLShapeId, type?: Binding['type']): Binding[];\ngetBindingsToShape<Binding extends TLUnknownBinding = TLBinding>(shape: TLShape | TLShapeId, type: Binding['type']): Binding[];\ngetBindingUtil<S extends TLUnknownBinding>(binding: {\n    type: S['type'];\n} | S): BindingUtil<S>;\n// (undocumented)\ngetBindingUtil<S extends TLUnknownBinding>(type: S['type']): BindingUtil<S>;\n// (undocumented)\ngetBindingUtil<T extends BindingUtil>(type: T extends BindingUtil<infer R> ? R['type'] : string): T;\n```\n\n----------------------------------------\n\nTITLE: Defining Context Menu Props Interface in TypeScript\nDESCRIPTION: Interface for context menu component props, specifying optional children and disabled state.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiContextMenuProps {\n    // (undocumented)\n    children?: ReactNode;\n    // (undocumented)\n    disabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Interface and Functions in TypeScript\nDESCRIPTION: Declares a Computed interface extending Signal, and multiple overloads of the computed function for creating computed values with various options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/state/api-report.api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Computed<Value, Diff = unknown> extends Signal<Value, Diff> {\n    readonly isActivelyListening: boolean;\n    readonly parentEpochs: number[];\n    readonly parents: Signal<any, any>[];\n    readonly parentSet: ArraySet<Signal<any, any>>;\n}\n\nexport function computed<Value, Diff = unknown>(name: string, compute: (previousValue: typeof UNINITIALIZED | Value, lastComputedEpoch: number) => Value | WithDiff<Value, Diff>, options?: ComputedOptions<Value, Diff>): Computed<Value, Diff>;\n\nexport function computed<This extends object, Value>(compute: () => Value, context: ClassMethodDecoratorContext<This, () => Value>): () => Value;\n\nexport function computed(target: any, key: string, descriptor: PropertyDescriptor): PropertyDescriptor;\n\nexport function computed<Value, Diff = unknown>(options?: ComputedOptions<Value, Diff>): ((target: any, key: string, descriptor: PropertyDescriptor) => PropertyDescriptor) & (<This>(compute: () => Value, context: ClassMethodDecoratorContext<This, () => Value>) => () => Value);\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy Data Migration for TLDraw Sync\nDESCRIPTION: Function that handles loading room data with backwards compatibility support. It first attempts to load from current store, falls back to legacy store if needed, and handles data conversion and cleanup. Uses TLSocketRoom for managing room state and supports TLStoreSnapshot format.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/sync.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TLSocketRoom } from '@tldraw/sync-core'\n\nasync function loadOrMakeRoom(roomId: string) {\n\tconst data = await loadRoomDataFromCurrentStore(roomId)\n\tif (data) {\n\t\treturn new TLSocketRoom({ initialSnapshot: data })\n\t}\n\tconst legacyData = await loadRoomDataFromLegacyStore(roomId)\n\tif (legacyData) {\n\t\t// Convert your old data to a TLStoreSnapshot.\n\t\tconst snapshot = convertOldDataToSnapshot(legacyData)\n\t\t// Load it into the room.\n\t\tconst room = new TLSocketRoom({ initialSnapshot: snapshot })\n\t\t// Save an updated copy of the snapshot in the new place\n\t\t// so that next time we can load it directly.\n\t\tawait saveRoomData(roomId, room.getCurrentSnapshot())\n\t\t// Optionally delete the old data.\n\t\tawait deleteLegacyRoomData(roomId)\n\t\t// And finally return the room.\n\t\treturn room\n\t}\n\t// If there's no data at all, just make a new blank room.\n\treturn new TLSocketRoom()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useEditablePlainText hook for text editing in TLDraw\nDESCRIPTION: A custom React hook that provides text editing functionality for shapes, including event handlers for changes, focus, blur, and keyboard interactions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_111\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useEditablePlainText(shapeId: TLShapeId, type: string, text?: string): {\n    handleBlur: () => void;\n    handleChange: ({ plaintext }: {\n        plaintext: string;\n    }) => void;\n    handleDoubleClick: (e: any) => any;\n    handleFocus: () => void;\n    handleInputPointerDown: (e: React_3.PointerEvent<Element>) => void;\n    handleKeyDown: (e: KeyboardEvent) => void;\n    isEditing: boolean;\n    isEmpty: boolean;\n    isReadyForEditing: boolean;\n    rInput: React_3.RefObject<HTMLTextAreaElement>;\n};\n```\n\n----------------------------------------\n\nTITLE: Store Queries Class Definition in TypeScript\nDESCRIPTION: Query interface implementation for filtering and accessing store records. Provides methods for creating indexes and executing queries.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class StoreQueries<R extends UnknownRecord> {\n    constructor(recordMap: AtomMap<IdOf<R>, R>, history: Atom<number, RecordsDiff<R>>);\n    exec<TypeName extends R['typeName']>(typeName: TypeName, query: QueryExpression<Extract<R, {\n        typeName: TypeName;\n    }>>): Array<Extract<R, {\n        typeName: TypeName;\n    }>>;\n    index<TypeName extends R['typeName'], Property extends string & keyof Extract<R, {\n        typeName: TypeName;\n    }>>(typeName: TypeName, property: Property): RSIndex<Extract<R, {\n        typeName: TypeName;\n    }>, Property>;\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Interface Definition in TypeScript\nDESCRIPTION: Defines the minimal WebSocket interface requirements for the TLDraw sync protocol with basic WebSocket functionality including event handling and message sending.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/sync-core/api-report.api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WebSocketMinimal {\n    addEventListener?: (type: 'close' | 'error' | 'message', listener: (event: any) => void) => void;\n    close: (code?: number, reason?: string) => void;\n    readyState: number;\n    removeEventListener?: (type: 'close' | 'error' | 'message', listener: (event: any) => void) => void;\n    send: (data: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadonlySharedStyleMap Class for Style Management in TypeScript\nDESCRIPTION: A class that provides a read-only map for shared styles in the editor. It includes methods for accessing, iterating, and comparing styles with various utility functions for style retrieval.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ReadonlySharedStyleMap {\n    // (undocumented)\n    [Symbol.iterator](): IterableIterator<[StyleProp<any>, SharedStyle<unknown>]>;\n    constructor(entries?: Iterable<[StyleProp<unknown>, SharedStyle<unknown>]>);\n    // (undocumented)\n    entries(): IterableIterator<[StyleProp<any>, SharedStyle<unknown>]>;\n    // (undocumented)\n    equals(other: ReadonlySharedStyleMap): boolean;\n    // (undocumented)\n    get<T>(prop: StyleProp<T>): SharedStyle<T> | undefined;\n    // (undocumented)\n    getAsKnownValue<T>(prop: StyleProp<T>): T | undefined;\n    // (undocumented)\n    keys(): IterableIterator<StyleProp<any>>;\n    // @internal (undocumented)\n    protected map: Map<StyleProp<any>, SharedStyle<unknown>>;\n    // (undocumented)\n    get size(): number;\n    // (undocumented)\n    values(): IterableIterator<SharedStyle<unknown>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Color Styles in tldraw with TypeScript\nDESCRIPTION: This code snippet shows how to change the default color styles in tldraw. It imports necessary components, creates a custom Editor component, and modifies the color values in the useEffect hook. The changes are applied to all tldraw instances.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/changing-default-colors/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function Example() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw persistenceKey=\"example\" autoFocus>\n\t\t\t\t<Editor />\n\t\t\t</Tldraw>\n\t\t</div>\n\t)\n}\n\nfunction Editor() {\n\tconst { setStyleContent } = Tldraw.useEditor()\n\n\tuseEffect(() => {\n\t\tsetStyleContent({\n\t\t\t'--color-text': '#fef5ee',\n\t\t\t'--color-background': '#102862',\n\t\t\t'--color-muted-1': '#0284c7',\n\t\t\t'--color-muted-2': '#0369a1',\n\t\t\t'--color-muted-3': '#075985',\n\t\t\t'--color-text-1': '#fda4af',\n\t\t\t'--color-text-2': '#f43f5e',\n\t\t\t'--color-text-3': '#e11d48',\n\t\t\t'--color-selected': '#2dd4bf',\n\t\t\t'--color-primary': '#4ade80',\n\t\t\t'--color-warn': '#fb923c',\n\t\t\t'--color-hint': '#facc15',\n\t\t\t'--color-solid-1': '#fdba74',\n\t\t\t'--color-solid-2': '#f97316',\n\t\t\t'--color-solid-3': '#ea580c',\n\t\t})\n\t}, [])\n\n\treturn null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk API Keys for TLDraw Development\nDESCRIPTION: Instructions for configuring Clerk API keys in environment files for both the sync-worker and client components of the TLDraw dotcom project. Requires adding publishable and secret keys to specific environment files.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/dotcom/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIn `sync-worker/.dev.vars`, set `CLERK_PUBLISHABLE_KEY` & `CLERK_SECRET_KEY`. In `client/.env.local`, set `VITE_CLERK_PUBLISHABLE_KEY`.\n```\n\n----------------------------------------\n\nTITLE: TLSyncRoom Class Definition in TypeScript\nDESCRIPTION: Server-side room management class that handles multiple client sessions, state synchronization, and message broadcasting between connected clients.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/sync-core/api-report.api.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TLSyncRoom<R extends UnknownRecord, SessionMeta> {\n    constructor(opts: {\n        log?: TLSyncLog;\n        onDataChange?(): void;\n        schema: StoreSchema<R, any>;\n        snapshot?: RoomSnapshot;\n    });\n    broadcastPatch(message: {\n        diff: NetworkDiff<R>;\n        sourceSessionId?: string;\n    }): this;\n    clock: number;\n    close(): void;\n    documentClock: number;\n    readonly documentTypes: Set<string>;\n    readonly events: Emitter<{\n        room_became_empty(): void;\n        session_removed(args: {\n            meta: SessionMeta;\n            sessionId: string;\n        }): void;\n    }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EffectScheduler Class and Interface in TypeScript\nDESCRIPTION: Declares an EffectScheduler class and interface for scheduling and managing effects, with methods for attaching, detaching, and executing effects.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/state/api-report.api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const EffectScheduler: new <Result>(name: string, runEffect: (lastReactedEpoch: number) => Result, options?: EffectSchedulerOptions) => EffectScheduler<Result>;\n\nexport interface EffectScheduler<Result> {\n    __debug_ancestor_epochs__: Map<Signal<any, any>, number> | null;\n    attach(): void;\n    detach(): void;\n    execute(): Result;\n    readonly isActivelyListening: boolean;\n    readonly lastTraversedEpoch: number;\n    maybeExecute(): void;\n    maybeScheduleEffect(): void;\n    readonly name: string;\n    readonly parentEpochs: number[];\n    readonly parents: Signal<any, any>[];\n    readonly parentSet: ArraySet<Signal<any, any>>;\n    readonly scheduleCount: number;\n    scheduleEffect(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Testing tldraw Project\nDESCRIPTION: Commands for building the project and running the test suite in CI environment\nSOURCE: https://github.com/tldraw/tldraw/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build && yarn test-ci\n```\n\n----------------------------------------\n\nTITLE: Validating API Query Parameters in TypeScript\nDESCRIPTION: This code snippet shows how to create and use a validator for API query parameters. It defines a query validator object and then applies it to validate the request query.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/validate/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst queryValidator = T.object({\n\tw: T.string.optional(),\n\tq: T.string.optional(),\n})\n\nqueryValidator.validate(request.query)\n```\n\n----------------------------------------\n\nTITLE: Creating TL Schema in TypeScript for tldraw\nDESCRIPTION: This function creates a TLSchema object with optional shapes, bindings, and migrations.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createTLSchema({ shapes, bindings, migrations, }?: {\n    bindings?: Record<string, SchemaPropsInfo>;\n    migrations?: readonly MigrationSequence[];\n    shapes?: Record<string, SchemaPropsInfo>;\n}): TLSchema;\n```\n\n----------------------------------------\n\nTITLE: Initializing RecordStore in TypeScript for @tldraw/store\nDESCRIPTION: This snippet shows how to create a new RecordStore instance that can store both Book and Author records.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = new RecordStore<Book | Author>()\n```\n\n----------------------------------------\n\nTITLE: Store Schema Options Interface Definition\nDESCRIPTION: Interface defining options for store schema configuration including migration sequences and validation failure handlers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StoreSchemaOptions<R extends UnknownRecord, P> {\n    createIntegrityChecker?(store: Store<R, P>): void;\n    migrations?: MigrationSequence[];\n    onValidationFailure?(data: StoreValidationFailure<R>): R;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Validator in TypeScript for tldraw\nDESCRIPTION: This function creates an asset validator for a given type and props in the tldraw schema.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createAssetValidator<Type extends string, Props extends JsonObject>(type: Type, props: T.Validator<Props>): T.ObjectValidator<Expand<    { [P in \"id\" | \"meta\" | \"typeName\" | (undefined extends Props ? never : \"props\") | (undefined extends Type ? never : \"type\")]: {\nid: TLAssetId;\nmeta: JsonObject;\nprops: Props;\ntype: Type;\ntypeName: 'asset';\n}[P]; } & { [P_1 in (undefined extends Props ? \"props\" : never) | (undefined extends Type ? \"type\" : never)]?: {\nid: TLAssetId;\nmeta: JsonObject;\nprops: Props;\ntype: Type;\ntypeName: 'asset';\n}[P_1] | undefined; }>>;\n```\n\n----------------------------------------\n\nTITLE: TLSyncClient Class Definition in TypeScript\nDESCRIPTION: Implementation of the client-side sync functionality that handles real-time synchronization with the server, including presence management and store updates.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/sync-core/api-report.api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TLSyncClient<R extends UnknownRecord, S extends Store<R> = Store<R>> {\n    constructor(config: {\n        didCancel?(): boolean;\n        onAfterConnect?(self: TLSyncClient<R, S>, details: {\n            isReadonly: boolean;\n        }): void;\n        onLoad(self: TLSyncClient<R, S>): void;\n        onSyncError(reason: string): void;\n        presence: Signal<null | R>;\n        socket: TLPersistentClientSocket<R>;\n        store: S;\n    });\n    close(): void;\n    didCancel?: () => boolean;\n    incomingDiffBuffer: TLSocketServerSentDataEvent<R>[];\n    isConnectedToRoom: boolean;\n    lastPushedPresenceState: null | R;\n    latestConnectRequestId: null | string;\n    readonly onAfterConnect?: (self: this, details: {\n        isReadonly: boolean;\n    }) => void;\n    readonly presenceState: Signal<null | R> | undefined;\n    readonly socket: TLPersistentClientSocket<R>;\n    readonly store: S;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArraySet Class in TypeScript\nDESCRIPTION: Implements an ArraySet class with methods for adding, removing, and iterating over elements. This class is marked as @internal.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/state/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal\nexport class ArraySet<T> {\n    [Symbol.iterator](): Generator<T, void, undefined>;\n    add(elem: T): boolean;\n    clear(): void;\n    has(elem: T): boolean;\n    get isEmpty(): boolean;\n    remove(elem: T): boolean;\n    size(): number;\n    visit(visitor: (item: T) => void): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Animation and Camera Options\nDESCRIPTION: Defines default configuration for animation timing and easing functions, as well as camera options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const DEFAULT_ANIMATION_OPTIONS: {\n    duration: number;\n    easing: (t: number) => number;\n};\n\nexport const DEFAULT_CAMERA_OPTIONS: TLCameraOptions;\n```\n\n----------------------------------------\n\nTITLE: Running Editor Operations in Context\nDESCRIPTION: Examples of running editor operations within a transaction context, including options for history and locked shapes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\neditor.run(() => {\n\teditor.createShapes(myShapes)\n\teditor.sendToBack(myShapes)\n\teditor.selectNone()\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\neditor.run(\n\t() => {\n\t\teditor.createShapes(myShapes)\n\t\teditor.sendToBack(myShapes)\n\t\teditor.selectNone()\n\t},\n\t{ history: 'ignore' }\n)\n```\n\nLANGUAGE: ts\nCODE:\n```\neditor.run(\n\t() => {\n\t\teditor.updateShapes(myLockedShapes)\n\t},\n\t{ ignoreShapeLock: true }\n)\n```\n\n----------------------------------------\n\nTITLE: UserPreferencesManager Class Implementation\nDESCRIPTION: Class that manages user preferences including dark mode, animation speed, colors and other UI settings.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class UserPreferencesManager {\n    constructor(user: TLUser, inferDarkMode: boolean);\n    disposables: Set<() => void>;\n    dispose(): void;\n    getAnimationSpeed(): number;\n    getColor(): string;\n    getEdgeScrollSpeed(): number;\n    getId(): string;\n    getIsDarkMode(): boolean;\n    getIsDynamicResizeMode(): boolean;\n    getIsPasteAtCursorMode(): boolean;\n    getIsSnapMode(): boolean;\n    getIsWrapMode(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Migrations in TLDraw Components\nDESCRIPTION: Shows different ways to implement migrations in TLDraw, including component props, store creation, and schema configuration.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// When rendering the Tldraw component\n<Tldraw\n  ...\n\tmigrations={[myMigrations]}\n\t/>\n\n// or when creating the store\nstore = createTLStore({\n\t...\n\tmigrations: [myMigrations],\n})\n\n// or when creating the schema\nschema = createTLSchema({\n\t...\n\tmigrations: [myMigrations],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing HandTool Class in TypeScript\nDESCRIPTION: A tool for panning and navigating the canvas, implemented as a state node with child states for different interaction modes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class HandTool extends StateNode {\n    // (undocumented)\n    static children(): TLStateNodeConstructor[];\n    // (undocumented)\n    static id: string;\n    // (undocumented)\n    static initial: string;\n    // (undocumented)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiTranslationProviderProps Interface in TypeScript\nDESCRIPTION: Interface for the translation provider component props in tldraw. It includes children, locale, and optional overrides for translation strings organized by locale.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiTranslationProviderProps {\n    // (undocumented)\n    children: React_2.ReactNode;\n    // (undocumented)\n    locale: string;\n    overrides?: Record<string, Record<string, string>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Preferences Interface in TypeScript\nDESCRIPTION: Interface definition for the TLUser object which provides methods for retrieving and updating user preferences, including display settings, localization, and interaction modes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetLocale(): string;\n// (undocumented)\ngetName(): string;\n// (undocumented)\ngetUserPreferences(): {\n    animationSpeed: number;\n    color: string;\n    colorScheme: \"dark\" | \"light\" | \"system\" | undefined;\n    id: string;\n    isDarkMode: boolean;\n    isDynamicResizeMode: boolean;\n    isSnapMode: boolean;\n    isWrapMode: boolean;\n    locale: string;\n    name: string;\n};\n// (undocumented)\nsystemColorScheme: Atom<\"dark\" | \"light\", unknown>;\n// (undocumented)\nupdateUserPreferences(userPreferences: Partial<TLUserPreferences>): void;\n```\n\n----------------------------------------\n\nTITLE: Calculating Perfect Dash Properties for Strokes in TLDraw\nDESCRIPTION: A utility function that calculates optimal dash array and offset properties for a given path length, stroke width, and dash style options. Useful for creating consistent dashed strokes in SVG paths.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getPerfectDashProps(totalLength: number, strokeWidth: number, opts?: Partial<{\n    closed: boolean;\n    end: 'none' | 'outset' | 'skip';\n    forceSolid: boolean;\n    lengthRatio: number;\n    snap: number;\n    start: 'none' | 'outset' | 'skip';\n    style: TLDefaultDashStyle;\n}>): {\n    strokeDasharray: string;\n    strokeDashoffset: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Events Component Path\nDESCRIPTION: YAML frontmatter configuration specifying the component path, category, priority and keywords for the store events documentation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/store-events/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Store events\ncomponent: ./StoreEventsExample.tsx\ncategory: editor-api\npriority: 2\nkeywords: [listen, changes]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining UI Event Type Definitions in TypeScript\nDESCRIPTION: Type definitions for UI event handling system, including event context type, event data structure, and handler signature.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLUiEventContextType = TLUiEventHandler;\n\n// @public (undocumented)\nexport type TLUiEventData<K> = K extends null ? {\n    source: TLUiEventSource;\n} : {\n    source: TLUiEventSource;\n} & K;\n\n// @public (undocumented)\nexport type TLUiEventHandler = <T extends keyof TLUiEventMap>(name: T, data: TLUiEventData<TLUiEventMap[T]>) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Binding Types in TypeScript\nDESCRIPTION: Defines types for arrow bindings in tldraw, including the base binding type and its properties interface.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLArrowBinding = TLBaseBinding<'arrow', TLArrowBindingProps>;\n\n// @public (undocumented)\nexport interface TLArrowBindingProps {\n    isExact: boolean;\n    isPrecise: boolean;\n    // (undocumented)\n    normalizedAnchor: VecModel;\n    // (undocumented)\n    terminal: 'end' | 'start';\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing the Editor with TypeScript\nDESCRIPTION: Method to focus the editor component with an optional parameter to determine if the container should be focused.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nfocus({ focusContainer }?: {\n    focusContainer?: boolean | undefined;\n}): this;\n```\n\n----------------------------------------\n\nTITLE: Defining VecLike Type for Vector Operations\nDESCRIPTION: Type definition for vector-like objects that can be used with the Vec class. Accepts either Vec instances or objects with x and y properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type VecLike = Vec | VecModel;\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiInputProps Interface in TypeScript\nDESCRIPTION: Specifies the props for a UI input component in TLDraw. It includes various properties for customizing the input's behavior and appearance.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TLUiInputProps {\n    'data-testid'?: string;\n    autoFocus?: boolean;\n    autoSelect?: boolean;\n    children?: React_2.ReactNode;\n    className?: string;\n    defaultValue?: string;\n    disabled?: boolean;\n    icon?: Exclude<string, TLUiIconType> | TLUiIconType;\n    iconLeft?: Exclude<string, TLUiIconType> | TLUiIconType;\n    label?: Exclude<string, TLUiTranslationKey> | TLUiTranslationKey;\n    onBlur?(value: string): void;\n    onCancel?(value: string): void;\n    onComplete?(value: string): void;\n    onFocus?(): void;\n    onValueChange?(value: string): void;\n    placeholder?: string;\n    shouldManuallyMaintainScrollPositionWhenFocused?: boolean;\n    value?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Camera Position in TLDraw\nDESCRIPTION: Shows how to control the camera position and zoom level using the setCamera method.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\neditor.setCamera({ x: 0, y: 0, z: 1 })\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for Geometry and UI Operations in TypeScript\nDESCRIPTION: A collection of utility functions for geometric operations and UI interactions. These include functions for polygon intersection checking, point-in-polygon testing, and various other geometric utilities.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function pointInPolygon(A: VecLike, points: VecLike[]): boolean;\nexport function polygonIntersectsPolyline(polygon: VecLike[], polyline: VecLike[]): boolean;\nexport function polygonsIntersect(a: VecLike[], b: VecLike[]): boolean;\nexport function resizeBox<T extends TLBaseBoxShape>(shape: T, info: {\n    handle: TLResizeHandle;\n    initialBounds: Box;\n    initialShape: T;\n    mode: TLResizeMode;\n    newPoint: VecModel;\n    scaleX: number;\n    scaleY: number;\n}, opts?: ResizeBoxOptions): T;\n```\n\n----------------------------------------\n\nTITLE: Defining Context Provider Props Interface in TypeScript\nDESCRIPTION: Interface for the main UI context provider, allowing configuration of assets, components, and event handling.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiContextProviderProps {\n    assetUrls?: RecursivePartial<TLUiAssetUrls>;\n    children?: ReactNode;\n    components?: TLUiComponents;\n    forceMobile?: boolean;\n    mediaMimeTypes?: string[];\n    onUiEvent?: TLUiEventHandler;\n    overrides?: TLUiOverrides | TLUiOverrides[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiIconProps Interface in TypeScript\nDESCRIPTION: Specifies the props for a UI icon component in TLDraw. It extends React's HTMLProps and includes additional properties for icon customization.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TLUiIconProps extends React.HTMLProps<HTMLDivElement> {\n    children?: undefined;\n    color?: string;\n    crossOrigin?: 'anonymous' | 'use-credentials';\n    icon: Exclude<string, TLUiIconType> | TLUiIconType;\n    invertIcon?: boolean;\n    small?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for TLDraw UI Translation Keys\nDESCRIPTION: A TypeScript union type that defines all possible translation keys used throughout the TLDraw application interface. These keys are categorized by their prefixes and represent text strings used in UI elements, actions, menus, and tools.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TLUiTranslationKey = 'a11y.enlarge-shape' | 'a11y.move-shape-faster' | 'a11y.move-shape' | 'a11y.multiple-shapes' | 'a11y.pan-camera' | 'a11y.repeat-shape' | 'a11y.select-shape-direction' | 'a11y.select-shape' | 'a11y.shape-image' | 'a11y.shape-index' | 'a11y.shape-video' | 'a11y.shrink-shape' | 'a11y.skip-to-main-content' | 'action.align-bottom' | 'action.align-center-horizontal.short' | 'action.align-center-horizontal' | 'action.align-center-vertical.short' | 'action.align-center-vertical' | 'action.align-left' | 'action.align-right' | 'action.align-top' | 'action.back-to-content' | 'action.bring-forward' | 'action.bring-to-front' | 'action.convert-to-bookmark' | 'action.convert-to-embed' | 'action.copy-as-png.short' | 'action.copy-as-png' | 'action.copy-as-svg.short' | 'action.copy-as-svg' | 'action.copy' | 'action.cut' | 'action.delete' | 'action.distribute-horizontal.short' | 'action.distribute-horizontal' | 'action.distribute-vertical.short' | 'action.distribute-vertical' | 'action.duplicate' | 'action.edit-link' | 'action.exit-pen-mode' | 'action.export-all-as-png.short' | 'action.export-all-as-png' | 'action.export-all-as-svg.short' | 'action.export-all-as-svg' | 'action.export-as-png.short' | 'action.export-as-png' | 'action.export-as-svg.short' | 'action.export-as-svg' | 'action.fit-frame-to-content' | 'action.flatten-to-image' | 'action.flip-horizontal.short' | 'action.flip-horizontal' | 'action.flip-vertical.short' | 'action.flip-vertical' | 'action.fork-project-on-tldraw' | 'action.fork-project' | 'action.group' | 'action.insert-embed' | 'action.insert-media' | 'action.leave-shared-project' | 'action.new-project' | 'action.new-shared-project' | 'action.open-cursor-chat' | 'action.open-embed-link' | 'action.open-file' | 'action.pack' | 'action.paste-error-description' | 'action.paste-error-title' | 'action.paste' | 'action.print' | 'action.redo' | 'action.remove-frame' | 'action.rename' | 'action.rotate-ccw' | 'action.rotate-cw' | 'action.save-copy' | 'action.select-all' | 'action.select-none' | 'action.send-backward' | 'action.send-to-back' | 'action.share-project' | 'action.stack-horizontal.short' | 'action.stack-horizontal' | 'action.stack-vertical.short' | 'action.stack-vertical' | 'action.stop-following' | 'action.stretch-horizontal.short' | 'action.stretch-horizontal' | 'action.stretch-vertical.short' | 'action.stretch-vertical' | 'action.toggle-auto-size' | 'action.toggle-dark-mode.menu' | 'action.toggle-dark-mode' | 'action.toggle-debug-mode.menu' | 'action.toggle-debug-mode' | 'action.toggle-dynamic-size-mode.menu' | 'action.toggle-dynamic-size-mode' | 'action.toggle-edge-scrolling.menu' | 'action.toggle-edge-scrolling' | 'action.toggle-focus-mode.menu' | 'action.toggle-focus-mode' | 'action.toggle-grid.menu' | 'action.toggle-grid' | 'action.toggle-lock' | 'action.toggle-paste-at-cursor.menu' | 'action.toggle-paste-at-cursor' | 'action.toggle-reduce-motion.menu' | 'action.toggle-reduce-motion' | 'action.toggle-snap-mode.menu' | 'action.toggle-snap-mode' | 'action.toggle-tool-lock.menu' | 'action.toggle-tool-lock' | 'action.toggle-transparent.context-menu' | 'action.toggle-transparent.menu' | 'action.toggle-transparent' | 'action.toggle-wrap-mode.menu' | 'action.toggle-wrap-mode' | 'action.undo' | 'action.ungroup' | 'action.unlock-all' | 'action.zoom-in' | 'action.zoom-out' | 'action.zoom-to-100' | 'action.zoom-to-fit' | 'action.zoom-to-selection' | 'actions-menu.title' | 'align-style.end' | 'align-style.justify' | 'align-style.middle' | 'align-style.start' | 'arrowheadEnd-style.arrow' | 'arrowheadEnd-style.bar' | 'arrowheadEnd-style.diamond' | 'arrowheadEnd-style.dot' | 'arrowheadEnd-style.inverted' | 'arrowheadEnd-style.none' | 'arrowheadEnd-style.pipe' | 'arrowheadEnd-style.square' | 'arrowheadEnd-style.triangle' | 'arrowheadStart-style.arrow' | 'arrowheadStart-style.bar' | 'arrowheadStart-style.diamond' | 'arrowheadStart-style.dot' | 'arrowheadStart-style.inverted' | 'arrowheadStart-style.none' | 'arrowheadStart-style.pipe' | 'arrowheadStart-style.square' | 'arrowheadStart-style.triangle' | 'assets.files.amount-too-many' | 'assets.files.size-too-big' | 'assets.files.type-not-allowed' | 'assets.files.upload-failed' | 'assets.url.failed' | 'color-style.black' | 'color-style.blue' | 'color-style.green' | 'color-style.grey' | 'color-style.light-blue' | 'color-style.light-green' | 'color-style.light-red' | 'color-style.light-violet' | 'color-style.orange' | 'color-style.red' | 'color-style.violet' | 'color-style.white' | 'color-style.yellow' | 'context-menu.arrange' | 'context-menu.copy-as' | 'context-menu.edit' | 'context-menu.export-all-as' | 'context-menu.export-as' | 'context-menu.move-to-page' | 'context-menu.reorder' | 'context-menu.title' | 'context.pages.new-page' | 'cursor-chat.type-to-chat' | 'dash-style.dashed' | 'dash-style.dotted' | 'dash-style.draw' | 'dash-style.solid' | 'document-name-menu.copy-link' | 'document.default-name' | 'edit-link-dialog.cancel' | 'edit-link-dialog.clear' | 'edit-link-dialog.detail' | 'edit-link-dialog.invalid-url' | 'edit-link-dialog.save' | 'edit-link-dialog.title' | 'edit-link-dialog.url' | 'embed-dialog.back' | 'embed-dialog.cancel' | 'embed-dialog.create' | 'embed-dialog.instruction' | 'embed-dialog.invalid-url' | 'embed-dialog.title' | 'embed-dialog.url' | 'file-system.confirm-clear.cancel' | 'file-system.confirm-clear.continue' | 'file-system.confirm-clear.description' | 'file-system.confirm-clear.dont-show-again' | 'file-system.confirm-clear.title' | 'file-system.confirm-open.cancel' | 'file-system.confirm-open.description' | 'file-system.confirm-open.dont-show-again' | 'file-system.confirm-open.open' | 'file-system.confirm-open.title' | 'file-system.file-open-error.file-format-version-too-new' | 'file-system.file-open-error.generic-corrupted-file' | 'file-system.file-open-error.not-a-tldraw-file' | 'file-system.file-open-error.title' | 'file-system.shared-document-file-open-error.description' | 'file-system.shared-document-file-open-error.title' | 'fill-style.fill' | 'fill-style.none' | 'fill-style.pattern' | 'fill-style.semi' | 'fill-style.solid' | 'focus-mode.toggle-focus-mode' | 'font-style.draw' | 'font-style.mono' | 'font-style.sans' | 'font-style.serif' | 'geo-style.arrow-down' | 'geo-style.arrow-left' | 'geo-style.arrow-right' | 'geo-style.arrow-up' | 'geo-style.check-box' | 'geo-style.cloud' | 'geo-style.diamond' | 'geo-style.ellipse' | 'geo-style.heart' | 'geo-style.hexagon' | 'geo-style.octagon' | 'geo-style.oval' | 'geo-style.pentagon' | 'geo-style.rectangle' | 'geo-style.rhombus' | 'geo-style.star' | 'geo-style.trapezoid' | 'geo-style.triangle' | 'geo-style.x-box' | 'help-menu.about' | 'help-menu.discord' | 'help-menu.github' | 'help-menu.import-tldr-file' | 'help-menu.keyboard-shortcuts' | 'help-menu.privacy' | 'help-menu.terms' | 'help-menu.title' | 'help-menu.twitter' | 'menu.copy-as' | 'menu.edit' | 'menu.export-as' | 'menu.file' | 'menu.language' | 'menu.preferences' | 'menu.theme' | 'menu.title' | 'menu.view' | 'navigation-zone.toggle-minimap' | 'navigation-zone.zoom' | 'opacity-style.0.1' | 'opacity-style.0.25' | 'opacity-style.0.5' | 'opacity-style.0.75' | 'opacity-style.1' | 'page-menu.create-new-page' | 'page-menu.edit-done' | 'page-menu.edit-start' | 'page-menu.go-to-page' | 'page-menu.max-page-count-reached' | 'page-menu.new-page-initial-name' | 'page-menu.submenu.delete' | 'page-menu.submenu.duplicate-page' | 'page-menu.submenu.move-down' | 'page-menu.submenu.move-up' | 'page-menu.submenu.rename' | 'page-menu.submenu.title' | 'page-menu.title' | 'people-menu.anonymous-user' | 'people-menu.change-color' | 'people-menu.change-name' | 'people-menu.follow' | 'people-menu.following' | 'people-menu.invite' | 'people-menu.leading' | 'people-menu.title' | 'people-menu.user' | 'share-menu.copied' | 'share-menu.copy-link-note' | 'share-menu.copy-link' | 'share-menu.copy-readonly-link-note' | 'share-menu.copy-readonly-link' | 'share-menu.create-snapshot-link' | 'share-menu.creating-project' | 'share-menu.fork-note' | 'share-menu.offline-note' | 'share-menu.project-too-large' | 'share-menu.save-note' | 'share-menu.share-project' | 'share-menu.snapshot-link-note' | 'share-menu.title' | 'share-menu.upload-failed' | 'sharing.confirm-leave.cancel' | 'sharing.confirm-leave.description' | 'sharing.confirm-leave.dont-show-again' | 'sharing.confirm-leave.leave' | 'sharing.confirm-leave.title' | 'shortcuts-dialog.a11y' | 'shortcuts-dialog.collaboration' | 'shortcuts-dialog.edit' | 'shortcuts-dialog.file' | 'shortcuts-dialog.preferences' | 'shortcuts-dialog.title' | 'shortcuts-dialog.tools' | 'shortcuts-dialog.transform' | 'shortcuts-dialog.view' | 'size-style.l' | 'size-style.m' | 'size-style.s' | 'size-style.xl' | 'spline-style.cubic' | 'spline-style.line' | 'status.offline' | 'style-panel.align' | 'style-panel.arrowhead-end' | 'style-panel.arrowhead-start' | 'style-panel.arrowheads' | 'style-panel.color' | 'style-panel.dash' | 'style-panel.fill' | 'style-panel.font' | 'style-panel.geo' | 'style-panel.label-align' | 'style-panel.mixed' | 'style-panel.opacity' | 'style-panel.position' | 'style-panel.size' | 'style-panel.spline' | 'style-panel.title' | 'style-panel.vertical-align' | 'theme.dark' | 'theme.light' | 'theme.system' | 'toast.close' | 'toast.error.copy-fail.desc' | 'toast.error.copy-fail.title' | 'toast.error.export-fail.desc' | 'toast.error.export-fail.title' | 'tool-panel.more' | 'tool.arrow-down' | 'tool.arrow-left' | 'tool.arrow-right' | 'tool.arrow-up' | 'tool.arrow' | 'tool.bookmark' | 'tool.check-box' | 'tool.cloud' | 'tool.diamond' | 'tool.draw' | 'tool.ellipse' | 'tool.embed' | 'tool.eraser' | 'tool.frame' | 'tool.hand' | 'tool.heart' | 'tool.hexagon' | 'tool.highlight' | 'tool.laser' | 'tool.line' | 'tool.media' | 'tool.note' | 'tool.octagon' | 'tool.oval' | 'tool.pentagon' | 'tool.pointer-down' | 'tool.rectangle' | 'tool.rhombus' | 'tool.rich-text-bold' | 'tool.rich-text-bulletList'\n```\n\n----------------------------------------\n\nTITLE: Defining Binding Types in TypeScript\nDESCRIPTION: Defines binding types and related interfaces for connecting shapes in tldraw.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type TLBinding = TLDefaultBinding | TLUnknownBinding;\n\n// @public (undocumented)\nexport type TLBindingCreate<T extends TLBinding = TLBinding> = Expand<{\n    fromId: T['fromId'];\n    id?: TLBindingId;\n    meta?: Partial<T['meta']>;\n    props?: Partial<T['props']>;\n    toId: T['toId'];\n    type: T['type'];\n    typeName?: T['typeName'];\n}>;\n\n// @public\nexport type TLBindingId = RecordId<TLUnknownBinding>;\n\n// @public (undocumented)\nexport type TLBindingUpdate<T extends TLBinding = TLBinding> = Expand<{\n    fromId?: T['fromId'];\n    id: TLBindingId;\n    meta?: Partial<T['meta']>;\n    props?: Partial<T['props']>;\n    toId?: T['toId'];\n    type: T['type'];\n    typeName?: T['typeName'];\n}>;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Store Side Effects Class in TypeScript\nDESCRIPTION: Class definition for handling store side effects including lifecycle hooks for create, update, and delete operations. Provides methods for registering handlers for different record types and operation phases.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class StoreSideEffects<R extends UnknownRecord> {\n    constructor(store: Store<R>);\n    handleAfterChange(prev: R, next: R, source: 'remote' | 'user'): void;\n    handleAfterCreate(record: R, source: 'remote' | 'user'): void;\n    handleAfterDelete(record: R, source: 'remote' | 'user'): void;\n    handleBeforeChange(prev: R, next: R, source: 'remote' | 'user'): R;\n    handleBeforeCreate(record: R, source: 'remote' | 'user'): R;\n    handleBeforeDelete(record: R, source: 'remote' | 'user'): boolean;\n    handleOperationComplete(source: 'remote' | 'user'): void;\n    isEnabled(): boolean;\n    register(handlersByType: {\n        [T in R as T['typeName']]?: {\n            afterChange?: StoreAfterChangeHandler<T>;\n            afterCreate?: StoreAfterCreateHandler<T>;\n            afterDelete?: StoreAfterDeleteHandler<T>;\n            beforeChange?: StoreBeforeChangeHandler<T>;\n            beforeCreate?: StoreBeforeCreateHandler<T>;\n            beforeDelete?: StoreBeforeDeleteHandler<T>;\n        };\n    }): () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Bookmark Shape Utility Class\nDESCRIPTION: TypeScript class extending BaseBoxShapeUtil for handling bookmark shapes with methods for resizing, updating and rendering.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BookmarkShapeUtil extends BaseBoxShapeUtil<TLBookmarkShape> {\n    canResize(): boolean;\n    component(shape: TLBookmarkShape): JSX_2.Element;\n    getAriaDescriptor(shape: TLBookmarkShape): string | undefined;\n    getDefaultProps(): TLBookmarkShape['props'];\n    getInterpolatedProps(startShape: TLBookmarkShape, endShape: TLBookmarkShape, t: number): TLBookmarkShapeProps;\n    getText(shape: TLBookmarkShape): string;\n    hideSelectionBoundsFg(): boolean;\n    indicator(shape: TLBookmarkShape): JSX_2.Element;\n    static migrations: TLPropsMigrations;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLDraw UI Visibility with hideUi Prop\nDESCRIPTION: Shows how to use the hideUi prop to create a minimal TLDraw editor without the default UI components. This is particularly useful when building custom interfaces or when a simplified drawing experience is desired.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/hide-ui/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n./HideUiExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Method Definitions - Shape Management\nDESCRIPTION: TypeScript method signatures for shape management including visibility, type checking, and locking\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nisShapeHidden(shapeOrId: TLShape | TLShapeId): boolean;\nisShapeInPage(shape: TLShape | TLShapeId, pageId?: TLPageId): boolean;\nisShapeOfType<T extends TLUnknownShape>(shape: TLUnknownShape, type: T['type']): shape is T;\nisShapeOrAncestorLocked(shape?: TLShape): boolean;\n```\n\n----------------------------------------\n\nTITLE: Setting System Color Scheme in TLDraw\nDESCRIPTION: Demonstrates how to use system color scheme preference using UserPreferencesManager.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\neditor.user.updateUserPreferences({ colorScheme: 'system' })\n```\n\n----------------------------------------\n\nTITLE: Implementing TLDraw User Hook\nDESCRIPTION: Hook for creating a TLUser instance with preferences management. Takes options for setting user preferences and returning the configured user object.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useTldrawUser(opts: {\n    setUserPreferences?: (userPreferences: TLUserPreferences) => void;\n    userPreferences?: Signal<TLUserPreferences> | TLUserPreferences;\n}): TLUser;\n```\n\n----------------------------------------\n\nTITLE: Implementing ScribbleManager Class for Handling Scribble Animations in TypeScript\nDESCRIPTION: A class that manages scribble animations in the editor. It provides methods for adding and removing scribbles, managing scribble state, and handling animation timing with ticks.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ScribbleManager {\n    constructor(editor: Editor);\n    addPoint(id: ScribbleItem['id'], x: number, y: number, z?: number): ScribbleItem;\n    // (undocumented)\n    addScribble(scribble: Partial<TLScribble>, id?: string): ScribbleItem;\n    // (undocumented)\n    reset(): void;\n    // (undocumented)\n    scribbleItems: Map<string, ScribbleItem>;\n    // (undocumented)\n    state: \"paused\" | \"running\";\n    stop(id: ScribbleItem['id']): ScribbleItem;\n    tick(elapsed: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: HTMLContainer Component Definition\nDESCRIPTION: A React component that renders an HTML container with provided children and className. It accepts all standard HTML div element attributes as props.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function HTMLContainer({ children, className, ...rest }: HTMLContainerProps): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Header Props Interface in TypeScript\nDESCRIPTION: Interface for dialog header component props, requiring children and allowing optional CSS class.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialogHeaderProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    className?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AtomMap Class in TypeScript\nDESCRIPTION: Definition of the AtomMap class, which implements the Map interface with additional functionality.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AtomMap<K, V> implements Map<K, V> {\n    [Symbol.iterator](): Generator<[K, V], undefined, unknown>;\n    [Symbol.toStringTag]: string;\n    constructor(name: string, entries?: Iterable<[K, V]>);\n    __unsafe__getWithoutCapture(key: K): undefined | V;\n    __unsafe__hasWithoutCapture(key: K): boolean;\n    clear(): void;\n    delete(key: K): boolean;\n    deleteMany(keys: Iterable<K>): [K, V][];\n    entries(): Generator<[K, V], undefined, unknown>;\n    forEach(callbackfn: (value: V, key: K, map: AtomMap<K, V>) => void, thisArg?: any): void;\n    get(key: K): undefined | V;\n    getAtom(key: K): Atom<UNINITIALIZED | V> | undefined;\n    has(key: K): boolean;\n    keys(): Generator<K, undefined, unknown>;\n    set(key: K, value: V): this;\n    get size(): number;\n    update(key: K, updater: (value: V) => V): void;\n    values(): Generator<V, undefined, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Migrations in TLDraw\nDESCRIPTION: Create custom migrations for updating the meta property of records in TLDraw snapshots as data types evolve. Used for maintaining data consistency across versions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/meta-migrations/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Component: ./MetaMigrations.tsx\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions and Constants in TypeScript\nDESCRIPTION: Declares various utility functions and constants for working with signals, atoms, and transactions in the state management system.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/state/api-report.api.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isAtom(value: unknown): value is Atom<unknown>;\nexport function isSignal(value: any): value is Signal<any>;\nexport function isUninitialized(value: any): value is UNINITIALIZED;\nexport function react(name: string, fn: (lastReactedEpoch: number) => any, options?: EffectSchedulerOptions): () => void;\nexport function reactor<Result>(name: string, fn: (lastReactedEpoch: number) => Result, options?: EffectSchedulerOptions): Reactor<Result>;\nexport function transact<T>(fn: () => T): T;\nexport function transaction<T>(fn: (rollback: () => void) => T): T;\nexport function unsafe__withoutCapture<T>(fn: () => T): T;\nexport function whyAmIRunning(): void;\n\nexport const EMPTY_ARRAY: [];\nexport const RESET_VALUE: unique symbol;\nexport const UNINITIALIZED: unique symbol;\n```\n\n----------------------------------------\n\nTITLE: Setting the current tool using editor API in tldraw\nDESCRIPTION: Shows how to programmatically change the active tool even when the UI is hidden, using the editor's setCurrentTool method.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/user-interface.mdx#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\neditor.setCurrentTool('draw')\n```\n\n----------------------------------------\n\nTITLE: Defining Shape Utility Methods in TypeScript Interface\nDESCRIPTION: Interface definition for shape-related utility methods including event handlers, property manipulations, and SVG rendering functions for tldraw shapes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetInterpolatedProps?(startShape: Shape, endShape: Shape, progress: number): Shape['props'];\n// (undocumented)\ngetText(_shape: Shape): string | undefined;\nhideResizeHandles(_shape: Shape): boolean;\nhideRotateHandle(_shape: Shape): boolean;\nhideSelectionBoundsBg(_shape: Shape): boolean;\nhideSelectionBoundsFg(_shape: Shape): boolean;\nabstract indicator(shape: Shape): any;\nisAspectRatioLocked(_shape: Shape): boolean;\nstatic migrations?: LegacyMigrations | MigrationSequence | TLPropsMigrations;\nonBeforeCreate?(next: Shape): Shape | void;\nonBeforeUpdate?(prev: Shape, next: Shape): Shape | void;\n// @internal\nonBindingChange?(shape: Shape): TLShapePartial<Shape> | void;\nonChildrenChange?(shape: Shape): TLShapePartial[] | void;\nonClick?(shape: Shape): TLShapePartial<Shape> | void;\nonCrop?(shape: Shape, info: TLCropInfo<Shape>): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void;\nonDoubleClick?(shape: Shape): TLShapePartial<Shape> | void;\nonDoubleClickEdge?(shape: Shape): TLShapePartial<Shape> | void;\nonDoubleClickHandle?(shape: Shape, handle: TLHandle): TLShapePartial<Shape> | void;\nonDragShapesOut?(shape: Shape, shapes: TLShape[]): void;\nonDragShapesOver?(shape: Shape, shapes: TLShape[]): void;\nonDropShapesOver?(shape: Shape, shapes: TLShape[]): void;\nonEditEnd?(shape: Shape): void;\nonHandleDrag?(shape: Shape, info: TLHandleDragInfo<Shape>): TLShapePartial<Shape> | void;\nonResize?(shape: Shape, info: TLResizeInfo<Shape>): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void;\nonResizeEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void;\nonResizeStart?(shape: Shape): TLShapePartial<Shape> | void;\nonRotate?(initial: Shape, current: Shape): TLShapePartial<Shape> | void;\nonRotateEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void;\nonRotateStart?(shape: Shape): TLShapePartial<Shape> | void;\nonTranslate?(initial: Shape, current: Shape): TLShapePartial<Shape> | void;\nonTranslateEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void;\nonTranslateStart?(shape: Shape): TLShapePartial<Shape> | void;\noptions: {};\nstatic props?: RecordProps<TLUnknownShape>;\n// @internal\nprovidesBackgroundForChildren(_shape: Shape): boolean;\ntoBackgroundSvg?(shape: Shape, ctx: SvgExportContext): null | Promise<null | ReactElement> | ReactElement;\ntoSvg?(shape: Shape, ctx: SvgExportContext): null | Promise<null | ReactElement> | ReactElement;\nstatic type: string;\n```\n\n----------------------------------------\n\nTITLE: Defining VideoShapeUtil class for video shape management in TLDraw\nDESCRIPTION: A class extending BaseBoxShapeUtil to handle video shapes in the TLDraw application. It defines rendering components, property migrations, and SVG export functionality for video elements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_107\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {\n    // (undocumented)\n    canEdit(): boolean;\n    // (undocumented)\n    component(shape: TLVideoShape): JSX_2.Element;\n    // (undocumented)\n    getAriaDescriptor(shape: TLVideoShape): string;\n    // (undocumented)\n    getDefaultProps(): TLVideoShape['props'];\n    // (undocumented)\n    indicator(shape: TLVideoShape): JSX_2.Element;\n    // (undocumented)\n    isAspectRatioLocked(): boolean;\n    // (undocumented)\n    static migrations: TLPropsMigrations;\n    // (undocumented)\n    static props: RecordProps<TLVideoShape>;\n    // (undocumented)\n    toSvg(shape: TLVideoShape, ctx: SvgExportContext): Promise<JSX_2.Element | null>;\n    // (undocumented)\n    static type: \"video\";\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tldraw Components in TypeScript\nDESCRIPTION: This code snippet shows the import statement for the Tldraw editor component and related types. It's typically used at the beginning of a React component file that implements a Tldraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/editor-focus/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tldraw, useEditor, TLUiEventHandler } from '@tldraw/tldraw'\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Sub Trigger Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown submenu trigger props, specifying label, disabled state, and identifiers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuSubTriggerProps {\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    id?: string;\n    // (undocumented)\n    label: string;\n    // (undocumented)\n    title?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Type in TypeScript\nDESCRIPTION: Defines the document type and its identifier for the tldraw application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface TLDocument extends BaseRecord<'document', RecordId<TLDocument>> {\n    // (undocumented)\n    gridSize: number;\n    // (undocumented)\n    meta: JsonObject;\n    // (undocumented)\n    name: string;\n}\n\n// @public (undocumented)\nexport const TLDOCUMENT_ID: RecordId<TLDocument>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Functions and SVG Export Interfaces in TypeScript\nDESCRIPTION: Collection of utility functions for event handling and ID management, plus interfaces for SVG export context and container components.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport const stopEventPropagation: (e: any) => any;\n\n// @internal (undocumented)\nexport type StoreName = (typeof Table)[keyof typeof Table];\n\n// @public (undocumented)\nexport function suffixSafeId(id: SafeId, suffix: string): SafeId;\n\n// @public (undocumented)\nexport function SVGContainer({ children, className, ...rest }: SVGContainerProps): JSX_2.Element;\n\n// @public (undocumented)\nexport type SVGContainerProps = React_3.ComponentProps<'svg'>;\n\n// @public (undocumented)\nexport interface SvgExportContext {\n    addExportDef(def: SvgExportDef): void;\n    readonly isDarkMode: boolean;\n    readonly pixelRatio: null | number;\n    resolveAssetUrl(assetId: TLAssetId, width: number): Promise<null | string>;\n    readonly scale: number;\n    waitUntil(promise: Promise<void>): void;\n}\n\n// @public (undocumented)\nexport interface SvgExportDef {\n    // (undocumented)\n    getElement(): null | Promise<null | ReactElement> | ReactElement;\n    // (undocumented)\n    key: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextAreaProps Interface in TypeScript\nDESCRIPTION: Interface definition for TextAreaProps that specifies the properties required for the text area component in tldraw. Includes handlers for user interactions and state management properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TextAreaProps {\n    // (undocumented)\n    handleBlur(): void;\n    // (undocumented)\n    handleChange(changeInfo: {\n        plaintext?: string;\n        richText?: TLRichText;\n    }): void;\n    // (undocumented)\n    handleDoubleClick(e: any): any;\n    // (undocumented)\n    handleFocus(): void;\n    // (undocumented)\n    handleInputPointerDown(e: React_3.PointerEvent<HTMLElement>): void;\n    // (undocumented)\n    handleKeyDown(e: KeyboardEvent): void;\n    // (undocumented)\n    hasCustomTabBehavior?: boolean;\n    // (undocumented)\n    isEditing: boolean;\n    // (undocumented)\n    richText?: TLRichText;\n    // (undocumented)\n    shapeId: TLShapeId;\n    // (undocumented)\n    text?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: HTMLContainerProps Type Definition\nDESCRIPTION: Type definition for props accepted by the HTMLContainer component, extending standard React HTML attributes for div elements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type HTMLContainerProps = React_3.HTMLAttributes<HTMLDivElement>;\n```\n\n----------------------------------------\n\nTITLE: Defining Image Shape Properties with Validation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define properties for an image shape (TLImageShape) using validation functions. It ensures consistency in shape properties like width, height, URL, and asset ID.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/validate/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const imageShapeProps: RecordProps<TLImageShape> = {\n\tw: T.nonZeroNumber,\n\th: T.nonZeroNumber,\n\tplaying: T.boolean,\n\turl: T.linkUrl,\n\tassetId: assetIdValidator.nullable(),\n\tcrop: ImageShapeCrop.nullable(),\n\tflipX: T.boolean,\n\tflipY: T.boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Checkbox Item Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown menu checkbox item props, specifying checked state, content, and selection handler.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuCheckboxItemProps {\n    // (undocumented)\n    checked?: boolean;\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    onSelect?(e: Event): void;\n    // (undocumented)\n    title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ZoomTool state management for zoom interactions\nDESCRIPTION: A StateNode class that manages zoom tool interactions in the TLDraw application. It defines the behavior of the zoom tool including child states and event handling.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_108\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ZoomTool extends StateNode {\n    // (undocumented)\n    static children(): TLStateNodeConstructor[];\n    // (undocumented)\n    static id: string;\n    // (undocumented)\n    info: TLPointerEventInfo & {\n        onInteractionEnd?: string | undefined;\n    };\n    // (undocumented)\n    static initial: string;\n    // (undocumented)\n    static isLockable: boolean;\n    // (undocumented)\n    onEnter(info: TLPointerEventInfo & {\n```\n\n----------------------------------------\n\nTITLE: Defining Rectangle2d Class for Rectangle Geometry in TypeScript\nDESCRIPTION: A class extending Polygon2d that represents a rectangle in 2D space. It includes properties for width, height, and position, with methods for bounding box calculation and SVG path generation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Rectangle2d extends Polygon2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed'> & {\n        height: number;\n        width: number;\n        x?: number;\n        y?: number;\n    });\n    // (undocumented)\n    getBounds(): Box;\n    // (undocumented)\n    getSvgPathData(): string;\n    // (undocumented)\n    h: number;\n    // (undocumented)\n    w: number;\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1ImageAsset Interface in TypeScript\nDESCRIPTION: Interface for image assets in tldraw version 1, extending the base asset interface. It includes properties for source, filename, and size.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1ImageAsset extends TLV1BaseAsset {\n    // (undocumented)\n    fileName: string;\n    // (undocumented)\n    size: number[];\n    // (undocumented)\n    src: string;\n    // (undocumented)\n    type: TLV1AssetType.Image;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Camera and Cursor Types in TypeScript\nDESCRIPTION: Defines camera and cursor types for the tldraw application, including camera position and cursor appearance.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface TLCamera extends BaseRecord<'camera', TLCameraId> {\n    // (undocumented)\n    meta: JsonObject;\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    y: number;\n    // (undocumented)\n    z: number;\n}\n\n// @public\nexport type TLCameraId = RecordId<TLCamera>;\n\n// @public\nexport type TLCanvasUiColor = SetValue<typeof TL_CANVAS_UI_COLOR_TYPES>;\n\n// @public\nexport interface TLCursor {\n    // (undocumented)\n    rotation: number;\n    // (undocumented)\n    type: TLCursorType;\n}\n\n// @public\nexport type TLCursorType = SetValue<typeof TL_CURSOR_TYPES>;\n```\n\n----------------------------------------\n\nTITLE: Performance Tracking Class\nDESCRIPTION: A class for tracking performance metrics with methods to start/stop tracking and record frame data.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/utils/api-report.api.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PerformanceTracker {\n    isStarted(): boolean;\n    recordFrame: () => void;\n    start(name: string): void;\n    stop(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLTextShape and TLTextShapeProps in TypeScript\nDESCRIPTION: Defines the TLTextShape type and TLTextShapeProps interface, which represent text shapes in the TLDraw application. TLTextShapeProps includes properties for styling and formatting text shapes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type TLTextShape = TLBaseShape<'text', TLTextShapeProps>;\n\n// @public (undocumented)\nexport interface TLTextShapeProps {\n    // (undocumented)\n    autoSize: boolean;\n    // (undocumented)\n    color: TLDefaultColorStyle;\n    // (undocumented)\n    font: TLDefaultFontStyle;\n    // (undocumented)\n    richText: TLRichText;\n    // (undocumented)\n    scale: number;\n    // (undocumented)\n    size: TLDefaultSizeStyle;\n    // (undocumented)\n    textAlign: TLDefaultTextAlignStyle;\n    // (undocumented)\n    w: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VecModel Interface and Validator in TypeScript\nDESCRIPTION: Defines the VecModel interface for representing vector coordinates and a corresponding validator. This is likely used for handling geometric operations in the TLDraw application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface VecModel {\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    y: number;\n    // (undocumented)\n    z?: number;\n}\n\n// @public (undocumented)\nexport const vecModelValidator: T.ObjectValidator<VecModel>;\n```\n\n----------------------------------------\n\nTITLE: Using InFrontOfTheCanvas Component in TLDraw\nDESCRIPTION: Demonstrates how to use the InFrontOfTheCanvas component to display UI elements above the canvas, particularly for selection controls and handles.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/selection-ui/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./SelectionUiExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Arrow Shape Utility Class Methods\nDESCRIPTION: TypeScript interface defining methods for handling arrow shapes including getHandles, getText, indicators and event handlers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetHandles(shape: TLArrowShape): TLHandle[];\ngetInterpolatedProps(startShape: TLArrowShape, endShape: TLArrowShape, progress: number): TLArrowShapeProps;\ngetText(shape: TLArrowShape): string;\nhideResizeHandles(): boolean;\nhideRotateHandle(): boolean;\nhideSelectionBoundsBg(): boolean;\nhideSelectionBoundsFg(): boolean;\nindicator(shape: TLArrowShape): JSX_2.Element | null;\n```\n\n----------------------------------------\n\nTITLE: CubicBezier2d Class Implementation\nDESCRIPTION: Defines a cubic bezier curve class extending Polyline2d with control points and curve manipulation methods.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CubicBezier2d extends Polyline2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & {\n        cp1: Vec;\n        cp2: Vec;\n        end: Vec;\n        start: Vec;\n    });\n    a: Vec;\n    b: Vec;\n    c: Vec;\n    d: Vec;\n    static GetAtT(segment: CubicBezier2d, t: number): Vec;\n    getLength(precision?: number): number;\n    getSvgPathData(first?: boolean): string;\n    getVertices(): Vec[];\n    midPoint(): Vec;\n    nearestPoint(A: Vec): Vec;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Handle Interface in TypeScript\nDESCRIPTION: Interface for handles in tldraw version 1. Handles are control points for shapes and include properties for id, point coordinates, binding capabilities, and index.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1Handle {\n    // (undocumented)\n    bindingId?: string;\n    // (undocumented)\n    canBind?: boolean;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    index: number;\n    // (undocumented)\n    point: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TldrawUiProps Interface in TypeScript\nDESCRIPTION: Defines an interface for TldrawUi component props, extending TLUiContextProviderProps with additional properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TldrawUiProps extends TLUiContextProviderProps {\n    assetUrls?: TLUiAssetUrlOverrides;\n    children?: ReactNode;\n    components?: TLUiComponents;\n    hideUi?: boolean;\n    renderDebugMenuItems?(): React_3.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SharedStyle Type and Classes in TypeScript\nDESCRIPTION: Definition of shared style types and classes for managing style properties across multiple shapes, including methods for applying and setting style values.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type SharedStyle<T> = {\n    readonly type: 'mixed';\n} | {\n    readonly type: 'shared';\n    readonly value: T;\n};\n\n// @internal (undocumented)\nexport class SharedStyleMap extends ReadonlySharedStyleMap {\n    // (undocumented)\n    applyValue<T>(prop: StyleProp<T>, value: T): void;\n    // (undocumented)\n    set<T>(prop: StyleProp<T>, value: SharedStyle<T>): void;\n}\n```\n\n----------------------------------------\n\nTITLE: License Manager Class Implementation\nDESCRIPTION: A class that handles license validation and management, tracking license state and providing methods to validate license keys. It supports development, test, and production environments.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class LicenseManager {\n    constructor(licenseKey: string | undefined, testPublicKey?: string, testEnvironment?: TestEnvironment);\n    // (undocumented)\n    static className: string;\n    // (undocumented)\n    getLicenseFromKey(licenseKey?: string): Promise<LicenseFromKeyResult>;\n    // (undocumented)\n    isCryptoAvailable: boolean;\n    // (undocumented)\n    isDevelopment: boolean;\n    // (undocumented)\n    isTest: boolean;\n    // (undocumented)\n    state: Atom<\"licensed-with-watermark\" | \"licensed\" | \"pending\" | \"unlicensed\", unknown>;\n    // (undocumented)\n    verbose: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Functions in TypeScript\nDESCRIPTION: These functions handle various tasks such as parsing documents, loading fonts, and managing external content in TLDraw.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function parseAndLoadDocument(editor: Editor, document: string, msg: (id: Exclude<string, TLUiTranslationKey> | TLUiTranslationKey) => string, addToast: TLUiToastsContextType['addToast'], onV1FileLoad?: () => void, forceDarkMode?: boolean): Promise<void>;\n\nexport function parseTldrawJsonFile({ json, schema, }: {\n    json: string;\n    schema: TLSchema;\n}): Result<TLStore, TldrawFileParseError>;\n\nexport function preloadFont(id: string, font: TLTypeFace): Promise<FontFace>;\n\nexport function registerDefaultExternalContentHandlers(editor: Editor, options: TLDefaultExternalContentHandlerOpts): void;\n\nexport function registerDefaultSideEffects(editor: Editor): () => void;\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1GroupShape Interface in TypeScript\nDESCRIPTION: Interface for group shapes in tldraw version 1, extending the base shape interface. It includes properties for children shapes and size.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1GroupShape extends TLV1BaseShape {\n    // (undocumented)\n    children: string[];\n    // (undocumented)\n    size: number[];\n    // (undocumented)\n    type: TLV1ShapeType.Group;\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix Model Types\nDESCRIPTION: Type definitions for matrix-like objects, providing interfaces for 2D transformation matrices with six components (a-f) in the standard format.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MatLike = Mat | MatModel;\n\nexport interface MatModel {\n    // (undocumented)\n    a: number;\n    // (undocumented)\n    b: number;\n    // (undocumented)\n    c: number;\n    // (undocumented)\n    d: number;\n    // (undocumented)\n    e: number;\n    // (undocumented)\n    f: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1ImageShape Interface in TypeScript\nDESCRIPTION: Interface for image shapes in tldraw version 1, extending the base shape interface. It includes properties for asset ID and size.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1ImageShape extends TLV1BaseShape {\n    // (undocumented)\n    assetId: string;\n    // (undocumented)\n    size: number[];\n    // (undocumented)\n    type: TLV1ShapeType.Image;\n}\n```\n\n----------------------------------------\n\nTITLE: Line Shape Tool and Utility Implementation\nDESCRIPTION: TypeScript classes implementing line shape functionality including tool state management and shape manipulation utilities.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class LineShapeTool extends StateNode {\n    static children(): TLStateNodeConstructor[];\n    static id: string;\n    static initial: string;\n    shapeType: string;\n}\n\nexport class LineShapeUtil extends ShapeUtil<TLLineShape> {\n    canTabTo(): boolean;\n    component(shape: TLLineShape): JSX_2.Element;\n    getDefaultProps(): TLLineShape['props'];\n    getGeometry(shape: TLLineShape): CubicSpline2d | Polyline2d;\n    getHandles(shape: TLLineShape): TLHandle[];\n    getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry;\n    getInterpolatedProps(startShape: TLLineShape, endShape: TLLineShape, t: number): TLLineShape['props'];\n    hideResizeHandles(): boolean;\n    hideRotateHandle(): boolean;\n    hideSelectionBoundsBg(): boolean;\n    hideSelectionBoundsFg(): boolean;\n    indicator(shape: TLLineShape): JSX_2.Element;\n    static migrations: TLPropsMigrations;\n    onBeforeCreate(next: TLLineShape): TLLineShape | void;\n    onHandleDrag(shape: TLLineShape, { handle }: TLHandleDragInfo<TLLineShape>): object | undefined;\n    onResize(shape: TLLineShape, info: TLResizeInfo<TLLineShape>): object;\n    static props: RecordProps<TLLineShape>;\n    toSvg(shape: TLLineShape): JSX_2.Element;\n    static type: \"line\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1DrawShape Interface in TypeScript\nDESCRIPTION: Interface for draw shapes in tldraw version 1, extending the base shape interface. It includes properties for points and completion status.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1DrawShape extends TLV1BaseShape {\n    // (undocumented)\n    isComplete: boolean;\n    // (undocumented)\n    points: number[][];\n    // (undocumented)\n    type: TLV1ShapeType.Draw;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1EllipseShape Interface in TypeScript\nDESCRIPTION: Interface for ellipse shapes in tldraw version 1, extending the base shape interface. It includes properties for radius, label, and label positioning.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1EllipseShape extends TLV1BaseShape {\n    // (undocumented)\n    label?: string;\n    // (undocumented)\n    labelPoint?: number[];\n    // (undocumented)\n    radius: number[];\n    // (undocumented)\n    type: TLV1ShapeType.Ellipse;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1AlignStyle Enum in TypeScript\nDESCRIPTION: Enum defining text alignment styles for shapes in tldraw version 1. It includes Start, Middle, End, and Justify options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1AlignStyle {\n    // (undocumented)\n    End = \"end\",\n    // (undocumented)\n    Justify = \"justify\",\n    // (undocumented)\n    Middle = \"middle\",\n    // (undocumented)\n    Start = \"start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLDraw Multiplayer Component\nDESCRIPTION: Markdown frontmatter configuration for a multiplayer sync demonstration component. Specifies component path, category, keywords and enables multiplayer functionality.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/sync-demo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Multiplayer sync\ncomponent: ./SyncDemoExample.tsx\ncategory: collaboration\npriority: 1\nkeywords: [basic, intro, simple, quick, start, multiplayer, sync, collaboration]\nmultiplayer: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Types and Functions in TypeScript\nDESCRIPTION: This code snippet defines various validator types, functions, and classes for data validation in TypeScript. It includes validators for common types like numbers, strings, arrays, and objects, as well as more complex validators for unions and custom models.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/validate/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IndexKey } from '@tldraw/utils';\nimport { JsonValue } from '@tldraw/utils';\nimport { MakeUndefinedOptional } from '@tldraw/utils';\n\n// @public\nconst any: Validator<any>;\n\n// @public\nconst array: Validator<unknown[]>;\n\n// @public\nfunction arrayOf<T>(itemValidator: Validatable<T>): ArrayOfValidator<T>;\n\n// @public (undocumented)\nexport class ArrayOfValidator<T> extends Validator<T[]> {\n    constructor(itemValidator: Validatable<T>);\n    // (undocumented)\n    readonly itemValidator: Validatable<T>;\n    // (undocumented)\n    lengthGreaterThan1(): Validator<T[]>;\n    // (undocumented)\n    nonEmpty(): Validator<T[]>;\n}\n\n// @public\nconst bigint: Validator<bigint>;\n\n// @public\nconst boolean: Validator<boolean>;\n\n// @public\nfunction dict<Key extends string, Value>(keyValidator: Validatable<Key>, valueValidator: Validatable<Value>): DictValidator<Key, Value>;\n\n// @public (undocumented)\nexport class DictValidator<Key extends string, Value> extends Validator<Record<Key, Value>> {\n    constructor(keyValidator: Validatable<Key>, valueValidator: Validatable<Value>);\n    // (undocumented)\n    readonly keyValidator: Validatable<Key>;\n    // (undocumented)\n    readonly valueValidator: Validatable<Value>;\n}\n\n// @public\nconst httpUrl: Validator<string>;\n\n// @public\nconst indexKey: Validator<IndexKey>;\n\n// @public\nconst integer: Validator<number>;\n\n// @public\nfunction jsonDict(): DictValidator<string, JsonValue>;\n\n// @public\nconst jsonValue: Validator<JsonValue>;\n\n// @public\nconst linkUrl: Validator<string>;\n\n// @public\nfunction literal<T extends boolean | number | string>(expectedValue: T): Validator<T>;\n\n// @public (undocumented)\nfunction literalEnum<const Values extends readonly unknown[]>(...values: Values): Validator<Values[number]>;\n\n// @public\nfunction model<T extends {\n    readonly id: string;\n}>(name: string, validator: Validatable<T>): Validator<T>;\n\n// @public\nconst nonZeroInteger: Validator<number>;\n\n// @public\nconst nonZeroNumber: Validator<number>;\n\n// @public (undocumented)\nfunction nullable<T>(validator: Validatable<T>): Validator<null | T>;\n\n// @public\nconst number: Validator<number>;\n\n// @internal (undocumented)\nfunction numberUnion<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(key: Key, config: Config): UnionValidator<Key, Config>;\n\n// @public\nfunction object<Shape extends object>(config: {\n    readonly [K in keyof Shape]: Validatable<Shape[K]>;\n}): ObjectValidator<MakeUndefinedOptional<Shape>>;\n\n// @public (undocumented)\nexport class ObjectValidator<Shape extends object> extends Validator<Shape> {\n    constructor(config: {\n        readonly [K in keyof Shape]: Validatable<Shape[K]>;\n    }, shouldAllowUnknownProperties?: boolean);\n    // (undocumented)\n    allowUnknownProperties(): ObjectValidator<Shape>;\n    // (undocumented)\n    readonly config: {\n        readonly [K in keyof Shape]: Validatable<Shape[K]>;\n    };\n    extend<Extension extends Record<string, unknown>>(extension: {\n        readonly [K in keyof Extension]: Validatable<Extension[K]>;\n    }): ObjectValidator<Shape & Extension>;\n}\n\n// @public (undocumented)\nfunction optional<T>(validator: Validatable<T>): Validator<T | undefined>;\n\n// @public\nfunction or<T1, T2>(v1: Validatable<T1>, v2: Validatable<T2>): Validator<T1 | T2>;\n\n// @public\nconst positiveInteger: Validator<number>;\n\n// @public\nconst positiveNumber: Validator<number>;\n\n// @public (undocumented)\nfunction setEnum<T>(values: ReadonlySet<T>): Validator<T>;\n\n// @public\nconst srcUrl: Validator<string>;\n\n// @public\nconst string: Validator<string>;\n\ndeclare namespace T {\n    export {\n        literal,\n        arrayOf,\n        object,\n        jsonDict,\n        dict,\n        union,\n        numberUnion,\n        model,\n        setEnum,\n        optional,\n        nullable,\n        literalEnum,\n        or,\n        ValidatorFn,\n        ValidatorUsingKnownGoodVersionFn,\n        Validatable,\n        ValidationError,\n        TypeOf,\n        Validator,\n        ArrayOfValidator,\n        ObjectValidator,\n        UnionValidatorConfig,\n        UnionValidator,\n        DictValidator,\n        unknown,\n        any,\n        string,\n        number,\n        positiveNumber,\n        nonZeroNumber,\n        integer,\n        positiveInteger,\n        nonZeroInteger,\n        boolean,\n        bigint,\n        array,\n        unknownObject,\n        jsonValue,\n        linkUrl,\n        srcUrl,\n        httpUrl,\n        indexKey\n    }\n}\nexport { T }\n\n// @public (undocumented)\ntype TypeOf<V extends Validatable<any>> = V extends Validatable<infer T> ? T : never;\n\n// @public\nfunction union<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(key: Key, config: Config): UnionValidator<Key, Config>;\n\n// @public (undocumented)\nexport class UnionValidator<Key extends string, Config extends UnionValidatorConfig<Key, Config>, UnknownValue = never> extends Validator<TypeOf<Config[keyof Config]> | UnknownValue> {\n    constructor(key: Key, config: Config, unknownValueValidation: (value: object, variant: string) => UnknownValue, useNumberKeys: boolean);\n    // (undocumented)\n    validateUnknownVariants<Unknown>(unknownValueValidation: (value: object, variant: string) => Unknown): UnionValidator<Key, Config, Unknown>;\n}\n\n// @public (undocumented)\nexport type UnionValidatorConfig<Key extends string, Config> = {\n    readonly [Variant in keyof Config]: Validatable<any> & {\n        validate(input: any): {\n            readonly [K in Key]: Variant;\n        };\n    };\n};\n\n// @public\nconst unknown: Validator<unknown>;\n\n// @public (undocumented)\nconst unknownObject: Validator<Record<string, unknown>>;\n\n// @public (undocumented)\ninterface Validatable<T> {\n    // (undocumented)\n    validate(value: unknown): T;\n    validateUsingKnownGoodVersion?(knownGoodValue: T, newValue: unknown): T;\n}\n\n// @public (undocumented)\nclass ValidationError extends Error {\n    constructor(rawMessage: string, path?: ReadonlyArray<number | string>);\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    readonly path: ReadonlyArray<number | string>;\n    // (undocumented)\n    readonly rawMessage: string;\n}\n\n// @public (undocumented)\nexport class Validator<T> implements Validatable<T> {\n    constructor(validationFn: ValidatorFn<T>, validateUsingKnownGoodVersionFn?: undefined | ValidatorUsingKnownGoodVersionFn<T, T>);\n    check(name: string, checkFn: (value: T) => void): Validator<T>;\n    // (undocumented)\n    check(checkFn: (value: T) => void): Validator<T>;\n    isValid(value: unknown): value is T;\n    nullable(): Validator<null | T>;\n    optional(): Validator<T | undefined>;\n    refine<U>(otherValidationFn: (value: T) => U): Validator<U>;\n    validate(value: unknown): T;\n    // (undocumented)\n    validateUsingKnownGoodVersion(knownGoodValue: T, newValue: unknown): T;\n    // (undocumented)\n    readonly validateUsingKnownGoodVersionFn?: undefined | ValidatorUsingKnownGoodVersionFn<T, T>;\n    // (undocumented)\n    readonly validationFn: ValidatorFn<T>;\n}\n\n// @public (undocumented)\ntype ValidatorFn<T> = (value: unknown) => T;\n\n// @public (undocumented)\ntype ValidatorUsingKnownGoodVersionFn<In, Out = In> = (knownGoodValue: In, value: unknown) => Out;\n```\n\n----------------------------------------\n\nTITLE: Default Constants Declaration in TypeScript\nDESCRIPTION: Declares public constants for maximum asset size and image dimensions used in the application. Also includes component declarations for UI elements like announcer, menus, and dialogs.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DEFAULT_MAX_ASSET_SIZE: number;\n\nexport const DEFAULT_MAX_IMAGE_DIMENSION = 5000;\n\nexport const DefaultA11yAnnouncer: NamedExoticComponent<object>;\n\nexport const DefaultActionsMenu: NamedExoticComponent<TLUiActionsMenuProps>;\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Shape Type in TypeScript\nDESCRIPTION: Type definition for shapes in tldraw version 1, which can be any of the specific shape types such as arrow, rectangle, ellipse, etc.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport type TLV1Shape = TLV1ArrowShape | TLV1DrawShape | TLV1EllipseShape | TLV1GroupShape | TLV1ImageShape | TLV1RectangleShape | TLV1StickyShape | TLV1TextShape | TLV1TriangleShape | TLV1VideoShape;\n```\n\n----------------------------------------\n\nTITLE: Defining Image Annotator Component Documentation\nDESCRIPTION: Markdown frontmatter defining the component documentation structure, including title, file path, category, priority and relevant keywords for the image annotator example.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/image-annotator/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Image annotator\ncomponent: ./ImageAnnotatorExample.tsx\ncategory: use-cases\npriority: 1\nkeywords: [annotation, camera options, constraints, zoom, pan, camera bounds, pan speed, zoom speed]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Note Shape Properties in TypeScript\nDESCRIPTION: This snippet defines the properties for a note shape in TLDraw, including various style options and text content.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nlabelColor: \"black\" | \"blue\" | \"green\" | \"grey\" | \"light-blue\" | \"light-green\" | \"light-red\" | \"light-violet\" | \"orange\" | \"red\" | \"violet\" | \"white\" | \"yellow\";\nrichText: {\n    content: unknown[];\n    type: string;\n};\nscale: number;\nsize: \"l\" | \"m\" | \"s\" | \"xl\";\nurl: string;\nverticalAlign: \"end\" | \"middle\" | \"start\";\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1StickyShape Interface in TypeScript\nDESCRIPTION: Interface for sticky note shapes in tldraw version 1, extending the base shape interface. It includes properties for size and text content.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1StickyShape extends TLV1BaseShape {\n    // (undocumented)\n    size: number[];\n    // (undocumented)\n    text: string;\n    // (undocumented)\n    type: TLV1ShapeType.Sticky;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Page Interface in TypeScript\nDESCRIPTION: Interface for pages in tldraw version 1. It includes properties for shapes, bindings, and page metadata.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1Page {\n    // (undocumented)\n    bindings: Record<string, TLV1Binding>;\n    // (undocumented)\n    childIndex?: number;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    name?: string;\n    // (undocumented)\n    shapes: Record<string, TLV1Shape>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1ShapeStyles Interface in TypeScript\nDESCRIPTION: Interface for shape styles in tldraw version 1. It includes properties for color, dash style, fill status, scale, size, font, and text alignment.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1ShapeStyles {\n    // (undocumented)\n    color: TLV1ColorStyle;\n    // (undocumented)\n    dash: TLV1DashStyle;\n    // (undocumented)\n    font?: TLV1FontStyle;\n    // (undocumented)\n    isFilled?: boolean;\n    // (undocumented)\n    scale?: number;\n    // (undocumented)\n    size: TLV1SizeStyle;\n    // (undocumented)\n    textAlign?: TLV1AlignStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: License Management Interface and Types\nDESCRIPTION: Interfaces and types for handling license validation, including structures for representing valid and invalid license states and reasons for license invalidation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface InvalidLicenseKeyResult {\n    // (undocumented)\n    isLicenseParseable: false;\n    // (undocumented)\n    reason: InvalidLicenseReason;\n}\n\nexport type InvalidLicenseReason = 'has-key-development-mode' | 'invalid-license-key' | 'no-key-provided';\n\nexport type LicenseFromKeyResult = InvalidLicenseKeyResult | ValidLicenseKeyResult;\n\nexport interface LicenseInfo {\n    // (undocumented)\n    expiryDate: string;\n    // (undocumented)\n    flags: number;\n    // (undocumented)\n    hosts: string[];\n    // (undocumented)\n    id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TldrawBaseProps Interface in TypeScript\nDESCRIPTION: Interface definition for TldrawBaseProps that extends UI props, editor base props, and external content props. Includes configuration for assets, components, and embeds.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TldrawBaseProps extends TldrawUiProps, TldrawEditorBaseProps, TLExternalContentProps {\n    // (undocumented)\n    assetUrls?: TLUiAssetUrlOverrides;\n    // (undocumented)\n    components?: TLComponents;\n    // (undocumented)\n    embeds?: TLEmbedDefinition[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UI Components Interface in TypeScript\nDESCRIPTION: Comprehensive interface defining all available UI component overrides for the TLDraw application, including menus, panels, and dialogs.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiComponents {\n    // (undocumented)\n    A11y?: ComponentType | null;\n    // (undocumented)\n    ActionsMenu?: ComponentType<TLUiActionsMenuProps> | null;\n    // (undocumented)\n    ContextMenu?: ComponentType<TLUiContextMenuProps> | null;\n    // (undocumented)\n    CursorChatBubble?: ComponentType | null;\n    // (undocumented)\n    DebugMenu?: ComponentType | null;\n    // (undocumented)\n    DebugPanel?: ComponentType | null;\n    // (undocumented)\n    Dialogs?: ComponentType | null;\n    // (undocumented)\n    HelperButtons?: ComponentType<TLUiHelperButtonsProps> | null;\n    // (undocumented)\n    HelpMenu?: ComponentType<TLUiHelpMenuProps> | null;\n    // (undocumented)\n    KeyboardShortcutsDialog?: ComponentType<TLUiKeyboardShortcutsDialogProps> | null;\n    // (undocumented)\n    MainMenu?: ComponentType<TLUiMainMenuProps> | null;\n    // (undocumented)\n    MenuPanel?: ComponentType | null;\n    // (undocumented)\n    Minimap?: ComponentType | null;\n    // (undocumented)\n    NavigationPanel?: ComponentType | null;\n    // (undocumented)\n    PageMenu?: ComponentType | null;\n    // (undocumented)\n    QuickActions?: ComponentType<TLUiQuickActionsProps> | null;\n    // (undocumented)\n    RichTextToolbar?: ComponentType<TLUiRichTextToolbarProps> | null;\n    // (undocumented)\n    SharePanel?: ComponentType | null;\n    // (undocumented)\n    StylePanel?: ComponentType<TLUiStylePanelProps> | null;\n    // (undocumented)\n    Toasts?: ComponentType | null;\n    // (undocumented)\n    Toolbar?: ComponentType | null;\n    // (undocumented)\n    TopPanel?: ComponentType | null;\n    // (undocumented)\n    ZoomMenu?: ComponentType<TLUiZoomMenuProps> | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Interface in TypeScript\nDESCRIPTION: Interface for dialog configuration, specifying component, ID, close handler, and background close behavior.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialog {\n    // (undocumented)\n    component: ComponentType<TLUiDialogProps>;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    onClose?(): void;\n    // (undocumented)\n    preventBackgroundClose?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Root Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown menu root container props, specifying ID, modal behavior, and debug options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuRootProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    debugOpen?: boolean;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    modal?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom translations for tldraw UI elements\nDESCRIPTION: Shows how to add translations for custom UI elements in tldraw by providing language-specific text mappings through the translations override.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/user-interface.mdx#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst myOverrides: TLUiOverrides = {\n\ttranslations: {\n\t\ten: {\n\t\t\t'tools.card': 'Card',\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoteShapeTool Class in TypeScript\nDESCRIPTION: This class defines the NoteShapeTool, which handles the behavior and rendering of note shapes in TLDraw.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class NoteShapeTool extends StateNode {\n    // (undocumented)\n    static id: string;\n    // (undocumented)\n    static initial: string;\n    // (undocumented)\n    static children(): StateNode[];\n    // (undocumented)\n    onExit: () => void;\n    // (undocumented)\n    shapeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions and Interfaces for tldraw Sync Module\nDESCRIPTION: Defines TypeScript types and interfaces for synchronization functionality in tldraw, including RemoteTLStoreWithStatus type, useSync and useSyncDemo functions, and related interface definitions for sync options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/sync/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Editor } from 'tldraw';\nimport { Signal } from 'tldraw';\nimport { TLAssetStore } from 'tldraw';\nimport { TLPresenceStateInfo } from 'tldraw';\nimport { TLPresenceUserInfo } from 'tldraw';\nimport { TLStore } from 'tldraw';\nimport { TLStoreSchemaOptions } from 'tldraw';\nimport { TLStoreWithStatus } from 'tldraw';\n\nexport type RemoteTLStoreWithStatus = Exclude<TLStoreWithStatus, {\n    status: 'not-synced';\n} | {\n    status: 'synced-local';\n}>;\n\nexport function useSync(opts: UseSyncOptions & TLStoreSchemaOptions): RemoteTLStoreWithStatus;\n\nexport function useSyncDemo(options: UseSyncDemoOptions & TLStoreSchemaOptions): RemoteTLStoreWithStatus;\n\nexport interface UseSyncDemoOptions {\n    getUserPresence?(store: TLStore, user: TLPresenceUserInfo): null | TLPresenceStateInfo;\n    host?: string;\n    roomId: string;\n    userInfo?: Signal<TLPresenceUserInfo> | TLPresenceUserInfo;\n}\n\nexport interface UseSyncOptions {\n    assets: TLAssetStore;\n    getUserPresence?(store: TLStore, user: TLPresenceUserInfo): null | TLPresenceStateInfo;\n    onMount?(editor: Editor): void;\n    roomId?: string;\n    trackAnalyticsEvent?(name: string, data: {\n        [key: string]: any;\n    }): void;\n    uri: (() => Promise<string> | string) | string;\n    userInfo?: Signal<TLPresenceUserInfo> | TLPresenceUserInfo;\n}\n\nexport * from \"@tldraw/sync-core\";\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1SizeStyle Enum in TypeScript\nDESCRIPTION: Enum defining size styles for shapes in tldraw version 1. It includes Small, Medium, and Large options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1SizeStyle {\n    // (undocumented)\n    Large = \"large\",\n    // (undocumented)\n    Medium = \"medium\",\n    // (undocumented)\n    Small = \"small\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hard Reset Function with Optional Reload Parameter\nDESCRIPTION: Provides a function to perform a hard reset with an optional reload parameter. The function returns a Promise that resolves when the reset is complete.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function hardReset({ shouldReload }?: {\n    shouldReload?: boolean | undefined;\n}): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining Embed Shape Types in TypeScript\nDESCRIPTION: Defines embed shape types for embedding external content in tldraw.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLEmbedShape = TLBaseShape<'embed', TLEmbedShapeProps>;\n\n// @public (undocumented)\nexport interface TLEmbedShapeProps {\n    // (undocumented)\n    h: number;\n    // (undocumented)\n    url: string;\n    // (undocumented)\n    w: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting TldrawShapeIndicators Component in TypeScript/JSX\nDESCRIPTION: Exports a function component named TldrawShapeIndicators that returns a JSX element.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function TldrawShapeIndicators(): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Body Props Interface in TypeScript\nDESCRIPTION: Interface for dialog body component props, specifying required children and optional styling.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialogBodyProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    style?: CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deep Link Strings in tldraw (TSX)\nDESCRIPTION: This snippet shows how to use the `createDeepLinkString` helper function to generate deep link strings for different types of targets, including pages, shapes, and viewport coordinates.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/deep-links/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ncreateDeepLinkString({ type: 'page', pageId: 'page:abc123' })\n// => 'pabc123'\ncreateDeepLinkString({ type: 'shapes', shapeIds: ['shape:foo', 'shape:bar'] })\n// => 'sfoo.bar'\ncreateDeepLinkString({\n\ttype: 'viewport',\n\tpageId: 'page:abc123',\n\tbounds: {\n\t\tx: 0,\n\t\ty: 0,\n\t\tw: 1024,\n\t\th: 768,\n\t},\n})\n// => 'v0.0.1024.768.abc123'\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for Shape Management\nDESCRIPTION: A collection of utility functions for managing arrow bindings, crop operations, media assets, and embedding functionality.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getArrowBindings(editor: Editor, shape: TLArrowShape): TLArrowBindings;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getArrowTerminalsInArrowSpace(editor: Editor, shape: TLArrowShape, bindings: TLArrowBindings): {\n    end: Vec;\n    start: Vec;\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getCropBox<T extends ShapeWithCrop>(shape: T, info: TLCropInfo<T>, opts?: CropBoxOptions): {\n    id: TLShapeId;\n    props: ShapeWithCrop['props'];\n    type: T['type'];\n    x: number;\n    y: number;\n} | undefined;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getDefaultCrop(): {\n    bottomRight: {\n        x: number;\n        y: number;\n    };\n    topLeft: {\n        x: number;\n        y: number;\n    };\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getEmbedInfo(definitions: readonly TLEmbedDefinition[], inputUrl: string): TLEmbedResult;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getMediaAssetInfoPartial(file: File, assetId: TLAssetId, isImageType: boolean, isVideoType: boolean, maxImageDimension?: number): Promise<TLImageAsset | TLVideoAsset>;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getOccludedChildren(editor: Editor, parent: TLShape): TLShapeId[];\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getUncroppedSize(shapeSize: {\n    h: number;\n    w: number;\n}, crop: null | TLShapeCrop): {\n    h: number;\n    w: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1FontStyle Enum in TypeScript\nDESCRIPTION: Enum defining font styles for text in tldraw version 1. It includes Sans, Serif, Mono, and Script options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1FontStyle {\n    // (undocumented)\n    Mono = \"mono\",\n    // (undocumented)\n    Sans = \"sans\",\n    // (undocumented)\n    Script = \"script\",\n    // (undocumented)\n    Serif = \"serif\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Sub Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown submenu props, requiring children and a unique identifier.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuSubProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Binding Type in TypeScript\nDESCRIPTION: Type definition for bindings in tldraw version 1, which is currently just the TLV1ArrowBinding type.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport type TLV1Binding = TLV1ArrowBinding;\n```\n\n----------------------------------------\n\nTITLE: Defining Contextual Toolbar Props Interface in TypeScript\nDESCRIPTION: Interface for the contextual toolbar component props, allowing children elements and custom CSS classes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiContextualToolbarProps {\n    // (undocumented)\n    children?: React_3.ReactNode;\n    // (undocumented)\n    className?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Export and Asset Handling Methods in TLDraw\nDESCRIPTION: Methods for exporting content as SVG and handling temporary assets in the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @deprecated (undocumented)\ngetSvg(shapes: TLShape[] | TLShapeId[], opts?: TLSvgExportOptions): Promise<SVGSVGElement | undefined>;\ngetSvgElement(shapes: TLShape[] | TLShapeId[], opts?: TLSvgExportOptions): Promise<{\n    height: number;\n    svg: SVGSVGElement;\n    width: number;\n} | undefined>;\ngetSvgString(shapes: TLShape[] | TLShapeId[], opts?: TLSvgExportOptions): Promise<{\n    height: number;\n    svg: string;\n    width: number;\n} | undefined>;\ngetTemporaryAssetPreview(assetId: TLAssetId): string | undefined;\ngetTextOptions(): TLTextOptions;\n// @internal (undocumented)\ngetUnorderedRenderingShapes(useEditorState: boolean): TLRenderingShape[];\ngetViewportPageBounds(): Box;\ngetViewportScreenBounds(): Box;\ngetViewportScreenCenter(): Vec;\ngetZoomLevel(): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Shape Types in TypeScript\nDESCRIPTION: Defines frame shape types for grouping content in tldraw, including its properties like dimensions and name.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type TLFrameShape = TLBaseShape<'frame', TLFrameShapeProps>;\n\n// @public (undocumented)\nexport interface TLFrameShapeProps {\n    // (undocumented)\n    color: TLDefaultColorStyle;\n    // (undocumented)\n    h: number;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    w: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions in TypeScript with @tldraw/store\nDESCRIPTION: This code demonstrates the usage of helper functions like createRecordType and assertIdType, which are utility functions provided by the @tldraw/store library.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst recordType = createRecordType('author'))\n\nconst id = recordType.createCustomId('tolkein')\n\nassertIdType(id, recordType)\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Declarations for @tldraw/state-react\nDESCRIPTION: Defines React hooks and utilities for state management, including atom creation, computed values, reactors, and state tracking. Includes imports from @tldraw/state and React, with type definitions for various state management functions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/state-react/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Atom } from '@tldraw/state';\nimport { AtomOptions } from '@tldraw/state';\nimport { Computed } from '@tldraw/state';\nimport { ComputedOptions } from '@tldraw/state';\nimport { FunctionComponent } from 'react';\nimport { default as React_2 } from 'react';\nimport { Signal } from '@tldraw/state';\n\n// @public\nexport function track<T extends FunctionComponent<any>>(baseComponent: T): React_2.NamedExoticComponent<React_2.ComponentProps<T>>;\n\n// @public\nexport function useAtom<Value, Diff = unknown>(name: string, valueOrInitialiser: (() => Value) | Value, options?: AtomOptions<Value, Diff>): Atom<Value, Diff>;\n\n// @public (undocumented)\nexport function useComputed<Value>(name: string, compute: () => Value, deps: any[]): Computed<Value>;\n\n// @public\nexport function useComputed<Value, Diff = unknown>(name: string, compute: () => Value, opts: ComputedOptions<Value, Diff>, deps: any[]): Computed<Value>;\n\n// @public (undocumented)\nexport function useQuickReactor(name: string, reactFn: () => void, deps?: any[]): void;\n\n// @public (undocumented)\nexport function useReactor(name: string, reactFn: () => void, deps?: any[] | undefined): void;\n\n// @public\nexport function useStateTracking<T>(name: string, render: () => T, deps?: unknown[]): T;\n\n// @public (undocumented)\nexport function useValue<Value>(value: Signal<Value>): Value;\n\n// @public\nexport function useValue<Value>(name: string, fn: () => Value, deps: unknown[]): Value;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Inference in TLDraw\nDESCRIPTION: Shows the markdown documentation for enabling dark mode inference in TLDraw. The inferDarkMode prop allows automatic theme detection based on system preferences, with Command + / shortcut for manual toggling.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/infer-dark-mode/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Infer dark mode\ncomponent: ./InferDarkModeExample.tsx\ncategory: basic\npriority: 5\nkeywords: [props]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Decoration Enum in TypeScript\nDESCRIPTION: Enum defining decorations for shapes in tldraw version 1. Currently only includes the Arrow decoration.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1Decoration {\n    // (undocumented)\n    Arrow = \"arrow\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FrameShapeTool Class in TypeScript\nDESCRIPTION: Implementation of a tool for creating frame shapes, extending BaseBoxShapeTool with specific creation behavior.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FrameShapeTool extends BaseBoxShapeTool {\n    // (undocumented)\n    static id: string;\n    // (undocumented)\n    static initial: string;\n    // (undocumented)\n    onCreate(shape: null | TLShape): void;\n    // (undocumented)\n    shapeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Bounds Interface in TypeScript\nDESCRIPTION: Interface for bounds in tldraw version 1. It includes properties for width, height, min/max coordinates, and optional rotation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1Bounds {\n    // (undocumented)\n    height: number;\n    // (undocumented)\n    maxX: number;\n    // (undocumented)\n    maxY: number;\n    // (undocumented)\n    minX: number;\n    // (undocumented)\n    minY: number;\n    // (undocumented)\n    rotation?: number;\n    // (undocumented)\n    width: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Base64 Asset Store Declaration\nDESCRIPTION: Declaration of an asset store that likely handles assets encoded as inline base64 strings, implementing the TLAssetStore interface.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const inlineBase64AssetStore: TLAssetStore;\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1BaseAsset Interface in TypeScript\nDESCRIPTION: Interface for the base asset in tldraw version 1. It includes id and type properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1BaseAsset {\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    type: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Title Props Interface in TypeScript\nDESCRIPTION: Interface for dialog title component props, requiring children and allowing optional styling.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialogTitleProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    style?: CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Default User Presence Function\nDESCRIPTION: Function that returns default user presence state including cursor position, camera view, selected shapes and other UI state.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getDefaultUserPresence(store: TLStore, user: TLPresenceUserInfo): {\n    brush: BoxModel | null;\n    camera: {\n        x: number;\n        y: number;\n        z: number;\n    };\n    chatMessage: string;\n    color: string;\n    currentPageId: TLPageId;\n    cursor: {\n        rotation: number;\n        type: string;\n        x: number;\n        y: number;\n    };\n    followingUserId: null | string;\n    lastActivityTimestamp: number;\n    meta: {};\n    screenBounds: BoxModel;\n    scribbles: TLScribble[];\n    selectedShapeIds: TLShapeId[];\n    userId: string;\n    userName: string;\n} | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Label Props Interface in TypeScript\nDESCRIPTION: Interface definition for button label properties, accepting optional React children elements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiButtonLabelProps {\n    // (undocumented)\n    children?: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TLShape Type with New Property in TypeScript\nDESCRIPTION: This code snippet shows how to update the TLShape type by adding a new 'ownerId' property of type ID<TLUser> | null.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nx: number\ny: number\nownerId: ID<TLUser> | null\nprops: Props\nparentId: ID<TLShape> | ID<TLPage>\n```\n\n----------------------------------------\n\nTITLE: Implementing tldraw Collaboration with Sync Demo\nDESCRIPTION: React component implementation that adds collaborative features to tldraw using the useSyncDemo hook, which connects to a hosted backend using a specified room ID.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/collaboration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport { useSyncDemo } from '@tldraw/sync'\n\nfunction MyApp() {\n\tconst store = useSyncDemo({ roomId: 'my-unique-room-id' })\n\treturn <Tldraw store={store} />\n}\n```\n\n----------------------------------------\n\nTITLE: Server Architecture Overview\nDESCRIPTION: Core server components including the main worker entrypoint, durable object implementation, asset handling, and bookmark unfurling functionality\nSOURCE: https://github.com/tldraw/tldraw/blob/main/templates/sync-cloudflare/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nworker/\n  |- worker.ts              // Main entrypoint defining available routes\n  |- TldrawDurableObject.ts  // Sync durable object for room management\n  |- assetUploads.ts         // Asset upload/download handling\n  |- bookmarkUnfurling.ts    // URL metadata extraction\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1RectangleShape Interface in TypeScript\nDESCRIPTION: Interface for rectangle shapes in tldraw version 1, extending the base shape interface. It includes properties for size, label, and label positioning.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1RectangleShape extends TLV1BaseShape {\n    // (undocumented)\n    label?: string;\n    // (undocumented)\n    labelPoint?: number[];\n    // (undocumented)\n    size: number[];\n    // (undocumented)\n    type: TLV1ShapeType.Rectangle;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiMenuContextType Type in TypeScript\nDESCRIPTION: Defines a union type for possible menu context types in the TLDraw application. This includes various UI elements where menus can appear.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TLUiMenuContextType = 'context-menu' | 'helper-buttons' | 'icons' | 'keyboard-shortcuts' | 'menu' | 'panel' | 'small-icons' | 'toolbar-overflow' | 'toolbar';\n```\n\n----------------------------------------\n\nTITLE: Result Types for Error Handling\nDESCRIPTION: Type definitions and interfaces for handling operation results with success/error states using OkResult and ErrorResult types.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/utils/api-report.api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OkResult<T> {\n    readonly ok: true;\n    readonly value: T;\n}\n\nexport type Result<T, E> = ErrorResult<E> | OkResult<T>;\n\nexport const Result: {\n    err<E>(error: E): ErrorResult<E>;\n    ok<T>(value: T): OkResult<T>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Migration IDs in TypeScript\nDESCRIPTION: Shows how to create a set of migration IDs using createMigrationIds with a unique namespace identifier.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMigrationIds } from 'tldraw'\n\n// The first argument is a unique namespace for your migration sequence.\n// We recommend using a reverse domain name, e.g. we use 'com.tldraw.foo.bar'\nconst SEQUENCE_ID = 'com.example.my-app'\n\nconst Versions = createMigrationIds(SEQUENCE_ID, {\n\t// Migrations must start at 1 and be sequential integers.\n\tAddColor: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Shape Example for tldraw Sync in TypeScript\nDESCRIPTION: This code snippet imports a custom shape example component for use with tldraw's synchronization features. It demonstrates how to integrate custom shapes into a collaborative drawing environment.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/sync-custom-shape/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SyncDemoShapeExample } from './SyncDemoShapeExample.tsx';\n```\n\n----------------------------------------\n\nTITLE: Event Handling Order Example\nDESCRIPTION: Demonstration of event handling order between parent and child states in a tool.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/tools.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyIdleState extends StateNode {\n\tstatic override id = 'my-idle-state'\n\n\tonPointerDown(info: TLPointerEventInfo) {\n\t\tconsole.log('world')\n\t}\n}\n\nclass MyTool extends StateNode {\n\tstatic override id = 'my-tool'\n\tstatic override initial = 'my-idle-state'\n\tstatic override children() {\n\t\treturn [MyIdleState]\n\t}\n\n\tonPointerDown(info: TLPointerEventInfo) {\n\t\tconsole.log('hello')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Binding Structure in JSON\nDESCRIPTION: This snippet shows the structure of a binding object for an arrow in TLDraw. It includes properties such as ID, type, from/to shape IDs, and specific props for the arrow binding.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"binding:someId\",\n    \"typeName\": \"binding\"\n    \"type\": \"arrow\",\n    \"fromId\": \"shape:arrowId\",\n    \"toId\": \"shape:someOtherShapeId\",\n    \"props\": {\n        \"terminal\": \"end\"\n        \"isPrecise\": true,\n        \"isExact\": false,\n        \"normalizedAnchor\": {\n            \"x\": 0.5,\n            \"y\": 0.5\n        },\n    },\n    \"meta\": {},\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Supabase Environment Variables for Local Development\nDESCRIPTION: This snippet shows how to configure the required Supabase environment variables for local development of the dotcom-worker. It demonstrates creating a .dev.vars file with the SUPABASE_URL and SUPABASE_KEY that will be read by 'wrangler dev --local' command.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/dotcom/sync-worker/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSUPABASE_URL=<url>\nSUPABASE_KEY=<key>\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1BaseBinding Interface in TypeScript\nDESCRIPTION: Interface for the base binding in tldraw version 1. It includes id, fromId, and toId properties to connect elements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1BaseBinding {\n    // (undocumented)\n    fromId: string;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    toId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import References\nDESCRIPTION: Import declarations defining the dependencies and types used throughout the TLDraw library.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { Atom } from '@tldraw/editor';\nimport { BaseBoxShapeTool } from '@tldraw/editor';\nimport { BaseBoxShapeUtil } from '@tldraw/editor';\nimport { BindingOnChangeOptions } from '@tldraw/editor';\nimport { BindingOnCreateOptions } from '@tldraw/editor';\nimport { BindingOnShapeChangeOptions } from '@tldraw/editor';\nimport { BindingOnShapeIsolateOptions } from '@tldraw/editor';\nimport { BindingUtil } from '@tldraw/editor';\nimport { Box } from '@tldraw/editor';\nimport { Circle2d } from '@tldraw/editor';\nimport { ComponentType } from 'react';\nimport { CSSProperties } from 'react';\nimport { CubicSpline2d } from '@tldraw/editor';\nimport { Editor } from '@tldraw/editor';\nimport { Extension } from '@tiptap/core';\nimport { Extensions } from '@tiptap/core';\nimport { Geometry2d } from '@tldraw/editor';\nimport { Group2d } from '@tldraw/editor';\nimport { HandleSnapGeometry } from '@tldraw/editor';\nimport { IndexKey } from '@tldraw/editor';\nimport { JsonObject } from '@tldraw/editor';\n```\n\n----------------------------------------\n\nTITLE: Importing StickerExample Component in TypeScript\nDESCRIPTION: This code snippet shows the import statement for the StickerExample component, which demonstrates the sticker shape with bindings functionality in tldraw.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/sticker-bindings/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StickerExample } from './StickerExample'\n```\n\n----------------------------------------\n\nTITLE: Converting Legacy Shape Props Migrations\nDESCRIPTION: Demonstrates how to convert legacy shape migrations to the new migration format using createShapePropsMigrationSequence.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst migrations = createShapePropsMigrationSequence({\n\tsequence: [\n\t\t{\n\t\t\tid: Versions.AddColor,\n\t\t\t// [!!!] You no longer have access to the top-level shape object.\n\t\t\t// Only the shape.props object is passed in to the migrator function.\n\t\t\tup(props) {\n\t\t\t\t// [!!!] You no longer need to return a new copy of the shape object.\n\t\t\t\t// Instead, you can modify the props object in place.\n\t\t\t\tprops.color = 'black'\n\t\t\t},\n\t\t\t// [!!!] You no longer need to specify a down migration.\n\t\t},\n\t],\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Props Interface\nDESCRIPTION: Interface defining the props for the LoadingScreen component, which requires children to be provided as ReactNode elements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface LoadingScreenProps {\n    // (undocumented)\n    children: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Box Type in TypeScript\nDESCRIPTION: Code improvement to specify explicit type for bbox variable instead of using any type to improve maintainability.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet bbox: null | Box = null\n```\n\n----------------------------------------\n\nTITLE: TLDraw Configuration Interfaces\nDESCRIPTION: Defines TypeScript interfaces for configuring the TLDraw editor components, options and event handlers. Includes props for various UI components like cursors, brushes, and shape indicators.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TLEditorComponents {\n    Background?: ComponentType | null;\n    Brush?: ComponentType<TLBrushProps> | null;\n    Canvas?: ComponentType<TLCanvasComponentProps> | null;\n    CollaboratorBrush?: ComponentType<TLBrushProps> | null;\n    CollaboratorCursor?: ComponentType<TLCursorProps> | null;\n    CollaboratorHint?: ComponentType<TLCollaboratorHintProps> | null;\n    CollaboratorScribble?: ComponentType<TLScribbleProps> | null;\n    CollaboratorShapeIndicator?: ComponentType<TLShapeIndicatorProps> | null;\n    Cursor?: ComponentType<TLCursorProps> | null;\n    ErrorFallback?: TLErrorFallbackComponent;\n    Grid?: ComponentType<TLGridProps> | null;\n    Handle?: ComponentType<TLHandleProps> | null;\n    Handles?: ComponentType<TLHandlesProps> | null;\n    InFrontOfTheCanvas?: ComponentType | null;\n    LoadingScreen?: ComponentType | null;\n    OnTheCanvas?: ComponentType | null;\n    Scribble?: ComponentType<TLScribbleProps> | null;\n    SelectionBackground?: ComponentType<TLSelectionBackgroundProps> | null;\n    SelectionForeground?: ComponentType<TLSelectionForegroundProps> | null;\n    ShapeErrorFallback?: TLShapeErrorFallbackComponent;\n    ShapeIndicator?: ComponentType<TLShapeIndicatorProps> | null;\n    ShapeIndicatorErrorFallback?: TLShapeIndicatorErrorFallbackComponent;\n    ShapeIndicators?: ComponentType | null;\n    SnapIndicator?: ComponentType<TLSnapIndicatorProps> | null;\n    Spinner?: ComponentType | null;\n    SvgDefs?: ComponentType | null;\n    ZoomBrush?: ComponentType<TLBrushProps> | null;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TLEditorOptions {\n    autoFocus?: boolean;\n    bindingUtils: readonly TLAnyBindingUtilConstructor[];\n    cameraOptions?: Partial<TLCameraOptions>;\n    fontAssetUrls?: {\n        [key: string]: string | undefined;\n    };\n    getContainer(): HTMLElement;\n    getShapeVisibility?(shape: TLShape, editor: Editor): 'hidden' | 'inherit' | 'visible' | null | undefined;\n    inferDarkMode?: boolean;\n    initialState?: string;\n    isShapeHidden?(shape: TLShape, editor: Editor): boolean;\n    licenseKey?: string;\n    options?: Partial<TldrawOptions>;\n    shapeUtils: readonly TLAnyShapeUtilConstructor[];\n    store: TLStore;\n    textOptions?: TLTextOptions;\n    tools: readonly TLStateNodeConstructor[];\n    user?: TLUser;\n}\n```\n\n----------------------------------------\n\nTITLE: TransformedGeometry2d Class Definition\nDESCRIPTION: A geometry class for handling 2D transformations with methods for hit testing, intersections and distance calculations.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TransformedGeometry2d extends Geometry2d {\n    constructor(geometry: Geometry2d, matrix: MatModel, opts?: TransformedGeometry2dOptions);\n    distanceToLineSegment(A: Vec, B: Vec, filters?: Geometry2dFilters): number;\n    distanceToPoint(point: Vec, hitInside?: boolean, filters?: Geometry2dFilters): number;\n    getSvgPathData(): string;\n    getVertices(filters: Geometry2dFilters): Vec[];\n    hitTestLineSegment(A: Vec, B: Vec, distance?: number, filters?: Geometry2dFilters): boolean;\n    hitTestPoint(point: Vec, margin?: number, hitInside?: boolean, filters?: Geometry2dFilters): boolean;\n    intersectCircle(center: VecLike, radius: number, filters?: Geometry2dFilters): VecLike[];\n    intersectLineSegment(A: VecLike, B: VecLike, filters?: Geometry2dFilters): VecLike[];\n    intersectPolygon(polygon: VecLike[], filters?: Geometry2dFilters): VecLike[];\n    intersectPolyline(polyline: VecLike[], filters?: Geometry2dFilters): VecLike[];\n    nearestPoint(point: Vec, filters?: Geometry2dFilters): Vec;\n    transform(transform: MatModel, opts?: TransformedGeometry2dOptions): Geometry2d;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1TriangleShape Interface in TypeScript\nDESCRIPTION: Interface for triangle shapes in tldraw version 1, extending the base shape interface. It includes properties for size, label, and label positioning.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1TriangleShape extends TLV1BaseShape {\n    // (undocumented)\n    label?: string;\n    // (undocumented)\n    labelPoint?: number[];\n    // (undocumented)\n    size: number[];\n    // (undocumented)\n    type: TLV1ShapeType.Triangle;\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Configuration Documentation (Markdown)\nDESCRIPTION: Documentation header and description for customizing TLDraw menus, including metadata like category, priority, and keywords.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-menus/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Changing default menus\ncomponent: ./CustomMenusExample.tsx\ncategory: ui\npriority: 1\nkeywords: [menu, panel, actions, style, toolbar, main, page, zoom, navigation, quick]\n---\n\nCustomize tldraw's menus.\n\n---\n\nYou can use the `components` prop to override tldraw's default menus. You can provide a React component of your own, import our default component and edit it, or return null to hide it completely. This example demonstrates how to do this with every menu in tldraw.\n```\n\n----------------------------------------\n\nTITLE: Defining Polygon2d Class for Polygon Geometry in TypeScript\nDESCRIPTION: A class extending Polyline2d that represents a closed polygon in 2D space. It takes a configuration object with points representing the vertices of the polygon.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Polygon2d extends Polyline2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed'> & {\n        points: Vec[];\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting from @tldraw/editor Package in TypeScript\nDESCRIPTION: Re-exports all exports from the @tldraw/editor package, making them available through this module. This is a common pattern for creating a unified API across multiple packages.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_117\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport * from \"@tldraw/editor\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in TypeScript\nDESCRIPTION: Import statements showing required dependencies for the @tldraw/sync-core module including state management, events, store, and schema types.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/sync-core/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Atom } from '@tldraw/state';\nimport { Emitter } from 'nanoevents';\nimport { RecordsDiff } from '@tldraw/store';\nimport { RecordType } from '@tldraw/store';\nimport { Result } from '@tldraw/utils';\nimport { SerializedSchema } from '@tldraw/store';\nimport { Signal } from '@tldraw/state';\nimport { Store } from '@tldraw/store';\nimport { StoreSchema } from '@tldraw/store';\nimport { TLRecord } from '@tldraw/tlschema';\nimport { TLStoreSnapshot } from '@tldraw/tlschema';\nimport { UnknownRecord } from '@tldraw/store';\n```\n\n----------------------------------------\n\nTITLE: Debug Flags Interface Definition\nDESCRIPTION: Defines debug-related configuration flags for the editor, including logging and performance options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly logPointerCaptures: DebugFlag<boolean>;\nreadonly logPreventDefaults: DebugFlag<boolean>;\nreadonly measurePerformance: DebugFlag<boolean>;\nreadonly reconnectOnPing: DebugFlag<boolean>;\nreadonly showFps: DebugFlag<boolean>;\nreadonly throwToBlob: DebugFlag<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1ArrowShape Interface in TypeScript\nDESCRIPTION: Interface for arrow shapes in tldraw version 1, extending the base shape interface. It includes properties for bend, decorations, handles, label, and label positioning.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1ArrowShape extends TLV1BaseShape {\n    // (undocumented)\n    bend: number;\n    // (undocumented)\n    decorations?: {\n        end?: TLV1Decoration;\n        middle?: TLV1Decoration;\n        start?: TLV1Decoration;\n    };\n    // (undocumented)\n    handles: {\n        bend: TLV1Handle;\n        end: TLV1Handle;\n        start: TLV1Handle;\n    };\n    // (undocumented)\n    label?: string;\n    // (undocumented)\n    labelPoint?: number[];\n    // (undocumented)\n    type: TLV1ShapeType.Arrow;\n}\n```\n\n----------------------------------------\n\nTITLE: Store Validation Interfaces\nDESCRIPTION: Interfaces for store validation including validator functions and failure case definitions.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StoreValidator<R extends UnknownRecord> {\n    validate(record: unknown): R;\n    validateUsingKnownGoodVersion?(knownGoodVersion: R, record: unknown): R;\n}\n\nexport interface StoreValidationFailure<R extends UnknownRecord> {\n    error: unknown;\n    phase: 'createRecord' | 'initialize' | 'tests' | 'updateRecord';\n    record: R;\n    recordBefore: null | R;\n    store: Store<R>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Picker Props Interface in TypeScript\nDESCRIPTION: Generic interface for style picker button properties, handling style value selection with theme support.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiButtonPickerProps<T extends string> {\n    // (undocumented)\n    items: StyleValuesForUi<T>;\n    // (undocumented)\n    onHistoryMark?(id: string): void;\n    // (undocumented)\n    onValueChange(style: StyleProp<T>, value: T): void;\n    // (undocumented)\n    style: StyleProp<T>;\n    // (undocumented)\n    theme: TLDefaultColorTheme;\n    // (undocumented)\n    title: string;\n    // (undocumented)\n    uiType: string;\n    // (undocumented)\n    value: SharedStyle<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1ArrowBinding Interface in TypeScript\nDESCRIPTION: Interface for arrow bindings in tldraw version 1, extending the base binding interface. It includes properties for binding distance, handle ID, and point coordinates.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1ArrowBinding extends TLV1BaseBinding {\n    // (undocumented)\n    distance: number;\n    // (undocumented)\n    handleId: keyof TLV1ArrowShape['handles'];\n    // (undocumented)\n    point: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1AssetType Enum in TypeScript\nDESCRIPTION: Enum defining asset types in tldraw version 1, including Image and Video.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1AssetType {\n    // (undocumented)\n    Image = \"image\",\n    // (undocumented)\n    Video = \"video\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Props Interface in TypeScript\nDESCRIPTION: Interface extending HTML button attributes with TLDraw-specific properties like button type and active state.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiButtonProps extends React_2.HTMLAttributes<HTMLButtonElement> {\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    isActive?: boolean;\n    // (undocumented)\n    type: 'danger' | 'help' | 'icon' | 'low' | 'menu' | 'normal' | 'primary' | 'tool';\n}\n```\n\n----------------------------------------\n\nTITLE: Highlight Shape Tool Implementation\nDESCRIPTION: TypeScript class implementing highlight shape tool functionality with state management and shape properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class HighlightShapeTool extends StateNode {\n    static children(): TLStateNodeConstructor[];\n    static id: string;\n    static initial: string;\n    static isLockable: boolean;\n    onExit(): void;\n    shapeType: string;\n    static useCoalescedEvents: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Shape Configuration in Markdown\nDESCRIPTION: Frontmatter configuration for custom shape documentation, defining component path, category, and related keywords for the card shape implementation.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-config/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Custom shape and tool\ncomponent: ./CustomConfigExample.tsx\ncategory: shapes/tools\nkeywords: [toolbar, migrations, icon, util, ui overrides, card shape]\npriority: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Making History-Ignored Changes in TLDraw\nDESCRIPTION: Shows how to make changes that don't affect the undo/redo history using the Editor's run method.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\neditor.run(\n\t() => {\n\t\teditor.deleteShapes(myLockedShapes)\n\t},\n\t{ history: 'ignore' }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiZoomMenuProps Interface in TypeScript\nDESCRIPTION: Interface for the zoom menu component props in tldraw. It includes an optional children property of type ReactNode.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiZoomMenuProps {\n    // (undocumented)\n    children?: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown link to tldraw FAQ page\nDESCRIPTION: A markdown link that directs users to the tldraw FAQ page hosted on Notion.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/FAQ.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFind our FAQs [here](https://tldraw.notion.site/faq).\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1ColorStyle Enum in TypeScript\nDESCRIPTION: Enum defining color styles for shapes in tldraw version 1. It includes standard colors like White, Black, Gray, and various other colors.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1ColorStyle {\n    // (undocumented)\n    Black = \"black\",\n    // (undocumented)\n    Blue = \"blue\",\n    // (undocumented)\n    Cyan = \"cyan\",\n    // (undocumented)\n    Gray = \"gray\",\n    // (undocumented)\n    Green = \"green\",\n    // (undocumented)\n    Indigo = \"indigo\",\n    // (undocumented)\n    LightGray = \"lightGray\",\n    // (undocumented)\n    Orange = \"orange\",\n    // (undocumented)\n    Red = \"red\",\n    // (undocumented)\n    Violet = \"violet\",\n    // (undocumented)\n    White = \"white\",\n    // (undocumented)\n    Yellow = \"yellow\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool with Child States\nDESCRIPTION: Example of creating a tool with multiple child states and initial state configuration.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/tools.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyIdleState extends StateNode {\n\tstatic override id = 'my-idle-state'\n}\n\nclass MyPointingState extends StateNode {\n\tstatic override id = 'my-pointing-state'\n}\n\nclass MyTool extends StateNode {\n\tstatic override id = 'my-tool'\n\tstatic override initial = 'my-idle-state'\n\tstatic override children() {\n\t\treturn [MyIdleState, MyPointingState]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constants and Storage Tables in TypeScript\nDESCRIPTION: Constants and table definitions for tldraw's storage and session management systems, including predefined table names and constants.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const TAB_ID: string;\n\n// @internal (undocumented)\nexport const Table: {\n    readonly Assets: \"assets\";\n    readonly Records: \"records\";\n    readonly Schema: \"schema\";\n    readonly SessionState: \"session_state\";\n};\n\n// @internal (undocumented)\nexport type TestEnvironment = 'development' | 'production';\n```\n\n----------------------------------------\n\nTITLE: Hard Reset Editor Function\nDESCRIPTION: A function that performs a hard reset of the editor without any parameters. This is likely used to completely reset the editor state.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function hardResetEditor(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining UI Components and Constants\nDESCRIPTION: A collection of UI components and constants used in the tldraw interface, including menu items and style pickers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function FitFrameToContentMenuItem(): JSX_2.Element | null;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const FONT_FAMILIES: Record<TLDefaultFontStyle, string>;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const FONT_SIZES: Record<TLDefaultSizeStyle, number>;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function FrameToolbarItem(): JSX_2.Element;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function GeoStylePickerSet({ styles }: StylePickerSetProps): JSX_2.Element | null;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function GroupMenuItem(): JSX_2.Element | null;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function GroupOrUngroupMenuItem(): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: DOM Element Utilities\nDESCRIPTION: Utility functions for working with DOM elements, like loopToHtmlElement which traverses up the DOM tree to find an HTMLElement from a given Element.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function loopToHtmlElement(elm: Element): HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1PageState Interface in TypeScript\nDESCRIPTION: Interface for page state in tldraw version 1. It includes properties for camera position, selection, editing state, and hover state.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1PageState {\n    // (undocumented)\n    bindingId?: null | string;\n    // (undocumented)\n    brush?: null | TLV1Bounds;\n    // (undocumented)\n    camera: {\n        point: number[];\n        zoom: number;\n    };\n    // (undocumented)\n    editingId?: null | string;\n    // (undocumented)\n    hoveredId?: null | string;\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    pointedId?: null | string;\n    // (undocumented)\n    selectedIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1TextShape Interface in TypeScript\nDESCRIPTION: Interface for text shapes in tldraw version 1, extending the base shape interface. It includes properties for text content.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport interface TLV1TextShape extends TLV1BaseShape {\n    // (undocumented)\n    text: string;\n    // (undocumented)\n    type: TLV1ShapeType.Text;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Version Number for Migration in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a new version number for a migration in the Versions object. It shows adding an 'AddOwnerId' version with a value of 2.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Versions = {\n  RemoveSomeProp: 1,\n  AddOwnerId: 2,\n} as const\n```\n\n----------------------------------------\n\nTITLE: Installing tldraw SDK via NPM\nDESCRIPTION: Command to install the tldraw package using npm package manager.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i tldraw\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Group Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown menu group props, requiring children elements to be grouped together.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuGroupProps {\n    // (undocumented)\n    children: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Page and Document Management Methods in TLDraw\nDESCRIPTION: Methods for accessing and manipulating pages, document settings, and the current state of the TLDraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetCurrentPage(): TLPage;\ngetCurrentPageBounds(): Box | undefined;\ngetCurrentPageId(): TLPageId;\ngetCurrentPageRenderingShapesSorted(): TLShape[];\ngetCurrentPageShapeIds(): Set<TLShapeId>;\n// @internal (undocumented)\ngetCurrentPageShapeIdsSorted(): TLShapeId[];\ngetCurrentPageShapes(): TLShape[];\ngetCurrentPageShapesInReadingOrder(): TLShape[];\ngetCurrentPageShapesSorted(): TLShape[];\ngetCurrentPageState(): TLInstancePageState;\ngetCurrentTool(): StateNode;\ngetCurrentToolId(): string;\ngetDocumentSettings(): TLDocument;\n```\n\n----------------------------------------\n\nTITLE: Defining UseImageOrVideoAssetOptions interface for asset hook parameters\nDESCRIPTION: Interface that defines the parameters for the useImageOrVideoAsset hook, including the asset ID, optional shape ID, and width for proper asset loading.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_110\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UseImageOrVideoAssetOptions {\n    assetId: null | TLAssetId;\n    shapeId?: TLShapeId;\n    width: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TLDraw Release Changelog Content\nDESCRIPTION: Markdown formatted changelog documenting various releases, changes and improvements to the TLDraw project including version info, author details, and categorized updates.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#### 🎉 New Features\n\n- `ShapeUtil.getInterpolatedProps` [#4162](https://github.com/tldraw/tldraw/pull/4162)\n- sdk: wires up tldraw to have licensing mechanisms [#4021]\n- Add \"paste at cursor\" option [#4088]\n- put sync stuff in bemo worker [#4060]\n\n#### 🛠️ API Changes\n\n- Finesse sync api [#4212]\n- Explicitly type shape props and defaults [#4191]\n- Split @tldraw/state into @tldraw/state and @tldraw/state-react [#4170]\n```\n\n----------------------------------------\n\nTITLE: Defining TldrawFile Interface in TypeScript\nDESCRIPTION: Interface definition for TldrawFile that specifies the structure of a tldraw file. Contains records, schema information, and version details for file compatibility.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TldrawFile {\n    // (undocumented)\n    records: UnknownRecord[];\n    // (undocumented)\n    schema: SerializedSchema;\n    // (undocumented)\n    tldrawFileFormatVersion: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Icon Props Interface in TypeScript\nDESCRIPTION: Interface definition for button icon properties, specifying icon string, optional inversion flag, and size option.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TLUiButtonIconProps {\n    // (undocumented)\n    icon: string;\n    // (undocumented)\n    invertIcon?: boolean;\n    // (undocumented)\n    small?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Breakpoint Settings in TLDraw\nDESCRIPTION: Markdown frontmatter configuration for a TLDraw example component that forces mobile UI rendering. Specifies the component path, category, priority level, and relevant keywords.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/force-mobile/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Force mobile\ncomponent: ./ForceBreakpointExample\ncategory: basic\npriority: 4\nkeywords: [force, mobile, breakpoint]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Trigger Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown menu trigger props, allowing optional children elements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuTriggerProps {\n    // (undocumented)\n    children?: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polyline2d Class for Connected Line Segments in TypeScript\nDESCRIPTION: A class extending Geometry2d that represents a series of connected line segments. It provides methods for calculating length, SVG path generation, hit testing, and finding nearest points.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Polyline2d extends Geometry2d {\n    constructor(config: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & {\n        points: Vec[];\n    });\n    // (undocumented)\n    getLength(): number;\n    // (undocumented)\n    getSvgPathData(): string;\n    // (undocumented)\n    getVertices(): Vec[];\n    // (undocumented)\n    hitTestLineSegment(A: Vec, B: Vec, distance?: number): boolean;\n    // (undocumented)\n    nearestPoint(A: Vec): Vec;\n    // (undocumented)\n    points: Vec[];\n    // (undocumented)\n    get segments(): Edge2d[];\n    // (undocumented)\n    _segments?: Edge2d[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiIconType in TypeScript\nDESCRIPTION: Defines a union type of all available icon types in the TLDraw UI. This includes various geometric shapes, actions, and tool icons.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TLUiIconType = 'align-bottom' | 'align-center-horizontal' | 'align-center-vertical' | 'align-left' | 'align-right' | 'align-top' | 'arrow-left' | 'arrowhead-arrow' | 'arrowhead-bar' | 'arrowhead-diamond' | 'arrowhead-dot' | 'arrowhead-none' | 'arrowhead-square' | 'arrowhead-triangle-inverted' | 'arrowhead-triangle' | 'blob' | 'bold' | 'bring-forward' | 'bring-to-front' | 'broken' | 'bulletList' | 'check-circle' | 'check' | 'chevron-down' | 'chevron-left' | 'chevron-right' | 'chevron-up' | 'chevrons-ne' | 'chevrons-sw' | 'clipboard-copied' | 'clipboard-copy' | 'code' | 'color' | 'cross-2' | 'cross-circle' | 'dash-dashed' | 'dash-dotted' | 'dash-draw' | 'dash-solid' | 'disconnected' | 'discord' | 'distribute-horizontal' | 'distribute-vertical' | 'dot' | 'dots-horizontal' | 'dots-vertical' | 'drag-handle-dots' | 'duplicate' | 'edit' | 'external-link' | 'fill-fill' | 'fill-none' | 'fill-pattern' | 'fill-semi' | 'fill-solid' | 'follow' | 'following' | 'font-draw' | 'font-mono' | 'font-sans' | 'font-serif' | 'geo-arrow-down' | 'geo-arrow-left' | 'geo-arrow-right' | 'geo-arrow-up' | 'geo-check-box' | 'geo-cloud' | 'geo-diamond' | 'geo-ellipse' | 'geo-heart' | 'geo-hexagon' | 'geo-octagon' | 'geo-oval' | 'geo-pentagon' | 'geo-rectangle' | 'geo-rhombus-2' | 'geo-rhombus' | 'geo-star' | 'geo-trapezoid' | 'geo-triangle' | 'geo-x-box' | 'github' | 'group' | 'heading' | 'highlight' | 'horizontal-align-end' | 'horizontal-align-middle' | 'horizontal-align-start' | 'info-circle' | 'italic' | 'leading' | 'link' | 'list' | 'lock' | 'menu' | 'minus' | 'mixed' | 'pack' | 'plus' | 'question-mark-circle' | 'question-mark' | 'redo' | 'reset-zoom' | 'rotate-ccw' | 'rotate-cw' | 'send-backward' | 'send-to-back' | 'share-1' | 'size-extra-large' | 'size-large' | 'size-medium' | 'size-small' | 'spline-cubic' | 'spline-line' | 'stack-horizontal' | 'stack-vertical' | 'status-offline' | 'stretch-horizontal' | 'stretch-vertical' | 'strike' | 'text-align-center' | 'text-align-left' | 'text-align-right' | 'toggle-off' | 'toggle-on' | 'tool-arrow' | 'tool-eraser' | 'tool-frame' | 'tool-hand' | 'tool-highlight' | 'tool-laser' | 'tool-line' | 'tool-media' | 'tool-note' | 'tool-pencil' | 'tool-pointer' | 'tool-screenshot' | 'tool-text' | 'trash' | 'twitter' | 'underline' | 'undo' | 'ungroup' | 'unlock' | 'vertical-align-end' | 'vertical-align-middle' | 'vertical-align-start' | 'warning-triangle' | 'zoom-in' | 'zoom-out';\n```\n\n----------------------------------------\n\nTITLE: Client Implementation Structure\nDESCRIPTION: Client-side component structure showing the main App component, asset management, and bookmark preview functionality\nSOURCE: https://github.com/tldraw/tldraw/blob/main/templates/sync-cloudflare/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient/\n  |- App.tsx                     // Main client component\n  |- multiplayerAssetStore.tsx    // Asset upload/retrieval\n  |- getBookmarkPreview.tsx       // Bookmark preview fetching\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Props Interface in TypeScript\nDESCRIPTION: Interface for dialog component props, requiring an onClose handler for dialog dismissal.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialogProps {\n    // (undocumented)\n    onClose(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Footer Props Interface in TypeScript\nDESCRIPTION: Interface for dialog footer component props, requiring children and allowing optional CSS class.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDialogFooterProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    className?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Object Map Utility Functions\nDESCRIPTION: A set of internal utility functions for manipulating object maps including creating maps from entries, getting keys and values.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/utils/api-report.api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function objectMapFromEntries<Key extends string, Value>(entries: ReadonlyArray<readonly [Key, Value]>): {\n    [K in Key]: Value;\n};\n\nexport function objectMapKeys<Key extends string>(object: {\n    readonly [K in Key]: unknown;\n}): Array<Key>;\n\nexport function objectMapValues<Key extends string, Value>(object: {\n    [K in Key]: Value;\n}): Array<Value>;\n```\n\n----------------------------------------\n\nTITLE: Exporting tldraw package contents in TypeScript\nDESCRIPTION: This code snippet re-exports all contents from the 'tldraw' package. It serves as a wrapper or proxy module for the tldraw library.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/namespaced-tldraw/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from \"tldraw\";\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiEventSource Type in TypeScript\nDESCRIPTION: Defines a union type for possible UI event sources in the TLDraw application. This includes various menus, panels, and interaction points within the UI.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TLUiEventSource = 'actions-menu' | 'context-menu' | 'debug-panel' | 'dialog' | 'document-name' | 'export-menu' | 'help-menu' | 'helper-buttons' | 'kbd' | 'main-menu' | 'menu' | 'navigation-zone' | 'page-menu' | 'people-menu' | 'quick-actions' | 'rich-text-menu' | 'share-menu' | 'style-panel' | 'toolbar' | 'unknown' | 'zoom-menu';\n```\n\n----------------------------------------\n\nTITLE: Type Definitions and Interfaces in TypeScript\nDESCRIPTION: Contains interface and type definitions for error annotations, JSON values, and utility types. Includes error handling and type checking utilities.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/utils/api-report.api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ErrorAnnotations {\n  extras: Record<string, unknown>;\n  tags: Record<string, bigint | boolean | null | number | string | symbol | undefined>;\n}\n\ninterface ErrorResult<E> {\n  readonly error: E;\n  readonly ok: false;\n}\n\ntype JsonPrimitive = boolean | null | number | string;\ntype JsonArray = JsonValue[];\ninterface JsonObject {\n  [key: string]: JsonValue | undefined;\n}\ntype JsonValue = JsonArray | JsonObject | JsonPrimitive;\n```\n\n----------------------------------------\n\nTITLE: Importing UiEventsExample Component in TypeScript\nDESCRIPTION: This code snippet imports a component named UiEventsExample from a local file. The component is likely responsible for demonstrating and logging UI events in the tldraw editor.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/ui-events/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UiEventsExample } from './UiEventsExample.tsx'\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic tldraw Component in React\nDESCRIPTION: A simple implementation of the Tldraw component in a React application without collaboration features.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/collaboration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\n\nfunction MyApp() {\n\treturn <Tldraw />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Binding ID in TypeScript for tldraw\nDESCRIPTION: This function generates a unique binding ID for the tldraw schema.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createBindingId(id?: string): TLBindingId;\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for GitHub Access\nDESCRIPTION: Environment variables configuration for pulling docs from the tldraw repo using GitHub access token and source SHA.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nACCESS_TOKEN=your_github_access_token\nSOURCE_SHA=main\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1ShapeType Enum in TypeScript\nDESCRIPTION: Enum defining shape types in tldraw version 1. It includes various shape options like Rectangle, Ellipse, Triangle, Arrow, Text, etc.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1ShapeType {\n    // (undocumented)\n    Arrow = \"arrow\",\n    // (undocumented)\n    Draw = \"draw\",\n    // (undocumented)\n    Ellipse = \"ellipse\",\n    // (undocumented)\n    Group = \"group\",\n    // (undocumented)\n    Image = \"image\",\n    // (undocumented)\n    Rectangle = \"rectangle\",\n    // (undocumented)\n    Sticky = \"sticky\",\n    // (undocumented)\n    Text = \"text\",\n    // (undocumented)\n    Triangle = \"triangle\",\n    // (undocumented)\n    Video = \"video\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Menu Props Interface in TypeScript\nDESCRIPTION: Interface for debug menu component props, allowing optional children elements.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDebugMenuProps {\n    // (undocumented)\n    children?: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Boundary Component\nDESCRIPTION: React error boundary component definition for handling errors in Tldraw components\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ErrorBoundary extends React_3.Component<React_3.PropsWithRef<React_3.PropsWithChildren<TLErrorBoundaryProps>>, {\n    error: Error | null;\n}>\n```\n\n----------------------------------------\n\nTITLE: Importing Core Dependencies in TypeScript\nDESCRIPTION: Imports throttle and uniq utility functions from lodash library modules.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/utils/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { default as throttle } from 'lodash.throttle';\nimport { default as uniq } from 'lodash.uniq';\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for tldraw Next.js Template\nDESCRIPTION: Commands for starting the development server using either yarn or npm.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/templates/nextjs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Section Configuration Structure in JSON\nDESCRIPTION: JSON structure defining a documentation section with its ID, title, description and categories array.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": \"community\",\n\t\"title\": \"Community\",\n\t\"description\": \"Guides for contributing to tldraw's open source project.\",\n\t\"categories\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1DashStyle Enum in TypeScript\nDESCRIPTION: Enum defining dash styles for shapes in tldraw version 1. It includes Solid, Dashed, Dotted, and Draw styles.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport enum TLV1DashStyle {\n    // (undocumented)\n    Dashed = \"dashed\",\n    // (undocumented)\n    Dotted = \"dotted\",\n    // (undocumented)\n    Draw = \"draw\",\n    // (undocumented)\n    Solid = \"solid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SnowStormExample Component in TypeScript React\nDESCRIPTION: This code snippet shows the import statement for the SnowStormExample component, which is used to create the snow storm effect in tldraw. The component is located in the same directory as the current file.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/snowstorm/README.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SnowStormExample } from './SnowStormExample.tsx';\n```\n\n----------------------------------------\n\nTITLE: Defining License Key Validation Interface\nDESCRIPTION: Interface describing the structure of a license validation result, including expiration information, validity status, and license type details for the TLDraw application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_80\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ValidLicenseKeyResult {\n    // (undocumented)\n    expiryDate: Date;\n    // (undocumented)\n    isAnnualLicense: boolean;\n    // (undocumented)\n    isAnnualLicenseExpired: boolean;\n    // (undocumented)\n    isDevelopment: boolean;\n    // (undocumented)\n    isDomainValid: boolean;\n    // (undocumented)\n    isInternalLicense: boolean;\n    // (undocumented)\n    isLicensedWithWatermark: boolean;\n    // (undocumented)\n    isLicenseParseable: true;\n    // (undocumented)\n    isPerpetualLicense: boolean;\n    // (undocumented)\n    isPerpetualLicenseExpired: boolean;\n    // (undocumented)\n    license: LicenseInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: This robots.txt configuration instructs all web crawlers to avoid indexing the entire site except for the homepage. It also points crawlers to the XML sitemap location.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/dotcom/client/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\nAllow: /$\n\nSitemap: https://www.tldraw.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Article Frontmatter Structure in MDX\nDESCRIPTION: MDX frontmatter example showing the structure of article metadata including title, description, status, author, date, and keywords.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: User Interface\ndescription: How to customize the tldraw user interface using overrides.\nstatus: published\nauthor: steveruizok\ndate: 3/22/2023\norder: 8\nkeywords:\n  - ui\n  - interface\n  - tools\n  - shapes\n  - custom\n  - button\n  - toolbar\n  - styles\n---\n```\n\n----------------------------------------\n\nTITLE: Author Configuration Structure in JSON\nDESCRIPTION: JSON structure defining an author's information including name, email, twitter handle and profile image.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"steveruizok\": {\n\t\"name\": \"Steve Ruiz\",\n\t\"email\": \"steve@tldraw.com\",\n\t\"twitter\": \"steveruizok\",\n\t\"image\": \"steve_ruiz.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Transitions\nDESCRIPTION: Example showing how transitions affect event propagation in tool state hierarchy.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/tools.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyIdleState extends StateNode {\n\tstatic override id = 'my-idle-state'\n\n\tonPointerDown(info: TLPointerEventInfo) {\n\t\tconsole.log(\"this won't run\")\n\t}\n}\n\nclass MyTool extends StateNode {\n\tstatic override id = 'my-tool'\n\tstatic override initial = 'my-idle-state'\n\tstatic override children = [MyIdleState]\n\n\tonPointerDown(info: TLPointerEventInfo) {\n\t\teditor.setCurrentTool('select')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing tldraw CSS in JavaScript\nDESCRIPTION: Example of importing the tldraw CSS file directly in a JavaScript or TypeScript file.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'tldraw/tldraw.css'\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Patch Release\nDESCRIPTION: Series of Git commands used to prepare and publish a patch release for tldraw, including fetching updates, checking out release branches, and cherry-picking commits.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/RELEASES.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v3.4.x\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b david/my-helpful-patches\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick <commit-hash>\n```\n\n----------------------------------------\n\nTITLE: Default Embed Definitions\nDESCRIPTION: Constant defining default embed configurations for various services like tldraw, Figma, Google Maps, etc.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DEFAULT_EMBED_DEFINITIONS: readonly [{\n    readonly doesResize: true;\n    readonly fromEmbedUrl: (url: string) => string | undefined;\n    readonly height: 500;\n    readonly hostnames: readonly [\"beta.tldraw.com\", \"tldraw.com\", \"localhost:3000\"];\n    readonly minHeight: 300;\n    readonly minWidth: 300;\n    readonly overridePermissions: {\n        readonly 'allow-top-navigation': true;\n    };\n    readonly title: \"tldraw\";\n    readonly toEmbedUrl: (url: string) => string | undefined;\n    readonly type: \"tldraw\";\n    readonly width: 720;\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLDraw Asset Props in TypeScript\nDESCRIPTION: Example component demonstrating how to configure asset-related properties in TLDraw. Handles settings for acceptable asset types, maximum file sizes, and dimension constraints for images, videos, and other media files.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/asset-props/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n./AssetPropsExample.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN-Hosted Assets for Tldraw\nDESCRIPTION: Example of configuring CDN-hosted assets for the Tldraw component using the getDefaultCdnBaseUrl function.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getDefaultCdnBaseUrl } from 'tldraw'\n\nconst assetUrls = getAssetUrls({\n\tbaseUrl: getDefaultCdnBaseUrl(),\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import References\nDESCRIPTION: Import statements and type references required by the @tldraw/editor library, including React, state management, and schema dependencies.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react\" />\n\nimport { Atom } from '@tldraw/state';\nimport { atom } from '@tldraw/state';\nimport { BoxModel } from '@tldraw/tlschema';\nimport { ComponentType } from 'react';\nimport { Computed } from '@tldraw/state';\nimport { computed } from '@tldraw/state';\nimport { Dispatch } from 'react';\nimport { Editor as Editor_2 } from '@tiptap/core';\n```\n\n----------------------------------------\n\nTITLE: Formatting Mailing Address for Copyright Infringement Notices in Markdown\nDESCRIPTION: This snippet demonstrates how to structure a mailing address for copyright infringement notices using Markdown. It provides the physical address where users can send written notices of alleged copyright infringement.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/dotcom/client/TERMS_OF_SERVICE.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ntldraw\n5 New Street Square\nLondon EC4A 3TW\nUnited Kingdom\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Custom UI Component in React\nDESCRIPTION: This code snippet shows the import statement for a custom UI component and how it's referenced in the file structure. It's likely part of a React component used to render a custom tldraw interface.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-ui/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CustomUiExample } from './CustomUiExample.tsx'\n```\n\n----------------------------------------\n\nTITLE: Creating truncateStringWithEllipsis utility function for text formatting\nDESCRIPTION: A utility function that truncates a string to a specified maximum length and adds an ellipsis if the string exceeds that length.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_113\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const truncateStringWithEllipsis: (str: string, maxLength: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Markdown Content: tldraw Release Notes\nDESCRIPTION: Markdown formatted release notes detailing tldraw's feature updates, improvements and fixes over a 5-month period. Includes front matter metadata and formatted sections with embedded images.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/blog/whats-new-in-tldraw.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: What's new in tldraw\ncategory: release-notes\ndescription: New arrows, new ink, new selection, new frames, new docs, new shapes, and more.\nhero: /images/blog/1e4fadb9-7d5b-440f-97a0-7225700628eb_1200x675.png\ndate: 12/15/2023\nstatus: published\nauthor:\n  - luwilson\n  - tahahassan\n---\n```\n\n----------------------------------------\n\nTITLE: Defining TLCameraConstraints Interface in TypeScript\nDESCRIPTION: This snippet defines the TLCameraConstraints interface, which specifies various camera constraints for the TLDraw editor, including zoom behavior, bounds, and padding.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TLCameraConstraints {\n    baseZoom: 'default' | 'fit-max-100' | 'fit-max' | 'fit-min-100' | 'fit-min' | 'fit-x-100' | 'fit-x' | 'fit-y-100' | 'fit-y';\n    behavior: 'contain' | 'fixed' | 'free' | 'inside' | 'outside' | {\n        x: 'contain' | 'fixed' | 'free' | 'inside' | 'outside';\n        y: 'contain' | 'fixed' | 'free' | 'inside' | 'outside';\n    };\n    bounds: BoxModel;\n    initialZoom: 'default' | 'fit-max-100' | 'fit-max' | 'fit-min-100' | 'fit-min' | 'fit-x-100' | 'fit-x' | 'fit-y-100' | 'fit-y';\n    origin: VecLike;\n    padding: VecLike;\n}\n```\n\n----------------------------------------\n\nTITLE: TLDraw Schema Version Updates\nDESCRIPTION: Markdown formatted changelog entries showing version updates, bug fixes, and dependency changes for the @tldraw/tlschema package and its dependencies.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0-alpha.11\n\n### Patch Changes\n- fix some package build scripting\n- Updated dependencies\n  - @tldraw/tlstore@2.0.0-alpha.11\n  - @tldraw/tlvalidate@2.0.0-alpha.10\n  - @tldraw/utils@2.0.0-alpha.10\n```\n\n----------------------------------------\n\nTITLE: Version Release Header\nDESCRIPTION: Version header for alpha release 14 with date stamp.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v2.0.0-alpha.14 (Tue Jul 04 2023)\n```\n\n----------------------------------------\n\nTITLE: Enabling Read-Only Mode in TLDraw\nDESCRIPTION: Demonstrates how to enable read-only mode for the editor using updateInstanceState method.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/editor.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\neditor.updateInstanceState({ isReadonly: true })\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Feature Update\nDESCRIPTION: Snippet documenting release notes for adding meta property to records.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Release Notes\n\n#### [feature] add `meta` property to records ([#1627](https://github.com/tldraw/tldraw/pull/1627))\n\n- todo\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt for tldraw Project\nDESCRIPTION: This robots.txt file sets permissions for web crawlers, allowing them to access all parts of the tldraw project website. It uses the 'User-agent: *' directive to apply the rules to all crawlers, and the 'Allow: /' directive to permit access to the entire site.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/app/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shape Props Migrations in tldraw\nDESCRIPTION: Defines migrations for custom shape properties using createShapePropsMigrationSequence, allowing shape data to evolve over time with proper backwards compatibility.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { createShapePropsMigrationSequence, createShapePropsMigrationIds, ShapeUtil } from 'tldraw'\n\n// Migrations must start a 1 and be sequential integers.\nconst Versions = createShapePropMigrationIds('custom-shape', {\n\tAddColor: 1,\n})\n\nclass MyCustomShapeUtil extends ShapeUtil {\n\tstatic type = 'custom-shape'\n\tstatic migrations = createShapePropsMigrationSequence({\n\t\tsequence: [\n\t\t\t{\n\t\t\t\tid: Versions.AddColor,\n\t\t\t\tup(props) {\n\t\t\t\t\t// set the default color\n\t\t\t\t\tprops.color = 'black'\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Component Definition\nDESCRIPTION: A React component that displays a loading screen with provided children. This is typically used to show loading states while data is being fetched or processed.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function LoadingScreen({ children }: LoadingScreenProps): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining Components Provider Props Interface in TypeScript\nDESCRIPTION: Interface for the component provider props, allowing component overrides to be passed to children.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiComponentsProviderProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    overrides?: TLUiComponents;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting TldrawUi Component in TypeScript/JSX\nDESCRIPTION: Exports a named exotic component TldrawUi that accepts TldrawUiProps as its props.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TldrawUi: React_3.NamedExoticComponent<TldrawUiProps>;\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Item Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown menu item props, specifying children and optional close behavior.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuItemProps {\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    noClose?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for local development\nDESCRIPTION: Command to install all project dependencies using yarn package manager.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting the local development server\nDESCRIPTION: Command to launch the local development server using yarn, making the example project available at localhost:5420.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Content Props Interface in TypeScript\nDESCRIPTION: Interface for dropdown menu content container props, specifying alignment options and positioning.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface TLUiDropdownMenuContentProps {\n    // (undocumented)\n    align?: 'center' | 'end' | 'start';\n    // (undocumented)\n    alignOffset?: number;\n    // (undocumented)\n    children: ReactNode;\n    // (undocumented)\n    className?: string;\n    // (undocumented)\n    id?: string;\n    // (undocumented)\n    side?: 'bottom' | 'left' | 'right' | 'top';\n    // (undocumented)\n    sideOffset?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Collaboration in tldraw with Sync\nDESCRIPTION: Implementation of real-time collaboration using the useSyncDemo hook from @tldraw/sync. This enables multiple users to collaborate with features like live cursors and viewport following.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/quick-start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tldraw } from 'tldraw'\nimport { useSyncDemo } from '@tldraw/sync'\nimport 'tldraw/tldraw.css'\n\nexport default function App() {\n\tconst store = useSyncDemo({ roomId: 'myapp-abc123' })\n\n\treturn (\n\t\t<div style={{ position: 'fixed', inset: 0 }}>\n\t\t\t<Tldraw store={store} />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Version Check Command\nDESCRIPTION: Command to check the latest version of tldraw package on NPM.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/RELEASES.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm show tldraw version\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Release Notes in Markdown\nDESCRIPTION: Version headers and formatted release notes documenting changes in the TLDraw project across multiple versions\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v3.12.0 (Tue Apr 15 2025)\n\n### Release Notes\n\n#### Store.atomic and Store.mergeRemoteChanges fixes ([#5801](https://github.com/tldraw/tldraw/pull/5801))\n\n- Make `store.mergeRemoteChanges` atomic. This allows after* side effects to react to incoming changes and to propagate any effects to other clients via `'user'`-scoped store change events.\n\n```\n\n----------------------------------------\n\nTITLE: TLStore Options Interface Definition\nDESCRIPTION: Defines the structure for TLDraw store options including collaboration mode, status and schema options.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/editor/api-report.api.md#2025-04-16_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TLStoreOptions = TLStoreBaseOptions & {\n    collaboration?: {\n        mode?: null | Signal<'readonly' | 'readwrite'>;\n        status: null | Signal<'offline' | 'online'>;\n    };\n    id?: string;\n} & TLStoreSchemaOptions;\n```\n\n----------------------------------------\n\nTITLE: Type Migration Import Resolution\nDESCRIPTION: Example path for upgrading legacy shape migrations post deprecation\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/validate/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://tldraw.dev/docs/persistence#Updating-legacy-shape-migrations-defineMigrations\n```\n\n----------------------------------------\n\nTITLE: Defining TLUiMenuContextProviderProps Interface in TypeScript\nDESCRIPTION: Specifies the props for a menu context provider component in TLDraw. It includes properties for defining the menu's source and type.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TLUiMenuContextProviderProps {\n    children: React.ReactNode;\n    sourceId: TLUiEventSource;\n    type: TLUiMenuContextType;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tldraw for Single Page Use in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up tldraw with the maxPages option set to 1, effectively disabling page-related UI elements for single-page use cases. This configuration removes the page selector and other multi-page management features.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/disable-pages/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tldraw } from '@tldraw/tldraw'\nimport '@tldraw/tldraw/tldraw.css'\n\nexport default function DisablePagesExample() {\n\treturn (\n\t\t<div className=\"tldraw__editor\">\n\t\t\t<Tldraw maxPages={1} />\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseRecord Interface in TypeScript\nDESCRIPTION: Interface definition for BaseRecord, which includes id and typeName properties.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BaseRecord<TypeName extends string, Id extends RecordId<UnknownRecord>> {\n    readonly id: Id;\n    readonly typeName: TypeName;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for tldraw Documentation\nDESCRIPTION: Sets up the frontmatter for a documentation page about creating arrows in tldraw. It specifies the title, associated component, category, and relevant keywords.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/create-arrow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Create an arrow\ncomponent: ./CreateArrowExample.tsx\ncategory: editor-api\nkeywords: [arrow, between]\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Asset URLs for Bundlers\nDESCRIPTION: Example of importing asset URLs using the @tldraw/assets package for use with bundlers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAssetUrlsByMetaUrl } from '@tldraw/assets/urls'\n\nconst assetUrls = getAssetUrlsByMetaUrl()\n\n<Tldraw assetUrls={assetUrls} />\n```\n\n----------------------------------------\n\nTITLE: Importing tldraw CSS in CSS File\nDESCRIPTION: Example of importing the tldraw CSS file using @import syntax in a CSS file.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import url('tldraw/tldraw.css');\n```\n\n----------------------------------------\n\nTITLE: Importing Inter Font from Google Fonts\nDESCRIPTION: CSS import statement for loading the Inter font from Google Fonts, used as the default font in tldraw.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/getting-started/installation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@500;700&display=swap');\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in TypeScript\nDESCRIPTION: Import statements for various dependencies used in the @tldraw/store package.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/store/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Atom } from '@tldraw/state';\nimport { Computed } from '@tldraw/state';\nimport { Expand } from '@tldraw/utils';\nimport { Result } from '@tldraw/utils';\nimport { Signal } from '@tldraw/state';\nimport { UNINITIALIZED } from '@tldraw/state';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for tldraw Next.js Template\nDESCRIPTION: Commands for installing project dependencies using either yarn or npm package managers.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/templates/nextjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer Setup in TLDraw\nDESCRIPTION: Markdown configuration for custom renderer documentation, including component path and related keywords.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/custom-renderer/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Custom renderer\ncomponent: ./CustomRendererExample.tsx\ncategory: basic\nkeywords: [html, canvas, background, context]\n---\n```\n\n----------------------------------------\n\nTITLE: Layer Panel Component Metadata in Markdown\nDESCRIPTION: Metadata configuration for the Layer Panel component example, specifying the component path, category, priority and related information.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/layer-panel/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Layer Panel\ncomponent: ./LayerPanelExample.tsx\ncategory: ui\npriority: 3\nkeywords: []\n---\n```\n\n----------------------------------------\n\nTITLE: Defining TLV1Asset Type in TypeScript\nDESCRIPTION: Type definition for assets in tldraw version 1, which can be either image or video assets.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport type TLV1Asset = TLV1ImageAsset | TLV1VideoAsset;\n```\n\n----------------------------------------\n\nTITLE: Declaring TL_SCRIBBLE_STATES Set in TypeScript\nDESCRIPTION: Defines a set of possible scribble states in the tldraw application.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TL_SCRIBBLE_STATES: Set<\"active\" | \"paused\" | \"starting\" | \"stopping\">;\n\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in TypeScript for tldraw Schema\nDESCRIPTION: This code snippet shows the import statements for various dependencies used in the @tldraw/tlschema package.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tlschema/api-report.api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseRecord } from '@tldraw/store';\nimport { Expand } from '@tldraw/utils';\nimport { IndexKey } from '@tldraw/utils';\nimport { JsonObject } from '@tldraw/utils';\nimport { LegacyMigrations } from '@tldraw/store';\nimport { MakeUndefinedOptional } from '@tldraw/utils';\nimport { MigrationId } from '@tldraw/store';\nimport { MigrationSequence } from '@tldraw/store';\nimport { RecordId } from '@tldraw/store';\nimport { RecordType } from '@tldraw/store';\nimport { SerializedStore } from '@tldraw/store';\nimport { Signal } from '@tldraw/state';\nimport { StandaloneDependsOn } from '@tldraw/store';\nimport { Store } from '@tldraw/store';\nimport { StoreSchema } from '@tldraw/store';\nimport { StoreSnapshot } from '@tldraw/store';\nimport { StoreValidator } from '@tldraw/store';\nimport { T } from '@tldraw/validate';\nimport { UnknownRecord } from '@tldraw/store';\n```\n\n----------------------------------------\n\nTITLE: ZoomToSelectionMenuItem Component Declaration in React JSX\nDESCRIPTION: Exports a React functional component called ZoomToSelectionMenuItem that likely renders a menu item for zooming to the current selection in the TLDraw application interface.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/packages/tldraw/api-report.api.md#2025-04-16_snippet_116\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ZoomToSelectionMenuItem(): JSX_2.Element;\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Sequence in TypeScript\nDESCRIPTION: Demonstrates how to create a migration sequence with specific migration rules and filters for custom shapes.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/docs/content/docs/persistence.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMigrationSequence, isShape } from 'tldraw'\n\nconst myMigrations = createMigrationSequence({\n\tsequenceId: SEQUENCE_ID,\n\tsequence: [\n\t\t{\n\t\t\tid: Versions.AddColor,\n\t\t\t// Scope can be one of\n\t\t\t// - 'store' to have the up function called on the whole snapshot at once\n\t\t\t// - 'record' to have the up function called on each record individually\n\t\t\tscope: 'record',\n\t\t\t// if scope is 'record', you can filter which records the migration runs on\n\t\t\tfilter: (record) => isShape(record) && record.type === 'custom-shape',\n\t\t\tup(record) {\n\t\t\t\trecord.props.color = 'black'\n\t\t\t},\n\t\t},\n\t],\n})\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Representation of tldraw Logo in Markdown\nDESCRIPTION: A large ASCII art representation of the tldraw logo, likely used as a visual header for the documentation file.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/bemo-worker/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n⠀⠀⠀⠀⠀⠀⢤⡴⠶⠷⠶⠶⠾⠷⠻⠶⠷⠿⠾⠶⠷⠿⠳⠷⠾⠾⠷⠷⠾⠾⠷⠿⠶⠿⠞⠷⠶⠷⢦⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢠⡼⠟⠋⠤⣤⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠻⣤⡤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡧⠀⠁⡀⢀⠉⠙⠠⣄⣀⠀⠀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣘⣛⣧⣤⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡇⠐⠠⠀⣠⣤⡘⠀⠌⡈⣷⡶⠛⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠛⠙⠋⠙⠉⠋⠛⠋⣶⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡧⢐⣶⣶⠙⠋⠃⣴⣮⠁⣿⠀⠀⠀⠀⢠⣄⣤⣠⣄⣤⣤⣤⣠⣤⣤⣤⣠⣤⣤⣤⣠⣤⣤⣤⣄⣤⣠⣄⣠⡄⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡗⢸⠏⢁⡶⣶⡶⠏⠉⡀⣿⠀⠀⠐⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠐⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡧⠰⣿⡾⠁⠉⠀⣾⣿⠄⣿⠀⠀⠂⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡧⠐⠉⡁⣰⣶⡆⠉⠉⠀⣿⠀⠀⡀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡇⢈⠐⠀⠀⠉⡀⢀⠁⠂⣿⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠛⣤⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠛⢣⣤⠛⠀⠀⠀⢸⡇⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⣏⢠⣷⣾⣾⣤⣠⡀⠂⡁⣿⠀⠀⠈⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠶⣆⣀⣀⣰⠶⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⢀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡇⢸⣿⣿⣿⢿⣿⡃⠄⡀⣿⠀⠀⠐⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡇⠸⣟⣿⣻⣿⣿⡄⠀⠄⣿⠀⠀⠠⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⣿⠀⠀⠀⠀⠀⠀⣤⣿⣿⣤\n⠀⠀⠀⠀⢸⡗⠰⣿⣿⣿⣿⣾⠂⠄⠂⣿⠀⠀⢀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠈⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⣯\n⠀⠀⠀⠀⢸⡏⠘⠉⣿⣿⣿⡿⠆⠀⡁⣿⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⣧\n⠀⠀⠀⠀⢸⣇⠨⣿⣿⣿⣿⣿⡁⠂⠄⣿⠀⠀⠂⠸⢧⣠⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⡼⠇⠀⠈⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⡿\n⠀⠀⠀⠀⢸⡧⠘⠉⠙⠿⠻⠛⠂⢀⠂⣿⠀⠀⢀⠀⠀⢁⢈⡈⣁⢈⡁⣈⢁⡈⢁⠈⠁⠁⠈⠈⠀⠁⠈⠁⠉⠈⠁⠈⠀⠁⠀⠀⠠⣿⣤⠀⠀⠀⠀⠀⣿⡀⣸⣿\n⠀⠀⠀⠀⢸⣇⣠⣢⣷⣶⣶⣦⡑⠀⠄⣿⠀⠀⠀⢰⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⠀⠀⠠⠀⠀⢀⣶⣶⠀⠀⠄⠐⠀⠐⣿⣼⠟⢣⣤⣤⠟⠁⣰⠿⠀\n⠀⣀⣰⣶⠾⠛⠛⠙⠛⠉⣿⣿⡀⠐⡀⣿⠀⠀⠄⠘⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠉⠀⠀⢀⠠⠀⠘⠛⠛⠁⠀⠀⠀⠄⠈⣿⠙⠶⢧⣀⣀⣰⡾⠋⠀⠀\n⣶⠋⠉⣘⣟⢿⣻⣟⡻⠻⠿⣿⠀⠄⡀⣿⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠈⠀⠀⠀⡀⠀⠀⠀⡀⠐⠀⢀⠀⣿⠀⠀⠈⠉⠉⠉⠁⠀⠀⠀\n⠛⣦⣤⣤⣤⣤⣤⣤⣤⣤⠀⢹⣟⠀⡀⣿⠀⠀⠈⢀⣀⣻⡏⠉⣇⣀⡐⠀⠀⠄⠀⠀⠂⠀⢀⠀⣠⡼⠧⣄⠀⣠⣦⠄⠀⢀⠠⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡇⠠⠐⠠⠀⠛⠛⡀⠄⡀⣿⠀⠀⠠⢼⣇⣀⡀⢀⣀⣸⠇⠀⠀⠀⠀⠂⠀⠠⠀⠘⠛⠒⠒⠚⠻⣿⣂⠼⡇⠀⠀⢀⠠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⢸⡇⠠⠁⠂⠡⠈⡀⠄⠂⠄⣿⠀⠀⠀⠀⠀⠹⢇⣠⡏⠀⠀⠀⠀⠁⠀⡀⠐⠀⠀⠀⣠⣶⣿⣿⣷⣬⡉⠁⠀⠀⢀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠸⢷⣄⠂⣁⠂⠡⢀⠐⡈⠀⣿⠀⠀⠈⠀⠀⢂⣀⡠⠀⠀⠐⠀⠁⡀⠄⠀⠀⠀⠐⠀⣿⣿⣿⣿⣷⣿⡇⠀⠀⠠⠀⠀⠠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠘⢳⣤⡄⢁⠂⠐⡀⠁⣿⠀⠀⢀⠘⠛⠛⠛⠃⠀⠘⠛⠛⠛⠛⠀⠀⠀⠁⠀⠀⠈⠻⠿⠿⠿⠋⠀⠀⢀⠀⠀⠐⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠛⡶⢦⣀⣄⣿⠀⠀⡀⠀⠠⠀⠀⠀⡀⠀⢀⠀⢀⠀⠀⡀⠂⠀⠈⠀⡀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠈⠀⢀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠘⠛⢻⣿⣤⡀⣁⣀⡀⣀⢂⣀⣁⣀⣈⡀⣈⣀⣀⣁⣀⡐⣀⣀⢁⡀⣂⢀⣀⢂⣀⣀⢀⢂⣀⣠⣼⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠛⠛⠛⠛⢻⣿⣻⣿⣛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⣻⣟⣿⣿⣿⡛⠛⠛⠛⠛⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⡿⣿⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣻⣿⣿⣿⣯⣷⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⣿⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⢰⡞⣿⣿⡶⣯⣽⡿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠛⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣏⣿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⡟⢩⣟⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠿⣧⣾⣿⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosted Images Documentation Frontmatter\nDESCRIPTION: YAML frontmatter configuration for hosted images documentation page, specifying the component path, category, visibility settings, and related keywords.\nSOURCE: https://github.com/tldraw/tldraw/blob/main/apps/examples/src/examples/hosted-images/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hosted images\ncomponent: ./HostedImagesExample.tsx\ncategory: data/assets\npriority: 2\nhide: true\nkeywords: [assets, video, image, png, jpg, file]\n---\n```"
  }
]