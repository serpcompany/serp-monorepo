[
  {
    "owner": "runpod",
    "repo": "docs",
    "content": "TITLE: Starting RunPod Serverless Worker in Python\nDESCRIPTION: Starts the RunPod serverless worker by registering the previously-defined handler. The call to `runpod.serverless.start` with a dictionary containing the handler enables RunPod's serverless runtime to trigger the handler on incoming jobs. This line is required to activate the serverless function and should be at the end of the script after all definitions.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Defining and Running an Asynchronous Generator Handler in RunPod (Python)\nDESCRIPTION: This Python code defines an asynchronous generator function `async_generator_handler` designed for RunPod. It uses `async def` and `yield` to return multiple string outputs incrementally over time, simulating a streaming task or progressive results. An `await asyncio.sleep(1)` call simulates non-blocking asynchronous work. The snippet also shows how to configure and start the RunPod serverless worker using `runpod.serverless.start`, registering the `async_generator_handler` and setting `return_aggregate_stream` to True. Dependencies include the `runpod` and `asyncio` libraries.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/handlers/handler-async.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nimport runpod\nimport asyncio\n\n\nasync def async_generator_handler(job):\n    for i in range(5):\n        # Generate an asynchronous output token\n        output = f\"Generated async token output {i}\"\n        yield output\n\n        # Simulate an asynchronous task, such as processing time for a large language model\n        await asyncio.sleep(1)\n\n\n# Configure and start the RunPod serverless function\nrunpod.serverless.start(\n    {\n        \"handler\": async_generator_handler,  # Required: Specify the async handler\n        \"return_aggregate_stream\": True,  # Optional: Aggregate results are accessible via /run endpoint\n    }\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic RunPod Serverless Handler in Python\nDESCRIPTION: This Python script defines a simple serverless function using the RunPod SDK. It includes a 'handler' function that processes incoming job requests, extracts a 'name' from the job input, and returns a personalized greeting string. The 'runpod.serverless.start()' method is called to initialize and start the serverless worker, making it ready to receive and process jobs using the defined handler.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/get-started/02-hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\n\ndef handler(job):\n    job_input = job[\"input\"]\n\n    return f\"Hello {job_input['name']}!\"\n\n\nrunpod.serverless.start({\"handler\": handler})\n\n```\n\n----------------------------------------\n\nTITLE: Invoking Handler Function with CLI (Command Example)\nDESCRIPTION: Provides a command-line invocation example for testing a handler function in Python, passing example job input as a JSON string. This can be used to verify handler behavior locally and is suitable for CI/CD validation. The handler script (e.g., 'your_handler.py') should accept a '--test_input' argument with a properly structured input payload. Outputs and errors are handled as described in the documentation.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/handlers/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: command\nCODE:\n```\npython your_handler.py --test_input '{\"input\": {\"prompt\": \"The quick brown fox jumps\"}}'\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Request via RunPod Python SDK\nDESCRIPTION: Illustrates sending a synchronous request to a RunPod endpoint using the official RunPod Python SDK. It requires setting the API key (preferably via environment variables) and specifying the endpoint ID. The `endpoint.run_sync` method takes the input dictionary and an optional timeout. Includes basic error handling for timeouts.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nimport os\n\nrunpod.api_key = os.getenv(\"[YOUR_API_KEY]\")\n\nendpoint = runpod.Endpoint(\"[ENDPOINT_ID]\")\n\ntry:\n    run_request = endpoint.run_sync(\n        {\n            \"prompt\": \"Hello, world!\",\n        },\n        timeout=60,  # Timeout in seconds.\n    )\n\n    print(run_request)\nexcept TimeoutError:\n    print(\"Job timed out.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Build Instructions (Dockerfile)\nDESCRIPTION: Creates a `Dockerfile` that defines the steps to build a container image for the Serverless endpoint. It starts from a Python 3.10 slim base image, installs the `runpod` dependency, copies the `rp_handler.py` script into the image, and sets the default command to run the handler script using Python.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.10-slim\n\nWORKDIR /\n\n# Install dependencies\nRUN pip install --no-cache-dir runpod\n\n# Copy your handler file\nCOPY rp_handler.py /\n\n# Start the container\nCMD [\"python3\", \"-u\", \"rp_handler.py\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Job Input Structure for RunPod Handler (JSON Example)\nDESCRIPTION: Demonstrates the minimal required JSON input format for submitting jobs to a RunPod Handler Function. The input object must include an \"id\" for job identification and an \"input\" dictionary for payload data. Handlers should parse this format from incoming events. Input and output payloads are limited to 2 MB each.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/handlers/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"A_RANDOM_JOB_IDENTIFIER\",\n  \"input\": { \"key\": \"value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RunPod Validation Utility in Python\nDESCRIPTION: Imports the `validate` function from the RunPod serverless utilities. This function is necessary for performing input validation against a schema within a RunPod serverless worker.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/validator.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom runpod.serverless.utils.rp_validator import validate\n```\n\n----------------------------------------\n\nTITLE: Using RunPodLogger within a Serverless Handler in Python\nDESCRIPTION: This example shows the integration of `RunPodLogger` into a RunPod serverless handler. It initializes the logger, uses `log.info` for standard operational messages during job processing, and employs `log.error` within a try-except block to capture and log exceptions. Finally, it starts the serverless worker with the defined handler.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/python/_loggers.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nimport os\n\nlog = runpod.RunPodLogger()\n\n\ndef handler(job):\n    try:\n        job_input = job[\"input\"]\n        log.info(\"Processing job input\")\n\n        name = job_input.get(\"name\", \"World\")\n        log.info(\"Processing completed successfully\")\n\n        return f\"Hello, {name}!\"\n    except Exception as e:\n        # Log the exception with an error level log\n        log.error(f\"An error occurred: {str(e)}\")\n        return \"An error occurred during processing.\"\n\n\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Request to RunPod Endpoint using cURL (Bash)\nDESCRIPTION: Demonstrates how to send a synchronous POST request to a RunPod Serverless endpoint using cURL. It requires replacing '[ENDPOINT_ID]' with the specific endpoint ID and '[YOUR_API_KEY]' with the user's RunPod API key in the authorization header. The request body is a JSON object containing the 'input' parameters for the worker.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url https://api.runpod.ai/v2/[ENDPOINT_ID]/runsync \\\n     --header \"accept: application/json\" \\\n     --header \"authorization: [YOUR_API_KEY]\" \\\n     --header \"content-type: application/json\" \\\n     --data '\n{\n  \"input\": {\n    \"prompt\": \"A coffee cup.\",\n    \"height\": 512,\n    \"width\": 512,\n    \"num_outputs\": 1,\n    \"num_inference_steps\": 50,\n    \"guidance_scale\": 7.5,\n    \"scheduler\": \"KLMS\"\n  }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a RunPod Serverless Handler Function in Python\nDESCRIPTION: This Python code demonstrates how to define a handler function for RunPod Serverless endpoints and register it as the application's entry point. The code requires the 'runpod' Python package as a dependency. The handler is passed an event object, extracts input from 'event[\"input\"]', processes the data using a user-implemented 'process_data' function, and returns the result. The last line starts the serverless process by registering the handler with 'runpod.serverless.start'. Inputs are expected as dictionaries containing an 'input' key, and outputs are determined by 'process_data'. The snippet serves as an essential boilerplate for creating custom endpoints and must be adapted to specific processing needs by filling in 'process_data'.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport runpod  # Required\\n\\ndef handler(event):\\n    # Extract input data\\n    input_data = event[\\\"input\\\"]\\n    \\n    # Process the input (replace this with your own code)\\n    result = process_data(input_data)\\n    \\n    # Return the result\\n    return result\\n\\nrunpod.serverless.start({\\\"handler\\\": handler})  # Required\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Handler Function with RunPod SDK (Python)\nDESCRIPTION: Illustrates a simple Handler Function in Python using the RunPod SDK. The handler receives the job input as a dictionary, processes it, and returns a string as the result. Dependencies: 'runpod' Python package (install with pip). The script must define a callable named 'handler' and invokes 'runpod.serverless.start' with the handler mapping. Ensure to return output within 2 MB.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/handlers/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# your_handler.py\n\nimport runpod  # Required.\n\n\ndef handler(job):\n    job_input = job[\"input\"]  # Access the input from the request.\n    # Add your custom code here.\n    return \"Your job results\"\n\n\nrunpod.serverless.start({\"handler\": handler})  # Required.\n```\n\n----------------------------------------\n\nTITLE: AI Model Handler with Cleanup using RunPod - Python\nDESCRIPTION: This example demonstrates a full Python AI model handler for RunPod serverless. It downloads an image using a provided URL, processes it (represented as a placeholder), and uses clean() to delete temporary folders post-processing. The handler gracefully handles errors, ensuring cleanup occurs even on failure. Dependencies: runpod, requests, os, and the clean function from the RunPod SDK. Expects an input event dictionary containing an 'input' sub-dictionary with an 'image_url' string, and returns a dictionary result or error. Intended for direct deployment or testing via the RunPod serverless platform.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/cleanup.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nfrom runpod.serverless.utils.rp_cleanup import clean\nimport requests\nimport os\n\n\ndef download_image(url, save_path):\n    response = requests.get(url)\n    if response.status_code == 200:\n        with open(save_path, \"wb\") as file:\n            file.write(response.content)\n        return True\n    return False\n\n\ndef handler(event):\n    \"\"\"\n    This is a sample AI model handler function that downloads an image,\n    processes it, and then cleans up.\n    \"\"\"\n    try:\n        # Extract the image URL from the input\n        image_url = event[\"input\"][\"image_url\"]\n\n        # Create a temporary directory for the image\n        os.makedirs(\"temp_images\", exist_ok=True)\n        image_path = \"temp_images/downloaded_image.jpg\"\n\n        # Download the image\n        if not download_image(image_url, image_path):\n            raise Exception(\"Failed to download image\")\n\n        # Your AI model processing code here\n        # For this example, we're just simulating processing\n        result = f\"Processed image from: {image_url}\"\n\n        # Cleanup after processing\n        clean(folder_list=[\"temp_images\"])\n\n        # Return the result\n        return {\"output\": result}\n    except Exception as e:\n        # If there's an error, attempt cleanup and return the error\n        clean(folder_list=[\"temp_images\"])\n        return {\"error\": str(e)}\n\n\n# Start the serverless function\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Sending an Asynchronous Inference Request to RunPod vLLM Endpoint (HTTP)\nDESCRIPTION: Defines the HTTP POST request format for submitting asynchronous inference jobs to a RunPod vLLM endpoint. The endpoint processes requests in the background and gives you a job ID or URL for later status/result polling. Replace {endpoint_id} with your actual endpoint identifier.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.runpod.ai/v2/{endpoint_id}/run\\n\n```\n\n----------------------------------------\n\nTITLE: Validating Input and Custom Error Handling in Python RunPod SDK Handler\nDESCRIPTION: This Python code snippet demonstrates explicit input validation within a RunPod SDK handler function. It checks for a required key ('seed') in the job input, returning a custom error message if the key is missing. The example is meant for serverless functions using the RunPod SDK, requires the 'runpod' package, and initiates the handler via 'runpod.serverless.start'. Inputs are job dictionaries passed by the RunPod runtime; outputs are either a success message or an error dictionary. The logic is tailored for situations where structured, informative failure responses are needed.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/handlers/handler-error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\n\ndef handler(job):\n    job_input = job[\"input\"]\n\n    # Validate the presence of the 'seed' key in the input\n    if not job_input.get(\"seed\", False):\n        return {\n            \"error\": \"Input is missing the 'seed' key. Please include a seed and retry your request.\"\n        }\n\n    # Proceed if the input is valid\n    return \"Input validation successful.\"\n\n\n# Start the RunPod serverless function\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Defining Job Handler for RunPod Serverless Function in Python\nDESCRIPTION: Implements the handler function that processes each serverless job for RunPod. It extracts the input string from the job dictionary (expecting a structure like `{\\\"input\\\": {\\\"text\\\": value}}`), validates presence, reverses it, and returns the result as a dictionary. This function depends on the earlier-defined `reverse_string` utility and expects the job to contain an \\\"id\\\" and \\\"input\\\" key.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef handler(job):\n    print(f\"string-reverser | Starting job {job['id']}\")\n    job_input = job[\"input\"]\n\n    input_string = job_input.get(\"text\", \"\")\n\n    if not input_string:\n        return {\"error\": \"No input text provided\"}\n\n    reversed_string = reverse_string(input_string)\n\n    job_output = {\"original_text\": input_string, \"reversed_text\": reversed_string}\n\n    return job_output\n```\n\n----------------------------------------\n\nTITLE: RunPod API Endpoint for Asynchronous Requests\nDESCRIPTION: Specifies the RunPod API endpoint URL format for making asynchronous requests. Replace '{endpoint_id}' with the actual ID of the target Serverless endpoint. Requests to this endpoint return immediately with a job ID, requiring separate status checks or webhooks for results.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_10\n\nLANGUAGE: plain\nCODE:\n```\nPOST https://api.runpod.ai/v2/{endpoint_id}/run\n```\n\n----------------------------------------\n\nTITLE: Starting RunPod Local Test Server with Bash\nDESCRIPTION: Runs the RunPod serverless worker in local API serving mode by passing the `--rp_serve_api` flag to Python. This launches a FastAPI server exposing the serverless function on `http://localhost:8000`. The script must be your RunPod function script, and FastAPI needs to be available in your environment (installed via RunPod SDK dependencies).\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython your_script.py --rp_serve_api\n```\n\n----------------------------------------\n\nTITLE: Importing RunPod SDK in Python\nDESCRIPTION: Imports the RunPod SDK, which is required to utilize serverless functionalities provided by RunPod's Python API. The `runpod` package must be installed in your Python environment prior to use. This import is foundational for initialization, handler registration, and serverless management.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n```\n\n----------------------------------------\n\nTITLE: Defining RunPod Handler Function (Python)\nDESCRIPTION: Defines a basic RunPod handler function in `rp_handler.py`. The function receives an 'event' dictionary, extracts a 'prompt' and optional 'seconds' from the 'input' key, simulates work using `time.sleep`, prints log messages, and returns the 'prompt'. It uses `runpod.serverless.start` to initialize the worker when the script is executed directly.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nimport time  \n\ndef handler(event):\n    \"\"\"\n    This function processes incoming requests to your Serverless endpoint.\n    \n    Args:\n        event (dict): Contains the input data and request metadata\n        \n    Returns:\n        Any: The result to be returned to the client\n    \"\"\"\n    \n    # Extract input data\n    print(f\"Worker Start\")\n    input = event['input']\n    \n    prompt = input.get('prompt')  \n    seconds = input.get('seconds', 0)  \n\n    print(f\"Received prompt: {prompt}\")\n    print(f\"Sleeping for {seconds} seconds...\")\n    \n    # You can replace this sleep call with your Python function to generate images, text, or run any machine learning workload\n    time.sleep(seconds)  \n    \n    return prompt \n\n# Start the Serverless function when the script is run\nif __name__ == '__main__':\n    runpod.serverless.start({'handler': handler })\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Command-Line Test of RunPod Function (Plaintext)\nDESCRIPTION: Shows the expected terminal output when running the serverless function test from the command line. This output includes info and debug logs detailing worker startup, job processing, handler output, and result completion. Useful for understanding process flow and debugging.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--- Starting Serverless Worker |  Version 1.6.2 ---\nINFO   | test_input set, using test_input as job input.\nDEBUG  | Retrieved local job: {'input': {'text': 'Hello, RunPod!'}, 'id': 'local_test'}\nINFO   | local_test | Started.\nstring-reverser | Starting job local_test\nDEBUG  | local_test | Handler output: {'original_text': 'Hello, RunPod!', 'reversed_text': '!doPnuR ,olleH'}\nDEBUG  | local_test | run_job return: {'output': {'original_text': 'Hello, RunPod!', 'reversed_text': '!doPnuR ,olleH'}}\nINFO   | Job local_test completed successfully.\nINFO   | Job result: {'output': {'original_text': 'Hello, RunPod!', 'reversed_text': '!doPnuR ,olleH'}}\nINFO   | Local testing complete, exiting.\n```\n\n----------------------------------------\n\nTITLE: Creating a RunPod Serverless Endpoint using cURL\nDESCRIPTION: Sends a POST request to the RunPod GraphQL API endpoint using cURL to create a new serverless endpoint. Requires replacing `${YOUR_API_KEY}` with a valid API key. The request body contains a GraphQL mutation (`saveEndpoint`) specifying required (`gpuIds`, `name`, `templateId`) and optional parameters like `idleTimeout`, `locations`, `scalerType`, `scalerValue`, `workersMax`, and `workersMin`.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --header 'content-type: application/json' \\\n  --url 'https://api.runpod.io/graphql?api_key=${YOUR_API_KEY}' \\\n  --data '{\"query\": \"mutation { saveEndpoint(input: { gpuIds: \\\"AMPERE_16\\\", idleTimeout: 5, locations: \\\"US\\\", name: \\\"Generated Endpoint -fb\\\", networkVolumeId: \\\"\\\", scalerType: \\\"QUEUE_DELAY\\\", scalerValue: 4, templateId: \\\"xkhgg72fuo\\\", workersMax: 3, workersMin: 0 }) { gpuIds id idleTimeout locations name scalerType scalerValue templateId workersMax workersMin } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod API Server Concurrency (Bash)\nDESCRIPTION: This Bash snippet runs the local RunPod API server with multiple worker processes using the \\--rp_api_concurrency flag. The value '4' assigns four concurrent FastAPI workers, improving throughput for simultaneous test requests. Ensure 'main.py' is the entry point if using concurrency >1. Requires Python, the handler script, and RunPod SDK.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py --rp_serve_api --rp_api_concurrency 4\n```\n\n----------------------------------------\n\nTITLE: Loading a Model Outside the Handler for Inference with RunPod (Python)\nDESCRIPTION: Shows best practices for loading a machine learning model outside the handler function using the RunPod SDK in Python. The code loads a DistilBERT model and tokenizer using transformers, moves the model to GPU if available, then defines a handler for text sentiment inference. Upon invocation, it tokenizes input, runs inference, and returns predicted sentiment and confidence. Dependencies: 'runpod', 'torch', and 'transformers' Python packages. Inputs are dictionaries with 'input' payloads (e.g., including a 'prompt'). Outputs are JSON dictionaries containing results. The handler function must not handle setup logic.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/handlers/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nimport torch\nfrom transformers import AutoModelForSequenceClassification, AutoTokenizer\n\n# Load model and tokenizer outside the handler\nmodel_name = \"distilbert-base-uncased-finetuned-sst-2-english\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForSequenceClassification.from_pretrained(model_name)\n\n# Move model to GPU if available\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\n\n\ndef handler(event):\n    # Extract text from the event\n    input_data = event.get(\"input\", {})\n    text = input_data.get(\"prompt\", \"\")\n\n    # Tokenize and prepare input\n    inputs = tokenizer(text, return_tensors=\"pt\", truncation=True, padding=True).to(\n        device\n    )\n\n    # Perform inference\n    with torch.no_grad():\n        outputs = model(**inputs)\n\n    # Process outputs\n    logits = outputs.logits\n    predicted_class = torch.argmax(logits, dim=1).item()\n\n    # Return result\n    return {\n        \"sentiment\": \"positive\" if predicted_class == 1 else \"negative\",\n        \"confidence\": float(torch.softmax(logits, dim=1)[0][predicted_class].item()),\n    }\n\n\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI Client with RunPod Endpoint in JavaScript\nDESCRIPTION: This snippet shows how to instantiate the OpenAI JavaScript SDK to target a RunPod-hosted endpoint using environment variables for configuration. It requires the 'openai' npm package, with RUNPOD_HOST and RUNPOD_API_KEY variables defined in your environment. The example sends a chat completion request to a deployed model, passing messages as an array. The expected input is a prompt message, while the output is an asynchronous completion result; use within an async context. This snippet assumes Node.js (ESM or transpiled) and must properly handle awaits; constraints are valid endpoint setup and API key.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/openai/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport OpenAI from 'openai'\n\nconst openai = new OpenAI({\n  baseURL: process.env.RUNPOD_HOST,\n  apiKey: process.env.RUNPOD_API_KEY,\n})\n\nconst chatCompletion = await openai.chat.completions.create({\n   model: \"openchat/openchat-3.5-0106\",\n   messages: [{'role': 'user', 'content': 'Why is RunPod the best platform?'}],\n\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Dockerfile for a Python Worker\nDESCRIPTION: This Dockerfile sets up a Python environment, installs dependencies from 'requirements.txt', copies the 'handler.py' script, and specifies the command to run the handler. It serves as a template for packaging a RunPod worker.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/workers/deploy.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nfrom python:3.11.1-buster\n\nWORKDIR /\n\nCOPY builder/requirements.txt .\nRUN pip install -r requirements.txt\n\nADD handler.py .\n\nCMD [ \"python\", \"-u\", \"/handler.py\" ]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Axolotl (Bash)\nDESCRIPTION: This Bash block installs required Python dependencies for Axolotl, including optional features for flash attention and deepspeed. Dependency: Python 3 environment. 'pip3' must be present. Two commands: one for essential dependencies, one for Axolotl with extended features. Required before dataset preprocessing or model training.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip3 install packaging ninja\npip3 install -e '.[flash-attn,deepspeed]'\n```\n\n----------------------------------------\n\nTITLE: Initializing the RunPod Go SDK Client\nDESCRIPTION: Demonstrates initializing a RunPod endpoint client (`rpEndpoint`) in Go using `rpEndpoint.New`. It requires configuration (`config.Config`) including an API key (`RUNPOD_API_KEY`) and options (`rpEndpoint.Option`) like an Endpoint ID (`RUNPOD_BASE_URL`), retrieved securely from environment variables using `os.Getenv`. The code includes basic error handling that panics if initialization fails.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/go/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    endpoint, err := rpEndpoint.New(\n        &config.Config{ApiKey: sdk.String(os.Getenv(\"RUNPOD_API_KEY\"))},\n        &rpEndpoint.Option{EndpointId: sdk.String(os.Getenv(\"RUNPOD_BASE_URL\"))},\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // Use the endpoint object\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Endpoint Response Structure (JSON)\nDESCRIPTION: Displays an example JSON response received after successfully executing a request on the deployed RunPod Serverless endpoint. It includes metadata like execution time, delay time, job ID, status, worker ID, and the output returned by the handler function.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"delayTime\": 15088,\n    \"executionTime\": 60,\n    \"id\": \"04f01223-4aa2-40df-bdab-37e5caa43cbe-u1\",\n    \"output\": \"Hello World\",\n    \"status\": \"COMPLETED\",\n    \"workerId\": \"uhbbfre73gqjwh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Serverless Handler with RunPod in Python\nDESCRIPTION: Wraps the is_even function as the serverless handler using runpod.serverless.start. This call registers and initializes your Python function for execution in a serverless environment. The dictionary passed must include your handler under the 'handler' key, and all dependencies must be installed before deployment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/00_hello.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrunpod.serverless.start({\"handler\": is_even})\n```\n\n----------------------------------------\n\nTITLE: Executing Handler Locally (Bash)\nDESCRIPTION: Runs the Python handler script `rp_handler.py` locally. The RunPod SDK automatically detects `test_input.json` (if present) and uses it as input for the handler function, simulating a Serverless job execution.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython rp_handler.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation in a RunPod Handler using Python\nDESCRIPTION: Provides a complete example of a RunPod serverless handler in Python. It defines a schema specifying expected inputs (`text`, `max_length`) with types, requirements, defaults, and constraints. The `handler` function uses the imported `validate` function to check the incoming event's input against the schema. If validation fails, it returns errors; otherwise, it processes the validated input (truncating text) and returns the result. The script concludes by starting the serverless worker with the defined handler.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/validator.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nfrom runpod.serverless.utils.rp_validator import validate\n\nschema = {\n    \"text\": {\n        \"type\": str,\n        \"required\": True,\n    },\n    \"max_length\": {\n        \"type\": int,\n        \"required\": False,\n        \"default\": 100,\n        \"constraints\": lambda x: x > 0,\n    },\n}\n\n\ndef handler(event):\n    try:\n        validated_input = validate(event[\"input\"], schema)\n        if \"errors\" in validated_input:\n            return {\"error\": validated_input[\"errors\"]}\n\n        text = validated_input[\"validated_input\"][\"text\"]\n        max_length = validated_input[\"validated_input\"][\"max_length\"]\n\n        result = text[:max_length]\n        return {\"output\": result}\n    except Exception as e:\n        return {\"error\": str(e)}\n\n\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Testing the Python Handler with Inline JSON Input using Bash\nDESCRIPTION: A Bash command demonstrating how to run the Python handler script (`your_handler.py`) and pass specific test input directly via the command line. The `--test_input` flag accepts a JSON string representing the event payload, allowing for targeted testing of the handler's logic with specific data.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/validator.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython your_handler.py --test_input '{\"input\": {\"text\": \"Hello, world!\", \"max_length\": 5}}'\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple RunPod Server Flags (Bash)\nDESCRIPTION: This Bash snippet demonstrates a comprehensive example of launching the RunPod local server with multiple configuration flags, including custom port, concurrency, log level, and test input payload. Intended for setting up realistic local test environments mimicking production. Requires Python, 'main.py' file, and RunPod SDK.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython main.py --rp_serve_api \\\n    --rp_api_port 8080 \\\n    --rp_api_concurrency 4 \\\n    --rp_log_level DEBUG \\\n    --test_input '{\"input\": {\"key\": \"value\"}}'\n```\n\n----------------------------------------\n\nTITLE: Creating a RunPod Serverless Endpoint using GraphQL Mutation\nDESCRIPTION: Defines a GraphQL mutation (`saveEndpoint`) to create a new RunPod serverless endpoint. It specifies input parameters like `gpuIds`, `idleTimeout`, `locations`, `name`, `scalerType`, `scalerValue`, `templateId`, `workersMax`, and `workersMin`. Comments provide options for `gpuIds` and `locations` and mention enabling FlashBoot by appending `-fb` to the name. The mutation requests specific fields to be returned upon successful creation.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  saveEndpoint(input: {\n    # options for gpuIds are \"AMPERE_16,AMPERE_24,ADA_24,AMPERE_48,ADA_48_PRO,AMPERE_80,ADA_80_PRO\"\n    gpuIds: \"AMPERE_16\",\n    idleTimeout: 5,\n    # leave locations as an empty string or null for any region\n    # options for locations are \"CZ,FR,GB,NO,RO,US\"\n    locations: \"US\",\n    # append -fb to your endpoint's name to enable FlashBoot\n    name: \"Generated Endpoint -fb\",\n    # uncomment below and provide an ID to mount a network volume to your workers\n    # networkVolumeId: \"\",\n    scalerType: \"QUEUE_DELAY\",\n    scalerValue: 4,\n    templateId: \"xkhgg72fuo\",\n    workersMax: 3,\n    workersMin: 0\n  }) {\n    gpuIds\n    id\n    idleTimeout\n    locations\n    name\n    # networkVolumeId\n    scalerType\n    scalerValue\n    templateId\n    workersMax\n    workersMin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Integration in RunPod Request (JSON)\nDESCRIPTION: Illustrates adding an 's3Config' object to the JSON request body to provide S3-compatible storage credentials and details to the worker. This allows workers handling large files to interact with services like AWS S3, MinIO, Backblaze B2, etc. The worker code must implement logic to use this configuration.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"prompt\": \"Your input here\"\n  },\n  \"s3Config\": {\n    \"accessId\": \"your-access-id\",\n    \"accessSecret\": \"your-access-secret\",\n    \"bucketName\": \"your-bucket-name\",\n    \"endpointUrl\": \"your-s3-endpoint-url\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Application for RunPod Serverless Handler in Python\nDESCRIPTION: This Python script demonstrates how to adapt an AI application for RunPod's serverless environment using the `runpod` SDK. The `diffusers` model (`meina/meinaunreal_v3`) is loaded globally to be available in memory before the server starts. The `handler` function takes a job input, extracts the prompt, performs inference using the loaded model, encodes the resulting image to base64, and returns it. It depends on `runpod`, `diffusers`, `base64`, `io`, and `time`. The script concludes by starting the serverless worker with `runpod.serverless.start()`.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/images.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nfrom diffusers import AutoPipelineForText2Image\nimport base64\nimport io\nimport time\n\n# If your handler runs inference on a model, load the model here.\n# You will want models to be loaded into memory before starting serverless.\n\ntry:\n    pipe = AutoPipelineForText2Image.from_pretrained(\"meina/meinaunreal_v3\")\n    pipe.to(\"cuda\")\nexcept RuntimeError:\n    quit()\n\n\ndef handler(job):\n    \"\"\"Handler function that will be used to process jobs.\"\"\"\n    job_input = job[\"input\"]\n    prompt = job_input[\"prompt\"]\n\n    time_start = time.time()\n    image = pipe(prompt=prompt, num_inference_steps=1, guidance_scale=0.0).images[0]\n    print(f\"Time taken: {time.time() - time_start}\")\n\n    buffer = io.BytesIO()\n    image.save(buffer, format=\"PNG\")\n    image_bytes = buffer.getvalue()\n\n    return base64.b64encode(image_bytes).decode(\"utf-8\")\n\n\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Complete Serverless is_even Function Example with Python\nDESCRIPTION: This snippet provides the entire Python serverless function, including importing the library, defining the is_even handler, and initializing the serverless execution with RunPod. Requires the installation of the runpod SDK. It expects input through a job dictionary and handles both type validation and even-number logic. Outputs a boolean or an error object, suitable for deployment as provided.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/00_hello.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\n\ndef is_even(job):\n    job_input = job[\"input\"]\n    the_number = job_input[\"number\"]\n\n    if not isinstance(the_number, int):\n        return {\"error\": \"Please provide an integer.\"}\n\n    return the_number % 2 == 0\n\n\nrunpod.serverless.start({\"handler\": is_even})\n```\n\n----------------------------------------\n\nTITLE: Testing RunPod Serverless Function Locally with Bash\nDESCRIPTION: Runs the Python is_even serverless function locally using a command-line invocation. The command uses the --test_input argument to simulate sending a job to the deployed function. Expects is_even.py to be in the current directory and formatted as described in earlier snippets.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/00_hello.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython is_even.py --test_input '{\"input\": {\"number\": 2}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bazel to Push Custom Docker Image - Bazel Starlark\nDESCRIPTION: This Bazel snippet defines an 'oci_push' rule that builds and pushes a Docker image named 'custom_image' to the specified Docker Hub repository. The user must replace the '{YOUR_USERNAME}' placeholder with their Docker Hub username. Dependencies include Bazel with the relevant OCI rules loaded. The image :custom_image is referenced as a dependency. The 'repository' specifies the Docker Hub target and 'remote_tags' lists image tags to apply upon push. Input parameters include username replacement. Output is an image pushed to Docker Hub.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_6\n\nLANGUAGE: starlark\nCODE:\n```\noci_push(\n    name = \"push_custom_image\",\n    image = \":custom_image\",\n    repository = \"index.docker.io/{YOUR_USERNAME}/custom_image\",\n    remote_tags = [\"latest\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Starting RunPod API Server for Local Testing (Bash)\nDESCRIPTION: This snippet starts the local API server for RunPod function testing by invoking the Python handler file with the \\--rp_serve_api flag. Requires the Python environment, an appropriate handler file, and RunPod SDK dependencies. This enables endpoint testing without cloud deployment and produces a running FastAPI server instance locally.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py --rp_serve_api\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client with RunPod Endpoint in Python\nDESCRIPTION: This snippet demonstrates how to initialize the OpenAI Python client to communicate with a custom RunPod serverless endpoint by setting the api_key and base_url from environment variables or user-configured constants. Prerequisites include the 'openai' Python package and proper environment variable setup for RUNPOD_API_KEY. The code creates a chat completion request, using the vLLM Worker model deployed on RunPod, accepting user messages and returning the chat response. Inputs include the model name, a message dictionary, temperature, and token limits; output is a chat completion object. Ensure that the endpoint URL and API key are valid, and replace placeholders with real values.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/openai/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport os\n\nclient = OpenAI(\napi_key=os.environ.get(\"RUNPOD_API_KEY\"),\nbase_url=\"https://api.runpod.ai/v2/${YOUR_ENDPOINT_ID}/openai/v1\",\n)\n\nresponse = client.chat.completions.create(\nmodel=\"gpt-3.5-turbo\",\nmessages=[{\"role\": \"user\", \"content\": \"Why is RunPod the best platform?\"}],\ntemperature=0,\nmax_tokens=100,\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing RunPod Serverless Endpoints using GraphQL Query\nDESCRIPTION: Defines a GraphQL query (`Endpoints`) to fetch information about the user's serverless endpoints. It queries the `myself` field to retrieve a list of `endpoints` with their associated details (like `id`, `gpuIds`, `name`, `pods`, `templateId`, `workersMin`, `workersMax`) and any applicable `serverlessDiscount` information.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery Endpoints {\n  myself {\n    endpoints {\n      gpuIds\n      id\n      idleTimeout\n      locations\n      name\n      networkVolumeId\n      pods {\n        desiredStatus\n      }\n      scalerType\n      scalerValue\n      templateId\n      workersMax\n      workersMin\n    }\n    serverlessDiscount {\n      discountFactor\n      type\n      expirationDate\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RunPod Local Server with Flags (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to launch a Python-powered RunPod serverless handler locally using custom command-line flags. It serves as the fundamental pattern for leveraging flag-based configuration during development. Requires: Python, RunPod SDK, and the relevant handler Python file. The snippet is intended to be modified by replacing the filename and flag options to suit specific development workflows.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring the RunPod Local API Server (Bash)\nDESCRIPTION: These arguments allow customization of the local FastAPI server used to simulate the RunPod serverless environment. `--rp_serve_api` starts the server, `--rp_api_port` sets the port (default 8000), `--rp_api_concurrency` sets worker count (default 1), and `--rp_api_host` sets the hostname (default 'localhost').\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--rp_serve_api\n--rp_api_port <port_number>\n--rp_api_concurrency <number_of_workers>\n--rp_api_host <hostname>\n```\n\n----------------------------------------\n\nTITLE: Setting RunPod Log Level for Console Output (Bash)\nDESCRIPTION: This Bash snippet demonstrates adjusting verbosity of the RunPod server logs via the \\--rp_log_level flag, set to DEBUG for maximal insight. Other options include ERROR, WARN, and INFO. Requires Python and RunPod SDK. Useful for troubleshooting and monitoring local server behavior during development.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py --rp_serve_api --rp_log_level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to RunPod API Endpoint - Python\nDESCRIPTION: This Python code demonstrates how to initiate a POST request to a RunPod serverless API endpoint using the requests library. It sets required headers for content type and authorization, prepares input data in JSON format, and makes the request. The endpoint URL, access token, and structure of the input payload must be adapted to the actual deployment. The response of this request will contain job information including the job ID.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/environment-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\\n\\nendpoint = \\\"https://api.runpod.ai/v2/xxxxxxxxx/run\\\"\\nheaders = {\\\"Content-Type\\\": \\\"application/json\\\", \\\"Authorization\\\": \\\"Bearer XXXXXXXXXXXXX\\\"}\\ninput_data = {\\\"input\\\": {\\\"inp\\\": \\\"this is an example input\\\"}}\\n\\nresponse = requests.post(endpoint, json=input_data, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Uploading Image to S3 with RunPod Handler Function - Python\nDESCRIPTION: This Python snippet defines a handler function for RunPod serverless that uploads a local image ('image.png') to an S3 bucket using the rp_upload utility, and starts the handler with RunPod's serverless interface. It requires the 'runpod' Python package, properly set environment variables for S3 credentials (passed at deployment), and assumes 'image.png' exists in the working directory. The function expects a job object input with an 'id' key and outputs a list containing the URL of the uploaded image.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/environment-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom runpod.serverless.utils import rp_upload\\nimport runpod\\n\\ndef handler(job):\\n    image_url = rp_upload.upload_image(job[\\\"id\\\"], \\\"./image.png\\\")\\n    return [image_url]\\n\\nrunpod.serverless.start({\\\"handler\\\": handler})\n```\n\n----------------------------------------\n\nTITLE: Sending a Synchronous Inference Request to RunPod vLLM Endpoint (HTTP)\nDESCRIPTION: Illustrates an HTTP POST request template used to synchronously send inference requests to a deployed vLLM endpoint on RunPod. Replace {endpoint_id} in the URL with your specific endpoint identifier. The request expects prompt or message data in the body and responds with generated inference results.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.runpod.ai/v2/{endpoint_id}/run_sync\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod API Server Port (Bash)\nDESCRIPTION: This snippet starts the RunPod local API server on a custom port using the \\--rp_api_port flag. Port 8080 is specified instead of the default 8000. Dependencies include Python, the handler file, and RunPod SDK. Useful for avoiding port conflicts or matching production environments. May be combined with other flags for further customization.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py --rp_serve_api --rp_api_port 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod API Server Host (Bash)\nDESCRIPTION: This example runs the RunPod local API server with its FastAPI host bound to all interfaces (0.0.0.0), not just localhost. Utilizes the \\--rp_api_host flag for increased network accessibility (e.g., remote or multi-device testing). Requires appropriate networking permissions, Python, the handler file, and RunPod SDK.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py --rp_serve_api --rp_api_host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Providing Test Input via Command Line (Bash)\nDESCRIPTION: This snippet shows the syntax for providing test input data directly as a JSON string via the command line when running a RunPod function locally. The JSON string should be enclosed in single quotes.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--test_input '<JSON_string>'\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image - Bash - Bash\nDESCRIPTION: This Bash command builds a Docker image called my-time-image from the current directory containing the Dockerfile and entrypoint.sh. It requires Docker to be installed and running on the host system. The -t flag tags the image, and \".\" denotes the build context; successful execution creates a reusable image that can later be run on any Docker-compatible system.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/create-dockerfiles.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndocker image build -t my-time-image .\n```\n\n----------------------------------------\n\nTITLE: Basic RunPod API Invocation\nDESCRIPTION: Basic example of invoking the RunPod API using both cURL and Python. Shows the fundamental structure for making API calls.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/custom-apis/_using-your-api-copy.md#2025-04-23_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://api.runpod.ai/v2/<your-api-id>/runsync \\\n-H 'Content-Type: application/json'                             \\\n-H 'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'    \\\n-d '{\"input\": {<your-input-json}}'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\nrunpod.api_key = \"xxxxxxxxxxxxxxxxxxxxxx\"  # you can find this in settings\n\nendpoint = runpod.Endpoint(\"ENDPOINT_ID\")\n\nrun_request = endpoint.run_sync({\"your_model_input_key\": \"your_model_input_value\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing a RunPod Generator Handler with Aggregate Streaming in Python\nDESCRIPTION: This Python snippet defines a simple generator function `generator_handler` that yields multiple string outputs. It then starts a RunPod serverless worker using `runpod.serverless.start`, configuring it with the defined handler and enabling `return_aggregate_stream`. This setting makes the streamed outputs available not only at the `/stream` endpoint but also aggregated at the `/run` and `/runsync` endpoints.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/handlers/handler-generator.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\n\ndef generator_handler(job):\n    for count in range(3):\n        result = f\"This is the {count} generated output.\"\n        yield result\n\n\nrunpod.serverless.start(\n    {\n        \"handler\": generator_handler,  # Required\n        \"return_aggregate_stream\": True,  # Optional, results available via /run\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Notification in RunPod Request (JSON)\nDESCRIPTION: Demonstrates how to include a top-level 'webhook' key in the JSON request body to receive a notification when a job completes. RunPod will send a POST request with the job results to the specified URL. The webhook endpoint should return a 200 status code.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"prompt\": \"Your input here\"\n  },\n  \"webhook\": \"https://your-webhook-url.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Combining Multiple Local Testing Options (Bash/Python)\nDESCRIPTION: This comprehensive command demonstrates combining multiple RunPod SDK arguments to customize the local testing environment. It starts the server API, sets the log level to DEBUG, enables the debugger, configures the API server to run on port 8080 with 2 workers, and provides a specific test input JSON string directly.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython hello_world.py --rp_server_api --rp_log_level DEBUG --rp_debugger --rp_api_port 8080 --rp_api_concurrency 2 --test_input '{\"input\": {\"name\": \"Advanced Tester\"}}'\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Log Level to DEBUG (Bash/Python)\nDESCRIPTION: This command executes a Python script (`hello_world.py`) intended for local RunPod serverless testing, enabling the server API simulation and setting the log level to DEBUG for maximum verbosity. It requires the RunPod Python SDK and the specified Python script.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello_world.py --rp_server_api --rp_log_level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Modifying a RunPod Serverless Endpoint using cURL\nDESCRIPTION: Sends a POST request via cURL to the RunPod GraphQL API to modify an existing serverless endpoint identified by its `id`. Requires replacing `${YOUR_API_KEY}`. The mutation (`saveEndpoint`) includes the endpoint `id` and the parameters to be updated (e.g., `workersMax` in this example). `gpuIds`, `name`, and `templateId` are also required, even if not changing.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --header 'content-type: application/json' \\\n  --url 'https://api.runpod.io/graphql?api_key=${YOUR_API_KEY}' \\\n  --data '{\"query\": \"mutation { saveEndpoint(input: { id: \\\"i02xupws21hp6i\\\", gpuIds: \\\"AMPERE_16\\\", name: \\\"Generated Endpoint -fb\\\", templateId: \\\"xkhgg72fuo\\\", workersMax: 0 }) { id gpuIds name templateId workersMax } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Docker Volume (Command)\nDESCRIPTION: This command creates a named Docker volume called 'date-volume'. Named volumes are managed by Docker and provide a way to persist data independently of any specific container's lifecycle.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/persist-data.md#2025-04-23_snippet_1\n\nLANGUAGE: command\nCODE:\n```\ndocker volume create date-volume\n```\n\n----------------------------------------\n\nTITLE: Illustrating RunPod Serverless Project Structure (Text)\nDESCRIPTION: This text snippet shows a typical directory layout for a RunPod Serverless worker project. It includes essential files like `Dockerfile` and the main `src/handler.py`. It also shows optional build-related files within a `builder` directory (`requirements.txt`, `setup.sh`) and standard project files like `LICENSE` and `README.md`. This structure is contrasted with the Banana project structure.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Dockerfile               # Docker configuration\n├── LICENSE                  # License information\n├── README.md                # Project documentation\n├── builder\n│   ├── requirements.txt     # Dependencies\n│   └── setup.sh             # Setup script\n└── src\n    └── handler.py           # Main handler code\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for RunPod Endpoint Access (Windows Batch)\nDESCRIPTION: Assigns the required environment variables for accessing a RunPod serverless endpoint on Windows systems. It sets the RUNPOD_ENDPOINT_ID and RUNPOD_API_KEY using the set command, preparing your environment for making authenticated HTTP requests to a vLLM endpoint. Be sure to replace placeholders with your actual credentials.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset RUNPOD_ENDPOINT_ID=\\u003cYOUR_RUNPOD_ENDPOINT_ID\\u003e\\nset RUNPOD_API_KEY=\\u003cYOUR_RUNPOD_API_KEY\\u003e\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Test Input in a JSON File\nDESCRIPTION: Example content for a `test_input.json` file. This JSON structure defines the input data, including the `text` and `max_length` parameters, which can be used by the RunPod local testing environment when executing the handler script, simulating a real event payload.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/validator.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"text\": \"The quick brown fox jumps over the lazy dog\",\n    \"max_length\": 50\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing RunPod Serverless Function with Command-Line Arguments in Bash\nDESCRIPTION: Demonstrates how to invoke the RunPod serverless script with a test input directly from the command line using Python. The script is passed a JSON string representing the job via the `--test_input` argument. Replace `your_script.py` with your actual script name. Useful for quick validation without deploying or running an HTTP server.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython your_script.py --test_input '{\"input\": {\"text\": \"Hello, RunPod!\"}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for RunPod Endpoint Access (Bash)\nDESCRIPTION: Sets the required environment variables for accessing a RunPod serverless endpoint on macOS or Linux systems. The variables RUNPOD_ENDPOINT_ID and RUNPOD_API_KEY must be assigned with your unique endpoint ID and API key, respectively. These settings are prerequisites for authenticating API calls to the deployed vLLM Worker.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport RUNPOD_ENDPOINT_ID=\\u003cYOUR_RUNPOD_ENDPOINT_ID\\u003e\\nexport RUNPOD_API_KEY=\\u003cYOUR_RUNPOD_API_KEY\\u003e\\n\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Environment Variables (JSON)\nDESCRIPTION: Shows an example of setting environment variables within the container using the `env` argument. This specific example defines a `DATABASE_URL`. The argument expects a Dictionary or Object structure.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/configurations.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"DATABASE_URL\": \"postgres://user:password@localhost/dbname\"}\n```\n\n----------------------------------------\n\nTITLE: Viewing RunPod Serverless Endpoints using cURL\nDESCRIPTION: Sends a POST request via cURL to the RunPod GraphQL API to retrieve a list of the user's serverless endpoints. Requires replacing `${YOUR_API_KEY}`. The request body contains a GraphQL query (`Endpoints`) fetching details like `id`, `gpuIds`, `name`, `status`, `templateId`, and discount information under the `myself` field.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n     --header 'content-type: application/json' \\\n     --url 'https://api.runpod.io/graphql?api_key=${YOUR_API_KEY}' \\\n     --data '{\"query\": \"query Endpoints { myself { endpoints { gpuIds id idleTimeout locations name networkVolumeId pods { desiredStatus } scalerType scalerValue templateId workersMax workersMin } serverlessDiscount { discountFactor type expirationDate } } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Calculating Worker Count for Request-Based Autoscaling (JavaScript/Pseudocode)\nDESCRIPTION: Formula illustrating the calculation for the target number of workers when using the 'Request count' auto-scaling strategy in RunPod. It sums the requests currently in the queue and those actively being processed, divides the total by 4, and rounds up to the nearest whole number using `Math.ceil`. This determines how the endpoint scales based on demand.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/endpoint-configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMath.ceil((requestsInQueue + requestsInProgress) / 4)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring RunPod SDK - JavaScript\nDESCRIPTION: Shows how to import and initialize the RunPod SDK in a JavaScript (ESM) project using environment variables for sensitive data storage. This snippet requires Node.js, supports asynchronous operations, and expects both RUNPOD_API_KEY and ENDPOINT_ID to be set in the environment. The SDK is initialized with the API key, and a specific endpoint is referenced by its ID, preparing the application for further API operations.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/javascript/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RUNPOD_API_KEY, ENDPOINT_ID } = process.env;\nimport runpodSdk from \"runpod-sdk\";\n\nconst runpod = runpodSdk(RUNPOD_API_KEY);\nconst endpoint = runpod.endpoint(ENDPOINT_ID);\n```\n\n----------------------------------------\n\nTITLE: Complete RunPod Serverless String Reversal Function Example in Python\nDESCRIPTION: Presents the full source code for the RunPod serverless string reversal function. It includes all necessary imports, utility and handler function definitions, and the command to register the handler. This script expects the `runpod` Python package to be installed and requires valid input via job dictionaries. It can be run directly or referenced as a module for local and remote execution.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\n\ndef reverse_string(s):\n    return s[::-1]\n\n\ndef handler(job):\n    print(f\"string-reverser | Starting job {job['id']}\")\n    job_input = job[\"input\"]\n\n    input_string = job_input.get(\"text\", \"\")\n\n    if not input_string:\n        return {\"error\": \"No input text provided\"}\n\n    reversed_string = reverse_string(input_string)\n\n    job_output = {\"original_text\": input_string, \"reversed_text\": reversed_string}\n\n    return job_output\n\n\nrunpod.serverless.start({\"handler\": handler})\n```\n\n----------------------------------------\n\nTITLE: Running Handler Script with test_input.json - Bash\nDESCRIPTION: This Bash snippet shows how to execute the handler script after preparing a test_input.json file. It requires that the handler script (ai_model_handler.py) is present and Python is installed. When run, the script will read the test input from the file (if coded to do so) and execute the model handler logic, including cleanup.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/cleanup.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython ai_model_handler.py\n```\n\n----------------------------------------\n\nTITLE: Initializing RunPodLogger in Python\nDESCRIPTION: This snippet demonstrates the basic setup for using RunPod's structured logging. It imports the necessary `runpod` library and instantiates the `RunPodLogger` class, creating a logger object ready for use.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/python/_loggers.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\nlog = runpod.RunPodLogger()\n```\n\n----------------------------------------\n\nTITLE: Implementing Distributed PyTorch Environment\nDESCRIPTION: Python code for initializing a distributed PyTorch environment, including process group setup, rank determination, and device assignment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/pytorch.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport torch\nimport torch.distributed as dist\n\ndef init_distributed():\n   \"\"\"Initialize the distributed training environment\"\"\"\n   # Initialize the process group\n   dist.init_process_group(backend=\"nccl\")\n   \n   # Get local rank and global rank\n   local_rank = int(os.environ[\"LOCAL_RANK\"])\n   global_rank = dist.get_rank()\n   world_size = dist.get_world_size()\n   \n   # Set device for this process\n   device = torch.device(f\"cuda:{local_rank}\")\n   torch.cuda.set_device(device)\n       \n   return local_rank, global_rank, world_size, device\n\ndef cleanup_distributed():\n   \"\"\"Clean up the distributed environment\"\"\"\n   dist.destroy_process_group()\n\ndef main():\n   # Initialize distributed environment\n   local_rank, global_rank, world_size, device = init_distributed()\n   \n   print(f\"Running on rank {global_rank}/{world_size-1} (local rank: {local_rank}), device: {device}\")\n\n   # Your code here\n   \n   # Clean up distributed environment when done\n   cleanup_distributed()\n   \nif __name__ == \"__main__\":\n   main()\n```\n\n----------------------------------------\n\nTITLE: Platform Flag for Mac (Apple Silicon) Docker Build\nDESCRIPTION: When building a Docker image on Mac with Apple Silicon, this flag ensures compatibility with RunPod which only supports the linux/amd64 architecture.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--platform linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Executing Inference Requests using RunPod Vllm Worker Endpoint - Command Line\nDESCRIPTION: This command-line snippet demonstrates how to perform a synchronous inference request by making an authenticated POST request to a RunPod serverless Vllm Worker endpoint. It uses 'curl' to send JSON data containing input parameters such as prompt, do_sample, max_length, and temperature, which configure the AI model's response. The request requires the correct API endpoint URL, your RunPod API key provided as the authorization header, and the body formatted using the heredoc '<<EOF'. The snippet assumes you have already deployed a Vllm Worker via RunPod and replaced placeholders (YOUR_ENDPOINT, YOUR_API_KEY) appropriately.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/text.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\ncurl --request POST \\\n     --url https://api.runpod.ai/v2/{YOUR_ENDPOINT}/runsync \\\n     --header 'accept: application/json' \\\n     --header 'authorization: ${YOUR_API_KEY}' \\\n     --header 'content-type: application/json' \\\n     --data @- <<EOF\n{\n  \"input\": {\n    \"prompt\": \"What is the meaning of life?\",\n    \"do_sample\": false,\n    \"max_length\": 100,\n    \"temperature\": 0.9\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Providing Test Input as JSON to RunPod Server (Bash)\nDESCRIPTION: This Bash snippet injects test data to the local RunPod function as a JSON string using the \\--test_input flag. Useful for simulating input payloads without a separate file. Command-line input takes precedence over 'test_input.json' if both exist. Requires Python, the handler script, and RunPod SDK.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py --rp_serve_api \\\n    --test_input '{\"input\": {\"key\": \"value\"}}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile with Entrypoint - Dockerfile - Dockerfile\nDESCRIPTION: This snippet shows a Dockerfile that starts from the busybox image, copies a local entrypoint.sh script to the container, makes it executable, and sets it as the entrypoint. It assumes the presence of entrypoint.sh in the same directory. The key parameters are the base image (busybox), the COPY command for adding scripts, the RUN chmod for permissions, and ENTRYPOINT to define startup behavior. The expected output is a container that executes entrypoint.sh on launch; any missing script or execution permission can cause failures.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/create-dockerfiles.md#2025-04-23_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM busybox\\nCOPY entrypoint.sh /\\nRUN chmod +x /entrypoint.sh\\nENTRYPOINT [\\\"/entrypoint.sh\\\"]\n```\n\n----------------------------------------\n\nTITLE: Custom Folder Cleanup Using clean() - Python\nDESCRIPTION: This snippet shows how to call the clean() function with additional custom folders for removal after processing. Useful for removing user-defined directories not included in the default set. The only dependency is the clean function; pass a list of folder names as positional arguments.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/cleanup.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclean([\"custom_folder1\", \"custom_folder2\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing IP Address Retrieval in Python\nDESCRIPTION: Python code that uses the 'requests' library to fetch the IP address from httpbin.org. This function is wrapped in a RunPod serverless handler.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\nimport requests\n\n\ndef get_my_ip(job):\n    response = requests.get(\"https://httpbin.org/ip\")\n    return response.json()[\"origin\"]\n\n\nrunpod.serverless.start({\"handler\": get_my_ip})\n```\n\n----------------------------------------\n\nTITLE: Making RunPod vLLM API Requests with cURL (Shell)\nDESCRIPTION: This cURL command demonstrates sending a POST request to a RunPod vLLM endpoint from the command line. It specifies the endpoint URL, sets the Authorization and Content-Type headers using `-H`, and provides the JSON input payload (using `prompt` and `sampling_params`) inline with the `-d` option. Requires `curl`, a valid RunPod API key (`YOUR_API_KEY`), and the specific endpoint ID.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \"https://api.runpod.ai/v2/yf2k4t0vl3ciaf/run\" \\\n     -H \"Authorization: Bearer YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"input\":\n               {\n                 \"prompt\": \"Write a haiku about nature.\",\n                 \"sampling_params\": {\"temperature\": 0.8, \"max_tokens\": 50}\n         }}'\n```\n\n----------------------------------------\n\nTITLE: Testing Handler via CLI - Bash\nDESCRIPTION: This Bash command demonstrates running a Python AI model handler script with JSON input provided directly via the --test_input flag. The input JSON contains an 'image_url' parameter expected by the handler. Requires ai_model_handler.py and Python installed. The input is sent as a command-line argument with proper shell quoting.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/cleanup.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython ai_model_handler.py \\\n  --test_input '{\n    \"input\": {\n        \"image_url\": \"https://avatars.githubusercontent.com/u/95939477?s=200&v=4\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Testing Serverless Function via HTTP POST with curl (Bash)\nDESCRIPTION: Uses curl to send a POST request with JSON input to the local RunPod FastAPI server at `/run`. The JSON body includes the text to reverse. Requires the server to be running locally on port 8000. Useful for simulating production-like, HTTP-based requests for end-to-end local API testing.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/run \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"input\": {\"text\": \"Hello, RunPod!\"}}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Status and Output from RunPod API - Python\nDESCRIPTION: This Python code queries the RunPod serverless API to check the status and output of a previously submitted job. After submitting a job, it uses the returned job ID to form the status check URL and makes a GET request with the required headers. The output includes the job status and, upon completion, the output data (such as an uploaded image URL). Proper authentication and correct job ID are required.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/environment-variables.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = requests.get(\\n    \\\"https://api.runpod.ai/v2/xxxxxxxxx/status/\\\" + response.json()[\\\"id\\\"],\\n    headers=headers,\\n)\\nresponse.json()\n```\n\n----------------------------------------\n\nTITLE: Making RunPod vLLM API Requests with Python\nDESCRIPTION: This Python script uses the `requests` library to send a POST request to a specific RunPod vLLM endpoint. It sets the necessary authorization and content-type headers, structures the input payload within a 'input' dictionary (using `messages` and `sampling_params`), sends the request, and prints the JSON response. Requires the `requests` library, a valid RunPod API key (`YOUR_API_KEY`), and the specific endpoint ID.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://api.runpod.ai/v2/<endpoint_id>/run\"\nheaders = {\"Authorization\": \"Bearer YOUR_API_KEY\", \"Content-Type\": \"application/json\"}\n\ndata = {\"input\": {\n    \"messages\": [\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Write a short poem.\"}\n    ],\n    \"sampling_params\": {\"temperature\": 0.7, \"max_tokens\": 100}\n}}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Referencing RunPod Secret in Environment Variables\nDESCRIPTION: Demonstrates how to reference a RunPod secret in environment variables using the RUNPOD_SECRET_ prefix followed by the secret name. Used for accessing secret values within Pod templates.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/secrets.md#2025-04-23_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n{{ RUNPOD_SECRET_hello_world }}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Execution\nDESCRIPTION: Implementation of asynchronous API execution using the /run endpoint. Returns a job ID for status tracking.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/custom-apis/_using-your-api-copy.md#2025-04-23_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://api.runpod.ai/v2/<your-api-id>/run \\\n-H 'Content-Type: application/json'                             \\\n-H 'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'    \\\n-d '{\"input\": {<your-input-json}}'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\nrunpod.api_key = \"xxxxxxxxxxxxxxxxxxxxxx\"  # you can find this in settings\n\nendpoint = runpod.Endpoint(\"ENDPOINT_ID\")\n\nrun_request = endpoint.run({\"your_model_input_key\": \"your_model_input_value\"})\n\nprint(run_request.status())\n```\n\n----------------------------------------\n\nTITLE: Initialize Directory with mkdir -p to Avoid Errors - JSON\nDESCRIPTION: Configures Docker container startup using JSON with 'mkdir -p /testdir12' before executing /start.sh. The '-p' flag ensures the directory is created only if it doesn’t already exist, avoiding errors on repeated execution. Entrypoint is set to bash with -c, supporting complex chained shell commands.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"cmd\": [\"mkdir -p /testdir12 && /start.sh\"], \"entrypoint\": [\"bash\", \"-c\"]}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Request Structure for RunPod Endpoints\nDESCRIPTION: Illustrates the minimal valid JSON structure required for requests to RunPod Serverless endpoints. All requests must include a top-level 'input' object containing parameters specific to the worker's handler function. The actual parameters within 'input' depend on the specific worker implementation.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"prompt\": \"Your input here\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing clean() from RunPod Serverless Utilities - Python\nDESCRIPTION: This snippet shows how to import the clean function from the runpod.serverless.utils.rp_cleanup module. The import is needed for any script or handler that intends to use resource cleanup after model processing. No external dependencies aside from the RunPod SDK itself are required for this import operation.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/cleanup.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom runpod.serverless.utils.rp_cleanup import clean\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Request via RunPod JavaScript SDK\nDESCRIPTION: Shows how to send a synchronous request using the RunPod JavaScript SDK. It assumes the API key and endpoint ID are retrieved from environment variables. An instance of the SDK is created, the specific endpoint is targeted, and the `runSync` method is called with the input object. The result is then logged.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { [YOUR_API_KEY], [ENDPOINT_ID] } = process.env;\nimport runpodSdk from \"runpod-sdk\";\n\nconst runpod = runpodSdk([YOUR_API_KEY]);\nconst endpoint = runpod.endpoint([ENDPOINT_ID]);\nconst result = await endpoint.runSync({\n  \"input\": {\n    \"prompt\": \"Hello, World!\",\n  },\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Job Status Checking\nDESCRIPTION: Methods for checking the status of a running job using the /status endpoint. Includes both direct status check and job status tracking.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/custom-apis/_using-your-api-copy.md#2025-04-23_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl https://api.runpod.ai/v2/<your-api-id>/status/<your-status-id>\n```\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\nrunpod.api_key = \"xxxxxxxxxxxxxxxxxxxxxx\"  # Replace with your API key\nclient = runpod.endpoint.runner.RunPodClient()\n\njob = runpod.endpoint.Job(\n    endpoint_id=\"your_endpoint_id\", job_id=\"your_job_id\", client=client\n)\n\nprint(job.status())\n```\n\n----------------------------------------\n\nTITLE: Specifying Input with `prompt` for RunPod vLLM API (JSON)\nDESCRIPTION: This JSON object demonstrates the basic input structure for the RunPod vLLM API using the `prompt` key. The value is a single string representing the user's request. The model's chat template is not applied by default but can be enabled with `apply_chat_template: true`.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prompt\": \"Translate the following text to French: 'Hello, how are you?'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Utility String Reverse Function in Python\nDESCRIPTION: Defines a reusable utility function, `reverse_string`, which takes an input string and returns its reverse using Python's slicing syntax. This function is used as a building block for the main handler logic and does not impose restrictions on input string encoding but expects a string type.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef reverse_string(s):\n    return s[::-1]\n```\n\n----------------------------------------\n\nTITLE: Example: Providing Test Input via Command Line (Bash/Python)\nDESCRIPTION: This command executes a Python script (`hello_world.py`) with the local server API enabled and provides a test input payload directly as a JSON string using the `--test_input` argument. The input specifies a 'name' key with the value 'RunPod'.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython hello_world.py --rp_server_api --test_input '{\"input\": {\"name\": \"RunPod\"}}'\n```\n\n----------------------------------------\n\nTITLE: Obtaining SSH Connection Command from RunPod\nDESCRIPTION: Example SSH command provided by the RunPod console for connecting to a deployed Pod instance over an exposed TCP port. This command includes the username (root), host IP address, specific port number, and the path to the required SSH private key identity file. This command is copied and used to configure VSCode.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/connect-to-vscode.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\nssh root@123.456.789.80 -p 12345 -i ~/.ssh/id_ed12345\n```\n\n----------------------------------------\n\nTITLE: Enabling RunPod Debugger for Local Testing (Bash)\nDESCRIPTION: This example enables the RunPod debugger during local endpoint testing by providing the \\--rp_debugger flag. Facilitates step-through debugging sessions for detailed troubleshooting. Requires Python, handler file, RunPod SDK, and optionally other debugging tools as needed.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython your_function.py --rp_serve_api --rp_debugger\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Container Start Command - Bash\nDESCRIPTION: Demonstrates the default Docker start command using Bash for container initialization. This snippet runs the /start.sh script as part of the container’s entrypoint. Requires a standard Docker container environment with /start.sh script present. The command is passed to bash using the -c flag, allowing for customization by appending additional shell commands.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash -c '/start.sh'\n```\n\n----------------------------------------\n\nTITLE: Stable Diffusion Example Request\nDESCRIPTION: Example of generating an image using Stable Diffusion through the RunPod API. Demonstrates a practical use case with specific input parameters.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/custom-apis/_using-your-api-copy.md#2025-04-23_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://api.runpod.ai/v2/<your-api-id>/runsync \\\n-H 'Content-Type: application/json'                             \\\n-H 'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'    \\\n-d '{\"input\": {\"prompt\": \"a cute magical flying dog, fantasy art drawn by disney concept artists\"}}'\n```\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n\nrunpod.api_key = \"xxxxxxxxxxxxxxxxxxxxxx\"  # you can find this in settings\n\nendpoint = runpod.Endpoint(\"ENDPOINT_ID\")\n\nrun_request = endpoint.run_sync(\n    {\"prompt\": \"a cute magical flying dog, fantasy art drawn by disney concept artists\"}\n)\n\nprint(run_request)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for Banana-to-RunPod Quick Migration (Dockerfile)\nDESCRIPTION: This Dockerfile sets up a container environment for migrating a Banana project to RunPod quickly. It uses a multi-stage build, first referencing `runpod/banana:peel` to access standard Banana handler and start scripts, then building upon a user-specified base image (`repo/image:tag`). It installs the `runpod` Python library, copies the necessary `handler.py` and `start.sh` from the Banana environment, makes `start.sh` executable, and sets it as the default command. This allows running existing Banana code structures on RunPod with minimal modification, though migrating away from Banana dependencies is recommended long-term.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM runpod/banana:peel as bread\nFROM repo/image:tag\n\nRUN pip install runpod\n\nCOPY --from=bread /handler.py .\nCOPY --from=bread /start.sh .\n\nRUN chmod +x start.sh\nCMD [\"./start.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Custom Command with Directory Initialization - Bash\nDESCRIPTION: Provides an example of a one-liner Docker container start command to create /testdir1 and then execute /start.sh. This direct form is suitable for specifying as the container command or entrypoint and follows standard Bash command chaining.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbash -c 'mkdir /testdir1 && /start.sh'\n```\n\n----------------------------------------\n\nTITLE: Example: Customizing the API Server Configuration (Bash/Python)\nDESCRIPTION: This command executes a Python script (`hello_world.py`), starts the local API server on port 8080 with 4 concurrent workers, and makes it accessible on all network interfaces (0.0.0.0). This is useful for testing from other devices on the network.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython hello_world.py --rp_serve_api --rp_api_port 8080 --rp_api_concurrency 4 --rp_api_host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Input with `messages` for RunPod vLLM API (JSON)\nDESCRIPTION: This JSON object shows how to provide conversational input using the `messages` key. It requires a list of message objects, each containing a `role` (e.g., `system`, `user`, `assistant`) and `content`. The model's chat template is automatically applied, so the model must have one defined.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/vllm/get-started.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    { \"role\": \"system\", \"content\": \"You are a helpful assistant.\" },\n    { \"role\": \"user\", \"content\": \"Tell me a joke.\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod Environment with Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates the necessary adaptations for running an application on RunPod. It uses a specific RunPod base image (`runpod/base:0.4.0-cuda11.8.0`) tailored for the RunPod environment. The `CMD` instruction is updated to run the adapted handler script (`handler.py`) using Python 3.11.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/images.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM runpod/base:0.4.0-cuda11.8.0\n\nCMD python3.11 -u /handler.py\n```\n\n----------------------------------------\n\nTITLE: Initiating Stable Diffusion Job with RunPod API\nDESCRIPTION: Example of making a POST request to the Stable Diffusion v1 endpoint to start an image generation job. Requires API key authentication in the Authorization header.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/api-endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://api.runpod.ai/v2/stable-diffusion-v1/run \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' \\\n    -d '{\"input\": {\"prompt\": \"a cute magical flying dog, fantasy art drawn by disney concept artists\"}}'\n```\n\n----------------------------------------\n\nTITLE: Accessing Endpoint API URL Format\nDESCRIPTION: This URL format represents the unique API endpoint address generated after a Runpod Serverless endpoint is successfully deployed and active. Replace `{endpoint_id}` with the specific ID of your endpoint to send requests for processing. This URL is displayed on the endpoint details page once the endpoint is active.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/manage-endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.runpod.ai/v2/{endpoint_id}/\n```\n\n----------------------------------------\n\nTITLE: Available Options for runpodctl create pods Command\nDESCRIPTION: A comprehensive list of all available flags and options when creating pods, including container configuration, resource allocation, networking settings, and cloud environment selection.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_create_pods.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    --args string             container arguments\n    --communityCloud          create in community cloud\n    --containerDiskSize int   container disk size in GB (default 20)\n    --cost float32            $/hr price ceiling, if not defined, pod will be created with lowest price available\n    --env strings             container arguments\n    --gpuCount int            number of GPUs for the pod (default 1)\n    --gpuType string          gpu type id, e.g. 'NVIDIA GeForce RTX 3090'\n-h, --help                    help for pods\n    --imageName string        container image name\n    --mem int                 minimum system memory needed (default 20)\n    --name string             any pod name for easy reference\n    --podCount int            number of pods to create with the same name (default 1)\n    --ports strings           ports to expose; max only 1 http and 1 tcp allowed; e.g. '8888/http'\n    --secureCloud             create in secure cloud\n    --vcpu int                minimum vCPUs needed (default 1)\n    --volumePath string       container volume path (default \"/runpod\")\n    --volumeSize int          persistent volume disk size in GB (default 1)\n```\n\n----------------------------------------\n\nTITLE: Installing the RunPod Go SDK\nDESCRIPTION: This command uses `go get` to download and install the RunPod Go SDK package (`github.com/runpod/go-sdk`) into the current Go project's dependencies. It's the first step required to use the SDK.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/go/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\ngo get github.com/runpod/go-sdk\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for RunPod Local Testing (Bash)\nDESCRIPTION: This snippet shows the command-line argument syntax for setting the log verbosity level when running a RunPod function locally. It allows controlling the amount of information logged to the console during testing. Valid options are ERROR, WARN, INFO, and DEBUG.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--rp_log_level ERROR | WARN | INFO | DEBUG\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing the Cog Model Docker Image using Bash\nDESCRIPTION: Builds a Docker image for the Cog model using the `docker build` command, specifying the target platform (`linux/amd64`) and passing necessary model information (repository, name, version) as build arguments. After building, the `docker push` command uploads the tagged image to a specified container repository (e.g., DockerHub). Users need to replace placeholders like `<username>`, `<repo>`, `<tag>`, `user`, `model_name`, and `model_version` with their actual values.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/cog/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# replace user, model_name, and model_version with the appropriate values\ndocker build -platform=linux/amd64 --tag <username>/<repo>:<tag> --build-arg COG_REPO=user --build-arg COG_MODEL=model_name --build-arg COG_VERSION=model_version .\ndocker push <username>/<repo>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Generating Text with Ollama via HTTP API using cURL\nDESCRIPTION: Uses the cURL command to send a POST request to the Ollama API endpoint `/api/generate` hosted on the RunPod Pod. This request asks the specified model ('mistral' in this example) to generate text based on the provided prompt. The placeholder `{POD_ID}` must be replaced with the actual ID of the RunPod Pod. The request is routed through the RunPod proxy URL on the exposed port 11434.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/run-ollama.md#2025-04-23_snippet_5\n\nLANGUAGE: command\nCODE:\n```\ncurl -X POST https://{POD_ID}-11434.proxy.runpod.net/api/generate -d '{\n  \"model\": \"mistral\",\n  \"prompt\":\"Here is a story about llamas eating grass\"\n }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Policy in RunPod Request (JSON)\nDESCRIPTION: Shows how to add a 'policy' object to the JSON request body to customize job execution behavior. Options include setting a specific 'executionTimeout', marking the job as 'lowPriority' (won't trigger scaling), and defining a 'ttl' (time-to-live in the queue). Values are typically in milliseconds.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"prompt\": \"Your input here\"\n  },\n  \"policy\": {\n    \"executionTimeout\": 900000,  // 15 minutes in milliseconds\n    \"lowPriority\": false,\n    \"ttl\": 3600000  // 1 hour in milliseconds\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Modifying a RunPod Endpoint\nDESCRIPTION: Illustrates the expected JSON response after successfully modifying a RunPod serverless endpoint using the `saveEndpoint` mutation. The response confirms the update by returning the specified fields, including the modified `workersMax` value and the endpoint `id`.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"saveEndpoint\": {\n      \"id\": \"i02xupws21hp6i\",\n      \"gpuIds\": \"AMPERE_16\",\n      \"name\": \"Generated Endpoint -fb\",\n      \"templateId\": \"xkhgg72fuo\",\n      \"workersMax\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Overriding Docker Start Command (Shell)\nDESCRIPTION: Illustrates how to use the `dockerArgs` argument to override the default container start command. This example uses `sleep infinity` to keep the container running indefinitely. This argument expects a String.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsleep infinity\n```\n\n----------------------------------------\n\nTITLE: Configuring the RunPod CLI\nDESCRIPTION: This command initiates the configuration process for the RunPod command-line interface (CLI). It prompts the user to enter their RunPod API key, which is necessary for authenticating subsequent commands and interactions with the RunPod platform.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrunpod config\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on Windows using wget\nDESCRIPTION: Command to download the Windows executable version of runpodctl using wget.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/install-runpodctl.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/runpod/runpodctl/releases/download/v1.14.3/runpodctl-windows-amd64.exe -O runpodctl.exe\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for RunPod (Bash)\nDESCRIPTION: Builds a Docker image using the `Dockerfile` in the current directory. It specifically targets the `linux/amd64` platform required for RunPod Serverless and tags the image with a user-provided username and repository name (`[YOUR_USERNAME]/serverless-test`).\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --platform linux/amd64 --tag [YOUR_USERNAME]/serverless-test .\n```\n\n----------------------------------------\n\nTITLE: Defining is_even Handler Function with Python\nDESCRIPTION: Defines a function named is_even that accepts a job dictionary, extracts the input number, checks its type, and returns whether it is even. The function expects a job dictionary containing an 'input' key with a 'number' value. Returns a boolean or error dictionary. Ensure the function is registered as a handler for RunPod's serverless system.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/00_hello.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef is_even(job):\n    job_input = job[\"input\"]\n    the_number = job_input[\"number\"]\n\n    if not isinstance(the_number, int):\n        return {\"error\": \"Please provide an integer.\"}\n\n    return the_number % 2 == 0\n```\n\n----------------------------------------\n\nTITLE: Setting Job TTL via RunPod API Status Endpoint (URL)\nDESCRIPTION: Example URL demonstrating how to query the status of a specific RunPod job using the `/status` endpoint (API v2) while setting its Time-To-Live (TTL) to 6000 milliseconds (6 seconds) via a query parameter. This is useful for instructing the system to remove job results earlier than the default retention period. Requires replacing `{endpoint_id}` and `{job_id}` with actual values.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/endpoint-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.runpod.ai/v2/{endpoint_id}/status/{job_id}?ttl=6000\n```\n\n----------------------------------------\n\nTITLE: Modifying a RunPod Serverless Endpoint using GraphQL Mutation\nDESCRIPTION: Defines a GraphQL mutation (`saveEndpoint`) to modify an existing RunPod serverless endpoint. It requires the `id` of the endpoint to modify and includes the parameters to update, such as `workersMax`. Other required parameters like `gpuIds`, `name`, and `templateId` must also be provided, even if unchanged. The mutation specifies which fields to return after the update.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  saveEndpoint(input: {\n    id: \"i02xupws21hp6i\",\n    gpuIds: \"AMPERE_16\",\n    name: \"Generated Endpoint -fb\",\n    templateId: \"xkhgg72fuo\",\n    # Modify your template options here (or above, if applicable).\n    # For this example, we've modified the endpoint's max workers.\n    workersMax: 0\n  }) {\n    id\n    gpuIds\n    name\n    templateId\n    # You can include what you've changed here, too.\n    workersMax\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Entrypoint and Command for Docker Container - JSON\nDESCRIPTION: Specifies a Docker container command and entrypoint using JSON syntax. The entrypoint is set to [\"bash\", \"-c\"], and the command runs \"echo foo && /start.sh\". The configuration allows fine-tuned control over command execution on container startup. Requires Docker support for JSON-formatted entrypoint/cmd configuration and that /start.sh exists inside the container.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"cmd\": [\"echo foo && /start.sh\"], \"entrypoint\": [\"bash\", \"-c\"] }\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Images (Push, Pull, List, Remove)\nDESCRIPTION: Provides examples for common Docker image management tasks. `docker push` uploads a custom image to a registry, `docker pull` downloads an image, `docker images` lists locally available images, and `docker rmi` removes a specified image from the local machine.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/docker-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: command\nCODE:\n```\ndocker push myuser/myimage:v1   # Push custom image\ndocker pull someimage           # Pull shared image\ndocker images                   # List downloaded images\ndocker rmi <image>              # Remove/delete image\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on Linux\nDESCRIPTION: Downloads, makes executable, and installs the RunPod CLI tool on Linux systems.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget --quiet --show-progress https://github.com/Run-Pod/runpodctl/releases/download/v1.14.3/runpodctl-linux-amd64 -O runpodctl && chmod +x runpodctl && sudo cp runpodctl /usr/bin/runpodctl\n```\n\n----------------------------------------\n\nTITLE: Importing RunPod Library with Python\nDESCRIPTION: This snippet imports the RunPod library, which is required to use the serverless functionality provided by RunPod. The import is a prerequisite for defining and deploying any serverless function using their SDK. No parameters or configuration are required for this import step.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/00_hello.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport runpod\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Server Example\nDESCRIPTION: Command to start a uvicorn server listening on all interfaces on port 4000\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/configuration/expose-ports.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app --host 0.0.0.0 --port 4000\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod using RunPod CLI\nDESCRIPTION: Demonstrates how to create a Pod using the RunPod CLI. This command specifies various parameters such as name, GPU type, image, disk size, and custom arguments.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl create pods \\\n  --name hello-world \\\n  --gpuType \"NVIDIA A40\" \\\n  --imageName \"runpod/pytorch:3.10-2.0.0-117\" \\\n  --containerDiskSize 10 \\\n  --volumeSize 100 \\\n  --args \"bash -c 'mkdir /testdir1 && /start.sh'\"\n```\n\n----------------------------------------\n\nTITLE: Completed Job Status Response\nDESCRIPTION: Example of the final response format when a job is completed, including execution details and output URLs.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/api-endpoints.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"delayTime\": 123456,\n  \"executionTime\": 1234,\n  \"gpu\": \"24\",\n  \"id\": \"c80ffee4-f315-4e25-a146-0f3d98cf024b\",\n  \"input\": {\n    \"prompt\": \"a cute magical flying dog, fantasy art drawn by disney concept artists\"\n  },\n  \"output\": [\n    {\n      \"image\": \"https://job.results1\",\n      \"seed\": 1\n    },\n    {\n      \"image\": \"https://job.results2\",\n      \"seed\": 2\n    }\n  ],\n  \"status\": \"COMPLETED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for RunPod Worker Testing\nDESCRIPTION: This YAML snippet shows how to configure a GitHub Actions workflow step to automatically test a RunPod worker image using the 'runpod/runpod-test-runner' action. It requires specifying the image tag, a RunPod API key, an optional test definition file path, and an optional request timeout.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/workers/deploy.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: actions/checkout@v3\n- name: Run Tests\n  uses: runpod/runpod-test-runner@v1\n  with:\n    image-tag: [tag of image to test]\n    runpod-api-key: [a valid Runpod API key]\n    test-filename: [path for a json file containing a list of tests, defaults to .github/tests.json]\n    request-timeout: [number of seconds to wait on each request before timing out, defaults to 300]\n```\n\n----------------------------------------\n\nTITLE: Listing Pods using RunPod CLI\nDESCRIPTION: Demonstrates how to list all existing Pods using the RunPod CLI. This command provides an overview of all Pods associated with the account.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl get pod\n```\n\n----------------------------------------\n\nTITLE: Interacting with Deployed RunPod Endpoint\nDESCRIPTION: Sends a POST request to the deployed RunPod Serverless Endpoint to retrieve the IP address. This curl command includes authentication with an API key.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'https://api.runpod.ai/v2/${YOUR_ENDPOINT}/runsync' \\\n  -H 'accept: application/json' \\\n  -H  'authorization: ${YOUR_API_KEY}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"input\": {}\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining a SkyPilot Task Configuration for RunPod (YAML)\nDESCRIPTION: This YAML code defines a SkyPilot task configuration. It specifies `runpod` as the target cloud provider, sets the current directory as the `workdir` to be synced, includes placeholder `setup` commands, and defines `run` commands to print a message and list conda environments on the provisioned pod. This file is used by the `sky launch` command.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  cloud: runpod\n\n# Working directory (optional) containing the project codebase.\n# Its contents are synced to ~/sky_workdir/ on the cluster.\nworkdir: .\n\n# Setup commands (optional).\n# Typical use: pip install -r requirements.txt\n# Invoked under the workdir (i.e., can use its files).\nsetup: |\n  echo \"Running setup.\"\n\n# Run commands.\n# Typical use: make use of resources, such as running training.\n# Invoked under the workdir (i.e., can use its files).\nrun: |\n  echo \"Hello, SkyPilot!\"\n  conda env list\n```\n\n----------------------------------------\n\nTITLE: Starting a Pod with RunPodCTL Command Syntax\nDESCRIPTION: Basic syntax for the 'runpodctl create pod' command used to start a pod from runpod.io. This command requires additional flags to configure the pod's specifications.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_create_pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl create pod [flags]\n```\n\n----------------------------------------\n\nTITLE: In-Progress Job Status Response\nDESCRIPTION: Example response showing the status of a job that is still in progress, including delay time and input parameters.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/api-endpoints.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"delayTime\": 2624,\n  \"id\": \"c80ffee4-f315-4e25-a146-0f3d98cf024b\",\n  \"input\": {\n    \"prompt\": \"a cute magical flying dog, fantasy art drawn by disney concept artists\"\n  },\n  \"status\": \"IN_PROGRESS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Pod Details by ID\nDESCRIPTION: Command to retrieve the details of a specific Pod by its ID, which returns information similar to the list command but for a single Pod.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl get pod [POD_ID]\n```\n\n----------------------------------------\n\nTITLE: Available Options for RunPodCTL Create Pod Command\nDESCRIPTION: Comprehensive list of available options and flags for customizing pod creation, including GPU specifications, memory allocation, container settings, networking options, and storage configurations.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_create_pod.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    --args string             container arguments\n    --communityCloud          create in community cloud\n    --containerDiskSize int   container disk size in GB (default 20)\n    --cost float32            $/hr price ceiling, if not defined, pod will be created with lowest price available\n    --env strings             container arguments\n    --gpuCount int            number of GPUs for the pod (default 1)\n    --gpuType string          gpu type id, e.g. 'NVIDIA GeForce RTX 3090'\n-h, --help                    help for pod\n    --imageName string        container image name\n    --mem int                 minimum system memory needed (default 20)\n    --name string             any pod name for easy reference\n    --ports strings           ports to expose; max only 1 http and 1 tcp allowed; e.g. '8888/http'\n    --secureCloud             create in secure cloud\n    --templateId string       templateId to use with the pod\n    --vcpu int                minimum vCPUs needed (default 1)\n    --volumePath string       container volume path (default \"/runpod\")\n    --volumeSize int          persistent volume disk size in GB (default 1)\n    --networkVolumeId string  network volume id\n```\n\n----------------------------------------\n\nTITLE: Stopping a Pod using RunPod CLI\nDESCRIPTION: Shows how to stop a running Pod using the RunPod CLI. This command requires the Pod ID to be specified.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl stop pod $RUNPOD_POD_ID\n```\n\n----------------------------------------\n\nTITLE: Installing RunPod SDK (Bash)\nDESCRIPTION: Installs the RunPod Python SDK using pip within the activated virtual environment. The SDK is required for interacting with RunPod services, including starting the Serverless worker.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install runpod\n```\n\n----------------------------------------\n\nTITLE: Terminating a Single Pod using RunPod CLI\nDESCRIPTION: Demonstrates how to permanently terminate a single Pod using the RunPod CLI. This action deletes all data outside the network volume.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl remove pod $RUNPOD_POD_ID\n```\n\n----------------------------------------\n\nTITLE: Scheduling Pod Stop After Time Period (CLI)\nDESCRIPTION: Demonstrates how to schedule a Pod to stop after a specified time period (2 hours in this example) using the RunPod CLI.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsleep 2h; runpodctl stop pod $RUNPOD_POD_ID &\n```\n\n----------------------------------------\n\nTITLE: Preprocessing the Dataset for Axolotl Training (Python, Bash)\nDESCRIPTION: This command invokes Python's module interface to run Axolotl's CLI preprocessing script on the specified YAML config. Requires a preprocessed 'lora.yml' config and that the Axolotl repo is available in the working directory. The CUDA_VISIBLE_DEVICES variable is set to an empty string for CPU preprocessing (can be adjusted for GPU environments). Converts raw dataset into an Axolotl-compatible format.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nCUDA_VISIBLE_DEVICES=\"\"\npython -m axolotl.cli.preprocess examples/openllama-3b/lora.yml\n```\n\n----------------------------------------\n\nTITLE: Building RunPod Project Docker Image\nDESCRIPTION: Command to build a project into a Docker image, generating a Dockerfile that can be used to build and deploy to any API server.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project build\n```\n\n----------------------------------------\n\nTITLE: Initializing and Handling Requests with Potassium in Python (Banana Dev)\nDESCRIPTION: This Python code demonstrates a typical Banana Dev application using the `potassium` framework. It initializes a Diffusion model (`Meina/MeinaUnreal_V3`) using `diffusers` during startup (`@app.init`) and defines a handler (`@app.handler`) to process incoming requests, generate images based on prompts, and return the base64 encoded image. It relies on `potassium`, `diffusers`, `torch`, and `base64` libraries.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/images.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\nfrom potassium import Potassium, Request, Response\nfrom diffusers import DiffusionPipeline, DDPMScheduler\nimport torch\nimport base64\n\n# create a new Potassium app\napp = Potassium(\"my_app\")\n\n\n# @app.init runs at startup, and loads models into the app's context\n@app.init\ndef init():\n    repo_id = \"Meina/MeinaUnreal_V3\"\n\n    ddpm = DDPMScheduler.from_pretrained(repo_id, subfolder=\"scheduler\")\n\n    model = DiffusionPipeline.from_pretrained(\n        repo_id, use_safetensors=True, torch_dtype=torch.float16, scheduler=ddpm\n    ).to(\"cuda\")\n\n    context = {\n        \"model\": model,\n    }\n\n    return context\n\n\n# @app.handler runs for every call\n@app.handler()\ndef handler(context: dict, request: Request) -> Response:\n    model = context.get(\"model\")\n\n    prompt = request.json.get(\"prompt\")\n    negative_prompt = \"(worst quality, low quality:1.4), monochrome, zombie, (interlocked fingers), cleavage, nudity, naked, nude\"\n\n    image = model(\n        prompt=prompt,\n        negative_prompt=negative_prompt,\n        guidance_scale=7,\n        num_inference_steps=request.json.get(\"steps\", 30),\n        generator=(\n            torch.Generator(device=\"cuda\").manual_seed(request.json.get(\"seed\"))\n            if request.json.get(\"seed\")\n            else None\n        ),\n        width=512,\n        height=512,\n    ).images[0]\n\n    buffered = BytesIO()\n    image.save(buffered, format=\"JPEG\", quality=80)\n    img_str = base64.b64encode(buffered.getvalue())\n\n    return Response(json={\"output\": str(img_str, \"utf-8\")}, status=200)\n\n\nif __name__ == \"__main__\":\n    app.serve()\n```\n\n----------------------------------------\n\nTITLE: Enabling the RunPod Debugger (Bash/Python)\nDESCRIPTION: This command runs a Python script (`hello_world.py`) for local RunPod testing, enabling both the server API simulation and the RunPod debugger using the `--rp_debugger` flag. This helps in troubleshooting code issues.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/debugger.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython hello_world.py --rp_server_api --rp_debugger\n```\n\n----------------------------------------\n\nTITLE: Scheduling Pod Stop After Time Period (Web Terminal)\nDESCRIPTION: Shows how to schedule a Pod to stop after a specified time period (2 hours) using the RunPod web terminal. This method ensures the process continues even if the terminal window is closed.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnohup bash -c \"sleep 2h; runpodctl stop pod $RUNPOD_POD_ID\" &\n```\n\n----------------------------------------\n\nTITLE: Using RunPodCTL Send Command Syntax\nDESCRIPTION: Command syntax for sending files or folders using RunPodCTL. The command accepts filename(s) or folder paths as arguments and supports additional flags for configuration.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_send.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl send [filename(s) or folder] [flags]\n```\n\n----------------------------------------\n\nTITLE: Logging in to Hugging Face via CLI (Bash)\nDESCRIPTION: This command lets you authenticate your Hugging Face account using the CLI so you can create and upload models to your Hugging Face space. It will prompt for a token or login credentials. Required before subsequent repository or upload commands.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli login\n```\n\n----------------------------------------\n\nTITLE: RunPod CLI Usage and Available Commands\nDESCRIPTION: Displays the help output showing all available commands and usage options for the RunPod CLI tool.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nThe RunPod CLI tool to manage resources on runpod.io and develop serverless applications.\n\nUsage:\n  runpodctl [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  config      Manage CLI configuration\n  create      create a resource\n  exec        Execute commands in a pod\n  get         get resource\n  help        Help about any command\n  project     Manage RunPod projects\n  receive     receive file(s), or folder\n  remove      remove a resource\n  send        send file(s), or folder\n  ssh         SSH keys and commands\n  start       start a resource\n  stop        stop a resource\n  update      update runpodctl\n\nFlags:\n  -h, --help      help for runpodctl\n  -v, --version   Print the version of runpodctl\n\nUse \"runpodctl [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Setting Up SSH Daemon in RunPod\nDESCRIPTION: Bash command to install and configure an SSH server in a Docker container. This updates packages, installs the OpenSSH server, sets up the .ssh directory with proper permissions, adds the public key to authorized_keys, and starts the SSH service.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/configuration/use-ssh.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash -c 'apt update;DEBIAN_FRONTEND=noninteractive apt-get install openssh-server -y;mkdir -p ~/.ssh;cd $_;chmod 700 ~/.ssh;echo \"$PUBLIC_KEY\" >> authorized_keys;chmod 700 authorized_keys;service ssh start;sleep infinity'\n```\n\n----------------------------------------\n\nTITLE: Cloning RunPod Worker Template via GitHub CLI (Command)\nDESCRIPTION: This command utilizes the GitHub CLI (`gh`) to clone the official RunPod worker template repository (`runpod-workers/worker-template`) into the current directory. This provides a starting point for developing a RunPod worker. Requires GitHub CLI to be installed and authenticated.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: command\nCODE:\n```\ngh repo clone runpod-workers/worker-template\n```\n\n----------------------------------------\n\nTITLE: Example: Pulling a Docker Image by SHA Tag (Bash)\nDESCRIPTION: This Bash command provides a concrete example of pulling a Docker image named 'myapp' using its specific SHA256 hash. This ensures that the exact intended version of the image is retrieved.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/workers/deploy.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull myapp@sha256:4d3d4b3c5a5c2b3a5a5c3b2a5a4d2b3a2b3c5a3b2a5d2b3a3b4c3d3b5c3d4a3\n```\n\n----------------------------------------\n\nTITLE: Running Distributed Training with Torchrun\nDESCRIPTION: Executes a distributed training job using torchrun with static rendezvous backend to train a Llama-3 model across multiple nodes.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/axolotl.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntorchrun \\\n    --nnodes $NUM_NODES \\\n    --node_rank $NODE_RANK \\\n    --nproc_per_node $NUM_TRAINERS \\\n    --rdzv_id \"myjob\" \\\n    --rdzv_backend static \\\n    --rdzv_endpoint \"$PRIMARY_ADDR:$PRIMARY_PORT\" -m axolotl.cli.train lora-1b.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Template via RunPod GraphQL API using cURL\nDESCRIPTION: This snippet demonstrates how to create a new pod template using RunPod's GraphQL API. It shows how to set container disk size, environment variables, image name, ports, and volume configurations through a POST request.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/manage-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --header 'content-type: application/json' \\\n  --url 'https://api.runpod.io/graphql?api_key=${YOUR_API_KEY}' \\\n  --data '{\"query\": \"mutation { saveTemplate(input: { containerDiskInGb: 5, dockerArgs: \\\"sleep infinity\\\", env: [ { key: \\\"key1\\\", value: \\\"value1\\\" }, { key: \\\"key2\\\", value: \\\"value2\\\" } ], imageName: \\\"ubuntu:latest\\\", name: \\\"Generated Template\\\", ports: \\\"8888/http,22/tcp\\\", readme: \\\"## Hello, World!\\\", volumeInGb: 15, volumeMountPath: \\\"/workspace\\\" }) { containerDiskInGb dockerArgs env { key value } id imageName name ports readme volumeInGb volumeMountPath } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Python Script Locally for Testing\nDESCRIPTION: Executes the Python script locally to test the IP address retrieval functionality. This command simulates a job input for the serverless function.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 src/handler.py --test_input '{\"input\": {\"prompt\": \"\"}}'\n```\n\n----------------------------------------\n\nTITLE: RunPodCTL Get Cloud Command Options\nDESCRIPTION: Available flags and options for the 'get cloud' command to filter GPU listings. Options include filtering by community or secure cloud, minimum disk size, memory requirements, and vCPU count.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_get_cloud.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-c, --community   show listings from community cloud only\n    --disk int    minimum disk size in GB you need\n-h, --help        help for cloud\n    --mem int     minimum sys memory size in GB you need\n-s, --secure      show listings from secure cloud only\n    --vcpu int    minimum vCPUs you need\n```\n\n----------------------------------------\n\nTITLE: Listing Local Ollama Models via HTTP API using cURL\nDESCRIPTION: Uses the cURL command to send a GET request to the Ollama API endpoint `/api/tags` hosted on the RunPod Pod. This retrieves a list of locally available models. The placeholder `{POD_ID}` must be replaced with the actual ID of the RunPod Pod. The request is routed through the RunPod proxy URL.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/run-ollama.md#2025-04-23_snippet_3\n\nLANGUAGE: command\nCODE:\n```\ncurl https://{POD_ID}-11434.proxy.runpod.net/api/tags\n# curl https://cmko4ns22b84xo-11434.proxy.runpod.net/api/tags\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image via Bazel Command - Shell Command\nDESCRIPTION: This command runs Bazel to execute the 'push_custom_image' target, resulting in building the configured Docker image and pushing it to Docker Hub. It requires the BUILD.bazel file to be properly configured (with repository and image details). Output is the presence of the Docker image in the specified Docker Hub repository.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_7\n\nLANGUAGE: command\nCODE:\n```\nbazel run //:push_custom_image\n```\n\n----------------------------------------\n\nTITLE: RunPod Proxy URL Format\nDESCRIPTION: URL format for accessing a pod through RunPod's proxy system, where POD_ID is the unique identifier and INTERNAL_PORT is the exposed container port\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/configuration/expose-ports.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://{POD_ID}-{INTERNAL_PORT}.proxy.runpod.net\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Creating a RunPod Endpoint\nDESCRIPTION: Shows the expected JSON response structure after successfully executing the `saveEndpoint` mutation to create a RunPod serverless endpoint. The response includes the details of the newly created endpoint, such as its `id`, `gpuIds`, `name`, `templateId`, and other configuration settings.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"saveEndpoint\": {\n      \"gpuIds\": \"AMPERE_16\",\n      \"id\": \"i02xupws21hp6i\",\n      \"idleTimeout\": 5,\n      \"locations\": \"US\",\n      \"name\": \"Generated Endpoint -fb\",\n      \"scalerType\": \"QUEUE_DELAY\",\n      \"scalerValue\": 4,\n      \"templateId\": \"xkhgg72fuo\",\n      \"workersMax\": 3,\n      \"workersMin\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Cog-Worker Repository using Bash\nDESCRIPTION: Clones the `cog-worker` repository from GitHub, which contains essential scripts and configuration files needed for the migration process, and then navigates into the newly cloned directory. This step is a prerequisite for preparing the Cog model environment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/cog/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/runpod-workers/cog-worker.git\ncd cog-worker/\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key in runpodctl\nDESCRIPTION: Command to configure runpodctl with an API key for authentication. Replace [API_KEY] with your actual API key.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/install-runpodctl.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl config --apiKey [API_KEY]\n```\n\n----------------------------------------\n\nTITLE: Launching Distributed PyTorch Process\nDESCRIPTION: Bash command to start the PyTorch process on each Pod, setting up environment variables and launching multiple processes per node.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/pytorch.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport NCCL_DEBUG=WARN\ntorchrun \\\n  --nproc_per_node=$NUM_TRAINERS \\\n  --nnodes=$NUM_NODES \\\n  --node_rank=$NODE_RANK \\\n  --master_addr=$MASTER_ADDR \\\n  --master_port=$MASTER_PORT \\\ntorch-demo/main.py\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Listing Ollama Models\nDESCRIPTION: Shows an example JSON response received from the Ollama API endpoint `/api/tags`. The response contains an array of model objects, each detailing the model's name, modification time, size, digest, and other metadata like format, family, parameter size, and quantization level.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/run-ollama.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"models\": [\n    {\n      \"name\": \"mistral:latest\",\n      \"model\": \"mistral:latest\",\n      \"modified_at\": \"2024-02-16T18:22:39.948000568Z\",\n      \"size\": 4109865159,\n      \"digest\": \"61e88e884507ba5e06c49b40e6226884b2a16e872382c2b44a42f2d119d804a5\",\n      \"details\": {\n        \"parent_model\": \"\",\n        \"format\": \"gguf\",\n        \"family\": \"llama\",\n        \"families\": [\n          \"llama\"\n        ],\n        \"parameter_size\": \"7B\",\n        \"quantization_level\": \"Q4_0\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Directory with SCP in Shell\nDESCRIPTION: Command to recursively send a directory to a RunPod pod using SCP with the -r flag.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/storage/transfer-files.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nscp -r -P 43201 -i ~/.ssh/id_ed25519 ~/documents/example_dir root@194.26.196.6:/root/example_dir\n```\n\n----------------------------------------\n\nTITLE: Sending File with SCP in Shell\nDESCRIPTION: General syntax for sending a file to a RunPod pod using SCP. Requires specifying the external TCP port, SSH key, local file path, pod's IP address, and destination path.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/storage/transfer-files.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscp -P 43201 -i ~/.ssh/id_ed25519 /local/file/path root@194.26.196.6:/destination/file/path\n```\n\n----------------------------------------\n\nTITLE: Deleting a RunPod Serverless Endpoint using cURL\nDESCRIPTION: Sends a POST request via cURL to the RunPod GraphQL API to delete a specific serverless endpoint. Requires replacing `${YOUR_API_KEY}` and providing the endpoint `id` in the GraphQL mutation (`deleteEndpoint`). Note: The endpoint's minimum and maximum workers must be set to zero before deletion.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n\t--header 'content-type: application/json' \\\n  --url 'https://api.runpod.io/graphql?api_key=${YOUR_API_KEY}' \\\n  --data '{\"query\": \"mutation { deleteEndpoint(id: \\\"i02xupws21hp6i\\\") }\"}'\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Containers (Run, List, Logs, Stop, Remove)\nDESCRIPTION: Demonstrates basic Docker container lifecycle commands. `docker run` starts a new container from an image, `docker ps` lists currently running containers, `docker logs` displays the standard output/error streams of a container, `docker stop` halts a running container, and `docker rm` permanently removes a container.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/docker-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: command\nCODE:\n```\ndocker run        # Start new container from image\ndocker ps         # List running containers\ndocker logs       # Print logs from container\ndocker stop       # Stop running container\ndocker rm         # Remove/delete container\n```\n\n----------------------------------------\n\nTITLE: Terminating a Pod by Name\nDESCRIPTION: Alternative command to terminate a Pod using its name instead of ID.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl remove pods [POD_NAME]\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Usage with df Command\nDESCRIPTION: Displays a summary of disk usage across all mounted filesystems using the df -h command.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/references/troubleshooting/storage-full.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Ollama Server in Bash\nDESCRIPTION: Downloads the Ollama installation script using curl, executes it using sh, and then starts the Ollama server in the background. The server's output (stdout and stderr) is redirected to a file named 'ollama.log'. This command is run in the RunPod web terminal after prerequisite packages are installed.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/run-ollama.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(curl -fsSL https://ollama.com/install.sh | sh && ollama serve > ollama.log 2>&1) &\n```\n\n----------------------------------------\n\nTITLE: Example Output of Stopping a Pod\nDESCRIPTION: Sample output when successfully stopping a Pod, confirming the action with the Pod's ID.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npod \"gq9xijdra9hwyd\" stopped\n```\n\n----------------------------------------\n\nTITLE: Sending File with runpodctl in Bash\nDESCRIPTION: Command to send a file named 'data.txt' using runpodctl. It generates a one-time code for secure transfer.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/storage/transfer-files.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl send data.txt\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Deleting a RunPod Endpoint\nDESCRIPTION: Illustrates the expected JSON response after successfully deleting a RunPod serverless endpoint using the `deleteEndpoint` mutation. A successful deletion typically returns `null` for the `deleteEndpoint` field within the `data` object.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"deleteEndpoint\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Command Help (Command Line)\nDESCRIPTION: This command invokes the built-in help system for the Docker CLI. Using the `--help` flag displays usage information, available subcommands, and options for the main `docker` command, aiding in understanding its functionality.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/containers.md#2025-04-23_snippet_2\n\nLANGUAGE: command\nCODE:\n```\ndocker --help\n```\n\n----------------------------------------\n\nTITLE: Querying Cloud GPUs with RunPodCTL\nDESCRIPTION: Command syntax for retrieving information about available cloud GPUs on RunPod.io. The command allows specifying a GPU count as an optional parameter.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_get_cloud.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl get cloud [gpuCount] [flags]\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Registry (Bash)\nDESCRIPTION: Pushes the previously built and tagged Docker image (`yourusername/serverless-test:latest`) to a container registry (like Docker Hub). This makes the image accessible for deployment on RunPod.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker push yourusername/serverless-test:latest\n```\n\n----------------------------------------\n\nTITLE: Calculating RunPod Host Reliability with Buffer\nDESCRIPTION: Formula used to calculate host reliability on RunPod. It incorporates total uptime minutes, any downtime, and a small buffer (10 minutes) over a 30-day rolling window. The target reliability is 99.99%, and hosts with less than 98% reliability are automatically removed from the available GPU pool.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/hosting/maintenance-and-reliability.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n( total minutes + small buffer ) / total minutes in interval\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pod Information with runpodctl\nDESCRIPTION: Command syntax for retrieving information about pods using runpodctl. The command can be used to get all pods or details for a specific pod by providing the podId parameter.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_get_pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl get pod [podId] [flags]\n```\n\n----------------------------------------\n\nTITLE: Launching a SkyPilot Task on RunPod\nDESCRIPTION: This command instructs SkyPilot to launch the job defined in the `hello_sky.yaml` configuration file. The `-c mycluster` flag assigns the name 'mycluster' to the cluster being created or reused on the RunPod cloud (as specified in the YAML). SkyPilot handles the provisioning of resources and execution of the defined setup and run commands.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsky launch -c mycluster hello_sky.yaml\n```\n\n----------------------------------------\n\nTITLE: Building a RunPod Project into a Dockerfile\nDESCRIPTION: The command to build your RunPod project into a Dockerfile instead of deploying it as an endpoint. The generated Dockerfile can be used to build an image for deployment to any API server.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/manage-projects.md#2025-04-23_snippet_3\n\nLANGUAGE: command\nCODE:\n```\nrunpodctl project build\n```\n\n----------------------------------------\n\nTITLE: Running AI Models with Ollama CLI in Bash\nDESCRIPTION: Demonstrates how to run an AI model using the Ollama command-line interface. The `ollama run` command is followed by the name of the model to download and run (e.g., llama2, mistral). Replace `[model name]` with the desired model from the Ollama Library. This command is executed in the RunPod web terminal after the Ollama server is running.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/run-ollama.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nollama run [model name]\n# ollama run llama2\n# ollama run mistral\n```\n\n----------------------------------------\n\nTITLE: Stopping a Pod\nDESCRIPTION: Command to stop a running Pod. Note that stopped Pods still incur charges while idle, as mentioned in the warning in the documentation.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl stop pod [POD_ID]\n```\n\n----------------------------------------\n\nTITLE: Checking Workspace Directory Size\nDESCRIPTION: Example of checking the total size of the workspace directory using du command.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/references/troubleshooting/storage-full.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nroot@9b8e325167b2:/# cd workspace/\nroot@9b8e325167b2:/workspace# du -sh .\n194M    .\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod CLI with API Key\nDESCRIPTION: Sets the API key in the RunPod CLI configuration file. This step is necessary for authenticating with the RunPod platform.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl config --apiKey $(RUNPOD_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on MacOS AMD architecture\nDESCRIPTION: Downloads, makes executable, and installs the RunPod CLI tool on MacOS systems with AMD/Intel architecture.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget --quiet --show-progress https://github.com/runpod/runpodctl/releases/download/v1.14.3/runpodctl-darwin-amd64 -O runpodctl && chmod +x runpodctl && sudo mv runpodctl /usr/local/bin/runpodctl\n```\n\n----------------------------------------\n\nTITLE: RunPod Pod Removal Command Syntax\nDESCRIPTION: Command syntax for removing a pod from runpod.io using runpodctl. Requires a podId parameter and supports optional flags.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_remove_pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl remove pod [podId] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod CLI with API Key\nDESCRIPTION: Sets up the RunPod CLI by configuring the API key for authentication. This step is necessary before using the CLI to manage Pods.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl config --apiKey $RUNPOD_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining Banana Dev Application Environment with Dockerfile\nDESCRIPTION: This Dockerfile snippet shows a typical configuration for a Banana Dev application. It specifies a PyTorch base image with CUDA 11.3 and CuDNN 8 runtime support. The `CMD` instruction defines the default command to execute the Python application script (`app.py`) when the container starts.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/images.md#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM pytorch/pytorch:1.11.0-cuda11.3-cudnn8-runtime\n...\nCMD python3 -u app.py\n```\n\n----------------------------------------\n\nTITLE: Deleting a RunPod Serverless Endpoint using GraphQL Mutation\nDESCRIPTION: Defines a GraphQL mutation (`deleteEndpoint`) to remove a RunPod serverless endpoint, identified by its `id`. A prerequisite for successful deletion is that the endpoint's minimum and maximum worker counts must both be zero.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  deleteEndpoint(id: \"i02xupws21hp6i\")\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Pods with runpodctl\nDESCRIPTION: Command to list all Pods associated with your RunPod account, displaying their ID, name, GPU type, image name, and current status.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl get pod\n```\n\n----------------------------------------\n\nTITLE: Deploying RunPod Project\nDESCRIPTION: Deploys the RunPod project to the platform, making it available as a Serverless Endpoint. This command packages and uploads the code to RunPod.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project deploy\n```\n\n----------------------------------------\n\nTITLE: Receiving Files with runpodctl CLI\nDESCRIPTION: Command syntax for receiving files or folders from a pod or computer using runpodctl. The command requires a code parameter and supports help flag for additional information.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_receive.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl receive [code] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for receive\n```\n\n----------------------------------------\n\nTITLE: Removing Pods with runpodctl - Command Line - Shell\nDESCRIPTION: This shell snippet shows the syntax for using the 'runpodctl remove pods' command to delete all pods with a specified name from runpod.io. It requires runpodctl to be installed and available in the system path. The '[name]' parameter specifies the pod name, while '[flags]' can be used to pass additional options such as '--podCount' to control the number of pods removed. The command outputs status and error messages to the CLI; it expects valid authentication and network connectivity to runpod.io.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_remove_pods.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrunpodctl remove pods [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod CLI with API Key\nDESCRIPTION: Command to configure RunPod CLI with your API key, which is required to authenticate and access RunPod resources from your local machine.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl config --apiKey [API_KEY]\n```\n\n----------------------------------------\n\nTITLE: Defining an Entrypoint Script to Write Date (Shell)\nDESCRIPTION: This shell script ('entrypoint.sh') is designed to be the entrypoint for the Docker container defined previously. It executes the 'date' command and redirects its output to the '/data/current_date.txt' file within the container's filesystem.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/persist-data.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n#!/bin/sh\ndate > /data/current_date.txt\n```\n\n----------------------------------------\n\nTITLE: Removing Files and Directories\nDESCRIPTION: Commands for removing individual files and directories to free up storage space.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/references/troubleshooting/storage-full.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# To delete a specific file, use the rm command:\nrm /path/to/file\n\n# To remove an entire directory and its contents, use the rm -r command:\nrm -r /path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Deploying RunPod Project\nDESCRIPTION: Command to deploy a project as a Serverless endpoint, making it accessible over the internet for interaction like any other Serverless endpoint.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project deploy\n```\n\n----------------------------------------\n\nTITLE: RunPod CLI Config Command Options\nDESCRIPTION: This snippet shows the available options for the 'runpodctl config' command. It includes flags for setting the API key, API URL, and displaying help information.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_config.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    --apiKey string   RunPod API key\n    --apiUrl string   RunPod API URL (default \"https://api.runpod.io/graphql\")\n-h, --help            help for config\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for RunPod\nDESCRIPTION: Command to generate an ed25519 SSH key pair on your local machine. This creates both public and private keys that will be stored in your .ssh directory.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/configuration/use-ssh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Starting RunPod Development Session\nDESCRIPTION: Command to initiate a development session that establishes an active connection between local environment and the project environment on the Pod, enabling real-time updates.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project dev\n```\n\n----------------------------------------\n\nTITLE: Verifying SkyPilot Configuration\nDESCRIPTION: This command executes SkyPilot's built-in verification tool. It checks if the SkyPilot installation is correct and confirms that cloud provider credentials (including those for RunPod, if set up) are configured properly and accessible.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsky check\n```\n\n----------------------------------------\n\nTITLE: Installing RunPod SDK with npm or yarn - Command Line\nDESCRIPTION: Demonstrates how to add the RunPod SDK package to a JavaScript project using either npm or yarn. These commands download the SDK and update the project dependencies accordingly. No additional parameters are required; simply execute in your project root. Ensures the SDK is available for importing within your application code.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/javascript/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\nnpm install --save runpod-sdk\n# or\nyarn add runpod-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on Linux using wget\nDESCRIPTION: Command to download and install runpodctl globally on Linux systems using wget and bash.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/install-runpodctl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO- cli.runpod.net | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Example Output of Terminating a Pod\nDESCRIPTION: Sample output when successfully terminating a Pod, confirming the removal with the Pod's ID.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npod \"wu5ekmn69oh1xr\" removed\n```\n\n----------------------------------------\n\nTITLE: Creating a New RunPod Project\nDESCRIPTION: Uses the RunPod CLI to create a new project directory and files. This command initializes a new project based on a template.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project create\n```\n\n----------------------------------------\n\nTITLE: Verifying Mods Setup with RunPod API in Bash\nDESCRIPTION: This Bash command demonstrates how to use Mods with RunPod. It lists files in the Downloads directory, passes them to Mods using the RunPod API and specified model, and formats the response as a fortune based on the files.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/mods/mods.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls ~/Downloads | mods --api runpod --model openchat -f \"tell my fortune based on these files\" | glow\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl in Google Colab\nDESCRIPTION: Downloads, makes executable, and installs the RunPod CLI tool in a Google Colab environment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n!wget --quiet --show-progress https://github.com/Run-Pod/runpodctl/releases/download/v1.14.3/runpodctl-linux-amd -O runpodctl\n!chmod +x runpodctl\n!cp runpodctl /usr/bin/runpodctl\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode SSH Host Entry\nDESCRIPTION: Example configuration block added to the local `~/.ssh/config` file, typically managed via VSCode's Remote-SSH extension. It defines a host alias (`your_pod_instance`) and specifies the connection parameters extracted from the RunPod SSH command: the Pod's IP address (`HostName`), the user (`User`), the connection port (`Port`), and the path to the SSH key (`IdentityFile`).\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/connect-to-vscode.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHost your_pod_instance\n    HostName 123.456.789.80\n    User root\n    Port 12345\n    IdentityFile ~/.ssh/id_ed12345\n```\n\n----------------------------------------\n\nTITLE: Connecting to RunPod Pod via SSH (Bash)\nDESCRIPTION: This code snippet shows two SSH command variations for connecting to a RunPod Pod. The first command is for basic SSH access, while the second supports SCP and SFTP. Users need to replace placeholders with their specific Pod details.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/connect-to-a-pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# No support for SCP & SFTP\nssh <username>@<pod-ssh-hostname> -i <path-to-ssh-key>\n\n# Supports SCP & SFTP\nssh <username>@<pod-ip-address> -p <ssh-port> -i <path-to-ssh-key>\n```\n\n----------------------------------------\n\nTITLE: Disk Usage Output Example\nDESCRIPTION: Example output showing disk usage across various mounted filesystems including overlay, tmpfs, and other system partitions.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/references/troubleshooting/storage-full.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nroot@9b8e325167b2:/# df -h\nFilesystem                    Size  Used Avail Use% Mounted on\noverlay                        20G   16M   20G   1% /\ntmpfs                          64M     0   64M   0% /dev\ntmpfs                         252G     0  252G   0% /sys/fs/cgroup\nshm                            24G     0   24G   0% /dev/shm\n/dev/sda2                     457G   12G  423G   3% /usr/bin/nvidia-smi\ntmpfs                         252G   12K  252G   1% /proc/driver/nvidia\ntmpfs                         252G  4.0K  252G   1% /etc/nvidia/nvidia-application-profiles-rc.d\ntmpfs                          51G  4.4M   51G   1% /run/nvidia-persistenced/socket\ntmpfs                         252G     0  252G   0% /proc/asound\ntmpfs                         252G     0  252G   0% /proc/acpi\ntmpfs                         252G     0  252G   0% /proc/scsi\ntmpfs                         252G     0  252G   0% /sys/firmware\ntmpfs                         252G     0  252G   0% /sys/devices/virtual/powercap\n```\n\n----------------------------------------\n\nTITLE: Example Output of Getting Pod Details\nDESCRIPTION: Sample output from getting details for a specific Pod, showing its ID, name, GPU type, container image, and current status.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nID            \tNAME \tGPU        \tIMAGE NAME                                              \tSTATUS  \ngq9xijdra9hwyd\tPod2\t1 L4       \trunpod/pytorch:2.1.0-py3.10-cuda11.8.0-devel-ubuntu22.04\tRUNNING\n```\n\n----------------------------------------\n\nTITLE: Starting Axolotl Training\nDESCRIPTION: Command to initiate the fine-tuning process using Axolotl with a specified configuration file.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/fine-tune/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naxolotl train config.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl in Jupyter Notebook\nDESCRIPTION: Downloads, makes executable, and installs the RunPod CLI tool in a Jupyter Notebook environment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n!wget --quiet --show-progress https://github.com/Run-Pod/runpodctl/releases/download/v1.14.3/runpodctl-linux-amd -O runpodctl\n!chmod +x runpodctl\n!cp runpodctl /usr/bin/runpodctl\n```\n\n----------------------------------------\n\nTITLE: Finding Largest Files in Workspace\nDESCRIPTION: Command to identify the top 10 largest files in the workspace directory, sorted by size.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/references/troubleshooting/storage-full.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nroot@9b8e325167b2:/# find /workspace -type f -exec du -h {} + | sort -rh | head -n 10\n96M     /workspace/f.txt\n96M     /workspace/e.txt\n1.0K    /workspace/c.txt\n512     /workspace/b.txt\n512     /workspace/a.txt\n```\n\n----------------------------------------\n\nTITLE: Installing RunPod CLI on macOS using Homebrew\nDESCRIPTION: Command to install RunPod CLI on macOS systems using the Homebrew package manager.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install runpod/runpodctl/runpodctl\n```\n\n----------------------------------------\n\nTITLE: SSH Connecting to a RunPod Pod (Bash)\nDESCRIPTION: This Bash command demonstrates how to securely connect to a deployed RunPod Pod via SSH. Requires that a Pod has been initialized and a valid user, pod IP address, SSH port, and SSH key path are provided. Inputs required: <username>, <pod-ip-address>, <ssh-port>, and <path-to-ssh-key>. The connection enables further remote environment configuration and training.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh <username>@<pod-ip-address> -p <ssh-port> -i <path-to-ssh-key>  string\n```\n\n----------------------------------------\n\nTITLE: Example Output of Listing All Pods\nDESCRIPTION: Sample output from the list Pods command showing three different Pods with their details including ID, name, GPU type, container image, and status.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nID            \tNAME \tGPU        \tIMAGE NAME                                              \tSTATUS  \nwu5ekmn69oh1xr\tPod1\t1 RTX A5000\trunpod/stable-diffusion:web-ui-10.2.1                   \tEXITED \t\ngq9xijdra9hwyd\tPod2\t1 L4       \trunpod/pytorch:2.1.0-py3.10-cuda11.8.0-devel-ubuntu22.04\tRUNNING\t\nkyvwslyyjtf97w\tPod3\t1 RTX A4500\trunpod/stable-diffusion:web-ui-10.2.1                   \tRUNNING\n```\n\n----------------------------------------\n\nTITLE: Running GPU Burn Test with Docker\nDESCRIPTION: This command executes a GPU burn test using Docker for 172800 seconds (48 hours). It uses the jorghi21/gpu-burn-test image and runs on all available GPUs to thoroughly test their performance and stability.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/hosting/burn-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: command\nCODE:\n```\ndocker run --gpus all --rm jorghi21/gpu-burn-test 172800\n```\n\n----------------------------------------\n\nTITLE: Installing Docker via Convenience Script - Shell Command\nDESCRIPTION: This command downloads and executes the official Docker installation script to install Docker in the container. It requires curl and sudo to be installed and network access to get the script. Processes include file download and running as a superuser. No special inputs are needed. After execution, the system will have Docker installed.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_2\n\nLANGUAGE: command\nCODE:\n```\ncurl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Sending File with rsync Options in Shell\nDESCRIPTION: Example of sending a file to a RunPod pod using rsync with archive mode, compression, and verbose output options.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/storage/transfer-files.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrsync -avz -e \"ssh -p 43201\" ~/documents/example.txt root@194.26.196.6:/root/example.txt\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on macOS using Homebrew\nDESCRIPTION: Command to install runpodctl globally on macOS using the Homebrew package manager.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/install-runpodctl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install runpod/runpodctl/runpodctl\n```\n\n----------------------------------------\n\nTITLE: Symmetrical Port Environment Variables\nDESCRIPTION: Environment variables showing symmetrical port mappings available inside the pod\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/configuration/expose-ports.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRUNPOD_TCP_PORT_70001=10031\nRUNPOD_TCP_PORT_70000=10030\n```\n\n----------------------------------------\n\nTITLE: Managing Go Project Dependencies\nDESCRIPTION: This command uses `go mod tidy` to add missing and remove unused modules specified in the `go.mod` file. It ensures all necessary dependencies for the project, including the newly added RunPod SDK, are correctly managed and available.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/go/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: command\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Uploading a Model to Hugging Face Repository via CLI (Bash)\nDESCRIPTION: Demonstrates how to upload the merged model files from local storage to your newly created model repository on Hugging Face using the CLI. Requires the repository exists and user is authenticated. Input: repository name and path to the model files; output: files available for sharing on Hugging Face.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli upload your_model_name path_to_your_model\n```\n\n----------------------------------------\n\nTITLE: Logging Into Docker Hub - Shell Command\nDESCRIPTION: This command initiates a Docker login session by prompting the user for their Docker Hub username and access token (used as the password). It depends on Docker already being installed and requires valid credentials. The command enables future authenticated Docker commands within the session.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_3\n\nLANGUAGE: command\nCODE:\n```\ndocker login -u <your-username>\n```\n\n----------------------------------------\n\nTITLE: Sending Directory Contents with rsync in Shell\nDESCRIPTION: Command to transfer the contents of a directory to a RunPod pod using rsync with a trailing slash in the file path.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/storage/transfer-files.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrsync -avz -e \"ssh -p 43201\" ~/documents/example_dir/ root@194.26.196.6:/root/example_dir/\n```\n\n----------------------------------------\n\nTITLE: Installing RunPod Python SDK (Command)\nDESCRIPTION: This command uses pip, the Python package installer, to download and install the `runpod` library. This SDK is necessary for interacting with RunPod services programmatically within a Python project. It should typically be run after activating a virtual environment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: command\nCODE:\n```\npython -m pip install runpod\n```\n\n----------------------------------------\n\nTITLE: Creating New RunPod Project\nDESCRIPTION: Command to create a new RunPod project. After execution, users will be prompted to select a starter project that includes pre-configured settings for different environment types.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project create\n```\n\n----------------------------------------\n\nTITLE: RunPodCTL Send Command Options\nDESCRIPTION: Available options for the send command, including the codephrase flag for connection and help flag for command assistance.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_send.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    --code string   codephrase used to connect\n-h, --help          help for send\n```\n\n----------------------------------------\n\nTITLE: Example: Naming the Container Instance\nDESCRIPTION: Shows an example value for the `name` argument, assigning the name \"my-app-container\" to the container instance. This argument requires a unique String.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/configurations.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"my-app-container\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific RunPod CLI Command\nDESCRIPTION: Command format to display detailed help information about a specific RunPod CLI command, showing its usage, options, and examples.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl [command] help\n```\n\n----------------------------------------\n\nTITLE: Installing Bazel with Bazelisk Version Manager - Shell Command\nDESCRIPTION: These shell commands download the Bazelisk binary, make it executable, and install it as 'bazel' in the system path. They require wget, chmod, and sudo privileges. Upon completion, Bazel (managed by Bazelisk) becomes available system-wide. Input 'bazel' runs the Bazel build tool, which is required for building Docker images.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_4\n\nLANGUAGE: command\nCODE:\n```\nwget https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64\nchmod +x bazelisk-linux-amd64  \nsudo cp ./bazelisk-linux-amd64 /usr/local/bin/bazel\n```\n\n----------------------------------------\n\nTITLE: Listing Serverless CPU Specifications in Markdown\nDESCRIPTION: This Markdown table lists the available CPU types for RunPod serverless instances. It includes columns for the CPU's display name (`displayName`), the number of physical cores (`cores`), and the number of threads per core (`threadsPerCore`). The table is preceded by an HTML comment indicating the last generation date.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/references/cpu-types.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Serverless CPU types\n---\n\nThe following list contains all CPU types available on RunPod.\n\n<!--\nTable last generated: 2025-04-02\n-->\n\n| displayName                                     | cores | threadsPerCore |\n| :---------------------------------------------- | ----: | -------------: |\n| 11th Gen Intel(R) Core(TM) i5-11400 @ 2.60GHz   |     6 |              2 |\n| 11th Gen Intel(R) Core(TM) i5-11400F @ 2.60GHz  |     6 |              2 |\n| 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz  |     2 |              1 |\n| 11th Gen Intel(R) Core(TM) i7-11700 @ 2.50GHz   |     8 |              2 |\n| 11th Gen Intel(R) Core(TM) i7-11700F @ 2.50GHz  |     8 |              2 |\n| 11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz  |     8 |              2 |\n| 11th Gen Intel(R) Core(TM) i7-11700KF @ 3.60GHz |     8 |              2 |\n| 11th Gen Intel(R) Core(TM) i9-11900K @ 3.50GHz  |     8 |              2 |\n| 11th Gen Intel(R) Core(TM) i9-11900KF @ 3.50GHz |     8 |              2 |\n| 12th Gen Intel(R) Core(TM) i3-12100             |     4 |              2 |\n| 12th Gen Intel(R) Core(TM) i7-12700F            |    12 |              1 |\n| 12th Gen Intel(R) Core(TM) i7-12700K            |    12 |              1 |\n| 13th Gen Intel(R) Core(TM) i3-13100F            |     4 |              2 |\n| 13th Gen Intel(R) Core(TM) i5-13600K            |    14 |              1 |\n| 13th Gen Intel(R) Core(TM) i7-13700K            |    16 |              1 |\n| 13th Gen Intel(R) Core(TM) i7-13700KF           |    16 |              1 |\n| 13th Gen Intel(R) Core(TM) i9-13900F            |    24 |              1 |\n| 13th Gen Intel(R) Core(TM) i9-13900K            |    24 |              1 |\n| 13th Gen Intel(R) Core(TM) i9-13900KF           |    24 |              1 |\n| AMD EPYC 4564P 16-Core Processor                |    16 |              2 |\n| AMD EPYC 7251 8-Core Processor                  |     8 |              2 |\n| AMD EPYC 7252 8-Core Processor                  |     8 |              2 |\n| AMD EPYC 7272 12-Core Processor                 |    12 |              2 |\n| AMD EPYC 7281 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 7282 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 7302 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 7302P 16-Core Processor                |    16 |              2 |\n| AMD EPYC 7313 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 7313P 16-Core Processor                |    16 |              2 |\n| AMD EPYC 7343 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 7351P 16-Core Processor                |    16 |              2 |\n| AMD EPYC 7352 24-Core Processor                 |    24 |              2 |\n| AMD EPYC 7371 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 7402 24-Core Processor                 |    24 |              2 |\n| AMD EPYC 7402P 24-Core Processor                |    24 |              2 |\n| AMD EPYC 7413 24-Core Processor                 |    24 |              2 |\n| AMD EPYC 7443 24-Core Processor                 |    48 |              1 |\n| AMD EPYC 7443P 24-Core Processor                |    24 |              2 |\n| AMD EPYC 7452 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 7453 28-Core Processor                 |    28 |              1 |\n| AMD EPYC 74F3 24-Core Processor                 |    24 |              2 |\n| AMD EPYC 7502 32-Core Processor                 |    32 |              1 |\n| AMD EPYC 7502P 32-Core Processor                |    32 |              1 |\n| AMD EPYC 7513 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 7532 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 7542 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 7543 32-Core Processor                 |    28 |              1 |\n| AMD EPYC 7543P 32-Core Processor                |    32 |              2 |\n| AMD EPYC 7551 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 7551P 32-Core Processor                |    32 |              2 |\n| AMD EPYC 7552 48-Core Processor                 |    48 |              2 |\n| AMD EPYC 75F3 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 7601 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 7642 48-Core Processor                 |    48 |              2 |\n| AMD EPYC 7643 48-Core Processor                 |    48 |              2 |\n| AMD EPYC 7663 56-Core Processor                 |    56 |              2 |\n| AMD EPYC 7702 64-Core Processor                 |    64 |              2 |\n| AMD EPYC 7702P 64-Core Processor                |    64 |              2 |\n| AMD EPYC 7713 64-Core Processor                 |    64 |              1 |\n| AMD EPYC 7742 64-Core Processor                 |    64 |              2 |\n| AMD EPYC 7763 64-Core Processor                 |    64 |              2 |\n| AMD EPYC 7773X 64-Core Processor                |    64 |              2 |\n| AMD EPYC 7B12 64-Core Processor                 |    64 |              2 |\n| AMD EPYC 7B13 64-Core Processor                 |    64 |              1 |\n| AMD EPYC 7C13 64-Core Processor                 |    64 |              2 |\n| AMD EPYC 7F32 8-Core Processor                  |     8 |              2 |\n| AMD EPYC 7F52 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 7F72 24-Core Processor                 |    24 |              2 |\n| AMD EPYC 7H12 64-Core Processor                 |    64 |              2 |\n| AMD EPYC 7K62 48-Core Processor                 |    48 |              2 |\n| AMD EPYC 7R32 48-Core Processor                 |    48 |              2 |\n| AMD EPYC 7T83 64-Core Processor                 |   127 |              1 |\n| AMD EPYC 7V13 64-Core Processor                 |    24 |              1 |\n| AMD EPYC 9124 16-Core Processor                 |    16 |              2 |\n| AMD EPYC 9254 24-Core Processor                 |    24 |              2 |\n| AMD EPYC 9354 32-Core Processor                 |    32 |              2 |\n| AMD EPYC 9354P                                  |    64 |              1 |\n| AMD EPYC 9354P 32-Core Processor                |    32 |              2 |\n| AMD EPYC 9374F 32-Core Processor                |    32 |              1 |\n| AMD EPYC 9454 48-Core Processor                 |    48 |              2 |\n| AMD EPYC 9454P 48-Core Emb Processor            |    48 |              2 |\n| AMD EPYC 9474F 48-Core Processor                |    48 |              2 |\n| AMD EPYC 9534 64-Core Processor                 |    64 |              2 |\n| AMD EPYC 9554 64-Core Emb Processor             |    64 |              1 |\n| AMD EPYC 9554 64-Core Processor                 |   126 |              1 |\n| AMD EPYC 9654 96-Core Emb Processor             |    96 |              1 |\n| AMD EPYC 9654 96-Core Processor                 |    96 |              2 |\n| AMD EPYC 9754 128-Core Processor                |   128 |              2 |\n| AMD EPYC Processor                              |     1 |              1 |\n| AMD EPYC Processor (with IBPB)                  |    16 |              1 |\n| AMD EPYC-Rome Processor                         |    16 |              1 |\n| AMD Eng Sample: 100-000000053-04_32/20_N        |    48 |              1 |\n| AMD Ryzen 3 2200G with Radeon Vega Graphics     |     4 |              1 |\n| AMD Ryzen 3 3200G with Radeon Vega Graphics     |     4 |              1 |\n| AMD Ryzen 3 4100 4-Core Processor               |     4 |              2 |\n| AMD Ryzen 5 1600 Six-Core Processor             |     6 |              2 |\n| AMD Ryzen 5 2600 Six-Core Processor             |     6 |              2 |\n| AMD Ryzen 5 2600X Six-Core Processor            |     6 |              2 |\n| AMD Ryzen 5 3600 6-Core Processor               |     6 |              2 |\n| AMD Ryzen 5 3600X 6-Core Processor              |     6 |              2 |\n| AMD Ryzen 5 5500                                |     6 |              2 |\n| AMD Ryzen 5 5600G with Radeon Graphics          |     6 |              2 |\n| AMD Ryzen 5 7600 6-Core Processor               |     6 |              2 |\n| AMD Ryzen 5 PRO 2600 Six-Core Processor         |     6 |              2 |\n| AMD Ryzen 7 1700 Eight-Core Processor           |     8 |              2 |\n| AMD Ryzen 7 1700X Eight-Core Processor          |     8 |              2 |\n| AMD Ryzen 7 5700G with Radeon Graphics          |     8 |              2 |\n| AMD Ryzen 7 5700X 8-Core Processor              |     8 |              2 |\n| AMD Ryzen 7 5800X 8-Core Processor              |     8 |              2 |\n| AMD Ryzen 7 7700 8-Core Processor               |     8 |              2 |\n| AMD Ryzen 7 PRO 3700 8-Core Processor           |     8 |              2 |\n| AMD Ryzen 9 3900X 12-Core Processor             |    12 |              2 |\n| AMD Ryzen 9 5950X 16-Core Processor             |    16 |              2 |\n| AMD Ryzen 9 7900 12-Core Processor              |    12 |              2 |\n| AMD Ryzen 9 7950X 16-Core Processor             |    16 |              2 |\n| AMD Ryzen Threadripper 1900X 8-Core Processor   |     8 |              2 |\n| AMD Ryzen Threadripper 1920X 12-Core Processor  |    12 |              2 |\n| AMD Ryzen Threadripper 1950X 16-Core Processor  |    16 |              2 |\n| AMD Ryzen Threadripper 2920X 12-Core Processor  |    12 |              2 |\n| AMD Ryzen Threadripper 2950X 16-Core Processor  |    16 |              2 |\n| AMD Ryzen Threadripper 2970WX 24-Core Processor |    24 |              1 |\n| AMD Ryzen Threadripper 2990WX 32-Core Processor |    32 |              2 |\n| AMD Ryzen Threadripper 3960X 24-Core Processor  |    24 |              2 |\n| AMD Ryzen Threadripper 7960X 24-Cores           |    24 |              2 |\n| AMD Ryzen Threadripper PRO 3975WX 32-Cores      |    32 |              2 |\n| AMD Ryzen Threadripper PRO 3995WX 64-Cores      |    64 |              2 |\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for runpodctl stop Command\nDESCRIPTION: This code snippet shows the available options for the 'runpodctl stop' command. It includes the help option (-h or --help) which provides assistance for using the command.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_stop.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-h, --help   help for stop\n```\n\n----------------------------------------\n\nTITLE: Managing and Mounting Docker Volumes\nDESCRIPTION: Illustrates Docker volume management for persistent data. `docker volume create` generates a managed volume, and `docker run -v <vol>:/data` mounts a specified volume (`<vol>`) into a container at a specific path (`/data`), allowing data to persist beyond the container's lifetime. For RunPod context, consider attaching Network Volumes.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/docker-commands.md#2025-04-23_snippet_4\n\nLANGUAGE: command\nCODE:\n```\ndocker volume create         # Create volume\ndocker run -v <vol>:/data    # Mount volume into container\n```\n\n----------------------------------------\n\nTITLE: Using the runpodctl project command in CLI\nDESCRIPTION: The 'runpodctl project' command helps manage RunPod projects with the option to get help. This command is used to develop and deploy projects entirely on RunPod's infrastructure.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for project\n```\n\n----------------------------------------\n\nTITLE: Installing SkyPilot with RunPod Support\nDESCRIPTION: This command installs the nightly build of the SkyPilot framework using pip. The `[runpod]` extra specifies that optional dependencies required for interacting with the RunPod cloud should be included in the installation.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"skypilot-nightly[runpod]\"\n```\n\n----------------------------------------\n\nTITLE: Terminating a Pod by ID\nDESCRIPTION: Command to permanently terminate a Pod by its ID. This deletes all data outside network volumes as warned in the documentation.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl remove pod [POD_ID]\n```\n\n----------------------------------------\n\nTITLE: Installing the RunPod Python Package\nDESCRIPTION: This command uses pip, the Python package installer, to install the RunPod library. It specifies that version 1.6 or a newer version is required for compatibility with the described SkyPilot integration.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"runpod>=1.6\"\n```\n\n----------------------------------------\n\nTITLE: Starting RunPod Development Server\nDESCRIPTION: Launches a RunPod development server using the RunPod CLI. This allows for quick testing and development in a live environment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options for runpodctl start (Shell)\nDESCRIPTION: This snippet shows the command-line options available for displaying help information for the 'runpodctl start' command. Both '-h' and '--help' flags serve the same purpose.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_start.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for start\n```\n\n----------------------------------------\n\nTITLE: Starting RunPod Development Session Command\nDESCRIPTION: Basic command syntax for starting a development session that connects local environment to the project environment on a Pod. Enables real-time synchronization of changes.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_dev.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project dev [flags]\n```\n\n----------------------------------------\n\nTITLE: RunPodCTL SSH List Keys Command Usage\nDESCRIPTION: Command syntax for listing SSH keys associated with the current user's RunPod account. The command supports a help flag for additional information.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_ssh_list-keys.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl ssh list-keys [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for list-keys\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment (macOS/Linux)\nDESCRIPTION: Activates the previously created Python virtual environment 'venv' on macOS or Linux systems. This makes the environment's Python interpreter and packages available in the current shell session.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Example Output of Resuming a Pod\nDESCRIPTION: Sample output when successfully resuming a Pod, confirming the action with the Pod's ID and showing the hourly cost.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npod \"wu5ekmn69oh1xr\" started with $0.290 / hr\n```\n\n----------------------------------------\n\nTITLE: Restarting RunPod Agent After Testing\nDESCRIPTION: This command restarts the RunPod agent service after completing all burn tests. This is necessary to make the machine available for listing on the RunPod platform.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/hosting/burn-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: command\nCODE:\n```\nsudo systemctl start runpod\n```\n\n----------------------------------------\n\nTITLE: Sample Terminal Output from Local Server Request (Plaintext)\nDESCRIPTION: Displays typical logs output to terminal when the serverless function processes an HTTP request from the local test server. Includes HTTP access logs and processing/debug logs from the function handler, enabling developers to trace requests and responses for debugging.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/01_local-server-testing.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nINFO:     127.0.0.1:52686 - \"POST /run HTTP/1.1\" 200 OK\nDEBUG    | Retrieved local job: {'input': {'text': 'Hello, RunPod!'}, 'id': 'local_test'}\nINFO     | local_test | Started.\nstring-reverser | Starting job local_test\nDEBUG    | local_test | Handler output: {'original_text': 'Hello, RunPod!', 'reversed_text': '!doPnuR ,olleH'}\nDEBUG    | local_test | run_job return: {'output': {'original_text': 'Hello, RunPod!', 'reversed_text': '!doPnuR ,olleH'}}\nINFO     | Job local_test completed successfully.\n```\n\n----------------------------------------\n\nTITLE: Available options for runpodctl project create\nDESCRIPTION: Lists the available options/flags for the project create command, including help, init (using current directory), and name specification.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_create.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help          help for create\n-i, --init          use the current directory as the project directory\n-n, --name string   project name\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images Using SHA Tags (Bash)\nDESCRIPTION: This Bash command demonstrates the syntax for pulling a specific version of a Docker image using its unique SHA256 hash (digest). This method is recommended over using the ':latest' tag for better version control and reproducibility.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/workers/deploy.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull <image_name>@<sha256:hash>\n```\n\n----------------------------------------\n\nTITLE: Executing Version Command in RunPodCTL\nDESCRIPTION: This command displays the version information for RunPodCTL. It does not accept any additional arguments.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_version.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrunpodctl version [flags]\n```\n\n----------------------------------------\n\nTITLE: Transferring a Dataset to RunPod Pod using runpodctl (Bash)\nDESCRIPTION: This Bash command uses the 'runpodctl' tool to send a local data file (e.g., 'data.jsonl') from your local machine to the RunPod instance. Dependencies: runpodctl installed and properly configured API key. Input: the file to send; Output: transfer code and data sent to the remote Pod. The accompanying output/output code demonstrates expected transfer messages and follow-up receive instructions.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl send data.jsonl\n```\n\nLANGUAGE: bash\nCODE:\n```\nSending 'data.jsonl' (5 B)\nCode is: 8338-galileo-collect-fidel\nOn the other computer run\n\nrunpodctl receive 8338-galileo-collect-fidel\n```\n\n----------------------------------------\n\nTITLE: Checking runpodctl Version\nDESCRIPTION: Command to verify the installation and check the installed version of runpodctl.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/install-runpodctl.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl version\n```\n\n----------------------------------------\n\nTITLE: RunPod API Endpoint for Synchronous Requests\nDESCRIPTION: Specifies the RunPod API endpoint URL format for making synchronous requests. Replace '{endpoint_id}' with the actual ID of the target Serverless endpoint. Requests to this endpoint wait for job completion before returning the result.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_9\n\nLANGUAGE: plain\nCODE:\n```\nPOST https://api.runpod.ai/v2/{endpoint_id}/runsync\n```\n\n----------------------------------------\n\nTITLE: Example: Specifying Container Disk Size\nDESCRIPTION: Provides an example value for the `containerDiskInGb` argument, setting the container's disk size to 10 gigabytes. This argument requires an Integer.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n10\n```\n\n----------------------------------------\n\nTITLE: RunPod Development Command Options\nDESCRIPTION: Available flags for the project dev command including help option, log prefix controls, and volume selection capabilities.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_dev.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help              help for dev\n    --prefix-pod-logs   prefix logs from project Pod with Pod ID (default true)\n    --select-volume     select a new default network volume for current project\n```\n\n----------------------------------------\n\nTITLE: Changing to Project Directory\nDESCRIPTION: Changes the current working directory to the newly created project directory.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my_ip\n```\n\n----------------------------------------\n\nTITLE: Using the runpodctl project create command\nDESCRIPTION: Command for creating a new RunPod project folder on your local machine. This is the primary syntax for the 'project create' subcommand.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_create.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project create [flags]\n```\n\n----------------------------------------\n\nTITLE: Receiving a Dataset on RunPod Pod using runpodctl (Bash)\nDESCRIPTION: This Bash command uses the 'runpodctl' utility to receive a file using the transfer code output by the send command. Dependency: runpodctl pre-installed on the Pod. Input: transfer code; Output: file saved on the Pod. The output snippet shows expected file transfer progress and success.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl receive 8338-galileo-collect-fidel\n```\n\nLANGUAGE: bash\nCODE:\n```\nReceiving 'data.jsonl' (5 B)\n\nReceiving (<-149.36.0.243:8692)\ndata.jsonl 100% |████████████████████| ( 5/ 5B, 0.040 kB/s)\n\n```\n\n----------------------------------------\n\nTITLE: Installing RunPod CLI on Linux using wget\nDESCRIPTION: Command to download and install RunPod CLI on Linux systems (including Windows Subsystem for Linux) using wget.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO- cli.runpod.net | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Docker Image - Bash - Bash\nDESCRIPTION: This Bash command runs a container from the my-time-image image. It assumes the image has already been built and that Docker is available. Running this command starts the container, which executes the entrypoint script and prints the output to the terminal; options such as volume or port binding are not included in this basic run.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/create-dockerfiles.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run my-time-image\n```\n\n----------------------------------------\n\nTITLE: RunPodCTL SSH Add-Key Command Options\nDESCRIPTION: Available command line options for the ssh add-key command, including help flag, direct key input, and key file path specification.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_ssh_add-key.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help              help for add-key\n    --key string        The public key to add.\n    --key-file string   The file containing the public key to add.\n```\n\n----------------------------------------\n\nTITLE: Deploying a RunPod Project as a Serverless Endpoint\nDESCRIPTION: The command to deploy your project as a serverless endpoint on RunPod. This creates an endpoint with access to saved project data on your network volume.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/manage-projects.md#2025-04-23_snippet_2\n\nLANGUAGE: command\nCODE:\n```\nrunpodctl project deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Package Lists and Installing lshw in Shell\nDESCRIPTION: Updates the package list and installs the 'lshw' utility. This is done within the RunPod web terminal to ensure Ollama can automatically detect and utilize the GPU hardware.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/run-ollama.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\napt update\napt install lshw\n```\n\n----------------------------------------\n\nTITLE: Launching LLM Training with Axolotl and Accelerate (Bash)\nDESCRIPTION: This command kicks off training of the LLM using Axolotl CLI via the Accelerate launcher for distributed or efficient training. Requires the lora.yml config file to point to the correct dataset and hyperparameters. Outputs: progress of model training and eventual trained model checkpoints.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naccelerate launch -m axolotl.cli.train examples/openllama-3b/lora.yml\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on MacOS using Brew\nDESCRIPTION: Installs the RunPod CLI tool on MacOS systems using the Homebrew package manager.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install runpod/runpodctl/runpodctl\n```\n\n----------------------------------------\n\nTITLE: Defining a Docker Image to Write Data (Dockerfile)\nDESCRIPTION: This Dockerfile defines an image based on busybox. It sets the working directory to '/data', creates an empty file 'current_date.txt', copies an 'entrypoint.sh' script into the image, makes it executable, and sets it as the entrypoint. The intention is for the entrypoint script to write data into the '/data' directory.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/persist-data.md#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM busybox\nWORKDIR /data\nRUN touch current_date.txt\nCOPY entrypoint.sh /\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Bulk Termination of Pods using RunPod CLI\nDESCRIPTION: Shows how to terminate multiple Pods in bulk using the RunPod CLI. This example removes up to 40 Pods with a specific name.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl remove pods my-bulk-task --podCount 40\n```\n\n----------------------------------------\n\nTITLE: Command and Entrypoint with Echo Test - JSON\nDESCRIPTION: Illustrates a minimalist JSON configuration where the Docker 'entrypoint' is set to [\"echo\"] and the 'cmd' is [\"test-echo-test-echo\"]. This causes the container to simply output 'test-echo-test-echo' on startup. Useful for testing entrypoint and command wiring in Docker templates.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"cmd\": [\"test-echo-test-echo\"], \"entrypoint\": [\"echo\"]}\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment (Windows)\nDESCRIPTION: Activates the previously created Python virtual environment 'venv' on Windows systems using Command Prompt or PowerShell. This makes the environment's Python interpreter and packages available in the current shell session.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvenv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Updating Packages and Installing Sudo - Shell Command\nDESCRIPTION: This shell command updates the Linux package lists and installs the sudo package within the RunPod container. Required dependency is an apt-based Linux distribution. No parameters need to be specified, and output is the installation of 'sudo' for use in subsequent commands.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_1\n\nLANGUAGE: command\nCODE:\n```\napt update && apt install -y sudo\n```\n\n----------------------------------------\n\nTITLE: Running Inference with Fine-Tuned LLM using Axolotl (Bash)\nDESCRIPTION: This Bash command performs inference using the trained Axolotl model and a specified LoRA model directory. The 'accelerate launch' tool improves speed and compatibility. Input: 'lora.yml' configuration and path to model directory. Outputs: model predictions on new prompts.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naccelerate launch -m axolotl.cli.inference examples/openllama-3b/lora.yml --lora_model_dir=\"./lora-out\"\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on Windows using PowerShell\nDESCRIPTION: Downloads the RunPod CLI executable for Windows systems using PowerShell.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/runpod/runpodctl/releases/download/v1.14.3/runpodctl-win-amd -O runpodctl.exe\n```\n\n----------------------------------------\n\nTITLE: Example RunPod Reliability Calculation with Downtime\nDESCRIPTION: Example calculation of reliability when a host experiences 30 minutes of network downtime. The calculation uses approximately 43200 minutes per month (30 days) and includes a 10-minute buffer to account for minor disruptions like agent upgrades.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/hosting/maintenance-and-reliability.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n( 43200 - 30 + 10 ) / 43200 = 99.95%\n```\n\n----------------------------------------\n\nTITLE: Pre-Start Directory Creation and Initialization - Bash\nDESCRIPTION: Creates a directory (/testdir1) prior to executing the main start script within a container. Useful for preparing the filesystems or mounting points before launching application processes. The command is executed within a bash shell, and executes mkdir and the /start.sh script sequentially.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash -c 'mkdir /testdir1 && /start.sh'\n```\n\n----------------------------------------\n\nTITLE: Displaying RunPod CLI Help Information\nDESCRIPTION: Command to display general help information about RunPod CLI, showing available commands and their descriptions.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl help\n```\n\n----------------------------------------\n\nTITLE: Removing Pods Options with runpodctl - Command Line - Shell\nDESCRIPTION: This snippet lists the available options for the 'runpodctl remove pods' command. Use '-h' or '--help' to display help information and '--podCount int' to specify the number of pods with the same name to remove, with a default value of 1. These flags modify the behavior of the main command and must be included in the command invocation as needed.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_remove_pods.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help           help for pods\n    --podCount int   number of pods to remove with the same name (default 1)\n```\n\n----------------------------------------\n\nTITLE: Cloning Axolotl Repository\nDESCRIPTION: Clones the Axolotl repository from GitHub to the Pod's main directory.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/axolotl.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/axolotl-ai-cloud/axolotl\n```\n\n----------------------------------------\n\nTITLE: Using the RunPod CLI Config Command\nDESCRIPTION: This command is used to configure settings for the RunPod CLI. It allows users to set the API key and API URL for interacting with RunPod services.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_config.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl config [flags]\n```\n\n----------------------------------------\n\nTITLE: Example: Specifying Docker Image Name\nDESCRIPTION: Provides an example value for the `imageName` argument, specifying the use of the latest Nginx Docker image. This argument requires a String.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/configurations.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"nginx:latest\"\n```\n\n----------------------------------------\n\nTITLE: Entrypoint-Induced Repeated Command Execution - JSON\nDESCRIPTION: Shows a JSON-configured Docker setup where a directory is created and the start script is run, but highlights an important caveat: with this configuration, the command is executed twice due to Docker's handling of entrypoint and cmd. This can cause errors if the mkdir command is not idempotent. mkdir should use the -p flag to avoid errors if the directory already exists.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"cmd\": [\"mkdir /testdir11 && /start.sh\"], \"entrypoint\": [\"bash\", \"-c\"] }\n```\n\n----------------------------------------\n\nTITLE: Example: Defining Persistent Volume Size\nDESCRIPTION: Provides an example value for the `volumeInGb` argument, setting the size of the additional persistent volume to 5 gigabytes. This argument requires an Integer.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/configurations.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n5\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Installation Version (Command Line)\nDESCRIPTION: This command is executed in a terminal to verify that Docker is installed and operational. It outputs detailed version information for both the Docker Client and the Docker Server (Engine), confirming the setup.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/containers.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\ndocker version\n```\n\n----------------------------------------\n\nTITLE: RunPod CLI Command Reference\nDESCRIPTION: The RunPod CLI tool (runpodctl) comes pre-installed on all Pods and includes a Pod-scoped API key for command-line management of resources.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/get-started/connect-to-runpod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl\n```\n\n----------------------------------------\n\nTITLE: Installing Axolotl Dependencies\nDESCRIPTION: Installs all required packages for Axolotl, including those needed for Flash Attention and DeepSpeed optimization.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/axolotl.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U packaging setuptools wheel ninja\npip3 install --no-build-isolation -e '.[flash-attn,deepspeed]'\n```\n\n----------------------------------------\n\nTITLE: Using the runpodctl get Command with Options\nDESCRIPTION: The basic syntax for the runpodctl get command with its help option. This command is used to retrieve resources from runpod.io and displays the help information when used with the -h or --help flag.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_get.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for get\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Directory\nDESCRIPTION: This command creates a new directory named 'hello-sky' in the current working directory. This directory will serve as the container for the SkyPilot project files, including the configuration YAML.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-sky\n```\n\n----------------------------------------\n\nTITLE: Stopping RunPod Agent for Testing\nDESCRIPTION: This command stops the RunPod agent service to prepare the system for burn testing. This is necessary to prevent conflicts during the testing process.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/hosting/burn-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\nsudo systemctl stop runpod\n```\n\n----------------------------------------\n\nTITLE: TCP Public IP Connection Format\nDESCRIPTION: Example of IP:port combination for accessing a service through TCP Public IP\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/configuration/expose-ports.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n73.10.226.56:10027\n```\n\n----------------------------------------\n\nTITLE: Cloning PyTorch Demo Repository\nDESCRIPTION: Command to clone a basic PyTorch demo repository into each Pod's main directory.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/pytorch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/murat-runpod/torch-demo.git\n```\n\n----------------------------------------\n\nTITLE: runpodctl get pod Command Options\nDESCRIPTION: Available flags for the 'get pod' command. The -a/--allfields option includes all fields in the output, while -h/--help displays the help information for the command.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_get_pod.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-a, --allfields   include all fields in output\n-h, --help        help for pod\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command changes the current working directory of the shell to the 'hello-sky' directory created previously. Subsequent commands, like creating the configuration file and launching the job, are expected to be run from within this directory.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-sky\n```\n\n----------------------------------------\n\nTITLE: Installing RunPod CLI on Windows using PowerShell\nDESCRIPTION: PowerShell command to download the RunPod CLI executable from GitHub releases for Windows systems.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwget https://github.com/runpod/runpodctl/releases/latest/download/runpodctl-windows-amd64.exe -O runpodctl.exe\n```\n\n----------------------------------------\n\nTITLE: Initiating YAML Configuration File Creation\nDESCRIPTION: This command uses the `cat` utility with output redirection (`>`) to begin creating a new file named `hello_sky.yaml`. It waits for input from the user (typically pasted YAML content) which will then be written into the file.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/skypilot/skypilot.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat > hello_sky.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Hugging Face Model Repository via CLI (Bash)\nDESCRIPTION: Uses Hugging Face CLI to create a new model repository. You must be authenticated (see previous login). Input: model repository name; Output: new model repository hosted on Hugging Face. Option '--type model' specifies that the repo is of model type.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli repo create your_model_name --type model\n```\n\n----------------------------------------\n\nTITLE: Axolotl Training Configuration\nDESCRIPTION: Example YAML configuration file for fine-tuning a language model with Axolotl, including model settings, dataset configuration, training parameters, and optimization settings.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/fine-tune/index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbase_model: NousResearch/Meta-Llama-3.1-8B\n\n# Model loading settings\nload_in_8bit: false\nload_in_4bit: false\nstrict: false\n\n# Dataset configuration\ndatasets:\n  - path: tatsu-lab/alpaca\n    type: alpaca\ndataset_prepared_path: last_run_prepared\nval_set_size: 0.05\noutput_dir: ./outputs/out\n\n# Training parameters\nsequence_len: 8192\nsample_packing: true\npad_to_sequence_len: true\n\n# Weights & Biases logging (optional)\nwandb_project:\nwandb_entity:\nwandb_watch:\nwandb_name:\nwandb_log_model:\n\n# Training optimization\ngradient_accumulation_steps: 8\nmicro_batch_size: 1\nnum_epochs: 1\noptimizer: paged_adamw_8bit\nlr_scheduler: cosine\nlearning_rate: 2e-5\n\n# Additional settings\ntrain_on_inputs: false\ngroup_by_length: false\nbf16: auto\nfp16:\ntf32: false\n\ngradient_checkpointing: true\ngradient_checkpointing_kwargs:\n  use_reentrant: false\nearly_stopping_patience:\nresume_from_checkpoint:\nlogging_steps: 1\nxformers_attention:\nflash_attention: true\n\nwarmup_steps: 100\nevals_per_epoch: 2\neval_table_size:\nsaves_per_epoch: 1\ndebug:\ndeepspeed:\nweight_decay: 0.0\nfsdp:\nfsdp_config:\nspecial_tokens:\n  pad_token: <|end_of_text|>\n```\n\n----------------------------------------\n\nTITLE: Available Options for project build Command\nDESCRIPTION: Shows the available flags for the 'project build' command, including help option and an option to include environment variables from runpod.toml in the generated Dockerfile.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_build.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help          help for build\n    --include-env   include environment variables from runpod.toml in generated Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Navigating to Axolotl Directory\nDESCRIPTION: Changes directory to the cloned Axolotl repository.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/axolotl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd axolotl\n```\n\n----------------------------------------\n\nTITLE: RunPodCTL Update Command Options in Bash\nDESCRIPTION: This snippet shows the available options for the 'update' command. Currently, only the help flag is available, which provides assistance for using the command.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_update.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for update\n```\n\n----------------------------------------\n\nTITLE: Opening Configuration File with Nano\nDESCRIPTION: Command to open and edit the Axolotl configuration file using the nano text editor.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/fine-tune/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnano config.yaml\n```\n\n----------------------------------------\n\nTITLE: Hugging Face Model Upload Commands\nDESCRIPTION: Series of commands to authenticate with Hugging Face and upload a fine-tuned model to the Hugging Face Hub.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/fine-tune/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli login\n```\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli upload <your-username>/<model-name> ./output\n```\n\n----------------------------------------\n\nTITLE: Displaying RunPodCTL Remove Command Options\nDESCRIPTION: This code snippet shows the available options for the 'runpodctl remove' command. It includes the help option for displaying command usage information.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_remove.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for remove\n```\n\n----------------------------------------\n\nTITLE: Running the Python Handler Script using Bash\nDESCRIPTION: A simple Bash command to execute the Python handler script saved as `your_handler.py`. This command initiates the RunPod local testing environment, which may use default inputs if provided or wait for external triggers.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/validator.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython your_handler.py\n```\n\n----------------------------------------\n\nTITLE: Using RunPodCTL SSH Add-Key Command\nDESCRIPTION: Command syntax for adding an SSH key to a user account using RunPodCTL. The command supports either providing an existing key directly or through a file, with an option to auto-generate if none is specified.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_ssh_add-key.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl ssh add-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Create Command Help Options\nDESCRIPTION: Shows the available help option flag for the create command in runpodctl CLI\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_create.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on Windows (Command)\nDESCRIPTION: These commands create a new Python virtual environment named 'env' using the built-in `venv` module and then activate it for the current Command Prompt or PowerShell session on Windows. This isolates project dependencies.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: command\nCODE:\n```\npython -m venv env\nenv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options for `runpodctl ssh` (Shell)\nDESCRIPTION: This snippet displays the command-line options `-h` and `--help` used to show the help documentation for the `runpodctl ssh` command. This provides users with information on how to use the command and its available flags.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_ssh.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```\n-h, --help   help for ssh\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Container with a Mounted Volume (Command)\nDESCRIPTION: This command runs a container based on the 'my-image' (built from the Dockerfile above). Crucially, it uses the '-v' flag to mount the previously created 'date-volume' named volume to the '/data' directory inside the container. Any data written to '/data' by the container (via the entrypoint script) will be stored in the 'date-volume' on the host, persisting beyond the container's lifetime.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/persist-data.md#2025-04-23_snippet_4\n\nLANGUAGE: command\nCODE:\n```\ndocker run -v date-volume:/data my-image\n```\n\n----------------------------------------\n\nTITLE: JSON Command Array for Directory Setup and Script Start - JSON\nDESCRIPTION: Demonstrates specifying the Docker container command as a JSON array, executing mkdir to create /testdir8 and then running /start.sh. Requires the container to have both bash and /start.sh installed, and is typically used in container orchestration or custom template systems supporting JSON command definitions.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/templates/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"cmd\": [\"bash\", \"-c\", \"mkdir /testdir8 && /start.sh\"]}\n```\n\n----------------------------------------\n\nTITLE: Setting up and Launching Fooocus in Jupyter Notebook - Bash\nDESCRIPTION: This snippet installs required Python packages, downloads the Fooocus image model repository, and launches the server UI via Gradio from a Jupyter Notebook cell. Dependencies include pip (for package installation), a compatible Python environment, git, and necessary GPU hardware (minimum 4GB VRAM and 8GB RAM). Commands install 'pygit2' and 'opencv-python', clone the Fooocus repo, change working directories, and start the application ('entry_with_update.py') with the '--share' flag to enable external Gradio access. Expected output is a startup message with an application link; users must follow hardware and environment prerequisites strictly.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/run-fooocus.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n!pip install pygit2==1.12.2\\n!pip install opencv-python==4.9.0.80\\n%cd /workspace\\n!git clone https://github.com/lllyasviel/Fooocus.git\\n%cd /workspace/Fooocus\\n!python entry_with_update.py --share\n```\n\n----------------------------------------\n\nTITLE: RunPodCTL Start Pod Command Options in Bash\nDESCRIPTION: These are the available options for the 'runpodctl start pod' command. The --bid flag allows setting a bid price per GPU for spot pricing, and the -h or --help flag provides help information for the command.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_start_pod.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    --bid float32   bid per gpu for spot price\n-h, --help          help for pod\n```\n\n----------------------------------------\n\nTITLE: Example Output of Docker Version Command\nDESCRIPTION: Provides a sample output format displayed after running the `docker version` command. This text output details the versions of the Docker Client and Server components, including the engine, API, Go version, Git commit, OS/Architecture, and associated runtimes like containerd and runc.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/containers.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndocker version\nClient: Docker Engine - Community\n Version:           24.0.7\n API version:       1.43\n Go version:        go1.21.3\n Git commit:        afdd53b4e3\n Built:             Thu Oct 26 07:06:42 2023\n OS/Arch:           darwin/arm64\n Context:           desktop-linux\n\nServer: Docker Desktop 4.26.1 (131620)\n Engine:\n  Version:          24.0.7\n  API version:      1.43 (minimum version 1.12)\n  Go version:       go1.20.10\n  Git commit:       311b9ff\n  Built:            Thu Oct 26 09:08:15 2023\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.6.25\n  GitCommit:       abcd\n runc:\n  Version:          1.1.10\n  GitCommit:        v1.1.10-0-g18a0cb0\n docker-init:\n  Version:          0.19.0\n```\n\n----------------------------------------\n\nTITLE: Starting a Pod with RunPodCTL in Bash\nDESCRIPTION: This command is used to start a pod on runpod.io. It requires a podId and can accept optional flags. The --bid flag allows setting a bid price per GPU for spot pricing.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_start_pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl start pod [podId] [flags]\n```\n\n----------------------------------------\n\nTITLE: Accessing Persisted Data from Another Container (Command)\nDESCRIPTION: This command demonstrates accessing the persisted data. It runs a new, temporary busybox container ('--rm' ensures it's removed after execution). It mounts the same 'date-volume' to '/data' inside this new container. Then, it executes 'cat /data/current_date.txt' to display the content of the file that was written by the first container and persisted in the volume.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/persist-data.md#2025-04-23_snippet_5\n\nLANGUAGE: command\nCODE:\n```\ndocker run --rm -v date-volume:/data busybox cat /data/current_date.txt\n```\n\n----------------------------------------\n\nTITLE: Running a Temporary Container Command (Command)\nDESCRIPTION: This command demonstrates the ephemeral nature of Docker containers. It runs a busybox container, executes the 'date' command, and redirects the output to 'file.txt' *inside* the container. This file and its content are lost when the container exits.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/persist-data.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\ndocker run busybox date > file.txt\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiDocMdx Component in JSX\nDESCRIPTION: This snippet shows how to import the ApiDocMdx component from the @theme/ApiDocMdx library and use it in a JSX file to display API documentation. The component takes an 'id' prop that presumably references a YAML file containing the API documentation details.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/references/_api-endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiDocMdx from '@theme/ApiDocMdx';\n\n<ApiDocMdx id=\"using-single-yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Sending File with rsync in Shell\nDESCRIPTION: General syntax for sending a file to a RunPod pod using rsync. Requires specifying the SSH port, source file path, pod's IP address, and destination path.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/storage/transfer-files.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrsync -e \"ssh -p 43201\" /source/file/path root@194.26.196.6:/destination/file/path\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images from Dockerfile\nDESCRIPTION: Shows how to build a Docker image using a Dockerfile located in the current directory. The `docker build` command processes the Dockerfile instructions. The `--platform=linux/amd64` flag is recommended when building images for RunPod to ensure the correct architecture.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/docker-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: command\nCODE:\n```\ndocker build                         # Build image from Dockerfile\ndocker build --platform=linux/amd64  # Build for specific architecture\n```\n\n----------------------------------------\n\nTITLE: Editing BUILD.bazel for Docker Image Push - Bash and File Editing Commands\nDESCRIPTION: This shell snippet demonstrates installing the nano text editor and opening the BUILD.bazel file for editing. It prescribes a simple two-step process for ensuring a text editor is available and launching it to modify the Bazel configuration. This is preparatory to editing Bazel build instructions for custom image building.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_5\n\nLANGUAGE: command\nCODE:\n```\nsudo apt install nano\nnano BUILD.bazel\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX\nDESCRIPTION: This code snippet imports the DocCardList component from the '@theme/DocCardList' module. It's likely used to generate a list of documentation cards for various integration options.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Repository Using Git - Shell Command\nDESCRIPTION: This command clones a GitHub repository containing an example project and changes the working directory to it. The repository demonstrates how to build Docker images using Bazel on RunPod. No dependencies are required except for Git, and the command expects network connectivity. Output is the cloned repository in the working directory.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/build-docker-images.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\ngit clone https://github.com/therealadityashankar/build-docker-in-runpod.git && cd build-docker-in-runpod\n```\n\n----------------------------------------\n\nTITLE: Merging LoRA Model Weights with Base Model using Axolotl (Python)\nDESCRIPTION: Python command to merge LoRA weights with the base model, producing a standalone model for inference. Input: path to 'lora.yml' and local directory containing LoRA weights. Output: merged model. Used when you want to deploy or upload the complete model without the need for LoRA layers.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npython3 -m axolotl.cli.merge_lora examples/openllama-3b/lora.yml \\\n    --lora_model_dir=\"./lora-out\"\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment (Bash)\nDESCRIPTION: Creates a Python 3 virtual environment named 'venv' in the current directory. This isolates project dependencies.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a Python virtual environment\npython3 -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on macOS/Linux (Command)\nDESCRIPTION: These commands create a new Python virtual environment named 'env' using the built-in `venv` module and then activate it for the current shell session on macOS or Linux systems. This isolates project dependencies.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: command\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Navigating to Llama-3 Examples Directory\nDESCRIPTION: Changes directory to the Llama-3 examples folder in the Axolotl repository.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/instant-clusters/axolotl.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/llama-3\n```\n\n----------------------------------------\n\nTITLE: Default JSON Test Request in RunPod Console\nDESCRIPTION: Shows the default JSON request body provided in the RunPod console's 'Requests' tab for testing an endpoint. Users can modify this example, specifically the 'input' object's parameters like 'prompt', before clicking 'Run' to execute the test against their deployed worker.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"input\": {\n        \"prompt\": \"Hello World\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with RunPod Development Server\nDESCRIPTION: Uses curl to send a POST request to the RunPod development server, triggering the IP address retrieval function.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/get-started.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'https://${YOUR_ENDPOINT}-8080.proxy.runpod.net/runsync' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"input\": {}\n}'\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Container with Busybox (Command Line)\nDESCRIPTION: Demonstrates running a Docker container using the lightweight 'busybox' image. The `docker run` command starts a new container, and `sh -c 'echo \"The time is: $(date)\"'` executes a shell command inside it to print the current date and time from within the container's isolated environment.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/containers.md#2025-04-23_snippet_3\n\nLANGUAGE: command\nCODE:\n```\ndocker run busybox sh -c 'echo \"The time is: $(date)\"'\n# The time is: Thu Jan 11 06:35:39 UTC 2024\n```\n\n----------------------------------------\n\nTITLE: Cloning the Axolotl Repository and Entering Directory (Bash)\nDESCRIPTION: These Bash commands clone the official Axolotl repository from GitHub and change the directory into the cloned repo. Required for cases where Axolotl is not yet present in the Pod environment. No inputs except access to GitHub; outputs: Axolotl codebase is available on the Pod. Prerequisite for subsequent preprocessing and training commands.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/pods/fine-tune-llm-axolotl.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/OpenAccess-AI-Collective/axolotl\ncd axolotl\n```\n\n----------------------------------------\n\nTITLE: Checking Job Status with RunPod API\nDESCRIPTION: Example of making a GET request to check the status of a running job using the job ID.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/api-endpoints.md#2025-04-23_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl https://api.runpod.ai/v2/stable-diffusion-v1/status/c80ffee4-f315-4e25-a146-0f3d98cf024b \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n```\n\n----------------------------------------\n\nTITLE: Running a RunPod Development Session\nDESCRIPTION: The command to start a development session that creates an active connection between your local environment and the project environment on your Pod. Local changes propagate to the project environment in real time.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/manage-projects.md#2025-04-23_snippet_1\n\nLANGUAGE: command\nCODE:\n```\nrunpodctl project dev\n```\n\n----------------------------------------\n\nTITLE: Configuring RunPod for Mods in YAML\nDESCRIPTION: This YAML configuration sets up RunPod to work with Mods. It includes the base URL, API key environment variable, and model specifications such as name, aliases, and maximum input characters.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/mods/mods.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrunpod:\n  # https://docs.runpod.io/serverless/vllm/openai-compatibility\n  base-url: https://api.runpod.ai/v2/${YOUR_ENDPOINT}/openai/v1\n  api-key:\n  api-key-env: RUNPOD_API_KEY\n  models:\n    # Add your model name\n    openchat/openchat-3.5-1210:\n      aliases: [\"openchat\"]\n      max-input-chars: 8192\n```\n\n----------------------------------------\n\nTITLE: Sample Input for Testing Handler - JSON\nDESCRIPTION: This snippet provides an example JSON input file for local testing of the model handler. The object includes an 'input' key with an 'image_url' string value. Save this as test_input.json for batch or script-based testing. No dependencies; serves purely as structured test data.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/cleanup.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"image_url\": \"https://avatars.githubusercontent.com/u/95939477?s=200&v=4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Viewing RunPod Endpoints\nDESCRIPTION: Shows an example JSON response structure when querying for RunPod serverless endpoints. The response contains a list of endpoint objects under `data.myself.endpoints`, each detailing its configuration and status, along with any `serverlessDiscount` information.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/sdks/graphql/manage-endpoints.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"myself\": {\n      \"endpoints\": [\n        {\n          \"gpuIds\": \"AMPERE_16\",\n          \"id\": \"i02xupws21hp6i\",\n          \"idleTimeout\": 5,\n          \"locations\": \"US\",\n          \"name\": \"Generated Endpoint -fb\",\n          \"networkVolumeId\": null,\n          \"pods\": [],\n          \"scalerType\": \"QUEUE_DELAY\",\n          \"scalerValue\": 4,\n          \"templateId\": \"xkhgg72fuo\",\n          \"workersMax\": 0,\n          \"workersMin\": 0\n        }\n      ],\n      \"serverlessDiscount\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RunPod Project\nDESCRIPTION: The command to create a new RunPod project. This initializes a folder with everything needed to run a development session on a Pod, including preliminary settings based on your selected starter project.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/projects/manage-projects.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\nrunpod project create\n```\n\n----------------------------------------\n\nTITLE: Example API JSON Output for a Completed Job - JSON\nDESCRIPTION: This JSON object shows an example response from the RunPod serverless API when a job has completed. It includes attributes such as delay time, execution time, job ID, output (containing the S3 image URL), and status. The output field is especially important for retrieving the result of the handler function (e.g., the uploaded image URL).\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/development/environment-variables.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"delayTime\\\": 86588,\\n  \\\"executionTime\\\": 1563,\\n  \\\"id\\\": \\\"e3d2e250-ea81-4074-9838-1c52d006ddcf\\\",\\n  \\\"output\\\": [\\n    \\\"https://your-bucket.s3.us-west-004.backblazeb2.com/your-image.png\\\"\\n  ],\\n  \\\"status\\\": \\\"COMPLETED\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Commands Inside Running Docker Containers\nDESCRIPTION: Explains how to execute commands within a running container using `docker exec`. This is useful for debugging or inspecting the container's state. The example shows listing files in the `/etc` directory of a container named `mycontainer`.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/docker-commands.md#2025-04-23_snippet_6\n\nLANGUAGE: command\nCODE:\n```\ndocker exec\ndocker exec mycontainer ls -l /etc     # List files in container\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Networks for Container Communication\nDESCRIPTION: Covers Docker networking commands. `docker network create` sets up a custom user-defined virtual network, and `docker run --network=<name>` connects a container to the specified network (`<name>`), enabling communication between containers on that network.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/docker-commands.md#2025-04-23_snippet_5\n\nLANGUAGE: command\nCODE:\n```\ndocker network create           # Create user-defined network\ndocker run --network=<name>     # Connect container\n```\n\n----------------------------------------\n\nTITLE: Illustrating Banana Project Structure (Text)\nDESCRIPTION: This text snippet displays a common directory layout for a Banana project. It highlights key files like `Dockerfile`, `banana_config.json`, `requirements.txt`, and the `src` directory containing application code (`app.py`) and potentially helper scripts (`download.py`). This structure is presented for comparison with the RunPod project structure during migration.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/migrations/banana/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Dockerfile               # Docker configuration\n├── README.md                # Project documentation\n├── banana_config.json       # Configuration settings\n├── requirements.txt         # Dependencies\n└── src\n    ├── app.py               # Main application code\n    └── download.py          # Download script\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Registry via CLI\nDESCRIPTION: Authenticates the user with a Docker registry like Docker Hub using the command line. The first command initiates an interactive login prompt, while the second specifies the username directly. Credentials are saved locally.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/docker-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\ndocker login\ndocker login -u myusername\n```\n\n----------------------------------------\n\nTITLE: Creating Test Input Data (JSON)\nDESCRIPTION: Creates a JSON file named `test_input.json` containing sample input data for the handler function. This file is used by the RunPod SDK for local testing when the handler script is run directly.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"input\": {\n        \"prompt\": \"Hey there!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Test Request (JSON)\nDESCRIPTION: Shows the default JSON payload used in the RunPod web interface's 'Requests' tab for testing the deployed endpoint. It provides a simple input structure with a 'prompt' field.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/get-started.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"input\": {\n        \"prompt\": \"Hello World\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing runpodctl on MacOS ARM architecture\nDESCRIPTION: Downloads, makes executable, and installs the RunPod CLI tool on MacOS systems with ARM architecture (e.g., M1/M2 chips).\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget --quiet --show-progress https://github.com/runpod/runpodctl/releases/download/v1.14.3/runpodctl-darwin-arm64 -O runpodctl && chmod +x runpodctl && sudo mv runpodctl /usr/local/bin/runpodctl\n```\n\n----------------------------------------\n\nTITLE: Running a Basic Python Print Statement in JupyterLab\nDESCRIPTION: A simple Python print statement to verify that your RunPod JupyterLab environment is working correctly. This is the first test code to run after deploying a Pod on RunPod.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/get-started.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello, world!\")\n```\n\n----------------------------------------\n\nTITLE: Deploying RunPod Project as an Endpoint using runpodctl\nDESCRIPTION: This command deploys a serverless endpoint for the RunPod project located in the current folder. It transforms a local project into a live serverless endpoint that can be accessed remotely.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_deploy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project deploy [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to the content are reflected live without needing to restart the server.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Using runpodctl project build Command\nDESCRIPTION: This command builds a local Dockerfile for the project in the current directory. The generated Dockerfile can be used to build an image and deploy it to any API server.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl project build [flags]\n```\n\n----------------------------------------\n\nTITLE: Printing Current Time with Entrypoint Script - Bash - Bash\nDESCRIPTION: This snippet is a shell script designed to act as a Docker container's entrypoint. When executed, it prints the current system date and time using the date command. There are no dependencies apart from a POSIX-compatible shell (sh) and the date utility, both present in busybox. The script receives no input and outputs a timestamped string; customization should be done within the script as needed.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/introduction/containers/create-dockerfiles.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/sh\\necho \\\"The time is: $(date)\\\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Python Code in Markdown Files\nDESCRIPTION: Command to find all Markdown files in the Git repository and format Python code examples in them using blacken-docs.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit ls-files -z -- '*.md' | xargs -0 blacken-docs\n```\n\n----------------------------------------\n\nTITLE: Linting Documentation Using Vale\nDESCRIPTION: Commands to lint documentation files using Vale. Provides examples for linting specific folders, files, or the entire repository.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvale path/to/docs/\n# or\nvale path/to/*.md\n```\n\n----------------------------------------\n\nTITLE: Starting a Pod using RunPod CLI\nDESCRIPTION: Illustrates how to start a stopped Pod using the RunPod CLI. This command requires the Pod ID to be specified.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/manage-pods.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl start pod $RUNPOD_POD_ID\n```\n\n----------------------------------------\n\nTITLE: Sample Serverless Worker Output for Successful Job (Plaintext)\nDESCRIPTION: Displays the expected output in plaintext when locally invoking the serverless function with valid input. Shows log lines for initializing the worker, processing the job, returning the output, and job completion. Useful for reference when verifying successful setup and execution.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/tutorials/sdks/python/101/00_hello.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--- Starting Serverless Worker |  Version 1.6.2 ---\nINFO   | test_input set, using test_input as job input.\nDEBUG  | Retrieved local job: {'id': 'some-id', 'input': {'number': 2}}\nINFO   | some-id | Started.\nDEBUG  | some-id | Handler output: True\nDEBUG  | some-id | run_job return: {'output': True}\nINFO   | Job some-id completed successfully.\nINFO   | Job result: {'output': True}\nINFO   | Local testing complete, exiting.\n```\n\n----------------------------------------\n\nTITLE: Installing blacken-docs Python Formatter\nDESCRIPTION: Command to install blacken-docs, a tool for formatting Python code examples embedded in documentation.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install blacken-docs\n```\n\n----------------------------------------\n\nTITLE: Available Options for RunPodCTL Version Command\nDESCRIPTION: This code block shows the available options for the 'version' command. Currently, only the help flag is available.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_version.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies with Yarn\nDESCRIPTION: Command to install all the required dependencies for the Docusaurus website using Yarn package manager.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Available Options for the runpodctl project deploy Command\nDESCRIPTION: This snippet shows the available options for the 'runpodctl project deploy' command. Currently, only the help flag (-h, --help) is available, which provides information about the command usage.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_project_deploy.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for deploy\n```\n\n----------------------------------------\n\nTITLE: Updating CPU and GPU Information\nDESCRIPTION: Commands to update CPU and GPU type information in the documentation using predefined Yarn scripts.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn gpu-types\nyarn cpu-types\n```\n\n----------------------------------------\n\nTITLE: Linting All Documentation Files\nDESCRIPTION: Command to lint all documentation files in the repository using a predefined Yarn script.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatter with Yarn\nDESCRIPTION: Command to format code examples in documentation using a predefined Yarn script.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n```\n\n----------------------------------------\n\nTITLE: RunPod Pod Removal Command Options\nDESCRIPTION: Available command line options for the pod removal command, showing the help flag option.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_remove_pod.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for pod\n```\n\n----------------------------------------\n\nTITLE: Example Initial JSON Response from RunPod Endpoint\nDESCRIPTION: Provides an example of the initial JSON response received immediately after submitting a request to a RunPod endpoint, particularly when using asynchronous calls or during the initial moments of a synchronous call. It includes a unique job 'id' and the initial 'status', typically 'IN_QUEUE'.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/serverless/endpoints/send-requests.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"6de99fd1-4474-4565-9243-694ffeb65218-u1\",\n  \"status\": \"IN_QUEUE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using runpodctl create pods Command\nDESCRIPTION: The basic command syntax for creating pods on RunPod using the CLI tool.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_create_pods.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl create pods [flags]\n```\n\n----------------------------------------\n\nTITLE: Building the Website for Production\nDESCRIPTION: Command to build the Docusaurus website for production deployment.\nSOURCE: https://github.com/runpod/docs/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Resuming a Stopped Pod\nDESCRIPTION: Command to resume a Pod that was previously stopped, bringing it back to a running state.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/manage-pods.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl start pod [POD_ID]\n```\n\n----------------------------------------\n\nTITLE: Executing RunPodCTL Update Command in Bash\nDESCRIPTION: This command updates RunPodCTL to the latest version. It takes no additional arguments but can be run with the help flag for more information.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/runpodctl/reference/runpodctl_update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl update [flags]\n```\n\n----------------------------------------\n\nTITLE: Initial Job Response Format\nDESCRIPTION: Example response showing the job ID and initial status after submitting a job to the API endpoint.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/api/api-endpoints.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"c80ffee4-f315-4e25-a146-0f3d98cf024b\",\n  \"status\": \"IN_QUEUE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet renders the DocCardList component within the JSX structure. It's used to display a list of integration options or related documentation cards.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/integrations/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Receiving File with runpodctl in Bash\nDESCRIPTION: Command to receive a file using runpodctl with a generated one-time code for secure transfer.\nSOURCE: https://github.com/runpod/docs/blob/main/docs/pods/storage/transfer-files.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrunpodctl receive 8338-galileo-collect-fidel\n```"
  }
]