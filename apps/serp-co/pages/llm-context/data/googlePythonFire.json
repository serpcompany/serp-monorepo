[
  {
    "owner": "google",
    "repo": "python-fire",
    "content": "TITLE: Creating a CLI from a function using Python Fire\nDESCRIPTION: This code snippet demonstrates how to create a simple command-line interface (CLI) from a Python function using the Python Fire library.  It imports the `fire` library, defines a `hello` function that accepts an optional name argument, and then calls `fire.Fire(hello)` to turn the function into a CLI. From the command line, the function can be called with or without the name argument. The code requires the `fire` library to be installed.\nSOURCE: https://github.com/google/python-fire/blob/master/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef hello(name=\"World\"):\n  return \"Hello %s!\" % name\n\nif __name__ == '__main__':\n  fire.Fire(hello)\n```\n\n----------------------------------------\n\nTITLE: Exposing Program Contents to CLI with Fire\nDESCRIPTION: This example demonstrates the simplest way to use Python Fire: calling `fire.Fire()` at the end of a Python program. This exposes the entire program's contents to the command line, allowing any function to be called as a command.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef hello(name):\n  return f'Hello {name}!'\n\nif __name__ == '__main__':\n  fire.Fire()\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI from a Function with Fire in Python\nDESCRIPTION: This code demonstrates how to create a simple command-line interface (CLI) from a Python function using the `fire` library. The `hello` function takes an optional `name` argument and returns a greeting.  The `fire.Fire(hello)` call turns the function into a CLI where the `name` argument can be specified via the command line. Dependencies: `fire`.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef hello(name=\"World\"):\n  return \"Hello %s!\" % name\n\nif __name__ == '__main__':\n  fire.Fire(hello)\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI from a class using Python Fire\nDESCRIPTION: This code snippet demonstrates how to create a command-line interface (CLI) from a Python class using the Python Fire library. It imports the `fire` library, defines a `Calculator` class with a `double` method, and then calls `fire.Fire(Calculator)` to turn the class into a CLI. From the command line, the `double` method can be called using `python calculator.py double <number>`. The code requires the `fire` library to be installed.\nSOURCE: https://github.com/google/python-fire/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\nclass Calculator(object):\n  \"\"\"A simple calculator class.\"\"\"\n\n  def double(self, number):\n    return 2 * number\n\nif __name__ == '__main__':\n  fire.Fire(Calculator)\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI from a Class with Fire in Python\nDESCRIPTION: This code demonstrates how to create a CLI from a Python class using the `fire` library. The `Calculator` class has a `double` method that multiplies a number by two. The `fire.Fire(Calculator)` call turns the class into a CLI where the `double` method can be called with a specified `number`.  Dependencies: `fire`.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\nclass Calculator(object):\n  \"\"\"A simple calculator class.\"\"\"\n\n  def double(self, number):\n    return 2 * number\n\nif __name__ == '__main__':\n  fire.Fire(Calculator)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fire CLI from a component\nDESCRIPTION: This turns the provided `component` (an object, function, or class) into a Fire command-line interface (CLI). Only the methods and attributes of `component` are accessible via the command line.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/api.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfire.Fire(component)\n```\n\n----------------------------------------\n\nTITLE: Calling a Specific Function with Fire\nDESCRIPTION: This example shows how to expose only a specific function to the command line by passing the function itself as an argument to `fire.Fire()`. This limits the available commands to only the specified function.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef hello(name):\n  return f'Hello {name}!'\n\nif __name__ == '__main__':\n  fire.Fire(hello)\n```\n\n----------------------------------------\n\nTITLE: Exposing Commands via Object with Fire\nDESCRIPTION: This example exposes an object's methods to the command line. Each method of the object becomes a separate command.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\nclass Calculator(object):\n\n  def add(self, x, y):\n    return x + y\n\n  def multiply(self, x, y):\n    return x * y\n\nif __name__ == '__main__':\n  calculator = Calculator()\n  fire.Fire(calculator)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fire CLI from the current module\nDESCRIPTION: This turns the current Python module into a Fire command-line interface (CLI). All functions and classes defined in the module become accessible via the command line. No arguments are passed to fire.Fire()\nSOURCE: https://github.com/google/python-fire/blob/master/docs/api.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfire.Fire()\n```\n\n----------------------------------------\n\nTITLE: Exposing Multiple Commands with Fire\nDESCRIPTION: This example demonstrates exposing multiple functions to the command line. When `fire.Fire()` is called without arguments, all functions in the script become available as commands.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef add(x, y):\n  return x + y\n\ndef multiply(x, y):\n  return x * y\n\nif __name__ == '__main__':\n  fire.Fire()\n```\n\n----------------------------------------\n\nTITLE: Exposing Selected Commands with Dict\nDESCRIPTION: This example selectively exposes functions to the command line using a dictionary. The keys of the dictionary become the command names, and the values are the corresponding functions.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef add(x, y):\n  return x + y\n\ndef multiply(x, y):\n  return x * y\n\nif __name__ == '__main__':\n  fire.Fire({\n      'add': add,\n      'multiply': multiply,\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining a Python function for Fire CLI\nDESCRIPTION: This code snippet defines a simple Python function named 'double' that takes a value as input and returns its double. This function can be exposed as a command in a Fire CLI, allowing users to call it from the command line with positional or named arguments.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/using-cli.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef double(value=0):\n  return 2 * value\n```\n\n----------------------------------------\n\nTITLE: Running a Python module as a Fire CLI\nDESCRIPTION: This command allows you to run a Python module as a Fire CLI without modifying its code.  It utilizes the `-m` flag to execute the `fire` module on the specified module or filepath, treating it as a CLI.  Arguments can be passed after the module name.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/api.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m fire <module> <arguments>\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m fire <filepath> <arguments>\n```\n\n----------------------------------------\n\nTITLE: Running the function CLI from the command line\nDESCRIPTION: This shows how the `hello` function turned into a CLI can be invoked from the command line using python. It demonstrates passing arguments to the function via command line flags, as well as the usage of `--help` to show available options. These commands assume the python file is named `hello.py`.\nSOURCE: https://github.com/google/python-fire/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello.py  # Hello World!\npython hello.py --name=David  # Hello David!\npython hello.py --help  # Shows usage information.\n```\n\n----------------------------------------\n\nTITLE: Running the Function CLI from the Command Line (Bash)\nDESCRIPTION: These commands demonstrate how to interact with the CLI created from the `hello` function. The first command runs the script with the default `name`, the second provides a custom `name` via a command-line argument, and the third shows the usage instructions.  The script should be run from the directory containing `hello.py`. The output will be printed to standard output.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello.py  # Hello World!\npython hello.py --name=David  # Hello David!\npython hello.py --help  # Shows usage information.\n```\n\n----------------------------------------\n\nTITLE: Running the class CLI from the command line\nDESCRIPTION: This shows how the `Calculator` class turned into a CLI can be invoked from the command line using python. It demonstrates calling the `double` method of the class with a number passed as a command line argument, using both positional and named arguments. These commands assume the python file is named `calculator.py`.\nSOURCE: https://github.com/google/python-fire/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython calculator.py double 10  # 20\npython calculator.py double --number=15  # 30\n```\n\n----------------------------------------\n\nTITLE: Running the Class CLI from the Command Line (Bash)\nDESCRIPTION: These commands demonstrate how to interact with the CLI created from the `Calculator` class.  The first command calls the `double` method with the argument `10`, the second provides the argument via `--number`. The script should be run from the directory containing `calculator.py`. The output will be printed to standard output.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython calculator.py double 10  # 20\npython calculator.py double --number=15  # 30\n```\n\n----------------------------------------\n\nTITLE: Exposing Commands via Class with Fire\nDESCRIPTION: This example exposes a class's methods to the command line. When the class itself is passed to `fire.Fire()`, Fire instantiates the class and exposes its methods.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\nclass Calculator(object):\n\n  def add(self, x, y):\n    return x + y\n\n  def multiply(self, x, y):\n    return x * y\n\nif __name__ == '__main__':\n  fire.Fire(Calculator)\n```\n\n----------------------------------------\n\nTITLE: Exposing Class with Constructor Arguments\nDESCRIPTION: This example demonstrates how to pass arguments to the class constructor when using `fire.Fire()` with a class.  Constructor arguments must be passed using the `--flag` syntax on the command line.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\nclass BrokenCalculator(object):\n\n  def __init__(self, offset=1):\n      self._offset = offset\n\n  def add(self, x, y):\n    return x + y + self._offset\n\n  def multiply(self, x, y):\n    return x * y + self._offset\n\nif __name__ == '__main__':\n  fire.Fire(BrokenCalculator)\n```\n\n----------------------------------------\n\nTITLE: Grouping Commands with Classes\nDESCRIPTION: This example shows how to group commands by using nested classes. The `Pipeline` class contains instances of `IngestionStage` and `DigestionStage`, allowing commands to be accessed like `pipeline ingestion run`.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass IngestionStage(object):\n\n  def run(self):\n    return 'Ingesting! Nom nom nom...'\n\nclass DigestionStage(object):\n\n  def run(self, volume=1):\n    return ' '.join(['Burp!'] * volume)\n\n  def status(self):\n    return 'Satiated.'\n\nclass Pipeline(object):\n\n  def __init__(self):\n    self.ingestion = IngestionStage()\n    self.digestion = DigestionStage()\n\n  def run(self):\n    ingestion_output = self.ingestion.run()\n    digestion_output = self.digestion.run()\n    return [ingestion_output, digestion_output]\n\nif __name__ == '__main__':\n  fire.Fire(Pipeline)\n```\n\n----------------------------------------\n\nTITLE: Building Class with Fire\nDESCRIPTION: Defines a `Building` class with a constructor and a `climb_stairs` method. Demonstrates how to initialize the class and call the method using Python Fire, with arguments passed via command-line flags. Shows the interchangeability of hyphens and underscores in flag names.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\nclass Building(object):\n\n  def __init__(self, name, stories=1):\n    self.name = name\n    self.stories = stories\n\n  def climb_stairs(self, stairs_per_story=10):\n    for story in range(self.stories):\n      for stair in range(1, stairs_per_story):\n        yield stair\n      yield 'Phew!'\n    yield 'Done!'\n\nif __name__ == '__main__':\n  fire.Fire(Building)\n```\n\n----------------------------------------\n\nTITLE: Passing Different Data Types to Fire CLI (bash)\nDESCRIPTION: Shows how to pass various Python data types (int, float, string, tuple, list, dict, bool) as command-line arguments to a Fire CLI and how Fire infers the correct types.  Demonstrates the importance of proper quoting and escaping.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py 10\nint\n$ python example.py 10.0\nfloat\n$ python example.py hello\nstr\n$ python example.py '(1,2)'\ntuple\n$ python example.py [1,2]\nlist\n$ python example.py True\nbool\n$ python example.py {name:David}\ndict\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py 10\nint\n$ python example.py \"10\"\nint\n$ python example.py '\"10\"'\nstr\n$ python example.py \"'10'\"\nstr\n$ python example.py \\\"10\\\"\nstr\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py '{\"name\": \"David Bieber\"}'  # Good! Do this.\ndict\n$ python example.py {\"name\":'\"David Bieber\"'}  # Okay.\ndict\n$ python example.py {\"name\":\"David Bieber\"}  # Wrong. This is parsed as a string.\nstr\n$ python example.py {\"name\": \"David Bieber\"}  # Wrong. This isn't even treated as a single argument.\n<error>\n$ python example.py '{\"name\": \"Justin Bieber\"}'  # Wrong. This is not the Bieber you're looking for. (The syntax is fine though :))\ndict\n```\n\n----------------------------------------\n\nTITLE: Calling Building Class with Fire (bash)\nDESCRIPTION: Demonstrates how to instantiate the `Building` class and call the `climb_stairs` method from the command line using Python Fire. It shows various ways to pass arguments, including positional and named arguments, and the use of hyphens and underscores in flag names.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py --name=\"Sherrerd Hall\" --stories=3 climb_stairs 10\n$ python example.py --name=\"Sherrerd Hall\" climb_stairs --stairs_per_story=10\n$ python example.py --name=\"Sherrerd Hall\" climb_stairs --stairs-per-story 10\n$ python example.py climb-stairs --stairs-per-story 10 --name=\"Sherrerd Hall\"\n```\n\n----------------------------------------\n\nTITLE: Chaining Function Calls with Fire\nDESCRIPTION: This example demonstrates how to chain function calls in the command line using Fire. By having methods return `self`, you can chain methods together, such as `move 3 3 on move 3 6 on`.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\nclass BinaryCanvas(object):\n  \"\"\"A canvas with which to make binary art, one bit at a time.\"\"\"\n\n  def __init__(self, size=10):\n    self.pixels = [[0] * size for _ in range(size)]\n    self._size = size\n    self._row = 0  # The row of the cursor.\n    self._col = 0  # The column of the cursor.\n\n  def __str__(self):\n    return '\\n'.join(' '.join(str(pixel) for pixel in row) for row in self.pixels)\n\n  def show(self):\n    print(self)\n    return self\n\n  def move(self, row, col):\n    self._row = row % self._size\n    self._col = col % self._size\n    return self\n\n  def on(self):\n    return self.set(1)\n\n  def off(self):\n    return self.set(0)\n\n  def set(self, value):\n    self.pixels[self._row][self._col] = value\n    return self\n\nif __name__ == '__main__':\n  fire.Fire(BinaryCanvas)\n```\n\n----------------------------------------\n\nTITLE: Using Fire Without Code Changes\nDESCRIPTION: This shows how to use Python Fire with a Python file that doesn't even import the `fire` library. This is done by using `python -m fire` and specifying the module or file path. It requires the `--name` argument to be explicitly passed in the command line.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef hello(name):\n  return f'Hello {name}!'\n```\n\n----------------------------------------\n\nTITLE: Boolean Arguments with Fire (bash)\nDESCRIPTION: Demonstrates how to pass boolean arguments to a Fire CLI, using both explicit values (True/False) and flag syntax (--name/--noname). Shows potential pitfalls and how to avoid them.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py --obj=True\nbool\n$ python example.py --obj=False\nbool\n$ python example.py --obj\nbool\n$ python example.py --noobj\nbool\n```\n\n----------------------------------------\n\nTITLE: Order Items by Length Function with Fire\nDESCRIPTION: Defines a function `order_by_length` that takes a variable number of arguments (*items) and orders them by length, breaking ties alphabetically.  Shows how to expose this function as a command-line interface using Python Fire.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef order_by_length(*items):\n  \"\"\"Orders items by length, breaking ties alphabetically.\"\"\"\n  sorted_items = sorted(items, key=lambda item: (len(str(item)), str(item)))\n  return ' '.join(sorted_items)\n\nif __name__ == '__main__':\n  fire.Fire(order_by_length)\n```\n\n----------------------------------------\n\nTITLE: Calling Order Items Function with Fire (bash)\nDESCRIPTION: Demonstrates how to call the `order_by_length` function from the command line using Python Fire, passing a variable number of arguments. Also demonstrates the use of a separator to process the result of the function.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py dog cat elephant\ncat dog elephant\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py dog cat elephant - upper\nCAT DOG ELEPHANT\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py dog cat elephant upper\ncat dog upper elephant\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python example.py dog cat elephant X upper -- --separator=X\nCAT DOG ELEPHANT\n```\n\n----------------------------------------\n\nTITLE: Using separator in Bash to call the Python function\nDESCRIPTION: This code snippet demonstrates how to call the Python function 'display' from the Bash command line using Fire CLI. It shows various examples of passing arguments and using the separator ('-') to control function evaluation with default values.  It also demonstrates how to change the separator to 'SEP' to allow passing '-' as an argument.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/using-cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Here's what you can do from Bash (Note: the default separator is the hyphen -)\ndisplay hello                         # hello!\ndisplay hello upper                   # helloupper\ndisplay hello - upper                 # HELLO!\ndisplay - SEP upper -- --separator SEP    # -!\n```\n\n----------------------------------------\n\nTITLE: Argument Type Detection with Fire\nDESCRIPTION: Demonstrates how Python Fire automatically determines the type of arguments passed from the command line. Uses a lambda function to print the type name of the input object.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport fire\nfire.Fire(lambda obj: type(obj).__name__)\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties using Fire\nDESCRIPTION: This example demonstrates how to access object properties using Fire. When an object is passed to `fire.Fire()`, its properties can be accessed from the command line using the `--property_name` syntax.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom airports import airports\n\nimport fire\n\nclass Airport(object):\n\n  def __init__(self, code):\n    self.code = code\n    self.name = dict(airports).get(self.code)\n    self.city = self.name.split(',')[0] if self.name else None\n\nif __name__ == '__main__':\n  fire.Fire(Airport)\n```\n\n----------------------------------------\n\nTITLE: Async Function with Fire\nDESCRIPTION: Defines an asynchronous function `count_to_ten` that counts to ten with a one-second delay between each number. Demonstrates how to use Python Fire to expose an asynchronous function as a command-line interface. Requires the `asyncio` library.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def count_to_ten():\n  for i in range(1, 11):\n    await asyncio.sleep(1)\n    print(i)\n\nif __name__ == '__main__':\n  fire.Fire(count_to_ten)\n```\n\n----------------------------------------\n\nTITLE: Using Main Function with Fire\nDESCRIPTION: This demonstrates how to encapsulate the `fire.Fire()` call within a `main()` function. This is a common pattern in Python and can be useful for organizing code or when using entry points.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n\ndef hello(name):\n  return f'Hello {name}!'\n\ndef main():\n  fire.Fire(hello)\n\nif __name__ == '__main__':\n  main()\n```\n\n----------------------------------------\n\nTITLE: Simplest Hello World with Fire\nDESCRIPTION: This shows the most basic example, exposing simple variables to the command line. This works by making all the variables inside the script available as commands when `fire.Fire()` is invoked without arguments.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport fire\nenglish = 'Hello World'\nspanish = 'Hola Mundo'\nfire.Fire()\n```\n\n----------------------------------------\n\nTITLE: Defining a Python function with default arguments\nDESCRIPTION: This snippet defines a Python function named 'display' that takes two arguments: arg1 and an optional arg2 with a default value of '!'. It concatenates the two arguments and returns the result.  This function is used to demonstrate the use of separators in Fire CLI to force function evaluation with default values.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/using-cli.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Here's the Python function\ndef display(arg1, arg2='!'):\n  return arg1 + arg2\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization with __str__\nDESCRIPTION: This explains that the `__str__` method can be used to customize how objects are serialized and printed when using Fire. If a custom `__str__` method exists, the object will be serialized and printed. Otherwise the help screen for the object is shown.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/guide.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Installing Python Fire\nDESCRIPTION: This command installs the Python Fire library from the Python Package Index (PyPI) using pip.  It allows you to use Fire in your Python projects.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/api.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install fire\n```\n\n----------------------------------------\n\nTITLE: Installing Python Fire with pip\nDESCRIPTION: This command installs the Python Fire package using pip, the Python package installer. It downloads the package from PyPI and installs it along with its dependencies.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install fire\n```\n\n----------------------------------------\n\nTITLE: Installing Python Fire with conda\nDESCRIPTION: This command installs Python Fire using conda, a package, dependency, and environment management system. The `-c conda-forge` flag specifies the conda-forge channel, a community-led collection of packages.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install fire -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Installing Python Fire from source\nDESCRIPTION: This command installs Python Fire from the source code. It first clones the repository and then uses `setup.py` to install the package. This allows for customization and access to the latest unreleased features.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Importing Python Fire\nDESCRIPTION: This imports the fire module, which is necessary before you can call `fire.Fire()` to create a command-line interface. It makes the fire functions and classes available for use.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/api.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport fire\n```\n\n----------------------------------------\n\nTITLE: Installing Python Fire from source for development\nDESCRIPTION: This command installs Python Fire from the source code in development mode. It uses `setup.py develop`, which creates links to the source code instead of copying it, allowing for immediate testing of changes.\nSOURCE: https://github.com/google/python-fire/blob/master/docs/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest\nDESCRIPTION: This snippet shows how to run the tests for Python Fire locally using pytest. It assumes that the test dependencies are installed, as specified in setup.py (e.g. pytest, mock, termcolor, and hypothesis). Running `pytest` in the root directory executes the test suite.\nSOURCE: https://github.com/google/python-fire/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Linting Python Fire code with pylint\nDESCRIPTION: This snippet demonstrates how to lint the Python Fire codebase using pylint. Running `pylint fire` in the root directory checks the code for style and potential errors, helping to ensure code quality and adherence to the project's coding standards.\nSOURCE: https://github.com/google/python-fire/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npylint fire\n```"
  }
]