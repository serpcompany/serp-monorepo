[
  {
    "owner": "prisma",
    "repo": "docs",
    "content": "TITLE: Creating Nested User and Post Records with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a User record with associated Post records using a nested write query in Prisma Client. It includes error handling and proper disconnection from the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '../generated/prisma'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  const user = await prisma.user.create({\n    data: {\n      name: 'Bob',\n      email: 'bob@prisma.io',\n      posts: {\n        create: [\n          {\n            title: 'Hello World',\n            published: true\n          },\n          {\n            title: 'My second post',\n            content: 'This is still a draft'\n          }\n        ],\n      },\n    },\n  })\n  console.log(user)\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in Node.js\nDESCRIPTION: Sets up the Prisma Client instance with error handling and connection management. The code imports PrismaClient, instantiates it, defines an async main function for database operations, and ensures proper disconnection after queries are completed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Model for Post, Profile, and User\nDESCRIPTION: This Prisma schema defines three models: Post, Profile, and User. It includes relationships between the models and specifies field types and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client API for Data Access\nDESCRIPTION: This snippet shows how to import and initialize Prisma Client, and provides examples of using its API for CRUD operations on the User model. It demonstrates methods like findUnique, findMany, create, update, delete, and upsert.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n// or\n// const { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\n// use inside an `async` function to `await` the result\nawait prisma.user.findUnique(...)\nawait prisma.user.findMany(...)\nawait prisma.user.create(...)\nawait prisma.user.update(...)\nawait prisma.user.delete(...)\nawait prisma.user.upsert(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Data with Prisma Client in Node.js\nDESCRIPTION: This snippet shows how to create a new user with associated post and profile data using Prisma Client's nested write functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Prisma Migrate Dev\nDESCRIPTION: Examples of using the 'prisma migrate dev' command to apply migrations and create new ones based on schema changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_23\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate dev\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate dev --create-only\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate Development Command\nDESCRIPTION: Terminal command to create a new migration for schema changes and synchronize database schema\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name added-tags\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Database Source\nDESCRIPTION: Defines the database connection configuration in the Prisma schema file using environment variables for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Generation for Node.js Queries\nDESCRIPTION: Generates Prisma Client, a type-safe query builder to interact with the database, to be used in Node.js applications.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema Datasource\nDESCRIPTION: Configuration block for specifying the database provider and connection URL in the Prisma schema file\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/_prisma-init-partial.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n    provider = \"${props.datasource.toLowerCase()}\"\n    url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Single User Record with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a single user record using the Prisma Client create() method. It specifies the email and name fields for the new user.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    email: 'elsa@prisma.io',\n    name: 'Elsa Prisma',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgreSQL Data Source in Prisma Schema\nDESCRIPTION: Demonstrates how to configure a PostgreSQL data source in a Prisma schema file. It includes the provider and connection URL with authentication details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component Displaying User Data from Prisma\nDESCRIPTION: This Next.js page component uses Prisma Client to fetch all users from the database and display them in a list, showing their ID, name, and email.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient();\n\nexport default async function Page() {\n  const users = await prisma.user.findMany();\n\n  return (\n    <main className=\"p-8\">\n      <h1 className=\"text-2xl font-bold mb-4\">Users</h1>\n      <ul className=\"space-y-2\">\n        {users.length > 0 ? (\n          users.map(user => (\n            <li key={user.id} className=\"p-4 border rounded shadow-sm\">\n              <p><strong>ID:</strong> {user.id}</p>\n              <p><strong>Name:</strong> {user.name || 'N/A'}</p>\n              <p><strong>Email:</strong> {user.email}</p>\n            </li>\n          ))\n        ) : (\n          <p>No users found.</p>\n        )}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL schema fragment illustrating query and mutation types with Prisma imports\nDESCRIPTION: Defines a GraphQL schema snippet using SDL syntax with imports of generated Prisma GraphQL types. Includes input type UserUniqueInput for identifying users, followed by Query and Mutation types exposing operations such as 'posts', 'user', 'users', 'createUser', 'createDraft', 'updateBio', and 'addPostToCategories'. This schema guides client interactions with Prisma-backed fields. No implementation details included; dependencies include Prisma generated GraphQL files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\n# import Post from './generated/prisma.graphql'\n# import User from './generated/prisma.graphql'\n# import Category from './generated/prisma.graphql'\n\ninput UserUniqueInput {\n  id: String\n  email: String\n}\n\ntype Query {\n  posts(searchString: String): [Post!]!\n  user(userUniqueInput: UserUniqueInput!): User\n  users(where: UserWhereInput, orderBy: Enumerable<UserOrderByInput>, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n}\n\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  createDraft(title: String!, content: String, authorId: ID!): Post\n  updateBio(userUniqueInput: UserUniqueInput!, bio: String!): User\n  addPostToCategories(postId: String!, categoryIds: [String!]!): Post\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Relations Count with Select in Prisma Client\nDESCRIPTION: This query uses select instead of include to return only the post count for each user without including any other fields. This is useful when you only need the count information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithCount = await prisma.user.findMany({\n  select: {\n    _count: {\n      select: { posts: true },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _count: {\n    posts: 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Prisma 1 Data Model with Relations and Enums\nDESCRIPTION: This GraphQL code snippet defines a Prisma 1 data model with four types (User, Post, Profile, Category) and their relationships. It includes features like ID fields, unique constraints, default values, and various relation types (1-1, 1-n, m-n).\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  email: String @unique\n  name: String!\n  role: Role! @default(value: CUSTOMER)\n  jsonData: Json\n  profile: Profile\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  title: String!\n  content: String\n  published: Boolean! @default(value: false)\n  author: User @relation(link: TABLE)\n  categories: [Category!]!\n}\n\ntype Profile {\n  id: ID! @id\n  bio: String\n  user: User! @relation(link: INLINE)\n}\n\ntype Category {\n  id: ID! @id\n  name: String!\n  posts: [Post!]!\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateBio resolver with Prisma Client\nDESCRIPTION: Implementation of the updateBio mutation resolver using Prisma Client. This resolver updates a user's profile bio by using the nested update functionality to modify the related profile record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    //highlight-start\n    updateBio: (_, args, context, info) => {\n      return context.prisma.user.update({\n        data: {\n          profile: {\n            update: { bio: args.bio },\n          },\n        },\n        where: args.userUniqueInput,\n      })\n    },\n    //highlight-end\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating PrismaClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the PrismaClient from the @prisma/client package and create a new instance in TypeScript. It's the recommended way to set up Prisma Client in a TypeScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/015-instantiate-prisma-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Database Tables\nDESCRIPTION: SQL commands to create User, Post, and Profile tables with primary keys, foreign keys, and various column constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE User (\n  id INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE Post (\n  id INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  createdAt TIMESTAMP NOT NULL DEFAULT now(),\n  content TEXT,\n  published BOOLEAN NOT NULL DEFAULT false,\n  authorId INTEGER NOT NULL,\n  FOREIGN KEY (authorId) REFERENCES User(id)\n);\n\nCREATE TABLE Profile (\n  id INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,\n  bio TEXT,\n  userId INTEGER UNIQUE NOT NULL,\n  FOREIGN KEY (userId) REFERENCES User(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Prisma Schema for New Project with Data Models\nDESCRIPTION: Comprehensive Prisma schema for a new project that includes datasource, generator, and data models for a blog application with Post and User entities. This schema defines the relationships between models and field attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\n// schema.prisma\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://janedoe:janedoe@localhost:5432/hello-prisma\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String? @map(\"post_content\")\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Nested Writes with Transaction API in Prisma\nDESCRIPTION: Demonstrates how to create multiple teams with their respective members using a combination of nested writes for dependent operations and the $transaction API to ensure all operations succeed or fail together.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Nested write\nconst createOne = prisma.team.create({\n  data: {\n    name: 'Aurora Adventures',\n    members: {\n      create: {\n        email: 'alice@prisma.io',\n      },\n    },\n  },\n})\n\n// Nested write\nconst createTwo = prisma.team.create({\n  data: {\n    name: 'Cool Crew',\n    members: {\n      create: {\n        email: 'elsa@prisma.io',\n      },\n    },\n  },\n})\n\n// $transaction([]) API\nawait prisma.$transaction([createTwo, createOne])\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Record with Prisma Client\nDESCRIPTION: Query that finds and updates a User record by email, changing the name field and returning the updated record with all its fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nconst updateUser = await prisma.user.update({\n  where: {\n    email: 'viola@prisma.io',\n  },\n  data: {\n    name: 'Viola the Magnificent',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating User with Multiple Posts using Nested createMany\nDESCRIPTION: Creates a new user with multiple posts in a single operation using nested createMany. Includes the posts in the returned data using the include option.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.create({\n  data: {\n    email: 'saanvi@prisma.io',\n    posts: {\n      createMany: {\n        data: [{ title: 'My first post' }, { title: 'My second post' }],\n      },\n    },\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Related Field Values in Prisma Client\nDESCRIPTION: Query that filters users by both their own email field and a condition on their related posts, returning users with prisma.io emails who have at least one unpublished post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    email: {\n      endsWith: 'prisma.io',\n    },\n    posts: {\n      some: {\n        published: false,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple User Records with Prisma Client in TypeScript\nDESCRIPTION: This example shows how to create multiple user records in a single query using the Prisma Client createMany() method. It also demonstrates the use of skipDuplicates option to handle duplicate unique keys.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst createMany = await prisma.user.createMany({\n  data: [\n    { name: 'Bob', email: 'bob@prisma.io' },\n    { name: 'Bobo', email: 'bob@prisma.io' }, // Duplicate unique key!\n    { name: 'Yewande', email: 'yewande@prisma.io' },\n    { name: 'Angelique', email: 'angelique@prisma.io' },\n  ],\n  skipDuplicates: true, // Skip 'Bobo'\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating PrismaClient in JavaScript\nDESCRIPTION: This snippet shows how to require the PrismaClient from the @prisma/client package and create a new instance in JavaScript. It's the standard way to set up Prisma Client in a JavaScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/015-instantiate-prisma-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic User List with Prisma in Next.js\nDESCRIPTION: This updated home page dynamically fetches users from the database using Prisma Client and displays them in a list. It imports the Prisma client, queries all users, and maps through them to create list items.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n//add-start\nimport prisma from '@/lib/prisma'\n//add-end\n\nexport default async function Home() {\n  //add-start\n  const users = await prisma.user.findMany();\n  //add-end\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center -mt-16\">\n      <h1 className=\"text-4xl font-bold mb-8 font-[family-name:var(--font-geist-sans)] text-[#333333]\">\n        Superblog\n      </h1>\n      <ol className=\"list-decimal list-inside font-[family-name:var(--font-geist-sans)]\">\n        //add-start\n        {users.map((user) => (\n          <li key={user.id} className=\"mb-2\">\n            {user.name}\n          </li>\n        ))}\n        //add-end\n      </ol>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Posts using Nested Write in Prisma\nDESCRIPTION: This snippet demonstrates a nested write operation to create a new user with two associated posts in a single transaction using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUser: User = await prisma.user.create({\n  data: {\n    email: 'alice@prisma.io',\n    posts: {\n      create: [\n        { title: 'Join the Prisma Discord at https://pris.ly/discord' },\n        { title: 'Follow @prisma on Twitter' },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Posts List with Prisma in Next.js\nDESCRIPTION: This updated posts page dynamically fetches posts and their authors from the database using Prisma Client. It uses the 'include' option to get related author data and displays both post titles and author names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport prisma from \"@/lib/prisma\";\n\nexport default async function Posts() {\n  //add-start\n  const posts = await prisma.post.findMany({\n    include: {\n      author: true,\n    },\n  });\n  //add-end\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center -mt-16\">\n      <h1 className=\"text-4xl font-bold mb-8 font-[family-name:var(--font-geist-sans)] text-[#333333]\">\n        Posts\n      </h1>\n      <ul className=\"font-[family-name:var(--font-geist-sans)] max-w-2xl space-y-4\">\n        //delete-start\n        <li>My first post</li>\n        //delete-end\n        //add-start\n        {posts.map((post) => (\n          <li key={post.id}>\n            <span className=\"font-semibold\">{post.title}</span>\n            <span className=\"text-sm text-gray-600 ml-2\">\n              by {post.author.name}\n            </span>\n          </li>\n        ))}\n        //add-end\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with Prisma Schema\nDESCRIPTION: This snippet defines three models (Post, Profile, and User) in the Prisma schema with their fields and relationships. It includes one-to-many relation between User and Post, and a one-to-one relation between User and Profile.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-prismaPostgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Single User Record by Unique Identifier with Prisma Client in TypeScript\nDESCRIPTION: This snippet shows how to retrieve a single user record using the Prisma Client findUnique() method. It demonstrates querying by email (unique identifier) and by ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// By unique identifier\nconst user = await prisma.user.findUnique({\n  where: {\n    email: 'elsa@prisma.io',\n  },\n})\n\n// By ID\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 99,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Writes\nDESCRIPTION: Creates a new User record with nested creation of related Post and Profile records using Prisma Client's create method with nested writes. Includes querying the created data with relation inclusion.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    name: 'Alice',\n    email: 'alice@prisma.io',\n    posts: {\n      create: { title: 'Hello World' },\n    },\n    profile: {\n      create: { bio: 'I like turtles' },\n    },\n  },\n})\n\nconst allUsers = await prisma.user.findMany({\n  include: {\n    posts: true,\n    profile: true,\n  },\n})\nconsole.dir(allUsers, { depth: null })\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client and Setting Up Main Function in Node.js\nDESCRIPTION: This snippet shows how to import and initialize Prisma Client, and set up an async main function with error handling and proper disconnection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Counting Records in Prisma\nDESCRIPTION: Shows how to use Prisma Client's count function to count the number of records or non-null field values in a model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst userCount = await prisma.user.count()\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema Models\nDESCRIPTION: Prisma schema file defining User and Post models with their relationships and field attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/100-from-the-cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting Database for Prisma Schema Update\nDESCRIPTION: This command re-introspects the database to update the Prisma schema after resolving schema incompatibilities with the Upgrade CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_19\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Filtering in Prisma Client\nDESCRIPTION: This query shows how to perform case-insensitive filtering on user emails.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    email: {\n      endsWith: 'prisma.io',\n      mode: 'insensitive', // Default value: default\n    },\n    name: {\n      equals: 'Archibald', // Default mode\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for PostgreSQL Database\nDESCRIPTION: Example schema showing a complete Prisma configuration for PostgreSQL with User and Post models, including relations and enums. Demonstrates data source configuration, client generator, and model definitions with field types and attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean  @default(false)\n  title     String   @db.VarChar(255)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Money Transfer with Prisma Transactions in TypeScript\nDESCRIPTION: A complete example showing how to implement a money transfer between accounts using Prisma's interactive transactions. It checks account balances to ensure sufficient funds before completing the transaction, preventing issues like negative balances or double spending.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\n\nfunction transfer(from: string, to: string, amount: number) {\n  return prisma.$transaction(async (tx) => {\n    // 1. Decrement amount from the sender.\n    const sender = await tx.account.update({\n      data: {\n        balance: {\n          decrement: amount,\n        },\n      },\n      where: {\n        email: from,\n      },\n    })\n\n    // 2. Verify that the sender's balance didn't go below zero.\n    if (sender.balance < 0) {\n      throw new Error(`${from} doesn't have enough to send ${amount}`)\n    }\n\n    // 3. Increment the recipient's balance by amount\n    const recipient = await tx.account.update({\n      data: {\n        balance: {\n          increment: amount,\n        },\n      },\n      where: {\n        email: to,\n      },\n    })\n\n    return recipient\n  })\n}\n\nasync function main() {\n  // This transfer is successful\n  await transfer('alice@prisma.io', 'bob@prisma.io', 100)\n  // This transfer fails because Alice doesn't have enough funds in her account\n  await transfer('alice@prisma.io', 'bob@prisma.io', 100)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Selecting Nested Related Records with Field Filtering in Prisma Client\nDESCRIPTION: Query that selects a user's email along with the likes field from each of their posts, demonstrating nested selection for related records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    email: 'emma@prisma.io',\n  },\n  select: {\n    email: true,\n    posts: {\n      select: {\n        likes: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in CockroachDB\nDESCRIPTION: SQL commands to create User, Post, and Profile tables with appropriate relationships and constraints in CockroachDB. Includes primary keys, foreign keys, and field type definitions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  name STRING(255),\n  email STRING(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE \"Post\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  title STRING(255) UNIQUE NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n  content STRING,\n  published BOOLEAN NOT NULL DEFAULT false,\n  \"authorId\" INT8 NOT NULL,\n  FOREIGN KEY (\"authorId\") REFERENCES \"User\"(id)\n);\n\nCREATE TABLE \"Profile\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  bio STRING,\n  \"userId\" INT8 UNIQUE NOT NULL,\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Omitting Fields in Prisma Client Queries\nDESCRIPTION: This example demonstrates how to use the omit option to exclude specific fields from the query result. It returns all User model fields except for the password field, which is useful for security purposes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findFirst({\n  omit: {\n    password: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Related Posts using Prisma ORM in TypeScript\nDESCRIPTION: This snippet shows how to retrieve User records along with their related Post records using the include option in Prisma ORM. It demonstrates a nested read query and includes error handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/100-from-the-cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nasync function main() {\n  const usersWithPosts = await prisma.user.findMany({\n    include: {\n      posts: true,\n    },\n  })\n  console.dir(usersWithPosts, { depth: null })\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Datasource in Prisma Schema\nDESCRIPTION: This snippet shows how to configure a datasource block in the Prisma schema to connect to a MySQL database server. It specifies the provider as 'mysql' and uses an environment variable for the database URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Post Status with Prisma Client\nDESCRIPTION: Updates a post record to change its published status. Demonstrates how to perform update operations using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Prisma Client instance in TypeScript\nDESCRIPTION: Initializes a Prisma Client instance and sets up a basic structure for running database queries with proper connection handling. The script includes error handling and ensures the database connection is properly closed when the script terminates.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for User and Post Models\nDESCRIPTION: Creates a schema definition for User and Post models in schema.prisma, establishing relationships and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  //add-next-line\n  provider = \"prisma-client\"\n  //delete-next-line\n  provider = \"prisma-client-js\"\n  output   = \"../app/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n//add-start\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prisma Client in TypeScript\nDESCRIPTION: Creates a TypeScript file to set up and use Prisma Client for database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '../generated/prisma'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in TypeScript\nDESCRIPTION: Basic setup code for initializing Prisma Client in a TypeScript file. It imports PrismaClient, creates an instance, defines a main function for queries, and handles proper connection management with error handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Auto-incrementing ID in Prisma Schema for Relational Databases\nDESCRIPTION: Example of defining an auto-incrementing integer ID field in a Prisma schema for relational databases using the @id and @default attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_27\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int    @id @default(autoincrement())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested User and Post Records with Prisma ORM in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a User record with associated Post records using a nested write query in Prisma ORM. It includes error handling and database disconnection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/100-from-the-cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nasync function main() {\n  const user = await prisma.user.create({\n    data: {\n      name: 'Bob',\n      email: 'bob@prisma.io',\n      posts: {\n        create: [\n          {\n            title: 'Hello World',\n            published: true\n          },\n          {\n            title: 'My second post',\n            content: 'This is still a draft'\n          }\n        ],\n      },\n    },\n  })\n  console.log(user)\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Prisma Client\nDESCRIPTION: Shows how to update an existing database record using Prisma Client's update method. This example updates a Post record to change its published status from false to true.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with No Posts Over Specific Views and Likes\nDESCRIPTION: This snippet demonstrates how to filter users based on conditions concerning their related posts using Prisma Client. It looks for users with no posts exceeding 100 views and all posts having 50 or fewer likes. The input is the conditions for filtering, and the output will be a list of users meeting these criteria along with their posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    //highlight-start\n    posts: {\n      none: {\n        views: {\n          gt: 100,\n        },\n      },\n      every: {\n        likes: {\n          lte: 50,\n        },\n      },\n    },\n    //highlight-end\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Safe SQL Query Building in Stages Using Prisma.sql in Prisma\nDESCRIPTION: Shows how to safely build raw queries in stages or from different parts of the application using Prisma.sql, ensuring protection against SQL injection as long as the query strings contain only trusted content.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst query1 = `SELECT id, name FROM \"User\" WHERE name = `;\nconst query2 = ` OR name = `;\n\nconst inputString1 = \"Fred\";\nconst inputString2 = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\n\nconst query = Prisma.sql([query1, query2, \"\"], inputString1, inputString2);\nconst result = await prisma.$queryRaw(query);\nconsole.log(result);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Version for Typescript\nconst query: any;\n\n// Version for Javascript\nconst query;\n\nconst query1 = `SELECT id, name FROM \"User\" `;\nconst query2 = `WHERE name = $1 `;\n\nquery = Prisma.raw(`${query1}${query2}`);\n\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\nquery.values = [inputString];\n\nconst result = await prisma.$queryRaw(query);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for Post, Profile, and User Models\nDESCRIPTION: This Prisma schema defines three models: Post, Profile, and User. It includes relationships between the models, indexes, and field definitions with their types and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n\n  @@index(authorId)\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n\n  @@index(userId)\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Record with Prisma Client\nDESCRIPTION: This snippet demonstrates how to update an existing Post record using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Run inside `async` function\nconst post = await prisma.post.update({\n  where: { id: 42 },\n  data: { published: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering on Scalar Lists in Prisma Client\nDESCRIPTION: This query demonstrates how to filter posts based on a value in the tags array.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await client.post.findMany({\n  where: {\n    tags: {\n      has: 'databases',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Write for User and Posts Creation\nDESCRIPTION: Example of using Prisma's nested writes feature to create a user and associated blog posts in a single atomic transaction. All operations succeed or fail together.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedWrite = await prisma.user.create({\n  data: {\n    email: 'imani@prisma.io',\n    posts: {\n      create: [\n        { title: 'My first day at Prisma' },\n        { title: 'How to configure a unique constraint in PostgreSQL' },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Prisma Client\nDESCRIPTION: Example of creating a User record with nested Post records using Prisma Client's create operation with nested writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst userAndPosts = await prisma.user.create({\n  data: {\n    posts: {\n      create: [\n        { title: 'Prisma Day 2020' },\n        { title: 'How to write a Prisma schema' },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema with User, Profile, Post, and Category Models\nDESCRIPTION: Defines initial database schema with relationships between models including user profiles, posts, and categories\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id       Int      @id @default(autoincrement())\n  name     String\n  jobTitle String\n  posts    Post[]\n  profile  Profile?\n}\n\nmodel Profile {\n  id       Int    @id @default(autoincrement())\n  biograpy String // Intentional typo!\n  userId   Int    @unique\n  user     User   @relation(fields: [userId], references: [id])\n}\n\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  published  Boolean    @default(true)\n  content    String     @db.VarChar(500)\n  authorId   Int\n  author     User       @relation(fields: [authorId], references: [id])\n  categories Category[]\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String @db.VarChar(50)\n  posts Post[]\n\n  @@unique([name])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Models in Prisma Schema\nDESCRIPTION: This Prisma schema snippet defines models `Post` and `User` with fields and relationships. It includes a new optional field `favoriteColor` added by a team member and another field `bestPacmanScore` added by the user. Ensure that Prisma is properly set up with a database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/020-implementing-schema-changes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Records with Prisma Client in TypeScript\nDESCRIPTION: This snippet shows how to retrieve User records along with their associated Post records using the include option in Prisma Client. It demonstrates how to perform a nested read query and handle the results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '../generated/prisma'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  const usersWithPosts = await prisma.user.findMany({\n    include: {\n      posts: true,\n    },\n  })\n  console.dir(usersWithPosts, { depth: null })\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations with Prisma Client\nDESCRIPTION: Example of fetching a user along with their related posts using the include option. This demonstrates how Prisma Client handles relationships and nested data querying with type safety.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    email: 'alice@prisma.io',\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Relations with Prisma Client\nDESCRIPTION: Demonstrates how to associate an existing Post record with a User using Prisma Client's update operation with nested connect.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst updateAuthor = await prisma.user.update({\n  where: {\n    id: 20,\n  },\n  data: {\n    posts: {\n      connect: {\n        id: 4,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Fields in Prisma Schema for MongoDB\nDESCRIPTION: This example demonstrates relation fields between models in MongoDB. The Post model can have many Comments, while the Comment model references a Post using ObjectId fields with appropriate MongoDB type attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       String    @id @default(auto()) @map(\"_id\") @db.Objectid\n  // Other fields\n  comments Comment[] // A post can have many comments\n}\n\nmodel Comment {\n  id     String  @id @default(auto()) @map(\"_id\") @db.Objectid\n  // Other fields\n  post   Post?   @relation(fields: [postId], references: [id]) // A comment can have one post\n  postId String? @db.ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Creating multiple extended clients with different extension combinations in TypeScript\nDESCRIPTION: Example showing how to create multiple extended clients with different combinations of extensions. This approach gives flexibility to use different extension configurations in different parts of the application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// First of all, store your original Prisma Client in a variable as usual\nconst prisma = new PrismaClient()\n\n// Declare an extended client that has extensionA applied\nconst prismaA = prisma.$extends(extensionA)\n\n// Declare an extended client that has extensionB applied\nconst prismaB = prisma.$extends(extensionB)\n\n// Declare an extended client that is a combination of clientA and clientB\nconst prismaAB = prismaA.$extends(extensionB)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client and Basic Query Structure in JavaScript\nDESCRIPTION: Sets up Prisma Client, defines a main function for database queries, and includes error handling and connection management. This structure is used as a foundation for subsequent database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Using $transaction API with Multiple Operations in Prisma\nDESCRIPTION: Demonstrates the sequential execution of operations within a transaction, where operations run in the order they are placed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction([iRunFirst, iRunSecond, iRunThird])\n```\n\n----------------------------------------\n\nTITLE: Including Deeply Nested Relations\nDESCRIPTION: This example demonstrates how to include multiple levels of relations by nesting include options. It queries a user, their posts, and the categories for each post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  include: {\n    posts: {\n      include: {\n        categories: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate Command\nDESCRIPTION: This terminal command initializes Prisma Migrate to create database tables based on the Prisma schema. It generates an SQL migration file and runs it against the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-prismaPostgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Model for Blog Application\nDESCRIPTION: This Prisma schema defines three models: Post, Profile, and User with their fields and relationships. It includes data type definitions, default values, and relationship mappings between the tables. The models represent a typical blog application data structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Numeric Fields with Atomic Operations in Prisma Client\nDESCRIPTION: Query that increments the views and likes fields of Post records by 1, demonstrating atomic number operations for updating numeric fields based on their current values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst updatePosts = await prisma.post.updateMany({\n  data: {\n    views: {\n      increment: 1,\n    },\n    likes: {\n      increment: 1,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sorting and Offset Pagination with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates sorting combined with offset pagination. It filters by email, sorts by title, skips 200 records, and returns records 201-220.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/055-pagination.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await prisma.post.findMany({\n  skip: 200,\n  take: 20,\n  where: {\n    email: {\n      contains: 'Prisma',\n    },\n  },\n  orderBy: {\n    title: 'desc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in TypeScript\nDESCRIPTION: Basic setup for Prisma Client including initialization, connection handling, and error management. Creates a reusable database client instance and defines the main execution structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Writes in Prisma Client\nDESCRIPTION: Demonstrates creating a User record with related Post and Profile records using Prisma's nested write capabilities. The query also showcases how to retrieve the created records with their relations using the include option.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Post Status with Prisma Client\nDESCRIPTION: Query to update a post's published status using Prisma Client's update operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Post Record with Prisma Client\nDESCRIPTION: This example demonstrates how to update an existing record in the database using Prisma Client. It updates a Post record by setting its published status to true, then logs the updated record to confirm the change.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-prismaPostgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate: Development Migration Command\nDESCRIPTION: This command is used in development environments to generate and apply database migrations. It detects schema drift, applies pending migrations, and generates new migrations based on changes to the Prisma schema. It will prompt to reset the database in case of conflicts or drift.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/90-development-and-production.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma migrate dev\"\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Prisma Client update Query\nDESCRIPTION: Demonstrates how to update an existing Post record by setting its published status to true. This query uses the where clause to target a specific record by ID and the data object to specify which fields to update.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with Offset: Prisma ORM\nDESCRIPTION: Implements offset-based pagination using Prisma ORM, skipping the first 200 posts and retrieving the next 20.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst cc = await prisma.post.findMany({\n  skip: 200,\n  first: 20,\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Nested Select for Multiple Relations\nDESCRIPTION: This snippet shows the correct way to select specific fields from multiple relations using nested select options instead of mixing select and include.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  select: {\n    // This will work!\n    email: true,\n    posts: {\n      select: {\n        title: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Full-Text Search Query\nDESCRIPTION: This snippet demonstrates a full-text search query in PostgreSQL using `to_tsvector` and `to_tsquery`. It selects all rows from the `Blog` table where the `content` column matches the search term. The `english` configuration specifies the language for text analysis.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"Blog\" WHERE to_tsvector('english', \"Blog\".\"content\") @@ to_tsquery('english', ${term});\n```\n\n----------------------------------------\n\nTITLE: Extended Prisma Schema with User, Post, Profile Models\nDESCRIPTION: This expanded schema adds more fields to the User model, includes a Profile model with a one-to-one relation to User, and defines the Post model with a required author relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id           Int       @id \n  name         String?\n  email        String    @unique\n  password     String\n  role         Role      @default(USER)\n  coinflips    Boolean[]\n  posts        Post[]\n  profile      Profile?\n}\n\nmodel Post {\n  id        Int     @id \n  title     String\n  published Boolean @default(true)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id        Int    @id \n  biography String\n  user      User   @relation(fields: [userId], references: [id])\n  userId    Int    @unique\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema and Models - Prisma\nDESCRIPTION: Defines the structure of the database using Prisma's schema language. It includes the client generator configuration, the database connection setup using an environment variable, and the definition of the `User` and `Post` models with their fields, types, directives (like `@id`, `@unique`, `@default`, `@relation`), and the one-to-many relationship between them.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n//add-start\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Implementing deleteTodo Action with Prisma ORM in TypeScript\nDESCRIPTION: This code implements the deleteTodo action using Prisma ORM to remove a Todo record. It uses the prisma client's delete method with a where clause specifying the id of the record to delete, followed by path revalidation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from \"next/cache\";\n\nimport { prisma } from \"@/db/prisma\";\n\nexport const deleteTodo = async (id: number) => {\n  await prisma.todo.delete({ where: { id } });\n  revalidatePath(\"/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Basic SQLite Database Connection Configuration in Prisma\nDESCRIPTION: Demonstrates how to configure a basic SQLite database connection in the Prisma schema file. Uses a local database file with .db extension.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/500-sqlite.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in TypeScript\nDESCRIPTION: Basic setup for Prisma Client including initialization, connection handling, and error management. Creates a reusable database client instance with proper connection lifecycle management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with Unique Constraint\nDESCRIPTION: Prisma schema definition for a User model with a unique email field constraint\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/700-debugging-and-troubleshooting/230-handling-exceptions-and-errors.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Field and Column Mapping in Prisma Schema\nDESCRIPTION: Demonstrates mapping field names to different database column names using @map attribute for multiple fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  content String @map(\"comment_text\")\n  email   String @map(\"commenter_email\")\n  type    Enum   @map(\"comment_type\")\n\n  @@map(\"comments\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UUID values as IDs in Relational databases using Prisma\nDESCRIPTION: Configures a User model with an ID field that automatically generates UUID v4 values as the primary key. Compatible with String type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_76\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(uuid())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relations in Prisma Schema for MongoDB\nDESCRIPTION: This Prisma schema demonstrates the definition of many-to-many relations between 'Post' and 'Category' models in MongoDB. It uses relation fields with '@relation' attributes specifying 'fields' and 'references' arguments. The 'Post' model references 'Category' model IDs and vice versa, ensuring both models maintain a list of the other's IDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id          String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  categoryIDs String[]   @db.ObjectId\n  categories  Category[] @relation(fields: [categoryIDs], references: [id])\n}\n\nmodel Category {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name    String\n  postIDs String[] @db.ObjectId\n  posts   Post[]   @relation(fields: [postIDs], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Posts by User Using Fluent API in Prisma Client\nDESCRIPTION: This snippet demonstrates leveraging the Fluent API to fetch all posts associated with a specific user based on their email. The input is the user's email, and the output is a list of corresponding posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsByUser: Post[] = await prisma.user\n  .findUnique({ where: { email: 'alice@prisma.io' } })\n  .posts()\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Prisma Schema\nDESCRIPTION: This snippet shows how to configure the database connection in the Prisma schema file using an environment variable for the connection URL. The provider is set to PostgreSQL in this example, but the document focuses on MySQL connections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single User with Prisma Client\nDESCRIPTION: Example of using Prisma Client to query a user by email address. This demonstrates the basic read operation with Prisma Client's type-safe API, returning all scalar fields of the User model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nconst user = await prisma.user.findUnique({\n  where: {\n    email: 'alice@prisma.io',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sequential Operations in Prisma Transaction\nDESCRIPTION: This snippet demonstrates how to use the $transaction API to execute multiple Prisma Client queries sequentially within a transaction, including finding posts and counting them.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [posts, totalPosts] = await prisma.$transaction([\n  prisma.post.findMany({ where: { title: { contains: 'prisma' } } }),\n  prisma.post.count(),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Nested Relations in Prisma\nDESCRIPTION: Shows how to create a User record with nested Post and Profile records in a single query. This example demonstrates Prisma's powerful nested write capability, creating related records across multiple tables in one operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Referential Actions in Prisma Schema\nDESCRIPTION: Example of a Prisma schema defining a cascading delete between User and Post models. When a User is deleted, all associated Posts will be deleted too.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/150-referential-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific User Fields in Prisma Client\nDESCRIPTION: This example demonstrates how to use the select option to return only specific fields from a model. The query returns only the email and name fields of the User model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  select: {\n    email: true,\n    name: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending Prisma Client with findOrCreate\nDESCRIPTION: Imports a Prisma Client extension and extends the Prisma Client instance to use the extension's functionality. Assumes the extension provides a `findOrCreate` method applicable to Prisma Client's models. Requires 'prisma-extension-find-or-create' package as a dependency.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/140-shared-extensions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport findOrCreate from 'prisma-extension-find-or-create'\n\nconst prisma = new PrismaClient().$extends(findOrCreate)\nconst user = await prisma.user.findOrCreate()\n```\n\n----------------------------------------\n\nTITLE: Upserting Records with Prisma Client\nDESCRIPTION: Query that updates a User if they exist with the given email, or creates them if they don't, demonstrating the upsert function which combines update and create operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst upsertUser = await prisma.user.upsert({\n  where: {\n    email: 'viola@prisma.io',\n  },\n  update: {\n    name: 'Viola the Magnificent',\n  },\n  create: {\n    email: 'viola@prisma.io',\n    name: 'Viola the Magnificent',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Prisma Metrics with Express.js\nDESCRIPTION: Creates an Express.js server endpoint that retrieves Prisma Client metrics in Prometheus format for scraping\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport express, { Request, Response } from 'express'\n\nconst app = express()\nconst port = 4000\nconst prisma = new PrismaClient()\n\napp.get('/metrics', async (_req, res: Response) => {\n  const metrics = await prisma.$metrics.prometheus()\n  res.end(metrics)\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Single Field Value in Prisma Client\nDESCRIPTION: Query that returns all User records with an email ending in \"prisma.io\" using the endsWith operator in the where clause.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    email: {\n      endsWith: 'prisma.io',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration for Hotfix\nDESCRIPTION: Create a new migration to capture schema changes made directly in production, allowing synchronization of migration history\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name retroactively-add-index\n```\n\n----------------------------------------\n\nTITLE: Using Exported PrismaClient in TypeScript Application\nDESCRIPTION: Demonstrates how to import and use the exported PrismaClient instance in an application. This ensures that the same instance is reused, maintaining efficient connection management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from './client'\n\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Tables for User, Post, and Profile\nDESCRIPTION: This SQL snippet creates three tables (Post, Profile, and User) with their respective columns, constraints, and relationships. It sets up a basic blog-like database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [dbo].[Post] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [createdAt] DATETIME2 NOT NULL CONSTRAINT [Post_createdAt_df] DEFAULT CURRENT_TIMESTAMP,\n    [updatedAt] DATETIME2 NOT NULL,\n    [title] VARCHAR(255) NOT NULL,\n    [content] NVARCHAR(1000),\n    [published] BIT NOT NULL CONSTRAINT [Post_published_df] DEFAULT 0,\n    [authorId] INT NOT NULL,\n    CONSTRAINT [Post_pkey] PRIMARY KEY ([id])\n);\n\nCREATE TABLE [dbo].[Profile] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [bio] NVARCHAR(1000),\n    [userId] INT NOT NULL,\n    CONSTRAINT [Profile_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [Profile_userId_key] UNIQUE ([userId])\n);\n\nCREATE TABLE [dbo].[User] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [email] NVARCHAR(1000) NOT NULL,\n    [name] NVARCHAR(1000),\n    CONSTRAINT [User_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [User_email_key] UNIQUE ([email])\n);\n\nALTER TABLE [dbo].[Post] ADD CONSTRAINT [Post_authorId_fkey] FOREIGN KEY ([authorId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n\nALTER TABLE [dbo].[Profile] ADD CONSTRAINT [Profile_userId_fkey] FOREIGN KEY ([userId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Write in Prisma Client\nDESCRIPTION: Shows how to create a new User record along with related Post and Profile records using a nested write query. It also demonstrates how to fetch and display the created records with their relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Write in Prisma Client\nDESCRIPTION: Shows how to create a new User record along with related Post and Profile records using a nested write query. It also demonstrates how to fetch the created data with related records included.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Writes in Prisma Client\nDESCRIPTION: Shows how to create a User record with related Post and Profile records in a single operation using Prisma Client's nested write capabilities, then retrieve the data with relationships included.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Fields in Prisma Schema for Relational Databases\nDESCRIPTION: This Prisma schema snippet demonstrates how to define relation fields and relation scalar fields in a User and Post model for relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  email String @unique\n  role  Role   @default(USER)\n  posts Post[] // relation field (defined only at the Prisma ORM level)\n}\n\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id]) // relation field (uses the relation scalar field `authorId` below)\n  authorId Int // relation scalar field (used in the `@relation` attribute above)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Transaction for Money Transfer\nDESCRIPTION: This TypeScript code demonstrates how to use Prisma's interactive transactions to implement a money transfer between two accounts, ensuring atomicity and consistency.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\n\nasync function transfer(from: string, to: string, amount: number) {\n  return await prisma.$transaction(async (tx) => {\n    // 1. Decrement amount from the sender.\n    const sender = await tx.account.update({\n      data: {\n        balance: {\n          decrement: amount,\n        },\n      },\n      where: {\n        email: from,\n      },\n    })\n\n    // 2. Verify that the sender's balance didn't go below zero.\n    if (sender.balance < 0) {\n      throw new Error(`${from} doesn't have enough to send ${amount}`)\n    }\n\n    // 3. Increment the recipient's balance by amount\n    const recipient = tx.account.update({\n      data: {\n        balance: {\n          increment: amount,\n        },\n      },\n      where: {\n        email: to,\n      },\n    })\n\n    return recipient\n  })\n}\n\nasync function main() {\n  // This transfer is successful\n  await transfer('alice@prisma.io', 'bob@prisma.io', 100)\n  // This transfer fails because Alice doesn't have enough funds in her account\n  await transfer('alice@prisma.io', 'bob@prisma.io', 100)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Retrieving All User Records with Prisma Client\nDESCRIPTION: TypeScript code showing how to fetch all User records from the database using Prisma Client's findMany method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/100-from-the-cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nasync function main() {\n  const users = await prisma.user.findMany()\n  console.log(users)\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Many-to-Many Relations in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define an explicit many-to-many relation between Post and Category models using a CategoriesOnPosts relation table in Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int                 @id @default(autoincrement())\n  title      String\n  categories CategoriesOnPosts[]\n}\n\nmodel Category {\n  id    Int                 @id @default(autoincrement())\n  name  String\n  posts CategoriesOnPosts[]\n}\n\nmodel CategoriesOnPosts {\n  post       Post     @relation(fields: [postId], references: [id])\n  postId     Int // relation scalar field (used in the `@relation` attribute above)\n  category   Category @relation(fields: [categoryId], references: [id])\n  categoryId Int // relation scalar field (used in the `@relation` attribute above)\n  assignedAt DateTime @default(now())\n  assignedBy String\n\n  @@id([postId, categoryId])\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Order Creation with Prisma in TypeScript\nDESCRIPTION: Test suite implementation for order creation functionality using Prisma. Tests cover creating orders with new and existing customers, handling out-of-stock scenarios, and includes database seeding and cleanup operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/150-integration-testing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from '../src/client'\nimport { createOrder, Customer, OrderInput } from '../src/functions/index'\n\nbeforeAll(async () => {\n  // create product categories\n  await prisma.category.createMany({\n    data: [{ name: 'Wand' }, { name: 'Broomstick' }],\n  })\n\n  console.log('✨ 2 categories successfully created!')\n\n  // create products\n  await prisma.product.createMany({\n    data: [\n      {\n        name: 'Holly, 11\", phoenix feather',\n        description: 'Harry Potters wand',\n        price: 100,\n        sku: 1,\n        categoryId: 1,\n      },\n      {\n        name: 'Nimbus 2000',\n        description: 'Harry Potters broom',\n        price: 500,\n        sku: 2,\n        categoryId: 2,\n      },\n    ],\n  })\n\n  console.log('✨ 2 products successfully created!')\n\n  // create the customer\n  await prisma.customer.create({\n    data: {\n      name: 'Harry Potter',\n      email: 'harry@hogwarts.io',\n      address: '4 Privet Drive',\n    },\n  })\n\n  console.log('✨ 1 customer successfully created!')\n})\n\nafterAll(async () => {\n  const deleteOrderDetails = prisma.orderDetails.deleteMany()\n  const deleteProduct = prisma.product.deleteMany()\n  const deleteCategory = prisma.category.deleteMany()\n  const deleteCustomerOrder = prisma.customerOrder.deleteMany()\n  const deleteCustomer = prisma.customer.deleteMany()\n\n  await prisma.$transaction([\n    deleteOrderDetails,\n    deleteProduct,\n    deleteCategory,\n    deleteCustomerOrder,\n    deleteCustomer,\n  ])\n\n  await prisma.$disconnect()\n})\n\nit('should create 1 new customer with 1 order', async () => {\n  // The new customers details\n  const customer: Customer = {\n    id: 2,\n    name: 'Hermione Granger',\n    email: 'hermione@hogwarts.io',\n    address: '2 Hampstead Heath',\n  }\n  // The new orders details\n  const order: OrderInput = {\n    customer,\n    productId: 1,\n    quantity: 1,\n  }\n\n  // Create the order and customer\n  await createOrder(order)\n\n  // Check if the new customer was created by filtering on unique email field\n  const newCustomer = await prisma.customer.findUnique({\n    where: {\n      email: customer.email,\n    },\n  })\n\n  // Check if the new order was created by filtering on unique email field of the customer\n  const newOrder = await prisma.customerOrder.findFirst({\n    where: {\n      customer: {\n        email: customer.email,\n      },\n    },\n  })\n\n  // Expect the new customer to have been created and match the input\n  expect(newCustomer).toEqual(customer)\n  // Expect the new order to have been created and contain the new customer\n  expect(newOrder).toHaveProperty('customerId', 2)\n})\n\nit('should create 1 order with an existing customer', async () => {\n  // The existing customers email\n  const customer: Customer = {\n    email: 'harry@hogwarts.io',\n  }\n  // The new orders details\n  const order: OrderInput = {\n    customer,\n    productId: 1,\n    quantity: 1,\n  }\n\n  // Create the order and connect the existing customer\n  await createOrder(order)\n\n  // Check if the new order was created by filtering on unique email field of the customer\n  const newOrder = await prisma.customerOrder.findFirst({\n    where: {\n      customer: {\n        email: customer.email,\n      },\n    },\n  })\n\n  // Expect the new order to have been created and contain the existing customer with an id of 1 (Harry Potter from the seed script)\n  expect(newOrder).toHaveProperty('customerId', 1)\n})\n\nit(\"should show 'Out of stock' message if productId doesn't exit\", async () => {\n  // The existing customers email\n  const customer: Customer = {\n    email: 'harry@hogwarts.io',\n  }\n  // The new orders details\n  const order: OrderInput = {\n    customer,\n    productId: 3,\n    quantity: 1,\n  }\n\n  // The productId supplied doesn't exit so the function should return an \"Out of stock\" message\n  await expect(createOrder(order)).resolves.toEqual(new Error('Out of stock'))\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Migrations with Prisma Migrate Deploy\nDESCRIPTION: Example of using the 'prisma migrate deploy' command to apply all pending migrations in non-development environments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_25\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Nested Relations in Prisma Client\nDESCRIPTION: Shows how to create a User record with nested Post and Profile records in a single transaction using Prisma's nested writes capability. The query also retrieves the created data with related records included.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple One-to-Many Relation in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define a one-to-many relation between User and Post models in Prisma schema, without needing the 'name' argument in the @relation attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id     Int  @id @default(autoincrement())\n  author Int\n  User   User @relation(fields: [author], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for MongoDB\nDESCRIPTION: Defines a complete Prisma schema for MongoDB including datasource configuration, client generator, and data models for Post, User, Comment entities with relationships and an embedded Address type. Demonstrates MongoDB-specific features like @db.ObjectId and @map(\"_id\") for ID fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/125-creating-the-prisma-schema-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id       String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  slug     String    @unique\n  title    String\n  body     String\n  author   User      @relation(fields: [authorId], references: [id])\n  authorId String    @db.ObjectId\n  comments Comment[]\n}\n\nmodel User {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email   String   @unique\n  name    String?\n  address Address?\n  posts   Post[]\n}\n\nmodel Comment {\n  id      String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  comment String\n  post    Post   @relation(fields: [postId], references: [id])\n  postId  String @db.ObjectId\n}\n\n// Address is an embedded document\ntype Address {\n  street String\n  city   String\n  state  String\n  zip    String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Post with ConnectOrCreate Category in Prisma Client\nDESCRIPTION: This TypeScript snippet demonstrates how to create a Post and connect or create a Category using Prisma Client in an explicit many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst assignCategories = await prisma.post.create({\n  data: {\n    title: 'How to be Bob',\n    categories: {\n      create: [\n        {\n          assignedBy: 'Bob',\n          assignedAt: new Date(),\n          category: {\n            connectOrCreate: {\n              where: {\n                id: 9,\n              },\n              create: {\n                name: 'New Category',\n                id: 9,\n              },\n            },\n          },\n        },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Including Related Records in Query Results with Prisma Client\nDESCRIPTION: Query that returns all ADMIN users and includes their related posts in the result, demonstrating the include option for retrieving related records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    role: 'ADMIN',\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with All Relation Types for Relational Databases\nDESCRIPTION: This Prisma schema demonstrates one-to-one, one-to-many, and many-to-many relations using User, Profile, Post, and Category models for relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Profile {\n  id     Int  @id @default(autoincrement())\n  user   User @relation(fields: [userId], references: [id])\n  userId Int  @unique // relation scalar field (used in the `@relation` attribute above)\n}\n\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  author     User       @relation(fields: [authorId], references: [id])\n  authorId   Int // relation scalar field  (used in the `@relation` attribute above)\n  categories Category[]\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Writes in Prisma\nDESCRIPTION: Creates a User record with related Post and Profile records using Prisma Client's nested write capability. The query demonstrates how to create multiple related entities in a single operation and then retrieve them with their relationships included.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with @updatedAt - Relational DB Example\nDESCRIPTION: Defines a Post model with an ID and updatedAt timestamp for relational databases using Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_63\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        String   @id\n  updatedAt DateTime @updatedAt\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for GET /feed Endpoint\nDESCRIPTION: This JSON snippet shows an example response from the /feed endpoint. It includes a nested structure with post details and the associated author information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/01-rest.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"21\",\n    \"title\": \"Hello World\",\n    \"content\": \"null\",\n    \"published\": \"true\",\n    \"authorId\": 42,\n    \"author\": {\n      \"id\": \"42\",\n      \"name\": \"Alice\",\n      \"email\": \"alice@prisma.io\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client Package\nDESCRIPTION: Installs the @prisma/client package via npm which is required to use Prisma Client in your project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/200-install-prisma-client-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Records with Prisma Client\nDESCRIPTION: Query that updates all User records with emails containing \"prisma.io\", setting their role to ADMIN and returning the count of updated records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst updateUsers = await prisma.user.updateMany({\n  where: {\n    email: {\n      contains: 'prisma.io',\n    },\n  },\n  data: {\n    role: 'ADMIN',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Users with Prisma Client\nDESCRIPTION: Simple query to fetch all user records from the database using Prisma Client's findMany operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and exporting the Prisma Client for the user database\nDESCRIPTION: This snippet adds code to `lib/user-prisma-client.ts` to instantiate and export the Prisma Client for the user database. It imports the PrismaClient from the custom output directory and exports a singleton instance to ensure only one client is created during development.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//add-start\nimport { PrismaClient } from \"../prisma-user-database/user-database-client-types\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\"\n\nconst getPrisma = () => new PrismaClient().$extends(withAccelerate());\n\nconst globalForUserDBPrismaClient = global as unknown as {\n  userDBPrismaClient: ReturnType<typeof getPrisma>;\n};\n\nexport const userDBPrismaClient =\n  globalForUserDBPrismaClient.userDBPrismaClient || getPrisma();\n\nif (process.env.NODE_ENV !== \"production\")\n  globalForUserDBPrismaClient.userDBPrismaClient = userDBPrismaClient;\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: Demonstrates how to use Prisma Client to query all User records from the database and print the result.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client in JavaScript\nDESCRIPTION: Demonstrates how to use Prisma Client to fetch all user records from the database. This query utilizes the findMany method on the user model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: Simple query to fetch all users from the database using Prisma Client's findMany operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Column SQL Migration\nDESCRIPTION: SQL migration file showing how to rename a column while preserving data\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/40-customizing-migrations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"Profile\"\nRENAME COLUMN \"biograpy\" TO \"biography\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nEXEC sp_rename 'dbo.Profile.biograpy', 'biography', 'COLUMN';\n```\n\n----------------------------------------\n\nTITLE: Updating User Bio with Prisma 1\nDESCRIPTION: This code snippet shows how to update a user's bio using Prisma 1's `updateUser` method. It defines a GraphQL mutation field called `updateBio` that takes a `userUniqueInput` and a `bio` as arguments. The `resolve` function updates the user's profile with the provided bio, creating a new profile if one doesn't exist.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nmutationType({\n  definition(t) {\n    t.field('updateBio', {\n      type: 'User',\n      args: {\n        userUniqueInput: arg({\n          type: 'UserUniqueInput',\n          nullable: false,\n        }),\n        bio: stringArg(),\n      },\n      resolve: (_, args, context) => {\n        return context.prisma.updateUser({\n          where: {\n            id: args.userUniqueInput?.id,\n            email: args.userUniqueInput?.email,\n          },\n          data: {\n            profile: {\n              create: { bio: args.bio },\n            },\n          },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Multiple Conditions using Logical Operators in Prisma Client\nDESCRIPTION: Complex query that uses OR and AND operators to return users whose name starts with 'E' or administrators with at least 1 profile view.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    OR: [\n      {\n        name: {\n          startsWith: 'E',\n        },\n      },\n      {\n        AND: {\n          profileViews: {\n            gt: 0,\n          },\n          role: {\n            equals: 'ADMIN',\n          },\n        },\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Users with Prisma Client\nDESCRIPTION: Query to fetch all users from the database using Prisma Client's findMany operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-based Pagination with Prisma Client in TypeScript\nDESCRIPTION: This example shows how to implement cursor-based pagination. It returns the first 4 Post records containing 'Prisma' and saves the ID of the last record as a cursor.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/055-pagination.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstQueryResults = await prisma.post.findMany({\n  take: 4,\n  where: {\n    title: {\n      contains: 'Prisma' /* Optional filter */,\n    },\n  },\n  orderBy: {\n    id: 'asc',\n  },\n})\n\n// Bookmark your location in the result set - in this\n// case, the ID of the last post in the list of 4.\n\nconst lastPostInResults = firstQueryResults[3] // Remember: zero-based index! :)\nconst myCursor = lastPostInResults.id // Example: 29\n```\n\n----------------------------------------\n\nTITLE: Returning Relations Count with Include in Prisma Client\nDESCRIPTION: This query uses the include option to return all users along with a count of their posts. The _count property is used to access the relation count, and the select property specifies which relations to count.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithCount = await prisma.user.findMany({\n  include: {\n    _count: {\n      select: { posts: true },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ id: 1, _count: { posts: 3 } },\n{ id: 2, _count: { posts: 2 } },\n{ id: 3, _count: { posts: 2 } },\n{ id: 4, _count: { posts: 0 } },\n{ id: 5, _count: { posts: 0 } }\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for MongoDB\nDESCRIPTION: This snippet shows how to define a Prisma schema for MongoDB, including data source, generator, and model definitions for Post and User with MongoDB-specific attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  String  @db.ObjectId\n}\n\nmodel User {\n  id    String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Safe SQL Query Execution Using Tagged Templates in Prisma\nDESCRIPTION: Demonstrates the safe use of $queryRaw and $executeRaw with tagged templates to prevent SQL injection. This method escapes all variables and sends queries as prepared statements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\nconst result = await prisma.$queryRaw`SELECT id, name FROM \"User\" WHERE name = ${inputString}`;\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: PrismaClient Instantiation with Global Variable for Development\nDESCRIPTION: Creates a PrismaClient instance and assigns it to a global variable in development environments. This prevents hot reloading from creating multiple instances of PrismaClient.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient }\n\nexport const prisma =\n  globalForPrisma.prisma || new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n```\n\n----------------------------------------\n\nTITLE: Using $queryRaw for SELECT Query in Prisma\nDESCRIPTION: Demonstrates how to use the $queryRaw method to execute a simple SELECT query that returns all records from the User table. This method is implemented as a tagged template for SQL injection protection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.$queryRaw`SELECT * FROM User`;\n```\n\n----------------------------------------\n\nTITLE: Filtered Count with Numeric Comparison in Prisma Client\nDESCRIPTION: This example shows how to apply filters to count operations. The query counts all users with more than 100 profile views, demonstrating how to use the gte operator for numeric comparisons.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst userCount = await prisma.user.count({\n  where: {\n    profileViews: {\n      gte: 100,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with Tag Model\nDESCRIPTION: Prisma schema showing the addition of a Tag model and its many-to-many relationship with the Post model. Includes existing User and Profile models with their relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Fields with Prisma ORM in TypeScript\nDESCRIPTION: Demonstrates retrieving posts with only specific fields (id and title) using Prisma's findMany method with the select option. Prisma provides complete type safety, preventing access to non-selected fields at compile time.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishedPosts = await prisma.post.findMany({\n  where: { published: true },\n  select: {\n    id: true,\n    title: true,\n  },\n})\nconst post = publishedPosts[0]\n\n// The TypeScript compiler will not allow this\nif (post.content.length > 0) {\n  console.log(`This post has some content.`)\n}\n```\n\n----------------------------------------\n\nTITLE: User Type Generation in TypeScript\nDESCRIPTION: Illustrates the TypeScript type representation generated by Prisma Client for the `User` model, which includes scalar fields such as `id`, `email`, and `name`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/100-operating-against-partial-structures-of-model-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type User = {\n  id: string\n  email: string\n  name: string | null\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with TypeScript\nDESCRIPTION: Basic setup code for initializing Prisma Client and creating a main function to handle database queries. Includes error handling and proper connection management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete Middleware with Prisma Client\nDESCRIPTION: A complete TypeScript implementation of soft delete middleware with Prisma Client. The middleware intercepts delete operations and converts them to updates that set the deleted flag to true, along with test code to demonstrate the functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/100-soft-delete-middleware.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({})\n\nasync function main() {\n  /***********************************/\n  /* SOFT DELETE MIDDLEWARE */\n  /***********************************/\n\n  prisma.$use(async (params, next) => {\n    // Check incoming query type\n    if (params.model == 'Post') {\n      if (params.action == 'delete') {\n        // Delete queries\n        // Change action to an update\n        params.action = 'update'\n        params.args['data'] = { deleted: true }\n      }\n      if (params.action == 'deleteMany') {\n        // Delete many queries\n        params.action = 'updateMany'\n        if (params.args.data != undefined) {\n          params.args.data['deleted'] = true\n        } else {\n          params.args['data'] = { deleted: true }\n        }\n      }\n    }\n    return next(params)\n  })\n\n  /***********************************/\n  /* TEST */\n  /***********************************/\n\n  const titles = [\n    { title: 'How to create soft delete middleware' },\n    { title: 'How to install Prisma' },\n    { title: 'How to update a record' },\n  ]\n\n  console.log('\\u001b[1;34mSTARTING SOFT DELETE TEST \\u001b[0m')\n  console.log('\\u001b[1;34m#################################### \\u001b[0m')\n\n  let i = 0\n  let posts = new Array()\n\n  // Create 3 new posts with a randomly assigned title each time\n  for (i == 0; i < 3; i++) {\n    const createPostOperation = prisma.post.create({\n      data: titles[Math.floor(Math.random() * titles.length)],\n    })\n    posts.push(createPostOperation)\n  }\n\n  var postsCreated = await prisma.$transaction(posts)\n\n  console.log(\n    'Posts created with IDs: ' +\n      '\\u001b[1;32m' +\n      postsCreated.map((x) => x.id) +\n      '\\u001b[0m'\n  )\n\n  // Delete the first post from the array\n  const deletePost = await prisma.post.delete({\n    where: {\n      id: postsCreated[0].id, // Random ID\n    },\n  })\n\n  // Delete the 2nd two posts\n  const deleteManyPosts = await prisma.post.deleteMany({\n    where: {\n      id: {\n        in: [postsCreated[1].id, postsCreated[2].id],\n      },\n    },\n  })\n\n  const getPosts = await prisma.post.findMany({\n    where: {\n      id: {\n        in: postsCreated.map((x) => x.id),\n      },\n    },\n  })\n\n  console.log()\n\n  console.log(\n    'Deleted post with ID: ' + '\\u001b[1;32m' + deletePost.id + '\\u001b[0m'\n  )\n  console.log(\n    'Deleted posts with IDs: ' +\n      '\\u001b[1;32m' +\n      [postsCreated[1].id + ',' + postsCreated[2].id] +\n      '\\u001b[0m'\n  )\n  console.log()\n  console.log(\n    'Are the posts still available?: ' +\n      (getPosts.length == 3\n        ? '\\u001b[1;32m' + 'Yes!' + '\\u001b[0m'\n        : '\\u001b[1;31m' + 'No!' + '\\u001b[0m')\n  )\n  console.log()\n  console.log('\\u001b[1;34m#################################### \\u001b[0m')\n  // 4. Count ALL posts\n  const f = await prisma.post.findMany({})\n  console.log('Number of posts: ' + '\\u001b[1;32m' + f.length + '\\u001b[0m')\n\n  // 5. Count DELETED posts\n  const r = await prisma.post.findMany({\n    where: {\n      deleted: true,\n    },\n  })\n  console.log(\n    'Number of SOFT deleted posts: ' + '\\u001b[1;32m' + r.length + '\\u001b[0m'\n  )\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Creating a New User Record with Prisma Client\nDESCRIPTION: Demonstrates how to create a new User record in the database using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    name: 'Alice',\n    email: 'alice@prisma.io',\n  },\n})\nconsole.log(user)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User by Composite ID - TypeScript\nDESCRIPTION: This TypeScript code illustrates how to retrieve a user from the database using the generated composite ID in the query, showcasing the `findUnique` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    firstName_lastName: {\n      firstName: \"Alice\",\n      lastName: \"Smith\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client in JavaScript\nDESCRIPTION: Demonstrates how to use Prisma Client to fetch all user records from the database. This query uses the findMany method to retrieve all users and logs the result.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Prisma query with UserSelect type\nDESCRIPTION: This code snippet demonstrates how to create a basic Prisma query using the `UserSelect` type. It imports the `Prisma` object from the `@prisma/client` package and defines a `userEmail` object that specifies the fields to be selected from the `User` model. The `findUnique` method is then used to retrieve a user with a specific `id` and select only the `email` field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/050-prisma-validator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nconst userEmail: Prisma.UserSelect = {\n  email: true,\n}\n\n// Run inside async function\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 3,\n  },\n  select: userEmail,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models in Prisma Schema\nDESCRIPTION: This schema defines three models (Post, Profile, and User) with their fields, relationships, and constraints. It includes primary keys, timestamps, optional fields, and relations between the models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Prisma Client\nDESCRIPTION: TypeScript code showing how to import and instantiate Prisma Client in your application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from 'app/generated/prisma/client'\nconst prisma = new PrismaClient()\n// use `prisma` in your application to read and write data in your DB\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Prisma Client Queries\nDESCRIPTION: Query that returns only the email and name fields of a User record found by unique email, demonstrating the select option to retrieve a subset of fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    email: 'emma@prisma.io',\n  },\n  select: {\n    email: true,\n    name: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Relation Filtering with Prisma ORM\nDESCRIPTION: Demonstrates Prisma's ability to filter records based on criteria that applies to related models. This example finds users who have at least one post containing 'Hello' in the title.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.user.findMany({\n  where: {\n    Post: {\n      some: {\n        title: {\n          contains: 'Hello',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource URL\nDESCRIPTION: This Prisma schema snippet shows how to configure the `DATABASE_URL` as an environment variable within the `datasource` block. This ensures that Prisma ORM uses the provided environment variable for database connections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\" // this might also be `mysql` or another value depending on your database\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Fields with Prisma Client Extension in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Prisma Client extension that adds a 'fullName' computed field to the User model. It combines firstName and lastName to create the fullName, which is then available in query results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/062-computed-fields.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient().$extends({\n  result: {\n    user: {\n      fullName: {\n        needs: { firstName: true, lastName: true },\n        compute(user) {\n          return `${user.firstName} ${user.lastName}`\n        },\n      },\n    },\n  },\n})\n\nasync function main() {\n  /**\n   * Example query containing the `fullName` computed field in the response\n   */\n  const user = await prisma.user.findFirst()\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals with `$executeRaw`\nDESCRIPTION: This snippet demonstrates using tagged template literals in the `$executeRaw` method to safely update database records, inserting dynamic variable values into the SQL command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailValidated = true;\nconst active = true;\n\nconst result: number =\n  await prisma.$executeRaw`UPDATE User SET active = ${active} WHERE emailValidated = ${emailValidated};`;\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts by Author Properties in Prisma Client\nDESCRIPTION: This query filters posts based on the email of the author.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await prisma.post.findMany({\n  where: {\n    author: {\n      email: {\n        contains: 'prisma.io',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client and Basic Query Structure in JavaScript\nDESCRIPTION: Sets up Prisma Client, defines a main function for queries, and handles database connection and error management. This structure forms the foundation for executing database queries with Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: Uses Prisma's migration command to apply the new database schema, creating the necessary tables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record by Compound ID\nDESCRIPTION: This snippet shows how to delete a record using a compound ID with Prisma Client. The `delete()` method accepts a `where` filter that specifies the compound ID components.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst like = await prisma.like.delete({\n  where: {\n    likeId: {\n      userId: 1,\n      postId: 1,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Relation Load Strategy with Include\nDESCRIPTION: This snippet demonstrates how to use the relationLoadStrategy option when including related data. The strategy can be set to 'join' (default) or 'query' to control how Prisma fetches the data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  relationLoadStrategy: 'join', // or 'query'\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying posts with MySQL 'and' and 'not' operators\nDESCRIPTION: These TypeScript snippets demonstrate how to use MySQL's 'and' (+) and 'not' (-) operators in full-text search queries with Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.posts.findMany({\n  where: {\n    body: {\n      search: 'cat dog',\n    },\n  },\n})\n\nconst result = await prisma.posts.findMany({\n  where: {\n    body: {\n      search: '+cat -dog',\n    },\n  },\n})\n\nconst result = await prisma.posts.findMany({\n  where: {\n    status: 'Draft',\n    body: {\n      search: '+cat +dog',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Nuxt Module and Accelerate Extension\nDESCRIPTION: Install the Prisma Nuxt module and Prisma Accelerate client extension for Postgres support\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm i @prisma/nuxt\nnpm i @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Generated SDL Schema for Posts Query\nDESCRIPTION: The GraphQL SDL representation automatically generated from the Nexus code, showing the posts query with its arguments and return type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  posts(searchString: String): [Post!]!\n  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: Enumerable<UserOrderByInput>, skip: Int, where: UserWhereInput): [User!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Leveraging Prisma GetPayload with TypeScript\nDESCRIPTION: Demonstrates using `Prisma.validator` and `Prisma.UserGetPayload` to dynamically generate types for a user with posts and selective user data, reducing manual maintenance and ensuring type safety.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/100-operating-against-partial-structures-of-model-types.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\n// 1: Define a type that includes the relation to `Post`\nconst userWithPosts = Prisma.validator<Prisma.UserDefaultArgs>()({\n  include: { posts: true },\n})\n\n// 2: Define a type that only contains a subset of the scalar fields\nconst userPersonalData = Prisma.validator<Prisma.UserDefaultArgs>()({\n  select: { email: true, name: true },\n})\n\n// 3: This type will include a user and all their posts\ntype UserWithPosts = Prisma.UserGetPayload<typeof userWithPosts>\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Datasource in Prisma Schema\nDESCRIPTION: This snippet shows how to set up the datasource block in the Prisma schema file to connect to a SQL Server database. It uses an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Nano ID values with custom length (16 characters) as MongoDB IDs\nDESCRIPTION: Sets up a User model for MongoDB with an ID field that generates Nano ID values with a custom length of 16 characters and maps to MongoDB's _id field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_85\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(nanoid(16)) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client\nDESCRIPTION: Example of creating related records using nested writes, creating a User with associated Post and Profile records in a single transaction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Related Records to an Existing Record in Prisma Client\nDESCRIPTION: This snippet shows how to use the `createMany` method nested inside an `update` call to add multiple posts to a user with a specific ID. The expected input is the user ID and data for the new posts, while the output will contain the updated user with the new posts included.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.update({\n  where: {\n    id: 9,\n  },\n  data: {\n    //highlight-start\n    posts: {\n      createMany: {\n        data: [{ title: 'My first post' }, { title: 'My second post' }],\n      },\n    },\n    //highlight-end\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sorting Posts by Author's Email in Prisma Client\nDESCRIPTION: This query demonstrates how to sort posts based on a property of a related model (author's email).\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  orderBy: {\n    author: {\n      email: 'asc',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Unsupported Fields in Prisma\nDESCRIPTION: This Prisma model defines a `Device` with an unsupported field type `circle`. The `Unsupported` function is used to specify fields that are native to the database but not directly supported by Prisma. Key parameters include `id` with auto-increment feature and `name` as a basic string type. This setup requires Prisma with introspection capabilities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Device {\n  id   Int                   @id @default(autoincrement())\n  name String\n  data Unsupported(\"circle\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Tables for Explicit Many-to-Many Relations\nDESCRIPTION: This SQL snippet shows how to create tables for an explicit many-to-many relation between Post and Category, including the CategoriesOnPosts relation table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Post\" (\n    \"id\" SERIAL NOT NULL,\n    \"title\" TEXT NOT NULL,\n\n    CONSTRAINT \"Post_pkey\" PRIMARY KEY (\"id\")\n);\n\nCREATE TABLE \"Category\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" TEXT NOT NULL,\n\n    CONSTRAINT \"Category_pkey\" PRIMARY KEY (\"id\")\n);\n\n\n-- Relation table + indexes --\n\nCREATE TABLE \"CategoriesOnPosts\" (\n    \"postId\" INTEGER NOT NULL,\n    \"categoryId\" INTEGER NOT NULL,\n    \"assignedAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n\n    CONSTRAINT \"CategoriesOnPosts_pkey\" PRIMARY KEY (\"postId\",\"categoryId\")\n);\n\nALTER TABLE \"CategoriesOnPosts\" ADD CONSTRAINT \"CategoriesOnPosts_postId_fkey\" FOREIGN KEY (\"postId\") REFERENCES \"Post\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\nALTER TABLE \"CategoriesOnPosts\" ADD CONSTRAINT \"CategoriesOnPosts_categoryId_fkey\" FOREIGN KEY (\"categoryId\") REFERENCES \"Category\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with At Least One Post in Prisma Client\nDESCRIPTION: This snippet retrieves all users who have at least one post by using the `some` filter. The expected input is the condition for having related posts, and the output will be the users who fulfill this criterion, along with their posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithSomePosts = await prisma.user.findMany({\n  where: {\n    //highlight-start\n    posts: {\n      some: {},\n    },\n    //highlight-end\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Accelerate Extension\nDESCRIPTION: Create a client.ts file to initialize Prisma Client with global singleton pattern and Accelerate extension\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/140-use-prisma-in-pnpm-workspaces.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"./generated/client\";\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nconst globalForPrisma = global as unknown as { prisma: typeof prisma }\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport { prisma };\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client Connection with TypeScript\nDESCRIPTION: Sets up the basic Prisma Client connection and error handling structure. Creates a main async function for database operations and handles proper disconnection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Writing to a JSON Field\nDESCRIPTION: Example showing how to write a JSON array to the extendedPetsData field when creating a new user record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvar json = [\n  { name: 'Bob the dog' },\n  { name: 'Claudine the cat' },\n] as Prisma.JsonArray\n\nconst createUser = await prisma.user.create({\n  data: {\n    email: 'birgitte@prisma.io',\n    extendedPetsData: json,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining server function for fetching posts with TanStack Start and Prisma\nDESCRIPTION: Create a server function using TanStack Start's createServerFn to fetch all posts from the database using Prisma's findMany method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/160-tanstack-start.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getPosts = createServerFn({ method: \"GET\" }).handler(async () => {\n  return prisma.post.findMany();\n});\n```\n\n----------------------------------------\n\nTITLE: Resolver Implementation for updateBio with Nexus\nDESCRIPTION: TypeScript implementation of the resolver for the updateBio mutation using Prisma ORM 2.0 with Nexus. It creates or updates the user's profile bio.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    // ... previous mutations\n\n    t.field('updateBio', {\n      type: 'User',\n      args: {\n        userUniqueInput: arg({\n          type: 'UserUniqueInput',\n          nullable: false\n        }),\n        bio: stringArg()\n      },\n      //add-start\n      resolve: (_, args, context) => {\n        return context.prisma.user.update({\n          where: {\n            id: args.userUniqueInput?.id,\n            email: args.userUniqueInput?.email\n          },\n          data: {\n            profile: {\n              create: { bio: args.bio }\n            }\n          }\n        })\n      }\n      //add-end\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Omitting Multiple Fields in Prisma Client Query (TypeScript)\nDESCRIPTION: This example demonstrates how to omit multiple fields in a single Prisma Client query. Both 'password' and 'email' fields are excluded from the User model query results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/063-excluding-fields.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\n// password and email are excluded\nconst user = await prisma.user.findUnique({\n  omit: {\n    email: true,\n    password: true,\n  },\n  where: {\n    id: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Prisma Client findMany Query\nDESCRIPTION: Demonstrates how to retrieve all User records from the database using Prisma Client's findMany() method. This query returns an array of user objects with type safety provided by Prisma's generated types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  // ... you will write your Prisma Client queries here\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding First Record Matching Criteria with Prisma Client in TypeScript\nDESCRIPTION: Query that returns the most recently created user with at least one post that has more than 100 likes by ordering users by descending ID and filtering for posts with more than 100 likes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst findUser = await prisma.user.findFirst({\n  where: {\n    posts: {\n      some: {\n        likes: {\n          gt: 100,\n        },\n      },\n    },\n  },\n  orderBy: {\n    id: 'desc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initial Database Schema Migration\nDESCRIPTION: SQL migration script that creates the initial database schema with User, Post, and Profile tables. Includes primary keys, foreign keys, and default constraints for CockroachDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  name STRING(255),\n  email STRING(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE \"Post\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  title STRING(255) UNIQUE NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n  content STRING,\n  published BOOLEAN NOT NULL DEFAULT false,\n  \"authorId\" INT8 NOT NULL,\n  FOREIGN KEY (\"authorId\") REFERENCES \"User\"(id)\n);\n\nCREATE TABLE \"Profile\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  bio STRING,\n  \"userId\" INT8 UNIQUE NOT NULL,\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering on Relations in Prisma Client\nDESCRIPTION: This query demonstrates how to filter users based on properties of their related posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.findMany({\n  where: {\n    posts: {\n      some: {\n        views: {\n          gt: 10,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Options in Prisma\nDESCRIPTION: Example of setting transaction options like timeout, maximum wait time, and isolation level for interactive transactions. These options control transaction behavior and performance characteristics.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction(\n  async (tx) => {\n    // Code running in a transaction...\n  },\n  {\n    maxWait: 5000, // default: 2000\n    timeout: 10000, // default: 5000\n    isolationLevel: Prisma.TransactionIsolationLevel.Serializable, // optional, default defined by database configuration\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Customized Prisma Client API\nDESCRIPTION: TypeScript example showing how to use the Prisma Client API with customized model and field names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-mysql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.myUser.create({\n    data: {\n        firstName: 'Alice',\n        lastName: 'Smith',\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Explicit Many-to-Many Relation in Prisma Schema\nDESCRIPTION: This snippet demonstrates the correct way to define an explicit many-to-many relation in Prisma schema, with proper back relation fields in the Post and Category models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/500-troubleshooting-relations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id             Int              @id @default(autoincrement())\n  title          String\n  postCategories PostCategories[]\n}\n\nmodel PostCategories {\n  post       Post     @relation(fields: [postId], references: [id])\n  postId     Int\n  category   Category @relation(fields: [categoryId], references: [id])\n  categoryId Int\n\n  @@id([postId, categoryId])\n}\n\nmodel Category {\n  id             Int              @id @default(autoincrement())\n  name           String\n  postCategories PostCategories[]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Relevance\nDESCRIPTION: This TypeScript code snippet demonstrates how to order a list of users by the relevance of the term 'developer' in the 'bio' field. It uses Prisma Client's findMany method with the _relevance keyword to sort results in descending order. Requires configuration with full text search enabled.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsersByRelevance = await prisma.user.findMany({\n  take: 10,\n  orderBy: {\n    _relevance: {\n      fields: ['bio'],\n      search: 'developer',\n      sort: 'desc',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Post Creation with Prisma in Next.js\nDESCRIPTION: Enhanced version of the post creation form that saves data to the database using Prisma ORM. It includes server-side form processing, database operations, cache revalidation, and navigation redirection after successful submission.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from \"next/form\";\n//add-start\nimport prisma from \"@/lib/prisma\";\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n//add-end\n\nexport default function NewPost() {\n  async function createPost(formData: FormData) {\n    \"use server\";\n\n    const title = formData.get(\"title\") as string;\n    const content = formData.get(\"content\") as string;\n\n    //add-start\n    await prisma.post.create({\n      data: {\n        title,\n        content,\n        authorId: 1,\n      },\n    });\n\n    revalidatePath(\"/posts\");\n    redirect(\"/posts\");\n    //add-end\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-6\">Create New Post</h1>\n      <Form action={createPost} className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"title\" className=\"block text-lg mb-2\">\n            Title\n          </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Enter your post title\"\n            className=\"w-full px-4 py-2 border rounded-lg\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"content\" className=\"block text-lg mb-2\">\n            Content\n          </label>\n          <textarea\n            id=\"content\"\n            name=\"content\"\n            placeholder=\"Write your post content here...\"\n            rows={6}\n            className=\"w-full px-4 py-2 border rounded-lg\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600\"\n        >\n          Create Post\n        </button>\n      </Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Client: Finding One Record\nDESCRIPTION: This code snippet demonstrates how to find one user record using Prisma Client. It queries the `prisma.user` object to find a user with a specific ID using the `findUnique` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Find one\nconst user = await prisma.user.findUnique({ \n  where: { id: 1 } \n});\n```\n\n----------------------------------------\n\nTITLE: Querying a View in Prisma Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to query a view named 'UserInfo' in Prisma Client. It uses the findMany method to retrieve all users with the name 'Alice' from the view.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst userinfo = await prisma.userInfo.findMany({\n  where: {\n    name: 'Alice',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Schemas\nDESCRIPTION: Example showing how to configure multiple database schemas in the datasource block and assign models to specific schemas using @@schema attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/60-multi-schema.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id     Int     @id\n  orders Order[]\n\n  @@schema(\"base\")\n}\n\nmodel Order {\n  id      Int  @id\n  user    User @relation(fields: [id], references: [id])\n  user_id Int\n\n  @@schema(\"transactional\")\n}\n\nenum Size {\n  Small\n  Medium\n  Large\n\n  @@schema(\"transactional\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Many-to-Many Relations in Prisma Schema\nDESCRIPTION: This Prisma schema demonstrates the implicit many-to-many relationship syntax, which is more concise than the explicit approach. It directly connects Post and Category models through array fields, letting Prisma ORM handle the relation table creation and management automatically, resulting in a more ergonomic API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_29\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  content    String?\n  published  Boolean    @default(false)\n  categories Category[]\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading All Users with Prisma Client\nDESCRIPTION: Demonstrates how to query all users from the database using Prisma Client's findMany method. This snippet replaces a placeholder comment with actual query code to fetch and display all user records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Related Posts in Prisma Client\nDESCRIPTION: This snippet demonstrates how to filter users by email domain and the existence of published posts, while also including related published posts in the result.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.findMany({\n  where: {\n    email: {\n      endsWith: 'prisma.io',\n    },\n    posts: {\n      some: {\n        published: true,\n      },\n    },\n  },\n  include: {\n    posts: {\n      where: {\n        published: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding helper scripts to package.json\nDESCRIPTION: This snippet adds custom scripts to the package.json file to simplify Prisma commands for both the user and post databases. These scripts include commands for generating clients, running migrations, deploying changes, and opening Prisma Studio for each database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"script\":{\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    // add-start\n    \"postinstall\": \"npx prisma generate --schema ./prisma-user-database/schema.prisma --no-engine && npx prisma generate --schema ./prisma-post-database/schema.prisma --no-engine\",\n    \"generate\": \"npx prisma generate --schema ./prisma-user-database/schema.prisma --no-engine && npx prisma generate --schema ./prisma-post-database/schema.prisma --no-engine\",\n    \"migrate\": \"npx prisma migrate dev --schema ./prisma-user-database/schema.prisma && npx prisma migrate dev --schema ./prisma-post-database/schema.prisma\",\n    \"deploy\": \"npx prisma migrate deploy --schema ./prisma-user-database/schema.prisma && npx prisma migrate deploy --schema ./prisma-post-database/schema.prisma\",\n    \"studio\": \"npx prisma studio --schema ./prisma-user-database/schema.prisma --port 5555 & npx prisma studio --schema ./prisma-post-database/schema.prisma --port 5556\"\n    // add-end   \n}\n```\n\n----------------------------------------\n\nTITLE: Including Specific Relations in Queries\nDESCRIPTION: This snippet shows how to include a related model (author) when querying a post. The query returns all fields from both the post and author tables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await prisma.post.findFirst({\n  include: {\n    author: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with UUID in Relational Database - Prisma\nDESCRIPTION: This snippet defines a User model with a UUID generated ID for relational databases using the Prisma schema. The `id` field is set to automatically use UUID as its default value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_31\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(uuid())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Records with Prisma Client\nDESCRIPTION: Shows how to retrieve a User record and include their related Post records using Prisma Client's findUnique operation with include.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAuthor = await prisma.user.findUnique({\n  where: {\n    id: \"20\",\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Omit with Prisma Client Extensions\nDESCRIPTION: This example demonstrates the use of the 'omit' option with custom fields in the result extension component of Prisma Client. It shows how to omit a dependent field while still allowing it to be read for computation purposes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/130-result.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst xprisma = prisma.$extends({\n  result: {\n    user: {\n      sanitizedPassword: {\n        needs: { password: true },\n        compute(user) {\n          return sanitize(user.password)\n        },\n      },\n    },\n  },\n})\n\nconst user = await xprisma.user.findFirstOrThrow({\n  omit: {\n    password: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Custom Naming Using @map and @@map\nDESCRIPTION: This Prisma schema demonstrates the use of @map and @@map attributes to customize model and field names, adhering to Prisma ORM's naming conventions while maintaining the original database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/100-custom-model-and-field-names.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Category {\n  id                 Int                @id @default(autoincrement()) @map(\"category_id\")\n  name               String?            @db.VarChar(256)\n  post_in_categories PostInCategories[]\n\n  @@map(\"categories\")\n}\n\nmodel PostInCategories {\n  post_id     Int\n  category_id Int\n  categories  Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  posts       Post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n\n  @@unique([post_id, category_id], map: \"post_id_category_id_unique\")\n  @@map(\"post_in_categories\")\n}\n\nmodel Post {\n  id                 Int                @id @default(autoincrement()) @map(\"post_id\")\n  created_at         DateTime?          @default(now()) @db.Timestamptz(6)\n  title              String             @db.VarChar(256)\n  content            String?\n  author_id          Int?\n  users              User?              @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  post_in_categories PostInCategories[]\n\n  @@map(\"posts\")\n}\n\nmodel Profile {\n  id      Int     @id @default(autoincrement()) @map(\"profile_id\")\n  bio     String?\n  user_id Int     @unique\n  users   User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)\n\n  @@map(\"profiles\")\n}\n\nmodel User {\n  id       Int      @id @default(autoincrement()) @map(\"user_id\")\n  name     String?  @db.VarChar(256)\n  email    String   @unique @db.VarChar(256)\n  posts    Post[]\n  profiles Profile?\n\n  @@map(\"users\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All User Records with Prisma Client\nDESCRIPTION: A simple query example showing how to read all User records from the database. This snippet demonstrates the findMany operation and how to log the results, which is useful for debugging or verifying data retrieval.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-prismaPostgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Output Path Configuration\nDESCRIPTION: Example of configuring a custom output path in the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records in a Single Transaction with Prisma\nDESCRIPTION: This snippet shows how to create a new user along with two related posts in a single transaction using Prisma Client's `create` method. This approach provides atomicity, rolling back all changes if any part of the operation fails.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.create({\n  data: {\n    email: 'elsa@prisma.io',\n    name: 'Elsa Prisma',\n    //highlight-start\n    posts: {\n      create: [\n        { title: 'How to make an omelette' },\n        { title: 'How to eat an omelette' },\n      ],\n    },\n    //highlight-end\n  },\n  include: {\n    posts: true, // Include all posts in the returned object\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Data Mutations in Prisma ORM\nDESCRIPTION: Demonstrates create, update, and delete operations in Prisma ORM with a clear, consistent API pattern.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// create a user\nconst user = await prisma.user.create({\n  data: {\n    name: 'Nilu',\n    email: 'nilu@prisma.io',\n  },\n})\n\n// update a user\nconst user = await prisma.user.update({\n  where: { email: 'nilu@prisma.io' },\n  data: { name: 'Another Nilu' },\n})\n\n// delete a user\nconst deletedUser = await prisma.user.delete({\n  where: { email: 'nilu@prisma.io' },\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with Explicit Many-to-Many Relation\nDESCRIPTION: Demonstrates the modified schema with an explicit relation table UserPost that includes additional fields and proper relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/300-implicit-to-explicit-conversion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int        @id @default(autoincrement())\n  name      String\n  posts     Post[]\n  userPosts UserPost[]\n}\n\nmodel Post {\n  id        Int        @id @default(autoincrement())\n  title     String\n  authors   User[]\n  userPosts UserPost[]\n}\n\nmodel UserPost {\n  id        Int       @id @default(autoincrement())\n  userId    Int\n  postId    Int\n  user      User      @relation(fields: [userId], references: [id])\n  post      Post      @relation(fields: [postId], references: [id])\n  createdAt DateTime  @default(now())\n\n  @@unique([userId, postId])\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Prisma Client's findMany Query\nDESCRIPTION: Shows how to retrieve all User records from the database using the findMany query method and displays the results. This is a basic read operation with Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  // ... you will write your Prisma Client queries here\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: This command generates the Prisma Client based on the current Prisma schema.  It creates the necessary code to interact with the database using the Prisma Client API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Pagination with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use 'skip' and 'take' to implement offset pagination. It skips the first 3 Post records and returns records 4-7.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/055-pagination.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await prisma.post.findMany({\n  skip: 3,\n  take: 4,\n})\n```\n\n----------------------------------------\n\nTITLE: Batching GraphQL Queries with Prisma Client's Fluent API\nDESCRIPTION: This code demonstrates how to use findUnique() with the fluent API to leverage Prisma's dataloader for batching queries. This approach optimizes multiple individual user.posts queries into batched database requests.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    t.nonNull.int('id')\n    t.string('name')\n    t.nonNull.string('email')\n    t.nonNull.list.nonNull.field('posts', {\n      type: 'Post',\n      resolve: (parent, _, context) => {\n        return context.prisma.user\n          .findUnique({\n            where: { id: parent.id || undefined },\n          })\n          .posts()\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Prisma Schema\nDESCRIPTION: Shows how to set up the datasource block in the Prisma schema file to connect to a PostgreSQL database using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with Tag Model\nDESCRIPTION: Prisma schema showing the addition of a Tag model and its many-to-many relationship with the Post model. Includes existing User and Profile models with their relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Fix JSON Column Type\nDESCRIPTION: SQL statement to modify the User table's jsonData column to use proper JSON type instead of text.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `User` CHANGE `jsonData` `jsonData` JSON ;\n```\n\n----------------------------------------\n\nTITLE: Migrate the user query resolver with Prisma Client in JavaScript\nDESCRIPTION: The snippet demonstrates migrating the `user` query to use Prisma Client. The resolver uses `findUnique` to fetch a user based on `UserUniqueInput`, allowing filtering by either email or ID. The transition from `prisma-binding` involves updating the method to align with Prisma Client design.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    user: (_, args, context) => {\n      return context.prisma.user.findUnique({\n        where: args.userUniqueInput,\n      })\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Include with Nested Select\nDESCRIPTION: This example shows how to combine include with a nested select to return all user fields but only specific fields from related posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  include: {\n    posts: {\n      select: {\n        title: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing toggleTodo Action with Drizzle ORM in TypeScript\nDESCRIPTION: This code defines a toggleTodo action using Drizzle ORM to toggle the 'done' status of a Todo record. It uses the 'not' function to negate the current boolean value in-place, with a where clause to match the provided id, and revalidates the path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eq, not } from \"drizzle-orm\";\nimport { revalidatePath } from \"next/cache\";\n\nimport db from \"@/db/drizzle\";\nimport { todo } from \"@/db/schema\";\n\nexport const toggleTodo = async (id: number) => {\n  await db\n    .update(todo)\n    .set({\n      done: not(todo.done),\n    })\n    .where(eq(todo.id, id));\n  revalidatePath(\"/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Promise.all() Example for Parallel Queries in Prisma\nDESCRIPTION: Code snippet demonstrating how to send multiple Prisma queries in parallel using Promise.all(), which may require adjusting the connection_limit for optimal performance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.all() {\n  query1,\n  query2,\n  query3\n  query4,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Unique Field in Prisma Schema\nDESCRIPTION: Shows how to define a unique email field in a User model for both relational databases and MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_17\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Writes in Prisma\nDESCRIPTION: This snippet shows how to create a new User record with related Post and Profile records using Prisma's nested write capability. It also demonstrates how to query the created data with included relations and pretty print the results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-prismaPostgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Scalar Fields for MongoDB\nDESCRIPTION: Creates a User model with id, email, and name fields, tailored for MongoDB with ObjectId mapping.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    String  @default(auto()) @map(\"_id\") @db.ObjectId\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records in a Transaction with Prisma ORM in TypeScript\nDESCRIPTION: Shows how Prisma ORM handles transactions implicitly when creating a user with related posts in a single operation. The nested writes syntax creates both the user and related posts atomically.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    email: 'bob.rufus@prisma.io',\n    name: 'Bob Rufus',\n    Post: {\n      create: [\n        { title: 'Working at Prisma' },\n        { title: 'All about databases' },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma schema with User and Post models\nDESCRIPTION: Prisma schema definition that configures the database connection and defines User and Post models with a one-to-many relationship between them.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n\tprovider = \"prisma-client\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate Command\nDESCRIPTION: This terminal command creates and executes a SQL migration for the defined Prisma schema. The `--name init` parameter sets the migration name to 'init', and the command both generates SQL migration files and applies them to the connected database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Using Nested Creates for Multiple Related Records\nDESCRIPTION: This snippet exemplifies the usage of nested `create` to add one user, multiple posts, and a post category in a single Prisma Client operation, demonstrating the power and efficiency of handling relational data in one query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.create({\n  data: {\n    email: 'yvette@prisma.io',\n    name: 'Yvette',\n    //highlight-start\n    posts: {\n      create: [\n        {\n          title: 'How to make an omelette',\n          categories: {\n            create: {\n              name: 'Easy cooking',\n            },\n          },\n        },\n        { title: 'How to eat an omelette' },\n      ],\n    },\n    //highlight-end\n  },\n  include: {\n    // Include posts\n    posts: {\n      include: {\n        categories: true, // Include post categories\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Order with Optional Composite Type\nDESCRIPTION: Shows how to create an order with an optional composite type set to `null` using Prisma. Requires Prisma and a configured Prisma Client instance. Features both `shippingAddress` and nullable `billingAddress` fields in the order record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await prisma.order.create({\n  data: {\n    // Normal relation\n    product: { connect: { id: 'some-object-id' } },\n    color: 'Red',\n    size: 'Large',\n    // Composite type\n    shippingAddress: {\n      street: '1084 Candycane Lane',\n      city: 'Silverlake',\n      zip: '84323',\n    },\n    // Embedded optional type, set to null\n    billingAddress: {\n      set: null,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Relation Counts in Prisma Client\nDESCRIPTION: This feature allows you to apply filters to relation counts using the where option. This example counts all user posts with the title \"Hello!\", showing how to filter counts based on scalar field values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Count all user posts with the title \"Hello!\"\nawait prisma.user.findMany({\n  select: {\n    _count: {\n      select: {\n        posts: { where: { title: 'Hello!' } },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with New Fields and Model\nDESCRIPTION: This updated Prisma schema snippet introduces a new model `Tag` and additional fields to the `User` model. The `favoriteColor` and `bestPacmanScore` fields were added to `User`, and `Tag` was added by another team member. Ensure that you update any existing database schema to reflect these model changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/020-implementing-schema-changes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id              Int     @id @default(autoincrement())\n  email           String  @unique\n  name            String?\n  //add-start\n  favoriteColor   String? // Added by Ania\n  bestPacmanScore Int? // Added by you\n  //add-end\n  posts           Post[]\n}\n\n//add-start\n// Added by Javier\nmodel Tag {\n  tagName     String   @id\n  tagCategory Category\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Prisma project directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Migrating createDraft mutation with Prisma Client in JavaScript\nDESCRIPTION: Here, the `createDraft` mutation is converted from `prisma-binding` to Prisma Client. The resolver creates a new draft post, incorporating author connection by ID through the `create` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    createDraft: (_, args, context, info) => {\n      return context.prisma.post.create({\n        data: {\n          title: args.title,\n          content: args.content,\n          author: {\n            connect: {\n              id: args.authorId,\n            },\n          },\n        },\n      })\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Related Data\nDESCRIPTION: Example of updating a Post record to add multiple Comment records using createMany in a nested write operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.post.update({\n    where: {\n      slug: 'my-first-post',\n    },\n    data: {\n      comments: {\n        createMany: {\n          data: [\n            { comment: 'Great post!' },\n            { comment: \"Can't wait to read more!\" },\n          ],\n        },\n      },\n    },\n  })\n  const posts = await prisma.post.findMany({\n    include: {\n      comments: true,\n    },\n  })\n\n  console.dir(posts, { depth: Infinity })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection\nDESCRIPTION: Command to introspect the database and generate Prisma schema from existing database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgreSQL database connection URL in environment variables\nDESCRIPTION: Defines the DATABASE_URL environment variable in a .env file with the connection details for a PostgreSQL database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema Datasource\nDESCRIPTION: This code block demonstrates how to configure the datasource in the Prisma schema file. It sets the provider and database URL environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/_prisma-init-partial.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  //edit-next-line\n    provider = \"${props.datasource.toLowerCase()}\"\n    url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Datasource in Prisma Schema\nDESCRIPTION: This code defines the datasource block in the Prisma schema, specifying MongoDB as the provider and setting the database URL via an environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/100-connect-your-database-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Post Detail Page with Prisma in Next.js\nDESCRIPTION: This enhanced post detail page fetches a specific post by ID from the database using Prisma. It handles the 404 case when a post isn't found, displays the post title, author name, and content dynamically.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport prisma from \"@/lib/prisma\";\n//add-start\nimport { notFound } from \"next/navigation\";\n//add-end\n\nexport default async function Post({ params }: { params: Promise<{ id: string }> }) {\n  //add-start\n  const { id } = await params;\n  const post = await prisma.post.findUnique({\n    where: { id: parseInt(id) },\n    include: {\n      author: true,\n    },\n  });\n\n  if (!post) {\n    notFound();\n  }\n  //add-end\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center -mt-16\">\n      <article className=\"max-w-2xl space-y-4 font-[family-name:var(--font-geist-sans)]\">\n        //delete-start\n        <h1 className=\"text-4xl font-bold mb-8 text-[#333333]\">My first post</h1>\n        <p className=\"text-gray-600 text-center\">by Anonymous</p>\n        <div className=\"prose prose-gray mt-8\">\n          No content available.\n        </div>\n        //delete-end\n        //add-start\n        <h1 className=\"text-4xl font-bold mb-8 text-[#333333]\">{post.title}</h1>\n        <p className=\"text-gray-600 text-center\">by {post.author.name}</p>\n        <div className=\"prose prose-gray mt-8\">\n          {post.content || \"No content available.\"}\n        </div>\n        //add-end\n      </article>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Aggregations in Prisma\nDESCRIPTION: Illustrates how Prisma Client handles aggregations on nullable fields, returning either a number or null for aggregations like average, while count always returns 0 if no records are found.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst aggregations = await prisma.user.aggregate({\n  _avg: {\n    age: true,\n  },\n  _count: {\n    age: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logging and Metrics Methods to Prisma Client\nDESCRIPTION: An example that adds two custom methods to Prisma Client: $log for outputting messages and $totalQueries for retrieving the number of queries executed by the client instance using the metrics feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/110-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  client: {\n    $log: (s: string) => console.log(s),\n    async $totalQueries() {\n      const index_prisma_client_queries_total = 0\n      // Prisma.getExtensionContext(this) in the following block\n      // returns the current client instance\n      const metricsCounters = await (\n        await Prisma.getExtensionContext(this).$metrics.json()\n      ).counters\n\n      return metricsCounters[index_prisma_client_queries_total].value\n    },\n  },\n})\n\nasync function main() {\n  prisma.$log('Hello world')\n  const totalQueries = await prisma.$totalQueries()\n  console.log(totalQueries)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Referential Actions in Prisma Schema\nDESCRIPTION: This example shows a more complex schema with one-to-many and many-to-many relationships, demonstrating various referential actions including SetNull and Cascade.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n\nmodel Post {\n  id     Int          @id @default(autoincrement())\n  title  String\n  tags   TagOnPosts[]\n  User   User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)\n  userId Int?\n}\n\nmodel TagOnPosts {\n  id     Int   @id @default(autoincrement())\n  post   Post? @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n  tag    Tag?  @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n  postId Int?\n  tagId  Int?\n}\n\nmodel Tag {\n  id    Int          @id @default(autoincrement())\n  name  String       @unique\n  posts TagOnPosts[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using UserInclude Type Example\nDESCRIPTION: This snippet shows how to define a UserInclude object with Prisma generated types to include related posts in a query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\\n\\nconst userPosts: Prisma.UserInclude = {\\n  posts: true,\\n}\\n\\n// properties available on the typed object\\nuserPosts.posts\\nuserPosts.profile\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: This command generates Prisma Client based on the schema defined in the 'schema.prisma' file. It installs necessary packages and creates a corresponding client ready for database interaction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nprisma generate\n```\n\n----------------------------------------\n\nTITLE: Filtering by Exact JSON Field Value\nDESCRIPTION: Query to find users where the extendedPetsData field exactly matches a given JSON value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar json = { [{ name: 'Bob the dog' }, { name: 'Claudine the cat' }] }\n\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      equals: json,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - MySQL Datasource\nDESCRIPTION: Defines the MySQL datasource block in the Prisma schema. Specifies the database provider as 'mysql' and retrieves the connection URL from the `DATABASE_URL` environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\n\"datasource db {\n  provider = \\\"mysql\\\"\n  url      = env(\\\"DATABASE_URL\\\")\n}\"\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script with Prisma Queries\nDESCRIPTION: Terminal command to execute the Node.js script containing Prisma Client queries. This executes the index.js file where the Prisma Client operations are defined.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Model for User, Post, and Profile\nDESCRIPTION: A Prisma schema that defines three related models: Post, Profile, and User. Each model has fields, relations, and appropriate indexes for a blog-like application structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n\n  @@index(authorId)\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n\n  @@index(userId)\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing editTodo Action with Prisma ORM in TypeScript\nDESCRIPTION: This code implements the editTodo action using Prisma ORM to update a Todo's text. It uses the prisma client's update method with a where clause to specify the record by id and a data object containing the new text value, followed by path revalidation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from \"next/cache\";\n\nimport { prisma } from \"@/db/prisma\";\n\nexport const editTodo = async (id: number, text: string) => {\n  await prisma.todo.update({\n    where: { id },\n    data: { text },\n  })\n  revalidatePath(\"/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Source in Prisma Schema\nDESCRIPTION: Defines the database connection configuration in the Prisma schema file using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Computed Fields in Prisma Client\nDESCRIPTION: This example shows how to reuse a computed field in another computed field within Prisma Client extensions. The 'titleFullName' field combines 'title' and 'fullName', which is computed using previously defined 'fullName'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/130-result.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n  .$extends({\n    result: {\n      user: {\n        fullName: {\n          needs: { firstName: true, lastName: true },\n          compute(user) {\n            return `${user.firstName} ${user.lastName}`\n          },\n        },\n      },\n    },\n  })\n  .$extends({\n    result: {\n      user: {\n        titleFullName: {\n          needs: { title: true, fullName: true },\n          compute(user) {\n            return `${user.title} (${user.fullName})`\n          },\n        },\n      },\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Safe SQL Query Execution Using Prisma.sql Helper in Prisma\nDESCRIPTION: Demonstrates safe methods of building raw queries separate from query execution using the Prisma.sql helper, which prevents SQL injection by properly parameterizing user input.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\n\nconst query = Prisma.sql`SELECT id, name FROM \"User\" WHERE name = ${inputString}`;\n\nconst result = await prisma.$queryRaw(query);\nconsole.log(result);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Version for Typescript\nconst query: any;\n\n// Version for Javascript\nconst query;\n\nquery = Prisma.sql`SELECT id, name FROM \"User\" WHERE name = $1`;\n\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\nquery.values = [inputString];\n\nconst result = await prisma.$queryRaw(query);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Relations\nDESCRIPTION: Example of creating a user with related posts and profile using Prisma Client's nested write capabilities. Includes querying the created data with related records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation with Prisma Client Extensions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add runtime validation when creating and updating values using a Zod schema to check that the data passed to Prisma Client is valid. It includes the Zod schema definition, Prisma Client extension, and example usage.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/061-custom-validation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\nimport { z } from 'zod'\n\n/**\n * Zod schema\n */\nexport const ProductCreateInput = z.object({\n  slug: z\n    .string()\n    .max(100)\n    .regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/),\n  name: z.string().max(100),\n  description: z.string().max(1000),\n  price: z\n    .instanceof(Prisma.Decimal)\n    .refine((price) => price.gte('0.01') && price.lt('1000000.00')),\n}) satisfies z.Schema<Prisma.ProductUncheckedCreateInput>\n\n/**\n * Prisma Client Extension\n */\nconst prisma = new PrismaClient().$extends({\n  query: {\n    product: {\n      create({ args, query }) {\n        args.data = ProductCreateInput.parse(args.data)\n        return query(args)\n      },\n      update({ args, query }) {\n        args.data = ProductCreateInput.partial().parse(args.data)\n        return query(args)\n      },\n      updateMany({ args, query }) {\n        args.data = ProductCreateInput.partial().parse(args.data)\n        return query(args)\n      },\n      upsert({ args, query }) {\n        args.create = ProductCreateInput.parse(args.create)\n        args.update = ProductCreateInput.partial().parse(args.update)\n        return query(args)\n      },\n    },\n  },\n})\n\nasync function main() {\n  /**\n   * Example usage\n   */\n  // Valid product\n  const product = await prisma.product.create({\n    data: {\n      slug: 'example-product',\n      name: 'Example Product',\n      description: 'Lorem ipsum dolor sit amet',\n      price: new Prisma.Decimal('10.95'),\n    },\n  })\n\n  // Invalid product\n  try {\n    await prisma.product.create({\n      data: {\n        slug: 'invalid-product',\n        name: 'Invalid Product',\n        description: 'Lorem ipsum dolor sit amet',\n        price: new Prisma.Decimal('-1.00'),\n      },\n    })\n  } catch (err: any) {\n    console.log(err?.cause?.issues)\n  }\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Generated Database Seed Script\nDESCRIPTION: Complete TypeScript seed script that creates sample organizations, users, and subscriptions with realistic data and proper relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/100-cursor.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  PrismaClient,\n  UserRole,\n  SubscriptionPlan,\n  SubscriptionStatus,\n} from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Clear existing data\n  await prisma.user.deleteMany();\n  await prisma.subscription.deleteMany();\n  await prisma.organization.deleteMany();\n\n  const organizations = [\n    {\n      name: \"Tech Innovators\",\n      slug: \"tech-innovators\",\n      subscription: {\n        plan: SubscriptionPlan.ENTERPRISE,\n        status: SubscriptionStatus.ACTIVE,\n        startDate: new Date(\"2024-01-01\"),\n      },\n      users: [\n        {\n          name: \"Emma Thompson\",\n          email: \"emma@techinnovators.com\",\n          role: UserRole.ADMIN,\n          password: \"password123\",\n        },\n        {\n          name: \"Michael Chen\",\n          email: \"michael@techinnovators.com\",\n          role: UserRole.MEMBER,\n          password: \"password123\",\n        },\n      ],\n    },\n    {\n      name: \"Digital Solutions\",\n      slug: \"digital-solutions\",\n      subscription: {\n        plan: SubscriptionPlan.PREMIUM,\n        status: SubscriptionStatus.ACTIVE,\n        startDate: new Date(\"2024-01-15\"),\n      },\n      users: [\n        {\n          name: \"Sarah Wilson\",\n          email: \"sarah@digitalsolutions.com\",\n          role: UserRole.ADMIN,\n          password: \"password123\",\n        },\n        {\n          name: \"James Miller\",\n          email: \"james@digitalsolutions.com\",\n          role: UserRole.MEMBER,\n          password: \"password123\",\n        },\n      ],\n    },\n    {\n      name: \"Cloud Systems\",\n      slug: \"cloud-systems\",\n      subscription: {\n        plan: SubscriptionPlan.BASIC,\n        status: SubscriptionStatus.ACTIVE,\n        startDate: new Date(\"2024-02-01\"),\n      },\n      users: [\n        {\n          name: \"David Garcia\",\n          email: \"david@cloudsystems.com\",\n          role: UserRole.ADMIN,\n          password: \"password123\",\n        },\n        {\n          name: \"Lisa Wang\",\n          email: \"lisa@cloudsystems.com\",\n          role: UserRole.MEMBER,\n          password: \"password123\",\n        },\n      ],\n    },\n    {\n      name: \"Data Analytics Co\",\n      slug: \"data-analytics\",\n      subscription: {\n        plan: SubscriptionPlan.PREMIUM,\n        status: SubscriptionStatus.ACTIVE,\n        startDate: new Date(\"2024-01-10\"),\n      },\n      users: [\n        {\n          name: \"Alex Johnson\",\n          email: \"alex@dataanalytics.com\",\n          role: UserRole.ADMIN,\n          password: \"password123\",\n        },\n        {\n          name: \"Rachel Kim\",\n          email: \"rachel@dataanalytics.com\",\n          role: UserRole.MEMBER,\n          password: \"password123\",\n        },\n      ],\n    },\n    {\n      name: \"Smart Solutions\",\n      slug: \"smart-solutions\",\n      subscription: {\n        plan: SubscriptionPlan.FREE,\n        status: SubscriptionStatus.ACTIVE,\n        startDate: new Date(\"2024-02-15\"),\n      },\n      users: [\n        {\n          name: \"Daniel Brown\",\n          email: \"daniel@smartsolutions.com\",\n          role: UserRole.ADMIN,\n          password: \"password123\",\n        },\n        {\n          name: \"Maria Rodriguez\",\n          email: \"maria@smartsolutions.com\",\n          role: UserRole.MEMBER,\n          password: \"password123\",\n        },\n      ],\n    },\n  ];\n\n  for (const org of organizations) {\n    const createdOrg = await prisma.organization.create({\n      data: {\n        name: org.name,\n        slug: org.slug,\n        subscription: {\n          create: {\n            plan: org.subscription.plan,\n            status: org.subscription.status,\n            startDate: org.subscription.startDate,\n          },\n        },\n      },\n    });\n\n    for (const user of org.users) {\n      await prisma.user.create({\n        data: {\n          name: user.name,\n          email: user.email,\n          password: user.password,\n          role: user.role,\n          organizationId: createdOrg.id,\n        },\n      });\n    }\n  }\n\n  console.log(\"Seed data created successfully\");\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Attributes in Prisma (MongoDB)\nDESCRIPTION: This snippet demonstrates how to define a User model in Prisma for MongoDB, utilizing attributes like @id, @default with auto-generated ObjectId, and @unique for email, alongside a composite @@unique constraint.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_14\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  firstName String\n  lastName  String\n  email     String  @unique\n  isAdmin   Boolean @default(false)\n\n  @@unique([firstName, lastName])\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Relations with Prisma\nDESCRIPTION: This snippet demonstrates how to retrieve a user's post count alongside user data using Prisma's `findMany` method with an include for count. It ensures that the count of posts is returned in the query result.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst relationCount = await prisma.user.findMany({\n  include: {\n    _count: {\n      select: { posts: true },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with User and Post Models\nDESCRIPTION: This snippet defines the Prisma schema with User and Post models, establishes a one-to-many relationship, and sets up the Prisma Client generator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: SQL View Creation Statement\nDESCRIPTION: SQL statement to create a UserInfo view joining User and Profile tables\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW \"UserInfo\" AS\n    SELECT u.id, email, name, bio\n    FROM \"User\" u\n    LEFT JOIN \"Profile\" p ON u.id = p.\"userId\";\n```\n\n----------------------------------------\n\nTITLE: JSON Object Array Filtering in Prisma\nDESCRIPTION: Demonstrates filtering based on JSON object arrays with specific values and structures for both PostgreSQL and MySQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst json = [{ status: 'expired', insuranceID: 92 }]\n\nconst checkJson = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: ['insurances'],\n      array_contains: json,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Native Types Mapping\nDESCRIPTION: Database-specific type mapping feature in Prisma schema for precise data type representation across different database systems\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n`nativeTypes`\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection URL\nDESCRIPTION: This snippet shows the structure of the DATABASE_URL environment variable in the .env file, which is used to configure the database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=ey....\"\n```\n\n----------------------------------------\n\nTITLE: Creating Order with Composite Type in TypeScript\nDESCRIPTION: Demonstrates how to create an order record with a composite type in Prisma using the `set` operation. Requires Prisma and a configured Prisma Client instance. The snippet includes setting a `shippingAddress` and connecting a product by ID. Outputs the newly created order record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await prisma.order.create({\n  data: {\n    // Normal relation\n    product: { connect: { id: 'some-object-id' } },\n    color: 'Red',\n    size: 'Large',\n    // Composite type\n    shippingAddress: {\n      set: {\n        street: '1084 Candycane Lane',\n        city: 'Silverlake',\n        zip: '84323',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection in Prisma Schema\nDESCRIPTION: Example of setting up a connection to a MySQL database in the Prisma schema file. It includes user, password, host, port, and database name in the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = \"mysql://janedoe:mypassword@localhost:3306/mydb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Model for Blog Application\nDESCRIPTION: This Prisma schema defines three related models: Post, Profile, and User. It includes field definitions, relationships, and database-specific type mappings for a blog application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Schema Querying with Prisma Client\nDESCRIPTION: Example of querying across multiple schemas using Prisma Client to fetch orders for a specific user.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/60-multi-schema.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.findMany({\n  where: {\n    user: {\n      id: 1,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Prisma Query Results\nDESCRIPTION: This snippet illustrates how to add a custom method 'save' to a Prisma Client query result. It uses the result extension component to define dependencies and implements the computation function to perform a database update operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/130-result.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  result: {\n    user: {\n      save: {\n        needs: { id: true },\n        compute(user) {\n          return () =>\n            prisma.user.update({ where: { id: user.id }, data: user })\n        },\n      },\n    },\n  },\n})\n\nconst user = await prisma.user.findUniqueOrThrow({ where: { id: someId } })\nuser.email = 'mynewmail@mailservice.com'\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Prisma Client to query all users from the database and log the results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Categories by Post and Assigned By in Prisma Client\nDESCRIPTION: This TypeScript snippet demonstrates how to query Categories based on related Post title and assignment criteria using Prisma Client in an explicit many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAssignments = await prisma.category.findMany({\n  where: {\n    posts: {\n      some: {\n        assignedBy: 'Bob',\n        post: {\n          title: {\n            contains: 'Cool stuff',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Many-to-Many Relations in Prisma Schema\nDESCRIPTION: This snippet shows how to define an implicit many-to-many relation between Post and Category models in Prisma schema for both relational databases and MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  categories Category[]\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id          String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  categoryIDs String[]   @db.ObjectId\n  categories  Category[] @relation(fields: [categoryIDs], references: [id])\n}\n\nmodel Category {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name    String\n  postIDs String[] @db.ObjectId\n  posts   Post[]   @relation(fields: [postIDs], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lists in Prisma Schema for Relational Databases\nDESCRIPTION: This example demonstrates how to define list fields in Prisma for relational databases. It includes both a relation list (comments) and a scalar list (keywords) using the [] type modifier.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int       @id @default(autoincrement())\n  // Other fields\n  comments Comment[] // A list of comments\n  keywords String[] // A scalar list\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma Client with Custom Fields\nDESCRIPTION: This snippet demonstrates how to add a custom field to a Prisma Client result using the $extends method. It creates a computed field 'myComputedField' for the 'user' model. Dependencies are defined using 'needs', and the logic for computation is provided in 'compute'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/130-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  name?: 'name',\n  result?: {\n    user: {                   // in this case, we extend the `user` model\n      myComputedField: {      // the name of the new computed field\n        needs: { ... },\n        compute() { ... }\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Named Compound IDs in Prisma Schema\nDESCRIPTION: This example shows how to create a named compound ID using the `name` parameter of the `@@id` attribute. The compound ID consisting of `postId` and `userId` is given the name 'likeId'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Like {\n  postId Int\n  userId Int\n  User   User @relation(fields: [userId], references: [id])\n  Post   Post @relation(fields: [postId], references: [id])\n\n  //highlight-next-line\n  @@id(name: \"likeId\", [postId, userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Logging Across All Operations\nDESCRIPTION: Uses the $allOperations method to log performance metrics for all queries, including the model, operation, arguments, and execution time.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    async $allOperations({ operation, model, args, query }) {\n      const start = performance.now()\n      const result = await query(args)\n      const end = performance.now()\n      const time = end - start\n      console.log(\n        util.inspect(\n          { model, operation, args, time },\n          { showHidden: false, depth: null, colors: true }\n        )\n      )\n      return result\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding environment variable loading script to package.json\nDESCRIPTION: This package.json snippet adds a script to load environment variables from the .dev.vars file, allowing Prisma CLI commands to access these variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    // ....\n    \"env\": \"dotenv -e .dev.vars\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregations with aggregateRaw() in TypeScript\nDESCRIPTION: Demonstrates using the aggregateRaw() method to perform MongoDB aggregation operations. This example groups registered users by country and counts the total number in each group using the MongoDB aggregation pipeline.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.aggregateRaw({\n  pipeline: [\n    { $match: { status: \"registered\" } },\n    { $group: { _id: \"$country\", total: { $sum: 1 } } },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling for Referential Integrity in TypeScript (Post-2.26.0)\nDESCRIPTION: Code example showing the updated way to catch and handle database foreign key constraint errors (P2003) after enabling referential actions in Prisma 2.26.0 and later.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  try {\n    await prisma.user.delete({\n      where: {\n        id: 'some-long-id'\n      }\n    })\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\n      if (error.code === 'P2003') {\n        console.log(error.message)\n      }\n    }\n  }\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Adding Profile Model to Prisma Schema\nDESCRIPTION: This new schema modification adds a Profile model to the existing Prisma schema, which includes a bio field and a one-to-one relation with the User model. This change is intended for creating an up migration and subsequently generating a down migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/60-generating-down-migrations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int     @id @default(autoincrement())\n  title    String  @db.VarChar(255)\n  content  String?\n  author   User    @relation(fields: [authorId], references: [id])\n  authorId Int\n}\n//add-start\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n//add-end\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?\n  posts   Post[]\n  //add-next-line\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Solving n+1 with relationLoadStrategy and the 'in' Filter\nDESCRIPTION: This snippet combines the 'in' filter with relationLoadStrategy: \"join\" to execute a single optimized SQL query that retrieves all posts for multiple users, using a database JOIN operation for maximum efficiency.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({})\n\nconst userIds = users.map((x) => x.id)\n\nconst posts = await prisma.post.findMany({\n  relationLoadStrategy: \"join\",\n  where: {\n    authorId: {\n      in: userIds,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating CUID values as IDs in Relational databases using Prisma\nDESCRIPTION: Configures a User model with an ID field that automatically generates CUID values as the primary key. Compatible with String type and implemented by Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_72\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(cuid())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields & Loading Relations with Prisma Client\nDESCRIPTION: This snippet compares field selection and relation loading in Prisma 1 with the ORM 2 approach, which enhances type safety using `select` and `include` methods. It highlights the flexibility of using these methods in various queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user({ id: 1 }).$fragment(`\n  fragment NameAndEmail on User { id email }`\n`)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.findUnique({\n  where: { id: 1 },\n  select: {\n    id: true,\n    email: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Correctly Disambiguating Relations Using the name Argument (Relational Databases)\nDESCRIPTION: This code demonstrates the correct way to disambiguate relations between User and Post models by using the name argument in the @relation attribute in relational databases. Each relation has a unique name that matches on both sides.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id           Int     @id @default(autoincrement())\n  name         String?\n  writtenPosts Post[]  @relation(\"WrittenPosts\")\n  pinnedPost   Post?   @relation(\"PinnedPost\")\n}\n\nmodel Post {\n  id         Int     @id @default(autoincrement())\n  title      String?\n  author     User    @relation(\"WrittenPosts\", fields: [authorId], references: [id])\n  authorId   Int\n  pinnedBy   User?   @relation(\"PinnedPost\", fields: [pinnedById], references: [id])\n  pinnedById Int?    @unique\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection URL Format\nDESCRIPTION: This snippet shows the general format for MySQL connection URLs with placeholders for user, password, host, port, and database name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL Environment Variable\nDESCRIPTION: Command to set the DATABASE_URL environment variable with the Prisma Postgres connection URL. This is necessary for the TCP tunnel to connect to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/110-import-from-existing-database-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=__API_KEY__\"\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client\nDESCRIPTION: Shows how to create a new user record with nested creation of related posts and profile records using Prisma Client's create operation with nested writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values in Prisma (MongoDB)\nDESCRIPTION: This snippet illustrates how to define a Post model in Prisma for MongoDB with default values using the @default attribute, covering fields such as createdAt and published, and showcasing the model's relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt  DateTime   @default(now())\n  title      String\n  published  Boolean    @default(false)\n  author     User       @relation(fields: [authorId], references: [id])\n  authorId   String     @db.ObjectId\n  categories Category[] @relation(references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CUID as ID in Prisma Schema for Relational Databases\nDESCRIPTION: Example of defining a CUID (Collision-resistant Unique IDentifier) as the ID field in a Prisma schema for relational databases using the @id and @default attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_29\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(cuid())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Updating and Returning Multiple Records with Prisma Client\nDESCRIPTION: Query that updates users with emails containing \"prisma.io\", setting their role to ADMIN, and returns the updated user objects. Available for PostgreSQL, CockroachDB, and SQLite in Prisma 6.2.0+.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst users = await prisma.user.updateManyAndReturn({\n  where: {\n    email: {\n      contains: 'prisma.io',\n    }\n  },\n  data: {\n    role: 'ADMIN'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Migration SQL with Prisma CLI\nDESCRIPTION: Uses the prisma migrate diff command to generate a SQL migration script by comparing an empty state to the current schema, and outputs the result to a file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prisma Client in a Separate File\nDESCRIPTION: This TypeScript snippet initializes the Prisma Client and ensures that only one instance is created, optimizing usage in Next.js development.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '../src/app/generated/prisma'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst globalForPrisma = global as unknown as { \n    prisma: PrismaClient\n}\n\nconst prisma = globalForPrisma.prisma || new PrismaClient().$extends(withAccelerate())\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport default prisma\n```\n\n----------------------------------------\n\nTITLE: Create Migration Script - TypeScript\nDESCRIPTION: Defines a TypeScript script that updates the Post records to set the new status field based on the previous published boolean field during migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  await prisma.$transaction(async (tx) => {\n    const posts = await tx.post.findMany()\n    for (const post of posts) {\n      await tx.post.update({\n        where: { id: post.id },\n        data: {\n          status: post.published ? 'Published' : 'Unknown',\n        },\n      })\n    }\n  })\n}\n\nmain()\n  .catch(async (e) => {\n    console.error(e)\n    process.exit(1)\n  })\n  .finally(async () => await prisma.$disconnect())\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL in Environment Variable\nDESCRIPTION: Defines the `DATABASE_URL` environment variable in a `.env` file to store the database connection string securely, facilitating database access for Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=postgresql://__USER__:__PASSWORD__@__HOST__:__PORT__/CheckDemo\n```\n\n----------------------------------------\n\nTITLE: Updating a Post with Prisma Client\nDESCRIPTION: Updates an existing post record by ID to set its published status to true.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma in Database Package with npm\nDESCRIPTION: Initializes Prisma in the database package directory, specifying the output directory for generated Prisma client files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --db --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Self Relation Model Definition\nDESCRIPTION: Defines a User model with a many-to-many self-relation for following relationships. Users can follow and be followed by multiple other users.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id         Int     @id @default(autoincrement())\n  name       String?\n  followedBy User[]  @relation(\"UserFollows\")\n  following  User[]  @relation(\"UserFollows\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching selected scalars: Prisma ORM\nDESCRIPTION: Fetches a single user object from the database using Prisma ORM, selecting only the `name` field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 1,\n  },\n  select: {\n    name: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Queries Over Relations Using Fluent API in Prisma Client\nDESCRIPTION: This snippet illustrates how to chain queries to traverse relations and fetch posts linked through a user and their profile. The expected input is the profile ID, and the output will be the posts associated with the user of the profile.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts: Post[] = await prisma.profile\n  .findUnique({ where: { id: 1 } })\n  .user()\n  .posts()\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types in Prisma Schema\nDESCRIPTION: Demonstrates how to define and use enum types for user roles with default values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_22\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  role  Role    @default(USER)\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String  @unique\n  name  String?\n  role  Role    @default(USER)\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Methods with Prisma Client Extension in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Prisma Client extension that adds 'signUp' and 'findManyByDomain' methods to a User model. It includes bcrypt for password hashing and shows example usage of the custom methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/064-custom-models.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport bcrypt from 'bcryptjs'\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient().$extends({\n  model: {\n    user: {\n      async signUp(email: string, password: string) {\n        const hash = await bcrypt.hash(password, 10)\n        return prisma.user.create({\n          data: {\n            email,\n            password: {\n              create: {\n                hash,\n              },\n            },\n          },\n        })\n      },\n\n      async findManyByDomain(domain: string) {\n        return prisma.user.findMany({\n          where: { email: { endsWith: `@${domain}` } },\n        })\n      },\n    },\n  },\n})\n\nasync function main() {\n  // Example usage\n  await prisma.user.signUp('user2@example2.com', 's3cret')\n\n  await prisma.user.findManyByDomain('example2.com')\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Database Seed - Terminal\nDESCRIPTION: Executes the Prisma CLI command to seed the database. This command looks for the `prisma.seed` configuration in `package.json` and runs the specified script to populate the database with initial data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db seed\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Self Relation Model Definition\nDESCRIPTION: Defines a User model with a one-to-many self-relation for teacher-student relationships. One user can be a teacher to multiple students.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int     @id @default(autoincrement())\n  name      String?\n  teacherId Int?\n  teacher   User?   @relation(\"TeacherStudents\", fields: [teacherId], references: [id])\n  students  User[]  @relation(\"TeacherStudents\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Model to Prisma Schema\nDESCRIPTION: Updated Prisma schema showing the addition of a Tag model and its many-to-many relationship with the Post model. Includes existing User and Profile models with their relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Prisma Schema\nDESCRIPTION: Sets up the datasource block in the Prisma schema to connect to a PostgreSQL database using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in TypeScript\nDESCRIPTION: Sets up a basic Prisma Client instance with a main function for executing database queries and proper connection handling. This pattern ensures connections are properly closed regardless of whether operations succeed or fail.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Relations with Prisma\nDESCRIPTION: This snippet illustrates how to filter and sort a list of unpublished posts related to a user using Prisma's `findFirst` method with either `select` or `include`. It returns the titles of the posts while ensuring they are sorted in ascending order.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.findFirst({\n  select: {\n    posts: {\n      where: {\n        published: false,\n      },\n      orderBy: {\n        title: 'asc',\n      },\n      select: {\n        title: true,\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.findFirst({\n  include: {\n    posts: {\n      where: {\n        published: false,\n      },\n      orderBy: {\n        title: 'asc',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Models for Relational Databases\nDESCRIPTION: Example schema showing model definitions for a blogging platform using PostgreSQL, including User, Profile, Post and Category models with relationships and enums.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  role    Role     @default(USER)\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Profile {\n  id     Int    @id @default(autoincrement())\n  bio    String\n  user   User   @relation(fields: [userId], references: [id])\n  userId Int    @unique\n}\n\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  createdAt  DateTime   @default(now())\n  updatedAt  DateTime   @updatedAt\n  title      String\n  published  Boolean    @default(false)\n  author     User       @relation(fields: [authorId], references: [id])\n  authorId   Int\n  categories Category[]\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: Simple query to fetch all user records from the database using Prisma Client's findMany operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Vercel Build Script with Prisma Migrations\nDESCRIPTION: Custom build command for CI/CD workflows that generates Prisma Client, applies migrations, and builds the Next.js application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/300-deploy-to-vercel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\" {\n    \"vercel-build\": \"prisma generate && prisma migrate deploy && next build\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ordering Aggregations in Prisma\nDESCRIPTION: Shows how to combine aggregation with filtering and ordering in Prisma Client. This query calculates the average age of users with specific email criteria, ordered by age and limited to 10 results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst aggregations = await prisma.user.aggregate({\n  _avg: {\n    age: true,\n  },\n  where: {\n    email: {\n      contains: 'prisma.io',\n    },\n  },\n  orderBy: {\n    age: 'asc',\n  },\n  take: 10,\n})\n\nconsole.log('Average age:' + aggregations._avg.age)\n```\n\n----------------------------------------\n\nTITLE: Data Model Definition in Prisma Schema\nDESCRIPTION: Demonstrates how to define User and Post models with relationships in Prisma schema language, showing primary keys, field types, and relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int?\n  author    User?   @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single-Column Index in Prisma Schema\nDESCRIPTION: Example showing how to define a single-column index on the title field in a Post model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_54\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int     @id @default(autoincrement())\n  title   String\n  content String?\n\n  @@index([title])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'exists' Method on Prisma Models in TypeScript\nDESCRIPTION: This snippet demonstrates creating an `exists` method on all Prisma models using the `findFirst` operation. It retrieves data based on the `where` condition and returns a boolean indicating the existence of records. It requires Prisma Client and utilizes the `Args` type utility to ensure strict type-checking.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/150-type-utilities.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  model: {\n    $allModels: {\n      // Define a new `exists` operation on all models\n      // T is a generic type that corresponds to the current model\n      async exists<T>(\n        // `this` refers to the current type, e.g. `prisma.user` at runtime\n        this: T,\n\n        // The `exists` function will use the `where` arguments from the current model, `T`, and the `findFirst` operation\n        where: Prisma.Args<T, 'findFirst'>['where']\n      ): Promise<boolean> {\n        // Retrieve the current model at runtime\n        const context = Prisma.getExtensionContext(this)\n\n        // Prisma Client query that retrieves data based\n        const result = await (context as any).findFirst({ where })\n        return result !== null\n      },\n    },\n  },\n})\n\nasync function main() {\n  const user = await prisma.user.exists({ name: 'Alice' })\n  const post = await prisma.post.exists({\n    OR: [\n      { title: { contains: 'Prisma' } },\n      { content: { contains: 'Prisma' } },\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma datasource with PostgreSQL connection\nDESCRIPTION: Sets up the datasource block in the Prisma schema file to connect to a PostgreSQL database using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Field in Prisma Schema\nDESCRIPTION: Example of how to define a JSON field in a Prisma schema model. The User model includes an optional Json field named extendedPetsData.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id               Int     @id @default(autoincrement())\n  email            String  @unique\n  name             String?\n  posts            Post[]\n  //highlight-next-line\n  extendedPetsData Json?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for Prisma Postgres\nDESCRIPTION: Prisma schema configuration showing how to set the database connection URL using an environment variable. This is typically used in the schema.prisma file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/110-import-from-existing-database-postgresql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Logic with Prisma Client in Express - TypeScript\nDESCRIPTION: This Express controller class uses Prisma Client to create a new user by extracting email and name from the request body. Assumes prisma is properly imported and initialized, and that req and res are Express Request/Response types. Returns the created user as JSON, and should be integrated into your Express routing logic.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from '../client'\n\nexport class UserController {\n  async create(req: Request, res: Response) {\n    const { email, name } = req.body\n    \n    const result = await prisma.user.create({\n      data: {\n        email,\n        name,\n      },\n    })\n    \n    return res.json(result)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in Node.js\nDESCRIPTION: Basic setup code for initializing PrismaClient and creating a main function for database operations. Includes error handling and proper database disconnection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing GDPR Data Deletion with $transaction in Prisma\nDESCRIPTION: Shows how to use the $transaction API to delete all user data across multiple tables (posts, messages, and user record) in a single atomic operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = 9 // User to be deleted\n\nconst deletePosts = prisma.post.deleteMany({\n  where: {\n    userId: id,\n  },\n})\n\nconst deleteMessages = prisma.privateMessage.deleteMany({\n  where: {\n    userId: id,\n  },\n})\n\nconst deleteUser = prisma.user.delete({\n  where: {\n    id: id,\n  },\n})\n\nawait prisma.$transaction([deletePosts, deleteMessages, deleteUser]) // Operations succeed or fail together\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar List in Prisma Schema for MongoDB\nDESCRIPTION: Example of defining a scalar list (array) field in a Prisma schema for MongoDB. It shows the use of ObjectId for the id field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_23\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  favoriteColors String[]\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Filtering for Existing SQLite Column\nDESCRIPTION: This SQL snippet provides a method to add case-insensitive capabilities to an existing SQLite column, requiring the creation of a new table and data migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/070-case-sensitivity.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- UpdateTable\nALTER TABLE \"User\" RENAME TO \"User_old\";\n\nCREATE TABLE \"User\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"email\" TEXT NOT NULL COLLATE NOCASE\n);\n\nINSERT INTO \"User\" (id, email)\nSELECT id, email FROM \"User_old\";\n\nDROP TABLE \"User_old\";\n```\n\n----------------------------------------\n\nTITLE: Querying Related Data with Include\nDESCRIPTION: This example demonstrates how to return a user and their related posts using the include option in Prisma Client. The query returns all fields from both the user and posts tables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: Demonstrates a simple query to fetch all User records from the database using Prisma Client's findMany method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  // ... you will write your Prisma Client queries here\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client Relations\nDESCRIPTION: Shows how to create a new user record with nested related records (posts and profile) in a single query using Prisma Client's create method with nested writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Using @ignore Field Attribute Example\nDESCRIPTION: Demonstrates how to exclude a field from Prisma Client using the @ignore attribute on the email field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_65\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id\n  name  String\n  email String @ignore // this field will be excluded\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Project and Installing Dependencies\nDESCRIPTION: Sets up a new TypeScript project and installs necessary dependencies including Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\nnpm init -y\nnpm install typescript tsx @types/node --save-dev\nnpx tsc --init\nnpm install prisma --save-dev\nnpx prisma init --datasource-provider sqlite --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Filtering JSON Fields with Null Values in Prisma\nDESCRIPTION: This snippet demonstrates how to filter JSON fields with null values using Prisma. It uses the AnyNull enum to match both JSON null and database NULL values in a query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nprisma.log.findMany({\n  where: {\n    data: {\n      meta: {\n        equals: Prisma.AnyNull,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Create Many Records Feature\nDESCRIPTION: Bulk record creation method in Prisma Client for efficiently inserting multiple records in a single operation\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`createMany`\n```\n\n----------------------------------------\n\nTITLE: Configuring prisma-client Generator in Prisma Schema\nDESCRIPTION: This example demonstrates how to configure the new prisma-client generator in the Prisma schema. It specifies the provider and sets a custom output path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client\"            // Required\n  output   = \"../src/generated/prisma\"  // Required path\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migration\nDESCRIPTION: Executes a Prisma migration to create database tables based on the defined schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Prisma User Model\nDESCRIPTION: Basic Prisma schema definition for a User model with id, email, and name fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Users by Country in Prisma\nDESCRIPTION: Demonstrates the use of Prisma Client's groupBy function to group users by country and calculate the total number of profile views for each country.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupUsers = await prisma.user.groupBy({\n  by: ['country'],\n  _sum: {\n    profileViews: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating ULID values as IDs in Relational databases using Prisma\nDESCRIPTION: Configures a User model with an ID field that automatically generates ULID values as the primary key. ULIDs are 26-character long alphanumeric strings that are sortable lexicographically.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_80\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(ulid())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Datasource Configuration for Vercel Postgres\nDESCRIPTION: This Prisma schema defines a datasource configuration specifically for Vercel Postgres, utilizing connection pooling and direct connections.  It configures the `url` to use `POSTGRES_PRISMA_URL` for connection pooling and `directUrl` to use `POSTGRES_URL_NON_POOLING` for a direct connection, additionally enabling the `driverAdapters` preview feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"POSTGRES_PRISMA_URL\")      // uses connection pooling\n  directUrl = env(\"POSTGRES_URL_NON_POOLING\") // uses a direct connection\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Client API Usage Example\nDESCRIPTION: Example of using the generated Prisma Client API with proper naming conventions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.myUser.create({\n  data: {\n    firstName: 'Alice',\n    lastName: 'Smith',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Case-Insensitive Filtering with Prisma Client\nDESCRIPTION: This TypeScript snippet illustrates how to utilize the 'mode: \"insensitive\"' property for case-insensitive email filtering in PostgreSQL when querying users with Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/070-case-sensitivity.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    email: {\n      endsWith: 'prisma.io',\n      mode: 'insensitive', // Default value: default\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Models for User, Post, and Profile\nDESCRIPTION: Prisma schema definition creating three related models: Post, Profile, and User. Uses BigInt IDs with sequence defaults, timestamps, and establishes relationships between models using @relation directives.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        BigInt   @id @default(sequence())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   \n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  BigInt\n}\n\nmodel Profile {\n  id     BigInt  @id @default(sequence())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId BigInt  @unique\n}\n\nmodel User {\n  id      BigInt   @id @default(sequence())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Prisma Schema for PostgreSQL\nDESCRIPTION: This code snippet shows how to configure the datasource block in the Prisma schema to connect to a PostgreSQL database using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma.validator for type-safe UserSelect\nDESCRIPTION: This code snippet demonstrates how to use the `Prisma.validator` function to create a type-safe `UserSelect` object.  It ensures that only specified properties can be accessed, enhancing type safety compared to a regular `UserSelect` object.  This is achieved by passing the `UserSelect` type to `Prisma.validator` and defining the desired fields within the returned function.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/050-prisma-validator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nconst userEmail = Prisma.validator<Prisma.UserSelect>()({\n  email: true,\n})\n\n// Run inside async function\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 3,\n  },\n  select: userEmail,\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations with Prisma ORM Using include\nDESCRIPTION: Demonstrates how to fetch a record along with its related records using Prisma's include option. This example retrieves a user and includes their related posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.user.findUnique({\n  where: {\n    id: 2,\n  },\n  include: {\n    post: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL object types using Nexus in TypeScript\nDESCRIPTION: Defines GraphQL object types that map to Prisma models using the Nexus objectType function. Imports objectType from 'nexus' and creates a skeleton for the User type which can be progressively expanded by exposing model fields using t.model. Fields correspond to Prisma model properties. Relation fields require additional type definitions. The snippet highlights use of nexus-plugin-prisma for autocompletion and typing. This setup requires a running Nexus development server for type generation. Input: none explicitly, outputs typed GraphQL object types to be used in schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { objectType } from 'nexus'\n\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    // the fields of the type will be defined here\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    t.model.id()\n    t.model.email()\n    t.model.name()\n    t.model.jsonData()\n    t.model.role()\n    t.model.profile()\n    t.model.posts()\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    t.model.id()\n    t.model.email()\n    t.model.name()\n    t.model.jsonData()\n    t.model.role()\n    t.model.profile()\n    //add-start\n    t.model.posts({\n      filtering: true,\n      ordering: true,\n    })\n    //add-end\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const schema = makeSchema({\n  types: [Query, User],\n  plugins: [nexusSchemaPrisma()],\n  outputs: {\n    schema: __dirname + '/../schema.graphql',\n    typegen: __dirname + '/generated/nexus.ts',\n  },\n  typegenAutoConfig: {\n    sources: [\n      {\n        source: '@prisma/client',\n        alias: 'prisma',\n      },\n    ],\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Post = objectType({\n  name: 'Post',\n  definition(t) {\n    t.model.id()\n    t.model.createdAt()\n    t.model.updatedAt()\n    t.model.title()\n    t.model.content()\n    t.model.published()\n    t.model.author()\n    t.model.authorId()\n    t.model.categories({\n      filtering: true,\n      ordering: true,\n    })\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Profile = objectType({\n  name: 'Profile',\n  definition(t) {\n    t.model.id()\n    t.model.bio()\n    t.model.userId()\n    t.model.user()\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Category = objectType({\n  name: 'Category',\n  definition(t) {\n    t.model.id()\n    t.model.name()\n    t.model.posts({\n      filtering: true,\n      ordering: true,\n    })\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const schema = makeSchema({\n  types: [Query, User, Post, Profile, Category],\n  plugins: [nexusSchemaPrisma()],\n  outputs: {\n    schema: __dirname + '/../schema.graphql',\n    typegen: __dirname + '/generated/nexus.ts',\n  },\n  typegenAutoConfig: {\n    sources: [\n      {\n        source: '@prisma/client',\n        alias: 'prisma',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Empty Arrays\nDESCRIPTION: Example of using the isEmpty filter to find posts with empty tag arrays. This query returns posts with empty arrays but not NULL arrays.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    tags: {\n      isEmpty: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Solving n+1 with Prisma's include for Nested Reads\nDESCRIPTION: This snippet demonstrates how to use Prisma's include feature to fetch related data in a single query. This approach replaces multiple queries with just two SQL queries - one for users and one for all related posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithPosts = await prisma.user.findMany({\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a new SvelteKit project using Svelte CLI\nDESCRIPTION: Command to initialize a new SvelteKit project using the Svelte CLI, which provides an interactive setup with built-in support for tools like ESLint and Prettier.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx sv create sveltekit-prisma\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Filtering with Multiple Conditions in PostgreSQL\nDESCRIPTION: Query combining multiple JSON property filters using AND logic to find records matching multiple criteria in PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    AND: [\n      {\n        extendedPetsData: {\n          path: ['pet2', 'petName'],\n          equals: 'Sunny',\n        },\n      },\n      {\n        extendedPetsData: {\n          path: ['pet2', 'features', 'furColor'],\n          string_contains: 'black',\n        },\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Implicit Many-to-Many Relation in Prisma Schema\nDESCRIPTION: This snippet demonstrates the correct way to define an implicit many-to-many relationship in Prisma schema without using the @relation attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/500-troubleshooting-relations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  categories Category[]\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BRIN Index with Int4BloomOps in Prisma Schema\nDESCRIPTION: This snippet showcases defining a BRIN index on a `value` field of type `Int` using the `Int4BloomOps` operator class in the Prisma schema.  The index type is explicitly set to `Brin`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  id    Int @id\n  value Int\n  //    ^ field type matching the operator class\n  //                  ^ operator class      ^ index type\n\n  @@index([value(ops: Int4BloomOps)], type: Brin)\n}\n```\n\n----------------------------------------\n\nTITLE: Expand the Schema with New Status Field - Prisma\nDESCRIPTION: Updates the Post model to include a new Status enum and an additional status field, preparing for future data migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean? @default(false)\n  status    Status   @default(Unknown)\n}\n\nenum Status {\n  Unknown\n  Draft\n  InProgress\n  InReview\n  Published\n}\n```\n\n----------------------------------------\n\nTITLE: Express User Controller with Prisma Client\nDESCRIPTION: Implement a user creation controller using Prisma Client in an Express application\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/050-migrate-from-mongoose.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from '../client'\n\nexport class UserController {\n  async create(req: Request, res: Response) {\n    const { email, name } = req.body\n    \n    const result = await prisma.user.create({\n      data: {\n        email,\n        name,\n      },\n    })\n    \n    return res.json(result)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Post Record Status\nDESCRIPTION: Updates an existing Post record to change its published status using Prisma Client's update method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await prisma.post.update({\n  where: { id: 1 },\n  data: { published: true },\n})\nconsole.log(post)\n```\n\n----------------------------------------\n\nTITLE: Extending Raw Query Operations for Relational Databases\nDESCRIPTION: Customizes the behavior of top-level raw query operations like $queryRaw and $executeRaw for relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    $queryRaw({ args, query, operation }) {\n      // handle $queryRaw operation\n      return query(args)\n    },\n    $executeRaw({ args, query, operation }) {\n      // handle $executeRaw operation\n      return query(args)\n    },\n    $queryRawUnsafe({ args, query, operation }) {\n      // handle $queryRawUnsafe operation\n      return query(args)\n    },\n    $executeRawUnsafe({ args, query, operation }) {\n      // handle $executeRawUnsafe operation\n      return query(args)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example MySQL Connection URL for AWS RDS\nDESCRIPTION: Shows how to format a connection URL for a MySQL database hosted on AWS RDS, including the specific hostname format used by RDS.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:XXX@mysql–instance1.123456789012.us-east-1.rds.amazonaws.com:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection Command\nDESCRIPTION: Terminal command to introspect the database schema using Prisma CLI, which reads the database structure and generates a Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Contains Filter for Posts - Prisma ORM - TypeScript\nDESCRIPTION: This code snippet illustrates how to filter posts by titles that contain a specific substring using Prisma ORM. The condition is specified in the 'where' clause utilizing the 'contains' method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: {\n      contains: 'Hello World',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Users with Prisma Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Prisma Client to create a new user and query all users in a JavaScript environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst newUser = await prisma.user.create({\n  data: {\n    name: 'Alice',\n  },\n})\nconst allUsers = await prisma.user.findMany()\n```\n\n----------------------------------------\n\nTITLE: Creating nested records with Prisma Client relations\nDESCRIPTION: Shows how to create related records across multiple tables using Prisma Client's nested writes feature. This snippet creates a User record along with related Post and Profile records in a single query, then retrieves the created data with the included relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Post Records with Prisma Client\nDESCRIPTION: Demonstrates how to update an existing post record by setting its published status using Prisma Client's update operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { title: 'Hello World' },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts by Author Properties in Prisma Client\nDESCRIPTION: This snippet filters posts to find those authored by individuals who are not named Bob and are older than 40. The input consists of conditions regarding the author's name and age, and the expected output is the relevant posts along with their authors included.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.post.findMany({\n  where: {\n    //highlight-start\n    author: {\n      isNot: {\n        name: 'Bob',\n      },\n      is: {\n        age: {\n          gt: 40,\n        },\n      },\n    },\n  },\n  //highlight-end\n  include: {\n    author: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with TypeScript\nDESCRIPTION: Basic setup for Prisma Client including initialization, connection handling, and error management. Creates a reusable database client instance with proper connection lifecycle management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Feature in Prisma Schema\nDESCRIPTION: This snippet shows how to add a Preview feature flag to the generator block in the schema.prisma file. It enables the 'relationJoins' feature as an example.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"relationJoins\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition\nDESCRIPTION: Sample Prisma schema defining User and Post models with their relationships and fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  email String @unique\n  name  String\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String\n  published Boolean\n  user      User    @relation(fields: [userId], references: [id])\n  userId    Int\n}\n```\n\n----------------------------------------\n\nTITLE: Add Prisma generate to package.json scripts\nDESCRIPTION: This JavaScript snippet adds a `postinstall` script to the `package.json` file. When `npm install` is run, the `prisma generate` command is executed to generate the Prisma client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    // ...\n    //add-next-line\n    \"postinstall\": \"prisma generate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating IDs from varchar(25) to varchar(30) in MySQL\nDESCRIPTION: SQL statements to change the ID columns from varchar(25) to varchar(30) across multiple tables. This addresses the mismatch in CUID length between Prisma 1 and Prisma ORM 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSET FOREIGN_KEY_CHECKS=0;\nALTER TABLE `Category` CHANGE `id` `id` char(30) CHARACTER SET utf8 NOT NULL;\nALTER TABLE `Post` CHANGE `id` `id` char(30) CHARACTER SET utf8 NOT NULL;\nALTER TABLE `Profile` CHANGE `id` `id` char(30) CHARACTER SET utf8 NOT NULL;\nALTER TABLE `Profile` CHANGE `user` `user` char(30) CHARACTER SET utf8 ;\nALTER TABLE `User` CHANGE `id` `id` char(30) CHARACTER SET utf8 NOT NULL;\nSET FOREIGN_KEY_CHECKS=1;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Prisma Schema in Prisma\nDESCRIPTION: This snippet shows a basic Prisma schema file created by the 'init' command. It defines a datasource and a generator for Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client Instance\nDESCRIPTION: Creates a new Prisma Client instance and stores it to the global object to prevent multiple instances, used for avoiding issues during hot-reloading.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"../generated/prisma\";\n\ndeclare global {\n  // avoid multiple instances when hot-reloading\n  var prismaClient: PrismaClient;\n}\n\nglobalThis.prismaClient ??= new PrismaClient();\n\nconst prisma = globalThis.prismaClient;\n\nexport default prisma;\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Scalar Fields for Relational Databases\nDESCRIPTION: Creates a User model with email and name fields, where email is required and unique.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  email String  @unique // `email` can not be optional because it's the only unique field on the model\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Relation Table Names in Prisma Schema\nDESCRIPTION: Prisma schema that demonstrates how to configure a custom name for the relation table in an implicit many-to-many relationship. This uses the @relation attribute to specify a custom name for the underlying database table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_14\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  categories Category[] @relation(\"MyRelationTable\")\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  posts Post[] @relation(\"MyRelationTable\")\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database via Prisma CLI\nDESCRIPTION: Runs the Prisma CLI command to seed the database with the defined initial data from the seed.ts file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db seed\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client with Full Text Search\nDESCRIPTION: This Prisma configuration snippet enables the full text search preview feature for PostgreSQL, which is necessary to order query results by relevance. This requires Prisma version 3.5.0 or higher for PostgreSQL. The generator block specifies that the Prisma JavaScript client should be used.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"fullTextSearchPostgres\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying a Specific Operation Across All Models\nDESCRIPTION: Creates an extension that applies a limit of 100 results to all findMany operations across all models in the schema by setting the take parameter.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    $allModels: {\n      async findMany({ model, operation, args, query }) {\n        // set `take` and fill with the rest of `args`\n        args = { ...args, take: 100 }\n\n        return query(args)\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Create Prisma Client Instance\nDESCRIPTION: Creates a new file `prisma.ts` in the `db` directory and instantiates the `PrismaClient`. This allows you to use the Prisma Client to send database queries from your route handlers.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\n\"touch db/prisma.ts\"\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Soft Delete Field in Prisma\nDESCRIPTION: A Prisma schema definition that includes a 'deleted' Boolean field on the Post model to track soft-deleted records. The schema includes User, Post, Category, and Tag models with their respective relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/100-soft-delete-middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  name      String?\n  email     String  @unique\n  posts     Post[]\n  followers User[]  @relation(\"UserToUser\")\n  user      User?   @relation(\"UserToUser\", fields: [userId], references: [id])\n  userId    Int?\n}\n\nmodel Post {\n  id      Int     @id @default(autoincrement())\n  title   String\n  content String?\n  user    User?   @relation(fields: [userId], references: [id])\n  userId  Int?\n  tags    Tag[]\n  views   Int     @default(0)\n  deleted Boolean @default(false)\n}\n\nmodel Category {\n  id             Int        @id @default(autoincrement())\n  parentCategory Category?  @relation(\"CategoryToCategory\", fields: [categoryId], references: [id])\n  category       Category[] @relation(\"CategoryToCategory\")\n  categoryId     Int?\n}\n\nmodel Tag {\n  tagName String @id // Must be unique\n  posts   Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding a Field Globally in Prisma Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to exclude a field globally for all queries against a given model using the 'omit' option when initializing PrismaClient. In this case, the 'password' field is excluded from all User model queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/063-excluding-fields.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  omit: {\n    user: {\n      password: true\n    }\n  }\n})\n\n// The password field is excluded in all queries, including this one\nconst user = await prisma.user.findUnique({ where: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Model to Prisma Schema\nDESCRIPTION: Prisma schema modification showing the addition of a Tag model and establishing many-to-many relationship with Post model. Includes field definitions for id, name, and relationship fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Prisma Schema with Relations\nDESCRIPTION: Complete Prisma schema with added relationship fields between models using @relation decorator\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n\n  @@index([authorId])\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n\n  @@index([userId])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection URL in Environment Variables\nDESCRIPTION: Defines the PostgreSQL connection URL as an environment variable in the .env file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based Pagination with Prisma ORM vs Sequelize\nDESCRIPTION: Compares cursor-based pagination approaches in both ORMs. Prisma uses before/after with last/first parameters, while Sequelize uses operators with limit to achieve similar functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = await prisma.post.findMany({\n  before: {\n    id: 242,\n  },\n  last: 20,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.findAll({\n  limit: 20,\n  where: {\n    id: {\n      [Op.gt]: 242,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering on Nested JSON Property in PostgreSQL\nDESCRIPTION: Query to filter users based on a deeply nested JSON property value using PostgreSQL array path syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: ['pet2', 'petName'],\n      equals: 'Sunny',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Generator in Prisma Schema\nDESCRIPTION: This snippet shows how to define a generator block in a Prisma schema file. It specifies the provider as 'prisma-client-js' and sets a custom output path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Query for Case-Insensitive Filtering with Prisma Client\nDESCRIPTION: This TypeScript snippet shows how to filter users by email in a case-insensitive manner using Prisma Client, demonstrating the concept of case-insensitivity due to MySQL's default collation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/070-case-sensitivity.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    email: {\n      contains: 'prisMa',\n    },\n  },\n  select: {\n    id: true,\n    name: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Engine Type for Prisma CLI in Bash\nDESCRIPTION: This example shows how to set the query engine type for Prisma CLI to 'binary' using the PRISMA_CLI_QUERY_ENGINE_TYPE environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/300-environment-variables-reference.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPRISMA_CLI_QUERY_ENGINE_TYPE=binary\n```\n\n----------------------------------------\n\nTITLE: Prisma CLI Warning for Missing Index\nDESCRIPTION: This terminal output shows the warning message displayed by Prisma CLI when an index is missing on a relation field in the 'prisma' relation mode.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/420-relation-mode.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nWith `relationMode = \"prisma\"`, no foreign keys are used, so relation fields will not benefit from the index usually created by the relational database under the hood. This can lead to poor performance when querying these fields. We recommend adding an index manually.\n```\n\n----------------------------------------\n\nTITLE: Implementing Posts Form Component\nDESCRIPTION: Initial implementation of the post creation form with React Router Form component. Includes form fields for title and content with basic styling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/new\";\nimport { Form } from \"react-router\";\n\nexport async function action({ request }: Route.ActionArgs) {\n  const formData = await request.formData();\n  const title = formData.get(\"title\") as string;\n  const content = formData.get(\"content\") as string;\n}\n\nexport default function NewPost() {\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-6\">Create New Post</h1>\n      <Form method=\"post\" className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"title\" className=\"block text-lg mb-2\">\n            Title\n          </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Enter your post title\"\n            className=\"w-full px-4 py-2 border rounded-lg\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"content\" className=\"block text-lg mb-2\">\n            Content\n          </label>\n          <textarea\n            id=\"content\"\n            name=\"content\"\n            placeholder=\"Write your post content here...\"\n            rows={6}\n            className=\"w-full px-4 py-2 border rounded-lg\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600\"\n        >\n          Create Post\n        </button>\n      </Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Migration SQL for CockroachDB\nDESCRIPTION: SQL script generated by Prisma Migrate to create tables for User, Post, and Profile in a CockroachDB database. Includes primary keys, foreign keys, and default values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  name STRING(255),\n  email STRING(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE \"Post\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  title STRING(255) UNIQUE NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n  content STRING,\n  published BOOLEAN NOT NULL DEFAULT false,\n  \"authorId\" INT8 NOT NULL,\n  FOREIGN KEY (\"authorId\") REFERENCES \"User\"(id)\n);\n\nCREATE TABLE \"Profile\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  bio STRING,\n  \"userId\" INT8 UNIQUE NOT NULL,\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Template Variables with String Values\nDESCRIPTION: Demonstrates a correct approach to using template variables with $queryRaw by passing the whole string as a variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = \"My name is Bob\";\nawait prisma.$queryRaw`SELECT ${name};`;\n```\n\n----------------------------------------\n\nTITLE: Next.js Page with Prisma Client Database Query\nDESCRIPTION: Demonstrate importing and using the shared Prisma Client to query the User model in a Next.js page\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/140-use-prisma-in-pnpm-workspaces.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"database\";\n\nexport default async function Home() {\n  const user = await prisma.user.findFirst({\n    select: {\n      name: true\n    }\n  })\n\n  return (\n    <div>\n      {user?.name && <p>Hello from {user.name}</p>}\n      {!user?.name && <p>No user has been added to the database yet. </p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Model to Prisma Schema\nDESCRIPTION: Prisma schema modification that adds a new Tag model and establishes a many-to-many relationship with the Post model. Includes field definitions for id, name, and relationship fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Record with Prisma Client\nDESCRIPTION: Demonstrates how to update an existing database record by using Prisma Client's update method, specifically changing the published status of a post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Prisma Client Instance\nDESCRIPTION: This snippet shows how to create a reusable PrismaClient instance in a new prisma.ts file, optionally extending it with Accelerate extension for Prisma Postgres.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"../src/generated/prisma\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\n\nconst prisma = new PrismaClient().$extends(withAccelerate());\n\nexport default prisma;\n```\n\n----------------------------------------\n\nTITLE: Using Custom PointOfInterest Query Method\nDESCRIPTION: Shows how to use the `findClosestPoints` method in Prisma Client for fetching the nearest 'PointOfInterest' records. It takes latitude and longitude as inputs and returns an array of `MyPointOfInterest` objects based on proximity.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst closestPointOfInterest = await prisma.pointOfInterest.findClosestPoints(\n  53.5488,\n  9.9872\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Prisma Client findMany Query\nDESCRIPTION: Demonstrates how to retrieve all User records from the database using the Prisma Client findMany method and display the results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-field IDs in User Model - Prisma\nDESCRIPTION: This snippet illustrates how to define a composite ID using multi-field IDs in a User model for relational databases. The `@@id` attribute is demonstrated with multiple fields specified.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_38\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  firstName String\n  lastName  String\n  email     String  @unique\n  isAdmin   Boolean @default(false)\n\n  @@id([firstName, lastName])\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Data from Query Results\nDESCRIPTION: Example showing how to access related post data after fetching a user with included posts. This demonstrates the type-safe access to nested relationship data in Prisma Client query results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(user.posts[0].title)\n```\n\n----------------------------------------\n\nTITLE: Reading All Users with Prisma Client\nDESCRIPTION: Demonstrates a simple query to retrieve all User records from the database using Prisma Client's findMany method and log the results to the console.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Prisma\nDESCRIPTION: This code snippet demonstrates a Prisma query that retrieves user data based on email criteria while including related 'links'. This can lead to overfetching if more fields than necessary are retrieved.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/500-select-returning.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany({\n  where: {\n    email: { contains: \"gmail\" },\n  },\n  include: {\n    links: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting PrismaClient Instance in TypeScript\nDESCRIPTION: Creates a single instance of PrismaClient and exports it for reuse across the application. This approach helps in caching the PrismaClient object and prevents creating multiple instances.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nlet prisma = new PrismaClient()\n\nexport default prisma\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v7 values as IDs in Relational databases using Prisma\nDESCRIPTION: Configures a User model with an ID field that automatically generates UUID v7 values as the primary key, which includes a timestamp component.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_78\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(uuid(7))\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Defined Arguments in Prisma Seed File\nDESCRIPTION: This JavaScript code demonstrates how to implement user-defined arguments in a Prisma seed file. It uses the parseArgs function to handle custom environment arguments, allowing different seeding behavior based on the specified environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseArgs } from 'node:util'\n\nconst options = {\n  environment: { type: 'string' },\n}\n\nasync function main() {\n  const {\n    values: { environment },\n  } = parseArgs({ options })\n\n  switch (environment) {\n    case 'development':\n      /** data for your development */\n      break\n    case 'test':\n      /** data for your test environment */\n      break\n    default:\n      break\n  }\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Pre-computed UUIDs with $transaction API in Prisma\nDESCRIPTION: Demonstrates using the $transaction API with pre-computed UUIDs to create related entities independently, as an alternative to nested writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 } from 'uuid'\n\nconst teamID = v4()\nconst userID = v4()\n\nawait prisma.$transaction([\n  prisma.user.create({\n    data: {\n      id: userID,\n      email: 'alice@prisma.io',\n      team: {\n        id: teamID,\n      },\n    },\n  }),\n  prisma.team.create({\n    data: {\n      id: teamID,\n      name: 'Aurora Adventures',\n    },\n  }),\n])\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection with Force Flag\nDESCRIPTION: This command demonstrates how to run Prisma introspection with the --force flag to overwrite manual changes and generate a schema based solely on the introspected database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull --force\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client Library in Node.js - Terminal\nDESCRIPTION: This command installs the @prisma/client package, which is required for accessing your database in application code using Prisma Client. Ensure you have Node.js (v18+) and have run prisma generate after this step. This should be run in your project root.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Generation in package.json\nDESCRIPTION: Add a postinstall script to regenerate Prisma Client during Vercel builds, ensuring an up-to-date client for each deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/300-deploy-to-vercel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\" {\n    \"postinstall\": \"prisma generate\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Relations in Prisma\nDESCRIPTION: Demonstrates how to count related records (e.g., a user's post count) using Prisma Client's _count parameter with a nested select.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithCount = await prisma.user.findMany({\n  include: {\n    _count: {\n      select: { posts: true },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Migration Command for Tag Model\nDESCRIPTION: Terminal command to generate and apply the migration for the new Tag model using Prisma Migrate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name tags-model\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Relations in Prisma Schema\nDESCRIPTION: This Prisma schema snippet shows how to disambiguate multiple relations between User and Post models using dedicated relation names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id                          Int   @id @default(autoincrement())\n  author                      Int\n  favoritedBy                 Int?\n  User_Post_authorToUser      User  @relation(\"Post_authorToUser\", fields: [author], references: [id])\n  User_Post_favoritedByToUser User? @relation(\"Post_favoritedByToUser\", fields: [favoritedBy], references: [id])\n}\n\nmodel User {\n  id                          Int    @id @default(autoincrement())\n  Post_Post_authorToUser      Post[] @relation(\"Post_authorToUser\")\n  Post_Post_favoritedByToUser Post[] @relation(\"Post_favoritedByToUser\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in Node.js\nDESCRIPTION: Basic setup code for initializing PrismaClient and creating a main function for database operations. Includes error handling and proper connection management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Posts List Page Implementation\nDESCRIPTION: Implementation of a posts listing page with Prisma queries including author relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/home\";\nimport prisma from \"~/lib/prisma\";\n\nexport async function loader() {\n  const posts = await prisma.post.findMany({\n    include: {\n      author: true,\n    },\n  });\n  return { posts };\n}\n\nexport default function Posts({ loaderData }: Route.ComponentProps) {\n  const { posts } = loaderData;\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center -mt-16\">\n      <h1 className=\"text-4xl font-bold mb-8 font-[family-name:var(--font-geist-sans)]\">\n        Posts\n      </h1>\n      <ul className=\"font-[family-name:var(--font-geist-sans)] max-w-2xl space-y-4\">\n        {posts.map((post) => (\n          <li key={post.id}>\n            <span className=\"font-semibold\">{post.title}</span>\n            <span className=\"text-sm text-gray-600 ml-2\">\n              by {post.author.name}\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma DB Push Command\nDESCRIPTION: This command pushes your current Prisma schema directly to the database without creating migration files. It's useful during development for quickly syncing your database schema with your Prisma schema when migration history isn't a concern.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/200-install-prisma-client-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Fetching Connection Pool Metrics (TypeScript)\nDESCRIPTION: This snippet illustrates how to retrieve and log metrics about the Prisma Client's connection pool, including the number of open, busy, and idle connections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/115-connection-pool.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  await Promise.all([prisma.user.findMany(), prisma.post.findMany()])\n\n  const metrics = await prisma.$metrics.json()\n  console.dir(metrics, { depth: Infinity })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Prisma Client Middleware in TypeScript\nDESCRIPTION: Example showing how to implement middleware with Prisma Client using the $use method. The code demonstrates the structure with two middleware functions that can manipulate params before a query and process results afterward.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\n// Middleware 1\n//highlight-start\nprisma.$use(async (params, next) => {\n  // Manipulate params here\n  const result = await next(params)\n  // See results here\n  return result\n})\n//highlight-end\n\n// Middleware 2\n//highlight-start\nprisma.$use(async (params, next) => {\n  // Manipulate params here\n  const result = await next(params)\n  // See results here\n  return result\n})\n//highlight-end\n\n// Queries here\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate Command\nDESCRIPTION: This command creates a new migration file named 'init' and runs it against the database. It generates the SQL needed to create the tables based on the Prisma schema and applies those changes to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client\nDESCRIPTION: TypeScript example showing how to create a User record with nested Post and Category records using Prisma Client's nested write capabilities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({})\n\nasync function main() {\n  const user = await prisma.user.create({\n    data: {\n      email: 'ariadne@prisma.io',\n      name: 'Ariadne',\n      posts: {\n        create: [\n          {\n            title: 'My first day at Prisma',\n            categories: {\n              create: {\n                name: 'Office',\n              },\n            },\n          },\n          {\n            title: 'How to connect to a SQLite database',\n            categories: {\n              create: [{ name: 'Databases' }, { name: 'Tutorials' }],\n            },\n          },\n        ],\n      },\n    },\n  })\n\n  const returnUser = await prisma.user.findUnique({\n    where: {\n      id: user.id,\n    },\n    include: {\n      posts: {\n        include: {\n          categories: true,\n        },\n      },\n    },\n  })\n\n  console.log(returnUser)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Selection in Prisma Client\nDESCRIPTION: This example shows how to create deeply nested selections. It fetches a post's title, the name of its author, and the biography from the author's profile, traversing multiple relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsWithAuthorsAndProfiles = await prisma.post.findFirst({\n  select: {\n    title: true,\n    author: {\n      select: { \n        name: true,\n        profile: {\n          select: { biography: true }\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Safer Alternative with PostCreateInput Type\nDESCRIPTION: This snippet outlines a safer alternative to creating a post by using the PostCreateInput type, which avoids potentially unsafe direct relation writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype PostCreateInput = {\\n  title: string\\n  content?: string | null\\n  author: UserCreateNestedOneWithoutPostsInput\\n}\\\\n\\ntype UserCreateNestedOneWithoutPostsInput = {\\n  create?: XOR<\\n    UserCreateWithoutPostsInput,\\n    UserUncheckedCreateWithoutPostsInput\\n  >\\n  connectOrCreate?: UserCreateOrConnectWithoutPostsInput\\n  connect?: UserWhereUniqueInput\\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate: Production Deploy Command\nDESCRIPTION: This command is used in production and testing environments to apply pending database migrations.  It compares applied migrations against the migration history and warns if any migrations have been modified.  It is recommended to be part of an automated CI/CD pipeline.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/90-development-and-production.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma migrate deploy\"\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema with Implicit Many-to-Many Relation\nDESCRIPTION: Shows the initial Prisma schema with implicit many-to-many relationship between User and Post models using array fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/300-implicit-to-explicit-conversion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int       @id @default(autoincrement())\n  name      String\n  posts     Post[]\n}\n\nmodel Post {\n  id        Int       @id @default(autoincrement())\n  title     String\n  authors   User[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Records with Composite Type Using updateMany\nDESCRIPTION: Demonstrates how to update multiple order records whose `shippingAddress` matches specific criteria using Prisma's `updateMany`. Requires Prisma and a configured Prisma Client instance. Features the use of an `is` filter to target specific orders for updating their `shippingAddress` fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.updateMany({\n  where: {\n    shippingAddress: {\n      is: {\n        street: '555 Candy Cane Lane',\n      },\n    },\n  },\n  data: {\n    shippingAddress: {\n      update: {\n        street: '111 Candy Cane Drive',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting a Record with Compound ID\nDESCRIPTION: This snippet shows how to use the `upsert()` method with a compound ID. The query attempts to update a record matching the compound ID, and creates a new record with the specified data if no match is found.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.like.upsert({\n  where: {\n    likeId: {\n      userId: 1,\n      postId: 1,\n    },\n  },\n  update: {\n    userId: 2,\n  },\n  create: {\n    userId: 2,\n    postId: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Level for Interactive Transactions in Prisma\nDESCRIPTION: Code example showing how to set the transaction isolation level for interactive transactions. This approach allows developers to specify the isolation level along with other transaction parameters like timeout and max wait time.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait prisma.$transaction(\n  async (prisma) => {\n    // Code running in a transaction...\n  },\n  {\n    isolationLevel: Prisma.TransactionIsolationLevel.Serializable, // optional, default defined by database configuration\n    maxWait: 5000, // default: 2000\n    timeout: 10000, // default: 5000\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection URL in Environment Variables\nDESCRIPTION: This snippet demonstrates how to define the DATABASE_URL environment variable in a .env file with the proper PostgreSQL connection string format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Parameterized Query Example\nDESCRIPTION: Example SQL query for PostgreSQL using positional placeholders ($1, $2) to create a parameterized query for filtering users by age.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, age\nFROM users\nWHERE age > $1 AND age < $2\n```\n\n----------------------------------------\n\nTITLE: User Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a User model with typed properties matching the database schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  user_id: number\n  name: string\n  email: string\n  isAdmin: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct URL in Prisma Schema\nDESCRIPTION: Updates the Prisma schema to include both the Accelerate connection string and a direct database connection for migrations and introspection. The directUrl property enables these operations while still using Accelerate for queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM: Creating a Record\nDESCRIPTION: This code snippet demonstrates how to create a new user record using TypeORM. It uses the `userRepository` to save a new user object with the given email and name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Create\nconst user = await userRepository.save({\n  email: 'alice@prisma.io',\n  name: 'Alice'\n});\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate to Create Database Schema\nDESCRIPTION: This command creates a new SQL migration file and runs it against the database to create the tables defined in the Prisma schema. It also generates Prisma Client if it's not already installed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Project with Prisma Dependencies\nDESCRIPTION: Commands to initialize a Node.js project, install Prisma CLI, TypeScript, and other necessary dependencies. This setup prepares the environment for developing with Prisma ORM in TypeScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install prisma typescript tsx @types/node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Datasource in Prisma Schema\nDESCRIPTION: This snippet shows how to set up the datasource block in your Prisma schema to connect to a SQL Server database. It uses an environment variable for the connection URL for better security and flexibility.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Prisma Client Generation on Vercel\nDESCRIPTION: Updates to the package.json file to add a postinstall script that generates Prisma Client during Vercel deployment. This ensures the Prisma Client is correctly built in the deployment environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    //add-next-line\n    \"postinstall\": \"prisma generate\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"prisma\": {\n    \"seed\": \"tsx prisma/seed.ts\"\n  },\n  \"dependencies\": {\n    \"@prisma/client\": \"^6.2.1\",\n    \"@prisma/extension-accelerate\": \"^1.2.1\",\n    \"next\": \"15.1.4\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"eslint\": \"^9\",\n    \"eslint-config-next\": \"15.1.4\",\n    \"postcss\": \"^8\",\n    \"prisma\": \"^6.2.1\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Field Mapping Usage\nDESCRIPTION: Example of how mapped fields are used in Prisma Client operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    firstName: \"Yewande\", // first_name --> firstName\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Migration SQL\nDESCRIPTION: SQL generated from the first Prisma migration, creating User and Post tables with proper relationships and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/050-getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" SERIAL,\n    \"name\" TEXT NOT NULL,\n\n    PRIMARY KEY (\"id\")\n);\n  -- CreateTable\nCREATE TABLE \"Post\" (\n    \"id\" SERIAL,\n    \"title\" TEXT NOT NULL,\n    \"published\" BOOLEAN NOT NULL DEFAULT true,\n    \"authorId\" INTEGER NOT NULL,\n\n    PRIMARY KEY (\"id\")\n);\n\n  -- AddForeignKey\nALTER TABLE \"Post\" ADD FOREIGN KEY(\"authorId\")REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Listing All Projects in a Specified Workspace\nDESCRIPTION: This command lists all projects within a specified workspace. The workspace ID must be provided as an argument.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform project show \\\n--workspace $INSERT_WORKSPACE_ID \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Extending Specific Prisma Model with Custom Method in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend a specific Prisma model, such as the `user` model, with a custom method using the `$extends` function. Dependencies include the Prisma Client and an optional preview feature flag. A parameter, `email`, is used to create a user. The expected outcome is the creation of a new user record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/100-model.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  name?: '<name>',  // (optional) names the extension for error logs\n  model?: {\n    user: { ... }   // in this case, we extend the `user` model\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  model: {\n    user: {\n      async signUp(email: string) {\n        await prisma.user.create({ data: { email } })\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.signUp('john@prisma.io')\n```\n\n----------------------------------------\n\nTITLE: Initializing Single Prisma Client Instance in Next.js\nDESCRIPTION: Creates a singleton pattern for Prisma Client to prevent multiple instances during Next.js hot-reloading. Uses global variable to maintain single instance across development reloads.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/400-nextjs-help.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI in a Node.js Project\nDESCRIPTION: Initializes a Node.js project and installs Prisma CLI as a development dependency using npm. This sets up the foundation for using Prisma ORM in a new project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init -y\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring prisma-client-js Generator with Additional Options\nDESCRIPTION: This example demonstrates how to configure the prisma-client-js generator with preview features and binary targets. It includes a sample preview feature and specifies a binary target for Ubuntu 18+.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"sample-preview-feature\"]\n  binaryTargets   = [\"debian-openssl-1.1.x\"] // defaults to `\"native\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate Prisma Client in a TypeScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n// use `prisma` in your application to read and write data in your DB\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate Dev - Terminal\nDESCRIPTION: Executes the Prisma CLI command to run database migrations. The `migrate dev` command creates database tables based on the current schema, generates the Prisma Client, and records the migration history. The `--name init` flag provides a name for the initial migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating Prisma Client in JavaScript\nDESCRIPTION: This snippet shows how to import and instantiate Prisma Client in a JavaScript environment using require.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project for MongoDB\nDESCRIPTION: Terminal commands to create a new project directory, initialize npm, install Prisma dependencies, and initialize Prisma with MongoDB configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir blog\ncd blog\nnpm init -y\nnpm install -D prisma\nnpx prisma init --datasource-provider mongodb --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Database Schema Introspection Command in Prisma\nDESCRIPTION: Command to pull the current database schema and update the Prisma schema file accordingly.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/200-troubleshooting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Transforming Explicit Relation Data for UI Consumption\nDESCRIPTION: TypeScript code that maps the complex explicit relation query result to a simpler format by removing the relation table data for better frontend usage.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = posts.map((post) => {\n  return { ...post, tags: post.tags.map((tag) => tag.tag) }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PlanetScale Prisma Schema\nDESCRIPTION: Prisma schema configuration for PlanetScale database connection with driver adapters feature flag enabled.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\" // required for PlanetScale (as by default foreign keys are disabled)\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database with Initial Data\nDESCRIPTION: Creates a seed.ts file for inserting initial data into the Prisma Postgres database via the Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '../app/generated/prisma'\n\nconst prisma = new PrismaClient()\n\nconst userData: Prisma.UserCreateInput[] = [\n  {\n    name: 'Alice',\n    email: 'alice@prisma.io',\n    posts: {\n      create: [\n        {\n          title: 'Join the Prisma Discord',\n          content: 'https://pris.ly/discord',\n          published: true,\n        },\n        {\n          title: 'Prisma on YouTube',\n          content: 'https://pris.ly/youtube',\n        },\n      ],\n    },\n  },\n  {\n    name: 'Bob',\n    email: 'bob@prisma.io',\n    posts: {\n      create: [\n        {\n          title: 'Follow Prisma on Twitter',\n          content: 'https://www.twitter.com/prisma',\n          published: true,\n        },\n      ],\n    },\n  }\n]\n\nexport async function main() {\n  for (const u of userData) {\n    await prisma.user.create({ data: u })\n  }\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Example of Using PostCreateInput Type\nDESCRIPTION: This snippet shows how to use the PostCreateInput type to create a new post with a nested author relation, providing a safer way to handle relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nprisma.post.create({\\n  data: {\\n    title: 'First post',\\n    content: 'Welcome to the first post in my blog...',\\n    author: {\\n      connect: {\\n        id: 1,\\n      },\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Adding full-text search indexes in Prisma schema for MySQL\nDESCRIPTION: This Prisma schema snippet demonstrates how to add full-text search indexes to fields in a model for MySQL databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n}\n\nmodel Blog {\n  id      Int    @unique\n  content String\n  title   String\n\n  @@fulltext([content])\n  @@fulltext([content, title])\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Types for Typed JSON Fields in TypeScript\nDESCRIPTION: This snippet shows how to declare types for typed JSON fields in TypeScript. It defines a global namespace for Prisma JSON types to be used with typed JSON fields in the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace PrismaJson {\n    type LogMetaType = { timestamp: number; host: string }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Constraints for 1-1 Relations\nDESCRIPTION: SQL command to add UNIQUE constraint to foreign key columns for proper 1-1 relation recognition.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"default$default\".\"Profile\" ADD UNIQUE (\"user\");\n```\n\n----------------------------------------\n\nTITLE: Instantiating Prisma Client for Post Database in TypeScript\nDESCRIPTION: This code creates and exports a Prisma Client instance for the post database with Accelerate extension. It implements the singleton pattern to prevent multiple instances during development hot reloading.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"../prisma-post-database/post-database-client-types\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\"\n\nconst getPrisma = () => new PrismaClient().$extends(withAccelerate());\n\nconst globalForPostDBPrismaClient = global as unknown as {\n  postDBPrismaClient: ReturnType<typeof getPrisma>;\n};\n\nexport const postDBPrismaClient =\n  globalForPostDBPrismaClient.postDBPrismaClient || getPrisma();\n\nif (process.env.NODE_ENV !== \"production\")\n  globalForPostDBPrismaClient.postDBPrismaClient = postDBPrismaClient;\n```\n\n----------------------------------------\n\nTITLE: Adding new Nexus imports\nDESCRIPTION: This TypeScript code snippet shows the necessary imports for the updated project using `@nexus/schema` and `nexus-plugin-prisma`. It includes `nexusSchemaPrisma`, `objectType`, `makeSchema`, `queryType`, `mutationType` from `@nexus/schema` and `PrismaClient` from `@prisma/client`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { nexusSchemaPrisma } from 'nexus-plugin-prisma/schema'\\nimport { objectType, makeSchema, queryType, mutationType } from '@nexus/schema'\\nimport { PrismaClient } from '@prisma/client'\"\n```\n\n----------------------------------------\n\nTITLE: Using Compound IDs with connectOrCreate\nDESCRIPTION: This snippet demonstrates how to use `connectOrCreate` with a compound ID. The query attempts to connect a new User to an existing Like record identified by the compound ID, or creates a new Like record if none exists.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    name: 'Alice',\n    likes: {\n      connectOrCreate: {\n        create: {\n          postId: 1,\n        },\n        where: {\n          likeId: {\n            postId: 1,\n            userId: 1,\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Migration path for handling optional values with strictUndefinedChecks\nDESCRIPTION: Shows how to migrate existing code that uses optional values to work with the strictUndefinedChecks feature by using the nullish coalescing operator with Prisma.skip.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nlet optionalEmail: string | undefined\n\nprisma.user.create({\n  data: {\n    name: 'Alice',\n    email: optionalEmail\n  }\n})\n\n// After\nprisma.user.create({\n  data: {\n    name: 'Alice',\n    // highlight-next-line\n    email: optionalEmail ?? Prisma.skip\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Script for Backward Migration in Prisma\nDESCRIPTION: This command generates a SQL script to revert the database to a previous state defined by local migrations. It uses prisma migrate diff to compare the production database with local migrations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff \\\n --from-url \"$DATABASE_URL_PROD\" \\\n --to-migrations ./prisma/migrations \\\n --shadow-database-url $SHADOW_DATABASE_URL \\\n --script > backward.sql\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts Without Authors in Prisma Client\nDESCRIPTION: This snippet demonstrates how to filter posts to find those without an associated author. The output will include all posts that meet this condition. The input consists of searching criteria where the author is null.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst postsWithNoAuthor = await prisma.post.findMany({\n  where: {\n    //highlight-next-line\n    author: null, // or author: { }\n  },\n  include: {\n    author: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Project with Prisma Dependencies\nDESCRIPTION: Commands to initialize a Node.js project with npm, and install necessary dependencies including Prisma CLI, TypeScript, tsx, and Node type definitions as development dependencies.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb-typescript-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init -y\nnpm install prisma typescript tsx @types/node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Query with Tag\nDESCRIPTION: Demonstrates setting up a cached query with a specific cache tag for later invalidation. Uses SWR and TTL caching strategies with a 60-second duration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/300-caching.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany({\n  where: {\n    email: {\n      contains: \"alice@prisma.io\",\n    },\n  },\n  cacheStrategy: {\n    swr: 60,\n    ttl: 60,\n    tags: [\"emails_with_alice\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with ULID in MongoDB - Prisma\nDESCRIPTION: This snippet demonstrates how to set up a User model for MongoDB using ULID as the default value for the ID. The `id` field is automatically assigned with ULID and mapped to `_id`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_34\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(ulid()) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Author Information - Prisma ORM - TypeScript\nDESCRIPTION: This snippet retrieves a list of posts from the Prisma database, including the associated author information. It utilizes the 'findMany' method with an 'include' parameter to specify related data to fetch alongside each post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  include: {\n    author: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Customized Prisma Client API\nDESCRIPTION: This TypeScript snippet demonstrates how to use the Prisma Client API with the customized model and field names, showcasing nested writes and the fluent API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/100-custom-model-and-field-names.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Nested writes\nconst profile = await prisma.profile.create({\n  data: {\n    bio: 'Hello World',\n    users: {\n      create: {\n        name: 'Alice',\n        email: 'alice@prisma.io',\n      },\n    },\n  },\n})\n\n// Fluent API\nconst userByProfile = await prisma.profile\n  .findUnique({\n    where: { id: 1 },\n  })\n  .users()\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Datasource in Prisma Schema\nDESCRIPTION: This Prisma schema snippet shows how to configure the datasource block for connecting to a MongoDB server. It specifies the MongoDB provider and uses an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Fields in Prisma Schema for Relational Databases\nDESCRIPTION: This example shows how to define relation fields between models in a relational database. The Post model has a one-to-many relationship with Comments, while the Comment model references back to its associated Post using a foreign key.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int       @id @default(autoincrement())\n  // Other fields\n  comments Comment[] // A post can have many comments\n}\n\nmodel Comment {\n  id     Int\n  // Other fields\n  post   Post? @relation(fields: [postId], references: [id]) // A comment can have one post\n  postId Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Field Names Using @map in Prisma Schema\nDESCRIPTION: Demonstrates how to use the @map attribute to customize field names in Prisma schema. This allows mapping a camelCase field name in the schema to a different name (like snake_case) in the actual database column.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmyField @map(\"my_field\")\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive JSON Property Filter in PostgreSQL\nDESCRIPTION: Query demonstrating how to use case-insensitive string filtering on JSON properties in PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: ['petType'],\n      string_contains: 'cat',\n      mode: 'insensitive'\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting with Logging Enabled (TypeScript)\nDESCRIPTION: This snippet demonstrates how to instantiate the Prisma Client with logging enabled to monitor the connection pool size when executing queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/115-connection-pool.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: ['info'],\n})\n\nasync function main() {\n  await prisma.user.findMany()\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Raw SQL Query in JavaScript\nDESCRIPTION: This snippet demonstrates how to use a raw SQL query to insert data into a User table using Prisma's $executeRaw method. It includes error handling and database disconnection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function rawSql() {\n  const result = await prisma.$executeRaw`INSERT INTO \"User\" (\"id\", \"email\", \"name\") VALUES (3, 'foo@example.com', 'Foo') ON CONFLICT DO NOTHING;`\n  console.log({ result })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmain()\n  .then(rawSql)\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Writes\nDESCRIPTION: Example of creating a User record with a related Post record using Prisma Client's nested write capabilities. Includes retrieving the created records with related data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Rich',\n      email: 'hello@prisma.com',\n      posts: {\n        create: {\n          title: 'My first post',\n          body: 'Lots of really interesting stuff',\n          slug: 'my-first-post',\n        },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized 1-1 Relation\nDESCRIPTION: Prisma schema showing how a 1-1 relation between User and Profile models appears after adding a UNIQUE constraint and re-introspecting the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_24\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      String   @id\n  //highlight-next-line\n  Profile Profile?\n}\n\nmodel Profile {\n  id   String  @id\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Relation Table in Implicit Many-to-Many Relation\nDESCRIPTION: This snippet shows how to use the @relation attribute to name the underlying relation table created in an implicit many-to-many relationship.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/500-troubleshooting-relations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  categories Category[] @relation(\"CategoryPostRelation\")\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[] @relation(\"CategoryPostRelation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Job Title Field Migration\nDESCRIPTION: Updated Prisma schema showing the addition of a jobTitle field to the User model, demonstrating schema evolution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/050-getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       Int    @id @default(autoincrement())\n  jobTitle String\n  name     String\n  posts    Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering on Object Property in PostgreSQL\nDESCRIPTION: Query to find users where a specific property in a JSON object matches a given value using PostgreSQL syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: ['petName'],\n      equals: 'Claudine',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateUser Mutation with Nexus CRUD\nDESCRIPTION: Using Nexus' CRUD capabilities to implement the createUser mutation, which forwards the operation to Prisma Client with an alias to maintain the original API naming.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    t.crud.createOneUser({\n      alias: 'createUser',\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating with Prisma: Data Validation\nDESCRIPTION: This snippet demonstrates how Prisma ORM enforces data validation during record creation. The TypeScript compiler catches missing required fields (e.g., `email`), preventing runtime errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUser = await prisma.user.create({\n  data: {\n    name: 'Alice',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for User and Password Models\nDESCRIPTION: This Prisma schema defines the data model for User and Password, including their relationships and field types. It specifies PostgreSQL as the database provider and sets up the Prisma Client generator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/064-custom-models.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       String    @id @default(cuid())\n  email    String\n  password Password?\n}\n\nmodel Password {\n  hash   String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering on Nested JSON Property in MySQL\nDESCRIPTION: Query to filter users based on a deeply nested JSON property value using MySQL dot notation path syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: '$.pet2.petName',\n      equals: 'Sunny',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Targets for Prisma Schema\nDESCRIPTION: Specifies binary targets to ensure compatibility between local development environment and Azure Functions remote build environment. Includes native and Debian OpenSSL targets for broader compatibility.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/150-deploy-to-azure-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider      = \"prisma-client-js\"\n  binaryTargets = [\"native\", \"debian-openssl-1.1.x\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Mixed Native Type Attributes\nDESCRIPTION: Demonstrates a Prisma schema with different field types and a native type attribute for a specific column\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/830-prisma-type-system.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id\n  title     String\n  createdAt DateTime\n  updatedAt DateTime @db.Date\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Read Replicas Extension\nDESCRIPTION: This snippet initializes Prisma Client and extends it with the `readReplicas` extension.  It configures the extension to use a read replica by providing a connection string via the `DATABASE_URL_REPLICA` environment variable. Read operations are directed to the replica, while write operations target the primary database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/200-read-replicas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { PrismaClient } from '@prisma/client'\\nimport { readReplicas } from '@prisma/extension-read-replicas'\\n\\nconst prisma = new PrismaClient().$extends(\\n  readReplicas({\\n    url: process.env.DATABASE_URL_REPLICA,\\n  })\\n)\\n\\n// Query is run against the database replica\\nawait prisma.post.findMany()\\n\\n// Query is run against the primary database\\nawait prisma.post.create({ \\n  data: {/** */},\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: Demonstrates how to perform a simple read operation to retrieve all users from the database using Prisma Client's findMany method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Old Column - Prisma\nDESCRIPTION: Modifies the Post model schema by removing the obsolete published field and retaining the new status field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int      @id @default(autoincrement())\n  title   String\n  content String?\n  status  Status   @default(Unknown)\n}\n\nenum Status {\n  Draft\n  InProgress\n  InReview\n  Published\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma Client for Edge Environments in TypeScript\nDESCRIPTION: This snippet demonstrates how to import Prisma Client for edge environments in a TypeScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client/edge'\n\nconst prisma = new PrismaClient()\n// use `prisma` in your application to read and write data in your DB\n```\n\n----------------------------------------\n\nTITLE: Starting TCP Tunnel for Prisma Postgres\nDESCRIPTION: Command to start the TCP tunnel using the @prisma/ppg-tunnel package. This creates a secure connection to the Prisma Postgres database for data import.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/110-import-from-existing-database-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @prisma/ppg-tunnel --host 127.0.0.1 --port 5433 \n```\n\n----------------------------------------\n\nTITLE: Handling Referential Integrity Errors in TypeScript (Pre-2.26.0)\nDESCRIPTION: Code example showing how to catch and handle referential integrity errors (P2014) when trying to delete a record that has related records, prior to Prisma 2.26.0.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  try {\n    await prisma.user.delete({\n      where: {\n        id: 'some-long-id',\n      },\n    })\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\n      if (error.code === 'P2014') {\n        console.log(error.message)\n      }\n    }\n  }\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Engine Type in Prisma Schema\nDESCRIPTION: Configures the query engine type by setting the engineType property in the Prisma schema file. This example sets it to use the binary engine which runs in its own process rather than the default Node-API library.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider   = \"prisma-client-js\"\n  engineType = \"binary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Relations Between Models in Prisma (Relational Databases)\nDESCRIPTION: This code demonstrates an incorrect schema with ambiguous relations between User and Post models, highlighting the ambiguity that can occur with multiple relations between the same models in relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\n// NOTE: This schema is intentionally incorrect. See below for a working solution.\n\nmodel User {\n  id           Int     @id @default(autoincrement())\n  name         String?\n  writtenPosts Post[]\n  pinnedPost   Post?\n}\n\nmodel Post {\n  id         Int     @id @default(autoincrement())\n  title      String?\n  author     User    @relation(fields: [authorId], references: [id])\n  authorId   Int\n  pinnedBy   User?   @relation(fields: [pinnedById], references: [id])\n  pinnedById Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cascade Referential Actions in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to use the Cascade referential action for both onDelete and onUpdate in a Prisma schema. When a User is deleted, their posts are also deleted. If a User's id is updated, the corresponding authorId is updated.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling MultiSchema Preview Feature in Prisma\nDESCRIPTION: Configuration to enable the multiSchema preview feature in the Prisma schema file by adding it to previewFeatures.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/60-multi-schema.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"multiSchema\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Prisma Project in Terminal\nDESCRIPTION: The 'init' command bootstraps a fresh Prisma ORM project within the current directory. It creates a 'prisma' directory containing a basic 'schema.prisma' file. Various options can be used to customize the initialization process.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nprisma init\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma init --datasource-provider sqlite\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma init --db\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma init --prompt \"Simple habit tracker application\"\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma init --preview-feature multiSchema\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma init --preview-feature multiSchema --preview-feature metrics\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Many-to-Many Relation Schema in Prisma\nDESCRIPTION: A Prisma schema for an explicit many-to-many relationship with a PostTags relation table that connects Post and Tag models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id    Int        @id @default(autoincrement())\n  title String\n  tags  PostTags[]\n}\n\nmodel PostTags {\n  id     Int   @id @default(autoincrement())\n  post   Post? @relation(fields: [postId], references: [id])\n  tag    Tag?  @relation(fields: [tagId], references: [id])\n  postId Int?\n  tagId  Int?\n\n  @@index([postId, tagId])\n}\n\nmodel Tag {\n  id    Int        @id @default(autoincrement())\n  name  String     @unique\n  posts PostTags[]\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Lists with Prisma Client\nDESCRIPTION: Illustrates how to paginate lists of records using Prisma Client. The v1 syntax uses `skip` and `first`, while ORM 2 replaces `first` with `take`. Returns a paginated list of objects.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst posts = await prisma.posts({\n  skip: 5,\n  first: 10,\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.findMany({\n  skip: 5,\n  take: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma configuration setup using defineConfig in TypeScript\nDESCRIPTION: This snippet demonstrates the minimal setup required to enable Prisma Config using the defineConfig helper function.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'prisma/config'\n\nexport default defineConfig({\n  earlyAccess: true\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relation in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define a one-to-many relation between User and Post models using the @relation attribute in Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/420-relation-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Prisma ORM and Mongoose\nDESCRIPTION: Demonstrates creating new records. Prisma uses the create method with a data object, while Mongoose offers both create and save approaches.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    name: 'Alice',\n    email: 'alice@prisma.io',\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.create({\n  name: 'Alice',\n  email: 'alice@prisma.io',\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User({\n  name: 'Alice',\n  email: 'alice@prisma.io',\n})\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Models in schema.prisma\nDESCRIPTION: This Prisma schema defines User and Post models including their types and relationships, creating a simple blog structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/app/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n//add-start\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema Models\nDESCRIPTION: Defines User and Post models in the Prisma schema file to represent database tables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Decimal Fields in Prisma Client\nDESCRIPTION: Demonstrates how to create and manipulate Decimal fields using Prisma.Decimal, which leverages the Decimal.js library for precise numeric operations\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst newTypes = await prisma.sample.create({\n  data: {\n    cost: new Prisma.Decimal(24.454545),\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst newTypes = await prisma.sample.create({\n  data: {\n    cost: new Prisma.Decimal(24.454545).plus(1),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing StatsD Metrics Integration with Prisma Client\nDESCRIPTION: Code implementation for sending Prisma Client metrics to StatsD server. Handles conversion of counter metrics to gauge data and sends metrics every 10 seconds. Includes logic for processing histograms and handling metric differentials.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport StatsD from 'hot-shots'\nlet statsd = new StatsD({\n  port: 8125,\n})\n\nconst diffMetrics = (metrics: Metric<MetricHistogram>[]) => {\n  return metrics.map((metric) => {\n    let prev = 0;\n\n    const diffBuckets = metric.value.buckets.map<MetricHistogramBucket>(\n      (values) => {\n        const [bucket, value] = values\n        const diff = value - prev\n        prev = value\n        return [bucket, diff]\n      }\n    )\n\n    metric.value.buckets = diffBuckets\n    return metric\n  })\n}\n\nlet previousHistograms: Metric<MetricHistogram>[] = []\n\n\nconst statsdSender = async () => {\n  const metrics = await prisma.$metrics.json()\n  \n  metrics.counters.forEach((counter: any) => {\n    statsd.gauge('prisma.' + counter.key, counter.value, (...res) => {})\n  });\n\n  metrics.gauges.forEach((counter: any) => {\n    statsd.gauge('prisma.' + counter.key, counter.value, (...res) => {})\n  })\n\n  if (!previousHistograms.length) {\n    previousHistograms = diffMetrics(metrics.histograms)\n\n    return\n  }\n\n  const diffHistograms = diffMetrics(metrics.histograms);\n\n  diffHistograms.forEach((diffHistogram, histogramIndex) => {\n    diffHistogram.value.buckets.forEach((values, bucketIndex) => {\n      const [bucket, count] = values\n      const [_, prev] =\n        previousHistograms[histogramIndex].value.buckets[bucketIndex]\n      const change = count - prev\n\n      for (let sendTimes = 0; sendTimes < change; sendTimes++) {\n        statsd.timing('prisma.' + diffHistograms.key, bucket)\n      }\n    })\n  })\n\n  previousHistograms = diffHistograms\n}\n\nsetInterval(async () => await statsdSender(), 10000)\n```\n\n----------------------------------------\n\nTITLE: Job Title Migration SQL\nDESCRIPTION: SQL migration for adding the jobTitle column to the User table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/050-getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- AlterTable\nALTER TABLE \"User\" ADD COLUMN     \"jobTitle\" TEXT NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relation in Prisma Schema (Relational DB)\nDESCRIPTION: Shows how to define a one-to-many relation between User and Post models in Prisma schema for relational databases. Demonstrates the use of relation fields and foreign keys.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n\nmodel Post {\n  id       Int  @id @default(autoincrement())\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n\n  title String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Index in Prisma Schema\nDESCRIPTION: Example showing how to define a named index on multiple columns in a Post model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_56\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int     @id @default(autoincrement())\n  title   String\n  content String?\n\n  @@index(fields: [title, content], name: \"main_index\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection URL in Environment File\nDESCRIPTION: Example of defining the MongoDB connection URL in a .env file using MongoDB Atlas format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/100-connect-your-database-node-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mongodb+srv://test:test@cluster0.ns1yp.mongodb.net/myFirstDatabase\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Caching with Prisma Postgres\nDESCRIPTION: Example showing how to utilize the cacheStrategy option in a Prisma ORM query to enable caching. The example sets both TTL (time-to-live) and SWR (stale-while-revalidate) parameters to 60 seconds.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/350-caching.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  cacheStrategy: {\n    ttl: 60,\n    swr: 60\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Globally Instantiated PrismaClient in TypeScript\nDESCRIPTION: Shows how to import and use the PrismaClient instance that was globally instantiated. The usage remains the same as with a regular PrismaClient instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from './client'\n\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Published Posts - GET Route\nDESCRIPTION: This route handles GET requests to fetch all published posts. It responds with a list of posts marked as published from the database using Prisma Client 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/feed', async (req, res) => {\\n  const posts = await prisma.post.findMany({ where: { published: true } })\\n  res.json(posts)\\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Full Text Index to MySQL Post Model\nDESCRIPTION: Creates a full text index across title and content fields for a Post model in MySQL, using the @@fulltext attribute\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int    @id\n  title   String @db.VarChar(255)\n  content String @db.Text\n\n  @@fulltext([title, content])\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Schema with User and Post Models\nDESCRIPTION: Basic Prisma schema setup defining User and Post models with a one-to-many relationship. The schema includes PostgreSQL as the database provider and environment variable configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/050-getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  published Boolean @default(true)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with User, Post and Role Models\nDESCRIPTION: This schema defines a User model with scalar fields and relations to Post and Profile models. It also includes an enum Role type with USER and ADMIN values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  published Boolean  @default(false)\n  title     String  \n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied\nDESCRIPTION: Marks the initial migration as applied in the _prisma_migrations table using prisma migrate resolve command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Enabling full-text search for PostgreSQL in Prisma schema\nDESCRIPTION: This snippet shows how to enable the full-text search preview feature for PostgreSQL in the Prisma schema file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"fullTextSearchPostgres\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Set Up Deployment Command - Bash\nDESCRIPTION: Integrates the Prisma migrate deploy command into the CI/CD pipeline to deploy database migrations safely into production.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Stdout Logging in Prisma Client\nDESCRIPTION: Shows how to configure Prisma Client to log all levels (query, info, warn, error) to stdout using the simplified array syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/130-logging.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  log: ['query', 'info', 'warn', 'error'],\n})\n```\n\n----------------------------------------\n\nTITLE: Querying all users with Prisma Client\nDESCRIPTION: Demonstrates how to use Prisma Client to query all users from the database using the findMany method. This snippet shows the basic read operation that retrieves all records from the User table and logs them to the console.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  // ... you will write your Prisma Client queries here\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All User Records with Prisma Client\nDESCRIPTION: Shows how to retrieve all User records from the database using Prisma Client's findMany query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-sqlite.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany()\nconsole.log(users)\n```\n\n----------------------------------------\n\nTITLE: Creating a Draft Post with Prisma Client\nDESCRIPTION: This code snippet demonstrates how to create a draft post using Prisma Client's `post.create` method. It defines a GraphQL mutation field named `createDraft` that accepts `title`, `content`, and `authorId` as arguments. The `resolve` function uses the Prisma context to create the post and connect it to the author via the `data` property.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({ nullable: false }),\n        content: stringArg(),\n        authorId: stringArg({ nullable: false }),\n      },\n      resolve: (_, args, context) => {\n        //highlight-start\n        return context.prisma.post.create({\n          data: {\n            title: args.title,\n            content: args.content,\n            author: {\n              connect: { id: args.authorId },\n            },\n          },\n        })\n        //highlight-end\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Default User Fields in Prisma Client\nDESCRIPTION: This query returns all scalar fields of the User model but not relation fields. The result includes id, name, email, password, role, and coinflips array.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst()\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Postgres Connection in Prisma Schema\nDESCRIPTION: Example of setting up a connection to Prisma Postgres in the Prisma schema file. It uses a special connection string format with an API key for authentication.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"prisma+postgres://accelerate.prisma-data.net/?api_key=API_KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Database in Prisma Schema\nDESCRIPTION: This code snippet demonstrates how to configure a shadow database connection in a Prisma schema. It emphasizes the importance of specifying a separate connection URL for the shadow database to prevent data loss. The environment variable SHADOW_DATABASE_URL must be set to point to the dedicated shadow database. This setup is particularly important in environments where automatic database creation and deletion is restricted.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/200-shadow-database.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider          = \"postgresql\"\n  url               = env(\"DATABASE_URL\")\n  //highlight-next-line\n  shadowDatabaseUrl = env(\"SHADOW_DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Default Values in Prisma Schema\nDESCRIPTION: Demonstrates how to set default enum values in both database contexts, including enum definition and usage.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_44\n\nLANGUAGE: prisma\nCODE:\n```\nenum Role {\n  USER\n  ADMIN\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  role    Role     @default(USER)\n  posts   Post[]\n  profile Profile?\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nenum Role {\n  USER\n  ADMIN\n}\n\nmodel User {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email   String   @unique\n  name    String?\n  role    Role     @default(USER)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prisma Client in TypeScript\nDESCRIPTION: TypeScript code to initialize PrismaClient with Accelerate extension and define a main function for database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/100-from-the-cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nasync function main() {\n  // ... you will write your Prisma ORM queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Record with Prisma Client\nDESCRIPTION: Query that deletes a User record by email, demonstrating the delete operation for removing a single record from the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nconst deleteUser = await prisma.user.delete({\n  where: {\n    email: 'bert@prisma.io',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Invalidating Cached Queries with Accelerate\nDESCRIPTION: Code to invalidate cached queries by tag, including error handling for rate limiting. This allows for on-demand cache invalidation to ensure data freshness when needed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await prisma.$accelerate.invalidate({\n    tags: [\"emails_with_alice\"],\n  });\n} catch (e) {\n  if (e instanceof Prisma.PrismaClientKnownRequestError) {\n    // The .code property can be accessed in a type-safe manner\n    if (e.code === \"P6003\") {\n      console.log(\n        \"You've reached the cache invalidation rate limit. Please try again shortly.\"\n      );\n    }\n  }\n  throw e;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Prisma\nDESCRIPTION: This snippet shows the content of a .env file created by the 'init' command. It's used to define environment variables for the Prisma project, particularly the database connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Environment variables declared in this file are automatically made available to Prisma.\n# See the documentation for more detail: https://pris.ly/d/prisma-schema#using-environment-variables\n\n# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.\n\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database Schema\nDESCRIPTION: SQL schema definition creating three related tables - User, Post, and Profile - with appropriate columns, primary keys, foreign keys and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"public\".\"User\" (\n  id SERIAL PRIMARY KEY NOT NULL,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE \"public\".\"Post\" (\n  id SERIAL PRIMARY KEY NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n  content TEXT,\n  published BOOLEAN NOT NULL DEFAULT false,\n  \"authorId\" INTEGER NOT NULL,\n  FOREIGN KEY (\"authorId\") REFERENCES \"public\".\"User\"(id)\n);\n\nCREATE TABLE \"public\".\"Profile\" (\n  id SERIAL PRIMARY KEY NOT NULL,\n  bio TEXT,\n  \"userId\" INTEGER UNIQUE NOT NULL,\n  FOREIGN KEY (\"userId\") REFERENCES \"public\".\"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Unique Constraint with Sort Order in Prisma\nDESCRIPTION: This example shows how to use the 'sort' argument with the @@unique attribute to create a compound unique constraint with specified sort orders in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel CompoundUnique {\n  unique_1 Int\n  unique_2 Int\n\n  @@unique([unique_1(sort: Desc), unique_2])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Foreign Key Constraint in PostgreSQL\nDESCRIPTION: This SQL snippet shows the creation of Post and User tables with a foreign key constraint in PostgreSQL, as generated by Prisma Migrate for the given schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/420-relation-mode.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Post\" (\n    \"id\" SERIAL NOT NULL,\n    \"title\" TEXT NOT NULL,\n    \"authorId\" INTEGER NOT NULL,\n\n    CONSTRAINT \"Post_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" SERIAL NOT NULL,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- AddForeignKey\nALTER TABLE \"Post\"\n  ADD CONSTRAINT \"Post_authorId_fkey\"\n  FOREIGN KEY (\"authorId\")\n  REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database with Initial Data\nDESCRIPTION: This TypeScript code defines a seeding function that populates the database with initial User data and associated Posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient, Prisma } from '../src/app/generated/prisma'\n\nconst prisma = new PrismaClient()\n\nconst userData: Prisma.UserCreateInput[] = [\n  {\n    name: 'Alice',\n    email: 'alice@prisma.io',\n    posts: {\n      create: [\n        {\n          title: 'Join the Prisma Discord',\n          content: 'https://pris.ly/discord',\n          published: true,\n        },\n        {\n          title: 'Prisma on YouTube',\n          content: 'https://pris.ly/youtube',\n        },\n      ],\n    },\n  },\n  {\n    name: 'Bob',\n    email: 'bob@prisma.io',\n    posts: {\n      create: [\n        {\n          title: 'Follow Prisma on Twitter',\n          content: 'https://www.twitter.com/prisma',\n          published: true,\n        },\n      ],\n    },\n  }\n]\n\nexport async function main() {\n  for (const u of userData) {\n    await prisma.user.create({ data: u })\n  }\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route for Fetching Posts in Next.js\nDESCRIPTION: This code creates a Next.js API route that uses Prisma Client to fetch all published posts from the database. The posts are then returned as a JSON response.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/03-fullstack.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\nexport default async function handle(req, res) {\n  const posts = await prisma.post.findMany({\n    where: {\n      published: true,\n    },\n  })\n  res.json(posts)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Script for Backward Migration in Prisma\nDESCRIPTION: This command applies the generated SQL script to the production database, reverting it to the previous state without modifying the migrations table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db execute --url \"$DATABASE_URL_PROD\" --file backward.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Commands for setting the DATABASE_URL environment variable across different operating systems to connect to Prisma Postgres\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/700-tooling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nexport DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=API_KEY\"\n```\n\nLANGUAGE: cmd\nCODE:\n```\nset DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Filtering for Non-Null Fields in Prisma Client\nDESCRIPTION: This query returns all posts where the content field is not null.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    content: { not: null },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Many-to-Many Self-Relation in Prisma Schema\nDESCRIPTION: This snippet shows how to define an implicit many-to-many self-relation in a Prisma schema, highlighting the importance of the lexicographic order of relation fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/500-troubleshooting-relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Animal {\n  id        Int      @id @default(autoincrement())\n  name      String\n  a_eats    Animal[] @relation(name: \"FoodChain\")\n  b_eatenBy Animal[] @relation(name: \"FoodChain\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Prisma\nDESCRIPTION: Initializes Prisma in your project, creating the `prisma` directory with `schema.prisma` and `.env` files.  The `--output` flag specifies where to place the generated files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma init --output ../generated/prisma\"\n```\n\n----------------------------------------\n\nTITLE: Updating Database Connection String in .env File\nDESCRIPTION: Updates the DATABASE_URL environment variable in the .env file to use the new Prisma Postgres connection string. This ensures the application connects to the correct database after migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/115-import-from-existing-database-mysql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=__API_KEY__\"\n```\n\n----------------------------------------\n\nTITLE: Marking Squashed Migration as Applied\nDESCRIPTION: Command to mark the newly created squashed migration as already applied in the database to prevent it from being run again.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/50-squashing-migrations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve \\\n --applied 000000000000_squashed_migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Time Logging with Prisma Middleware\nDESCRIPTION: This example demonstrates how to use Prisma middleware to log the execution time of database queries. The middleware captures timestamps before and after each query, calculates the duration, and logs it along with the model and action information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/200-logging-middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst prisma = new PrismaClient()\n\nprisma.$use(async (params, next) => {\n  const before = Date.now()\n\n  const result = await next(params)\n\n  const after = Date.now()\n\n  console.log(`Query ${params.model}.${params.action} took ${after - before}ms`)\n\n  return result\n})\n\nconst create = await prisma.post.create({\n  data: {\n    title: 'Welcome to Prisma Day 2020',\n  },\n})\n\nconst createAgain = await prisma.post.create({\n  data: {\n    title: 'All about database collation',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Run Prisma Database Migrations (Terminal)\nDESCRIPTION: Executes Prisma's development migration command (`migrate dev`) to create the initial migration based on the schema changes and apply it to the database connected via the `DATABASE_URL` in `.env`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Development Server\nDESCRIPTION: Launches the Nuxt development server for local testing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Restrict Referential Action\nDESCRIPTION: A Prisma schema defining a one-to-many relationship between User and Post models with a Restrict referential action, which prevents deletion of a User if they have related Posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Restrict)\n  authorId String\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Post with Comments\nDESCRIPTION: Demonstrates how to update an existing Post record by adding multiple Comment records, then retrieve all posts with their comments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.post.update({\n    where: {\n      slug: 'my-first-post',\n    },\n    data: {\n      comments: {\n        createMany: {\n          data: [\n            { comment: 'Great post!' },\n            { comment: \"Can't wait to read more!\" },\n          ],\n        },\n      },\n    },\n  })\n  const posts = await prisma.post.findMany({\n    include: {\n      comments: true,\n    },\n  })\n\n  console.dir(posts, { depth: Infinity })\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Prisma Schema with Naming Conventions\nDESCRIPTION: Modified Prisma schema with improved naming conventions for better API ergonomics.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(0)\n  content   String?  @db.Text\n  published Boolean  @default(false)\n  authorId  Int\n  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Post_ibfk_1\")\n\n  @@index([authorId], map: \"authorId\")\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String? @db.Text\n  userId Int     @unique(map: \"userId\")\n  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Profile_ibfk_1\")\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique(map: \"email\") @db.VarChar(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Referential Actions Feature\nDESCRIPTION: Database relation management feature for defining cascading update and delete behaviors between related models in Prisma schema\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`referentialActions`\n```\n\n----------------------------------------\n\nTITLE: Resolving Migration History Without Reapplying\nDESCRIPTION: Mark a migration as already applied to prevent duplicate execution and synchronize migration history across environments\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate resolve --applied \"20201127134938-retroactively-add-index\"\n```\n\n----------------------------------------\n\nTITLE: Updating .env file to use PPG_POST_DATABASE_URL\nDESCRIPTION: This snippet updates the .env file to rename the DATABASE_URL environment variable to PPG_POST_DATABASE_URL. This ensures that the Prisma client instance for the post database uses the correct connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n//delete-start\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI...\n//delete-end\n//add-start\nPPG_POST_DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI...\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Using Latest Prisma CLI Version for Init Command\nDESCRIPTION: Solution for the unrecognized --db option by explicitly running the latest Prisma CLI version.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/900-troubleshooting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma@latest init --db\n```\n\n----------------------------------------\n\nTITLE: Defining User-Post-PrivateMessage Schema in Prisma\nDESCRIPTION: Shows a Prisma schema with one-to-many relationships between User and both Post and PrivateMessage models, useful for GDPR compliance scenarios.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_23\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id              Int              @id @default(autoincrement())\n  posts           Post[]\n  privateMessages PrivateMessage[]\n}\n\nmodel Post {\n  id      Int    @id @default(autoincrement())\n  user    User   @relation(fields: [userId], references: [id])\n  userId  Int\n  title   String\n  content String\n}\n\nmodel PrivateMessage {\n  id      Int    @id @default(autoincrement())\n  user    User   @relation(fields: [userId], references: [id])\n  userId  Int\n  message String\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Prisma Client Import\nDESCRIPTION: Standard way to import PrismaClient in TypeScript files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n```\n\n----------------------------------------\n\nTITLE: SQL for Converting TEXT Column to JSON Type\nDESCRIPTION: SQL command to convert a TEXT column to a proper JSON type in PostgreSQL for compatibility with Prisma ORM 2.x and later.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"User\" ALTER COLUMN \"jsonData\" TYPE JSON  USING \"jsonData\"::json;\n```\n\n----------------------------------------\n\nTITLE: Correct Syntax for Implicit Many-to-Many Relations in Prisma ORM 4\nDESCRIPTION: This code demonstrates the correct syntax for defining implicit many-to-many relations in Prisma ORM 4, where the references argument has been removed to align with the new validation requirements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  categories Category[] @relation(\"my-relation\")\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  posts Post[] @relation(\"my-relation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GiST Index in SQL\nDESCRIPTION: This snippet shows the SQL commands generated from the Prisma schema for creating a table `Example` with an `INET` column named `value`, and creating a `GIST` index on this column using the `inet_ops` operator class. The index is named `Example_value_idx`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Example\" (\n  id INT PRIMARY KEY,\n  value INET NOT NULL\n);\n\nCREATE INDEX \"Example_value_idx\" ON \"Example\" USING GIST (value inet_ops);\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma Client with Accelerate Extension\nDESCRIPTION: Code to create a Prisma Client instance extended with the Accelerate extension for standard server environments. This enables connection pooling and caching capabilities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Seeding Prisma Database with Initial Data\nDESCRIPTION: This snippet shows how to create a seed script using PrismaClient to populate the database with predefined user and post data, and how to link it to the npm seed command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from \"../src/generated/prisma\";\n\nconst prisma = new PrismaClient();\n\nconst userData: Prisma.UserCreateInput[] = [\n  {\n    name: \"Alice\",\n    email: \"alice@prisma.io\",\n    posts: {\n      create: [\n        {\n          title: \"Join the Prisma Discord\",\n          content: \"https://pris.ly/discord\",\n          published: true,\n        },\n        {\n          title: \"Prisma on YouTube\",\n          content: \"https://pris.ly/youtube\",\n        },\n      ],\n    },\n  },\n  {\n    name: \"Bob\",\n    email: \"bob@prisma.io\",\n    posts: {\n      create: [\n        {\n          title: \"Follow Prisma on Twitter\",\n          content: \"https://www.twitter.com/prisma\",\n          published: true,\n        },\n      ],\n    },\n  },\n];\n\nexport async function main() {\n  for (const u of userData) {\n    await prisma.user.create({ data: u });\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Enhancing server load function to include related posts\nDESCRIPTION: Updated TypeScript code for the server load function that uses Prisma's include option to fetch both users and their related posts in a single query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from '$lib/prisma';\n\nexport async function load() {\n\tconst users = await prisma.user.findMany({\n\t\tinclude: {\n\t\t\tposts: true\n\t\t}\n\t});\n\n\treturn {\n\t\tusers\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Prisma Client Filtering\nDESCRIPTION: This query demonstrates how to escape special characters when filtering string fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    name: {\n      startsWith: '\\\\_benny', // note that the `_` character is escaped, preceding `\\` with `\\` when included in a string\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Enforcing @unique for One-to-One Relations in Prisma ORM 4\nDESCRIPTION: These code snippets demonstrate how to properly define one-to-one relations between User and Profile models in Prisma ORM 4, where the @unique attribute must be added to relation fields in both relational databases and MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int     @id @default(autoincrement())\n  email     String  @unique // <- we enforce this unique attribute\n  profile   Profile @relation(fields: [profileId], references: [id])\n  profileId Int\n}\n\nmodel Profile {\n  id        Int     @id @default(autoincrement())\n  userEmail String? @unique\n  user      User?\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email     String  @unique // <- we enforce this unique attribute\n  profile   Profile @relation(fields: [profileId], references: [id])\n  profileId Int     @db.ObjectId\n}\n\nmodel Profile {\n  id        Int     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  userEmail String? @unique\n  user      User?   @relation(fields: [userEmail], references: [email])\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Parameterized Query Example\nDESCRIPTION: Example SQL query for MySQL using question mark placeholders to create a parameterized query for filtering users by age.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, age\nFROM users\nWHERE age > ? AND age < ?\n```\n\n----------------------------------------\n\nTITLE: Adding a postinstall Script in package.json\nDESCRIPTION: This package.json snippet shows how to add a postinstall script that generates the Prisma Client without the query engine binary, which is necessary when using Prisma Postgres with Netlify.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    // ...\n    // add-next-line\n    \"postinstall\": \"prisma generate --no-engine\"\n  }\n  //\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting a Related Record in Prisma Client\nDESCRIPTION: This snippet demonstrates how to use the `upsert` method to either update an existing user or create a new user in the database. It targets the `post` model and uses the author's email and name details accordingly. The expected input is the record ID to find the post, and the output is the updated or created user data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.post.update({\n  where: {\n    id: 6,\n  },\n  data: {\n    //highlight-start\n    author: {\n      upsert: {\n        create: {\n          email: 'bob@prisma.io',\n          name: 'Bob the New User',\n        },\n        update: {\n          email: 'bob@prisma.io',\n          name: 'Bob the existing user',\n        },\n      },\n    },\n    //highlight-end\n  },\n  include: {\n    author: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Prisma ORM and Mongoose\nDESCRIPTION: Demonstrates record deletion. Prisma uses the delete method with a where clause while Mongoose uses deleteOne.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = prisma.user.delete({\n  where: {\n    id: 10,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.deleteOne({ _id: 10 })\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Schema for Prisma Introspection\nDESCRIPTION: SQL commands to create a sample database schema with three tables: Post, Profile, and User. This schema includes primary keys, foreign key relationships, and default constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [dbo].[Post] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [createdAt] DATETIME2 NOT NULL CONSTRAINT [Post_createdAt_df] DEFAULT CURRENT_TIMESTAMP,\n    [updatedAt] DATETIME2 NOT NULL,\n    [title] VARCHAR(255) NOT NULL,\n    [content] NVARCHAR(1000),\n    [published] BIT NOT NULL CONSTRAINT [Post_published_df] DEFAULT 0,\n    [authorId] INT NOT NULL,\n    CONSTRAINT [Post_pkey] PRIMARY KEY ([id])\n);\n\nCREATE TABLE [dbo].[Profile] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [bio] NVARCHAR(1000),\n    [userId] INT NOT NULL,\n    CONSTRAINT [Profile_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [Profile_userId_key] UNIQUE ([userId])\n);\n\nCREATE TABLE [dbo].[User] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [email] NVARCHAR(1000) NOT NULL,\n    [name] NVARCHAR(1000),\n    CONSTRAINT [User_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [User_email_key] UNIQUE ([email])\n);\n\nALTER TABLE [dbo].[Post] ADD CONSTRAINT [Post_authorId_fkey] FOREIGN KEY ([authorId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n\nALTER TABLE [dbo].[Profile] ADD CONSTRAINT [Profile_userId_fkey] FOREIGN KEY ([userId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Configuring DATABASE_URL in .env file - Bash\nDESCRIPTION: This snippet showcases how to set the DATABASE_URL environment variable inside the .env file, which is essential for Prisma ORM 2 to connect to the specified database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://janedoe:randompassword@localhost:5432/prisma?schema=myproject$dev\"\n```\n\n----------------------------------------\n\nTITLE: Continuing Cursor-based Pagination with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to continue cursor-based pagination. It returns 4 Post records after the supplied cursor, skipping the cursor itself.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/055-pagination.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst secondQueryResults = await prisma.post.findMany({\n  take: 4,\n  skip: 1, // Skip the cursor\n  cursor: {\n    id: myCursor,\n  },\n  where: {\n    title: {\n      contains: 'Prisma' /* Optional filter */,\n    },\n  },\n  orderBy: {\n    id: 'asc',\n  },\n})\n\nconst lastPostInResults = secondQueryResults[3] // Remember: zero-based index! :)\nconst myCursor = lastPostInResults.id // Example: 52\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relation in Prisma Schema (MongoDB)\nDESCRIPTION: Demonstrates how to define a one-to-many relation between User and Post models in Prisma schema for MongoDB, using ObjectId fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  posts Post[]\n}\n\nmodel Post {\n  id       String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  author   User   @relation(fields: [authorId], references: [id])\n  authorId String @db.ObjectId\n\n  title String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Datasource in Prisma Schema\nDESCRIPTION: Schema configuration for MongoDB database connection in Prisma using environment variables. Sets up the database provider and connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/100-connect-your-database-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Strategy in Prisma Query\nDESCRIPTION: Example of using cacheStrategy parameter in a Prisma findMany query with SWR, TTL, and cache tags\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/400-api-reference.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany({\n  where: {\n    email: {\n      contains: \"alice@prisma.io\",\n    },\n  },\n  cacheStrategy: {\n    swr: 60,\n    ttl: 60,\n    tags: [\"emails_with_alice\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Types and UserSelect Example with TypeScript\nDESCRIPTION: This snippet demonstrates how to import Prisma generated types and use the Prisma.UserSelect type to define a select object for a user creation operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\\n\\n// Build 'select' object\\nconst userEmail: Prisma.UserSelect = {\\n  email: true,\\n}\\n\\n// Use select object\\nconst createUser = await prisma.user.create({\\n  data: {\\n    email: 'bob@prisma.io',\\n  },\\n  select: userEmail,\\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Values in Prisma Client\nDESCRIPTION: This query uses the distinct option to return all records with distinct name field values. It removes duplicates based on the name field, returning the first occurrence of each unique name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.findMany({\n  where: {},\n  distinct: ['name'],\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Queries Script\nDESCRIPTION: This command runs a script containing CRUD queries to interact with the database using Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run queries\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in User Update Mutation Resolver (TypeScript)\nDESCRIPTION: This resolver function updates a user's email and name, correctly handling null values by setting them to undefined, preventing unwanted updates in Prisma. It exemplifies the conditional setting of fields in an update operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUser: (parent, args, ctx: Context) => {\n  return ctx.prisma.user.update({\n    where: { id: Number(args.id) },\n    data: {\n      //highlight-start\n      email: args.authorEmail != null ? args.authorEmail : undefined, // If null, do nothing\n      name: args.authorName != null ? args.authorName : undefined // If null, do nothing\n      //highlight-end\n    },\n  })\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource for PostgreSQL\nDESCRIPTION: This snippet shows how to set up the datasource block in the Prisma schema file for a PostgreSQL database, using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating initial migration SQL script\nDESCRIPTION: Prisma CLI command to generate the initial migration SQL script. It compares an empty schema to the current database state and outputs the difference as a SQL script.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Excluding a Field Locally in Prisma Client Query (TypeScript)\nDESCRIPTION: This code snippet shows how to exclude a field locally for a single query using the 'omit' option within the query itself. Here, the 'password' field is excluded only for this specific User query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/063-excluding-fields.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\n// The password field is excluded only in this query\nconst user = await prisma.user.findUnique({\n  omit: {\n    password: true\n  },\n  where: { \n    id: 1 \n  } \n})\n```\n\n----------------------------------------\n\nTITLE: Sorting Users and Their Posts in Prisma Client\nDESCRIPTION: This query sorts users by role and name, and their posts by title, demonstrating multi-level sorting.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithPosts = await prisma.user.findMany({\n  orderBy: [\n    {\n      role: 'desc',\n    },\n    {\n      name: 'desc',\n    },\n  ],\n  include: {\n    posts: {\n      orderBy: {\n        title: 'desc',\n      },\n      select: {\n        title: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Records Using Compound IDs\nDESCRIPTION: This example shows how to use `connect` with a compound ID to establish a relationship between records. The query creates a new User and connects it to an existing Like record identified by its compound ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    name: 'Alice',\n    likes: {\n      connect: {\n        likeId: {\n          postId: 1,\n          userId: 2,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Posts by Category in Prisma Client\nDESCRIPTION: This TypeScript snippet shows how to query Posts that have a specific Category using Prisma Client in an explicit many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst getPosts = await prisma.post.findMany({\n  where: {\n    categories: {\n      some: {\n        category: {\n          name: 'New Category',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection URL in Environment Variables\nDESCRIPTION: This snippet shows how to define the MongoDB connection URL as an environment variable in the .env file, using a MongoDB Atlas URL as an example.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/100-connect-your-database-node-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mongodb+srv://test:test@cluster0.ns1yp.mongodb.net/myFirstDatabase\"\n```\n\n----------------------------------------\n\nTITLE: Outputting Prisma Version Information in Terminal\nDESCRIPTION: The 'version' command outputs information about the current Prisma version, platform, and engine binaries. It can be used with or without the '--json' option to modify the output format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nprisma version\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma -v\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma version --json\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare Worker with Prisma\nDESCRIPTION: Commands to create a new Cloudflare Worker project and initialize Prisma in it.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpm create cloudflare@latest prisma-cloudflare-worker-example -- --type hello-world\ncd prisma-cloudflare-worker-example\nnpm install prisma --save-dev\nnpx prisma init --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Create Basic Express Server with Prisma Client (JavaScript)\nDESCRIPTION: Sets up a basic Express.js server in `index.js`. It initializes Prisma Client using the custom output path, includes a route (`/`) to query the user count, and starts the server on port 3000.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst { PrismaClient } = require(\"./generated/prisma_client\");\n\nconst app = express();\nconst prisma = new PrismaClient();\napp.use(express.json());\n\n// Get all users\napp.get(\"/\", async (req, res) => {\n  const userCount = await prisma.user.count();\n  res.json(\n    userCount == 0\n      ? \"No users have been added yet.\"\n      : \"Some users have been added to the database.\"\n  );\n});\n\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Offset Pagination with Prisma ORM vs Sequelize\nDESCRIPTION: Shows how to implement offset-based pagination in both ORMs. Prisma uses skip and first parameters, while Sequelize uses offset and limit to achieve the same result.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst cc = await prisma.post.findMany({\n  skip: 200,\n  first: 20,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.findAll({\n  offset: 5,\n  limit: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Extension Migration SQL\nDESCRIPTION: SQL migration commands for enabling the pgcrypto extension and adding a UUID column with default value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/120-native-database-functions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\nADD COLUMN \"id\" UUID NOT NULL DEFAULT gen_random_uuid(),\nADD PRIMARY KEY (\"id\");\n```\n\n----------------------------------------\n\nTITLE: SQL Migration to Convert TEXT to JSON Type\nDESCRIPTION: SQL command to modify a TEXT column to use the JSON data type, allowing Prisma to correctly recognize it as Json during introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE User MODIFY COLUMN jsonData JSON;\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js project and installing Prisma CLI\nDESCRIPTION: Commands to initialize a new Node.js project with npm init and install the Prisma CLI as a development dependency.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init -y\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations with Prisma ORM and Mongoose\nDESCRIPTION: Demonstrates how to retrieve related records. Prisma offers both include and Fluent API approaches, while Mongoose uses the populate method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst userWithPost = await prisma.user.findUnique({\n  where: {\n    id: 2,\n  },\n  include: {\n    post: true,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst userWithPost = await prisma.user\n  .findUnique({\n    where: {\n      id: 2,\n    },\n  })\n  .post()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst userWithPost = await User.findById(2).populate('post')\n```\n\n----------------------------------------\n\nTITLE: MongoDB Full Text Index with Sorting\nDESCRIPTION: Demonstrates configuring a full text index on a MongoDB Post model with descending sort order for the title field\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_17\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator js {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"fullTextIndex\"]\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  id      String @id @map(\"_id\") @db.ObjectId\n  title   String\n  content String\n\n  @@fulltext([title(sort: Desc), content])\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema from Introspection\nDESCRIPTION: The Prisma schema generated after introspecting the database. It includes models for Post, Profile, and User with their respective fields and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  User      User     @relation(fields: [authorId], references: [id])\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  User   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  Post    Post[]\n  Profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Prometheus Metrics Output Format\nDESCRIPTION: Example of the Prometheus metrics format output showing various metric types including counters, gauges, and histograms.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n# HELP prisma_client_queries_total Total number of Prisma Client queries executed\n# TYPE prisma_client_queries_total counter\nprisma_client_queries_total 14\n\n...\n# HELP prisma_pool_connections_busy The number of active connections in use.\n# TYPE prisma_pool_connections_busy gauge\nprisma_pool_connections_busy 0\n\n...\n# HELP prisma_client_queries_wait_histogram_ms The wait time for a worker to get a connection.\n# TYPE prisma_client_queries_wait_histogram_ms histogram\nprisma_client_queries_wait_histogram_ms_bucket{le=\"0\"} 0\nprisma_client_queries_wait_histogram_ms_bucket{le=\"1\"} 3\n```\n\n----------------------------------------\n\nTITLE: Schema Changes with db push Command\nDESCRIPTION: Terminal command to push schema changes to PlanetScale database\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/850-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values with Functions in Prisma Schema (MongoDB)\nDESCRIPTION: This snippet shows how to use the 'now()' function and 'auto()' function for MongoDB in a Prisma model to set default values for DateTime and ObjectId fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_25\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        String   @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema Model\nDESCRIPTION: The resulting Prisma schema after database introspection, showing model definitions with relationships, field types, and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        BigInt   @id @default(autoincrement())\n  title     String   @unique @db.String(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  BigInt\n  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel Profile {\n  id     BigInt  @id @default(autoincrement())\n  bio    String?\n  userId BigInt  @unique\n  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel User {\n  id      BigInt   @id @default(autoincrement())\n  name    String?  @db.String(255)\n  email   String   @unique @db.String(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing @unique for One-to-Many Relations in Prisma ORM 4\nDESCRIPTION: These code snippets demonstrate how to properly define one-to-many relations between User and Post models in Prisma ORM 4, where the @unique attribute must be added to relation fields in both relational databases and MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  email String @unique // <-- we enforce this attribute\n  posts Post[]\n}\n\nmodel Post {\n  id          Int    @id @default(autoincrement())\n  authorEmail String\n  author      User   @relation(fields: [authorEmail], references: [email])\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String @unique // <-- we enforce this attribute\n  posts Post[]\n}\n\nmodel Post {\n  id          Int    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  authorEmail String\n  author      User   @relation(fields: [authorEmail], references: [email])\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Cursor-based Pagination in Prisma Client TypeScript\nDESCRIPTION: This example shows how to combine filtering with cursor-based pagination. It returns 4 Post records after the cursor that contain 'Prisma' in the title.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/055-pagination.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst secondQuery = await prisma.post.findMany({\n  take: 4,\n  cursor: {\n    id: myCursor,\n  },\n  where: {\n    title: {\n      contains: 'Prisma' /* Optional filter */,\n    },\n  },\n  orderBy: {\n    id: 'asc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Unsafe SQL Query Execution Using Artificially Generated Tagged Templates in Prisma\nDESCRIPTION: Illustrates an unsafe method of using $queryRaw by artificially generating a tagged template that unsafely concatenates user input, making it vulnerable to SQL injection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`; // SQL Injection\nconst query = `SELECT id, name FROM \"User\" WHERE name = ${inputString}`;\n\n// Version for Typescript\nconst stringsArray: any = [...[query]];\n\n// Version for Javascript\nconst stringsArray = [...[query]];\n\n// Use the `raw` property to impersonate a tagged template\nstringsArray.raw = [query];\n\n// Use queryRaw\nconst result = await prisma.$queryRaw(stringsArray);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource for MySQL with Relation Mode\nDESCRIPTION: This snippet demonstrates how to configure the datasource block in the Prisma schema for a MySQL database, including setting the relation mode to 'prisma' for emulating foreign key constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Type Definitions for User Variants\nDESCRIPTION: Illustrates how to manually define TypeScript types for a user with related posts (`UserWithPosts`) and for a user's personal data (`UserPersonalData`). These types help manage relational data handling and efficient data transfer.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/100-operating-against-partial-structures-of-model-types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 1: Define a type that includes the relation to `Post`\ntype UserWithPosts = {\n  id: string\n  email: string\n  name: string | null\n  posts: Post[]\n}\n\n// 2: Define a type that only contains a subset of the scalar fields\ntype UserPersonalData = {\n  email: string\n  name: string | null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma datasource for CockroachDB\nDESCRIPTION: This snippet shows how to configure the datasource block in the Prisma schema file to connect to a CockroachDB database. It uses an environment variable to store the database URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Client: Deleting a Record\nDESCRIPTION: This code snippet demonstrates how to delete a user record using Prisma Client. It deletes the record with the specified ID using `prisma.user.delete` and the `where` clause.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete\nawait prisma.user.delete({\n  where: { id: 1 }\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Deletes with Prisma ORM and Mongoose\nDESCRIPTION: Shows how to delete multiple records based on an array of IDs. Prisma uses deleteMany with an 'in' operator, while Mongoose uses deleteMany with $in.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.deleteMany({\n  where: {\n    id: {\n      in: [1, 2, 6, 6, 22, 21, 25],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.deleteMany({ id: { $in: [1, 2, 6, 6, 22, 21, 25] } })\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Tools on Windows\nDESCRIPTION: Commands to verify pg_dump and pg_restore installation on Windows after downloading from postgresql.org.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nwhere pg_dump\nwhere pg_restore\n```\n\n----------------------------------------\n\nTITLE: Billing for Sequential Transactions in Prisma Accelerate\nDESCRIPTION: Illustrates how sequential transactions in Prisma Accelerate are billed as a single query, regardless of the number of operations within the transaction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/600-faq.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction([\n  prisma.user.deleteMany({ where: { name: 'John Doe' } }),\n  prisma.user.createMany({ data }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Named Unique Constraint in Prisma Schema\nDESCRIPTION: Shows how to create a named composite unique constraint using the name parameter.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_19\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt  DateTime   @default(now())\n  title      String\n  published  Boolean    @default(false)\n  author     User       @relation(fields: [authorId], references: [id])\n  authorId   String     @db.ObjectId\n  categories Category[] @relation(references: [id])\n\n  @@unique(name: \"authorTitle\", [authorId, title])\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition for User and Coinflips\nDESCRIPTION: Defines Prisma schema models for User and User_coinflips with relation and scalar list handling\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_46\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             String           @id\n  User_coinflips User_coinflips[]\n}\n\nmodel User_coinflips {\n  nodeId   String\n  position Int\n  value    Boolean\n  User     User    @relation(fields: [nodeId], references: [id])\n\n  @@id([nodeId, position])\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Types in Prisma Schema\nDESCRIPTION: This example shows how to handle database types not natively supported by Prisma using the Unsupported type. The location field is defined as a POLYGON type which Prisma doesn't directly support.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\nlocation    Unsupported(\"POLYGON\")?\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Prisma ORM\nDESCRIPTION: Demonstrates how to create a new record with Prisma ORM. Prisma provides a straightforward create method that takes a data object with the fields to be created.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    email: 'alice@prisma.io',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using $queryRawUnsafe for Dynamic Table Names in PostgreSQL\nDESCRIPTION: Shows how to use $queryRawUnsafe to work with dynamic table names in PostgreSQL, which is not possible with $queryRaw. This approach comes with SQL injection risks when used with user inputs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet userTable = \"User\";\nlet result = await prisma.$queryRawUnsafe(`SELECT * FROM ${userTable}`);\n```\n\n----------------------------------------\n\nTITLE: Final Prisma Schema After Removing Implicit Relations\nDESCRIPTION: The final schema after removing the implicit relation fields and completing the migration to explicit relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/300-implicit-to-explicit-conversion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int        @id @default(autoincrement())\n  name      String\n  posts     Post[]\n  userPosts UserPost[]\n}\n\nmodel Post {\n  id        Int        @id @default(autoincrement())\n  title     String\n  authors   User[]\n  userPosts UserPost[]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Database Introspection Command\nDESCRIPTION: Terminal command to introspect the database and generate a Prisma schema file based on the existing database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Filtering with Multiple Conditions in MySQL\nDESCRIPTION: Query combining multiple JSON property filters using AND logic to find records matching multiple criteria in MySQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    AND: [\n      {\n        extendedPetsData: {\n          path: '$.pet2.petName',\n          equals: 'Sunny',\n        },\n      },\n      {\n        extendedPetsData: {\n          path: '$.pet2.features.furColor',\n          string_contains: 'black',\n        },\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Resolver with PrismaClient findMany Method in TypeScript\nDESCRIPTION: This snippet shows a GraphQL resolver in TypeScript using the PrismaClient's findMany method within a query. It fetches all users and their associated posts in the context of solving the n+1 query problem in GraphQL by batching database requests with efficient data loading strategies.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nconst Query = objectType({\n  name: 'Query',\n  definition(t) {\n    t.nonNull.list.nonNull.field('allUsers', {\n      type: 'User',\n      resolve: (_parent, _args, context) => {\n        return context.prisma.user.findMany()\n      },\n    })\n  },\n})\n\"\"\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    t.nonNull.int('id')\n    t.string('name')\n    t.nonNull.string('email')\n    t.nonNull.list.nonNull.field('posts', {\n      type: 'Post',\n      resolve: (parent, _, context) => {\n        return context.prisma.post.findMany({\n          where: { authorId: parent.id || undefined },\n        })\n      },\n    })\n  },\n})\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Cache Tags with Accelerate\nDESCRIPTION: Adding cache tags to a query to enable targeted cache invalidation. This allows specific cached queries to be invalidated when data changes without waiting for the cache to expire.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany({\n  where: {\n    email: {\n      contains: \"alice@prisma.io\",\n    },\n  },\n  cacheStrategy: {\n    swr: 60,\n    ttl: 60,\n    tags: [\"emails_with_alice\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Existing Categories to New Post in Prisma Client\nDESCRIPTION: This TypeScript snippet shows how to create a new Post and assign it to existing Categories using Prisma Client in an explicit many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst assignCategories = await prisma.post.create({\n  data: {\n    title: 'How to be Bob',\n    categories: {\n      create: [\n        {\n          assignedBy: 'Bob',\n          assignedAt: new Date(),\n          category: {\n            connect: {\n              id: 9,\n            },\n          },\n        },\n        {\n          assignedBy: 'Bob',\n          assignedAt: new Date(),\n          category: {\n            connect: {\n              id: 22,\n            },\n          },\n        },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Objects with Prisma ORM vs Sequelize\nDESCRIPTION: Demonstrates how to fetch a single record by its primary key in both Prisma ORM and Sequelize. Prisma uses findUnique with a where clause while Sequelize uses the findByPk method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 1,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findByPk(id)\n```\n\n----------------------------------------\n\nTITLE: Querying posts with PostgreSQL 'and' and 'or' operators\nDESCRIPTION: These TypeScript snippets show how to use PostgreSQL's 'and' (&) and 'or' (|) operators in full-text search queries with Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.posts.findMany({\n  where: {\n    body: {\n      search: 'cat | dog',\n    },\n  },\n})\n\nconst result = await prisma.posts.findMany({\n  where: {\n    status: 'Draft',\n    body: {\n      search: 'cat & dog',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Database NULL Values in JSON Fields with Prisma\nDESCRIPTION: This snippet demonstrates how to insert database NULL values into a JSON field using Prisma. It uses the DbNull enum to explicitly set a database NULL value during record creation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nprisma.log.create({\n  data: {\n    meta: Prisma.DbNull,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Identifying Invalid Fluent API Query in Prisma Client\nDESCRIPTION: This snippet provides an example of an illegal query with the Fluent API, where `findMany` does not return a single object to continue the chain. It highlights the requirements for chaining and demonstrates what will not work. The input illustrates an invalid query structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// This query is illegal\nconst posts = await prisma.user.findMany().posts()\n```\n\n----------------------------------------\n\nTITLE: Implementing Prisma Accelerate with Caching in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend Prisma Client with the Accelerate extension and optionally add caching to Prisma queries. It shows setting up the PrismaClient with Accelerate and configuring cache strategies with TTL and SWR options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/600-beyond-prisma-orm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\n// 1. Extend your Prisma Client with the Accelerate extension\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\n// 2. (Optionally) add cache to your Prisma queries\nconst users = await prisma.user.findMany({\n  cacheStrategy: { \n    ttl: 30, // Consider data fresh for 30 seconds\n    swr: 60  // Serve stale data for up to 60 seconds while fetching fresh data\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: AccelerateInfo Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of Accelerate response information\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/400-api-reference.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AccelerateInfo {\n  cacheStatus: 'ttl' | 'swr' | 'miss' | 'none'\n  lastModified: Date\n  region: string\n  requestId: string\n  signature: string\n}\n```\n\n----------------------------------------\n\nTITLE: Review Initial Schema - Prisma\nDESCRIPTION: Defines the initial Post model schema with basic fields including a boolean published field, intended to be modified later in the migration process.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mock Context in Tests\nDESCRIPTION: This code snippet demonstrates how to use the mock context in a test file. It creates mock and real contexts before each test, allowing for isolated testing of Prisma Client interactions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { MockContext, Context, createMockContext } from '../context'\\n\\nlet mockCtx: MockContext\\nlet ctx: Context\\n\\nbeforeEach(() => {\\n  mockCtx = createMockContext()\\n  ctx = mockCtx as unknown as Context\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring the Database Connection for Prisma ORM - ENV\nDESCRIPTION: This snippet shows the DATABASE_URL variable format for connecting Prisma to a PostgreSQL database. Replace USER, PASSWORD, HOST, PORT, and DATABASE with your actual database credentials. The .env file is required for Prisma to connect to your database and should be kept secure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"postgresql://USER:PASSWORD@HOST:PORT/DATABASE\"\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client to Create and Query Data\nDESCRIPTION: This snippet shows how to use Prisma Client to create a new user and query all users from the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// run inside `async` function\nconst newUser = await prisma.user.create({\n  data: {\n    name: 'Alice',\n    email: 'alice@prisma.io',\n  },\n})\n\nconst users = await prisma.user.findMany()\n```\n\n----------------------------------------\n\nTITLE: Enabling strictUndefinedChecks Preview Feature in Prisma Schema\nDESCRIPTION: Enables the strictUndefinedChecks preview feature in the Prisma schema file to change how undefined values are handled in queries, providing better protection against accidental data loss.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"strictUndefinedChecks\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Post Records with Prisma Client\nDESCRIPTION: Demonstrates how to update an existing post record by setting its published status using Prisma Client's update operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with User Model for Next.js Example\nDESCRIPTION: This Prisma schema defines a User model with ID, name, and email fields. It's configured to connect to a PostgreSQL database using the DATABASE_URL environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// add-start\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n}\n// add-end\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing with Console Exporter\nDESCRIPTION: TypeScript code snippet demonstrating how to set up OpenTelemetry tracing with Prisma instrumentation and console output. It configures a basic tracer provider, console exporter, and registers the Prisma instrumentation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions'\nimport {\n  BasicTracerProvider,\n  ConsoleSpanExporter,\n  SimpleSpanProcessor,\n} from '@opentelemetry/sdk-trace-base'\nimport { AsyncHooksContextManager } from '@opentelemetry/context-async-hooks'\nimport * as api from '@opentelemetry/api'\nimport { PrismaInstrumentation, registerInstrumentations } from '@prisma/instrumentation'\nimport { Resource } from '@opentelemetry/resources'\n\n// Export the tracing\nexport function otelSetup() {\n  const contextManager = new AsyncHooksContextManager().enable()\n\n  api.context.setGlobalContextManager(contextManager)\n\n  //Configure the console exporter\n  const consoleExporter = new ConsoleSpanExporter()\n\n  // Configure the trace provider\n  const provider = new BasicTracerProvider({\n    resource: new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: 'test-tracing-service',\n      [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',\n    }),\n  })\n\n  // Configure how spans are processed and exported. In this case we're sending spans\n  // as we receive them to the console\n  provider.addSpanProcessor(new SimpleSpanProcessor(consoleExporter))\n\n  // Register your auto-instrumentors\n  registerInstrumentations({\n    tracerProvider: provider,\n    instrumentations: [new PrismaInstrumentation()],\n  })\n\n  // Register the provider\n  provider.register()\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Post - DELETE Route\nDESCRIPTION: This route handles DELETE requests to remove a post from the database. It retrieves the post ID from the request parameters and deletes the corresponding post using Prisma Client 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.delete(`/post/:id`, async (req, res) => {\\n  const { id } = req.params\\n  const post = await prisma.post.delete({\\n    where: { id },\\n  })\\n  res.json(post)\\n})\n```\n\n----------------------------------------\n\nTITLE: Generating CUID2 values as IDs in Relational databases using Prisma\nDESCRIPTION: Configures a User model with an ID field that automatically generates CUID2 values as the primary key based on the cuid2 specification.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_74\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(cuid(2))\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Record with Prisma Client\nDESCRIPTION: TypeScript code demonstrating how to create a new User record in the database using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/100-from-the-cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nasync function main() {\n  const user = await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n    },\n  })\n  console.log(user)\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Author Relation in Prisma Client\nDESCRIPTION: Shows how to create a new Post record and connect it to an existing User record using Prisma Client's create method with a nested connect operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await prisma.post.create({\n  data: {\n    title: 'Join us for Prisma Day 2020',\n    author: {\n      connect: { email: 'alice@prisma.io' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Data Modeling in Prisma ORM vs TypeORM\nDESCRIPTION: Comparison of data modeling approaches between Prisma ORM's schema-based declarative syntax and TypeORM's class-based approach with decorators. The example shows User and Post models with relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int?\n  author    User?   @relation(fields: [authorId], references: [id])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  ManyToOne,\n} from 'typeorm'\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ nullable: true })\n  name: string\n\n  @Column({ unique: true })\n  email: string\n\n  @OneToMany((type) => Post, (post) => post.author)\n  posts: Post[]\n}\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  title: string\n\n  @Column({ nullable: true })\n  content: string\n\n  @Column({ default: false })\n  published: boolean\n\n  @ManyToOne((type) => User, (user) => user.posts)\n  author: User\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optimize Extension with Prisma Middleware\nDESCRIPTION: This snippet shows how to use Prisma Middleware with the Optimize Extension. It's important to add middlewares before any Prisma Client extensions, like Optimize.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/200-getting-started.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"const prisma = new PrismaClient().$use(middleware).$extends(withOptimize())\"\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Null Values in Prisma\nDESCRIPTION: This snippet shows how to insert JSON null values into a JSON field using Prisma. It uses the JsonNull enum to explicitly set a JSON null value during record creation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nprisma.log.create({\n  data: {\n    meta: Prisma.JsonNull,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Batch Updates with Prisma ORM vs Sequelize\nDESCRIPTION: Compares how to update multiple records that match certain criteria. Prisma uses updateMany with where and data, while Sequelize uses update with where and the new values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.updateMany({\n  data: {\n    name: 'Published author!',\n  },\n  where: {\n    email: {\n      contains: 'prisma.io',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst updatedUsers = await User.update({\n  { role: \"Admin\" },\n  where: {\n    email: {\n      [Op.like]: \"%@prisma.io\"\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Relation Field Unique Constraint\nDESCRIPTION: Example showing how to create a unique constraint that includes a relation field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_50\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int     @default(autoincrement())\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n  title     String\n  published Boolean @default(false)\n\n  @@unique([authorId, title])\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  email String @unique\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating .env file to use PPG_USER_DATABASE_URL\nDESCRIPTION: This snippet updates the .env file to rename the DATABASE_URL environment variable to PPG_USER_DATABASE_URL. This ensures the Prisma client for the user database uses the correct connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n//delete-start\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI...\n//delete-end\n//add-start\nPPG_USER_DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI...\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Updating a Post - PUT Route\nDESCRIPTION: This route handles PUT requests to update a post's published status. It retrieves the post ID from the request parameters and updates the post in the database using Prisma Client 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.put('/publish/:id', async (req, res) => {\\n  const { id } = req.params\\n  const post = await prisma.post.update({\\n    where: { id },\\n    data: { published: true },\\n  })\\n  res.json(post)\\n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Scalar List Value in Prisma Client\nDESCRIPTION: Example of how to set the value of a scalar list (coinflips) when creating a new user record using Prisma Client's create operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst createdUser = await prisma.user.create({\n  data: {\n    email: 'eloise@prisma.io',\n    coinflips: [true, true, true, false, true],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Context for Dependency Injection\nDESCRIPTION: This code creates a mock context for dependency injection. It defines types for the context and mock context, and provides a function to create a mock context using jest-mock-extended.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { PrismaClient } from '@prisma/client'\\nimport { mockDeep, DeepMockProxy } from 'jest-mock-extended'\\n\\nexport type Context = {\\n  prisma: PrismaClient\\n}\\n\\nexport type MockContext = {\\n  prisma: DeepMockProxy<PrismaClient>\\n}\\n\\nexport const createMockContext = (): MockContext => {\\n  return {\\n    prisma: mockDeep<PrismaClient>(),\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma binary targets for ARM64 architectures\nDESCRIPTION: Defines the Prisma binary targets specifically tailored for AWS Lambda functions utilizing ARM64 architecture, ensuring the correct precompiled engine file is used.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nbinaryTargets = [\"native\", \"linux-arm64-openssl-1.0.x\"]\n```\n\n----------------------------------------\n\nTITLE: Pushing Schema with Prisma CLI\nDESCRIPTION: Examples of using the 'prisma db push' command to push the schema, with options for accepting data loss and specifying a custom schema location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db push\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db push --accept-data-loss\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db push --schema=/tmp/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio - Terminal\nDESCRIPTION: Launches Prisma Studio, a graphical user interface for viewing and managing data in your database. It provides a visual way to inspect the data added by the seeding process and interact with your database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma ORM and Extensions\nDESCRIPTION: These terminal commands install the Prisma ORM and additional required packages for development.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install tsx --save-dev\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/extension-accelerate\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --output ../src/app/generated/prisma\n```\n\n----------------------------------------\n\nTITLE: SQL One-to-One Relation Example\nDESCRIPTION: SQL code demonstrating how to create tables with a one-to-one relationship using foreign keys.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    id SERIAL PRIMARY KEY\n);\nCREATE TABLE \"Profile\" (\n    id SERIAL PRIMARY KEY,\n    \"user\" integer NOT NULL UNIQUE,\n    FOREIGN KEY (\"user\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing TTL Cache Strategy with Prisma Accelerate\nDESCRIPTION: Sets a Time-to-Live (TTL) of 60 seconds for a user.findMany query. During this period, repeat queries will be served from the cache without hitting the database, reducing load and improving response times.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/300-caching.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait prisma.user.findMany({\n  cacheStrategy: {\n    //add-next-line\n    ttl: 60,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Refined Prisma Schema with Improved Naming\nDESCRIPTION: An updated version of the Prisma schema with relation field names adjusted to follow Prisma's naming conventions and improve semantic clarity. This includes renaming 'User' to 'author' in the Post model and adjusting capitalization.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique @db.VarChar(255)\n  name    String?  @db.VarChar(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting a Scalar List Value in Prisma Client\nDESCRIPTION: Example of how to unset (remove) a scalar list field (coinflips) when creating a user record in MongoDB using the unset operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst createdUser = await prisma.user.create({\n  data: {\n    email: 'eloise@prisma.io',\n    coinflips: {\n      unset: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Expanding Variables in .env Files\nDESCRIPTION: Demonstrates how to use variable expansion in .env files, where one variable can reference another using the ${VARIABLE_NAME} syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=postgresql://test:test@localhost:5432/test\nDATABASE_URL_WITH_SCHEMA=${DATABASE_URL}?schema=public\n```\n\n----------------------------------------\n\nTITLE: Dynamic SQL Query with Runtime Columns\nDESCRIPTION: Example TypeScript code showing how to create a SQL query with dynamically determined columns at runtime using the $queryRawUnsafe method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst columns = 'name, email, age'; // Columns determined at runtime\nconst result = await prisma.$queryRawUnsafe(\n  `SELECT ${columns} FROM Users WHERE active = true`\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client with New Defaults in Prisma ORM 5\nDESCRIPTION: This snippet shows the updated generator client configuration in Prisma ORM 5 where jsonProtocol is the default. Previously, jsonProtocol had to be specified as a preview feature. No dependencies are required for this configuration update.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/101-jsonprotocol-changes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"jsonProtocol\"]\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Post and User Models\nDESCRIPTION: This Prisma schema defines the database structure required for the middleware example. It includes models for Post and User with a relationship between them, and notably includes the 'language' field on Post that the middleware sets automatically.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/300-session-data-middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  authorId  Int?\n  content   String?\n  id        Int     @id @default(autoincrement())\n  published Boolean @default(false)\n  title     String\n  user      User?   @relation(fields: [authorId], references: [id])\n  language  String?\n\n  @@index([authorId], name: \"authorId\")\n}\n\nmodel User {\n  email           String  @unique\n  id              Int     @id @default(autoincrement())\n  name            String?\n  posts           Post[]\n  extendedProfile Json?\n  role            Role    @default(USER)\n}\n\nenum Role {\n  ADMIN\n  USER\n  MODERATOR\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Seed Data and Script Logic - TypeScript\nDESCRIPTION: Defines sample data (`userData`) conforming to the `Prisma.UserCreateInput` type, including nested data for related posts. It also defines an asynchronous `main` function that iterates over the seed data and uses the Prisma Client to create user records in the database, including their associated posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n//add-next-line\nimport { PrismaClient, Prisma } from \"../src/generated/prisma\";\n\n//add-next-line\nconst prisma = new PrismaClient();\n\n//add-start\nconst userData: Prisma.UserCreateInput[] = [\n  {\n    name: \"Alice\",\n    email: \"alice@prisma.io\",\n    posts: {\n      create: [\n        {\n          title: \"Join the Prisma Discord\",\n          content: \"https://pris.ly/discord\",\n          published: true,\n        },\n        {\n          title: \"Prisma on YouTube\",\n          content: \"https://pris.ly/youtube\",\n        },\n      ],\n    },\n  },\n  {\n    name: \"Bob\",\n    email: \"bob@prisma.io\",\n    posts: {\n      create: [\n        {\n          title: \"Follow Prisma on Twitter\",\n          content: \"https://www.twitter.com/prisma\",\n          published: true,\n        },\n      ],\n    },\n  },\n];\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in Node.js\nDESCRIPTION: Sets up a basic Node.js script that initializes Prisma Client, defines a main function for database queries, and handles connection lifecycle and error management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL Extensions in Prisma Schema\nDESCRIPTION: Demonstrates how to activate PostgreSQL extensions, specifically pgcrypto, in the Prisma schema using the postgresqlExtensions preview feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/70-unsupported-database-features.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pgcrypto]\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Migration Command for Schema Update\nDESCRIPTION: Command to create a new migration for the explicit relation changes using Prisma Migrate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/300-implicit-to-explicit-conversion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name \"added explicit relation\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Prisma Client Factory for Multi-tenant Setup\nDESCRIPTION: Factory function implementation for creating tenant-specific Prisma Clients with custom database configurations. Supports dynamic database connections based on tenant requirements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/400-nextjs-help.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\n\ntype TenantConfig = {\n  databaseUrl: string;\n};\n\nexport function createPrismaClient(config: TenantConfig): PrismaClient {\n  return new PrismaClient({\n    datasources: {\n      db: {\n        url: config.databaseUrl,\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Printing DB Pull Results Without Writing to File\nDESCRIPTION: Example of using the 'prisma db pull --print' command to display the generated schema without saving it to the filesystem. This is useful for previewing the schema before making changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_19\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db pull --print\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL connection URL for Heroku-hosted database\nDESCRIPTION: Shows an example of a PostgreSQL connection URL for a database hosted on Heroku with specific credentials and schema name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://opnmyfngbknppm:XXX@ec2-46-137-91-216.eu-west-1.compute.amazonaws.com:5432/d50rgmkqi2ipus?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Introspection for Inline 1-1 Relations\nDESCRIPTION: Displays introspection results for inline relations that lack `UNIQUE` constraints, resulting in recognition as a 1-n relation rather than 1-1 in the schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      String    @id\n  Profile Profile[]\n}\n\nmodel Profile {\n  id   String  @id\n  user String?\n  User User?   @relation(fields: [user], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma client in Next.js page component\nDESCRIPTION: This code snippet shows how to import and use the Prisma client in a Next.js page component. It demonstrates fetching a user from the database and rendering the user's name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from \"./page.module.css\";\nimport { prisma } from \"@repo/db\";\n\nexport default async function Home() {\n  const user = await prisma.user.findFirst() \n  return (\n    <div className={styles.page}>\n      {user?.name ?? \"No user added yet\"}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Model for TypeScript and SQL Server\nDESCRIPTION: This Prisma schema defines three models: Post, Profile, and User. It includes relationships between the models and specifies data types and constraints for each field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-table Inheritance Schema\nDESCRIPTION: Prisma schema implementing multi-table inheritance pattern with separate tables and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Activity {\n  id   Int          @id @default(autoincrement())\n  url  String\n  type ActivityType\n\n  video   Video?\n  article Article?\n\n  owner   User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n}\n\nmodel Video {\n  id         Int      @id @default(autoincrement())\n  duration   Int\n  activityId Int      @unique\n  activity   Activity @relation(fields: [activityId], references: [id])\n}\n\nmodel Article {\n  id         Int      @id @default(autoincrement())\n  body       String\n  activityId Int      @unique\n  activity   Activity @relation(fields: [activityId], references: [id])\n}\n\nenum ActivityType {\n  Video\n  Article\n}\n\nmodel User {\n  id         Int        @id @default(autoincrement())\n  name       String?\n  activities Activity[]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Migration SQL Script\nDESCRIPTION: Generates a SQL script representing the current database schema using `prisma migrate diff`. It compares an empty data model to the current schema defined in `prisma/schema.prisma` and outputs the SQL to a file `prisma/migrations/0_init/migration.sql`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\"\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Context type\nDESCRIPTION: This code snippet updates the type definition for the GraphQL context object. It replaces the Prisma client import and type from `@generated/prisma-client` with the `PrismaClient` from `@prisma/client`. This ensures that the context object uses the correct Prisma Client instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { PrismaClient } from '@prisma/client'\\n\\nexport interface Context {\\n  prisma: PrismaClient\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Counting Non-Null Field Values in Prisma Client\nDESCRIPTION: This query demonstrates how to count all records (_all) as well as all non-null values for a specific field (name). This is useful for understanding data completeness in your database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst userCount = await prisma.user.count({\n  select: {\n    _all: true, // Count all records\n    name: true, // Count all non-null field values\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ _all: 30, name: 10 }\n```\n\n----------------------------------------\n\nTITLE: Filtering JSON Fields with Any Null Values in Prisma\nDESCRIPTION: This snippet shows how to filter JSON fields that contain any type of null value (JSON null or database NULL) using Prisma. It uses the AnyNull enum in the query condition.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nprisma.log.findMany({\n  where: {\n    meta: {\n      equals: Prisma.AnyNull,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Post with Categories in Prisma Client\nDESCRIPTION: This TypeScript snippet demonstrates how to create a Post with associated Categories using Prisma Client in an explicit many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst createCategory = await prisma.post.create({\n  data: {\n    title: 'How to be Bob',\n    categories: {\n      create: [\n        {\n          assignedBy: 'Bob',\n          assignedAt: new Date(),\n          category: {\n            create: {\n              name: 'New category',\n            },\n          },\n        },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry with NodeTracerProvider\nDESCRIPTION: Detailed setup of OpenTelemetry tracing using NodeTracerProvider for fine-grained control over instrumentation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ATTR_SERVICE_NAME, ATTR_SERVICE_VERSION } from '@opentelemetry/semantic-conventions'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base'\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node'\nimport { PrismaInstrumentation, registerInstrumentations } from '@prisma/instrumentation'\nimport { Resource } from '@opentelemetry/resources'\n\nconst provider = new NodeTracerProvider({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'example application',\n    [SEMRESATTRS_SERVICE_VERSION]: '0.0.1',\n  }),\n})\n\nprovider.addSpanProcessor(new SimpleSpanProcessor(new OTLPTraceExporter()))\n\nregisterInstrumentations({\n  tracerProvider: provider,\n  instrumentations: [new PrismaInstrumentation()],\n})\n\nprovider.register()\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Seed Script\nDESCRIPTION: Adds prisma seed configuration to package.json to specify the command that runs the seed script.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"react-router build\",\n    \"dev\": \"react-router dev\",\n    \"start\": \"react-router-serve ./build/server/index.js\",\n    \"typecheck\": \"react-router typegen && tsc\"\n  },\n  //add-start\n  \"prisma\": {\n    \"seed\": \"tsx prisma/seed.ts\"\n  },\n  //add-end\n  \"dependencies\": {\n    \"@react-router/node\": \"^7.3.0\",\n    \"@react-router/serve\": \"^7.3.0\",\n    \"isbot\": \"^5.1.17\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"react-router\": \"^7.3.0\"\n  },\n  \"devDependencies\": {\n    \"@react-router/dev\": \"^7.3.0\",\n    \"@tailwindcss/vite\": \"^4.0.0\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19.0.1\",\n    \"@types/react-dom\": \"^19.0.1\",\n    \"prisma\": \"^6.5.0\",\n    \"react-router-devtools\": \"^1.1.0\",\n    \"tailwindcss\": \"^4.0.0\",\n    \"tsx\": \"^4.19.3\",\n    \"typescript\": \"^5.7.2\",\n    \"vite\": \"^5.4.11\",\n    \"vite-tsconfig-paths\": \"^5.1.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for TypedSQL\nDESCRIPTION: Command to install or update @prisma/client and prisma to at least version 5.19.0, which is required for TypedSQL functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client@latest\nnpm install -D prisma@latest\n```\n\n----------------------------------------\n\nTITLE: Node-API Integration\nDESCRIPTION: Native Node.js API support for Prisma, enabling more direct and performant integrations\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`napi`\n```\n\n----------------------------------------\n\nTITLE: Prisma Transaction with Isolation Level\nDESCRIPTION: This example shows how to set a custom isolation level when using the $transaction API in Prisma Client for a sequence of operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction(\n  [\n    prisma.resource.deleteMany({ where: { name: 'name' } }),\n    prisma.resource.createMany({ data }),\n  ],\n  {\n    isolationLevel: Prisma.TransactionIsolationLevel.Serializable, // optional, default defined by database configuration\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Complex Distinct Query with Relations in Prisma Client\nDESCRIPTION: This advanced example uses distinct to select unique combinations of playerId and gameId, ordered by score to return each player's highest score per game. It includes related data through select and nested relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst distinctScores = await prisma.play.findMany({\n  distinct: ['playerId', 'gameId'],\n  orderBy: {\n    score: 'desc',\n  },\n  select: {\n    score: true,\n    game: {\n      select: {\n        name: true,\n      },\n    },\n    player: {\n      select: {\n        name: true,\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    score: 900,\n    game: { name: 'Pacman' },\n    player: { name: 'Bert Bobberton' }\n  },\n  {\n    score: 400,\n    game: { name: 'Pacman' },\n    player: { name: 'Nellie Bobberton' }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate: Production Migration Modification Warning\nDESCRIPTION: This code snippet represents a warning message that is displayed when using the `prisma migrate deploy` command, and the command detects that migrations have been modified since they were applied. This situation can lead to unexpected behavior in production environments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/90-development-and-production.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"WARNING The following migrations have been modified since they were applied:\\n20210313140442_favorite_colors\"\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Tags using Explicit Relations\nDESCRIPTION: TypeScript code demonstrating how to query posts with their tags using nested includes for the explicit relation table structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.post.findMany({\n  include: { tags: { include: { tag: true } } },\n})\n```\n\n----------------------------------------\n\nTITLE: Using $queryRaw with Variables in Prisma\nDESCRIPTION: Shows how to safely use variables with $queryRaw by passing them as template literals, which Prisma converts to prepared statements to prevent SQL injection attacks.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst email = \"emelie@prisma.io\";\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE email = ${email}`;\n```\n\n----------------------------------------\n\nTITLE: Install Prisma Client\nDESCRIPTION: Installs the Prisma Client, which provides a type-safe API for interacting with your database. This is a required dependency for using Prisma Client in your application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\n\"npm install @prisma/client\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Objects in Prisma ORM and Mongoose\nDESCRIPTION: Demonstrates how to retrieve a single record by ID in both Prisma ORM and Mongoose. Prisma uses the findUnique method with a where clause while Mongoose uses the findById method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 1,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await User.findById(1)\n```\n\n----------------------------------------\n\nTITLE: Select Relation Count Feature\nDESCRIPTION: Prisma query method for counting related records within a single query operation\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`selectRelationCount`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Posts Using Fluent Relations API with Prisma Client in JavaScript\nDESCRIPTION: Demonstrates how to use the fluent relations API to retrieve Post records of a User by traversing the relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst posts = await prisma.profile\n  .findUnique({\n    where: { id: 1 },\n  })\n  .user()\n  .posts()\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client\nDESCRIPTION: This command installs the Prisma Client package as a project dependency.  Prisma Client is a type-safe database client that provides an interface for interacting with the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Adding Direct Database Connection for Migrations\nDESCRIPTION: Adds a direct database connection string to environment variables to enable Prisma Migrate and Introspection, which don't work with the Accelerate connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"prisma://accelerate.prisma-data.net/?api_key=__API_KEY__\"\nDIRECT_DATABASE_URL=\"postgresql://user:password@host:port/db_name?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: TypeORM: Finding One Record\nDESCRIPTION: This code snippet shows how to find one user record using TypeORM. It queries the `userRepository` to find a user with a specific ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Find one\nconst user = await userRepository.findOne({ \n  where: { id: 1 } \n});\n```\n\n----------------------------------------\n\nTITLE: Default Value for Int Field in Prisma Schema\nDESCRIPTION: Examples showing how to set default values for Int fields in both relational databases and MongoDB contexts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_41\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  email        String @unique\n  profileViews Int    @default(0)\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id           String @default(auto()) @map(\"_id\") @db.ObjectId\n  profileViews Int    @default(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing PrismaClient Instance in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to reuse a single PrismaClient instance throughout an application to avoid exhausting the database connection pool. It involves exporting a single instance of PrismaClient and importing it in files where database operations are performed. This practice is particularly beneficial in serverless environments to prevent connection pool exhaustion.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nasync function getPosts() {\n  const prisma = new PrismaClient()\n  await prisma.post.findMany()\n}\n\nasync function getUsers() {\n  const prisma = new PrismaClient()\n  await prisma.user.findMany()\n}\n\"\"\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nexport const prisma = new PrismaClient()\n\"\"\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"\nimport { prisma } from \\\"db.ts\\\"\n\nasync function getPosts() {\n  await prisma.post.findMany()\n}\n\nasync function getUsers() {\n  await prisma.user.findMany()\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Generates the Prisma Client based on your schema definition. This command needs to be run after any changes to the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/200-install-prisma-client-node-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Generating Squashed Migration from Empty Database\nDESCRIPTION: Command to generate a migration file that captures the entire schema state by comparing an empty database to the current schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/50-squashing-migrations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff \\\n --from-empty \\\n --to-schema-datamodel ./prisma/schema.prisma \\\n --script > ./prisma/migrations/000000000000_squashed_migrations/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Sanitized Prisma Schema Model\nDESCRIPTION: The resulting Prisma schema model after sanitizing invalid characters from the database table names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int     @id @default(autoincrement()) @map(\"_id\")\n  name    String? @map(\"_name\")\n  two_two Int?    @map(\"two$two\")\n\n  @@map(\"42User\")\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Prisma Packages with Yarn\nDESCRIPTION: Command to upgrade prisma and @prisma/client packages to version 3 using Yarn.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn up prisma@3 @prisma/client@3\n```\n\n----------------------------------------\n\nTITLE: Filtering Records List with Prisma Client\nDESCRIPTION: Filters user records by name using Prisma Client in both v1 and ORM 2. Filtering is performed using the `where` clause. The output is an array of user objects matching the filter criteria.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst users = await prisma.users({\n  where: {\n    name: 'Alice',\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.findMany({\n  where: {\n    name: 'Alice',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client\nDESCRIPTION: Creates a new user record with nested creation of related posts and profile records. Demonstrates Prisma's nested write capabilities and relation handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Database Connection URL in Environment Variable\nDESCRIPTION: This snippet demonstrates how to define the DATABASE_URL environment variable in a .env file using the MySQL connection format with placeholder credentials.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Defining cyclic relations between Chicken, Egg, and Fox models in Prisma\nDESCRIPTION: This Prisma schema defines three models (Chicken, Egg, Fox) with cyclic relations between them. This configuration would cause validation errors due to potential cycles in referential actions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Chicken {\n  id        Int   @id @default(autoincrement())\n  egg       Egg   @relation(fields: [eggId], references: [id])\n  eggId     Int\n  predators Fox[]\n}\n\nmodel Egg {\n  id         Int       @id @default(autoincrement())\n  predator   Fox       @relation(fields: [predatorId], references: [id])\n  predatorId Int\n  parents    Chicken[]\n}\n\nmodel Fox {\n  id        Int     @id @default(autoincrement())\n  meal      Chicken @relation(fields: [mealId], references: [id])\n  mealId    Int\n  foodStore Egg[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relation Load Strategy with Select\nDESCRIPTION: This example shows how to use the relationLoadStrategy option with a select query. This controls whether Prisma uses database joins or separate queries to fetch related data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  relationLoadStrategy: 'join', // or 'query'\n  select: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Annotations Examples\nDESCRIPTION: This snippet illustrates how to use type annotations in TypeScript, showcasing the declaration of variables with specific types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myAge: number = 37\\nconst myName: string = 'Rich'\n```\n\n----------------------------------------\n\nTITLE: Formatting Prisma Schema with Validation\nDESCRIPTION: Example of using the 'prisma format' command to format a Prisma schema file. This command automatically formats and validates the schema file, showing the result on successful completion.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\nprisma format\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with PostgreSQL Configuration\nDESCRIPTION: Updated Prisma schema file that changes the database provider from SQLite to PostgreSQL while maintaining the same data models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Multiple Categories in Prisma (TypeScript)\nDESCRIPTION: Creates a single Post record with multiple Category records using Prisma's create method with nested creation. This demonstrates how to establish many-to-many relationships when creating new records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst createPostAndCategory = await prisma.post.create({\n  data: {\n    title: 'How to become a butterfly',\n    categories: {\n      create: [{ name: 'Magic' }, { name: 'Butterflies' }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Default Referential Actions in Prisma Schema\nDESCRIPTION: This snippet illustrates the default referential actions applied when not explicitly specified in a Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id])\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Group By Query Feature\nDESCRIPTION: Database query method for aggregating and grouping results based on specified criteria in Prisma Client\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`groupBy`\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts by User Using Alternative Find Query in Prisma Client\nDESCRIPTION: This snippet achieves the same result as the previous snippet but uses a standard `findMany` query instead. It showcases the comparison between two methods of fetching posts related to a user. The input is the user's email, and the output contains matching posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst postsByUser = await prisma.post.findMany({\n  where: {\n    author: {\n      email: 'alice@prisma.io',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Files to Git Repository\nDESCRIPTION: Commands to stage all files and create an initial commit in the Git repository.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m 'Initial commit'\n```\n\n----------------------------------------\n\nTITLE: Naming an extension for better error logging in TypeScript\nDESCRIPTION: Example demonstrating how to name an extension to help identify it in error logs, which is useful for debugging and maintenance in larger applications with multiple extensions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  name: `signUp`,  // (Optional) Extension name\n  model: {\n    user: { ... }\n },\n})\n```\n\n----------------------------------------\n\nTITLE: SDL Schema Definition for createDraft Mutation with prisma-binding\nDESCRIPTION: GraphQL schema definition for the createDraft mutation using SDL (Schema Definition Language) with prisma-binding.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createDraft(title: String!, content: String, authorId: String!): Post!\n  # ... other mutations\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a reusable extension with Prisma.defineExtension in TypeScript\nDESCRIPTION: Example showing how to create a reusable extension by defining it with Prisma.defineExtension and then applying it to a Prisma Client instance. This pattern is useful for organizing extensions into separate files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\n// Define the extension\nconst myExtension = Prisma.defineExtension({\n  name: 'signUp', // Optional: name appears in error logs\n  model: {        // This is a `model` component\n    user: { ... } // The extension logic for the `user` model goes inside the curly braces\n  },\n})\n\n// Pass the extension to a Prisma Client instance\nconst prisma = new PrismaClient().$extends(myExtension)\n```\n\n----------------------------------------\n\nTITLE: Customizing Composite Primary Key Name in Prisma Schema\nDESCRIPTION: This Prisma schema snippet shows how to customize the name of a composite primary key using the 'name' argument in the @@id attribute. This affects how the key is referenced in Prisma Client queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\n@@id([firstName, lastName], name: \"fullName\")\n```\n\n----------------------------------------\n\nTITLE: Example MySQL Connection URL for Local Database\nDESCRIPTION: This snippet shows a typical connection URL format for a locally hosted MySQL database with the root user.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://root:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Type Resolver with Prisma Client\nDESCRIPTION: This code demonstrates how to implement the type resolver for the User type, resolving the 'posts' and 'profile' relations using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    // ... your query resolvers\n  },\n  Mutation: {\n    // ... your mutation resolvers\n  },\n  User: {\n    posts: (parent, args, context) => {\n      return context.prisma.user\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .posts()\n    },\n    profile: (parent, args, context) => {\n      return context.prisma.user\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .profile()\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Server Component for Fetching User Data\nDESCRIPTION: Create a Nuxt server component to fetch and display the first user from the database using Prisma Accelerate\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { withAccelerate } from \"@prisma/extension-accelerate\";\n  const prisma = usePrismaClient().$extends(withAccelerate());\n  const user = await prisma.user.findFirst();\n</script>\n\n<template>\n  <p>{{ user?.name ?? \"No user has been added yet.\" }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Video and Article Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to combine Prisma ORM's generated `Video` and `Article` types with an `Activity` type to create a more convenient type definition. It omits the discriminator column to provide a cleaner type structure for these entity types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  Video as VideoDB,\\n  Article as ArticleDB,\\n  Activity,\\n} from '@prisma/client'\\n\\ntype Video = Omit<VideoDB & Activity, 'type'>\\ntype Article = Omit<ArticleDB & Activity, 'type'>\n```\n\n----------------------------------------\n\nTITLE: Database Migration Development Command in Prisma\nDESCRIPTION: Command to generate and apply new migrations based on schema changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/200-troubleshooting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Relation filters: Prisma ORM\nDESCRIPTION: This code snippet demonstrates how to filter users based on a relation (posts) using Prisma ORM. It finds users who have at least one post with 'Hello' in the title.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.user.findMany({\n  where: {\n    Post: {\n      some: {\n        title: {\n          contains: 'Hello',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an API Route to Fetch Users\nDESCRIPTION: This snippet details creating an API route using PrismaClient to query and return a list of users and their posts in JSON format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from \"../../lib/prisma\";\n\nexport async function GET() {\n  const users = await prisma.user.findMany({\n    include: {\n      posts: true,\n    },\n  });\n  return new Response(JSON.stringify(users), {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma migrations\nDESCRIPTION: Command to create and apply a database migration based on the schema definition, generating the necessary database tables and the Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Querying with Prisma: Type-safe operator usage\nDESCRIPTION: This snippet demonstrates how Prisma ORM enforces type-safe operator usage when querying data. The TypeScript compiler ensures that operators like `gt` are used with the correct data types, preventing runtime errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishedPosts = await prisma.post.findMany({\n  where: {\n    published: true,\n    title: { contains: 'Hello World' },\n    views: { gt: 0 },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript project with Prisma dependencies\nDESCRIPTION: Terminal commands to initialize a Node.js project with package.json, install Prisma CLI as a development dependency along with TypeScript and required type definitions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install prisma typescript tsx @types/node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Prisma Client Middleware Execution Order\nDESCRIPTION: Example showing the execution order of multiple middleware functions in a stack. The code demonstrates how middleware runs in descending order before the query and ascending order after the query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\n// Middleware 1\nprisma.$use(async (params, next) => {\n  console.log(params.args.data.title)\n  console.log('1')\n  const result = await next(params)\n  console.log('6')\n  return result\n})\n\n// Middleware 2\nprisma.$use(async (params, next) => {\n  console.log('2')\n  const result = await next(params)\n  console.log('5')\n  return result\n})\n\n// Middleware 3\nprisma.$use(async (params, next) => {\n  console.log('3')\n  const result = await next(params)\n  console.log('4')\n  return result\n})\n\nconst create = await prisma.post.create({\n  data: {\n    title: 'Welcome to Prisma Day 2020',\n  },\n})\n\nconst create2 = await prisma.post.create({\n  data: {\n    title: 'How to Prisma!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Post with Both New and Existing Tags\nDESCRIPTION: TypeScript code showing how to update a post by both connecting to existing tags and creating new ones in a single operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.post.update({\n  where: { id: 1 },\n  data: {\n    title: 'Prisma is awesome!',\n    tags: { set: [{ id: 1 }, { id: 2 }], create: { name: 'typescript' } },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Model - Todo\nDESCRIPTION: A generated Prisma model representing a `todo` table with fields for `id`, `text`, and `done`.  The `id` field is the primary key, and `done` defaults to `false`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\n\"model todo {\n  id   Int     @id\n  text String\n  done Boolean @default(false)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with Type Safety in Prisma\nDESCRIPTION: This snippet demonstrates how to use Prisma Client to execute a raw SQL query with type safety. It imports a predefined SQL query 'subscriptionsReport' and executes it using the $queryRawTyped method, preserving type information in the results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { subscriptionsReport } from '@prisma/client/sql'\n\nconst prisma = new PrismaClient();\n\nconst usersWithPostCounts = await prisma.$queryRawTyped(subscriptionsReport())\nconsole.log(usersWithPostCounts)\n```\n\n----------------------------------------\n\nTITLE: Introspected Schema with String Instead of Enum\nDESCRIPTION: Result of introspecting a Prisma 1 enum field in Prisma ORM 2.x, showing how it's recognized as a String.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_37\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String  @id\n  role String?\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Retries with Serializable Isolation\nDESCRIPTION: Example showing how to handle transaction retries with Serializable isolation level to avoid write conflicts and deadlocks. Implements a retry mechanism for P2034 errors with a maximum retry limit.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma, PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\nasync function main() {\n  const MAX_RETRIES = 5\n  let retries = 0\n\n  let result\n  while (retries < MAX_RETRIES) {\n    try {\n      result = await prisma.$transaction(\n        [\n          prisma.user.deleteMany({\n            where: {\n              /** args */\n            },\n          }),\n          prisma.post.createMany({\n            data: {\n              /** args */\n            },\n          }),\n        ],\n        {\n          isolationLevel: Prisma.TransactionIsolationLevel.Serializable,\n        }\n      )\n      break\n    } catch (error) {\n      if (error.code === 'P2034') {\n        retries++\n        continue\n      }\n      throw error\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Prisma Client\nDESCRIPTION: Generates the Prisma Client based on your Prisma schema. This creates the necessary TypeScript types and auto-completion features for using Prisma Client in your code.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma generate\"\n```\n\n----------------------------------------\n\nTITLE: Executing Operations Against a Database Replica in Prisma\nDESCRIPTION: This snippet demonstrates using the `$replica()` method to explicitly execute a query against a read replica. This allows developers to target replicas for specific read operations even when the default behavior might be different.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/200-read-replicas.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"const result = await prisma.$replica().user.findFirst(...) \"\n```\n\n----------------------------------------\n\nTITLE: Data Mutations in Drizzle\nDESCRIPTION: Shows create, update, and delete operations in Drizzle using SQL-like syntax and chain methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// create a user\nconst user = await db.insert(users).values({\n  name: 'Nilu',\n  email: 'nilu@prisma.io',\n})\n\n// update a user\nconst user = await db\n  .update(users)\n  .set({ name: 'Another Nilu' })\n  .where(eq(users.email, 'nilu@prisma.io'))\n  .returning()\n\n// delete a user\nconst deletedUser = await db\n  .delete(users)\n  .where(eq(users.email, 'nilu@prisma.io'))\n  .returning()\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client\nDESCRIPTION: Example of creating a new user with related posts and profile records using nested write operations. Includes fetching the created records with their relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Debug Command\nDESCRIPTION: Example of using the 'prisma debug' command to display system information for debugging purposes. This command outputs information about the Prisma schema, environment variables, and other configuration details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\nprisma debug\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma ORM Project\nDESCRIPTION: This command initializes a new Prisma ORM project. It creates a schema file, sets the datasource provider, and specifies a custom output location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/_prisma-init-partial.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --datasource-provider ${props.datasource.toLowerCase()} --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Working with Boolean Fields in Raw Queries\nDESCRIPTION: Example showing how to handle boolean fields when using raw queries, demonstrating the type differences between database providers.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.$queryRaw<Post[]>`SELECT * FROM Post`;\n\nresult.forEach((x) => {\n  console.log(x.published);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Restrict Referential Actions in Prisma Schema\nDESCRIPTION: This example shows how to use the Restrict referential action for both onDelete and onUpdate. It prevents the deletion of a User if they have any posts, and prevents changing a User's id if they have posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict)\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Compound Unique Constraint Example\nDESCRIPTION: Example demonstrating how to create a compound unique constraint across multiple fields using @@unique.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_49\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int     @default(autoincrement())\n  firstName String\n  lastName  String\n  isAdmin   Boolean @default(false)\n\n  @@unique([firstName, lastName])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection URL (.env)\nDESCRIPTION: Sets the `DATABASE_URL` environment variable within the `.env.prod` file. This URL specifies the connection details (protocol, user, password, host, port, database name, schema) for the application to connect to the PostgreSQL database service (`postgres_db`) defined in the Docker Compose file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_22\n\nLANGUAGE: dotenv\nCODE:\n```\nDATABASE_URL=\"postgresql://postgres:prisma@postgres_db:5432/postgres?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Creating Related Data with Nested Writes\nDESCRIPTION: Creates a new user with a related post using Prisma Client's nested write capability. Demonstrates relationship handling and data retrieval with included relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Rich',\n      email: 'hello@prisma.com',\n      posts: {\n        create: {\n          title: 'My first post',\n          body: 'Lots of really interesting stuff',\n          slug: 'my-first-post',\n        },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Post with Prisma Client in Node.js\nDESCRIPTION: This code demonstrates how to update an existing post record in the database using Prisma Client's update method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User and Post Model using Prisma Schema\nDESCRIPTION: This snippet defines two models, User and Post, in the Prisma schema. The User model has a unique ID and a name with a specific varchar length defined using @db.VarChar. The Post model has an ID, title, published status, and a relation to the User model. This structure is important for Prisma Migrate to correctly translate these fields into the underlying database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/110-native-database-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  name  String @db.VarChar(200)\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String  @db.VarChar(150)\n  published Boolean @default(true)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Categories and Posts Sequentially\nDESCRIPTION: Creates multiple categories first and then creates posts with references to those categories using createManyAndReturn.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst categories = await prisma.category.createManyAndReturn({\n  data: [\n    { name: 'Fun', },\n    { name: 'Technology', },\n    { name: 'Sports', }\n  ],\n  select: {\n    id: true\n  }\n});\n\nconst posts = await prisma.post.createManyAndReturn({\n  data: [{\n    title: \"Funniest moments in 2024\",\n    categoryId: categories.filter(category => category.name === 'Fun')!.id\n  }, {\n    title: \"Linux or macOS — what's better?\",\n    categoryId: categories.filter(category => category.name === 'Technology')!.id\n  },\n  {\n    title: \"Who will win the next soccer championship?\",\n    categoryId: categories.filter(category => category.name === 'Sports')!.id\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Basic Query Setup\nDESCRIPTION: Basic setup code for initializing PrismaClient and creating a main function structure with proper error handling and connection management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Package Dependencies in package.json\nDESCRIPTION: Add Prisma as a development dependency and configure package scripts for database management\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/140-use-prisma-in-pnpm-workspaces.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"prisma\": \"catalog:prisma\"\n  },\n  \"scripts\": {\n    \"db:generate\": \"prisma generate --no-engine\",\n    \"db:migrate\": \"prisma migrate dev\",\n    \"db:deploy\": \"prisma migrate deploy\",\n    \"db:studio\": \"prisma studio\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI with Yarn\nDESCRIPTION: Installs Prisma CLI as a development dependency using Yarn.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add prisma --dev\n```\n\n----------------------------------------\n\nTITLE: Creating Draft Migration in Prisma\nDESCRIPTION: Command to create a draft migration file that can be edited before applying to the database\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/40-customizing-migrations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --create-only\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values in Prisma (Relational Databases)\nDESCRIPTION: This snippet exemplifies the use of the @default attribute to set default values for fields in a Post model, showcasing different field types and settings within a relational database context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  //highlight-next-line\n  createdAt  DateTime   @default(now())\n  title      String\n  //highlight-next-line\n  published  Boolean    @default(false)\n  //highlight-next-line\n  data       Json       @default(\"{ \\\"hello\\\": \\\"world\\\" }\")\n  author     User       @relation(fields: [authorId], references: [id])\n  authorId   Int\n  categories Category[] @relation(references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB User Model with Default Phone Number\nDESCRIPTION: Illustrates adding a required field with a default value to handle existing records in MongoDB using Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email       String\n  phoneNumber String @default(\"000-000-0000\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Related Posts using Prisma Client\nDESCRIPTION: This snippet shows how to retrieve all User records and include their related Post records using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Run inside `async` function\nconst allUsers = await prisma.user.findMany({\n  include: { posts: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Objects with Prisma ORM\nDESCRIPTION: Demonstrates how to update an existing record with Prisma ORM. Prisma's update method requires both the data to be updated and the where clause to identify the record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.update({\n  data: {\n    name: 'Alicia',\n  },\n  where: {\n    id: 2,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Pagination with Prisma ORM and Mongoose\nDESCRIPTION: Shows different pagination approaches. Prisma supports both cursor-based and offset pagination, while Mongoose uses skip and limit for offset pagination.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = prisma.post.findMany({\n  before: {\n    id: 242,\n  },\n  last: 20,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst cc = prisma.post.findMany({\n  skip: 200,\n  first: 20,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.find({\n  skip: 200,\n  limit: 20,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating User and Post with Nested Write in Prisma\nDESCRIPTION: Shows how to create a new User record along with a related Post record using a nested write query. It also demonstrates including related data in the query result.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Rich',\n      email: 'hello@prisma.com',\n      posts: {\n        create: {\n          title: 'My first post',\n          body: 'Lots of really interesting stuff',\n          slug: 'my-first-post',\n        },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a database seed script\nDESCRIPTION: TypeScript script to seed the database with sample users and posts data. It uses the PrismaClient to create records with relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from \"../src/generated/prisma\";\n\nconst prisma = new PrismaClient();\n\nconst userData: Prisma.UserCreateInput[] = [\n  {\n    name: \"Alice\",\n    email: \"alice@prisma.io\",\n    posts: {\n      create: [\n        {\n          title: \"Join the Prisma Discord\",\n          content: \"https://pris.ly/discord\",\n          published: true,\n        },\n        {\n          title: \"Prisma on YouTube\",\n          content: \"https://pris.ly/youtube\",\n        },\n      ],\n    },\n  },\n  {\n    name: \"Bob\",\n    email: \"bob@prisma.io\",\n    posts: {\n      create: [\n        {\n          title: \"Follow Prisma on Twitter\",\n          content: \"https://www.twitter.com/prisma\",\n          published: true,\n        },\n      ],\n    },\n  },\n];\n\nexport async function main() {\n  for (const u of userData) {\n    await prisma.user.create({ data: u });\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Composite Type Definition for MongoDB\nDESCRIPTION: Example of defining a composite type Photo and using it in a Product model, available only for MongoDB databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_92\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Product {\n  id     String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name   String\n  photos Photo[]\n}\n\ntype Photo {\n  height Int\n  width  Int\n  url    String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Tracer with Prisma Instrumentation\nDESCRIPTION: TypeScript code that initializes the Datadog tracer and configures Prisma instrumentation. It sets up the tracer provider and registers the Prisma instrumentation to capture spans for all database queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport Tracer from \"dd-trace\";\nimport {\n  PrismaInstrumentation,\n  registerInstrumentations,\n} from \"@prisma/instrumentation\";\n\nconst tracer = Tracer.init({\n  apmTracingEnabled: true,\n  service: \"prisma-datadog-tracing\",\n  version: \"1.0.0\",\n  profiling: true\n});\n\nconst provider = new tracer.TracerProvider();\n\n// Register the provider globally\nprovider.register();\n\nregisterInstrumentations({\n  instrumentations: [\n    new PrismaInstrumentation({\n      enabled: true,\n    }),\n  ],\n  tracerProvider: provider,\n});\n\nexport { tracer };\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL Full-Text Search with Prisma\nDESCRIPTION: This snippet executes the PostgreSQL full-text search query using Prisma's `$queryRawTyped` method. It imports the `fullTextSearch` function and constructs the query with a term (`cat`).  It then uses prisma to execute the raw SQL query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { fullTextSearch } from \"@prisma/client/sql\"\n  \n  const term = `cat`\n  const result = await prisma.$queryRawTyped(fullTextSearch(term))\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory in terminal\nDESCRIPTION: Commands to create a new project directory called 'hello-prisma' and navigate into it using the terminal.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Creating Database Backup with pg_dump\nDESCRIPTION: Command to create a backup of the EA database using pg_dump through the secure tunnel.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPGSSLMODE=disable \\\npg_dump \\\n  -h 127.0.0.1 \\\n  -p 5432 \\\n  -Fc \\\n  -v \\\n  -d postgres \\\n  -f ./mydatabase.bak \\\n&& echo \"-complete-\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: NPM commands to initialize TypeScript project and install required dependencies including Prisma CLI\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-prismaPostgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install prisma typescript tsx @types/node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Mutation Query for updateBio\nDESCRIPTION: An example GraphQL mutation query for updating a user's bio, specifying the email for user identification and the new bio text.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  updateBio(\n    userUniqueInput: { email: \"alice@prisma.io\" }\n    bio: \"I like turtles\"\n  ) {\n    id\n    name\n    profile {\n      id\n      bio\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Deletes with Prisma ORM vs Sequelize\nDESCRIPTION: Compares how to delete multiple records that match certain criteria in both ORMs. Prisma uses deleteMany with a where clause, while Sequelize uses destroy with a where clause.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.deleteMany({\n  where: {\n    id: {\n      in: [1, 2, 6, 6, 22, 21, 25],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.destroy({\n  where: {\n    id: {\n      [Op.in]: [id1, id2, id3],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Debug with Latest Version\nDESCRIPTION: Command to run the debug feature with the latest version of Prisma CLI, useful when using an older Prisma version that doesn't have the debug command built-in.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma@latest debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Generator\nDESCRIPTION: Prisma schema configuration to define the client generator and specify a custom output path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"app/generated/prisma/client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Updated Docker Compose Services (Terminal)\nDESCRIPTION: This command builds any changed images and starts or restarts all services defined in the updated `docker-compose.yml` file, including the newly added `prisma-studio` service, running them in detached mode (`-d`).\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_26\n\nLANGUAGE: terminal\nCODE:\n```\ndocker compose -f docker-compose.yml up --build -d\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command is used to execute the test suite of the application, ensuring that the migrated endpoints function as expected after the transition to Prisma ORM. This step is critical for verifying the correctness of the implemented changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Prisma Migration Command\nDESCRIPTION: Terminal command to generate and apply the migration for the new Tag model using Prisma Migrate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name tags-model\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma datasource for CockroachDB\nDESCRIPTION: This snippet shows how to set up the datasource block in the Prisma schema file to connect to a CockroachDB database. It uses an environment variable for the database URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema Models\nDESCRIPTION: Defines `User` and `Post` models in Prisma schema, demonstrating how model relations are set up along with scalar fields. This schema includes attributes like `id` and `email` for `User` and utilizes relations to the `Post` model with a foreign key `userId`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/100-operating-against-partial-structures-of-model-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id\n  author    User    @relation(fields: [userId], references: [id])\n  title     String\n  published Boolean @default(false)\n  userId    Int\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypedSQL Query in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to import and use a TypedSQL query with Prisma Client, showcasing the type-safe query execution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { getUsersWithPosts } from '@prisma/client/sql'\n\nconst prisma = new PrismaClient()\n\nconst usersWithPostCounts = await prisma.$queryRawTyped(getUsersWithPosts())\nconsole.log(usersWithPostCounts)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL BigInt Type Mappings\nDESCRIPTION: Native database type mappings for BigInt types in PostgreSQL with corresponding Prisma field type attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_17\n\nLANGUAGE: prisma\nCODE:\n```\n@db.BigInt\n@db.BigInt @default(autoincrement())\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio\nDESCRIPTION: This command opens Prisma Studio, a visual editor for the database that allows viewing and editing data in the tables created by Prisma Migrate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-prismaPostgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packages using pnpm\nDESCRIPTION: Use this command to upgrade the `@prisma/client` and `prisma` packages to version 6 with pnpm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\npnpm upgrade prisma@6 @prisma/client@6\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in Node.js\nDESCRIPTION: Basic setup code for initializing Prisma Client with error handling and proper disconnection. Creates a reusable client instance and defines a main function for executing queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Migrating GraphQL users query using Nexus t.crud in TypeScript\nDESCRIPTION: Migrates the 'users' GraphQL query from prisma-binding implementation to Nexus using the t.crud property inside a queryType definition. This leverages nexus-prisma-plugin to auto-generate filtering and ordering resolvers for users, replicating the forwarding behavior of prisma-binding's forwardTo. Requires nexus-prisma-plugin and proper nexus-configured schema. The inputs include standard query arguments for filtering, pagination, and ordering; output is a list of User objects. The snippet updates the Query type to expose the users query with enhanced features.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Query = queryType({\n  definition(t) {\n    //add-start\n    t.crud.users({\n      filtering: true,\n      ordering: true,\n    })\n    //add-end\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Heroku Application\nDESCRIPTION: Command to create a new Heroku application with a custom name, which will provide deployment URLs and Git repository.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nheroku apps:create your-app-name\n```\n\n----------------------------------------\n\nTITLE: Generating Nano ID values with custom length (16 characters) in Relational databases\nDESCRIPTION: Configures a User model with an ID field that automatically generates Nano ID values with a custom length of 16 characters. Nanoid accepts length between 2 and 255.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_84\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(nanoid(16))\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma dependencies\nDESCRIPTION: Command to install Prisma ORM and related dependencies, including the Prisma CLI, tsx for TypeScript execution, and the Prisma Accelerate extension for connection pooling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\nnpm install tsx --save-dev\nnpm install @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Module Export\nDESCRIPTION: TypeScript code showing how @prisma/client exports the generated client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '.prisma/client'\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema for Interactive Transaction Example\nDESCRIPTION: Prisma schema defining User and Audit models for demonstrating interactive transaction tracing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  email String @unique\n}\n\nmodel Audit {\n  id     Int    @id\n  table  String\n  action String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Profile Type Resolver with Prisma Client\nDESCRIPTION: This code demonstrates how to implement the type resolver for the Profile type, resolving the 'user' relation using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    // ... your query resolvers\n  },\n  Mutation: {\n    // ... your mutation resolvers\n  },\n  User: {\n    // ... your type resolvers for `User` from before\n  },\n  Post: {\n    // ... your type resolvers for `Post` from before\n  },\n  Profile: {\n    user: (parent, args, context) => {\n      return context.prisma.profile\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .owner()\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Prisma.validator with form input for User creation\nDESCRIPTION: This code snippet shows how to use `Prisma.validator` with form input to create a user and a post.  It defines a `createUserAndPost` function that takes user and post data as input and uses `Prisma.validator` with `UserCreateInput` to ensure type safety when creating the user. It also includes a `findSpecificUser` function which uses `Prisma.validator` with `UserWhereInput` to find a user based on email.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/050-prisma-validator.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma, PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\n// Create a new function and pass the parameters onto the validator\nconst createUserAndPost = (\n  name: string,\n  email: string,\n  postTitle: string,\n  profileBio: string\n) => {\n  return Prisma.validator<Prisma.UserCreateInput>()({\n    name,\n    email,\n    posts: {\n      create: {\n        title: postTitle,\n      },\n    },\n    profile: {\n      create: {\n        bio: profileBio,\n      },\n    },\n  })\n}\n\nconst findSpecificUser = (email: string) => {\n  return Prisma.validator<Prisma.UserWhereInput>()({\n    email,\n  })\n}\n\n// Create the user in the database based on form input\n// Run inside async function\nawait prisma.user.create({\n  data: createUserAndPost(\n    'Rich',\n    'rich@boop.com',\n    'Life of Pie',\n    'Learning each day'\n  ),\n})\n\n// Find the specific user based on form input\n// Run inside async function\nconst oneUser = await prisma.user.findUnique({\n  where: findSpecificUser('rich@boop.com'),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Tests for Prisma Service Functions with Jest\nDESCRIPTION: This code demonstrates how to write a Jest unit test for a Prisma service function that retrieves active users. It uses a Prisma mock to simulate database responses without accessing a real database, enabling fast and predictable test execution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prismaMock } from '../prisma/singleton';\nimport { getActiveUsers } from '../services/userService';\n\ntest('should return only active users', async () => {\n  prismaMock.user.findMany.mockResolvedValue([\n    { id: 1, name: 'Alice', email: 'alice@example.com' },\n    { id: 2, name: 'Bob', email: 'bob@example.com' }\n  ]);\n\n  const users = await getActiveUsers();\n  expect(users).toHaveLength(2);\n  expect(users[0].email).toBe('alice@example.com');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Level for Sequential Operations in Prisma\nDESCRIPTION: Example showing how to set the transaction isolation level for sequential operations using the $transaction API. This allows fine-tuning transaction behavior for specific data consistency requirements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction(\n  [\n    // Prisma Client operations running in a transaction...\n  ],\n  {\n    isolationLevel: Prisma.TransactionIsolationLevel.Serializable, // optional, default defined by database configuration\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Script for Forward Migration in Prisma\nDESCRIPTION: This command applies the generated SQL script to the production database, updating it to the desired state without modifying the migrations table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db execute --url \"$DATABASE_URL_PROD\" --file forward.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection URL with Arguments in Prisma\nDESCRIPTION: Example of a PostgreSQL connection URL with placeholder values for user, password, host, port, database, and additional key-value pair arguments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL Extensions in Prisma Schema\nDESCRIPTION: Configuration for enabling PostgreSQL extensions using the postgresqlExtensions preview feature in the Prisma schema. This example shows how to enable the pgcrypto extension.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/120-native-database-functions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pgcrypto]\n}\n```\n\n----------------------------------------\n\nTITLE: Type Error: Missing required field\nDESCRIPTION: This snippet shows the TypeScript compiler error when attempting to create a new user without the `email` field, according to the Prisma schema, highlighting Prisma's type safety.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] 10:39:07 ⨯ Unable to compile TypeScript:\nsrc/index.ts:39:5 - error TS2741: Property 'email' is missing in type '{ name: string; }' but required in type 'UserCreateInput'.\n```\n\n----------------------------------------\n\nTITLE: Resolving Migration Issues with Prisma Migrate Resolve\nDESCRIPTION: Examples of using the 'prisma migrate resolve' command to mark failed migrations as applied or rolled back.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_26\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate resolve --applied 20201231000000_add_users_table\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate resolve --rolled-back 20201231000000_add_users_table\n```\n\n----------------------------------------\n\nTITLE: TypeScript Seeding Script\nDESCRIPTION: Example TypeScript script for seeding the database with sample users and posts using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\nasync function main() {\n  const alice = await prisma.user.upsert({\n    where: { email: 'alice@prisma.io' },\n    update: {},\n    create: {\n      email: 'alice@prisma.io',\n      name: 'Alice',\n      posts: {\n        create: {\n          title: 'Check out Prisma with Next.js',\n          content: 'https://www.prisma.io/nextjs',\n          published: true,\n        },\n      },\n    },\n  })\n  const bob = await prisma.user.upsert({\n    where: { email: 'bob@prisma.io' },\n    update: {},\n    create: {\n      email: 'bob@prisma.io',\n      name: 'Bob',\n      posts: {\n        create: [\n          {\n            title: 'Follow Prisma on Twitter',\n            content: 'https://twitter.com/prisma',\n            published: true,\n          },\n          {\n            title: 'Follow Nexus on Twitter',\n            content: 'https://twitter.com/nexusgql',\n            published: true,\n          },\n        ],\n      },\n    },\n  })\n  console.log({ alice, bob })\n}\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Logging into Vercel CLI\nDESCRIPTION: Terminal command to authenticate with Vercel through the CLI before deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\nvercel login\n```\n\n----------------------------------------\n\nTITLE: Contains Filter for Posts - Drizzle - TypeScript\nDESCRIPTION: This snippet provides a method to filter posts in Drizzle where the titles contain a specified substring. It employs the 'ilike' operator to allow for flexible matching in the titles.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await db\n  .select()\n  .from(posts)\n  .where(ilike(posts.title, '%Hello World%'))\n```\n\n----------------------------------------\n\nTITLE: Mutating the Result of a Query\nDESCRIPTION: Shows how to modify the query result after execution, such as masking sensitive data like passwords before returning it to the client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    user: {\n      async findFirst({ model, operation, args, query }) {\n        const user = await query(args)\n\n        if (user.password !== undefined) {\n          user.password = '******'\n        }\n\n        return user\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Seeding Script\nDESCRIPTION: Example JavaScript script for seeding the database with sample users and posts using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\nconst prisma = new PrismaClient()\n\nasync function main() {\n  const alice = await prisma.user.upsert({\n    where: { email: 'alice@prisma.io' },\n    update: {},\n    create: {\n      email: 'alice@prisma.io',\n      name: 'Alice',\n      posts: {\n        create: {\n          title: 'Check out Prisma with Next.js',\n          content: 'https://www.prisma.io/nextjs',\n          published: true,\n        },\n      },\n    },\n  })\n\n  const bob = await prisma.user.upsert({\n    where: { email: 'bob@prisma.io' },\n    update: {},\n    create: {\n      email: 'bob@prisma.io',\n      name: 'Bob',\n      posts: {\n        create: [\n          {\n            title: 'Follow Prisma on Twitter',\n            content: 'https://twitter.com/prisma',\n            published: true,\n          },\n          {\n            title: 'Follow Nexus on Twitter',\n            content: 'https://twitter.com/nexusgql',\n            published: true,\n          },\n        ],\n      },\n    },\n  })\n  console.log({ alice, bob })\n}\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Type Error Example When Accessing Non-existent Field\nDESCRIPTION: Example showing how Prisma Client's type safety prevents accessing non-existent fields. This code would produce a type error during development, demonstrating the type-safety benefits of Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(user.lastName) // Property 'lastName' does not exist on type 'User'.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Prisma\nDESCRIPTION: Git ignore configuration to exclude generated Prisma client files from version control\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/_prisma-init-partial.mdx#2025-04-21_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\ngenerated/prisma/\n```\n\n----------------------------------------\n\nTITLE: Defining User Model in Prisma Schema\nDESCRIPTION: Example Prisma schema defining a User model for initial migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection in Prisma Schema\nDESCRIPTION: Example of setting up a connection to a PostgreSQL database in the Prisma schema file. It includes user, password, host, port, and database name in the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://janedoe:mypassword@localhost:5432/mydb?schema=sample\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Upgrade CLI to Add Missing Attributes\nDESCRIPTION: This command is run using the terminal to upgrade from Prisma 1 to Prisma 2. It requires no additional dependencies, but ensure you have a backup. The snippet generates necessary SQL statements and updates the schema.prisma file, addressing missing attributes such as `@default(cuid())` and `@updatedAt`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_32\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma-upgrade prisma1/prisma.yml prisma/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Clustered Primary Key in SQL Server with Prisma Schema\nDESCRIPTION: Example of how to configure a non-clustered primary key in SQL Server using the 'clustered: false' option with the @id attribute in a Prisma schema. By default, primary keys are clustered in SQL Server, but this can be changed using this configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  id    Int @id(clustered: false)\n  value Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Self-Relations in Prisma (SQL)\nDESCRIPTION: This Prisma model defines multiple self-relations on a User model using SQL. It illustrates many-to-many relations for 'following' and 'followedBy', alongside a 'TeacherStudents' relation. The model shows how fields and references facilitate these relational mappings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Prisma\nCODE:\n```\nmodel User {\n  id         Int     @id @default(autoincrement())\n  name       String?\n  teacherId  Int?\n  teacher    User?   @relation(\"TeacherStudents\", fields: [teacherId], references: [id])\n  students   User[]  @relation(\"TeacherStudents\")\n  followedBy User[]  @relation(\"UserFollows\")\n  following  User[]  @relation(\"UserFollows\")\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying migrations with Prisma Migrate CLI\nDESCRIPTION: This command applies pending migrations to a staging, testing, or production environment. It should be run as part of a CI/CD pipeline to ensure database schema is up-to-date with the application code. Requires Prisma CLI to be installed as a (dev)dependency.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/550-deploy-database-changes-with-prisma-migrate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npx prisma migrate deploy\"\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Nested Write in Prisma Client\nDESCRIPTION: This example shows how to create a new User record along with related Post and Profile records using a nested write query in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Enum with Default Value in Prisma Schema\nDESCRIPTION: Example showing how to define an enum with a default value in both relational databases and MongoDB contexts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_91\n\nLANGUAGE: prisma\nCODE:\n```\nenum Role {\n  USER\n  ADMIN\n}\n\nmodel User {\n  id   Int  @id @default(autoincrement())\n  role Role @default(USER)\n}\n```\n\n----------------------------------------\n\nTITLE: Relation Filtering in Prisma ORM\nDESCRIPTION: Demonstrates Prisma's ability to filter records based on related model attributes. This example shows fetching users who have posts containing 'Hello' in the title.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.user.findMany({\n  where: {\n    Post: {\n      some: {\n        title: {\n          contains: 'Hello',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Generates the Prisma Client by reading your Prisma schema. This step must be repeated whenever the schema is updated, along with prisma db push to create new indexes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/200-install-prisma-client-typescript-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Command in package.json - JavaScript\nDESCRIPTION: Configuration for the seed command in package.json when using JavaScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"prisma\": {\n  \"seed\": \"node prisma/seed.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values with Functions in Prisma Schema (Relational Databases)\nDESCRIPTION: This snippet demonstrates how to use the 'now()' function to set a default value for a DateTime field in a Prisma model for relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_24\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n}\n```\n\n----------------------------------------\n\nTITLE: Using in and notIn Operators with Arrays in Prisma ORM 5\nDESCRIPTION: Demonstrates the required use of array values for `in` and `notIn` operators in Prisma ORM 5. This change from singular values ensures consistent handling of these operators, though single element values can forego the operators entirely by direct comparison.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/101-jsonprotocol-changes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findMany({\n  where: {\n    id: { in: 123 },\n  },\n})\n\nprisma.user.findMany({\n  where: {\n    id: { notIn: 123 },\n  },\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findMany({\n  where: {\n    id: {\n      in: [123],\n    },\n  },\n})\n\nprisma.user.findMany({\n  where: {\n    id: {\n      notIn: [123],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching relations with Fluent API: Prisma ORM\nDESCRIPTION: Fetches a user's posts using the fluent API in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.user\n  .findUnique({\n    where: {\n      id: 2,\n    },\n  })\n  .post()\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema for Neon Connection Pooling\nDESCRIPTION: Modifies the Prisma schema to include both the pooled connection URL and the direct URL for database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/890-neon.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma Client with Optimize and Accelerate\nDESCRIPTION: This snippet shows how to extend the Prisma Client with both the Optimize and Accelerate extensions. It's crucial to apply Optimize before Accelerate to ensure proper functionality, due to the order in which extensions are applied.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/200-getting-started.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"const prisma = new PrismaClient().$extends(withOptimize()).$extends(withAccelerate())\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Switcher in Front Matter\nDESCRIPTION: This snippet shows how to define languages available for context switching in a page using the `langSwitcher` variable. By specifying an array of language options, you can configure a dropdown for changing the language context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/03-frontmatter.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlangSwitcher: ['typescript', 'node']\n```\n\n----------------------------------------\n\nTITLE: Creating a Post and Connecting to Existing User with Prisma Client in JavaScript\nDESCRIPTION: This code snippet shows how to create a new Post record and connect it to an existing User record using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await prisma.post.create({\n  data: {\n    title: 'Join us for Prisma Day 2020',\n    slug: 'prisma-day-2020',\n    body: 'A conference on modern application development and databases.',\n    user: {\n      connect: { email: 'hello@prisma.com' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Framework to load environment variables\nDESCRIPTION: Installs and configures the serverless-dotenv-plugin in a Serverless Framework project, enabling automatic loading of environment variables from a .env file during deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D serverless-dotenv-plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-based Logging for Relational Databases\nDESCRIPTION: Shows how to set up event-based logging for queries in Prisma Client with relational databases, including event listener setup and logging of query details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/130-logging.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'event',\n      level: 'query',\n    },\n    {\n      emit: 'stdout',\n      level: 'error',\n    },\n    {\n      emit: 'stdout',\n      level: 'info',\n    },\n    {\n      emit: 'stdout',\n      level: 'warn',\n    },\n  ],\n})\n\nprisma.$on('query', (e) => {\n  console.log('Query: ' + e.query)\n  console.log('Params: ' + e.params)\n  console.log('Duration: ' + e.duration + 'ms')\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering with JSON Fields in PostgreSQL using path Argument\nDESCRIPTION: In Prisma ORM 5, filtering on JSON fields in PostgreSQL now requires the `path` argument to be an array. This requirement standardizes the syntax used for referencing JSON properties in queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/101-jsonprotocol-changes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findMany({\n  where: {\n    settings: {\n      path: 'someSetting',\n      equals: someValue,\n    },\n  },\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findMany({\n  where: {\n    settings: {\n      path: ['someSetting'],\n      equals: someValue,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client and Accelerate Extension\nDESCRIPTION: Command to install the latest version of Prisma Client and the Accelerate extension package as dependencies.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client@latest @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Filtering for concrete values: Prisma ORM\nDESCRIPTION: Filters posts based on whether their titles contain 'Hello' using Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: {\n      contains: 'Hello',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection Environment Variable\nDESCRIPTION: This environment variable defines the connection string for the test database running in Docker. It includes the database credentials and port specified in the Docker Compose configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/150-integration-testing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"postgresql://prisma:prisma@localhost:5433/tests\"\n```\n\n----------------------------------------\n\nTITLE: Reading All User Records with Prisma Client in TypeScript\nDESCRIPTION: This example demonstrates how to retrieve all user records using the Prisma Client findMany() method without any filters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/030-crud.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany()\n```\n\n----------------------------------------\n\nTITLE: StartsWith String Filtering in Prisma ORM and TypeORM\nDESCRIPTION: Comparison of how to filter records that start with a specific string using Prisma ORM's startsWith operator versus TypeORM's ILike with SQL wildcard at the end.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: { startsWith: 'Hello World' },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await postRepository.find({\n  where: {\n    title: ILike('Hello World%'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Explicitly Connecting to Database with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to explicitly call $connect() to establish a connection to the data source. This is useful when you need the first request to respond instantly without waiting for a lazy connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/100-connection-management.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\n// run inside `async` function\nawait prisma.$connect()\n```\n\n----------------------------------------\n\nTITLE: Resolver implementation with prisma-binding\nDESCRIPTION: Implementation of the addPostToCategories mutation resolver using prisma-binding. It maps categoryIds to an array of objects with id properties and uses prisma.mutation.updatePost to connect the categories to the post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    addPostToCategories: (_, args, context, info) => {\n      const ids = args.categoryIds.map((id) => ({ id }))\n      return context.prisma.mutation.updatePost(\n        {\n          data: {\n            categories: {\n              connect: ids,\n            },\n          },\n          where: {\n            id: args.postId,\n          },\n        },\n        info\n      )\n    },\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL in .env file for Prisma Postgres\nDESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in the .env file. The URL is provided by the Prisma Data Platform Console and is used to connect to the Prisma Postgres database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-prismaPostgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=ey...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Prisma Schema\nDESCRIPTION: Sets up the database connection in the Prisma schema file using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma datasource for Postgres connection\nDESCRIPTION: This Prisma schema snippet demonstrates how to configure the datasource block to use the DATABASE_URL environment variable for connecting to the Postgres database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-prismaPostgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Define Dockerfile using node:slim (Dockerfile)\nDESCRIPTION: Dockerfile configuration using the Debian-based `node:slim` image. It installs `openssl`, sets the working directory, copies package files and application code, installs dependencies using `npm ci`, and defines the command to run migrations, generate Prisma Client, and start the server.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_18\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:slim\n\nRUN apt-get update -y \\\n&& apt-get install -y openssl\n\nWORKDIR /usr/src/app\n\nCOPY package.json package-lock.json ./\n\nCOPY . .\n\nRUN npm ci\n\nCMD [\"sh\", \"-c\", \"npm run db:deploy && npm run dev\"]\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migration Command\nDESCRIPTION: Terminal command to create and execute the initial database migration using Prisma Migrate. Creates SQL migration files and applies them to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for JSON Fields in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to set default values for JSON fields in a Prisma schema. It shows examples of setting default values for arrays and objects using escaped JSON strings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_29\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int  @id @default(autoincrement())\n  json1 Json @default(\"[]\")\n  json2 Json @default(\"{ \\\"hello\\\": \\\"world\\\" }\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar List Defaults in Prisma Schema for MongoDB\nDESCRIPTION: Example of setting default values for scalar lists in Prisma schema for MongoDB. This feature is new in Prisma ORM 4.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  posts          Post[]\n  favoriteColors String[] @default([\"red\", \"yellow\", \"purple\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectId as ID in Prisma Schema for MongoDB\nDESCRIPTION: Example of defining an ObjectId as the ID field in a Prisma schema for MongoDB. It shows the use of the @id, @default, @map, and @db.ObjectId attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_28\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Raw Queries\nDESCRIPTION: Demonstrates the use of tagged templates for incorporating variables safely in raw SQL queries with Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = 42;\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${userId};`;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Prisma User Model Schema\nDESCRIPTION: Basic Prisma schema definition for a User model with id, name, and email fields\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/400-api-reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Prisma in a SolidStart Project\nDESCRIPTION: This snippet installs necessary packages for Prisma and initializes it within a SolidStart project, setting up the required structure and environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma @prisma/client --save-dev\nnpm install tsx --save-dev\nnpm install @prisma/extension-accelerate\n\nnpx prisma init --db --output ../src/generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Serverless Query Engine Configuration\nDESCRIPTION: YAML configuration for serverless.yml to handle Prisma query engine selection for x86 architecture.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  webpack:\n    packagerOptions:\n      scripts:\n        - prisma generate\n        -- find . -name \"libquery_engine-*\" -not -name \"libquery_engine-rhel-openssl-*\" | xargs rm\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with Tags Field for Post Model\nDESCRIPTION: Modifies Post model to include a tags field and adds a description field, demonstrating schema prototyping\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id          Int        @id @default(autoincrement())\n  title       String\n  description String\n  published   Boolean    @default(true)\n  content     String     @db.VarChar(500)\n  authorId    Int\n  author      User       @relation(fields: [authorId], references: [id])\n  categories  Category[]\n  tags        String[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating object: TypeORM\nDESCRIPTION: Updates an existing user's name and email using TypeORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst updatedUser = await userRepository.update(id, {\n  name: 'James',\n  email: 'james@prisma.io',\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Direct and Pooled Database Connections\nDESCRIPTION: Example .env file configuration that provides both a pooled connection URL (DATABASE_URL) and a direct connection URL (DIRECT_URL) for migrations and introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: env\nCODE:\n```\n# Connection URL to your database using PgBouncer.\nDATABASE_URL=\"postgres://root:password@127.0.0.1:54321/postgres?pgbouncer=true\"\n\n# Direct connection URL to the database used for migrations\nDIRECT_URL=\"postgres://root:password@127.0.0.1:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Record with Prisma Client\nDESCRIPTION: Updates a Post record by changing its published status using Prisma Client's update method. This operation identifies the record by its ID and modifies the specified field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Tags using Explicit Relations\nDESCRIPTION: TypeScript code for creating a post with tags using an explicit relation table, requiring nested creation operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.post.create({\n  data: {\n    title: 'Types of relations',\n    tags: {\n      create: [\n        { tag: { create: { name: 'dev' } } },\n        { tag: { create: { name: 'prisma' } } },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: MongoDB User Model with Optional Phone Number\nDESCRIPTION: Shows how to add an optional field to a MongoDB model using Prisma schema, demonstrating the 'on-demand' updates migration strategy.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email       String\n  phoneNumber String?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema with D1\nDESCRIPTION: This snippet shows how to configure the Prisma schema to use the D1 database with the necessary generator and datasource settings, including a User model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma ORM 2 CLI using npm - JavaScript\nDESCRIPTION: This snippet demonstrates how to install the Prisma ORM 2 CLI as a development dependency using npm. This new CLI will replace the original Prisma 1 CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing PUT Route for Publishing Posts with Express and Prisma\nDESCRIPTION: This Express route handler updates a post to mark it as published using Prisma Client. It shows how to use the update method with a where condition based on the post ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/01-rest.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.put('/publish/:id', async (req, res) => {\n  const { id } = req.params\n  const post = await prisma.post.update({\n    where: { id: Number(id) },\n    data: { published: true },\n  })\n  res.json(post)\n})\n```\n\n----------------------------------------\n\nTITLE: Removing fullTextIndex from Preview Features in Prisma Schema\nDESCRIPTION: This snippet shows how to update your Prisma schema by removing the fullTextIndex feature from previewFeatures since it has been promoted to General Availability.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  // delete-next-line\n  previewFeatures = [\"fullTextIndex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Define Dockerfile using node:alpine (Dockerfile)\nDESCRIPTION: Dockerfile configuration using the lightweight `node:lts-alpine3.17` base image. It sets the working directory, copies package files, installs dependencies using `npm ci`, copies the application code, and defines the command to run migrations, generate Prisma Client, and start the server.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts-alpine3.17\n\nWORKDIR /usr/src/app\n\nCOPY package.json package-lock.json ./\n\nRUN npm ci\n\nCOPY . .\n\nCMD [\"sh\", \"-c\", \"npm run db:deploy && npm run dev\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Bytes Fields in Prisma Client\nDESCRIPTION: Demonstrates handling Bytes fields using Uint8Array, with backwards compatibility for Buffer type before Prisma v6\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst newTypes = await prisma.sample.create({\n  data: {\n    myField: new Uint8Array([1, 2, 3, 4]),\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst newTypes = await prisma.sample.create({\n  data: {\n    myField: Buffer.from([1, 2, 3, 4]),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Evaluating Prisma Accelerate Connection Pooling Performance\nDESCRIPTION: This TypeScript code demonstrates how to evaluate Prisma Accelerate's connection pooling performance. It includes functions for calculating statistics and performs a loop of database queries to measure response times.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/550-evaluating.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nfunction calculateStatistics(numbers: number[]): {\n  average: number\n  p50: number\n  p75: number\n  p99: number\n} {\n  if (numbers.length === 0) {\n    throw new Error('The input array is empty.')\n  }\n\n  // Sort the array in ascending order\n  numbers.sort((a, b) => a - b)\n\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const count = numbers.length\n\n  const average = sum / count\n  const p50 = getPercentile(numbers, 50)\n  const p75 = getPercentile(numbers, 75)\n  const p99 = getPercentile(numbers, 99)\n\n  return { average, p50, p75, p99 }\n}\n\nfunction getPercentile(numbers: number[], percentile: number): number {\n  if (percentile <= 0 || percentile >= 100) {\n    throw new Error('Percentile must be between 0 and 100.')\n  }\n\n  const index = (percentile / 100) * (numbers.length - 1)\n  if (Number.isInteger(index)) {\n    // If the index is an integer, return the corresponding value\n    return numbers[index]\n  } else {\n    // If the index is not an integer, interpolate between two adjacent values\n    const lowerIndex = Math.floor(index)\n    const upperIndex = Math.ceil(index)\n    const lowerValue = numbers[lowerIndex]\n    const upperValue = numbers[upperIndex]\n    const interpolationFactor = index - lowerIndex\n    return lowerValue + (upperValue - lowerValue) * interpolationFactor\n  }\n}\n\nasync function main() {\n  const timings = []\n\n  // fire a query before going to the loop\n  await prisma.notes.findMany({\n    take: 20,\n  })\n\n  // we recommend evaluationg Prisma Accelerate with a large loop\n  const LOOP_LENGTH = 10000\n\n  for (let i = 0; i < LOOP_LENGTH; i++) {\n    const start = Date.now()\n    await prisma.notes.findMany({\n      take: 20,\n    })\n\n    timings.push(Date.now() - start)\n  }\n\n  const statistics = calculateStatistics(timings)\n  console.log('Average:', statistics.average)\n  console.log('P50:', statistics.p50)\n  console.log('P75:', statistics.p75)\n  console.log('P99:', statistics.p99)\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch((e) => {\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Connection URL for Local Development\nDESCRIPTION: Provides an example connection URL for a locally hosted PostgreSQL database on macOS where username, password, and database name match the OS user.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Solving n+1 with the 'in' Filter in Prisma\nDESCRIPTION: This code shows how to use Prisma's 'in' filter to fetch all posts for multiple users in a single query. It first retrieves all users, extracts their IDs, and then uses those IDs to fetch all relevant posts in one go.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({})\n\nconst userIds = users.map((x) => x.id)\n\nconst posts = await prisma.post.findMany({\n  where: {\n    authorId: {\n      in: userIds,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Datasource Configuration\nDESCRIPTION: Prisma schema configuration block for connecting to a CockroachDB database\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/840-cockroachdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"cockroachdb\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Category with Multiple Posts in Prisma (TypeScript)\nDESCRIPTION: Creates a single Category record with multiple Post records using Prisma's create method with nested creation. This shows the inverse operation of creating related records from the other side of the relationship.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst createCategoryAndPosts = await prisma.category.create({\n  data: {\n    name: 'Stories',\n    posts: {\n      create: [\n        { title: 'That one time with the stuff' },\n        { title: 'The story of planet Earth' },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with All Relation Types for MongoDB\nDESCRIPTION: This Prisma schema demonstrates one-to-one, one-to-many, and many-to-many relations using User, Profile, Post, and Category models for MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Profile {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id])\n  userId String @unique @db.ObjectId // relation scalar field (used in the `@relation` attribute above)\n}\n\nmodel Post {\n  id          String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  author      User       @relation(fields: [authorId], references: [id])\n  authorId    String     @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)\n  categories  Category[] @relation(fields: [categoryIds], references: [id])\n  categoryIds String[]   @db.ObjectId\n}\n\nmodel Category {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  posts   Post[]   @relation(fields: [postIds], references: [id])\n  postIds String[] @db.ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma and TypeScript Runner Dependencies\nDESCRIPTION: Terminal command to install Prisma CLI and tsx as development dependencies. tsx is a TypeScript execution environment that will be used to run the sample application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install -D prisma tsx\n```\n\n----------------------------------------\n\nTITLE: Selecting Previously Omitted Fields with Omit False (TypeScript)\nDESCRIPTION: This example demonstrates how to override a globally omitted field by setting its 'omit' value to false in a query. The 'password' field, which was previously omitted, is now included in the query results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/063-excluding-fields.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  omit: {\n    password: false // The password field is now selected.\n  },\n  where: {\n    id: 1\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma ORM Database Introspection\nDESCRIPTION: This terminal command executes Prisma ORM's introspection against your database, analyzing the database structure to generate a Prisma schema file. The command scans all tables and relationships to create corresponding models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Validating Prisma Schema\nDESCRIPTION: This command validates the current Prisma schema to ensure that it is free of syntax errors and adheres to the specified schema language standards.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nprisma validate\n```\n\n----------------------------------------\n\nTITLE: Model Name Mapping with @@map\nDESCRIPTION: Examples of mapping Prisma model names to different database table/collection names using @@map attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_61\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int    @id @default(autoincrement())\n  name String\n\n  @@map(\"users\")\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name String\n\n  @@map(\"users\")\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Queries in Prisma Transaction for Relational Databases\nDESCRIPTION: This example shows how to use raw SQL queries within a Prisma $transaction for relational databases, including selecting user titles and updating a user name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { selectUserTitles, updateUserName } from '@prisma/client/sql'\n\nconst [userList, updateUser] = await prisma.$transaction([\n  prisma.$queryRawTyped(selectUserTitles()),\n  prisma.$queryRawTyped(updateUserName(2)),\n])\n```\n\n----------------------------------------\n\nTITLE: Adding a Partial Index to Migration - SQL\nDESCRIPTION: This SQL snippet creates a unique index on the 'posts' table, applying a condition to only enforce uniqueness when 'success' is true. This is an example of an unsupported feature that can be added to a Prisma migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/80-unsupported-database-features.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX tests_success_constraint\n  ON posts (subject, target)\n  WHERE success;\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Postinstall Script for Prisma Generate in package.json\nDESCRIPTION: This JSON snippet illustrates how to add a `postinstall` script in the `package.json` to ensure that Prisma Client is generated during the installation of dependencies. This is important for maintaining synchronization between the Prisma Client and the database schema when deployed on Netlify.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/700-netlify-caching-issue.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    //add-next-line\n    \"postinstall\": \"prisma generate\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Code-first Schema Definition for createDraft with Nexus\nDESCRIPTION: TypeScript implementation of the createDraft mutation using Nexus' code-first approach. This defines the mutation type, arguments, and return type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    // ... previous mutations\n\n    //add-start\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({ nullable: false }),\n        content: stringArg(),\n        authorId: stringArg({ nullable: false }),\n      },\n    })\n    //add-end\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts with the Prisma Client API\nDESCRIPTION: This code snippet demonstrates how to filter Post records that contain a specific string using the Prisma Client API. It searches for the word 'hello' in either the title or body fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filteredPosts = await prisma.post.findMany({\n  where: {\n    OR: [{ title: { contains: 'hello' } }, { body: { contains: 'hello' } }],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Filter for Posts - Prisma ORM - TypeScript\nDESCRIPTION: This snippet shows how to perform a case-insensitive filter on the post titles with Prisma ORM. It utilizes the 'findMany' method and specifies the 'mode' parameter as 'insensitive' within the 'where' clause for title matching.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// case insensitive filter\nconst posts = await prisma.post.findMany({\n  where: {\n    title: 'Hello World',\n    mode: 'insensitive',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Post Model Definition\nDESCRIPTION: Defines a Post model for Prisma with fields for id, title, content, published status, and a relation to the User model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int?\n  author    User?   @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client\nDESCRIPTION: Shows how to create a new user record with nested related records for posts and profile using Prisma Client's create operation with nested writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite ID in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define a composite ID using the `@@id` attribute in a Prisma schema model. It shows a `Like` model where the combination of `postId` and `userId` fields forms the primary key.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  name  String\n  post  Post[]\n  likes Like[]\n}\n\nmodel Post {\n  id      Int    @id @default(autoincrement())\n  content String\n  User    User?  @relation(fields: [userId], references: [id])\n  userId  Int?\n  likes   Like[]\n}\n\nmodel Like {\n  postId Int\n  userId Int\n  User   User @relation(fields: [userId], references: [id])\n  Post   Post @relation(fields: [postId], references: [id])\n\n  //highlight-next-line\n  @@id([postId, userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Title Filter in Prisma\nDESCRIPTION: Retrieve posts from a database using Prisma ORM with an exact title match. Demonstrates basic query filtering in Prisma's repository pattern.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await postRepository.find({\n  where: {\n    title: 'Hello World',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Services (YAML)\nDESCRIPTION: Defines the Docker Compose configuration (version 3.7) with two services: `postgres_db` using the official `postgres:15` image and `server` built from the local Dockerfile. It sets up environment variables for the database, port mapping, a shared network (`prisma-network`), a health check for the database, and makes the server depend on the database being healthy. It also configures the server to keep running for debugging purposes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\n\nservices:\n  postgres_db:\n    image: postgres:15\n    hostname: postgres_db\n    container_name: postgres_db\n    restart: always\n    environment:\n      POSTGRES_DB: postgres\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: prisma\n    ports:\n      - '5432:5432'\n    networks:\n      - prisma-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d postgres\"]\n      interval: 5s\n      timeout: 2s\n      retries: 20\n\n  server:\n    build: \n      context: .  \n      dockerfile: Dockerfile\n    ports:\n      - '3000:3000'\n    stdin_open: true\n    tty: true  # Keeps the container running for debugging\n    depends_on:\n      postgres_db:\n        condition: service_healthy\n    env_file:\n      - .env.prod\n    networks:\n      - prisma-network\nnetworks:\n  prisma-network:\n    name: prisma-network\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI in TypeScript Project\nDESCRIPTION: Adds the Prisma CLI as a development dependency to the project using npm. This is the first step in setting up Prisma ORM in an existing project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client for other databases\nDESCRIPTION: Alternative TypeScript code to create and export a basic Prisma Client instance for databases other than Prisma Postgres, without the Accelerate extension.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"../generated/prisma\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: CreatedAt with Default Now Introspection\nDESCRIPTION: This Prisma schema shows the result of re-introspecting the database after the `DEFAULT` constraint has been added via SQL.  The schema now includes the `@default(now())` attribute on the `createdAt` field, signifying that the introspection process successfully recognized the database-level default.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_14\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma showLineNumbers\nmodel Post {\n  id        String\n  createdAt DateTime @default(now())\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Prisma Generated User Type\nDESCRIPTION: Shows the TypeScript type that Prisma automatically generates for the User model, providing strong typing for all database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Generated by Prisma ORM\nexport type User = {\n  id: number\n  name: string | null\n  email: string\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Users by Post Count in Prisma Client\nDESCRIPTION: This query sorts users by the number of related posts, demonstrating sorting by relation aggregate value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst getActiveUsers = await prisma.user.findMany({\n  take: 10,\n  orderBy: {\n    posts: {\n      _count: 'desc',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching relations using eager relations: TypeORM\nDESCRIPTION: Fetches a user with associated posts using eager relations in TypeORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst user = await userRepository.findOne(id)\n```\n\n----------------------------------------\n\nTITLE: Generating Nano ID values (21 characters) as IDs in Relational databases\nDESCRIPTION: Configures a User model with an ID field that automatically generates Nano ID values with the default length of 21 characters. Nano ID is comparable to UUID v4 but uses a bigger alphabet.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_82\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(nanoid())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statement\nDESCRIPTION: Import statement for React components used in the getting started guide documentation page\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  Bolt,\n  BorderBox,\n  BoxTitle,\n  Inspect,\n  Database,\n  Grid,\n  LinkCard,\n  List,\n  SignalStream,\n  PrismaPostgres,\n  SquareLogo,\n} from '@site/src/components/GettingStarted';\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts with Prisma Client in JavaScript\nDESCRIPTION: Demonstrates how to use Prisma Client to filter Post records that contain a specific string in either the title or content fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filteredPosts = await prisma.post.findMany({\n  where: {\n    OR: [\n      { title: { contains: \"hello\" },\n      { content: { contains: \"hello\" },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: CreatedAt Introspection\nDESCRIPTION: This Prisma schema demonstrates the result of introspecting a database originally created using Prisma 1. The `createdAt` field is correctly identified as a `DateTime` field, but the `@createdAt` directive and its implicit auto-generation behavior aren't recognized because Prisma 1 handles this at runtime, not via a database-level default.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma showLineNumbers\nmodel Post {\n  id        String   @id\n  createdAt DateTime\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Batch updates: Prisma ORM\nDESCRIPTION: Updates multiple users who have published posts using Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.updateMany({\n  data: {\n    name: 'Published author!',\n  },\n  where: {\n    Post: {\n      some: {\n        published: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching single object: TypeORM\nDESCRIPTION: Fetches a single user object from the database using TypeORM, filtered by ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst user = await userRepository.findOne(id)\n```\n\n----------------------------------------\n\nTITLE: Rendering fetched posts in React component\nDESCRIPTION: Display the fetched posts in a list format within the React component, mapping over the posts array and rendering each post's title and content.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/160-tanstack-start.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Home() {\n  const posts = Route.useLoaderData();\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            <h3>{post.title}</h3>\n            <p>{post.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Cached Query\nDESCRIPTION: Shows how to programmatically invalidate a cached query using the $accelerate.invalidate API with a specific cache tag. Includes error handling for rate limiting scenarios.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/300-caching.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await prisma.$accelerate.invalidate({\n    tags: [\"emails_with_alice\"],\n  });\n} catch (e) {\n  if (e instanceof Prisma.PrismaClientKnownRequestError) {\n    if (e.code === \"P6003\") {\n      console.log(\n        \"The cache invalidation rate limit has been reached. Please try again later.\"\n      );\n    }\n  }\n  throw e;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TCP Tunnel for Prisma Postgres Connection\nDESCRIPTION: Command to start a TCP tunnel using @prisma/ppg-tunnel package with specified host and port.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/115-import-from-existing-database-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @prisma/ppg-tunnel --host 127.0.0.1 --port 5433\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection Environment Variable\nDESCRIPTION: Example of setting the MongoDB connection URL in a .env file, showing the format for MongoDB Atlas connections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/100-connect-your-database-typescript-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mongodb+srv://test:test@cluster0.ns1yp.mongodb.net/myFirstDatabase\"\n```\n\n----------------------------------------\n\nTITLE: Datamodel for Inline 1-1 Relations in Prisma 1.31\nDESCRIPTION: Demonstrates inline 1-1 relationship declaration in Prisma ORM v1.31 with an excerpt showing the absence of `UNIQUE` constraints leading to misinterpretation in version 2.x introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  profile: Profile @relation(link: INLINE)\n}\n\ntype Profile {\n  id: ID! @id\n  user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Code with Result Block\nDESCRIPTION: Shows how to create a code block with an associated result output, useful for displaying command executions and their outcomes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeWithResult expanded={true}>\n\n<cmd>\n\n```\nyarn prisma init\n```\n\n</cmd>\n\n<cmdResult>\n\n```code no-copy wrap\n$ yarn prisma init\nyarn run v1.22.0\nwarning package.json: No license field\n$ /Users/janedoe/Desktop/tsdf/node_modules/.bin/prisma init\n\n✔ Your Prisma schema was created at prisma/schema.prisma.\n  You can now open it in your favorite editor.\n\nNext steps:\n1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started.\n2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql or sqlite.\n3. Run `prisma db pull` to introspect your database schema and update the Prisma schema data models accordingly.\n4. Run `prisma generate` to install Prisma Client. You can then start querying your database.\n\nMore information in our documentation:\nhttps://pris.ly/d/getting-started\n```\n\n</cmdResult>\n\n</CodeWithResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source and Models in Prisma Schema\nDESCRIPTION: This Prisma schema snippet demonstrates the structure for defining a data source, generator, and models for a blog application with PostgreSQL. It involves setting up the database connection, instructing Prisma to generate a type-safe client, and mapping models to database tables with defined relations and attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String? @map(\"post_content\")\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - User Model\nDESCRIPTION: Prisma schema definition for User model with basic fields\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data using createResource in SolidJS\nDESCRIPTION: This snippet demonstrates using SolidJS's createResource to fetch user data from an API, manage async states, and store results for rendering.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./app.css\";\nimport { createResource } from \"solid-js\";\nimport { User, Post } from \"@prisma/client\";\n\ntype UserWithPosts = User & {\n  posts: Post[];\n};\n\nconst fetchUsers = async () => {\n  const res = await fetch(\"http://localhost:3000/api/users\");\n  return res.json();\n};\n\nexport default function App() {\n  const [users, { mutate, refetch }] =\n    createResource<UserWithPosts[]>(fetchUsers);\n\n  return (\n    <main>\n      <h1>SolidStart + Prisma</h1>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Tests with Singleton Pattern\nDESCRIPTION: Test suite for user management functions using singleton pattern. Tests cover user creation, updates, and validation scenarios.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUser, updateUsername } from '../functions-without-context'\nimport { prismaMock } from '../singleton'\n\ntest('should create new user ', async () => {\n  const user = {\n    id: 1,\n    name: 'Rich',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  }\n\n  prismaMock.user.create.mockResolvedValue(user)\n\n  await expect(createUser(user)).resolves.toEqual({\n    id: 1,\n    name: 'Rich',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  })\n})\n\ntest('should update a users name ', async () => {\n  const user = {\n    id: 1,\n    name: 'Rich Haines',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  }\n\n  prismaMock.user.update.mockResolvedValue(user)\n\n  await expect(updateUsername(user)).resolves.toEqual({\n    id: 1,\n    name: 'Rich Haines',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  })\n})\n\ntest('should fail if user does not accept terms', async () => {\n  const user = {\n    id: 1,\n    name: 'Rich Haines',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: false,\n  }\n\n  prismaMock.user.create.mockImplementation()\n\n  await expect(createUser(user)).resolves.toEqual(\n    new Error('User must accept terms!')\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma ORM\nDESCRIPTION: This snippet shows how to initialize Prisma ORM in a project. It installs the Prisma ORM CLI and then executes the `prisma init` command to set up the project with the necessary configurations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/01-how-to-upgrade.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npx prisma init\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Prisma Client APIs\nDESCRIPTION: This section describes the differences in syntax for reading single and multiple records, as well as filtering, between Prisma Client v1 and v2. It requires no external dependencies but an understanding of JavaScript/TypeScript and Prisma. It exemplifies how queries were and are structured in different versions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user({ id: 1 })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findUnique({\n  where: { id: 1 },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.users()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.users({\n  where: {\n    name: 'Alice',\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany({\n  where: {\n    name: 'Alice',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Optimizing Middleware Performance with Conditional Execution\nDESCRIPTION: Example showing how to optimize middleware performance by conditionally executing logic based on model and action. This prevents unnecessary code execution for irrelevant queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprisma.$use(async (params, next) => {\n  if (params.model == 'Post' && params.action == 'delete') {\n    // Logic only runs for delete action and Post model\n  }\n  return next(params)\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Prisma Client and Types in TypeScript\nDESCRIPTION: Exports the Prisma client instance and generated types from the database module, allowing reuse across the monorepo.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"../generated/prisma\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport { prisma } from './client' // exports instance of prisma \nexport * from \"../generated/prisma\" // exports generated types from prisma\n```\n\n----------------------------------------\n\nTITLE: Creating object: Prisma ORM\nDESCRIPTION: Creates a new user with the given email using Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    email: 'alice@prisma.io',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Build Script in package.json to Include Prisma Generate\nDESCRIPTION: This snippet demonstrates how to modify the build script in package.json to run prisma generate before the actual build command. This ensures Prisma Client is generated before each build.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/600-vercel-caching-issue.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\" {\n    \"build\": \"prisma generate && <actual-build-command>\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: $executeRawUnsafe Method in TypeScript\nDESCRIPTION: The `$executeRawUnsafe()` method, similar to `$executeRaw`, allows for raw SQL execution, but caution is advised when user inputs are involved due to injection risks. This example updates the active status for users based on email validation results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailValidated = true;\nconst active = true;\n\nconst result = await prisma.$executeRawUnsafe(\n  `UPDATE User SET active = ${active} WHERE emailValidated = ${emailValidated}`\n);\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try-Catch in Prisma Transactions\nDESCRIPTION: A code example showing how to handle transaction rollbacks using a try-catch block. This pattern allows developers to gracefully handle failures in transactions and perform custom error handling logic.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await prisma.$transaction(async (tx) => {\n    // Code running in a transaction...\n  })\n} catch (err) {\n  // Handle the rollback...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Prisma Client (Post-upgrade)\nDESCRIPTION: TypeScript example showing how to catch and handle the P2003 error code in Prisma Client after upgrading to version 3.0.1 or above.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/150-referential-actions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  try {\n    await prisma.user.delete({\n      where: {\n        id: 'some-long-id'\n      }\n    })\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\n      if (error.code === 'P2003') {\n        console.log(error.message)\n      }\n    }\n  }\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection URL Format\nDESCRIPTION: This code block demonstrates the standard format for MongoDB connection URLs, showing the structure with placeholders for connection details like username, password, host, port, and database name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/100-connect-your-database-node-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb://USERNAME:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Filtering for Null or Missing Name Fields in MongoDB\nDESCRIPTION: This TypeScript snippet demonstrates how to filter for user records with either a null name field or a missing name field in MongoDB using Prisma Client. It uses the isSet filter to include both null and missing fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst findNullOrMissing = await prisma.user.findMany({\n  where: {\n    OR: [\n      {\n        name: null,\n      },\n      {\n        name: {\n          isSet: false,\n        },\n      },\n    ],\n  },\n})\nconsole.log(findNullOrMissing)\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized One-to-Many Relation\nDESCRIPTION: The Prisma schema after introspection following the migration from a link table to a foreign key approach for one-to-many relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_25\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id\n  //highlight-next-line\n  Post Post[]\n}\n\nmodel Post {\n  id       String @id\n  //highlight-start\n  User     User   @relation(fields: [authorId], references: [id])\n  authorId String\n  //highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Server Connection URL in Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the DATABASE_URL environment variable with a SQL Server connection string. It includes server address, database name, credentials, and SSL settings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"sqlserver://localhost:1433;database=mydb;user=sa;password=r@ndomP@$$w0rd;trustServerCertificate=true\"\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Migration Directory\nDESCRIPTION: Command to create the directory structure for the initial migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Idempotent Stripe Customer Creation Flow\nDESCRIPTION: Improved implementation that adds idempotency by checking for existing customers before creation and handling both create and update scenarios safely.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst numTeammates = await prisma.user.count({\n  where: {\n    teams: {\n      some: {\n        id: teamId,\n      },\n    },\n  },\n})\n\n// Find customer in Stripe\nlet customer = await stripe.customers.get({ externalId: teamID })\n\nif (customer) {\n  // If team already exists, update\n  customer = await stripe.customers.update({\n    externalId: teamId,\n    plan: 'plan_id',\n    quantity: numTeammates,\n  })\n} else {\n  customer = await stripe.customers.create({\n    // If team does not exist, create customer\n    externalId: teamId,\n    plan: 'plan_id',\n    quantity: numTeammates,\n  })\n}\n\n// Update the team with the customer id to indicate that they are a customer\n// and support querying this customer in Stripe from our application code.\nawait prisma.team.update({\n  data: {\n    customerId: customer.id,\n  },\n  where: {\n    id: teamId,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Backward Cursor-based Pagination with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement backward cursor-based pagination. It returns 4 Post records with an id less than 200, excluding the cursor.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/055-pagination.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst myOldCursor = 200\n\nconst firstQueryResults = await prisma.post.findMany({\n  take: -4,\n  skip: 1,\n  cursor: {\n    id: myOldCursor,\n  },\n  where: {\n    title: {\n      contains: 'Prisma' /* Optional filter */,\n    },\n  },\n  orderBy: {\n    id: 'asc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection in Prisma Schema\nDESCRIPTION: Example of setting up a connection to a SQLite database in the Prisma schema file. It uses a file path as the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Filter Operators in Prisma Client\nDESCRIPTION: This query demonstrates how to use OR and NOT operators to filter users based on complex email conditions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.findMany({\n  where: {\n    OR: [\n      {\n        email: {\n          endsWith: 'gmail.com',\n        },\n      },\n      { email: { endsWith: 'company.com' } },\n    ],\n    NOT: {\n      email: {\n        endsWith: 'admin.company.com',\n      },\n    },\n  },\n  select: {\n    email: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding New Field to User Model\nDESCRIPTION: In this Prisma snippet, a new optional field `favoriteColor` is added to the `User` model by Developer A. This requires generating and applying a new migration using `npx prisma migrate dev --name new-field`. Ensure Prisma CLI is installed and migrations are committed to source control.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/020-implementing-schema-changes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  /* ... */\n  favoriteColor String?\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Failed Migration as Rolled Back in Prisma\nDESCRIPTION: This command marks a specific failed migration as rolled back in the migrations table of the production database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --rolled-back Unique\n```\n\n----------------------------------------\n\nTITLE: Deleting a User with Prisma Client in JavaScript\nDESCRIPTION: Shows how to delete a User record using Prisma Client based on the user's email.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst deletedUser = await prisma.user.delete({\n  where: { email: 'sarah@prisma.io' },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SetDefault Referential Actions in Prisma Schema\nDESCRIPTION: This snippet demonstrates SetDefault referential action. When a User is deleted or their username is changed, the authorUsername in related Posts is set to a default value ('anonymous' in this case).\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id             Int     @id @default(autoincrement())\n  title          String\n  authorUsername String? @default(\"anonymous\")\n  author         User?   @relation(fields: [authorUsername], references: [username], onDelete: SetDefault, onUpdate: SetDefault)\n}\n\nmodel User {\n  username String @id\n  posts    Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema After PostgreSQL Migration\nDESCRIPTION: Updated Prisma schema reflecting the native boolean array in the User model after PostgreSQL migration\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_48\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String    @id\n  coinflips Boolean[]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Prisma CLI Help\nDESCRIPTION: Shows the usage and help documentation for the Prisma CLI by running the command without arguments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nprisma\n```\n\n----------------------------------------\n\nTITLE: Prisma View Definition for Relational Databases\nDESCRIPTION: Schema definition for UserInfo view in Prisma for relational databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nview UserInfo {\n  id    Int    @unique\n  email String\n  name  String\n  bio   String\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection URL Format\nDESCRIPTION: Template showing the standard format for MongoDB connection URLs with placeholders for connection details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/100-connect-your-database-typescript-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb://USERNAME:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio\nDESCRIPTION: This snippet demonstrates how to run Prisma Studio, a GUI for viewing and modifying database data, using different package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_17\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma studio\n```\n\nLANGUAGE: terminal\nCODE:\n```\nyarn prisma studio\n```\n\nLANGUAGE: terminal\nCODE:\n```\npnpm prisma studio\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Fields in Prisma Client\nDESCRIPTION: Illustrates creating DateTime fields using JavaScript Date objects with various precision levels, following ISO 8601 standard\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    birthDate: new Date('1998')\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    birthDate: new Date('1998-12-24T06:22:33.444Z')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Migration with Prisma CLI\nDESCRIPTION: Experimental CLI command to save a new database migration with optional name and flags\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate save --experimental\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate save --name \"First migration\" --experimental\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for SaaS Application\nDESCRIPTION: Demonstrates generating a complex Prisma schema with multiple related models including User, Organization, and Subscription with proper relationships and constraints\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id             Int          @id @default(autoincrement())\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  email          String       @unique\n  name           String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n  organizationId Int\n}\n\nmodel Organization {\n  id           Int           @id @default(autoincrement())\n  name         String\n  slug         String        @unique\n  subscription Subscription?\n  users        User[]\n}\n\nmodel Subscription {\n  id             Int          @id @default(autoincrement())\n  organization   Organization @relation(fields: [organizationId], references: [id])\n  organizationId Int          @unique\n  plan           String\n  status         Status\n}\n\nenum Status {\n  Active\n  Paused\n  Expired\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate for TypeScript and SQL Server\nDESCRIPTION: This command creates a new SQL migration file and runs it against the database. It maps the Prisma data model to the actual database schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client using CLI\nDESCRIPTION: Command to generate Prisma Client artifacts for use in the development environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/580-local-development.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Directory in Bash\nDESCRIPTION: Creates a new directory structure for the initial migration using the mkdir command with the -p flag for recursive creation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Usage in Vercel Edge Function\nDESCRIPTION: This TypeScript code demonstrates how to instantiate `PrismaClient` with the `@prisma/adapter-neon` adapter and send a query to a Vercel Postgres database within a Vercel Edge Function. It imports necessary modules, sets the `runtime` to `'edge'`, and uses the adapter to establish a database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaNeon } from '@prisma/adapter-neon'\n\nexport const runtime = 'edge'\n\nexport async function GET(request: Request) {\n  const adapter = new PrismaNeon({ connectionString: process.env.POSTGRES_PRISMA_URL })\n  const prisma = new PrismaClient({ adapter })\n\n  const users = await prisma.user.findMany()\n\n  return NextResponse.json(users, { status: 200 })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Prisma Client\nDESCRIPTION: Updates a user record by ID using Prisma Client. The example shows both v1 and ORM 2 methods, where ORM 2 standardizes the use of the `update` method. The method inputs include `where` and update `data`, outputting the updated record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.updateUser({\n  where: { id: 1 },\n  data: {\n    name: 'James',\n    email: 'james@prisma.io',\n  },\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.update({\n  where: { id: 1 },\n  data: {\n    name: 'James',\n    email: 'james@prisma.io',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Node Compatibility\nDESCRIPTION: Setting node_compat flag in wrangler.toml for PostgreSQL support.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\nnode_compat = true\n```\n\n----------------------------------------\n\nTITLE: Running Caching Script\nDESCRIPTION: This command executes a script that demonstrates caching with Prisma Accelerate using Stale-While-Revalidate and Time-To-Live strategies.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run caching\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel with Link Table Relation\nDESCRIPTION: Example Prisma 1 datamodel (v1.1) showing a 1-n relation between User and Post using the link: TABLE directive, which creates a relation table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @id\n  author: User! @relation(link: TABLE)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Categories to Post with Prisma Client\nDESCRIPTION: This code snippet demonstrates how to add categories to a post using Prisma Client's `post.update` method. It defines a GraphQL mutation field called `addPostToCategories` that takes a `postId` and an array of `categoryIds` as arguments. The `resolve` function connects the post to the specified categories using the `post.update` and the `connect` parameters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nmutationType({\n  definition(t) {\n    t.field('addPostToCategories', {\n      type: 'Post',\n      args: {\n        postId: stringArg({ nullable: false }),\n        categoryIds: stringArg({\n          list: true,\n          nullable: false,\n        }),\n      },\n      resolve: (_, args, context) => {\n        const ids = args.categoryIds.map((id) => ({ id }))\n        //highlight-start\n        return context.prisma.post.update({\n          where: {\n            id: args.postId,\n          },\n          data: {\n            categories: { connect: ids },\n          },\n        })\n        //highlight-end\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema Models\nDESCRIPTION: Initial Prisma schema generated from database introspection with default naming.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(0)\n  content   String?  @db.Text\n  published Boolean  @default(false)\n  authorId  Int\n  User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Post_ibfk_1\")\n\n  @@index([authorId], map: \"authorId\")\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String? @db.Text\n  userId Int     @unique(map: \"userId\")\n  User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Profile_ibfk_1\")\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique(map: \"email\") @db.VarChar(255)\n  Post    Post[]\n  Profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Post Entity Model with Views\nDESCRIPTION: Defines a Post entity model for TypeORM that includes a views property, used to demonstrate filtering with numeric operators.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  title: string\n\n  @Column({ nullable: true })\n  content: string\n\n  @Column({ nullable: true })\n  views: number\n\n  @Column({ default: false })\n  published: boolean\n\n  @ManyToOne((type) => User, (user) => user.posts)\n  author: User\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI as Development Dependency\nDESCRIPTION: This command installs the Prisma CLI as a development dependency in the project. It's the first step in setting up Prisma ORM in an existing Node.js project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Nexus and prisma-plugin-prisma dependencies in terminal\nDESCRIPTION: Commands to install the @nexus/schema package and the nexus-plugin-prisma package via npm, and to uninstall previously used Prisma ORM 2.0 dependencies. This prepares the project to use Nexus with Prisma integration for GraphQL schema building. It includes usage of 'npx prisma' CLI for ORM commands.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @nexus/schema\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install nexus-plugin-prisma\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpm uninstall @prisma/cli @prisma/client\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Set Up Migration Script in Package.json - JSON\nDESCRIPTION: Adds a script entry to the package.json file to facilitate execution of the data migration script.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"data-migration:add-status-column\": \"tsx ./prisma/migrations/<migration-timestamp>/data-migration.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions workflow for Prisma Migrate deployment\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow that automatically deploys Prisma Migrate changes when files in the `prisma/migrations` directory are modified. It checks out the repository, sets up Node.js, installs dependencies, and then runs `npx prisma migrate deploy` using the `DATABASE_URL` secret.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/550-deploy-database-changes-with-prisma-migrate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"name: Deploy\non:\n  push:\n    paths:\n      //highlight-next-line\n      - prisma/migrations/**\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3\n      - name: Install dependencies\n        run: npm install\n      - name: Apply all pending migrations to the database\n        run: npx prisma migrate deploy\n        env:\n          DATABASE_URL: ${{ secrets.DATABASE_URL }}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Default Fields with Prisma Client\nDESCRIPTION: This example shows a basic query that returns all scalar fields of the User model but not relation fields. The result includes id, name, email, and role but not the posts relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findFirst()\n```\n\n----------------------------------------\n\nTITLE: Using updateMany for Bulk Operations in Prisma\nDESCRIPTION: Demonstrates using the updateMany bulk operation to mark all unread emails for a specific user as read in a single transaction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.email.updateMany({\n  where: {\n    user: {\n      id: 10,\n    },\n    unread: true,\n  },\n  data: {\n    unread: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Extending User Model with Prisma Result Type\nDESCRIPTION: Demonstrates how to use Prisma.Result to extend a User model type by adding a custom __typename property through a client extension. Shows type inference and property computation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst prisma = new PrismaClient().$extends({\n  result: {\n    user: {\n      __typename: {\n        needs: {},\n        compute() {\n          return 'User'\n        },\n      },\n    },\n  },\n})\n\ntype ExtendedUser = Prisma.Result<typeof prisma.user, { select: { id: true } }, 'findFirstOrThrow'>\n\nasync function main() {\n  const user: ExtendedUser = await prisma.user.findFirstOrThrow({\n    select: {\n      id: true,\n      __typename: true,\n    },\n  })\n\n  console.log(user.__typename) // Output: 'User'\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Configuration for PostgreSQL Data Source\nDESCRIPTION: Shows how to configure SSL certificates for secure database connections in Prisma schema. Demonstrates relative path usage for certificate files located outside the prisma directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/02-data-sources.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public&sslmode=require&sslcert=../server-ca.pem&sslidentity=../client-identity.p12&sslpassword=<REDACTED>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Opening Shortcuts Modal\nDESCRIPTION: Keyboard combinations to open the shortcuts modal in Prisma Studio on macOS and Windows.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/06-prisma-studio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCmd ⌘+/ on macOS or Ctrl+/ on Windows\n```\n\n----------------------------------------\n\nTITLE: Multiple Check Constraints SQL Creation\nDESCRIPTION: Creates a table with multiple check constraints: one comparing prices and another ensuring a specific tag exists in an array.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"public\".\"secondtolastproduct\" (\n    reducedprice NUMERIC CONSTRAINT reduced_price_check CHECK (price > reducedprice),\n    price NUMERIC,\n    tags TEXT[] CONSTRAINT tags_contains_product CHECK ('product' = ANY(tags))\n  );\nALTER TABLE \"public\".\"secondtolastproduct\"\n  ADD COLUMN \"productid\" serial,\n  ADD PRIMARY KEY (\"productid\");\n```\n\n----------------------------------------\n\nTITLE: Prisma Project Initialization\nDESCRIPTION: Command to initialize Prisma project with custom output directory\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-prismaPostgres.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma init --db --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Creation Function in TypeScript\nDESCRIPTION: This function creates a customer order in the database using Prisma Client. It checks if a product exists, connects to an existing customer or creates a new one based on email, and creates order details with the product and quantity information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/150-integration-testing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from '../client'\n\nexport interface Customer {\n  id?: number\n  name?: string\n  email: string\n  address?: string\n}\n\nexport interface OrderInput {\n  customer: Customer\n  productId: number\n  quantity: number\n}\n\n/**\n * Creates an order with customer.\n * @param input The order parameters\n */\nexport async function createOrder(input: OrderInput) {\n  const { productId, quantity, customer } = input\n  const { name, email, address } = customer\n\n  // Get the product\n  const product = await prisma.product.findUnique({\n    where: {\n      id: productId,\n    },\n  })\n\n  // If the product is null its out of stock, return error.\n  if (!product) return new Error('Out of stock')\n\n  // If the customer is new then create the record, otherwise connect via their unique email\n  await prisma.customerOrder.create({\n    data: {\n      customer: {\n        connectOrCreate: {\n          create: {\n            name,\n            email,\n            address,\n          },\n          where: {\n            email,\n          },\n        },\n      },\n      orderDetails: {\n        create: {\n          total: product.price,\n          quantity,\n          products: {\n            connect: {\n              id: product.id,\n            },\n          },\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative: Adding DateTime Deleted Field to Post Model\nDESCRIPTION: An alternative approach using a nullable DateTime field instead of a Boolean to track both if and when a record was deleted. This can be useful for regulatory requirements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/100-soft-delete-middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int       @id @default(autoincrement())\n  ...\n  deleted DateTime?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Schema (Prisma)\nDESCRIPTION: This snippet shows the Prisma schema definition for the User model, including fields like id, createdAt, updatedAt, firstName, lastName, email, and password.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/063-excluding-fields.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  firstName String\n  lastName  String\n  email     String   @unique\n  password  String\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields in Prisma Client\nDESCRIPTION: Shows the evolution from v1's string-based fragments to v2's type-safe field selection. V1 uses '$fragment' for field selection, while v2 introduces a more intuitive 'select' object where fields are specified as boolean properties.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_41\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.user({ id: 1 }).$fragment(`\n  fragment NameAndEmail on User { id email }`\n`)\n```\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.user.findUnique({\n  where: { id: 1 },\n  select: {\n    id: true,\n    email: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Server Connection URL in Environment Variables\nDESCRIPTION: This snippet demonstrates how to define the SQL Server connection URL in an environment variable file (.env). It includes authentication credentials and database configuration parameters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"sqlserver://localhost:1433;database=mydb;user=sa;password=r@ndomP@$$w0rd;trustServerCertificate=true\"\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Migration SQL with Prisma CLI - Terminal\nDESCRIPTION: These commands generate a baseline migration SQL file based on your current database schema, and then mark the migration as applied in Prisma. Use --from-empty to indicate there are no prior migrations, and --script to output executable SQL. Replace paths as appropriate to fit your directory structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Adding Global Labels to Prisma Metrics\nDESCRIPTION: Demonstrates how to add global labels to Prisma metrics for improved metric organization and tracking\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst metrics = prisma.$metrics.json({\n  globalLabels: { server: 'us_server1', app_version: 'one' },\n})\nconsole.log(metrics)\n```\n\n----------------------------------------\n\nTITLE: Multi-field One-to-One Relation Schema\nDESCRIPTION: Example of using composite keys (firstName and lastName) to define a one-to-one relation in relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/100-one-to-one-relations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  firstName String\n  lastName  String\n  profile   Profile?\n\n  @@id([firstName, lastName])\n}\n\nmodel Profile {\n  id            Int    @id @default(autoincrement())\n  user          User   @relation(fields: [userFirstName, userLastName], references: [firstName, lastName])\n  userFirstName String\n  userLastName  String\n\n  @@unique([userFirstName, userLastName])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post and Connecting to User with Prisma Client in JavaScript\nDESCRIPTION: Shows how to create a new Post record and connect it to an existing User record using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await prisma.post.create({\n  data: {\n    title: 'Join us for Prisma Day 2020',\n    author: {\n      connect: { email: 'alice@prisma.io' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Team and User Creation with Nested Write\nDESCRIPTION: Example showing how to create a team and its first member in a single atomic transaction using Prisma's nested writes feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = await prisma.team.create({\n  data: {\n    name: 'Aurora Adventures',\n    members: {\n      create: {\n        email: 'alice@prisma.io',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Selected Scalar Fields with Prisma ORM vs Sequelize\nDESCRIPTION: Shows how to fetch only specific fields of a record in both ORMs. Prisma uses the select option to specify which fields to include, while Sequelize uses the attributes option with raw:true to return plain JavaScript objects.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 1,\n  },\n  select: {\n    name: true,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findByPk(1, { attributes: ['name'], raw: true })\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack dependencies for serverless-webpack\nDESCRIPTION: Installs necessary dependencies for using Webpack in conjunction with the Serverless Framework to properly bundle Prisma ORM files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev webpack webpack-node-externals copy-webpack-plugin serverless-webpack\n```\n\n----------------------------------------\n\nTITLE: Final Prisma Client Query After Migration\nDESCRIPTION: Simplified Prisma Client query for fetching a user after migrating to native PostgreSQL arrays\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma schema and engine in Node.js application\nDESCRIPTION: Demonstrates how to import the Prisma schema and a specific engine file in a Node.js application to ensure they are accessible during runtime.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport schema from './prisma/schema.prisma'\nimport x from './node_modules/.prisma/client/libquery_engine-rhel-openssl-1.0.x.so.node'\n\nif (process.env.NODE_ENV !== 'production') {\n  console.debug(schema, x)\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema After Re-introspection\nDESCRIPTION: This Prisma schema shows the result of re-introspection after resolving database incompatibilities. It includes models for User, Post, Category, and Profile with their respective fields and relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_20\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String   @id\n  name     String\n  email    String?  @unique\n  jsonData Json?\n  role     Role     @default(CUSTOMER)\n  Post     Post[]\n  Profile  Profile?\n}\n\nmodel Post {\n  id        String     @id\n  createdAt DateTime   @default(now())\n  updatedAt DateTime\n  title     String\n  content   String?\n  published Boolean    @default(false)\n  authorId  String?\n  User      User?      @relation(fields: [authorId], references: [id])\n  Category  Category[] @relation(references: [id])\n}\n\nmodel Category {\n  id   String @id\n  name String\n  Post Post[] @relation(references: [id])\n}\n\nmodel Profile {\n  bio  String?\n  id   String  @id\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Post Record with Prisma Client in JavaScript\nDESCRIPTION: Demonstrates how to update an existing Post record in the database using Prisma Client. This example sets the 'published' field to true for a post with a specific ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL Service in Docker Compose (YAML)\nDESCRIPTION: Defines a PostgreSQL service using Docker Compose in `docker-compose.postgres.yml`. It specifies the image (`postgres:15`), sets environment variables for the database, maps port 5432, defines a network, includes a health check, mounts a volume for data persistence, and configures logging.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\n\nservices:\n  postgres:\n    image: postgres:15\n    restart: always\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=prisma\n    ports:\n      - \"5432:5432\"\n    networks:\n      - prisma-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U prisma -d postgres\"]\n      interval: 5s\n      timeout: 2s\n      retries: 20\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    command: postgres -c listen_addresses='*'\n    logging:\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n\nnetworks:\n  prisma-network:\n\nvolumes:\n  postgres_data:\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Datasource in Prisma Schema\nDESCRIPTION: This snippet shows how to define a valid datasource for a SQLite database within a Prisma schema file, which is a prerequisite for using the 'studio' command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_31\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:my-database.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Example User Data with Prisma Client\nDESCRIPTION: TypeScript code demonstrating how to create a user with an associated post using Prisma Client's create operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst add = await prisma.user.create({\n  data: {\n    name: 'Eloise',\n    jobTitle: 'Programmer',\n    posts: {\n      create: {\n        title: 'How to create a MySQL database',\n        content: 'Some content',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Prisma Schema\nDESCRIPTION: Example of setting up a connection to a MongoDB database in the Prisma schema file. It uses a MongoDB connection string format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = \"mongodb+srv://root:<password>@cluster0.ab1cd.mongodb.net/myDatabase?retryWrites=true&w=majority\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Unique Record by Compound ID\nDESCRIPTION: This TypeScript example demonstrates how to use the `findUnique()` method to query a record using a compound ID. The query uses the named compound ID 'likeId' with its component fields as filter criteria.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst like = await prisma.like.findUnique({\n  where: {\n    likeId: {\n      userId: 1,\n      postId: 1,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection URL Structure\nDESCRIPTION: Shows the basic structure of a MongoDB connection URL including username, password, host, and database components.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb://USERNAME:PASSWORD@HOST/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Database Schema\nDESCRIPTION: Define a User model in the Prisma schema with custom client output directory\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/140-use-prisma-in-pnpm-workspaces.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"../generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Updating findFirst with rejectOnNotFound in JavaScript\nDESCRIPTION: The snippet shows how to replace the deprecated rejectOnNotFound parameter in a query with the new findFirstOrThrow method in Prisma ORM 5. No additional dependencies are required, and the input is a query object specifying conditions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/001-rejectonnotfound-changes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nprisma.user.findFirst({\n  where: { name: 'Alice' },\n  rejectOnNotFound: true,\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nprisma.user.findFirstOrThrow({\n  where: { name: 'Alice' },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User Model in Prisma Schema\nDESCRIPTION: This snippet shows how to define a User model in the Prisma schema. It includes fields for user_id, name, email, and isAdmin, with appropriate data types and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  user_id Int     @id @default(autoincrement())\n  name    String?\n  email   String  @unique\n  isAdmin Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Data Source in Prisma Schema\nDESCRIPTION: Basic configuration for connecting Prisma to a Microsoft SQL Server database using the sqlserver provider. Uses environment variables for the connection URL to maintain security.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching relations with Include: Prisma ORM\nDESCRIPTION: Fetches a user with associated posts using the `include` option in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.user.findUnique({\n  where: {\n    id: 2,\n  },\n  include: {\n    post: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Team and User Updates with Nested Write\nDESCRIPTION: Demonstrates how to update a team and its members' information using a nested write approach in Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst updateTeam = await prisma.team.update({\n  where: {\n    id: 1,\n  },\n  data: {\n    name: 'Aurora Adventures Ltd',\n    members: {\n      updateMany: {\n        data: {\n          name: 'Unknown User',\n        },\n        where: {\n          name: {\n            equals: null,\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with User and Post Models\nDESCRIPTION: This Prisma schema defines two models: User and Post. The Post model has a relation to the User model via the authorId field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id])\n  authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Database Introspection\nDESCRIPTION: Command to introspect the database and generate Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Fix ENUM Column Type\nDESCRIPTION: SQL statement to modify the User table's role column to use proper ENUM type instead of text.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `User` CHANGE `role` `role` ENUM('ADMIN', 'CUSTOMER') NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Many-to-Many Relations Between User and Video in SQL\nDESCRIPTION: SQL statements that create tables and indexes for multiple many-to-many relations (liked and disliked videos) between User and Video entities. This demonstrates how to have multiple different relationships between the same models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"User\" (\n    \"id\" SERIAL PRIMARY KEY\n);\nCREATE TABLE IF NOT EXISTS \"Video\" (\n    \"id\" SERIAL PRIMARY KEY\n);\nCREATE TABLE IF NOT EXISTS \"_UserLikedVideos\" (\n    \"A\" SERIAL NOT NULL,\n    \"B\" SERIAL NOT NULL,\n    CONSTRAINT \"_UserLikedVideos_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"User\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n    CONSTRAINT \"_UserLikedVideos_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Video\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n);\nCREATE TABLE IF NOT EXISTS \"_UserDislikedVideos\" (\n    \"A\" SERIAL NOT NULL,\n    \"B\" SERIAL NOT NULL,\n    CONSTRAINT \"_UserDislikedVideos_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"User\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n    CONSTRAINT \"_UserDislikedVideos_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Video\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n);\nCREATE UNIQUE INDEX \"_UserLikedVideos_AB_unique\" ON \"_UserLikedVideos\"(\"A\", \"B\");\nCREATE INDEX \"_UserLikedVideos_B_index\" ON \"_UserLikedVideos\"(\"B\");\nCREATE UNIQUE INDEX \"_UserDislikedVideos_AB_unique\" ON \"_UserDislikedVideos\"(\"A\", \"B\");\nCREATE INDEX \"_UserDislikedVideos_B_index\" ON \"_UserDislikedVideos\"(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Running the database seed script\nDESCRIPTION: Command to execute the seed script, populating the database with sample data defined in seed.ts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db seed\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema from Multiple Many-to-Many Relations\nDESCRIPTION: Prisma schema generated by introspection from a database with multiple many-to-many relations between User and Video entities. Shows how Prisma handles and names multiple relationships between the same models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id                       Int     @id @default(autoincrement())\n  Video_UserDislikedVideos Video[] @relation(\"UserDislikedVideos\")\n  Video_UserLikedVideos    Video[] @relation(\"UserLikedVideos\")\n}\n\nmodel Video {\n  id                      Int    @id @default(autoincrement())\n  User_UserDislikedVideos User[] @relation(\"UserDislikedVideos\")\n  User_UserLikedVideos    User[] @relation(\"UserLikedVideos\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Post Record with Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to update an existing Post record in the database using Prisma Client's update method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: ALTER Query Limitation in PostgreSQL\nDESCRIPTION: Shows the limitation of using ALTER queries in PostgreSQL and provides alternative approaches.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$executeRaw`ALTER USER prisma WITH PASSWORD \"${password}\"`;\nawait prisma.$executeRaw(Prisma.sql`ALTER USER prisma WITH PASSWORD \"${password}\"`);\nawait prisma.$executeRawUnsafe('ALTER USER prisma WITH PASSWORD \"$1\"', password})\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Migration SQL\nDESCRIPTION: Generates SQL migration script by comparing empty state to current schema, creating baseline migration file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/30-baselining.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff \\\n--from-empty \\\n--to-schema-datamodel prisma/schema.prisma \\\n--script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Scripts with Prisma CLI\nDESCRIPTION: Examples of using the 'prisma db execute' command to apply SQL scripts to the database, demonstrating file input and standard input methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_22\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db execute --file ./script.sql --schema schema.prisma\n```\n\nLANGUAGE: terminal\nCODE:\n```\necho 'TRUNCATE TABLE dev;' | prisma db execute --stdin --url=\"$DATABASE_URL\"\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Introspection Without CUID Indicator\nDESCRIPTION: Illustrates the output of introspection by Prisma ORM 2.x showing a model schema without CUID default generation due to the absence of corresponding database rules.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id String @id\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Prisma Schema with Relations\nDESCRIPTION: Final Prisma schema with added relationship definitions between Post and User models using @relation attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-node-mongodb.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title  String\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Check Constraint Violations\nDESCRIPTION: Modifies a product creation script to showcase multiple check constraint violations, emphasizing the resolution order and error reporting.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  const newProduct = await prisma.secondtolastproduct.create({\n    data: {\n      tags: {\n        set: ['wrongtag'],\n      },\n      price: 90.0,\n      reducedprice: 100.0,\n    },\n  })\n\n  console.log(newProduct)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Improved Prisma Schema with Proper Naming\nDESCRIPTION: Modified Prisma schema with proper naming conventions for better API ergonomics.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(0)\n  content   String?  @db.Text\n  published Boolean  @default(false)\n  authorId  Int\n  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Post_ibfk_1\")\n\n  @@index([authorId], map: \"authorId\")\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String? @db.Text\n  userId Int     @unique(map: \"userId\")\n  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Profile_ibfk_1\")\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique(map: \"email\") @db.VarChar(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching single object: Prisma ORM\nDESCRIPTION: Fetches a single user object from the database using Prisma ORM, filtered by ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example Database Connection String\nDESCRIPTION: Demonstration of a PostgreSQL connection string format for configuring preview environment database URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/300-deploy-to-vercel.mdx#2025-04-21_snippet_3\n\nLANGUAGE: code\nCODE:\n```\npostgresql://dbUsername:dbPassword@myhost:5432/mydb\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Generating Down Migration\nDESCRIPTION: This command generates a down migration SQL script using a comparison to the current database schema instead of using the shadow database. It’s an alternative to the primary method and outputs the script to down.sql.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/60-generating-down-migrations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff \\\n --from-schema-datamodel prisma/schema.prisma \\\n --to-schema-datasource prisma/schema.prisma \\\n --script > down.sql\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Schema with User and User_coinflips Models\nDESCRIPTION: Defines the initial Prisma schema with a User model and a related User_coinflips model to handle scalar lists, using composite primary key and relation fields\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_43\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             String           @id\n  User_coinflips User_coinflips[]\n}\n\nmodel User_coinflips {\n  nodeId   String\n  position Int\n  value    Boolean\n  User     User    @relation(fields: [nodeId], references: [id])\n\n  @@id([nodeId, position])\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Records with Prisma ORM in TypeScript\nDESCRIPTION: Demonstrates how to delete multiple records at once using Prisma ORM's deleteMany method. This example filters users by an array of IDs passed to the 'in' operator within the where clause.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.deleteMany({\n  where: {\n    id: {\n      in: [1, 2, 6, 6, 22, 21, 25],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Record Not Found Errors in Prisma Client with TypeScript\nDESCRIPTION: This snippet demonstrates how to properly catch and handle a 'record not found' error when using findUniqueOrThrow in Prisma Client. It checks for the specific Prisma error code P2025 to provide a user-friendly error message.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client';\n\n// inside an `async` function\ntry {\n  const user = await prisma.user.findUniqueOrThrow({\n    where: { id: 42 },\n  });\n  console.log(user);\n} catch (error) {\n  // highlight-start\n  if (\n    error instanceof Prisma.PrismaClientKnownRequestError &&\n    error.code === 'P2025' // Specific code for \"record not found\"\n  ) {\n    console.error(\"User not found!\");\n  } \n  // highlight-end\n  else {\n    console.error(\"Unexpected error:\", error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Migrating Prisma Schema with npm\nDESCRIPTION: Runs the Prisma schema migration and generates Prisma client types using turbo commands, facilitated by npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpx turbo db:migrate\nnpx turbo db:generate\n```\n\n----------------------------------------\n\nTITLE: Adding Categories to Post with Prisma 1\nDESCRIPTION: This code snippet demonstrates how to add categories to a post using Prisma 1's `updatePost` method. It defines a GraphQL mutation field called `addPostToCategories` that takes a `postId` and an array of `categoryIds` as arguments. The `resolve` function connects the post to the specified categories.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nmutationType({\n  definition(t) {\n    t.field('addPostToCategories', {\n      type: 'Post',\n      args: {\n        postId: stringArg({ nullable: false }),\n        categoryIds: stringArg({\n          list: true,\n          nullable: false,\n        }),\n      },\n      resolve: (_, args, context) => {\n        const ids = args.categoryIds.map((id) => ({ id }))\n        return context.prisma.updatePost({\n          where: {\n            id: args.postId,\n          },\n          data: {\n            categories: { connect: ids },\n          },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Ends With Filter for Posts - Prisma ORM - TypeScript\nDESCRIPTION: This snippet depicts how to filter posts to find titles that end with a given substring using Prisma ORM. The 'endsWith' option is specified in the 'where' clause for this purpose.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: {\n      endsWith: 'Hello World',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Profile Model with Misspelled Field\nDESCRIPTION: Prisma schema showing a Profile model with a misspelled 'biograpy' field that needs to be renamed\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/40-customizing-migrations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Profile {\n  id       Int    @id @default(autoincrement())\n  biograpy String\n  userId   Int    @unique\n  user     User   @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Tunnel Connection\nDESCRIPTION: Command to establish a TCP tunnel connection to Prisma Postgres using the ppg-tunnel package\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/700-tooling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx @prisma/ppg-tunnel --host 127.0.0.1 --port 52604\n```\n\n----------------------------------------\n\nTITLE: Selecting Nested Relations with Prisma Client\nDESCRIPTION: This query demonstrates nested selection by returning a user's name along with titles of their posts. It uses a nested select to specify which fields to include from the relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithPostTitles = await prisma.user.findFirst({\n  select: {\n    name: true,\n    posts: {\n      select: { title: true },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Structure\nDESCRIPTION: Example of MongoDB document structure showing how one-to-one relations are represented using document references.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/100-one-to-one-relations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"_id\": { \"$oid\": \"60d58e130011041800d209e1\" }, \"name\": \"Bob\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": { \"$oid\": \"60d58e140011041800d209e2\" },\n  \"bio\": \"I'm Bob, and I like drawing.\",\n  \"userId\": { \"$oid\": \"60d58e130011041800d209e1\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Seed Scripts with Prisma Client\nDESCRIPTION: This example demonstrates how to create a seed script for populating a database with test data using Prisma Client. It creates related records across multiple models (Organization, Subscription, and User) in a single transaction, leveraging Prisma's nested writes feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  await prisma.organization.create({\n    data: {\n      name: \"Prisma Corp\",\n      slug: \"prisma-corp\",\n      subscription: {\n        create: {\n          plan: \"PRO\",\n          status: \"ACTIVE\"\n        }\n      },\n      users: {\n        create: [\n          { name: \"Alice Doe\", email: \"alice@prisma.io\" },\n          { name: \"Bob Smith\", email: \"bob@prisma.io\" }\n        ]\n      }\n    }\n  });\n\n  console.log(\"Seed data created successfully\");\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema After Introspection\nDESCRIPTION: Generated Prisma schema showing model definitions with relations and field configurations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(0)\n  content   String?  @db.Text\n  published Boolean  @default(false)\n  authorId  Int\n  User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Post_ibfk_1\")\n\n  @@index([authorId], map: \"authorId\")\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String? @db.Text\n  userId Int     @unique(map: \"userId\")\n  User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: \"Profile_ibfk_1\")\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique(map: \"email\") @db.VarChar(255)\n  Post    Post[]\n  Profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Tracing for Prisma Postgres\nDESCRIPTION: Sets up a Prisma Client instance with custom tracing capabilities for Prisma Postgres. It integrates with OpenTelemetry tracing, captures raw SQL queries, and wraps all Prisma operations in custom spans with detailed metadata.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tracer } from \"./tracer\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\nimport { PrismaClient } from \"./generated/prisma\";\n\nconst prisma = new PrismaClient({\n  log: [{ emit: \"event\", level: \"query\" }],\n})\n  .$on(\"query\", (e) => {\n    const span = tracer.startSpan(`prisma_raw_query`, {\n      childOf: tracer.scope().active() || undefined,\n      tags: {\n        \"prisma.rawquery\": e.query,\n      },\n    });\n    span.finish();\n  })\n  .$extends({\n    query: {\n      async $allOperations({ operation, model, args, query }) {\n        const span = tracer.startSpan(\n          `prisma_query_${model?.toLowerCase()}_${operation}`,\n          {\n            tags: {\n              \"prisma.operation\": operation,\n              \"prisma.model\": model,\n              \"prisma.args\": JSON.stringify(args),\n              \"prisma.rawQuery\": query,\n            },\n            childOf: tracer.scope().active() || undefined,\n          }\n        );\n\n        try {\n          const result = await query(args);\n          span.finish();\n          return result;\n        } catch (error) {\n          span.setTag(\"error\", error);\n          span.finish();\n          throw error;\n        }\n      },\n    },\n  })\n  .$extends(withAccelerate());\n\nexport { prisma };\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectId Field with Bytes Type in Prisma Schema\nDESCRIPTION: Shows how to define a field in Prisma schema that maps to an ObjectId in MongoDB using Bytes type with appropriate attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Bytes @id @default(auto()) @map(\"_id\") @db.ObjectId\n  // Other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Prisma 1 CLI - JavaScript\nDESCRIPTION: This snippet shows commands to uninstall the old Prisma 1 CLI from both global and local installations. This is necessary if you're upgrading to Prisma ORM 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall -g prisma1\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall prisma1\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma Client with Optimize Extension\nDESCRIPTION: This code snippet demonstrates how to extend your existing Prisma Client instance with the Optimize extension using the `withOptimize` function.  It imports the necessary modules and initializes a new Prisma Client instance, passing the API key from the environment variables to the `withOptimize` function.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/200-getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { PrismaClient } from \\\"@prisma/client\\\";\\nimport { withOptimize } from \\\"@prisma/extension-optimize\\\";\\n\\nconst prisma = new PrismaClient().$extends(\\n  withOptimize({ apiKey: process.env.OPTIMIZE_API_KEY }),\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema with DATABASE_URL Environment Variable\nDESCRIPTION: This schema configuration sets up Prisma to use the DATABASE_URL environment variable for connecting to a PostgreSQL database, which is automatically set by the Netlify extension.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Query with Coinflips Inclusion\nDESCRIPTION: Demonstrates how to query a user with coinflips, using include and orderBy to maintain list order\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: { id: 1 },\n  include: {\n    coinflips: {\n      orderBy: { position: 'asc' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Concurrency Control in Seat Booking\nDESCRIPTION: This TypeScript code demonstrates how to implement optimistic concurrency control when booking a seat, using the version field to prevent double-booking.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst userEmail = 'alice@prisma.io'\nconst movieName = 'Hidden Figures'\n\n// Find the first available seat\n// availableSeat.version might be 0\nconst availableSeat = await client.seat.findFirst({\n  where: {\n    Movie: {\n      name: movieName,\n    },\n    claimedBy: null,\n  },\n})\n\nif (!availableSeat) {\n  throw new Error(`Oh no! ${movieName} is all booked.`)\n}\n\n// Only mark the seat as claimed if the availableSeat.version\n// matches the version we're updating. Additionally, increment the\n// version when we perform this update so all other clients trying\n// to book this same seat will have an outdated version.\nconst seats = await client.seat.updateMany({\n  data: {\n    claimedBy: userEmail,\n    version: {\n      increment: 1,\n    },\n  },\n  where: {\n    id: availableSeat.id,\n    version: availableSeat.version, // This version field is the key; only claim seat if in-memory version matches database version, indicating that the field has not been updated\n  },\n})\n\nif (seats.count === 0) {\n  throw new Error(`That seat is already booked! Please try again.`)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering for concrete values: TypeORM\nDESCRIPTION: Filters users based on whether their name is 'Alice' using TypeORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst users = await userRepository.find({\n  where: {\n    name: 'Alice',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Turso\nDESCRIPTION: Configures environment variables for Turso database connection in a .env file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/900-turso.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTURSO_AUTH_TOKEN=\"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9...\"\nTURSO_DATABASE_URL=\"libsql://turso-prisma-db-user.turso.io\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Post Record with Prisma Client in JavaScript\nDESCRIPTION: Demonstrates how to update an existing Post record in the database using Prisma Client. This example updates the 'published' status of a post with a specific ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Team Model with Stripe Integration in Prisma\nDESCRIPTION: Prisma schema definition for a Team model that includes Stripe customer ID integration for handling paid subscriptions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_28\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Team {\n  id               Int     @id @default(autoincrement())\n  name             String\n  User             User[]\n  stripeCustomerId String?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Attributes in Prisma (Relational Databases)\nDESCRIPTION: This snippet shows how to define a User model in Prisma using field attributes such as @id, @default, and @unique, as well as a block attribute @@unique to enforce uniqueness on combinations of fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int     @id @default(autoincrement())\n  firstName String\n  lastName  String\n  email     String  @unique\n  isAdmin   Boolean @default(false)\n\n  @@unique([firstName, lastName])\n}\n```\n\n----------------------------------------\n\nTITLE: Updating serverless.yml to use dotenv plugin\nDESCRIPTION: Modifies the serverless.yml configuration file to include the serverless-dotenv-plugin in the list of plugins for loading environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - serverless-dotenv-plugin\n```\n\n----------------------------------------\n\nTITLE: Using Native Type Mappings in Prisma Schema\nDESCRIPTION: This example shows how to use native database type attributes to specify exact database types. Here, the title field is defined as VARCHAR(200) using the @db prefix with the appropriate native type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int    @id\n  title   String @db.VarChar(200)\n  content String\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Writes with Pre-computed UUIDs in Prisma\nDESCRIPTION: Shows that nested writes can still be used with pre-computed UUIDs if preferred, providing an alternative syntax for creating related entities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 } from 'uuid'\n\nconst teamID = v4()\nconst userID = v4()\n\nawait prisma.team.create({\n  data: {\n    id: teamID,\n    name: 'Aurora Adventures',\n    members: {\n      create: {\n        id: userID,\n        email: 'alice@prisma.io',\n        team: {\n          id: teamID,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Database Push and Migration Commands\nDESCRIPTION: CLI commands for pushing schema changes and resetting the database using Prisma CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name initial-state\n```\n\n----------------------------------------\n\nTITLE: Using undefined in findFirst query which ignores the filter\nDESCRIPTION: Shows how using undefined as a filter value in a findFirst query causes Prisma Client to ignore that filter completely, returning the first record in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  where: {\n    name: undefined,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initial Database Schema Migration\nDESCRIPTION: SQL migration script that creates the initial database schema with tables for Post, Profile, and User, including foreign key relationships and indexes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE `Post` (\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `title` VARCHAR(255) NOT NULL,\n    `createdAt` TIMESTAMP(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),\n    `content` TEXT NULL,\n    `published` BOOLEAN NOT NULL DEFAULT false,\n    `authorId` INTEGER NOT NULL,\n\n    INDEX `authorId`(`authorId`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `Profile` (\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `bio` TEXT NULL,\n    `userId` INTEGER NOT NULL,\n\n    UNIQUE INDEX `userId`(`userId`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `User` (\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `name` VARCHAR(255) NULL,\n    `email` VARCHAR(255) NOT NULL,\n\n    UNIQUE INDEX `email`(`email`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- AddForeignKey\nALTER TABLE `Post` ADD CONSTRAINT `Post_ibfk_1` FOREIGN KEY (`authorId`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n\n-- AddForeignKey\nALTER TABLE `Profile` ADD CONSTRAINT `Profile_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n```\n\n----------------------------------------\n\nTITLE: Defining UserUniqueInput and User Query in Nexus\nDESCRIPTION: Code-first schema definition with Nexus, creating both an input type for unique user lookups and a user query field that accepts this input type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inputObjectType, arg } from '@nexus/schema'\n\nconst UserUniqueInput = inputObjectType({\n  name: 'UserUniqueInput',\n  definition(t) {\n    t.string('id')\n    t.string('email')\n  },\n})\n\nconst Query = queryType({\n  definition(t) {\n    // ... previous queries\n\n    t.field('user', {\n      type: 'User',\n      args: {\n        userUniqueInput: arg({\n          type: 'UserUniqueInput',\n          nullable: false,\n        }),\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CreateUser Resolver with forwardTo in JavaScript\nDESCRIPTION: Original JavaScript implementation that uses forwardTo to directly delegate the createUser mutation to Prisma Binding's underlying implementation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    createUser: forwardTo('prisma'),\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema with Database Connection\nDESCRIPTION: Sets up the datasource block in the Prisma schema file to connect to a database using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied\nDESCRIPTION: Command to mark the initial migration as applied in the _prisma_migrations table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma in a Project via Terminal\nDESCRIPTION: Terminal command `npx prisma init` used to set up Prisma in a project. It specifies the database provider and sets a custom output path for the generated Prisma Client (`../generated/prisma`). The description notes the command's output (a `prisma/schema.prisma` file and an updated `.env` file) and mentions user interaction required for Prisma Postgres setup.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --db --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Installing the Prisma Nuxt Module\nDESCRIPTION: Navigates to the project directory and installs the @prisma/nuxt module using the Nuxt CLI. This adds Prisma ORM functionality to your Nuxt application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncd test-nuxt-app\nnpx nuxi@latest module add @prisma/nuxt\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Query Engine Binary for Windows\nDESCRIPTION: Set the location of the custom query engine binary for Windows systems in the environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPRISMA_QUERY_ENGINE_BINARY=c:\\custom\\path\\my-query-engine-binary.exe\n```\n\n----------------------------------------\n\nTITLE: Creating Related User and Post Records\nDESCRIPTION: Shows how to create a new User record with a related Post using a nested write query, then retrieve all users with their posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Rich',\n      email: 'hello@prisma.com',\n      posts: {\n        create: {\n          title: 'My first post',\n          body: 'Lots of really interesting stuff',\n          slug: 'my-first-post',\n        },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Generator with Explicit Defaults\nDESCRIPTION: Explicitly sets default values for output, engine type and binary targets in the generator configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider      = \"prisma-client-js\"\n  output        = \"node_modules/.prisma/client\"\n  engineType    = \"library\"\n  binaryTargets = [\"native\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows Command Prompt\nDESCRIPTION: Demonstrates how to set environment variables in Windows using Command Prompt (cmd.exe) and verify the variable is set correctly.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nset DATABASE_URL=\"postgresql://test:test@localhost:5432/test?schema=public\"\n```\n\nLANGUAGE: terminal\nCODE:\n```\nset DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Order By Aggregate Group Feature\nDESCRIPTION: Prisma query functionality allowing sorting and grouping of results based on aggregate calculations\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`orderByAggregateGroup`\n```\n\n----------------------------------------\n\nTITLE: Granting Additional Permissions for Prisma Migrate\nDESCRIPTION: This SQL command grants additional permissions necessary to run Prisma migrate commands, including CREATE, DROP, REFERENCES, and ALTER privileges on all databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nmysql -e \"GRANT CREATE, DROP, REFERENCES, ALTER ON *.* TO $DB_USER@'%';\"\n```\n\n----------------------------------------\n\nTITLE: Querying Posts in Next.js getServerSideProps\nDESCRIPTION: This code snippet demonstrates how to use Prisma Client in Next.js getServerSideProps to fetch published posts from the database. The results are passed as props to the React component.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/03-fullstack.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getServerSideProps = async () => {\n  const feed = await prisma.post.findMany({\n    where: {\n      published: true,\n    },\n  })\n  return { props: { feed } }\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Example\nDESCRIPTION: Demonstrates a basic Prisma schema (`schema.prisma`) that defines the data source (database connection) and generator (Prisma Client). This example uses MySQL as the database provider.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying All Operations Across All Models\nDESCRIPTION: Extends all operations on all models in the schema with custom logic, providing complete control over all database interactions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    $allModels: {\n      $allOperations({ model, operation, args, query }) {\n        /* your custom logic for modifying all operations on all models here */\n        return query(args)\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeORM Post and User Entity Models Definition\nDESCRIPTION: Defines Post and User entity models for TypeORM with a many-to-one relationship between posts and their authors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  title: string\n\n  @Column({ nullable: true })\n  content: string\n\n  @Column({ default: false })\n  published: boolean\n\n  @ManyToOne((type) => User, (user) => user.posts)\n  author: User\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ nullable: true })\n  name: string\n\n  @Column({ unique: true })\n  email: string\n\n  @OneToMany((type) => Post, (post) => post.author)\n  posts: Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Client Debug Output in Bash\nDESCRIPTION: This snippet demonstrates how to enable debugging output for Prisma Client by setting the DEBUG environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/300-environment-variables-reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# enable only `prisma:client`-level debugging output\nexport DEBUG=\"prisma:client\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Environment File\nDESCRIPTION: This command renames the example environment file to the standard .env filename.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmv .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Execute Migration - Bash\nDESCRIPTION: Guides to update the DATABASE_URL to point to the production database, followed by executing the migration script to update the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run data-migration:add-status-column\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Script with dotenv-cli in package.json\nDESCRIPTION: This JSON snippet shows how to set up a script in package.json to run Prisma migrations using dotenv-cli to specify the .env.sample file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"migrate:postgres\": \"dotenv -e .env.sample -- npx prisma migrate deploy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with @updatedAt - MongoDB Example\nDESCRIPTION: Defines a Post model with an ID and updatedAt timestamp specifically for MongoDB, using ObjectId mapping.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_64\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        String   @id @map(\"_id\") @db.ObjectId\n  updatedAt DateTime @updatedAt\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied with Prisma CLI\nDESCRIPTION: Uses the prisma migrate resolve command to mark the initial migration as applied in the _prisma_migrations table, completing the baselining process.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-cockroachdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Final Prisma ORM 2 Schema Structure\nDESCRIPTION: This Prism schema version defines the final structure after upgrading. It includes definitions for models like User, Post, Profile, and Category with correct attribute mappings. It requires the Prisma CLI and ORM 2 environment. Inputs are schema specifications, outputs are the ORM-managed database mappings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_33\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String   @id @default(cuid())\n  name     String\n  email    String?  @unique\n  jsonData Json?\n  role     Role     @default(CUSTOMER)\n  Post     Post[]\n  Profile  Profile?\n}\n\nmodel Post {\n  id        String     @id @default(cuid())\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n  title     String\n  content   String?\n  published Boolean    @default(false)\n  authorId  String?\n  User      User?      @relation(fields: [authorId], references: [id])\n  Category  Category[] @relation(references: [id])\n}\n\nmodel Profile {\n  id   String  @id @default(cuid())\n  bio  String?\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n\nmodel Category {\n  id   String @id @default(cuid())\n  name String\n  Post Post[] @relation(references: [id])\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Introspection for Model Generation\nDESCRIPTION: Runs Prisma's introspection command to generate Prisma models for each table in the PostgreSQL database, allowing ORM operations to be performed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection URL in Environment Variables\nDESCRIPTION: Demonstrates how to define the DATABASE_URL environment variable in a .env file for connecting to a PostgreSQL database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Database Tables Schema\nDESCRIPTION: SQL script to create three interrelated tables (Post, Profile, User) with appropriate columns, primary keys, and indexes using MySQL syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `Post` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `createdAt` datetime(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  `updatedAt` datetime(3) NOT NULL,\n  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,\n  `content` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `published` tinyint(1) NOT NULL DEFAULT '0',\n  `authorId` int NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Post_authorId_idx` (`authorId`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE `Profile` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `bio` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `userId` int NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `Profile_userId_key` (`userId`),\n  KEY `Profile_userId_idx` (`userId`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE `User` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `email` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,\n  `name` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `User_email_key` (`email`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\n----------------------------------------\n\nTITLE: Defining Index in Prisma Schema\nDESCRIPTION: Shows how to define a multi-column index on title and content fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_21\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int     @id @default(autoincrement())\n  title   String\n  content String?\n\n  @@index([title, content])\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: Adding CUID Default\nDESCRIPTION: This Prisma schema snippet demonstrates manually adding the `@default(cuid())` attribute to the `id` field of the `Post` model.  This instructs Prisma ORM to generate CUIDs for new `Post` records. Remember that the attribute must be manually re-added after each introspection as it will be overwritten.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma line-number file=schema.prisma highlight=2;add showLineNumbers\nmodel Post {\n  //add-next-line\n  id String @id @default(cuid())\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Simplified findFirst query without filters\nDESCRIPTION: Shows an equivalent way to write a query that returns the first record when no filter is needed, instead of using undefined values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst()\n```\n\n----------------------------------------\n\nTITLE: Error message when using Prisma Migrate with PgBouncer\nDESCRIPTION: This code snippet shows the error message that is thrown when Prisma Migrate is used with PgBouncer without proper configuration. The error indicates that prepared statements already exist, due to the interaction between Prisma Migrate's transaction requirements and PgBouncer's connection pooling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/200-pgbouncer.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"Error: undefined: Database error\\nError querying the database: db error: ERROR: prepared statement \\\"s0\\\" already exists\"\n```\n\n----------------------------------------\n\nTITLE: Applying multiple extensions to a client in one line in TypeScript\nDESCRIPTION: Example showing how to apply multiple extensions to a Prisma Client in a single chain of method calls. This approach creates one extended client with functionality from all extensions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// First of all, store your original Prisma Client in a variable as usual\nconst prisma = new PrismaClient()\n\n// Declare an extended client that has an extensionA and extensionB\nconst prismaAB = prisma.$extends(extensionA).$extends(extensionB)\n```\n\n----------------------------------------\n\nTITLE: Case Sensitive Filter for Posts - Prisma ORM - TypeScript\nDESCRIPTION: This snippet demonstrates how to perform a case-sensitive filter on the post titles using Prisma ORM. The 'findMany' method is employed, with a 'where' clause to specify the title condition exactly matching 'Hello World'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// case sensitive filter\nconst posts = await prisma.post.findMany({\n  where: {\n    title: 'Hello World',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Record with Prisma Client in TypeScript\nDESCRIPTION: Demonstrates how to update an existing post record to change its published status using Prisma Client's update method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Many-to-Many Relation Schema in Prisma\nDESCRIPTION: A Prisma schema definition for an implicit many-to-many relationship between Post and Tag models, where Prisma handles the relation table internally.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id    Int    @id @default(autoincrement())\n  title String\n  tags  Tag[]\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String @unique\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema with Tag Model\nDESCRIPTION: Prisma schema definition that adds a new Tag model and establishes a many-to-many relationship with the Post model. Includes model definitions for Post, Profile, User, and Tag with their respective fields and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma ORM 2 Schema After Introspection\nDESCRIPTION: This shows the Prisma ORM 2 schema that results from introspecting the existing database. It includes models for User, Post, Profile, and Category with their fields and relationships, but lacks some features that were present in the original Prisma 1 model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_22\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String    @id @default(cuid())\n  email    String?   @unique\n  name     String\n  role     String\n  jsonData String?\n  Profile  Profile[]\n  Post     Post[]\n}\n\nmodel Post {\n  id        String     @id @default(cuid())\n  createdAt DateTime\n  updatedAt DateTime\n  title     String\n  content   String?\n  published Boolean\n  Category  Category[]\n  User      User[]\n}\n\nmodel Profile {\n  id   String  @id @default(cuid())\n  bio  String?\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n\nmodel Category {\n  id   String @id @default(cuid())\n  name String\n  Post Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Query Engine Binary for Unix\nDESCRIPTION: Set the location of the custom query engine binary for Unix-based systems in the environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPRISMA_QUERY_ENGINE_BINARY=custom/my-query-engine-unix\n```\n\n----------------------------------------\n\nTITLE: Prisma Model with Mapping\nDESCRIPTION: Modified Prisma model demonstrating the use of `@@map` and `@map` to map the model name `Todo` to the table name `todo`. This allows you to adhere to Prisma ORM's naming conventions (PascalCase for models) while maintaining compatibility with the existing database schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\n\"model Todo {\n  id   Int     @id\n  text String\n  done Boolean @default(false)\n\n  @@map(\\\"todo\\\")\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Prisma Studio Service to Docker Compose (YAML)\nDESCRIPTION: Updates the `docker-compose.yml` file to include a new service named `prisma-studio`. This service uses a Node.js image, mounts the project directory, runs `npx prisma studio`, exposes port 5555, uses the same environment file, connects to the shared network, and depends on both the database and server services.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\n\nservices:\n  postgres_db:\n    image: postgres:15\n    hostname: postgres_db\n    container_name: postgres_db\n    restart: always\n    environment:\n      POSTGRES_DB: postgres\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: prisma\n    ports:\n      - '5432:5432'\n    networks:\n      - prisma-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d postgres\"]\n      interval: 5s\n      timeout: 2s\n      retries: 20\n\n  server:\n    build: \n      context: .  \n      dockerfile: Dockerfile\n    ports:\n      - '3000:3000'\n    stdin_open: true\n    tty: true  # Keeps the container running for debugging\n    depends_on:\n      postgres_db:\n        condition: service_healthy\n    env_file:\n      - .env.prod\n    networks:\n      - prisma-network\n  \n  prisma-studio:\n    image: node:lts-alpine3.17\n    working_dir: /usr/src/app\n    volumes:\n      - .:/usr/src/app\n    command: npx prisma studio --port 5555 --browser none\n    ports:\n      - \"5555:5555\"\n    env_file:\n      - .env.prod\n    networks:\n      - prisma-network\n    depends_on:\n      postgres_db:\n        condition: service_healthy\n      server:\n        condition: service_started\n    \nnetworks:\n  prisma-network:\n    name: prisma-network\n```\n\n----------------------------------------\n\nTITLE: Creating Deno HTTP Server with Prisma Client\nDESCRIPTION: Implement a Deno HTTP server that logs each request to a Prisma Postgres database using Prisma Client and Accelerate extension\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/550-deploy-to-deno-deploy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"https://deno.land/std@0.140.0/http/server.ts\";\nimport { withAccelerate } from \"npm:@prisma/extension-accelerate\";\nimport { PrismaClient } from \"./generated/client/deno/edge.ts\";\n\nconst prisma = new PrismaClient().$extends(withAccelerate());\n\nasync function handler(request: Request) {\n  const url = new URL(request.url);\n  if (url.pathname === \"/favicon.ico\") {\n    return new Response(null, { status: 204 });\n  }\n\n  console.log(\"Request received.\");\n\n  const log = await prisma.log.create({\n    data: {\n      level: \"Info\",\n      message: `${request.method} ${request.url}`,\n      meta: {\n        headers: JSON.stringify(request.headers),\n      },\n    },\n  });\n  const body = JSON.stringify(log, null, 2);\n  return new Response(body, {\n    headers: { \"content-type\": \"application/json; charset=utf-8\" },\n  });\n}\n\nserve(handler);\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Format in PrismaClient Constructor (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set the error format using the PrismaClient constructor. The errorFormat option is set to 'pretty', which will include a full stack trace with colors, syntax highlighting, and extended error messages.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/150-error-formatting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  errorFormat: 'pretty',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma Client in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import and instantiate the Prisma Client after generating it with the new prisma-client generator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"./generated/prisma/client\"\n\nconst prisma = new PrismaClient()\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relations in MongoDB with Prisma using TypeScript\nDESCRIPTION: These TypeScript code snippets demonstrate how to query many-to-many relations in MongoDB using Prisma. The first query finds posts with specific category IDs using 'hasSome' on 'categoryIDs', while the second finds posts where the category name contains 'Servers'. These queries require the Prisma client and assume an existing connection to a MongoDB database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst newId1 = new ObjectId()\nconst newId2 = new ObjectId()\n\nconst posts = await prisma.post.findMany({\n  where: {\n    categoryIDs: {\n      hasSome: [newId1.toHexString(), newId2.toHexString()],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    categories: {\n      some: {\n        name: {\n          contains: 'Servers',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Go Script Using Bash\nDESCRIPTION: This Bash script runs a Go script located in the ./seed/ directory to seed the database. It uses set flags for immediate exit on error and command printing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n# -e Exit immediately when a command returns a non-zero status.\n# -x Print commands before they are executed\nset -ex\n# Seeding command\ngo run ./seed/\n```\n\n----------------------------------------\n\nTITLE: Creating a Draft Post with Prisma 1\nDESCRIPTION: This code snippet demonstrates how to create a draft post using Prisma 1's `createPost` method.  It defines a GraphQL mutation field named `createDraft` that accepts `title`, `content`, and `authorId` as arguments.  The `resolve` function uses the Prisma context to create the post and connect it to the author.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nmutationType({\n  definition(t) {\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({ nullable: false }),\n        content: stringArg(),\n        authorId: stringArg({ nullable: false }),\n      },\n      resolve: (_, args, context) => {\n        return context.prisma.createPost({\n          title: args.title,\n          content: args.content,\n          author: {\n            connect: { id: args.authorId },\n          },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma One-to-Many Relation Model\nDESCRIPTION: The resulting Prisma schema models showing how SQL one-to-many relationships are represented.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int    @id @default(autoincrement())\n  Post Post[]\n}\n\nmodel Post {\n  id     Int  @id @default(autoincrement())\n  author Int\n  User   User @relation(fields: [author], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Default Composite Primary Key in Prisma Client\nDESCRIPTION: This TypeScript snippet demonstrates how to query a User using the default composite primary key structure in Prisma Client. The primary key fields are combined into a single object with a generated name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    firstName_lastName: {\n      firstName: 'Paul',\n      lastName: 'Panther',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Prisma Schema with Post and Comment Models\nDESCRIPTION: Basic Prisma schema showing Post and Comment models with a one-to-many relationship\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/850-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int       @id @default(autoincrement())\n  title    String\n  content  String\n  likes    Int       @default(0)\n  comments Comment[]\n}\n\nmodel Comment {\n  id      Int    @id @default(autoincrement())\n  comment String\n  postId  Int\n  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)\n}\n```\n\n----------------------------------------\n\nTITLE: Enable All System Debugging\nDESCRIPTION: Setting the DEBUG environment variable to enable all possible debugging output using the * wildcard.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/700-debugging-and-troubleshooting/140-debugging.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DEBUG=\"*\"\n```\n\n----------------------------------------\n\nTITLE: Simplified findMany query without filters\nDESCRIPTION: Shows an equivalent way to write a query that returns all records when no filter is needed, instead of using undefined values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany()\n```\n\n----------------------------------------\n\nTITLE: Modern Driver Adapter Implementation (6.6.0+)\nDESCRIPTION: Current implementation pattern for LibSQL driver adapter in Prisma v6.6.0 and later, showing the simplified direct adapter instantiation\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/200-database-drivers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaLibSQL } from '@prisma/adapter-libsql'\nimport { PrismaClient } from '../prisma/prisma-client'\n\nconst adapter = new PrismaLibSQL({\n  url: env.LIBSQL_DATABASE_URL,\n  authToken: env.LIBSQL_DATABASE_TOKEN,\n})\n\nconst prisma = new PrismaClient({ adapter })\n```\n\n----------------------------------------\n\nTITLE: Configuring Accelerate Connection String in Environment Variables\nDESCRIPTION: Sets up the environment variables for connecting to Prisma Accelerate. Includes both the Accelerate connection string and the direct database connection string for migrations and introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# New Accelerate connection string with generated API_KEY\nDATABASE_URL=\"prisma://accelerate.prisma-data.net/?api_key=__API_KEY__\"\n\n# Previous (direct) database connection string\n# DATABASE_URL=\"postgresql://user:password@host:port/db_name?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL Data Source Configuration in Prisma\nDESCRIPTION: Demonstrates how to configure a basic PostgreSQL data source in Prisma schema using the datasource block. Includes provider specification and connection URL configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/02-data-sources.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Schema to PlanetScale Database\nDESCRIPTION: Command to push the Prisma schema to the PlanetScale database using Prisma's db push CLI command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Defining SetNull Referential Actions in Prisma Schema\nDESCRIPTION: This example shows how to use SetNull referential action. When a User is deleted or their id is updated, the authorId in related Posts is set to NULL. This only works for optional relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User?  @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: SetNull)\n  authorId Int?\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Database Column Type with Native Attribute\nDESCRIPTION: Shows how to use native type attributes to specify a more specific database column type, overriding the default mapping\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/830-prisma-type-system.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id\n  title     String\n  createdAt DateTime @db.Date\n}\n```\n\n----------------------------------------\n\nTITLE: Saving the Database Connection String\nDESCRIPTION: This code snippet saves the database connection string in the .env file, which is necessary for interacting with the Prisma Postgres database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIU...\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client and Basic Query Structure in TypeScript\nDESCRIPTION: This snippet shows how to import and initialize PrismaClient, set up an async main function for database queries, and handle connection closure and error handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Prisma Tools Documentation\nDESCRIPTION: This code snippet defines the frontmatter for the Prisma Tools documentation page. It sets the title, meta title, meta description, and some display options for the page.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Tools'\nmetaTitle: 'Tools'\nmetaDescription: 'Learn about important Prisma tools.'\nstaticLink: true\nhide_table_of_contents: true\n---\n```\n\n----------------------------------------\n\nTITLE: Adding UNIQUE Constraint for 1-1 Relations in MySQL\nDESCRIPTION: SQL statement to add a UNIQUE constraint to the 'user' column in the 'Profile' table. This fixes the 1-1 relation between User and Profile that was previously recognized as a 1-n relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `Profile` ADD UNIQUE (`user`);\n```\n\n----------------------------------------\n\nTITLE: Querying with Custom Unique Constraint in Prisma Client\nDESCRIPTION: Example showing how to query a user using the custom admin_identifier unique constraint in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    admin_identifier: {\n      firstName: \"Alice\",\n      lastName: \"Smith\",\n      isAdmin: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Database Introspection\nDESCRIPTION: Terminal command to introspect the database schema using Prisma CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Native Type Mapping from Prisma to CockroachDB\nDESCRIPTION: Complete mapping of Prisma ORM scalar types to their corresponding CockroachDB native types, including string, boolean, numeric, and special types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/840-cockroachdb.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nString   -> STRING\nBoolean  -> BOOL\nInt      -> INT4\nBigInt   -> INT8\nFloat    -> FLOAT8\nDecimal  -> DECIMAL(65,30)\nDateTime -> TIMESTAMP(3)\nJson     -> JSONB\nBytes    -> BYTES\n```\n\n----------------------------------------\n\nTITLE: Setting Relation Mode for PlanetScale in Prisma Schema\nDESCRIPTION: Configures the datasource block to use PlanetScale with MySQL provider and sets relationMode to 'prisma' to emulate foreign key constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  //add-next-line\n  relationMode = \"prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with findFirstOrThrow in JavaScript\nDESCRIPTION: This snippet demonstrates how to handle custom errors using the new findFirstOrThrow method, wrapping the call in a try-catch block to adapt the error handling behavior in Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/001-rejectonnotfound-changes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  await prisma.user.findFirstOrThrow({\n    where: { name: 'Alice' },\n  })\n} catch (err) {\n  if (err.code === 'P2025') {\n    throw new UserNotFoundError()\n  }\n  throw err\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Seed Script Main Function - TypeScript\nDESCRIPTION: Calls the `main` function defined in the seed script to initiate the database seeding process. This line ensures that the asynchronous seeding logic runs when the script is executed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n//add-next-line\nmain();\n```\n\n----------------------------------------\n\nTITLE: Using Array Parameters in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to pass an array of user IDs to a TypedSQL query that uses PostgreSQL's ANY operator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { getUsersByIds } from '@prisma/client/sql'\n\nconst prisma = new PrismaClient()\n\nconst userIds = [1, 2, 3]\nconst users = await prisma.$queryRawTyped(getUsersByIds(userIds))\nconsole.log(users)\n```\n\n----------------------------------------\n\nTITLE: Querying with Custom Named Composite Primary Key in Prisma Client\nDESCRIPTION: This TypeScript snippet demonstrates how to query a User using a custom-named composite primary key in Prisma Client. The 'fullName' key is used instead of the default generated name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    fullName: {\n      firstName: 'Paul',\n      lastName: 'Panther',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Relations API to Retrieve User Posts in Prisma Client\nDESCRIPTION: Demonstrates Prisma Client's fluent relations API to traverse relationships between models, retrieving Post records belonging to a User by first finding a Profile, then accessing its related User and their Posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst posts = await prisma.profile\n  .findUnique({\n    where: { id: 1 },\n  })\n  .user()\n  .posts()\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Prisma ORM vs Sequelize\nDESCRIPTION: Compares how to delete a single record in both ORMs. Prisma uses the delete method with a where clause, while Sequelize calls destroy on the model instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.delete({\n  where: {\n    id: 10,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.destroy()\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI as a Development Dependency\nDESCRIPTION: This command installs the Prisma CLI as a development dependency in your Node.js project. The Prisma CLI is essential for initializing Prisma in your project and managing database migrations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Scalar Lists with Default Values in Prisma Schema\nDESCRIPTION: Shows how to set default values for scalar lists including strings and enums in both database types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_45\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             Int      @id @default(autoincrement())\n  posts          Post[]\n  favoriteColors String[] @default([\"red\", \"yellow\", \"purple\"])\n  roles          Role[]   @default([USER, DEVELOPER])\n}\n\nenum Role {\n  USER\n  DEVELOPER\n  ADMIN\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  posts          Post[]\n  favoriteColors String[] @default([\"red\", \"yellow\", \"purple\"])\n  roles          Role[]   @default([USER, DEVELOPER])\n}\n\nenum Role {\n  USER\n  DEVELOPER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma migrate with D1 adapter in TypeScript\nDESCRIPTION: This example demonstrates how to configure Prisma migrate to use the D1 driver adapter. It sets up environment variables and defines an async adapter function for database communication.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport type { PrismaConfig } from 'prisma'\nimport { PrismaD1HTTP } from '@prisma/adapter-d1'\n\n// import your .env file\nimport 'dotenv/config'\n\ntype Env = {\n  CLOUDFLARE_D1_TOKEN: string\n  CLOUDFLARE_ACCOUNT_ID: string\n  CLOUDFLARE_DATABASE_ID: string\n}\n\nexport default {\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema.prisma'),\n\n  migrate: {\n    async adapter(env) {\n      return new PrismaD1HTTP({\n        CLOUDFLARE_D1_TOKEN: env.CLOUDFLARE_D1_TOKEN,\n        CLOUDFLARE_ACCOUNT_ID: env.CLOUDFLARE_ACCOUNT_ID,\n        CLOUDFLARE_DATABASE_ID: env.CLOUDFLARE_DATABASE_ID,\n      })\n    },\n  },\n} satisfies PrismaConfig<Env>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install the Node.js dependencies defined in package.json for the Prisma Heroku example project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Unsupported Data Type in Prisma Schema\nDESCRIPTION: Example of using the Unsupported type in a Prisma schema to represent data types not supported by Prisma Client. It shows how to define fields with custom database types and default values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_21\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Star {\n  id       Int                    @id @default(autoincrement())\n  position Unsupported(\"circle\")?\n  example1 Unsupported(\"circle\")\n  circle   Unsupported(\"circle\")? @default(dbgenerated(\"'<(10,4),11>'::circle\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Introspected MongoDB Schema\nDESCRIPTION: Generated Prisma schema after introspecting the MongoDB database, showing the inferred Post and User models with their fields and data types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-typescript-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title  String\n  userId String @db.ObjectId\n}\n\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String\n}\n```\n\n----------------------------------------\n\nTITLE: Introspected Schema Without Relations\nDESCRIPTION: Example of an introspected schema missing relationship definitions between User and Post models\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/850-planetscale.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  title     String   @db.VarChar(255)\n  content   String?\n  authorId  Int\n\n  @@index([authorId])\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sample CockroachDB Schema\nDESCRIPTION: SQL commands to create a sample schema with User, Post, and Profile tables in CockroachDB. The schema includes primary keys, foreign keys, and various column types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  name STRING(255),\n  email STRING(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE \"Post\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  title STRING(255) UNIQUE NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n  content STRING,\n  published BOOLEAN NOT NULL DEFAULT false,\n  \"authorId\" INT8 NOT NULL,\n  FOREIGN KEY (\"authorId\") REFERENCES \"User\"(id)\n);\n\nCREATE TABLE \"Profile\" (\n  id INT8 PRIMARY KEY DEFAULT unique_rowid(),\n  bio STRING,\n  \"userId\" INT8 UNIQUE NOT NULL,\n  FOREIGN KEY (\"userId\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Reading User Records with Prisma Client\nDESCRIPTION: Demonstrates how to query all users from the database using Prisma Client's findMany operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma\nDESCRIPTION: This command initializes Prisma in the specified output directory, preparing the project for database schema management and client generation. It creates the prisma directory and prisma.schema file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Types in Prisma Schema\nDESCRIPTION: Shows how to define and use composite types (embedded documents) in MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_23\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Product {\n  id     String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name   String\n  photos Photo[]\n}\n\ntype Photo {\n  height Int\n  width  Int\n  url    String\n}\n```\n\n----------------------------------------\n\nTITLE: Absolute Path SQLite Connection Configuration\nDESCRIPTION: Demonstrates how to configure a SQLite connection using an absolute file system path to the database file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/500-sqlite.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:/Users/janedoe/dev.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Raw Query Type Mapping in TypeScript\nDESCRIPTION: Example showing how Prisma maps database types to JavaScript types when using $queryRaw. Demonstrates mapping of BigInt, Bytes, Decimal and Date types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.$queryRaw`SELECT bigint, bytes, decimal, date FROM \"Table\";\"`;\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Database Configuration\nDESCRIPTION: Presents a sample Docker Compose configuration (`docker-compose.yml`) for defining a MySQL database.  This configuration includes the host, port, user, and password necessary to connect to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nPRISMA_CONFIG: |\n  port: 4466\n  databases:\n    default:\n      connector: mysql\n      host: mysql\n      port: 3306\n      user: root\n      password: randompassword\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma ORM in Database Package with npm\nDESCRIPTION: Installs Prisma ORM as a dev dependency in the newly created database package using npm, providing ORM capabilities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory in Terminal\nDESCRIPTION: Commands to create a new project directory called 'hello-prisma' and navigate into it using the terminal.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection Command\nDESCRIPTION: Terminal command to introspect the database using Prisma CLI. This command reads the DATABASE_URL from the .env file and generates a Prisma schema based on the database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Defining a String Field with Bit(1) Type in MySQL\nDESCRIPTION: Example of mapping a String field to the Bit(1) data type in MySQL using Prisma Migrate. This shows how to customize the underlying database representation of a field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_14\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Model {\n  /* ... */\n  myField String @db.Bit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prisma Generate to Postinstall Script in package.json\nDESCRIPTION: This snippet shows how to add a postinstall script to the package.json file that runs prisma generate. This ensures Prisma Client is generated after dependencies are installed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/600-vercel-caching-issue.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\" {\n    \"postinstall\": \"prisma generate\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Update package.json Scripts (JSON)\nDESCRIPTION: Updates the `scripts` section in `package.json`. It removes the default `test` script and adds `dev` to run the server (`node index.js`) and `db:deploy` to apply migrations and generate Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  //delete-start\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n  //delete-end\n  //add-start\n  \"dev\": \"node index.js\",\n  \"db:deploy\": \"npx prisma migrate deploy && npx prisma generate\"\n  //add-end\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CategoriesOnPosts by Assigned By and Post IDs in Prisma Client\nDESCRIPTION: This TypeScript snippet shows how to query CategoriesOnPosts records based on who assigned them and a list of Post IDs using Prisma Client in an explicit many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAssignments = await prisma.categoriesOnPosts.findMany({\n  where: {\n    assignedBy: 'Bob',\n    post: {\n      id: {\n        in: [9, 4, 10, 12, 22],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Migrate the posts query resolver with Prisma Client in JavaScript\nDESCRIPTION: This snippet shows the updated `posts` query resolver implementation using Prisma Client. It adjusts the existing resolver to fit the new structure, allowing a search by title or content. The snippet replaces the `prisma-binding` query logic with Prisma Client's `findMany` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    posts: (_, args, context) => {\n      return context.prisma.post.findMany({\n        where: {\n          OR: [\n            { title: { contains: args.searchString } },\n            { content: { contains: args.searchString } },\n          ],\n        },\n      })\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Migration File for D1 using Wrangler CLI\nDESCRIPTION: This command creates a new migration file for the D1 database using the Wrangler CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nnpx wrangler d1 migrations create __YOUR_DATABASE_NAME__ create_post_table\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Commands to create and navigate to the project directory\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-prismaPostgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Records Using TypeORM's delete Method in TypeScript\nDESCRIPTION: Shows how to perform batch deletes in TypeORM using the delete method on a repository. This approach allows deleting multiple records by passing an array of IDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nawait userRepository.delete([id1, id2, id3])\n```\n\n----------------------------------------\n\nTITLE: Testing Query Engine Binary Path\nDESCRIPTION: Command to report the paths to all binaries, demonstrating the use of the set environment variable for the query engine.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nnpx prisma -v\n```\n\n----------------------------------------\n\nTITLE: Disabling Pool Timeout in Prisma Schema\nDESCRIPTION: Example of disabling the pool timeout by setting pool_timeout to 0, allowing unlimited queue build-up for scenarios with many temporary queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?connection_limit=5&pool_timeout=0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Client Extensions for Custom Error Handling in JavaScript\nDESCRIPTION: Demonstrates how to use Prisma ORM 5 client extensions to replicate the behavior provided by rejectOnNotFound with custom errors, using async functions to wrap query calls.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/001-rejectonnotfound-changes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\n\nconst customErrorFunc = async (model, query, args) => {\n  try {\n    await query(args)\n  } catch (error: any) {\n    if (error.code === 'P2025') {\n      throw new Error(`${model} error`)\n    }\n    throw error;\n  }\n}\n\nconst prisma = (new PrismaClient()).$extends({\n  query: {\n    user: {\n      async findFirstOrThrow({ model, query, args }) {\n        return await customErrorFunc(model, query, args)\n      },\n      async findUniqueOrThrow({ model, query, args }) {\n        return await customErrorFunc(model, query, args)\n      },\n    },\n    post: {\n      async findFirstOrThrow({ model, query, args }) {\n        return await customErrorFunc(model, query, args)\n      },\n      async findUniqueOrThrow({ model, query, args }) {\n        return await customErrorFunc(model, query, args)\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Type Error: Incorrect operator data type\nDESCRIPTION: This is the TypeScript compiler error that is generated from the previous code snippet, illustrating the compile-time prevention of runtime errors through type safety.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] 16:13:50 ⨯ Unable to compile TypeScript:\nsrc/index.ts:39:5 - error TS2322: Type '{ gt: string; }' is not assignable to type 'number | IntNullableFilter'.\n  Type '{ gt: string; }' is not assignable to type 'IntNullableFilter'.\n    Types of property 'gt' are incompatible.\n      Type 'string' is not assignable to type 'number'.\n\n42     views: { gt: \"test\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Unique Constraint in Prisma Schema\nDESCRIPTION: Demonstrates how to create a composite unique constraint using authorId and title fields in a Post model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_18\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  createdAt  DateTime   @default(now())\n  title      String\n  published  Boolean    @default(false)\n  author     User       @relation(fields: [authorId], references: [id])\n  authorId   Int\n  categories Category[] @relation(references: [id])\n\n  @@unique([authorId, title])\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt  DateTime   @default(now())\n  title      String\n  published  Boolean    @default(false)\n  author     User       @relation(fields: [authorId], references: [id])\n  authorId   String     @db.ObjectId\n  categories Category[] @relation(references: [id])\n\n  @@unique([authorId, title])\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Cache Invalidation\nDESCRIPTION: Example of invalidating the entire cache using invalidateAll with error handling\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/400-api-reference.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await prisma.$accelerate.invalidateAll();\n} catch (e) {\n  if (e instanceof Prisma.PrismaClientKnownRequestError) {\n    if (e.code === \"P6003\") {\n      console.log(\n        \"The cache invalidation rate limit has been reached. Please try again later.\"\n      );\n    }\n  }\n  throw e;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Invalid Characters in SQL\nDESCRIPTION: Example SQL code showing table creation with names containing invalid characters that need sanitization during introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"42User\" (\n  _id SERIAL PRIMARY KEY,\n  _name VARCHAR(255),\n  two$two INTEGER\n);\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Binary Targets Configuration\nDESCRIPTION: Demonstrates binary target configuration for AWS Lambda deployment, specifying compatible runtime environments\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/650-caveats-when-deploying-to-aws-platforms.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nbinaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Module in Nuxt Config\nDESCRIPTION: Configuration options for the @prisma/nuxt module in nuxt.config.ts, showing available settings and their default values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  prisma: {\n    // Options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Refined Prisma Schema with Improved Naming\nDESCRIPTION: This updated Prisma schema shows improvements in naming conventions for relation fields. It renames fields like 'User' to 'author' in the Post model and adjusts the casing of relation fields for better API ergonomics.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique @db.VarChar(255)\n  name    String?  @db.VarChar(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Mapping Videos with Activity Data\nDESCRIPTION: This code snippet retrieves video entries from the database using Prisma and maps the results to an array of the defined `Video` types using the previously defined mapping function `toVideo`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst videoWithActivities = await prisma.video.findMany({\\n  include: { activity: true },\\n})\\nconst videos: Video[] = videoWithActivities.map(toVideo)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Unique Values Using Prisma ORM Relations in MongoDB\nDESCRIPTION: This Prisma schema demonstrates how to use relations to enforce unique values within a record. It defines an 'Address' model with a unique constraint and relates it to the 'Mailbox' model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_23\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Address {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String\n  mailbox   Mailbox? @relation(fields: [mailboxId], references: [id])\n  mailboxId String?  @db.ObjectId\n\n  @@unique([name])\n}\n\nmodel Mailbox {\n  id        String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String\n  addresses Address[] @relation\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Up with Prisma CLI\nDESCRIPTION: Experimental CLI commands to apply migrations to the database, with various options for specifying migration scope\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate up --experimental\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate up 2 --experimental\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate up \"First migration\" --experimental\n```\n\n----------------------------------------\n\nTITLE: Data Model Definition in Drizzle\nDESCRIPTION: Shows how to define equivalent User and Post tables using Drizzle's TypeScript-based schema definition, including field types and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  boolean,\n  integer,\n  pgTable,\n  serial,\n  text,\n  uniqueIndex,\n  varchar,\n} from 'drizzle-orm/pg-core'\n\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 256 }),\n  email: varchar('email', { length: 256 }).unique(),\n})\n\nexport const posts = pgTable('posts', {\n  id: serial('id').primaryKey(),\n  title: varchar('title', { length: 256 }).notNull(),\n  content: text('content'),\n  published: boolean('published'),\n  authorId: integer('author_id').references(() => users.id),\n})\n```\n\n----------------------------------------\n\nTITLE: EndsWith String Filtering in Prisma ORM and TypeORM\nDESCRIPTION: Comparison of how to filter records that end with a specific string using Prisma ORM's endsWith operator versus TypeORM's ILike with SQL wildcard at the beginning.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: { endsWith: 'Hello World' },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await postRepository.find({\n  where: {\n    title: ILike('%Hello World'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initial migration SQL script for SQL Server\nDESCRIPTION: Generated SQL script for the initial migration. It creates tables for Post, Profile, and User, including primary keys, foreign keys, and default constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [dbo].[Post] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [createdAt] DATETIME2 NOT NULL CONSTRAINT [Post_createdAt_df] DEFAULT CURRENT_TIMESTAMP,\n    [updatedAt] DATETIME2 NOT NULL,\n    [title] VARCHAR(255) NOT NULL,\n    [content] NVARCHAR(1000),\n    [published] BIT NOT NULL CONSTRAINT [Post_published_df] DEFAULT 0,\n    [authorId] INT NOT NULL,\n    CONSTRAINT [Post_pkey] PRIMARY KEY ([id])\n);\n\nCREATE TABLE [dbo].[Profile] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [bio] NVARCHAR(1000),\n    [userId] INT NOT NULL,\n    CONSTRAINT [Profile_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [Profile_userId_key] UNIQUE ([userId])\n);\n\nCREATE TABLE [dbo].[User] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [email] NVARCHAR(1000) NOT NULL,\n    [name] NVARCHAR(1000),\n    CONSTRAINT [User_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [User_email_key] UNIQUE ([email])\n);\n\nALTER TABLE [dbo].[Post] ADD CONSTRAINT [Post_authorId_fkey] FOREIGN KEY ([authorId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n\nALTER TABLE [dbo].[Profile] ADD CONSTRAINT [Profile_userId_fkey] FOREIGN KEY ([userId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Command in package.json - TypeScript\nDESCRIPTION: Configuration for the seed command in package.json when using TypeScript, including an optional transpile-only flag for improved performance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"prisma\": {\n  \"seed\": \"ts-node prisma/seed.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CUID as ID in Prisma Schema for MongoDB\nDESCRIPTION: Example of defining a CUID (Collision-resistant Unique IDentifier) as the ID field in a Prisma schema for MongoDB. It shows the use of the @id, @default, and @map attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_30\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(cuid()) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema Models\nDESCRIPTION: This snippet defines two Prisma models, User and Post, which are part of the initial schema before a migration. The model definitions are crucial for understanding the structure of the database that will be affected by the migrations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/60-generating-down-migrations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int     @id @default(autoincrement())\n  title    String  @db.VarChar(255)\n  content  String?\n  author   User    @relation(fields: [authorId], references: [id])\n  authorId Int\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User with Null Name Field in MongoDB\nDESCRIPTION: This TypeScript snippet shows how to create a user record in MongoDB with the name field explicitly set to null using Prisma Client. It demonstrates the difference between null and missing fields in MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst createNull = await prisma.user.create({\n  data: {\n    email: 'user1@prisma.io',\n    name: null,\n  },\n})\nconsole.log(createNull)\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Query\nDESCRIPTION: TypeScript code showing a Prisma query that retrieves active users with their organization and subscription details, including pagination and ordering.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/100-cursor.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst activeUsers = await prisma.user.findMany({\n  where: {\n    deletedAt: null,\n    organization: {\n      deletedAt: null,\n      subscription: {\n        deletedAt: null,\n        status: 'ACTIVE'\n      }\n    }\n  },\n  include: {\n    organization: {\n      include: {\n        subscription: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: 'desc'\n  },\n  skip: 0,\n  take: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Case Sensitive Filter for Posts - Drizzle - TypeScript\nDESCRIPTION: This snippet illustrates how to apply a case-sensitive filter on post titles using Drizzle. The filter is set using the 'like' condition in the 'where' clause to match titles exactly to 'Hello World'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// case sensitive filter\nconst posts = await db\n  .select()\n  .from(posts)\n  .where(like(posts.title, 'Hello World'))\n```\n\n----------------------------------------\n\nTITLE: Updating fullTextSearch Feature Configuration in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to update your Prisma schema configuration for the fullTextSearch feature, which is now generally available for MySQL. PostgreSQL users need to update to the specific feature flag.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  // delete-next-line\n  previewFeatures = [\"fullTextSearch\"]\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  // edit-next-line\n  previewFeatures = [\"fullTextSearchPostgres\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Express Controller with Prisma\nDESCRIPTION: This code snippet shows an Express controller that uses Prisma Client to create a new user. It retrieves the email and name from the request body and uses `prisma.user.create` to create a new user in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from '../client'\n\nexport class CreateUserAction {\n  async run(req: Request, res: Response) {\n    const { email, name } = req.body\n    \n    const result = await prisma.user.create({\n      data: {\n        email,\n        name,\n      },\n    })\n    \n    return res.json(result)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migration Command\nDESCRIPTION: Terminal command to generate and apply database migrations using prisma migrate dev CLI command with a descriptive migration name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name tags-model\n```\n\n----------------------------------------\n\nTITLE: Raw Queries in Prisma Transaction for MongoDB\nDESCRIPTION: This snippet demonstrates how to use raw MongoDB queries within a Prisma $transaction, including find, aggregate, and runCommand operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst [findRawData, aggregateRawData, commandRawData] =\n  await prisma.$transaction([\n    prisma.user.findRaw({\n      filter: { age: { $gt: 25 } },\n    }),\n    prisma.user.aggregateRaw({\n      pipeline: [\n        { $match: { status: 'registered' } },\n        { $group: { _id: '$country', total: { $sum: 1 } } },\n      ],\n    }),\n    prisma.$runCommandRaw({\n      aggregate: 'User',\n      pipeline: [\n        { $match: { name: 'Bob' } },\n        { $project: { email: true, _id: false } },\n      ],\n      explain: false,\n    }),\n  ])\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: Simple query to fetch all users from the database using Prisma Client's findMany method. Demonstrates basic read operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Connection for PostgreSQL in Prisma\nDESCRIPTION: Example of a PostgreSQL connection URL with SSL configuration parameters including SSL identity, password, and root certificate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?sslidentity=client-identity.p12&sslpassword=mypassword&sslcert=rootca.cert\n```\n\n----------------------------------------\n\nTITLE: Migrating User Query Implementation\nDESCRIPTION: Updated implementation of the user query with new Prisma Client API syntax and input types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = queryType({\n  definition(t) {\n    t.field('user', {\n      type: 'User',\n      args: {\n        userUniqueInput: arg({\n          type: 'UserUniqueInput',\n          nullable: false,\n        }),\n      },\n      resolve: (_, args, context) => {\n        return context.prisma.user.findUnique({\n          where: {\n            id: args.userUniqueInput?.id,\n            email: args.userUniqueInput?.email,\n          },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic One-to-Many Relation Schema (MongoDB)\nDESCRIPTION: Defines a basic one-to-many relation between User and Post models where one user can have multiple posts in MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/200-one-to-many-relations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  posts Post[]\n}\n\nmodel Post {\n  id       String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  author   User   @relation(fields: [authorId], references: [id])\n  authorId String @db.ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Run Prisma CLI locally\nDESCRIPTION: Demonstrates how to execute the locally installed Prisma CLI using `npx`.  This ensures the correct version of Prisma CLI is used within the project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Creating User with Missing Name Field in MongoDB\nDESCRIPTION: This TypeScript snippet demonstrates creating a user record in MongoDB without explicitly setting the name field, resulting in a missing field in the database but returned as null by Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst createMissing = await prisma.user.create({\n  data: {\n    email: 'user2@prisma.io',\n  },\n})\nconsole.log(createMissing)\n```\n\n----------------------------------------\n\nTITLE: Creating BigInt Fields in Prisma Client\nDESCRIPTION: Shows how to work with BigInt fields in Prisma Client, including creation and JSON serialization strategies for large integer values\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst newTypes = await prisma.sample.create({\n  data: {\n    revenue: BigInt(534543543534),\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify(\n  this,\n  (key, value) => (typeof value === 'bigint' ? value.toString() : value)\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Database Seed Command\nDESCRIPTION: This terminal command seeds the database with the initial data defined in the seed.ts file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db seed\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection Command\nDESCRIPTION: Terminal command to introspect the database and generate Prisma schema from existing database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Lists in Prisma Schema for MongoDB\nDESCRIPTION: Schema definition showing how to create a scalar list (String array) in a Prisma model for MongoDB. The User model contains an ObjectId, name, and a pets field which is a String array.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name String\n  //highlight-next-line\n  pets String[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Post Status\nDESCRIPTION: Example of updating a post record to change its published status using Prisma Client's update method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { title: 'Hello World' },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Path SQLite Connection Configuration\nDESCRIPTION: Shows how to configure a SQLite connection using a relative path to the database file in the same directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/500-sqlite.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:dev.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to import the PrismaClient class from '@prisma/client' and instantiate it. Includes comments explaining the code and file path metadata (`file=src/index.ts`) indicating the intended location of the code.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import required dependencies\nimport { PrismaClient } from '@prisma/client'\n\n// Initialize Prisma Client\nconst prisma = new PrismaClient()\n```\n\n----------------------------------------\n\nTITLE: Database Reset Command in Prisma\nDESCRIPTION: Command to reset the database when migration conflicts occur, removing all data and reapplying migrations from scratch.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/200-troubleshooting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate reset\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with User and Post Models\nDESCRIPTION: Prisma schema file defining the database connection, client generator, and data models. It includes a User model and a Post model with a one-to-many relationship between them.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Using PostUncheckedCreateInput Type\nDESCRIPTION: This snippet shows an example query using the PostUncheckedCreateInput type to create a new post with a direct authorId reference.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nprisma.post.create({\\n  data: {\\n    title: 'First post',\\n    content: 'Welcome to the first post in my blog...',\\n    authorId: 1,\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in a .env file. It provides an example URL for a PlanetScale MySQL database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://janedoe:mypassword@server.us-east-2.psdb.cloud/mydb?sslaccept=strict\"\n```\n\n----------------------------------------\n\nTITLE: Running Up Migration\nDESCRIPTION: This command applies the up migration named add_profile, creating a new migration directory with the changes. This step ensures that the database schema is updated before possibly applying the down migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/60-generating-down-migrations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name add_profile\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with Composite Types for MongoDB\nDESCRIPTION: A schema definition showing how to use composite types (Photo and Address) with MongoDB models. The schema includes Product and Order models with various field types including arrays, enums, and composite types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Product {\n  id     String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name   String  @unique\n  price  Float\n  colors Color[]\n  sizes  Size[]\n  photos Photo[]\n  orders Order[]\n}\n\nmodel Order {\n  id              String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  product         Product  @relation(fields: [productId], references: [id])\n  color           Color\n  size            Size\n  shippingAddress Address\n  billingAddress  Address?\n  productId       String   @db.ObjectId\n}\n\nenum Color {\n  Red\n  Green\n  Blue\n}\n\nenum Size {\n  Small\n  Medium\n  Large\n  XLarge\n}\n\ntype Photo {\n  height Int    @default(200)\n  width  Int    @default(100)\n  url    String\n}\n\ntype Address {\n  street String\n  city   String\n  zip    String\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Return Type Extraction with Prisma\nDESCRIPTION: Utilizes `Prisma.PromiseReturnType` to streamline the extraction of return types from functions, such as `getUsersWithPosts`, simplifying type management and improving readability.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/100-operating-against-partial-structures-of-model-types.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\ntype UsersWithPosts = Prisma.PromiseReturnType<typeof getUsersWithPosts>\n```\n\n----------------------------------------\n\nTITLE: Defining NoAction Referential Actions in Prisma Schema\nDESCRIPTION: This snippet demonstrates the use of NoAction referential action, which behaves similarly to Restrict but with database-specific differences. It prevents deleting or modifying a User if they have posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script\nDESCRIPTION: Terminal command to execute the Node.js script containing Prisma Client queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Creating User Table in Cloudflare D1\nDESCRIPTION: This SQL script creates a User table with an auto-incrementing id, email, and optional name field. It also creates a unique index on the email field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"email\" TEXT NOT NULL,\n    \"name\" TEXT\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n```\n\n----------------------------------------\n\nTITLE: Querying with Prisma: Type-safe field definition\nDESCRIPTION: This snippet demonstrates how Prisma ORM prevents referencing non-existent properties in the `where` clause. The TypeScript compiler throws an error if a property does not exist on the model, enhancing type safety.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishedPosts = await prisma.post.findMany({\n  where: {\n    published: true,\n    title: { contains: 'Hello World' },\n    viewCount: { gt: 0 }, // Caught by the TypeScript compiler\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reusable Error Adapter for findFirstOrThrow in JavaScript\nDESCRIPTION: Illustrates creating a reusable error adapter function for handling errors in multiple places using the findFirstOrThrow method. The adapter adapts errors into custom error types based on error codes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/001-rejectonnotfound-changes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst adaptError = (customThrowFn) => (error) => {\n  if (error.code === 'P2025') {\n    throw customThrowFn()\n  }\n  throw error\n}\n\nconst user = await prisma.user.findFirstOrThrow({\n  where: { name: 'Alice' },\n}).catch(adaptError(() => new MyCustomError())\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma ORM with Postgres Database\nDESCRIPTION: Runs a command to initialize Prisma ORM and set up a Prisma Postgres database, creating necessary files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --db --output ../app/generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL environment variable for Cloudflare Worker\nDESCRIPTION: This command sets the DATABASE_URL environment variable for a Cloudflare Worker using the wrangler CLI. It's an interactive command that prompts for the variable value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_17\n\nLANGUAGE: terminal\nCODE:\n```\nnpx wrangler secret put DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Sequelize ORM User Model Definition\nDESCRIPTION: Definition of a User model using Sequelize ORM, including field types, primary key, and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass User extends Model {}\nUser.init(\n  {\n    user_id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    name: Sequelize.STRING(255),\n    email: {\n      type: Sequelize.STRING(255),\n      unique: true,\n    },\n    isAdmin: Sequelize.BOOLEAN,\n  },\n  { sequelize, modelName: 'user' }\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client for Serverless or Edge Applications\nDESCRIPTION: Command to generate Prisma Client without the Query Engine for serverless or edge applications, reducing bundle size while using Accelerate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate --no-engine\n```\n\n----------------------------------------\n\nTITLE: Defining a User Model with Bytes Type in Prisma\nDESCRIPTION: This Prisma model demonstrates storing user data along with an optional binary avatar directly in the database using the Bytes type. The `avatarBytes` field is designated for large binary objects, such as images. This approach can be limited by increased storage and I/O load, slowing down database performance. Dependencies include having Prisma set up and configured to connect with your database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/1400-storing-blob-in-database.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  name  String?\n  // Storing raw image data directly in the database\n  avatarBytes Bytes?\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Writes with Prisma Client\nDESCRIPTION: This TypeScript snippet tests writing data to MongoDB using the Prisma Client. It requires successful generation of the Prisma Client and connectivity to the database. The script demonstrates creating a new user entry and outputs the result, confirming database write capability.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/08-upgrade-from-mongodb-beta.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\n\nasync function main() {\n  await prisma.$connect()\n  const user = await prisma.user.create({\n    data: {\n      email: 'alice@prisma.io',\n      name: 'Alice',\n    },\n  })\n  console.log(user)\n}\n\nmain()\n  .catch(console.error)\n  .finally(() => prisma.$disconnect())\n```\n\n----------------------------------------\n\nTITLE: Example CreateUser Mutation in GraphQL\nDESCRIPTION: A sample GraphQL mutation for creating a new user with name and email, returning the generated ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  createUser(data: { name: \"Alice\", email: \"alice@prisma.io\" }) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Directory Structure\nDESCRIPTION: Command to create the initial migration directory structure with a '0_init' folder for the baseline migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timestamp for @createdAt Fields\nDESCRIPTION: SQL command to add CURRENT_TIMESTAMP as default value for createdAt columns to replicate Prisma 1 @createdAt behavior.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"default$default\".\"Post\" ALTER COLUMN \"createdAt\" SET DEFAULT CURRENT_TIMESTAMP;\n```\n\n----------------------------------------\n\nTITLE: Reading List of Records with Prisma Client\nDESCRIPTION: Displays how to retrieve lists of user records using Prisma Client in both v1 and ORM 2. The ORM 2 syntax uses `findMany` for fetching lists. The output is an array of user objects.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst user = await prisma.users()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.findMany()\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Equivalent to Prisma 1 Data Model\nDESCRIPTION: This SQL schema represents the database structure that corresponds to the Prisma 1 data model. It creates tables for User, Post, Profile, and Category with their respective fields and relationships, including join tables for many-to-many relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\"User\" (\n    id character varying(25) PRIMARY KEY,\n    email text,\n    name text NOT NULL,\n    role text NOT NULL,\n    \"jsonData\" text\n);\nCREATE UNIQUE INDEX \"User_pkey\" ON\"User\"(id text_ops);\nCREATE UNIQUE INDEX \"default$default.User.email._UNIQUE\" ON\"User\"(email text_ops);\n\nCREATE TABLE\"Post\" (\n    id character varying(25) PRIMARY KEY,\n    title text NOT NULL,\n    published boolean NOT NULL,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    content text\n);\nCREATE UNIQUE INDEX \"Post_pkey\" ON\"Post\"(id text_ops);\n\nCREATE TABLE\"Profile\" (\n    id character varying(25) PRIMARY KEY,\n    bio text,\n    user character varying(25) REFERENCES\"User\"(id) ON DELETE SET NULL\n);\nCREATE UNIQUE INDEX \"Profile_pkey\" ON\"Profile\"(id text_ops);\n\nCREATE TABLE\"Category\" (\n    id character varying(25) PRIMARY KEY,\n    name text NOT NULL\n);\nCREATE UNIQUE INDEX \"Category_pkey\" ON\"Category\"(id text_ops);\n\nCREATE TABLE\"_PostToUser\" (\n    \"A\" character varying(25) NOT NULL REFERENCES\"Post\"(id) ON DELETE CASCADE,\n    \"B\" character varying(25) NOT NULL REFERENCES\"User\"(id) ON DELETE CASCADE\n);\nCREATE UNIQUE INDEX \"_PostToUser_AB_unique\" ON\"_PostToUser\"(\"A\" text_ops,\"B\" text_ops);\nCREATE INDEX \"_PostToUser_B\" ON\"_PostToUser\"(\"B\" text_ops);\n\nCREATE TABLE\"_CategoryToPost\" (\n    \"A\" character varying(25) NOT NULL REFERENCES\"Category\"(id) ON DELETE CASCADE,\n    \"B\" character varying(25) NOT NULL REFERENCES\"Post\"(id) ON DELETE CASCADE\n);\nCREATE UNIQUE INDEX \"_CategoryToPost_AB_unique\" ON\"_CategoryToPost\"(\"A\" text_ops,\"B\" text_ops);\nCREATE INDEX \"_CategoryToPost_B\" ON\"_CategoryToPost\"(\"B\" text_ops);\n```\n\n----------------------------------------\n\nTITLE: Defining User Filtering Input in Prisma GraphQL Schema\nDESCRIPTION: Specifies a complex input type for filtering User records with logical operators and field-specific comparison conditions for IDs, strings, and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ninput UserWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [UserWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [UserWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [UserWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  email: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  email_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  email_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  email_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  email_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  email_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  email_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  email_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  email_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  email_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  email_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  email_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  email_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  email_not_ends_with: String\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  role: Role\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  role_not: Role\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  role_in: [Role!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  role_not_in: [Role!]\n  posts_every: PostWhereInput\n  posts_some: PostWhereInput\n  posts_none: PostWhereInput\n  profile: ProfileWhereInput\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Method from Another in Prisma Model using TypeScript\nDESCRIPTION: Demonstration of calling a custom method from another within the same Prisma model. It uses the `Prisma.getExtensionContext(this).methodName` syntax to invoke methods, and highlights a limitation that such calls work only within the same model or extension context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/100-model.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  model: {\n    user: {\n      firstMethod() {\n        ...\n      },\n      secondMethod() {\n          Prisma.getExtensionContext(this).firstMethod()\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Posts Query Implementation\nDESCRIPTION: Updated implementation of the posts query with new Prisma Client API syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nqueryType({\n  definition(t) {\n    t.list.field('posts', {\n      type: 'Post',\n      args: {\n        searchString: stringArg({ nullable: true }),\n      },\n      resolve: (parent, { searchString }, context) => {\n        return context.prisma.post.findMany({\n          where: {\n            OR: [\n              { title: { contains: searchString } },\n              { content: { contains: searchString } },\n            ],\n          },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic One-to-Many Relation Schema (Relational DB)\nDESCRIPTION: Defines a basic one-to-many relation between User and Post models where one user can have multiple posts in a relational database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/200-one-to-many-relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n\nmodel Post {\n  id       Int  @id @default(autoincrement())\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Date Comparison Query\nDESCRIPTION: Raw query implementation for comparing date columns in SQLite databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function initiateDatesComparisonRawQuery() {\n  const response =\n    await prisma.$queryRaw`SELECT * FROM \"Project\" WHERE \"completedDate\" > \"dueDate\";`\n\n  console.log(response)\n}\n\nawait initiateDatesComparisonRawQuery()\n```\n\n----------------------------------------\n\nTITLE: Define Prisma Schema Model (Prisma)\nDESCRIPTION: Defines the database connection (`datasource db`), Prisma Client generator configuration (`generator client`) with a custom output path, and a `User` model within the `prisma/schema.prisma` file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  //add-start\n  output = \"../generated/prisma_client\"\n  //add-end\n}\n\n//add-start\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Deleting object: Prisma ORM\nDESCRIPTION: Deletes a user using Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nconst deletedUser = await prisma.user.delete({\n  where: {\n    id: 10,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client from Prisma Schema\nDESCRIPTION: This command reads your Prisma schema and generates the Prisma Client, creating TypeScript types, methods, and queries tailored to your schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/_install-prisma-client-partial.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Comparing Databases with Prisma Migrate Diff\nDESCRIPTION: This snippet demonstrates how to use the 'prisma migrate diff' command to compare two databases specified by their data source URLs and output a human-readable summary.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_29\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate diff \\\n  --from-url \"$DATABASE_URL\" \\\n  --to-url \"postgresql://login:password@localhost:5432/db2\"\n```\n\n----------------------------------------\n\nTITLE: SQL Migration to Convert M-N Relation to 1-N Relation\nDESCRIPTION: SQL commands to migrate data from a relation table to a foreign key column, creating a proper 1-n relation by adding an authorId column and transferring data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `Post` ADD COLUMN `authorId` VARCHAR(25);\nALTER TABLE `Post` ADD FOREIGN KEY (`authorId`) REFERENCES `User` (`id`);\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE Post, _PostToUser\nSET Post.authorId = _PostToUser.B\nWHERE Post.id = _PostToUser.A\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE `_PostToUser`;\n```\n\n----------------------------------------\n\nTITLE: Package.json Test Scripts Configuration\nDESCRIPTION: NPM scripts configuration for running tests with Docker and Prisma migrations. Includes commands for starting Docker container, running migrations, executing tests, and cleaning up.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/150-integration-testing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"docker:up\": \"docker compose up -d\",\n    \"docker:down\": \"docker compose down\",\n    \"test\": \"yarn docker:up && yarn prisma migrate deploy && jest -i\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema Model in Prisma\nDESCRIPTION: Prisma schema definition for a User model with fields for ID, email, name, and terms acceptance status.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id                       Int     @id @default(autoincrement())\n  email                    String  @unique\n  name                     String?\n  acceptTermsAndConditions Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: Introspection Result\nDESCRIPTION: This Prisma schema shows the result of introspecting a database created by the Prisma 1 migration. The `published` field is present, but lacks the `@default` attribute, because the default value was not stored as a database constraint.  This discrepancy requires manual intervention to align the schema with the intended behavior.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma showLineNumbers\nmodel Post {\n  id        String  @id\n  published Boolean\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Schema Changes\nDESCRIPTION: This command applies the pending Prisma schema migrations to the database. It ensures that the database schema matches the schema defined in the prisma/schema.prisma file, finalizing the database structure updates.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate deploy\n```\n\n----------------------------------------\n\nTITLE: Pushing Prisma Schema to PlanetScale Database\nDESCRIPTION: This command uses Prisma's db push CLI command to create the database tables based on the defined schema. It should be run after connecting to the main branch of the PlanetScale database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Studio CLI Command\nDESCRIPTION: Command to launch Prisma Studio interface at localhost:5555 for database interaction and data management\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/140-use-prisma-in-pnpm-workspaces.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm run studio\n```\n\n----------------------------------------\n\nTITLE: Sorting Users with Null Values First\nDESCRIPTION: This TypeScript snippet demonstrates sorting users by their 'name' field to display records with null values first. The 'nulls' option is set to 'first', which is also the default behavior when this option is omitted.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  orderBy: {\n    updatedAt: { sort: 'asc', nulls: 'first' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Schema Without Inheritance\nDESCRIPTION: Basic Prisma schema showing Video and Article models without inheritance implementation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Video {\n  id       Int    @id\n  url      String @unique\n  duration Int\n\n  user   User @relation(fields: [userId], references: [id])\n  userId Int\n}\n\nmodel Article {\n  id   Int    @id\n  url  String @unique\n  body String\n\n  user   User @relation(fields: [userId], references: [id])\n  userId Int\n}\n\nmodel User {\n  id       Int       @id\n  name     String\n  videos   Video[]\n  articles Article[]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client Code - Terminal\nDESCRIPTION: This command generates TypeScript/JavaScript client code based on your Prisma schema, which is needed for application logic to query the database. Run this after updating schema.prisma or after installing dependencies. Re-run whenever the schema changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Committing Files to Git Repository\nDESCRIPTION: Commands to add all files to the Git repository and create an initial commit.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/250-deploy-to-koyeb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m 'Initial commit'\n```\n\n----------------------------------------\n\nTITLE: Install Prisma ORM 2 CLI\nDESCRIPTION: Installs the Prisma ORM 2 CLI as a development dependency using npm. This allows you to use the `prisma` command for Prisma ORM 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma ORM and Dependencies\nDESCRIPTION: Installs Prisma ORM and tsx as development dependencies for managing Prisma functions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install tsx --save-dev\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB with findRaw() in TypeScript\nDESCRIPTION: Demonstrates using the findRaw() method to query MongoDB documents with a filter condition. This example finds users over age 25 and uses projection to exclude the _id field from the results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.findRaw({\n  filter: { age: { $gt: 25 } },\n  options: { projection: { _id: false } },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Database URL (.env)\nDESCRIPTION: Updates the `.env` file with the connection URL for the PostgreSQL database running in the Docker container. It specifies the user, password, host (`localhost`), port (5432), and database name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_12\n\nLANGUAGE: dotenv\nCODE:\n```\nDATABASE_URL=\"postgresql://postgres:prisma@localhost:5432/postgres?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Seed Command in package.json\nDESCRIPTION: Defines the seed command to populate the datasource when using Prisma db seed command\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"prisma\": {\n    \"seed\": \"node ./prisma/seed.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Queries in TypeScript\nDESCRIPTION: Example TypeScript code showing how to pass arguments to a parameterized TypedSQL query for filtering users by age range.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { getUsersByAge } from '@prisma/client/sql'\n\nconst prisma = new PrismaClient()\n\nconst minAge = 18\nconst maxAge = 30\nconst users = await prisma.$queryRawTyped(getUsersByAge(minAge, maxAge))\nconsole.log(users)\n```\n\n----------------------------------------\n\nTITLE: Implementing addPostToCategories resolver with Prisma Client\nDESCRIPTION: Implementation of the addPostToCategories mutation resolver using Prisma Client. It maps categoryIds to an array of objects with id properties and uses context.prisma.post.update to connect the categories to the post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    //highlight-start\n    addPostToCategories: (_, args, context, info) => {\n      const ids = args.categoryIds.map((id) => ({ id }))\n      return context.prisma.post.update({\n        where: {\n          id: args.postId,\n        },\n        data: {\n          categories: { connect: ids },\n        },\n      })\n    },\n    //highlight-end\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example for Prisma Migrations\nDESCRIPTION: Shows the typical folder structure for Prisma migrations, with timestamped folders containing migration.sql files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/070-migration-histories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmigrations/\n    └─ 20210313140442_init/\n      └─ migration.sql\n    └─ 20210313140442_added_job_title/\n      └─ migration.sql\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Datasource for Prisma\nDESCRIPTION: Example of a datasource configuration in the Prisma schema file for a SQLite database. This configuration is required before using commands like db pull or db push.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:my-database.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for Link Table Relation\nDESCRIPTION: SQL statements generated by Prisma 1 to create tables for User and Post models with a relation table _PostToUser to handle the relationship.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"_PostToUser\" (\n  \"A\" VARCHAR(25) NOT NULL REFERENCES \"Post\"(id) ON DELETE CASCADE,\n  \"B\" VARCHAR(25) NOT NULL REFERENCES \"User\"(id) ON DELETE CASCADE\n);\nCREATE UNIQUE INDEX \"_PostToUser_AB_unique\" ON \"_PostToUser\"(\"A\" text_ops,\"B\" text_ops);\nCREATE INDEX \"_PostToUser_B\" ON \"_PostToUser\"(\"B\" text_ops);\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate to Create Database Tables\nDESCRIPTION: This terminal command creates and applies a new SQL migration to the database. The migration named 'init' will create the tables defined in the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Querying Unindexed Columns with Prisma - TypeScript\nDESCRIPTION: This snippet demonstrates querying the 'User' model in Prisma without using indexes on the 'name' column. It includes calls to 'findFirst' and 'count' methods with a 'where' clause, highlighting the potential performance issues that may arise due to full table scans.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/200-queries-on-unindexed-columns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findFirst({\n   where: {\n      name: \"Marc\"\n   }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findFirst({\n   where: {\n      name: \"Jon\"\n   }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.count({\n   where: {\n      name: \"Nikolas\"\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Data Migration from Separate Table\nDESCRIPTION: SQL command to migrate coinflips data from a separate table into a PostgreSQL array column\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_50\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE \"User\"\n  SET coinflips = t.flips\nFROM (\n  SELECT \"nodeId\", array_agg(VALUE ORDER BY position) AS flips\n  FROM \"User_coinflips\"\n  GROUP BY \"nodeId\"\n) t\nwhere t.\"nodeId\" = \"User\".\"id\";\n```\n\n----------------------------------------\n\nTITLE: Renamed Relation Fields in Prisma Schema\nDESCRIPTION: This snippet shows the Prisma schema with renamed relation fields to match their previous versions, improving readability and maintaining consistency with the old schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_23\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Post {\n  author     User?      @relation(fields: [authorId], references: [id])\n  categories Category[] @relation(references: [id])\n}\n\nmodel Profile {\n  user  String? @unique\n  owner User?   @relation(fields: [user], references: [id])\n}\n\nmodel Category {\n  posts Post[] @relation(references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post - POST Route\nDESCRIPTION: This route handles POST requests to create a new post associated with a user in the database. It takes the title, content, and author's email from the request body and responds with the created post object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(`/post`, async (req, res) => {\\n  const { title, content, authorEmail } = req.body\\n  const result = await prisma.post.create({\\n    data: {\\n      title: title,\\n      content: content,\\n      author: { connect: { email: authorEmail } },\\n    },\\n  })\\n  res.json(result)\\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a basic server load function\nDESCRIPTION: Initial TypeScript code for a SvelteKit server route that exports an empty load function, which will run on the server before page rendering.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function load() {}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Deno Project\nDESCRIPTION: Apply database schema migration using Prisma Migrate in a Deno environment\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/550-deploy-to-deno-deploy.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A npm:prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client\nDESCRIPTION: This command installs Prisma Client after the Prisma ORM 2 schema is ready, allowing the application to interact with the database using the new Prisma ORM 2 setup.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_24\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma using defineConfig helper in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Prisma using the defineConfig helper function. It sets up early access and specifies the schema location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport { defineConfig } from 'prisma/config';\n\nexport default defineConfig({\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema.prisma'),\n});\n```\n\n----------------------------------------\n\nTITLE: MySQL Number Comparison Query\nDESCRIPTION: Raw query implementation for comparing numeric columns in MySQL databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function initiateNumbersComparisonRawQuery() {\n  const response =\n    await prisma.$queryRaw`SELECT * FROM \\`public\\`.\\`Post\\` WHERE \\`likesCount\\` < \\`commentsCount\\`;`\n\n  console.log(response)\n}\n\nawait initiateNumbersComparisonRawQuery()\n```\n\n----------------------------------------\n\nTITLE: Performing Database Operations with Traced Prisma Client\nDESCRIPTION: A script that performs various database operations using the Prisma Client with tracing enabled. It creates users with posts, fetches published posts, creates and updates posts, demonstrating how the tracing captures different types of database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"./client\";\n\nasync function main() {\n  const user1Email = `alice${Date.now()}@prisma.io`;\n  const user2Email = `bob${Date.now()}@prisma.io`;\n\n  let alice, bob;\n\n  // 1. Create users concurrently\n  try {\n    [alice, bob] = await Promise.all([\n      prisma.user.create({\n        data: {\n          email: user1Email,\n          name: \"Alice\",\n          posts: {\n            create: {\n              title: \"Join the Prisma community on Discord\",\n              content: \"https://pris.ly/discord\",\n              published: true,\n            },\n          },\n        },\n        include: { posts: true },\n      }),\n      prisma.user.create({\n        data: {\n          email: user2Email,\n          name: \"Bob\",\n          posts: {\n            create: [\n              {\n                title: \"Check out Prisma on YouTube\",\n                content: \"https://pris.ly/youtube\",\n                published: true,\n              },\n              {\n                title: \"Follow Prisma on Twitter\",\n                content: \"https://twitter.com/prisma/\",\n                published: false,\n              },\n            ],\n          },\n        },\n        include: { posts: true },\n      }),\n    ]);\n    console.log(\n      `✅ Created users: ${alice.name} (${alice.posts.length} post) and ${bob.name} (${bob.posts.length} posts)`\n    );\n  } catch (err) {\n    console.error(\"❌ Error creating users:\", err);\n    return;\n  }\n\n  // 2. Fetch all published posts\n  try {\n    const publishedPosts = await prisma.post.findMany({\n      where: { published: true },\n    });\n    console.log(`✅ Retrieved ${publishedPosts.length} published post(s).`);\n  } catch (err) {\n    console.error(\"❌ Error fetching published posts:\", err);\n  }\n\n  // 3. Create & publish a post for Alice\n  let post;\n  try {\n    post = await prisma.post.create({\n      data: {\n        title: \"Join the Prisma Discord community\",\n        content: \"https://pris.ly/discord\",\n        published: false,\n        author: { connect: { email: user1Email } },\n      },\n    });\n    console.log(`✅ Created draft post for Alice (ID: ${post.id})`);\n  } catch (err) {\n    console.error(\"❌ Error creating draft post for Alice:\", err);\n    return;\n  }\n\n  try {\n    post = await prisma.post.update({\n      where: { id: post.id },\n      data: { published: true },\n    });\n    console.log(\"✅ Published Alice's post:\", post);\n  } catch (err) {\n    console.error(\"❌ Error publishing Alice's post:\", err);\n  }\n\n  // 4. Fetch all posts by Alice\n  try {\n    const alicePosts = await prisma.post.findMany({\n      where: { author: { email: user1Email } },\n    });\n    console.log(\n      `✅ Retrieved ${alicePosts.length} post(s) by Alice.`,\n      alicePosts\n    );\n  } catch (err) {\n    console.error(\"❌ Error fetching Alice's posts:\", err);\n  }\n}\n\n// Entrypoint\nmain()\n  .catch((err) => {\n    console.error(\"❌ Unexpected error:\", err);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n    console.log(\"🔌 Disconnected from database.\");\n  });\n```\n\n----------------------------------------\n\nTITLE: Safe Parameterized SQL Query Execution Using $queryRawUnsafe in Prisma\nDESCRIPTION: Demonstrates safe use of $queryRawUnsafe with parameterized queries, where variables are represented by symbols ($1, $2, etc. for PostgreSQL). This method prevents SQL injection by properly escaping variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst userName = \"Sarah\";\nconst email = \"sarah@prisma.io\";\nconst result = await prisma.$queryRawUnsafe(\n  \"SELECT * FROM User WHERE (name = $1 OR email = $2)\",\n  userName,\n  email\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst userName = \"Sarah\";\nconst emailFragment = \"prisma.io\";\nconst result = await prisma.$queryRawUnsafe(\n  'SELECT * FROM \"User\" WHERE (name = $1 OR email ILIKE $2)',\n  userName,\n  `%${emailFragment}`\n);\n```\n\n----------------------------------------\n\nTITLE: Raw Query Type Casting in PostgreSQL\nDESCRIPTION: Examples of type casting in raw queries, showing how to handle PostgreSQL's LENGTH function with explicit type casting.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$queryRaw`SELECT LENGTH(${42});`;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$queryRaw`SELECT LENGTH(${42}::text);`;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$queryRaw`SELECT ${1.5}::int as int`;\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relation with Email Reference\nDESCRIPTION: Shows how to reference a unique email field instead of ID in a one-to-one relation between User and Profile models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/100-one-to-one-relations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  profile Profile?\n}\n\nmodel Profile {\n  id        Int    @id @default(autoincrement())\n  user      User   @relation(fields: [userEmail], references: [email])\n  userEmail String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for Blog Application\nDESCRIPTION: This Prisma schema defines a SQLite database with Post and User models. It sets up relationships between users and posts, and includes fields for post content and user information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/03-fullstack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma.sql Helper with $queryRaw\nDESCRIPTION: Demonstrates using the Prisma.sql helper with $queryRaw to construct a query with variables. This approach maintains SQL injection protection while providing more flexibility.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst email = \"emelie@prisma.io\";\nconst result = await prisma.$queryRaw(Prisma.sql`SELECT * FROM User WHERE email = ${email}`);\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - Initial State\nDESCRIPTION: The initial Prisma schema defines the database connection and generator configuration.  It specifies the database provider (e.g., PostgreSQL) and the URL used to connect to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\n\"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \\\"postgresql\\\"\n  url      = env(\\\"DATABASE_URL\\\")\n}\n\ngenerator client {\n  provider = \\\"prisma-client-js\\\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Listing All API Keys for an Environment\nDESCRIPTION: This command lists all API keys associated with a specified environment by providing the environment ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform apikey show \\\n--environment $INSERT_ENVIRONMENT_ID \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Using null in findMany query to filter records\nDESCRIPTION: Demonstrates how using null as a filter value in a findMany query will search for records where the specified column has a null value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    name: null,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized JSON Field\nDESCRIPTION: The Prisma schema after introspection following the conversion of a TEXT column to a proper JSON type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_30\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String @id\n  //highlight-next-line\n  jsonData Json?\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client for Older Versions (Below 5.2.0)\nDESCRIPTION: Command to generate Prisma Client with the --accelerate flag for Prisma versions below 5.2.0 but above 5.0.0.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate --accelerate\n```\n\n----------------------------------------\n\nTITLE: Reading Single Record with Prisma Client\nDESCRIPTION: This snippet demonstrates how to read a single user record by ID using Prisma Client in both v1 and ORM 2. Dependencies include Prisma Client. The input is the user's ID, and the output is the user object. In v2, the method is `findUnique` instead of direct user access.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst user = await prisma.user({ id: 1 })\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.findUnique({\n  where: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL/CockroachDB Number Comparison Query\nDESCRIPTION: Raw query implementation for comparing numeric columns in PostgreSQL or CockroachDB databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function initiateNumbersComparisonRawQuery() {\n  const response =\n    await prisma.$queryRaw`SELECT * FROM \"public\".\"Post\" WHERE \"likesCount\" < \"commentsCount\";`\n\n  console.log(response)\n}\n\nawait initiateNumbersComparisonRawQuery()\n```\n\n----------------------------------------\n\nTITLE: Filtering on Object Property in MySQL\nDESCRIPTION: Query to find users where a specific property in a JSON object matches a given value using MySQL syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: '$.petName',\n      equals: 'Claudine',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying All Prisma Client Operations\nDESCRIPTION: Creates an extension that applies custom logic to all Prisma Client operations, including both model operations and raw queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    $allOperations({ model, operation, args, query }) {\n      /* your custom logic for modifying all Prisma Client operations here */\n      return query(args)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Command to generate the Prisma Client code based on your schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nprisma generate\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Cloud Connection URL Example\nDESCRIPTION: This example demonstrates the structure of a connection URL for a CockroachDB Serverless or Dedicated database hosted on CockroachDB Cloud. It includes placeholders for user credentials and cluster details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://<myusername>:<mypassword>@<short-id>.<region>.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full&sslrootcert=$HOME/.postgresql/root.crt&options=--<mycluster>\"\n```\n\n----------------------------------------\n\nTITLE: Using npx to run local Prisma CLI - JavaScript\nDESCRIPTION: This command utilizes npx to run the locally installed Prisma CLI in the project directory, allowing you to execute Prisma commands without global installation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Transactions with Prisma ORM\nDESCRIPTION: Demonstrates Prisma's implicit transactions through nested writes. This example creates a user and multiple posts in a single atomic operation without explicitly defining a transaction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    email: 'bob.rufus@prisma.io',\n    name: 'Bob Rufus',\n    Post: {\n      create: [\n        { title: 'Working at Prisma' },\n        { title: 'All about databases' },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Boolean Deleted Field to Post Model\nDESCRIPTION: Code snippet showing how to add a Boolean field named 'deleted' to the Post model with a default value of false. This field is used to track soft-deleted records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/100-soft-delete-middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int     @id @default(autoincrement())\n  ...\n  deleted Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Tags using Implicit Relations\nDESCRIPTION: TypeScript code snippet demonstrating how to create a new post with multiple tags using Prisma Client's create operation with an implicit many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.post.create({\n  data: {\n    title: 'Types of relations',\n    tags: { create: [{ name: 'dev' }, { name: 'prisma' }] },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using autoincrement() for ID Generation\nDESCRIPTION: Demonstrates how to use autoincrement() function to generate sequential integer IDs in relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_70\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int    @id @default(autoincrement())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Contains String Filtering in Prisma ORM and TypeORM\nDESCRIPTION: Comparison of how to filter records that contain a specific string in a field using Prisma ORM's contains operator versus TypeORM's ILike with SQL wildcards.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: { contains: 'Hello World' },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await postRepository.find({\n  where: {\n    title: ILike('%Hello World%'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script\nDESCRIPTION: Terminal command to execute the Node.js script containing Prisma Client queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Uninstall Prisma 1 CLI locally\nDESCRIPTION: Uninstalls the locally installed Prisma 1 CLI using npm. This step is important to avoid confusion and potential conflicts when using the `prisma` command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n# remove local installation\nnpm uninstall prisma1\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Postgres Database URL Environment Variable\nDESCRIPTION: Command to set the DATABASE_URL environment variable for connecting to Prisma Postgres instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/115-import-from-existing-database-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=__API_KEY__\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI in Node.js Project\nDESCRIPTION: Adds the Prisma CLI as a development dependency to an existing Node.js project using npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for Relational Databases\nDESCRIPTION: This snippet demonstrates how to define a Prisma schema for relational databases, including data source, generator, and model definitions for Post and User.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Datasource in Prisma Schema\nDESCRIPTION: Basic configuration for connecting Prisma to a PostgreSQL database using environment variables for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table in PostgreSQL\nDESCRIPTION: SQL statement to create a users table with columns for ID, name, email and admin status. Includes primary key, unique constraint and default values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  user_id SERIAL PRIMARY KEY NOT NULL,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  isAdmin BOOLEAN NOT NULL DEFAULT false\n);\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client in Node.js\nDESCRIPTION: This code demonstrates how to use Prisma Client to query all users from the database and log the results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Single Field Unique Constraint - MongoDB\nDESCRIPTION: Example showing model structure with unique ID field for MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_48\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @default(auto()) @map(\"_id\") @db.ObjectId\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dual Connection URLs for Supabase\nDESCRIPTION: Configuration of both pooled and direct database connections for Supabase. Includes DATABASE_URL for application connections and DIRECT_URL for CLI operations like migrations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/880-supabase.mdx#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# Connect to Supabase via connection pooling with Supavisor.\nDATABASE_URL=\"postgres://postgres.[your-supabase-project]:[password]@aws-0-[aws-region].pooler.supabase.com:6543/postgres?pgbouncer=true\"\n\n# Direct connection to the database. Used for migrations.\nDIRECT_URL=\"postgres://postgres.[your-supabase-project]:[password]@aws-0-[aws-region].pooler.supabase.com:5432/postgres\"\n```\n\n----------------------------------------\n\nTITLE: Updating User Bio with Prisma Client\nDESCRIPTION: This code snippet demonstrates how to update a user's bio using Prisma Client's `user.update` method. It defines a GraphQL mutation field called `updateBio` that takes a `userUniqueInput` and a `bio` as arguments. The `resolve` function updates the user's profile with the provided bio, creating a new profile if one doesn't exist, using the new Prisma Client API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    t.field('updateBio', {\n      type: 'User',\n      args: {\n        userUniqueInput: arg({\n          type: 'UserUniqueInput',\n          nullable: false,\n        }),\n        bio: stringArg(),\n      },\n      resolve: (_, args, context) => {\n        //highlight-start\n        return context.prisma.user.update({\n          where: {\n            id: args.userUniqueInput?.id,\n            email: args.userUniqueInput?.email,\n          },\n          data: {\n            profile: {\n              create: { bio: args.bio },\n            },\n          },\n        })\n        //highlight-end\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Binding for Heroku Node.js Application\nDESCRIPTION: Code snippet showing how to properly configure port binding in a Node.js application for Heroku deployment. Uses environment variable PORT with a fallback to port 3000.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst PORT = process.env.PORT || 3000\nconst server = app.listen(PORT, () => {\n  console.log(`app running on port ${PORT}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fields in Prisma Schema for Relational Databases\nDESCRIPTION: This example demonstrates how to make a field optional in Prisma for relational databases using the ? type modifier. The content field is optional while title remains required.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  id      Int     @id @default(autoincrement())\n  title   String\n  content String?\n}\n\nmodel Tag {\n  name String @id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Model for User Schema (Prisma Schema)\nDESCRIPTION: This code snippet defines a Prisma model for a User entity with fields for id, email, and an optional name. It demonstrates setting up unique and default value constraints necessary for ensuring data integrity.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Single Field Unique Constraint - Relational DB\nDESCRIPTION: Example showing how to specify a unique constraint on a required String field in a relational database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_47\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  email String @unique\n  name  String\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio to Manage Database Records\nDESCRIPTION: This command launches Prisma Studio, a visual interface for managing database records, allowing you to create User records for the example application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Data Source in Prisma Schema\nDESCRIPTION: Demonstrates how to set up a MongoDB data source in a Prisma schema file, using a connection string with authentication and database details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = \"mongodb+srv://root:password@cluster1.test1.mongodb.net/testing?retryWrites=true&w=majority\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma MySQL Datasource\nDESCRIPTION: Defines the `datasource` block within `schema.prisma` for connecting to a MySQL database. It specifies the `mysql` provider and the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied\nDESCRIPTION: Marks the baseline migration as already applied in the _prisma_migrations table, preventing it from being re-run on deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/30-baselining.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Standardizing CUID Length to VARCHAR(30)\nDESCRIPTION: SQL commands to update VARCHAR column lengths from 25 to 30 characters for ID fields to match CUID requirements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"default$default\".\"Category\" ALTER COLUMN \"id\" SET DATA TYPE character varying(30);\nALTER TABLE \"default$default\".\"Post\" ALTER COLUMN \"id\" SET DATA TYPE character varying(30);\nALTER TABLE \"default$default\".\"Profile\" ALTER COLUMN \"id\" SET DATA TYPE character varying(30);\nALTER TABLE \"default$default\".\"Profile\" ALTER COLUMN \"user\" SET DATA TYPE character varying(30);\nALTER TABLE \"default$default\".\"User\" ALTER COLUMN \"id\" SET DATA TYPE character varying(30);\n```\n\n----------------------------------------\n\nTITLE: Implementing TopBlock Component in Markdown\nDESCRIPTION: Demonstrates the usage of the TopBlock component, which is required at the top of each page to avoid styling issues.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<TopBlock>\n\nThis page describes how to use [MDX](https://mdxjs.com/) components (e.g. code blocks) in the Prisma docs.\n\nComponents not listed here are part of the [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features)\n\n</TopBlock>\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 GraphQL Datamodel with Enum Type\nDESCRIPTION: Example of a Prisma 1 datamodel using GraphQL syntax with an enum type definition.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  role: Role\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UNIQUE Constraint to Foreign Key Column in SQL\nDESCRIPTION: SQL command to add a UNIQUE constraint to a foreign key column in the Profile table, which helps Prisma correctly recognize 1-1 relations during introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `Profile`\n  ADD CONSTRAINT userId_unique UNIQUE (`user`);\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project Structure in the Terminal - Terminal\nDESCRIPTION: This command initializes a new Prisma setup in your project directory, creating the prisma folder and essential files like schema.prisma and .env for configuration. Dependencies include the Prisma CLI installed via npm. Run this in your project root to start using Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Explicit Relations Query\nDESCRIPTION: The JSON structure returned when querying posts with their tags using an explicit many-to-many relation, which includes the relation table data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"title\": \"Types of relations\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"postId\": 1,\n        \"tagId\": 1,\n        \"tag\": {\n          \"id\": 1,\n          \"name\": \"prisma\"\n        }\n      },\n      {\n        \"id\": 2,\n        \"postId\": 1,\n        \"tagId\": 2,\n        \"tag\": {\n          \"id\": 2,\n          \"name\": \"dev\"\n        }\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Relational Database User-Profile Schema Definition\nDESCRIPTION: Example Prisma schema showing User and Profile models for relational databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  profile Profile?\n}\n\nmodel Profile {\n  id     Int    @id @default(autoincrement())\n  bio    String\n  user   User   @relation(fields: [userId], references: [id])\n  userId Int    @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Code Block with File Icon\nDESCRIPTION: Demonstrates how to add a file icon to a code block by specifying the file name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Problematic Prisma Schema with Multiple Cascade Paths between User and Comment\nDESCRIPTION: This Prisma schema defines a data model with three entities (User, Post, Comment) where there are two different paths from Comment to User, both with default cascading referential actions, which causes validation errors in SQL Server.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       Int       @id @default(autoincrement())\n  comments Comment[]\n  posts    Post[]\n}\n\nmodel Post {\n  id       Int       @id @default(autoincrement())\n  authorId Int\n  author   User      @relation(fields: [authorId], references: [id])\n  comments Comment[]\n}\n\nmodel Comment {\n  id          Int  @id @default(autoincrement())\n  writtenById Int\n  postId      Int\n  writtenBy   User @relation(fields: [writtenById], references: [id])\n  post        Post @relation(fields: [postId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Application Logs in Koyeb\nDESCRIPTION: Example of application logs from the Koyeb control panel showing the server startup process.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/250-deploy-to-koyeb.mdx#2025-04-21_snippet_6\n\nLANGUAGE: no-lines\nCODE:\n```\nnode-72d14691\tstdout\t> prisma-koyeb@1.0.0 start\nnode-72d14691\tstdout\t> node src/index.js\nnode-72d14691\tstdout\t🚀 Server ready at: http://localhost:8080\nnode-72d14691\tstdout\t⭐️ See sample requests: http://pris.ly/e/ts/rest-express#3-using-the-rest-api\n```\n\n----------------------------------------\n\nTITLE: Add Default Constraints\nDESCRIPTION: SQL statements to add missing DEFAULT constraints to the User and Post tables for role and published columns.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `User` CHANGE `role` `role` ENUM('ADMIN', 'CUSTOMER') NOT NULL DEFAULT 'CUSTOMER';\nALTER TABLE `Post` CHANGE `published` `published` TINYINT(1) NOT NULL DEFAULT 0;\n```\n\n----------------------------------------\n\nTITLE: Declaring PostgreSQL Extensions with Schema Options\nDESCRIPTION: Demonstrates how to declare PostgreSQL extensions in the datasource block with custom schema and version options. Shows configuration for hstore, pg_trgm, and postgis extensions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/80-postgresql-extensions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stale-While-Revalidate Caching Strategy with Prisma Accelerate\nDESCRIPTION: This code snippet demonstrates how to use Prisma Accelerate's caching strategy directly in the codebase. It shows an example of implementing the stale-while-revalidate (SWR) caching strategy for a Prisma query, with a cache duration of 60 seconds.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/900-compare.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nawait prisma.user.findMany({\n  cacheStrategy: {\n    swr: 60,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Prisma Client Output Path Configuration\nDESCRIPTION: Configure a custom output path for Prisma Client to ensure consistent client generation across deployments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/300-deploy-to-vercel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL Environment Variable\nDESCRIPTION: Updates the .env file with the PostgreSQL connection string. This environment variable is used by Prisma to connect to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_6\n\nLANGUAGE: env\nCODE:\n```\n## This is a sample database URL, please use a valid URL\nDATABASE_URL=\"postgresql://janedoe:mypassword@localhost:5432/mydb?schema=sample\"\n```\n\n----------------------------------------\n\nTITLE: Defining User and Post models in Prisma schema\nDESCRIPTION: This snippet shows a Prisma schema defining User and Post models with relationships and constraints. It serves as an example for the subsequent introspection and migration steps.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/100-named-constraints.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  name  String @unique\n  posts Post[]\n}\n\nmodel Post {\n  id         Int    @id @default(autoincrement())\n  title      String\n  authorName String @default(\"Anonymous\")\n  author     User?  @relation(fields: [authorName], references: [name])\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variables in Bash\nDESCRIPTION: Examples of setting different debugging levels using the DEBUG environment variable in bash environments. Shows how to enable engine-level, client-level, or combined debugging output.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/700-debugging-and-troubleshooting/140-debugging.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# enable only `prisma:engine`-level debugging output\nexport DEBUG=\"prisma:engine\"\n\n# enable only `prisma:client`-level debugging output\nexport DEBUG=\"prisma:client\"\n\n# enable both `prisma-client`- and `engine`-level debugging output\nexport DEBUG=\"prisma:client,prisma:engine\"\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Server Connection URL in Environment\nDESCRIPTION: Defines the database connection URL with SQL authentication including server location, database name, credentials, and SSL settings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"sqlserver://localhost:1433;database=mydb;user=sa;password=r@ndomP@$$w0rd;trustServerCertificate=true\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Prisma Client\nDESCRIPTION: Provides an example of deleting a user record based on ID with Prisma Client. The v1 and ORM 2 examples show a change in the invocation method, emphasizing explicit `where` clause usage in ORM 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.deleteUser({ id: 1 })\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.delete({\n  where: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Read Replicas Extension\nDESCRIPTION: This command installs the `@prisma/extension-read-replicas` package as a project dependency, which is essential for enabling read replica functionality in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/200-read-replicas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n\"npm install @prisma/extension-read-replicas\"\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Composite Types Using Push\nDESCRIPTION: Shows how to append new values to a list of composite types, such as adding a photo to a product. Requires Prisma and a configured Prisma Client instance. Highlights the use of the `push` operation to augment embedded composite type array fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.update({\n  where: {\n    id: '62de6d328a65d8fffdae2c18',\n  },\n  data: {\n    photos: {\n      // Push a photo to the end of the photos list\n      push: [{ height: 100, width: 200, url: '1.jpg' }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Attributes for OpenTelemetry Tracing\nDESCRIPTION: JavaScript code snippet demonstrating how to customize resource attributes for OpenTelemetry tracing. This helps in grouping traces specific to your application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = new NodeTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'weblog',\n    [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing from Custom Location\nDESCRIPTION: Example of importing PrismaClient from a custom location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from './generated/client'\n```\n\n----------------------------------------\n\nTITLE: Create Migration - Terminal Command\nDESCRIPTION: Generates a new database migration to apply the schema changes that added the status column in the Post model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name add-status-column\n```\n\n----------------------------------------\n\nTITLE: Adding SafeQL Plugin to ESLint Configuration\nDESCRIPTION: ESLint configuration to add the SafeQL plugin for linting raw SQL queries in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('eslint').Linter.Config} */\nmodule.exports = {\n  \"plugins\": [..., \"@ts-safeql/eslint-plugin\"],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: Inline 1-1 Introspection as 1-n\nDESCRIPTION: This Prisma schema shows the result of introspecting a database with an inline 1-1 relation where no `UNIQUE` constraint was defined on the foreign key column. The `Profile` field in the `User` model now is a `Profile[]`, which indicates a one-to-many relationship instead of a one-to-one relationship.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_22\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma showLineNumbers\nmodel User {\n  id      String    @id\n  Profile Profile[]\n}\n\nmodel Profile {\n  id   String  @id\n  user String?\n  User User?   @relation(fields: [user], references: [id])\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Model to Prisma Schema\nDESCRIPTION: Updated Prisma schema that adds a new Tag model with an id and name field, plus establishes a many-to-many relationship with the Post model through tags and posts fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Prisma Schema with New Required Field\nDESCRIPTION: Updated Post model in Prisma schema adding a new required description field to demonstrate schema evolution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id          Int        @id @default(autoincrement())\n  title       String\n  description String\n  published   Boolean    @default(true)\n  content     String     @db.VarChar(500)\n  authorId    Int\n  author      User       @relation(fields: [authorId], references: [id])\n  categories  Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB ObjectId Generation with auto()\nDESCRIPTION: Shows how to use auto() function to generate ObjectId for MongoDB collections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_69\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name String?\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Generated Post Type\nDESCRIPTION: Shows the TypeScript type that Prisma automatically generates for the Post model, providing strong typing for all database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Generated by Prisma ORM\nexport type Post = {\n  id: number\n  title: string\n  content: string | null\n  published: boolean\n  authorId: number | null\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting an Existing Database Schema with Prisma - Terminal\nDESCRIPTION: This command uses Prisma CLI to introspect and pull an existing database schema, generating or updating schema.prisma based on the current database structure. Run this after setting the correct DATABASE_URL in your .env file. Useful for migrating legacy databases or synchronizing schema changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Prisma PostgreSQL Datasource\nDESCRIPTION: Defines the `datasource` block within `schema.prisma` for connecting to a PostgreSQL database. It specifies the `postgresql` provider and the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection Environment Variable\nDESCRIPTION: Example of setting the DATABASE_URL environment variable in a .env file for MySQL connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Updating Posts with Multiple Comments\nDESCRIPTION: Updates an existing post by adding multiple comments using Prisma Client's createMany operation within an update query. Shows how to handle one-to-many relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.post.update({\n    where: {\n      slug: 'my-first-post',\n    },\n    data: {\n      comments: {\n        createMany: {\n          data: [\n            { comment: 'Great post!' },\n            { comment: \"Can't wait to read more!\" },\n          ],\n        },\n      },\n    },\n  })\n  const posts = await prisma.post.findMany({\n    include: {\n      comments: true,\n    },\n  })\n\n  console.dir(posts, { depth: Infinity })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Extensions for Deno\nDESCRIPTION: Install required Prisma extensions and CLI utilities for Deno development, including Accelerate and dotenv\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/550-deploy-to-deno-deploy.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno install npm:@prisma/extension-accelerate\ndeno install npm:dotenv-cli\n```\n\n----------------------------------------\n\nTITLE: Reading User Records with Prisma Client\nDESCRIPTION: Query to fetch all user records from the database using Prisma Client's findMany method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst allUsers = await prisma.user.findMany()\nconsole.log(allUsers)\n```\n\n----------------------------------------\n\nTITLE: Setting CockroachDB Cloud connection URL in .env file\nDESCRIPTION: This example demonstrates the format of a connection URL for a CockroachDB Serverless or Dedicated database hosted on CockroachDB Cloud. It includes placeholders for user credentials and cluster details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://<myusername>:<mypassword>@<short-id>.<region>.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full&sslrootcert=$HOME/.postgresql/root.crt&options=--<mycluster>\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection URL with SSL Configuration\nDESCRIPTION: This example demonstrates a MySQL connection URL that includes SSL configuration parameters such as sslidentity, sslpassword, and sslcert for secure connections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE?sslidentity=client-identity.p12&sslpassword=mypassword&sslcert=rootca.cert\n```\n\n----------------------------------------\n\nTITLE: Running DB Pull with Alternative Schema Path\nDESCRIPTION: Example of using the 'prisma db pull' command with a custom schema file path. This allows you to specify a different location for the Prisma schema file instead of using the default location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_18\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db pull --schema=./alternative/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Initializing Deno Project with Prisma CLI\nDESCRIPTION: Set up a new Deno project using Prisma CLI, initializing the database and project structure with npm packages\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/550-deploy-to-deno-deploy.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir prisma-deno-deploy\ncd prisma-deno-deploy\ndeno run --reload -A npm:prisma@latest init --db\n```\n\n----------------------------------------\n\nTITLE: Generated SDL Schema for createDraft with Nexus\nDESCRIPTION: The GraphQL SDL schema automatically generated by Nexus based on the code-first definition, showing the createDraft mutation signature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  //highlight-next-line\n  createDraft(title: String!, content: String, authorId: String!): Post!\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Next.js Application to Vercel\nDESCRIPTION: Terminal command to initiate the deployment process using the Vercel CLI, which will build and deploy the Next.js application to Vercel's hosting platform.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_23\n\nLANGUAGE: terminal\nCODE:\n```\nvercel\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma using TypeScript's satisfies operator\nDESCRIPTION: This snippet shows how to configure Prisma using TypeScript's satisfies operator with the PrismaConfig type. It enables early access and sets the schema location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport type { PrismaConfig } from 'prisma'\n\nexport default {\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema.prisma'),\n} satisfies PrismaConfig\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Queries for Inheritance Models\nDESCRIPTION: Example queries demonstrating how to fetch data using both single-table and multi-table inheritance patterns.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst videos = await prisma.activity.findMany({\n  where: { type: 'Video' },\n})\n\nconst articles = await prisma.activity.findMany({\n  where: { type: 'Article' },\n})\n\nconst videoActivities = await prisma.activity.findMany({\n  where: { type: 'Video' },\n})\nconst videos: Video[] = videoActivities.map(activityToVideo)\n\nconst videos = await prisma.video.findMany({\n  include: { activity: true },\n})\n\nconst articles = await prisma.article.findMany({\n  include: { activity: true },\n})\n\nconst videoActivities = await prisma.activity.findMany({\n  where: { type: 'Video' }\n  include: { video: true }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SP-GiST Index with Default TextOps in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define an SP-GiST index on a `value` field of type `String` in the Prisma schema. It leverages the default `TextOps` operator class. The index is created using the `SpGist` type. The default `TextOps` operator class can be omitted in the schema definition.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  id    Int    @id\n  value String\n  //    ^ field type matching the operator class\n\n  @@index([value], type: SpGist)\n  //                     ^ index type\n  //       ^ using the default ops: TextOps\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic SQL Query for TypedSQL\nDESCRIPTION: Example SQL query that selects user data and counts related posts, demonstrating a basic TypedSQL implementation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT u.id, u.name, COUNT(p.id) as \"postCount\"\nFROM \"User\" u\nLEFT JOIN \"Post\" p ON u.id = p.\"authorId\"\nGROUP BY u.id, u.name\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema for Table with Default Value\nDESCRIPTION: This Prisma schema snippet shows how a table with a default value constraint is represented after introspection. It includes the model definition with default values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel cats {\n  id   Int     @id @default(autoincrement())\n  name String? @default(\"musti\")\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Commands for Git Version Control\nDESCRIPTION: These terminal commands initialize Git version control for the project, commit changes, and push them to a GitHub repository in preparation for deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\ngit add .\ngit commit -m \"Initial commit with Prisma Postgres integration\"\ngit branch -M main\ngit remote add origin https://github.com/<your-username>/<repository-name>.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Using UUID Generation in Prisma Model\nDESCRIPTION: Model definition showing how to use the gen_random_uuid() function from pgcrypto extension as a default value for an ID field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/120-native-database-functions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id String @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma Client for Edge Environments in JavaScript\nDESCRIPTION: This snippet shows how to import Prisma Client for edge environments in a JavaScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client/edge')\n\nconst prisma = new PrismaClient()\n// use `prisma` in your application to read and write data in your DB\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection URL Structure\nDESCRIPTION: This snippet demonstrates the structure of a MySQL connection URL with placeholders for user, password, host, port, and database name. It also includes examples of additional arguments that can be added to the URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE?connection_limit=5&socket_timeout=3\n```\n\n----------------------------------------\n\nTITLE: Fixing JSON Column Types in PostgreSQL\nDESCRIPTION: SQL command to alter column type from TEXT to JSON for proper type recognition in Prisma ORM 2 introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"default$default\".\"User\" ALTER COLUMN \"jsonData\" TYPE JSON  USING \"jsonData\"::json;\n```\n\n----------------------------------------\n\nTITLE: Using dotenv-expand for Variable Expansion in TypeScript\nDESCRIPTION: Shows how to use dotenv-expand to enable variable expansion across environment files in a TypeScript application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from 'dotenv'\nconst dotenvExpand = require('dotenv-expand')\n\nvar envFile = path.resolve(join(__dirname, \"myenv.env\"))\nvar mySqlEnv = dotenv.config({path: envFile})\ndotenvExpand.expand(mySqlEnv)\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client with SQL Flag\nDESCRIPTION: Commands to generate Prisma Client with the SQL flag, which creates TypeScript functions and types for SQL queries. Includes an option for watching file changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nprisma generate --sql\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprisma generate --sql --watch\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv-cli\nDESCRIPTION: This command installs the `dotenv-cli` package locally in your project as a development dependency. Cloudflare Workers do not directly support `.env` files, so `dotenv-cli` is used to load environment variables from `.dev.vars` when running Prisma CLI commands.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install -D dotenv-cli\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in TypeScript\nDESCRIPTION: Sets up a basic TypeScript file to use Prisma Client for database operations. It imports PrismaClient, creates an instance, and defines a main function for queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .catch(async (e) => {\n    console.error(e)\n    process.exit(1)\n  })\n  .finally(async () => {\n    await prisma.$disconnect()\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB User Model Definition in Prisma\nDESCRIPTION: Demonstrates a simple Prisma schema model for a User with an ID and email field, showing MongoDB-specific ID mapping.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection\nDESCRIPTION: This snippet configures the connection string for MongoDB in the Prisma environment file. It requires identifying the MongoDB connection string often found in docker-compose files or MongoDB Atlas. The connection string must include the 'default_default' database name to sync with Prisma 1 data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/08-upgrade-from-mongodb-beta.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mongodb://prisma:prisma@localhost:27017/default_default\"\n```\n\n----------------------------------------\n\nTITLE: SDL Schema Definition for User Query with Prisma Binding\nDESCRIPTION: Original SDL-first schema definition using prisma-binding, defining a user query that accepts a UserUniqueInput parameter.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user(userUniqueInput: UserUniqueInput): User\n  # ... other queries\n}\n\ninput UserUniqueInput {\n  id: String\n  email: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Prisma Client\nDESCRIPTION: Shows how record creation differs between Prisma Client v1 and v2. V1 uses a direct 'createUser' method with inline data, while v2 uses a more consistent pattern with 'user.create' and a nested data object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_38\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.createUser({\n  name: 'Alice',\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    name: 'Alice',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Prisma Client\nDESCRIPTION: Example of reading all User records from the database using the findMany query method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Name Collisions in Prisma Schema\nDESCRIPTION: Example Prisma schema showing how name collisions could occur with multiple foreign keys pointing to models with the same property names for reverse relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Invoice {\n  InvoiceId Int @id @default(autoincrement())\n\n  invoice_items InvoiceItem[]\n}\n\nmodel InvoiceItem {\n  InvoiceLineId Int @id @default(autoincrement())\n\n  InvoiceItemInvoiceId Int     @map(\"InvoiceId\")\n  invoices             Invoice @relation(fields: [InvoiceItemInvoiceId], references: [InvoiceId])\n\n  TrackId Int\n  tracks  Track @relation(fields: [TrackId], references: [TrackId])\n}\n\nmodel Track {\n  TrackId Int    @id @default(autoincrement())\n  Name    String\n\n  invoice_items InvoiceItem[]\n}\n```\n\n----------------------------------------\n\nTITLE: Object Key Filtering in Arrays\nDESCRIPTION: Demonstrates filtering on object key values within arrays, specifically for MySQL database connector.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"petName\": \"Claudine\",\n    \"petType\": \"House cat\",\n    \"insurances\": [\n      { \"insuranceID\": 92, \"status\": \"expired\" },\n      { \"insuranceID\": 12, \"status\": \"active\" }\n    ]\n  },\n  {\n    \"petName\": \"Sunny\",\n    \"petType\": \"Gerbil\"\n  },\n  {\n    \"petName\": \"Gerald\",\n    \"petType\": \"Corn snake\"\n  },\n  {\n    \"petName\": \"Nanna\",\n    \"petType\": \"Moose\"\n  }\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: '$[*].petType',\n      array_contains: 'Moose',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Client with Accelerate Extension\nDESCRIPTION: Code snippet showing how to add the Prisma Accelerate extension to the Prisma Client instance. This is required when using Prisma Postgres.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/110-import-from-existing-database-postgresql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Setting current timestamp on record creation in MongoDB\nDESCRIPTION: Creates a DateTime field for MongoDB that automatically sets to the current timestamp when a record is created. For MongoDB, this is implemented at the Prisma ORM level.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_87\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma DB Pull Command\nDESCRIPTION: Example of using the 'prisma db pull' command to introspect a database and generate a Prisma schema from it. This command analyzes the database structure and creates corresponding Prisma models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_17\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db pull\n```\n\n----------------------------------------\n\nTITLE: Installing @prisma/client Package using npm\nDESCRIPTION: This command installs the @prisma/client package, which is necessary for using Prisma Client in your project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/_install-prisma-client-partial.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fields in Prisma Schema for MongoDB\nDESCRIPTION: This example shows how to make a field optional in Prisma for MongoDB using the ? type modifier, while maintaining MongoDB-specific ObjectId handling for the ID field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  id      String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title   String\n  content String?\n}\n\nmodel Tag {\n  name String @id @map(\"_id\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prisma Accelerate extension with PrismaClient in TypeScript\nDESCRIPTION: This code demonstrates how to set up the required Prisma Accelerate extension with PrismaClient. The extension is needed because all traffic to Prisma Postgres is routed through Accelerate's connection pool.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/250-overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient()\n  .$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Updating Post Author using Nested Write in Prisma\nDESCRIPTION: This example shows how to use a nested write operation to update the author of a post in a single transaction with Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst updatedPost: Post = await prisma.post.update({\n  where: { id: 42 },\n  data: {\n    author: {\n      connect: { email: 'alice@prisma.io' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Converting M-N Relations to 1-N Relations\nDESCRIPTION: SQL commands to convert many-to-many relations to one-to-many by adding foreign key columns and migrating data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"default$default\".\"Post\" ADD COLUMN \"authorId\" character varying(25);\nALTER TABLE \"default$default\".\"Post\" ADD CONSTRAINT \"author\" FOREIGN KEY (\"authorId\") REFERENCES \"default$default\".\"User\"(\"id\");\nUPDATE \"default$default\".\"Post\" SET \"authorId\" = \"default$default\".\"_PostToUser\".\"B\" FROM \"default$default\".\"_PostToUser\" WHERE \"default$default\".\"_PostToUser\".\"A\" = \"default$default\".\"Post\".\"id\";\nDROP TABLE \"default$default\".\"_PostToUser\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Seed in package.json\nDESCRIPTION: This JSON snippet shows how to configure the Prisma seed script in the package.json file to utilize the seed.ts file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  //add-start\n  \"prisma\": {\n    \"seed\": \"tsx prisma/seed.ts\"\n  },\n  //add-end\n  \"dependencies\": {\n    \"@prisma/client\": \"^6.2.1\",\n    \"@prisma/extension-accelerate\": \"^1.2.1\",\n    \"next\": \"15.1.4\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"eslint\": \"^9\",\n    \"eslint-config-next\": \"15.1.4\",\n    \"postcss\": \"^8\",\n    \"prisma\": \"^6.2.1\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe SQL Query Execution Using $queryRawUnsafe in Prisma\nDESCRIPTION: Illustrates the use of $queryRawUnsafe, which can lead to SQL injection vulnerabilities if user input is not properly sanitized. This method should be used with caution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputString = '\"Sarah\" UNION SELECT id, title, content FROM Post'; // SQL Injection\nconst query = \"SELECT id, name, email FROM User WHERE name = \" + inputString;\nconst result = await prisma.$queryRawUnsafe(query);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Inserting User with Multi-field Composite ID - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the requirement of a unique combination of `firstName` and `lastName` to create a user with composite IDs in the defined User model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.create({\n  data: {\n    firstName: \"Alice\",\n    lastName: \"Smith\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying a Specific Operation in a Specific Model\nDESCRIPTION: Extends the findMany operation for the user model to only return users older than 18 years by modifying the where condition in the query arguments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    user: {\n      async findMany({ model, operation, args, query }) {\n        // take incoming `where` and set `age`\n        args.where = { ...args.where, age: { gt: 18 } }\n\n        return query(args)\n      },\n    },\n  },\n})\n\nawait prisma.user.findMany() // returns users whose age is greater than 18\n```\n\n----------------------------------------\n\nTITLE: Run specific Prisma 1 CLI version locally\nDESCRIPTION: Invokes a specific version of the Prisma 1 CLI using `npx`.  This is necessary when multiple Prisma versions are installed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI Dependencies\nDESCRIPTION: Command to install Prisma CLI as a development dependency in an existing Node.js/TypeScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Self-Relations in Prisma (MongoDB)\nDESCRIPTION: This Prisma model is adapted for MongoDB, defining multiple self-relations on a User model. It includes relations 'following' and 'followedBy', leveraging IDs to establish connections. The model accommodates MongoDB's document structure with object ID mappings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Prisma\nCODE:\n```\nmodel User {\n  id            String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name          String?\n  teacherId     String?  @db.ObjectId\n  teacher       User?    @relation(\"TeacherStudents\", fields: [teacherId], references: [id])\n  students      User[]   @relation(\"TeacherStudents\")\n  followedBy    User[]   @relation(\"UserFollows\", fields: [followedByIDs])\n  followedByIDs String[] @db.ObjectId\n  following     User[]   @relation(\"UserFollows\", fields: [followingIDs])\n  followingIDs  String[] @db.ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Prisma Client\nDESCRIPTION: Compares record deletion between Prisma Client v1 and v2. V1 uses a direct 'deleteUser' method with inline ID, while v2 uses 'user.delete' with a structured 'where' clause for consistency with other operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_40\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.deleteUser({ id: 1 })\n```\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.user.delete({\n  where: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Example for Altering Column Type\nDESCRIPTION: Example of a SQL migration file that alters a table column's data type. Used to demonstrate why editing existing migrations can cause inconsistencies.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/070-migration-histories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- AlterTable\nALTER TABLE \"Post\" ALTER COLUMN \"content\" SET DATA TYPE VARCHAR(560);\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: This snippet demonstrates how to retrieve all User records from the database using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Run inside `async` function\nconst allUsers = await prisma.user.findMany()\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database and User for Prisma\nDESCRIPTION: This SQL snippet shows how to create a new database and grant all privileges to a user for use with Prisma. It's recommended to use a dedicated user instead of root for security reasons.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nmysql -e \"CREATE DATABASE IF NOT EXISTS $DB_PRISMA;\"\nmysql -e \"GRANT ALL PRIVILEGES ON $DB_PRISMA.* TO $DB_USER@'%' IDENTIFIED BY '$DB_PASSWORD';\"\n```\n\n----------------------------------------\n\nTITLE: Setting local CockroachDB connection URL in .env file\nDESCRIPTION: This example shows the connection URL format for a locally hosted CockroachDB database. It uses the root user and disables SSL for local development.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://root@localhost:26257?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Filtering for Non-Matching JSON Field Value\nDESCRIPTION: Query to find users where the extendedPetsData field does not match a given JSON value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvar json = {\n  extendedPetsData: [{ name: 'Bob the dog' }, { name: 'Claudine the cat' }],\n}\n\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      not: json,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Server Connection URL with Escaped Characters\nDESCRIPTION: Example showing how to properly escape special characters in SQL Server connection URLs using curly braces. Demonstrates escaping characters in username and password fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsqlserver://HOST[:PORT];database=DATABASE;user={MyServer/MyUser};password={ThisIsA:SecurePassword;};encrypt=true\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Query Implementation\nDESCRIPTION: Sample code for querying PostgreSQL database using Prisma Client in a Cloudflare Worker.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaPg } from '@prisma/adapter-pg'\n\nexport default {\n  async fetch(request, env, ctx) {\n    const adapter = new PrismaPg({ connectionString: env.DATABASE_URL })\n    const prisma = new PrismaClient({ adapter })\n\n    const users = await prisma.user.findMany()\n    const result = JSON.stringify(users)\n    return new Response(result)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Database Migration SQL\nDESCRIPTION: SQL migration script that creates tables for Post, Profile, and User entities with their relationships and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE `Post` (\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `title` VARCHAR(255) NOT NULL,\n    `createdAt` TIMESTAMP(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),\n    `content` TEXT NULL,\n    `published` BOOLEAN NOT NULL DEFAULT false,\n    `authorId` INTEGER NOT NULL,\n\n    INDEX `authorId`(`authorId`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `Profile` (\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `bio` TEXT NULL,\n    `userId` INTEGER NOT NULL,\n\n    UNIQUE INDEX `userId`(`userId`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `User` (\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `name` VARCHAR(255) NULL,\n    `email` VARCHAR(255) NOT NULL,\n\n    UNIQUE INDEX `email`(`email`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- AddForeignKey\nALTER TABLE `Post` ADD CONSTRAINT `Post_ibfk_1` FOREIGN KEY (`authorId`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n\n-- AddForeignKey\nALTER TABLE `Profile` ADD CONSTRAINT `Profile_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n```\n\n----------------------------------------\n\nTITLE: Typing Raw Query Results with Prisma Generated Types\nDESCRIPTION: Demonstrates how to properly type the results of a $queryRaw query using Prisma's generated types, which provides better type safety and autocomplete support.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// import the generated `User` type from the `@prisma/client` module\nimport { User } from \"@prisma/client\";\n\nconst result = await prisma.$queryRaw<User[]>`SELECT * FROM User`;\n// result is of type: `User[]`\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client and Defining Main Function\nDESCRIPTION: Sets up Prisma Client, defines an async main function for database queries, and handles connection lifecycle.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Enum Mapping in Prisma Schema\nDESCRIPTION: Shows how to map enum values and names using @map and @@map attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nenum Type {\n  Blog,\n  Twitter @map(\"comment_twitter\")\n\n  @@map(\"comment_source_enum\")\n}\n```\n\n----------------------------------------\n\nTITLE: $executeRaw Method in TypeScript\nDESCRIPTION: The `$executeRaw` method executes a raw SQL command that alters the database state, such as updating or deleting records, and returns the number of affected rows. This snippet updates the `active` status for users whose email validation is true.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: number =\n  await prisma.$executeRaw`UPDATE User SET active = true WHERE emailValidated = true`;\n```\n\n----------------------------------------\n\nTITLE: Watching Schema Changes\nDESCRIPTION: This command continues monitoring the 'schema.prisma' file for changes. When a change is detected, it automatically regenerates the Prisma Client to reflect the updated schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nprisma generate --watch\n```\n\n----------------------------------------\n\nTITLE: Using Unsupported Field Type in Prisma Schema\nDESCRIPTION: Demonstrates how to represent an unsupported database type (circle) in the Prisma schema using the Unsupported field type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/70-unsupported-database-features.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Star {\n  id       Int                    @id @default(autoincrement())\n  position Unsupported(\"circle\")? @default(dbgenerated(\"'<(10,4),11>'::circle\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Install Prisma CLI\nDESCRIPTION: Installs the Prisma CLI as a development dependency in your project.  This command is the first step in adopting Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n\"npm install prisma --save-dev\"\n```\n\n----------------------------------------\n\nTITLE: Generating Migration SQL\nDESCRIPTION: Generates initial migration SQL by comparing an empty schema to the current database schema using prisma migrate diff command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Generated SDL for CreateUser Mutation\nDESCRIPTION: The GraphQL SDL representation of the createUser mutation after implementation with Nexus CRUD functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a New Netlify Deploy\nDESCRIPTION: This snippet shows how to initiate a deployment to Netlify after setting or updating environment variables, ensuring that the latest configurations are used in the deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/500-deploy-to-netlify.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Optimize Extension in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Prisma Client with the Optimize extension in TypeScript. It imports `PrismaClient` and `withOptimize`, then extends the Prisma Client instance with `withOptimize`. The `apiKey` and `enable` options configure the extension, ensuring Optimize runs only in the development environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/600-faq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withOptimize } from \"@prisma/extension-optimize\"\n\nconst prisma = new PrismaClient().$extends(\n  withOptimize({\n    apiKey: process.env.OPTIMIZE_API_KEY,\n    enable: process.env.ENVIRONMENT === 'development',\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a User - POST Route\nDESCRIPTION: This route handles POST requests to create a new user in the database using Prisma Client 2. It takes user data from the request body and responds with the created user object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(`/user`, async (req, res) => {\\n  const result = await prisma.user.create({\\n    data: {\\n      ...req.body,\\n    },\\n  })\\n  res.json(result)\\n})\n```\n\n----------------------------------------\n\nTITLE: PointOfInterest Migration SQL\nDESCRIPTION: SQL migration file generated by Prisma Migrate for creating the PointOfInterest table with a geography column for PostGIS.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"PointOfInterest\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" TEXT NOT NULL,\n    \"location\" geography(Point, 4326) NOT NULL,\n\n    CONSTRAINT \"PointOfInterest_pkey\" PRIMARY KEY (\"id\")\n);\n```\n\n----------------------------------------\n\nTITLE: Defining User Type with previous nexus-prisma\nDESCRIPTION: This code snippet shows how the `User` type was defined using the previous `nexus-prisma` package. It utilizes `prismaObjectType` to create a GraphQL type named 'User' and exposes specific fields from the Prisma model, including 'id', 'name', 'email', 'jsonData', 'role', and a modified 'posts' field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"const User = prismaObjectType({\\n  name: 'User',\\n  definition(t) {\\n    t.prismaFields([\\n      'id',\\n      'name',\\n      'email',\\n      'jsonData',\\n      'role'\\n      {\\n        name: 'posts',\\n        args: [], // remove the arguments from the `posts` field of the `User` type in the Prisma schema\\n      },\\n    ])\\n  },\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Paginating Lists in Prisma Client\nDESCRIPTION: Compares pagination implementation between Prisma Client v1 and v2. V1 uses 'skip' and 'first' parameters, while v2 uses 'skip' and 'take' to achieve the same pagination functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_36\n\nLANGUAGE: ts\nCODE:\n```\nconst posts = await prisma.posts({\n  skip: 5,\n  first: 10,\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.user.findMany({\n  skip: 5,\n  take: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Prisma 1 Dependencies\nDESCRIPTION: This command uninstalls the Prisma 1 and prisma-client-lib npm packages. This step is part of cleaning up the project after migrating from Prisma 1 to Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall prisma1 prisma-client-lib\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields During Record Creation in Prisma Client v2\nDESCRIPTION: Demonstrates a new capability in Prisma Client v2 that wasn't possible in v1: selecting specific fields to return when creating a record. This example creates a user and returns only the ID field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_42\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    name: 'Alice',\n  },\n  select: {\n    id: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Migration for D1 using Prisma Migrate Diff (Subsequent Migration)\nDESCRIPTION: This command generates a SQL migration by comparing the local D1 database to the updated Prisma schema. It outputs the result as SQL and stores it in a specified file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff \\\n  --from-local-d1 \\\n  --to-schema-datamodel ./prisma/schema.prisma \\\n  --script \\\n  --output migrations/0002_create_post_table.sql\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: Default Attribute Added via Introspection\nDESCRIPTION: This Prisma schema demonstrates the result of re-introspecting the database after adding the `DEFAULT` constraint via SQL. The `@default(false)` attribute is now present on the `published` field.  This indicates that introspection successfully recognized the database constraint.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma showLineNumbers\nmodel Post {\n  id        String  @id\n  //highlight-next-line\n  published Boolean @default(false)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Prisma Schema Prompt\nDESCRIPTION: Example prompt for generating a Prisma schema for a SaaS application with User, Organization, and Subscription models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/100-cursor.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCreate a Prisma schema for a SaaS app using PostgreSQL as a provider with `User`, `Organization`, and `Subscription` models, ensuring all models include `createdAt` and `updatedAt` DateTime fields with defaults, a soft-delete `deletedAt` field, and proper relationships between entities.\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for E-commerce Application\nDESCRIPTION: This schema defines the data model for an e-commerce application with CustomerOrder, OrderDetails, Product, Category, and Customer models. It establishes relationships between these entities such as one-to-many connections between customers and orders, products and categories.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/150-integration-testing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// Can have 1 customer\n// Can have many order details\nmodel CustomerOrder {\n  id           Int            @id @default(autoincrement())\n  createdAt    DateTime       @default(now())\n  customer     Customer       @relation(fields: [customerId], references: [id])\n  customerId   Int\n  orderDetails OrderDetails[]\n}\n\n// Can have 1 order\n// Can have many products\nmodel OrderDetails {\n  id        Int           @id @default(autoincrement())\n  products  Product       @relation(fields: [productId], references: [id])\n  productId Int\n  order     CustomerOrder @relation(fields: [orderId], references: [id])\n  orderId   Int\n  total     Decimal\n  quantity  Int\n}\n\n// Can have many order details\n// Can have 1 category\nmodel Product {\n  id           Int            @id @default(autoincrement())\n  name         String\n  description  String\n  price        Decimal\n  sku          Int\n  orderDetails OrderDetails[]\n  category     Category       @relation(fields: [categoryId], references: [id])\n  categoryId   Int\n}\n\n// Can have many products\nmodel Category {\n  id       Int       @id @default(autoincrement())\n  name     String\n  products Product[]\n}\n\n// Can have many orders\nmodel Customer {\n  id      Int             @id @default(autoincrement())\n  email   String          @unique\n  address String?\n  name    String?\n  orders  CustomerOrder[]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts with Prisma Client\nDESCRIPTION: This snippet demonstrates how to filter Post records that contain 'prisma' in either the title or content using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Run inside `async` function\nconst filteredPosts = await prisma.post.findMany({\n  where: {\n    OR: [\n      { title: { contains: 'prisma' } },\n      { content: { contains: 'prisma' } },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL for Migrating Data from Link Table to Foreign Key\nDESCRIPTION: SQL command to migrate data from the Prisma 1 link table to the new foreign key column in the Post table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE \"Post\" post\nSET \"authorId\" = post_to_user.\"B\"\nFROM \"_PostToUser\" post_to_user\nWHERE post_to_user.\"A\" = post.\"id\";\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 SQL Migration: Create Table\nDESCRIPTION: This SQL script creates a table named `Post`. The table has two columns: `id` (VARCHAR, PRIMARY KEY) and `published` (BOOLEAN).  Crucially, it lacks a `DEFAULT` constraint for the `published` column, causing issues during introspection in later Prisma ORM versions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  published BOOLEAN NOT NULL\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Manual Relations to Introspected Schema\nDESCRIPTION: Enhanced schema with manually added relations between User and Post models\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/850-planetscale.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  title     String   @db.VarChar(255)\n  content   String?\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n\n  @@index([authorId])\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Targets for Prisma in Node.js 16 and 18\nDESCRIPTION: This snippet configures the Prisma schema to specify binary targets for compatibility with Node.js 16 and 18. This ensures that the appropriate query engine is used during deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/500-deploy-to-netlify.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nbinaryTargets = [\"native\", \"rhel-openssl-1.0.x\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Config with Prisma Module\nDESCRIPTION: Configure Nuxt configuration file to include Prisma module and set experimental features\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  compatibilityDate: \"2024-11-01\",\n  modules: [\"@prisma/nuxt\"],\n  experimental: {\n    componentIslands: true,\n  },\n  devtools: { enabled: true },\n});\n```\n\n----------------------------------------\n\nTITLE: User Class Implementation in JavaScript\nDESCRIPTION: ES6 class definition for a User model that mirrors the database structure with constructor initialization.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass User {\n  constructor(user_id, name, email, isAdmin) {\n    this.user_id = user_id\n    this.name = name\n    this.email = email\n    this.isAdmin = isAdmin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Prisma Client generation to postinstall hook\nDESCRIPTION: This JavaScript snippet adds a `postinstall` script to the `package.json` file. The `prisma generate` command is executed automatically after package installation, ensuring that Prisma Client is always up-to-date with the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  // ...,\n  \"postinstall\": \"prisma generate\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma 2 Schema from Introspection\nDESCRIPTION: The Prisma ORM 2 schema generated from introspecting the database, showing models for User, Post, Profile, and Category with their fields and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String    @id @default(cuid())\n  email    String?   @unique\n  name     String\n  role     String\n  jsonData String?\n  Profile  Profile[]\n  Post     Post[]\n}\n\nmodel Post {\n  id        String     @id @default(cuid())\n  createdAt DateTime\n  updatedAt DateTime\n  title     String\n  content   String?\n  published Boolean\n  Category  Category[]\n  User      User[]\n}\n\nmodel Profile {\n  id   String  @id @default(cuid())\n  bio  String?\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n\nmodel Category {\n  id   String @id @default(cuid())\n  name String\n  Post Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client without rejectOnNotFound in JavaScript\nDESCRIPTION: Shows how to adjust the PrismaClient initialization when the rejectOnNotFound parameter was previously used. Suggests configuring findUniqueOrThrow or findFirstOrThrow methods instead.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/001-rejectonnotfound-changes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example 1\nconst prisma = new PrismaClient({\n  rejectOnNotFound: true,\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example 2\nconst prisma = new PrismaClient({\n  rejectOnNotFound: {\n    findUnique: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema: Initial User Model\nDESCRIPTION: Example of an initial Prisma schema with a simple User model before modifications\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int    @id\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring prisma-client Generator with All Options\nDESCRIPTION: This example shows a comprehensive configuration of the prisma-client generator, including all available options such as runtime, moduleFormat, and file extensions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  // Required\n  provider = \"prisma-client\"\n  output   = \"../src/generated/prisma\"\n\n  // Optional\n  runtime                = \"nodejs\"\n  moduleFormat           = \"esm\"\n  generatedFileExtension = \"ts\"\n  importFileExtension    = \"ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete SQL File with Parameter Type Definitions\nDESCRIPTION: Example SQL query with argument type definitions in comments, showing how to properly document parameter types for a user age filtering query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n-- @param {Int} $1:minAge\n-- @param {Int} $2:maxAge\nSELECT id, name, age\nFROM users\nWHERE age > $1 AND age < $2\n```\n\n----------------------------------------\n\nTITLE: Generating ULID values as MongoDB IDs using Prisma\nDESCRIPTION: Sets up a User model for MongoDB with an ID field that generates ULID values and maps to MongoDB's _id field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_81\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(ulid()) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Database URL configuration - default\nDESCRIPTION: Configures the `DATABASE_URL` environment variable inside the `.env` file when no service name and stage are specified in `prisma.yml`. This URL specifies how Prisma ORM 2 should connect to the MySQL database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://root:randompassword@localhost:3306/default@default\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project for MongoDB\nDESCRIPTION: Command sequence to create a new project directory, initialize npm, install Prisma dependencies, and initialize Prisma with MongoDB configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir blog\ncd blog\nnpm init -y\nnpm install -D prisma\nnpx prisma init --datasource-provider mongodb --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma with environment variables in TypeScript\nDESCRIPTION: This example demonstrates how to set up Prisma configuration with support for environment variables using dotenv.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'dotenv/config'\nimport type { PrismaConfig } from 'prisma'\n\nexport default {\n  earlyAccess: true,\n  // now you can use process.env variables\n} satisfies PrismaConfig\n```\n\n----------------------------------------\n\nTITLE: Applying D1 Migration to Remote Instance using Wrangler\nDESCRIPTION: This command applies the migration to the remote D1 database instance using the Wrangler CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpx wrangler d1 migrations apply __YOUR_DATABASE_NAME__ --remote\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Relation Mode\nDESCRIPTION: Configuration for enabling Prisma's relation mode to emulate foreign key constraints in PlanetScale.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserUniqueInput for User Queries\nDESCRIPTION: Defines an input type for uniquely identifying a user by either ID or email when making user queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ninput UserUniqueInput {\n  id: String\n  email: String\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Schema Definition for addPostToCategories with prisma-binding\nDESCRIPTION: GraphQL schema definition for the addPostToCategories mutation using SDL with prisma-binding, allowing posts to be assigned to multiple categories.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  addPostToCategories(postId: String!, categoryIds: [String!]!): Post\n  # ... other mutations\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Schema in Prisma\nDESCRIPTION: Prisma schema definition for a Post model with numeric fields for comparison (likesCount and commentsCount)\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id            Int      @id @default(autoincrement())\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n  title         String\n  content       String?\n  published     Boolean  @default(false)\n  author        User     @relation(fields: [authorId], references: [id])\n  authorId      Int\n  likesCount    Int\n  commentsCount Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for MongoDB Database\nDESCRIPTION: Example schema showing a complete Prisma configuration for MongoDB with User and Post models, including relations and enums. Shows MongoDB-specific configurations like ObjectId and auto-generated IDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n}\n\nmodel Post {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean  @default(false)\n  title     String\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  String   @db.ObjectId\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with Relation Mode\nDESCRIPTION: This Prisma schema defines a User and Post model with a one-to-many relationship, using the 'prisma' relation mode. It demonstrates the need for manual index creation on relation fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/420-relation-mode.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\nmodel User {\n  id    Int    @id\n  posts Post[]\n}\n\nmodel Post {\n  id     Int  @id\n  userId Int\n  user   User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Field Unique Constraint in Prisma Schema (MongoDB)\nDESCRIPTION: Example showing how to define a custom-named unique constraint across multiple fields in a User model for MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_52\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  firstName String\n  lastName  String\n  isAdmin   Boolean @default(false)\n\n  @@unique(fields: [firstName, lastName, isAdmin], name: \"admin_identifier\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Prisma Application\nDESCRIPTION: Commands to create a new project directory called 'hello-prisma' and navigate into it. This is the first step in setting up a new Prisma project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Sample Prisma Schema for Middleware Logging Example\nDESCRIPTION: The Prisma schema used in the middleware logging example, defining Post and User models with their relationships and a Role enum. The schema includes MySQL as the database provider.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/200-logging-middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  authorId  Int?\n  content   String?\n  id        Int     @id @default(autoincrement())\n  published Boolean @default(false)\n  title     String\n  user      User?   @relation(fields: [authorId], references: [id])\n  language  String?\n\n  @@index([authorId], name: \"authorId\")\n}\n\nmodel User {\n  email           String  @unique\n  id              Int     @id @default(autoincrement())\n  name            String?\n  posts           Post[]\n  extendedProfile Json?\n  role            Role    @default(USER)\n}\n\nenum Role {\n  ADMIN\n  USER\n  MODERATOR\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Posts Query Resolver in Nexus\nDESCRIPTION: Complete implementation of the posts query with a resolver that uses Prisma Client to search for posts by title or content, filtering based on the provided search string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = queryType({\n  definition(t) {\n    // ... previous queries\n\n    t.list.field('posts', {\n      type: 'Post',\n      nullable: false,\n      args: { searchString: stringArg() },\n      resolve: (_, args, context) => {\n        return context.prisma.post.findMany({\n          where: {\n            OR: [\n              {\n                title: { contains: args.searchString },\n              },\n              {\n                content: { contains: args.searchString },\n              },\n            ],\n          },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL for Creating Database Enum Type\nDESCRIPTION: SQL command to create a proper enum type in PostgreSQL for compatibility with Prisma ORM 2.x and later.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE \"Role\" AS ENUM ('CUSTOMER', 'ADMIN');\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Schema After Introspection of JSON Field\nDESCRIPTION: The resulting Prisma schema after introspecting a database with a TEXT column that was intended to be JSON in Prisma 1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_28\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String  @id\n  jsonData String?\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma with Your Own Database\nDESCRIPTION: Terminal command to initialize Prisma for use with your existing PostgreSQL database. This creates the basic Prisma schema file and environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --output ../src/generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Combining Prisma and Prometheus Client Metrics\nDESCRIPTION: Integrates Prisma Client metrics with prom-client library to collect and serve comprehensive application metrics via Express.js\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport express, { Request, Response } from 'express'\nimport prom from 'prom-client'\n\nconst app = express()\nconst port = 4000\nconst prisma = new PrismaClient()\n\nconst register = new prom.Registry()\nprom.collectDefaultMetrics({ register })\n\napp.get('/metrics', async (_req, res: Response) => {\n  const prismaMetrics = await prisma.$metrics.prometheus()\n  const appMetrics = await register.metrics()\n  res.end(prismaMetrics + appMetrics)\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Upgrading Prisma packages using npm\nDESCRIPTION: Commands to upgrade the prisma and @prisma/client packages to version 5 using npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client@5\nnpm install -D prisma@5\n```\n\n----------------------------------------\n\nTITLE: Installing jest-mock-extended\nDESCRIPTION: This command installs the jest-mock-extended package as a development dependency.  This package is used to help mock Prisma Client during unit testing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n\"npm install jest-mock-extended@2.0.4 --save-dev\"\n```\n\n----------------------------------------\n\nTITLE: Using undefined in findMany query which ignores the filter\nDESCRIPTION: Shows how using undefined as a filter value in a findMany query causes Prisma Client to ignore that filter completely, returning all records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: {\n    name: undefined,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Array Filtering in Prisma\nDESCRIPTION: Demonstrates how to filter users based on a simple string array field using array_contains operator in both PostgreSQL and MySQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\"Claudine\", \"Sunny\"]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      array_contains: ['Claudine'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL Wildcard Search with Prisma\nDESCRIPTION: This snippet executes the PostgreSQL full-text search query with a wildcard using Prisma's `$queryRawTyped` method. The search term `cat:*` includes a wildcard. The highlight-next-line comment indicates the important line of code.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n//highlight-next-line\n  const term = `cat:*`\n  const result = await prisma.$queryRawTyped(fullTextSearch(term))\n```\n\n----------------------------------------\n\nTITLE: Adding UNIQUE Constraint to Foreign Key in SQL\nDESCRIPTION: SQL command to add a UNIQUE constraint to a foreign key column, which helps Prisma ORM correctly recognize one-to-one relationships during introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"Profile\"\n  ADD CONSTRAINT userId_unique UNIQUE (\"user\");\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Prisma Client (Pre-upgrade)\nDESCRIPTION: TypeScript example showing how to catch and handle the P2014 error code in Prisma Client before upgrading to version 3.0.1 or above.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/150-referential-actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  try {\n    await prisma.user.delete({\n      where: {\n        id: 'some-long-id',\n      },\n    })\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError) {\n      if (error.code === 'P2014') {\n        console.log(error.message)\n      }\n    }\n  }\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Prisma ORM-level UUID Function in Prisma Schema\nDESCRIPTION: Demonstrates how to use the Prisma ORM-level uuid() function to set the default value of an id field in a Post model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/70-unsupported-database-features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id String @id @default(uuid())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar List Defaults in Prisma Schema for Relational Databases\nDESCRIPTION: Example of setting default values for scalar lists in Prisma schema for relational databases like PostgreSQL and CockroachDB. This feature is new in Prisma ORM 4.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             Int      @id @default(autoincrement())\n  posts          Post[]\n  favoriteColors String[] @default([\"red\", \"yellow\", \"purple\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Prisma Postgres Project with try-prisma Command\nDESCRIPTION: This command sets up a new Prisma project with a Postgres database using the try-prisma tool. It specifies the template, project name, and package manager.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx try-prisma@latest \\\n  --template databases/prisma-postgres \\\n  --name hello-prisma \\\n  --install npm\n```\n\n----------------------------------------\n\nTITLE: Applying Database Schema with Prisma Migrate\nDESCRIPTION: This terminal command runs the Prisma migration to create the initial database tables for the User and Post models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Database Connection in Wrangler\nDESCRIPTION: This TOML configuration snippet is for setting up the D1 database connection in the Wrangler configuration file, specifying database binding and identifiers.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nname = \"prisma-cloudflare-worker-example\"\nmain = \"src/index.ts\"\ncompatibility_date = \"2024-03-20\"\ncompatibility_flags = [\"nodejs_compat\"]\n\n[[d1_databases]]\nbinding = \"DB\" # i.e. available in your Worker on env.DB\ndatabase_name = \"__YOUR_D1_DATABASE_NAME__\" # to be replaced\ndatabase_id = \"__YOUR_D1_DATABASE_ID__\"     # to be replaced\n```\n\n----------------------------------------\n\nTITLE: Enabling Driver Adapters Preview Feature\nDESCRIPTION: Schema configuration to enable the driverAdapters preview feature for using custom database drivers.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Node Externals\nDESCRIPTION: Basic webpack configuration to set up node externals for serverless deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeExternals = require('webpack-node-externals')\n\nmodule.exports = {\n  // ... other configuration\n  externals: [nodeExternals()],\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in Prisma Client Constructor in JavaScript\nDESCRIPTION: For developers moving from rejectOnNotFound with custom handlers, this illustrates transitioning to using client extensions in Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/001-rejectonnotfound-changes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example 3\nconst prisma = new PrismaClient({\n  rejectOnNotFound: (err) => new Error('something'),\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example 4\nconst prisma = new PrismaClient({\n  rejectOnNotFound: {\n    findUnique: (err) => new Error('something'),\n  },\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example 5\nconst prisma = new PrismaClient({\n  rejectOnNotFound: {\n    findFirst: {\n      User: (err) => new Error('User error'),\n      Post: (err) => new Error('Post error'),\n    },\n    findUnique: {\n      User: (err) => new Error('User error'),\n      Post: (err) => new Error('Post error'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Invalid Syntax for Implicit Many-to-Many Relations in Prisma ORM 4\nDESCRIPTION: This code demonstrates the now-invalid syntax for implicit many-to-many relations in Prisma ORM 4, where using the references argument is no longer allowed and triggers a validation error.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  categories Category[] @relation(\"my-relation\", references: [id]) // <-- validation error\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  posts Post[] @relation(\"my-relation\", references: [id]) // <-- validation error\n}\n```\n\n----------------------------------------\n\nTITLE: SQL: Add DEFAULT CURRENT_TIMESTAMP to CreatedAt\nDESCRIPTION: This SQL statement modifies the `Post` table. It adds a `DEFAULT` constraint to the `createdAt` column, setting the default value to `CURRENT_TIMESTAMP`. This database-level default ensures that new records automatically have their `createdAt` field populated, aligning with Prisma 1's `@createdAt` behavior and enabling correct introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nALTER TABLE \"Post\"\n\tALTER COLUMN \"createdAt\" SET DEFAULT CURRENT_TIMESTAMP;\n```\n```\n\n----------------------------------------\n\nTITLE: Interactive Transaction Example with Prisma Client\nDESCRIPTION: TypeScript code demonstrating an interactive transaction using Prisma Client. This transaction creates a user and an audit record atomically.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction(async (tx) => {\n  const user = await tx.user.create({\n    data: {\n      email: email,\n    },\n  })\n\n  await tx.audit.create({\n    data: {\n      table: 'user',\n      action: 'create',\n      id: user.id,\n    },\n  })\n\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio Locally\nDESCRIPTION: Command to start Prisma Studio on localhost port 5555 for database interaction\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/700-tooling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Connection URL for Heroku-Hosted Database\nDESCRIPTION: An example of a DATABASE_URL for a PostgreSQL database hosted on Heroku, showing the complete connection string format with real-world values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://opnmyfngbknppm:XXX@ec2-46-137-91-216.eu-west-1.compute.amazonaws.com:5432/d50rgmkqi2ipus?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Database Schemas with Prisma Migrate Diff\nDESCRIPTION: Example of the 'prisma migrate diff' command format for comparing two database schema sources.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_28\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate diff --from-... <source1> --to-... <source2>\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Endpoint Configuration\nDESCRIPTION: Illustrates a sample `endpoint` configuration within `prisma.yml` for Prisma 1. This endpoint defines the HTTP address for accessing the Prisma 1 GraphQL API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_15\n\nLANGUAGE: yml\nCODE:\n```\nendpoint: http://localhost:4466/myproject/dev\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: Manually Added Default Attribute\nDESCRIPTION: This Prisma schema shows the manual addition of the `@default(false)` attribute to the `published` field in the `Post` model.  This workaround allows the Prisma Client to generate default values at runtime, mimicking Prisma 1's behavior. Running `prisma generate` will then produce code which sets the default value in the Prisma client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma line-number file=schema.prisma highlight=3;add showLineNumbers\nmodel Post {\n  id        String\n  //add-next-line\n  published Boolean @default(false)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating Users Query with @nexus/schema\nDESCRIPTION: Updated implementation of the users query using @nexus/schema and nexus-plugin-prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nschema.queryType({\n  definition(t) {\n    t.crud.users({\n      filtering: true,\n      ordering: true,\n      pagination: true,\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI\nDESCRIPTION: This snippet shows the command to install the Prisma CLI, which is a prerequisite for setting up Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Generating and Testing Prisma Client Reads\nDESCRIPTION: This TypeScript snippet demonstrates generating a Prisma Client to read data from MongoDB. It requires a Prisma schema pre-populated with model data. After generating the client, a script connects to the database, retrieves entries, and logs them, illustrating CRUD operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/08-upgrade-from-mongodb-beta.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\n\nasync function main() {\n  await prisma.$connect()\n  const posts = await prisma.post.findMany()\n  console.log(posts)\n}\n\nmain()\n  .catch(console.error)\n  .finally(() => prisma.$disconnect())\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection URL with Arguments\nDESCRIPTION: Demonstrates a MongoDB connection URL with additional arguments for SSL, connection timeout, and maximum pool size configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb://USERNAME:PASSWORD@HOST/DATABASE?ssl=true&connectTimeoutMS=5000&maxPoolSize=50\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a Scalar List Using push Method\nDESCRIPTION: Example of how to add a single value to a scalar list (coinflips) using the push method in an update operation. Available for PostgreSQL, CockroachDB, and MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userUpdate = await prisma.user.update({\n  where: {\n    id: 9,\n  },\n  data: {\n    coinflips: {\n      push: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware with Extended Prisma Client\nDESCRIPTION: Shows how to configure middleware and client-level methods before extending a Prisma client, maintaining access to $on and $use methods in extended clients.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\nprisma.$use(async (params, next) => {\n  console.log('This is middleware!')\n  return next(params)\n})\n\nconst xPrisma = prisma.$extends({\n  name: 'myExtension',\n  model: {\n    user: {\n      async signUp(email: string) {\n        await prisma.user.create({ data: { email } })\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: PostCreateBody Type for Function Argument\nDESCRIPTION: This snippet demonstrates how to define a TypeScript type for the argument of a function that creates a post, ensuring it matches the input of post.create.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype PostCreateBody = Prisma.Args<typeof prisma.post, 'create'>['data']\\n\\nconst addPost = async (postBody: PostCreateBody) => {\\n  const post = await prisma.post.create({ data: postBody })\\n  return post\\n}\\n\\nawait addPost(myData)\\n//              ^ guaranteed to match the input of `post.create`\n```\n\n----------------------------------------\n\nTITLE: Filtering Records Where Array Doesn't Contain a Value\nDESCRIPTION: Example of using NOT with scalar list filters to find posts where the tags array does not include a specific value. This query returns posts with arrays that don't contain 'databases' and empty arrays, but not NULL arrays.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    NOT: {\n      tags: {\n        has: 'databases',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Package.json Postinstall Script\nDESCRIPTION: Configuration of postinstall hook in package.json to generate Prisma client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    // ...\n    //add-next-line\n    \"postinstall\": \"prisma generate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Development Dependencies\nDESCRIPTION: Terminal command to install TypeScript as a development dependency, necessary for type checking and compiling the TypeScript files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install -D typescript\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL/CockroachDB Date Comparison Query\nDESCRIPTION: Raw query implementation for comparing date columns in PostgreSQL or CockroachDB databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function initiateDatesComparisonRawQuery() {\n  const response =\n    await prisma.$queryRaw`SELECT * FROM \"public\".\"Project\" WHERE \"completedDate\" > \"dueDate\";`\n\n  console.log(response)\n}\n\nawait initiateDatesComparisonRawQuery()\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - Microsoft SQL Server Datasource\nDESCRIPTION: Defines the Microsoft SQL Server datasource block in the Prisma schema. Specifies the database provider as 'sqlserver' and retrieves the connection URL from the `DATABASE_URL` environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\n\"datasource db {\n  provider = \\\"sqlserver\\\"\n  url      = env(\\\"DATABASE_URL\\\")\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Field Value Structure\nDESCRIPTION: Sample JSON structure that might be stored in the extendedPetsData field, showing a nested object with pet information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pet1\": {\n    \"petName\": \"Claudine\",\n    \"petType\": \"House cat\"\n  },\n  \"pet2\": {\n    \"petName\": \"Sunny\",\n    \"petType\": \"Gerbil\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Prisma Folder\nDESCRIPTION: Command to delete the Prisma folder when setting up with a pre-existing database. This allows for fresh introspection of the database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nrm -r prisma/\n```\n\n----------------------------------------\n\nTITLE: Filtering Groups with Having in Prisma\nDESCRIPTION: Shows how to use the 'having' clause in Prisma Client to filter groups based on aggregate values, such as returning only groups where the average profile views exceed 100.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupUsers = await prisma.user.groupBy({\n  by: ['country'],\n  where: {\n    email: {\n      contains: 'prisma.io',\n    },\n  },\n  _sum: {\n    profileViews: true,\n  },\n  having: {\n    profileViews: {\n      _avg: {\n        gt: 100,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Home Page with Prisma User Queries\nDESCRIPTION: Enhanced home page implementation using Prisma Client to fetch and display users dynamically from the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/home\";\nimport prisma from '~/lib/prisma'\n\nexport function meta({}: Route.MetaArgs) {\n  return [\n    { title: \"New React Router App\" },\n    { name: \"description\", content: \"Welcome to React Router!\" },\n  ];\n}\n\nexport async function loader() {\n  const users = await prisma.user.findMany();\n  return { users };\n}\n\nexport default function Home({ loaderData }: Route.ComponentProps) {\n  const { users } = loaderData;\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center -mt-16\">\n      <h1 className=\"text-4xl font-bold mb-8 font-[family-name:var(--font-geist-sans)]\">\n        Superblog\n      </h1>\n      <ol className=\"list-decimal list-inside font-[family-name:var(--font-geist-sans)]\">\n        {users.map((user) => (\n          <li key={user.id} className=\"mb-2\">\n            {user.name}\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cascading Delete in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to set up a cascading delete between User and Post models using the onDelete referential action.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Code to GitHub Repository\nDESCRIPTION: Commands to add a remote GitHub repository and push the code to it, which will be used by Koyeb for deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/250-deploy-to-koyeb.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin git@github.com:<YOUR_GITHUB_USERNAME>/<YOUR_GITHUB_REPOSITORY_NAME>.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client Singleton\nDESCRIPTION: This code creates a Prisma Client instance in a singleton pattern.  It imports PrismaClient from @prisma/client, instantiates it, and exports the instance as the default export.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { PrismaClient } from '@prisma/client'\\n\\nconst prisma = new PrismaClient()\\nexport default prisma\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Configuration\nDESCRIPTION: Command to create a TypeScript configuration file (tsconfig.json) with default settings for the project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for PostgreSQL\nDESCRIPTION: Defines a `datasource` block in Prisma schema to connect to a PostgreSQL database, using an environment variable for sensitive connection details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Sequelize using save\nDESCRIPTION: Shows one approach to creating records in Sequelize using the build and save methods. This creates a model instance with build and then persists it to the database with save.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = User.build({\n  name: 'Alice',\n  email: 'alice@prisma,io',\n})\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Adding Version Field to Seat Model in Prisma Schema\nDESCRIPTION: This snippet shows how to add a version field to the Seat model in the Prisma schema to implement optimistic concurrency control.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_33\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Seat {\n  id        Int   @id @default(autoincrement())\n  userId    Int?\n  claimedBy User? @relation(fields: [userId], references: [id])\n  movieId   Int\n  movie     Movie @relation(fields: [movieId], references: [id])\n  version   Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Model for CockroachDB\nDESCRIPTION: This Prisma schema defines three models (Post, Profile, User) with appropriate relationships and CockroachDB-specific sequence-based IDs. Each model includes fields with various data types and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        BigInt   @id @default(sequence())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   \n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  BigInt\n}\n\nmodel Profile {\n  id     BigInt  @id @default(sequence())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId BigInt  @unique\n}\n\nmodel User {\n  id      BigInt   @id @default(sequence())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI in TypeScript Project\nDESCRIPTION: Command to install the Prisma CLI as a development dependency in an existing Node.js/TypeScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Project with Prisma CLI\nDESCRIPTION: Initializes a new npm project, installs Prisma CLI and TypeScript dependencies using npm commands.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install prisma typescript tsx @types/node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining a self-relation Employee model in Prisma\nDESCRIPTION: This Prisma schema defines an Employee model with a self-relation for manager and managees. It demonstrates the initial problematic configuration that would cause a validation error due to potential cycles in referential actions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Employee {\n  id        Int        @id @default(autoincrement())\n  manager   Employee?  @relation(name: \"management\", fields: [managerId], references: [id])\n  managees  Employee[] @relation(name: \"management\")\n  managerId Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Example MySQL connection URL for AWS RDS\nDESCRIPTION: This snippet shows an example of a MySQL connection URL for a database hosted on AWS RDS. It includes the typical format with placeholders for specific connection details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:XXX@mysql–instance1.123456789012.us-east-1.rds.amazonaws.com:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with User and Post Models\nDESCRIPTION: This Prisma schema defines the database structure with User and Post models. It includes fields for id, email, firstName, and lastName in the User model, which are used in the computed field example.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/062-computed-fields.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        Int    @id @default(autoincrement())\n  email     String @unique\n  firstName String\n  lastName  String\n  posts     Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  published Boolean @default(true)\n  content   String?\n  authorId  Int?\n  author    User?   @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Note on prismaSchemaFolder Preview Feature\nDESCRIPTION: A note explaining that existing or new generators should not be affected when using the prismaSchemaFolder preview feature, unless a generator reads the schema manually.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\nExisting generators or new ones should not be affected if you are using the [`prismaSchemaFolder`](/orm/reference/preview-features/client-preview-features#currently-active-preview-features) preview feature to manage multiple schema files, unless a generator reads the schema manually.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Project Model Schema in Prisma\nDESCRIPTION: Prisma schema definition for a Project model with date fields for comparison (dueDate and completedDate)\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Project {\n  id            Int      @id @default(autoincrement())\n  title         String\n  author        User     @relation(fields: [authorId], references: [id])\n  authorId      Int\n  dueDate       DateTime\n  completedDate DateTime\n  createdAt     DateTime @default(now())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Post Detail Page in Next.js\nDESCRIPTION: This code sets up a static post detail page with hardcoded content. It includes placeholders for a post title, author, and content that will later be replaced with dynamic data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport prisma from \"@/lib/prisma\";\n\nexport default async function Post({ params }: { params: Promise<{ id: string }> }) {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center -mt-16\">\n      <article className=\"max-w-2xl space-y-4 font-[family-name:var(--font-geist-sans)]\">\n        <h1 className=\"text-4xl font-bold mb-8 text-[#333333]\">My first post</h1>\n        <p className=\"text-gray-600 text-center\">by Anonymous</p>\n        <div className=\"prose prose-gray mt-8\">\n          No content available.\n        </div>\n      </article>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example MySQL connection URL for local database\nDESCRIPTION: This snippet provides an example of a MySQL connection URL for a locally hosted database. It uses the root user and includes placeholders for the password and database name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://root:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma for D1 in prisma.config.ts\nDESCRIPTION: TypeScript configuration for setting up Prisma with D1, including the migration adapter.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport type { PrismaConfig } from 'prisma'\nimport { PrismaD1HTTP } from '@prisma/adapter-d1'\n\n// import your .env file\nimport 'dotenv/config'\n\ntype Env = {\n  CLOUDFLARE_D1_TOKEN: string\n  CLOUDFLARE_ACCOUNT_ID: string\n  CLOUDFLARE_DATABASE_ID: string\n}\n\nexport default {\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema.prisma'),\n\n  migrate: {\n    async adapter(env) {\n      return new PrismaD1HTTP({\n        CLOUDFLARE_D1_TOKEN: env.CLOUDFLARE_D1_TOKEN,\n        CLOUDFLARE_ACCOUNT_ID: env.CLOUDFLARE_ACCOUNT_ID,\n        CLOUDFLARE_DATABASE_ID: env.CLOUDFLARE_DATABASE_ID,\n      })\n    },\n  },\n} satisfies PrismaConfig<Env>\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Accelerate - TSX\nDESCRIPTION: Initializes and exports a Prisma Client instance designed for use with Prisma Accelerate. It imports the generated client and extends it with `withAccelerate()` to leverage connection pooling benefits provided by Accelerate. This client instance is then exported for use throughout the application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PrismaClient } from \"../generated/prisma\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\n\nconst prisma = new PrismaClient().$extends(withAccelerate());\n\nexport default prisma;\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Application with Prisma Client\nDESCRIPTION: This code snippet initializes an Express application, sets up middleware for JSON parsing, and defines a Prisma Client instance for database interactions. The app listens on port 3000 to handle incoming requests.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as express from 'express'\\nimport * as bodyParser from 'body-parser'\\nimport { prisma } from './generated/prisma-client'\\n\\nconst app = express()\\n\\napp.$use(bodyParser.json())\\n\\napp.listen(3000, () =>\\n  console.log('Server is running on http://localhost:3000')\\n)\n```\n\n----------------------------------------\n\nTITLE: Creating object with insert: TypeORM\nDESCRIPTION: Creates a new user with TypeORM using the `insert` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nawait userRepository.insert({\n  name: 'Alice',\n  email: 'alice@prisma.io',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pool Timeout in Prisma Schema\nDESCRIPTION: Example of setting both connection_limit and pool_timeout parameters in the Prisma schema to give the query engine more time to process queries in the connection pool queue.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?connection_limit=5&pool_timeout=20\"\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Schema Definition for CreateUser Mutation\nDESCRIPTION: Original SDL-first schema definition for the createUser mutation using prisma-binding.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  # ... other mutations\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma CLI with pnpm\nDESCRIPTION: Executes Prisma CLI commands using pnpm's package runner.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx prisma\n```\n\n----------------------------------------\n\nTITLE: String Contains Filter on JSON Property in MySQL\nDESCRIPTION: Query to find users where a JSON property contains a specific substring using MySQL syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: '$.petType',\n      string_contains: 'cat',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma in the Project\nDESCRIPTION: This command initializes Prisma in the project, creating a basic prisma schema file and a .env file for environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Updating Serverless Framework Configuration for Schema Engine\nDESCRIPTION: Example showing how to update Serverless Framework package patterns to reflect the migration-engine being renamed to schema-engine in Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  patterns:\n    - '!node_modules/.prisma/client/libquery_engine-*'\n    - 'node_modules/.prisma/client/libquery_engine-rhel-*'\n    - '!node_modules/prisma/libquery_engine-*'\n    -- '!node_modules/prisma/migration-engine-*'\n    -- '!node_modules/prisma/schema-engine-*'\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Migration with Wrangler CLI\nDESCRIPTION: Command to create an initial migration file using Wrangler CLI for D1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler d1 migrations create __YOUR_DATABASE_NAME__ create_user_table\n```\n\n----------------------------------------\n\nTITLE: Cleanup Command for Removing Prisma 1 Dependencies\nDESCRIPTION: npm command to uninstall dependencies related to Prisma 1 after completing the migration to Prisma ORM 2.0 with Nexus.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall graphql-cli prisma-binding prisma1\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Setting onUpdate to NoAction in post Relation\nDESCRIPTION: Alternative solution that fixes the multiple cascade paths by modifying the post relation in the Comment model to use NoAction for the onUpdate referential action.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  id          Int  @id @default(autoincrement())\n  writtenById Int\n  postId      Int\n  writtenBy   User @relation(fields: [writtenById], references: [id])\n  //delete-next-line\n  post        Post @relation(fields: [postId], references: [id])\n  //add-next-line\n  post        Post @relation(fields: [postId], references: [id], onUpdate: NoAction)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relation Mode in Prisma Schema\nDESCRIPTION: This snippet shows how to set the relation mode to 'prisma' in the datasource block of a Prisma schema file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/420-relation-mode.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User with Coinflips Using Prisma Client\nDESCRIPTION: Demonstrates how to query a user and include their coinflips with ordered results, showing the required include and orderBy configurations\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: { id: 1 },\n  include: {\n    coinflips: {\n      orderBy: { position: 'asc' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry with NodeSDK\nDESCRIPTION: Simplified setup of OpenTelemetry tracing using NodeSDK with graceful shutdown handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto'\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { PrismaInstrumentation } from '@prisma/instrumentation'\n\nconst traceExporter = new OTLPTraceExporter({\n  url: 'https://api.honeycomb.io/v1/traces',\n  headers: {\n    'x-honeycomb-team': 'HONEYCOMB_API_KEY',\n  },\n})\n\nconst sdk = new NodeSDK({\n  serviceName: 'my-service-name',\n  traceExporter,\n  instrumentations: [\n    new PrismaInstrumentation({\n      middleware: true,\n    }),\n  ],\n})\n\nsdk.start()\n\nprocess.on('SIGTERM', async () => {\n  try {\n    await sdk.shutdown()\n    console.log('Tracing shut down successfully')\n  } catch (err) {\n    console.error('Error shutting down tracing', err)\n  } finally {\n    process.exit(0)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Restrict Referential Action\nDESCRIPTION: Example of a Prisma schema with a 1-m relationship between Post and User, using a Restrict referential action. This prevents deletion of a User if they have associated Posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/150-referential-actions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Restrict)\n  authorId String\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Type with @nexus/schema\nDESCRIPTION: Definition of Post type using objectType from @nexus/schema, explicitly listing all fields from the Prisma model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst Post = objectType({\n  name: 'Post',\n  definition(t) {\n    t.model.id()\n    t.model.title()\n    t.model.content()\n    t.model.published()\n    t.model.author()\n    t.model.categories()\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Command with Wrangler for D1\nDESCRIPTION: This terminal command snippet illustrates how to execute a SQL command to insert dummy data into the User table of the D1 database using Wrangler.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n# For the local database\nnpx wrangler d1 execute __YOUR_D1_DATABASE_NAME__ --command \"INSERT INTO  \\\"User\\\" (\\\"email\\\", \\\"name\\\") VALUES\n('jane@prisma.io', 'Jane Doe (Local)');\" --local\n\n# For the remote database\nnpx wrangler d1 execute __YOUR_D1_DATABASE_NAME__ --command \"INSERT INTO  \\\"User\\\" (\\\"email\\\", \\\"name\\\") VALUES\n('jane@prisma.io', 'Jane Doe (Remote)');\" --remote\n```\n\n----------------------------------------\n\nTITLE: Using Custom PointOfInterest Create Method\nDESCRIPTION: Demonstrates how to use the custom `create` method in Prisma Client to add a new 'PointOfInterest' record. The method requires name, latitude, and longitude as inputs and returns the created `MyPointOfInterest` object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst poi = await prisma.pointOfInterest.create({\n  name: 'Berlin',\n  latitude: 52.52,\n  longitude: 13.405,\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection Command\nDESCRIPTION: This command introspects the database using the DATABASE_URL environment variable and generates a Prisma schema based on the existing database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Basic @unique Constraint Signature\nDESCRIPTION: The signature for the @unique attribute in Prisma Schema, supporting optional map, length and sort parameters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_46\n\nLANGUAGE: prisma\nCODE:\n```\n@unique(map: String?, length: number?, sort: String?)\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema from Introspection\nDESCRIPTION: This is the Prisma schema generated after introspecting the database. It defines the data models for Post, Profile, and User based on the database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n\n  @@index([authorId])\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n\n  @@index([userId])\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource for PostgreSQL\nDESCRIPTION: This snippet shows how to set up the datasource block in the Prisma schema file for a PostgreSQL database. It uses an environment variable for the database URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma User Model with Autoincrement\nDESCRIPTION: Prisma schema showing User model with autoincrementing BigInt primary key\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/840-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   BigInt @id @default(autoincrement())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Database URL configuration\nDESCRIPTION: Configures the `DATABASE_URL` environment variable inside the `.env` file. This URL specifies how Prisma ORM 2 should connect to the MySQL database, including the user, password, host, port, and database name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://root:randompassword@localhost:3306/myproject@dev\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Backwards to a Specific Migration by Name in Prisma\nDESCRIPTION: This command rolls back all migrations up to and including the migration with the specified name. Useful when you know the migration name you want to revert to.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate down \"First migration\" --experimental\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Directory Structure\nDESCRIPTION: Command to create the necessary directory structure for migrations using mkdir with the -p flag for recursive creation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Implementing addTodo Action with Prisma ORM in TypeScript\nDESCRIPTION: This code implements the addTodo action using Prisma ORM to create a new Todo record. It uses the prisma client's create method with structured data object containing id and text fields, followed by path revalidation to update the UI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from \"next/cache\";\n\nimport { prisma } from \"@/db/prisma\";\n\nexport const addTodo = async (id: number, text: string) => {\n  await prisma.todo.create({\n    data: { id, text },\n  })\n  revalidatePath(\"/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Datasource in Prisma Schema\nDESCRIPTION: Defines the MongoDB database connection configuration in the Prisma schema file using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/100-connect-your-database-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scripts for Prisma CLI Commands\nDESCRIPTION: Adds scripts in package.json to facilitate executing Prisma CLI commands like generate, migrate, and deploy.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@repo/db\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"db:generate\": \"prisma generate\",\n    \"db:migrate\": \"prisma migrate dev --skip-generate\",\n    \"db:deploy\": \"prisma migrate deploy\"\n  },\n  \"devDependencies\": {\n    \"prisma\": \"^6.6.0\"\n  },\n  \"dependencies\": {\n    \"@prisma/client\": \"^6.6.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema for Users and Posts Models\nDESCRIPTION: Define MongoDB models with relations using Prisma schema, including references between users, posts, and categories\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/050-migrate-from-mongoose.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ntype UsersProfile {\n  bio String\n}\n\nmodel categories {\n  id   String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  v    Int    @map(\"__v\")\n  name String\n}\n\nmodel posts {\n  id        String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title     String\n  content   String\n  published Boolean\n  v         Int     @map(\"__v\")\n  author    users   @relation(fields: [authorId], references: [id])\n  authorId  String  @map(\"author\") @db.ObjectId\n  categories categories[] @relation(fields: [categoryIds], references: [id])\n  categoryIds String[] @map(\"categories\") @db.ObjectId\n}\n\nmodel users {\n  id      String        @id @default(auto()) @map(\"_id\") @db.ObjectId\n  v       Int           @map(\"__v\")\n  email   String        @unique(map: \"email_1\")\n  name    String\n  profile UsersProfile?\n  posts   posts[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Prisma Client\nDESCRIPTION: Demonstrates how to update a specific Post record by ID using the Prisma Client update method, changing its published status from false to true.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting locally-hosted CockroachDB connection URL in environment variable\nDESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable for a locally-hosted CockroachDB instance. It uses the root user, localhost, and disables SSL for local development.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://root@localhost:26257?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized Enum Field\nDESCRIPTION: The Prisma schema after introspection following the conversion of a TEXT column to a proper enum type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_36\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id\n  //highlight-next-line\n  role Role?\n}\n\n//highlight-start\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n//highlight-end\n```\n\n----------------------------------------\n\nTITLE: Example MySQL Connection URL for Local Database\nDESCRIPTION: Demonstrates the typical connection URL format for connecting to a locally hosted MySQL database with root privileges.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://root:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Users Query with nexus-prisma\nDESCRIPTION: Original implementation of the users query using the previous nexus-prisma package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = prismaObjectType({\n  name: 'Query',\n  definition(t) {\n    t.prismaFields(['users'])\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding database dependency to web app package.json\nDESCRIPTION: This snippet shows how to add the database package as a dependency in the web app's package.json file. It demonstrates the syntax for npm, yarn, and pnpm package managers.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@repo/db\": \"*\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@repo/db\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource in Prisma Schema for SQL Server\nDESCRIPTION: This snippet shows how to set up the datasource block in the Prisma schema file to connect to a SQL Server database. It uses an environment variable for the database URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Squashed Migration in Development\nDESCRIPTION: Command to create a new migration that combines all changes from feature branch into a single migration file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/50-squashing-migrations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name squashed_migrations\n```\n\n----------------------------------------\n\nTITLE: Generated UserSelect Type Definition\nDESCRIPTION: This snippet provides the definition of the Prisma.UserSelect type, highlighting its optional properties that correspond to the User model fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Prisma.UserSelect = {\\n    id?: boolean | undefined;\\n    email?: boolean | undefined;\\n    name?: boolean | undefined;\\n    posts?: boolean | Prisma.PostFindManyArgs | undefined;\\n    profile?: boolean | Prisma.ProfileArgs | undefined;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client with Accelerate for Prisma Postgres\nDESCRIPTION: TypeScript code to create and export a Prisma Client instance with the Accelerate extension, which provides connection pooling and performance optimizations for Prisma Postgres databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"../generated/prisma\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\n\nconst prisma = new PrismaClient().$extends(withAccelerate());\n\nexport default prisma;\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query Pattern Leading to n+1 Problem\nDESCRIPTION: This code demonstrates an inefficient pattern that leads to the n+1 problem, where one query fetches all users and then additional queries must be executed for each user's posts, resulting in multiple database calls.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// One query to get all users\nconst users = await prisma.user.findMany({})\n\n// One query PER USER to get all posts\nusers.forEach(async (usr) => {\n  const posts = await prisma.post.findMany({\n    where: {\n      authorId: usr.id,\n    },\n  })\n\n  // Do something with each users' posts\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Array Filtering in Prisma\nDESCRIPTION: Shows how to filter on nested array values within JSON structures using path navigation in both PostgreSQL and MySQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cats\": { \"owned\": [\"Bob\", \"Sunny\"], \"fostering\": [\"Fido\"] },\n  \"dogs\": { \"owned\": [\"Ella\"], \"fostering\": [\"Prince\", \"Empress\"] }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: ['cats', 'fostering'],\n      array_contains: ['Fido'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Output Location for Prisma Client\nDESCRIPTION: Defines a custom output location for the generated Prisma Client assets.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Mapping Example\nDESCRIPTION: Example of mapping enum values and names to different database representations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_62\n\nLANGUAGE: prisma\nCODE:\n```\nenum Role {\n  ADMIN    @map(\"admin\")\n  CUSTOMER @map(\"customer\")\n\n  @@map(\"_Role\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing users resolver with Prisma Client in JavaScript\nDESCRIPTION: This snippet demonstrates the implementation of the `users` query resolver using Prisma Client. It involves converting incoming filter, ordering, and pagination arguments to the structure that Prisma Client expects. The snippet uses the `@prisma/binding-argument-transform` package to ensure compatibility between the legacy structures and the ones required by Prisma ORM 2. It highlights adjustments for pagination using the new `cursor` and `take` arguments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    users: (_, args, context, info) => {\n      const { where, orderBy, skip, first, last, after, before } = args\n      const prisma2Where = makeWherePrisma2Compatible(where)\n      const prisma2OrderBy = makeOrderByPrisma2Compatible(orderBy)\n      const skipValue = skip || 0\n      const prisma2Skip = Boolean(before) ? skipValue + 1 : skipValue\n      const prisma2Take = Boolean(last) ? -last : first\n      const prisma2Before = { id: before }\n      const prisma2After = { id: after }\n      const prisma2Cursor =\n        !Boolean(before) && !Boolean(after)\n          ? undefined\n          : Boolean(before)\n          ? prisma2Before\n          : prisma2After\n      return context.prisma.user.findMany({\n        where: prisma2Where,\n        orderBy: prisma2OrderBy,\n        skip: prisma2Skip,\n        cursor: prisma2Cursor,\n        take: prisma2Take,\n      })\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting the Database\nDESCRIPTION: This snippet demonstrates how to connect to a database and introspect its schema using the Prisma ORM CLI. The `prisma db pull` command is used to generate a Prisma schema based on the existing database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/01-how-to-upgrade.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"npx prisma db pull\"\n```\n\n----------------------------------------\n\nTITLE: Defining Notes Model in Prisma Schema\nDESCRIPTION: This snippet defines a Prisma schema for a Notes model with fields for id, title, createdAt, and updatedAt.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/550-evaluating.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Notes {\n  id        Int       @id @default(autoincrement())\n  title     String\n  createdAt DateTime  @default(now())\n  updatedAt DateTime? @updatedAt\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Configuration\nDESCRIPTION: Command to create a TypeScript configuration file (tsconfig.json) with default settings. This configures TypeScript compiler options for the project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Querying with Prisma: Type-safe operator usage (error)\nDESCRIPTION: This snippet showcases a type error that the TypeScript compiler catches when using an incorrect data type for an operator in Prisma ORM. This prevents runtime errors by enforcing type safety at compile time.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishedPosts = await prisma.post.findMany({\n  where: {\n    published: true,\n    title: { contains: 'Hello World' },\n    views: { gt: 'test' }, // Caught by the TypeScript compiler\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an extension with the $extends method in TypeScript\nDESCRIPTION: Example showing how to create a Prisma Client extension using the client-level $extends method. This demonstrates the basic syntax for adding a model component extension to the user model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  name: 'signUp', // Optional: name appears in error logs\n  model: {        // This is a `model` component\n    user: { ... } // The extension logic for the `user` model goes inside the curly braces\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Optimize API Key to .env file\nDESCRIPTION: This command adds the Prisma Optimize API key to your `.env` file. Replace `YOUR_OPTIMIZE_API_KEY` with the actual API key you generated from the Prisma Data Platform. This key is used to authenticate your application with Prisma Optimize.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/200-getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"OPTIMIZE_API_KEY=\\\"YOUR_OPTIMIZE_API_KEY\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Database Query with User Instance Creation\nDESCRIPTION: Example showing how to query a PostgreSQL database using pg driver and create a User instance from the result.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst resultRows = await client.query('SELECT * FROM users WHERE user_id = 1')\nconst userData = resultRows[0]\nconst user = new User(\n  userData.user_id,\n  userData.name,\n  userData.email,\n  userData.isAdmin\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Driver Adapters in Prisma Schema for Neon Serverless Driver\nDESCRIPTION: Enables the driverAdapters preview feature in the Prisma schema to use Neon's serverless driver with Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/890-neon.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma ORM with MongoDB\nDESCRIPTION: This snippet installs the latest version of Prisma ORM configured to use MongoDB. Prerequisites include having Node.js and a MongoDB 4.2+ replica set. The operation initializes Prisma with a MongoDB datasource, creating a Prisma schema and environment file for database configuration. Requires modifying existing Prisma directories if they exist.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/08-upgrade-from-mongodb-beta.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install prisma@latest\n$ npx prisma init --datasource-provider=mongodb\n```\n\n----------------------------------------\n\nTITLE: Implementing TTL Cache Strategy with Tags for Invalidation\nDESCRIPTION: Configures a TTL cache strategy with a tag for targeted invalidation. The tag 'findMany_users' allows for on-demand cache invalidation when data changes, keeping the cache in sync with database updates.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/300-caching.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany({\n    cacheStrategy: {\n      ttl: 60,\n      //add-next-line\n      tags: [\"findMany_users\"],\n    },\n});\n\n// This is how you would invalidate the cached query above.\n//add-start\nawait prisma.$accelerate.invalidate({\n    tags: [\"findMany_users\"],\n});\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Specifying Binary Targets for Prisma CLI Installation\nDESCRIPTION: This snippet shows how to use the PRISMA_CLI_BINARY_TARGETS environment variable to specify multiple binary targets for Prisma CLI to download during installation. This is useful when deploying to platforms different from the local environment, ensuring that the correct engine files are downloaded.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/300-environment-variables-reference.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nPRISMA_CLI_BINARY_TARGETS=darwin-arm64,rhel-openssl-3.0.x npm install\n```\n\n----------------------------------------\n\nTITLE: Running Raw MongoDB Commands with $runCommandRaw() in TypeScript\nDESCRIPTION: Demonstrates how to use $runCommandRaw() to execute MongoDB database commands, specifically showing how to insert records with duplicate _id values by bypassing document validation. This method accepts MongoDB command syntax and requires appropriate database role permissions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nprisma.$runCommandRaw({\n  insert: \"Pets\",\n  bypassDocumentValidation: true,\n  documents: [\n    {\n      _id: 1,\n      name: \"Felinecitas\",\n      type: \"Cat\",\n      breed: \"Russian Blue\",\n      age: 12,\n    },\n    {\n      _id: 1,\n      name: \"Nao Nao\",\n      type: \"Dog\",\n      breed: \"Chow Chow\",\n      age: 2,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Database Provider Mismatch Error in Prisma Migrate\nDESCRIPTION: Example error message shown when the database provider specified in the schema doesn't match the one in migration_lock.toml\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/300-limitations-and-known-issues.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError: P3014\n\nThe datasource provider `postgresql` specified in your schema does not match the one specified in the migration_lock.toml, mysql. Please remove your current migration directory and start a new migration history with prisma migrate dev.\n```\n\n----------------------------------------\n\nTITLE: Setting Query Engine Binary for Windows Globally\nDESCRIPTION: Command to set the custom query engine binary globally for Windows systems.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nset PRISMA_QUERY_ENGINE_BINARY=c:\\custom\\my-query-engine-windows.exe\n```\n\n----------------------------------------\n\nTITLE: SQL Server Integer Type Mappings\nDESCRIPTION: Native database type mappings for integer types in Microsoft SQL Server with corresponding Prisma field type attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\n@db.Int\n@db.SmallInt\n@db.TinyInt\n@db.Bit\n```\n\n----------------------------------------\n\nTITLE: Prisma Client: Creating a Record\nDESCRIPTION: This code snippet shows how to create a new user record using Prisma Client.  It utilizes the `prisma.user.create` method to insert a new user object into the database with the provided email and name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Create\nconst user = await prisma.user.create({\n  data: {\n    email: 'alice@prisma.io',\n    name: 'Alice'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Users with LIKE Operators in Prisma\nDESCRIPTION: This snippet demonstrates the use of Prisma's findMany function to query users in a database. It shows how to use the 'contains' and 'endsWith' methods, which are translated into SQL's 'LIKE' and 'ILIKE' operators. Dependencies include a configured Prisma client and an existing database schema with a 'User' model. The main input is the object defining the 'where' conditions, and the expected output is an array of user records matching the query. Be cautious of potential performance issues with large datasets due to full table scans.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/300-full-table-scans-caused-by-like-operations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nawait prisma.user.findMany({ \n  where: { \n    email: { contains: \"gmail.com\" }, \n    name: { endsWith: \"Burk\" } \n  } \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Primary Key with Length in Prisma\nDESCRIPTION: This example shows how to use the 'length' argument with the @@id attribute to create a compound primary key with specified lengths for each component in MySQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel CompoundId {\n  id_1 String @db.VarChar(3000)\n  id_2 String @db.VarChar(3000)\n\n  @@id([id_1(length: 100), id_2(length: 10)])\n}\n```\n\n----------------------------------------\n\nTITLE: Introspected Schema with Many-to-Many Relation\nDESCRIPTION: Result of introspecting Prisma 1's relation tables in Prisma ORM 2.x, showing how 1-n relations with link tables are recognized as many-to-many relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_27\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id\n  Post Post[] @relation(references: [id])\n}\n\nmodel Post {\n  id   String @id\n  User User[] @relation(references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema for Post Model\nDESCRIPTION: Prisma schema definition for a Post model showing CockroachDB-specific type mapping\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/840-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id    BigInt @id\n  title String @db.String(200)\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for ID Field\nDESCRIPTION: SQL code generated by Prisma 1 that creates a VARCHAR(25) column for the ID field, which is too small for Prisma ORM 2.x CUIDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Refactoring Prisma Queries to Support Soft Deletion\nDESCRIPTION: This snippet shows how to refactor a Prisma query to implement soft deletion functionality. It modifies a simple findMany query to filter out soft-deleted records by checking for null in the deletedAt field, maintaining backward compatibility.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  where: { deletedAt: null }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Posts Query Schema in Nexus TypeScript\nDESCRIPTION: Adds a GraphQL query field to retrieve posts with an optional search parameter using Nexus schema definition. This code only defines the field structure without implementing the resolver logic.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = queryType({\n  definition(t) {\n    // ... previous queries\n\n    t.list.field('posts', {\n      type: 'Post',\n      nullable: false,\n      args: { searchString: stringArg() },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specified Environment\nDESCRIPTION: This command deletes a specified environment through its environment ID, which must be supplied as an argument.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform environment delete \\\n--environment $INSERT_ENVIRONMENT_ID \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Prisma View Definition for MongoDB\nDESCRIPTION: Schema definition for UserInfo view in Prisma for MongoDB\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nview UserInfo {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String\n  name  String\n  bio   String\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma with Prisma Postgres\nDESCRIPTION: Terminal command to initialize Prisma with a new Prisma Postgres database. This creates the basic Prisma schema file and sets up the database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --db --output ../src/generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Prisma Postgres\nDESCRIPTION: Sets up the DATABASE_URL environment variable for connecting to Prisma Postgres instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=PRISMA_POSTGRES_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma Client in JavaScript\nDESCRIPTION: This snippet shows how to import and instantiate Prisma Client in a JavaScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n// use `prisma` in your application to read and write data in your DB\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Products with Composite Types Using createMany\nDESCRIPTION: Shows how to create multiple products each containing a list of `photos` using the `createMany` method in Prisma. Requires Prisma and a configured Prisma Client instance. Demonstrates the bulk creation of products with embedded composite types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = await prisma.product.createMany({\n  data: [\n    {\n      name: 'Forest Runners',\n      price: 59.99,\n      colors: ['Red', 'Green'],\n      sizes: ['Small', 'Medium', 'Large'],\n      photos: [\n        { height: 100, width: 200, url: '1.jpg' },\n        { height: 100, width: 200, url: '2.jpg' },\n      ],\n    },\n    {\n      name: 'Alpine Blazers',\n      price: 85.99,\n      colors: ['Blue', 'Red'],\n      sizes: ['Large', 'XLarge'],\n      photos: [\n        { height: 100, width: 200, url: '1.jpg' },\n        { height: 150, width: 200, url: '4.jpg' },\n        { height: 200, width: 200, url: '5.jpg' },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Raw Query Type Mapping Example in Prisma ORM 4\nDESCRIPTION: This code demonstrates how Prisma ORM 4's raw query type mapping now correctly deserializes scalar values to their corresponding JavaScript types, including BigInt, Buffer, Decimal, and Date.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst res =\n  await prisma.$queryRaw`SELECT bigint, bytes, decimal, date FROM \"Table\";`\nconsole.log(res) // [{ bigint: BigInt(\"123\"), bytes: Buffer.from([1, 2]), decimal: new Prisma.Decimal(\"12.34\"), date: Date(\"<some_date>\") }]\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Querying with Prisma in JavaScript\nDESCRIPTION: Demonstrates error handling and querying using Prisma's JavaScript API. This snippet checks for a specific Prisma error, logs results based on the success of database operations, and handles both active and 'soft deleted' records. It requires the Prisma client setup with a defined schema and connection to a database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/100-soft-delete-middleware.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconsole.log('findFirstOrThrow: ')\nawait getOneFirstPostOrThrow()\n} catch (error) {\n  if (\n    error instanceof Prisma.PrismaClientKnownRequestError &&\n    error.code == 'P2025'\n  )\n    console.log(\n      '\\u001b[1;31m' +\n        'PrismaClientKnownRequestError is catched' +\n        '(Error name: ' +\n        error.name +\n        ')' +\n        '\\u001b[0m'\n    )\n}\nconsole.log()\nconsole.log(\n  'findMany: ' +\n    (getPosts.length == 3\n      ? '\\u001b[1;32m' + 'Posts returned!' + '\\u001b[0m'\n      : '\\u001b[1;31m' + 'Posts not returned!' + '\\u001b[0m')\n)\nconsole.log(\n  'findMany ( delete: true ): ' +\n    (getPostsAnDeletedPosts.length == 3\n      ? '\\u001b[1;32m' + 'Posts returned!' + '\\u001b[0m'\n      : '\\u001b[1;31m' + 'Posts not returned!' + '\\u001b[0m')\n)\nconsole.log()\nconsole.log(\n  'update: ' +\n    (updatePost.id != undefined\n      ? '\\u001b[1;32m' + 'Post updated!' + '\\u001b[0m'\n      : '\\u001b[1;31m' +\n        'Post not updated!' +\n        '(Value is: ' +\n        JSON.stringify(updatePost) +\n        ')' +\n        '\\u001b[0m')\n)\nconsole.log(\n  'updateMany ( delete: true ): ' +\n    (updateManyDeletedPosts.count == 3\n      ? '\\u001b[1;32m' + 'Posts updated!' + '\\u001b[0m'\n      : '\\u001b[1;31m' + 'Posts not updated!' + '\\u001b[0m')\n)\nconsole.log()\nconsole.log('\\u001b[1;34m#################################### \\u001b[0m')\n\n// 4. Count ALL posts\nconst f = await prisma.post.findMany({})\nconsole.log(\n  'Number of active posts: ' + '\\u001b[1;32m' + f.length + '\\u001b[0m'\n)\n\n// 5. Count DELETED posts\nconst r = await prisma.post.findMany({\n  where: {\n    deleted: true,\n  },\n})\nconsole.log(\n  'Number of SOFT deleted posts: ' + '\\u001b[1;32m' + r.length + '\\u001b[0m'\n)\n\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Driver Adapter Connection Example\nDESCRIPTION: Example showing how to connect to PostgreSQL using the pg driver adapter with a connection string\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/200-database-drivers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaPg } from '@prisma/adapter-pg'\n\nconst adapter = new PrismaPg({ connectionString: env.DATABASE_URL })\nconst prisma = new PrismaClient({ adapter })\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Types for Profile Filtering in Prisma\nDESCRIPTION: Defines GraphQL input type for filtering Profile records with various comparison operators for the ID and bio fields, including equality, list containment, range comparisons, and string pattern matching.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"All values that are not equal to given value.\"\"\"\nid_not: ID\n\n\"\"\"All values that are contained in given list.\"\"\"\nid_in: [ID!]\n\n\"\"\"All values that are not contained in given list.\"\"\"\nid_not_in: [ID!]\n\n\"\"\"All values less than the given value.\"\"\"\nid_lt: ID\n\n\"\"\"All values less than or equal the given value.\"\"\"\nid_lte: ID\n\n\"\"\"All values greater than the given value.\"\"\"\nid_gt: ID\n\n\"\"\"All values greater than or equal the given value.\"\"\"\nid_gte: ID\n\n\"\"\"All values containing the given string.\"\"\"\nid_contains: ID\n\n\"\"\"All values not containing the given string.\"\"\"\nid_not_contains: ID\n\n\"\"\"All values starting with the given string.\"\"\"\nid_starts_with: ID\n\n\"\"\"All values not starting with the given string.\"\"\"\nid_not_starts_with: ID\n\n\"\"\"All values ending with the given string.\"\"\"\nid_ends_with: ID\n\n\"\"\"All values not ending with the given string.\"\"\"\nid_not_ends_with: ID\nbio: String\n\n\"\"\"All values that are not equal to given value.\"\"\"\nbio_not: String\n\n\"\"\"All values that are contained in given list.\"\"\"\nbio_in: [String!]\n\n\"\"\"All values that are not contained in given list.\"\"\"\nbio_not_in: [String!]\n\n\"\"\"All values less than the given value.\"\"\"\nbio_lt: String\n\n\"\"\"All values less than or equal the given value.\"\"\"\nbio_lte: String\n\n\"\"\"All values greater than the given value.\"\"\"\nbio_gt: String\n\n\"\"\"All values greater than or equal the given value.\"\"\"\nbio_gte: String\n\n\"\"\"All values containing the given string.\"\"\"\nbio_contains: String\n\n\"\"\"All values not containing the given string.\"\"\"\nbio_not_contains: String\n\n\"\"\"All values starting with the given string.\"\"\"\nbio_starts_with: String\n\n\"\"\"All values not starting with the given string.\"\"\"\nbio_not_starts_with: String\n\n\"\"\"All values ending with the given string.\"\"\"\nbio_ends_with: String\n\n\"\"\"All values not ending with the given string.\"\"\"\nbio_not_ends_with: String\nuser: UserWhereInput\n```\n\n----------------------------------------\n\nTITLE: Serverless Webpack Configuration\nDESCRIPTION: YAML configuration for serverless.yml to set up Prisma generation scripts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  webpack:\n    packagerOptions:\n      scripts:\n        - prisma generate\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma binary targets for Node.js 16 and 18\nDESCRIPTION: Specifies the binary targets for Prisma ORM to be compatible with Node.js versions 16 and 18 within the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nbinaryTargets = [\"native\", \"rhel-openssl-1.0.x\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client\nDESCRIPTION: Creates a new user record with nested creation of related posts and profile records, then queries the created data with included relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Multi-Field One-to-Many Relation\nDESCRIPTION: SQL commands to create tables with a composite key one-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/200-one-to-many-relations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    firstName TEXT,\n    lastName TEXT,\n    PRIMARY KEY (\"firstName\",\"lastName\")\n);\nCREATE TABLE \"Post\" (\n    id SERIAL PRIMARY KEY,\n    \"authorFirstName\" TEXT NOT NULL,\n    \"authorLastName\" TEXT NOT NULL,\n    FOREIGN KEY (\"authorFirstName\", \"authorLastName\") REFERENCES \"User\"(\"firstName\", \"lastName\")\n);\n```\n\n----------------------------------------\n\nTITLE: Inferring the type of an extended Prisma Client in TypeScript\nDESCRIPTION: Example showing how to use TypeScript's typeof utility to infer the type of an extended Prisma Client instance, which is useful for maintaining type safety in your application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedPrismaClient = new PrismaClient().$extends({\n  /** extension */\n})\n\ntype ExtendedPrismaClient = typeof extendedPrismaClient\n```\n\n----------------------------------------\n\nTITLE: Adding Index to Prisma Schema\nDESCRIPTION: This Prisma schema snippet shows how to add an index to the 'userId' field in the Post model to improve query performance in the 'prisma' relation mode.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/420-relation-mode.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id     Int  @id\n  userId Int\n  user   User @relation(fields: [userId], references: [id])\n\n  @@index([userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying All Operations in a Specific Model\nDESCRIPTION: Extends all operations in the user model with custom logic using the $allOperations method, which intercepts every query made to that model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    user: {\n      $allOperations({ model, operation, args, query }) {\n        /* your custom logic here */\n        return query(args)\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Schema configuration\nDESCRIPTION: This code snippet demonstrates how to update the GraphQL schema creation process using `makeSchema` from `@nexus/schema` and integrating the `nexusSchemaPrisma` plugin.  It shows how to define types, configure the Prisma plugin, specify output locations for the generated schema and type definitions, and configure nullability and type resolution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"const schema = makeSchema({\\n\\n  // Provide all the GraphQL types we've implemented\\n  types: [Query, Mutation, UserUniqueInput, User, Post, Category, Profile],\\n\\n  // Configure the interface to Prisma\\n  plugins: [nexusSchemaPrisma({\\n    experimentalCRUD: true,\\n  })],\\n\\n  // Specify where Nexus should put the generated files\\n  outputs: {\\n    schema: path.join(__dirname, './generated/schema.graphql'),\\n    typegen: path.join(__dirname, './generated/nexus.ts'),\\n  },\\n\\n  // Configure nullability of input arguments: All arguments are non-nullable by default\\n  nonNullDefaults: {\\n    input: false,\\n    output: false,\\n  },\\n\\n  // Configure automatic type resolution for the TS representations of the associated types\\n  typegenAutoConfig: {\\n    sources: [\\n      {\\n        source: path.join(__dirname, './types.ts'),\\n        alias: 'types',\\n      },\\n    ],\\n    contextType: 'types.Context',\\n  }\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Monorepo Root Package Scripts\nDESCRIPTION: Configure root-level scripts to handle database migrations, type generation, and application builds\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/140-use-prisma-in-pnpm-workspaces.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"pnpm --filter database db:deploy && pnpm --filter database db:generate && pnpm --filter web build\",\n    \"start\": \"pnpm --filter web start\",\n    \"dev\": \"pnpm --filter database db:generate && pnpm --filter web dev\",\n    \"studio\": \"pnpm --filter database db:studio\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client NPM Package\nDESCRIPTION: Installs the @prisma/client package via npm. This command also automatically runs prisma generate to create a client tailored to your schema models. After any future schema changes, prisma generate needs to be run manually to update the client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/200-install-prisma-client-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Studio with LibSQL adapter in TypeScript\nDESCRIPTION: This snippet shows how to configure Prisma Studio to use the LibSQL driver adapter. It defines an async adapter function that creates a LibSQL client and returns a PrismaLibSQL instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PrismaConfig } from 'prisma'\n\nexport default {\n  earlyAccess: true,\n  studio: {\n    adapter: async (env: Env) => {\n      const { PrismaLibSQL } = await import('@prisma/adapter-libsql')\n      const { createClient } = await import('@libsql/client')\n\n      const libsql = createClient({\n        url: env.DOTENV_PRISMA_STUDIO_LIBSQL_DATABASE_URL,\n      })\n      return new PrismaLibSQL(libsql)\n    },\n  },\n} satisfies PrismaConfig\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Timestamp in Prisma\nDESCRIPTION: This Prisma snippet illustrates the definition of a User model that uses timestamp fields with @db.Timestamp(0) and @db.Timestamptz(0) types. These fields are configured to round the time to the nearest second, which can lead to precision issues in time-sensitive applications. The code highlights how these fields are implemented, including their boundary values: date stored as DateTime and deletedAt with time zone information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/900-avoid-timestamp-timestampz-0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  // ...\n  date DateTime @db.Timestamp(0)\n  deletedAt DateTime @db.Timestamptz(0)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unsupported Field in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define an unsupported field type in a Prisma schema. It shows a 'Device' model with an 'Unsupported' field type for data that Prisma does not natively support.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Device {\n  id   Int                   @id @default(autoincrement())\n  name String\n  data Unsupported(\"circle\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Objects with Prisma ORM and Mongoose\nDESCRIPTION: Shows how to update existing records. Prisma uses the update method with data and where clauses, while Mongoose offers findOneAndUpdate and save approaches.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.update({\n  data: {\n    name: 'Alicia',\n  },\n  where: {\n    id: 2,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst updatedUser = await User.findOneAndUpdate(\n  { _id: 2 },\n  {\n    $set: {\n      name: 'Alicia',\n    },\n  }\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuser.name = 'Alicia'\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Inserting DbNull into Json Field in Prisma Client\nDESCRIPTION: Example of using Prisma.DbNull to insert a database NULL into a Json field in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nprisma.log.create({\n  data: {\n    meta: Prisma.DbNull,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Server Float Type Mappings\nDESCRIPTION: Native database type mappings for floating-point and monetary types in SQL Server with corresponding Prisma field type attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_19\n\nLANGUAGE: prisma\nCODE:\n```\n@db.Float\n@db.Money\n@db.SmallMoney\n@db.Real\n```\n\n----------------------------------------\n\nTITLE: Configuring prisma-client-js Generator with Native Binary Target\nDESCRIPTION: This snippet shows how to configure the prisma-client-js generator with the 'native' binary target, which automatically detects the current operating system.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider      = \"prisma-client-js\"\n  binaryTargets = [\"native\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar List with Default Value in Prisma Schema for Relational Databases\nDESCRIPTION: Example of defining a scalar list (array) field with a default value in a Prisma schema for relational databases. This feature is available in Prisma version 4.0.0 and later.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_24\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             Int      @id @default(autoincrement())\n  favoriteColors String[] @default([\"red\", \"blue\", \"green\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cloudflare Worker locally\nDESCRIPTION: This command runs the Cloudflare Worker locally using the wrangler dev command for testing and development purposes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_23\n\nLANGUAGE: terminal\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Initializing a SolidStart Project using npm\nDESCRIPTION: This snippet shows how to initialize a new SolidStart project using npm, setup project parameters, and start a development server.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init solid@latest \n\ncd my-solid-prisma-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Instantiating PrismaClient Outside the Function Handler in Serverless\nDESCRIPTION: Best practice for instantiating PrismaClient outside the serverless function handler to improve connection reuse while the container remains warm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst client = new PrismaClient()\n\nexport async function handler() {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Field Data with Type Checking\nDESCRIPTION: Example of how to read and type-check JSON data from a field, using Prisma.JsonArray to handle array-type JSON data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { PrismaClient, Prisma } = require('@prisma/client')\n\nconst user = await prisma.user.findFirst({\n  where: {\n    id: 9,\n  },\n})\n\n// Example extendedPetsData data:\n// [{ name: 'Bob the dog' }, { name: 'Claudine the cat' }]\n\nif (\n  user?.extendedPetsData &&\n  typeof user?.extendedPetsData === 'object' &&\n  Array.isArray(user?.extendedPetsData)\n) {\n  const petsObject = user?.extendedPetsData as Prisma.JsonArray\n\n  const firstPet = petsObject[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Metrics JSON Output\nDESCRIPTION: Example of the JSON metrics data structure returned by Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"counters\": [\n    {\n      \"key\": \"prisma_client_queries_total\",\n      \"labels\": {},\n      \"value\": 0,\n      \"description\": \"Total number of Prisma Client queries executed\"\n    },\n    {\n      \"key\": \"prisma_datasource_queries_total\",\n      \"labels\": {},\n      \"value\": 0,\n      \"description\": \"Total number of Datasource Queries executed\"\n    },\n    {\n      \"key\": \"prisma_pool_connections_closed_total\",\n      \"labels\": {},\n      \"value\": 0,\n      \"description\": \"Total number of Pool Connections closed\"\n    },\n    {\n      \"key\": \"prisma_pool_connections_opened_total\",\n      \"labels\": {},\n      \"value\": 1,\n      \"description\": \"Total number of Pool Connections opened\"\n    }\n  ],\n  \"gauges\": [],\n  \"histograms\": []\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for JSON Field\nDESCRIPTION: SQL code generated by Prisma 1 that creates a TEXT column for what was defined as a JSON field in the Prisma 1 datamodel.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  jsonData TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client via npm for TypeScript and MongoDB\nDESCRIPTION: This command installs the @prisma/client package, which automatically invokes prisma generate to create a version of Prisma Client tailored to your models based on your Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/200-install-prisma-client-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Basic Structure for Adding Top-level Methods to Prisma Client\nDESCRIPTION: Shows the basic structure for using the client component to extend Prisma Client with custom methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/110-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  client?: { ... }\n})\n```\n\n----------------------------------------\n\nTITLE: SQL for Extending ID Column Length\nDESCRIPTION: SQL command to extend the length of the ID column to support Prisma ORM 2.x CUIDs that can be up to 30 characters long.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"User\" ALTER COLUMN \"id\" SET DATA TYPE character varying(30);\n```\n\n----------------------------------------\n\nTITLE: Introspecting database to populate Prisma schema with custom constraint names\nDESCRIPTION: This snippet demonstrates the result of running 'prisma db pull' to introspect the database and populate the Prisma schema with custom constraint names that don't match Prisma ORM's naming convention.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/100-named-constraints.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id(map: \"Custom_Constraint_Name\") @default(autoincrement())\n  name  String @unique\n  posts Post[]\n}\n\nmodel Post {\n  id         Int    @id @default(autoincrement())\n  title      String\n  authorName String @default(\"Anonymous\")\n  author     User?  @relation(fields: [authorName], references: [name], map: \"Custom_Foreign_Key_Constraint\")\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for Scalar List\nDESCRIPTION: SQL code generated by Prisma 1 that creates an extra table to store scalar list values, which is different from how Prisma ORM 2.x handles arrays.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"User_coinflips\" (\n    \"nodeId\" VARCHAR(25) REFERENCES \"User\"(id),\n    position INTEGER,\n    value BOOLEAN NOT NULL,\n    CONSTRAINT \"User_coinflips_pkey\" PRIMARY KEY (\"nodeId\", position)\n);\nCREATE UNIQUE INDEX \"User_coinflips_pkey\" ON \"User_coinflips\"(\"nodeId\" text_ops,position int4_ops);\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate Command for Database Schema Creation\nDESCRIPTION: This command creates and applies a new migration to the database. It generates a SQL migration file named 'init' and executes it against the database, creating the tables defined in the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Setting Up CockroachDB Data Source in Prisma Schema\nDESCRIPTION: Illustrates the configuration of a CockroachDB data source in a Prisma schema file, using a connection string similar to PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"cockroachdb\"\n  url      = \"postgresql://johndoe:mypassword@localhost:26257/mydb?schema=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Result Set Example in JSON\nDESCRIPTION: Shows the output when querying an empty database table, returning an empty array. This represents the initial state before any records are created.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Relations Between Models in Prisma (MongoDB)\nDESCRIPTION: This code demonstrates an incorrect schema with ambiguous relations between User and Post models, highlighting the ambiguity that can occur with multiple relations between the same models in MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\n// NOTE: This schema is intentionally incorrect. See below for a working solution.\n\nmodel User {\n  id           String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name         String?\n  writtenPosts Post[]\n  pinnedPost   Post?\n}\n\nmodel Post {\n  id         String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title      String?\n  author     User    @relation(fields: [authorId], references: [id])\n  authorId   String  @db.ObjectId\n  pinnedBy   User?   @relation(fields: [pinnedById], references: [id])\n  pinnedById String? @db.ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Prisma Schema\nDESCRIPTION: Prisma schema configuration for Neon database connection with driver adapters feature flag enabled.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Logging in Prisma Client\nDESCRIPTION: Configures Prisma Client to log all SQL queries generated by the query engine. This is done by setting the log option to include 'query' when initializing the PrismaClient instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  log: ['query'],\n})\n```\n\n----------------------------------------\n\nTITLE: Using JOINs with relationLoadStrategy in GraphQL Resolvers\nDESCRIPTION: This snippet shows how to use the relationLoadStrategy: \"join\" option to execute a single optimized query that joins related tables. This approach reduces the number of database queries to just one.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    t.nonNull.int('id')\n    t.string('name')\n    t.nonNull.string('email')\n    t.nonNull.list.nonNull.field('posts', {\n      type: 'Post',\n      resolve: (parent, _, context) => {\n        return context.prisma.post.findMany({\n          relationLoadStrategy: \"join\",\n          where: { authorId: parent.id || undefined },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with node-postgres Adapter\nDESCRIPTION: Code to instantiate Prisma Client using the PrismaPg adapter for node-postgres integration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaPg } from '@prisma/adapter-pg'\nimport { PrismaClient } from '@prisma/client'\n\nconst connectionString = `${process.env.DATABASE_URL}`\n\nconst adapter = new PrismaPg({ connectionString });\nconst prisma = new PrismaClient({ adapter });\n```\n\n----------------------------------------\n\nTITLE: Provisioning PostgreSQL Database on Heroku\nDESCRIPTION: Command to add a PostgreSQL database to your Heroku application using the hobby-dev plan.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nheroku addons:create heroku-postgresql:hobby-dev\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema from Introspection\nDESCRIPTION: This Prisma schema is the result of the introspection process. It defines three models (Post, Profile, and User) that correspond to the database tables, including their fields and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  User      User     @relation(fields: [authorId], references: [id])\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  User   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  Post    Post[]\n  Profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Commands to initialize a Git repository in the project directory, which is needed to deploy to Koyeb using git-based deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/250-deploy-to-koyeb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n> Initialized empty Git repository in /Users/edouardb/prisma-on-koyeb/.git/\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists in Prisma Client\nDESCRIPTION: Demonstrates the difference in sorting syntax between Prisma Client v1 and v2. V1 uses a string-based approach with format 'field_DIRECTION', while v2 uses a more structured object notation with separate field and direction properties.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.posts({\n  orderBy: 'title_ASC',\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.posts({\n  orderBy: {\n    title: 'asc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Scalar List Handling in Prisma ORM 5\nDESCRIPTION: This shows the transition to array-based values for scalar lists in Prisma ORM 5, aligning the handling of singular scalar values with array value expectations for operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/101-jsonprotocol-changes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nprisma.post.create({\n  data: {\n    tags: 'databases',\n  },\n})\n\nprisma.post.findMany({\n  where: {\n    tags: 'databases',\n  },\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nprisma.post.create({\n  data: {\n    tags: ['databases'],\n  },\n})\n\nprisma.post.findMany({\n  where: {\n    tags: ['databases'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js CRUD API Endpoints for User Management\nDESCRIPTION: Generates comprehensive CRUD (Create, Read, Update, Delete) API routes for managing users with Prisma and Next.js\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server';\nimport prisma from '../../../lib/prisma';\n\nexport async function GET() {\n  const users = await prisma.user.findMany({\n    include: { organization: true },\n  });\n  return NextResponse.json(users);\n}\n\nexport async function POST(request: Request) {\n  const body = await request.json();\n  const user = await prisma.user.create({\n    data: {\n      email: body.email,\n      name: body.name,\n      organization: {\n        connect: { id: body.organizationId },\n      },\n    },\n    include: { organization: true },\n  });\n  return NextResponse.json(user);\n}\n\nexport async function PUT(request: Request) {\n  const body = await request.json();\n  const user = await prisma.user.update({\n    where: { id: body.id },\n    data: {\n      email: body.email,\n      name: body.name,\n      organizationId: body.organizationId,\n    },\n    include: { organization: true },\n  });\n  return NextResponse.json(user);\n}\n\nexport async function DELETE(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get('id');\n  const user = await prisma.user.delete({\n    where: { id: Number(id) },\n  });\n  return NextResponse.json(user);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Node.js Project for Prisma and Datadog\nDESCRIPTION: Terminal commands to create a new Node.js project directory and initialize it with npm. This creates a basic project structure for demonstrating Datadog tracing with Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir prisma-datadog-tracing\ncd prisma-datadog-tracing\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma with Prisma Postgres in Cloudflare Worker\nDESCRIPTION: This code snippet shows how to initialize Prisma with Prisma Postgres after creating a Cloudflare Worker project. It uses the Prisma CLI to set up the project with a `schema.prisma` file and a `.env` file containing the `DATABASE_URL`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma@latest init --db\n```\n\n----------------------------------------\n\nTITLE: Working with MongoDB ObjectId in aggregateRaw() in TypeScript\nDESCRIPTION: Shows how to properly handle custom MongoDB objects like ObjectId when using aggregateRaw(). The example demonstrates using MongoDB's extended JSON specification format with the $oid operator to match a document by its ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.aggregateRaw({\n  pipeline: [\n    { $match: { _id: { $oid: id } } }\n//                     ^ notice the $oid convention here \n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Arguments to Prisma Methods in TypeScript\nDESCRIPTION: This snippet shows how to extend the `findMany` method to incorporate custom cache strategy arguments (`CacheStrategy`) within Prisma Client extensions. It demonstrates type intersection using `Prisma.Exact` to enhance type safety. This does not implement caching logic but acts as a conceptual guide.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/150-type-utilities.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CacheStrategy = {\n  swr: number\n  ttl: number\n}\n\nconst prisma = new PrismaClient().$extends({\n  model: {\n    $allModels: {\n      findMany<T, A>(\n        this: T,\n        args: Prisma.Exact<\n          A,\n          // For the `findMany` method, use the arguments from model `T` and the `findMany` method\n          // and intersect it with `CacheStrategy` as part of `findMany` arguments\n          Prisma.Args<T, 'findMany'> & CacheStrategy\n        >\n      ): Prisma.Result<T, A, 'findMany'> {\n        // method implementation with the cache strategy\n      },\n    },\n  },\n})\n\nasync function main() {\n  await prisma.post.findMany({\n    cacheStrategy: {\n      ttl: 360,\n      swr: 60,\n    },\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Generation Script in Monorepo\nDESCRIPTION: NPM script configuration for generating Prisma Client in a monorepo setup. Specifies custom schema path for centralized schema management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/400-nextjs-help.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prisma:generate\": \"prisma generate --schema=./packages/db/schema.prisma\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Package and Package.json\nDESCRIPTION: Creates a 'database' package in the 'turborepo-prisma' project and initializes it with a package.json specifying the package name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\ncd packages/\nmkdir database\ncd database\ntouch package.json\n```\n\n----------------------------------------\n\nTITLE: Replacing beforeExit Hook with Node.js Exit Events\nDESCRIPTION: Example of migrating from Prisma's deprecated beforeExit hook to native Node.js exit events. This shows how to handle application shutdown cleanly with Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst exitHandler = () => {\n  // your exit handler code\n}\n\nprisma.$on('beforeExit', exitHandler)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst exitHandler = () => {\n  // your exit handler code\n}\n\nprocess.on('exit', exitHandler)\nprocess.on('beforeExit', exitHandler)\nprocess.on('SIGINT', exitHandler)\nprocess.on('SIGTERM', exitHandler)\nprocess.on('SIGUSR2', exitHandler)\n```\n\n----------------------------------------\n\nTITLE: Basic Model Mapping in Prisma Schema\nDESCRIPTION: Example showing how to map a Prisma model name to a different database table name using @@map attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  // Fields\n\n  @@map(\"comments\")\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming existing Prisma directory - JavaScript\nDESCRIPTION: If a 'prisma' directory already exists, this command renames it to 'prisma1' to differentiate from new Prisma ORM 2 configurations before initialization.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmv prisma prisma1\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Prisma Client Browser Resolution\nDESCRIPTION: Configuration to resolve Prisma Client browser module specifier issues in Nuxt applications using Vite.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt'\n\nexport default defineNuxtConfig({\n  modules: [\n    '@prisma/nuxt',\n  ],\n  // additional config\n  vite: {\n    resolve: {\n      alias: {\n        '.prisma/client/index-browser': './node_modules/.prisma/client/index-browser.js',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest setupFilesAfterEnv\nDESCRIPTION: This code snippet shows how to configure the `setupFilesAfterEnv` property in `jest.config.js` to include the path to the singleton mock file. This ensures that the mock is set up before each test run.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"module.exports = {\\n  clearMocks: true,\\n  preset: 'ts-jest',\\n  testEnvironment: 'node',\\n  //add-next-line\\n  setupFilesAfterEnv: ['<rootDir>/singleton.ts'],\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar List in Prisma Schema for Relational Databases\nDESCRIPTION: Example of defining a scalar list (array) field in a Prisma schema for relational databases. This is supported only for PostgreSQL and CockroachDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_22\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             Int      @id @default(autoincrement())\n  favoriteColors String[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring npmrc for AWS Elastic Beanstalk\nDESCRIPTION: Resolves filesystem access issues during deployment by enabling unsafe-perm for npm\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/650-caveats-when-deploying-to-aws-platforms.mdx#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nunsafe-perm=true\n```\n\n----------------------------------------\n\nTITLE: Comparing Error Messages in Foreign Keys vs Prisma Relation Modes\nDESCRIPTION: This snippet demonstrates the difference in error messages between the 'foreignKeys' and 'prisma' relation modes when a foreign key constraint is violated.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/420-relation-mode.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nExample:\n// foreignKeys:\n... Foreign key constraint failed on the field: `ProfileOneToOne_userId_fkey (index)`\n// prisma:\n... The change you are trying to make would violate the required relation 'ProfileOneToOneToUserOneToOne' between the `ProfileOneToOne` and `UserOneToOne` models.\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Prisma SQL Server Setup\nDESCRIPTION: Commands to create a new project directory called 'hello-prisma' and navigate into it. This sets up the basic folder structure for your Prisma project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with UUID in MongoDB - Prisma\nDESCRIPTION: This snippet demonstrates the definition of a User model in MongoDB with a UUID generated ID. The `id` field uses UUID as the default value and is also mapped to the MongoDB `_id`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_32\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(uuid()) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for Enum Field\nDESCRIPTION: SQL code generated by Prisma 1 that creates a TEXT column for what was defined as an enum field in the Prisma 1 datamodel.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  role TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Type in Nexus\nDESCRIPTION: Basic setup for defining GraphQL mutations with Nexus, creating the foundation for adding specific mutation operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutationType } from '@nexus/schema'\n\nconst Mutation = mutationType({\n  definition(t) {\n    // your GraphQL mutations + resolvers will be defined here\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Duplicate Values in Unique Fields of Composite Types\nDESCRIPTION: This TypeScript code creates a 'MailBox' record with duplicate email addresses in the 'addresses' field. It illustrates that MongoDB doesn't enforce uniqueness within a single record for composite types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.MailBox.createMany({\n  data: [\n    {\n      name: 'Alice',\n      addresses: {\n        set: [\n          {\n            address: 'alice@prisma.io', // Not unique\n          },\n          {\n            address: 'alice@prisma.io', // Not unique\n          },\n        ],\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Models for MongoDB\nDESCRIPTION: Example schema showing model definitions for a blogging platform using MongoDB, including User, Profile, Post and Category models with MongoDB-specific field types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email   String   @unique\n  name    String?\n  role    Role     @default(USER)\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Profile {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  bio    String\n  user   User   @relation(fields: [userId], references: [id])\n  userId String @unique @db.ObjectId\n}\n\nmodel Post {\n  id          String     @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt   DateTime   @default(now())\n  title       String\n  published   Boolean    @default(false)\n  author      User       @relation(fields: [authorId], references: [id])\n  authorId    String     @db.ObjectId\n  categoryIDs String[]   @db.ObjectId\n  categories  Category[] @relation(fields: [categoryIDs], references: [id])\n}\n\nmodel Category {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name    String\n  postIDs String[] @db.ObjectId\n  posts   Post[]   @relation(fields: [postIDs], references: [id])\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Prisma 1 Upgrade CLI\nDESCRIPTION: This snippet illustrates how to invoke the Prisma 1 Upgrade CLI to generate SQL statements for fixing database schema incompatibilities. The `prisma-upgrade` command analyzes the database schema and provides necessary SQL commands.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/01-how-to-upgrade.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"npx prisma-upgrade\"\n```\n\n----------------------------------------\n\nTITLE: SQL Server Connection URL Format\nDESCRIPTION: Example of a standard SQL Server connection URL using SQL authentication with TLS encryption enabled. Shows the basic structure including host, port, database, user, and password parameters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsqlserver://HOST[:PORT];database=DATABASE;user=USER;password=PASSWORD;encrypt=true\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Type in GraphQL Schema\nDESCRIPTION: This snippet shows the GraphQL schema definition for the Profile type, including its fields and relation to User.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype Profile implements Node {\n  id: ID!\n  bio: String\n  user: User!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client Package\nDESCRIPTION: Installs the @prisma/client package via npm which is required to use Prisma Client in your project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/200-install-prisma-client-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Relations API to Traverse Relationships\nDESCRIPTION: This snippet demonstrates how to use Prisma's fluent relations API to traverse relationships between models. It retrieves a Comment by ID, then navigates to its associated Post and then to the Post's User.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await prisma.comment\n  .findUnique({\n    where: { id: '60ff4e9500acc65700ebf470' },\n  })\n  .post()\n  .user()\n```\n\n----------------------------------------\n\nTITLE: Enabling Views Preview Feature in Prisma Schema\nDESCRIPTION: Configuration to enable the views preview feature in the Prisma schema generator block\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"views\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Model Property Example\nDESCRIPTION: This snippet demonstrates how to refer to model properties in Prisma Client. It shows examples of accessing the `user` and `post` model properties using `prisma.user` and `prisma.post`, respectively.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await prisma.user.findMany(...) // \\\"user\\\" model property\nconst result = await prisma.post.findMany(...) // \\\"post\\\" model property\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for $runCommandRaw() in Prisma\nDESCRIPTION: Shows the function signature for $runCommandRaw() in Prisma. The method takes a command input as a JSON object and returns a Promise that resolves to a JSON object. The shape of the returned object depends on the command executed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n$runCommandRaw(command: InputJsonObject): PrismaPromise<JsonObject>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Product with a List of Composite Types\nDESCRIPTION: Demonstrates how to create a product containing a list of `photos` using composite types in Prisma. Requires Prisma and a configured Prisma Client instance. The `photos` field is an embedded list of composite types defined using the `set` operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = await prisma.product.create({\n  data: {\n    name: 'Forest Runners',\n    price: 59.99,\n    colors: ['Red', 'Green'],\n    sizes: ['Small', 'Medium', 'Large'],\n    // New composite type\n    photos: {\n      set: [\n        { height: 100, width: 200, url: '1.jpg' },\n        { height: 100, width: 200, url: '2.jpg' },\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma 4 with Yarn\nDESCRIPTION: Command to upgrade Prisma and Prisma Client to version 4 using Yarn package manager.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nyarn up prisma@4 @prisma/client@4\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma using npm - Terminal\nDESCRIPTION: This snippet illustrates the command to install Prisma using npm. It assumes that npm is being used as the package manager for dependency management in the project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/03-spelling-punctuation-formatting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Post Detail Page in Terminal\nDESCRIPTION: This terminal command creates a directory structure for dynamic post routing with [id] parameter and an empty page.tsx file inside it. The -p flag ensures parent directories are created if they don't exist.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p src/app/posts/[id] && touch src/app/posts/[id]/page.tsx\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Feature Flag in Prisma Schema\nDESCRIPTION: Configuration to enable the metrics preview feature in the Prisma schema file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"metrics\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Generator Implementation\nDESCRIPTION: Specifies a custom generator located in a local directory for Prisma Client generation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"./my-generator\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Example Code and Setting Up Project Directory\nDESCRIPTION: Commands to create a directory for the application, download the example code from GitHub, and extract it to the current directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/250-deploy-to-koyeb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir prisma-on-koyeb\ncd prisma-on-koyeb\ncurl https://github.com/koyeb/example-prisma/tarball/main/latest | tar xz  --strip=1\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - PostgreSQL Datasource\nDESCRIPTION: Defines the PostgreSQL datasource block in the Prisma schema. Specifies the database provider as 'postgresql' and retrieves the connection URL from the `DATABASE_URL` environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\n\"datasource db {\n  provider = \\\"postgresql\\\"\n  url      = env(\\\"DATABASE_URL\\\")\n}\"\n```\n\n----------------------------------------\n\nTITLE: Create a Development Branch - Bash\nDESCRIPTION: Creates a new Git branch to isolate changes related to adding the Status field in the schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b create-status-field\n```\n\n----------------------------------------\n\nTITLE: Database Introspection Command\nDESCRIPTION: Terminal command to introspect the database and generate Prisma schema\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate Reset Command\nDESCRIPTION: Terminal command to reset the database and reapply migration history, resolving schema drift\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate reset\n```\n\n----------------------------------------\n\nTITLE: Adding Column with SQL\nDESCRIPTION: SQL command to add a new boolean column with default value to Post table\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"Post\"\nADD COLUMN published BOOLEAN DEFAULT false;\n```\n\n----------------------------------------\n\nTITLE: Creating Baseline Migration Directories for Prisma ORM - Terminal\nDESCRIPTION: This command sets up the migration directory structure in your project, which Prisma Migrate will use to manage and track schema changes. Ensure you are in the project root directory before running this command. No additional dependencies are required.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Removing Custom enableShutdownHooks in NestJS\nDESCRIPTION: Diff showing how to remove the custom enableShutdownHooks method that used beforeExit in a NestJS Prisma service, as this functionality is deprecated in Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect()\n  }\n\n-  async enableShutdownHooks(app: INestApplication) {\n-    this.$on('beforeExit', async () => {\n-      await app.close()\n-    })\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Without Default ID Values - Prisma\nDESCRIPTION: In this snippet, a User model is defined without default values for the `id` field. The model is structured for both relational databases and MongoDB, requiring manual ID assignment when creating instances.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_35\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id\n  name String\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\nid    String   @id  @map(\"_id\") @db.ObjectId\nname  String\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\nid    String   @id  @map(\"_id\")\nname  String\n}\n```\n\n----------------------------------------\n\nTITLE: Updating sidebars.ts for New Guides in TypeScript\nDESCRIPTION: TypeScript code snippet showing how to add a new guide entry to the `sidebars.ts` file within the Docusaurus configuration. This ensures the new guide appears correctly categorized under 'Framework Guides' in the documentation sidebar navigation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  type: \"category\",\n  label: \"Framework Guides\",\n  collapsed: false,\n  collapsible: false,\n  items: [\n    \"guides/turborepo\",\n    \"guides/nextjs\",\n    \"guides/nuxt\",\n    \"guides/tanstack-start\",\n    \"guides/react-router-7\",\n    \"guides/solid-start\",\n    \"guides/sveltekit\",\n    //add-next-line\n    \"guides/__________\",\n  ].sort(),\n},\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: Manually Added UpdatedAt\nDESCRIPTION: This Prisma schema snippet illustrates how to manually add the `@updatedAt` attribute to the `updatedAt` field in the Prisma model. By adding the `@updatedAt` attribute, the Prisma Client will automatically update the field's value whenever the record is updated.  The attribute will be removed after introspection, so you need to re-add it.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_19\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma line-number file=schema.prisma highlight=3;add showLineNumbers\nmodel Post {\n  id        String   @id\n  //add-next-line\n  updatedAt DateTime @updatedAt\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relations in Drizzle ORM with TypeScript\nDESCRIPTION: This code demonstrates how to define many-to-many relationships in Drizzle ORM. It creates three PostgreSQL tables: posts, categories, and a junction table postsToCategories that explicitly connects posts to categories with foreign key references.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { boolean, integer, pgTable, serial, text } from \"drizzle-orm/pg-core\";\n\nexport const posts = pgTable('post', {\n  id: serial('serial').primaryKey(),\n  title: text('title').notNull(),\n  content: text('content'),\n  published: boolean('published').default(false).notNull(),\n});\n\nexport const categories = pgTable('category', {\n  id: serial('serial').primaryKey(),\n  name: text('name').notNull(),\n});\n\nexport const postsToCategories = pgTable('posts_to_categories', {\n  postId: integer('post_id').notNull().references(() => users.id),\n  categoryId: integer('category_id').notNull().references(() => chatGroups.id),\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Constraint Names in Prisma Schema\nDESCRIPTION: Demonstrates how to specify custom names for constraints and indexes using the map argument.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id(map: \"Custom_Primary_Key_Constraint_Name\") @default(autoincrement())\n  name  String @unique\n  posts Post[]\n}\n\nmodel Post {\n  id         Int    @id @default(autoincrement())\n  title      String\n  authorName String @default(\"Anonymous\")\n  author     User?  @relation(fields: [authorName], references: [name])\n\n  @@index([title, authorName], map: \"My_Custom_Index_Name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar List with Default Value in Prisma Schema for MongoDB\nDESCRIPTION: Example of defining a scalar list (array) field with a default value in a Prisma schema for MongoDB. This feature is available in Prisma version 4.0.0 and later.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_25\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id             String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  favoriteColors String[] @default([\"red\", \"blue\", \"green\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Schema After Introspection of Enum Field\nDESCRIPTION: The resulting Prisma schema after introspecting a database with a TEXT column that was intended to be an enum in Prisma 1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_33\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String  @id\n  role String?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Ordering Enum in Prisma GraphQL Schema\nDESCRIPTION: Specifies the enum for ordering User query results by various fields in ascending or descending order.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  email_ASC\n  email_DESC\n  name_ASC\n  name_DESC\n  role_ASC\n  role_DESC\n  jsonData_ASC\n  jsonData_DESC\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client in Nuxt API Route\nDESCRIPTION: Demonstrates how to use the global Prisma Client instance within a Nuxt API route handler to perform database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from \"~/lib/prisma\";\n\nexport default defineEventHandler(async (event) => {\n  return {\n    user: await prisma.user.findFirst(),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma project with prompt\nDESCRIPTION: This snippet demonstrates how to initialize a new Prisma project using the `prisma init --prompt` command. It takes a prompt as input to generate a Prisma schema and deploy it to a fresh Prisma Postgres instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"npx prisma init --prompt \\\"Simple habit tracker application\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Studio with Firefox Browser\nDESCRIPTION: Command to launch Prisma Studio and open a new Firefox browser tab for interaction\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_34\n\nLANGUAGE: terminal\nCODE:\n```\nprisma studio --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Regenerating Prisma Client\nDESCRIPTION: This command regenerates Prisma Client after making changes to the database schema, updating the generated code in the node_modules/.prisma/client directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nprisma generate\n```\n\n----------------------------------------\n\nTITLE: Defining Category Type in GraphQL Schema\nDESCRIPTION: This snippet shows the GraphQL schema definition for the Category type, including its fields and relation to Post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ntype Category implements Node {\n  id: ID!\n  name: String!\n  posts(\n    where: PostWhereInput\n    orderBy: Enumerable<PostOrderByInput>\n    skip: Int\n    after: String\n    before: String\n    first: Int\n    last: Int\n  ): [Post!]\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Query in a Batch Transaction\nDESCRIPTION: Demonstrates how to wrap a query extension inside a database transaction, which is useful for implementing features like row-level security.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionExtension = Prisma.defineExtension((prisma) => \n  prisma.$extends({\n    query: {\n      user: {\n        // Get the input `args` and a callback to `query`\n        async findFirst({ args, query, operation }) {\n          const [result] = await prisma.$transaction([query(args)]) // wrap the query in a batch transaction, and destructure the result to return an array\n          return result // return the first result found in the array\n        },\n      },\n    },\n  })\n)\nconst prisma = new PrismaClient().$extends(transactionExtension)\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client\nDESCRIPTION: Command to install the Prisma Client npm package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 GraphQL Datamodel with Scalar List\nDESCRIPTION: Example of a Prisma 1 datamodel using GraphQL syntax with a scalar list field that uses a relation table strategy.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_41\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  coinflips: [Boolean!]! @scalarList(strategy: RELATION)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Postgres with CLI\nDESCRIPTION: Command to initialize a new Prisma project with a Postgres database using the Prisma CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/100-from-the-cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma@latest init --db\n```\n\n----------------------------------------\n\nTITLE: Including Subsections in Prisma Data Model Documentation\nDESCRIPTION: This snippet demonstrates the use of a custom component or directive to include subsections in the documentation. It specifies a depth of 2 for the subsections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Subsections depth=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: AWS RDS MySQL Connection Example\nDESCRIPTION: Example of a MySQL connection URL for a database hosted on AWS RDS.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:XXX@mysql–instance1.123456789012.us-east-1.rds.amazonaws.com:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema and Resolvers Implementation\nDESCRIPTION: Full implementation including GraphQL schema definition, type definitions, and all resolvers with proper JSDoc annotations for type safety and autocompletion.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/100-autocompletion-in-graphql-resolvers-with-js.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @typedef { import(\"@prisma/client\").PrismaClient } Prisma\n * @typedef { import(\"@prisma/client\").UserCreateArgs } UserCreateArgs\n */\n\nconst { makeExecutableSchema } = require('graphql-tools')\n\nconst typeDefs = `\ntype User {\n  email: String!\n  id: ID!\n  name: String\n  posts: [Post!]!\n}\n\ntype Post {\n  author: User\n  content: String\n  id: ID!\n  published: Boolean!\n  title: String!\n}\n\n\ntype Query {\n  feed: [Post!]!\n  filterPosts(searchString: String): [Post!]!\n  post(where: PostWhereUniqueInput!): Post\n}\n\ntype Mutation {\n  createDraft(authorEmail: String, content: String, title: String!): Post!\n  deleteOnePost(where: PostWhereUniqueInput!): Post\n  publish(id: ID): Post\n  signupUser(data: UserCreateInput!): User!\n}\n\ninput PostWhereUniqueInput {\n  id: ID\n}\n\ninput UserCreateInput {\n  email: String!\n  id: ID\n  name: String\n  posts: PostCreateManyWithoutPostsInput\n}\n\ninput PostCreateManyWithoutPostsInput {\n  connect: [PostWhereUniqueInput!]\n  create: [PostCreateWithoutAuthorInput!]\n}\n\ninput PostCreateWithoutAuthorInput {\n  content: String\n  id: ID\n  published: Boolean\n  title: String!\n}\n`\n\nconst resolvers = {\n  Query: {\n    /**\n     * @param {any} parent\n     * @param {any} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    feed: (parent, args, ctx) => {\n      return ctx.prisma.post.findMany({\n        where: { published: true },\n      })\n    },\n    /**\n     * @param {any} parent\n     * @param {{ searchString: string }} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    filterPosts: (parent, args, ctx) => {\n      return ctx.prisma.post.findMany({\n        where: {\n          OR: [\n            { title: { contains: args.searchString } },\n            { content: { contains: args.searchString } },\n          ],\n        },\n      })\n    },\n    /**\n     * @param {any} parent\n     * @param {{ where: { id: string }}} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    post: (parent, args, ctx) => {\n      return ctx.prisma.post.findUnique({\n        where: { id: Number(args.where.id) },\n      })\n    },\n  },\n  Mutation: {\n    /**\n     * @param {any} parent\n     * @param {{ title: string, content: string, authorEmail: (string|undefined) }} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    createDraft: (parent, args, ctx) => {\n      return ctx.prisma.post.create({\n        data: {\n          title: args.title,\n          content: args.content,\n          published: false,\n          author: args.authorEmail && {\n            connect: { email: args.authorEmail },\n          },\n        },\n      })\n    },\n    /**\n     * @param {any} parent\n     * @param {{ where: { id: string }}} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    deleteOnePost: (parent, args, ctx) => {\n      return ctx.prisma.post.delete({\n        where: { id: Number(args.where.id) },\n      })\n    },\n    /**\n     * @param {any} parent\n     * @param {{ id: string }} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    publish: (parent, args, ctx) => {\n      return ctx.prisma.post.update({\n        where: { id: Number(args.id) },\n        data: { published: true },\n      })\n    },\n    /**\n     * @param {any} parent\n     * @param {UserCreateArgs} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    signupUser: (parent, args, ctx) => {\n      return ctx.prisma.user.create(args)\n    },\n  },\n  User: {\n    /**\n     * @param {{ id: number }} parent\n     * @param {any} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    posts: (parent, args, ctx) => {\n      return ctx.prisma.user\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .posts()\n    },\n  },\n  Post: {\n    /**\n     * @param {{ id: number }} parent\n     * @param {any} args\n     * @param {{ prisma: Prisma }} ctx\n     */\n    author: (parent, args, ctx) => {\n      return ctx.prisma.post\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .author()\n    },\n  },\n}\n\nconst schema = makeExecutableSchema({\n  resolvers,\n  typeDefs,\n})\n\nmodule.exports = {\n  schema,\n}\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup Commands\nDESCRIPTION: Series of Git commands to initialize and push the project to GitHub repository.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\ngit add .\ngit commit -m \"Initial commit with Prisma Postgres integration\"\ngit branch -M main\ngit remote add origin https://github.com/<your-username>/<repository-name>.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: SQLite Parameterized Query Example\nDESCRIPTION: Example SQL query for SQLite using named placeholders (:minAge, :maxAge) to create a parameterized query for filtering users by age.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, age\nFROM users\nWHERE age > :minAge AND age < :maxAge\n```\n\n----------------------------------------\n\nTITLE: Removing old Nexus imports\nDESCRIPTION: This TypeScript code snippet shows the removal of imports from the old nexus-prisma package, including `makePrismaSchema`, `prismaObjectType`, `datamodelInfo`, and `prisma`. These imports are no longer needed in the updated project structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { makePrismaSchema, prismaObjectType } from 'nexus-prisma'\\nimport datamodelInfo from './generated/nexus-prisma'\\nimport { prisma } from './generated/prisma-client'\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Field to Prisma Query Results\nDESCRIPTION: The example demonstrates adding a virtual field 'fullName' to the 'user' model using the result extension component. The field is computed based on dependencies 'firstName' and 'lastName', and the computation logic is provided in the 'compute' function.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/130-result.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  result: {\n    user: {\n      fullName: {\n        // the dependencies\n        needs: { firstName: true, lastName: true },\n        compute(user) {\n          // the computation logic\n          return `${user.firstName} ${user.lastName}`\n        },\n      },\n    },\n  },\n})\n\nconst user = await prisma.user.findFirst()\n\n// return the user's full name, such as \"John Doe\"\nconsole.log(user.fullName)\n```\n\n----------------------------------------\n\nTITLE: Combining Prisma Optimize with Accelerate Extension\nDESCRIPTION: Shows how to properly combine multiple Prisma extensions, applying Optimize before Accelerate to ensure they work correctly together.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends(withOptimize()).$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment File for Prisma\nDESCRIPTION: This snippet shows the contents of a .env.development file used to store the database connection URL for the development environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_9\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"postgresql://prisma:prisma@localhost:5433/dev\"\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relation Change Migration\nDESCRIPTION: Complex SQL migration for changing the direction of a one-to-one relation while preserving existing data\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/40-customizing-migrations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- DropForeignKey\nALTER TABLE \"Profile\" DROP CONSTRAINT \"Profile_userId_fkey\";\n\n-- DropIndex\nDROP INDEX \"Profile_userId_unique\";\n\n-- AlterTable\nALTER TABLE \"User\" ADD COLUMN \"profileId\" INTEGER;\n\nUPDATE \"User\"\nSET \"profileId\" = \"Profile\".id\nFROM \"Profile\"\nWHERE \"User\".id = \"Profile\".\"userId\";\n\nALTER TABLE \"User\" ALTER COLUMN \"profileId\" SET NOT NULL;\n\n-- AlterTable\nALTER TABLE \"Profile\" DROP COLUMN \"userId\";\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_profileId_unique\" ON \"User\"(\"profileId\");\n\n-- AddForeignKey\nALTER TABLE \"User\" ADD FOREIGN KEY (\"profileId\") REFERENCES \"Profile\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Prisma ORM dependencies\nDESCRIPTION: This command removes the standalone Prisma ORM CLI and client packages as they are now bundled with `nexus-plugin-prisma`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"npm uninstall @prisma/cli @prisma/client\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Schema with Sequelize - Terminal\nDESCRIPTION: This snippet demonstrates how to execute database migrations using Sequelize. It provides two options for running migrations, one using the local binary and another using npx for a global installation. The user's environment should have Sequelize installed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/03-spelling-punctuation-formatting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n./node_modules/.bin/sequelize db:migrate # or `npx sequelize db:migrate`\n```\n\n----------------------------------------\n\nTITLE: Creating User Table with SQL\nDESCRIPTION: SQL command to create a User table with id, name and email columns\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Previewing Backward Migration Changes in Prisma\nDESCRIPTION: This command previews what changes would be applied by the 'migrate down' command without actually making any changes to the database. Useful for verifying before executing the actual rollback.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate down --preview --experimental\n```\n\n----------------------------------------\n\nTITLE: $queryRawUnsafe Method in TypeScript\nDESCRIPTION: The `$queryRawUnsafe()` method enables executing raw SQL queries directly, potentially leading to SQL injection if not handled carefully. This snippet demonstrates querying the entire `User` table using a raw SQL command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// import the generated `User` type from the `@prisma/client` module\nimport { User } from \"@prisma/client\";\n\nconst result = await prisma.$queryRawUnsafe(\"SELECT * FROM User\");\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values in Prisma 1 Datamodel\nDESCRIPTION: Illustrates the Prisma 1 approach to defining a datamodel with default values using the `@default` directive, which do not create a `DEFAULT` constraint in the database. This affects the migration to Prisma ORM 2.x as introspection doesn't recognize these defaults.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  id: ID! @id\n  published: Boolean @default(value: false)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Nano ID values (21 characters) as MongoDB IDs\nDESCRIPTION: Sets up a User model for MongoDB with an ID field that generates Nano ID values with default length of 21 characters and maps to MongoDB's _id field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_83\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(nanoid()) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Postico SSL Configuration Script\nDESCRIPTION: Shell script for configuring SSL mode in Postico database connection\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/700-tooling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncat <<eof\n{\n\"sslmode\":\"disable\",\n}\neof\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Nexus GraphQL server setup in TypeScript\nDESCRIPTION: TypeScript code for 'src/index.ts' which imports Nexus schema utilities, the nexus-plugin-prisma schema, and graphql-yoga server. It defines a simple Query with a 'hello' string field, creates a schema with Prisma plugin configured for experimental CRUD features, specifies output paths for schema and TypeScript types, configures type generation context linking Prisma and local context types, and starts a GraphQL server listening on port 4000. This file serves as the main GraphQL API entry point.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { queryType, makeSchema } from '@nexus/schema'\nimport { nexusSchemaPrisma } from 'nexus-plugin-prisma/schema'\nimport { GraphQLServer } from 'graphql-yoga'\nimport { createContext } from './context'\n\nconst Query = queryType({\n  definition(t) {\n    t.string('hello', () => {\n      return 'Hello Nexus!'\n    })\n  },\n})\n\nexport const schema = makeSchema({\n  types: [Query],\n  plugins: [nexusSchemaPrisma({ experimentalCRUD: true })],\n  outputs: {\n    schema: __dirname + '/../schema.graphql',\n    typegen: __dirname + '/generated/nexus.ts',\n  },\n  typegenAutoConfig: {\n    contextType: 'Context.Context',\n    sources: [\n      {\n        source: '@prisma/client',\n        alias: 'prisma',\n      },\n      {\n        source: require.resolve('./context'),\n        alias: 'Context',\n      },\n    ],\n  },\n})\n\nnew GraphQLServer({ schema, context: createContext() }).start(() =>\n  console.log(`Server ready at: http://localhost:4000`)\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Composite Types Using deleteMany\nDESCRIPTION: Illustrates how to delete multiple composite types from a list when they match certain conditions using Prisma's `deleteMany`. Requires Prisma and a configured Prisma Client instance. Features deleting `photos` based on `height` matching a specified value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.update({\n  where: {\n    id: '62de6d328a65d8fffdae2c18',\n  },\n  data: {\n    photos: {\n      deleteMany: {\n        where: {\n          height: 100,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Model to Prisma Schema\nDESCRIPTION: Defines a User model in the Prisma schema with properties like id, createdAt, email, and name, customizing the database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prometheus Format Metrics from Prisma Client\nDESCRIPTION: Simple code example showing how to retrieve Prisma Client metrics in Prometheus format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst metrics = await prisma.$metrics.prometheus()\nconsole.log(metrics)\n```\n\n----------------------------------------\n\nTITLE: Sorting search results by relevance with Prisma Client\nDESCRIPTION: This TypeScript snippet shows how to sort full-text search results by relevance using Prisma Client's orderBy functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  orderBy: {\n    _relevance: {\n      fields: ['title'],\n      search: 'database',\n      sort: 'asc'\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete package.json with Prisma Postinstall Script\nDESCRIPTION: The full package.json file for the Next.js example project, including the postinstall script for generating Prisma Client without the engine binary for Prisma Postgres compatibility.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"next-netlify-platform-starter\",\n    \"version\": \"0.1.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"dev\": \"next dev\",\n        \"build\": \"next build\",\n        \"start\": \"next start\",\n        \"lint\": \"next lint\",\n        // add-next-line\n        \"postinstall\": \"prisma generate --no-engine\"\n    },\n    \"dependencies\": {\n        \"@netlify/blobs\": \"^8.1.0\",\n        \"@prisma/client\": \"^6.3.0\",\n        \"@prisma/extension-accelerate\": \"^1.2.1\",\n        \"blobshape\": \"^1.0.0\",\n        \"bright\": \"^0.8.5\",\n        \"markdown-to-jsx\": \"^7.4.5\",\n        \"next\": \"15.1.6\",\n        \"react\": \"18.3.1\",\n        \"react-dom\": \"18.3.1\",\n        \"unique-names-generator\": \"^4.7.1\"\n    },\n    \"devDependencies\": {\n        \"autoprefixer\": \"^10.4.18\",\n        \"daisyui\": \"^4.12.8\",\n        \"eslint\": \"8.57.1\",\n        \"eslint-config-next\": \"15.1.6\",\n        \"postcss\": \"^8.4.36\",\n        \"prisma\": \"^6.3.0\",\n        \"tailwindcss\": \"^3.4.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma One-to-One Relation Model\nDESCRIPTION: The resulting Prisma schema models showing how SQL one-to-one relationships are represented.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  Profile Profile?\n}\n\nmodel Profile {\n  id   Int  @id @default(autoincrement())\n  user Int  @unique\n  User User @relation(fields: [user], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of Template Variables in SQL String Literals\nDESCRIPTION: Shows an example of an invalid query where a template variable is incorrectly used inside a SQL string literal, which will not work with $queryRaw.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = \"Bob\";\nawait prisma.$queryRaw`SELECT 'My name is ${name}';`;\n```\n\n----------------------------------------\n\nTITLE: Explicit @unique Constraint for One-to-One Relations in Relational Databases\nDESCRIPTION: Example of adding an explicit @unique attribute to the relation scalar field in a one-to-one relation for relational databases. This is required in Prisma ORM 4.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int      @id @default(autoincrement())\n  profile   Profile? @relation(fields: [profileId], references: [id])\n  profileId Int?     @unique // <-- include this explicitly\n}\n\nmodel Profile {\n  id   Int   @id @default(autoincrement())\n  user User?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Json Field in Prisma Schema\nDESCRIPTION: Example of defining a model with a Json field in the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodel Log {\n  id Int @id\n  meta Json\n}\n```\n\n----------------------------------------\n\nTITLE: Resolver Implementation for updateBio with prisma-binding\nDESCRIPTION: JavaScript implementation of the resolver for updateBio mutation using prisma-binding. It updates the user's profile bio using the provided userId.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    updateBio: (_, args, context, info) => {\n      return context.prisma.mutation.updateUser(\n        {\n          data: {\n            profile: {\n              update: { bio: args.bio },\n            },\n          },\n          where: { id: args.userId },\n        },\n        info\n      )\n    },\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Detailed Stdout Logging in Prisma Client\nDESCRIPTION: Demonstrates the expanded form of logging configuration using LogDefinition objects with explicit emit and level settings for stdout.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/130-logging.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query',\n    },\n    {\n      emit: 'stdout',\n      level: 'error',\n    },\n    {\n      emit: 'stdout',\n      level: 'info',\n    },\n    {\n      emit: 'stdout',\n      level: 'warn',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for Link Table Relation\nDESCRIPTION: SQL code generated by Prisma 1 that creates a many-to-many relation table for what was defined as a one-to-many relation in the Prisma 1 datamodel.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"_PostToUser\" (\n  \"A\" VARCHAR(25) NOT NULL REFERENCES \"Post\"(id) ON DELETE CASCADE,\n  \"B\" VARCHAR(25) NOT NULL REFERENCES \"User\"(id) ON DELETE CASCADE\n);\nCREATE UNIQUE INDEX \"_PostToUser_AB_unique\" ON \"_PostToUser\"(\"A\" text_ops,\"B\" text_ops);\nCREATE INDEX \"_PostToUser_B\" ON \"_PostToUser\"(\"B\" text_ops);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw MongoDB Commands in Prisma Client\nDESCRIPTION: Demonstrates executing raw MongoDB commands through Prisma Client. Includes methods like `$runCommandRaw`, `<model>.findRaw`, and `<model>.aggregateRaw`, applicable for use cases requiring MongoDB-specific features. These methods prioritize flexibility but lack type safety, needing manual query result handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"$runCommandRaw\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"<model>.findRaw\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"<model>.aggregateRaw\"\n```\n\n----------------------------------------\n\nTITLE: Creating Default Values in SQL Server\nDESCRIPTION: This SQL snippet shows how to create a shared default value object in SQL Server and bind it to a table column using a stored procedure. This approach is not directly supported by Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DEFAULT catcat AS 'musti';\n\nCREATE TABLE cats (\n    id INT IDENTITY PRIMARY KEY,\n    name NVARCHAR(1000)\n);\n\nsp_bindefault 'catcat', 'dbo.cats.name';\n```\n\n----------------------------------------\n\nTITLE: Markdown Template Structure for Prisma Integration Guides\nDESCRIPTION: Provides a base Markdown template for creating new Prisma ORM integration guides. Includes standard frontmatter placeholders, a developer checklist (as a 'warning' admonition), placeholders for required sections (Introduction, Prerequisites, numbered steps), and placeholder links.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'How to use Prisma ORM with __________'\nmetaTitle: 'How to use Prisma ORM and Prisma Postgres with __________'\ndescription: 'Learn how to use Prisma ORM in a __________ app'\nsidebar_label: '__________ with Prisma'\nimage: '/img/guides/prisma-__________-cover.png'\ncompletion_time: '15 min'\ncommunity_section: true\n---\n\n:::warning\n\nDEVELOPER CHECKLIST - Remove upon completion\n\n- [ ] `CTRL or CMD + F` to find 10 `_`'s and replace them with the framework name.\n\n- [ ] Provide a brief overview of the guide's purpose and the benefits of integrating Prisma ORM with the specified framework.\n\n- [ ] Link to the official documentation of the framework upon its first mention in the Introduction section.\n\n- [ ] List all necessary or recommended prerequisites, including specific software versions and any required accounts or services.\n\n- [ ] Name project *<u>framework</u>*-prisma (ie. *<u>sveltekit</u>*-prisma)\n\n- [ ] Project creation options should be detailed in an info admonition in this format:\n```markdown\nmarkdown - *Which package manager would you like to use?* `npm` \n```\n- [ ] Ensure the appropriate admonitions (note, warning, tip) are used for important information.\n\n- [ ] Include links to related guides and resources throughout the content.\n\n- [ ] Instead of using `we, we'll, ours, etc.` use `you, you'll, yours, etc.`\n\n- [ ] All lines ending before a code block should end with a colon (This one -> `:`)\n\n:::\n\n## Introduction\n\nPrisma ORM streamlines database access with type-safe queries, and when paired with [__________](https://example.com/), it creates a...\n\n:::warning\n\n***DEV NOTE:*** Above, briefly explain the benefits of using Prisma ORM with the specified framework after `it creates a...`\n\n:::\n\nIn this guide, you'll learn to integrate Prisma ORM with a Prisma Postgres database in a __________ project from scratch. You can find a complete example of this guide on [GitHub](https://github.com/prisma/prisma-examples/tree/latest/orm/__________).\n\n## Prerequisites\n- [Node.js 18+](https://nodejs.org)\n\n## 1. Set up your project\n\n## 2. Install and Configure Prisma\n\n### 2.1. Install dependencies\n```\n\n----------------------------------------\n\nTITLE: Modifying the Build Script in package.json for Prisma Generate\nDESCRIPTION: This JSON snippet shows how to modify the existing build script in the `package.json` by prepending `prisma generate`. This approach ensures that the Prisma Client is generated as part of the build process, addressing caching issues on Netlify.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/700-netlify-caching-issue.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    //add-next-line\n    \"build\": \"prisma generate && <actual-build-command>\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields from Related Models\nDESCRIPTION: This snippet demonstrates how to use nested select to choose specific fields from related models. The query returns only the user's name and the title of each related post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  select: {\n    name: true,\n    posts: {\n      select: {\n        title: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Omitting Custom Field and Dependencies in Prisma Client\nDESCRIPTION: The example demonstrates how to completely omit a custom field and its dependencies from query results using the omit option within a Prisma Client extension.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/130-result.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst xprisma = prisma.$extends({\n  result: {\n    user: {\n      sanitizedPassword: {\n        needs: { password: true },\n        compute(user) {\n          return sanitize(user.password)\n        },\n      },\n    },\n  },\n})\n\nconst user = await xprisma.user.findFirstOrThrow({\n  omit: {\n    sanitizedPassword: true,\n    password: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Introspection for CreatedAt Field\nDESCRIPTION: Shows introspection output where automatic timestamp behaviors aren't carried over due to missing SQL constraints, necessitating manual schema adjustment in Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        String   @id\n  createdAt DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Data Migration Script\nDESCRIPTION: Script to migrate existing data from the implicit relation to the new explicit relation table using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/300-implicit-to-explicit-conversion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  try {\n    const users = await prisma.user.findMany({\n      include: { posts: true },\n    });\n\n    for (const user of users) {\n      for (const post of user.posts) {\n        await prisma.userPost.create({\n          data: {\n            userId: user.id,\n            postId: post.id,\n          },\n        });\n      }\n    }\n\n    console.log(\"Data migration completed.\");\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nmain()\n  .catch((e) => {\n    throw e;\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Unix Terminal\nDESCRIPTION: Shows how to manually set environment variables on Mac/Linux systems using export command and verify using printenv.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nexport DATABASE_URL=postgresql://test:test@localhost:5432/test?schema=public\n```\n\nLANGUAGE: terminal\nCODE:\n```\nprintenv DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Workspace Plan Limit Error Message\nDESCRIPTION: The error message shown when the workspace plan limit for projects has been reached.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/900-troubleshooting.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nWorkspace plan limit reached for feature \"Project\".\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User Table with Different Types\nDESCRIPTION: SQL command to create a User table with various column types in PostgreSQL, demonstrating different data type definitions\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/830-prisma-type-system.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"public\".\"User\" (\n  id serial PRIMARY KEY NOT NULL,\n  name text NOT NULL,\n  \"isActive\" boolean NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating CreateUser Mutation with nexus-prisma\nDESCRIPTION: Original implementation of the createUser mutation using the previous nexus-prisma package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = prismaObjectType({\n  name: 'Mutation',\n  definition(t) {\n    t.prismaFields(['createUser'])\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection String Examples\nDESCRIPTION: Examples showing unsupported IPv4 connection string format and the supported DNS record connection string format for MongoDB when using Accelerate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/500-known-limitations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nmongodb://user:password@192.168.1.100:27017/db_name\n```\n\nLANGUAGE: plain\nCODE:\n```\nmongodb://user:password@my-database.example.com:27017/db_name\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Migration Tool\nDESCRIPTION: Command to run the interactive migration tool using @prisma/ppg-tunnel package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @prisma/ppg-tunnel migrate-from-ea\n```\n\n----------------------------------------\n\nTITLE: Pulling Microsoft SQL Server 2019 Docker Image\nDESCRIPTION: This command downloads the latest Microsoft SQL Server 2019 image from the official Microsoft Container Registry.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/030-sql-server-docker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mcr.microsoft.com/mssql/server:2019-latest\n```\n\n----------------------------------------\n\nTITLE: Marking Failed Migration as Applied in Prisma\nDESCRIPTION: This command marks a specific failed migration as applied in the migrations table of the production database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied Unique\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Postgres Database\nDESCRIPTION: This Docker Compose configuration sets up a Postgres database container for integration testing. It specifies the Postgres version, container name, port mapping, and database credentials needed for the test environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/150-integration-testing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# Set the version of docker compose to use\nversion: '3.9'\n\n# The containers that compose the project\nservices:\n  db:\n    image: postgres:13\n    restart: always\n    container_name: integration-tests-prisma\n    ports:\n      - '5433:5432'\n    environment:\n      POSTGRES_USER: prisma\n      POSTGRES_PASSWORD: prisma\n      POSTGRES_DB: tests\n```\n\n----------------------------------------\n\nTITLE: Formatting Prisma Schema\nDESCRIPTION: The format command executes validation, formatting, and persisting procedures on the Prisma schema file to ensure it is correctly structured and easy to read.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nprisma format\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Backwards by a Single Migration in Prisma\nDESCRIPTION: This command rolls back the most recent migration. It requires the --experimental flag to enable the feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate down --experimental\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Self-Relation Documents in MongoDB\nDESCRIPTION: These JSON documents illustrate a many-to-many self-relation in MongoDB. Each document contains user data, including arrays of IDs for users followed by or following the current user, thus creating references similar to relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_id\": { \"$oid\": \"60d9866f00a3e930009a6cdd\" },\n  \"name\": \"Bob\",\n  \"followedByIDs\": [\n    { \"$oid\": \"60d9866f00a3e930009a6cde\" },\n    { \"$oid\": \"60d9867000a3e930009a6cdf\" }\n  ],\n  \"followingIDs\": [\n    { \"$oid\": \"60d9867000a3e930009a6ce0\" },\n    { \"$oid\": \"60d9867000a3e930009a6ce1\" }\n  ]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_id\": { \"$oid\": \"60d9866f00a3e930009a6cde\" },\n  \"name\": \"Follower1\",\n  \"followingIDs\": [{ \"$oid\": \"60d9866f00a3e930009a6cdd\" }]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_id\": { \"$oid\": \"60d9867000a3e930009a6cdf\" },\n  \"name\": \"Follower2\",\n  \"followingIDs\": [{ \"$oid\": \"60d9866f00a3e930009a6cdd\" }]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_id\": { \"$oid\": \"60d9867000a3e930009a6ce0\" },\n  \"name\": \"CoolPerson1\",\n  \"followedByIDs\": [{ \"$oid\": \"60d9866f00a3e930009a6cdd\" }]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_id\": { \"$oid\": \"60d9867000a3e930009a6ce1\" },\n  \"name\": \"CoolPerson2\",\n  \"followedByIDs\": [{ \"$oid\": \"60d9866f00a3e930009a6cdd\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL with Prisma Client\nDESCRIPTION: This snippet demonstrates using raw SQL queries within Prisma Client using methods for relational databases. It discusses options such as `$queryRaw` and `$executeRaw`, noting their lack of type safety compared to newer TypedSQL features. These methods require manual result type mappings when Prisma's query API is insufficient or when dealing with dynamically generated queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"$queryRaw\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"$executeRaw\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"$queryRawUnsafe\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"$executeRawUnsafe\"\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel: UpdatedAt DateTime\nDESCRIPTION: This GraphQL code snippet shows a Prisma 1 datamodel defining a `Post` type. It includes an `updatedAt` field annotated with the `@updatedAt` directive, which tells Prisma 1 to automatically update the field's value whenever the record is updated. This behavior is handled at runtime by Prisma 1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\ntype Post {\n  id: ID! @id\n  updatedAt: DateTime! @updatedAt\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a server load function to fetch users\nDESCRIPTION: TypeScript code for a SvelteKit server route that uses Prisma to fetch all users from the database and returns them to the page component.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from '$lib/prisma';\n\nexport async function load() {\n\tconst users = await prisma.user.findMany({});\n\treturn {\n\t\tusers\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Limits in Database Connection URLs\nDESCRIPTION: Examples of setting the connection_limit parameter to 1 in PostgreSQL and MySQL connection URLs, which is recommended as a starting point for serverless environments without an external connection pooler.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public&connection_limit=1\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE?connection_limit=1\n```\n\n----------------------------------------\n\nTITLE: Customizing relation field names in Prisma schema\nDESCRIPTION: Modified Prisma schema with renamed relation fields in the User model to provide more intuitive names like 'writtenPosts' and 'favoritedPosts' while preserving the relation names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/100-custom-model-and-field-names.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id                          Int   @id @default(autoincrement())\n  author                      Int\n  favoritedBy                 Int?\n  User_Post_authorToUser      User  @relation(\"Post_authorToUser\", fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  User_Post_favoritedByToUser User? @relation(\"Post_favoritedByToUser\", fields: [favoritedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel User {\n  id             Int    @id @default(autoincrement())\n  writtenPosts   Post[] @relation(\"Post_authorToUser\")\n  favoritedPosts Post[] @relation(\"Post_favoritedByToUser\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Connection Pooling Environment Variables\nDESCRIPTION: Environment variable configuration for connecting to Supabase using connection pooling via Supavisor. The DATABASE_URL includes the pgbouncer parameter for connection pooling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/880-supabase.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# Connect to Supabase via connection pooling with Supavisor.\nDATABASE_URL=\"postgres://postgres.[your-supabase-project]:[password]@aws-0-[aws-region].pooler.supabase.com:6543/postgres?pgbouncer=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Settings in TypeScript\nDESCRIPTION: This TypeScript snippet defines the Prisma configuration with a migration driver adapter for interacting with the D1 database, including environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport type { PrismaConfig } from 'prisma'\nimport { PrismaD1HTTP } from '@prisma/adapter-d1'\n\n// import your .env file\nimport 'dotenv/config'\n\ntype Env = {\n  CLOUDFLARE_D1_TOKEN: string\n  CLOUDFLARE_ACCOUNT_ID: string\n  CLOUDFLARE_DATABASE_ID: string\n}\n\nexport default {\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema.prisma'),\n  migration: {\n    async adapter(env) {\n      return new PrismaD1HTTP({\n        CLOUDFLARE_D1_TOKEN: env.CLOUDFLARE_D1_TOKEN,\n        CLOUDFLARE_ACCOUNT_ID: env.CLOUDFLARE_ACCOUNT_ID,\n        CLOUDFLARE_DATABASE_ID: env.CLOUDFLARE_DATABASE_ID,\n      })\n    },\n  },\n} satisfies PrismaConfig<Env>\n```\n\n----------------------------------------\n\nTITLE: Single Column Check Constraint SQL Creation\nDESCRIPTION: Creates a product table with a price column that has a check constraint ensuring price is greater than 0.01 and not equal to 1240.00.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"public\".\"product\" (\n  price NUMERIC CONSTRAINT price_value_check CHECK (price > 0.01 AND price <> 1240.00)\n);\nALTER TABLE \"public\".\"product\"\n  ADD COLUMN \"productid\" serial,\n  ADD PRIMARY KEY (\"productid\");\n```\n\n----------------------------------------\n\nTITLE: Inserting JsonNull into Json Field in Prisma Client\nDESCRIPTION: Example of using Prisma.JsonNull to insert a null value into a Json field in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nprisma.log.create({\n  data: {\n    meta: Prisma.JsonNull,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema Definition\nDESCRIPTION: Complete Prisma schema including User, Organization, and Subscription models with proper relationships and enums for a SaaS application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/100-cursor.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n\nmodel User {\n  id            Int           @id @default(autoincrement())\n  email         String        @unique\n  name          String\n  password      String\n  createdAt     DateTime      @default(now())\n  updatedAt     DateTime      @updatedAt\n  deletedAt     DateTime?\n  organization  Organization  @relation(fields: [organizationId], references: [id])\n  organizationId Int\n  role          UserRole     @default(MEMBER)\n}\n\n\nmodel Organization {\n  id            Int           @id @default(autoincrement())\n  name          String\n  slug          String        @unique\n  subscription  Subscription?\n  users         User[]\n  createdAt     DateTime      @default(now())\n  updatedAt     DateTime      @updatedAt\n  deletedAt     DateTime?\n}\n\nmodel Subscription {\n  id              Int           @id @default(autoincrement())\n  organization    Organization  @relation(fields: [organizationId], references: [id])\n  organizationId  Int          @unique\n  plan           SubscriptionPlan\n  status         SubscriptionStatus @default(ACTIVE)\n  startDate      DateTime\n  endDate        DateTime?\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n  deletedAt      DateTime?\n}\n\nenum UserRole {\n  ADMIN\n  MEMBER\n}\n\nenum SubscriptionPlan {\n  FREE\n  BASIC\n  PREMIUM\n  ENTERPRISE\n}\n\nenum SubscriptionStatus {\n  ACTIVE\n  CANCELED\n  EXPIRED\n  PAST_DUE\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for User Model\nDESCRIPTION: This snippet demonstrates the TypeScript type alias generated by Prisma Client to represent the User model in code. It includes all fields from the Prisma schema with their corresponding TypeScript types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type User = {\n  id: number\n  name: string | null\n  email: string\n  isAdmin: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection URL Format\nDESCRIPTION: Generic format for MongoDB connection URL showing the required components.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/100-connect-your-database-node-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb://USERNAME:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Introspecting Database Schema\nDESCRIPTION: This command introspects the database and generates the Prisma schema file (schema.prisma) based on the existing database structure. This process helps create a Prisma schema representation of the current database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: SQL One-to-Many Relation Example\nDESCRIPTION: SQL code showing how to create tables with a one-to-many relationship using foreign keys.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    id SERIAL PRIMARY KEY\n);\nCREATE TABLE \"Post\" (\n    id SERIAL PRIMARY KEY,\n    \"author\" integer NOT NULL,\n    FOREIGN KEY (\"author\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Users with Null Values Last\nDESCRIPTION: This TypeScript code snippet shows how to sort users by their 'name' field, placing records with null values at the end. The 'nulls' option is set to 'last' for the 'updatedAt' field, and this feature is available from Prisma version 4.1.0 to 4.15.0 with orderByNulls preview feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await prisma.user.findMany({\n  orderBy: {\n    updatedAt: { sort: 'asc', nulls: 'last' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Down Migration on Database\nDESCRIPTION: This terminal command applies the down migration SQL file (down.sql) to the production database, essential for rolling back a failed up migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/60-generating-down-migrations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db execute --file ./down.sql --schema prisma/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Start PostgreSQL Container (Terminal)\nDESCRIPTION: Starts the PostgreSQL service defined in `docker-compose.postgres.yml` in detached mode (`-d`) using Docker Compose.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.postgres.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client for Long-Running Servers\nDESCRIPTION: Command to generate Prisma Client for use with Accelerate in long-running application servers like those deployed on AWS EC2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Modifying Prisma Schema to Use UUID Instead of Auto-increment IDs\nDESCRIPTION: Shows how to modify a Prisma schema to use UUIDs instead of auto-incrementing integer IDs, enabling more flexible patterns for transaction handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_25\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Team {\n  id      Int    @id @default(autoincrement())\n  id      String @id @default(uuid())\n  name    String\n  members User[]\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  id    String @id @default(uuid())\n  email String @unique\n  teams Team[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Record by Compound ID\nDESCRIPTION: This example demonstrates how to update a record identified by a compound ID. The `update()` method uses the compound ID in the `where` filter to locate the record and applies changes specified in the `data` object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst like = await prisma.like.update({\n  where: {\n    likeId: {\n      userId: 1,\n      postId: 1,\n    },\n  },\n  data: {\n    postId: 2,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI\nDESCRIPTION: Command to install Prisma CLI as a dev dependency using npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/010-generating-prisma-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Overriding UUID Generation with Database Function\nDESCRIPTION: Demonstrates how to use PostgreSQL's gen_random_uuid() function instead of Prisma's built-in uuid() for ID generation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_89\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String  @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  id   String  @id @default(uuid()) @db.Uuid\n  test String?\n}\n```\n\n----------------------------------------\n\nTITLE: Example Connection URL for Local PostgreSQL on macOS\nDESCRIPTION: Shows a typical connection string for connecting to a locally running PostgreSQL database on macOS.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma 4 with NPM\nDESCRIPTION: Command to upgrade Prisma and Prisma Client to version 4 using NPM package manager.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma@4 @prisma/client@4\n```\n\n----------------------------------------\n\nTITLE: Formatting Guide for Incorrect UI Steps in Markdown\nDESCRIPTION: This snippet demonstrates the incorrect formatting of UI interaction steps in Markdown. It highlights the need for discrete actions and clarity in instructions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nThe status changes to **Completed**.\n\n<!-- Good -->\n\nFrom **Status**, select **Completed**.\n```\n\n----------------------------------------\n\nTITLE: Nuxt App Main Component with Server Island\nDESCRIPTION: Configure the main application component to use Nuxt Islands for rendering server-side components\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtIsland name=\"User\"></NuxtIsland>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Heroku\nDESCRIPTION: Command to push your code to Heroku, which triggers the build process, runs migrations via the release phase, and deploys the application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit push heroku main\n```\n\n----------------------------------------\n\nTITLE: Tagged Template Helpers Usage\nDESCRIPTION: Examples of using SQL Template Tag helpers like join() and sql for dynamic query construction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from \"@prisma/client\";\n\nconst ids = [1, 3, 5, 10, 20];\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id IN (${Prisma.join(ids)})`;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from \"@prisma/client\";\n\nconst userName = \"\";\nconst result = await prisma.$queryRaw`SELECT * FROM User ${\n  userName ? Prisma.sql`WHERE name = ${userName}` : Prisma.empty\n}`;\n```\n\n----------------------------------------\n\nTITLE: Pagination: TypeORM\nDESCRIPTION: Implements pagination using TypeORM, skipping the first 5 posts and retrieving the next 10.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst postRepository = getRepository(Post)\nconst posts = await postRepository.find({\n  skip: 5,\n  take: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Json Field with AnyNull in Prisma Client\nDESCRIPTION: Example of using Prisma.AnyNull to filter a Json field in Prisma Client queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\n\nprisma.log.findMany({\n  where: {\n    data: {\n      meta: {\n        equals: Prisma.AnyNull,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Serverless ARM64 Query Engine Configuration\nDESCRIPTION: YAML configuration for serverless.yml to handle Prisma query engine selection for ARM64 architecture.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  webpack:\n    packagerOptions:\n      scripts:\n        - prisma generate\n        -- find . -name \"libquery_engine-*\" -not -name \"libquery_engine-arm64-openssl-*\" | xargs rm\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Script with dotenv-cli in package.json\nDESCRIPTION: This JSON snippet demonstrates how to set up a script in package.json to run Jest tests using dotenv-cli to specify the .env.sample file for the test environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test\": \"dotenv -e .env.sample -- jest -i\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Image Component with Width Control\nDESCRIPTION: React/MDX image component with src require, alt text, and width specification for controlled image sizing\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/06-image-guidelines.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img\n  src={require(\"./images/snagit-text-annotation-config.png\").default}\n  alt=\"SnagIt - Screenshot text annotations\"\n  width=\"250\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client with New Generator\nDESCRIPTION: This bash command generates the Prisma Client using the new prisma-client generator configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/03-generators.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: SQL: Add DEFAULT Constraint\nDESCRIPTION: This SQL statement alters the `Post` table to add a `DEFAULT` constraint to the `published` column, setting its default value to `false`. This change ensures that the database itself enforces the default value, enabling Prisma ORM to correctly introspect and recognize the default setting.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nALTER TABLE `Post`\n\tALTER COLUMN published SET DEFAULT false;\n```\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Migrate Dev Command\nDESCRIPTION: This command generates and applies new migrations based on Prisma schema changes, creating migration files that track the history of database changes. It's ideal for production environments and team collaboration as it maintains version control of your database schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/200-install-prisma-client-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Schema with PrismaPg Adapter\nDESCRIPTION: Example showing how to specify a custom PostgreSQL schema when initializing the PrismaPg adapter.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst adapter = new PrismaPg(\n  { connectionString },\n  { schema: 'myPostgresSchema' }\n)\n```\n\n----------------------------------------\n\nTITLE: Drizzle getData Action\nDESCRIPTION: The original `getData` action implemented using Drizzle. It selects all records from the `todo` table using `db.select().from(todo)` and returns the data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"import db from \\\"@/db/drizzle\\\";\nimport { todo } from \\\"@/db/schema\\\";\n\nexport const getData = async () => {\n  const data = await db.select().from(todo);\n  return data;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Creating Relational Database Schema in PostgreSQL\nDESCRIPTION: This SQL snippet creates tables for users, posts, profiles, categories, and post_in_categories with their respective columns and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/100-custom-model-and-field-names.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n\tuser_id SERIAL PRIMARY KEY NOT NULL,\n\tname VARCHAR(256),\n\temail VARCHAR(256) UNIQUE NOT NULL\n);\nCREATE TABLE posts (\n\tpost_id SERIAL PRIMARY KEY NOT NULL,\n\tcreated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n\ttitle VARCHAR(256) NOT NULL,\n\tcontent TEXT,\n\tauthor_id INTEGER REFERENCES users(user_id)\n);\nCREATE TABLE profiles (\n\tprofile_id SERIAL PRIMARY KEY NOT NULL,\n\tbio TEXT,\n\tuser_id INTEGER NOT NULL UNIQUE REFERENCES users(user_id)\n);\nCREATE TABLE categories (\n\tcategory_id SERIAL PRIMARY KEY NOT NULL,\n\tname VARCHAR(256)\n);\nCREATE TABLE post_in_categories (\n\tpost_id INTEGER NOT NULL REFERENCES posts(post_id),\n\tcategory_id INTEGER NOT NULL REFERENCES categories(category_id)\n);\nCREATE UNIQUE INDEX post_id_category_id_unique ON post_in_categories(post_id int4_ops,category_id int4_ops);\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL Extensions in Prisma Schema\nDESCRIPTION: Configuration for enabling PostgreSQL extensions in the Prisma schema, specifically adding the PostGIS extension as a preview feature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  //add-next-line\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  //add-next-line\n  extensions = [postgis]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Rolled Back Migration\nDESCRIPTION: Using the migrate resolve command, this action records the rollout of a failed migration named add_profile, ensuring the migration history is updated accurately.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/60-generating-down-migrations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate resolve --rolled-back add_profile\n```\n\n----------------------------------------\n\nTITLE: Updating imports for Prisma types in JavaScript\nDESCRIPTION: Example of how to update imports for Prisma types like Decimal and NotFoundError when upgrading to Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\nconst num = new Prisma.Decimal(24.454545)\nconst notFound = new Prisma.NotFoundError()\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Field Values in Prisma Client\nDESCRIPTION: This query returns only the unique role values from the user table by using distinct with select. It's a common pattern for retrieving all possible values of an enum-like field like user roles.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst distinctRoles = await prisma.user.findMany({\n  distinct: ['role'],\n  select: {\n    role: true,\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    role: 'USER',\n  },\n  {\n    role: 'ADMIN',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Previously Omitted Fields with Explicit Select (TypeScript)\nDESCRIPTION: This snippet shows how to override a globally omitted field by explicitly selecting it in a query. The 'password' field, which was previously omitted, is now included in the query results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/063-excluding-fields.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  select: {\n    firstName: true,\n    lastName: true,\n    password: true // The password field is now selected.\n  },\n  where: {\n    id: 1\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized One-to-One Relation\nDESCRIPTION: Example of a Prisma schema showing how a one-to-one relation is properly recognized after adding a UNIQUE constraint to the foreign key column.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_18\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      String   @id\n  //highlight-next-line\n  Profile Profile?\n}\n\nmodel Profile {\n  id   String  @id\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Shareable Prisma Extension\nDESCRIPTION: Defines a generic Prisma extension with the `Prisma.defineExtension` method. Applies a new method to all Prisma Client models by utilizing `$allModels`. Outputs the query result of the newly defined method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/140-shared-extensions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default Prisma.defineExtension({\n  name: 'prisma-extension-find-or-create',\n  model: {\n    $allModels: {\n      findOrCreate(/* args */) {\n        /* code for the new method */\n        return query(args)\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for PostgreSQL\nDESCRIPTION: Prisma schema configuration for PostgreSQL with driver adapters feature enabled.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying posts containing 'cat' using Prisma Client\nDESCRIPTION: This TypeScript snippet demonstrates how to use Prisma Client to search for posts containing the word 'cat' in the body field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.posts.findMany({\n  where: {\n    body: {\n      search: 'cat',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Nullable Parameter Type Example\nDESCRIPTION: Example SQL comment showing how to define a nullable string parameter in TypedSQL by adding a question mark after the alias.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n-- @param {String} $1:name? The name of the user (optional)\n```\n\n----------------------------------------\n\nTITLE: Deleting object with remove: TypeORM\nDESCRIPTION: Deletes a user using TypeORM's `remove` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst deletedUser = await userRepository.remove(user)\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Migration Script\nDESCRIPTION: Terminal command to generate a migration script using prisma migrate diff. Compares an empty state to the current schema and outputs SQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client and Running Database Migrations\nDESCRIPTION: Terminal commands to generate the Prisma Client based on the schema and run database migrations to create the tables in PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\nnpx prisma migrate dev --name \"init\"\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma DB Pull Error Codes in Markdown\nDESCRIPTION: This snippet defines error codes for the 'prisma db pull' command, including descriptions for introspection-related errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/250-error-reference.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `prisma db pull`\n\n#### `P4000`\n\n\"Introspection operation failed to produce a schema file: \\{introspection_error}\"\n\n#### `P4001`\n\n\"The introspected database was empty.\"\n\n#### `P4002`\n\n\"The schema of the introspected database was inconsistent: \\{explanation}\"\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting TypeScript Upgrade Command\nDESCRIPTION: Terminal command to upgrade TypeScript to a version compatible with Prisma ORM\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/400-system-requirements.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install -D typescript\n```\n\n----------------------------------------\n\nTITLE: Shorthand Notation for Creating Order with Composite Type\nDESCRIPTION: Illustrates using a shorthand notation to create an order with a composite type without the `set` operation in Prisma. Requires Prisma and a configured Prisma Client instance. It simplifies the creation of `shippingAddress` in an `Order` record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await prisma.order.create({\n  data: {\n    // Normal relation\n    product: { connect: { id: 'some-object-id' } },\n    color: 'Red',\n    size: 'Large',\n    // Composite type\n    shippingAddress: {\n      street: '1084 Candycane Lane',\n      city: 'Silverlake',\n      zip: '84323',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Non-Idempotent Stripe Customer Creation Flow\nDESCRIPTION: Initial implementation of Stripe customer creation and team update flow that lacks idempotency, showing potential issues with concurrent operations and error handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst teamId = 9\nconst planId = 'plan_id'\n\n// Count team members\nconst numTeammates = await prisma.user.count({\n  where: {\n    teams: {\n      some: {\n        id: teamId,\n      },\n    },\n  },\n})\n\n// Create a customer in Stripe for plan-9454549\nconst customer = await stripe.customers.create({\n  externalId: teamId,\n  plan: planId,\n  quantity: numTeammates,\n})\n\n// Update the team with the customer id to indicate that they are a customer\n// and support querying this customer in Stripe from our application code.\nawait prisma.team.update({\n  data: {\n    customerId: customer.id,\n  },\n  where: {\n    id: teamId,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Matching UI Control Capitalization\nDESCRIPTION: Shows the correct way to document UI control text exactly as it appears\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\nClick **CANCEL**.\n\n<!-- Bad -->\n\nClick **Cancel**.\n```\n\n----------------------------------------\n\nTITLE: Example Posts Query in GraphQL\nDESCRIPTION: A sample GraphQL query for retrieving posts with their IDs, titles, and author information, useful for testing the implemented resolver.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  posts {\n    id\n    title\n    author {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SDL Schema for updateBio with Nexus\nDESCRIPTION: The GraphQL SDL schema automatically generated by Nexus based on the code-first definition, showing the updateBio mutation signature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_36\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  createDraft(title: String!, content: String, authorId: String!): Post!\n  //highlight-next-line\n  updateBio(bio: String!, userUniqueInput: UserUniqueInput!): User\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Type in GraphQL Schema\nDESCRIPTION: This snippet shows the GraphQL schema definition for the User type, including its fields and relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype User implements Node {\n  id: ID!\n  email: String\n  name: String!\n  posts(\n    where: PostWhereInput\n    orderBy: Enumerable<PostOrderByInput>\n    skip: Int\n    after: String\n    before: String\n    first: Int\n    last: Int\n  ): [Post!]\n  role: Role!\n  profile: Profile\n  jsonData: Json\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced GraphQL Resolver with Type Hints\nDESCRIPTION: Improved filterPosts resolver implementation with JSDoc type annotations for parameters to enable proper autocompletion.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/100-autocompletion-in-graphql-resolvers-with-js.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {any} parent\n * @param {{ searchString: string }} args\n * @param {{ prisma: Prisma }} ctx\n */\nfilterPosts: (parent, args, ctx) => {\n  return ctx.prisma.post.findMany({\n    where: {\n      OR: [\n        { title: { contains: args.searchString } },\n        { content: { contains: args.searchString } },\n      ],\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Many-to-Many Relations in Prisma Schema\nDESCRIPTION: This Prisma schema defines an explicit many-to-many relationship between Post and Category models using a PostToCategories relation table. It includes model mappings to match the database table names and properly defines the relationships between the models with foreign key references.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_28\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id                Int                @id @default(autoincrement())\n  title             String\n  content           String?\n  published         Boolean            @default(false)\n  postsToCategories PostToCategories[]\n\n  @@map(\"post\")\n}\n\nmodel Category {\n  id                Int                @id @default(autoincrement())\n  name              String\n  postsToCategories PostToCategories[]\n\n  @@map(\"category\")\n}\n\nmodel PostToCategories {\n  postId     Int\n  categoryId Int\n  category   Category @relation(fields: [categoryId], references: [id])\n  post       Post     @relation(fields: [postId], references: [id])\n\n  @@id([postId, categoryId])\n  @@index([postId])\n  @@index([categoryId])\n  @@map(\"posts_to_categories\")\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Init Command Triggering Workspace Limit Error\nDESCRIPTION: Example of running the prisma init command that may trigger workspace plan limit error.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/900-troubleshooting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma@latest init --db\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Backwards to a Specific Migration by Timestamp in Prisma\nDESCRIPTION: This command rolls back all migrations up to and including the migration with the specified timestamp. Useful when you want to revert to a specific point in time.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate down 20200223181448 --experimental\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for Enum Field\nDESCRIPTION: SQL statement generated by Prisma 1 to create a table with a TEXT column for an enum field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  role TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: SQL Query Logs for Prisma findMany Method in JavaScript\nDESCRIPTION: These JavaScript logs show the SQL queries generated by the Prisma findMany method. They highlight the execution of queries with different parameters and durations, illustrating the n+1 problem where multiple queries are generated for fetching posts by each user separately.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/100-query-optimization-performance.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"\"\"\n{\n  timestamp: 2021-02-19T09:43:06.332Z,\n  query: 'SELECT `dev`.`User`.`id`, `dev`.`User`.`email`, `dev`.`User`.`name` FROM `dev`.`User` WHERE 1=1 LIMIT ? OFFSET ?',\n  params: '[-1,0]',\n  duration: 0,\n  target: 'quaint::connector::metrics'\n}\n\"\"\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"\"\"\n{\n  timestamp: 2021-02-19T09:43:06.343Z,\n  query: 'SELECT `dev`.`Post`.`id`, `dev`.`Post`.`createdAt`, `dev`.`Post`.`updatedAt`, `dev`.`Post`.`title`, `dev`.`Post`.`content`, `dev`.`Post`.`published`, `dev`.`Post`.`viewCount`, `dev`.`Post`.`authorId` FROM `dev`.`Post` WHERE `dev`.`Post`.`authorId` = ? LIMIT ? OFFSET ?',\n  params: '[1,-1,0]',\n  duration: 0,\n  target: 'quaint::connector::metrics'\n}\n{\n  timestamp: 2021-02-19T09:43:06.347Z,\n  query: 'SELECT `dev`.`Post`.`id`, `dev`.`Post`.`createdAt`, `dev`.`Post`.`updatedAt`, `dev`.`Post`.`title`, `dev`.`Post`.`content`, `dev`.`Post`.`published`, `dev`.`Post`.`viewCount`, `dev`.`Post`.`authorId` FROM `dev`.`Post` WHERE `dev`.`Post`.`authorId` = ? LIMIT ? OFFSET ?',\n  params: '[3,-1,0]',\n  duration: 0,\n  target: 'quaint::connector::metrics'\n}\n{// And so on\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive JSON Property Filter in MySQL\nDESCRIPTION: Query demonstrating how to use case-insensitive string filtering on JSON properties in MySQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: '$.petType',\n      string_contains: 'cat',\n      mode: 'insensitive'\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Migrations Directory Structure\nDESCRIPTION: Command to create the required directory structure for migrations, using the -p flag to recursively create missing folders.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Model Definition in Prisma Schema\nDESCRIPTION: Defines a Prisma model with MongoDB-specific annotations. This schema demonstrates the mapping of the MongoDB `objectId` type to a Prisma `String` with `@db.ObjectId`. There is also an `Unsupported` type used for types not yet supported by Prisma. This snippet requires Prisma ORM and a connection to a MongoDB database configured for introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  id    String                           @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name  String\n  regex Unsupported(\"RegularExpression\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native Database Function in Prisma Schema\nDESCRIPTION: Shows how to use the PostgreSQL gen_random_uuid() function as a default value for an id field in a User model using dbgenerated().\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/70-unsupported-database-features.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id String @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n}\n```\n\n----------------------------------------\n\nTITLE: Rename prisma directory\nDESCRIPTION: Renames the existing `prisma` directory to `prisma1`. This step is crucial to avoid naming conflicts between the old Prisma 1 configuration and the new Prisma ORM 2 setup.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nmv prisma prisma1\n```\n\n----------------------------------------\n\nTITLE: Generated PostUncheckedCreateInput Type Definition\nDESCRIPTION: This snippet defines the PostUncheckedCreateInput type, which includes a relation scalar field, allowing for direct writes to relation fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype PostUncheckedCreateInput = {\\n  id?: number\\n  title: string\\n  content?: string | null\\n  authorId: number\\n}\n```\n\n----------------------------------------\n\nTITLE: Define Prisma schema with environment variable\nDESCRIPTION: This Prisma schema configuration specifies the database provider and sets the connection URL using the `DATABASE_URL` environment variable.  It supports different database types such as `postgresql`, `mysql` and others depending on the application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\" // this might also be `mysql` or another value depending on your database\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Client-Level Method Existence in Extended Clients\nDESCRIPTION: Demonstrates how to safely check for the existence of client-level methods before invoking them in an extended Prisma client to prevent potential runtime errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst xPrisma = new PrismaClient().$extends(...);\n\nif (xPrisma.$connect) {\n  xPrisma.$connect()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Fields in Prisma Schema for MongoDB\nDESCRIPTION: This Prisma schema snippet demonstrates how to define relation fields and relation scalar fields in a User and Post model for MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String @unique\n  role  Role   @default(USER)\n  posts Post[] // relation field (defined only at the Prisma ORM level)\n}\n\nmodel Post {\n  id       String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title    String\n  author   User   @relation(fields: [authorId], references: [id]) // relation field (uses the relation scalar field `authorId` below)\n  authorId String @db.ObjectId // relation scalar field (used in the `@relation` attribute above)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma CLI with npm\nDESCRIPTION: Executes Prisma CLI commands using npm's package runner.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Server Named Instance\nDESCRIPTION: This snippet demonstrates how to connect to a named instance of Microsoft SQL Server using integrated security. It shows the connection string format for a specific named instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nsqlserver://mycomputer\\sql2019;database=sample;integratedSecurity=true;trustServerCertificate=true;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows PowerShell\nDESCRIPTION: Shows how to set environment variables in Windows using PowerShell and verify the variable is set correctly.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n[Environment]::SetEnvironmentVariable(\"DATABASE_URL\", \"postgresql://test:test@localhost:5432/test?schema=public\")\n```\n\nLANGUAGE: terminal\nCODE:\n```\nGet-ChildItem Env:DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Basic Enum Definition in Prisma Schema\nDESCRIPTION: Example of defining an enum with two values (USER and ADMIN) and using it in a User model for both relational databases and MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_90\n\nLANGUAGE: prisma\nCODE:\n```\nenum Role {\n  USER\n  ADMIN\n}\n\nmodel User {\n  id   Int  @id @default(autoincrement())\n  role Role\n}\n```\n\n----------------------------------------\n\nTITLE: Introspected Schema with ID Field\nDESCRIPTION: Result of introspecting a Prisma 1 ID field in Prisma ORM 2.x.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_42\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id String @id\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Command for Development Server\nDESCRIPTION: This terminal command starts the Next.js development server for the application that uses multiple Prisma Clients.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Terminal-Styled Code Block\nDESCRIPTION: Demonstrates how to create a code block styled as a terminal output.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n```terminal\nnpm run dev\n```\n```\n\n----------------------------------------\n\nTITLE: Enhanced Prisma Schema with Relations\nDESCRIPTION: Final Prisma schema with added relation attributes to establish connections between Post and User models, enabling joins in Prisma Client queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-typescript-mongodb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title  String\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting unused Prisma 1 files\nDESCRIPTION: Command to remove files specific to the Prisma 1 setup after migration. This deletes the datamodel.prisma and prisma.yml files from the prisma1 directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nrm prisma1/datamodel.prisma prisma1/prisma.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with necessary dependencies and tsconfig.json\nDESCRIPTION: Commands to install TypeScript and ts-node-dev for TypeScript development. Creation and content of a tsconfig.json configuration file specifying compiler options for strict type checking, setting the root directory to 'src', skipping library checks, no code emission, and including all files under 'src/'. This setup is essential for developing the Nexus API in TypeScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install typescript ts-node-dev --save-dev\n```\n\nLANGUAGE: terminal\nCODE:\n```\ntouch tsconfig.json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"rootDir\": \"src\",\n    \"noEmit\": true\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve Prisma Migrate\nDESCRIPTION: Marks the initial migration as applied by adding it to the `_prisma_migrations` table. This command tells Prisma Migrate that the current database schema matches the schema defined in `prisma/schema.prisma`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma migrate resolve --applied 0_init\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Database Migration\nDESCRIPTION: This command creates and runs a database migration named 'init' that creates the User table based on the Prisma schema definition.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Invoking Prisma CLI with npx\nDESCRIPTION: This command demonstrates how to invoke the Prisma CLI using npx. It's the initial step in setting up a Prisma ORM project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/_prisma-init-partial.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Refined Prisma Schema\nDESCRIPTION: An improved version of the Prisma schema with renamed relation fields to follow Prisma's naming conventions and improve API ergonomics.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-cockroachdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        BigInt   @id @default(autoincrement())\n  title     String   @unique @db.String(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  BigInt\n  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel Profile {\n  id     BigInt  @id @default(autoincrement())\n  bio    String?\n  userId BigInt  @unique\n  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel User {\n  id      BigInt   @id @default(autoincrement())\n  name    String?  @db.String(255)\n  email   String   @unique @db.String(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Using 'choose' for Conceptual Descriptions\nDESCRIPTION: This example explains the appropriate use of \"choose\" when describing a decision or choice in a more general, conceptual way, rather than a specific UI interaction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n<!-- Good -->\n\nYou can choose to host your project in Vercel or Netlify.\n```\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Before Migration with Imports\nDESCRIPTION: This GraphQL snippet represents a schema setup that imports types from another file using 'graphql-import'. It imports 'Post' and 'User' types from a prisma-generated GraphQL schema, which is typical for projects using prisma-binding in Prisma 1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# import Post from './generated/prisma.graphql'\\n# import User from './generated/prisma.graphql'\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Environment File in TypeScript\nDESCRIPTION: Demonstrates how to load environment variables from a custom file name using dotenv configuration options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from 'dotenv'\n\nvar envFile = path.resolve(join(__dirname, \"myenv.env\"))\ndotenv.config({path: envFile}) // Load the environment variables\nconsole.log(`The connection URL is ${process.env.DATABASE_URL}`)\n```\n\n----------------------------------------\n\nTITLE: Using Prisma.skip instead of undefined with strictUndefinedChecks\nDESCRIPTION: Demonstrates how to use Prisma.skip (a symbol provided by Prisma) to omit fields from queries when the strictUndefinedChecks feature is enabled, instead of using undefined which would cause an error.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This will throw an error\nprisma.user.create({\n  data: {\n    name: 'Alice',\n    email: undefined // Error: Cannot explicitly use undefined here\n  }\n})\n\n// Use `Prisma.skip` (a symbol provided by Prisma) to omit a field\nprisma.user.create({\n  data: {\n    name: 'Alice',\n    email: Prisma.skip // This field will be omitted from the query\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Targets for Prisma in Node.js 20+\nDESCRIPTION: This snippet adjusts the Prisma schema configuration for Node.js 20 and above, ensuring compatibility by defining the necessary binary targets for the query engine during deployment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/500-deploy-to-netlify.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nbinaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Project\nDESCRIPTION: Command to initialize a new Prisma project with custom datasource provider and output location\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/_prisma-init-partial.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --datasource-provider ${props.datasource.toLowerCase()} --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies After Configuration Update\nDESCRIPTION: Terminal command to reinstall dependencies after adding the OpenTelemetry API version override to package.json.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Terminal Command for Running Prisma Studio\nDESCRIPTION: This terminal command runs Prisma Studio to view and edit data in the databases. It opens two browser windows for accessing both the user and post databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpm run studio\n```\n\n----------------------------------------\n\nTITLE: Listing All Workspaces in Prisma Data Platform\nDESCRIPTION: This command lists all workspaces available for the authenticated account, helping users manage their workspace context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform workspace show --early-access\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for ID Field\nDESCRIPTION: SQL statement generated by Prisma 1 to create a table with a VARCHAR(25) column for an ID field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema Model\nDESCRIPTION: The resulting Prisma schema after introspection, showing model definitions with fields, relations, and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Primary Key in Prisma Schema\nDESCRIPTION: This snippet shows how to define a composite primary key in a Prisma schema using the @@id attribute. It creates a primary key on the 'firstName' and 'lastName' fields of the User model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  firstName String\n  lastName  String\n\n  @@id([firstName, lastName])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Docker Compose File (Terminal)\nDESCRIPTION: This command creates an empty `docker-compose.yml` file in the current project directory using the `touch` command. This file will be used to define and manage the application's services with Docker Compose.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_19\n\nLANGUAGE: terminal\nCODE:\n```\ntouch docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Complex @@ignore Example with Relations\nDESCRIPTION: Demonstrates using @@ignore on an invalid model and @ignore on related fields to exclude both from Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_67\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int  @default(autoincrement())\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n\n  @@ignore\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  posts Post[]  @ignore\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project with TypeScript and Prisma Dependencies\nDESCRIPTION: Terminal commands to initialize a Node.js project with npm and install necessary dependencies including Prisma CLI, TypeScript, TSX, and Node.js type definitions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install prisma typescript tsx @types/node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Users Query Resolver with Prisma Binding\nDESCRIPTION: This code shows how the users query resolver was implemented using Prisma Binding's forwardTo function.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    users: forwardTo('prisma'),\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Year Field Definition in Prisma Schema\nDESCRIPTION: Example of defining a year field using MySQL's YEAR type with Int in Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_20\n\nLANGUAGE: prisma\nCODE:\n```\nyearField     Int    @db.Year\n```\n\n----------------------------------------\n\nTITLE: Defining Category Type with @nexus/schema\nDESCRIPTION: Updated Category type definition using @nexus/schema with explicit field definitions and configuration options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst Category = objectType({\n  name: 'Category',\n  definition(t) {\n    t.model.id()\n    t.model.name()\n    t.model.posts({\n      pagination: true,\n      ordering: true,\n      filtering: true,\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Neon Edge Function Implementation\nDESCRIPTION: Edge function implementation using Prisma Client with Neon adapter to query users.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaNeon } from '@prisma/adapter-neon'\n\nexport const runtime = 'edge'\n\nexport async function GET(request: Request) {\n  const adapter = new PrismaNeon({ connectionString: process.env.DATABASE_URL })\n  const prisma = new PrismaClient({ adapter })\n\n  const users = await prisma.user.findMany()\n\n  return NextResponse.json(users, { status: 200 })\n}\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Database URL Configuration\nDESCRIPTION: Environment variable setup for PlanetScale database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://32qxa2r7hfl3102wrccj:password@us-east.connect.psdb.cloud/demo-cf-worker-ps?sslaccept=strict\"\n```\n\n----------------------------------------\n\nTITLE: Implementing deleteTodo Action with Drizzle ORM in TypeScript\nDESCRIPTION: This code defines a deleteTodo action using Drizzle ORM to remove a Todo record from the database. It imports necessary functions from drizzle-orm, sets up a delete query with a where clause to match the provided id, and revalidates the path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eq } from \"drizzle-orm\";\nimport { revalidatePath } from \"next/cache\";\n\nimport db from \"@/db/drizzle\";\nimport { todo } from \"@/db/schema\";\n\nexport const deleteTodo = async (id: number) => {\n  await db.delete(todo).where(eq(todo.id, id));\n  revalidatePath(\"/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of @relation Attribute in Many-to-Many Relation\nDESCRIPTION: This snippet shows an incorrect use of the @relation attribute in a many-to-many relationship, which creates two separate one-to-many relationships instead of a many-to-many relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/500-troubleshooting-relations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  categories Category[] @relation(\"Category\")\n  Category   Category?  @relation(\"Post\", fields: [categoryId], references: [id])\n  categoryId Int?\n}\n\nmodel Category {\n  id     Int    @id @default(autoincrement())\n  name   String\n  posts  Post[] @relation(\"Post\")\n  Post   Post?  @relation(\"Category\", fields: [postId], references: [id])\n  postId Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Create Dockerfile (Terminal)\nDESCRIPTION: Creates an empty `Dockerfile` in the project root directory using the `touch` command. This file will contain instructions to build the application's Docker image.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntouch Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Excluding Generated Client from Version Control\nDESCRIPTION: This snippet shows how to update the .gitignore file to exclude the generated Prisma client directory from version control.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/_prisma-init-partial.mdx#2025-04-21_snippet_2\n\nLANGUAGE: code\nCODE:\n```\n//add-start\ngenerated/prisma/\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory in Terminal\nDESCRIPTION: Commands to create a new project directory named 'hello-prisma' and navigate into it, setting up the initial folder structure for the Prisma MongoDB project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Order By Relation Feature\nDESCRIPTION: Enhanced sorting capabilities in Prisma queries to order results based on related model attributes and aggregates\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`orderByRelation`\n```\n\n----------------------------------------\n\nTITLE: Rolling Back a Failed Migration\nDESCRIPTION: Mark a migration as rolled back to allow re-deployment after addressing potential issues in the migration process\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate resolve --rolled-back \"20201127134938_added_bio_index\"\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Prisma CLI\nDESCRIPTION: Example of using the 'prisma db seed' command to seed the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\nprisma db seed\n```\n\n----------------------------------------\n\nTITLE: Prisma getData Action\nDESCRIPTION: The `getData` action implemented using Prisma Client. It retrieves all records from the `todo` model using `prisma.todo.findMany()` and returns the data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { prisma } from \\\"@/db/prisma\\\";\n\nexport const getData = async () => {\n  const data = await prisma.todo.findMany();\n  return data;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Video Data Type with Prisma\nDESCRIPTION: This snippet shows how to create a `VideoWithActivity` type definition for objects returned from Prisma queries. It includes a mapping function `toVideo`, which transforms a `VideoWithActivity` object into a simplified `Video` type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma, Video as VideoDB, Activity } from '@prisma/client'\\n\\ntype Video = Omit<VideoDB & Activity, 'type'>\\n\\n// Create `VideoWithActivity` typings for the objects returned above\\nconst videoWithActivity = Prisma.validator<Prisma.VideoDefaultArgs>()({\\n  include: { activity: true },\\n})\\ntype VideoWithActivity = Prisma.VideoGetPayload<typeof videoWithActivity>\\n\\n// Map to `Video` type\\nfunction toVideo(a: VideoWithActivity): Video {\\n  return {\\n    id: a.id,\\n    url: a.activity.url,\\n    ownerId: a.activity.ownerId,\\n    duration: a.duration,\\n    activityId: a.activity.id,\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typed JSON Fields in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define typed JSON fields in a Prisma schema using abstract syntax tree comments. It shows the use of a custom type annotation for a JSON field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_27\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Log {\n  id Int @id\n\n  /// [LogMetaType]\n  meta Json\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Tools on Linux\nDESCRIPTION: Commands to install PostgreSQL client tools version 17 on Linux using apt\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/500-backups.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nsudo apt-get update\nsudo apt-get install postgresql-client-17\nwhich pg_dump\nwhich pg_restore\n```\n\n----------------------------------------\n\nTITLE: Sorting List of Records with Prisma Client\nDESCRIPTION: Shows how to sort lists of records using Prisma Client's `orderBy` clause, demonstrating the transition from v1 to ORM 2 syntax, which is more comprehensive and type-safe.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.posts({\n  orderBy: 'title_ASC',\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.posts({\n  orderBy: {\n    title: 'asc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Correctly Disambiguating Relations Using the name Argument (MongoDB)\nDESCRIPTION: This code demonstrates the correct way to disambiguate relations between User and Post models by using the name argument in the @relation attribute in MongoDB. Each relation has a unique name that matches on both sides.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id           String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name         String?\n  writtenPosts Post[]  @relation(\"WrittenPosts\")\n  pinnedPost   Post?   @relation(\"PinnedPost\")\n}\n\nmodel Post {\n  id         String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title      String?\n  author     User    @relation(\"WrittenPosts\", fields: [authorId], references: [id])\n  authorId   String  @db.ObjectId\n  pinnedBy   User?   @relation(\"PinnedPost\", fields: [pinnedById], references: [id])\n  pinnedById String? @unique @db.ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma binary targets for Node.js 20+\nDESCRIPTION: Specifies the binary targets for Prisma ORM for compatibility with Node.js version 20 and above within the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nbinaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Structure for Creating a Custom Query Extension\nDESCRIPTION: Shows the basic structure for creating a Prisma Client query extension, including the optional name parameter and query object targeting a specific model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  name?: 'name',\n  query?: {\n    user: { ... } // in this case, we add a query to the `user` model\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Fields in Prisma Schema for MongoDB\nDESCRIPTION: This example demonstrates how to define scalar fields in Prisma models for MongoDB. The Comment model uses ObjectId for its primary key with appropriate MongoDB mappings, and the Tag model has a string primary key mapped to MongoDB's _id field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  id      String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title   String\n  content String\n}\n\nmodel Tag {\n  name String @id @map(\"_id\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the type of an extended Prisma Client from a singleton function in TypeScript\nDESCRIPTION: Example demonstrating how to get the type of an extended Prisma Client when using it as a singleton, using both typeof and ReturnType utility types from TypeScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getExtendedClient() {\n  return new PrismaClient().$extends({\n    /* extension */\n  })\n}\n\ntype ExtendedPrismaClient = ReturnType<typeof getExtendedClient>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Functions with Context (Dependency Injection)\nDESCRIPTION: TypeScript implementation of user creation and update functions using dependency injection pattern. Functions receive context as a parameter containing Prisma Client instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from './context'\n\ninterface CreateUser {\n  name: string\n  email: string\n  acceptTermsAndConditions: boolean\n}\n\nexport async function createUser(user: CreateUser, ctx: Context) {\n  if (user.acceptTermsAndConditions) {\n    return await ctx.prisma.user.create({\n      data: user,\n    })\n  } else {\n    return new Error('User must accept terms!')\n  }\n}\n\ninterface UpdateUser {\n  id: number\n  name: string\n  email: string\n}\n\nexport async function updateUsername(user: UpdateUser, ctx: Context) {\n  return await ctx.prisma.user.update({\n    where: { id: user.id },\n    data: user,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Accelerate Error Codes in Markdown\nDESCRIPTION: This snippet defines error codes for Prisma Accelerate, including descriptions for various connection and query-related errors specific to the Accelerate service.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/250-error-reference.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Prisma Accelerate\n\nPrisma Accelerate-related errors start with `P6xxx` except for [`P5011`](/orm/reference/error-reference#p5011-too-many-requests).\n\n#### `P6000` (`ServerError`)\n\nGeneric error to catch all other errors.\n\n#### `P6001` (`InvalidDataSource`)\n\nThe URL is malformed; for instance, it does not use the `prisma://` protocol.\n\n#### `P6002` (`Unauthorized`)\n\nThe API Key in the connection string is invalid.\n\n#### `P6003` (`PlanLimitReached`)\n\nThe included usage of the current plan has been exceeded. This can only occur on the [free plan](https://www.prisma.io/pricing).\n\n#### `P6004` (`QueryTimeout`)\n\nThe global timeout of Accelerate has been exceeded. You can find the limit [here](/accelerate/connection-pooling#query-timeout-limit).\n\n> Also see the [troubleshooting guide](/accelerate/troubleshoot#p6004-querytimeout) for more information.\n\n#### `P6005` (`InvalidParameters`)\n\nThe user supplied invalid parameters. Currently only relevant for transaction methods. For example, setting a timeout that is too high. You can find the limit [here](/accelerate/connection-pooling#interactive-transactions-query-timeout-limit).\n\n#### `P6006` (`VersionNotSupported`)\n\nThe chosen Prisma version is not compatible with Accelerate. This may occur when a user uses an unstable development version that we occasionally prune.\n\n#### `P6008` (`ConnectionError|EngineStartError`)\n\nThe engine failed to start. For example, it couldn't establish a connection to the database.\n\n> Also see the [troubleshooting guide](/accelerate/troubleshoot#p6008-connectionerrorenginestarterror) for more information.\n\n#### `P6009` (`ResponseSizeLimitExceeded`)\n\nThe global response size limit of Accelerate has been exceeded. You can find the limit [here](/accelerate/connection-pooling#response-size-limit).\n\n> Also see the [troubleshooting guide](/accelerate/troubleshoot#p6009-responsesizelimitexceeded) for more information.\n\n#### `P6010` (`ProjectDisabledError`)\n\nYour accelerate project is disabled. Please [enable](/accelerate/getting-started#1-enable-accelerate) it again to use it.\n\n#### `P5011` (`Too Many Requests`)\n\nThis error indicates that the request volume exceeded. Implement a back-off strategy and try again later. For assistance with expected high workloads, contact [support](/platform/support).\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema Engine Error Codes in Markdown\nDESCRIPTION: This snippet defines error codes for the Prisma Schema Engine (previously Migration Engine), including descriptions for various migration-related errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/250-error-reference.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Prisma Migrate (Schema Engine)\n\n<Admonition type=\"warning\">\n\nThe Schema Engine was previously called Migration Engine. This change was introduced in version [5.0.0](https://github.com/prisma/prisma/releases/tag/5.0.0).\n\n</Admonition>\n\n#### `P3000`\n\n\"Failed to create database: \\{database_error}\"\n\n#### `P3001`\n\n\"Migration possible with destructive changes and possible data loss: \\{migration_engine_destructive_details}\"\n\n#### `P3002`\n\n\"The attempted migration was rolled back: \\{database_error}\"\n\n#### `P3003`\n\n\"The format of migrations changed, the saved migrations are no longer valid. To solve this problem, please follow the steps at: [https://pris.ly/d/migrate](https://pris.ly/d/migrate)\"\n\n#### `P3004`\n\n\"The `{database_name}` database is a system database, it should not be altered with prisma migrate. Please connect to another database.\"\n\n#### `P3005`\n\n\"The database schema is not empty. Read more about how to baseline an existing production database: [https://pris.ly/d/migrate-baseline](https://pris.ly/d/migrate-baseline)\"\n\n#### `P3006`\n\n\"Migration `{migration_name}` failed to apply cleanly to the shadow database. <br />\\{error_code}Error:<br />\\{inner_error}\"\n\n#### `P3007`\n\n\"Some of the requested preview features are not yet allowed in schema engine. Please remove them from your data model before using migrations. (blocked: \\{list_of_blocked_features})\"\n\n#### `P3008`\n\n\"The migration `{migration_name}` is already recorded as applied in the database.\"\n\n#### `P3009`\n\n\"migrate found failed migrations in the target database, new migrations will not be applied. Read more about how to resolve migration issues in a production database: [https://pris.ly/d/migrate-resolve](https://pris.ly/d/migrate-resolve)<br />\\{details}\"\n\n#### `P3010`\n\n\"The name of the migration is too long. It must not be longer than 200 characters (bytes).\"\n\n#### `P3011`\n\n\"Migration `{migration_name}` cannot be rolled back because it was never applied to the database. Hint: did you pass in the whole migration name? (example: \\\"20201207184859_initial_migration\\\")\"\n\n#### `P3012`\n\n\"Migration `{migration_name}` cannot be rolled back because it is not in a failed state.\"\n\n#### `P3013`\n\n\"Datasource provider arrays are no longer supported in migrate. Please change your datasource to use a single provider. Read more at [https://pris.ly/multi-provider-deprecation](https://pris.ly/multi-provider-deprecation)\"\n\n#### `P3014`\n\n\"Prisma Migrate could not create the shadow database. Please make sure the database user has permission to create databases. Read more about the shadow database (and workarounds) at [https://pris.ly/d/migrate-shadow](https://pris.ly/d/migrate-shadow).\n\nOriginal error: \\{error_code}<br />\\{inner_error}\"\n\n#### `P3015`\n\n\"Could not find the migration file at \\{migration_file_path}. Please delete the directory or restore the migration file.\"\n\n#### `P3016`\n\n\"The fallback method for database resets failed, meaning Migrate could not clean up the database entirely. Original error: \\{error_code}<br />\\{inner_error}\"\n\n#### `P3017`\n\n\"The migration \\{migration_name} could not be found. Please make sure that the migration exists, and that you included the whole name of the directory. (example: \\\"20201207184859_initial_migration\\\")\"\n\n#### `P3018`\n\n\"A migration failed to apply. New migrations cannot be applied before the error is recovered from. Read more about how to resolve migration issues in a production database: https://pris.ly/d/migrate-resolve<br /><br />Migration name: \\{migration_name}<br /><br />Database error code: \\{database_error_code}<br /><br />Database error:<br />\\{database_error} \"\n\n#### `P3019`\n\n\"The datasource provider `{provider}` specified in your schema does not match the one specified in the migration_lock.toml, `{expected_provider}`. Please remove your current migration directory and start a new migration history with prisma migrate dev. Read more: [https://pris.ly/d/migrate-provider-switch](https://pris.ly/d/migrate-provider-switch)\"\n\n#### `P3020`\n\n\"The automatic creation of shadow databases is disabled on Azure SQL. Please set up a shadow database using the `shadowDatabaseUrl` datasource attribute.<br />Read the docs page for more details: [https://pris.ly/d/migrate-shadow](https://pris.ly/d/migrate-shadow)\"\n\n#### `P3021`\n\n\"Foreign keys cannot be created on this database. Learn more how to handle this: [https://pris.ly/d/migrate-no-foreign-keys](https://pris.ly/d/migrate-no-foreign-keys)\"\n\n#### `P3022`\n\n\"Direct execution of DDL (Data Definition Language) SQL statements is disabled on this database. Please read more here about how to handle this: [https://pris.ly/d/migrate-no-direct-ddl](https://pris.ly/d/migrate-no-direct-ddl)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Driver Adapters in Prisma Schema\nDESCRIPTION: Schema configuration to enable the driverAdapters preview feature in Prisma\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/200-database-drivers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Command to set the DATABASE_URL environment variable for database connection\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/500-backups.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI...\"\n```\n\n----------------------------------------\n\nTITLE: SQL for Dropping Link Table After Migration\nDESCRIPTION: SQL command to remove the link table after data has been migrated to the foreign key approach.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE \"_PostToUser\";\n```\n\n----------------------------------------\n\nTITLE: Default Constraint Names in Prisma Schema\nDESCRIPTION: Example of default constraint naming for primary keys, relations, and indexes without explicit mapping.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/50-database-mapping.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  name  String @unique\n  posts Post[]\n}\n\nmodel Post {\n  id         Int    @id @default(autoincrement())\n  title      String\n  authorName String @default(\"Anonymous\")\n  author     User?  @relation(fields: [authorName], references: [name])\n\n  @@index([title, authorName])\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 SQL Migration: CreatedAt Table\nDESCRIPTION: This SQL script illustrates the creation of a `Post` table. The table structure incorporates both `id` and `createdAt` columns, with `createdAt` defined as a `TIMESTAMP`.  However, it does not include a `DEFAULT` constraint for `createdAt`, resulting in a discrepancy recognized by later Prisma ORM versions during introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Expected Application Output (Terminal)\nDESCRIPTION: Shows the expected message displayed by the application when accessed via `http://localhost:3000` after successfully starting the services, indicating that no users have been added yet.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_24\n\nLANGUAGE: terminal\nCODE:\n```\nNo users have been added yet.\n```\n\n----------------------------------------\n\nTITLE: Define datasource with url and directUrl for Prisma Migrate\nDESCRIPTION: This code defines a `datasource` block in a Prisma schema. It uses a PgBouncer connection string for the primary `url` and a direct connection string (without PgBouncer) for the `directUrl`. This configuration enables Prisma Client to use PgBouncer while allowing Prisma Migrate to bypass it for commands requiring a single database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/200-pgbouncer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\n\"datasource db {\\n  provider  = \\\"postgresql\\\"\\n  url       = \\\"postgres://USER:PASSWORD@HOST:PORT/DATABASE?pgbouncer=true\\\"\\n  directUrl = \\\"postgres://USER:PASSWORD@HOST:PORT/DATABASE\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client Extension via npm\nDESCRIPTION: Installs a Prisma Client extension that is published on npm. The command requires specifying the package name of the extension to install. This installs the extension as a part of the project's node modules.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/140-shared-extensions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma-extension-<package-name>\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma-extension-find-or-create\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for Prisma CLI in AWS Lambda\nDESCRIPTION: Uses an environment variable to specify binary targets for Prisma CLI, ensuring it has access to the correct schema engine for commands executed in AWS Lambda.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nPRISMA_CLI_BINARY_TARGETS=native,rhel-openssl-1.0.x\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Codemods via npx\nDESCRIPTION: This command demonstrates the basic usage of @prisma/codemods. It requires specifying a transform type and the path to your project, with optional additional options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/900-codemods.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  $ npx @prisma/codemods <transform> <path> <...options>\n```\n\n----------------------------------------\n\nTITLE: Code-first Schema Definition for addPostToCategories with Nexus\nDESCRIPTION: TypeScript implementation of the addPostToCategories mutation using Nexus' code-first approach, defining arguments for post and category identification.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    // ... mutations from before\n\n    //add-start\n    t.field('addPostToCategories', {\n      type: 'Post',\n      args: {\n        postId: stringArg({ nullable: false }),\n        categoryIds: stringArg({\n          list: true,\n          nullable: false,\n        }),\n      },\n    })\n    //add-end\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing User Query Resolver in Nexus\nDESCRIPTION: Full implementation of the user query with a resolver that uses Prisma Client's findUnique method to look up users by ID or email from the input object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserUniqueInput = inputObjectType({\n  name: 'UserUniqueInput',\n  definition(t) {\n    t.string('id')\n    t.string('email')\n  },\n})\n\nconst Query = queryType({\n  definition(t) {\n    // ... previous queries\n\n    t.field('user', {\n      type: 'User',\n      nullable: true,\n      args: {\n        userUniqueInput: arg({\n          type: 'UserUniqueInput',\n          nullable: false,\n        }),\n      },\n      resolve: (_, args, context) => {\n        return context.prisma.user.findUnique({\n          where: {\n            id: args.userUniqueInput?.id,\n            email: args.userUniqueInput?.email,\n          },\n        })\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Variables into Netlify\nDESCRIPTION: This snippet demonstrates how to use the Netlify CLI to import environment variables from a .env file into a Netlify deployment. It ensures that sensitive connection strings are not exposed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/500-deploy-to-netlify.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnetlify env:import .env\n```\n\n----------------------------------------\n\nTITLE: Renaming Relation Fields in Prisma Schema\nDESCRIPTION: This snippet shows how to manually rename all relation fields to their previous versions. It highlights that all relation fields are virtual and can be renamed without affecting the database directly. Key factors include understanding of relation field naming and ensuring no naming conflicts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_34\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Post {\n  author     User?      @relation(fields: [authorId], references: [id])\n  categories Category[] @relation(references: [id])\n}\n\nmodel Profile {\n  user  String? @unique\n  owner User?   @relation(fields: [user], references: [id])\n}\n\nmodel Category {\n  posts Post[] @relation(references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Neon Database URL Configuration\nDESCRIPTION: Environment variable setup for Neon database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://janedoe:password@ep-nameless-pond-a23b1mdz.eu-central-1.aws.neon.tech/neondb?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field Mappings in Prisma\nDESCRIPTION: Example of using @map and @@map to customize model and field names while maintaining database compatibility.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel MyUser {\n  userId    Int     @id @default(autoincrement()) @map(\"user_id\")\n  firstName String? @map(\"first_name\")\n  lastName  String  @unique @map(\"last_name\")\n\n  @@map(\"my_user\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for web app\nDESCRIPTION: This snippet shows how to set up the DATABASE_URL environment variable in the web app's .env file, which should match the one used in the database directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_14\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"Same database url as used in the database directory\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Performance Metrics in Prisma Optimize\nDESCRIPTION: Documentation describing different performance metrics for query execution, including average duration, median, 99th percentile, and maximum query times to help developers understand and optimize database performance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/500-performance-metrics.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Total query durations\n\nPrisma Optimize measures total latency for query patterns, enabling you to analyze and debug slow queries effectively.\n```\n\n----------------------------------------\n\nTITLE: Single-table Inheritance Schema\nDESCRIPTION: Prisma schema implementing single-table inheritance pattern with Activity model and discriminator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Activity {\n  id       Int          @id\n  url      String       @unique\n  duration Int?\n  body     String?\n  type     ActivityType\n\n  owner   User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n}\n\nenum ActivityType {\n  Video\n  Article\n}\n\nmodel User {\n  id         Int        @id @default(autoincrement())\n  name       String?\n  activities Activity[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Query Engine Error Codes in Markdown\nDESCRIPTION: This snippet defines error codes for the Prisma Query Engine, including descriptions for various database and query-related errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/250-error-reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### `P2015`\n\n\"A related record could not be found. \\{details}\"\n\n#### `P2016`\n\n\"Query interpretation error. \\{details}\"\n\n#### `P2017`\n\n\"The records for relation `{relation_name}` between the `{parent_name}` and `{child_name}` models are not connected.\"\n\n#### `P2018`\n\n\"The required connected records were not found. \\{details}\"\n\n#### `P2019`\n\n\"Input error. \\{details}\"\n\n#### `P2020`\n\n\"Value out of range for the type. \\{details}\"\n\n#### `P2021`\n\n\"The table `{table}` does not exist in the current database.\"\n\n#### `P2022`\n\n\"The column `{column}` does not exist in the current database.\"\n\n#### `P2023`\n\n\"Inconsistent column data: \\{message}\"\n\n#### `P2024`\n\n\"Timed out fetching a new connection from the connection pool. (More info: [http://pris.ly/d/connection-pool](http://pris.ly/d/connection-pool) (Current connection pool timeout: \\{timeout}, connection limit: \\{connection_limit})\"\n\n#### `P2025`\n\n\"An operation failed because it depends on one or more records that were required but not found. \\{cause}\"\n\n#### `P2026`\n\n\"The current database provider doesn't support a feature that the query used: \\{feature}\"\n\n#### `P2027`\n\n\"Multiple errors occurred on the database during query execution: \\{errors}\"\n\n#### `P2028`\n\n\"Transaction API error: \\{error}\"\n\n#### `P2029`\n\n\"Query parameter limit exceeded error: \\{message}\"\n\n#### `P2030`\n\n\"Cannot find a fulltext index to use for the search, try adding a @@fulltext([Fields...]) to your schema\"\n\n#### `P2031`\n\n\"Prisma needs to perform transactions, which requires your MongoDB server to be run as a replica set. See details: [https://pris.ly/d/mongodb-replica-set](https://pris.ly/d/mongodb-replica-set)\"\n\n#### `P2033`\n\n\"A number used in the query does not fit into a 64 bit signed integer. Consider using `BigInt` as field type if you're trying to store large integers\"\n\n#### `P2034`\n\n\"Transaction failed due to a write conflict or a deadlock. Please retry your transaction\"\n\n#### `P2035`\n\n\"Assertion violation on the database: \\{database_error}\"\n\n#### `P2036`\n\n\"Error in external connector (id \\{id})\"\n\n#### `P2037`\n\n\"Too many database connections opened: \\{message}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Migration Script\nDESCRIPTION: Prisma CLI command to generate the initial migration SQL script by comparing an empty state to the current schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Updating Nested JSON Key Values in MySQL with Prisma\nDESCRIPTION: This snippet shows how to update nested JSON key values for multiple users in MySQL using Prisma. It includes steps to get all users, change the status of each insurance object, and query users with specific insurance conditions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst userQueries: string | any[] = []\n\ngetUsers.forEach((user) => {\n  if (\n    user.extendedPetsData &&\n    typeof user.extendedPetsData === 'object' &&\n    !Array.isArray(user.extendedPetsData)\n  ) {\n    const petsObject = user.extendedPetsData as Prisma.JsonObject\n\n    const insuranceList = petsObject['insurances'] // is a Prisma.JsonArray\n\n    if (Array.isArray(insuranceList)) {\n      insuranceList.forEach((insuranceItem) => {\n        if (\n          insuranceItem &&\n          typeof insuranceItem === 'object' &&\n          !Array.isArray(insuranceItem)\n        ) {\n          insuranceItem['status'] = 'expired' // is a  Prisma.JsonObject\n        }\n      })\n\n      const whereClause = Prisma.validator<Prisma.UserWhereInput>()({\n        id: user.id,\n      })\n\n      const dataClause = Prisma.validator<Prisma.UserUpdateInput>()({\n        extendedPetsData: petsObject,\n      })\n\n      userQueries.push(\n        prisma.user.update({\n          where: whereClause,\n          data: dataClause,\n        })\n      )\n    }\n  }\n})\n\nif (userQueries.length > 0) {\n  console.log(userQueries.length + ' queries to run!')\n  await prisma.$transaction(userQueries)\n}\n\nconst json = { status: 'expired', insuranceID: 92 }\n\nconst checkJson = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: '$.insurances',\n      array_contains: json,\n    },\n  },\n})\n\nconsole.log(checkJson.length)\n```\n\n----------------------------------------\n\nTITLE: Prisma Config TypeScript Configuration\nDESCRIPTION: Demonstrates how to configure schema location using prisma.config.ts with TypeScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/04-location.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport type { PrismaConfig } from 'prisma'\n\nexport default {\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema'),\n} satisfies PrismaConfig<Env>\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Lists in Prisma Schema for Relational Databases\nDESCRIPTION: Schema definition showing how to create a scalar list (String array) in a Prisma model for relational databases. The User model contains an id, name, and a pets field which is a String array.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int      @id @default(autoincrement())\n  name String\n  //highlight-next-line\n  pets String[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma datasource for MySQL connection\nDESCRIPTION: This snippet shows how to configure the datasource block in the Prisma schema to connect to a MySQL database. It uses an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Syncing Data Using Prisma Client Extension with libSQL\nDESCRIPTION: This example shows how to implement automatic synchronization after create, update, or delete operations using a Prisma Client extension. It extends the PrismaClient to call libsql.sync() after any write operation, ensuring the embedded replica stays in sync with the remote database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/900-turso.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    $allModels: {\n      async $allOperations({ operation, model, args, query }) {\n        const result = await query(args)\n        \n        // Synchronize the embedded replica after any write operation\n        if (['create', 'update', 'delete'].includes(operation)) {\n          await libsql.sync()\n        }\n        \n        return result\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Migrations Directory in Terminal\nDESCRIPTION: Command to remove the migrations directory when troubleshooting legacy Prisma Migrate synchronization issues\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nrm -rf migrations\n```\n\n----------------------------------------\n\nTITLE: Removing Prisma 1 npm dependencies\nDESCRIPTION: Command to uninstall npm packages related to Prisma 1 after migration to Prisma Client is complete. This removes graphql-cli, prisma-binding, and prisma1 packages.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall graphql-cli prisma-binding prisma1\n```\n\n----------------------------------------\n\nTITLE: Replicating @createdAt Behavior in MySQL for Prisma ORM 2\nDESCRIPTION: SQL statement to alter the 'Post' table, changing the 'createdAt' column to use the CURRENT_TIMESTAMP as the default value. This replicates the @createdAt behavior from Prisma 1 in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `Post` CHANGE `createdAt` `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP;\n```\n\n----------------------------------------\n\nTITLE: Creating New Posts Route File\nDESCRIPTION: Command to create a new TypeScript file for the posts creation route\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\ntouch app/routes/posts/new.tsx\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel with ID Field\nDESCRIPTION: Example Prisma 1 datamodel with a standard ID field, which is stored as VARCHAR(25) but may exceed this length in Prisma ORM 2.x.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_40\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DELETE Route for Removing Posts with Express and Prisma\nDESCRIPTION: This Express route handler deletes a post using Prisma Client. It demonstrates how to use the delete method with a where condition to remove a specific post by its ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/01-rest.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.delete(`/post/:id`, async (req, res) => {\n  const { id } = req.params\n  const post = await prisma.post.delete({\n    where: {\n      id: Number(id),\n    },\n  })\n  res.json(post)\n})\n```\n\n----------------------------------------\n\nTITLE: Package.json Schema Configuration for Multi-file Setup\nDESCRIPTION: Shows how to configure the schema location for multi-file setups in package.json.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/04-location.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prisma\": {\n    \"schema\": \"./schema\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Middleware Placement in Express Application\nDESCRIPTION: Example demonstrating where to correctly place Prisma Client middleware in an Express application. Middleware should be added outside the request handler context to avoid creating multiple instances.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\n//highlight-start\nprisma.$use(async (params, next) => {\n  // Manipulate params here\n  const result = await next(params)\n  // See results here\n  return result\n})\n//highlight-end\n\nconst app = express()\napp.get('/feed', async (req, res) => {\n  // NO MIDDLEWARE HERE\n  const posts = await prisma.post.findMany({\n    where: { published: true },\n    include: { author: true },\n  })\n  res.json(posts)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prisma in Node.js Project\nDESCRIPTION: Initializes a Node.js project and installs Prisma ORM as a development dependency. This setup is necessary to use Prisma tools and libraries for database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records in an Explicit Transaction with TypeORM in TypeScript\nDESCRIPTION: Demonstrates TypeORM's explicit transaction approach for creating a user with related posts. The transaction manager ensures that all database operations either succeed together or fail together.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nawait getConnection().$transaction(async (transactionalEntityManager) => {\n  const user = getRepository(User).create({\n    name: 'Bob',\n    email: 'bob@prisma.io',\n  })\n  const post1 = getRepository(Post).create({\n    title: 'Join us for GraphQL Conf in 2019',\n  })\n  const post2 = getRepository(Post).create({\n    title: 'Subscribe to GraphQL Weekly for GraphQL news',\n  })\n  user.posts = [post1, post2]\n  await transactionalEntityManager.save(post1)\n  await transactionalEntityManager.save(post2)\n  await transactionalEntityManager.save(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Prisma D1\nDESCRIPTION: This terminal snippet demonstrates how to install the necessary package for using Prisma with Cloudflare D1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/adapter-d1\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Mutation Query for addPostToCategories\nDESCRIPTION: An example GraphQL mutation query for adding a post to multiple categories, specifying the post ID and category IDs and requesting fields in the response.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_43\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addPostToCategories(\n    postId: \"__AUTHOR_ID__\"\n    categoryIds: [\"__CATEGORY_ID_1__\", \"__CATEGORY_ID_2__\"]\n  ) {\n    id\n    title\n    categories {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Operations\nDESCRIPTION: Defines the available query operations for the GraphQL API, including fetching posts, users, and categories. Includes filtering and pagination options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  posts(searchString: String): [Post!]!\n  user(userUniqueInput: UserUniqueInput!): User\n  users(where: UserWhereInput, orderBy: Enumerable<UserOrderByInput>, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  allCategories: [Category!]!\n}\n```\n\n----------------------------------------\n\nTITLE: prisma-binding users query resolver in JavaScript\nDESCRIPTION: Shows the standard resolver function for the users query implemented using prisma-binding in JavaScript. The resolver accesses the Prisma client via context.prisma to forward the query to the Prisma backend selectively and supports standard arguments for querying. This method uses manual resolver implementation as opposed to Nexus's automation, requiring a prior Prisma client setup in the GraphQL server context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    users: forwardTo('prisma'),\n    // ... other resolvers\n  },\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    posts: (_, args, context, info) => {\n      return context.prisma.query.posts(\n        {\n          where: {\n            OR: [\n              { title_contains: args.searchString },\n              { content_contains: args.searchString },\n            ],\n          },\n        },\n        info\n      )\n    },\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specified API Key\nDESCRIPTION: This command deletes an API key based on its ID, which must be provided as an argument for successful execution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform apikey delete \\\n--apikey $INSERT_API_KEY_ID \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: SQLite Number Comparison Query\nDESCRIPTION: Raw query implementation for comparing numeric columns in SQLite databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function initiateNumbersComparisonRawQuery() {\n  const response =\n    await prisma.$queryRaw`SELECT * FROM \"Post\" WHERE \"likesCount\" < \"commentsCount\";`\n\n  console.log(response)\n}\n\nawait initiateNumbersComparisonRawQuery()\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Creation in SQL Server\nDESCRIPTION: This SQL command lists all databases in the SQL Server instance, allowing you to verify that the 'quickstart' database was created successfully. It should be executed from the sqlcmd command prompt.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/030-sql-server-docker.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsp_databases\nGO\n```\n\n----------------------------------------\n\nTITLE: Handling Same-Named Tables Across Schemas\nDESCRIPTION: Demonstration of how to handle tables with identical names in different schemas using the @@map attribute to create unique model names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/60-multi-schema.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel BaseConfig {\n  id Int @id\n\n  @@map(\"config\")\n  @@schema(\"base\")\n}\n\nmodel UserConfig {\n  id Int @id\n\n  @@map(\"config\")\n  @@schema(\"users\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Prisma D1\nDESCRIPTION: This bash code snippet outlines how to set environment variables for use with Prisma D1, including the required secrets in a .env file for local development.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"file:./prisma/db.sqlite\"\n\nCLOUDFLARE_ACCOUNT_ID=\"0773...\"\nCLOUDFLARE_DATABASE_ID=\"01f30366-...\"\nCLOUDFLARE_D1_TOKEN=\"F8Cg...\"\n```\n\n----------------------------------------\n\nTITLE: Customizing TCP Tunnel Host and Port\nDESCRIPTION: Command demonstrating how to start the TCP tunnel with custom host and port configurations using command-line flags.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/600-tcp-tunnel.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpx @prisma/ppg-tunnel --host 127.0.0.1 --port 5432\n```\n\n----------------------------------------\n\nTITLE: Setting Global Transaction Options in Prisma Client\nDESCRIPTION: Example of configuring transaction options at the PrismaClient constructor level, which applies them globally to all transactions. This includes isolation level, maximum wait time, and timeout settings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  transactionOptions: {\n    isolationLevel: Prisma.TransactionIsolationLevel.Serializable,\n    maxWait: 5000, // default: 2000\n    timeout: 10000, // default: 5000\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Directory Structure\nDESCRIPTION: Terminal command to create the initial migration directory structure for Prisma migrations. Uses the -p flag for recursive directory creation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Posts using Prisma Client\nDESCRIPTION: Example of a Prisma Client query that demonstrates the structure of trace spans generated during execution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprisma.user.findMany({\n  where: {\n    email: email,\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Solution 3: Setting onUpdate to NoAction in author Relation\nDESCRIPTION: Third solution that breaks the cascade chain by modifying the author relation in the Post model to use NoAction for the onUpdate referential action, preventing the cascade from propagating through to Comment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int       @id @default(autoincrement())\n  authorId Int\n  //delete-next-line\n  author   User      @relation(fields: [authorId], references: [id])\n  //add-next-line\n  author   User      @relation(fields: [authorId], references: [id], onUpdate: NoAction)\n  comments Comment[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Notation for Creating Product with Composite Types\nDESCRIPTION: Illustrates using a shorthand notation to create a product with a list of `photos` without the `set` operation in Prisma. Requires Prisma and a configured Prisma Client instance. Simplifies the creation of composite types such as `photos` within a `product` record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = await prisma.product.create({\n  data: {\n    name: 'Forest Runners',\n    price: 59.99,\n    // Scalar lists that we already support\n    colors: ['Red', 'Green'],\n    sizes: ['Small', 'Medium', 'Large'],\n    // New composite type\n    photos: [\n      { height: 100, width: 200, url: '1.jpg' },\n      { height: 100, width: 200, url: '2.jpg' },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Database Connection URL in Environment Variables\nDESCRIPTION: Defines the DATABASE_URL environment variable in the .env file with a MySQL connection string that includes credentials and database location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Explicit @unique Constraint for One-to-One Relations in MongoDB\nDESCRIPTION: Example of adding an explicit @unique attribute to the relation scalar field in a one-to-one relation for MongoDB. This is required in Prisma ORM 4.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  profile   Profile? @relation(fields: [profileId], references: [id])\n  profileId String?  @unique @db.ObjectId // <-- include this explicitly\n}\n\nmodel Profile {\n  id   String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  user User?\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Git Commit Log\nDESCRIPTION: Command to verify the commit was created successfully by showing the most recent commit in the Git log.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit log -1\n```\n\n----------------------------------------\n\nTITLE: PostGIS Extension Migration SQL\nDESCRIPTION: SQL migration file generated by Prisma Migrate for enabling the PostGIS extension in PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateExtension\nCREATE EXTENSION IF NOT EXISTS \"postgis\";\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Implicit Many-to-Many Relation Schema Change\nDESCRIPTION: This code sample illustrates the schema changes required in PostgreSQL for implicit many-to-many relationships when upgrading to Prisma v6.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"_PostToTag\" (\n    \"A\" INTEGER NOT NULL,\n    \"B\" INTEGER NOT NULL,\n\n    -- highlight-next-line \n    CONSTRAINT \"_PostToTag_AB_pkey\" PRIMARY KEY (\"A\",\"B\")\n);\n\n-- CreateIndex\nCREATE INDEX \"_PostToTag_B_index\" ON \"_PostToTag\"(\"B\");\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"Post\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Tag\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Configuring SafeQL Rules in ESLint\nDESCRIPTION: ESLint rules configuration for SafeQL to enable linting of Prisma's $queryRaw and $executeRaw methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('eslint').Linter.Config} */\nmodule.exports = {\n  plugins: [..., '@ts-safeql/eslint-plugin'],\n  //add-start\n  rules: {\n    '@ts-safeql/check-sql': [\n      'error',\n      {\n        connections: [\n          {\n            // The migrations path:\n            migrationsDir: './prisma/migrations',\n            targets: [\n              // This makes `prisma.$queryRaw` and `prisma.$executeRaw` commands linted\n              { tag: 'prisma.+($queryRaw|$executeRaw)', transform: '{type}[]' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: SQLite Rounding Error Example\nDESCRIPTION: Example of an error message thrown when a number exceeds INT column boundaries in SQLite with Prisma ORM 4.0.0.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/700-upgrading-to-prisma-4.mdx#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nInconsistent column data: Conversion failed:\nValue 9223372036854775807 does not fit in an INT column,\ntry migrating the 'int' column type to BIGINT\n```\n\n----------------------------------------\n\nTITLE: Including Relations with Field Selection in Prisma Client\nDESCRIPTION: This query demonstrates how to include relations while selecting specific fields. It returns all User model fields and only the title field from related Post models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/035-select-fields.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithPostTitles = await prisma.user.findFirst({\n  include: {\n    posts: {\n      select: { title: true },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Data into Prisma Postgres\nDESCRIPTION: Command to import the previously exported data into Prisma Postgres using pg_restore. It uses the TCP tunnel connection established earlier.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/110-import-from-existing-database-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPGSSLMODE=disable \\\npg_restore \\\n  -h 127.0.0.1 \\\n  -p 5433 \\\n  -v \\\n  -d postgres \\\n  ./db_dump.bak \\\n&& echo \"-complete-\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Creation Input Type in Prisma GraphQL Schema\nDESCRIPTION: Specifies the input type for creating User records with optional and required fields, including relationships to posts and profile.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ninput UserCreateInput {\n  id: ID\n  email: String\n  name: String!\n  role: Role\n  jsonData: Json\n  posts: PostCreateManyWithoutAuthorInput\n  profile: ProfileCreateOneWithoutUserInput\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Browser for Prisma Studio in Bash\nDESCRIPTION: This example shows how to force Prisma Studio to open in a specific browser (Firefox) by setting the BROWSER environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/300-environment-variables-reference.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBROWSER=firefox prisma studio --port 5555\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for SQL Server Connection\nDESCRIPTION: Defines the database connection configuration in the Prisma schema file using SQL Server provider and environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Default Value in SQL Server\nDESCRIPTION: This SQL snippet demonstrates how to create a table with a default value constraint directly on a column, which is the approach compatible with Prisma ORM's introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE cats (\n    id INT IDENTITY PRIMARY KEY,\n    name NVARCHAR(1000) CONSTRAINT DF_cat_name DEFAULT 'musti'\n);\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL Environment Variable - Windows\nDESCRIPTION: Command to set the Prisma Postgres connection URL as an environment variable in Windows systems. The URL includes the API key for authentication.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/600-tcp-tunnel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nset DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Mutation Query for createDraft\nDESCRIPTION: An example GraphQL mutation query for creating a draft post, specifying the title, authorId, and requesting specific fields in the response.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  createDraft(title: \"Hello World\", authorId: \"__AUTHOR_ID__\") {\n    id\n    published\n    author {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a Scalar List by Overwriting the Entire List\nDESCRIPTION: Example of how to add multiple values to a scalar list (coinflips) by retrieving the current list, modifying it, and then updating the entire field. This approach works in all versions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    email: 'eloise@prisma.io',\n  },\n})\n\nif (user) {\n  console.log(user.coinflips)\n\n  user.coinflips.push(true, true, false)\n\n  const updatedUser = await prisma.user.update({\n    where: {\n      email: 'eloise@prisma.io',\n    },\n    data: {\n      coinflips: user.coinflips,\n    },\n  })\n\n  console.log(updatedUser.coinflips)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nested JSON Key Values in PostgreSQL with Prisma\nDESCRIPTION: This snippet demonstrates how to update nested JSON key values for multiple users in PostgreSQL using Prisma. It includes steps to get all users, change the status of each insurance object, and query users with specific insurance conditions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst userQueries: string | any[] = []\n\ngetUsers.forEach((user) => {\n  if (\n    user.extendedPetsData &&\n    typeof user.extendedPetsData === 'object' &&\n    !Array.isArray(user.extendedPetsData)\n  ) {\n    const petsObject = user.extendedPetsData as Prisma.JsonObject\n\n    const i = petsObject['insurances']\n\n    if (i && typeof i === 'object' && Array.isArray(i)) {\n      const insurancesArray = i as Prisma.JsonArray\n\n      insurancesArray.forEach((i) => {\n        if (i && typeof i === 'object' && !Array.isArray(i)) {\n          const insuranceObject = i as Prisma.JsonObject\n\n          insuranceObject['status'] = 'expired'\n        }\n      })\n\n      const whereClause = Prisma.validator<Prisma.UserWhereInput>()({\n        id: user.id,\n      })\n\n      const dataClause = Prisma.validator<Prisma.UserUpdateInput>()({\n        extendedPetsData: petsObject,\n      })\n\n      userQueries.push(\n        prisma.user.update({\n          where: whereClause,\n          data: dataClause,\n        })\n      )\n    }\n  }\n})\n\nif (userQueries.length > 0) {\n  console.log(userQueries.length + ' queries to run!')\n  await prisma.$transaction(userQueries)\n}\n\nconst json = [{ status: 'expired', insuranceID: 92 }]\n\nconst checkJson = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: ['insurances'],\n      array_contains: json,\n    },\n  },\n})\n\nconsole.log(checkJson.length)\n```\n\n----------------------------------------\n\nTITLE: Adding Case-Insensitive Filtering to New SQLite Column\nDESCRIPTION: This SQL snippet shows how to define a new SQLite table column with case-insensitivity by using the 'COLLATE NOCASE' clause, necessary for achieving case-insensitive filtering in SQLite.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/070-case-sensitivity.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    //highlight-next-line\n    \"email\" TEXT NOT NULL COLLATE NOCASE\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Prisma Data Model Documentation\nDESCRIPTION: This snippet defines the frontmatter for a markdown file documenting the Prisma schema data model. It includes metadata such as title, meta title, meta description, and a setting to hide the table of contents.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Data model'\nmetaTitle: 'Data model'\nmetaDescription: 'Learn everything you need about the Prisma schema data model.'\nhide_table_of_contents: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Code Block without Copy Option\nDESCRIPTION: Shows how to disable the copy option for a code block using the 'no-copy' property.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js no-copy\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma from an Alternative Path\nDESCRIPTION: Shows how to import the `Prisma` object from an older version of Prisma Client scripts, providing compatibility with older versions. Useful for projects using versions before 4.16.0.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/140-shared-extensions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client/scripts/default-index'\n\nexport default Prisma.defineExtension({\n  name: 'prisma-extension-<extension-name>',\n})\n```\n\n----------------------------------------\n\nTITLE: Code-first Schema Definition for updateBio with Nexus\nDESCRIPTION: TypeScript implementation of the updateBio mutation using Nexus' code-first approach, defining the required arguments for user identification and bio text.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    // ... previous mutations\n\n    //add-start\n    t.field('updateBio', {\n      type: 'User',\n      args: {\n        userUniqueInput: arg({\n          type: 'UserUniqueInput',\n          nullable: false,\n        }),\n        bio: stringArg({ nullable: false }),\n      },\n    })\n    //add-end\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Parameterized Query with `$executeRawUnsafe`\nDESCRIPTION: This snippet shows how to safely execute a parameterized raw SQL query using the `$executeRawUnsafe()` method to update user records, illustrating handling of potential SQL injections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = prisma.$executeRawUnsafe(\n  \"UPDATE User SET active = $1 WHERE emailValidated = $2\",\n  \"yin@prisma.io\",\n  true\n);\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL CLI Tools on Linux\nDESCRIPTION: Commands to install PostgreSQL 16 client tools and verify installation on Linux using apt.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nsudo apt-get update\nsudo apt-get install postgresql-client-16\nwhich pg_dump\nwhich pg_restore\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory in Bash\nDESCRIPTION: Creates a new directory for the Prisma project and navigates into it using terminal commands.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP and Express Instrumentation to OpenTelemetry\nDESCRIPTION: JavaScript code snippet showing how to add HTTP and Express instrumentation to OpenTelemetry configuration. This adds spans for the full request-response lifecycle.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Imports\nimport { ExpressInstrumentation } from '@opentelemetry/instrumentation-express'\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http'\n\n// Register your auto-instrumentors\nregisterInstrumentations({\n  tracerProvider: provider,\n  instrumentations: [\n    new HttpInstrumentation(),\n    new ExpressInstrumentation(),\n    new PrismaInstrumentation(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Script for Forward Migration in Prisma\nDESCRIPTION: This command creates a SQL script to apply missing changes and bring the production database to the state defined in the schema.prisma file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff --from-url \"$DATABASE_URL_PROD\" --to-schema-datamodel schema.prisma --script > forward.sql\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Postgres Tunnel\nDESCRIPTION: Command to establish a secure tunnel connection using @prisma/ppg-tunnel.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @prisma/ppg-tunnel --host 127.0.0.1  --port 5432\n```\n\n----------------------------------------\n\nTITLE: Type Error: Invalid field in where clause\nDESCRIPTION: This snippet shows the TypeScript compiler error when attempting to use a non-existent field in the `where` clause with Prisma ORM, highlighting the type safety feature that prevents runtime errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] 16:16:16 ⨯ Unable to compile TypeScript:\nsrc/index.ts:39:5 - error TS2322: Type '{ published: boolean; title: { contains: string; }; viewCount: { gt: number; }; }' is not assignable to type 'PostWhereInput'.\n  Object literal may only specify known properties, and 'viewCount' does not exist in type 'PostWhereInput'.\n\n42     viewCount: { gt: 0 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Relation Mode for PlanetScale\nDESCRIPTION: Sets the relationMode to 'prisma' in the Prisma schema datasource block to enable emulation of relations in Prisma Client, avoiding the need for foreign key constraints in PlanetScale.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/850-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Profile Input and Role Enum in Prisma GraphQL Schema\nDESCRIPTION: Defines a unique input identifier for Profile objects and a Role enum with ADMIN and CUSTOMER values for use in Prisma queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProfileWhereUniqueInput {\n  id: ID\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Entity: User Model\nDESCRIPTION: This snippet defines the User entity in TypeORM, including the `email` field marked as unique and non-nullable. Omitting this field during creation with TypeORM results in a runtime error.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ nullable: true })\n  name: string\n\n  @Column({ unique: true })\n  email: string\n\n  @OneToMany((type) => Post, (post) => post.author)\n  posts: Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Configuration\nDESCRIPTION: Command to create a TypeScript configuration file (tsconfig.json) with default settings using the TypeScript compiler initialization command.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb-typescript-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Middleware with Accelerate Extension\nDESCRIPTION: Demonstrates how to properly apply Prisma middleware before extending the client with Accelerate, maintaining the correct order of operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$use(middleware).$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection\nDESCRIPTION: Command to introspect the database using Prisma CLI. This command reads the database schema and generates a Prisma schema file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for New Post Page\nDESCRIPTION: Terminal commands to create the directory structure and file for a new post creation page in a Next.js application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_17\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p src/app/posts/new && touch src/app/posts/new/page.tsx\n```\n\n----------------------------------------\n\nTITLE: Using @@ignore Model Attribute Example\nDESCRIPTION: Shows how to exclude an invalid model from Prisma Client using the @@ignore attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_66\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int  @default(autoincrement())\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n\n  @@ignore\n}\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Cloud Connection String\nDESCRIPTION: Example connection string format for CockroachDB Serverless or Dedicated instances hosted on CockroachDB Cloud, including SSL configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://<myusername>:<mypassword>@<short-id>.<region>.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full&sslrootcert=$HOME/.postgresql/root.crt&options=--<mycluster>\"\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma Client with Accelerate for Edge Runtimes\nDESCRIPTION: Creates a Prisma Client instance for edge runtimes like Cloudflare Workers or Vercel Edge Functions using the edge-specific client with the Accelerate extension.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client/edge'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Handling Composite Lists in MongoDB with Prisma ORM 5\nDESCRIPTION: This snippet depicts the usage of arrays in operations involving Composite types for MongoDB in Prisma ORM 5. It standardizes the input format regardless of whether shorthand notation is used.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/101-jsonprotocol-changes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nprisma.post.findMany({\n  where: {\n    commentsList: {\n      equals: { text: 'hello' },\n    },\n  },\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nprisma.post.findMany({\n  where: {\n    commentsList: {\n      equals: [{ text: 'hello' }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Schema for Deno\nDESCRIPTION: Configure Prisma schema with Deno preview features, custom client output, and define a Log model with metadata\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/550-deploy-to-deno-deploy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"deno\"]\n  output          = \"../generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Log {\n  id      Int    @id @default(autoincrement())\n  level   Level\n  message String\n  meta    Json\n}\n\nenum Level {\n  Info\n  Warn\n  Error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR Cache Strategy with Prisma Accelerate\nDESCRIPTION: Sets a Stale-While-Revalidate (SWR) of 60 seconds for a user.findMany query. This allows serving stale data to clients while refreshing the cache in the background, improving response times while maintaining data freshness.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/300-caching.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait prisma.user.findMany({\n  cacheStrategy: {\n    //add-next-line\n    swr: 60,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Pool Timeout (Prisma)\nDESCRIPTION: This example shows how to set a pool timeout for the database connection in the Prisma datasource configuration, allowing explicit control over how long to wait for a connection before timing out.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/115-connection-pool.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?connection_limit=5&pool_timeout=2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of Template Variables for SQL Keywords\nDESCRIPTION: Shows an invalid example where a template variable is incorrectly used for an SQL keyword (ORDER BY direction), which is not supported.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst ordering = \"desc\";\nawait prisma.$queryRaw`SELECT * FROM Table ORDER BY ${ordering};`;\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component Using Multiple Prisma Clients\nDESCRIPTION: This Next.js page component demonstrates fetching data from two different databases using separate Prisma Client instances. It displays user data from the user database and post data from the post database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { postDBPrismaClient } from \"@/lib/post-prisma-client\";\nimport { userDBPrismaClient } from \"@/lib/user-prisma-client\";\n\nexport default async function Home() {\n  const user = await userDBPrismaClient.user.findFirst();\n  const post = await postDBPrismaClient.post.findFirst();\n\n  return (\n    <main className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <header className=\"mb-12 text-center\">\n          <h1 className=\"text-5xl font-extrabold text-gray-900\">Multi-DB Showcase</h1>\n          <p className=\"mt-4 text-xl text-gray-600\">\n            Data fetched from two distinct databases.\n          </p>\n        </header>\n\n        <section className=\"mb-8 bg-white shadow-md rounded-lg p-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 border-b pb-2 mb-4\">\n            User Data\n          </h2>\n          <pre className=\"whitespace-pre-wrap text-sm text-gray-700\">\n            {user ? JSON.stringify(user, null, 2) : \"No user data available.\"}\n          </pre>\n        </section>\n\n        <section className=\"bg-white shadow-md rounded-lg p-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 border-b pb-2 mb-4\">\n            Post Data\n          </h2>\n          <pre className=\"whitespace-pre-wrap text-sm text-gray-700\">\n            {post ? JSON.stringify(post, null, 2) : \"No post data available.\"}\n          </pre>\n        </section>\n      </div>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Employee table with self-referential foreign key in SQL Server\nDESCRIPTION: This SQL snippet creates an Employee table with a self-referential foreign key for the manager relationship. It demonstrates the cascading referential actions that SQL Server doesn't allow due to potential cycles.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [dbo].[Employee] (\n  [id] INT NOT NULL IDENTITY(1,1),\n  [managerId] INT,\n  CONSTRAINT [PK__Employee__id] PRIMARY KEY ([id])\n);\n\nALTER TABLE [dbo].[Employee]\n  ADD CONSTRAINT [FK__Employee__managerId]\n    FOREIGN KEY ([managerId]) REFERENCES [dbo].[Employee]([id])\n    ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma D1 Driver Adapter\nDESCRIPTION: Command to install the Prisma D1 driver adapter package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/adapter-d1\n```\n\n----------------------------------------\n\nTITLE: Defining Unsupported Types in Prisma Schema for CockroachDB\nDESCRIPTION: This snippet demonstrates how to define a field with an unsupported CockroachDB type (INTERVAL) in a Prisma schema. Unsupported types are added by introspection and use the Unsupported field type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/840-cockroachdb.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Device {\n  id       BigInt                  @id @default(autoincrement())\n  interval Unsupported(\"INTERVAL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration SQL for Tag Model\nDESCRIPTION: SQL migration script that creates the Tag table and the junction table _PostToTag for the many-to-many relationship between Post and Tag models. Includes necessary indexes and foreign key constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Tag\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" VARCHAR(255) NOT NULL,\n\n    CONSTRAINT \"Tag_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"_PostToTag\" (\n    \"A\" INTEGER NOT NULL,\n    \"B\" INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"_PostToTag_AB_unique\" ON \"_PostToTag\"(\"A\", \"B\");\n\n-- CreateIndex\nCREATE INDEX \"_PostToTag_B_index\" ON \"_PostToTag\"(\"B\");\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"Post\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Tag\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Including Subsections Component in Prisma Tools Documentation\nDESCRIPTION: This code snippet includes a Subsections component in the Prisma Tools documentation page. It specifies a depth of 3 for the subsections to be displayed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Subsections depth=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Configuration\nDESCRIPTION: Generates a TypeScript configuration file using the TypeScript compiler.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: CockroachDB to Prisma Type Mapping - Unsupported Types\nDESCRIPTION: List of CockroachDB types that are not yet supported or have limited support in Prisma ORM, including money, xml, and jsonb arrays.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/840-cockroachdb.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nmoney   -> Decimal  @db.Money\nxml     -> String   @db.Xml\njsonb[] -> Json[]   N/A\n```\n\n----------------------------------------\n\nTITLE: Handling Loading and Error States with SolidJS Show Component\nDESCRIPTION: This snippet illustrates using SolidJS's <Show> component for managing async loading and error conditions when fetching data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./app.css\";\nimport { createResource, For, Show } from \"solid-js\";\nimport { User, Post } from \"@prisma/client\";\n\ntype UserWithPosts = User & {\n  posts: Post[];\n};\n\nconst fetchUsers = async () => {\n  const res = await fetch(\"http://localhost:3000/api/users\");\n  return res.json();\n};\n\nexport default function App() {\n  const [users, { mutate, refetch }] =\n    createResource<UserWithPosts[]>(fetchUsers);\n\n  return (\n    <main>\n      <h1>SolidJS + Prisma</h1>\n      <Show when={!users.loading} fallback={<p>Loading...</p>}>\n        <Show when={!users.error} fallback={<p>Error loading data</p>}>\n          <For each={users()}>\n            {(user) => (\n              <div>\n                <h3>{user.name}</h3>\n                <For each={user.posts}>{(post) => <p>{post.title}</p>}</For>\n              </div>\n            )}\n          </For>\n        </Show>\n      </Show>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL CLI Tools on macOS\nDESCRIPTION: Commands to install PostgreSQL 16 and verify pg_dump/pg_restore installation on macOS using Homebrew.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nbrew install postgresql@16\nwhich pg_dump\nwhich pg_restore\n```\n\n----------------------------------------\n\nTITLE: Defining Project-Specific Rules with .cursorrules in Cursor\nDESCRIPTION: This code snippet presents an example configuration for a `.cursorrules` file, which dictates the coding standards and practices for a Prisma project. It emphasizes the use of TypeScript guidelines, naming conventions, and Prisma-specific best practices to ensure clean and maintainable code generation by Cursor.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/100-cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"\"\"text file=.cursorrules\\nYou are a senior TypeScript/JavaScript programmer with expertise in Prisma, clean code principles, and modern backend development.\\nGenerate code, corrections, and refactorings that comply with the following guidelines:\\nTypeScript General Guidelines\\nBasic Principles\\n- Use English for all code and documentation.\\n- Always declare explicit types for variables and functions.\\n  - Avoid using \\\"any\\\".\\n  - Create precise, descriptive types.\\n- Use JSDoc to document public classes and methods.\\n- Maintain a single export per file.\\n- Write self-documenting, intention-revealing code.\\nNomenclature\\n- Use PascalCase for classes and interfaces.\\n- Use camelCase for variables, functions, methods.\\n- Use kebab-case for file and directory names.\\n- Use UPPERCASE for environment variables and constants.\\n- Start function names with a verb.\\n- Use verb-based names for boolean variables:\\n  - isLoading, hasError, canDelete\\n- Use complete words, avoiding unnecessary abbreviations.\\n  - Exceptions: standard abbreviations like API, URL\\n  - Accepted short forms: \\n    - i, j for loop indices\\n    - err for errors\\n    - ctx for contexts\\nFunctions\\n- Write concise, single-purpose functions.\\n  - Aim for less than 20 lines of code.\\n- Name functions descriptively with a verb.\\n- Minimize function complexity:\\n  - Use early returns.\\n  - Extract complex logic to utility functions.\\n- Leverage functional programming techniques:\\n  - Prefer map, filter, reduce.\\n  - Use arrow functions for simple operations.\\n  - Use named functions for complex logic.\\n- Use object parameters for multiple arguments.\\n- Maintain a single level of abstraction.\\nData Handling\\n- Encapsulate data in composite types.\\n- Prefer immutability.\\n  - Use readonly for unchanging data.\\n  - Use as const for literal values.\\n- Validate data at the boundaries.\\nError Handling\\n- Use specific, descriptive error types.\\n- Provide context in error messages.\\n- Use global error handling where appropriate.\\n- Log errors with sufficient context.\\nPrisma-Specific Guidelines\\nSchema Design\\n- Use meaningful, domain-driven model names.\\n- Leverage Prisma schema features:\\n  - Use @id for primary keys.\\n  - Use @unique for natural unique identifiers.\\n  - Utilize @relation for explicit relationship definitions.\\n- Keep schemas normalized and DRY.\\n- Use meaningful field names and types.\\n- Implement soft delete with deletedAt timestamp.\\n- Use Prisma's native type decorators.\\nPrisma Client Usage\\n- Always use type-safe Prisma client operations.\\n- Prefer transactions for complex, multi-step operations.\\n- Use Prisma middleware for cross-cutting concerns:\\n  - Logging\\n  - Soft delete\\n  - Auditing\\n- Handle optional relations explicitly.\\n- Use Prisma's filtering and pagination capabilities.\\nDatabase Migrations\\n- Create migrations for schema changes.\\n- Use descriptive migration names.\\n- Review migrations before applying.\\n- Never modify existing migrations.\\n- Keep migrations idempotent.\\nError Handling with Prisma\\n- Catch and handle Prisma-specific errors:\\n  - PrismaClientKnownRequestError\\n  - PrismaClientUnknownRequestError\\n  - PrismaClientValidationError\\n- Provide user-friendly error messages.\\n- Log detailed error information for debugging.\\nTesting Prisma Code\\n- Use in-memory database for unit tests.\\n- Mock Prisma client for isolated testing.\\n- Test different scenarios:\\n  - Successful operations\\n  - Error cases\\n  - Edge conditions\\n- Use factory methods for test data generation.\\n- Implement integration tests with actual database.\\nPerformance Considerations\\n- Use select and include judiciously.\\n- Avoid N+1 query problems.\\n- Use findMany with take and skip for pagination.\\n- Leverage Prisma's distinct for unique results.\\n- Profile and optimize database queries.\\nSecurity Best Practices\\n- Never expose raw Prisma client in APIs.\\n- Use input validation before database operations.\\n- Implement row-level security.\\n- Sanitize and validate all user inputs.\\n- Use Prisma's built-in protections against SQL injection.\\nCoding Style\\n- Keep Prisma-related code in dedicated repositories/modules.\\n- Separate data access logic from business logic.\\n- Create repository patterns for complex queries.\\n- Use dependency injection for Prisma services.\\nCode Quality\\n- Follow SOLID principles.\\n- Prefer composition over inheritance.\\n- Write clean, readable, and maintainable code.\\n- Continuously refactor and improve code structure.\\nDevelopment Workflow\\n- Use version control (Git).\\n- Implement comprehensive test coverage.\\n- Use continuous integration.\\n- Perform regular code reviews.\\n- Keep dependencies up to date.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeExit Hook in Prisma Client with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the beforeExit hook in Prisma Client. This hook allows you to run code before Prisma Client disconnects, which is useful for graceful shutdown scenarios in long-running applications.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/100-connection-management.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\nprisma.$on('beforeExit', async () => {\n  console.log('beforeExit hook')\n  // PrismaClient still available\n  await prisma.message.create({\n    data: {\n      message: 'Shutting down server',\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Migration: Add Coinflips Column\nDESCRIPTION: SQL command to add a boolean array column to the User table for scalar list migration\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"User\" ADD COLUMN coinflips BOOLEAN[];\n```\n\n----------------------------------------\n\nTITLE: GraphQL mutation for updating a user's bio\nDESCRIPTION: Example GraphQL mutation for updating a user's bio. It takes userUniqueInput for identifying the user and bio content as parameters, then returns the updated user with profile information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  updateBio(\n    userUniqueInput: { email: \"alice@prisma.io\" }\n    bio: \"I like turtles\"\n  ) {\n    id\n    name\n    profile {\n      id\n      bio\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Timeout for Neon in Environment Variables\nDESCRIPTION: Sets the connect_timeout parameter in the DATABASE_URL to avoid connection timeout issues when connecting to an idle Neon compute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/890-neon.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=postgres://daniel:<password>@ep-mute-rain-952417.us-east-2.aws.neon.tech/neondb?connect_timeout=10\n```\n\n----------------------------------------\n\nTITLE: Resolver Implementation for createDraft with Nexus\nDESCRIPTION: TypeScript implementation of the resolver for the createDraft mutation using Prisma ORM 2.0 with Nexus. It creates a post and connects it to the author.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    // ... previous mutations\n\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({ nullable: false }),\n        content: stringArg(),\n        authorId: stringArg({ nullable: false }),\n      },\n      //add-start\n      resolve: (_, args, context) => {\n        return context.prisma.post.create({\n          data: {\n            title: args.title,\n            content: args.content,\n            author: {\n              connect: { id: args.authorId },\n            },\n          },\n        })\n      },\n      //add-end\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Server Validation Error for Multiple Cascade Paths in writtenBy Relation\nDESCRIPTION: Error message shown when validating the schema, indicating that updates to User records cascade to Comment through multiple paths. The error suggests breaking one of these paths by setting onUpdate and onDelete to NoAction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nError parsing attribute \"@relation\": When any of the records in model `User` is updated or deleted, the referential actions on the relations cascade to model `Comment` through multiple paths. Please break one of these paths by setting the `onUpdate` and `onDelete` to `NoAction`. (Implicit default `onUpdate`: `Cascade`)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Prisma packages using pnpm\nDESCRIPTION: Command to upgrade the prisma and @prisma/client packages to version 5 using pnpm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\npnpm upgrade prisma@5 @prisma/client@5\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document with ObjectId Example\nDESCRIPTION: Shows a sample MongoDB document with an ObjectId for the _id field and other standard fields like timestamps.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": { \"$oid\": \"60d599cb001ef98000f2cad2\" },\n  \"createdAt\": { \"$date\": { \"$numberLong\": \"1624611275577\" } },\n  \"email\": \"ella@prisma.io\",\n  \"name\": \"Ella\",\n  \"role\": \"ADMIN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio from Terminal\nDESCRIPTION: Command to launch Prisma Studio using npx.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/06-prisma-studio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: SQL Database Schema Equivalent to Prisma 1 Data Model\nDESCRIPTION: SQL statements that create the database tables, indexes, and relationships matching the Prisma 1 data model definition.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE\"User\" (\n    id character varying(25) PRIMARY KEY,\n    email text,\n    name text NOT NULL,\n    role text NOT NULL,\n    \"jsonData\" text\n);\nCREATE UNIQUE INDEX \"User_pkey\" ON\"User\"(id text_ops);\nCREATE UNIQUE INDEX \"default$default.User.email._UNIQUE\" ON\"User\"(email text_ops);\n\nCREATE TABLE\"Post\" (\n    id character varying(25) PRIMARY KEY,\n    title text NOT NULL,\n    published boolean NOT NULL,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    content text\n);\nCREATE UNIQUE INDEX \"Post_pkey\" ON\"Post\"(id text_ops);\n\nCREATE TABLE\"Profile\" (\n    id character varying(25) PRIMARY KEY,\n    bio text,\n    user character varying(25) REFERENCES\"User\"(id) ON DELETE SET NULL\n);\nCREATE UNIQUE INDEX \"Profile_pkey\" ON\"Profile\"(id text_ops);\n\nCREATE TABLE\"Category\" (\n    id character varying(25) PRIMARY KEY,\n    name text NOT NULL\n);\nCREATE UNIQUE INDEX \"Category_pkey\" ON\"Category\"(id text_ops);\n\nCREATE TABLE\"_PostToUser\" (\n    \"A\" character varying(25) NOT NULL REFERENCES\"Post\"(id) ON DELETE CASCADE,\n    \"B\" character varying(25) NOT NULL REFERENCES\"User\"(id) ON DELETE CASCADE\n);\nCREATE UNIQUE INDEX \"_PostToUser_AB_unique\" ON\"_PostToUser\"(\"A\" text_ops,\"B\" text_ops);\nCREATE INDEX \"_PostToUser_B\" ON\"_PostToUser\"(\"B\" text_ops);\n\nCREATE TABLE\"_CategoryToPost\" (\n    \"A\" character varying(25) NOT NULL REFERENCES\"Category\"(id) ON DELETE CASCADE,\n    \"B\" character varying(25) NOT NULL REFERENCES\"Post\"(id) ON DELETE CASCADE\n);\nCREATE UNIQUE INDEX \"_CategoryToPost_AB_unique\" ON\"_CategoryToPost\"(\"A\" text_ops,\"B\" text_ops);\nCREATE INDEX \"_CategoryToPost_B\" ON\"_CategoryToPost\"(\"B\" text_ops);\n```\n\n----------------------------------------\n\nTITLE: Building a Static New Post Form in Next.js\nDESCRIPTION: Implementation of a basic form component for creating new posts with title and content fields using Next.js Form component. This initial version includes the UI but doesn't save data to the database yet.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport Form from \"next/form\";\n\nexport default function NewPost() {\n  async function createPost(formData: FormData) {\n    \"use server\";\n\n    const title = formData.get(\"title\") as string;\n    const content = formData.get(\"content\") as string;\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-6\">Create New Post</h1>\n      <Form action={createPost} className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"title\" className=\"block text-lg mb-2\">\n            Title\n          </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Enter your post title\"\n            className=\"w-full px-4 py-2 border rounded-lg\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"content\" className=\"block text-lg mb-2\">\n            Content\n          </label>\n          <textarea\n            id=\"content\"\n            name=\"content\"\n            placeholder=\"Write your post content here...\"\n            rows={6}\n            className=\"w-full px-4 py-2 border rounded-lg\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600\"\n        >\n          Create Post\n        </button>\n      </Form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Scalar Lists with hasEvery Condition\nDESCRIPTION: Example of how to filter records based on scalar list contents using the hasEvery filter to find posts that contain multiple specific tags.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    tags: {\n      hasEvery: ['databases', 'typescript'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying User Model in Prisma with Excessive Rows\nDESCRIPTION: This snippet demonstrates a Prisma query that retrieves data from the 'User' model without using a 'take' option, which can lead to excessive rows being returned. The absence of a row limit can cause performance issues such as increased memory usage and longer load times. To optimize, consider using query options like 'take' to limit the number of results. No additional dependencies are required beyond Prisma, and the primary input is the email filter condition with the return being all relevant user rows.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/100-excessive-number-of-rows-returned.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.findMany({ where: { email: \"janedoe@gmail.com\" }})\n```\n\n----------------------------------------\n\nTITLE: Creating Demo SQL Schema for MySQL Database\nDESCRIPTION: This SQL code creates three tables: Post, Profile, and User. It sets up the basic structure for a blog-like application with users, their profiles, and posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `Post` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `createdAt` datetime(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  `updatedAt` datetime(3) NOT NULL,\n  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,\n  `content` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `published` tinyint(1) NOT NULL DEFAULT '0',\n  `authorId` int NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Post_authorId_idx` (`authorId`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE `Profile` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `bio` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `userId` int NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `Profile_userId_key` (`userId`),\n  KEY `Profile_userId_idx` (`userId`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE `User` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `email` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,\n  `name` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `User_email_key` (`email`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\n----------------------------------------\n\nTITLE: Extended Schema with Profile Model\nDESCRIPTION: Example of adding a new Profile model to an existing multi-schema configuration with relationships between models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/60-multi-schema.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id\n  orders  Order[]\n  profile Profile?\n\n  @@schema(\"base\")\n}\n\nmodel Profile {\n  id     Int    @id @default(autoincrement())\n  bio    String\n  user   User   @relation(fields: [userId], references: [id])\n  userId Int    @unique\n\n  @@schema(\"base\")\n}\n\nmodel Order {\n  id      Int  @id\n  user    User @relation(fields: [id], references: [id])\n  user_id Int\n\n  @@schema(\"transactional\")\n}\n\nenum Size {\n  Small\n  Medium\n  Large\n\n  @@schema(\"transactional\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection and Pool Timeout for Neon\nDESCRIPTION: Sets both connect_timeout and pool_timeout parameters in the DATABASE_URL to handle connection timeouts for both Neon and Prisma's connection pool.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/890-neon.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=postgres://daniel:<password>@ep-mute-rain-952417.us-east-2.aws.neon.tech/neondb?connect_timeout=15&pool_timeout=15\n```\n\n----------------------------------------\n\nTITLE: Updating a record with Prisma Client\nDESCRIPTION: Demonstrates how to update an existing record in the database using Prisma Client. This snippet locates a Post record by its ID and updates the 'published' field to true, then retrieves and logs the updated record.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Union Type Definition\nDESCRIPTION: Example of defining a union type in TypeScript to represent different types of activities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Activity = Video | Article\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema in Code Block\nDESCRIPTION: Illustrates how to present a Prisma schema within a code block in the documentation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Incorrect m-n Relations in MySQL for Prisma ORM 2\nDESCRIPTION: SQL statements to fix 1-n relations that were incorrectly recognized as m-n. This includes adding a foreign key column, migrating data from the relation table, and dropping the unnecessary relation table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `Post` ADD COLUMN `authorId` char(25) CHARACTER SET utf8 ;\nALTER TABLE `Post` ADD CONSTRAINT author FOREIGN KEY (`authorId`) REFERENCES `User`(`id`);\nUPDATE `Post`, `_PostToUser` SET `Post`.`authorId` = `_PostToUser`.B where `_PostToUser`.A = `Post`.`id`;\nDROP TABLE `_PostToUser`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for Supabase Direct URL\nDESCRIPTION: Prisma schema configuration that includes both the pooled connection URL and direct database URL for CLI operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/880-supabase.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Dependencies with NPM\nDESCRIPTION: Commands to install the required Prisma dependencies for metrics functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma@latest --save-dev\nnpm install @prisma/client@latest --save\n```\n\n----------------------------------------\n\nTITLE: Uninstall Prisma 1 CLI globally\nDESCRIPTION: Uninstalls the globally installed Prisma 1 CLI using npm. This is done to avoid conflicts between Prisma 1 and Prisma ORM 2 CLIs during the upgrade process.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n# remove global installation\nnpm uninstall -g prisma1\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Zero Posts in Prisma Client\nDESCRIPTION: This snippet shows how to use the `none` filter to return users who have no related posts. The expected input is the condition to check for absence of posts, while the output will be a list of users meeting this criterion.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithZeroPosts = await prisma.user.findMany({\n  where: {\n    //highlight-start\n    posts: {\n      none: {},\n    },\n    //highlight-end\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client instance in TypeScript\nDESCRIPTION: Instantiate a new PrismaClient for database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/160-tanstack-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Creating a Baseline Migration\nDESCRIPTION: These commands create and apply a baseline migration, marking the current database state.  This is done to ensure Prisma's migration history starts from the current database structure. The first command generates a SQL script of the schema, the second command marks the initial migration as applied.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > baseline.sql\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate resolve --applied \"baseline\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hash Index Type in PostgreSQL with Prisma\nDESCRIPTION: This snippet shows how to use the 'type' argument with the @@index attribute to create a Hash index in PostgreSQL using Prisma ORM. Hash indexes are faster for equality comparisons but don't support range queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  id    Int @id\n  value Int\n\n  @@index([value], type: Hash)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product with Prisma Client in Node.js\nDESCRIPTION: A script to create a product record using Prisma Client, demonstrating how to handle violations of check constraints set in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  const newProduct = await prisma.product.create({\n    data: {\n      price: 0.0,\n    },\n  })\n\n  console.log(newProduct)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration for Multi-Database Prisma Setup\nDESCRIPTION: This JSON snippet shows the scripts configuration in package.json for managing multiple Prisma databases. It includes commands for development, building, migrations, and running Prisma Studio for both databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"script\":{\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"postinstall\": \"npx prisma generate --schema ./prisma-user-database/schema.prisma --no-engine && npx prisma generate --schema ./prisma-post-database/schema.prisma --no-engine\",\n    \"generate\": \"npx prisma generate --schema ./prisma-user-database/schema.prisma --no-engine && npx prisma generate --schema ./prisma-post-database/schema.prisma --no-engine\",\n    \"migrate\": \"npx prisma migrate dev --schema ./prisma-user-database/schema.prisma && npx prisma migrate dev --schema ./prisma-post-database/schema.prisma\",\n    \"deploy\": \"npx prisma migrate deploy --schema ./prisma-user-database/schema.prisma && npx prisma migrate deploy --schema ./prisma-post-database/schema.prisma\",\n    \"studio\": \"npx prisma studio --schema ./prisma-user-database/schema.prisma --port 5555 & npx prisma studio --schema ./prisma-post-database/schema.prisma --port 5556\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specified Project\nDESCRIPTION: This command deletes a designated project using its project ID, requiring it as an input argument.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform project delete \\\n--project $INSERT_PROJECT_ID \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Indexes and Constraints in Prisma\nDESCRIPTION: This comprehensive example demonstrates the use of 'sort' and 'length' arguments to configure various indexes and constraints for a Post model in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  title      String   @db.VarChar(300)\n  abstract   String   @db.VarChar(3000)\n  slug       String   @unique(sort: Desc, length: 42) @db.VarChar(3000)\n  author     String\n  created_at DateTime\n\n  @@id([title(length: 100, sort: Desc), abstract(length: 10)])\n  @@index([author, created_at(sort: Desc)])\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Composite Types with Prisma ORM in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'orderBy' operation to sort results based on a field in a composite type. It orders all orders by the city name in the shipping address in ascending order.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.findMany({\n  orderBy: {\n    shippingAddress: {\n      city: 'asc',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Default Values in Composite Types\nDESCRIPTION: Example showing how Prisma Client inserts default values for required fields on composite types during database reads when the field is not present in the returned document.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ntype Photo {\n  ...\n  bitDepth Int @default(8)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.dir(await prisma.product.findMany({}), { depth: Infinity })\n```\n\n----------------------------------------\n\nTITLE: Deprecated NotFoundError Handling in Prisma Client\nDESCRIPTION: This snippet provides the before-and-after code for handling error scenarios with Prisma Client, showing the shift from NotFoundError to PrismaClientKnownRequestError with code P2025.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, NotFoundError } from '@prisma/client';\n\n// inside an `async` function\ntry {\n  const user = await prisma.user.findUniqueOrThrow({\n    where: { id: 42 },\n  });\n  console.log(user);\n} catch (error) {\n  // highlight-start\n  if (error instanceof NotFoundError) {\n    console.error(\"User not found!\");\n  }\n  // highlight-end\n  else {\n    console.error(\"Unexpected error:\", error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking migration as applied\nDESCRIPTION: Prisma CLI command to mark the initial migration as applied. This adds the migration to the _prisma_migrations table in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: This command starts the Next.js development server to run the application locally for testing before deploying to Netlify.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Read Replicas in Prisma\nDESCRIPTION: This snippet demonstrates how to configure Prisma to use multiple read replicas. The `url` property is set to an array of connection strings, allowing Prisma to randomly select a replica for read operations.  The connection strings are sourced from environment variables `DATABASE_URL_REPLICA_1` and `DATABASE_URL_REPLICA_2`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/200-read-replicas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"const prisma = new PrismaClient().$extends(\\n  readReplicas({\\n    url: [\\n      process.env.DATABASE_URL_REPLICA_1,\\n      process.env.DATABASE_URL_REPLICA_2,\\n    ],\\n  })\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Installing inshellisense CLI Autocomplete for Prisma\nDESCRIPTION: Command to install inshellisense globally via npm for IDE-style autocompletion of Prisma CLI commands. Supports bash, zsh, fish, pwsh, and Windows Powershell.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/200-editor-setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @microsoft/inshellisense\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Server Connection URL in Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the DATABASE_URL environment variable with a SQL Server connection string. It includes server address, database name, authentication credentials, and SSL settings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"sqlserver://localhost:1433;database=mydb;user=sa;password=r@ndomP@$$w0rd;trustServerCertificate=true\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Prisma Schema for MongoDB\nDESCRIPTION: This code snippet shows how to modify the Prisma schema by renaming models and fields to better align with conventional naming practices. It involves using '@map' and '@@map' to ensure schema changes map to existing MongoDB collections. Caution is advised to maintain correct mappings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/08-upgrade-from-mongodb-beta.mdx#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- model posts {\n+ model Post {\n    id        String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n    published Boolean\n    title     String\n+    @@map(\"posts\")\n  }\n\n- model users {\n+ model User {\n    id    String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n    email String   @unique(map: \"email_U\")\n    name  String\n-    posts String[] @db.ObjectId\n+    postIds String[] @db.ObjectId @map(\"posts\")\n\n    @@index([posts], map: \"posts_R\")\n+    @@map(\"users\")\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Seed Command in package.json\nDESCRIPTION: This snippet configures the seed command in the package.json file to automate running the seed script via npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"prisma\": {\n  \"seed\": \"tsx prisma/seed.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI as Development Dependency\nDESCRIPTION: This terminal command installs the Prisma CLI as a development dependency in the project, which is required for initializing Prisma, creating migrations, and generating the client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1100-integrations/100-netlify.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Check Constraint SQL Creation\nDESCRIPTION: Creates a product table with a check constraint comparing two columns to ensure reduced price is always less than regular price.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"public\".\"anotherproduct\" (\n  reducedprice NUMERIC CONSTRAINT reduced_price_check CHECK (price > reducedprice),\n  price NUMERIC\n);\nALTER TABLE \"public\".\"anotherproduct\"\n  ADD COLUMN \"productid\" serial,\n  ADD PRIMARY KEY (\"productid\");\n```\n\n----------------------------------------\n\nTITLE: MongoDB User-Profile Schema Definition\nDESCRIPTION: Example Prisma schema showing User and Profile models for MongoDB\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email   String   @unique\n  name    String?\n  profile Profile?\n}\n\nmodel Profile {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  bio    String\n  User   User   @relation(fields: [userId], references: [id])\n  userId String @unique @db.ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dual PrismaClient Instances for Accelerate and Direct Database Connections in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create two PrismaClient instances: one using the Accelerate connection string and another using a direct database connection. This approach allows for bypassing Accelerate for specific queries that may exceed configured limits.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/650-troubleshoot.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const prisma = new PrismaClient({\n  datasourceUrl: process.env.DIRECT_DB_CONNECTION,\n})\n\nexport const prismaAccelerate = new PrismaClient({\n  datasourceUrl: process.env.ACCELERATE_CONNECTION,\n}).$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma Client Model Object with Custom Methods in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend the Prisma Client model object using Object.assign. It adds a custom 'signup' method while preserving existing Prisma Client functionality. This approach allows for grouping custom functions without limiting access to built-in Prisma Client methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/064-custom-models.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, User } from '@prisma/client'\n\ntype Signup = {\n  email: string\n  firstName: string\n  lastName: string\n}\n\nfunction Users(prismaUser: PrismaClient['user']) {\n  return Object.assign(prismaUser, {\n    /**\n     * Signup the first user and create a new team of one. Return the User with\n     * a full name and without a password\n     */\n    async signup(data: Signup): Promise<User> {\n      return prismaUser.create({ data })\n    },\n  })\n}\n\nasync function main() {\n  const prisma = new PrismaClient()\n  const users = Users(prisma.user)\n  const user = await users.signup({\n    email: 'alice@prisma.io',\n    firstName: 'Alice',\n    lastName: 'Prisma',\n  })\n  const numUsers = await users.count()\n  console.log(user, numUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Prisma Client with Accelerate Extension in TypeScript\nDESCRIPTION: Initializes Prisma Client with the Accelerate client extension, allowing seamless usage in both development and production environments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/580-local-development.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client with LibSQL Adapter\nDESCRIPTION: Sets up Prisma Client to use the LibSQL adapter for connecting to a Turso database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/900-turso.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaLibSQL } from '@prisma/adapter-libsql'\n\nconst adapter = new PrismaLibSQL({\n  url: `${process.env.TURSO_DATABASE_URL}`,\n  authToken: `${process.env.TURSO_AUTH_TOKEN}`,\n})\nconst prisma = new PrismaClient({ adapter })\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Model with @db.Char(n) Native Type\nDESCRIPTION: Example of a Prisma model using @db.Char(n) on a String field, demonstrating potential performance and compatibility challenges in PostgreSQL database schemas\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/700-avoid-char.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Item {\n  // ...\n  name String @db.Char(1)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: UpdatedAt Introspection\nDESCRIPTION: This Prisma schema demonstrates the result after introspecting a database initially managed by Prisma 1. The `updatedAt` field is recognized as a `DateTime` field. However, the auto-update behavior provided by the `@updatedAt` directive in Prisma 1 is absent, requiring manual intervention to replicate this functionality in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_18\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma showLineNumbers\nmodel Post {\n  id        String   @id\n  updatedAt DateTime\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring UI Steps in Markdown\nDESCRIPTION: This snippet illustrates how to effectively structure UI steps in Markdown, including referencing UI elements at the start of steps for improved clarity and readability.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\n1. Enter a name for your project in **Display Name**.\n2. Select a GitHub account or an organization from **GitHub Accounts & Organizations**.\n3. Select **Create a repository**.\n4. (Optional) Enter a name for the repository in **Repository Name**.\n\n<!-- Good -->\n\n1. In **Display Name**, enter a name for your project.\n2. From the **GitHub Accounts & Organizations** drop-down menu, select a GitHub account or an organization.\n3. Select **Create a repository**.\n4. (Optional) In **Repository Name**, enter a name for the repository.\n```\n\n----------------------------------------\n\nTITLE: Navigating to project directory and starting development server\nDESCRIPTION: Commands to navigate into the newly created project directory, install dependencies, and start the development server for the SvelteKit application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncd sveltekit-prisma\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Downloading Example Code using cURL\nDESCRIPTION: This snippet demonstrates how to download the example Prisma deployment code from GitHub using cURL, followed by extracting the downloaded files. This step is necessary to obtain the starting point for the deployment tutorial.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/300-deploy-to-flyio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/prisma/prisma-examples/tar.gz/latest | tar -xz --strip=2 prisma-examples-latest/deployment-platforms/render\ncd render\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Check Constraints Demo\nDESCRIPTION: Basic bash commands to create and navigate to a new project directory for the demo.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir check-demo\ncd check-demo\n```\n\n----------------------------------------\n\nTITLE: Deleting Unused Prisma 1 Files\nDESCRIPTION: These commands remove the generated Prisma 1 client files and the Prisma 1 configuration directory. This step is part of cleaning up the project after migrating from Prisma 1 to Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf src/generated\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf prisma1\n```\n\n----------------------------------------\n\nTITLE: Filtering for Concrete Values with Prisma ORM vs Sequelize\nDESCRIPTION: Compares how to filter records based on a text pattern in both ORMs. Prisma uses the contains filter while Sequelize uses the Op.like operator to achieve similar functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: {\n      contains: 'Hello',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findAll({\n  raw: true,\n  where: {\n    title: {\n      [Op.like]: '%Hello%',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating migration directory structure\nDESCRIPTION: Command to create the necessary directory structure for migrations. It uses the mkdir command with the -p flag to create parent directories as needed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Formatting Guide for Correct UI Steps in Markdown\nDESCRIPTION: This snippet illustrates the proper way to document UI steps in Markdown, reinforcing the importance of separating actions into distinct steps for clarity.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nWhen you click **Invite Member** and the **Add member** pop-up opens, select the role for the new team member.\n\n<!-- Good -->\n\n1. Click **Invite Member**.\n2. In the **Add member** pop-up, select the role for the new team member and click **Invite**.\n```\n\n----------------------------------------\n\nTITLE: Ends With Filter for Posts - Drizzle - TypeScript\nDESCRIPTION: This code snippet shows how to filter posts in Drizzle to include only those titles that end with a designated substring. The 'ilike' operator is employed to perform the check in the 'where' clause.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await db\n  .select()\n  .from(posts)\n  .where(ilike(posts.title, '%Hello World'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma MCP Server in JSON\nDESCRIPTION: Basic JSON configuration for the Prisma MCP Server which follows the standard JSON-based configuration for MCP servers. It specifies the command and arguments needed to start the server.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/650-mcp-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Prisma\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"prisma\", \"mcp\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hyperlinks: Good Example (Sentence Case)\nDESCRIPTION: This snippet demonstrates the recommended use of sentence case when the link text is the title of the destination page.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\nFor more information, see [Relation queries](/orm/prisma-client/queries/relation-queries).\n```\n\n----------------------------------------\n\nTITLE: Adding New Model Tag in Prisma Schema\nDESCRIPTION: A new model `Tag` is introduced in the Prisma schema by Developer B. It requires generating a migration with `npx prisma migrate dev --name new-model`. Ensure that the new model is properly integrated into any database operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/020-implementing-schema-changes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Tag {\n  tagName     String   @id\n  tagCategory Category\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Optional Steps in UI Documentation\nDESCRIPTION: This snippet discusses how to accurately identify and format optional steps within UI documentation in Markdown, providing clarity to users.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\n1. (Optional) From **Static IPs**, select **Enabled** if your database is behind a firewall and you can only configure external access from specific IP addresses. Copy the IP addresses and add them to the allowlist of your database.\n2. (Optional) If your database is behind a firewall and you can only configure external access from specific IP addresses, then from **Static IPs**, select **Enabled**.\n\n<!-- Bad -->\n\n1. If your database is behind a firewall and you can only configure external access from specific IP addresses, then from **Static IPs**, select **Enabled**.\n```\n\n----------------------------------------\n\nTITLE: Building and Serving the Static Site\nDESCRIPTION: Commands to clean, build, and serve the static version of the Prisma documentation site.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run clean && npm run build\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client Without Query Engine\nDESCRIPTION: Command to generate Prisma Client without the query engine, which is recommended for production with Prisma Postgres.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/900-troubleshooting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate --no-engine\n```\n\n----------------------------------------\n\nTITLE: Unit Tests with Dependency Injection\nDESCRIPTION: Test suite for user management functions using dependency injection pattern. Tests cover user creation, updates, and validation scenarios with mock context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MockContext, Context, createMockContext } from '../context'\nimport { createUser, updateUsername } from '../functions-with-context'\n\nlet mockCtx: MockContext\nlet ctx: Context\n\nbeforeEach(() => {\n  mockCtx = createMockContext()\n  ctx = mockCtx as unknown as Context\n})\n\ntest('should create new user ', async () => {\n  const user = {\n    id: 1,\n    name: 'Rich',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  }\n  mockCtx.prisma.user.create.mockResolvedValue(user)\n\n  await expect(createUser(user, ctx)).resolves.toEqual({\n    id: 1,\n    name: 'Rich',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  })\n})\n\ntest('should update a users name ', async () => {\n  const user = {\n    id: 1,\n    name: 'Rich Haines',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  }\n  mockCtx.prisma.user.update.mockResolvedValue(user)\n\n  await expect(updateUsername(user, ctx)).resolves.toEqual({\n    id: 1,\n    name: 'Rich Haines',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: true,\n  })\n})\n\ntest('should fail if user does not accept terms', async () => {\n  const user = {\n    id: 1,\n    name: 'Rich Haines',\n    email: 'hello@prisma.io',\n    acceptTermsAndConditions: false,\n  }\n\n  mockCtx.prisma.user.create.mockImplementation()\n\n  await expect(createUser(user, ctx)).resolves.toEqual(\n    new Error('User must accept terms!')\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Embedded Composite Types Using deleteMany\nDESCRIPTION: Shows how to delete product records, including those containing composite types, using `deleteMany` in Prisma. Requires Prisma and a configured Prisma Client instance. Highlights the application of filters to target specific records, such as those with certain photo characteristics.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteProduct = await prisma.product.deleteMany({\n  where: {\n    sizes: {\n      equals: 'Small',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Lists in Prisma Schema for MongoDB\nDESCRIPTION: This example shows how to define list fields in Prisma for MongoDB. It includes both a relation list and a scalar list, with MongoDB-specific ID handling using ObjectId type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  // Other fields\n  comments Comment[] // A list of comments\n  keywords String[] // A scalar list\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Index to Foreign Key in Prisma Schema\nDESCRIPTION: Enhanced Prisma schema with an index on the postId field to optimize query performance\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/850-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int       @id @default(autoincrement())\n  title    String\n  content  String\n  likes    Int       @default(0)\n  comments Comment[]\n}\n\nmodel Comment {\n  id      Int    @id @default(autoincrement())\n  comment String\n  postId  Int\n  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)\n\n  @@index([postId])\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory and Starting Docker Containers - Terminal\nDESCRIPTION: This snippet provides commands to navigate to the server directory and start Docker containers in detached mode while building the images. It assumes the user has Docker configured and set up correctly in their environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/03-spelling-punctuation-formatting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncd path/to/server\n```\n\nLANGUAGE: terminal\nCODE:\n```\ndocker compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions and Mapping Functions\nDESCRIPTION: Type definitions and helper functions for converting Activity types to specific Video and Article types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/80-table-inheritance.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Activity } from '@prisma/client'\n\ntype Video = Omit<Activity, 'body' | 'type'>\ntype Article = Omit<Activity, 'duration' | 'type'>\n\nfunction activityToVideo(activity: Activity): Video {\n  return {\n    url: activity.url,\n    duration: activity.duration ? activity.duration : -1,\n    ownerId: activity.ownerId,\n  } as Video\n}\n\nfunction activityToArticle(activity: Activity): Article {\n  return {\n    url: activity.url,\n    body: activity.body ? activity.body : '',\n    ownerId: activity.ownerId,\n  } as Article\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting the Render Deployment Example\nDESCRIPTION: Command to download and extract the Prisma Render deployment example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/225-deploy-to-render.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ncurl https://codeload.github.com/prisma/prisma-examples/tar.gz/latest | tar -xz --strip=2 prisma-examples-latest/deployment-platforms/render\ncd render\n```\n\n----------------------------------------\n\nTITLE: Initial package.json Configuration (JSON)\nDESCRIPTION: Shows the default content of the `package.json` file generated by `npm init -y`. This file holds project metadata and dependency information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"docker-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {},\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL mutation for adding a post to categories\nDESCRIPTION: Example GraphQL mutation for adding a post to multiple categories. It takes postId and an array of categoryIds as parameters, then returns the updated post with category information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addPostToCategories(\n    postId: \"__AUTHOR_ID__\"\n    categoryIds: [\"__CATEGORY_ID_1__\", \"__CATEGORY_ID_2__\"]\n  ) {\n    id\n    title\n    categories {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PlanetScale Database URL in Environment Variable\nDESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable with a PlanetScale MySQL connection string in the .env file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://janedoe:mypassword@server.us-east-2.psdb.cloud/mydb?sslaccept=strict\"\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Query in SQL\nDESCRIPTION: This snippet demonstrates a simple SELECT query that counts as a billable operation in Prisma Postgres, even though it doesn't access actual data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/1000-faq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Command to set the DATABASE_URL environment variable for database connection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI...\"\n```\n\n----------------------------------------\n\nTITLE: Multi-file Schema CLI Command Example\nDESCRIPTION: Shows how to use Prisma CLI commands with multi-file schema setups.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/04-location.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db push --schema custom/path/to/my/schema.prisma\n```\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db push --schema custom/path/to/my/schema\n```\n\n----------------------------------------\n\nTITLE: Supported Databases for Prisma Optimize\nDESCRIPTION: This snippet utilizes the List component to display various supported databases for Prisma Optimize, representing each database with a corresponding SquareLogo component.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<List framed>\\n    <SquareLogo\\n        url=\"/optimize/getting-started\"\\n        image={'/img/technologies/postgresqlsimple.svg'}\\n        tech=\"PostgreSQL\"\\n    />\\n    <SquareLogo\\n        url=\"/optimize/getting-started\"\\n        image={'/img/technologies/mysqlsimple.svg'}\\n        tech=\"MySQL\"\\n    />\\n    <SquareLogo\\n        url=\"/optimize/getting-started\"\\n        image={'/img/technologies/mariadb.svg'}\\n        imageDark={'/img/technologies/mariadbdark.svg'}\\n        tech=\"MariaDB\"\\n    />\\n    <SquareLogo\\n        url=\"/optimize/getting-started\"\\n        image={'/img/technologies/cockroachdbdark.svg'}\\n        tech=\"CockroachDB\"\\n    />\\n    <SquareLogo\\n        url=\"/optimize/getting-started\"\\n        image={'/img/technologies/sqlserver.svg'}\\n        tech=\"MS SQL Server\"\\n    />\\n</List>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Database Connection\nDESCRIPTION: Database connection string configuration in .dev.vars file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://admin:mypassword42@somehost.aws.com:5432/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Passive Voice Documentation Technique\nDESCRIPTION: Illustrates how to rewrite sentences using passive voice when the doer is unclear\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nThe form automatically pre-fills the GitHub repository based on the project name you provide. In the repository name, the form replaces each space with a hyphen.\n\n<!-- Good -->\n\nThe GitHub repository name is pre-filled based on the display name and each space is replaced with a hyphen.\n```\n\n----------------------------------------\n\nTITLE: Final Migration Command\nDESCRIPTION: Command to create a migration for removing the implicit relation table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/300-implicit-to-explicit-conversion.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name \"removed implicit relation\"\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 GraphQL Data Model Definition\nDESCRIPTION: A Prisma 1 data model written in GraphQL SDL defining User, Post, Profile, and Category types with their relationships and field directives.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  email: String @unique\n  name: String!\n  role: Role! @default(value: CUSTOMER)\n  jsonData: Json\n  profile: Profile\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  title: String!\n  content: String\n  published: Boolean! @default(value: false)\n  author: User @relation(link: TABLE)\n  categories: [Category!]!\n}\n\ntype Profile {\n  id: ID! @id\n  bio: String\n  user: User! @relation(link: INLINE)\n}\n\ntype Category {\n  id: ID! @id\n  name: String!\n  posts: [Post!]!\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Using mdtool to Swap Documentation Files\nDESCRIPTION: Example of using mdtool to swap the positions of two documentation files.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ mdtool swap FILENAME1 FILENAME2\n\n# e.g.:\n$ mdtool swap 03-file1.mdx 07-file2.mdx\n\n# Result: Files are now named: 03-file2.mdx 07-file1.mdx\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metrics in TypeScript\nDESCRIPTION: Code to retrieve metrics data in JSON format using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/240-metrics.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst metrics = await prisma.$metrics.json()\nconsole.log(metrics)\n```\n\n----------------------------------------\n\nTITLE: Production Warning Log About Engine Generation\nDESCRIPTION: Example of the warning log shown in production environments regarding engine generation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/900-troubleshooting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nprisma:warn: In production, we recommend using 'prisma generate --no-engine'\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Postgres Connection URL in .env File\nDESCRIPTION: Example of setting the DATABASE_URL environment variable in a .env file to use the Prisma Postgres connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/110-import-from-existing-database-postgresql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=__API_KEY__\"\n```\n\n----------------------------------------\n\nTITLE: PlanetScale CLI Connect Command\nDESCRIPTION: Terminal command for connecting to a PlanetScale database branch using the CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npscale connect prisma-test branchname --port PORT\n```\n\n----------------------------------------\n\nTITLE: Running the Prisma Docs Site Locally\nDESCRIPTION: Commands to install dependencies and start the development server for the Prisma documentation site.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for User Model in Prisma Client\nDESCRIPTION: This snippet shows the automatically generated TypeScript type definition for a User model in Prisma Client, excluding relation fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport type User = {\n  id: number\n  email: string\n  name: string | null\n  role: string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nexus/schema\nDESCRIPTION: This command installs the latest version of the `@nexus/schema` package, which is essential for building the GraphQL schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @nexus/schema\"\n```\n\n----------------------------------------\n\nTITLE: Initial Migration SQL Script\nDESCRIPTION: Generated SQL script for the initial migration, creating tables for Post, Profile, and User with their respective constraints and indexes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Post\" (\n    \"id\" SERIAL NOT NULL,\n    \"title\" VARCHAR(255) NOT NULL,\n    \"createdAt\" TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"content\" TEXT,\n    \"published\" BOOLEAN NOT NULL DEFAULT false,\n    \"authorId\" INTEGER NOT NULL,\n\n    CONSTRAINT \"Post_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Profile\" (\n    \"id\" SERIAL NOT NULL,\n    \"bio\" TEXT,\n    \"userId\" INTEGER NOT NULL,\n\n    CONSTRAINT \"Profile_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" VARCHAR(255),\n    \"email\" VARCHAR(255) NOT NULL,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Profile_userId_key\" ON \"Profile\"(\"userId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- AddForeignKey\nALTER TABLE \"Post\" ADD CONSTRAINT \"Post_authorId_fkey\" FOREIGN KEY (\"authorId\") REFERENCES \"User\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\n-- AddForeignKey\nALTER TABLE \"Profile\" ADD CONSTRAINT \"Profile_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator with Undefined Parameter in Prisma Query (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates a Prisma query with an OR condition using data from a FormData object. The query results in no data due to an undefined email value, highlighting how the OR operator interprets such values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormData {\n  name: string\n  email?: string\n}\n\nconst formData: FormData = {\n  name: 'Emelie',\n}\n\nconst users = await prisma.user.findMany({\n  where: {\n    OR: [\n      {\n        email: {\n          contains: formData.email,\n        },\n      },\n    ],\n  },\n})\n\n// returns: []\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Fields with TypeORM in TypeScript\nDESCRIPTION: Demonstrates retrieving posts with only specific fields (id and title) using TypeORM's find method with the select option. TypeORM lacks type safety for selected fields, allowing access to non-selected fields at compile time.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst postRepository = getManager().getRepository(Post)\nconst publishedPosts: Post[] = await postRepository.find({\n  where: { published: true },\n  select: ['id', 'title'],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Mapper Entity Class in TypeORM\nDESCRIPTION: Example of a TypeORM entity class implementing the Data Mapper pattern for a User table, showing column decorators and property mappings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from 'typeorm'\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ name: 'first_name' })\n  firstName: string\n\n  @Column({ name: 'last_name' })\n  lastName: string\n\n  @Column({ unique: true })\n  email: string\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgreSQL Schema with Neon Serverless Driver Adapter\nDESCRIPTION: Demonstrates how to specify a PostgreSQL schema when using the Neon serverless driver adapter with Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/890-neon.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst adapter = new PrismaNeon(\n  { connectionString },\n  { schema: 'myPostgresSchema' })\n```\n\n----------------------------------------\n\nTITLE: Creating Expand/Collapse Section\nDESCRIPTION: Demonstrates how to create an expandable/collapsible section in the documentation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary>Expand if you want to view more</summary>\n\nHere's more!\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Environment File for Prisma\nDESCRIPTION: This snippet demonstrates the contents of a .env.sample file used to store the database connection URL for a sample or testing environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_10\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"postgresql://prisma:prisma@localhost:5433/sample\"\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Postgres Tunnel\nDESCRIPTION: Command to establish a secure tunnel to the database using @prisma/ppg-tunnel\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/500-backups.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @prisma/ppg-tunnel --host 127.0.0.1  --port 5432\n```\n\n----------------------------------------\n\nTITLE: Logging into Heroku CLI\nDESCRIPTION: Command to authenticate with the Heroku CLI, which is required for deploying applications to Heroku.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nheroku login\n```\n\n----------------------------------------\n\nTITLE: Defining a MongoDB Schema in Prisma\nDESCRIPTION: A complete Prisma schema file configured for MongoDB, including datasource configuration, client generator, and data models for Post, User, Comment, and an embedded Address type. Contains MongoDB-specific attributes like @db.ObjectId and @map(\"_id\").\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/125-creating-the-prisma-schema-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id       String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  slug     String    @unique\n  title    String\n  body     String\n  author   User      @relation(fields: [authorId], references: [id])\n  authorId String    @db.ObjectId\n  comments Comment[]\n}\n\nmodel User {\n  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email   String   @unique\n  name    String?\n  address Address?\n  posts   Post[]\n}\n\nmodel Comment {\n  id      String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  comment String\n  post    Post   @relation(fields: [postId], references: [id])\n  postId  String @db.ObjectId\n}\n\n// Address is an embedded document\ntype Address {\n  street String\n  city   String\n  state  String\n  zip    String\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client Code\nDESCRIPTION: Command to generate the Prisma Client code based on the schema definition. This needs to be run after any schema changes to keep the client code in sync.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/_install-prisma-client-partial.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Dependencies via Terminal\nDESCRIPTION: Terminal commands using npm to install necessary Prisma dependencies. Installs `prisma` and `tsx` as development dependencies and `@prisma/extension-accelerate` as a regular dependency, noting that the Accelerate extension might be optional.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\nnpm install tsx --save-dev\nnpm install @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration with Prisma\nDESCRIPTION: This terminal command snippet shows how to run a database migration to match the local schema using Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Database Connection Table Structure in Markdown\nDESCRIPTION: Markdown table showing the structure and description of database connection management columns in the Console interface.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/10-about.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Column Name | Description |\n|-------------|-------------|\n| **Hint**    | Provides the URL structure for the database in use. |\n| **Static IP** | Indicates whether static IP is enabled for the database and associated products. |\n| **Products** | Lists the products that are enabled using the database URL. |\n| **Action**  | Allows you to disable all active products and remove the connection. |\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Migration Directory\nDESCRIPTION: Creates a migrations directory with a specified name (0_init) for the baseline migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/30-baselining.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Querying blogs using full-text search indexes in MySQL\nDESCRIPTION: These TypeScript snippets show how to use Prisma Client to query blogs using the full-text search indexes defined in the schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.blogs.findMany({\n  where: {\n    content: {\n      search: 'cat',\n    },\n  },\n})\n\nconst result = await prisma.blogs.findMany({\n  where: {\n    content: {\n      search: 'cat',\n    },\n    title: {\n      search: 'food',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Location in package.json\nDESCRIPTION: Demonstrates how to specify the Prisma schema location in package.json configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/04-location.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prisma\": {\n    \"schema\": \"db/schema.prisma\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Tracing for Custom Database\nDESCRIPTION: Sets up a Prisma Client instance with custom tracing capabilities for a user-provided database. It captures raw SQL queries and wraps all Prisma operations in custom spans with detailed metadata about each database operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tracer } from \"./tracer\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\nimport { PrismaClient } from \"./generated/prisma\";\n\nconst prisma = new PrismaClient({\n  log: [{ emit: \"event\", level: \"query\" }],\n})\n  .$on(\"query\", (e) => {\n    const span = tracer.startSpan(`prisma_raw_query`, {\n      childOf: tracer.scope().active() || undefined,\n      tags: {\n        \"prisma.rawquery\": e.query,\n      },\n    });\n    span.finish();\n  })\n  .$extends({\n    query: {\n      async $allOperations({ operation, model, args, query }) {\n        const span = tracer.startSpan(\n          `prisma_query_${model?.toLowerCase()}_${operation}`,\n          {\n            tags: {\n              \"prisma.operation\": operation,\n              \"prisma.model\": model,\n              \"prisma.args\": JSON.stringify(args),\n              \"prisma.rawQuery\": query,\n            },\n            childOf: tracer.scope().active() || undefined,\n          }\n        );\n\n        try {\n          const result = await query(args);\n          span.finish();\n          return result;\n        } catch (error) {\n          span.setTag(\"error\", error);\n          span.finish();\n          throw error;\n        }\n      },\n    },\n  });\nexport { prisma };\n```\n\n----------------------------------------\n\nTITLE: Defining Post Type in GraphQL Schema\nDESCRIPTION: This snippet shows the GraphQL schema definition for the Post type, including its fields and relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  title: String!\n  content: String\n  published: Boolean!\n  author: User\n  categories(\n    where: CategoryWhereInput\n    orderBy: Enumerable<CategoryOrderByInput>\n    skip: Int\n    after: String\n    before: String\n    first: Int\n    last: Int\n  ): [Category!]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering for Null Fields in Prisma Client\nDESCRIPTION: This query returns all posts where the content field is null.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/050-filtering-and-sorting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    content: null,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection URL Format\nDESCRIPTION: Template showing the standard format for MongoDB connection URLs with placeholders for connection details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/100-connect-your-database-typescript-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb://USERNAME:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Requirements in Table Format\nDESCRIPTION: Lists the minimum supported Node.js versions for Prisma ORM, including optional TypeScript and Yarn versions\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/400-system-requirements.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tool                  | Minimum required version |\n| :-------------------- | :----------------------- |\n| Node.js               | 18.8 / 20.9 / 22.11      |\n| TypeScript (optional) | 5.1.X                    |\n| Yarn (optional)       | 1.19.2                   |\n```\n\n----------------------------------------\n\nTITLE: Verifying Prisma ORM 2 CLI version\nDESCRIPTION: This command checks the version of the Prisma ORM 2 CLI to ensure it is correctly installed and accessible.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"npx prisma -v\"\n```\n\n----------------------------------------\n\nTITLE: Version Numbers: Bad Example\nDESCRIPTION: This snippet illustrates the incorrect way to mention version numbers, avoid \"v\" prefix and the terms \"higher\". It emphasizes the use of \"before\" and \"after\" (or \"later\") for comparisons.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nThis feature is in Preview in v3.5.0 and higher.\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client with Accelerate Extension\nDESCRIPTION: Example of customizing Prisma Client with the Accelerate client extension, maintaining the singleton pattern while adding extended functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient().$extends(withAccelerate())\n}\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n```\n\n----------------------------------------\n\nTITLE: Running the project in development mode\nDESCRIPTION: This snippet shows the commands to run the project in development mode using different package managers (npm, yarn, pnpm) with Turborepo.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_16\n\nLANGUAGE: terminal\nCODE:\n```\nnpx turbo run dev --filter=web\n```\n\nLANGUAGE: terminal\nCODE:\n```\nyarn turbo run dev --filter=web\n```\n\nLANGUAGE: terminal\nCODE:\n```\npnpm turbo run dev --filter=web\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Connection Pooling in Environment Variables\nDESCRIPTION: Sets up the DATABASE_URL environment variable to use Neon's connection pooling feature by adding '-pooler' to the hostname. Also includes a DIRECT_URL for Prisma CLI operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/890-neon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to Neon with Pooling.\nDATABASE_URL=postgres://daniel:<password>@ep-mute-rain-952417-pooler.us-east-2.aws.neon.tech:5432/neondb?sslmode=require\n\n# Direct connection to the database used by Prisma CLI for e.g. migrations.\nDIRECT_URL=\"postgres://daniel:<password>@ep-mute-rain-952417.us-east-2.aws.neon.tech/neondb\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping Prisma User Model in a Custom Class in TypeScript\nDESCRIPTION: This example shows how to wrap the Prisma Client 'user' model within a 'Users' class. It demonstrates encapsulating Prisma Client functionality and adding custom methods like 'signup'. This approach limits access to Prisma Client methods, suitable for large applications with specific model requirements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/064-custom-models.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, User } from '@prisma/client'\n\ntype Signup = {\n  email: string\n  firstName: string\n  lastName: string\n}\n\nclass Users {\n  constructor(private readonly prismaUser: PrismaClient['user']) {}\n\n  // Signup a new user\n  async signup(data: Signup): Promise<User> {\n    // do some custom validation...\n    return this.prismaUser.create({ data })\n  }\n}\n\nasync function main() {\n  const prisma = new PrismaClient()\n  const users = new Users(prisma.user)\n  const user = await users.signup({\n    email: 'alice@prisma.io',\n    firstName: 'Alice',\n    lastName: 'Prisma',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Code Block with Highlighted Code\nDESCRIPTION: Illustrates how to highlight specific lines or sections of code within a code block.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js file=test.ts highlight=2;add|4;delete|6,7;edit|9-12;normal\nasync function main() {\n  added code\n\n  deleted code\n\n  edited\n  code\n\n  highlights\n  over multiple\n  lines can be done by using\n  a hyphen\n}```\n```\n\n----------------------------------------\n\nTITLE: SQL Statements for Default Constraints\nDESCRIPTION: SQL commands to add missing DEFAULT constraints to database columns. Sets default values for role and published columns.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"default$default\".\"User\" ALTER COLUMN \"role\" SET DEFAULT 'CUSTOMER';\nALTER TABLE \"default$default\".\"Post\" ALTER COLUMN \"published\" SET DEFAULT false;\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with ULID in Relational Database - Prisma\nDESCRIPTION: This snippet shows how to define a User model using ULID as the default value for the ID in relational databases. The `id` field is configured to automatically generate a ULID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_33\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(ulid())\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Accelerate for an Environment\nDESCRIPTION: This command enables the Prisma Accelerate feature for a specified environment, requiring parameters like the environment ID, connection URL, region, and optional API key setting.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform accelerate enable \\\n--environment $INSERT_ENVIRONMENT_ID \\\n--url \"postgresql://username:password@host:port/database\" \\\n--region $INSERT_CONNECTION_POOL_REGION \\\n--apikey true \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Correcting cyclic relations with NoAction update in Prisma (Chicken model)\nDESCRIPTION: This updated Prisma schema for the Chicken model sets the onUpdate action to NoAction for the egg relation. This resolves the validation error by breaking the cycle of referential actions between the three models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Chicken {\n  id        Int   @id @default(autoincrement())\n  egg       Egg   @relation(fields: [eggId], references: [id], onUpdate: NoAction)\n  eggId     Int\n  predators Fox[]\n}\n```\n\n----------------------------------------\n\nTITLE: Install specific Prisma 1 CLI version\nDESCRIPTION: Installs a specific older version (v1.30) of the Prisma 1 CLI as a development dependency. This is useful for projects requiring older Prisma 1 versions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n# installs v1.30 of the Prisma 1 CLI\nnpm uninstall -g prisma@1.30\nnpm install prisma@1.30 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema Configuration\nDESCRIPTION: Basic Prisma schema configuration specifying MongoDB as the database provider and setting up the Prisma client generator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-typescript-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with Prisma Migrate\nDESCRIPTION: This command creates and executes a schema migration using Prisma Migrate, which maps the Prisma schema models to database tables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Result Extension Limitation Example\nDESCRIPTION: This example shows the limitation of Prisma Client's result extension component by attempting to create a custom field based on a relation field, which is not supported. The 'postsCount' field tries to access 'posts', a relational field, and fails.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/130-result.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  result: {\n    user: {\n      postsCount: {\n        needs: { posts: true }, // This will not work because posts is a relation field\n        compute(user) {\n          return user.posts.length; // Accessing a relation is not allowed\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Version Numbers: Good Example\nDESCRIPTION: This snippet illustrates the preferred way to mention version numbers, using the format \"versions x.x.x and later\". It emphasizes the use of \"before\" and \"after\" (or \"later\") for comparisons, instead of \"lower\" and \"higher\".\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\nThis feature is in Preview in versions 3.5.0 and later.\n```\n\n----------------------------------------\n\nTITLE: Validating Multi-Column Check Constraint Violation\nDESCRIPTION: Revised script to create a record that violates a multi-column check constraint, showing how constraint errors are handled.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  const newProduct = await prisma.anotherproduct.create({\n    data: {\n      price: 50.0,\n      reducedprice: 100.0,\n    },\n  })\n\n  console.log(newProduct)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Introspected Prisma schema with automatically generated relation field names\nDESCRIPTION: The Prisma schema generated by introspection showing automatically named relation fields that are not very intuitive or user-friendly.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/100-custom-model-and-field-names.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id                          Int   @id @default(autoincrement())\n  author                      Int\n  favoritedBy                 Int?\n  User_Post_authorToUser      User  @relation(\"Post_authorToUser\", fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  User_Post_favoritedByToUser User? @relation(\"Post_favoritedByToUser\", fields: [favoritedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel User {\n  id                          Int    @id @default(autoincrement())\n  Post_Post_authorToUser      Post[] @relation(\"Post_authorToUser\")\n  Post_Post_favoritedByToUser Post[] @relation(\"Post_favoritedByToUser\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Migration\nDESCRIPTION: Creates a new database migration for PostgreSQL setup.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Client Middleware Tracing\nDESCRIPTION: TypeScript code snippet showing how to enable tracing for Prisma Client middleware. This adds the 'prisma:client:middleware' span type to traces.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nregisterInstrumentations({\n  instrumentations: [new PrismaInstrumentation({ middleware: true })],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Source in Prisma Schema\nDESCRIPTION: Defines the database source in the Prisma schema file using the environment variable for the connection string. This basic configuration points to the Accelerate connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in Prisma Schema (Older Versions)\nDESCRIPTION: This configuration snippet enables the tracing preview feature in your Prisma schema file for Prisma ORM versions between 4.2.0 and 6.1.0. This is required for Prisma Optimize to function correctly in older versions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/200-getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\n\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n  previewFeatures = [\\\"tracing\\\"]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Correcting the Employee model with NoAction referential actions in Prisma\nDESCRIPTION: This updated Prisma schema for the Employee model explicitly sets onDelete and onUpdate actions to NoAction. This resolves the validation error by preventing cycles in referential actions for the self-relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Employee {\n  id        Int        @id @default(autoincrement())\n  manager   Employee   @relation(name: \"management\", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  managees  Employee[] @relation(name: \"management\")\n  managerId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Objects with Sequelize using update\nDESCRIPTION: Shows an alternative approach to updating records in Sequelize using the update method directly on the model. This is more similar to Prisma's approach.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.update({\n  name: 'James',\n  email: 'james@prisma.io',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Constraint with Sort Order in Prisma\nDESCRIPTION: This snippet demonstrates how to use the 'sort' argument with the @unique attribute to specify the sort order of a unique constraint in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Unique {\n  unique Int @unique(sort: Desc)\n}\n```\n\n----------------------------------------\n\nTITLE: Stop All Running Docker Containers (Terminal)\nDESCRIPTION: A command to stop all currently running Docker containers, useful for freeing up ports or resetting the Docker environment before starting new services.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps -q | xargs docker stop\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Serverless Driver Integration\nDESCRIPTION: TypeScript code showing how to configure Prisma Client with PlanetScale serverless driver adapter\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/850-planetscale.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaPlanetScale } from '@prisma/adapter-planetscale'\nimport { PrismaClient } from '@prisma/client'\nimport dotenv from 'dotenv'\nimport { fetch as undiciFetch } from 'undici'\n\ndotenv.config()\nconst connectionString = `${process.env.DATABASE_URL}`\n\nconst adapter = new PrismaPlanetScale({ url: connectionString, fetch: undiciFetch })\nconst prisma = new PrismaClient({ adapter })\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for Product and Review Models (Prisma)\nDESCRIPTION: This snippet shows the Prisma schema definition for the Product and Review models used in the custom validation example. It includes the database configuration, client generator, and model definitions with their relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/061-custom-validation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Product {\n  id          String   @id @default(cuid())\n  slug        String\n  name        String\n  description String\n  price       Decimal\n  reviews     Review[]\n}\n\nmodel Review {\n  id        String  @id @default(cuid())\n  body      String\n  stars     Int\n  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n  productId String\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DEBUG Environment Variable for Query Engine Logs\nDESCRIPTION: Sets the DEBUG environment variable to \"engine\" to enable logging for the Prisma query engine. This provides visibility into the query engine's operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport DEBUG=\"engine\"\n```\n\n----------------------------------------\n\nTITLE: Relation Attribute Usage in Prisma Schema\nDESCRIPTION: Examples of using the @relation attribute with optional name parameter and required references parameter in Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_58\n\nLANGUAGE: prisma\nCODE:\n```\n@relation(name: \"UserOnPost\", references: [id])\n@relation(\"UserOnPost\", references: [id])\n\n// or\n\n@relation(name: \"UserOnPost\")\n@relation(\"UserOnPost\")\n```\n\n----------------------------------------\n\nTITLE: Comments in Prisma Schema\nDESCRIPTION: Demonstration of different comment types in Prisma schema, including AST-attached documentation comments and regular comments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\n/// This comment will get attached to the `User` node in the AST\nmodel User {\n  /// This comment will get attached to the `id` node in the AST\n  id     Int   @default(autoincrement())\n  // This comment is just for you\n  weight Float /// This comment gets attached to the `weight` node\n}\n\n// This comment is just for you. It will not\n// show up in the AST.\n\n/// This comment will get attached to the\n/// Customer node.\nmodel Customer {}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Relation Counts in Prisma Client\nDESCRIPTION: This query demonstrates how to count multiple relations simultaneously by selecting multiple fields within the _count.select object. In this example, both posts and recipes counts are returned for each user.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersWithCount = await prisma.user.findMany({\n  select: {\n    _count: {\n      select: {\n        posts: true,\n        recipes: true,\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _count: {\n    posts: 3,\n    recipes: 9\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated User Entity with New Column in TypeORM\nDESCRIPTION: Modified TypeORM entity class showing the addition of a new salutation column to the User entity.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from 'typeorm'\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ name: 'first_name' })\n  firstName: string\n\n  @Column({ name: 'last_name' })\n  lastName: string\n\n  @Column({ unique: true })\n  email: string\n\n  @Column()\n  salutation: string\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remote Configuration\nDESCRIPTION: Command to verify that the Heroku Git remote was added to your local repository.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Basic Data Operations with Prisma Client - TypeScript\nDESCRIPTION: This snippet demonstrates equivalent CRUD operations in Prisma Client, including finding, creating, updating, and deleting a user. Prisma Client must be properly generated and initialized. Operations use the prisma.user model, with properties such as where, data, and id. Database validation and error handling should be implemented as needed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Find one\nconst user = await prisma.user.findUnique({ \n  where: { id: 1 } \n});\n\n// Create\nconst user = await prisma.user.create({\n  data: {\n    email: 'alice@prisma.io',\n    name: 'Alice'\n  }\n});\n\n// Update\nawait prisma.user.update({\n  where: { id: 1 },\n  data: { name: 'New name' }\n});\n\n// Delete\nawait prisma.user.delete({\n  where: { id: 1 }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for User and Post in SQL\nDESCRIPTION: This SQL snippet shows the generated SQL commands for creating the User and Post tables based on the Prisma schema. It includes definitions for columns, types, constraints like primary keys, and foreign keys necessary for establishing relationships between the tables. This is crucial for understanding how Prisma Migrate translates Prisma types into SQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/110-native-database-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" SERIAL,\n    \"name\" VARCHAR(200) NOT NULL,\n    PRIMARY KEY (\"id\")\n);\n  -- CreateTable\nCREATE TABLE \"Post\" (\n    \"id\" SERIAL,\n    \"title\" VARCHAR(150) NOT NULL,\n    \"published\" BOOLEAN NOT NULL DEFAULT true,\n    \"authorId\" INTEGER NOT NULL,\n    PRIMARY KEY (\"id\")\n);\n\n  -- AddForeignKey\nALTER TABLE \"Post\" ADD FOREIGN KEY(\"authorId\")REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Updating Post Records with Prisma Client\nDESCRIPTION: Demonstrates how to update an existing post record using Prisma Client's update operation, specifically setting the published status.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying MySQL Data Source in Prisma Schema\nDESCRIPTION: Illustrates the configuration of a MySQL data source in a Prisma schema file, including the provider and connection URL with authentication details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = \"mysql://johndoe:mypassword@localhost:3306/mydb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User model and configuring Prisma Client in schema.prisma\nDESCRIPTION: This snippet updates the prisma-user-database/schema.prisma file to define a User model, sets the environment variable for the database URL, and specifies a custom output directory for the generated Prisma Client.  The custom output path ensures type safety and avoids conflicts with other Prisma Clients.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  //add-start\n  output = \"../prisma-user-database/user-database-client-types\"\n  //add-end\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  //delete-start\n  url      = env(\"DATABASE_URL\")\n  //delete-end\n  //add-start\n  url      = env(\"PPG_USER_DATABASE_URL\")\n  //add-end\n}\n\n//add-start\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Using null in findFirst query to filter records\nDESCRIPTION: Demonstrates how using null as a filter value in a findFirst query will search for the first record where the specified column has a null value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findFirst({\n  where: {\n    name: null,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Index on Composite Type Field\nDESCRIPTION: Example showing how to define an index on a field within a composite type in a User model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_57\n\nLANGUAGE: prisma\nCODE:\n```\ntype Address {\n  street String\n  number Int\n}\n\nmodel User {\n  id      Int     @id\n  email   String\n  address Address\n\n  @@index([address.number])\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Case-Insensitive Title Filter in TypeORM\nDESCRIPTION: Retrieve posts from a database using TypeORM with a case-insensitive title matching approach. Utilizes the ILike operator for flexible string comparison.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await postRepository.find({\n  where: {\n    title: ILike('Hello World'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapped Code Block\nDESCRIPTION: Shows how to create a code block that wraps long lines instead of creating a scrollable box.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_7\n\nLANGUAGE: code\nCODE:\n```\n```code wrap\n$ this is a single, really long line of code that shouldn't need to be scrollable to check what it says and simply wraps over to the next line, making it all visible in the same box\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource for CockroachDB\nDESCRIPTION: This snippet shows how to set up the datasource block in the Prisma schema file to connect to a CockroachDB database. It uses an environment variable to store the database URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate: Create-Only Migration Command\nDESCRIPTION: This command is used in development environments to create a new migration without immediately applying it. This allows for manual modification of the migration file before it is applied. After editing, the `prisma migrate dev` command must be run again to apply the migration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/90-development-and-production.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma migrate dev --create-only\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tracer File\nDESCRIPTION: Terminal command to create a new file for configuring the Datadog tracer that will be used to instrument Prisma queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\ntouch src/tracer.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Types in Raw Queries\nDESCRIPTION: Demonstrates how to handle Unsupported types in raw queries by casting them to supported Prisma Client types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$queryRaw`SELECT location FROM Country;`;\nawait prisma.$queryRaw`SELECT location::text FROM Country;`;\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client in Nuxt Server Component\nDESCRIPTION: Shows how to integrate Prisma Client within a Nuxt server component (.server.vue) to fetch and display data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import prisma from '~/lib/prisma';\n  const user = await prisma.user.findFirst()\n</script>\n\n<template>\n  <p>{{ user.name }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v7 values as MongoDB IDs using Prisma\nDESCRIPTION: Sets up a User model for MongoDB with an ID field that generates UUID v7 values and maps to MongoDB's _id field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_79\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(uuid(7)) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Step Results in Markdown\nDESCRIPTION: This snippet provides guidance on documenting the results of UI actions within the context of steps in Markdown. It emphasizes clear presentation of important outcomes of actions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\n1. Click **Invite Member**.<br />\n   Your team member receives an email with a link to join the project.\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Composite Types Using updateMany\nDESCRIPTION: Explains how to update multiple composite types within a product's `photos` list based on certain conditions using Prisma's `updateMany`. Requires Prisma and a configured Prisma Client instance. Demonstrates conditionally updating URLs for matching photos.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.update({\n  where: {\n    id: '62de6d328a65d8fffdae2c18',\n  },\n  data: {\n    photos: {\n      updateMany: {\n        where: {\n          url: '1.jpg',\n        },\n        data: {\n          url: '2.png',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for CUIDs in Prisma 1\nDESCRIPTION: Demonstrates a SQL `CREATE TABLE` migration generated by Prisma 1 where IDs are anticipated to be CUIDs but have no direct default behavior attached in SQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation with Superstruct (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use Superstruct to validate user signup data before creating a new user. It includes the validation schema, a custom signup function, and type definitions for the input data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/061-custom-validation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma, User } from '@prisma/client'\nimport { assert, object, string, size, refine } from 'superstruct'\nimport isEmail from 'isemail'\n\nconst prisma = new PrismaClient()\n\n// Runtime validation\nconst Signup = object({\n  // string and a valid email address\n  email: refine(string(), 'email', (v) => isEmail.validate(v)),\n  // password is between 7 and 30 characters long\n  password: size(string(), 7, 30),\n  // first name is between 2 and 50 characters long\n  firstName: size(string(), 2, 50),\n  // last name is between 2 and 50 characters long\n  lastName: size(string(), 2, 50),\n})\n\ntype Signup = Omit<Prisma.UserCreateArgs['data'], 'id'>\n\n// Signup function\nasync function signup(input: Signup): Promise<User> {\n  // Assert that input conforms to Signup, throwing with a helpful\n  // error message if input is invalid.\n  assert(input, Signup)\n  return prisma.user.create({\n    data: input.user,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Server Migration for Tag Model\nDESCRIPTION: SQL migration script that creates the Tag table and a junction table _PostToTag for managing the many-to-many relationship between Post and Tag models. Includes table creation, index creation, and foreign key constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE [dbo].[Tag] (\n    [id] SERIAL NOT NULL,\n    [name] VARCHAR(255) NOT NULL,\n\n    CONSTRAINT [Tag_pkey] PRIMARY KEY ([id])\n);\n\n-- CreateTable\nCREATE TABLE [dbo].[_PostToTag] (\n    [A] INTEGER NOT NULL,\n    [B] INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX [_PostToTag_AB_unique] ON _PostToTag([A], [B]);\n\n-- CreateIndex\nCREATE INDEX [_PostToTag_B_index] ON [_PostToTag]([B]);\n\n-- AddForeignKey\nALTER TABLE [dbo].[_PostToTag] ADD CONSTRAINT [_PostToTag_A_fkey] FOREIGN KEY ([A]) REFERENCES [dbo].[Post]([id]) ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE [dbo].[_PostToTag] ADD CONSTRAINT [_PostToTag_B_fkey] FOREIGN KEY ([B]) REFERENCES [dbo].[Tag]([id]) ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Defining Post model and configuring Prisma Client in schema.prisma\nDESCRIPTION: This snippet updates the prisma-post-database/schema.prisma file to define a Post model, update the datasource URL and set a custom output directory for the generated Prisma Client. The custom output path ensures type safety and avoids conflicts with other Prisma Clients.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/150-multiple-databases.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  //add-start\n  output = \"../prisma-post-database/post-database-client-types\"\n  //add-end\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  //delete-start\n  url      = env(\"DATABASE_URL\")\n  //delete-end\n  //add-start\n  url      = env(\"PPG_POST_DATABASE_URL\")\n  //add-end\n}\n\n//add-start\nmodel Post {\n  id    Int     @id @default(autoincrement())\n  title String  \n  content  String?\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Turborepo task dependencies\nDESCRIPTION: This JSON configuration for turbo.json sets up task dependencies, ensuring that database-related tasks are executed before build and dev tasks. It optimizes the workflow in the monorepo setup.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://turbo.build/schema.json\",\n  \"ui\": \"tui\",\n  \"tasks\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\", \"^db:generate\"],\n      \"inputs\": [\"$TURBO_DEFAULT$\", \".env*\"],\n      \"outputs\": [\".next/**\", \"!.next/cache/**\"]\n    },\n    \"lint\": {\n      \"dependsOn\": [\"^lint\"]\n    },\n    \"check-types\": {\n      \"dependsOn\": [\"^check-types\"]\n    },\n    \"dev\": {\n      \"dependsOn\": [\"^db:generate\"],\n      \"cache\": false,\n      \"persistent\": true\n    },\n    \"db:generate\": {\n      \"cache\": false\n    },\n    \"db:migrate\": {\n      \"cache\": false,\n      \"persistent\": true\n    },\n    \"db:deploy\": {\n      \"cache\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Down Migration SQL File\nDESCRIPTION: Using the prisma migrate diff command, this terminal command generates a down migration SQL script by comparing the modified schema to its previous state in the migrations directory. The script is output to a file named down.sql.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/60-generating-down-migrations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff \\\n --from-schema-datamodel prisma/schema.prisma \\\n --to-migrations prisma/migrations \\\n --shadow-database-url $SHADOW_DATABASE_URL \\\n --script > down.sql\n```\n\n----------------------------------------\n\nTITLE: Generated SDL Schema with UserUniqueInput\nDESCRIPTION: The SDL representation of the schema after adding the UserUniqueInput type and user query, showing how Nexus generates the appropriate GraphQL schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  posts(searchString: String): [Post!]\n  user(userUniqueInput: UserUniqueInput!): User\n  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: Enumerable<UserOrderByInput>, skip: Int, where: UserWhereInput): [User!]!\n}\n\ninput UserUniqueInput {\n  email: String\n  id: String\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema with Tag Model and Many-to-Many Relation\nDESCRIPTION: This snippet shows the updated Prisma schema file with a new Tag model and a many-to-many relationship between Post and Tag models. It includes the existing User and Profile models for context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  user      User     @relation(fields: [authorId], references: [id])\n  tags      Tag[]\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  post    Post[]\n  profile Profile?\n}\n\nmodel Tag {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting with Composite Type in an Order\nDESCRIPTION: Describes using upsert to create an optional `billingAddress` if it does not exist, or to update the record if it does. Requires Prisma and a configured Prisma Client instance. Handles creating or updating composite type fields within an order using upsert operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await prisma.order.update({\n  where: {\n    id: 'some-object-id',\n  },\n  data: {\n    billingAddress: {\n      // Create the address if it doesn't exist,\n      // otherwise update it\n      upsert: {\n        set: {\n          street: '1084 Candycane Lane',\n          city: 'Silverlake',\n          zip: '84323',\n        },\n        update: {\n          zip: '84323',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Objects with Sequelize using save\nDESCRIPTION: Shows how to update a record in Sequelize by modifying model instance properties and then calling save. This approach requires first fetching the record to update.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nuser.name = 'James'\nuser.email = ' alice@prisma.com'\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Querying Implicit Many-to-Many Self-Relation in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to query an implicit many-to-many self-relation using Prisma Client, including prey and predators of a specific animal.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/500-troubleshooting-relations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAnimals = await prisma.animal.findMany({\n  where: {\n    name: 'Salmon',\n  },\n  include: {\n    b_eats: true,\n    a_eatenBy: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example MySQL Connection URL for AWS RDS\nDESCRIPTION: This snippet provides an example of a MySQL connection URL for a database hosted on AWS RDS, showing how to format the hostname for a cloud provider.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:XXX@mysql–instance1.123456789012.us-east-1.rds.amazonaws.com:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Hyperlinks: Good Example\nDESCRIPTION: This snippet illustrates the preferred way to create hyperlinks in documentation, using descriptive text instead of vague phrases like \"click here\".\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\nRead more in the [Prisma ORM docs](/orm)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Custom PostgreSQL Database\nDESCRIPTION: Example of the .env file content with a placeholder PostgreSQL connection string. This needs to be replaced with your actual database credentials.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Placeholder url you have to replace \nDATABASE_URL=\"postgresql://janedoe:mypassword@localhost:5432/mydb?schema=sample\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Subscription Status Percentages\nDESCRIPTION: Generates a SQL query to calculate the percentage distribution of subscription statuses using aggregation\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  status,\n  COUNT(*) * 100.0 / (SELECT COUNT(*) FROM \"Subscription\") AS percentage\nFROM \"Subscription\"\nGROUP BY status;\n```\n\n----------------------------------------\n\nTITLE: Using Cast Operator with UUID Generation\nDESCRIPTION: Example showing how to use a cast operator with the gen_random_uuid() function in a default value definition.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/120-native-database-functions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\n@default(dbgenerated(\"(gen_random_uuid()::TEXT)\"))\n```\n\n----------------------------------------\n\nTITLE: Using String Concatenation with $queryRaw\nDESCRIPTION: Shows how to use string concatenation with $queryRaw to correctly incorporate variables into SQL queries when working with string literals.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = \"Bob\";\nawait prisma.$queryRaw`SELECT 'My name is ' || ${name};`;\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL Extensions Preview Feature in Prisma Schema\nDESCRIPTION: Shows how to enable the postgresqlExtensions preview feature in the Prisma schema generator block. This configuration is required to use PostgreSQL extensions functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/80-postgresql-extensions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Text Index Preview Feature in Prisma Schema\nDESCRIPTION: Configures the preview feature for full text indexes in the Prisma generator block, allowing use of @@fulltext attribute\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"fullTextIndex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying D1 Migration to Local Instance using Wrangler\nDESCRIPTION: This command applies the migration to the local D1 database instance using the Wrangler CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx wrangler d1 migrations apply __YOUR_DATABASE_NAME__ --local\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Init Command with Custom URL\nDESCRIPTION: This snippet demonstrates how to execute the Prisma init command with a custom database connection URL, allowing developers to specify their datasource without default settings. The command can be adapted for different databases by changing the URL format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nprisma init --url mysql://user:password@localhost:3306/mydb\n```\n\n----------------------------------------\n\nTITLE: Using Prisma.validator with selector pattern\nDESCRIPTION: This snippet shows an alternative syntax using the 'selector' pattern with an existing Prisma Client instance to leverage `Prisma.validator`. This approach requires importing both Prisma and a pre-configured Prisma client instance. It is beneficial for scenarios where an instance of Prisma Client is already initialized and available.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/050-prisma-validator.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client'\nimport prisma from './lib/prisma'\n\nconst userEmail = Prisma.validator(\n  prisma,\n  'user',\n  'findUnique',\n  'select'\n)({\n  email: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Without Applying It - Prisma Migrate - Terminal\nDESCRIPTION: This command generates a new migration file without applying it to the database. The `--create-only` flag is used to create the migration for further customization.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/80-unsupported-database-features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --create-only\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied\nDESCRIPTION: Command to mark the initial migration as applied in the Prisma migrations table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied\nDESCRIPTION: Command to mark the initial migration as applied in the Prisma migrations table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: Upserting Records with Composite Types Using Upsert\nDESCRIPTION: Describes using `upsert` to create a new product or add to an existing product's composite type lists, such as photos. Requires Prisma and a configured Prisma Client instance. Combines both creation and updating operations for efficient management of composite types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = await prisma.product.upsert({\n  where: {\n    name: 'Forest Runners',\n  },\n  create: {\n    name: 'Forest Runners',\n    price: 59.99,\n    colors: ['Red', 'Green'],\n    sizes: ['Small', 'Medium', 'Large'],\n    photos: [\n      { height: 100, width: 200, url: '1.jpg' },\n      { height: 100, width: 200, url: '2.jpg' },\n    ],\n  },\n  update: {\n    photos: {\n      push: { height: 300, width: 400, url: '3.jpg' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initial Database Schema Migration\nDESCRIPTION: SQL migration script that creates tables for Post, Profile, and User entities with their relationships and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Post\" (\n    \"id\" SERIAL NOT NULL,\n    \"title\" VARCHAR(255) NOT NULL,\n    \"createdAt\" TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"content\" TEXT,\n    \"published\" BOOLEAN NOT NULL DEFAULT false,\n    \"authorId\" INTEGER NOT NULL,\n\n    CONSTRAINT \"Post_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Profile\" (\n    \"id\" SERIAL NOT NULL,\n    \"bio\" TEXT,\n    \"userId\" INTEGER NOT NULL,\n\n    CONSTRAINT \"Profile_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" VARCHAR(255),\n    \"email\" VARCHAR(255) NOT NULL,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Profile_userId_key\" ON \"Profile\"(\"userId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- AddForeignKey\nALTER TABLE \"Post\" ADD CONSTRAINT \"Post_authorId_fkey\" FOREIGN KEY (\"authorId\") REFERENCES \"User\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\n-- AddForeignKey\nALTER TABLE \"Profile\" ADD CONSTRAINT \"Profile_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Field in Prisma Schema\nDESCRIPTION: Example of defining an optional field in a Prisma schema using the ? modifier. This makes the field nullable in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_26\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int     @id @default(autoincrement())\n  name String?\n}\n```\n\n----------------------------------------\n\nTITLE: Starts With Filter for Posts - Drizzle - TypeScript\nDESCRIPTION: This code snippet illustrates how to filter posts in Drizzle to match titles that start with a specified substring. The 'ilike' operator is used to facilitate this check in the 'where' clause.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await db\n  .select()\n  .from(posts)\n  .where(ilike(posts.title, 'Hello World%'))\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies (Terminal)\nDESCRIPTION: Installs the Prisma CLI as a development dependency (`--save-dev`) and Express.js as a runtime dependency using npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Record with Prisma Client\nDESCRIPTION: Shows how to delete a User record from the database using Prisma Client's delete method, specifying the user to delete by their email address.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst deletedUser = await prisma.user.delete({\n  where: { email: 'sarah@prisma.io' },\n})\n```\n\n----------------------------------------\n\nTITLE: String Contains Filter on JSON Property in PostgreSQL\nDESCRIPTION: Query to find users where a JSON property contains a specific substring using PostgreSQL syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    extendedPetsData: {\n      path: ['petType'],\n      string_contains: 'cat',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 SQL Migration: Inline 1-1 Tables\nDESCRIPTION: This SQL script creates the `User` and `Profile` tables. The `Profile` table includes a foreign key constraint on the `user` column, referencing the `User` table's `id` column. However, it lacks a `UNIQUE` constraint on the `user` column. The missing `UNIQUE` constraint can cause later introspection to misinterpret the relationship.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"Profile\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  \"user\" VARCHAR(25),\n  FOREIGN KEY (\"user\") REFERENCES \"User\"(id)\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Migration for Tag Model and Many-to-Many Relation\nDESCRIPTION: This SQL migration script creates the Tag table and a junction table _PostToTag for the many-to-many relationship between Post and Tag. It also adds necessary indexes and foreign key constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE Tag (\n    id SERIAL NOT NULL,\n    name VARCHAR(255) NOT NULL,\n\n    CONSTRAINT Tag_pkey PRIMARY KEY (id)\n);\n\n-- CreateTable\nCREATE TABLE _PostToTag (\n    A INTEGER NOT NULL,\n    B INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX _PostToTag_AB_unique ON _PostToTag(A, B);\n\n-- CreateIndex\nCREATE INDEX _PostToTag_B_index ON _PostToTag(B);\n\n-- AddForeignKey\nALTER TABLE _PostToTag ADD CONSTRAINT _PostToTag_A_fkey FOREIGN KEY (A) REFERENCES Post(id) ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE _PostToTag ADD CONSTRAINT _PostToTag_B_fkey FOREIGN KEY (B) REFERENCES Tag(id) ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Basic Data Operations with Sequelize ORM - TypeScript\nDESCRIPTION: This snippet demonstrates basic CRUD operations using Sequelize ORM in a Node.js/TypeScript context, including finding, creating, updating, and deleting a user. Requires Sequelize and appropriate model definitions setup. Inputs like user ID, email, and name are required parameters for operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Find one\nconst user = await User.findOne({ \n  where: { id: 1 } \n});\n\n// Create\nconst user = await User.create({\n  email: 'alice@prisma.io',\n  name: 'Alice'\n});\n\n// Update\nawait User.update({ name: 'New name' }, { \n  where: { id: 1 } \n});\n\n// Delete\nawait User.destroy({\n  where: { id: 1 }\n});\n```\n\n----------------------------------------\n\nTITLE: Extending All Prisma Models with Custom Method in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend all Prisma models with a custom `exists` method using the `$extends` function. Key functionality includes checking if a record exists based on a provided condition. Dependencies include Prisma Client and optional preview feature flag. It handles a generic type `T` and expects a filter object for searching.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/100-model.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  name?: '<name>', // `name` is an optional field that you can use to name the extension for error logs\n  model?: {\n    $allModels: { ... }\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  model: {\n    $allModels: {\n      async exists<T>(\n        this: T,\n        where: Prisma.Args<T, 'findFirst'>['where']\n      ): Promise<boolean> {\n        // Get the current model at runtime\n        const context = Prisma.getExtensionContext(this)\n\n        const result = await (context as any).findFirst({ where })\n        return result !== null\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// `exists` method available on all models\nawait prisma.user.exists({ name: 'Alice' })\nawait prisma.post.exists({\n  OR: [{ title: { contains: 'Prisma' } }, { content: { contains: 'Prisma' } }],\n})\n```\n\n----------------------------------------\n\nTITLE: Long-running transaction in Prisma with TypeScript\nDESCRIPTION: This code snippet demonstrates a long-running transaction using Prisma's `$transaction` API. It performs multiple operations, including creating an order, updating a user's balance, and creating a shipping record, within a single transaction. This pattern can lead to database locks, connection tie-ups, and other performance issues.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/1200-long-running-transactions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: A single massive transaction performing multiple steps\nawait prisma.$transaction(async (prisma) => {\n  const order = await prisma.order.create({\n    data: {\n      /* ... */\n    },\n  });\n  await prisma.user.update({\n    where: { id: userId },\n    data: { balance: { decrement: order.total } },\n  });\n  await prisma.shipping.create({ data: { orderId: order.id /* ... */ } });\n  // Additional dependent operations\n});\n```\n\n----------------------------------------\n\nTITLE: Defining package patterns in Serverless Framework\nDESCRIPTION: Specifies file patterns in serverless.yml to only package necessary files, optimizing the deployment size by excluding unnecessary binaries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  patterns:\n    - '!node_modules/.prisma/client/libquery_engine-*'\n    - 'node_modules/.prisma/client/libquery_engine-rhel-*'\n    - '!node_modules/prisma/libquery_engine-*'\n    - '!node_modules/@prisma/engines/**'\n    - '!node_modules/.cache/prisma/**'  # only required for Windows\n```\n\n----------------------------------------\n\nTITLE: Generated SDL Schema for addPostToCategories with Nexus\nDESCRIPTION: The GraphQL SDL schema automatically generated by Nexus based on the code-first definition, showing the addPostToCategories mutation signature.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  createDraft(title: String!, content: String, authorId: String!): Post!\n  updateBio(bio: String, userUniqueInput: UserUniqueInput!): User\n  //highlight-next-line\n  addPostToCategories(postId: String!, categoryIds: [String!]!): Post\n}\n```\n\n----------------------------------------\n\nTITLE: Extending PrismaClient with Prisma Accelerate\nDESCRIPTION: This TypeScript code snippet demonstrates how to extend the `PrismaClient` with the `withAccelerate` extension to enable Prisma Postgres in a Cloudflare Worker. It defines an `Env` interface for accessing the `DATABASE_URL` and uses it to initialize the `PrismaClient` with the extension.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client/edge\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\n\nexport interface Env {\n  DATABASE_URL: string;\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    const prisma = new PrismaClient({\n      datasourceUrl: env.DATABASE_URL,\n    }).$extends(withAccelerate());\n\n    const users = await prisma.user.findMany();\n    const result = JSON.stringify(users);\n    return new Response(result);\n  },\n} satisfies ExportedHandler<Env>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project with Prisma CLI\nDESCRIPTION: Commands to initialize a new Node.js project with npm and install the Prisma CLI as a development dependency. This creates a package.json file and adds Prisma to the project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init -y\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 SQL Migration: CUID ID Table\nDESCRIPTION: This SQL script creates a `Post` table with an `id` column defined as `VARCHAR(25)` and set as the primary key. There's no explicit instruction to generate CUIDs, as this was handled by Prisma 1 at runtime.  This absence leads to issues during introspection in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client\nDESCRIPTION: Simple query to fetch all users from the database using Prisma Client's findMany method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema Path in package.json\nDESCRIPTION: Specifies a custom path for the Prisma schema file in package.json configuration, supporting both absolute and relative paths\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"prisma\": {\n    \"schema\": \"./custom-path-to-schema/schema.prisma\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Studio on Default Port\nDESCRIPTION: This command starts Prisma Studio on the default port (5555) and opens a new browser tab to access it.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_32\n\nLANGUAGE: terminal\nCODE:\n```\nprisma studio\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Data Source in Prisma Schema\nDESCRIPTION: Shows how to configure a SQLite data source in a Prisma schema file, specifying a local file as the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source and Generator for Prisma ORM - Prisma\nDESCRIPTION: This schema.prisma file configures Prisma with a PostgreSQL datasource (which can be changed to any supported database) and sets the code generator to prisma-client-js. Adjust the DATABASE_URL environment variable in your .env file to set your database connection. This is a starting point for defining models and managing migrations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/040-migrate-from-sequelize.mdx#_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using AND and NOT Operators with Undefined Parameter in Prisma Query (TypeScript)\nDESCRIPTION: These TypeScript examples show the use of AND and NOT operators in Prisma queries, where undefined values are effectively ignored. Unlike OR, both operators return all users when an undefined condition is passed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormData {\n  name: string\n  email?: string\n}\n\nconst formData: FormData = {\n  name: 'Emelie',\n}\n\nconst users = await prisma.user.findMany({\n  where: {\n    AND: [\n      {\n        email: {\n          contains: formData.email,\n        },\n      },\n    ],\n  },\n})\n\n// returns: { id: 1, email: 'ems@boop.com', name: 'Emelie' }\n\nconst users = await prisma.user.findMany({\n  where: {\n    NOT: [\n      {\n        email: {\n          contains: formData.email,\n        },\n      },\n    ],\n  },\n})\n\n// returns: { id: 1, email: 'ems@boop.com', name: 'Emelie' }\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies\nDESCRIPTION: Command to install the required Node.js dependencies for the Prisma application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/250-deploy-to-koyeb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Fetching selected scalars: TypeORM\nDESCRIPTION: Fetches a single user object from the database using TypeORM, selecting only the `id` and `email` fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst user = await userRepository.findOne(id, {\n  select: ['id', 'email'],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets in Vercel/pkg Package JSON\nDESCRIPTION: The JSON snippet configures the assets in the `package.json` file to include the Prisma query engine binary path, which is necessary to avoid the ENOENT error when using vercel/pkg. Ensure the `pkg/assets` section is correctly specified to prevent missing file errors during package execution. Expected input is a path to the Prisma binary; no output is directly produced by this configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/450-pkg-issue.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pkg\": {\n    \"assets\": [\"node_modules/.prisma/client/*.node\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Column Index in Prisma Schema\nDESCRIPTION: Example showing how to define a multi-column index on title and content fields in a Post model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_55\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id      Int     @id @default(autoincrement())\n  title   String\n  content String?\n\n  @@index([title, content])\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Item with @db.Money in Prisma\nDESCRIPTION: Defines a Prisma model named Item, using the @db.Money native type for the price field. The snippet highlights the use of @db.Money, which is designed to match the PostgreSQL money type, known for its speed but with limitations like unexpected handling of fractional values and currency lacking metadata. Dependencies: Requires a working Prisma setup with PostgreSQL as a database target.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/600-avoid-db-money.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Item {\n  // ...\n  price Decimal @db.Money\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Prisma Client in a Script Context in TypeScript\nDESCRIPTION: This code shows how to create a new PrismaClient instance, perform a task, and then disconnect. This approach is useful for scripts that run infrequently in the context of a long-running application to avoid keeping unnecessary connections open.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/100-connection-management.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\nconst emailService = new EmailService()\n\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  const emails = allUsers.map((x) => x.email)\n\n  await emailService.send(emails, 'Hello!')\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Post Detail Page Implementation\nDESCRIPTION: Implementation of a post detail page with dynamic routing and Prisma query for individual post retrieval.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { data } from \"react-router\";\nimport type { Route } from \"./+types/post\";\nimport prisma from \"~/lib/prisma\";\n\nexport async function loader({ params }: Route.LoaderArgs) {\n  const { postId } = params;\n  const post = await prisma.post.findUnique({\n    where: { id: parseInt(postId) },\n    include: {\n      author: true,\n    },\n  });\n\n  if (!post) {\n    throw data(\"Post Not Found\", { status: 404 });\n  }\n  return { post };\n}\n\nexport default function Post({ loaderData }: Route.ComponentProps) {\n  const { post } = loaderData;\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center -mt-16\">\n      <article className=\"max-w-2xl space-y-4 font-[family-name:var(--font-geist-sans)]\">\n        <h1 className=\"text-4xl font-bold mb-8\">{post.title}</h1>\n        <p className=\"text-gray-600 text-center\">by {post.author.name}</p>\n        <div className=\"prose prose-gray mt-8\">\n          {post.content || \"No content available.\"}\n        </div>\n      </article>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project with Prisma\nDESCRIPTION: Commands to initialize a new Node.js project using npm init and install Prisma CLI as a development dependency.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init -y\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration for Tag Model\nDESCRIPTION: SQL migration script generated by Prisma Migrate that creates the Tag table and necessary junction table for many-to-many relationship with Post table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE [dbo].[Tag] (\n    [id] SERIAL NOT NULL,\n    [name] VARCHAR(255) NOT NULL,\n\n    CONSTRAINT [Tag_pkey] PRIMARY KEY ([id])\n);\n\n-- CreateTable\nCREATE TABLE [dbo].[_PostToTag] (\n    [A] INTEGER NOT NULL,\n    [B] INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX [_PostToTag_AB_unique] ON _PostToTag([A], [B]);\n\n-- CreateIndex\nCREATE INDEX [_PostToTag_B_index] ON [_PostToTag]([B]);\n\n-- AddForeignKey\nALTER TABLE [dbo].[_PostToTag] ADD CONSTRAINT [_PostToTag_A_fkey] FOREIGN KEY ([A]) REFERENCES [dbo].[Post]([id]) ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE [dbo].[_PostToTag] ADD CONSTRAINT [_PostToTag_B_fkey] FOREIGN KEY ([B]) REFERENCES [dbo].[Tag]([id]) ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized Enum Type\nDESCRIPTION: Prisma schema showing how an enum appears after creating a database enum type and re-introspecting the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_39\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id\n  //highlight-next-line\n  role Role?\n}\n\n//highlight-start\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n//highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating a npm script to load env vars\nDESCRIPTION: This JavaScript code snippet shows how to create an npm script in `package.json` that uses `dotenv-cli` to load environment variables from the `.dev.vars` file. This script can then be used to execute Prisma CLI commands with the necessary environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n\"scripts\":  { \"env\": \"dotenv -e .dev.vars\" }\n```\n\n----------------------------------------\n\nTITLE: Filtering Records for Deletion with Composite Types\nDESCRIPTION: Demonstrates using filters to delete records that contain certain embedded composite types. Requires Prisma and a configured Prisma Client instance. Utilizes the `some` filter to find and delete products with a particular `photo` URL attribute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = await prisma.product.deleteMany({\n  where: {\n    photos: {\n      some: {\n        url: '2.jpg',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 GraphQL Datamodel with JSON Type\nDESCRIPTION: Example of a Prisma 1 datamodel using GraphQL syntax with a JSON field type.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  jsonData: Json\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package.json for Database Package\nDESCRIPTION: Defines the initial setup of package.json for the database package with name and version. It sets up the foundational metadata for the package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@repo/db\",\n  \"version\": \"0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Cleanup Migration - Bash\nDESCRIPTION: Creates a migration to finalize schema updates by dropping the old published column from the Post model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/010-data-migration.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev --name drop-published-column\n```\n\n----------------------------------------\n\nTITLE: Default Value for Decimal Field in Prisma Schema\nDESCRIPTION: Example of setting default decimal values in relational databases (not supported in MongoDB).\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_43\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  email  String  @unique\n  number Decimal @default(22.99)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Self-Relation Tables in SQL\nDESCRIPTION: This SQL snippet defines the schema for a many-to-many self-relation using two tables: 'User' and '_UserFollows'. The 'User' table stores user information, while '_UserFollows' manages the many-to-many relationship by referencing user IDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE \"User\" (\n    id integer DEFAULT nextval('\"User_id_seq\"'::regclass) PRIMARY KEY,\n    name text\n);\nCREATE TABLE \"_UserFollows\" (\n    \"A\" integer NOT NULL REFERENCES \"User\"(id) ON DELETE CASCADE ON UPDATE CASCADE,\n    \"B\" integer NOT NULL REFERENCES \"User\"(id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-based Logging for MongoDB\nDESCRIPTION: Shows how to set up event-based logging for queries in Prisma Client with MongoDB, including event listener setup for MongoDB-specific query logging.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/130-logging.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'event',\n      level: 'query',\n    },\n    {\n      emit: 'stdout',\n      level: 'error',\n    },\n    {\n      emit: 'stdout',\n      level: 'info',\n    },\n    {\n      emit: 'stdout',\n      level: 'warn',\n    },\n  ],\n})\n\nprisma.$on('query', (e) => {\n  console.log('Query: ' + e.query)\n})\n```\n\n----------------------------------------\n\nTITLE: Create Migration Directory\nDESCRIPTION: Creates the necessary directory structure for Prisma Migrate to baseline the existing database schema. This involves creating a `migrations` directory and a subdirectory for the initial migration named `0_init`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\n\"mkdir -p prisma/migrations/0_init\"\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio to inspect data\nDESCRIPTION: Command to launch Prisma Studio, a visual database browser that allows inspection and editing of database records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Length for MySQL in Prisma\nDESCRIPTION: This snippet demonstrates how to use the 'length' argument to specify a maximum length for indexed subparts of String and Byte types in MySQL. It's used on the @id attribute to limit the indexed portion of a VARCHAR field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Id {\n  id String @id(length: 100) @db.VarChar(3000)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Type Unique Constraints in Prisma Schema\nDESCRIPTION: Demonstrates unique constraints with composite types in MongoDB using nested field references.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_20\n\nLANGUAGE: prisma\nCODE:\n```\ntype Address {\n  street String\n  number Int\n}\n\nmodel User {\n  id      Int     @id\n  email   String\n  address Address\n\n  @@unique([email, address.number])\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ntype City {\n  name String\n}\n\ntype Address {\n  number Int\n  city   City\n}\n\nmodel User {\n  id      Int       @id\n  address Address[]\n\n  @@unique([address.city.name])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Enforced Unique Values in MongoDB using Prisma ORM\nDESCRIPTION: This TypeScript code attempts to create a 'Mailbox' record with duplicate email addresses. Unlike the previous example, this will fail due to the unique constraint enforced by the relation structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.MailBox.create({\n  data: {\n    name: 'Alice',\n    addresses: {\n      create: [\n        { name: 'alice@prisma.io' }, // Not unique\n        { name: 'alice@prisma.io' }, // Not unique\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching relations with relations option: TypeORM\nDESCRIPTION: Fetches a user with associated posts using the `relations` option in TypeORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst user = await userRepository.findOne(id, {\n  relations: ['posts'],\n})\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration with Copy Plugin\nDESCRIPTION: Extended webpack configuration that includes CopyPlugin to handle Prisma schema file copying during build.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeExternals = require('webpack-node-externals')\nconst CopyPlugin = require('copy-webpack-plugin')\n\nmodule.exports = {\n  // ... other configuration\n  externals: [nodeExternals()],\n  plugins: [\n    new CopyPlugin({\n      patterns: [\n        { from: './node_modules/.prisma/client/schema.prisma', to: './' },\n      ],\n    }),\n  ],\n  // ... other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration in TypeORM\nDESCRIPTION: TypeORM migration class example showing how to add a new column to an existing table with up and down migration methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MigrationInterface, QueryRunner } from 'typeorm'\n\nexport class UserRefactoring1604448000 implements MigrationInterface {\n  async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(`ALTER TABLE \"User\" ADD COLUMN \"salutation\" TEXT`)\n  }\n\n  async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(`ALTER TABLE \"User\" DROP COLUMN \"salutation\"`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Prisma Client Singleton\nDESCRIPTION: This code mocks the Prisma Client instance created in client.ts for unit testing purposes.  It uses jest-mock-extended to create a deep mock of PrismaClient and resets the mock before each test is run. `prismaMock` is then exported.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { PrismaClient } from '@prisma/client'\\nimport { mockDeep, mockReset, DeepMockProxy } from 'jest-mock-extended'\\n\\nimport prisma from './client'\\n\\njest.mock('./client', () => ({\\n  __esModule: true,\\n  default: mockDeep<PrismaClient>(),\\n}))\\n\\nbeforeEach(() => {\\n  mockReset(prismaMock)\\n})\\n\\nexport const prismaMock = prisma as unknown as DeepMockProxy<PrismaClient>\"\n```\n\n----------------------------------------\n\nTITLE: Complete SafeQL Configuration with Database Connection\nDESCRIPTION: Full ESLint configuration for SafeQL including database connection setup to enable introspection of database schema for linting raw SQL queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n//add-next-line\nrequire('dotenv').config()\n\n/** @type {import('eslint').Linter.Config} */\nmodule.exports = {\n  plugins: ['@ts-safeql/eslint-plugin'],\n  //add-start\n  // exclude `parserOptions` if you are not using TypeScript\n  parserOptions: {\n    project: './tsconfig.json',\n  },\n  //add-end\n  rules: {\n    '@ts-safeql/check-sql': [\n      'error',\n      {\n        connections: [\n          {\n            //add-next-line\n            connectionUrl: process.env.DATABASE_URL,\n            // The migrations path:\n            migrationsDir: './prisma/migrations',\n            targets: [\n              // what you would like SafeQL to lint. This makes `prisma.$queryRaw` and `prisma.$executeRaw`\n              // commands linted\n              { tag: 'prisma.+($queryRaw|$executeRaw)', transform: '{type}[]' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema Models in Prisma\nDESCRIPTION: Prisma schema definition containing three models (Post, Profile, User) with relationships and field configurations. Includes primary keys, timestamps, optional fields, and foreign key relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration for Tag Model\nDESCRIPTION: SQL migration that creates the Tag table and a junction table _PostToTag for the many-to-many relationship, including necessary indexes and foreign key constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE Tag (\n    id SERIAL NOT NULL,\n    name VARCHAR(255) NOT NULL,\n\n    CONSTRAINT Tag_pkey PRIMARY KEY (id)\n);\n\n-- CreateTable\nCREATE TABLE _PostToTag (\n    A INTEGER NOT NULL,\n    B INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX _PostToTag_AB_unique ON _PostToTag(A, B);\n\n-- CreateIndex\nCREATE INDEX _PostToTag_B_index ON _PostToTag(B);\n\n-- AddForeignKey\nALTER TABLE _PostToTag ADD CONSTRAINT _PostToTag_A_fkey FOREIGN KEY (A) REFERENCES Post(id) ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE _PostToTag ADD CONSTRAINT _PostToTag_B_fkey FOREIGN KEY (B) REFERENCES Tag(id) ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Updating Database URL for Production Deployment - Bash\nDESCRIPTION: This snippet demonstrates how to update the DATABASE_URL environment variable in a .env file to switch from a local database to a production database before deploying migrations using Prisma. It highlights the need to manage sensitive connection strings carefully to avoid accidental exposure or database modifications.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/600-deploy-migrations-from-a-local-environment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n//delete-next-line\nDATABASE_URL=\"postgresql://johndoe:randompassword@localhost:5432/my_local_database\"\n\n//add-next-line\nDATABASE_URL=\"postgresql://johndoe:randompassword@localhost:5432/my_production_database\"\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration\nDESCRIPTION: SQL migration file generated by Prisma Migrate that creates the Tag table and establishes many-to-many relationship with Post table through a junction table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Tag\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" VARCHAR(255) NOT NULL,\n\n    CONSTRAINT \"Tag_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"_PostToTag\" (\n    \"A\" INTEGER NOT NULL,\n    \"B\" INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"_PostToTag_AB_unique\" ON \"_PostToTag\"(\"A\", \"B\");\n\n-- CreateIndex\nCREATE INDEX \"_PostToTag_B_index\" ON \"_PostToTag\"(\"B\");\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"Post\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Tag\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with Accelerate Extension in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a basic TypeScript file with Prisma Client, including importing dependencies, initializing the client with the Accelerate extension, and creating a structure for executing database queries with proper connection handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-prismaPostgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\n// 2\nconst prisma = new PrismaClient()\n  .$extends(withAccelerate())\n\n// 3\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\n// 4\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    // 5\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized JSON Field\nDESCRIPTION: Prisma schema showing how a field appears after converting it from TEXT to JSON type and re-introspecting the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_34\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String @id\n  //highlight-next-line\n  jsonData Json?\n}\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Edge Function Implementation\nDESCRIPTION: Edge function implementation using Prisma Client with PlanetScale adapter to query users.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaPlanetScale } from '@prisma/adapter-planetscale'\n\nexport const runtime = 'edge'\n\nexport async function GET(request: Request) {\n  const adapter = new PrismaPlanetScale({ url: process.env.DATABASE_URL })\n  const prisma = new PrismaClient({ adapter })\n\n  const users = await prisma.user.findMany()\n\n  return NextResponse.json(users, { status: 200 })\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Servers for Database Migration\nDESCRIPTION: Commands to stop the Nuxt server and Prisma Studio before performing database changes when working with pre-existing data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n// stops Nuxt dev server from running incase it's still running\nnpx kill-port 3000\n// stops Prisma Studio instance incase it's still running\nnpx kill-port 5555\n```\n\n----------------------------------------\n\nTITLE: Using withAccelerateInfo for Cache Status\nDESCRIPTION: Example showing how to retrieve Accelerate response information using withAccelerateInfo()\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/400-api-reference.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, info } = await prisma.user\n  .count({\n    cacheStrategy: { ttl: 60, swr: 600 },\n    where: { myField: 'value' },\n  })\n  .withAccelerateInfo()\n\nconsole.dir(info)\n```\n\n----------------------------------------\n\nTITLE: Setting up TanStack Start loader function for fetching posts\nDESCRIPTION: Configure the TanStack Start route to use a loader function that calls getPosts to fetch data on page load.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/160-tanstack-start.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Route = createFileRoute(\"/\")({\n  component: Home,\n  loader: () => {\n    return getPosts();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Database with Prisma\nDESCRIPTION: This command introspects the MongoDB database to populate the Prisma schema with models. It requires that the Prisma setup is already complete and the connection string correctly configured. Errors encountered during introspection may need additional authentication parameters in the connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/08-upgrade-from-mongodb-beta.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Database Migration SQL for Tag Model\nDESCRIPTION: SQL migration script that creates the Tag table and establishes many-to-many relationship tables and constraints between Post and Tag models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Tag\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" VARCHAR(255) NOT NULL,\n\n    CONSTRAINT \"Tag_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"_PostToTag\" (\n    \"A\" INTEGER NOT NULL,\n    \"B\" INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"_PostToTag_AB_unique\" ON \"_PostToTag\"(\"A\", \"B\");\n\n-- CreateIndex\nCREATE INDEX \"_PostToTag_B_index\" ON \"_PostToTag\"(\"B\");\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"Post\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Tag\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with Relations\nDESCRIPTION: This Prisma schema adds relation fields to connect the Post, Profile, and User models. It defines the relationships between these entities in the application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n\n  @@index([authorId])\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  user   User    @relation(fields: [userId], references: [id])\n  userId Int     @unique\n\n  @@index([userId])\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema Definition\nDESCRIPTION: Defines a basic Prisma schema with User, Profile, Post and Category models including relationships and field constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/20-prototyping-your-schema.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id       Int      @id @default(autoincrement())\n  name     String\n  jobTitle String\n  posts    Post[]\n  profile  Profile?\n}\n\nmodel Profile {\n  id       Int    @id @default(autoincrement())\n  biograpy String // Intentional typo!\n  userId   Int    @unique\n  user     User   @relation(fields: [userId], references: [id])\n}\n\nmodel Post {\n  id         Int        @id @default(autoincrement())\n  title      String\n  published  Boolean    @default(true)\n  content    String     @db.VarChar(500)\n  authorId   Int\n  author     User       @relation(fields: [authorId], references: [id])\n  categories Category[]\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String @db.VarChar(50)\n  posts Post[]\n\n  @@unique([name])\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration for Tag Model\nDESCRIPTION: SQL migration file that creates the Tag table and establishes the many-to-many relationship with Post through a junction table _PostToTag.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/275-evolve-your-schema-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Tag\" (\n    \"id\" SERIAL NOT NULL,\n    \"name\" VARCHAR(255) NOT NULL,\n\n    CONSTRAINT \"Tag_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"_PostToTag\" (\n    \"A\" INTEGER NOT NULL,\n    \"B\" INTEGER NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"_PostToTag_AB_unique\" ON \"_PostToTag\"(\"A\", \"B\");\n\n-- CreateIndex\nCREATE INDEX \"_PostToTag_B_index\" ON \"_PostToTag\"(\"B\");\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"Post\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"_PostToTag\" ADD CONSTRAINT \"_PostToTag_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Tag\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware to Set Language from Session Context in Prisma\nDESCRIPTION: This code example shows how to use Prisma middleware to automatically set the 'language' field of a Post model based on session context data. The middleware intercepts create operations for the Post model and adds language information before the operation is executed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/300-session-data-middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n\nconst contextLanguage = 'en-us' // Session state\n\nprisma.$use(async (params, next) => {\n  if (params.model == 'Post' && params.action == 'create') {\n    params.args.data.language = contextLanguage\n  }\n\n  return next(params)\n})\n\nconst create = await prisma.post.create({\n  data: {\n    title: 'My post in English',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering for Concrete Values in Prisma ORM and Mongoose\nDESCRIPTION: Shows how to filter records based on specific field values. Prisma uses operators like contains within a where clause, while Mongoose uses a simpler object-based query format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: {\n      contains: 'Hello World',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.find({\n  title: 'Hello World',\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts by Search String - GET Route\nDESCRIPTION: This route handles GET requests to filter posts based on a search string. It retrieves the search string from the query parameters and responds with posts that match the criteria using Prisma Client 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/filterPosts', async (req, res) => {\\n  const { searchString } = req.query\\n  const filteredPosts = await prisma.post.findMany({\\n    where: {\\n      OR: [\\n        {\\n          title: { contains: searchString },\\n        },\\n        {\\n          content: { contains: searchString },\\n        },\\n      ],\\n    },\\n  })\\n  res.json(filteredPosts)\\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Relation Counts with Nested Relations in Prisma Client\nDESCRIPTION: This example demonstrates a more complex filter for relation counts that involves nested relations. It counts all user posts that have comments from an author named \"Alice\", showing how to use nested relation filters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Count all user posts that have comments\n// whose author is named \"Alice\"\nawait prisma.user.findMany({\n  select: {\n    _count: {\n      select: {\n        posts: {\n          where: { comments: { some: { author: { is: { name: 'Alice' } } } } },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Posts List Page in Next.js\nDESCRIPTION: This code creates a static posts page that displays a title and a hardcoded list item. It imports Prisma client but doesn't use it yet for data fetching.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport prisma from \"@/lib/prisma\";\n\nexport default async function Posts() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center -mt-16\">\n      <h1 className=\"text-4xl font-bold mb-8 font-[family-name:var(--font-geist-sans)] text-[#333333]\">\n        Posts\n      </h1>\n      <ul className=\"font-[family-name:var(--font-geist-sans)] max-w-2xl space-y-4\">\n          <li>My first post</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Commands to create a new project directory and navigate into it using terminal commands.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Extending Prisma Client with Optimize and Accelerate in TypeScript\nDESCRIPTION: This code snippet demonstrates how to extend the Prisma Client with both the Optimize and Accelerate client extensions. It's crucial to add the Accelerate extension last to ensure cacheable operations are correctly handled by Optimize. The snippet assumes that the `OPTIMIZE_API_KEY` environment variable is set.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/700-known-limitations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient()\n  .$extends(\n    withOptimize({\n      apiKey: process.env.OPTIMIZE_API_KEY,\n    }),\n  )\n  .$extends(withAccelerate());\n```\n\n----------------------------------------\n\nTITLE: Basic One-to-One Relation Schema Definition\nDESCRIPTION: Demonstrates a basic one-to-one relation between User and Profile models in Prisma schema for both relational databases and MongoDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/100-one-to-one-relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  profile Profile?\n}\n\nmodel Profile {\n  id     Int  @id @default(autoincrement())\n  user   User @relation(fields: [userId], references: [id])\n  userId Int  @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing addTodo Action with Drizzle ORM in TypeScript\nDESCRIPTION: This code defines an addTodo action using Drizzle ORM to insert a new Todo record into the database. It imports the database connection and schema, inserts a new record with the provided id and text, and revalidates the path to reflect changes in the UI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from \"next/cache\";\n\nimport db from \"@/db/drizzle\";\nimport { todo } from \"@/db/schema\";\n\nexport const addTodo = async (id: number, text: string) => {\n  await db.insert(todo).values({\n    id: id,\n    text: text,\n  });\n  revalidatePath(\"/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering for Null Name Fields in MongoDB\nDESCRIPTION: This TypeScript snippet shows how to filter for user records with a null name field in MongoDB using Prisma Client. It only returns records where the name field is explicitly set to null.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst findNulls = await prisma.user.findMany({\n  where: {\n    name: null,\n  },\n})\nconsole.log(findNulls)\n```\n\n----------------------------------------\n\nTITLE: Migrating createUser mutation with Prisma Client in JavaScript\nDESCRIPTION: This example illustrates converting the `createUser` mutation to use Prisma Client, adjusting from `forwardTo('prisma')` in `prisma-binding`. The new resolver uses `create` to insert a new user record, receiving its parameters directly from the mutation arguments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    createUser: (_, args, context, info) => {\n      return context.prisma.user.create({\n        data: args.data,\n      })\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Examples\nDESCRIPTION: Example of MongoDB documents showing how relations are stored using document references with ObjectIds.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"_id\": { \"$oid\": \"60d5922d00581b8f0062e3a8\" }, \"name\": \"Ella\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"_id\": { \"$oid\": \"60d5922e00581b8f0062e3a9\" },\n    \"title\": \"How to make sushi\",\n    \"authorId\": { \"$oid\": \"60d5922d00581b8f0062e3a8\" }\n  },\n  {\n    \"_id\": { \"$oid\": \"60d5922e00581b8f0062e3aa\" },\n    \"title\": \"How to re-install Windows\",\n    \"authorId\": { \"$oid\": \"60d5922d00581b8f0062e3a8\" }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nested Query Result Example with Relations\nDESCRIPTION: Displays the result of querying users with their related posts and profile information. This shows how Prisma returns nested objects when relationships are included in the query results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    email: 'alice@prisma.io',\n    id: 1,\n    name: 'Alice',\n    posts: [\n      {\n        content: null,\n        createdAt: 2020-03-21T16:45:01.246Z,\n        updatedAt: 2020-03-21T16:45:01.246Z,\n        id: 1,\n        published: false,\n        title: 'Hello World',\n        authorId: 1,\n      }\n    ],\n    profile: {\n      bio: 'I like turtles',\n      id: 1,\n      userId: 1,\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Introspected Prisma Schema from Database\nDESCRIPTION: Shows the Prisma schema generated after introspecting a PostgreSQL database, mapping database types to Prisma scalar types\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/830-prisma-type-system.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       Int     @id @default(autoincrement())\n  name     String\n  isActive Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL for local development\nDESCRIPTION: This .dev.vars file sets the DATABASE_URL environment variable for local development with a Neon database connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://janedoe:password@ep-nameless-pond-a23b1mdz.eu-central-1.aws.neon.tech/neondb?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Defining Post Type with previous nexus-prisma\nDESCRIPTION: This code snippet demonstrates how the `Post` type was defined using the previous `nexus-prisma` package. It leverages the `prismaObjectType` function and exposes all fields from the Prisma model using the asterisk ('*') in the `prismaFields` array.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"const Post = prismaObjectType({\\n  name: 'Post',\\n  definition(t) {\\n    t.prismaFields(['*'])\\n  },\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Updating Post with Comments using Prisma Client\nDESCRIPTION: Demonstrates how to update an existing Post record by adding multiple Comment records using a nested createMany operation. It also shows how to query the updated data with included relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/250-querying-the-database-typescript-mongodb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.post.update({\n    where: {\n      slug: 'my-first-post',\n    },\n    data: {\n      comments: {\n        createMany: {\n          data: [\n            { comment: 'Great post!' },\n            { comment: \"Can't wait to read more!\" },\n          ],\n        },\n      },\n    },\n  })\n  const posts = await prisma.post.findMany({\n    include: {\n      comments: true,\n    },\n  })\n\n  console.dir(posts, { depth: Infinity })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR Cache Strategy with Tags for Invalidation\nDESCRIPTION: Configures an SWR cache strategy with a tag for targeted invalidation. The 'findMany_users' tag enables immediate cache clearing for time-sensitive updates, ensuring clients receive the latest data without waiting for the normal revalidation cycle.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/300-caching.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.findMany({\n    cacheStrategy: {\n      swr: 60,\n      //add-next-line\n      tags: [\"findMany_users\"],\n    },\n});\n\n// This is how you would invalidate the cached query above.\n//add-start\nawait prisma.$accelerate.invalidate({\n    tags: [\"findMany_users\"],\n});\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Example .env file for Vercel Postgres\nDESCRIPTION: This `.env` file example sets the `POSTGRES_PRISMA_URL` and `POSTGRES_URL_NON_POOLING` environment variables. These variables define the connection strings for Vercel Postgres, specifying the user, password, host, and database name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nPOSTGRES_PRISMA_URL=\"postgres://user:password@host-pooler.region.postgres.vercel-storage.com:5432/name?pgbouncer=true&connect_timeout=15\"\nPOSTGRES_URL_NON_POOLING=\"postgres://user:password@host.region.postgres.vercel-storage.com:5432/name\"\n```\n\n----------------------------------------\n\nTITLE: Starts With Filter for Posts - Prisma ORM - TypeScript\nDESCRIPTION: This snippet shows how to filter posts to only include those whose titles start with a particular substring using Prisma ORM. The filtering is done through the 'startsWith' function within the 'where' clause.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: {\n      startsWith: 'Hello World',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection via Socket\nDESCRIPTION: This example shows how to configure a MySQL connection URL to connect via a socket instead of a network connection. It uses the 'socket' query parameter to specify the socket file location.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://USER:PASSWORD@HOST/DATABASE?socket=/run/mysqld/mysqld.sock\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database with Sequelize - Terminal\nDESCRIPTION: This snippet shows commands for seeding the database using Sequelize. Similar to the migration command, it offers two execution options. Sequelize should be properly configured with the required seed files available.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/03-spelling-punctuation-formatting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n./node_modules/.bin/sequelize db:seed:all # or `npx sequelize db:seed:all`\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL in .dev.vars\nDESCRIPTION: This snippet demonstrates how to set the `DATABASE_URL` environment variable in the `.dev.vars` file for local development with Cloudflare Workers. The `DATABASE_URL` is used to configure the database connection string for Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"your-database-connection-string\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://admin:mypassword42@somehost.aws.com:5432/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable for Database Connection in Prisma Schema\nDESCRIPTION: Example of using an environment variable to store the database connection URL in the Prisma schema file. This allows for more secure and flexible configuration management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Prisma Client - TSX\nDESCRIPTION: Initializes and exports a standard Prisma Client instance. It imports the client from its generated location. This is a basic setup; for production or long-lived environments without a connection pooler, it's recommended to manage client lifecycles per request to avoid exhausting connections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PrismaClient } from \"../generated/prisma\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Setting onUpdate to NoAction in writtenBy Relation\nDESCRIPTION: First solution that fixes the multiple cascade paths by modifying the writtenBy relation in the Comment model to use NoAction for the onUpdate referential action instead of the default Cascade.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  id          Int  @id @default(autoincrement())\n  writtenById Int\n  postId      Int\n  //delete-next-line\n  writtenBy   User @relation(fields: [writtenById], references: [id])\n  //add-next-line\n  writtenBy   User @relation(fields: [writtenById], references: [id], onUpdate: NoAction)\n  post        Post @relation(fields: [postId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Data Using Express Middleware with Prisma ORM and libSQL\nDESCRIPTION: This snippet demonstrates how to implement data synchronization using Express middleware. It adds a middleware function that calls libsql.sync() before processing each request, ensuring the embedded replica is always up-to-date.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/900-turso.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nconst app = express()\n\n// ... the rest of your application code\napp.use(async (req, res, next) => {\n  await libsql.sync()\n  next()\n})\n\napp.listen(3000, () => console.log(`Server ready at http://localhost:3000`))\n```\n\n----------------------------------------\n\nTITLE: Add pgbouncer flag to PostgreSQL connection URL\nDESCRIPTION: To enable Prisma Client to work with PgBouncer versions below 1.21.0, you need to add the `?pgbouncer=true` flag to the PostgreSQL connection URL. This flag informs Prisma Client that it is connecting through PgBouncer.  Note that this setting is not needed for PgBouncer version 1.21.0 and later.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/200-pgbouncer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"postgresql://USER:PASSWORD@HOST:PORT/DATABASE?pgbouncer=true\"\n```\n\n----------------------------------------\n\nTITLE: Prisma Migrate: Development Reset Command\nDESCRIPTION: This command is used in development environments to reset the database and re-apply all migrations. It drops the database/schema if possible, creates a new one with the same name, applies all migrations, and runs seed scripts. It's useful for undoing manual changes or `db push` experiments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/90-development-and-production.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma migrate reset\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client and Setting Up Basic Query Structure in Node.js\nDESCRIPTION: Sets up a basic Node.js script that initializes Prisma Client and defines a main function for executing database queries, along with proper error handling and connection management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Example of differing constraint names in development and production\nDESCRIPTION: These snippets illustrate how constraint names might differ between development and production environments, focusing on the Post model's foreign key constraint.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/100-named-constraints.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\n// Development environment:\nmodel Post {\n  id         Int    @id @default(autoincrement())\n  title      String\n  authorName String @default(\"Anonymous\")\n  author     User?  @relation(fields: [authorName], references: [name], map: \"Custom_Foreign_Key_Constraint\")\n}\n\n// Production environment:\nmodel Post {\n  id         Int    @id @default(autoincrement())\n  title      String\n  authorName String @default(\"Anonymous\")\n  author     User?  @relation(fields: [authorName], references: [name], map: \"Custom_Production_Name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Prisma Unique Constraint Errors in TypeScript\nDESCRIPTION: Example of error handling in TypeScript when attempting to create a user with a duplicate email, demonstrating how to catch and handle Prisma's unique constraint violation errors using instanceof checks\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/700-debugging-and-troubleshooting/230-handling-exceptions-and-errors.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst client = new PrismaClient()\n\ntry {\n  await client.user.create({ data: { email: 'alreadyexisting@mail.com' } })\n} catch (e) {\n  if (e instanceof Prisma.PrismaClientKnownRequestError) {\n    // The .code property can be accessed in a type-safe manner\n    if (e.code === 'P2002') {\n      console.log(\n        'There is a unique constraint violation, a new user cannot be created with this email'\n      )\n    }\n  }\n  throw e\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relations to Prisma Schema for MongoDB\nDESCRIPTION: This snippet demonstrates how to manually add relations between User and Post models in a Prisma schema after introspecting a MongoDB database. It shows the initial schema structure and the modifications needed to establish the relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title  String\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Function Return Types with TypeScript\nDESCRIPTION: Shows how to define a function that returns a partial `User` structure, including related `Post` instances, and how to extract and use the return type with advanced TypeScript type manipulation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/100-operating-against-partial-structures-of-model-types.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Function definition that returns a partial structure\nasync function getUsersWithPosts() {\n  const users = await prisma.user.findMany({ include: { posts: true } })\n  return users\n}\n\n// Extract `UsersWithPosts` type with\ntype ThenArg<T> = T extends PromiseLike<infer U> ? U : T\ntype UsersWithPosts = ThenArg<ReturnType<typeof getUsersWithPosts>>\n\n// run inside `async` function\nconst usersWithPosts: UsersWithPosts = await getUsersWithPosts()\n```\n\n----------------------------------------\n\nTITLE: Configuring GIN Index Type with JsonbPathOps in PostgreSQL\nDESCRIPTION: This example demonstrates how to create a Generalized Inverted Index (GIN) with JsonbPathOps operator class on a Json field in PostgreSQL using Prisma ORM. GIN indexes are useful for full-text searches and querying composite values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  id    Int  @id\n  value Json\n\n  @@index([value(ops: JsonbPathOps)], type: Gin)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing toggleTodo Action with Prisma ORM in TypeScript\nDESCRIPTION: This code implements the toggleTodo action using Prisma ORM to toggle a Todo's completion status. Since Prisma doesn't support toggling booleans in-place, it first fetches the current record, then updates it with the negated 'done' value, followed by path revalidation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { revalidatePath } from \"next/cache\";\n\nimport { prisma } from \"@/db/prisma\";\n\nexport const toggleTodo = async (id: number) => {\n  const todo = await prisma.todo.findUnique({ where: { id } });\n  if (todo) {\n    await prisma.todo.update({\n      where: { id: todo.id },\n      data: { done: !todo.done },\n    })\n    revalidatePath(\"/\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Named Parameter Type Example\nDESCRIPTION: Example SQL comment for defining a string parameter named 'name' with a description, demonstrating the TypedSQL parameter typing syntax.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- @param {String} $1:name The name of the user\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema Location via CLI Command\nDESCRIPTION: Shows how to specify an alternative schema location using the Prisma CLI's --schema flag.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/04-location.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nprisma generate --schema=./alternative/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel CLI for Deployment\nDESCRIPTION: Terminal command to install the Vercel CLI globally using npm, which will be used to deploy the Next.js application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install -g vercel\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project Directory for Prisma\nDESCRIPTION: Creates a new directory named 'hello-prisma' and navigates into it to set up a Prisma ORM project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Default Prisma Schema with SQLite Configuration\nDESCRIPTION: The initial Prisma schema file automatically created when setting up the module. It defines a SQLite database connection with User and Post models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packages using npm\nDESCRIPTION: This snippet shows how to upgrade the `@prisma/client` and `prisma` packages to version 6 using npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client@6\nnpm install -D prisma@6\n```\n\n----------------------------------------\n\nTITLE: Optimizing Query Performance with Prepared Statement Caching in SQL\nDESCRIPTION: This SQL snippet represents prepared statements generated by Prisma Client to improve performance. Prepared statements help avoid redundant parsing and optimizing efforts by database engines. These are particularly beneficial in reducing latency and CPU load on the database server. Required configuration includes adjusting `statement_cache_size` and understanding implications of `pgbouncer`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM user WHERE name = \"John\";\nSELECT * FROM user WHERE name = \"Brenda\";\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM user WHERE name = $1\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-file Schema Preview Feature\nDESCRIPTION: Shows how to enable the prismaSchemaFolder preview feature in the Prisma schema generator block.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/04-location.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"prismaSchemaFolder\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma User Aggregation Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform user aggregation using Prisma in TypeScript. It initializes a constant named 'aggregations' which stores the result of the aggregation query. The snippet is a part of a larger context about providing clear code examples in documentation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/01-writing-style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst aggregations = await prisma.user.aggregate({\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrate with dotenv-cli\nDESCRIPTION: This command demonstrates how to run Prisma CLI commands, such as `prisma migrate dev`, using `dotenv-cli` to load environment variables from the `.dev.vars` file. This is necessary because Cloudflare Workers do not natively support `.env` files in development.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\ndotenv -e .dev.vars -- npx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Introspected Prisma Schema Without Custom Naming\nDESCRIPTION: This Prisma schema is the result of introspecting the PostgreSQL database. It directly reflects the database table names and relationships without custom naming.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/100-custom-model-and-field-names.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel categories {\n  category_id        Int                  @id @default(autoincrement())\n  name               String?              @db.VarChar(256)\n  post_in_categories post_in_categories[]\n}\n\nmodel post_in_categories {\n  post_id     Int\n  category_id Int\n  categories  categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)\n  posts       posts      @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)\n\n  @@unique([post_id, category_id], map: \"post_id_category_id_unique\")\n}\n\nmodel posts {\n  post_id            Int                  @id @default(autoincrement())\n  created_at         DateTime?            @default(now()) @db.Timestamptz(6)\n  title              String               @db.VarChar(256)\n  content            String?\n  author_id          Int?\n  users              users?               @relation(fields: [author_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)\n  post_in_categories post_in_categories[]\n}\n\nmodel profiles {\n  profile_id Int     @id @default(autoincrement())\n  bio        String?\n  user_id    Int     @unique\n  users      users   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel users {\n  user_id  Int       @id @default(autoincrement())\n  name     String?   @db.VarChar(256)\n  email    String    @unique @db.VarChar(256)\n  posts    posts[]\n  profiles profiles?\n}\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Full-Text Search with Prisma\nDESCRIPTION: This snippet executes the MySQL full-text search query using Prisma's `$queryRawTyped` method. It constructs the query with a term (`cat`) and then uses prisma to execute the raw SQL query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst term = `cat`\n  const result = await prisma.$queryRawTyped(fullTextSearch(term))\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Migration for Cloudflare D1 using Prisma Migrate Diff\nDESCRIPTION: This command generates an initial SQL migration by comparing an empty schema to the Prisma schema. It outputs the result as SQL and stores it in a specified file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff \\\n  --from-empty \\\n  --to-schema-datamodel ./prisma/schema.prisma \\\n  --script \\\n  --output migrations/0001_create_user_table.sql\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema Model\nDESCRIPTION: Generated Prisma schema showing model definitions with relationships between User, Post, and Profile tables after introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String   @db.VarChar(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?  @db.VarChar(255)\n  email   String   @unique @db.VarChar(255)\n  posts   Post[]\n  profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the SolidStart Default UI\nDESCRIPTION: This snippet demonstrates how to clean up the default SolidStart UI by modifying the app.tsx file, removing unnecessary elements, and updating the header.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSignal } from \"solid-js\";\nimport \"./app.css\";\n\nexport default function App() {\n  const [count, setCount] = createSignal(0);\n  \n  return (\n    <main>\n      <h1>SolidStart + Prisma</h1>\n      <h1>Hello world!</h1>\n      <button class=\"increment\" onClick={() => setCount(count() + 1)} type=\"button\">\n        Clicks: {count()}\n      </button>\n      <p>\n        Visit{\" \"}\n        <a href=\"https://start.solidjs.com\" target=\"_blank\">\n          start.solidjs.com\n        </a>{\" \"}\n        to learn how to build SolidStart apps.\n      </p>\n    </main>\n  );\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./app.css\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>SolidStart + Prisma</h1>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Server Validation Error for Multiple Cascade Paths in post Relation\nDESCRIPTION: Second error message showing the validation issue from another perspective, focusing on the post relation that creates another cascade path from User to Comment through Post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/100-special-rules-for-referential-actions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nError parsing attribute \"@relation\": When any of the records in model `User` is updated or deleted, the referential actions on the relations cascade to model `Comment` through multiple paths. Please break one of these paths by setting the `onUpdate` and `onDelete` to `NoAction`. (Implicit default `onUpdate`: `Cascade`)\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Route for Post Feed with Express and Prisma\nDESCRIPTION: This Express route handler uses Prisma Client to fetch all published posts, including their authors. It demonstrates how to use Prisma's findMany method with filtering and relation inclusion.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/01-rest.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/feed', async (req, res) => {\n  const posts = await prisma.post.findMany({\n    where: { published: true },\n    include: { author: true },\n  })\n  res.json(posts)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User and Post models with inferred constraint names\nDESCRIPTION: This snippet shows a Prisma schema for User and Post models without explicit constraint names, allowing Prisma ORM to infer default names according to its naming convention.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/100-named-constraints.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  name  String @id //inferred as User_pkey\n  posts Post[]\n}\n\nmodel Post {\n  id         Int    @id @default(autoincrement()) //inferred as Post_pkey\n  authorName String @default(\"Anonymous\")\n  author     User?  @relation(fields: [authorName], references: [name]) //inferred as Post_authorName_fkey\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Order with Composite Type in TypeScript\nDESCRIPTION: Explains how to update an order record's composite type using the `update` method in Prisma. Requires Prisma and a configured Prisma Client instance. Focuses on updating the `shippingAddress` field by modifying only the `zip` value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await prisma.order.update({\n  where: {\n    id: 'some-object-id',\n  },\n  data: {\n    shippingAddress: {\n      // Update just the zip field\n      update: {\n        zip: '41232',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma for multi-file schemas in TypeScript\nDESCRIPTION: This snippet shows how to configure Prisma to use multiple schema files by specifying a schema folder path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\nimport type { PrismaConfig } from 'prisma'\n\nexport default {\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema'),\n} satisfies PrismaConfig\n```\n\n----------------------------------------\n\nTITLE: Using Bold Formatting for UI Elements\nDESCRIPTION: This snippet contains a table that outlines how to apply bold formatting to UI elements names in documenting UI actions within Markdown for enhanced visibility.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| UI element                      | Example                                                                                                                                                                                                   |\n| ------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| buttons                         | Click **Next**.<br />Click **Cancel**.                                                                                                                                                                    |\n| radio buttons                   | Under **Payment method**, select **Wire transfer**.                                                                                                                                                       |\n| checkboxes                      | • Select **Include sample data**.<br />• Clear **Include sample data**.                                                                                                                                   |\n| drop-down menus                 | • From **GitHub Accounts & Organizations**, select an account or organization.<br />• From **Static IPs**, select **Enabled**.<br />• From **Branch**, select the repository branch for this environment. |\n| links                           | Click **Learn more**.                                                                                                                                                                                     |\n| menu names                      | Click **File**.                                                                                                                                                                                           |\n| menu items                      | Select **Open**.                                                                                                                                                                                          |\n| menu cascades                   | Select **File** > **Save**.                                                                                                                                                                               |\n| hamburger menu / three-dot menu | • Click the three-dot menu and select **Make default**.<br />• Click the hamburger menu and select **Make default**.                                                                                      |\n| tab                             | • Select the **macOS** tab.<br />• Click the **Network** tab.                                                                                                                                             |\n| page                            | On the **Configure project** page, …                                                                                                                                                                      |\n| window                          | In the **Payment information** pop-up window, enter the details for your payment method.                                                                                                                  |\n| screen/tab                      | On the **Data Browser** screen, select a record.                                                                                                                                                          |\n| pane/panel                      | In the **Configuration** panel, click **Network**.                                                                                                                                                        |\n| section                         | Under **Accelerate**, select **Enabled** from **Static IPs**.\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Route for Creating Posts with Express and Prisma\nDESCRIPTION: This Express route handler creates a new post using Prisma Client. It demonstrates how to use the create method with nested writes to associate the post with an author.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/01-rest.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(`/post`, async (req, res) => {\n  const { title, content, authorEmail } = req.body\n  const result = await prisma.post.create({\n    data: {\n      title,\n      content,\n      published: false,\n      author: { connect: { email: authorEmail } },\n    },\n  })\n  res.json(result)\n})\n```\n\n----------------------------------------\n\nTITLE: Resolver Implementation for addPostToCategories with Nexus\nDESCRIPTION: TypeScript implementation of the resolver for addPostToCategories using Prisma ORM 2.0 with Nexus. It connects a post to multiple categories using the Prisma client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mutation = mutationType({\n  definition(t) {\n    // ... mutations from before\n    t.field('addPostToCategories', {\n      type: 'Post',\n      args: {\n        postId: stringArg({ nullable: false }),\n        categoryIds: stringArg({\n          list: true,\n          nullable: false,\n        }),\n      },\n      //add-start\n      resolve: (_, args, context) => {\n        const ids = args.categoryIds.map((id) => ({ id }))\n        return context.prisma.post.update({\n          where: {\n            id: args.postId,\n          },\n          data: {\n            categories: { connect: ids },\n          },\n        })\n      },\n      //add-end\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with Prisma\nDESCRIPTION: This Prisma schema defines a SQLite database with Post and User models. It includes relationships between the models and specifies field types and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/01-rest.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid of Link Cards\nDESCRIPTION: This snippet constructs a Grid component containing LinkCard components that direct users to getting started information and examples related to Prisma Optimize.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Grid>\\n  <LinkCard\\n    icon=\"fa-solid fa-arrow-right\"\\n    title=\"Get started\"\\n    desc=\"Start analyzing the prisma queries in your app in 5 minutes.\"\\n    link=\"/optimize/getting-started\"\\n  />\\n  <LinkCard\\n    icon=\"fa-brands fa-github\"\\n    title=\"Examples\"\\n    desc=\"Explore our ready-to-run examples using Optimize.\"\\n    link=\"https://github.com/prisma/prisma-examples?tab=readme-ov-file#prisma-optimize\"\\n  />\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Script in package.json - JSON\nDESCRIPTION: Adds a `seed` command definition within the `prisma` section of the `package.json` file. This tells the Prisma CLI which script to run when `prisma db seed` is executed, specifying the use of `tsx` to run the TypeScript seed file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n//add-start\n\"prisma\": {\n  \"seed\": \"tsx prisma/seed.ts\"\n}\n//add-end\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Selected Fields using Prisma ORM 2\nDESCRIPTION: Demonstrates creating a new user record and selecting specific fields in the result using Prisma ORM 2. The example uses the `create` method with `select` to return only specified fields, showcasing advances over Prisma v1's capabilities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    name: 'Alice',\n  },\n  select: {\n    id: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating with TypeORM: Insert method\nDESCRIPTION: This snippet shows creating a new user with TypeORM's `insert` method, omitting a required field, which can lead to runtime errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getManager().getRepository(User)\nuserRepository.insert({\n  name: 'Alice',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CockroachDB Connection in Prisma Schema\nDESCRIPTION: Example of setting up a connection to a CockroachDB database in the Prisma schema file. It uses a PostgreSQL-like connection URL format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"cockroachdb\"\n  url      = \"postgresql://janedoe:mypassword@localhost:26257/mydb?schema=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packages using bun\nDESCRIPTION: This snippet provides the commands for upgrading the `@prisma/client` and `prisma` packages to version 6 using bun package manager.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nbun add @prisma/client@6\nbun add prisma@6 --dev\n```\n\n----------------------------------------\n\nTITLE: Simplified Prisma Client Query After Migration\nDESCRIPTION: Demonstrates querying a user with native boolean array using Prisma Client\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Introspected Prisma Schema\nDESCRIPTION: Generated Prisma schema after introspection, showing the inferred Post and User models from the MongoDB collections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-node-mongodb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Post {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title  String\n  userId String @db.ObjectId\n}\n\nmodel User {\n  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email String\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Explicit Many-to-Many Relation in Prisma Schema\nDESCRIPTION: This snippet shows an incorrect way to define an explicit many-to-many relation in Prisma schema, where the back relation fields are missing from the Post and Category models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/500-troubleshooting-relations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id             Int              @id @default(autoincrement())\n  title          String\n  categories     Category[]\n}\n\nmodel PostCategories {\n  post       Post     @relation(fields: [postId], references: [id])\n  postId     Int\n  category   Category @relation(fields: [categoryId], references: [id])\n  categoryId Int\n  @@id([postId, categoryId])\n}\n\nmodel Category {\n  id             Int              @id @default(autoincrement())\n  name           String\n  posts          Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Operations Definition\nDESCRIPTION: Sample GraphQL schema defining input types, queries, and mutations for the API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ninput UserUniqueInput {\n  id: String\n  email: String\n}\n\ntype Query {\n  posts(searchString: String): [Post!]!\n  user(userUniqueInput: UserUniqueInput!): User\n  users(where: UserWhereInput, orderBy: Enumerable<UserOrderByInput>, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n}\n\ntype Mutation {\n  createUser(data: UserCreateInput!): User!\n  createDraft(title: String!, content: String, authorId: ID!): Post\n  updateBio(userUniqueInput: UserUniqueInput!, bio: String!): User\n  addPostToCategories(postId: String!, categoryIds: [String!]!): Post\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Command in Netlify UI to Include Prisma Generate\nDESCRIPTION: This section details how to use the Netlify UI to configure the build command to include `prisma generate`. This method allows for Prisma Client to be generated on every deployment by editing the build settings in the Netlify dashboard.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/700-netlify-caching-issue.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1. Go to Site Settings in Netlify for your project.\n2. Navigate to the Build & deploy section.\n3. In Continuous deployment, locate the Build settings box.\n4. Click Edit settings and prepend `prisma generate` to the existing Build command.\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation Operations\nDESCRIPTION: Defines the available mutation operations for the GraphQL API, including creating, publishing, and deleting posts, as well as user operations like signup, updating bio, and adding posts to categories.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createDraft(authorId: ID!, title: String!, content: String!): Post\n  publish(id: ID!): Post\n  deletePost(id: ID!): Post\n  signup(name: String!, email: String!): User!\n  updateBio(userId: String!, bio: String!): User\n  addPostToCategories(postId: String!, categoryIds: [String!]!): Post\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Records with Prisma Client in TypeScript\nDESCRIPTION: Shows how to create a new user record with associated post and profile records using Prisma Client's create method with nested writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  await prisma.user.create({\n    data: {\n      name: 'Alice',\n      email: 'alice@prisma.io',\n      posts: {\n        create: { title: 'Hello World' },\n      },\n      profile: {\n        create: { bio: 'I like turtles' },\n      },\n    },\n  })\n\n  const allUsers = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n  console.dir(allUsers, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in Node.js\nDESCRIPTION: Sets up the Prisma Client instance for database access, defines an async main function for queries, and includes proper connection handling with disconnect on completion or error.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrismaClient } = require('@prisma/client')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing the Cloudflare Worker\nDESCRIPTION: This TypeScript code snippet demonstrates how to implement a Cloudflare Worker that queries the D1 database using the Prisma Client and returns a list of users.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaD1 } from '@prisma/adapter-d1'\n\nexport interface Env {\n  DB: D1Database\n}\n\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    ctx: ExecutionContext\n  ): Promise<Response> {\n    const adapter = new PrismaD1(env.DB)\n    const prisma = new PrismaClient({ adapter })\n\n    const users = await prisma.user.findMany()\n    const result = JSON.stringify(users)\n    return new Response(result)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined TTL and SWR Cache Strategy\nDESCRIPTION: Configures both TTL and SWR parameters for fine-tuned caching behavior. With a TTL of 30 seconds and SWR of 60 seconds, data is served fresh for 30 seconds, then stale for another 30 seconds while the cache refreshes in background.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/300-caching.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait prisma.user.findMany({\n  cacheStrategy: {\n    //add-start\n    ttl: 30,\n    swr: 60,\n    //add-end\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client with TypeScript\nDESCRIPTION: Basic setup for Prisma Client including initialization, connection handling, and error management. Creates a reusable database client instance and defines the main execution structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Fields in Prisma Schema for Relational Databases\nDESCRIPTION: This example shows how to define scalar fields in Prisma models for relational databases. The Comment model has an auto-incrementing integer ID and string fields, while the Tag model uses a string as its primary key.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/10-models.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Comment {\n  id      Int    @id @default(autoincrement())\n  title   String\n  content String\n}\n\nmodel Tag {\n  name String @id\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Creating Post Table in Cloudflare D1\nDESCRIPTION: This SQL script creates a Post table with an auto-incrementing id, title, and authorId field. It also sets up a foreign key constraint referencing the User table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Post\" (\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"title\" TEXT NOT NULL,\n    \"authorId\" INTEGER NOT NULL,\n    CONSTRAINT \"Post_authorId_fkey\" FOREIGN KEY (\"authorId\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Runtime Error Example with TypeORM in TypeScript\nDESCRIPTION: Shows code that compiles successfully with TypeORM but fails at runtime when trying to access a property that wasn't included in the select option, highlighting TypeORM's lack of compile-time type safety.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = publishedPosts[0]\n\n// The TypeScript compiler has no issue with this\nif (post.content.length > 0) {\n  console.log(`This post has some content.`)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Prisma Client\nDESCRIPTION: Illustrates the update syntax differences between Prisma Client v1 and v2. While both versions use 'where' and 'data' objects, v2 changes to a more consistent 'user.update' method structure compared to v1's 'updateUser'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_39\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.updateUser({\n  where: { id: 1 },\n  data: {\n    name: 'James',\n    email: 'james@prisma.io',\n  },\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nawait prisma.user.update({\n  where: { id: 1 },\n  data: {\n    name: 'James',\n    email: 'james@prisma.io',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Merged Prisma Schema After Team Changes\nDESCRIPTION: This shows the merged Prisma schema after incorporating team changes. It includes updates like the optional field `favoriteColor` and a new `Tag` model, reflecting collaborative developments. Review and validate the schema before committing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/020-implementing-schema-changes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  /* ... */\n  favoriteColor   String?\n  bestPacmanScore Int?\n}\n\nmodel Tag {\n  tagName     String   @id\n  tagCategory Category\n  posts       Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Transactions with Sequelize\nDESCRIPTION: Shows how to manually manage transactions in Sequelize. This requires explicitly passing the transaction object to each database operation and handling commits/rollbacks.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nreturn sequelize.$transaction(async (t) => {\n  const user = await User.create(\n    {\n      name: 'Alice',\n      email: 'alice@prisma,io',\n    },\n    {\n      transaction: t,\n    }\n  )\n  const post1 = await Post.create(\n    {\n      title: 'Join us for GraphQL Conf in 2019',\n    },\n    {\n      transaction: t,\n    }\n  )\n  const post2 = await Post.create(\n    {\n      title: 'Subscribe to GraphQL Weekly for GraphQL news',\n    },\n    {\n      transaction: t,\n    }\n  )\n  await user.setPosts([post1, post2])\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio\nDESCRIPTION: This command launches Prisma Studio, a GUI for viewing and editing the data in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/01-quickstart-prismaPostgres.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Viewing Heroku Application Logs\nDESCRIPTION: Example of Heroku application logs showing server startup and status information. The logs demonstrate successful application deployment and server initialization.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n2020-07-07T14:39:07.396544+00:00 app[web.1]:\n2020-07-07T14:39:07.396569+00:00 app[web.1]: > prisma-heroku@1.0.0 start /app\n2020-07-07T14:39:07.396569+00:00 app[web.1]: > node src/index.js\n2020-07-07T14:39:07.396570+00:00 app[web.1]:\n2020-07-07T14:39:07.657505+00:00 app[web.1]: 🚀 Server ready at: http://localhost:12516\n2020-07-07T14:39:07.657526+00:00 app[web.1]: ⭐️ See sample requests: http://pris.ly/e/ts/rest-express#3-using-the-rest-api\n2020-07-07T14:39:07.842546+00:00 heroku[web.1]: State changed from starting to up\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts Containing 'hello' with Prisma Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Prisma Client to filter Post records that contain the word 'hello' in either the title or body fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filteredPosts = await prisma.post.findMany({\n  where: {\n    OR: [{ title: { contains: 'hello' } }, { body: { contains: 'hello' } }],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Avoiding Excessive Use of UI Terminology in Steps\nDESCRIPTION: This snippet provides examples on how to avoid redundancy in UI terminology while documenting steps. It emphasizes clarity by suggesting when to omit specific UI terms.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nFrom the **GitHub Accounts & Organizations** drop-down menu, select a GitHub account or an organization.\n\n<!-- Good -->\n\nFrom **GitHub Accounts & Organizations**, select a GitHub account or an organization.\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Cascade Delete in Prisma Schema\nDESCRIPTION: A Prisma schema defining a one-to-many relationship between User and Post models, with a cascade delete action that ensures when a User is deleted, all related Posts are automatically deleted.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/410-referential-actions/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  authorId Int\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client in Cloudflare Worker with Neon adapter\nDESCRIPTION: This TypeScript code demonstrates how to instantiate PrismaClient with the Neon adapter in a Cloudflare Worker, and perform a database query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaNeon } from '@prisma/adapter-neon'\n\nexport default {\n  async fetch(request, env, ctx) {\n    const adapter = new PrismaNeon({ connectionString: env.DATABASE_URL })\n    const prisma = new PrismaClient({ adapter })\n\n    const users = await prisma.user.findMany()\n    const result = JSON.stringify(users)\n    return new Response(result)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Connected to a User\nDESCRIPTION: This example shows how to create a new Post record and connect it to an existing User record using the Prisma Client API. It demonstrates relationship handling in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await prisma.post.create({\n  data: {\n    title: 'Join us for Prisma Day 2020',\n    slug: 'prisma-day-2020',\n    body: 'A conference on modern application development and databases.',\n    user: {\n      connect: { email: 'hello@prisma.com' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing User Functions with Singleton Pattern\nDESCRIPTION: TypeScript implementation of user creation and update functions using singleton pattern. Functions use a global Prisma Client instance.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/450-testing/100-unit-testing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from './client'\n\ninterface CreateUser {\n  name: string\n  email: string\n  acceptTermsAndConditions: boolean\n}\n\nexport async function createUser(user: CreateUser) {\n  if (user.acceptTermsAndConditions) {\n    return await prisma.user.create({\n      data: user,\n    })\n  } else {\n    return new Error('User must accept terms!')\n  }\n}\n\ninterface UpdateUser {\n  id: number\n  name: string\n  email: string\n}\n\nexport async function updateUsername(user: UpdateUser) {\n  return await prisma.user.update({\n    where: { id: user.id },\n    data: user,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Post - GET Route\nDESCRIPTION: This route handles GET requests to fetch a specific post by its ID. It retrieves the post ID from the request parameters and returns the corresponding post using Prisma Client 2.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/07-upgrading-a-rest-api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(`/post/:id`, async (req, res) => {\\n  const { id } = req.params\\n  const post = await prisma.post.findUnique({\\n    where: { id },\\n  })\\n  res.json(post)\\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SQL tables with ambiguous relations\nDESCRIPTION: SQL code that creates a User table and a Post table with two foreign key relations pointing to the User table - one for the author and one for favoritedBy.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/100-custom-model-and-field-names.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    id SERIAL PRIMARY KEY\n);\nCREATE TABLE \"Post\" (\n    id SERIAL PRIMARY KEY,\n    \"author\" integer NOT NULL,\n    \"favoritedBy\" INTEGER,\n    FOREIGN KEY (\"author\") REFERENCES \"User\"(id),\n    FOREIGN KEY (\"favoritedBy\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger Container for Trace Visualization\nDESCRIPTION: Docker command to run Jaeger locally for visualizing OpenTelemetry traces. This sets up a Jaeger instance with OTLP collector enabled and exposes the necessary ports.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker run --rm --name jaeger -d -e COLLECTOR_OTLP_ENABLED=true -p 16686:16686 -p 4318:4318 jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Finding and Claiming Available Seat in TypeScript\nDESCRIPTION: This code snippet demonstrates how to find the first available seat for a movie and claim it for a user using Prisma Client in TypeScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst movieName = 'Hidden Figures'\n\n// Find first available seat\nconst availableSeat = await prisma.seat.findFirst({\n  where: {\n    movie: {\n      name: movieName,\n    },\n    claimedBy: null,\n  },\n})\n\n// Throw an error if no seats are available\nif (!availableSeat) {\n  throw new Error(`Oh no! ${movieName} is all booked.`)\n}\n\n// Claim the seat\nawait prisma.seat.update({\n  data: {\n    claimedBy: userId,\n  },\n  where: {\n    id: availableSeat.id,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Client: Updating a Record\nDESCRIPTION: This code snippet demonstrates how to update an existing user record using Prisma Client. It uses `prisma.user.update` with the where clause specifying the ID to update, and the data clause specifying the fields to update.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Update\nawait prisma.user.update({\n  where: { id: 1 },\n  data: { name: 'New name' }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL\nDESCRIPTION: This snippet configures the database connection URL in the .env file.  It specifies the database type (PostgreSQL in this example), username, password, host, port, and database name. It's a crucial step for Prisma to connect to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"postgresql://USER:PASSWORD@HOST:PORT/DATABASE\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Compose Services (Terminal)\nDESCRIPTION: This command builds the images defined in the `docker-compose.yml` file (specifically the `server` service) and starts all defined services (`postgres_db` and `server`) in detached mode (`-d`). It explicitly specifies the compose file using `-f`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_23\n\nLANGUAGE: terminal\nCODE:\n```\ndocker compose -f docker-compose.yml up --build -d\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Multiple Composite Types\nDESCRIPTION: Examples of how to filter records that contain arrays of composite types using equals, isEmpty, every, some, and none operations in Prisma's findMany query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.findMany({\n  where: {\n    photos: {\n      equals: [\n        {\n          url: '1.jpg',\n          height: 200,\n          width: 100,\n        },\n        {\n          url: '2.jpg',\n          height: 200,\n          width: 100,\n        },\n      ],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.findMany({\n  where: {\n    photos: [\n      {\n        url: '1.jpg',\n        height: 200,\n        width: 100,\n      },\n      {\n        url: '2.jpg',\n        height: 200,\n        width: 100,\n      },\n    ],\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.findMany({\n  where: {\n    photos: {\n      isEmpty: true,\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.findFirst({\n  where: {\n    photos: {\n      some: {\n        url: '2.jpg',\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = prisma.product.findFirst({\n  where: {\n    photos: {\n      none: {\n        url: '2.jpg',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations with Prisma ORM Using Fluent API\nDESCRIPTION: Shows an alternative way to fetch related records in Prisma using the fluent API. Unlike the include approach, this only returns the related posts array rather than the user object with posts included.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.user\n  .findUnique({\n    where: {\n      id: 2,\n    },\n  })\n  .post()\n```\n\n----------------------------------------\n\nTITLE: SQL Migration without Default Constraint for Prisma 1\nDESCRIPTION: Demonstrates the SQL migration generated by Prisma 1 from its datamodel lacking a `DEFAULT` constraint in the SQL `CREATE TABLE` statement. This results in the absence of recognizability by Prisma ORM 2.x introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  published BOOLEAN NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Adding UserUniqueInput to Nexus Schema Types\nDESCRIPTION: Configuration update to include the new UserUniqueInput type in the makeSchema function, ensuring it's properly registered in the Nexus schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const schema = makeSchema({\n  types: [Query, User, Post, Profile, Category, UserUniqueInput],\n  plugins: [nexusSchemaPrisma()],\n  outputs: {\n    schema: __dirname + '/../schema.graphql',\n    typegen: __dirname + '/generated/nexus.ts',\n  },\n  typegenAutoConfig: {\n    sources: [\n      {\n        source: '@prisma/client',\n        alias: 'prisma',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: MongoDB View Creation Command\nDESCRIPTION: MongoDB command to create a UserInfo view using aggregation pipeline\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/40-views.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndb.createView('UserInfo', 'User', [\n  {\n    $lookup: {\n      from: 'Profile',\n      localField: '_id',\n      foreignField: 'userId',\n      as: 'ProfileData',\n    },\n  },\n  {\n    $project: {\n      _id: 1,\n      email: 1,\n      name: 1,\n      bio: '$ProfileData.bio',\n    },\n  },\n  { $unwind: '$bio' },\n])\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Schema After Introspection of Link Table Relation\nDESCRIPTION: The resulting Prisma schema after introspecting a database with a link table relation from Prisma 1, showing how it's recognized as many-to-many instead of one-to-many.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_21\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id\n  Post Post[] @relation(references: [id])\n}\n\nmodel Post {\n  id   String @id\n  User User[] @relation(references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX Layout Components\nDESCRIPTION: JSX components defining the page structure including header, link cards, and database support list\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IconTitle heading=\"h1\" icon=\"fa-solid fa-bolt\" iconColor=\"#16A394\" >Prisma Accelerate</IconTitle>\n\n<Grid>\n  <LinkCard\n    icon=\"fa-solid fa-arrow-right\"\n    title=\"Get started\"\n    desc=\"Set up connection pooling and global caching for your app in 5 minutes.\"\n    link=\"/accelerate/getting-started\"\n  />\n  <LinkCard\n    icon=\"fa-brands fa-github\"\n    title=\"Examples\"\n    desc=\"Explore our ready-to-run examples using Accelerate.\"\n    link=\"https://github.com/prisma/prisma-examples?tab=readme-ov-file#prisma-accelerate\"\n  />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma configuration setup using TypeScript types\nDESCRIPTION: This snippet shows the minimal setup required to enable Prisma Config using TypeScript types and the satisfies operator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PrismaConfig } from 'prisma'\n\nexport default {\n  earlyAccess: true\n} satisfies PrismaConfig\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Wildcard Search Query\nDESCRIPTION: This snippet shows how to include a wildcard in the PostgreSQL full-text search term using `to_tsvector` and `to_tsquery`. The wildcard `:*` is appended to the search term `cat`. The SQL query remains the same, but the term passed to the query changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"Blog\" WHERE to_tsvector('english', \"Blog\".\"content\") @@ to_tsquery('english', ${term});\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Relations API to Retrieve User's Posts with Prisma Client in JavaScript\nDESCRIPTION: This example demonstrates how to use Prisma Client's fluent relations API to retrieve Post records of a User by traversing the relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await prisma.comment\n  .findUnique({\n    where: { id: '60ff4e9500acc65700ebf470' },\n  })\n  .post()\n  .user()\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Array Parameter Query Example\nDESCRIPTION: SQL query example for PostgreSQL showing how to use the ANY operator with an array parameter to filter users by multiple IDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, email\nFROM users\nWHERE id = ANY($1)\n```\n\n----------------------------------------\n\nTITLE: Configuring package for ARM64 architecture in Serverless Framework\nDESCRIPTION: Updates the serverless.yml configuration to include the ARM64 version of the Prisma ORM engine file in the package, ensuring compatibility with ARM64 Lambda functions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  patterns:\n    - '!node_modules/.prisma/client/libquery_engine-*'\n    //highlight-next-line\n    - 'node_modules/.prisma/client/libquery_engine-linux-arm64-*'\n    - '!node_modules/prisma/libquery_engine-*'\n    - '!node_modules/@prisma/engines/**'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Prisma Schema Configuration for Existing Database\nDESCRIPTION: Initial Prisma schema configuration that defines the PostgreSQL datasource and the Prisma Client generator for an existing database project. This is the first step when integrating Prisma with an existing database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/300-prisma-in-your-stack/04-is-prisma-an-orm.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://janedoe:janedoe@localhost:5432/hello-prisma\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User with Profile Including ID - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates creating a new user with a nested profile, where both the User and Profile models utilize IDs that are manually provided.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst userWithProfile = await prisma.user.create({\n  data: {\n    id: 3,\n    email: \"bob@prisma.io\",\n    name: \"Bob Prismo\",\n    profile: {\n      create: {\n        bio: \"Hello, I'm Bob Prismo and I love apples, blue nail varnish, and the sound of buzzing mosquitoes.\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SP-GiST Index in SQL\nDESCRIPTION: This snippet shows the SQL commands that result from the Prisma schema, creating a table `Example` with a `TEXT` column named `value`, and creating an `SPGIST` index on this column. The index is named `Example_value_idx`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Example\" (\n  id INT PRIMARY KEY,\n  value TEXT NOT NULL\n);\n\nCREATE INDEX \"Example_value_idx\" ON \"Example\" USING SPGIST (value);\n```\n\n----------------------------------------\n\nTITLE: Counting Records with Relation Filter in Prisma Client\nDESCRIPTION: This query counts posts with a specific authorId, demonstrating how to use a relation field in the where clause for counting. This is useful for counting records belonging to a specific related entity.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst postCount = await prisma.post.count({\n  where: {\n    authorId: 29,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client and Basic Query Structure in TypeScript\nDESCRIPTION: Sets up the Prisma Client, defines a main function for database operations, and includes error handling and connection management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... you will write your Prisma Client queries here\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Filtering with TypeORM in TypeScript\nDESCRIPTION: Demonstrates filtering posts using TypeORM's where option with operators like ILike and MoreThan. TypeORM lacks type safety for these operators, allowing incorrect types to be used.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst postRepository = getManager().getRepository(Post)\nconst publishedPosts: Post[] = await postRepository.find({\n  where: {\n    published: true,\n    title: ILike('Hello World'),\n    views: MoreThan(0),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL with PostGIS in Docker Compose\nDESCRIPTION: Docker Compose configuration for setting up a PostgreSQL database with PostGIS extension installed, exposing port 5432 and configuring environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\nservices:\n  pgDB:\n    image: postgis/postgis:13-3.1-alpine\n    restart: always\n    ports:\n      - '5432:5432'\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: geoexample\nvolumes:\n  db_data:\n```\n\n----------------------------------------\n\nTITLE: Mongoose vs Prisma Client Query Comparison\nDESCRIPTION: Demonstrate equivalent query operations between Mongoose and Prisma Client for common database operations\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/050-migrate-from-mongoose.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Mongoose Queries\nconst user = await User.findById(id);\nconst user = await User.create({\n  email: 'alice@prisma.io',\n  name: 'Alice'\n});\nawait User.findByIdAndUpdate(id, { name: 'New name' });\nawait User.findByIdAndDelete(id);\n\n// Prisma Client Queries\nconst user = await prisma.user.findUnique({ where: { id } });\nconst user = await prisma.user.create({\n  data: {\n    email: 'alice@prisma.io',\n    name: 'Alice'\n  }\n});\nawait prisma.user.update({\n  where: { id },\n  data: { name: 'New name' }\n});\nawait prisma.user.delete({\n  where: { id }\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Order of Tracing Setup and Dependency Import\nDESCRIPTION: TypeScript code snippet showing the correct order of setting up tracing and importing instrumented dependencies to ensure traces appear correctly.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerTracing } from './tracing'\n\nregisterTracing({\n  name: 'tracing-example',\n  version: '0.0.1',\n})\n\n// You must import any dependencies after you register tracing.\nimport { PrismaClient } from '@prisma/client'\nimport async from 'express-async-handler'\nimport express from 'express'\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Related Categories in Prisma (TypeScript)\nDESCRIPTION: Retrieves all Post records along with their related Category records using Prisma's findMany method with the include option. This demonstrates how to fetch data across a many-to-many relationship.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst getPostsAndCategories = await prisma.post.findMany({\n  include: {\n    categories: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for `@createdAt` in Prisma 1\nDESCRIPTION: Demonstrates SQL migration output for a created at field managed by `@createdAt`, lacking default timestamp behavior in the database schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Using 'select' for UI Options\nDESCRIPTION: This example demonstrates the correct usage of \"select\" when guiding users to choose a UI option from a list or menu. This is for specific user interactions with UI elements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n<!-- Good -->\n\nFrom **Payment method**, select **Wire transfer**.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for Cinema Booking System\nDESCRIPTION: This snippet defines the Prisma schema for a cinema booking system, including models for Seat and Movie with their relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_31\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Seat {\n  id        Int   @id @default(autoincrement())\n  userId    Int?\n  claimedBy User? @relation(fields: [userId], references: [id])\n  movieId   Int\n  movie     Movie @relation(fields: [movieId], references: [id])\n}\n\nmodel Movie {\n  id    Int    @id     @default(autoincrement())\n  name  String @unique\n  seats Seat[]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Relations with Prisma ORM in TypeScript\nDESCRIPTION: Demonstrates loading related entities (author relation) using Prisma's include option. Prisma provides full type safety and autocompletion for relation names, preventing typos at compile time.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishedPosts = await prisma.post.findMany({\n  where: { published: true },\n  include: { author: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Author Information - Drizzle - TypeScript\nDESCRIPTION: This snippet retrieves a list of posts from the Drizzle database, incorporating the related author information. It uses the 'findMany' method with a 'with' parameter to include the author data in the query results.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await db.query.posts.findMany({\n  with: {\n    author: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating the Production Environment File (Terminal)\nDESCRIPTION: This command creates an empty `.env.prod` file in the current project directory. This file will store environment-specific variables, such as the database connection URL, required by the application running within the Docker container.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\ntouch .env.prod\n```\n\n----------------------------------------\n\nTITLE: Define Prisma User model\nDESCRIPTION: This Prisma schema defines a simple `User` model with an auto-incrementing `id`, a unique `email`, and an optional `name`. This model will be used as an example in subsequent code snippets.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/485-deploy-to-vercel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting or Creating Related User Record\nDESCRIPTION: Creates a new post and either connects to an existing user or creates a new one if they don't exist using connectOrCreate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.post.create({\n  data: {\n    title: 'How to make croissants',\n    author: {\n      connectOrCreate: {\n        where: {\n          email: 'viola@prisma.io',\n        },\n        create: {\n          email: 'viola@prisma.io',\n          name: 'Viola',\n        },\n      },\n    },\n  },\n  include: {\n    author: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Instantiate Prisma Client\nDESCRIPTION: Imports the PrismaClient from `@prisma/client` and instantiates it as `prisma`. This instance is then exported for use in other parts of the application, providing a single point of access to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { PrismaClient } from '@prisma/client'\n\nexport const prisma = new PrismaClient()\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Query with Both Select and Include at Same Level\nDESCRIPTION: This example demonstrates an invalid query where both select and include are used at the same level, which is not allowed in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// The following query returns an exception\nconst user = await prisma.user.findFirst({\n  select: { // This won't work!\n    email:  true\n  }\n  include: { // This won't work!\n    posts: {\n      select: {\n        title: true\n      }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema\nDESCRIPTION: This code defines a basic Prisma schema file, including datasource and generator information. It specifies MySQL as the provider and utilizes environment variables to retrieve the database connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User-Email Schema in Prisma\nDESCRIPTION: Shows a Prisma schema defining a one-to-many relationship between User and Email models, where a User can have many received emails.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nmodel User {\n  id    Int       @id @default(autoincrement())\n  email           String @unique\n  receivedEmails  Email[] // Many emails\n}\n\nmodel Email {\n  id      Int     @id @default(autoincrement())\n  user    User    @relation(fields: [userId], references: [id])\n  userId  Int\n  subject String\n  body    String\n  unread  Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Resolver Implementation for addPostToCategories with prisma-binding\nDESCRIPTION: JavaScript implementation of the resolver for addPostToCategories using prisma-binding. It connects a post to multiple categories using their IDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    addPostToCategories: (_, args, context, info) => {\n      const ids = args.categoryIds.map((id) => ({ id }))\n      return context.prisma.mutation.updatePost(\n        {\n          data: {\n            categories: {\n              connect: ids,\n            },\n          },\n          where: {\n            id: args.postId,\n          },\n        },\n        info\n      )\n    },\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Accelerate Extension\nDESCRIPTION: Installs the `@prisma/extension-accelerate` package, which is required to use Prisma Postgres on edge runtimes. This extension enhances edge compatibility, allowing connections to various databases from edge function providers.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm i @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Referencing a Prisma Client in Extension\nDESCRIPTION: Describes referring to the Prisma Client instance within an extension, which is necessary for making use of client-level methods. Highlights limitations when using this method within transactions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/140-shared-extensions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPrisma.defineExtension((client) => {\n  // The Prisma Client instance that the extension user applies the extension to\n  return client.$extends({\n    name: 'prisma-extension-<extension-name>',\n  })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default Prisma.defineExtension((client) => {\n  return client.$extends({\n    name: 'prisma-extension-find-or-create',\n    query: {\n      $allModels: {\n        async findOrCreate({ args, query, operation }) {\n          return (await client.$transaction([query(args)]))[0]\n        },\n      },\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Setup with SST Config\nDESCRIPTION: TypeScript configuration for setting up PrismaClient with SST environment variables and global instance management.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/201-serverless/400-deploy-to-aws-lambda.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { Config } from 'sst/node/config'\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    datasourceUrl: Config.DATABASE_URL,\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport default prisma\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Tags using Implicit Relations\nDESCRIPTION: TypeScript code showing how to query posts and include their related tags using Prisma Client's findMany method with the include option.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.post.findMany({\n  include: { tags: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Schema Prototyping with Prisma DB Push\nDESCRIPTION: The prisma db push command syncs Prisma schema with database schema without creating migrations. Useful for local development and prototyping, but requires careful consideration due to potential data loss risks.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/010-mental-model.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprisma db push\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of Template Variables for Table Names\nDESCRIPTION: Demonstrates an incorrect attempt to use a template variable for a table name, which is not supported by $queryRaw.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst myTable = \"user\";\nawait prisma.$queryRaw`SELECT * FROM ${myTable};`;\n```\n\n----------------------------------------\n\nTITLE: Connecting Profile to Existing User - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to connect an existing user based on their ID when creating a profile. It demonstrates the usage of the Prisma Client for relational writes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst profileWithUser = await prisma.profile.create({\n  data: {\n    bio: \"Hello, I'm Bob and I like nothing at all. Just nothing.\",\n    author: {\n      connect: {\n        id: 22,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Different Environment Files Based on NODE_ENV\nDESCRIPTION: Shows how to conditionally load different .env files based on the NODE_ENV environment variable for development and production environments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from 'dotenv'\n\nconst envFile = process.env.NODE_ENV === 'development' ? '.env.development' : '.env.production'\nconfig({ path: envFile })\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema for Table without Default Value\nDESCRIPTION: This Prisma schema snippet demonstrates how a table without a default value constraint is represented after introspection. It shows the model definition without default values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel cats {\n  id   Int     @id @default(autoincrement())\n  name String?\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized `$queryRawUnsafe` Query in TypeScript\nDESCRIPTION: This snippet shows how to execute a parameterized raw SQL query using the `$queryRawUnsafe()` method. It queries users from the database whose email matches a specific value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nprisma.$queryRawUnsafe(\"SELECT * FROM users WHERE email = $1\", \"emelie@prisma.io\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Probability Sampling for OpenTelemetry Tracing\nDESCRIPTION: TypeScript code snippet demonstrating how to implement probability sampling to reduce the number of spans sent to the collector, thus reducing the performance impact of tracing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions'\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node'\nimport { TraceIdRatioBasedSampler } from '@opentelemetry/core'\nimport { Resource } from '@opentelemetry/resources'\n\nconst provider = new NodeTracerProvider({\n  sampler: new TraceIdRatioBasedSampler(0.1),\n  resource: new Resource({\n    // we can define some metadata about the trace resource\n    [SemanticResourceAttributes.SERVICE_NAME]: 'test-tracing-service',\n    [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema After Introspection\nDESCRIPTION: Generated Prisma schema showing the basic model definitions without relationships\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime\n  title     String   @db.VarChar(255)\n  content   String?\n  published Boolean  @default(false)\n  authorId  Int\n\n  @@index([authorId])\n}\n\nmodel Profile {\n  id     Int     @id @default(autoincrement())\n  bio    String?\n  userId Int     @unique\n\n  @@index([userId])\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prisma CLI Command Scripts to Turbo.json\nDESCRIPTION: Adds database-related command scripts to turbo.json for cache and persistence configurations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"$schema\": \"https://turbo.build/schema.json\",\n\"ui\": \"tui\",\n\"tasks\": {\n  \"build\": {\n    \"dependsOn\": [\"^build\"],\n    \"inputs\": [\"$TURBO_DEFAULT$\", \".env*\"],\n    \"outputs\": [\".next/**\", \"!.next/cache/**\"]\n  },\n  \"lint\": {\n    \"dependsOn\": [\"^lint\"]\n  },\n  \"check-types\": {\n    \"dependsOn\": [\"^check-types\"]\n  },\n  \"dev\": {\n    \"cache\": false,\n    \"persistent\": true\n  },\n  \"db:generate\": {\n    \"cache\": false\n  },\n  \"db:migrate\": {\n    \"cache\": false,\n    \"persistent\": true\n  },\n  \"db:deploy\": {\n    \"cache\": false\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema\nDESCRIPTION: The Prisma schema generated after introspecting the CockroachDB database. It includes models for Post, Profile, and User with their respective fields and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-node-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        BigInt   @id @default(autoincrement())\n  title     String   @unique @db.String(255)\n  createdAt DateTime @default(now()) @db.Timestamp(6)\n  content   String?\n  published Boolean  @default(false)\n  authorId  BigInt\n  User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel Profile {\n  id     BigInt  @id @default(autoincrement())\n  bio    String?\n  userId BigInt  @unique\n  User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n}\n\nmodel User {\n  id      BigInt   @id @default(autoincrement())\n  name    String?  @db.String(255)\n  email   String   @unique @db.String(255)\n  Post    Post[]\n  Profile Profile?\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Prisma Accelerate Caching Performance\nDESCRIPTION: This TypeScript code demonstrates how to evaluate Prisma Accelerate's edge caching performance. It modifies the previous example to include caching strategy and performs a loop of database queries to measure response times with caching enabled.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/550-evaluating.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\nfunction calculateStatistics(numbers: number[]): {\n  average: number\n  p50: number\n  p75: number\n  p99: number\n} {\n  if (numbers.length === 0) {\n    throw new Error('The input array is empty.')\n  }\n\n  // Sort the array in ascending order\n  numbers.sort((a, b) => a - b)\n\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const count = numbers.length\n\n  const average = sum / count\n  const p50 = getPercentile(numbers, 50)\n  const p75 = getPercentile(numbers, 75)\n  const p99 = getPercentile(numbers, 99)\n\n  return { average, p50, p75, p99 }\n}\n\nfunction getPercentile(numbers: number[], percentile: number): number {\n  if (percentile <= 0 || percentile >= 100) {\n    throw new Error('Percentile must be between 0 and 100.')\n  }\n\n  const index = (percentile / 100) * (numbers.length - 1)\n  if (Number.isInteger(index)) {\n    // If the index is an integer, return the corresponding value\n    return numbers[index]\n  } else {\n    // If the index is not an integer, interpolate between two adjacent values\n    const lowerIndex = Math.floor(index)\n    const upperIndex = Math.ceil(index)\n    const lowerValue = numbers[lowerIndex]\n    const upperValue = numbers[upperIndex]\n    const interpolationFactor = index - lowerIndex\n    return lowerValue + (upperValue - lowerValue) * interpolationFactor\n  }\n}\n\nasync function main() {\n  const timings = []\n\n  // fire a query before going to the loop\n  await prisma.notes.findMany({\n    take: 20,\n    cacheStrategy: {\n      ttl: 30,\n    },\n  })\n\n  // we recommend evaluating Prisma Accelerate with a large loop\n  const LOOP_LENGTH = 10000\n\n  for (let i = 0; i < LOOP_LENGTH; i++) {\n    const start = Date.now()\n    await prisma.notes.findMany({\n      take: 20,\n      cacheStrategy: {\n        ttl: 30,\n      },\n    })\n\n    timings.push(Date.now() - start)\n  }\n\n  const statistics = calculateStatistics(timings)\n  console.log('Average:', statistics.average)\n  console.log('P50:', statistics.p50)\n  console.log('P75:', statistics.p75)\n  console.log('P99:', statistics.p99)\n}\n\nmain()\n  .then(async () => {\n    await prisma.$disconnect()\n  })\n  .catch((e) => {\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma in the project\nDESCRIPTION: Command to initialize Prisma in the project, generating the initial prisma directory and schema file. The --db flag sets up a Prisma Postgres database and the --output flag specifies where to generate Prisma client files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --db --output ../src/generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Type with Unique Constraint in Prisma Schema\nDESCRIPTION: This Prisma schema defines a 'MailBox' model with a composite type 'Address' that has a unique constraint on the 'email' field. It demonstrates how to structure composite types with unique constraints in Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_21\n\nLANGUAGE: prisma\nCODE:\n```\ntype Address {\n  email String\n}\n\nmodel MailBox {\n  name      String\n  addresses Address[]\n\n  @@unique([addresses.email])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client with Neon Serverless Driver Adapter\nDESCRIPTION: Sets up Prisma Client to use the Neon serverless driver adapter, allowing for low-latency database queries over HTTP or WebSockets.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/890-neon.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaNeon } from '@prisma/adapter-neon'\nimport dotenv from 'dotenv'\n\ndotenv.config()\nconst connectionString = `${process.env.DATABASE_URL}`\n\nconst adapter = new PrismaNeon({ connectionString })\nconst prisma = new PrismaClient({ adapter })\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Data Migration from Extra Table to Native Array\nDESCRIPTION: SQL command to migrate data from the User_coinflips table to a native PostgreSQL boolean array, using array_agg and ordered aggregation\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE \"User\"\n  SET coinflips = t.flips\nFROM (\n  SELECT \"nodeId\", array_agg(VALUE ORDER BY position) AS flips\n  FROM \"User_coinflips\"\n  GROUP BY \"nodeId\"\n) t\nwhere t.\"nodeId\" = \"User\".\"id\";\n```\n\n----------------------------------------\n\nTITLE: One-to-One Self Relation Model Definition\nDESCRIPTION: Defines a User model with a one-to-one self-relation using successor and predecessor fields. The relation requires @relation attribute and unique foreign key.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int     @id @default(autoincrement())\n  name        String?\n  successorId Int?    @unique\n  successor   User?   @relation(\"BlogOwnerHistory\", fields: [successorId], references: [id])\n  predecessor User?   @relation(\"BlogOwnerHistory\")\n}\n```\n\n----------------------------------------\n\nTITLE: Resolver Implementation for createDraft with prisma-binding\nDESCRIPTION: JavaScript implementation of the resolver for the createDraft mutation using prisma-binding. It connects a post to an author using the provided authorId.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Mutation: {\n    createDraft: (_, args, context, info) => {\n      return context.prisma.mutation.createPost(\n        {\n          data: {\n            title: args.title,\n            content: args.content,\n            author: {\n              connect: {\n                id: args.authorId,\n              },\n            },\n          },\n        },\n        info\n      )\n    },\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Caching with Accelerate\nDESCRIPTION: Example of a Prisma query that uses the cacheStrategy property to enable caching. This query caches results for 60 seconds with a stale-while-revalidate strategy of 60 seconds.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findMany({\n  where: {\n    email: {\n      contains: 'alice@prisma.io',\n    },\n  },\n  cacheStrategy: { swr: 60, ttl: 60 },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Column for One-to-Many Relation Workaround\nDESCRIPTION: SQL commands to create a proper foreign key column for implementing a one-to-many relationship to replace the link table approach from Prisma 1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"Post\"  ADD COLUMN \"authorId\" VARCHAR(25);\nALTER TABLE \"Post\"\nADD CONSTRAINT fk_author\nFOREIGN KEY (\"authorId\")\nREFERENCES \"User\"(\"id\");\n```\n\n----------------------------------------\n\nTITLE: PGLoader Configuration for MySQL to Postgres Migration\nDESCRIPTION: Configuration file for pgloader that defines the source MySQL database and target Postgres database connection details along with migration settings.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/115-import-from-existing-database-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLOAD DATABASE\n    FROM mysql://username:password@host:PORT/database_name\n    INTO postgresql://user:password@127.0.0.1:5433/postgres\n\nWITH quote identifiers,    -- preserve table/column name case by quoting them\n     include drop,\n     create tables,\n     create indexes,\n     reset sequences\n\nALTER SCHEMA 'database_name' RENAME TO 'public';\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Prisma Postgres\nDESCRIPTION: Example of the .env file content with a Prisma Postgres connection string. This database URL is automatically generated when using the --db flag with Prisma initialization.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=...\"\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for PostgreSQL Database\nDESCRIPTION: This snippet shows a basic Prisma schema file with a database connection, Prisma Client generator, and a User model. It defines the structure for a PostgreSQL database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  url      = env(\"DATABASE_URL\")\n  provider = \"postgresql\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Relation Nullability in Prisma Schema\nDESCRIPTION: Example Prisma schema showing the relationship between User, Address, and Post models to demonstrate the nullable relation issue fixed in Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id\n\n  addressId Int     @unique\n  address   Address @relation(fields: [addressId], references: [id])\n\n  post Post[]\n}\n\nmodel Address {\n  id Int @id\n\n  user User?\n}\n\nmodel Post {\n  id Int @id\n\n  userId Int\n  user   User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Example Code and Setting Up Project Directory\nDESCRIPTION: Commands to create a directory, download the example code from GitHub repository, and extract the Heroku deployment example from prisma-examples.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir prisma-heroku\ncd prisma-heroku\ncurl https://codeload.github.com/prisma/prisma-examples/tar.gz/latest | tar -xz --strip=3 prisma-examples-latest/deployment-platforms/heroku\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema with SQLite\nDESCRIPTION: Define initial Prisma schema with User and Post models using SQLite as the database provider\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Avoiding Possessive 's'\nDESCRIPTION: This example illustrates the style guide's recommendation to avoid possessive 's' in documentation to improve clarity and internationalization. The \"Good\" example rephrases the sentence to avoid the possessive form.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n<!-- Good -->\n\nChange the database connection string of an environment\n\n<!-- Bad -->\n\nChange the environment's database connection string\n```\n```\n\n----------------------------------------\n\nTITLE: Updating a Post Record with Prisma Client\nDESCRIPTION: Demonstrates how to update an existing Post record in the database by changing its published status from false to true using Prisma Client's update method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const post = await prisma.post.update({\n    where: { id: 1 },\n    data: { published: true },\n  })\n  console.log(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with @db.VarChar(n) in Prisma\nDESCRIPTION: This code snippet demonstrates how to define an 'Item' model in Prisma with a name field using the @db.VarChar(n) type. It highlights the potential performance issues and restrictions associated with using this type in PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/700-avoid-varchar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Item {\n  // ...\n  name String @db.VarChar(1)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Prisma ORM and TypeORM\nDESCRIPTION: Comparison of how to filter records using Prisma ORM's intuitive operators versus TypeORM's SQL-like approach. The examples show exact match filtering for a post title.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await prisma.post.findMany({\n  where: {\n    title: 'Hello World',\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await postRepository.find({\n  where: {\n    title: ILike('Hello World'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Resolver Implementation\nDESCRIPTION: Initial implementation of a filterPosts resolver without type hints, showing the base functionality for filtering posts based on a search string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/100-autocompletion-in-graphql-resolvers-with-js.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilterPosts: (parent, args, ctx) => {\n  return ctx.prisma.post.findMany({\n    where: {\n      OR: [\n        { title: { contains: args.searchString } },\n        { content: { contains: args.searchString } },\n      ],\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: SQL One-to-Many Table Creation\nDESCRIPTION: SQL commands to create tables representing a one-to-many relation between User and Post.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/200-one-to-many-relations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    id SERIAL PRIMARY KEY\n);\nCREATE TABLE \"Post\" (\n    id SERIAL PRIMARY KEY,\n    \"authorId\" integer NOT NULL,\n    FOREIGN KEY (\"authorId\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Prisma Client\nDESCRIPTION: Demonstrates creating a new user record with Prisma Client in both v1 and ORM 2. In ORM 2, the `create` method accepts a `data` property to hold the new object details. The output is the created user object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.createUser({\n  name: 'Alice',\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    name: 'Alice',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Server with Active Directory User\nDESCRIPTION: This example shows how to connect to Microsoft SQL Server using integrated security with a specific Active Directory user. It includes the connection string format with username and password.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nsqlserver://localhost:1433;database=sample;integratedSecurity=true;username=prisma;password=aBcD1234;trustServerCertificate=true;\n```\n\n----------------------------------------\n\nTITLE: Basic Queries in Prisma ORM\nDESCRIPTION: Examples of basic database queries in Prisma ORM showing how to find all users, find a single user, and find a unique user by email.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// find all users\nconst allUsers = await prisma.user.findMany()\n\n// find a single user\nconst user = await prisma.user.findFirst({\n  where: { id: 27 },\n})\n\n// find a unique user\nconst user = await prisma.user.findUnique({\n  where: { email: 'nilu@prisma.io' },\n})\n```\n\n----------------------------------------\n\nTITLE: Explicit Many-to-Many Self Relation\nDESCRIPTION: Defines an explicit many-to-many self-relation using an intermediate Follows model to store additional relationship data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/400-self-relations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id         Int       @id @default(autoincrement())\n  name       String?\n  followedBy Follows[] @relation(\"followedBy\")\n  following  Follows[] @relation(\"following\")\n}\n\nmodel Follows {\n  followedBy   User @relation(\"followedBy\", fields: [followedById], references: [id])\n  followedById Int\n  following    User @relation(\"following\", fields: [followingId], references: [id])\n  followingId  Int\n\n  @@id([followingId, followedById])\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Selected Fields of Single Objects\nDESCRIPTION: Shows how to retrieve specific fields (projections) from a record in both ORMs. Prisma uses the select option while Mongoose uses the select method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/03-prisma-and-mongoose.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.findUnique({\n  where: {\n    id: 1,\n  },\n  select: {\n    name: true,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findById(1).select(['name'])\n```\n\n----------------------------------------\n\nTITLE: Updated Post Record Result\nDESCRIPTION: Shows the result of the update operation, displaying the Post record with its published status changed to true. This represents the state of the record after the update operation is completed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-node-postgresql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 1,\n  title: 'Hello World',\n  content: null,\n  published: true,\n  authorId: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Read Operations Against Primary DB in Prisma\nDESCRIPTION: This snippet showcases the use of the `$primary()` method to explicitly force a read operation to execute against the primary database, overriding the default behavior of using a read replica.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/200-read-replicas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"const posts = await prisma.$primary().post.findMany()\"\n```\n\n----------------------------------------\n\nTITLE: Handling OR Operators in Prisma ORM 5\nDESCRIPTION: This snippet shows changes in the use of `OR` operators with Prisma ORM 5. The operators now require array values for evaluating conditions, enhancing the flexibility of OR-based filtering queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/101-jsonprotocol-changes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findMany({\n  where: {\n    OR: { email: 'foo@example.com' },\n  },\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findMany({\n  where: {\n    OR: [{ email: 'foo@example.com' }],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with Prisma Client\nDESCRIPTION: This snippet shows how to create a new User record and a related Post record in a single query using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Run inside `async` function\nconst user = await prisma.user.create({\n  data: {\n    name: 'Alice',\n    email: 'alice@prisma.io',\n    posts: {\n      create: { title: 'Join us for Prisma Day 2020' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project with Prisma CLI\nDESCRIPTION: Commands to initialize a Node.js project with npm init and install the Prisma CLI as a development dependency, which is required for database schema management and client generation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb-node-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Prisma Model: User\nDESCRIPTION: This is the Prisma schema definition for the `User` model, where `email` is a required field.  Attempting to create a user without specifying `email` results in a compile-time error.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_27\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Using MDX Admonitions in Prisma Guides\nDESCRIPTION: Demonstrates how to use Docusaurus admonitions (specifically 'note') within MDX files to highlight important information, tips, or warnings in Prisma documentation guides, linking to the relevant Docusaurus documentation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n:::note\nImportant information goes here\n:::\n```\n\n----------------------------------------\n\nTITLE: Setting Relation Mode in Prisma Schema for MySQL\nDESCRIPTION: This code snippet demonstrates how to configure the datasource block for a MySQL database, including setting the relation mode to 'prisma' for emulating relations in Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Plan Limits Table in Markdown\nDESCRIPTION: Markdown table displaying the project, environment, and database limits for different subscription tiers.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/10-about.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                  | **Starter** | **Pro**     | **Business** | **Enterprise** |\n| ---------------- | :---------- | ----------- | ------------ | -------------- |\n| **Projects**     | 5           | 60          | 180          | Custom         |\n| **Environments** | 2 / project | 6 / project | 12 / project | Custom         |\n| **Databases**    | 10          | 60          | 180          | Custom         |\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query with Prisma\nDESCRIPTION: This code snippet demonstrates how to execute a raw SQL query using Prisma\\'s $queryRaw method. The query retrieves the current time using the CURRENT_TIME function. This approach is discouraged for tasks requiring precise event tracking due to its lack of date information. No external dependencies are required other than Prisma. Expected output is the current time in the format HH:MM:SS.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/1000-current-time.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nprisma.$queryRaw`SELECT CURRENT_TIME;`\n```\n\n----------------------------------------\n\nTITLE: Executing a Repeated Query in Prisma\nDESCRIPTION: This snippet demonstrates how to execute a 'findMany' query on the 'Post' model repeatedly to fetch published posts. It highlights the potential performance issues associated with repeated executions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/400-recommendations/400-repeated-query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.post.findMany({\n  where: {\n    published: true\n  },\n  take: 20\n})\n```\n\n----------------------------------------\n\nTITLE: Generating UUID values as MongoDB IDs using Prisma\nDESCRIPTION: Sets up a User model for MongoDB with an ID field that generates UUID v4 values and maps to MongoDB's _id field. Does not generate a valid ObjectId.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_77\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(uuid()) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Run Node.js Development Server (Terminal)\nDESCRIPTION: Starts the Node.js application locally using the `dev` script defined in `package.json`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Comparing Database State to Migrations with Prisma Migrate Diff\nDESCRIPTION: This example shows how to compare the state of a database with a URL to the schema defined by migrations in a directory, outputting the differences to a SQL script.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_30\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate diff \\\n --from-url \"$DATABASE_URL\" \\\n --to-migrations ./prisma/migrations \\\n --shadow-database-url $SHADOW_DATABASE_URL \\\n --script > script.sql\n```\n\n----------------------------------------\n\nTITLE: Adding Default Constraint to SQL Table\nDESCRIPTION: Shows how to manually alter a SQL table to add a `DEFAULT` constraint for a boolean column, ensuring compatibility with future introspection by Prisma ORM 2.x.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"Post\"\n\tALTER COLUMN published SET DEFAULT false;\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Commands with Prisma Migrate\nDESCRIPTION: Example commands for handling database migrations and schema changes in Prisma. These commands include prisma migrate dev for development environments and prisma migrate deploy for production deployments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/010-mental-model.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprisma migrate dev\nprisma migrate deploy\nprisma migrate diff\nprisma db execute\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Single Composite Type\nDESCRIPTION: Examples of how to filter records by a single composite type using is, equals, isNot, and isSet operations in Prisma's findMany query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.findMany({\n  where: {\n    shippingAddress: {\n      is: {\n        street: '555 Candy Cane Lane',\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.findMany({\n  where: {\n    shippingAddress: {\n      equals: {\n        street: '555 Candy Cane Lane',\n        city: 'Wonderland',\n        zip: '52337',\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.findMany({\n  where: {\n    shippingAddress: {\n      street: '555 Candy Cane Lane',\n      city: 'Wonderland',\n      zip: '52337',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.findMany({\n  where: {\n    shippingAddress: {\n      isNot: {\n        zip: '52337',\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await prisma.order.findMany({\n  where: {\n    billingAddress: {\n      isSet: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Posts Page in Terminal\nDESCRIPTION: This terminal command creates a new directory for the posts page and an empty page.tsx file inside it. It ensures the parent directories exist with the -p flag.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p src/app/posts && touch src/app/posts/page.tsx\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL connection URL for local macOS development\nDESCRIPTION: Demonstrates a typical connection URL format for a locally hosted PostgreSQL database on macOS, where user credentials match the OS username.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Introspection Result in Prisma ORM Versions 2.x\nDESCRIPTION: Shows the result of database introspection in Prisma ORM versions 2.x, where the absence of a `DEFAULT` constraint leads to the exclusion of default attribute marks in the schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        String  @id\n  published Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma User and Post Models Definition\nDESCRIPTION: Defines User and Post models for Prisma with a one-to-many relationship between users and their posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?\n  email   String   @unique\n  posts   Post[]\n}\n\nmodel Post {\n  id                Int                @id @default(autoincrement())\n  title             String\n  content           String?\n  published         Boolean            @default(false)\n  authorId          Int?\n  author            User?              @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting TypeScript Type Checking Error\nDESCRIPTION: Example of a TypeScript type error when using Prisma Client with unsupported TypeScript version\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/400-system-requirements.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n./node_modules/.prisma/client/index.d.ts:10:33\nType error: Type expected.\n   8 | export type PrismaPromise<A> = Promise<A> & {[prisma]: true}\n   9 | type UnwrapTuple<Tuple extends readonly unknown[]> = {\n> 10 |   [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : never : never\n     |                                 ^\n  11 | };\n  12 |\n  13 |\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - Models with Additional Field\nDESCRIPTION: Updated Prisma schema with new published field in Post model\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?\n  email   String   @unique\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Profile {\n  id     Int    @id @default(autoincrement())\n  bio    String\n  user   User   @relation(fields: [userId], references: [id])\n  userId Int\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  published Boolean @default(false)\n  authorId  Int\n  author    User    @relation(fields: [authorId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Setting current timestamp on record creation in Relational databases\nDESCRIPTION: Creates a DateTime field that automatically sets to the current timestamp when a record is created. This is implemented at the database level using functions like CURRENT_TIMESTAMP.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_86\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String   @id\n  createdAt DateTime @default(now())\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Record with Prisma Client in JavaScript\nDESCRIPTION: This snippet shows how to delete a User record using Prisma Client based on the user's email address.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst deletedUser = await prisma.user.delete({\n  where: { email: 'sarah@prisma.io' },\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Avoiding Unnecessary Input Field Requirements\nDESCRIPTION: Demonstrates how to document input fields without listing excessive validation details\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/07-user-interace-guidelines.mdx#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nIn **Display Name**, enter a name for your project.\n\n:::info\n\n**💡 Note**<br /><br />\n\nFollow the rules below when you enter a display name for your project.<br /><br />\n\n• Include at least one letter<br />\n• Keep the length up to 40 characters~~\n:::\n\n<!-- Good -->\n\nIn **Display Name**, enter a name for your project.\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Limit in Prisma Client (Prisma)\nDESCRIPTION: This snippet shows how to specify the number of connections in the Prisma Client's datasource configuration using the connection_limit parameter in the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/115-connection-pool.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?connection_limit=5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Database Provider in Prisma Schema\nDESCRIPTION: Changes the database provider in the schema.prisma file from MySQL to PostgreSQL. This is a crucial step in migrating the project to use Prisma Postgres.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/115-import-from-existing-database-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  // delete-start\n  provider = \"mysql\"\n  // delete-end\n  // add-start\n  provider = \"postgres\"\n  // add-end\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Prisma Schema Model\nDESCRIPTION: Demonstrates a simple Prisma schema with scalar types for a blog post model, showing how to define fields with different data types\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/400-type-safety/830-prisma-type-system.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  id        Int      @id\n  title     String\n  createdAt DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Using @@schema with Multiple Database Schemas\nDESCRIPTION: Shows how to use the @@schema attribute to specify database schema for a model with preview features enabled.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_68\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"multiSchema\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  schemas  = [\"auth\"]\n}\n\nmodel User {\n  id   Int    @id @default(autoincrement())\n  name String\n\n  @@schema(\"auth\")\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Boolean Values from Coinflips\nDESCRIPTION: Shows how to map over coinflips to extract only the boolean values, using TypeScript's map function and force unwrapping\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentCoinflips = user!.coinflips.map((cf) => cf.value)\n```\n\n----------------------------------------\n\nTITLE: Installing Tracing Dependencies\nDESCRIPTION: Terminal command to install the required packages for Datadog tracing: @prisma/instrumentation for Prisma query instrumentation, and dd-trace for Datadog's Node.js APM library.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/instrumentation \\\n  dd-trace\n```\n\n----------------------------------------\n\nTITLE: Viewing Collation of a MySQL Database\nDESCRIPTION: This SQL snippet demonstrates how to query the character set and collation of the current MySQL database, essential for understanding data sorting and comparison.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/070-case-sensitivity.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT @@character_set_database, @@collation_database;\n```\n\n----------------------------------------\n\nTITLE: Creating User and Post Tables with Multiple Foreign Keys in SQL\nDESCRIPTION: This SQL snippet creates User and Post tables with multiple foreign key relationships, setting up a scenario where relation disambiguation is necessary in Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/50-introspection.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    id SERIAL PRIMARY KEY\n);\nCREATE TABLE \"Post\" (\n    id SERIAL PRIMARY KEY,\n    \"author\" integer NOT NULL,\n    \"favoritedBy\" INTEGER,\n    FOREIGN KEY (\"author\") REFERENCES \"User\"(id),\n    FOREIGN KEY (\"favoritedBy\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Installing Dependencies\nDESCRIPTION: These commands create a new project directory, initialize a TypeScript project, and install necessary dependencies including Prisma CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\nnpm init -y\nnpm install prisma typescript tsx @types/node --save-dev\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Installing mdtool for Documentation Management\nDESCRIPTION: Commands to download and install mdtool, a CLI utility for managing documentation file positioning.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://gist.githubusercontent.com/steebchen/bd085ebde1fcf4242e3fdd0df4d202a6/raw/c04e3d262eb6a302a9fab98f6428fec9329681e2/mdtool -qO /usr/local/bin/mdtool\nchmod +x /usr/local/bin/mdtool\n```\n\n----------------------------------------\n\nTITLE: Database Field Mapping Example with @map\nDESCRIPTION: Examples showing how to map model fields to different database column names using @map attribute in both relational databases and MongoDB contexts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_59\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int    @id @default(autoincrement())\n  firstName String @map(\"first_name\")\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  firstName String @map(\"first_name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition for Team-User Relationship\nDESCRIPTION: Prisma schema defining a many-to-many relationship between Team and User models with auto-incrementing IDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Team {\n  id      Int    @id @default(autoincrement())\n  name    String\n  members User[] // Many team members\n}\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  email String @unique\n  teams Team[] // Many teams\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for `@updatedAt` in Prisma 1\nDESCRIPTION: Details SQL migration generated by Prisma 1 for updated at fields, illustrating lack of automatic timestamp update rules directly in the database layer.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  updatedAt TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from Existing PostgreSQL Database\nDESCRIPTION: Command to export data from an existing PostgreSQL database using pg_dump. It creates a backup file in custom format, which is recommended for pg_restore.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/110-import-from-existing-database-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npg_dump \\\n  -Fc \\\n  -v \\\n  -d __DATABASE_URL__ \\\n  -n public \\\n  -f db_dump.bak\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Size in Prisma Schema\nDESCRIPTION: Example of setting a custom connection_limit in the Prisma schema datasource block to increase the pool size for handling more parallel queries.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public&connection_limit=40\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI as Development Dependency\nDESCRIPTION: Command to install Prisma CLI as a development dependency in the project. This is typically run in the project's root directory where the package.json file is located.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb-node-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Record\nDESCRIPTION: This code example shows how to delete a User record from the database using Prisma Client. It deletes the user with the specified email address.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/300-next-steps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst deletedUser = await prisma.user.delete({\n  where: { email: 'sarah@prisma.io' },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL Environment Variable - macOS/Linux\nDESCRIPTION: Command to export the Prisma Postgres connection URL as an environment variable in macOS and Linux systems. The URL includes the API key for authentication.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/600-tcp-tunnel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nexport DATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Start's useLoaderData hook in React component\nDESCRIPTION: Retrieve the data fetched by the loader function using Route.useLoaderData() in the Home component.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/160-tanstack-start.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Home() {\n  const posts = Route.useLoaderData();\n\n  return (\n    <div>\n      <h1>Posts</h1>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies in web app directory\nDESCRIPTION: This snippet demonstrates the commands to install dependencies in the web app directory for different package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\ncd apps/web\nnpm install\n```\n\nLANGUAGE: terminal\nCODE:\n```\ncd apps/web\nyarn install\n```\n\nLANGUAGE: terminal\nCODE:\n```\ncd apps/web\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initialize Node.js Project (Terminal)\nDESCRIPTION: Commands to create a new project directory named 'docker-test', navigate into it, and initialize a Node.js project using npm, generating a default `package.json` file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir docker-test\ncd docker-test\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: TCP Tunnel Output Example\nDESCRIPTION: Example output showing the connection details provided by the TCP tunnel, including host and port information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/600-tcp-tunnel.mdx#2025-04-21_snippet_3\n\nLANGUAGE: code\nCODE:\n```\nPrisma Postgres auth proxy listening on 127.0.0.1:52604 🚀\n\nYour connection is authenticated using your Prisma Postgres API key.\n...\n\n==============================\nhostname:  127.0.0.1\nport:      52604\nusername:  <anything>\npassword:  <none>\n==============================\n```\n\n----------------------------------------\n\nTITLE: Uninstalling outdated dependencies\nDESCRIPTION: This command removes the old Nexus, nexus-prisma, prisma-client-lib and Prisma 1 dependencies from the project to prepare for the upgrade.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm uninstall nexus nexus-prisma prisma-client-lib prisma1\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Prisma Relationships and Filtering\nDESCRIPTION: Demonstrates a complex Prisma query to fetch users from organizations with active subscriptions, including relationship data\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/200-tabnine.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst activeUsers = await prisma.user.findMany({\n  where: {\n    organization: {\n      subscription: {\n        status: \"ACTIVE\"\n      }\n    }\n  },\n  include: {\n    organization: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New API Key for a Project\nDESCRIPTION: This command creates a new API key for a specified project and requires the environment ID along with an optional name for the API key.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform apikey create \\\n--environment $INSERT_ENVIRONMENT_ID \\\n--name $INSERT_API_KEY_NAME \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - SQLite Datasource\nDESCRIPTION: Defines the SQLite datasource block in the Prisma schema. Specifies the database provider as 'sqlite' and retrieves the connection URL from the `DATABASE_URL` environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\n\"datasource db {\n  provider = \\\"sqlite\\\"\n  url      = env(\\\"DATABASE_URL\\\")\n}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Migration SQL with Prisma Migrate Diff\nDESCRIPTION: Command to generate the initial migration SQL script using Prisma Migrate diff, comparing an empty state to the current schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Authenticating User to Prisma Data Platform with CLI\nDESCRIPTION: This command opens a browser for logging into the Prisma Data Platform account using GitHub authentication. It is crucial to access other platform features.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform auth login --early-access\n```\n\n----------------------------------------\n\nTITLE: Installing nexus-plugin-prisma\nDESCRIPTION: This command installs the `nexus-plugin-prisma` package, which replaces `nexus-prisma` and enables exposing Prisma ORM models in the GraphQL API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install nexus-plugin-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Cache Invalidation Using Tags\nDESCRIPTION: Example of invalidating cached queries using specific tags with error handling\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/400-api-reference.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await prisma.$accelerate.invalidate({\n    tags: [\"emails_with_alice\"],\n  });\n} catch (e) {\n  if (e instanceof Prisma.PrismaClientKnownRequestError) {\n    if (e.code === \"P6003\") {\n      console.log(\n        \"The cache invalidation rate limit has been reached. Please try again later.\"\n      );\n    }\n  }\n  throw e;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Commit\nDESCRIPTION: Command to check the most recent Git commit to ensure files were committed correctly.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/250-deploy-to-koyeb.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log -1\ncommit 895534590fdd260acee6396e2e1c0438d1be7fed (HEAD -> main)\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL connection URL in environment variable\nDESCRIPTION: This snippet demonstrates how to set the DATABASE_URL environment variable with a MySQL connection string. It includes placeholders for user credentials and database details.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://johndoe:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Using Prisma CLI with Yarn\nDESCRIPTION: Executes Prisma CLI commands using Yarn's package runner.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn prisma\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client context in TypeScript\nDESCRIPTION: TypeScript code for 'src/context.ts' that initializes a singleton PrismaClient instance. It defines a Context interface containing this PrismaClient, and exports a createContext function that returns this context object. This setup makes PrismaClient available as part of the GraphQL server context, enabling resolvers to access Prisma ORM functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nexport interface Context {\n  prisma: PrismaClient\n}\n\nexport function createContext(): Context {\n  return { prisma }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied\nDESCRIPTION: Command to mark the initial migration as applied using Prisma Migrate resolve.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate resolve --applied 0_init\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Definition for User Updates (TypeScript)\nDESCRIPTION: This TypeScript code snippet defines a GraphQL mutation type for updating a user's email or name. The fields authorEmail and authorName are optional, accepting null values which are to be handled in the resolver function.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/080-null-and-undefined.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Mutation {\n  // Update author's email or name, or both - or neither!\n  updateUser(id: Int!, authorEmail: String, authorName: String): User!\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Composite ID Records\nDESCRIPTION: This snippet shows the JSON structure of a record with a composite ID. The `postId` and `userId` fields together form the compound ID even though no single field represents the complete identifier.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/300-working-with-composite-ids-and-constraints.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postId\": 1,\n  \"userId\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Connection URL in Environment File\nDESCRIPTION: Creates a .env file with the DATABASE_URL environment variable containing the MySQL connection string for PlanetScale.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://janedoe:mypassword@server.us-east-2.psdb.cloud/mydb?sslaccept=strict\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Nested Write with deleteMany in Prisma\nDESCRIPTION: Shows an incorrect attempt to use nested writes with the deleteMany bulk operation, which is not supported in Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.team.deleteMany({\n  where: {\n    id: {\n      in: [2, 99, 2, 11],\n    },\n  },\n  data: {\n    members: {}, // Cannot access members here\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating PointOfInterest Records in Prisma Client\nDESCRIPTION: This Prisma Client extension adds a custom `create` method to insert geographic data into the database using raw SQL, with SafeQL ensuring type safety. The method takes name, latitude, and longitude as parameters and returns a `MyPointOfInterest` object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  model: {\n    pointOfInterest: {\n      async create(data: {\n        name: string\n        latitude: number\n        longitude: number\n      }) {\n        // Create an object using the custom types from above\n        const poi: MyPointOfInterest = {\n          name: data.name,\n          location: {\n            latitude: data.latitude,\n            longitude: data.longitude,\n          },\n        }\n\n        // Insert the object into the database\n        const point = `POINT(${poi.location.longitude} ${poi.location.latitude})`\n        await prisma.$queryRaw`\n          INSERT INTO \"PointOfInterest\" (name, location) VALUES (${poi.name}, ST_GeomFromText(${point}, 4326));\n        `\n\n        // Return the object\n        return poi\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: NPM scripts configuration in package.json for building and running the project\nDESCRIPTION: JSON snippet showing additions to the 'scripts' section of package.json, including commands for starting the built server, cleaning build artifacts, building the project with code generation and TypeScript compilation, generating Prisma and Nexus types, and starting a development server using ts-node-dev. This setup improves developer productivity by automating code generation, compiling, and running the GraphQL server in development mode.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"node dist/server\",\n    \"clean\": \"rm -rf dist\",\n    \"build\": \"npm -s run clean && npm -s run generate && tsc\",\n    \"generate\": \"npm -s run generate:prisma && npm -s run generate:nexus\",\n    \"generate:prisma\": \"prisma generate\",\n    \"generate:nexus\": \"ts-node --transpile-only src/schema\",\n    \"dev\": \"ts-node-dev --no-notify --respawn --transpile-only src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with Preview Features\nDESCRIPTION: This snippet shows how to define a Prisma schema with preview features enabled. The 'previewFeatures' field in the generator block specifies which preview features to use.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"multiSchema\"]\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"multiSchema\", \"metrics\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Migration with Prisma Migrate Diff\nDESCRIPTION: Command to generate an initial migration SQL file by comparing an empty state to the current schema, outputting the result to a file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Implicit Many-to-Many Relations in SQL\nDESCRIPTION: SQL statement that creates the necessary tables and indexes for an implicit many-to-many relation between Category and Post entities. This includes the relation table with the required naming convention and appropriate indexes for Prisma introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/300-many-to-many-relations.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"_CategoryToPost\" (\n    \"A\" integer NOT NULL REFERENCES \"Category\"(id) ,\n    \"B\" integer NOT NULL REFERENCES \"Post\"(id)\n);\nCREATE UNIQUE INDEX \"_CategoryToPost_AB_unique\" ON \"_CategoryToPost\"(\"A\" int4_ops,\"B\" int4_ops);\nCREATE INDEX \"_CategoryToPost_B_index\" ON \"_CategoryToPost\"(\"B\" int4_ops);\n\nCREATE TABLE \"Category\" (\n    id integer SERIAL PRIMARY KEY\n);\n\nCREATE TABLE \"Post\" (\n    id integer SERIAL PRIMARY KEY\n);\n```\n\n----------------------------------------\n\nTITLE: Local CockroachDB Connection URL Example\nDESCRIPTION: This example shows the connection URL structure for a locally hosted CockroachDB instance. It uses the root user and disables SSL for local development purposes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://root@localhost:26257?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Creating Post and Profile Tables with SQL\nDESCRIPTION: SQL commands to create Post and Profile tables with foreign key relationships to User table\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Profile\" (\n    id SERIAL PRIMARY KEY,\n    bio TEXT NOT NULL,\n    \"user\" integer NOT NULL UNIQUE,\n    FOREIGN KEY (\"user\") REFERENCES \"User\"(id)\n);\nCREATE TABLE \"Post\" (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author integer NOT NULL,\n    FOREIGN KEY (author) REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Raw Query Operations for MongoDB\nDESCRIPTION: Customizes the behavior of the MongoDB-specific $runCommandRaw operation for executing raw commands against a MongoDB database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/120-query.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  query: {\n    $runCommandRaw({ args, query, operation }) {\n      // handle $runCommandRaw operation\n      return query(args)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Prisma MongoDB Setup\nDESCRIPTION: Commands to create a new project directory called 'hello-prisma' and navigate into it. This initializes the project workspace for the Prisma and MongoDB setup.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Filtering and Offset Pagination with Prisma Client in TypeScript\nDESCRIPTION: This example shows how to combine filtering with offset pagination. It returns records where the email contains 'prisma.io', skipping the first 40 and returning records 41-50.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/055-pagination.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await prisma.post.findMany({\n  skip: 40,\n  take: 10,\n  where: {\n    email: {\n      contains: 'prisma.io',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Optimize Extension\nDESCRIPTION: This command installs the Prisma Client and the Prisma Optimize extension as dependencies in your project. Make sure you have Node.js and npm installed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/200-getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @prisma/client@latest @prisma/extension-optimize\"\n```\n\n----------------------------------------\n\nTITLE: Using the usePrismaClient Composable in Nuxt Server Component\nDESCRIPTION: Example of using the usePrismaClient composable in a Nuxt server component (.server.vue) to fetch a user from the database and display their name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  const prisma = usePrismaClient()\n  const user = await prisma.user.findFirst()\n</script>\n\n<template>\n  <p>{{ user.name }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Field Unique Constraint in Prisma Schema (Relational)\nDESCRIPTION: Example showing how to define a custom-named unique constraint across multiple fields in a User model for relational databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_51\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        Int     @default(autoincrement())\n  firstName String\n  lastName  String\n  isAdmin   Boolean @default(false)\n\n  @@unique(fields: [firstName, lastName, isAdmin], name: \"admin_identifier\")\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying the Prisma Optimize Title\nDESCRIPTION: This snippet utilizes the IconTitle component to render the main title for the Prisma Optimize section, including an icon for visual interest.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<IconTitle heading=\"h1\" icon=\"fa-solid fa-magnifying-glass-chart\" iconColor=\"#16A394\" >Prisma Optimize</IconTitle>\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Accelerate Extension via NPM\nDESCRIPTION: Command to install the Prisma Accelerate client extension package which provides connection pooling and optional caching layer functionality for Prisma Postgres databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/200-install-prisma-client-typescript-prismaPostgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Timeout in Database Connection String\nDESCRIPTION: Example of configuring the connection pool timeout using the pool_timeout parameter in a PostgreSQL connection string. This sets both the connection limit and pool timeout values.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/250-connection-pooling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\npostgresql://user:password@localhost:5432/db?connection_limit=10&pool_timeout=20\n```\n\n----------------------------------------\n\nTITLE: Stopping Nuxt Server and Prisma Studio\nDESCRIPTION: Commands to stop the Nuxt development server and Prisma Studio by killing their default ports. Used when changing database configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\nnpx kill-port 3000  # Stops Nuxt dev server (default port)\nnpx kill-port 5555  # Stops Prisma Studio (default port)\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env File\nDESCRIPTION: Shows the basic syntax for defining an environment variable in a .env file, using uppercase variable names followed by an equals sign and the value.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nMY_VALUE=prisma\n```\n\n----------------------------------------\n\nTITLE: Production Migration Deployment with Prisma Migrate\nDESCRIPTION: The prisma migrate deploy command synchronizes migration history between development and production environments. It applies pending migrations and updates the _prisma_migrations table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/010-mental-model.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprisma migrate deploy\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Connection URL for Heroku\nDESCRIPTION: Shows an example connection URL format for a PostgreSQL database hosted on Heroku with specific credentials and schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://opnmyfngbknppm:XXX@ec2-46-137-91-216.eu-west-1.compute.amazonaws.com:5432/d50rgmkqi2ipus?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Geographic Data Column in Prisma\nDESCRIPTION: Prisma schema definition for a model with a geographic data column using the Unsupported type to work with PostGIS Point data.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel PointOfInterest {\n  id       Int                                   @id @default(autoincrement())\n  name     String\n  location Unsupported(\"geography(Point, 4326)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project with Prisma CLI\nDESCRIPTION: Initializes a new Node.js project with npm and installs the Prisma CLI as a development dependency, creating a package.json file with the initial setup.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpm init -y\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pool Timeout (Prisma)\nDESCRIPTION: This snippet shows how to disable the connection pool timeout in the Prisma datasource configuration by setting the pool_timeout parameter to zero.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/115-connection-pool.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?connection_limit=5&pool_timeout=0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema: Updated User Model with Unique Constraint\nDESCRIPTION: Modified Prisma schema adding a unique constraint to the name field and introducing a new Post model\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/70-patching-and-hotfixing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id\n  name  String  @unique\n  email String?\n}\n\nmodel Post {\n  id    Int    @id\n  title String\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Prisma Client in TypeScript\nDESCRIPTION: Demonstrates how to retrieve all user records from the database using Prisma Client's findMany method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/250-querying-the-database-typescript-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  // ... you will write your Prisma Client queries here\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Database with Prisma Migrate Reset\nDESCRIPTION: Example of using the 'prisma migrate reset' command to drop and recreate the database, apply all migrations, and run seed scripts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_24\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate reset\n```\n\n----------------------------------------\n\nTITLE: Generating CUID2 values as MongoDB IDs using Prisma\nDESCRIPTION: Sets up a User model for MongoDB with an ID field that generates CUID2 values and maps to MongoDB's _id field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_75\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(cuid(2)) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI as a Development Dependency\nDESCRIPTION: This command installs the Prisma CLI as a development dependency in your project. It's the first step in setting up Prisma ORM in an existing project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Introspect Database\nDESCRIPTION: Introspects the database to generate Prisma models based on the existing database schema.  This command uses the connection URL defined in the `.env` file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n\"npx prisma db pull\"\n```\n\n----------------------------------------\n\nTITLE: Array Index Filtering in Prisma\nDESCRIPTION: Shows how to filter by targeting specific array indices in both PostgreSQL and MySQL databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/100-working-with-json-fields.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsers = await prisma.user.findMany({\n  where: {\n    comments: {\n      path: ['owned', '1'],\n      string_contains: 'Bob',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Type with nexus-prisma\nDESCRIPTION: Original Profile type definition using the previous nexus-prisma package with prismaFields(['*']) to expose all fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst Profile = prismaObjectType({\n  name: 'Profile',\n  definition(t) {\n    t.prismaFields(['*'])\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using mdtool to Remove Documentation Files\nDESCRIPTION: Example of using mdtool to remove a file and adjust the numbering of subsequent files.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mdtool remove INDEX\n\n# e.g.:\n$ mdtool remove 2\n\n# Result: 01-a, 02-b, 03-c, 04-d becomes 01-a, 02-b, 02-c, 03-d; 02-b is supposed to be manually deleted\n```\n\n----------------------------------------\n\nTITLE: Example Connection URL for PostgreSQL on Heroku\nDESCRIPTION: Shows an example connection string for a PostgreSQL database hosted on Heroku including credentials and hostname.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-postgresql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://opnmyfngbknppm:XXX@ec2-46-137-91-216.eu-west-1.compute.amazonaws.com:5432/d50rgmkqi2ipus?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Migration SQL\nDESCRIPTION: Command to generate a migration SQL file by comparing an empty state to the current schema using prisma migrate diff.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-node-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/0_init/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloudflare Worker\nDESCRIPTION: This command deploys the Cloudflare Worker using the wrangler CLI. After execution, it outputs the URL where the deployed Worker can be accessed.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_18\n\nLANGUAGE: terminal\nCODE:\n```\nnpx wrangler deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection with Custom Schema and Timeouts in Prisma\nDESCRIPTION: Example of a PostgreSQL connection URL with arguments for custom schema, connection pool size, and query timeout.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=myschema&connection_limit=5&socket_timeout=3\n```\n\n----------------------------------------\n\nTITLE: Accessing server data in the page component\nDESCRIPTION: Updated SvelteKit page component that accesses the data loaded from the server route using the $props() function.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n\tlet { data } = $props();\n</script>\n\n<h1>SvelteKit + Prisma</h1>\n```\n\n----------------------------------------\n\nTITLE: Reading User Records with Prisma Client\nDESCRIPTION: Demonstrates how to query all users from the database using Prisma Client's findMany operation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/250-querying-the-database-typescript-mysql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SQL Server Connection in Prisma Schema\nDESCRIPTION: Example of setting up a connection to a Microsoft SQL Server database in the Prisma schema file. It uses a connection string format specific to SQL Server.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/380-connection-urls.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = \"sqlserver://localhost:1433;initial catalog=sample;user=sa;password=mypassword;\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Environment within a Project\nDESCRIPTION: This command creates a new environment in a specified project, requiring the project ID and allowing for a name input.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform environment create \\\n--project $INSERT_PROJECT_ID \\\n--name $INSERT_ENVIRONMENT_NAME \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Starting the TCP Tunnel\nDESCRIPTION: Command to initiate the TCP tunnel using the @prisma/ppg-tunnel package. This creates a local proxy server that handles authentication and encryption.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/600-tcp-tunnel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx @prisma/ppg-tunnel\n```\n\n----------------------------------------\n\nTITLE: Initialize Prisma ORM (Terminal)\nDESCRIPTION: Initializes Prisma in the project using the Prisma CLI (`npx prisma init`). Specifies a custom output directory (`../generated/prisma`) for the generated Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma init --output ../generated/prisma\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Upgrade CLI\nDESCRIPTION: Command to initiate the Prisma Upgrade CLI tool for upgrading from Prisma 1 to Prisma ORM 2. Takes the Prisma 1 YAML file and Prisma 2 schema file as arguments.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma-upgrade prisma1/prisma.yml prisma/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Initialize Prisma ORM 2\nDESCRIPTION: Initializes Prisma ORM 2 in the project, creating the `prisma` directory and the `schema.prisma` file. This sets up the basic structure for defining the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Backwards by Two Migrations in Prisma\nDESCRIPTION: This command rolls back the two most recent migrations. The first argument specifies the number of migrations to roll back.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate down 2 --experimental\n```\n\n----------------------------------------\n\nTITLE: SQL Server Non-Clustered Primary Key Implementation\nDESCRIPTION: The SQL equivalent of the Prisma schema defining a non-clustered primary key constraint. This SQL command creates a table with a non-clustered primary key constraint on the 'id' column.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [Example] (\n  id INT NOT NULL,\n  value INT,\n  CONSTRAINT [Example_pkey] PRIMARY KEY NONCLUSTERED (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CockroachDB Cloud connection URL in environment variable\nDESCRIPTION: This snippet demonstrates how to set the DATABASE_URL environment variable for a CockroachDB Serverless or Dedicated instance hosted on CockroachDB Cloud. It includes placeholders for user-specific details and additional connection parameters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-cockroachdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://<myusername>:<mypassword>@<short-id>.<region>.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full&sslrootcert=$HOME/.postgresql/root.crt&options=--<mycluster>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Route Configuration\nDESCRIPTION: Updates the route configuration to include the new posts creation page\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport default [\n  index(\"routes/home.tsx\"),\n  route(\"posts\", \"routes/posts/home.tsx\"),\n  route(\"posts/:postId\", \"routes/posts/post.tsx\"),\n  route(\"posts/new\", \"routes/posts/new.tsx\"),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Enhanced Error Messaging in Prisma ORM 5\nDESCRIPTION: Demonstrates the improved error messaging capabilities introduced with the new jsonProtocol feature in Prisma ORM 5. The updated error messages provide clearer and more contextual information about query validation issues.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/101-jsonprotocol-changes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nFailed to validate the query: `Unable to match input value to any allowed input type for the field. Parse errors: [Query parsing/validation error at `Mutation.createOneUser.data.UserCreateInput.person.PersonCreateNestedOneWithoutUserInput.create`: Unable to match input value to any allowed input type for the field. Parse errors: [Query parsing/validation error at `Mutation.createOneUser.data.UserCreateInput.person.PersonCreateNestedOneWithoutUserInput.create.PersonCreateWithoutUserInput.hubspot_id`: A value is required but not set., Query parsing/validation error at `Mutation.createOneUser.data.UserCreateInput.person.PersonCreateNestedOneWithoutUserInput.create.PersonUncheckedCreateWithoutUserInput.hubspot_id`: A value is required but not set.], Query parsing/validation error at `Mutation.createOneUser.data.UserUncheckedCreateInput.person`: Field does not exist on enclosing type.]` at `Mutation.createOneUser.data`\n```\n\nLANGUAGE: terminal\nCODE:\n```\nInvalid `prisma.user.create()` invocation in\n/Users/prismo/projects/prisma/reproductions/workbench/index.ts:21:36\n\n  18 const prisma = new PrismaClient()\n  19\n  20 for (const u of userData) {\n→ 21   const user = await prisma.user.create({\n         data: {\n           email: \"eugene.albright@gallaudet.edu\",\n           person: {\n             create: {\n               first_name: \"William\",\n               last_name: \"Albright\",\n       +       hubspot_id: String\n             }\n           }\n         }\n       })\n\nArgument `hubspot_id` must not be null.\n```\n\n----------------------------------------\n\nTITLE: SQL for Converting TEXT Column to Enum Type\nDESCRIPTION: SQL command to convert a TEXT column to use the newly created enum type in PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"User\" ALTER COLUMN \"role\" TYPE \"Role\"\nUSING \"role\"::text::\"Role\";\n```\n\n----------------------------------------\n\nTITLE: MySQL Date Comparison Query\nDESCRIPTION: Raw query implementation for comparing date columns in MySQL databases\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/500-comparing-columns-through-raw-queries.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function initiateDatesComparisonRawQuery() {\n  const response =\n    await prisma.$queryRaw`SELECT * FROM \\`public\\`.\\`Project\\` WHERE \\`completedDate\\` > \\`dueDate\\`;`\n\n  console.log(response)\n}\n\nawait initiateDatesComparisonRawQuery()\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Implicit Relations Query\nDESCRIPTION: The JSON structure returned when querying posts with their tags using an implicit many-to-many relation in Prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"title\": \"Types of relations\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"dev\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"prisma\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Fig CLI Autocomplete for Prisma\nDESCRIPTION: Command to install Fig via Homebrew for CLI autocompletion. Supports bash, zsh, and fish shells on macOS.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/200-editor-setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install fig\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migration Command\nDESCRIPTION: Terminal command to create and execute the initial database migration using Prisma Migrate. Creates SQL migration file and applies it to the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/150-using-prisma-migrate-typescript-postgresql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Example Scalar List Value in JSON Format\nDESCRIPTION: Example of what a scalar list field value looks like in JSON format, showing an array of strings representing pet names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/200-working-with-scalar-lists-arrays.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n['Fido', 'Snoopy', 'Brian']\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for JSON Field\nDESCRIPTION: SQL statement generated by Prisma 1 to create a table with a TEXT column for a Json field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  jsonData TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: Pagination with Cursor: Prisma ORM\nDESCRIPTION: Implements cursor-based pagination using Prisma ORM, retrieving the last 20 posts before a specific ID.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = await prisma.post.findMany({\n  before: {\n    id: 242,\n  },\n  last: 20,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating object with create and save: TypeORM\nDESCRIPTION: Creates a new user with TypeORM using the `create` and `save` methods.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst user = await userRepository.create({\n  name: 'Alice',\n  email: 'alice@prisma.io',\n})\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Enabling Driver Adapters in Prisma Schema\nDESCRIPTION: Updates the Prisma schema to enable the driverAdapters preview feature for Turso support.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/900-turso.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\" // will be ignored\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Database Backup with pg_restore\nDESCRIPTION: Command to restore the database backup to the GA database using pg_restore through the secure tunnel.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/120-upgrade-from-early-access.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPGSSLMODE=disable \\\npg_restore \\\n  -h 127.0.0.1 \\\n  -p 5432 \\\n  -v \\\n  -d postgres \\\n  ./mydatabase.bak \\\n&& echo \"-complete-\"\n```\n\n----------------------------------------\n\nTITLE: Setting up the SvelteKit page component\nDESCRIPTION: Initial HTML and TypeScript for a SvelteKit page component with a basic heading, replacing the default welcome content.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n</script>\n\n<h1>SvelteKit + Prisma</h1>\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI Dependencies\nDESCRIPTION: Command to install Prisma CLI as a development dependency in an existing Node.js project. This is the first step in setting up Prisma ORM integration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-node-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Regenerating Prisma Client after Enabling Preview Feature\nDESCRIPTION: This command regenerates Prisma Client after enabling a Preview feature, which is necessary for the changes to take effect.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/500-preview-features/050-client-preview-features.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma Client for Edge Runtime in TypeScript\nDESCRIPTION: Imports the edge-compatible version of Prisma Client for use in edge function environments like Vercel's edge runtime.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/580-local-development.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client/edge'\n```\n\n----------------------------------------\n\nTITLE: Creating CockroachDB Table with SQL\nDESCRIPTION: SQL command to create a Post table in CockroachDB with an INT8 id and VARCHAR title field\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/840-cockroachdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE public.\"Post\" (\n  \"id\" INT8 NOT NULL,\n  \"title\" VARCHAR(200) NOT NULL,\n  CONSTRAINT \"Post_pkey\" PRIMARY KEY (\"id\" ASC),\n  FAMILY \"primary\" (\"id\", \"title\")\n);\n```\n\n----------------------------------------\n\nTITLE: Ordering Grouped Results in Prisma\nDESCRIPTION: Illustrates how to order grouped results in Prisma Client, including ordering by aggregate values and using skip and take for pagination.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupBy = await prisma.user.groupBy({\n  by: ['city'],\n  _count: {\n    city: true,\n  },\n  orderBy: {\n    _count: {\n      city: 'desc',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in TypeScript with dotenv\nDESCRIPTION: Shows how to load environment variables at runtime in a TypeScript application using the dotenv package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/500-development-environment/100-environment-variables.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from 'dotenv'\n\ndotenv.config() // Load the environment variables\nconsole.log(`The connection URL is ${process.env.DATABASE_URL}`)\n```\n\n----------------------------------------\n\nTITLE: Extracting Boolean Values from Coinflips\nDESCRIPTION: Shows how to map coinflips to their boolean values using TypeScript array mapping\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentCoinflips = user!.coinflips.map((cf) => cf.value)\n```\n\n----------------------------------------\n\nTITLE: Example Logging Output from Prisma Middleware\nDESCRIPTION: The console output produced by the query time logging middleware, showing the execution time for two consecutive Post.create operations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/200-logging-middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nQuery Post.create took 92ms\nQuery Post.create took 15ms\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection URL in Environment File\nDESCRIPTION: Example of setting up the MongoDB connection URL in a .env file, demonstrating the format for MongoDB Atlas connection string.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/120-mongodb/100-connect-your-database-typescript-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mongodb+srv://test:test@cluster0.ns1yp.mongodb.net/myFirstDatabase\"\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectId Field with String Type in Prisma Schema\nDESCRIPTION: Shows how to define a field in Prisma schema that maps to an ObjectId in MongoDB using String type with appropriate attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  // Other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Activating PostgreSQL Extension with SQL\nDESCRIPTION: Shows the SQL command to activate the pgcrypto extension in PostgreSQL for versions of Prisma ORM earlier than 4.5.0.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/70-unsupported-database-features.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n```\n\n----------------------------------------\n\nTITLE: Creating Code Block without Line Numbers\nDESCRIPTION: Illustrates how to remove line numbers from a code block using the 'no-lines' property.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js no-lines\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Init with Unrecognized DB Option\nDESCRIPTION: Example of a failing command where the --db option is not recognized due to cached CLI versions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/900-troubleshooting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init --db\n```\n\n----------------------------------------\n\nTITLE: Initialize Prisma ORM 2 after renaming\nDESCRIPTION: Re-initializes Prisma ORM 2 after renaming the original `prisma` directory. This creates the new `prisma` directory and `schema.prisma` file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Prompt\nDESCRIPTION: Example prompt for generating seed data for the Prisma schema models.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/100-cursor.mdx#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nGenerate code to populate the Prisma schema with realistic data for the User, Organization, and Subscription models, ensuring all necessary fields are included.\n```\n\n----------------------------------------\n\nTITLE: PgBouncer Connection Error with Prisma Migrate\nDESCRIPTION: Error message displayed when attempting to run Prisma Migrate commands in an environment using PgBouncer for connection pooling\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/300-limitations-and-known-issues.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nError: undefined: Database error\nError querying the database: db error: ERROR: prepared statement \"s0\" already exists\n```\n\n----------------------------------------\n\nTITLE: AWS RDS Postgres SSL Connection Configuration\nDESCRIPTION: Modifies DATABASE_URL to bypass strict SSL certificate verification when connecting Prisma to AWS RDS Postgres\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/650-caveats-when-deploying-to-aws-platforms.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=postgresql://<username>:<password>@<host>/<database>?sslmode=no-verify&schema=public\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nuxt Project with Terminal Command\nDESCRIPTION: Creates a new Nuxt project using the npm create command. This is the first step before installing the Prisma module.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm create nuxt test-nuxt-app\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Studio on Custom Port\nDESCRIPTION: This command demonstrates how to start Prisma Studio on a custom port (7777) and open a new browser tab to access it.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_33\n\nLANGUAGE: terminal\nCODE:\n```\nprisma studio --port 7777\n```\n\n----------------------------------------\n\nTITLE: Fetching relations using JOIN: TypeORM\nDESCRIPTION: Fetches a user with associated posts using `JOIN` in TypeORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst user = await userRepository.findOne(id, {\n  join: {\n    alias: 'user',\n    leftJoinAndSelect: {\n      posts: 'user.posts',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Database Backup with pg_dump\nDESCRIPTION: Command to create a database backup using pg_dump through the tunnel connection\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/500-backups.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPGSSLMODE=disable \\\npg_dump \\\n  -h 127.0.0.1 \\\n  -p 5432 \\\n  -Fc \\\n  -v \\\n  -d postgres \\\n  -f ./mydatabase.bak \\\n&& echo \"-complete-\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript configuration\nDESCRIPTION: Terminal command to create a TypeScript configuration file (tsconfig.json) with default settings for the project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Initial Prisma Schema Configuration\nDESCRIPTION: Basic Prisma schema configuration file created after initialization, defining MongoDB as the datasource provider.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-node-mongodb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Datasource in Prisma Schema\nDESCRIPTION: Configures a SQLite database connection within the Prisma schema file, specifying the database provider and file path\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:my-database.db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Database Schema\nDESCRIPTION: SQL schema definition creating User, Post, and Profile tables with proper relationships and constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE User (\n  id INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE Post (\n  id INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  createdAt TIMESTAMP NOT NULL DEFAULT now(),\n  content TEXT,\n  published BOOLEAN NOT NULL DEFAULT false,\n  authorId INTEGER NOT NULL,\n  FOREIGN KEY (authorId) REFERENCES User(id)\n);\n\nCREATE TABLE Profile (\n  id INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,\n  bio TEXT,\n  userId INTEGER UNIQUE NOT NULL,\n  FOREIGN KEY (userId) REFERENCES User(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting Multiple Existing Posts to New User\nDESCRIPTION: Creates a new user and connects them to multiple existing posts using the connect operator.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await prisma.user.create({\n  data: {\n    email: 'vlad@prisma.io',\n    posts: {\n      connect: [{ id: 8 }, { id: 9 }, { id: 10 }],\n    },\n  },\n  include: {\n    posts: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Turborepo Monorepo with npm\nDESCRIPTION: Initializes a new Turborepo monorepo named 'turborepo-prisma' using npm. This command sets the foundation for the project structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx create-turbo@latest turborepo-prisma\n```\n\n----------------------------------------\n\nTITLE: Upgrading Prisma packages using yarn\nDESCRIPTION: Command to upgrade the prisma and @prisma/client packages to version 5 using yarn.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nyarn up prisma@5 @prisma/client@5\n```\n\n----------------------------------------\n\nTITLE: Defining GiST Index with InetOps in Prisma Schema\nDESCRIPTION: This snippet shows how to define a GiST index on a `value` field of type `String` with the `@db.Inet` native type and using the `InetOps` operator class in the Prisma schema. It specifies that the index type is `Gist` and uses the InetOps operator for indexing IP addresses.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Example {\n  id    Int    @id\n  value String @db.Inet\n  //           ^ native type matching the operator class\n  //                                   ^ index type\n  //                  ^ operator class\n\n  @@index([value(ops: InetOps)], type: Gist)\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Query in GraphQL\nDESCRIPTION: A sample GraphQL query that uses the UserUniqueInput to find a user by email, retrieving their ID and name.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  user(userUniqueInput: { email: \"alice@prisma.io\" }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stop and Remove PostgreSQL Container (Terminal)\nDESCRIPTION: Stops and removes the PostgreSQL container, network, and potentially the volume previously started with `docker-compose.postgres.yml`. The `--remove-orphans` flag removes containers for services not defined in the Compose file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.postgres.yml down --remove-orphans\n```\n\n----------------------------------------\n\nTITLE: MySQL Float Type Mappings\nDESCRIPTION: Native database type mappings for floating-point types in MySQL with corresponding Prisma field type attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_18\n\nLANGUAGE: prisma\nCODE:\n```\n@db.Float\n@db.Double\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition After Introspection\nDESCRIPTION: Sample generated Prisma schema models showing the structure of tables after introspection, enabling further database operations in Node.js.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel anotherproduct {\n  price        Float?\n  productid    Int    @id\n  reducedprice Float?\n}\n\nmodel lastproduct {\n  category  String?\n  productid Int     @id\n}\n\nmodel product {\n  price     Float?\n  productid Int    @id\n}\n\nmodel secondtolastproduct {\n  price        Float?\n  productid    Int      @id\n  reducedprice Float?\n  tags         String[]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma Client for Deno\nDESCRIPTION: This snippet demonstrates how to import Prisma Client in a Deno project, specifying a custom output path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from './generated/client/deno/edge.ts'\n\nconst prisma = new PrismaClient()\n// use `prisma` in your application to read and write data in your DB\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL for Local PostgreSQL Database in .env\nDESCRIPTION: Configures the DATABASE_URL environment variable to connect to a local PostgreSQL database for development purposes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/580-local-development.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"postgres://username:password@127.0.0.1:5432/localdb\"\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable for PostgreSQL Data Source in Prisma Schema\nDESCRIPTION: Shows how to use an environment variable to specify the connection URL for a PostgreSQL data source in a Prisma schema file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing pnpm Workspaces Configuration\nDESCRIPTION: Configure pnpm workspace structure and pin Prisma version using pnpm-workspace.yaml\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/140-use-prisma-in-pnpm-workspaces.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  - \"apps/*\"\n  - \"packages/*\"\ncatalogs:\n  prisma:\n    prisma: latest\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Introspection Command\nDESCRIPTION: This command uses Prisma CLI to introspect the database and generate a Prisma schema based on the existing database structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-sqlserver.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Prisma Client Generator\nDESCRIPTION: Specifies the prisma-client-js generator with default output, preview features, engine type and binary targets.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating CreateUser Mutation with @nexus/schema\nDESCRIPTION: Updated implementation of the createUser mutation using @nexus/schema and nexus-plugin-prisma.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = queryType({\n  definition(t) {\n    t.crud.createOneUser({\n      alias: 'createUser',\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Embedding - Full Width\nDESCRIPTION: Basic markdown syntax for inserting full-width images with alt text from a peer file\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/06-image-guidelines.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Alt text](./peer-file.png)\n```\n\n----------------------------------------\n\nTITLE: Logging Out of Prisma Data Platform\nDESCRIPTION: This command logs the user out of the Prisma Data Platform account, terminating the active user session.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform auth logout --early-access\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema for PostgreSQL\nDESCRIPTION: Modifies the schema.prisma file to use PostgreSQL as the database provider.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n    provider = \"postgresql\"\n    url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Configuration for MongoDB\nDESCRIPTION: Create Prisma schema and configure database connection for a MongoDB project\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/050-migrate-from-mongoose.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Diagram Source URL Comment\nDESCRIPTION: Markdown comment format for adding Figma source URL above an image tag\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/06-image-guidelines.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- https://www.figma.com/file/H7EMWAuCaRVHrdNoQpky7J/Tracing?node-id=2%3A37 -->\n\n![image](./trace-diagram.png)\n```\n\n----------------------------------------\n\nTITLE: Creating New Nuxt Project with npm\nDESCRIPTION: Initialize a new Nuxt project using npm, recommended for stable Prisma module integration\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/100-nuxt.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm create nuxt hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Targets for Ubuntu Compatibility\nDESCRIPTION: Sets binary targets to ensure compatibility with Ubuntu 19.04 (disco) operating system.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider      = \"prisma-client-js\"\n  binaryTargets = [\"debian-openssl-1.1.x\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Packages\nDESCRIPTION: Command for installing core OpenTelemetry packages needed for tracing functionality.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install @opentelemetry/semantic-conventions @opentelemetry/exporter-trace-otlp-http @opentelemetry/sdk-trace-base @opentelemetry/sdk-trace-node @opentelemetry/resources\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status with Prisma Migrate Status\nDESCRIPTION: Example of using the 'prisma migrate status' command to view the state of migrations in the database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_27\n\nLANGUAGE: terminal\nCODE:\n```\nprisma migrate status\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Directory for TypedSQL Queries\nDESCRIPTION: Terminal command to create a sql directory inside the prisma directory where TypedSQL queries will be stored.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p prisma/sql\n```\n\n----------------------------------------\n\nTITLE: JSDoc Type Definition for Prisma Client\nDESCRIPTION: Type definition import using JSDoc to enable Prisma Client autocompletion in JavaScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/100-autocompletion-in-graphql-resolvers-with-js.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @typedef { import(\"@prisma/client\").PrismaClient } Prisma\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Database Source\nDESCRIPTION: Defines the MongoDB database connection in the Prisma schema using an environment variable for the connection URL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/100-connect-your-database-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI in TypeScript Project\nDESCRIPTION: Command to install Prisma CLI as a development dependency in an existing Node.js or TypeScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js App\nDESCRIPTION: This terminal command creates a new Next.js application using the create-next-app tool.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx create-next-app@latest my-app\n```\n\nLANGUAGE: terminal\nCODE:\n```\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel with JSON Type\nDESCRIPTION: Example Prisma 1 datamodel with a Json field type, which is stored as TEXT in the underlying database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  jsonData: Json\n}\n```\n\n----------------------------------------\n\nTITLE: Cleanup Migration Table\nDESCRIPTION: SQL command to drop the separate coinflips table after migration\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_51\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE \"User_coinflips\";\n```\n\n----------------------------------------\n\nTITLE: Named Migration Command in Prisma\nDESCRIPTION: Command to create a new migration with a specific name after introspecting database changes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/200-troubleshooting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev --name introspected_change\n```\n\n----------------------------------------\n\nTITLE: Formatting Project Creation Options in Markdown\nDESCRIPTION: Example showing how to format project creation prompts and user answers (like selecting a package manager 'npm') within an info admonition using Markdown, as specified in the guide template checklist. This format is intended for documenting CLI interactions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nmarkdown - *Which package manager would you like to use?* `npm` \n```\n\n----------------------------------------\n\nTITLE: Updating object: Prisma ORM\nDESCRIPTION: Updates an existing user's name using Prisma ORM.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await prisma.user.update({\n  data: {\n    name: 'Alicia',\n  },\n  where: {\n    id: 2,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI Dependencies\nDESCRIPTION: Command to install Prisma CLI as a development dependency in an existing Node.js project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases-node-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Loading Script to Package.json\nDESCRIPTION: Script configuration in package.json for loading environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    // ....\n    \"env\": \"dotenv -e .dev.vars\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Main as Default Branch\nDESCRIPTION: Command to rename the default branch to 'main' in the Git repository.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -M main\n```\n\n----------------------------------------\n\nTITLE: Docker Interactive Mode Command for Prisma Migrate\nDESCRIPTION: Commands to run Docker container in interactive mode to support Prisma Migrate commands\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/300-limitations-and-known-issues.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --interactive --tty <image name>\n# or\ndocker -it <image name>\n\n# Example usage\ndocker run -it node\n```\n\n----------------------------------------\n\nTITLE: Running Worker Locally\nDESCRIPTION: This terminal command demonstrates how to run the Cloudflare Worker locally to test the integration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating Prisma Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate Prisma Client in a TypeScript environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/100-what-is-prisma.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic JavaScript Code Block\nDESCRIPTION: Shows how to create a simple JavaScript code block in the documentation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/01-mdx-examples.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const allUsers = await prisma.user.findMany()\n  console.log(allUsers)\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Database Environment Configuration\nDESCRIPTION: Environment variable configuration for connecting to Prisma Postgres database in .env file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/03-prisma-postgres/115-import-from-existing-database-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"prisma+postgres://accelerate.prisma-data.net/?api_key=__API_KEY__\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Query Engine Binary for Unix\nDESCRIPTION: Command to set the custom query engine binary globally for Unix-based systems.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nexport PRISMA_QUERY_ENGINE_BINARY=/custom/my-query-engine-unix\n```\n\n----------------------------------------\n\nTITLE: Truncating Migration Table in SQL\nDESCRIPTION: SQL command to delete all entries from the _Migration table during troubleshooting\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE _Migration;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Config for LibSQL Adapter\nDESCRIPTION: Sets up a prisma.config.ts file to use the LibSQL adapter for Prisma Migrate with Turso.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/900-turso.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport { defineConfig } from 'prisma/config'\nimport { PrismaLibSQL } from '@prisma/adapter-libsql'\n\nimport 'dotenv/config'\n\ntype Env = {\n  LIBSQL_DATABASE_URL: string\n  LIBSQL_DATABASE_TOKEN: string\n}\n\nexport default defineConfig<Env>({\n  earlyAccess: true,\n  schema: path.join('prisma', 'schema.prisma'),\n\n  migrate: {\n    async adapter(env) {\n      return new PrismaLibSQL({\n        url: env.LIBSQL_DATABASE_URL,\n        authToken: env.LIBSQL_DATABASE_TOKEN,\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing wget for mdtool\nDESCRIPTION: Command to install the wget utility which is required for installing mdtool.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install wget\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client\nDESCRIPTION: This command installs Prisma Client in your project and runs the prisma generate command to generate the client code.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/005-introduction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Database Source\nDESCRIPTION: Basic Prisma schema configuration for PostgreSQL database connection using environment variables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Local MySQL Connection Example\nDESCRIPTION: Example of a MySQL connection URL for a locally hosted database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-node-mysql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://root:randompassword@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client Package\nDESCRIPTION: Command to install the @prisma/client package using npm package manager.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/_install-prisma-client-partial.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma ORM 2 schema using init command - JavaScript\nDESCRIPTION: This command initializes a new Prisma schema directory and files in your project. It requires that no existing 'prisma' directory is present to avoid errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Formatting the Codebase\nDESCRIPTION: Command to run code formatting using the project's formatting tools.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma schema for Neon database\nDESCRIPTION: This Prisma schema configuration enables the driverAdapters preview feature and sets the database connection URL to an environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_19\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Database Connection URL\nDESCRIPTION: Example of a PlanetScale database connection URL configuration in the environment file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://janedoe:mypassword@server.us-east-2.psdb.cloud/mydb?sslaccept=strict\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Prisma CLI\nDESCRIPTION: Basic command to invoke the Prisma CLI using npx\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/_prisma-init-partial.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: Database Introspection Command\nDESCRIPTION: Command to introspect the MongoDB database and generate the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb/125-introspection-node-mongodb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma db pull\n```\n\n----------------------------------------\n\nTITLE: Disabling Prisma CLI Telemetry\nDESCRIPTION: Sets an environment variable to opt-out of Prisma CLI usage data collection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport CHECKPOINT_DISABLE=1\n```\n\n----------------------------------------\n\nTITLE: Default Value for Float Field in Prisma Schema\nDESCRIPTION: Shows how to define default float values in Prisma schema for both database types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_42\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  email  String @unique\n  number Float  @default(1.1)\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id     String @default(auto()) @map(\"_id\") @db.ObjectId\n  number Float  @default(1.1)\n}\n```\n\n----------------------------------------\n\nTITLE: Local PlanetScale CLI Connection\nDESCRIPTION: Environment configuration for local database connection using PlanetScale CLI.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-typescript-planetscale.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://root@localhost:PORT/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI with pnpm\nDESCRIPTION: Installs Prisma CLI as a development dependency using pnpm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI with npm\nDESCRIPTION: Installs Prisma CLI as a development dependency using npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Example of Prisma schema file structure - Prisma\nDESCRIPTION: This snippet represents an example of a basic Prisma schema file necessary for defining the database provider and client generator. It should be customized according to your database configuration.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default Current Timestamp Constraint in SQL\nDESCRIPTION: Displays a SQL statement to manually alter a column by adding a `DEFAULT CURRENT_TIMESTAMP` constraint, which supplements existing database configurations for Prisma introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"Post\"\n\tALTER COLUMN \"createdAt\" SET DEFAULT CURRENT_TIMESTAMP;\n```\n\n----------------------------------------\n\nTITLE: Removing jsonProtocol from preview features in Prisma schema\nDESCRIPTION: Example of how to remove the jsonProtocol preview feature from the Prisma schema when upgrading to Prisma ORM 5.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Database in SQL Server\nDESCRIPTION: This SQL command creates a new database named 'quickstart' in the SQL Server instance. It should be executed from the sqlcmd command prompt after connecting to the SQL Server.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/030-sql-server-docker.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE quickstart\nGO\n```\n\n----------------------------------------\n\nTITLE: Using sequence() for CockroachDB ID Generation\nDESCRIPTION: Shows how to use sequence() function to generate custom sequential IDs in CockroachDB.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_71\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   Int    @id @default(sequence(maxValue: 4294967295))\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Optional Composite Type Using Unset\nDESCRIPTION: Illustrates how to remove an optional composite type from a record entirely using the `unset` operation in Prisma. Requires Prisma and a configured Prisma Client instance. Demonstrates removing the `billingAddress` field from an order.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/200-special-fields-and-types/057-composite-types.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await prisma.order.update({\n  where: {\n    id: 'some-object-id',\n  },\n  data: {\n    billingAddress: {\n      // Unset the billing address\n      // Removes \"billingAddress\" field from order\n      unset: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using NestJS Built-in Shutdown Hooks\nDESCRIPTION: Diff showing how to replace custom Prisma shutdown hooks with NestJS's built-in enableShutdownHooks method in main.ts file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/600-upgrading-to-prisma-5/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- prismaService.enableShutdownHooks(app)\n+ app.enableShutdownHooks()\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Accelerate Extension\nDESCRIPTION: Terminal command to install the Prisma Accelerate extension, which enables query caching when using Prisma Postgres.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\nnpm i @prisma/extension-accelerate\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Schema After Introspection of ID Field\nDESCRIPTION: The resulting Prisma schema after introspecting a database with a VARCHAR(25) column for the ID field.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_39\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id String @id\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: CreatedAt Manually Added Default\nDESCRIPTION: This Prisma schema presents the manual addition of the `@default(now())` attribute to the `createdAt` field. By adding this attribute, the Prisma Client will automatically generate the timestamp at runtime upon record creation, similar to Prisma 1 behavior. Remember to re-add the attribute after each introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma line-number file=schema.prisma highlight=3;normal showLineNumbers\nmodel Post {\n  id        String   @id\n  //highlight-next-line\n  createdAt DateTime @default(now())\n}\n```\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Integer Type Mappings\nDESCRIPTION: Native database type mappings for integer and serial types in CockroachDB with corresponding Prisma field type attributes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\n@db.Int8\n@db.Int4\n@db.Int2\n@db.Int2 @default(autoincrement())\n@db.Int4 @default(autoincrement())\n@db.Int8 @default(autoincrement())\n```\n\n----------------------------------------\n\nTITLE: Starting the Nuxt Development Server\nDESCRIPTION: Starts the Nuxt development server which will trigger Prisma initialization, schema creation, migration prompt, and Prisma Studio launch.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating MongoDB ObjectId using bson Package\nDESCRIPTION: Shows how to install and use the bson package to generate a valid ObjectId for testing or manual ID assignment in a TypeScript application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/600-mongodb.mdx#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm install --save bson\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ObjectId } from 'bson'\n\nconst id = new ObjectId()\n```\n\n----------------------------------------\n\nTITLE: Handling Bytes with Uint8Array in Prisma Client\nDESCRIPTION: This code demonstrates the transition from using Buffer to Uint8Array when working with bytes in Prisma ORM v6, ensuring compatibility with modern JavaScript runtimes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nasync function main() {\n  const prisma = new PrismaClient()\n  await prisma.user.deleteMany()\n\n  const bytesCreated = await prisma.user.create({\n    data: {\n      bytes: Uint8Array.from([1, 2, 3, 4]),\n    },\n  })\n  // ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  // `bytesCreated` now has type: {\n  //    bytes: Uint8Array\n  //    id: number\n  // }\n\n  for (const bytesFound of await prisma.user.findMany()) {\n    bytesFound.bytes // Uint8Array [ 1, 2, 3, 4 ]\n  }\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Initialization\nDESCRIPTION: Command to initialize TypeScript configuration\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-prismaPostgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 GraphQL Datamodel with ID Field\nDESCRIPTION: Example of a Prisma 1 datamodel using GraphQL syntax with an ID field that will use CUIDs.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Prisma Client Instance\nDESCRIPTION: Sets up a global singleton instance of Prisma Client to prevent multiple client instances during development. Includes type declarations for global scope and development environment handling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient()\n}\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema - Multiple Models with Relations\nDESCRIPTION: Prisma schema defining User, Profile and Post models with relationships\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/200-understanding-prisma-migrate/600-legacy-migrate.mdx#2025-04-21_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int      @id @default(autoincrement())\n  name    String?\n  email   String   @unique\n  posts   Post[]\n  profile Profile?\n}\n\nmodel Profile {\n  id     Int    @id @default(autoincrement())\n  bio    String\n  user   User   @relation(fields: [userId], references: [id])\n  userId Int\n}\n\nmodel Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  author   User   @relation(fields: [authorId], references: [id])\n  authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Connection URL for Local macOS Database\nDESCRIPTION: An example showing the typical format for connecting to a locally hosted PostgreSQL database on macOS, where username, password, and database name often match the OS user.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/100-connect-your-database-node-postgresql.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for D1 Configuration\nDESCRIPTION: Example of environment variables needed for D1 adapter setup in a .env file.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/950-cloudflare-d1.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCLOUDFLARE_ACCOUNT_ID=\"0773...\"\nCLOUDFLARE_DATABASE_ID=\"01f30366-...\"\nCLOUDFLARE_D1_TOKEN=\"F8Cg...\"\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema with Native Array\nDESCRIPTION: Prisma schema after migration, showing simplified User model with native boolean array\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_52\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id        String    @id\n  coinflips Boolean[]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL using wrangler CLI\nDESCRIPTION: This command demonstrates how to set the `DATABASE_URL` environment variable in a production environment using the `wrangler` CLI.  The CLI prompts the user to enter the value for `DATABASE_URL`, which is securely stored and made available to the Cloudflare Worker.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nnpx wrangler secret put DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Local CockroachDB Connection String\nDESCRIPTION: Example connection string format for locally hosted CockroachDB instance with SSL disabled for development purposes.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/100-connect-your-database-typescript-cockroachdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://root@localhost:26257?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI Dependencies\nDESCRIPTION: Command to install the Prisma CLI as a development dependency in an existing Node.js/TypeScript project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/120-mongodb-typescript-mongodb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring directUrl in Prisma Schema for External Connection Poolers\nDESCRIPTION: Example of configuring both url and directUrl in the Prisma schema datasource block when using external connection poolers like PgBouncer.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/000-setup-and-configuration/050-databases-connections/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Types with TypeScript\nDESCRIPTION: This snippet defines custom TypeScript types to handle geographical data in a Prisma schema that uses an `Unsupported` type. These types help facilitate working with latitude and longitude in `PointOfInterest` records.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyPoint = {\n  latitude: number\n  longitude: number\n}\n\ntype MyPointOfInterest = {\n  name: string\n  location: MyPoint\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Prisma\nDESCRIPTION: This snippet imports various components used in the Prisma Optimize documentation. It includes icons and layout components that are essential for displaying the UI elements of the documentation page.\nSOURCE: https://github.com/prisma/docs/blob/main/content/700-optimize/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\\n  Bolt,\\n  BorderBox,\\n  BoxTitle,\\n  Database,\\n  Grid,\\n  LinkCard,\\n  List,\\n  SignalStream,\\n  SquareLogo,\\n} from '@site/src/components/GettingStarted';\\n\\nimport {\\n    IconTitle\\n} from '@site/src/components/shortcodes/index';\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Features in Prisma\nDESCRIPTION: This snippet demonstrates how to enable preview features in a Prisma schema by adding the `namedConstraints` feature to `previewFeatures`. Required dependency: Ensure Prisma Client is initialized as a generator with `prisma-client-js`. Input: Users must modify their Prisma schema file. No output is returned, but the schema will now support the enabled features.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/10-boilerplate-content.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  //highlight-next-line\n  previewFeatures = [\"namedConstraints\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Worker\nDESCRIPTION: This terminal command snippet shows how to deploy the Cloudflare Worker after setting the DATABASE_URL environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/070-cloudflare-d1.mdx#2025-04-21_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Defining User Model in Prisma GraphQL Schema\nDESCRIPTION: Defines the User type implementing Node interface with fields for user data, relationship to posts and profile, and JSON storage capability.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype User implements Node {\n  id: ID!\n  email: String\n  name: String!\n  posts(where: PostWhereInput, orderBy: Enumerable<PostOrderByInput>, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]\n  role: Role!\n  profile: Profile\n  jsonData: Json\n}\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Database Query Implementation\nDESCRIPTION: Sample code for querying PlanetScale database using Prisma Client in a Cloudflare Worker.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/301-edge/450-deploy-to-cloudflare.mdx#2025-04-21_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaPlanetScale } from '@prisma/adapter-planetscale'\n\nexport default {\n  async fetch(request, env, ctx) {\n    const adapter = new PrismaPlanetScale({\n      url: env.DATABASE_URL,\n      // see https://github.com/cloudflare/workerd/issues/698\n      fetch(url, init) {\n        delete init['cache']\n        return fetch(url, init)\n      },\n    })\n    const prisma = new PrismaClient({ adapter })\n\n    const users = await prisma.user.findMany()\n    const result = JSON.stringify(users)\n    return new Response(result)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for aggregateRaw() in Prisma\nDESCRIPTION: Shows the function signature for the aggregateRaw() method in Prisma. The method accepts optional pipeline and options parameters, following MongoDB's aggregation pipeline structure and command options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n<model>.aggregateRaw(args?: {pipeline?: InputJsonObject[], options?: InputJsonObject}): PrismaPromise<JsonObject>;\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Correctly Recognized 1-N Relation\nDESCRIPTION: Prisma schema showing how the relation between User and Post appears after migrating from a relation table to a foreign key, now properly recognized as a 1-n relation.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_29\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id\n  //highlight-next-line\n  Post Post[]\n}\n\nmodel Post {\n  id       String @id\n  //highlight-start\n  User     User   @relation(fields: [authorId], references: [id])\n  authorId String\n  //highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Packages using yarn\nDESCRIPTION: This snippet demonstrates the command to upgrade the `@prisma/client` and `prisma` packages to version 6 using yarn.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/500-upgrading-to-prisma-6.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nyarn up prisma@6 @prisma/client@6\n```\n\n----------------------------------------\n\nTITLE: Mapping PostgreSQL Extension Names in Prisma Schema\nDESCRIPTION: Shows how to use the map argument to handle PostgreSQL extensions with names that are invalid identifiers in Prisma schema, such as uuid-ossp.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/80-postgresql-extensions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [uuidOssp(map: \"uuid-ossp\")]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PKCS12 Certificate for PostgreSQL SSL Connection in Prisma\nDESCRIPTION: OpenSSL command to create a PKCS12 certificate file from client key and certificate for SSL connections.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/300-postgresql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out client-identity.p12 -inkey client-key.pem -in client-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Output of Current Platform and Engines\nDESCRIPTION: Expected output when checking the Prisma version which includes the paths and versions of the query engine and other engines.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/100-under-the-hood/100-engines.mdx#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCurrent platform     : darwin\nQuery Engine         : query-engine d6ff7119649922b84e413b3b69660e2f49e2ddf3 (at /custom/my-query-engine-unix)\nMigration Engine     : migration-engine-cli d6ff7119649922b84e413b3b69660e2f49e2ddf3 (at /myproject/node_modules/@prisma/engines/migration-engine-unix)\nIntrospection Engine : introspection-core d6ff7119649922b84e413b3b69660e2f49e2ddf3 (at /myproject/node_modules/@prisma/engines/introspection-engine-unix)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma seed script in package.json\nDESCRIPTION: JSON configuration in package.json to define how Prisma should run the seed script using the tsx runtime for TypeScript execution.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"prisma\": {\n  \"seed\": \"tsx prisma/seed.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 GraphQL Datamodel with Link Table Relation\nDESCRIPTION: Example of a Prisma 1 datamodel using GraphQL syntax where a one-to-many relation is defined with a link table approach.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @id\n  author: User! @relation(link: TABLE)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Timeout in Prisma Interactive Transactions\nDESCRIPTION: Example of configuring a 30-second timeout for a Prisma interactive transaction. This is necessary when increasing the interactive transaction timeout in the Prisma Console to match the higher limit.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/250-connection-pooling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction(\n  async (tx) => {\n    // Your queries go here\n  },\n  {\n    timeout: 30000, // 30s\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining User Type with @nexus/schema and nexus-plugin-prisma\nDESCRIPTION: This code snippet defines the `User` type using the latest `@nexus/schema` and `nexus-plugin-prisma`. It uses `objectType` to create the type and `t.model` to expose the Prisma model's fields.  It demonstrates how to selectively expose fields and configure relations with options like pagination, ordering, and filtering.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"const User = objectType({\\n  name: 'User',\\n  definition(t) {\\n    t.model.id()\\n    t.model.name()\\n    t.model.email()\\n    t.model.jsonData()\\n    t.model.role()\\n    t.model.posts({\\n      pagination: false,\\n      ordering: false,\\n      filtering: false,\\n    })\\n    t.model.profile()\\n  },\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Definition for Prisma\nDESCRIPTION: This code snippet illustrates how to set environment variables for a Prisma project, specifically for the database connection URL. It uses the standard format for MySQL connections, which Prisma supports for various databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n# Environment variables declared in this file are automatically made available to Prisma.\n# See the documentation for more detail: https://pris.ly/d/prisma-schema#using-environment-variables\n\n# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.\n# See the documentation for all the connection string options: https://pris.ly/d/connection-strings\n\nDATABASE_URL=\"mysql://user:password@localhost:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Generating CUID values as MongoDB IDs using Prisma\nDESCRIPTION: Sets up a User model for MongoDB with an ID field that generates CUID values and maps to MongoDB's _id field. Note that this doesn't generate a valid ObjectId.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_73\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id   String @id @default(cuid()) @map(\"_id\")\n  name String\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Relation Joins Feature in Prisma Schema\nDESCRIPTION: This snippet shows how to enable the relationJoins preview feature in the Prisma schema file, which is required to use the relationLoadStrategy option for PostgreSQL and MySQL databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/037-relation-queries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"relationJoins\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Final Prisma Schema After Upgrade\nDESCRIPTION: This is the final version of the Prisma schema after applying all upgrades and adjustments. It includes updated model definitions with proper Prisma ORM 2 attributes and relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_22\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String   @id @default(cuid())\n  name     String\n  email    String?  @unique\n  jsonData Json?\n  role     Role     @default(CUSTOMER)\n  Post     Post[]\n  Profile  Profile?\n}\n\nmodel Post {\n  id        String     @id @default(cuid())\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n  title     String\n  content   String?\n  published Boolean    @default(false)\n  authorId  String?\n  User      User?      @relation(fields: [authorId], references: [id])\n  Category  Category[] @relation(references: [id])\n}\n\nmodel Profile {\n  id   String  @id @default(cuid())\n  bio  String?\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n\nmodel Category {\n  id   String @id @default(cuid())\n  name String\n  Post Post[] @relation(references: [id])\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Type Resolver with Prisma Client\nDESCRIPTION: This code demonstrates how to implement the type resolver for the Post type, resolving the 'author' and 'categories' relations using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    // ... your query resolvers\n  },\n  Mutation: {\n    // ... your mutation resolvers\n  },\n  User: {\n    // ... your type resolvers for `User` from before\n  },\n  Post: {\n    author: (parent, args, context) => {\n      return context.prisma.post\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .author()\n    },\n    categories: (parent, args, context) => {\n      return context.prisma.post\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .categories()\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting object with delete: TypeORM\nDESCRIPTION: Deletes a user using TypeORM's `delete` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nawait userRepository.delete(id)\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Distribution Tag for Prisma Packages\nDESCRIPTION: Command to install the latest development version of Prisma Client and Prisma CLI for testing new features before official release\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpm install @prisma/client@dev prisma@dev\n```\n\n----------------------------------------\n\nTITLE: Starting Prisma Studio without Browser\nDESCRIPTION: Command to launch Prisma Studio without opening a new browser tab\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_35\n\nLANGUAGE: terminal\nCODE:\n```\nprisma studio --browser none\n```\n\n----------------------------------------\n\nTITLE: Enabling TypedSQL Preview Feature in Prisma Schema\nDESCRIPTION: Configuration code to add the typedSql preview feature flag to the Prisma schema file, enabling TypedSQL capabilities.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"typedSql\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Upgrade CLI\nDESCRIPTION: Command to start the Prisma Upgrade CLI process by providing paths to Prisma 1 and Prisma 2 schema files.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_23\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma-upgrade prisma1/prisma.yml prisma/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Updated Prisma Schema After Database Modifications\nDESCRIPTION: The resulting Prisma schema after resolving schema incompatibilities and re-introspecting the database. This schema reflects the changes made to the database structure, including proper relations and data types.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_31\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String   @id\n  name     String\n  email    String?  @unique\n  jsonData Json?\n  role     Role     @default(CUSTOMER)\n  Post     Post[]\n  Profile  Profile?\n}\n\nmodel Post {\n  id        String     @id\n  createdAt DateTime   @default(now())\n  updatedAt DateTime\n  title     String\n  content   String?\n  published Boolean    @default(false)\n  authorId  String?\n  User      User?      @relation(fields: [authorId], references: [id])\n  Category  Category[] @relation(references: [id])\n}\n\nmodel Category {\n  id   String @id\n  name String\n  Post Post[] @relation(references: [id])\n}\n\nmodel Profile {\n  bio  String?\n  id   String  @id\n  user String? @unique\n  User User?   @relation(fields: [user], references: [id])\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Environments within a Project\nDESCRIPTION: This command lists all environments for a specified project, which must be indicated by the project ID argument.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform environment show \\\n--project $INSERT_PROJECT_ID \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Migration - Adding Coinflips Column\nDESCRIPTION: SQL command to add a new boolean array column to the User table for PostgreSQL scalar list migration\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"User\" ADD COLUMN coinflips BOOLEAN[];\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Server using Integrated Security (Windows)\nDESCRIPTION: This snippet demonstrates how to connect to Microsoft SQL Server using integrated security with the currently logged in Windows user. It includes the connection string format and necessary parameters.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsqlserver://localhost:1433;database=sample;integratedSecurity=true;trustServerCertificate=true;\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up SQLite Database Files\nDESCRIPTION: Commands to remove the SQLite database file and migrations folder when switching to a different database provider like PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/900-prisma-nuxt-module.mdx#2025-04-21_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\nrm prisma/dev.db # Delete SQLite database file\nrm -r prisma/migrations # Delete the pre-existing migrations folder\n```\n\n----------------------------------------\n\nTITLE: Windows Debugging Configuration\nDESCRIPTION: Example of setting the DEBUG environment variable in Windows environments using the set command instead of export.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/700-debugging-and-troubleshooting/140-debugging.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset DEBUG=\"prisma*\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts Containing Specific Text with Prisma Client\nDESCRIPTION: Demonstrates how to query Post records that contain a specific text string ('hello') in either the title or content fields using Prisma Client's findMany method with OR filter conditions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases/300-next-steps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filteredPosts = await prisma.post.findMany({\n  where: {\n    OR: [{ title: { contains: 'hello' } }, { content: { contains: 'hello' } }],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in Prisma Schema\nDESCRIPTION: Example showing how to use environment variables in a Prisma schema to configure the database connection URL securely.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/10-overview/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Server Docker Container Instance\nDESCRIPTION: This command creates and runs a new Docker container instance of SQL Server 2019. It sets the EULA acceptance, SA password, and maps port 1433. Replace 'myPassword' with your desired password.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/800-sql-server/030-sql-server-docker.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name sql_container -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=myPassword' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Processor Based on Environment\nDESCRIPTION: TypeScript code snippet showing how to configure the appropriate span processor (BatchSpanProcessor for production, SimpleSpanProcessor for development) based on the environment.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SimpleSpanProcessor,\n  BatchSpanProcessor,\n} from '@opentelemetry/sdk-trace-base'\n\nif (process.env.NODE_ENV === 'production') {\n  provider.addSpanProcessor(new BatchSpanProcessor(otlpTraceExporter))\n} else {\n  provider.addSpanProcessor(new SimpleSpanProcessor(otlpTraceExporter))\n}\n```\n\n----------------------------------------\n\nTITLE: Serial Transaction Execution with Promise.all\nDESCRIPTION: Demonstrates how transactions within Promise.all are executed serially due to database connection limitations, even though Promise.all typically runs operations in parallel.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/058-transactions.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction(async (prisma) => {\n  await Promise.all([\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n    prisma.user.findMany(),\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Generator (Vite Dev Note) - Prisma\nDESCRIPTION: Configures the Prisma client generator specifically for environments like Vite where the JavaScript engine might differ. It sets the provider to `prisma-client` instead of the default `prisma-client-js` and specifies the output directory for the generated client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n\t//add-next-line\n  provider = \"prisma-client\"\n  //delete-next-line\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Schema with Validation Errors\nDESCRIPTION: Example showing what happens when the 'prisma format' command encounters validation errors in the schema file. The command will report the errors and not complete the formatting.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/200-prisma-cli-reference.mdx#2025-04-21_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\nprisma format\n```\n\n----------------------------------------\n\nTITLE: Package.json Overrides for OpenTelemetry Compatibility\nDESCRIPTION: JSON configuration to add to package.json for ensuring compatibility between dd-trace and the OpenTelemetry API. This is necessary because dd-trace doesn't yet support the latest versions of OpenTelemetry.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-data-dog.mdx#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"@opentelemetry/api\": \"1.8.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BRIN Index in SQL\nDESCRIPTION: This snippet presents the SQL commands corresponding to the Prisma schema, creating a table `Example` with an `INT4` column named `value`, and establishing a `BRIN` index on that column utilizing the `int4_bloom_ops` operator class. The index is named `Example_value_idx`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/30-indexes.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Example\" (\n  id INT PRIMARY KEY,\n  value INT4 NOT NULL\n);\n\nCREATE INDEX \"Example_value_idx\" ON \"Example\" USING BRIN (value int4_bloom_ops);\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete Middleware in Prisma with TypeScript\nDESCRIPTION: A comprehensive implementation of soft delete middleware for Prisma Client that handles different query types (findUnique, findMany, update, delete) and modifies their behavior to support soft deletion. The middleware transforms delete operations into updates and filters out soft-deleted records from read operations unless explicitly requested.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/300-client-extensions/500-middleware/100-soft-delete-middleware.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client'\n\nconst prisma = new PrismaClient({})\n\nasync function main() {\n  /***********************************/\n  /* SOFT DELETE MIDDLEWARE */\n  /***********************************/\n\n  prisma.$use(async (params, next) => {\n    if (params.model == 'Post') {\n      if (params.action === 'findUnique' || params.action === 'findFirst') {\n        params.action = 'findFirst'\n        params.args.where['deleted'] = false\n      }\n      if (\n        params.action === 'findFirstOrThrow' ||\n        params.action === 'findUniqueOrThrow'\n      ) {\n        if (params.args.where) {\n          if (params.args.where.deleted == undefined) {\n            params.args.where['deleted'] = false\n          }\n        } else {\n          params.args['where'] = { deleted: false }\n        }\n      }\n      if (params.action === 'findMany') {\n        if (params.args.where) {\n          if (params.args.where.deleted == undefined) {\n            params.args.where['deleted'] = false\n          }\n        } else {\n          params.args['where'] = { deleted: false }\n        }\n      }\n    }\n    return next(params)\n  })\n\n  prisma.$use(async (params, next) => {\n    if (params.model == 'Post') {\n      if (params.action == 'update') {\n        params.action = 'updateMany'\n        params.args.where['deleted'] = false\n      }\n      if (params.action == 'updateMany') {\n        if (params.args.where != undefined) {\n          params.args.where['deleted'] = false\n        } else {\n          params.args['where'] = { deleted: false }\n        }\n      }\n    }\n    return next(params)\n  })\n\n  prisma.$use(async (params, next) => {\n    if (params.model == 'Post') {\n      if (params.action == 'delete') {\n        params.action = 'update'\n        params.args['data'] = { deleted: true }\n      }\n      if (params.action == 'deleteMany') {\n        params.action = 'updateMany'\n        if (params.args.data != undefined) {\n          params.args.data['deleted'] = true\n        } else {\n          params.args['data'] = { deleted: true }\n        }\n      }\n    }\n    return next(params)\n  })\n\n  /***********************************/\n  /* TEST */\n  /***********************************/\n\n  const titles = [\n    { title: 'How to create soft delete middleware' },\n    { title: 'How to install Prisma' },\n    { title: 'How to update a record' },\n  ]\n\n  console.log('\\u001b[1;34mSTARTING SOFT DELETE TEST \\u001b[0m')\n  console.log('\\u001b[1;34m#################################### \\u001b[0m')\n\n  let i = 0\n  let posts = new Array()\n\n  for (i == 0; i < 3; i++) {\n    const createPostOperation = prisma.post.create({\n      data: titles[Math.floor(Math.random() * titles.length)],\n    })\n    posts.push(createPostOperation)\n  }\n\n  var postsCreated = await prisma.$transaction(posts)\n\n  console.log(\n    'Posts created with IDs: ' +\n      '\\u001b[1;32m' +\n      postsCreated.map((x) => x.id) +\n      '\\u001b[0m'\n  )\n\n  const deletePost = await prisma.post.delete({\n    where: {\n      id: postsCreated[0].id,\n    },\n  })\n\n  const deleteManyPosts = await prisma.post.deleteMany({\n    where: {\n      id: {\n        in: [postsCreated[1].id, postsCreated[2].id],\n      },\n    },\n  })\n\n  const getOnePost = await prisma.post.findUnique({\n    where: {\n      id: postsCreated[0].id,\n    },\n  })\n\n  const getOneUniquePostOrThrow = async () =>\n    await prisma.post.findUniqueOrThrow({\n      where: {\n        id: postsCreated[0].id,\n      },\n    })\n\n  const getOneFirstPostOrThrow = async () =>\n    await prisma.post.findFirstOrThrow({\n      where: {\n        id: postsCreated[0].id,\n      },\n    })\n\n  const getPosts = await prisma.post.findMany({\n    where: {\n      id: {\n        in: postsCreated.map((x) => x.id),\n      },\n    },\n  })\n\n  const getPostsAnDeletedPosts = await prisma.post.findMany({\n    where: {\n      id: {\n        in: postsCreated.map((x) => x.id),\n      },\n      deleted: true,\n    },\n  })\n\n  const updatePost = await prisma.post.update({\n    where: {\n      id: postsCreated[1].id,\n    },\n    data: {\n      title: 'This is an updated title (update)',\n    },\n  })\n\n  const updateManyDeletedPosts = await prisma.post.updateMany({\n    where: {\n      deleted: true,\n      id: {\n        in: postsCreated.map((x) => x.id),\n      },\n    },\n    data: {\n      title: 'This is an updated title (updateMany)',\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Applying the Migration - Prisma Migrate - Terminal\nDESCRIPTION: This command applies the generated migration that may include unsupported features to the database, making the defined changes active.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/80-unsupported-database-features.mdx#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Billing for Interactive Transactions in Prisma Accelerate\nDESCRIPTION: Demonstrates how interactive transactions in Prisma Accelerate are billed based on individual operations. This example shows two billable queries within a transaction.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/600-faq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.$transaction(async (tx) => {\n  await tx.user.deleteMany({ where: { name: 'John Doe' } });\n  await tx.user.createMany({ data });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Check Constraint to Existing Table\nDESCRIPTION: Creates a table and then alters it to add a check constraint that prevents the category from being 'clothing'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/800-check-constraints.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"public\".\"lastproduct\" (\n  category TEXT\n);\n\nALTER TABLE \"public\".\"lastproduct\"\n  ADD CONSTRAINT \"category_not_clothing\" CHECK (category <> 'clothing');\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database Schema\nDESCRIPTION: SQL commands to create three related tables: User, Post, and Profile. Defines primary keys, foreign key relationships, and column constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/150-introspection-typescript-postgresql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"public\".\"User\" (\n  id SERIAL PRIMARY KEY NOT NULL,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE \"public\".\"Post\" (\n  id SERIAL PRIMARY KEY NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n  content TEXT,\n  published BOOLEAN NOT NULL DEFAULT false,\n  \"authorId\" INTEGER NOT NULL,\n  FOREIGN KEY (\"authorId\") REFERENCES \"public\".\"User\"(id)\n);\n\nCREATE TABLE \"public\".\"Profile\" (\n  id SERIAL PRIMARY KEY NOT NULL,\n  bio TEXT,\n  \"userId\" INTEGER UNIQUE NOT NULL,\n  FOREIGN KEY (\"userId\") REFERENCES \"public\".\"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Current User Information\nDESCRIPTION: This command displays information about the currently authenticated user in the Prisma Data Platform.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform auth show --early-access\n```\n\n----------------------------------------\n\nTITLE: Adding Mutation Type to Nexus Schema\nDESCRIPTION: Configuration update to include the new Mutation type in the makeSchema function, ensuring it's properly registered in the Nexus schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const schema = makeSchema({\n  types: [Query, User, Post, Profile, Category, UserUniqueInput, Mutation],\n  plugins: [nexusSchemaPrisma()],\n  outputs: {\n    schema: __dirname + '/../schema.graphql',\n    typegen: __dirname + '/generated/nexus.ts',\n  },\n  typegenAutoConfig: {\n    sources: [\n      {\n        source: '@prisma/client',\n        alias: 'prisma',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy for Prisma CLI in Bash\nDESCRIPTION: This snippet demonstrates how to set an HTTP proxy for the Prisma CLI using the HTTP_PROXY environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/300-environment-variables-reference.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_PROXY=http://proxy.example.com\n```\n\n----------------------------------------\n\nTITLE: SQL One-to-One Relation Creation\nDESCRIPTION: SQL commands to create tables with a one-to-one relation using foreign key constraints and unique constraints.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/100-prisma-schema/20-data-model/20-relations/100-one-to-one-relations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n    id SERIAL PRIMARY KEY\n);\nCREATE TABLE \"Profile\" (\n    id SERIAL PRIMARY KEY,\n    \"userId\" INTEGER NOT NULL UNIQUE,\n    FOREIGN KEY (\"userId\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Data with SolidJS For Component\nDESCRIPTION: This snippet shows how to use SolidJS's <For> component to iterate over and render user data with their associated posts in the component.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/180-solid-start.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./app.css\";\nimport { createResource, For } from \"solid-js\";\nimport { User, Post } from \"@prisma/client\";\n\ntype UserWithPosts = User & {\n  posts: Post[];\n};\n\nconst fetchUsers = async () => {\n  const res = await fetch(\"http://localhost:3000/api/users\");\n  return res.json();\n};\n\nexport default function App() {\n  const [users, { mutate, refetch }] =\n    createResource<UserWithPosts[]>(fetchUsers);\n\n  return (\n    <main>\n      <h1>SolidJS + Prisma</h1>\n      <For each={users() ?? []}>\n        {(user) => (\n          <div>\n            <h3>{user.name}</h3>\n            <For each={user.posts}>{(post) => <p>{post.title}</p>}</For>\n          </div>\n        )}\n      </For>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Configuration to exclude generated Prisma client from version control\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-prismaPostgres.mdx#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ngenerated/prisma/\n```\n\n----------------------------------------\n\nTITLE: Generating PKCS12 Certificate for SSL Connection\nDESCRIPTION: This command shows how to use OpenSSL to generate a PKCS12 certificate file from a client key and client certificate. This file is used for SSL connections to MySQL databases.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/400-mysql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out client-identity.p12 -inkey client-key.pem -in client-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project within a Workspace\nDESCRIPTION: This command creates a new project in a specified workspace. The workspace ID and project name can be provided, while a default name is generated if omitted.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform project create \\\n--workspace $INSERT_WORKSPACE_ID \\\n--name \"INSERT_PROJECT_NAME\" \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for findRaw() in Prisma\nDESCRIPTION: Shows the function signature for the findRaw() method in Prisma. The method accepts optional filter and options parameters, allowing for MongoDB query predicates and find command options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n<model>.findRaw(args?: {filter?: InputJsonObject, options?: InputJsonObject}): PrismaPromise<JsonObject>;\n```\n\n----------------------------------------\n\nTITLE: Hyperlinks: Bad Example\nDESCRIPTION: This snippet shows an example of a discouraged hyperlink, which uses the word \"here\" as the link text.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nRead more in the Prisma ORM docs [here](/orm)\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Tools on macOS\nDESCRIPTION: Commands to install PostgreSQL 17 and verify pg_dump tools on macOS using Homebrew\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/500-backups.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nbrew install postgresql@17\nwhich pg_dump\nwhich pg_restore\n```\n\n----------------------------------------\n\nTITLE: Disabling Prisma Accelerate with CLI\nDESCRIPTION: This command disables Prisma Accelerate for a specific environment. It requires the environment ID as an argument. The `--early-access` flag might be needed for certain versions or features.\nSOURCE: https://github.com/prisma/docs/blob/main/content/500-platform/60-platform-cli/20-commands.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma platform accelerate disable \\\n--environment $INSERT_ENVIRONMENT_ID \\\n--early-access\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Type Resolver with Prisma Client\nDESCRIPTION: This code demonstrates how to implement the type resolver for the Category type, resolving the 'posts' relation using Prisma Client.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    // ... your query resolvers\n  },\n  Mutation: {\n    // ... your mutation resolvers\n  },\n  User: {\n    // ... your type resolvers for `User` from before\n  },\n  Post: {\n    // ... your type resolvers for `Post` from before\n  },\n  Profile: {\n    // ... your type resolvers for `User` from before\n  },\n  Category: {\n    posts: (parent, args, context) => {\n      return context.prisma\n        .findUnique({\n          where: { id: parent.id },\n        })\n        .posts()\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Query Engine Library Location in Bash\nDESCRIPTION: This snippet demonstrates how to set a custom location for the query engine library using the PRISMA_QUERY_ENGINE_LIBRARY environment variable.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/300-environment-variables-reference.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPRISMA_QUERY_ENGINE_LIBRARY=custom/libquery_engine-<target>.so.node\n# Example: ./prisma/binaries/libquery_engine-linux-arm64-openssl-1.0.x.so.node\n```\n\n----------------------------------------\n\nTITLE: MySQL Full-Text Search Query\nDESCRIPTION: This snippet demonstrates a full-text search query in MySQL using the `MATCH AGAINST` syntax. It selects all rows from the `Blog` table where the `content` column matches the search term in natural language mode.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/060-full-text-search.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Blog WHERE MATCH(content) AGAINST(${term} IN NATURAL LANGUAGE MODE);\n```\n\n----------------------------------------\n\nTITLE: Transformed JSON Output for Explicit Relations\nDESCRIPTION: The simplified JSON structure after transforming the explicit relation query result, which now resembles the output format of an implicit relation query.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/600-help-and-troubleshooting/200-working-with-many-to-many-relations.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"title\": \"Types of relations\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"prisma\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"dev\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Definition in SQL Comments\nDESCRIPTION: Example SQL comment syntax for defining parameter types in TypedSQL queries, showing basic type definition format.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/100-typedsql.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n-- @param {Type} $N:alias optional description\n```\n\n----------------------------------------\n\nTITLE: SQL Migration to Create and Apply Enum Type\nDESCRIPTION: SQL commands to create an enum type in the database and modify a column to use it, allowing Prisma to correctly recognize it during introspection.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE \"Role\" AS ENUM ('CUSTOMER', 'ADMIN');\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"User\" ALTER COLUMN \"role\" TYPE \"Role\"\nUSING \"role\"::text::\"Role\";\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Type with @nexus/schema\nDESCRIPTION: Updated Profile type definition using @nexus/schema, explicitly listing all fields from the Prisma model.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst Profile = objectType({\n  name: 'Profile',\n  definition(t) {\n    t.model.id()\n    t.model.bio()\n    t.model.user()\n    t.model.userId()\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma configuration interface in TypeScript\nDESCRIPTION: This code defines the PrismaConfig interface, which specifies the structure for Prisma configuration options including early access, schema location, and settings for studio and migrate features.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/325-prisma-config-reference.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type PrismaConfig<Env extends EnvVars = never> = {\n  /**\n   * Whether features with an unstable API are enabled.\n   */\n  earlyAccess: true;\n  /**\n   * The path to the schema file or path to a folder that shall be recursively searched for .prisma files.\n   */\n  schema?: string;\n  /**\n   * The configuration for Prisma Studio.\n   */\n  studio?: PrismaStudioConfigShape<Env>;\n  /**\n   * The configuration for Prisma Migrate + Introspect\n   */\n  migrate?: PrismaMigrateConfigShape<Env>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma CLI with Bun\nDESCRIPTION: Installs Prisma CLI using Bun package manager.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add prisma\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Unsupported Type in Prisma Schema\nDESCRIPTION: Example of using dbgenerated() to set a default value for an unsupported circle type in PostgreSQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/100-prisma-schema-reference.mdx#2025-04-21_snippet_88\n\nLANGUAGE: prisma\nCODE:\n```\ncircle     Unsupported(\"circle\")?   @default(dbgenerated(\"'<(10,4),11>'::circle\"))\n```\n\n----------------------------------------\n\nTITLE: Verifying Heroku CLI Authentication\nDESCRIPTION: Command to check which Heroku account you're currently logged in as.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nheroku auth:whoami\n```\n\n----------------------------------------\n\nTITLE: Initial SQL Server Migration Schema\nDESCRIPTION: SQL migration script that creates tables for Post, Profile, and User entities with their respective constraints and relationships.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-sqlserver.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [dbo].[Post] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [createdAt] DATETIME2 NOT NULL CONSTRAINT [Post_createdAt_df] DEFAULT CURRENT_TIMESTAMP,\n    [updatedAt] DATETIME2 NOT NULL,\n    [title] VARCHAR(255) NOT NULL,\n    [content] NVARCHAR(1000),\n    [published] BIT NOT NULL CONSTRAINT [Post_published_df] DEFAULT 0,\n    [authorId] INT NOT NULL,\n    CONSTRAINT [Post_pkey] PRIMARY KEY ([id])\n);\n\nCREATE TABLE [dbo].[Profile] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [bio] NVARCHAR(1000),\n    [userId] INT NOT NULL,\n    CONSTRAINT [Profile_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [Profile_userId_key] UNIQUE ([userId])\n);\n\nCREATE TABLE [dbo].[User] (\n    [id] INT NOT NULL IDENTITY(1,1),\n    [email] NVARCHAR(1000) NOT NULL,\n    [name] NVARCHAR(1000),\n    CONSTRAINT [User_pkey] PRIMARY KEY ([id]),\n    CONSTRAINT [User_email_key] UNIQUE ([email])\n);\n\nALTER TABLE [dbo].[Post] ADD CONSTRAINT [Post_authorId_fkey] FOREIGN KEY ([authorId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n\nALTER TABLE [dbo].[Profile] ADD CONSTRAINT [Profile_userId_fkey] FOREIGN KEY ([userId]) REFERENCES [dbo].[User]([id]) ON DELETE NO ACTION ON UPDATE CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Introspected Schema with String Instead of JSON\nDESCRIPTION: Result of introspecting a Prisma 1 Json field in Prisma ORM 2.x, showing how it's recognized as a String.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_32\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       String  @id\n  jsonData String?\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM Schema: CUID ID Introspection\nDESCRIPTION: This Prisma schema represents the result of introspecting a database created by Prisma 1, where CUIDs were automatically generated for the `id` field.  The schema correctly identifies `id` as a string and marks it as the ID field, but it doesn't reflect the CUID generation behavior, necessitating manual intervention.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma file=schema.prisma showLineNumbers\nmodel Post {\n  id String @id\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Prisma ORM 2.x Introspection for UpdatedAt Field\nDESCRIPTION: Presents introspection result highlighting absence of runtime-managed timestamp attributes which must be added manually to the Prisma schema.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Post {\n  id        String   @id\n  updatedAt DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading the GraphQL Schema with CLI\nDESCRIPTION: This shell command uses the GraphQL CLI to download the full schema from a GraphQL Yoga endpoint, saving it locally as 'schema.graphql'. Replace '__GRAPHQL_YOGA_ENDPOINT__' with your server's actual endpoint. The command doesn't fetch all backed data but only the schema, and requires npm to execute.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx graphql get-schema --endpoint __GRAPHQL_YOGA_ENDPOINT__ --output schema.graphql --no-all\n```\n\n----------------------------------------\n\nTITLE: Using Prisma CLI with Bun\nDESCRIPTION: Executes Prisma CLI commands using Bun's package runner.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/400-tools/05-prisma-cli.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbunx prisma\n```\n\n----------------------------------------\n\nTITLE: Aggregating User Ages in Prisma\nDESCRIPTION: Demonstrates how to use Prisma Client's aggregate function to calculate the average age of users. The query can be combined with filtering and ordering options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/100-queries/056-aggregation-grouping-summarizing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst aggregations = await prisma.user.aggregate({\n  _avg: {\n    age: true,\n  },\n})\n\nconsole.log('Average age:' + aggregations._avg.age)\n```\n\n----------------------------------------\n\nTITLE: Unsafe SQL Query Execution Using Prisma.raw in Prisma\nDESCRIPTION: Shows multiple examples of vulnerable uses of $queryRaw with Prisma.raw, which can lead to SQL injection if user input is not properly sanitized.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/200-raw-queries.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\nconst result = await prisma.$queryRaw`SELECT id, name FROM \"User\" WHERE name = ${Prisma.raw(\n  inputString\n)}`;\nconsole.log(result);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\nconst result = await prisma.$queryRaw(\n  Prisma.raw(`SELECT id, name FROM \"User\" WHERE name = ${inputString}`)\n);\nconsole.log(result);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst inputString = `'Sarah' UNION SELECT id, title FROM \"Post\"`;\nconst query = Prisma.raw(`SELECT id, name FROM \"User\" WHERE name = ${inputString}`);\nconst result = await prisma.$queryRaw(query);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Displaying users and posts in the page component\nDESCRIPTION: Complete SvelteKit page component that uses Svelte's each block to iterate through users and their posts, displaying them as a nested list.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/190-sveltekit.mdx#2025-04-21_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n\tlet { data } = $props();\n</script>\n\n<h1>SvelteKit + Prisma</h1>\n\n{#each data.users as user}\n  <h2>{user.name}</h2>\n  {#each user.posts as post}\n    <ul>\n      <li><a href={post.content}>{post.title}</a></li>\n    </ul>\n  {/each}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Dependencies via NPM\nDESCRIPTION: Commands for installing required Prisma and OpenTelemetry dependencies.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/600-observability-and-logging/250-opentelemetry-tracing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install prisma@latest --save-dev\nnpm install @prisma/client@latest --save\nnpm install @prisma/instrumentation@latest --save\nnpm install @opentelemetry/api@latest --save\n```\n\n----------------------------------------\n\nTITLE: Using Prisma MCP Server with OpenAI Agents SDK in Python\nDESCRIPTION: Python example demonstrating how to integrate the Prisma MCP Server with the OpenAI Agents SDK. The script sets up an async context, initializes the MCP server, creates an assistant with access to Prisma tools, and processes a user request.\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/650-mcp-server.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import AsyncOpenAI\nfrom openai.types.beta import Assistant\nfrom openai.beta import AsyncAssistantExecutor\nfrom openai.experimental.mcp import MCPServerStdio\nfrom openai.types.beta.threads import Message, Thread\nfrom openai.types.beta.tools import ToolCall\n\n# Async context required for MCPServerStdio\nimport asyncio\n\nasync def main():\n    # Start the Prisma MCP server using stdio\n    async with MCPServerStdio(\n        params={\n            \"command\": \"npx\",\n            \"args\": [\"-y\", \"prisma\", \"mcp\"]\n        }\n    ) as prisma_server:\n        # Optional: view available tools\n        tools = await prisma_server.list_tools()\n        print(\"Available tools:\", [tool.name for tool in tools])\n\n        # Set up the agent with MCP server\n        agent = Assistant(\n            name=\"Prisma Assistant\",\n            instructions=\"Use the Prisma tools to help the user with database tasks.\",\n            mcp_servers=[prisma_server],\n        )\n\n        executor = AsyncAssistantExecutor(agent=agent)\n\n        # Create a thread and send a message\n        thread = Thread(messages=[Message(role=\"user\", content=\"Create a new user in the database\")])\n        response = await executor.run(thread=thread)\n\n        print(\"Agent response:\")\n        for message in response.thread.messages:\n            print(f\"{message.role}: {message.content}\")\n\n# Run the async main function\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Querying Closest PointOfInterest Records\nDESCRIPTION: This extension adds a custom method to find the closest points of interest to given coordinates using raw SQL with SafeQL for type safety. The method requires latitude and longitude as inputs and returns an array of `MyPointOfInterest` objects.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/150-using-raw-sql/300-safeql.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient().$extends({\n  model: {\n    pointOfInterest: {\n      async create(data: {\n        name: string\n        latitude: number\n        longitude: number\n      }) {\n        // ... same code as before\n      },\n\n      async findClosestPoints(latitude: number, longitude: number) {\n        // Query for clostest points of interests\n        const result = await prisma.$queryRaw<\n          {\n            id: number | null\n            name: string | null\n            st_x: number | null\n            st_y: number | null\n          }[]\n        >`SELECT id, name, ST_X(location::geometry), ST_Y(location::geometry) \n            FROM \"PointOfInterest\" \n            ORDER BY ST_DistanceSphere(location::geometry, ST_MakePoint(${longitude}, ${latitude})) DESC`\n\n        // Transform to our custom type\n        const pois: MyPointOfInterest[] = result.map((data) => {\n          return {\n            name: data.name,\n            location: {\n              latitude: data.st_x || 0,\n              longitude: data.st_y || 0,\n            },\n          }\n        })\n\n        // Return data\n        return pois\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Statements for ENUM Type Conversion\nDESCRIPTION: SQL commands to convert text columns to proper ENUM types in the database. Creates a new ENUM type and alters the existing column to use it.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE \"default$default\".\"Role\" AS ENUM ('ADMIN', 'CUSTOMER');\nALTER TABLE \"default$default\".\"User\" ALTER COLUMN \"role\" SET DATA TYPE \"default$default\".\"Role\" using \"role\"::\"default$default\".\"Role\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Home Page in Next.js\nDESCRIPTION: This code snippet creates a basic home page with a static list of users. It displays a title and an ordered list with two hardcoded user names.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/090-nextjs.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Home() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center -mt-16\">\n      <h1 className=\"text-4xl font-bold mb-8 font-[family-name:var(--font-geist-sans)] text-[#333333]\">\n        Superblog\n      </h1>\n      <ol className=\"list-decimal list-inside font-[family-name:var(--font-geist-sans)]\">\n        <li className=\"mb-2\">Alice</li>\n        <li>Bob</li>\n      </ol>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Example\nDESCRIPTION: Example of a MongoDB document structure showing basic blog post data with ID, slug, title and body fields.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/100-introduction/300-data-modeling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _id: '607ee94800bbe41f001fd568',\n  slug: 'prisma-loves-mongodb',\n  title: 'Prisma <3 MongoDB',\n  body: \"This is my first post. Isn't MongoDB + Prisma awesome?!\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Query Resolver with Prisma Binding in JavaScript\nDESCRIPTION: Original JavaScript implementation of the user query resolver using prisma-binding, showing how to pass arguments and the info object to Prisma's query API.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    user: (_, args, context, info) => {\n      return context.prisma.query.user(\n        {\n          where: args.userUniqueInput,\n        },\n        info\n      )\n    },\n    // ... other resolvers\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration to Increase CUID Field Length\nDESCRIPTION: SQL commands to increase the length of ID columns to accommodate the potentially longer CUIDs generated by Prisma ORM 2.x.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nSET FOREIGN_KEY_CHECKS=0;\nALTER TABLE `User` CHANGE `id` `id` char(30) CHARACTER SET utf8 NOT NULL;\nSET FOREIGN_KEY_CHECKS=1;\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel: CUID ID\nDESCRIPTION: This GraphQL snippet shows a Prisma 1 datamodel defining a `Post` type with an `id` field annotated with `@id`. Prisma 1 automatically generated CUIDs for this field at runtime. Because this behavior is internal to Prisma 1 and not represented in the database schema, introspection in later Prisma versions won't recognize it.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\ntype Post {\n  id: ID! @id\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Legacy Driver Adapter Implementation (Pre-6.6.0)\nDESCRIPTION: Example of how to implement a LibSQL driver adapter before Prisma v6.6.0, showing the old pattern of manually instantiating the driver\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/050-overview/500-databases/200-database-drivers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@libsql/client'\nimport { PrismaLibSQL } from '@prisma/adapter-libsql'\nimport { PrismaClient } from '@prisma/client'\n\nconst driver = createClient({\n  url: env.LIBSQL_DATABASE_URL,\n  authToken: env.LIBSQL_DATABASE_TOKEN,\n})\nconst adapter = new PrismaLibSQL(driver)\n\nconst prisma = new PrismaClient({ adapter })\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client for Legacy Versions (Below 5.0.0)\nDESCRIPTION: Command to generate Prisma Client with the --data-proxy flag for Prisma versions below 5.0.0, which was the previous name for Accelerate.\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/200-getting-started.mdx#2025-04-21_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma generate --data-proxy\n```\n\n----------------------------------------\n\nTITLE: SDL schema definition with prisma-binding\nDESCRIPTION: GraphQL SDL schema definition for the addPostToCategories mutation using prisma-binding. It takes postId and an array of categoryIds as parameters and returns a Post object.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  addPostToCategories(postId: String!, categoryIds: [String!]!): Post\n  # ... other mutations\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Relations with TypeORM in TypeScript\nDESCRIPTION: Shows how to load related entities (author relation) using TypeORM's relations option. TypeORM does not provide type checking for relation names, allowing typos that cause runtime errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst postRepository = getManager().getRepository(Post)\nconst publishedPosts: Post[] = await postRepository.find({\n  where: { published: true },\n  relations: ['author'],\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Upgrade CLI\nDESCRIPTION: This command runs the Prisma Upgrade CLI to apply final adjustments to the Prisma ORM 2 schema, including adding missing attributes and fixing other issues.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-postgresql.mdx#2025-04-21_snippet_21\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma-upgrade prisma1/prisma.yml prisma/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with SQL Script Using Bash\nDESCRIPTION: This Bash script uses psql to run a SQL script file for database seeding. It includes set flags for immediate exit on error and command printing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/10-seeding.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n# -e Exit immediately when a command returns a non-zero status.\n# -x Print commands before they are executed\nset -ex\n# Seeding command\npsql file.sql\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel: CreatedAt DateTime\nDESCRIPTION: This GraphQL snippet showcases a Prisma 1 datamodel for a `Post` type that contains `id` and `createdAt` fields. The `createdAt` field is annotated with the `@createdAt` directive. This directive auto-generates the value of `createdAt` at runtime in Prisma 1.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql line-number highlight=3;normal\ntype Post {\n  id: ID! @id\n  createdAt: DateTime! @createdAt\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Sequelize using create\nDESCRIPTION: Shows a simpler approach to creating records in Sequelize using the create method, which builds and saves in one step. This is more similar to Prisma's approach.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.create({\n  name: 'Alice',\n  email: 'alice@prisma,io',\n})\n```\n\n----------------------------------------\n\nTITLE: Run Prisma 1 CLI locally (prisma1)\nDESCRIPTION: Invokes the Prisma 1 CLI (installed as prisma1) using `npx`. This ensures the correct version of Prisma CLI is used within the project.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\nnpx prisma1\n```\n\n----------------------------------------\n\nTITLE: Upgrading Prisma Packages with npm\nDESCRIPTION: Command to upgrade prisma and @prisma/client packages to version 3 using npm.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/200-upgrading-versions/800-upgrading-to-prisma-3/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma@3 @prisma/client@3\n```\n\n----------------------------------------\n\nTITLE: TypeORM: Updating a Record\nDESCRIPTION: This code snippet demonstrates how to update an existing user record using TypeORM.  It updates the record with the ID of 1, setting the name field to 'New name'.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Update\nawait userRepository.update(1, { \n  name: 'New name' \n});\n```\n\n----------------------------------------\n\nTITLE: Initial Home Page Implementation in React Router with TypeScript\nDESCRIPTION: Basic implementation of the home page component with static user list using React Router and TypeScript.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/home\";\n\nexport function meta({}: Route.MetaArgs) {\n  return [\n    { title: \"New React Router App\" },\n    { name: \"description\", content: \"Welcome to React Router!\" },\n  ];\n}\n\nexport default function Home({ loaderData }: Route.ComponentProps) {\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center -mt-16\">\n      <h1 className=\"text-4xl font-bold mb-8 font-[family-name:var(--font-geist-sans)]\">\n        Superblog\n      </h1>\n      <ol className=\"list-decimal list-inside font-[family-name:var(--font-geist-sans)]\">\n        <li className=\"mb-2\">Alice</li>\n        <li>Bob</li>\n      </ol>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Prisma 1 CLI as dev dependency\nDESCRIPTION: Installs a specific version (v1.34) of the Prisma 1 CLI as a development dependency.  This allows using both Prisma 1 and Prisma ORM 2 side-by-side.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n# installs v1.34 of the Prisma 1 CLI\nnpm uninstall -g prisma\nnpm install prisma1 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel with Enum Type\nDESCRIPTION: Example Prisma 1 datamodel with an enum type, which is stored as TEXT in the underlying database.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  role: Role\n}\n\nenum Role {\n  ADMIN\n  CUSTOMER\n}\n```\n\n----------------------------------------\n\nTITLE: Enable All Prisma Debugging in Bash\nDESCRIPTION: Setting the DEBUG environment variable to enable all Prisma-related debugging output using the prisma* wildcard.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/700-debugging-and-troubleshooting/140-debugging.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DEBUG=\"prisma*\"\n```\n\n----------------------------------------\n\nTITLE: Creating object with save: TypeORM\nDESCRIPTION: Creates a new user with TypeORM using the `save` method.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.name = 'Alice'\nuser.email = 'alice@prisma.io'\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Installing Turborepo with npm\nDESCRIPTION: Installs Turborepo as a dev dependency in the monorepo project using npm. It requires navigating to the project root directory.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/080-turborepo.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncd ./turborepo-prisma\nnpm install turbo --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Router App\nDESCRIPTION: Uses the create-react-router command to initialize a new React Router application.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/170-react-router-7.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nnpx create-react-router@latest my-app\n```\n\nLANGUAGE: terminal\nCODE:\n```\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: TypeORM Post Entity Model Definition\nDESCRIPTION: Defines a Post entity model for TypeORM with properties for id, title, content, published status, and an author relation to a User entity.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  title: string\n\n  @Column({ nullable: true })\n  content: string\n\n  @Column({ default: false })\n  published: boolean\n\n  @ManyToOne((type) => User, (user) => user.posts)\n  author: User\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Transactions with Sequelize\nDESCRIPTION: Shows how to use automatic transaction management in Sequelize with try/catch for handling errors. This approach uses an explicit rollback in the catch block.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nreturn sequelize.$transaction(async (transaction) => {\n  try {\n    const user = await User.create({\n      name: 'Alice',\n      email: 'alice@prisma,io',\n    })\n    const post1 = await Post.create({\n      title: 'Join us for GraphQL Conf in 2019',\n    })\n    const post2 = await Post.create({\n      title: 'Subscribe to GraphQL Weekly for GraphQL news',\n    })\n    await user.setPosts([post1, post2])\n  } catch (e) {\n    return transaction.rollback()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Inline 1-1 Relation in Prisma 1\nDESCRIPTION: Shows SQL migration defining tables for inline relations without adding a `UNIQUE` constraint leading future introspection to convert the relation to 1-n.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"Profile\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  \"user\" VARCHAR(25),\n  FOREIGN KEY (\"user\") REFERENCES \"User\"(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Records Using TypeORM's remove Method in TypeScript\nDESCRIPTION: Demonstrates an alternative approach to batch deletes in TypeORM using the remove method. This method requires entity instances rather than just IDs, allowing for entity lifecycle hooks to trigger.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getRepository(User)\nconst deleteUsers = await userRepository.remove([user1, user2, user3])\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Directory\nDESCRIPTION: Creates a new directory structure for storing migration files using the mkdir command with recursive flag.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/200-add-to-existing-project/110-relational-databases/170-baseline-your-database-typescript-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nmkdir -p prisma/migrations/0_init\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Filter for Posts - Drizzle - TypeScript\nDESCRIPTION: This snippet demonstrates how to apply a case-insensitive filter on post titles in Drizzle. It uses the 'ilike' operator in the 'where' clause to allow for title matching regardless of letter casing.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// case insensitive filter\nconst posts = await db\n  .select()\n  .from(posts)\n  .where(ilike(posts.title, 'Hello World'))\n```\n\n----------------------------------------\n\nTITLE: Prisma CLI Invocation\nDESCRIPTION: Command to invoke Prisma CLI\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-prismaPostgres.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma\n```\n\n----------------------------------------\n\nTITLE: TypeORM: Deleting a Record\nDESCRIPTION: This code snippet demonstrates how to delete a user record using TypeORM. It deletes the record with the specified ID (1).\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/030-migrate-from-typeorm.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete\nawait userRepository.delete(1);\n```\n\n----------------------------------------\n\nTITLE: Defining Users Query in GraphQL Schema with Prisma Binding\nDESCRIPTION: This snippet shows the GraphQL schema definition for the users query using Prisma Binding.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/06-upgrading-prisma-binding-to-sdl-first.mdx#2025-04-21_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  users(where: UserWhereInput, orderBy: Enumerable<UserOrderByInput>, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  # ... other queries\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma 1.1 Datamodel: Inline 1-1 Relation\nDESCRIPTION: This GraphQL code snippet defines a Prisma ORM v1.1 datamodel with an inline 1-1 relation between `User` and `Profile`. The `profile` field in the `User` type links to the `Profile` type using `@relation(link: INLINE)`. Omitting the `@relation` directive would result in the same behavior because `link: INLINE` is the default for 1-1 relations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\ntype User {\n  id: ID! @id\n  profile: Profile @relation(link: INLINE)\n}\n\ntype Profile {\n  id: ID! @id\n  user: User\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating with TypeORM: Save method\nDESCRIPTION: This snippet shows creating a new user with TypeORM's `save` method, omitting a required field, which can lead to runtime errors.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/01-prisma-and-typeorm.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = getManager().getRepository(User)\nconst newUser = new User()\nnewUser.name = 'Alice'\nuserRepository.save(newUser)\n```\n\n----------------------------------------\n\nTITLE: Implementing editTodo Action with Drizzle ORM in TypeScript\nDESCRIPTION: This code defines an editTodo action using Drizzle ORM to update the text of a Todo record. It imports the necessary functions from drizzle-orm, sets up an update query with the new text value and a where clause to match the id, and revalidates the path.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/060-migrate-from-drizzle.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eq } from \"drizzle-orm\";\nimport { revalidatePath } from \"next/cache\";\n\nimport db from \"@/db/drizzle\";\nimport { todo } from \"@/db/schema\";\n\nexport const editTodo = async (id: number, text: string) => {\n  await db\n    .update(todo)\n    .set({\n      text: text,\n    })\n    .where(eq(todo.id, id));\n\n  revalidatePath(\"/\");\n};\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel: Default Value\nDESCRIPTION: This GraphQL code snippet defines a Prisma 1 datamodel for a `Post` type, including an `id` and a `published` field. The `published` field is set with a `@default` directive, assigning a default value of `false`.  Note that in Prisma 1, this default value is handled by the Prisma server at runtime.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\ntype Post {\n  id: ID! @id\n  published: Boolean @default(value: false)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Endpoint Configuration - default\nDESCRIPTION: Illustrates a sample `endpoint` configuration within `prisma.yml` for Prisma 1 when no service name and stage are specified.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/03-upgrading-the-prisma-layer-mysql.mdx#2025-04-21_snippet_18\n\nLANGUAGE: yml\nCODE:\n```\nendpoint: http://localhost:4466/\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel with CUID\nDESCRIPTION: Shows a Prisma 1 datamodel where ID values are automatically generated as CUIDs by the Prisma server, which aren't represented in the database schema directly.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  id: ID! @id\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Schema Definition for updateBio Mutation with prisma-binding\nDESCRIPTION: GraphQL schema definition for the updateBio mutation using SDL with prisma-binding, allowing users to update their bio information.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_33\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateBio(bio: String!, userUniqueInput: UserUniqueInput!): User\n  # ... other mutations\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Category Type with nexus-prisma\nDESCRIPTION: Original Category type definition using the previous nexus-prisma package.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/04-upgrading-nexus-prisma-to-nexus.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst Category = prismaObjectType({\n  name: 'Category',\n  definition(t) {\n    t.prismaFields(['*'])\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Unused Files with Shell Command - Shell\nDESCRIPTION: This shell command removes the legacy prisma1/datamodel.prisma and prisma1/prisma.yml configuration files as part of upgrading or cleaning up after a Prisma 1 setup. It requires command-line access and permissions to delete files in the prisma1 directory. The command accepts a space-separated list of file paths as input and outputs no content unless an error occurs. Ensure the file paths are correct, as this operation is irreversible.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/05-upgrading-prisma-binding-to-nexus.mdx#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nrm prisma1/datamodel.prisma prisma1/prisma.yml\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Generated by Prisma 1 for Scalar List\nDESCRIPTION: SQL statements generated by Prisma 1 to create tables for a User model with a scalar list of booleans, implemented using an extra table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_45\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"User\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL\n);\n\nCREATE TABLE \"User_coinflips\" (\n    \"nodeId\" VARCHAR(25) REFERENCES \"User\"(id),\n    position INTEGER,\n    value BOOLEAN NOT NULL,\n    CONSTRAINT \"User_coinflips_pkey\" PRIMARY KEY (\"nodeId\", position)\n);\nCREATE UNIQUE INDEX \"User_coinflips_pkey\" ON \"User_coinflips\"(\"nodeId\" text_ops,position int4_ops);\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Commands to initialize a Git repository in the project directory, which is required for deploying to Heroku.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 Datamodel with Scalar List\nDESCRIPTION: Example Prisma 1 datamodel with a scalar list (array) of boolean values, which is implemented using a relation table.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_44\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID! @id\n  coinflips: [Boolean!]! @scalarList(strategy: RELATION)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma and TanStack Start modules in TypeScript\nDESCRIPTION: Import statements for PrismaClient from Prisma and createServerFn from TanStack Start.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/160-tanstack-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"../generated/prisma\";\nimport { createServerFn } from \"@tanstack/react-start\";\n```\n\n----------------------------------------\n\nTITLE: Creating project directory using terminal commands\nDESCRIPTION: Terminal commands to create a new project directory named 'hello-prisma' and navigate into it, establishing the initial project structure.\nSOURCE: https://github.com/prisma/docs/blob/main/content/100-getting-started/02-setup-prisma/100-start-from-scratch/110-relational-databases-typescript-sqlserver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-prisma\ncd hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Deprecation Notice: Bad Example\nDESCRIPTION: This snippet demonstrates the incorrect format for deprecation notices, including the version number when the feature was deprecated and the planned removal version, which should be avoided.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nFrom v3.0.0, the `command name` command is deprecated.\nWe plan to remove `command name` in v.4.0.0.\n```\n\n----------------------------------------\n\nTITLE: Referencing User and Post Models in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the User and Post models in markdown format within the documentation. It emphasizes these as the primary models used in Prisma examples.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/04-schema-models.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`User` and `Post` are the canonical models that we use in our examples throughout the Prisma docs.\n```\n\n----------------------------------------\n\nTITLE: Hyperlinks: Concise Example\nDESCRIPTION: This snippet demonstrates a concise way to link to further information when the context is clear.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[Learn more](/orm/prisma-client/queries/relation-queries)\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Search in Front Matter\nDESCRIPTION: This snippet shows how to control the inclusion of a page in search results via front matter configuration. Setting `search` to `false` excludes the page from search results, whereas the default value is `true`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/03-frontmatter.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsearch: false\n```\n\n----------------------------------------\n\nTITLE: Hyperlinks: Bad Example (Title Case)\nDESCRIPTION: This snippet shows an example of incorrect hyperlink formatting using title case when sentence case is preferred.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Bad -->\n\nFor more information, see [Relation Queries](/orm/prisma-client/queries/relation-queries).\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Switcher in Front Matter\nDESCRIPTION: This snippet illustrates how to specify database options for context switching within a page. Using the `dbSwitcher` variable, you can create a dropdown list for selecting different database contexts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/03-frontmatter.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndbSwitcher: ['postgresql', 'mysql', 'sqlserver', 'planetscale', 'cockroachdb']\n```\n\n----------------------------------------\n\nTITLE: Prisma Datamodel with CreatedAt Annotation\nDESCRIPTION: Examples a Prisma 1 datamodel incorporating `@createdAt` directive to indicate automatic generation of `DateTime` field values at runtime, unavailable directly in SQL.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  id: ID! @id\n  createdAt: DateTime! @createdAt\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Tools on Windows\nDESCRIPTION: Commands to verify PostgreSQL command line tools installation on Windows\nSOURCE: https://github.com/prisma/docs/blob/main/content/250-postgres/500-backups.mdx#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nwhere pg_dump\nwhere pg_restore\n```\n\n----------------------------------------\n\nTITLE: Adding Heroku Git Remote Manually\nDESCRIPTION: Command to manually add the Heroku Git remote if it wasn't automatically added when creating the app.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nheroku git:remote --app your-app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring ToC in Front Matter\nDESCRIPTION: This snippet demonstrates how to enable the table of contents navigation on a page using front matter configuration. By setting the `toc` variable to `true`, you activate this feature, which is disabled by default. The variable `tocDepth` specifies the depth of headings to include, with a default set to level `h2`.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/03-frontmatter.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntoc: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntocDepth: 2\n```\n\n----------------------------------------\n\nTITLE: Stop Local PostgreSQL Service (Terminal)\nDESCRIPTION: Provides commands to stop a locally running PostgreSQL service on different operating systems (Linux, macOS, Windows) to prevent port conflicts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop postgresql  # Linux\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop postgresql   # macOS\n```\n\nLANGUAGE: batch\nCODE:\n```\nnet stop postgresql             # Windows (Run as Administrator)\n```\n\n----------------------------------------\n\nTITLE: Using mdtool to Move Documentation Files\nDESCRIPTION: Example of using mdtool to move a file to a different position in the documentation hierarchy.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ mdtool move FILENAME INDEX\n\n# e.g.:\n$ mdtool move 05-file.mdx 2\n\n# Result: 05-file.mdx is move to 02-file.mdx, plus previous files 02-*, 03-*, 04-* are incremented\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Contents After Download\nDESCRIPTION: Command to list files in the current directory to verify the example code was downloaded correctly, showing key files like Procfile, prisma directory, and source code.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/101-traditional/200-deploy-to-heroku.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls -1\n```\n\n----------------------------------------\n\nTITLE: Basic Queries in Drizzle\nDESCRIPTION: Examples of basic database queries in Drizzle showing how to find all users, find a single user, and find a unique user by email.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/04-prisma-and-drizzle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eq } from 'drizzle-orm'\n\n// find all users\nconst allUsers = await db.query.users.findMany()\n\n// find a single user\nconst user = await db.query.users.findFirst({\n  where: eq(users.id, 1),\n})\n\n// find a unique post\nconst user = await db.query.users.findFirst({\n  where: eq(users.email, 'nilu@prisma.io'),\n})\n```\n\n----------------------------------------\n\nTITLE: Prisma 1 SQL Migration: UpdatedAt Table\nDESCRIPTION: This SQL script shows a `Post` table being created. The table includes `id` and `updatedAt` columns. Because Prisma 1 managed the updating of the `updatedAt` column at runtime via the `@updatedAt` directive, the table definition lacks a trigger or default value to automatically update the timestamp.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-mysql.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nCREATE TABLE \"Post\" (\n  id VARCHAR(25) PRIMARY KEY NOT NULL,\n  updatedAt TIMESTAMP\n);\n```\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for React components used in the documentation page layout\nSOURCE: https://github.com/prisma/docs/blob/main/content/300-accelerate/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Bolt,\n  BorderBox,\n  BoxTitle,\n  Database,\n  Grid,\n  LinkCard,\n  List,\n  SignalStream,\n  SquareLogo,\n} from '@site/src/components/GettingStarted';\n\nimport {\n    IconTitle\n} from '@site/src/components/shortcodes/index';\n```\n\n----------------------------------------\n\nTITLE: Deprecation Notice: Good Example\nDESCRIPTION: This snippet shows the recommended format for deprecation notices, including the version number when the feature was deprecated.  It emphasizes that the planned removal version should not be included in the notice.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\nFrom v3.0.0, the `command name` command is deprecated.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Format Engine Binary Location in Prisma CLI (Deprecated)\nDESCRIPTION: This snippet demonstrates how to set a custom location for the Prisma format engine binary using the PRISMA_FMT_BINARY environment variable. Note that this functionality has been removed in Prisma CLI version 4.10.0 and only works in earlier versions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/500-reference/300-environment-variables-reference.mdx#2025-04-21_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nPRISMA_FMT_BINARY=custom/my-custom-format-engine-unix\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations with Sequelize\nDESCRIPTION: Shows how to fetch a record with its related records in Sequelize using the include option. This example retrieves a user and includes their related posts.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/400-comparisons/02-prisma-and-sequelize.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findByPk(id, {\n  include: [\n    {\n      model: Post,\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Required MDX Frontmatter for Prisma Guides\nDESCRIPTION: Example of the mandatory frontmatter structure for a Prisma ORM guide using MDX. Includes fields like title, metaTitle, description, sidebar_label, and image, with explanations for each field's purpose and formatting requirements (sentence case).\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/999-making-guides.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: 'How to [do something] with Prisma ORM'\nmetaTitle: 'How to [do something] with Prisma ORM'\ndescription: 'Learn how to [do something] with Prisma ORM'\nsidebar_label: '[Concise Label]'\nimage: '/img/guides/[guide-name]-cover.png'\ncommunity_section: true\n---\n```\n\n----------------------------------------\n\nTITLE: Prisma Datamodel with UpdatedAt Annotation\nDESCRIPTION: Depicts a Prisma 1 datamodel using `@updatedAt` directive for runtime-managed `DateTime` fields, which lack direct reflection in database migrations.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/300-upgrade-guides/800-upgrade-from-prisma-1/02-schema-incompatibilities-postgresql.mdx#2025-04-21_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  id: ID! @id\n  updatedAt: DateTime! @updatedAt\n}\n```\n\n----------------------------------------\n\nTITLE: Using mdtool to Insert Documentation Files\nDESCRIPTION: Example of using mdtool to insert a new file at a specific position in the documentation hierarchy.\nSOURCE: https://github.com/prisma/docs/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ mdtool insert INDEX\n\n# e.g.:\n$ mdtool insert 2\n\n# Result: for files 01-a, 02-b, 03-c, and 04-d; 03-c is renamed to 04-c and 04-d is renamed to 05-d so you can create a new file at index 2\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Using 'clear' for Checkboxes\nDESCRIPTION: This example highlights the preferred term \"clear\" for removing a checkmark from a checkbox. The example demonstrates a style choice for interacting with checkbox UI elements.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n<!-- Good -->\n\nClear **Include sample data**.\n\n<!-- Bad -->\n\nDeselect the **Include sample data** checkbox.\n```\n```\n\n----------------------------------------\n\nTITLE: Prisma Query Generation Prompt\nDESCRIPTION: Example prompt for generating a Prisma query to retrieve active users from organizations with active subscriptions.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/800-more/350-ai-tools/100-cursor.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nGenerate a query to retrieve all User records associated with an Organization that has an `active` Subscription, while excluding any records where the deletedAt field is set.\n```\n\n----------------------------------------\n\nTITLE: Create index.js File (Terminal)\nDESCRIPTION: Creates an empty `index.js` file in the project root directory using the `touch` command. This file will contain the Express.js server code.\nSOURCE: https://github.com/prisma/docs/blob/main/content/800-guides/130-docker.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntouch index.js\n```\n\n----------------------------------------\n\nTITLE: Markdown Example: Using 'enter' for Input Fields\nDESCRIPTION: This example shows the preferred word \"enter\" when describing the action of filling out a text box in the user interface. The \"Bad\" examples show words that should be avoided in this context.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/20-style-guide/02-word-choice.mdx#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n<!-- Good -->\n\nIn **Display Name**, enter a name for your project.\n\n<!-- Bad -->\n\nIn **Display Name**, type a name for your project.\nIn **Display Name**, provide a name for your project.\n```\n```\n\n----------------------------------------\n\nTITLE: PgBouncer Error Example\nDESCRIPTION: Example of an error message that occurs when using Prisma Migrate with PgBouncer connection pooling.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/300-prisma-migrate/300-workflows/200-troubleshooting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nError: undefined: Database error\nError querying the database: db error: ERROR: prepared statement \"s0\" already exists\n```\n\n----------------------------------------\n\nTITLE: Adjusting Page Width in Front Matter\nDESCRIPTION: This snippet configures the visual appearance in terms of page width using the `wide` variable. When set to `true`, the page is rendered with a wider content width of 988px, suitable for pages featuring wide tables.\nSOURCE: https://github.com/prisma/docs/blob/main/content/600-about/30-docs-components/03-frontmatter.mdx#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwide: true\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the deployment documentation page, defining metadata like title, meta description, and page display options.\nSOURCE: https://github.com/prisma/docs/blob/main/content/200-orm/200-prisma-client/500-deployment/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Deployment'\nmetaTitle: 'Deploy a Node.js application with Prisma'\nmetaDescription: 'How to deploy a Node.js application that uses Prisma Client and TypeScript to various cloud platforms.'\nhide_table_of_contents: true\n---\n```"
  }
]