[
  {
    "owner": "meteor",
    "repo": "meteor",
    "content": "TITLE: Suspendable Data Fetching in React with useTracker and useSubscribe - JavaScript/JSX\nDESCRIPTION: This code demonstrates a suspendable pattern for Meteor data in React using the suspense variant of useTracker and useSubscribe. It shows how to set up key-based compute tracking and async data fetching which integrates with React's Suspense for concurrent UI. Dependencies include meteor/react-meteor-data/suspense, Meteor pub/sub, and relevant Mongo collections. Inputs are keys, reactive/async data factories, and optional dependency arrays; outputs are current data states. This pattern is crucial for applications leveraging React Concurrent Mode and advanced error/suspense boundaries.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTracker } from \"meteor/react-meteor-data/suspense\";\nimport { useSubscribe } from \"meteor/react-meteor-data/suspense\";\n\nfunction Tasks() {\n  // this component will suspend\n  useSubscribe(\"tasks\");\n  const { username } = useTracker(\"user\", () => Meteor.user()); // Meteor.user() is async meteor 3.0\n  const tasksByUser = useTracker(\n    \"tasksByUser\",\n    () =>\n      TasksCollection.find(\n        { username },\n        { sort: { createdAt: -1 } }\n      ).fetchAsync() // async call\n  );\n\n  // render the tasks\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collections in Meteor\nDESCRIPTION: Demonstrates how to create new Mongo collections in a Meteor application. This snippet shows the creation of 'Chatrooms' and 'Messages' collections that can be used on both client and server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Common code on client and server declares a DDP-managed Mongo collection.\nconst Chatrooms = new Mongo.Collection(\"chatrooms\");\nconst Messages = new Mongo.Collection(\"messages\");\n```\n\n----------------------------------------\n\nTITLE: Complete Production Security Headers Configuration\nDESCRIPTION: Comprehensive implementation of security headers for a production Meteor application, including CSP, HSTS, and other security configurations with runtime config handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/* global __meteor_runtime_config__ */\nimport { Meteor } from 'meteor/meteor'\nimport { WebApp } from 'meteor/webapp'\nimport { Autoupdate } from 'meteor/autoupdate'\nimport { check } from 'meteor/check'\nimport crypto from 'crypto'\nimport helmet from 'helmet'\n\nconst self = '\\'self\\''\nconst data = 'data:'\nconst unsafeEval = '\\'unsafe-eval\\''\nconst unsafeInline = '\\'unsafe-inline\\''\nconst allowedOrigins = Meteor.settings.allowedOrigins\n\nconst url = Meteor.absoluteUrl()\nconst domain = url.replace(/http(s)*:\\/\\//, '').replace(/\\/$/, '')\nconst s = url.match(/(?!=http)s(?=:\\/\\/)/) ? 's' : ''\nconst usesHttps = s.length > 0\nconst connectSrc = [\n  self,\n  `http${s}://${domain}`,\n  `ws${s}://${domain}`\n]\n\nconst runtimeConfig = Object.assign(__meteor_runtime_config__, Autoupdate, {\n  accountsConfigCalled: true,\n  isModern: true\n})\n\nObject.keys(WebApp.clientPrograms).forEach(arch => {\n  __meteor_runtime_config__.versions[arch] = {\n    version: Autoupdate.autoupdateVersion || WebApp.clientPrograms[arch].version(),\n    versionRefreshable: Autoupdate.autoupdateVersion || WebApp.clientPrograms[arch].versionRefreshable(),\n    versionNonRefreshable: Autoupdate.autoupdateVersion || WebApp.clientPrograms[arch].versionNonRefreshable(),\n    versionReplaceable: Autoupdate.autoupdateVersion || WebApp.clientPrograms[arch].versionReplaceable()\n  }\n})\n\nconst runtimeConfigScript = `__meteor_runtime_config__ = JSON.parse(decodeURIComponent(\"${encodeURIComponent(JSON.stringify(runtimeConfig))}\")`\nconst runtimeConfigHash = crypto.createHash('sha256').update(runtimeConfigScript).digest('base64')\n\nconst helpmentOptions = {\n  contentSecurityPolicy: {\n    blockAllMixedContent: true,\n    directives: {\n      defaultSrc: [self],\n      scriptSrc: [\n        self,\n        unsafeEval,\n        `'sha256-${runtimeConfigHash}'`\n      ],\n      childSrc: [self],\n      connectSrc: connectSrc.concat(allowedOrigins),\n      fontSrc: [self, data],\n      formAction: [self],\n      frameAncestors: [self],\n      frameSrc: ['*'],\n      imgSrc: [self, data, 'blob:'].concat(allowedOrigins),\n      manifestSrc: [self],\n      mediaSrc: [self],\n      objectSrc: [self],\n      sandbox: [\n        'allow-forms',\n        'allow-modals',\n        'allow-same-origin',\n        'allow-scripts'\n      ],\n      styleSrc: [self, unsafeInline],\n      workerSrc: [self, 'blob:']\n    }\n  },\n  strictTransportSecurity: {\n    maxAge: 15552000,\n    includeSubDomains: true,\n    preload: false\n  },\n  referrerPolicy: {\n    policy: 'no-referrer'\n  },\n  expectCt: {\n    enforce: true,\n    maxAge: 604800\n  },\n  frameguard: {\n    action: 'sameorigin'\n  },\n  dnsPrefetchControl: {\n    allow: false\n  },\n  permittedCrossDomainPolicies: {\n    permittedPolicies: 'none'\n  }\n}\n\nif (!usesHttps && Meteor.isDevelopment) {\n  delete helpmentOptions.contentSecurityPolicy.blockAllMixedContent;\n  helpmentOptions.contentSecurityPolicy.directives.scriptSrc = [\n    self,\n    unsafeEval,\n    unsafeInline,\n  ];\n}\n\nhelmet(helpmentOptions)\n```\n\n----------------------------------------\n\nTITLE: Promise-based Method Execution with Meteor.callAsync - Server Response (JavaScript/ES6+)\nDESCRIPTION: Illustrates the usage of the Meteor.callAsync promise-based API to invoke a method and await a server-side response. Uses async/await for handling server results and exceptions. Relies on Meteor 3.x or newer. Inputs: method name and arguments; outputs: awaited server response or error; designed for modern async workflows with clear error and success handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n\tawait Meteor.callAsync('greetUser', 'John');\n\t// üü¢ Server ended with success\n} catch(e) {\n\tconsole.error(\"Error:\", error.reason); // üî¥ Server ended with error\n}\n\nGreetings.findOne({ name: 'John' }); // üóëÔ∏è Data is NOT available\n```\n\n----------------------------------------\n\nTITLE: Advanced Boilerplate for Modular and Testable Meteor Methods in JavaScript\nDESCRIPTION: Defines a modular method object 'updateText' for the 'todos.updateText' RPC, separating validation, core logic, and invocation. This pattern supports independent argument validation, easier testing, use of custom userId contexts, and consistent usage via a reusable object reference. Registration with Meteor.methods is done using computed property names. Requires the 'SimpleSchema' library, 'Todos' collection, and the Meteor package namespace. The key parameters are an object with 'todoId' and 'newText', and optional callback for asynchronous result handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const updateText = {\\n  name: 'todos.updateText',\\n\\n  // Factor out validation so that it can be run independently (1)\\n  validate(args) {\\n    new SimpleSchema({\\n      todoId: { type: String },\\n      newText: { type: String }\\n    }).validate(args)\\n  },\\n\\n  // Factor out Method body so that it can be called independently (3)\\n  run({ todoId, newText }) {\\n    const todo = Todos.findOne(todoId);\\n\\n    if (!todo.editableBy(this.userId)) {\\n      throw new Meteor.Error('todos.updateText.unauthorized',\\n        'Cannot edit todos in a private list that is not yours');\\n    }\\n\\n    Todos.update(todoId, {\\n      $set: { text: newText }\\n    });\\n  },\\n\\n  // Call Method by referencing the JS object (4)\\n  // Also, this lets us specify Meteor.apply options once in\\n  // the Method implementation, rather than requiring the caller\\n  // to specify it at the call site.\\n  call(args, callback) {\\n    const options = {\\n      returnStubValue: true,     // (5)\\n      throwStubExceptions: true  // (6)\\n    }\\n\\n    Meteor.apply(this.name, [args], options, callback);\\n  }\\n};\\n\\n// Actually register the method with Meteor's DDP system\\nMeteor.methods({\\n  [updateText.name]: function (args) {\\n    updateText.validate.call(this, args);\\n    updateText.run.call(this, args);\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating MongoDB Methods to Async in Meteor 3.x\nDESCRIPTION: Demonstrates the transition from synchronous MongoDB methods to their async counterparts in Meteor 3.x server-side code. This change affects methods like find, findOne, insert, update, and remove.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst docs = MyCollection.find({ _id: '123' }).fetch(); // [!code error] This will not work in the server\nconst doc = MyCollection.findOne({ _id: '123' }); // [!code error] This will not work in the server\n\n\n// in Meteor 3.x you should use the Async methods\n\nconst docs = await MyCollection.find({ _id: '123' }).fetchAsync(); // [!code highlight] This will work in the server\nconst doc = await MyCollection.findOneAsync({ _id: '123' }); // [!code highlight] This will work in the server\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Methods in JavaScript\nDESCRIPTION: Example of defining Meteor methods on the server. It shows how to create multiple methods, perform argument checking, throw errors, and return values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/methods.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n  foo(arg1, arg2) {\n    check(arg1, String);\n    check(arg2, [Number]);\n\n    // Do stuff...\n\n    if (/* you want to throw an error */) {\n      throw new Meteor.Error('pants-not-found', \"Can't find my pants\");\n    }\n\n    return 'some return value';\n  },\n\n  bar() {\n    // Do other stuff...\n    return 'baz';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Meteor package.js Structure (JavaScript)\nDESCRIPTION: This JavaScript snippet provides a comprehensive example of a `package.js` file for a Meteor package. It demonstrates using `Package.describe` to define metadata (summary, version, name, git URL), `Package.onUse` to declare runtime dependencies (like `underscore` for server-only, `ostrio:flow-router-extra` with version constraints), imply other packages (`zimme:active-route`), export symbols (`Email` for server), add source files (`email.js`), and optionally define a `mainModule`. It also shows how to configure tests using `Package.onTest` by setting dependencies (including the package itself and a test runner like `practicalmeteor:mocha`) and adding test files (`email_tests.js`). Finally, `Npm.depends` is used to list required npm packages (`simplesmtp`, `stream-buffers`) and their versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Information about this package:\nPackage.describe({\n  // Short two-sentence summary\n  summary: 'What this does',\n  // Version number\n  version: '1.0.0',\n  // Optional, default is package directory name\n  name: 'username:package-name',\n  // Optional GitHub URL to your source repository\n  git: 'https://github.com/something/something.git'\n});\n\n// This defines your actual package:\nPackage.onUse((api) => {\n  // If no version is specified for an `api.use` dependency, use the one defined\n  // in Meteor 1.12.1.\n  api.versionsFrom('1.12.1');\n  // Use the `underscore` package, but only on the server. Version not\n  // specified, so it will be as of Meteor 1.12.1.\n  api.use('underscore', 'server');\n  // Use `ostrio:flow-router-extra`, version 3.9.0 or newer.\n  api.use('ostrio:flow-router-extra@3.9.0');\n  // Give users of this package access to active-route's JavaScript helpers.\n  api.imply('zimme:active-route@2.3.2')\n  // Export the object `Email` to packages or apps that use this package.\n  api.export('Email', 'server');\n  // Specify the source code for the package.\n  api.addFiles('email.js', 'server');\n  // When using `ecmascript` or `modules` packages, you can use this instead of\n  // `api.export` and `api.addFiles`.\n  api.mainModule('email.js', 'server');\n});\n\n// This defines the tests for the package:\nPackage.onTest((api) => {\n  // Sets up a dependency on this package.\n  api.use('username:package-name');\n  // Use the Mocha test framework.\n  api.use('practicalmeteor:mocha@2.4.5_6');\n  // Specify the source code for the package tests.\n  api.addFiles('email_tests.js', 'server');\n});\n\n// This lets you use npm packages in your package:\nNpm.depends({\n  simplesmtp: '0.3.10',\n  'stream-buffers': '0.2.5'\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Meteor Method Errors on the Client (JavaScript - Client Side)\nDESCRIPTION: Shows how to invoke a server method from the Meteor client, handling any Meteor.Error thrown by the server. Uses a callback to inspect error codes and set a user-visible error message. Depends on \"meteor/meteor\" and assumes Session is globally available for UI state. Inputs: none directly; outputs: updates Session var or handles result; designed for async error feedback in UI after RPC.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n// on the client\nMeteor.call(\"methodName\", function (error) {\n  // identify the error\n  if (error && error.error === \"logged-out\") {\n    // show a nice error message\n    Session.set(\"errorMessage\", \"Please log in to post a comment.\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Related Collections with Grapher in Meteor (JavaScript)\nDESCRIPTION: This code uses Grapher's 'createQuery' and 'fetch' to retrieve lists and their associated todos, projecting only selected fields. It requires Meteor, grapher, and the prior association setup. The input is an optional query modifier; output is an array of list objects with embedded todos. Designed for efficient, relational-style querying.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// With Grapher you must always specify the fields you want\nconst listsAndTodos = Lists.createQuery({\n  name: 1,\n  todos: {\n      text: 1\n  }\n}).fetch();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Secure Specific Action Method in Meteor\nDESCRIPTION: This snippet shows a secure implementation of a specific action Method 'makePrivate' from the Todos example app, demonstrating proper validation and security checks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const makePrivate = new ValidatedMethod({\n  name: 'lists.makePrivate',\n  validate: new SimpleSchema({\n    listId: { type: String }\n  }).validator(),\n  run({ listId }) {\n    if (!this.userId) {\n      throw new Meteor.Error('lists.makePrivate.notLoggedIn',\n        'Must be logged in to make private lists.');\n    }\n\n    const list = Lists.findOne(listId);\n\n    if (list.isLastPublicList()) {\n      throw new Meteor.Error('lists.makePrivate.lastPublicList',\n        'Cannot make the last public list private.');\n    }\n\n    Lists.update(listId, {\n      $set: { userId: this.userId }\n    });\n\n    Lists.userIdDenormalizer.set(listId, this.userId);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Existing Users with Google Authentication\nDESCRIPTION: Implementation example of setAdditionalFindUserOnExternalLogin that links existing users with their Google accounts based on email. This allows users who registered with email to later sign in using Google authentication without creating duplicate accounts.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// If a user has already been created, and used their Google email, this will\n// allow them to sign in with the Meteor.loginWithGoogle method later, without\n// creating a new user.\nAccounts.setAdditionalFindUserOnExternalLogin(\n  ({ serviceName, serviceData }) => {\n    if (serviceName === \"google\") {\n      // Note: Consider security implications. If someone other than the owner\n      // gains access to the account on the third-party service they could use\n      // the e-mail set there to access the account on your app.\n      // Most often this is not an issue, but as a developer you should be aware\n      // of how bad actors could play.\n      return Accounts.findUserByEmail(serviceData.email);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Publications and Using Minimongo (JavaScript)\nDESCRIPTION: Client-side snippet showing declaration of local Minimongo collections, subscription to server-side publications (including reactive Tracker.autorun usage), and real-time data retrieval. Demonstrates how data from server publications synchronizes to client-side Minimongo, and how to use reactive state (Session, Tracker). Inputs: roomId (reactively from Session). Outputs: `Counts` collection in Minimongo updated live. Requires Meteor core, Mongo, and Session packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meteor } from \\\"meteor/meteor\\\";\nimport { Mongo } from \\\"meteor/mongo\\\";\nimport { Session } from \\\"meteor/session\\\";\n// Declare a collection to hold the count object.\nconst Counts = new Mongo.Collection(\\\"counts\\\");\n\n// Subscribe to the count for the current room.\nTracker.autorun(() => {\n  Meteor.subscribe(\\\"countsByRoom\\\", Session.get(\\\"roomId\\\"));\n});\n\n// Use the new collection.\nconst roomCount = Counts.findOne(Session.get(\\\"roomId\\\")).count;\nconsole.log(`Current room has ${roomCount} messages.`);\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Data with Meteor.startup (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Meteor.startup on the server to initialize data in a collection if it's empty. It checks the count of items in the LinksCollection and inserts a new item if the collection is empty.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { LinksCollection } from \"/imports/api/links\";\n\nMeteor.startup(async () => {\n  // If the Links collection is empty, add some data.\n  if ((await LinksCollection.find().countAsync()) === 0) {\n    await LinksCollection.insertAsync({\n      title: \"Do the Tutorial\",\n      url: \"https://www.meteor.com/tutorials/react/creating-an-app\",\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying and Manipulating Meteor Collections\nDESCRIPTION: Shows how to query documents from a collection, insert new documents, and update existing ones. This snippet uses the 'Messages' collection to demonstrate these operations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Return an array of my messages.\nconst myMessages = await Messages.find({ userId: Meteor.userId() }).fetchAsync();\n\n// Create a new message.\nawait Messages.insertAsync({ text: \"Hello, world!\" });\n\n// Mark my first message as important.\nawait Messages.updateAsync(myMessages[0]._id, { $set: { important: true } });\n```\n\n----------------------------------------\n\nTITLE: Displaying Autoupdate Status with Blaze Helper (JavaScript)\nDESCRIPTION: Defines a Blaze template helper named `available` for the `leaderboard` template. This helper function calls `Autoupdate.newClientAvailable()`, which reactively returns `true` if a new version of the client code is available on the server, and converts the result to a string for display.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.leaderboard.helpers({\n  available: function () {\n    return Autoupdate.newClientAvailable().toString();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creation and Use of Local Collections (JavaScript)\nDESCRIPTION: This snippet illustrates how to declare a local collection in Meteor to temporarily store method-fetched data on the client-side without server linkage, enabling custom logic for data lifecycle management.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In client-side code, declare a local collection\n// by passing `null` as the argument\nScoreAverages = new Mongo.Collection(null);\n```\n\n----------------------------------------\n\nTITLE: Setting Resolver Type for Meteor Collections\nDESCRIPTION: Demonstrates how to set the resolver type for collection methods, which is useful for managing different behavior between client simulation and server calls, especially in test environments.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Greetings = new Meteor.Collection('greetUser', { resolverType: 'stub' });\n    \nawait Greetings.insertAsync({ test: 1 });\n\n// üîµ Client simulation\nGreetings.findOne({ name: 'John' }); // üßæ Data is available (Optimistic-UI)\n```\n\n----------------------------------------\n\nTITLE: Publishing Related Data Sets with Meteor in JavaScript\nDESCRIPTION: This code demonstrates publishing multiple datasets in a single publication, using both the primary and related datasets from the Todos and Lists collections. The publication validates listId and checks user permissions before returning cursors. It will return an empty ready state if the user is unauthorized. The appropriate schema validation and authentication mechanisms must be set up in your Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.publish('todos.inList', function(listId) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  const list = Lists.findOne(listId);\n\n  if (list && (!list.userId || list.userId === this.userId)) {\n    return [\n      Lists.find(listId),\n      Todos.find({listId})\n    ];\n  } else {\n    return this.ready();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Argon2 Parameters in Meteor Accounts Package\nDESCRIPTION: This snippet demonstrates how to customize Argon2 encryption parameters including type, time cost, memory usage, and parallelism to balance security and performance according to OWASP recommendations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({\n    argon2Enabled: true,\n    argon2Type: \"argon2id\",\n    argon2TimeCost: 2,\n    argon2MemoryCost: 19456,\n    argon2Parallelism: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Data through a Meteor Method with Validation (JavaScript)\nDESCRIPTION: This code snippet shows the creation of a Meteor Method to insert invoice data, including server and client-side validation using SimpleSchema. It establishes security measures through custom regex for email and amount fields, ensuring robust data validation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Define a regular expression for email and amount validation.\nconst emailRegEx = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\nconst amountRegEx = /^\\d*\\.(\\d\\d)?$/;\n\n// This Method encodes the form validation requirements.\n// By defining them in the Method, we do client and server-side\n// validation in one place.\nexport const insert = createMethod({\n  name: 'Invoices.methods.insert',\n  schema: new SimpleSchema({\n    email: { type: String, regEx: emailRegEx },\n    description: { type: String, min: 5 },\n    amount: { type: String, regEx: amountRegEx }\n  }),\n  run(newInvoice) {\n    // In here, we can be sure that the newInvoice argument is\n    // validated.\n\n    if (!this.userId) {\n      throw new Meteor.Error('Invoices.methods.insert.not-logged-in',\n        'Must be logged in to create an invoice.');\n    }\n\n    Invoices.insertAsync(newInvoice)\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection Options Configuration\nDESCRIPTION: JSON configuration for MongoDB connection options including TLS settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"mongo\": {\n      \"options\": {\n        \"tls\": true,\n        \"tlsCAFileAsset\": \"certificate.pem\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Server Module and Client Usage | meteor-rpc | TypeScript\nDESCRIPTION: Provides final usage example: defines a server module exposing method 'bar', then, on the client, consumes the API by importing the server type and creating a client. Demonstrates calling API methods type-safely, returning string 'bar'. Must import types between client and server to ensure compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\n\nconst server = createModule()\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .build();\n\nexport type Server = typeof server;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// you must import the type\nimport type { Server } from \"/imports/api/server\";\nconst app = createClient<Server>();\n\nawait app.bar(\"str\"); // it will return \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Task Form Component\nDESCRIPTION: This code defines a Vue 3 component (`TaskForm.vue`) using the Composition API (`<script setup>`). It includes a form with an input field bound to a reactive variable `newTask` (initialized with `ref`) using `v-model`. Submitting the form triggers the `addTask` method, which currently logs the new task text to the console. The `@submit.prevent` modifier prevents the default form submission behavior (page reload).\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue';\n\nconst newTask = ref('');\n\nconst addTask = () => {\n  console.log(newTask.value);\n}\n</script>\n\n<template>\n    <form @submit.prevent=\"addTask\">\n        <input\n            v-model=\"newTask\"\n            class=\" border border-gray-300 rounded-md py-2 px-4 mr-2 text-gray-600 text-sm focus:outline-none focus:border-gray-400 focus:ring-0\"\n            type=\"text\" placeholder=\"Type to add new tasks\" />\n        <button class=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\" type=\"submit\">Add Task</button>\n    </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Advanced Query Selectors\nDESCRIPTION: Examples of complex MongoDB queries using operators like $gt and $in for advanced document filtering.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Matches documents where `age` is greater than 18.\n{\n  age: {\n    $gt: 18;\n  }\n}\n\n// Matches documents where `tags` is an array containing 'popular'.\n{\n  tags: \"popular\";\n}\n\n// Matches documents where `fruit` is one of three possibilities.\n{\n  fruit: {\n    $in: [\"peach\", \"plum\", \"pear\"];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Mongo Collections with Meteor.publish (JavaScript)\nDESCRIPTION: Demonstrates several server-side Meteor.publish functions to selectively share data from Mongo collections to subscribed clients. Dependencies include Meteor's core and check package, and custom collections (Rooms, Messages). Shows filtering of published fields to exclude/include secrets, publishing related data for joined views, and real-world access control based on user roles. Limitations: for multi-cursor arrays, each cursor must be from a different collection. Inputs: publication name and subscription context (this, including userId). Outputs: published data sets or custom observeChanged-driven messages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meteor } from \\\"meteor/meteor\\\";\nimport { check } from \\\"meteor/check\\\";\nimport { Rooms } from \\\"/imports/api/Rooms\\\";\nimport { Messages } from \\\"/imports/api/Messages\\\";\n\n// Server: Publish the `Rooms` collection, minus secret info...\nMeteor.publish(\\\"rooms\\\", function () {\n  return Rooms.find(\n    {},\n    {\n      fields: { secretInfo: 0 },\n    }\n  );\n});\n\n// ...and publish secret info for rooms where the logged-in user is an admin. If\n// the client subscribes to both publications, the records are merged together\n// into the same documents in the `Rooms` collection. Note that currently object\n// values are not recursively merged, so the fields that differ must be top\n// level fields.\nMeteor.publish(\\\"adminSecretInfo\\\", function () {\n  return Rooms.find(\n    { admin: this.userId },\n    {\n      fields: { secretInfo: 1 },\n    }\n  );\n});\n\n// Publish dependent documents and simulate joins.\nMeteor.publish(\\\"roomAndMessages\\\", function (roomId) {\n  check(roomId, String);\n\n  return [\n    Rooms.find(\n      { _id: roomId },\n      {\n        fields: { secretInfo: 0 },\n      }\n    ),\n    Messages.find({ roomId }),\n  ];\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Document in Meteor Collections on the Client - JavaScript\nDESCRIPTION: Shows a Meteor client-side event handler that increments a field in a player document upon admin action. Dependencies: Blaze templates, Players collection, Session, and Meteor collections package. Inputs: Triggered by a click event, retrieves current player _id from Session and applies $inc to their score. Outputs: Immediate update of score on all clients if reactivity is set up. Limitations: On the client, can update only one document per call and subject to allow/deny rules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// When the 'give points' button in the admin dashboard is pressed, give 5\n// points to the current player. The new score will be immediately visible on\n// everyone's screens.\nTemplate.adminDashboard.events({\n  \"click .give-points\"() {\n    Players.update(Session.get(\"currentPlayer\"), {\n      $inc: { score: 5 },\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Login Attempts using AccountsServer.validateLoginAttempt in JavaScript\nDESCRIPTION: This code shows how to use `validateLoginAttempt` on an `AccountsServer` instance to add server-side validation logic for login attempts. The callback receives an object containing details about the attempt, such as the service type, success status, user object (if available), connection info, and method details. It requires importing `AccountsServer` from `meteor/accounts-base`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport { AccountsServer } from \"meteor/accounts-base\";\nconst options = {\n  //...\n};\nconst accountsServer = new AccountsServer(options);\n\naccountsServer.validateLoginAttempt(\n  ({\n    type, // String\n    allowed, // Boolean\n    error, // Error\n    user, // Object\n    connection, // Object\n    collection, // Object\n    methodName, // String\n    methodArguments, // Array<String>\n  }) => {\n    console.log(type);\n    //        ÀÜÀÜÀÜÀÜÀÜÀÜ   The service name, such as \"password\" or \"twitter\".\n\n    console.log(allowed);\n    //        ÀÜÀÜÀÜÀÜÀÜÀÜ   Whether this login is allowed and will be successful (if not aborted\n    //                 by any of the validateLoginAttempt callbacks). False if the login\n    //                 will not succeed (for example, an invalid password or the login was\n    //                 aborted by a previous validateLoginAttempt callback).\n\n    console.log(error);\n    //        ÀÜÀÜÀÜÀÜÀÜÀÜ   When `allowed` is false, the exception describing why the login\n    //                 failed. It will be a `Meteor.Error` for failures reported to the\n    //                 user (such as invalid password), and can be a another kind of\n    //                 exception for internal errors.\n\n    console.log(user);\n    //        ÀÜÀÜÀÜÀÜÀÜÀÜ   When it is known which user was attempting to login,\n    //                 the Meteor user object. This will always be present for successful logins.\n\n    console.log(connection);\n    //            ÀÜÀÜÀÜÀÜÀÜÀÜ The `connection` object the request came in on. See\n    //                   [`Meteor.onConnection`](#meteor_onconnection) for details.\n\n    console.log(collection);\n    //            ÀÜÀÜÀÜÀÜÀÜÀÜ The `collection` The name of the Mongo.Collection or the\n    //                   Mongo.Collection object to hold the users.\n\n    console.log(methodName);\n    //            ÀÜÀÜÀÜÀÜÀÜÀÜ The name of the Meteor method being used to login.\n    //                   For example, \"login\", \"loginWithPassword\", or \"loginWith<ExternalService>\".\n\n    console.log(methodArguments);\n    //            ÀÜÀÜÀÜÀÜÀÜÀÜ An array of the arguments passed to the login method.\n    //                   For example, `[\"username\", \"password\"]`\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Helmet Implementation in Meteor\nDESCRIPTION: Basic setup for implementing Helmet's default security headers in a Meteor application server-side startup code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// With other import statements\nimport helmet from \"helmet\";\n\n// Within server side Meter.startup()\nWebApp.handlers.use(helmet())\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Meteor Method Using jam:method Package in JavaScript\nDESCRIPTION: Defines the 'todos.updateText' Method utilizing the 'jam:method' package for reduced boilerplate and enhanced clarity. The method is declared via 'createMethod' with a schema for argument validation, an async run function, and automatic registration. The body awaits Todos.findOneAsync and Todos.updateAsync, ensuring proper handling of data in asynchronous contexts. Dependencies include 'meteor/jam:method', 'SimpleSchema', and an async-compatible 'Todos' collection. Input parameters are 'todoId' and 'newText', and errors are thrown in standard Meteor fashion.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createMethod } from 'meteor/jam:method';\\n\\nexport const updateText = createMethod({\\n  name: 'todos.updateText',\\n  schema: new SimpleSchema({\\n    todoId: { type: String },\\n    newText: { type: String }\\n  }),\\n  async run({ todoId, newText }) {\\n    const todo = await Todos.findOneAsync(todoId);\\n \\n    if (!todo.editableBy(this.userId)) {\\n      throw new Meteor.Error('todos.updateText.unauthorized',\\n        'Cannot edit todos in a private list that is not yours');\\n    }\\n\\n    Todos.updateAsync(todoId, {\\n      $set: { text: newText }\\n    });\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Allow and Deny Rules for Collection Security - Meteor Collections - JavaScript\nDESCRIPTION: This JavaScript example demonstrates defining custom allow and deny rules on a Meteor Mongo.Collection, using async logic where desired. The code sets up ownership checks on insert, update, and remove operations, and prevents unauthorized field changes (e.g., owner changes or deletions when 'locked' is set). It uses properties such as 'fetch' to optimize document retrieval. Dependencies include the 'meteor/mongo' package and, optionally, lodash/underscore for field checking. The snippet expects a collection of documents with 'owner' and 'locked' fields, with outputs being write allowances enforced at runtime.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a collection where users can only modify documents that they own.\n// Ownership is tracked by an `owner` field on each document. All documents must\n// be owned by the user that created them and ownership can't be changed. Only a\n// document's owner is allowed to delete it, and the `locked` attribute can be\n// set on a document to prevent its accidental deletion.\nconst Posts = new Mongo.Collection(\"posts\");\n\nPosts.allow({\n  insert(userId, doc) {\n    // The user must be logged in and the document must be owned by the user.\n    return userId && doc.owner === userId;\n  },\n\n  update(userId, doc, fields, modifier) {\n    // Can only change your own documents.\n    return doc.owner === userId;\n  },\n\n  async remove(userId, doc) {\n    // Any custom async validation is supported\n    await Meteor.sleep(100);\n    // Can only remove your own documents.\n    return doc.owner === userId;\n  },\n\n  fetch: [\"owner\"],\n});\n\nPosts.deny({\n  update(userId, doc, fields, modifier) {\n    // Can't change owners.\n    return _.contains(fields, \"owner\");\n  },\n\n  async remove(userId, doc) {\n    // Any custom async validation is supported\n    await Meteor.sleep(100);\n    // Can't remove locked documents.\n    return doc.locked;\n  },\n\n  fetch: [\"locked\"], // No need to fetch `owner`\n});\n```\n\n----------------------------------------\n\nTITLE: Flexible User Data Update Method in Meteor\nDESCRIPTION: This snippet demonstrates a flexible Method for updating user data with optional fields, while maintaining security by generating the MongoDB query on the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.methods.setUserData = new ValidatedMethod({\n  name: 'Meteor.users.methods.setUserData',\n  validate: new SimpleSchema({\n    fullName: { type: String, optional: true },\n    dateOfBirth: { type: Date, optional: true },\n  }).validator(),\n  run(fieldsToSet) {\n    Meteor.users.update(this.userId, {\n      $set: fieldsToSet\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing and Method Validations in Meteor\nDESCRIPTION: Demonstrates how to use the 'check' function in a Meteor application to validate the types of arguments passed to publish functions and methods. It ensures that inputs conform to expected patterns, throwing a 'Match.Error' on failure. Dependencies include 'meteor/check' and 'meteor/meteor'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/check.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { check } from \"meteor/check\";\nimport { Meteor } from \"meteor/meteor\";\nMeteor.publish(\"chatsInRoom\", function (roomId) {\n  // Make sure `roomId` is a string, not an arbitrary Mongo selector object.\n  check(roomId, String);\n  return Chats.find({ room: roomId });\n});\n\nMeteor.methods({\n  addChat(roomId, message) {\n    check(roomId, String);\n    check(message, {\n      text: String,\n      timestamp: Date,\n      // Optional, but if present must be an array of strings.\n      tags: Match.Maybe([String]),\n    });\n\n    // Do something with the message...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting for Meteor Methods\nDESCRIPTION: Example of implementing rate limiting on Meteor Methods to prevent abuse. This code limits list operations to 5 calls per second per connection using DDPRateLimiter.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Get list of all method names on Lists\nconst LISTS_METHODS = _.pluck([\n  insert,\n  makePublic,\n  makePrivate,\n  updateName,\n  remove,\n], 'name');\n\n// Only allow 5 list operations per connection per second\n\nif (Meteor.isServer) {\n  DDPRateLimiter.addRule({\n    name(name) {\n      return _.contains(LISTS_METHODS, name);\n    },\n\n    // Rate limit per connection ID\n    connectionId() { return true; }\n  }, 5, 1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in Meteor Collections on the Server - JavaScript\nDESCRIPTION: Illustrates an asynchronous Meteor method on the server that updates multiple player documents matching a score criterion, adding a badge to each. Dependencies: Meteor methods API, Players collection, Mongo package, and user authentication for document selectors. Inputs: No parameters ‚Äì modifies all players with score > 10. Outputs: None explicitly returned (but badges updated for qualifying users). Limitations: Only for server-side/isomorphic usage with 'updateAsync', and requires badge arrays on documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Give the 'Winner' badge to each user with a score greater than 10. If they\n// are logged in and their badge list is visible on the screen, it will update\n// automatically as they watch.\nMeteor.methods({\n  async declareWinners() {\n    await Players.updateAsync(\n      { score: { $gt: 10 } },\n      {\n        $addToSet: { badges: \"Winner\" },\n      },\n      { multi: true }\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Throwing Errors in Meteor Methods (JavaScript - Server Side)\nDESCRIPTION: Defines a Meteor server method that throws a Meteor.Error to propagate error details to the client. Demonstrates how to structure a server-side method in Meteor with custom error codes and debug-friendly messages. Requires the meteor/meteor package; the method is triggered via RPC and throws a specific error if invoked when the user is not logged in, ensuring clients can handle errors meaningfully. Inputs: none directly; outputs: throws an error with code and message; only meaningful inside server context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n// on the server, pick a code unique to this error\n// the reason field should be a useful debug message\nMeteor.methods({\n  methodName() {\n    throw new Meteor.Error(\n      \"logged-out\",\n      \"The user must be logged in to post a comment.\"\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Observing Meteor Mongo Cursor Changes Asynchronously with observeChangesAsync\nDESCRIPTION: Example of using `observeChangesAsync` on a `Mongo.Cursor` to reactively monitor specific changes (additions, removals) in a query result set (online administrators). It defines callbacks for `added` and `removed` events to update a counter and logs messages. The observer handle, obtained via a Promise, is used to stop the observation after 5 seconds using `handle.stop()`. Assumes a `Users` collection exists. This method is recommended for isomorphic code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// Keep track of how many administrators are online.\nlet count = 0;\nconst cursor = Users.find({ admin: true, onlineNow: true });\n\nconst handle = await cursor.observeChangesAsync({\n  added(id, user) {\n    count += 1;\n    console.log(`${user.name} brings the total to ${count} admins.`);\n  },\n\n  removed() {\n    count -= 1;\n    console.log(`Lost one. We're now down to ${count} admins.`);\n  },\n});\n\n// After five seconds, stop keeping the count.\nsetTimeout(() => handle.stop(), 5000);\n```\n\n----------------------------------------\n\nTITLE: Calling Meteor Methods from Client (JavaScript)\nDESCRIPTION: This snippet shows how to call Meteor methods from the client using Meteor.callAsync. It demonstrates calling the 'addLink' method within a React component.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { Meteor } from \"meteor/meteor\";\n\nfunction Component() {\n  const addLink = () =>\n    Meteor.callAsync(\n      \"addLink\",\n      \"https://www.meteor.com/tutorials/react/creating-an-app\"\n    );\n\n  return (\n    <div>\n      <button onClick={addLink}>Add Link</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Data With Explicit Field Restrictions in Meteor (JavaScript)\nDESCRIPTION: Illustrates a secure Meteor publication that explicitly restricts the fields published to the client using the 'fields' option in Mongo.Collection#find. By listing which fields are sent, it prevents accidental exposure of future secret fields. Suitable for scenarios where only certain public properties should be visible; requires the 'Lists' collection and the Meteor framework.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// #2: Good, if we add a secret field to Lists later, the client\n// will only publish it if we add it to the list of fields\nMeteor.publish('lists.public', function () {\n  return Lists.find({userId: {$exists: false}}, {\n    fields: {\n      name: 1,\n      incompleteCount: 1,\n      userId: 1\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Composite Publications Using Meteor in JavaScript\nDESCRIPTION: The snippet utilizes the reywood:publish-composite package to publish reactive data across multiple collections. It defines a composite publication for todo lists restricted by user access, iterating over found lists to publish associated todos. This requires reywood:publish-composite and proper schema setup for data validation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.publishComposite('todos.inList', function(listId) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  const userId = this.userId;\n\n  return {\n    find() {\n      const query = {\n        _id: listId,\n        $or: [{userId: {$exists: false}}, {userId}]\n      };\n\n      const options = {\n        fields: { _id: 1 }\n      };\n\n      return Lists.find(query, options);\n    },\n\n    children: [{\n      find(list) {\n        return Todos.find({ listId: list._id }, { fields: Todos.publicFields });\n      }\n    }]\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Meteor Publication with observeChanges (JavaScript)\nDESCRIPTION: Illustrates a server-side publication using observeChanges for custom real-time aggregation (message counts) and conditional publishing. It uses Meteor and check, as well as imported Rooms and SecretData collections. Key features are manual management of the publication interface (added/changed/removed), reactive counts, explicit subscription readiness, and handling cleanup on unsubscription. Also includes a publication conditioned on the userId field, which demonstrates returning either a cursor or nothing depending on authentication logic.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meteor } from \\\"meteor/meteor\\\";\nimport { check } from \\\"meteor/check\\\";\nimport { Rooms, SecretData } from \\\"/imports/api/collections\\\";\n\n// Publish the current size of a collection.\nMeteor.publish(\\\"countsByRoom\\\", function (roomId) {\n  check(roomId, String);\n\n  let count = 0;\n  let initializing = true;\n\n  // `observeChanges` only returns after the initial `added` callbacks have run.\n  // Until then, we don't want to send a lot of `changed` messages‚Äîhence\n  // tracking the `initializing` state.\n  const handle = Messages.find({ roomId }).observeChanges({\n    added: (id) => {\n      count += 1;\n\n      if (!initializing) {\n        this.changed(\\\"counts\\\", roomId, { count });\n      }\n    },\n\n    removed: (id) => {\n      count -= 1;\n      this.changed(\\\"counts\\\", roomId, { count });\n    },\n\n    // We don't care about `changed` events.\n  });\n\n  // Instead, we'll send one `added` message right after `observeChanges` has\n  // returned, and mark the subscription as ready.\n  initializing = false;\n  this.added(\\\"counts\\\", roomId, { count });\n  this.ready();\n\n  // Stop observing the cursor when the client unsubscribes. Stopping a\n  // subscription automatically takes care of sending the client any `removed`\n  // messages.\n  this.onStop(() => handle.stop());\n});\n\n// Sometimes publish a query, sometimes publish nothing.\nMeteor.publish(\\\"secretData\\\", function () {\n  if (this.userId === \\\"superuser\\\") {\n    return SecretData.find();\n  } else {\n    // Declare that no data is being published. If you leave this line out,\n    // Meteor will never consider the subscription ready because it thinks\n    // you're using the `added/changed/removed` interface where you have to\n    // explicitly call `this.ready`.\n    return [];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Server Method for Sending Email in Meteor\nDESCRIPTION: A server-side method in Meteor that sends an email using the Email package. It verifies input parameters using Meteor's check function and calls Email.send with validated data. This is implemented in JavaScript and is dependent on the Meteor framework and the email package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/email.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { Email } from \"meteor/email\";\nimport { check } from \"meteor/check\";\n// Server: Define a method that the client can call.\nMeteor.methods({\n  sendEmail({ to, from, subject, text }) {\n    // Make sure that all arguments are strings.\n    check([to, from, subject, text], [String]);\n\n    Email.send({ to, from, subject, text });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Replacement\nDESCRIPTION: Example of completely replacing a document with a new document structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Find the document with ID '123' and completely replace it.\nUsers.update({ _id: \"123\" }, { name: \"Alice\", friends: [\"Bob\"] });\n```\n\n----------------------------------------\n\nTITLE: Using Top-Level Await with MongoDB Collection in Meteor (JavaScript)\nDESCRIPTION: Demonstrates initializing a MongoDB collection and performing asynchronous queries/inserts using top-level await in a Meteor server module. Requires a Meteor server environment with Mongo.Collection available and Meteor 3 or above. The snippet connects to 'links', waits for a count, and conditionally inserts a URL if the collection is empty. Inputs: none explicitly, operates on database state. Outputs: potentially modifies the 'links' collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/top-level-await.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst Links = new Mongo.Collection('links');\n\n// Async code using top-level await.\n// The module waits for this to finish before continuing\nconst count = await Links.find().countAsync();\n\nif (count === 0) {\n  await Links.insertAsync({ url: 'https://meteor.com' });\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing New User Documents using Accounts.onCreateUser in JavaScript\nDESCRIPTION: This snippet provides an example of using the `Accounts.onCreateUser` hook on the server to modify the user document before it's saved. The callback receives `options` (passed from the client) and the initial `user` object. It should return the modified user object to be inserted. This example adds a custom field and preserves the default profile behavior. It relies on the `Accounts` object from `meteor/accounts-base`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport { Accounts } from \"meteor/accounts-base\";\n// Support for playing D&D: Roll 3d6 for dexterity.\nAccounts.onCreateUser((options, user) => {\n  const customizedUser = Object.assign(\n    {\n      dexterity: _.random(1, 6) + _.random(1, 6) + _.random(1, 6),\n    },\n    user\n  );\n\n  // We still want the default hook's 'profile' behavior.\n  if (options.profile) {\n    customizedUser.profile = options.profile;\n  }\n\n  return customizedUser;\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Collection Data with Field Filtering in Meteor\nDESCRIPTION: Demonstrates publishing room data with field filtering and dependent document publishing. Shows how to publish partial data based on user roles and join-like functionality across collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/pubsub.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Server: Publish the `Rooms` collection, minus secret info...\nMeteor.publish('rooms', function () {\n  return Rooms.find({}, {\n    fields: { secretInfo: 0 }\n  });\n});\n\n// ...and publish secret info for rooms where the logged-in user is an admin. If\n// the client subscribes to both publications, the records are merged together\n// into the same documents in the `Rooms` collection. Note that currently object\n// values are not recursively merged, so the fields that differ must be top\n// level fields.\nMeteor.publish('adminSecretInfo', function () {\n  return Rooms.find({ admin: this.userId }, {\n    fields: { secretInfo: 1 }\n  });\n});\n\n// Publish dependent documents and simulate joins.\nMeteor.publish('roomAndMessages', function (roomId) {\n  check(roomId, String);\n\n  return [\n    Rooms.find({ _id: roomId }, {\n      fields: { secretInfo: 0 }\n    }),\n    Messages.find({ roomId })\n  ];\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Allow/Deny Rules for MongoDB Collections in Meteor\nDESCRIPTION: This example demonstrates how to create a MongoDB collection with security rules where users can only modify documents they own. It shows how to implement allow rules that check document ownership and deny rules that prevent changing ownership or removing locked documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a collection where users can only modify documents that they own.\n// Ownership is tracked by an `owner` field on each document. All documents must\n// be owned by the user that created them and ownership can't be changed. Only a\n// document's owner is allowed to delete it, and the `locked` attribute can be\n// set on a document to prevent its accidental deletion.\nconst Posts = new Mongo.Collection('posts');\n\nPosts.allow({\n  insert(userId, doc) {\n    // The user must be logged in and the document must be owned by the user.\n    return userId && doc.owner === userId;\n  },\n\n  update(userId, doc, fields, modifier) {\n    // Can only change your own documents.\n    return doc.owner === userId;\n  },\n\n  remove(userId, doc) {\n    // Can only remove your own documents.\n    return doc.owner === userId;\n  },\n\n  fetch: ['owner'],\n});\n\nPosts.deny({\n  update(userId, doc, fields, modifier) {\n    // Can't change owners.\n    return _.contains(fields, 'owner');\n  },\n\n  remove(userId, doc) {\n    // Can't remove locked documents.\n    return doc.locked;\n  },\n\n  fetch: ['locked'], // No need to fetch `owner`\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Methods (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define Meteor methods using Meteor.methods. It includes a simple 'sum' method and a more complex 'addLink' method with error handling and input validation using the 'check' function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { LinksCollection } from \"/imports/api/links\";\n\nMeteor.methods({\n  async addLink(link) {\n    check(link, String); // check if the link is a string\n\n    // Do stuff...\n    const linkID = await LinksCollection.insertAsync(link);\n    if (/* you want to throw an error */) {\n      throw new Meteor.Error('Something is wrong', \"Some details\");\n    }\n\n    return linkID;\n  },\n\n  bar() {\n    // Do other stuff...\n    return 'baz';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Meteor Collections\nDESCRIPTION: Shows how to fetch, insert, and update documents in a Meteor collection. The example retrieves a user's messages, creates a new message, and updates an existing message.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Return an array of my messages.\nconst myMessages = Messages.find({ userId: Meteor.userId() }).fetch();\n\n// Create a new message.\nMessages.insert({ text: 'Hello, world!' });\n\n// Mark my first message as important.\nMessages.update(myMessages[0]._id, { $set: { important: true } });\n```\n\n----------------------------------------\n\nTITLE: Importing an Async Module to Create Async Parent Module (JavaScript)\nDESCRIPTION: Demonstrates how importing an async module in Meteor causes the importing module to also become async. It imports 'setup.js', which uses top-level await, then logs a message, highlighting module dependency propagation. Requires 'setup.js' to be present and potentially async. No input parameters. Output: sequencing dependent on 'setup.js' completion.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/top-level-await.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport './setup.js';\n\nconsole.log('in main.js');\n```\n\n----------------------------------------\n\nTITLE: Removing Insecure Mode in Meteor\nDESCRIPTION: Command to remove the insecure package from a Meteor project. By default, new Meteor projects start in insecure mode, which allows full write access to all collections. This command disables insecure mode, requiring explicit allow/deny rules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove insecure\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents in Meteor Collections - JavaScript\nDESCRIPTION: Demonstrates inserting a parent document and related child documents into Meteor-managed MongoDB collections. Documents can contain any EJSON-compatible field types. Dependencies: Meteor core with Mongo package and correctly instantiated lists and items collections. Inputs: document objects with fields to store. Outputs: generated _id string for the parent document, and new item documents inserted referencing this _id. Limitations: On the client, insert runs asynchronously and error handling should be managed using optional callbacks; permissions are limited by allow/deny rules in untrusted code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst groceriesId = Lists.insert({ name: \"Groceries\" });\n\nItems.insert({ list: groceriesId, name: \"Watercress\" });\nItems.insert({ list: groceriesId, name: \"Persimmons\" });\n```\n\n----------------------------------------\n\nTITLE: Initializing React Root with Meteor.startup (JavaScript)\nDESCRIPTION: This snippet shows how to use Meteor.startup on the client to initialize a React application. It sets up the React root and renders the App component once the DOM is ready.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Meteor } from \"meteor/meteor\";\nimport { App } from \"/imports/ui/App\";\n\n// Setup react root\nMeteor.startup(() => {\n  const container = document.getElementById(\"react-target\");\n  const root = createRoot(container);\n  root.render(<App />);\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Client-Side Collections in Meteor\nDESCRIPTION: Demonstrates creating and manipulating collections on the client-side, including both synchronized and local-only collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// client.js\n// Create a collection called `Posts` and put a document in it. The document\n// will be immediately visible in the local copy of the collection. It will be\n// written to the server-side database a fraction of a second later, and a\n// fraction of a second after that, it will be synchronized down to any other\n// clients that are subscribed to a query that includes it (see\n// `Meteor.subscribe` and `autopublish`).\nconst Posts = new Mongo.Collection(\"posts\");\nPosts.insert({ title: \"Hello world\", body: \"First post\" });\n\n// Changes are visible immediately‚Äîno waiting for a round trip to the server.\nassert(Posts.find().count() === 1);\n\n// Create a temporary, local collection. It works just like any other collection\n// but it doesn't send changes to the server, and it can't receive any data from\n// subscriptions.\nconst Scratchpad = new Mongo.Collection();\n\nfor (let i = 0; i < 10; i += 1) {\n  Scratchpad.insert({ number: i * 2 });\n}\n\nassert(Scratchpad.find({ number: { $lt: 9 } }).count() === 5);\n```\n\n----------------------------------------\n\nTITLE: Building a Meteor Application for Linux Deployment\nDESCRIPTION: This Bash snippet demonstrates how to install production Node.js dependencies using npm and then build a Meteor application specifically for a 64-bit Linux architecture using the `meteor build` command. The output is a bundled `.tar.gz` file containing the application, ready for deployment on a server with the correct Node.js version and MongoDB connectivity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --production\nmeteor build /path/to/build --architecture os.linux.x86_64\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Associations Using cultofcoders:grapher (JavaScript)\nDESCRIPTION: This snippet configures associations between the Todos and Lists collections using the cultofcoders:grapher package. The 'addLinks' methods define a one-to-many relationship from lists to todos (and inverse). Prerequisites include Meteor, the grapher package, and defined Todos/Lists collections. Key parameters include collection references and link field names. Used to enable relational queries between collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Configure how collections relate to each other\nTodos.addLinks({\n  list: {\n    type: 'one',\n    field: 'listId',\n    collection: Lists\n  }\n});\n\nLists.addLinks({\n  todos: {\n    collection: Todos,\n    inversedBy: 'list' // This represents the name of the link we defined in Todos\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Cleanup Logic on Computation Invalidation using Tracker.onInvalidate in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if code is running inside a Tracker computation (`Tracker.active`). If so, it registers a callback using `Tracker.onInvalidate` that executes cleanup functions (`x.destroy()`, `y.finalize()`) when the current computation is either invalidated (about to be rerun) or stopped. This pattern is useful for managing resources tied to a reactive computation's lifecycle.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// If we're in a computation, then perform some clean-up when the current\n// computation is invalidated (rerun or stopped).\nif (Tracker.active) {\n  Tracker.onInvalidate(() => {\n    x.destroy();\n    y.finalize();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Polling REST Endpoint in Meteor Publication\nDESCRIPTION: This snippet demonstrates how to create a Meteor publication that polls a REST endpoint at regular intervals. It handles adding and updating documents based on the polled data, and cleans up the interval when the subscription stops.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst POLL_INTERVAL = 5000;\n\nMeteor.publish('polled-publication', async function() {\n    const publishedKeys = {};\n\n    const poll = async () => {\n        // Let's assume the data comes back as an array of JSON documents, with an _id field\n            const response = await fetch(REST_URL, REST_OPTIONS);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            } else {\n                data = await response.json();\n                data.forEach((doc) => {\n                    if (publishedKeys[doc._id]) {\n                        this.changed(COLLECTION_NAME, doc._id, doc);\n                    } else {\n                        publishedKeys[doc._id] = true;\n                        this.added(COLLECTION_NAME, doc._id, doc);\n                    }\n                });\n            }\n    };\n\n    await poll();\n    this.ready();\n\n    const interval = Meteor.setInterval(poll, POLL_INTERVAL);\n\n    this.onStop(() => {\n        Meteor.clearInterval(interval);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Validating New User Creation using Accounts.validateNewUser in JavaScript\nDESCRIPTION: This code demonstrates registering server-side validation functions for new user creation using `Accounts.validateNewUser`. Multiple validation functions can be added. If any function returns `false` or throws an error (preferably a `Meteor.Error` for client feedback), the user creation is aborted. It depends on the `Accounts` object from `meteor/accounts-base`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { Accounts } from \"meteor/accounts-base\";\n\n// Validate username, sending a specific error message on failure.\nAccounts.validateNewUser((user) => {\n  if (user.username && user.username.length >= 3) {\n    return true;\n  } else {\n    throw new Meteor.Error(403, \"Username must have at least 3 characters\");\n  }\n});\n\n// Validate username, without a specific error message.\nAccounts.validateNewUser((user) => {\n  return user.username !== \"root\";\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with Meteor Methods (JavaScript)\nDESCRIPTION: Demonstrates how to use a Meteor Method for form submission, handling validation errors to provide user feedback through a structured errors dictionary accessible by the UI. Utilizes ReactiveDict for error management.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { insert } from '../api/invoices/methods.js';\n\nTemplate.Invoices_newInvoice.onCreated(function() {\n  this.errors = new ReactiveDict();\n});\n\nTemplate.Invoices_newInvoice.helpers({\n  errors(fieldName) {\n    return Template.instance().errors.get(fieldName);\n  }\n});\n\nTemplate.Invoices_newInvoice.events({\n  'submit .Invoices_newInvoice'(event, instance) {\n    const data = {\n      email: event.target.email.value,\n      description: event.target.description.value,\n      amount: event.target.amount.value\n    };\n\n    insert(data, (err, res) => {\n      if (err) {\n        if (err.error === 'validation-error') {\n          // Initialize error object\n          const errors = {\n            email: [],\n            description: [],\n            amount: []\n          };\n\n          // Go through validation errors returned from Method\n          err.details.forEach((fieldError) => {\n            // XXX i18n\n            errors[fieldError.name].push(fieldError.type);\n          });\n\n          // Update ReactiveDict, errors will show up in the UI\n          instance.errors.set(errors);\n        }\n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Reactivity in Async Tracker.autorun with Tracker.withComputation (Meteor, JavaScript)\nDESCRIPTION: This advanced snippet shows how reactivity is affected when using async callbacks with Tracker.autorun. It highlights that after the first await in an async function, reactive context is lost; to regain it, Tracker.withComputation must be used to wrap reactive statements. The snippet demonstrates calling both database and reactiveVar getters inside and outside this context, explaining which lines retain Tracker reactivity. Dependencies include Meteor, Tracker, and reactive variables or collections. Inputs are any reactive variables or collections accessed; outputs depend on their use. Limitation: Overusing Tracker.withComputation may impact performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(async function example1(computation) {\n  // Code before the first await will stay reactive.\n  reactiveVar1.get(); // This will trigger a rerun.\n\n  let links = await LinksCollection.find({}).fetchAsync(); // First async call will stay reactive.\n\n  // Code after the first await looses Tracker.currentComputation: no reactivity.\n  reactiveVar2.get(); // This won't trigger a rerun.\n\n  // You can bring back reactivity with the Tracker.withCompuation wrapper:\n  let users = await Tracker.withComputation(computation, () => Meteor.users.find({}).fetchAsync());\n\n  // Code below will again not be reactive, so you will need another Tracker.withComputation.\n  const value = Tracker.withComputation(computation, () => reactiveVar3.get()); // This will trigger a rerun.\n});\n```\n\n----------------------------------------\n\nTITLE: Using Email.sendAsync with Promise in Meteor\nDESCRIPTION: Defines a Meteor server method to send emails asynchronously, leveraging Email.sendAsync to return a Promise. This method checks inputs and uses a Promise to handle success or error states, allowing asynchronous email sending and error handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/email.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Server: Define a method that the client can call.\nMeteor.methods({\n  sendEmail({ to, from, subject, text }) {\n    // Make sure that all arguments are strings.\n    check([to, from, subject, text], [String]);\n\n    return Email.sendAsync({ to, from, subject, text }).catch((err) => {\n      // do something with the error\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Match Patterns in Meteor\nDESCRIPTION: Provides examples of various 'Match' patterns available in Meteor's 'check' library for variable validation. These patterns allow you to match different types including any value, primitive types, integer, objects, and more with optional and conditional patterns.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/check.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Match } from \"meteor/check\";\n// Will return true for any value.\nMatch.test(value, Match.Any);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n// Will return true if `value` is a string.\nresult = Match.test(value, String);\nconsole.log(result); // true\n\n// Will return true if `value` is a number.\nresult = Match.test(value, Number);\nconsole.log(result); // true\n\n// Will return true if `value` is a boolean.\nresult = Match.test(value, Boolean);\nconsole.log(result); // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n// Will return true if `value` is an integer.\nresult = Match.test(value, Match.Integer);\nconsole.log(result); // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n// Will return true if `value` is an array of numbers.\nresult = Match.test(value, [Number]);\nconsole.log(result); // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n// Will return true if `value` is an object with keys 'foo' and 'bar'.\nresult = Match.test(value, { foo: String, bar: Number });\nconsole.log(result); // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n// Will return true if `value` is an object with keys 'foo' and 'bar'.\nresult = Match.test(value, Match.ObjectIncluding({ foo: String, bar: Number }));\nconsole.log(result); // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\n// Will return true if `value` is an object.\nresult = Match.test(value, Object);\nconsole.log(result); // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Match, check } from \"meteor/check\";\n// In an object\nconst pattern = { name: Match.Maybe(String) };\n\ncheck({ name: \"something\" }, pattern); // OK\ncheck({}, pattern); // OK\ncheck({ name: undefined }, pattern); // Throws an exception\ncheck({ name: null }, pattern); // Throws an exception\n\n// Outside an object\ncheck(null, Match.Maybe(String)); // OK\ncheck(undefined, Match.Maybe(String)); // OK\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Match, check } from \"meteor/check\";\n\ncheck(buffer, Match.Where(EJSON.isBinary));\n\nconst NonEmptyString = Match.Where((x) => {\n  check(x, String);\n  return x.length > 0;\n});\n\ncheck(arg, NonEmptyString);\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor App with React\nDESCRIPTION: Command to create a new Meteor application with React and MongoDB. Includes a list of npm and Meteor packages that are included by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --react app-name\n```\n\n----------------------------------------\n\nTITLE: Promise-based Method Execution with Both stubPromise and serverPromise (JavaScript/ES6+)\nDESCRIPTION: Shows how to destructure stubPromise and serverPromise from Meteor.callAsync to handle both the local (optimistic) and server responses. First awaits client simulation (for instant UI effect), then handles the server result and possible error. Designed for advanced real-time UI feedback scenarios. Inputs: method call; outputs: stubPromise triggers optimistic update, serverPromise confirms or rejects final state.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { stubPromise, serverPromise } = Meteor.callAsync('greetUser', 'John');\n\nawait stubPromise;\n\n// üîµ Client simulation\nGreetings.findOne({ name: 'John' }); // üßæ Data is available (Optimistic-UI)\n\ntry {\n  await serverPromise;\n  // üü¢ Server ended with success\n} catch(e) {\n  console.error(\"Error:\", error.reason); // üî¥ Server ended with error\n}\n\nGreetings.findOne({ name: 'John' }); // üóëÔ∏è Data is NOT available\n```\n\n----------------------------------------\n\nTITLE: Iterating Asynchronously Over Mongo Collection Cursor Using for-await - MongoDB - JavaScript\nDESCRIPTION: Demonstrates how to use the new asynchronous iterator feature for MongoDB Collection cursors in Meteor (2.8+), allowing developers to use ES7's for-await-of syntax for traversing query results. No external dependencies beyond Meteor and its mongo package are required. The code expects 'collection' to be a Mongo.Collection instance and 'query', 'options' as input parameters. Each 'document' yielded corresponds to a result matching the query.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (const document of collection.find(query, options)) /* ... */\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Publications in Tracker.autorun (Meteor, JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Tracker.autorun to conditionally subscribe to a Meteor publication based on session state. It requires the Tracker, Meteor, and Session packages provided by Meteor. The autorun automatically manages the subscription lifecycle, cleaning up and re-subscribing as necessary when session state or user ID changes. The key parameters are the session key (\"subscribeToNewsFeed\") and the user ID (Meteor.userId()). The output is a managed DDP subscription tied to reactivity of those values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nTracker.autorun(function () {\n  if (Session.get(\"subscribeToNewsFeed\")) {\n    Meteor.subscribe(\"newsFeed\", Meteor.userId());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Meteor Method with Validation in JavaScript\nDESCRIPTION: Defines a basic Meteor Method called 'todos.updateText' that uses the simpl-schema package to validate its arguments before attempting to update a todo item's text in the Todos collection. If validation fails or if the current user is unauthorized, it throws a Meteor.Error. Prerequisite dependencies include the 'simple-schema' npm package and the 'Todos' collection. Expects an object with 'todoId' and 'newText' fields as input, and does not return a value on success.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SimpleSchema from 'simpl-schema';\\n\\nMeteor.methods({\\n  'todos.updateText'({ todoId, newText }) {\\n    new SimpleSchema({\\n      todoId: { type: String },\\n      newText: { type: String }\\n    }).validate({ todoId, newText });\\n\\n    const todo = Todos.findOne(todoId);\\n\\n    if (!todo.editableBy(this.userId)) {\\n      throw new Meteor.Error('todos.updateText.unauthorized',\\n        'Cannot edit todos in a private list that is not yours');\\n    }\\n\\n    Todos.update(todoId, {\\n      $set: { text: newText }\\n    });\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Meteor User Account Creation with Cypress\nDESCRIPTION: This Cypress test snippet creates a new user account in a Meteor application, verifies the redirect to the board page, and checks the user object properties in the browser's window context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.get(\"input#at-field-name\").type(\"Jean-Peter\");\ncy.get(\"button#at-btn\").click();\n\ncy.url().should(\"eq\", \"http://localhost:3000/board\");\n\ncy.window().then(win => {\n  // this allows accessing the window object within the browser\n  const user = win.Meteor.user();\n  expect(user).to.exist;\n  expect(user.profile.name).to.equal(\"Jean-Peter\");\n  expect(user.emails[0].address).to.equal(\n    \"jean-peter.mac.calloway@gmail.com\"\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Reactive Dictionary with ReactiveDict in JavaScript\nDESCRIPTION: This snippet demonstrates how to use ReactiveDict to manage multi-dimensional reactive states, tracking window dimensions and updating them on resize events. You need the reactive-dict package installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst $window = $(window);\nfunction getDimensions() {\n  return {\n    width: $window.width(),\n    height: $window.height()\n  };\n};\n\nWindowSize = new ReactiveDict();\nWindowSize.set(getDimensions());\n$window.on('resize', () => {\n  WindowSize.set(getDimensions());\n});\n```\n\n----------------------------------------\n\nTITLE: Converting to Async/Await Pattern in Meteor 3\nDESCRIPTION: Demonstrates how to refactor a callback-based Meteor method call to use the async/await pattern in Meteor 3. This approach results in more linear, readable code with structured error handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\n\nconst someFunction = async () => { // [!code ++]\n  try {\n    const result = await Meteor.callAsync('myMethod', 'arg1', 'arg2'); // [!code ++]\n    console.log('Method result:', result);\n    // do something with the result\n  } catch (error) {\n    console.error('Method error:', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating TaskForm Component into App.vue\nDESCRIPTION: This updates the main `App.vue` component to include the task creation form. It imports the `TaskForm` component and renders it within the template, placing it above the existing task list (`<ul>`). Other parts related to fetching and displaying tasks remain the same.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Task from './components/Task.vue';\nimport TaskForm from './components/TaskForm.vue';\nimport { subscribe, autorun } from 'vue-meteor-tracker';\nimport { TasksCollection } from '../api/tasksCollection';\n\nsubscribe('tasks');\nconst tasks = autorun(() => TasksCollection.find({}).fetch()).result;\n</script>\n\n<template>\n  <div class=\"container\">\n    <header>\n      <h1 class=\"text-4xl font-bold text-gray-800 my-4\">Todo List</h1>\n    </header>\n    <TaskForm />\n    <ul class=\"list-disc list-inside p-4\">\n      <Task v-for=\"task of tasks\" :key=\"task._id\" :task=\"task\" />\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Mongo Collections in Meteor (JavaScript)\nDESCRIPTION: Shows how to instantiate new Mongo collections usable both client- and server-side in Meteor. These definitions are prerequisites for publications and subscriptions, enabling reactive data transport. The code must be accessible from both server and client modules, and collection names should match those used in published data sets for correct Minimongo synchronization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Mongo } from \\\"meteor/mongo\\\";\n\nexport const Rooms = new Mongo.Collection(\\\"rooms\\\");\nexport const SecretData = new Mongo.Collection(\\\"messages\\\");\n```\n\n----------------------------------------\n\nTITLE: Using ReactiveDict in Meteor Applications with Tracker\nDESCRIPTION: This example demonstrates how to create and use a ReactiveDict instance to store reactive data. It shows initialization with a name for persistence across Hot Code Push updates, setting values, and establishing reactive computations with Tracker.autorun.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/reactive-dict/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar dict = new ReactiveDict('myDict');\ndict.set(\"weather\", \"cloudy\");\nTracker.autorun(function () { console.log(\"now \" + dict.get(\"weather\")); });\n// now cloudy\ndict.set(\"weather\", \"sunny\");\n// now sunny\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Transaction in Meteor\nDESCRIPTION: Example of using Mongo.withTransaction to perform a purchase transaction, including inserting an invoice and updating an item quantity. Demonstrates error handling and return value usage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/mongo-transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mongo } from 'meteor/mongo';\n\nasync function purchase(purchaseData) {\n  try {\n    const { invoiceId } = await Mongo.withTransaction(async () => {\n      const invoiceId = await Invoices.insertAsync(purchaseData);\n      const changeQuantity = await Items.updateAsync(purchaseData.itemId, { $set: {...} });\n      return { invoiceId, changeQuantity } // you can return whatever you'd like\n    });\n    return invoiceId;\n  } catch (error) {\n    // something went wrong with the transaction and it could not be automatically retried\n    // handle the error as you see fit\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User ID in Meteor Methods (JavaScript)\nDESCRIPTION: This snippet shows how to access the current user's ID within a Meteor method using this.userId. It's useful for implementing user-specific logic in methods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n\nMeteor.methods({\n  foo() {\n    console.log(this.userId);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Using Reactive Values with Tracker.autorun in Meteor\nDESCRIPTION: An example showing how reactive values interact within an autorun. This demonstrates how the autorun reruns when reactive dependencies change and how timers are managed through invalidation callbacks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar startTime = new Date;\nvar data = new ReactiveDict;\ndata.set(\"favoriteFood\", \"peaches\");\n\nvar logger = Tracker.autorun(function () {\n  console.log(\"The app started \" + minutesAgo(startTime) + \" and my favorite \" +\n    \"food is \" + data.get(\"favoriteFood\") + \".\");\n});\n// Prints \"The app started just now and my favorite food is peaches.\"\n// 60 seconds later: \"The app started 1 minutes ago and my favorite food is peaches.\"\n```\n\n----------------------------------------\n\nTITLE: Implicitly Synchronizing Async Tracker Autoruns in JavaScript\nDESCRIPTION: This snippet showcases a more concise way to synchronize asynchronous `Tracker.autorun` computations. By directly using `await` on the `Tracker.autorun` call itself (when passed an async function), the code implicitly awaits the completion of the first run's promise (`firstRunPromise`). This achieves sequential execution of the initial autorun logic without explicitly accessing the `firstRunPromise` property.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nawait Tracker.autorun(async () => {\n  await Meteor.userAsync();\n  (...more async code...)\n});\n\nawait Tracker.autorun(async () => {\n  await asyncSomeOrOther();\n  (...more async code...)\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side React Hydration Implementation\nDESCRIPTION: Example of client-side hydration implementation using React and the onPageLoad function\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/server-render.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { onPageLoad } from \"meteor/server-render\";\n\nonPageLoad(async (sink) => {\n  const App = (await import(\"/imports/Client.js\")).default;\n  ReactDOM.hydrate(<App />, document.getElementById(\"app\"));\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Basic Selector Patterns in JavaScript\nDESCRIPTION: Examples of simple MongoDB selectors that match documents based on specific field values. These selectors can be used with various Meteor collection methods like find() and update().\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Matches all documents where `deleted` is false.\n{ deleted: false }\n\n// Matches all documents where the `name` and `cognomen` are as given.\n{ name: 'Rhialto', cognomen: 'the Marvelous' }\n\n// Matches every document.\n{}\n```\n\n----------------------------------------\n\nTITLE: Disabling Insecure Mode in Meteor - Meteor CLI - Bash\nDESCRIPTION: This Bash command disables 'insecure mode' in a Meteor project by removing the 'insecure' package. Insecure mode allows all users global write access to collections with no allow/deny rules; removing it enforces security checks on all collections. Run this command from the root directory of your Meteor app. No parameters are required, and the output is the package being removed, leading to stricter write controls in your application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove insecure\n```\n\n----------------------------------------\n\nTITLE: Rendering Tasks from Collection with React and useTracker\nDESCRIPTION: React component that uses the useTracker hook to fetch and display tasks from the TasksCollection. It demonstrates how to use Meteor's reactivity with React components.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/2.collections.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { useTracker } from \"meteor/react-meteor-data\";\nimport { TasksCollection } from \"/imports/api/TasksCollection\";\nimport { Task } from \"./Task\";\n\nexport const App = () => {\n  const tasks = useTracker(() => TasksCollection.find({}).fetch());\n\n  return (\n    <div>\n      <h1>Welcome to Meteor!</h1>\n\n      <ul>\n        {tasks.map((task) => (\n          <Task key={task._id} task={task} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Async React Hooks with Suspense in Meteor 3.x\nDESCRIPTION: Example demonstrating the new async approach using suspense-enabled hooks for handling Meteor subscriptions and data fetching in Meteor 3.x.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/front-end/react.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTracker, useSubscribe } from 'meteor/react-meteor-data/suspense'\nfunction Tasks() { // this component will suspend\n  useSubscribe(\"tasks\");\n  const { username } = useTracker(\"user\", () => Meteor.userAsync())\n  const tasksByUser = useTracker(\"tasksByUser\", () =>\n          TasksCollection.find({username}, { sort: { createdAt: -1 } }).fetchAsync()\n  );\n\n\n  // render the tasks\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Functionality and Username Display in React Component\nDESCRIPTION: This snippet shows how to implement a logout function and display the username in a React component. It uses Meteor.logout() for logging out and renders the username with a logout icon.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst logout = () => Meteor.logout();\n\nreturn (\n  <Fragment>\n    <div className=\"user\" onClick={logout}>\n      {user.username} üö™\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Publication with Arguments in Meteor\nDESCRIPTION: This snippet shows how to define a publication that takes an argument (listId). It demonstrates how to validate the argument type using SimpleSchema before processing the publication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('todos.inList', function(listId) {\n  // We need to check the `listId` is the type we expect\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema for MongoDB Collections using SimpleSchema in Meteor\nDESCRIPTION: This snippet shows how to define a schema for a MongoDB collection using the SimpleSchema package in Meteor, which helps enforce data structure and validation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport SimpleSchema from 'simpl-schema';\n\nLists.schema = new SimpleSchema({\n  name: {type: String},\n  incompleteCount: {type: Number, defaultValue: 0},\n  userId: {type: String, regEx: SimpleSchema.RegEx.Id, optional: true}\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into MongoDB Collections in Meteor\nDESCRIPTION: Example of inserting documents into MongoDB collections using Meteor's insert operation. Creates a grocery list and adds items to it.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst groceriesId = Lists.insert({ name: 'Groceries' });\n\nItems.insert({ list: groceriesId, name: 'Watercress' });\nItems.insert({ list: groceriesId, name: 'Persimmons' });\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Meteor Reactivity\nDESCRIPTION: Advanced Vue component that integrates with Meteor's reactivity system, using subscriptions, methods, and reactive data sources.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"!$subReady.Time\">Loading...</div>\n    <div v-else>\n      <p>Hello {{hello}},\n        <br>The time is now: {{currentTime}}\n      </p>\n      <button @click=\"updateTime\">Update Time</button>\n      <p>Startup times:</p>\n      <ul>\n        <li v-for=\"t in TimeCursor\">\n          {{t.time}}  -  {{t._id}}\n        </li>\n      </ul>\n      <p>Meteor settings</p>\n      <pre><code>\n        {{settings}}\n      </code></pre>\n    </div>\n  </div>\n</template>\n\n<script>\nimport '/imports/collections/Time';\n\nexport default {\n  data() {\n    console.log('Sending non-Meteor data to Vue component');\n    return {\n      hello: 'World',\n      settings: Meteor.settings.public,   // not Meteor reactive\n    }\n  },\n  // Vue Methods\n  methods: {  \n    updateTime() {\n      console.log('Calling Meteor Method UpdateTime');\n      Meteor.call('UpdateTime');          // not Meteor reactive\n    }\n  },\n  // Meteor reactivity\n  meteor: {\n    // Subscriptions - Errors not reported spelling and capitalization.\n    $subscribe: {\n      'Time': []\n    },\n    // A helper function to get the current time\n    currentTime () {\n      console.log('Calculating currentTime');\n      var t = Time.findOne('currentTime') || {};\n      return t.time;\n    },\n    // A Minimongo cursor on the Time collection is added to the Vue instance\n    TimeCursor () {\n      // Here you can use Meteor reactive sources like cursors or reactive vars\n      // as you would in a Blaze template helper\n      return Time.find({}, {\n        sort: {time: -1}\n      })\n    },\n  }\n}\n</script>\n\n<style scoped>\n  p {\n    font-size: 2em;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Collections in Meteor\nDESCRIPTION: Demonstrates how to create Meteor collections that are synchronized between client and server. The example shows creating two collections for a chat application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Common code on client and server declares a DDP-managed Mongo collection.\nconst Chatrooms = new Mongo.Collection('chatrooms');\nconst Messages = new Mongo.Collection('messages');\n```\n\n----------------------------------------\n\nTITLE: Defining a Publication for Public Lists in Meteor\nDESCRIPTION: This snippet defines a publication named 'lists.public' that returns a cursor for all public lists in the Lists collection. It filters the results to only include lists without a userId and limits the fields returned.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('lists.public', function() {\n  return Lists.find({\n    userId: {$exists: false}\n  }, {\n    fields: Lists.publicFields\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering tasks in the App component\nDESCRIPTION: Updates the App component to render the list of tasks using the Task component. It maps over the tasks array and creates a Task component for each item.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/1.creating-the-app.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Task } from './Task';\n\nconst tasks = ..;\n\nexport const App = () => (\n  <div>\n    <h1>Welcome to Meteor!</h1>\n\n    <ul>\n      { tasks.map(task => <Task key={ task._id } task={ task }/>) }\n    </ul>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Update Modifiers in JavaScript\nDESCRIPTION: Examples of MongoDB update modifiers using operators like $set, $inc, and $push. These are used to modify documents in-place without replacing the entire document.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the `admin` property on the document to true.\n{ $set: { admin: true } }\n\n// Add 2 to the `votes` property and add 'Traz' to the end of the `supporters`\n// array.\n{ $inc: { votes: 2 }, $push: { supporters: 'Traz' } }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Secure Todo Update Method in Meteor\nDESCRIPTION: This snippet shows a Meteor method for updating todo text. It includes validation, permission checking using this.userId, and demonstrates proper error handling in Meteor methods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n  'todos.updateText'({ todoId, newText }) {\n    new SimpleSchema({\n      todoId: { type: String },\n      newText: { type: String }\n    }).validate({ todoId, newText }),\n\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Main Server Module and Submodule | meteor-rpc | TypeScript\nDESCRIPTION: Defines a Meteor-RPC main server module that includes a simple method and imports a chat submodule. The method 'bar' is validated with a zod string schema. Chat submodule is attached and both are finalized with the build method. This setup enables namespaced RPC methods that can be strongly typed for client usage. Required dependencies: meteor-rpc and zod.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { Chat } from \"./chat\";\n\nconst server = createModule() // server has no namespace\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .addSubmodule(Chat)\n  .build();\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Private Lists Publication in Meteor\nDESCRIPTION: This code shows how to create a Meteor publication that only returns private lists for the currently logged-in user. It demonstrates checking for user authentication and using this.userId in a publication context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('lists.private', function() {\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  return Lists.find({\n    userId: this.userId\n  }, {\n    fields: Lists.publicFields\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Match.Where for Custom Validation\nDESCRIPTION: Examples of using Match.Where to create custom validation conditions and type checks\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/check.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncheck(buffer, Match.Where(EJSON.isBinary));\n\nconst NonEmptyString = Match.Where((x) => {\n  check(x, String);\n  return x.length > 0;\n});\n\ncheck(arg, NonEmptyString);\n```\n\n----------------------------------------\n\nTITLE: Creating a Server-Side MongoDB Collection in Meteor\nDESCRIPTION: This snippet demonstrates how to create a server-side MongoDB collection in Meteor, which provides a synchronous API for interacting with the database.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTodos = new Mongo.Collection('todos');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// This line won't complete until the insert is done\nTodos.insert({_id: 'my-todo'});\n// So this line will return something\nconst todo = Todos.findOne({_id: 'my-todo'});\n// Look ma, no callbacks!\nconsole.log(todo);\n```\n\n----------------------------------------\n\nTITLE: Defining a Publication for Private Lists in Meteor\nDESCRIPTION: This snippet defines a publication named 'lists.private' that returns a cursor for private lists belonging to the current user. It checks if the user is logged in and returns only their lists with limited fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('lists.private', function() {\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  return Lists.find({\n    userId: this.userId\n  }, {\n    fields: Lists.publicFields\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Request with Fetch\nDESCRIPTION: Complete example demonstrating how to implement a POST request using fetch, including headers configuration, error handling, and response processing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/fetch.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetch, Headers } from 'meteor/fetch';\n\nasync function postData (url, data) {\n    try {\n      const response = await fetch(url, {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: 'same-origin', // include, *same-origin, omit\n          headers: new Headers({\n              Authorization: 'Bearer my-secret-key',\n              'Content-Type': 'application/json'\n          }),\n          redirect: 'follow', // manual, *follow, error\n          referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n      });\n      const data = await response.json();\n      return response(null, data);\n    } catch (err) {\n      return response(err, null);\n    }\n}\n\nconst result = await postData('https://www.example.org/statsSubmission', { totalUsers: 55 });\n```\n\n----------------------------------------\n\nTITLE: Requiring Authentication for Task Management in Vue\nDESCRIPTION: This snippet updates the main App component to require authentication for accessing task management features. It uses reactive refs and watchers to track user login state and conditionally render components.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { ref, watch } from 'vue';\n\nconst hideCompleted = ref(false);\nconst isLogged = ref(false);\n\nconst userId = autorun(() => Meteor.userId()).result;\n\nwatch(\n  () => userId.value,\n  (newUser) => {\n    isLogged.value = !!newUser\n  },\n  { immediate: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting to External DDP Servers in Meteor\nDESCRIPTION: Demonstrates how to use DDP.connect to establish connections to external Meteor servers, make method calls, and create remote collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DDP } from \"meteor/ddp-client\";\nimport { Mongo } from \"meteor/mongo\";\nimport { Meteor } from \"meteor/meteor\";\nconst options = {...};\n\nconst otherServer = DDP.connect(\"http://example.com\", options);\n\notherServer.call(\"foo.from.other.server\", 1, 2, function (err, result) {\n  // ...\n});\n\nMetepr.call(\"foo.from.this.server\", 1, 2, function (err, result) {\n  // ...\n});\nconst remoteColl = new Mongo.Collection(\"collectionName\", { connection: otherServer });\nremoteColl.find(...);\n```\n\n----------------------------------------\n\nTITLE: Connecting Meteor Data to React Components with withTracker HOC - JavaScript/JSX\nDESCRIPTION: This code shows how to wrap a standard React component with the Meteor withTracker HOC using a config object. It demonstrates setting up a reactive data source, memoization for render optimization via the pure flag, and implementing a skipUpdate function for fine-grained render control. Dependencies are meteor/react-meteor-data and a valid Meteor pub/sub setup. Inputs include component props and parameters for getMeteorData; outputs are props injected via the tracker. Limitations: skipUpdate relies on correct equality logic for optimal results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withTracker } from 'meteor/react-meteor-data';\n\n// React component (function or class).\nfunction Foo({ listId, currentUser, listLoading, tasks }) {\n  return (\n    <h1>Hello {currentUser.username}</h1>\n    {listLoading ?\n      <div>Loading</div> :\n      <div>\n        Here is the Todo list {listId}:\n        <ul>{tasks.map(task => <li key={task._id}>{task.label}</li>)}</ul>\n      </div}\n  );\n}\n\nexport default withTracker({\n  getMeteorData ({ listId }) {\n    // Do all your reactive data access in this function.\n    // Note that this subscription will get cleaned up when your component is unmounted\n    const handle = Meteor.subscribe('todoList', listId);\n\n    return {\n      currentUser: Meteor.user(),\n      listLoading: !handle.ready(),\n      tasks: Tasks.find({ listId }).fetch(),\n    };\n  },\n  pure: true,\n  skipUpdate (prev, next) {\n    // prev and next will match the shape returned by the reactiveFn\n    return (\n      prev.currentUser?._id === next.currentUser?._id\n    ) && (\n      prev.listLoading === next.listLoading\n    ) && (\n      prev.tasks.every((doc, i) => (\n        doc._id === next[i] && doc.updatedAt === next[i]\n      ))\n      && prev.tasks.length === next.tasks.length\n    );\n  }\n})(Foo);\n```\n\n----------------------------------------\n\nTITLE: Defining a Method that Uses Server-Only Logic in Meteor (JavaScript)\nDESCRIPTION: Demonstrates a Meteor method that invokes secret server-only logic, only executing sensitive operations when not in simulation (i.e., only on the server). Uses the require statement to dynamically import the module at runtime, and sets up a ValidatedMethod handler covering both client and server execution contexts. Requires the ValidatedMethod package and correct pathing to the server-only module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In a file loaded on client and server\nMeteor.users.methods.updateMMR = new ValidatedMethod({\n  name: 'Meteor.users.methods.updateMMR',\n  validate: null,\n  run() {\n    if (this.isSimulation) {\n      // Simulation code for the client (optional)\n    } else {\n      const { MMR } = require('/imports/server/mmr.js');\n      MMR.updateWithSecretAlgorithm(this.userId);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Templates in Meteor Authentication\nDESCRIPTION: Example of how to customize email templates for account-related emails such as enrollment, password reset, and email verification. Includes setting the from address, site name, and customizing subject and content for different email types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nimport { Accounts } from \"meteor/accounts-base\";\n\nAccounts.emailTemplates.siteName = \"AwesomeSite\";\nAccounts.emailTemplates.from = \"AwesomeSite Admin <accounts@example.com>\";\n\nAccounts.emailTemplates.enrollAccount.subject = (user) => {\n  return `Welcome to Awesome Town, ${user.profile.name}`;\n};\n\nAccounts.emailTemplates.enrollAccount.text = (user, url) => {\n  return (\n    \"You have been selected to participate in building a better future!\" +\n    \" To activate your account, simply click the link below:\\n\\n\" +\n    url\n  );\n};\n\nAccounts.emailTemplates.resetPassword.from = () => {\n  // Overrides the value set in `Accounts.emailTemplates.from` when resetting\n  // passwords.\n  return \"AwesomeSite Password Reset <no-reply@example.com>\";\n};\nAccounts.emailTemplates.verifyEmail = {\n  subject() {\n    return \"Activate your account now!\";\n  },\n  text(user, url) {\n    return `Hey ${user}! Verify your e-mail by following this link: ${url}`;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Efficient Bulk Migration with MongoDB Bulk Operations in Meteor (JavaScript)\nDESCRIPTION: This code demonstrates how to use Meteor's access to the underlying MongoDB collection to perform a fast batch update, setting 'todoCount' for all List documents lacking it. It leverages the rawCollection API, MongoDB's Bulk Operations, and Meteor.wrapAsync to provide synchronous behavior suitable for Meteor's migration API. It requires MongoDB 2.6+, Meteor server, percolate:migrations, and List/Todo collections. The 'up' function processes lists in bulk, while 'down' removes 'todoCount' from all lists.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nMigrations.add({\n  version: 1,\n  up() {\n    // This is how to get access to the raw MongoDB node collection that the Meteor server collection wraps\n    const batch = Lists.rawCollection().initializeUnorderedBulkOp();\n\n    //Mongo throws an error if we execute a batch operation without actual operations, e.g. when Lists was empty.\n    let hasUpdates = false;\n    Lists.find({todoCount: {$exists: false}}).forEach(list => {\n      const todoCount = Todos.find({listId: list._id}).count();\n      // We have to use pure MongoDB syntax here, thus the `{_id: X}`\n      batch.find({_id: list._id}).updateOne({$set: {todoCount}});\n      hasUpdates = true;\n    });\n\n    if(hasUpdates){\n      // We need to wrap the async function to get a synchronous API that migrations expects\n      const execute = Meteor.wrapAsync(batch.execute, batch);\n      return execute();\n    }\n\n    return true;\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}}, {multi: true});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Blaze Template for Displaying and Changing State (HTML)\nDESCRIPTION: Defines a simple Blaze template that displays the current enemy and provides a button to change the value. The output of {{theEnemy}} is tied to a reactive dictionary, showcasing dynamic UI updates as the state changes. No special dependencies beyond Blaze templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/ReactiveDict.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template name=\\\"main\\\">\\n  <p>We've always been at war with {{theEnemy}}.</p>\\n  <button class=\\\"change-enemy\\\">Change Enemy</button>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Check in Meteor React App\nDESCRIPTION: Updates the main App component to conditionally render the login form or task management interface based on user authentication status.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport React, { useState, Fragment } from 'react';\nimport { useTracker } from 'meteor/react-meteor-data';\nimport { TasksCollection } from '/imports/api/TasksCollection';\nimport { Task } from './Task';\nimport { TaskForm } from './TaskForm';\nimport { LoginForm } from './LoginForm';\n\n..\nexport const App = () => {\n  const user = useTracker(() => Meteor.user());\n\n  ..\n  return (\n      ..\n      <div className=\"main\">\n        {user ? (\n          <Fragment>\n            <TaskForm />\n\n            <div className=\"filter\">\n              <button onClick={() => setHideCompleted(!hideCompleted)}>\n                {hideCompleted ? 'Show All' : 'Hide Completed'}\n              </button>\n            </div>\n\n            <ul className=\"tasks\">\n              {tasks.map(task => (\n                <Task\n                  key={task._id}\n                  task={task}\n                  onCheckboxClick={handleToggleChecked}\n                  onDeleteClick={handleDelete}\n                />\n              ))}\n            </ul>\n          </Fragment>\n        ) : (\n          <LoginForm />\n        )}\n      </div>\n..\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Methods for Task Operations in JavaScript\nDESCRIPTION: This snippet defines asynchronous Meteor methods (`insertTask`, `removeTask`, `setIsCheckedTask`) on the server side. It uses `check` for argument validation and interacts with the `TasksCollection` using async methods (`insertAsync`, `removeAsync`, `updateAsync`) to manage task data (creation, deletion, updating completion status).\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript [imports/api/tasksMethods.js]\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { TasksCollection } from './tasksCollection';\n\nasync function insertTask(text) {\n    check(text, String);\n    return await TasksCollection.insertAsync({\n        text,\n        createdAt: new Date,\n    });\n}\n\nasync function removeTask(taskId) {\n    check(taskId, String);\n    await TasksCollection.removeAsync(taskId);\n}\n\nasync function setIsCheckedTask(taskId, checked) {\n    check(taskId, String);\n    check(checked, Boolean);\n\n    await TasksCollection.updateAsync(taskId, {\n        $set: {\n            checked\n        }\n    });\n}\n\nMeteor.methods({ insertTask, removeTask, setIsCheckedTask });\n```\n```\n\n----------------------------------------\n\nTITLE: Reactive Subscriptions with Tracker.autorun in Meteor (JavaScript)\nDESCRIPTION: Shows subscribing to multiple publications reactively using Tracker.autorun, ensuring that changing reactive variables causes subscriptions to be cleaned up and re-established as needed. Demonstrates Meteor‚Äôs optimization to avoid unnecessary unsubscribe/subscribes. Useful for per-room chat subscriptions and private messages. Inputs: Session variable changes. Outputs: managed subscriptions corresponding to current state.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nTracker.autorun(() => {\n  Meteor.subscribe(\\\"chat\\\", { room: Session.get(\\\"currentRoom\\\") });\n  Meteor.subscribe(\\\"privateMessages\\\");\n});\n```\n\n----------------------------------------\n\nTITLE: Paginated Subscription with Reactive State\nDESCRIPTION: Shows how to implement client-side pagination using reactive state variables to control the subscription limit.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.Lists_show_page.onCreated(function() {\n  this.getListId = () => FlowRouter.getParam('_id');\n\n  this.autorun(() => {\n    this.subscribe('todos.inList',\n      this.getListId(), this.state.get('requestedTodos'));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Adding Custom Rate-Limit Rule in DDPRateLimiter (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a custom rate-limit rule for non-admin user login attempts and integrates it into DDPRateLimiter. The rule restricts permissible method invocations to five per second, exemplifying the creation of customizable server load management policies. Dependencies include the ddp-rate-limiter package and access to the Meteor.users collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/DDPRateLimiter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Define a rule that matches login attempts by non-admin users.\nconst loginRule = {\n  userId(userId) {\n    const user = Meteor.users.findOne(userId);\n    return user && user.type !== 'admin';\n  },\n\n  type: 'method',\n  name: 'login'\n};\n\n// Add the rule, allowing up to 5 messages every 1000 milliseconds.\nDDPRateLimiter.addRule(loginRule, 5, 1000);\n```\n\n----------------------------------------\n\nTITLE: Handling Async Data Fetching for Vue SSR in Meteor (JavaScript)\nDESCRIPTION: Implements asynchronous data fetching on the server-side for Vue SSR using `akryum:vue-ssr`. It extends `VueSSR.createApp` to be asynchronous, uses `router.onReady`, finds matched route components with `asyncData` methods, executes them (populating a Vuex store), serializes the store state (`window.__INITIAL_STATE__`), and includes it in the response for client-side hydration. Requires `akryum:vue-ssr`, Vue Router, Vuex, and components with `asyncData` methods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nVueSSR.createApp = function (context) {\n\n  // Wait with sending the app to the client until the promise resolves (thanks Akryum)\n  return new Promise((resolve, reject) => {\n    const { app, router, store } = createApp({\n      ssr: true,\n    });\n\n    // 1. Resolve the URL with the router\n    router.push(context.url);\n    \n    router.onReady(async () => {\n      // 2, Fetch any matching components from the router\n      const matchedComponents = router.getMatchedComponents();\n      \n      const route = router.currentRoute;\n    \n      // No matched routes\n      if (!matchedComponents.length) {\n        reject(new Error('not-found'));\n      }\n      \n      // 3. Filter out components that have no asyncData\n      const componentsWithAsyncData = matchedComponents.filter(component => component.asyncData);\n\n      // 4. Map the components into a list of promises \n      // by returning the asyncData method's result\n      const asyncDataPromises = componentsWithAsyncData.map(component => (\n        component.asyncData({ store, route })\n      ));\n      \n      // You can have the asyncData methods resolve promises with data. \n      // However to avoid complexity its recommended to leverage Vuex\n      // In our case we're simply calling Vuex actions in our methods \n      // that do the fetching and storing of the data. This makes the below \n      // step really simple\n      \n      // 5. Resolve all promises. (that's it)\n      await Promise.all(asyncDataPromises);\n      \n      // From this point on we can assume that all the needed data is stored \n      // in the Vuex store. Now we simply need to grap it and push it into \n      // the HTML as a \"javascript string\"\n      \n      // 6. Store the data in the HTML for later hydration of the client bundle\n      const js = `window.__INITIAL_STATE__=${JSON.stringify(store.state)};`;\n      \n      // Resolve the promise with the same object as the simple version\n      // Push our javascript string into the resolver. \n      // The VueSSR package takes care of the rest\n      resolve({\n        app,\n        js, \n      });      \n    });\n  }); \n};\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Publication with Arguments in Meteor\nDESCRIPTION: This snippet shows how to subscribe to a publication that requires arguments. It passes the list._id as an argument to the 'todos.inList' publication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.subscribe('todos.inList', list._id);\n```\n\n----------------------------------------\n\nTITLE: Securing Task Methods with Authentication\nDESCRIPTION: Implementation of secure task methods with user authentication checks. Includes methods for inserting, removing, and updating tasks with proper validation and error handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { TasksCollection } from './tasksCollection';\n\nasync function insertTask(text) {\n    check(text, String);\n    if (!Meteor.userId()) {\n        throw new Meteor.Error('Not authorized.');\n    }\n    return await TasksCollection.insertAsync({\n        text,\n        userId: Meteor.userId(),\n        createdAt: new Date,\n    });\n}\n\nasync function removeTask(taskId) {\n    check(taskId, String);\n    if (!Meteor.userId()) {\n        throw new Meteor.Error('Not authorized.');\n    }\n    await TasksCollection.removeAsync(taskId);\n}\n\nasync function setIsCheckedTask(taskId, checked) {\n    check(taskId, String);\n    check(checked, Boolean);\n\n    if (!Meteor.userId()) {\n        throw new Meteor.Error('Not authorized.');\n    }\n    \n    await TasksCollection.updateAsync(taskId, {\n        $set: {\n            checked\n        }\n    });\n}\n\nMeteor.methods({ insertTask, removeTask, setIsCheckedTask });\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Method Using createMethod with jam:method\nDESCRIPTION: This snippet demonstrates how to define a Meteor method using the createMethod function from jam:method. It includes schema validation, ownership checking, and database updating.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport const setDone = createMethod({\n  name: 'todos.setDone',\n  schema: Todos.schema,\n  before: checkOwnership,\n  async run({ _id, done }) {\n    return Todos.updateAsync({ _id }, { $set: { done } });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Subscription Caching in Meteor\nDESCRIPTION: This snippet demonstrates how to enable global subscription caching in a Meteor application using the PubSub package from 'jam:pub-sub'. Dependencies include the 'meteor/jam:pub-sub' package. The configuration should be applied on the client side. Setting 'cache' to true turns on global caching.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// put this in a file that's imported on the client at a minimum. it can be used isomorphically but the configuration only applies to the client.\\nimport { PubSub } from 'meteor/jam:pub-sub';\\n\\nPubSub.configure({\\n  cache: true // defaults to false\\n});\n```\n\n----------------------------------------\n\nTITLE: Default Exports and Imports in ES2015 JavaScript\nDESCRIPTION: These snippets demonstrate how to use default exports and imports in ES2015 modules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nexport default any.arbitrary(expression);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport Value from './exporter';\n// Value is identical to the exported expression\n```\n\n----------------------------------------\n\nTITLE: Reactive Session Usage with Tracker\nDESCRIPTION: Example demonstrating reactive Session usage with Tracker.autorun for managing chat room subscriptions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/session.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(() => {\n  Meteor.subscribe('chatHistory', { room: Session.get('currentRoomId') });\n});\n\n// Causes the function passed to `Tracker.autorun` to be rerun, so that the\n// 'chatHistory' subscription is moved to the room 'home'.\nSession.set('currentRoomId', 'home');\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform File System Access in Meteor Build Plugins\nDESCRIPTION: This code example illustrates how to use Meteor's Plugin.fs and Plugin.path modules for cross-platform file system operations in build plugins. It demonstrates path joining, file writing, and path conversion between Unix and OS-specific formats.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// On Windows\nconst fs = Plugin.fs;\nconst path = Plugin.path;\n\nconst filePath = path.join('/C/Program Files', 'Program/file.txt');\nconsole.log(filePath); // Prints '/C/Program Files/Program/file.txt'\n\nfs.writeFileSync(filePath, 'Hello.'); // Writes to 'C:\\Program Files\\Program\\file.txt'\n\nconsole.log(Plugin.convertToOsPath(filePath)); // Prints 'C:\\Program Files\\Program\\file.txt'\n```\n\n----------------------------------------\n\nTITLE: Initializing Database on Server Startup with Meteor\nDESCRIPTION: This example demonstrates how to use Meteor.startup() to initialize a database on server startup. The code checks if the server is running, then within the startup callback, it checks if the 'Rooms' collection is empty, and if so, inserts an initial room record.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/core.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// On server startup, if the database is empty, create some initial data.\nif (Meteor.isServer) {\n  Meteor.startup(() => {\n    if (Rooms.find().count() === 0) {\n      Rooms.insert({ name: 'Initial room' });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Test Data Generation for Meteor Integration Tests\nDESCRIPTION: Helper module for generating test data in full app tests. Creates lists and todos using Factory, with methods to reset the database and generate fixtures.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Random } from 'meteor/random';\n\nimport { denodeify } from '../utils/denodeify';\n\nconst createList = (userId) => {\n  const list = Factory.create('list', { userId });\n  [...Array(3).keys()].forEach(() => Factory.create('todo', { listId: list._id }));\n  return list;\n};\n\n// Remember to double check this is a test-only file before\n// adding a method like this!\nMeteor.methods({\n  generateFixtures() {\n    resetDatabase();\n\n    // create 3 public lists\n    [...Array(3).keys()].forEach(() => createList());\n\n    // create 3 private lists\n    [...Array(3).keys()].forEach(() => createList(Random.id()));\n  },\n});\n\nlet generateData;\nif (Meteor.isClient) {\n  // Create a second connection to the server to use to call\n  // test data methods. We do this so there's no contention\n  // with the currently tested user's connection.\n  const testConnection = Meteor.connect(Meteor.absoluteUrl());\n\n  generateData = denodeify((cb) => {\n    testConnection.call('generateFixtures', cb);\n  });\n}\n\nexport { generateData };\n```\n\n----------------------------------------\n\nTITLE: Insecure Method Implementation in Meteor\nDESCRIPTION: This snippet demonstrates an insecure Method implementation that could potentially delete an entire collection if not properly validated.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n  removeWidget(id) {\n    if (! this.userId) {\n      throw new Meteor.Error('removeWidget.unauthorized');\n    }\n\n    Widgets.remove(id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Server-Side Routing with akryum:vue-ssr (JavaScript)\nDESCRIPTION: Extends the `akryum:vue-ssr` setup to handle server-side routing. The `VueSSR.createApp` function now also receives a `context` object containing the request URL. This URL is used to set the initial route for the Vue Router instance (`router.push(context.url)`) before returning the app instance. Requires `akryum:vue-ssr` and a `createApp` function that returns both the `app` and `router` instances.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VueSSR } from 'meteor/akryum:vue-ssr';\nimport createApp from './app';\n\nVueSSR.createApp = function (context) {\n  // Initialize the Vue app instance and return the app + router instance\n  const { app, router } = createApp(); \n  \n  // Set router's location from the context\n  router.push(context.url);\n  \n  return { app };\n}\n```\n\n----------------------------------------\n\nTITLE: Using useQuery Hook with Meteor-RPC in React\nDESCRIPTION: Shows how to use the useQuery hook from the Meteor-RPC client to fetch data from a server method in a React component. The hook uses suspense for handling loading states automatically.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n// you must import the type of the server\nimport type { Server } from \"/imports/api/server\";\nconst app = createClient<Server>();\n\nexport const Component = () => {\n  const { data } = app.bar.useQuery(\"str\"); // this will trigger suspense\n\n  return <div>{data}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Default User and Tasks in Meteor Server\nDESCRIPTION: This snippet shows how to create a default user and seed tasks when the Meteor server starts. It checks for existing users and tasks, then creates them if not present.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { TasksCollection } from '../imports/api/tasksCollection';\nimport '../imports/api/tasksPublications';\nimport '../imports/api/tasksMethods';\n\nconst SEED_USERNAME = 'meteorite';\nconst SEED_PASSWORD = 'password';\n\nconst createFirstUser = async () => {\n  const user = await Accounts.findUserByUsername(SEED_USERNAME);\n  if (!user) {\n    await Accounts.createUserAsync({\n      username: SEED_USERNAME,\n      password: SEED_PASSWORD,\n    });\n  }\n}\n\nconst insertTask = async text => await TasksCollection.insertAsync({text});\n\nconst createTasks = async () => {\n  const tasksCount = await TasksCollection.find().countAsync();\n  if (tasksCount === 0) {\n    await insertTask('First Task');\n    await insertTask('Second Task');\n    await insertTask('Third Task');\n    await insertTask('Fourth Task');\n    await insertTask('Fifth Task');\n    await insertTask('Sixth Task');\n    await insertTask('Seventh Task');\n  }\n}\n\nMeteor.startup(async () => {\n  await createFirstUser();\n  await createTasks();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fields Option in Find and FindOne Methods\nDESCRIPTION: Support for the fields option in collection find and findOne methods on both client and server, allowing for projection of specific fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\nc.find(query, { fields: { /* field projection */ } })\n```\n\n----------------------------------------\n\nTITLE: Using Tracker.autorun to Respond to Reactive Changes\nDESCRIPTION: This example shows how to use Tracker.autorun to automatically re-execute a function whenever reactive values it accesses change. The function logs the user's favorite food, and will automatically run again whenever setFavoriteFood is called.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar handle = Tracker.autorun(function () {\n  console.log(\"Your favorite food is \" + getFavoriteFood());\n});\n// \"Your favorite food is apples\"\n\nsetFavoriteFood(\"mangoes\");\n// \"Your favorite food is mangoes\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Iterating Over Meteor Mongo Cursor Results with forEachAsync\nDESCRIPTION: Example demonstrating the `forEachAsync` method on a `Mongo.Cursor` to asynchronously iterate through the top 5 posts sorted by score and log their titles. The `await` keyword ensures iteration completes before proceeding. This method is suitable for server-side or isomorphic code, returns a Promise, and is the async counterpart to `forEach`. Assumes a `Posts` collection exists.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n\n// Print the titles of the five top-scoring posts.\nconst topPosts = Posts.find({}, { sort: { score: -1 }, limit: 5 });\nlet count = 0;\n\nawait topPosts.forEachAsync((post) => {\n  console.log(`Title of post ${count}: ${post.title}`);\n  count += 1;\n});\n\nconsole.log(\"All done!\"); // This will be printed after all the posts are printed.\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Publication on the Client in Meteor\nDESCRIPTION: This snippet demonstrates how to subscribe to a publication on the client side using Meteor.subscribe(). It returns a subscription handle that can be used to check readiness and stop the subscription.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst handle = Meteor.subscribe('lists.public');\n```\n\n----------------------------------------\n\nTITLE: Rendering Tasks in Vue with Meteor Tracker\nDESCRIPTION: This Vue 3 component (`App.vue`) uses the Composition API (`<script setup>`). It imports `Task` component, `subscribe` and `autorun` from `vue-meteor-tracker`, and the `TasksCollection`. It subscribes to the 'tasks' publication and uses `autorun` to reactively fetch all tasks from the `TasksCollection`, storing the result in the `tasks` constant. The template iterates over `tasks` using `v-for`, rendering a `Task` component for each task.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Task from './components/Task.vue';\nimport { subscribe, autorun } from 'vue-meteor-tracker';\nimport { TasksCollection } from '../api/tasksCollection';\n\nsubscribe('tasks');\nconst tasks = autorun(() => TasksCollection.find({}).fetch()).result;\n</script>\n\n<template>\n  <div class=\"container\">\n    <header>\n      <h1 class=\"text-4xl font-bold text-gray-800 my-4\">Todo List</h1>\n    </header>\n    <ul class=\"list-disc list-inside p-4\">\n      <Task v-for=\"task of tasks\" :key=\"task._id\" :task=\"task\" />\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Comparing Meteor Collection `find().fetch()` vs `find({selector}).fetch()` (JavaScript)\nDESCRIPTION: Contrasts two approaches for processing collection data within a `Tracker.autorun`. Version 1 fetches all posts (`Posts.find().fetch()`) and filters in JavaScript, causing reruns on any change to any post. Version 2 uses a selector (`Posts.find({tag:\"kittens\"}).fetch()`) to fetch only relevant posts, making the autorun react only to changes in posts tagged 'kittens', demonstrating more efficient, fine-grained reactivity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// VERSION 1 (INEFFICIENT)\nTracker.autorun(function(){\n  var allPosts = Posts.find().fetch();\n  for (var post in allPosts) {\n    if (post.tag === \"kittens\") console.log(post.title);\n  }\n});\n\n// VERSION 2 (MORE EFFICIENT)\nTracker.autorun(function(){\n  var postsAboutKittens = Posts.find({tag:\"kittens\"}).fetch();\n  postsAboutKittens.forEach(function (post) {\n    console.log(post.title);\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Login Attempts in Meteor\nDESCRIPTION: A basic pattern for validate login callbacks that should only run if the login attempt hasn't already been determined to fail. This pattern prevents unnecessary validation when a previous validator has already rejected the attempt.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nif (!attempt.allowed) {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Server-Side Logout Callback using AccountsCommon in JavaScript\nDESCRIPTION: This snippet shows how to use the `onLogout` method from an `AccountsCommon` instance to register a callback function. On the server, this function is invoked after a user logs out, receiving the user object, the connection details, and the user collection reference as arguments. It requires importing `AccountsCommon` from `meteor/accounts-base`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { AccountsCommon } from \"meteor/accounts-base\";\nconst options = {\n  //...\n};\nconst accountsCommon = new AccountsCommon(options);\n\naccountsCommon.onLogout(({ user, connection, collection }) => {\n  console.log(user);\n  //        ÀÜÀÜÀÜÀÜÀÜÀÜ The Meteor user object of the user which just logged out\n  console.log(connection);\n  //        ÀÜÀÜÀÜÀÜÀÜÀÜ The connection object the request came in on. See\n  //               `Meteor.onConnection` for details.\n\n  console.log(collection);\n  //        ÀÜÀÜÀÜÀÜÀÜÀÜ The `collection` The name of the Mongo.Collection or the\n  //               Mongo.Collection object to hold the users.\n});\n```\n\n----------------------------------------\n\nTITLE: Watching Session Values and Stopping Computation with Tracker.autorun (Meteor, JavaScript)\nDESCRIPTION: This snippet sets up a Tracker.autorun computation that watches for a Session variable ('shouldAlert') and triggers an alert the first time the condition is met. Upon triggering, it explicitly stops itself via computation.stop() to prevent further reruns. Required dependencies: Meteor Session package. Key input: 'shouldAlert' Session variable; Output: an alert with the message 'Oh no!' when the condition is true. Limitation: Alert fires only once per page load or computation lifecycle.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun((computation) => {\n  if (!Session.equals('shouldAlert', true)) {\n    return;\n  }\n\n  computation.stop();\n  alert('Oh no!');\n});\n```\n\n----------------------------------------\n\nTITLE: Using withTracker HOC Pattern\nDESCRIPTION: Example of implementing withTracker Higher-Order Component for reactive data handling in React components\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withTracker } from 'meteor/react-meteor-data';\n\n// React component (function or class).\nfunction Foo({ listId, currentUser, listLoading, tasks }) {\n  return (\n    <h1>Hello {currentUser.username}</h1>\n    {listLoading ?\n      <div>Loading</div> :\n      <div>\n        Here is the Todo list {listId}:\n        <ul>{tasks.map(task => <li key={task._id}>{task.label}</li>)}</ul>\n      </div}\n  );\n}\n\nexport default withTracker(({ listId }) => {\n  // Do all your reactive data access in this function.\n  // Note that this subscription will get cleaned up when your component is unmounted\n  const handle = Meteor.subscribe('todoList', listId);\n\n  return {\n    currentUser: Meteor.user(),\n    listLoading: !handle.ready(),\n    tasks: Tasks.find({ listId }).fetch(),\n  };\n})(Foo);\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Tests with Mocha Driver and Watch Mode (Text)\nDESCRIPTION: This command demonstrates how to run unit tests defined within a Meteor application. It utilizes the `meteor test` command with the `--driver-package meteortesting:mocha` flag to specify the Mocha test runner and sets the `TEST_WATCH=1` environment variable to automatically re-run tests when files change.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nTEST_WATCH=1 meteor test --driver-package meteortesting:mocha\n```\n\n----------------------------------------\n\nTITLE: Reactive Variables with ReactiveVar in JavaScript\nDESCRIPTION: This code snippet illustrates how to use a ReactiveVar for storing single-dimensional reactive data in a Meteor application. It tracks the visibility state of the document by listening to 'visibilitychange' events. The reactive-var package is required.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nDocumentHidden = new ReactiveVar(document.hidden);\n$(window).on('visibilitychange', (event) => {\n  DocumentHidden.set(document.hidden);\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Meteor Method Call with Callback (JavaScript)\nDESCRIPTION: Demonstrates invoking a Meteor method asynchronously using a callback. Accepts any number of arguments corresponding to the method signature, with the callback as the last argument. Useful for non-blocking calls where the result or error is returned in the callback upon completion. No result is immediately returned to the caller. Inputs: method name, arguments, callback; outputs: callback is called with error/result.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Asynchronous call\nMeteor.call('foo', 1, 2, (error, result) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Updating Task Insertion Method in Meteor\nDESCRIPTION: Modifies the task insertion method to include the user ID when creating a new task.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n..\nMeteor.methods({\n  \"tasks.insert\"(doc) {\n    return TasksCollection.insertAsync({\n      ...doc,\n      userId: this.userId,\n    });\n  },\n..\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in MongoDB Collections (Client-side)\nDESCRIPTION: Client-side example of updating documents in a MongoDB collection using Meteor's update operation. Demonstrates incrementing a player's score in response to a button click.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.adminDashboard.events({\n  'click .give-points'() {\n    Players.update(Session.get('currentPlayer'), {\n      $inc: { score: 5 },\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form in Vue for Meteor\nDESCRIPTION: This Vue component creates a login form that uses Meteor's authentication system. It captures username and password inputs and calls Meteor.loginWithPassword() on form submission.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_37\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Meteor } from 'meteor/meteor';\nimport { ref } from 'vue';\n\nconst username = ref('');\nconst password = ref('');\n\nconst login = () => {\n  Meteor.loginWithPassword(username.value, password.value);\n}\n</script>\n\n<template>\n  <form class=\"flex flex-col justify-center items-center w-full max-w-md mx-auto my-8\" @submit.prevent=\"login\">\n    <div>\n      <label for=\"username\" class=\"block text-gray-700 text-sm font-bold mb-2\">Username</label>\n      <input v-model=\"username\" type=\"text\" name=\"username\" placeholder=\"Username\" required\n             class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n    </div>\n\n    <div class=\"mt-4\">\n      <label for=\"password\" class=\"block text-gray-700 text-sm font-bold mb-2\">Password</label>\n      <input v-model=\"password\" type=\"password\" name=\"password\" placeholder=\"Password\" required\n             class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n    </div>\n\n    <div>\n      <button type=\"submit\"\n              class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 mt-4 px-4 rounded focus:outline-none focus:shadow-outline\">\n        Log in\n      </button>\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project via Command Line - Bash (Version 2.13.1)\nDESCRIPTION: This snippet demonstrates how to update a Meteor.js project to version 2.13.1 using the Meteor CLI. Run this in the root of your Meteor project. The command ensures the project is upgraded to the exact specified release. Dependencies are managed automatically by the Meteor tool. No prior setup is required, but check the migration notes for any breaking changes or manual processes post-update.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 2.13.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Methods in Meteor Server and Client\nDESCRIPTION: Comparison between traditional and new async method implementations in Meteor, showing both server-side method definitions and client-side method calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.8-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// SERVER\n\n// Before 2.8, we would use something like this\nexport const removeByID = ({ id }) => {\n  SomeCollection.remove({ _id: id });\n};\n\n// Now we can also do like this\nexport const removeByIDAsync = async ({ id }) => {\n  await SomeCollection.removeAsync({ _id: id });\n};\n\nMeteor.methods({\n   //...\n   removeByID,\n   removeByIDAsync,\n});\n\n// CLIENT\n\nconst result = Meteor.call('removeByID', { id });\n\n// For the async, you call it like this:\n\nconst result = await Meteor.callAsync('removeByIDAsync', { id });\n\n// or even like this:\n\nMeteor.callAsync('removeByIDAsync', { id }).then(result => {\n   console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Reactive Publication in Meteor\nDESCRIPTION: Shows how to create a custom reactive publication that tracks and publishes collection counts. Uses the low-level added/changed/removed interface with observeChanges.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/pubsub.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Publish the current size of a collection.\nMeteor.publish('countsByRoom', function (roomId) {\n  check(roomId, String);\n\n  let count = 0;\n  let initializing = true;\n\n  // `observeChanges` only returns after the initial `added` callbacks have run.\n  // Until then, we don't want to send a lot of `changed` messages‚Äîhence\n  // tracking the `initializing` state.\n  const handle = Messages.find({ roomId }).observeChanges({\n    added: (id) => {\n      count += 1;\n\n      if (!initializing) {\n        this.changed('counts', roomId, { count });\n      }\n    },\n\n    removed: (id) => {\n      count -= 1;\n      this.changed('counts', roomId, { count });\n    }\n\n    // We don't care about `changed` events.\n  });\n\n  // Instead, we'll send one `added` message right after `observeChanges` has\n  // returned, and mark the subscription as ready.\n  initializing = false;\n  this.added('counts', roomId, { count });\n  this.ready();\n\n  // Stop observing the cursor when the client unsubscribes. Stopping a\n  // subscription automatically takes care of sending the client any `removed`\n  // messages.\n  this.onStop(() => handle.stop());\n});\n\n// Sometimes publish a query, sometimes publish nothing.\nMeteor.publish('secretData', function () {\n  if (this.userId === 'superuser') {\n    return SecretData.find();\n  } else {\n    // Declare that no data is being published. If you leave this line out,\n    // Meteor will never consider the subscription ready because it thinks\n    // you're using the `added/changed/removed` interface where you have to\n    // explicitly call `this.ready`.\n    return [];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side Subscription Usage in Meteor\nDESCRIPTION: Demonstrates how to subscribe to publications on the client side using Tracker.autorun for reactivity, and how to use the subscribed data through collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/pubsub.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Declare a collection to hold the count object.\nconst Counts = new Mongo.Collection('counts');\n\n// Subscribe to the count for the current room.\nTracker.autorun(() => {\n  Meteor.subscribe('countsByRoom', Session.get('roomId'));\n});\n\n// Use the new collection.\nconst roomCount = Counts.findOne(Session.get('roomId')).count;\nconsole.log(`Current room has ${roomCount} messages.`);\n```\n\n----------------------------------------\n\nTITLE: Logging in with GitHub OAuth in Meteor (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initiate a GitHub OAuth login flow in Meteor, requesting specific user permissions using Meteor.loginWithGithub. The callback handles potential errors, storing any messages in a Session variable for reactive display. Assumes the accounts-github package is installed and correct service configuration exists; 'requestPermissions' specifies requested OAuth scopes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nMeteor.loginWithGithub(\n  {\n    requestPermissions: [\"user\", \"public_repo\"],\n  },\n  (error) => {\n    if (error) {\n      Session.set(\"errorMessage\", error.reason || \"Unknown error\");\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Secure User-Scoped Data Publication with Reactive User Checks in Meteor (JavaScript)\nDESCRIPTION: Illustrates a secure way to scope data publications to the current user in Meteor. By filtering the query on both _id (listId) and userId (this.userId), the publication automatically stops sending data to a user if the ownership changes, avoiding data leaks. Uses argument validation with check and restricts fields using the fields option. Assumes Meteor and the Lists collection are available.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// #2: Good! When the owner of the list changes, the old owner won't see it anymore\nMeteor.publish('list', function (listId) {\n  check(listId, String);\n\n  return Lists.find({\n    _id: listId,\n    userId: this.userId\n  }, {\n    fields: {\n      name: 1,\n      incompleteCount: 1,\n      userId: 1\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Meteor Publications\nDESCRIPTION: Example of a simple Meteor publication that returns user-specific notes\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('user.notes', function () {\n    return Notes.find({ userId: this.userId });\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import with Async/Await in JavaScript\nDESCRIPTION: This snippet shows how to use dynamic imports with async/await syntax, providing a cleaner way to handle asynchronous module loading without callback functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/dynamic-import.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function performTask() {\n  const tool = await import(\"tool\");\n  tool.task();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default User in Meteor Server Startup\nDESCRIPTION: Sets up a default user account during server startup if it doesn't already exist in the database.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { TasksCollection } from '/imports/api/TasksCollection';\n\n..\n\nconst SEED_USERNAME = 'meteorite';\nconst SEED_PASSWORD = 'password';\n\nMeteor.startup(async () => {\n  if (!(await Accounts.findUserByUsername(SEED_USERNAME))) {\n    await Accounts.createUser({\n      username: SEED_USERNAME,\n      password: SEED_PASSWORD,\n    });\n  }\n  ..\n});\n```\n\n----------------------------------------\n\nTITLE: Password Reset Flow in Meteor\nDESCRIPTION: Example of handling password reset link clicks and implementing the reset password flow in the client code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nAccounts.onResetPasswordLink((token, done) => {\n  // Display the password reset UI, get the new password...\n\n  Accounts.resetPassword(token, newPassword, (err) => {\n    if (err) {\n      // Display error\n    } else {\n      // Resume normal operation\n      done();\n    }\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring Public and Private Settings in Meteor\nDESCRIPTION: These examples demonstrate how to structure settings files with public and private properties. Public settings are accessible on the client, while private settings are only available on the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\"public\": {\"publicKey\": \"xxxxx\"},\n\"private\": {\"privateKey\": \"xxxxx\"}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\"public\": {\"publicKey\": \"xxxxx\"},\n\"privateKey\": \"xxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Full App Integration Testing with Flow Router\nDESCRIPTION: Integration test that checks routing and data loading behavior. Uses test data generation and waits for subscriptions to be ready before verifying list contents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-env mocha */\n/* eslint-disable func-names, prefer-arrow-callback */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\nimport { DDP } from 'meteor/ddp-client';\nimport { FlowRouter } from 'meteor/ostrio:flow-router-extra';\nimport { assert } from 'chai';\n\nimport { Promise } from 'meteor/promise';\nimport $ from 'jquery';\n\nimport { denodeify } from '../../utils/denodeify';\nimport { generateData } from './../../api/generate-data.app-tests.js';\nimport { Lists } from '../../api/lists/lists.js';\nimport { Todos } from '../../api/todos/todos.js';\n\n\n// Utility -- returns a promise which resolves when all subscriptions are done\nconst waitForSubscriptions = () => new Promise(resolve => {\n  const poll = Meteor.setInterval(() => {\n    if (DDP._allSubscriptionsReady()) {\n      Meteor.clearInterval(poll);\n      resolve();\n    }\n  }, 200);\n});\n\n// Tracker.afterFlush runs code when all consequent of a tracker based change\n//   (such as a route change) have occured. This makes it a promise.\nconst afterFlushPromise = denodeify(Tracker.afterFlush);\n\nif (Meteor.isClient) {\n  describe('data available when routed', () => {\n    // First, ensure the data that we expect is loaded on the server\n    //   Then, route the app to the homepage\n    beforeEach(() => generateData()\n      .then(() => FlowRouter.go('/'))\n      .then(waitForSubscriptions)\n    );\n\n    describe('when logged out', () => {\n      it('has all public lists at homepage', () => {\n        assert.equal(Lists.find().count(), 3);\n      });\n\n      it('renders the correct list when routed to', () => {\n        const list = Lists.findOne();\n        FlowRouter.go('Lists.show', { _id: list._id });\n\n        return afterFlushPromise()\n          .then(waitForSubscriptions)\n          .then(() => {\n            assert.equal($('.title-wrapper').html(), list.name);\n            assert.equal(Todos.find({ listId: list._id }).count(), 3);\n          });\n      });\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using onRequire for Automatic HMR Updates\nDESCRIPTION: This example shows how to use the onRequire method to automatically detect and handle modules that can be updated with HMR. It demonstrates checking if a module can accept updates and logging information about the module evaluation process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/hot-module-replacement.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (module.hot) {\n  module.hot.onRequire({\n    before(requiredModule, parentId) {\n      return {\n        importedBy: parentId,\n        previouslyEvaluated: !requiredModule.loaded\n      }\n    },\n    after(requiredModule, data) {\n      if (!data.previouslyEvaluated) {\n        console.log(`Finished evaluating ${requiredModule.id}`);\n        console.log(`It was imported by ${data.importedBy}`);\n        console.log(`Its exports are ${requiredModule.exports}`);\n      }\n\n      if (requiredModule.hot && canAcceptUpdates(requiredModule)) {\n        requiredModule.hot.accept();\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Runtime Configuration Hook in Meteor WebApp\nDESCRIPTION: This snippet shows how to use WebApp.addRuntimeConfigHook to dynamically modify the meteor_runtime_config variable at runtime. It checks the request headers and modifies the configuration based on specific conditions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/webapp.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nWebApp.addRuntimeConfigHook(\n  ({ arch, request, encodedCurrentConfig, updated }) => {\n    // check the request to see if this is a request that requires\n    // modifying the runtime configuration\n    if (request.headers.domain === \"calling.domain\") {\n      // make changes to the config for this domain\n      // decode the current runtime config string into an object\n      const config = WebApp.decodeRuntimeConfig(current);\n      // make your changes\n      config.newVar = \"some value\";\n      config.oldVar = \"new value\";\n      // encode the modified object to the runtime config string\n      // and return it\n      return WebApp.encodeRuntimeConfig(config);\n    }\n    // Not modifying other domains so return undefined\n    return undefined;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Document Transformation in Meteor Collections\nDESCRIPTION: Shows how to use the transform option to convert plain documents into class instances. The example creates an Animal class with methods and applies it to documents from a collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// An animal class that takes a document in its constructor.\nclass Animal {\n  constructor(doc) {\n    _.extend(this, doc);\n  }\n\n  makeNoise() {\n    console.log(this.sound);\n  }\n}\n\n// Define a collection that uses `Animal` as its document.\nconst Animals = new Mongo.Collection('animals', {\n  transform: doc => new Animal(doc),\n});\n\n// Create an animal and call its `makeNoise` method.\nAnimals.insert({ name: 'raptor', sound: 'roar' });\nAnimals.findOne({ name: 'raptor' }).makeNoise(); // Prints 'roar'\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await for Dynamic Import in JavaScript\nDESCRIPTION: Shows how to use async/await syntax for cleaner handling of dynamic imports\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/dynamic-import.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function performTask() {\n  const tool = await import(\"tool\");\n  tool.task();\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Incomplete Task Count Reactively in App Component Script (Vue/JavaScript/Meteor)\nDESCRIPTION: This snippet adds logic to `App.vue`'s `<script setup>` to reactively calculate the number of incomplete tasks. It uses `autorun` to re-run the count whenever task data changes. `TasksCollection.find({ checked: { $ne: true } }).count()` efficiently counts the tasks that are not checked, storing the result in `incompleteTasksCount`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n```vue [imports/ui/App.vue]\n<script setup>\n... \nconst incompleteTasksCount = autorun(() => {\n  return TasksCollection.find({ checked: { $ne: true } }).count();\n}).result;\n...\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Account Options in Meteor (JavaScript)\nDESCRIPTION: Configures the accounts-ui-unstyled package with provider-specific permissions, offline token requests, and signup field requirements using Accounts.ui.config. This controls authentication UI behavior and backend OAuth integrations. Requires the accounts-base and accounts-ui-unstyled packages; input is an options object specifying per-provider permission arrays and UI settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Accounts } from \"meteor/accounts-base\";\n\nAccounts.ui.config({\n  requestPermissions: {\n    facebook: [\"user_likes\"],\n    github: [\"user\", \"repo\"],\n  },\n  requestOfflineToken: {\n    google: true,\n  },\n  passwordSignupFields: \"USERNAME_AND_OPTIONAL_EMAIL\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cursor forEach Method in Meteor\nDESCRIPTION: Example showing how to use the forEach method on a MongoDB cursor in Meteor. This code retrieves the top 5 posts sorted by score and prints their titles. The forEach method executes a callback for each document in the result set.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Print the titles of the five top-scoring posts.\nconst topPosts = Posts.find({}, { sort: { score: -1 }, limit: 5 });\nlet count = 0;\n\ntopPosts.forEach(post => {\n  console.log(`Title of post ${count}: ${post.title}`);\n  count += 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Accounts and OAuth Services in Meteor Settings\nDESCRIPTION: New ability to configure Accounts.config() and third-party login services using Meteor settings in version 2.5.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// In settings.json\n{\n  \"packages\": {\n    \"accounts-base\": {\n      \"loginExpirationInDays\": 30\n    },\n    \"accounts-google\": {\n      \"clientId\": \"YOUR_CLIENT_ID\",\n      \"secret\": \"YOUR_CLIENT_SECRET\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Meteor Accounts Across Servers via DDP\nDESCRIPTION: Demonstrates authenticating a user on a second Meteor server (B) using the resume token obtained from the first server (A). Requires both servers to share the same database and uses `DDP.connect()` to establish a connection and a separate `AccountsClient` instance to log in with the token. The code runs on server A.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// This is server A's token as the default `Accounts` points at our server\nconst token = Accounts._storedLoginToken();\n\n// We create a *second* accounts client pointing at server B\nconst app2 = DDP.connect('url://of.server.b');\nconst accounts2 = new AccountsClient({ connection: app2 });\n\n// Now we can login with the token. Further calls to `accounts2` will be authenticated\naccounts2.loginWithToken(token);\n```\n\n----------------------------------------\n\nTITLE: Publishing Data Using a Predefined Field Dictionary in Meteor (JavaScript)\nDESCRIPTION: Demonstrates using a pre-defined publicFields dictionary when publishing data in Meteor. This approach ensures only approved fields are ever sent to the client and avoids boilerplate duplication across multiple publications. Assumes the Lists collection has a publicFields property as shown previously; only works in the Meteor framework.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.publish('lists.public', function () {\n  return Lists.find({userId: {$exists: false}}, {\n    fields: Lists.publicFields\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.subscribe Subscription Handles (TypeScript)\nDESCRIPTION: Demonstrates how to use a subscription handle to check readiness, stop a subscription, and access the subscription ID. Written in TypeScript, it requires the Meteor package and is used for managing subscription lifecycle and deduplication in Meteor apps. Input: publication name. Output: subscription handle object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meteor } from \\\"meteor/meteor\\\";\nconst handle = Meteor.subscribe(\\\"allPlayers\\\");\n\nhandle.ready(); // True when the server has marked the subscription as ready\n\nhandle.stop(); // Stop this subscription and unsubscribe from the server\n\nhandle.subscriptionId; // The id of the subscription this handle is for.\n```\n\n----------------------------------------\n\nTITLE: Setting User ID in Meteor Methods (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the user ID for the current connection within a Meteor method using this.setUserId. This is useful for implementing custom authentication logic.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n\nMeteor.methods({\n  foo() {\n    this.setUserId(\"some-id\");\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Dependencies\nDESCRIPTION: Example showing how to create and use a Tracker.Dependency to track reactive data changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet weather = 'sunny';\nconst weatherDep = new Tracker.Dependency();\n\nfunction getWeather() {\n  weatherDep.depend();\n  return weather;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor Project with React and TypeScript using Shell\nDESCRIPTION: This command creates a new Meteor project named 'myapp' configured to use TypeScript. While React is the default front-end framework and is included, the `--typescript` flag ensures the project is set up with TypeScript support from the start. Requires Meteor to be installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/web-apps.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor create myapp --typescript\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a Custom EJSON Type (JavaScript)\nDESCRIPTION: Shows how to define a custom type (Distance), implement EJSON serialization methods, and register the type with EJSON.addType for use throughout Meteor's pub/sub and storage systems. Dependencies: Meteor's EJSON module. Key parameters: factory function reconstructs the custom type instance from its JSON value. Accepts custom objects, returns their EJSON stringification. Limitations: Custom types must implement both toJSONValue and typeName methods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/EJSON.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Distance {\n  constructor(value, unit) {\n    this.value = value;\n    this.unit = unit;\n  }\n\n  // Convert our type to JSON.\n  toJSONValue() {\n    return {\n      value: this.value,\n      unit: this.unit,\n    };\n  }\n\n  // Unique type name.\n  typeName() {\n    return \"Distance\";\n  }\n}\n\nEJSON.addType(\"Distance\", function fromJSONValue(json) {\n  return new Distance(json.value, json.unit);\n});\n\nEJSON.stringify(new Distance(10, \"m\"));\n// Returns '{\"$type\":\"Distance\",\"$value\":{\"value\":10,\"unit\":\"m\"}}'\n```\n\n----------------------------------------\n\nTITLE: Using Fetch API for HTTP POST Request in Meteor\nDESCRIPTION: Comprehensive example demonstrating how to use the Fetch API to make a POST request in a Meteor application, including error handling and Meteor's asynchronous wrapper.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/fetch.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { fetch, Headers } from 'meteor/fetch';\n\nasync function postData (url, data) {\n    try {\n      const response = await fetch(url, {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: 'same-origin', // include, *same-origin, omit\n          headers: new Headers({\n              Authorization: 'Bearer my-secret-key',\n              'Content-Type': 'application/json'\n          }),\n          redirect: 'follow', // manual, *follow, error\n          referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n      });\n      const data = await response.json();\n      return response(null, data);\n    } catch (err) {\n      return response(err, null);\n    }\n}\n\nconst postDataCall = Meteor.wrapAsync(postData);\nconst results = postDataCall('https://www.example.org/statsSubmission', { totalUsers: 55 }));\n```\n\n----------------------------------------\n\nTITLE: Connecting to External DDP Server in Meteor JavaScript\nDESCRIPTION: The DDP.connect() function allows connecting to another Meteor application or DDP server. It returns an object with methods for subscribing to data sets, calling remote methods, and managing the connection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/connections.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDDP.connect(url)\n```\n\n----------------------------------------\n\nTITLE: Secure vs Insecure User Data Update Methods in Meteor\nDESCRIPTION: This snippet contrasts a secure and insecure way of updating user data in Meteor Methods, highlighting the importance of using 'this.userId' instead of passing userId as an argument.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// #1: Bad! The client could pass any user ID and set someone else's name\nsetName({ userId, newName }) {\n  Meteor.users.update(userId, {\n    $set: { name: newName }\n  });\n}\n\n// #2: Good, the client can only set the name on the currently logged in user\nsetName({ newName }) {\n  Meteor.users.update(this.userId, {\n    $set: { name: newName }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Reactive Values with Tracker in JavaScript\nDESCRIPTION: This example demonstrates how to create a reactive value using Tracker.Dependency. It implements getter and setter functions for a variable that notify the reactive system when the value changes, allowing any dependent code to automatically re-execute.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar favoriteFood = \"apples\";\nvar favoriteFoodDep = new Tracker.Dependency;\n\nvar getFavoriteFood = function () {\n  favoriteFoodDep.depend();\n  return favoriteFood;\n};\n\nvar setFavoriteFood = function (newValue) {\n  favoriteFood = newValue;\n  favoriteFoodDep.changed();\n};\n\ngetFavoriteFood();\n// \"apples\"\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.EnvironmentVariable to Maintain Context Across Async Boundaries\nDESCRIPTION: This example demonstrates how to create and use a Meteor.EnvironmentVariable to maintain context across asynchronous code. It creates a currentRequest variable that stores a request ID and uses it in a logging function, preserving the context within the withValue callback.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nconst currentRequest = new Meteor.EnvironmentVariable();\n\nfunction log(message) {\n  const requestId = currentRequest.get() || \"None\";\n  console.log(`[${requestId}]`, message);\n}\n\ncurrentRequest.withValue(\"12345\", () => {\n  log(\"Handling request\"); // Logs: [12345] Handling request\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous User Account Creation (New Method)\nDESCRIPTION: Updated method for creating a user account using the asynchronous Accounts.createUserVerifyingEmail method in Meteor 2.9. This approach uses async/await syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.9-migration.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.methods({\n  async createUserAccount (user) {\n    await Accounts.createUserVerifyingEmail({\n      username: user.username,\n      email: user.email,\n      password: user.password,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Creation\nDESCRIPTION: Example of creating a simple React component using JSX syntax\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nexport const HelloWorld = () => <h1>Hello World</h1>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side MongoDB Collection in Meteor\nDESCRIPTION: This snippet shows how to create a client-side MongoDB collection in Meteor, which acts as a client-side cache of the database using Minimongo.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTodos = new Mongo.Collection('todos');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// This line is changing an in-memory Minimongo data structure\nTodos.insert({_id: 'my-todo'});\n// And this line is querying it\nconst todo = Todos.findOne({_id: 'my-todo'});\n// So this happens right away!\nconsole.log(todo);\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.callAsync in Meteor v3 Client Code\nDESCRIPTION: Updated client-side code using Meteor.callAsync with async/await pattern to fetch data and handle errors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/call-x-callAsync.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n\ntry {\n  const data = await Meteor.callAsync(\"getAllData\"); // [!code highlight]\n  // render data\n} catch (error) {\n  // render error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form in React for Meteor\nDESCRIPTION: Creates a login form component using React hooks to handle user authentication in a Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport React, { useState } from \"react\";\n\nexport const LoginForm = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    Meteor.loginWithPassword(username, password);\n  };\n\n  return (\n    <form onSubmit={submit} className=\"login-form\">\n      <label htmlFor=\"username\">Username</label>\n\n      <input\n        type=\"text\"\n        placeholder=\"Username\"\n        name=\"username\"\n        required\n        onChange={(e) => setUsername(e.target.value)}\n      />\n\n      <label htmlFor=\"password\">Password</label>\n\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        name=\"password\"\n        required\n        onChange={(e) => setPassword(e.target.value)}\n      />\n\n      <button type=\"submit\">Log In</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Security with Roles in Meteor\nDESCRIPTION: Example of a Meteor method using role-based access control to delete a post. It checks if the user has admin or moderator role in the 'posts' scope before allowing the deletion.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// server/methods.js\nMeteor.methods({\n  deletePost: async function (postId) {\n    check(postId, String);\n\n    const canDelete = await Roles.userIsInRoleAsync(\n      this.userId,\n      [\"admin\", \"moderator\"],\n      \"posts\"\n    );\n\n    if (!canDelete) {\n      throw new Meteor.Error(\"unauthorized\", \"Not authorized to delete posts\");\n    }\n\n    Posts.remove(postId);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Schema to Collection in Meteor\nDESCRIPTION: Demonstrates how to attach a SimpleSchema to a Meteor collection using the aldeed:collection2 package for automatic validation of insert/update/upsert operations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nLists.attachSchema(Lists.schema);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Meteor.users Collection in JavaScript\nDESCRIPTION: Demonstrates how to properly add a custom mailing address field to a user document in the Meteor.users collection. Uses a schema from schema.org for the address structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Using address schema from schema.org\n// https://schema.org/PostalAddress\nconst newMailingAddress = {\n  addressCountry: 'US',\n  addressLocality: 'Seattle',\n  addressRegion: 'WA',\n  postalCode: '98052',\n  streetAddress: \"20341 Whitworth Institute 405 N. Whitworth\"\n};\n\nMeteor.users.update(userId, {\n  $set: {\n    mailingAddress: newMailingAddress\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Accounts UI in Meteor\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the Accounts UI package in Meteor, including setting permissions for different OAuth services and configuring password signup fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.ui.config({\n  requestPermissions: {\n    facebook: ['user_likes'],\n    github: ['user', 'repo']\n  },\n  requestOfflineToken: {\n    google: true\n  },\n  passwordSignupFields: 'USERNAME_AND_OPTIONAL_EMAIL'\n});\n```\n\n----------------------------------------\n\nTITLE: Paginated Todo List Publication in Meteor\nDESCRIPTION: Implementation of a paginated publication for todos with validation and limit controls to prevent excessive data loading.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst MAX_TODOS = 1000;\n\nMeteor.publish('todos.inList', function(listId, limit) {\n  new SimpleSchema({\n    listId: { type: String },\n    limit: { type: Number }\n  }).validate({ listId, limit });\n\n  const options = {\n    sort: {createdAt: -1},\n    limit: Math.min(limit, MAX_TODOS)\n  };\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling New Connections in Meteor JavaScript\nDESCRIPTION: The Meteor.onConnection() function registers a callback to be called when a new DDP connection is established. It returns an object with a stop method to unregister the callback.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/connections.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.onConnection(function(connection) {\n  // Handle new connection\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Transport in Meteor\nDESCRIPTION: Example of setting up a custom email transport using Mailgun in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/email.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Email } from 'meteor/email'\nimport { Log } from 'meteor/logging'\nimport Mailgun from 'mailgun-js'\n\nEmail.customTransport = (data) => {\n  // `options.packageSettings` are settings from `Meteor.settings.packages.email`\n  // The rest of the options are from Email.send options\n  const mailgun = Mailgun({ apiKey: data.packageSettings.mailgun.privateKey, domain: 'mg.mygreatapp.com' })\n  \n  // Since the data object that we receive already includes the correct key names for sending\n  // we can just pass it to the mailgun sending message.\n  mailgun.messages().send(data, (error, body) => {\n    if (error) Log.error(error)\n    if (body) Log.info(body)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Public Field Dictionary for Collections in Meteor (JavaScript)\nDESCRIPTION: Shows how to create a reusable dictionary of public fields for a MongoDB collection in a Meteor application. This dictionary centralizes allowed field definitions for consistent and maintainable publication filtering, reducing duplication. This should be placed in the module or file where the collection (e.g., Lists) is defined, and can then be imported or referenced throughout the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In the file where Lists is defined\nLists.publicFields = {\n  name: 1,\n  incompleteCount: 1,\n  userId: 1\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Documents from Meteor Collections on the Server - JavaScript\nDESCRIPTION: Performs asynchronous removal of multiple documents from server-side collections when the app starts. Useful for data cleanup (logs and players with low karma). Dependencies: Meteor.startup, Logs and Players collections, Mongo package. Inputs: No external input; deletes logs and player documents with karma < -2. Outputs: Number of removed documents per call (via Promise, if handled). Limitations: Only for server; for client-side removals use the synchronous API. Must use selectors to prevent accidental large deletions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// When the server starts, clear the log and delete all players with a karma of\n// less than -2.\nMeteor.startup(async () => {\n  if (Meteor.isServer) {\n    await Logs.removeAsync({});\n    await Players.removeAsync({ karma: { $lt: -2 } });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Meteor Mongo Cursor Results with forEach (Client-side)\nDESCRIPTION: Example of using the client-side `forEach` method on a `Mongo.Cursor` to iterate through the top 5 posts sorted by score. It logs the title of each post. This method registers reactive dependencies when used in a reactive computation and is compatible with Array.forEach. Assumes a `Posts` collection exists.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// Print the titles of the five top-scoring posts.\nconst topPosts = Posts.find({}, { sort: { score: -1 }, limit: 5 });\nlet count = 0;\n\ntopPosts.forEach((post) => {\n  console.log(`Title of post ${count}: ${post.title}`);\n  count += 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Request Data Processing for Meta Tags\nDESCRIPTION: Shows how to extract and process request data to generate dynamic meta tags for social previews and SEO purposes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/server-render.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onPageLoad } from \"meteor/server-render\";\n\nconst getBaseUrlFromHeaders = headers => {\n  const protocol = headers['x-forwarded-proto'];\n  const { host } = headers;\n  // we need to have '//' to findOneByHost work as expected\n  return `${protocol ? `${protocol}:` : ''}//${host}`;\n};\n\nconst getContext = sink => {\n  // more details about this implementation here\n  // https://github.com/meteor/meteor/issues/9765\n  const { headers, url, browser } = sink.request;\n  // no useful data will be found for galaxybot requests\n  if (browser && browser.name === 'galaxybot') {\n    return null;\n  }\n  \n  // when we are running inside cordova we don't want to resolve meta tags\n  if (url && url.pathname && url.pathname.includes('cordova/')) {\n    return null;\n  }\n  \n  const baseUrl = getBaseUrlFromHeaders(headers);\n  const fullUrl = `${baseUrl}${url.pathname || ''}`;\n  \n  return { baseUrl, fullUrl };\n}\n\nonPageLoad(sink => {\n  const { baseUrl, fullUrl } = getContext(sink);\n  \n  // product URL contains /product on it\n  const urlParseArray = fullUrl.split('/');\n  \n  const productPosition = urlParseArray.indexOf('product');\n  const productId = productPosition !== -1 && urlParseArray[productPosition + 1].replace('?', '');\n  const product = productId && ProductsCollection.findOne(productId);\n  \n  const productTitle = product && `Buy now ${product.name}, ${product.price}`;\n  if (productTitle) {\n    sink.appendToHead(`<title>${productTitle}</title>\\n`);\n    sink.appendToHead(`<meta property=\"og:title\" content=\"${productTitle}\">\\n`);\n    if (product.imageUrl) {\n      sink.appendToHead(`<meta property=\"og:image\" content=\"${product.imageUrl}\">\\n`);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Method Directly on Meteor | TypeScript\nDESCRIPTION: Provides a method 'foo' using classic Meteor.methods. Validates the argument at runtime with zod before returning a static string. Serves as a baseline comparison with the meteor-rpc approach, showing zod validation can be done manually but is not enforced via typings. Depends on meteor/meteor and zod.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { z } from \"zod\";\n\nMeteor.methods({\n  foo(arg: string) {\n    z.string().parse(arg);\n    return \"foo\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Reactive Dictionary Example with Balances\nDESCRIPTION: This example demonstrates Tracker's consistency by tracking bank balances for two users using ReactiveDict. The autorun function logs the balances and their total, showing how updates are batched for consistency.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar balances = new ReactiveDict;\nbalances.set(\"alice\", \"2\");\nbalances.set(\"bob\", \"1\");\n\nTracker.autorun(function() {\n  console.log(\"Alice:\", balances.get(\"alice\"), \"Bob:\", balances.get(\"bob\"),\n              \"Total:\", balances.get(\"alice\") + balances.get(\"bob\"));\n});\n// \"Alice: 2 Bob: 1 Total: 3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile App Metadata and Resources in Meteor\nDESCRIPTION: This code snippet demonstrates how to set up app metadata, icons, launch screens, preferences, and plugin configurations for a Meteor mobile application using the App API in the mobile-config.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/mobile-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This section sets up some basic app metadata, the entire section is optional.\nApp.info({\n  id: 'com.example.matt.uber',\n  name: '√ºber',\n  description: 'Get √ºber power in one button click',\n  author: 'Matt Development Group',\n  email: 'contact@example.com',\n  website: 'http://example.com'\n});\n\n// Set up resources such as icons and launch screens.\nApp.icons({\n  'iphone_2x': 'icons/icon-60@2x.png',\n  'iphone_3x': 'icons/icon-60@3x.png',\n  // More screen sizes and platforms...\n});\n\n// Before Meteor 2.6 we had to pass device specific splash screens for iOS, but this behavior was dropped in favor of story board images.\nApp.launchScreens({\n    // iOS\n    // For most cases you will only need to use the 'ios_universal' and 'ios_universal_3x'.\n    'ios_universal': { src: 'splash/Default@2x.png', srcDarkMode: 'splash/Default@2x~dark.png' }, // (2732x2732) - All @2x devices, if device/mode specific is not declared\n    'ios_universal_3x': 'splash/Default@3x.png', // (2208x2208) - All @3x devices, if device/mode specific is not declared\n    \n    // If you still want to use a universal splash, but want to fine-tune for the device mode (landscape, portrait), then use the following keys:\n    'Default@2x~universal~comany': 'splash/Default@2x~universal~comany.png', // (1278x2732) - All @2x devices in portrait mode.\n    'Default@2x~universal~comcom': 'splash/Default@2x~universal~comcom.png', // (1334x750) - All @2x devices in landscape (narrow) mode.\n    'Default@3x~universal~anycom': 'splash/Default@3x~universal~anycom.png', // (2208x1242) - All @3x devices in landscape (wide) mode.\n    'Default@3x~universal~comany': 'splash/Default@3x~universal~comany.png', // (1242x2208) - All @3x devices in portrait mode.\n    \n    // However, if you need to fine tune the splash screens for the device idiom (iPhone, iPad, etc).\n    'Default@2x~iphone~anyany': 'splash/Default@2xiphoneanyany.png', // (1334x1334) - iPhone SE/6s/7/8/XR\n    'Default@2x~iphone~comany': 'splash/Default@2xiphonecomany.png', // (750x1334) - iPhone SE/6s/7/8/XR - portrait mode\n    'Default@2x~iphone~comcom': 'splash/Default@2xiphonecomcom.png', // (1334x750) - iPhone SE/6s/7/8/XR - landscape (narrow) mode\n    'Default@3x~iphone~anyany': 'Default@3xiphoneanyany.png', // (2208x2208) - iPhone 6s Plus/7 Plus/8 Plus/X/XS/XS Max\n    'Default@3x~iphone~anycom': { src: 'splash/Default@3xiphoneanycom.png', srcDarkMode: 'splash/Default@3xiphoneanycom~dark.png' }, // (2208x1242) - iPhone 6s Plus/7 Plus/8 Plus/X/XS/XS Max - landscape (wide) mode\n    'Default@3x~iphone~comany': 'Default@3xiphonecomany.png', // (1242x2208) - iPhone 6s Plus/7 Plus/8 Plus/X/XS/XS Max - portrait mode\n    'Default@2x~ipad~anyany': 'Default@2xipadanyany.png', // (2732x2732) - iPad Pro 12.9\"/11\"/10.5\"/9.7\"/7.9\"\n    'Default@2x~ipad~comany': 'Default@2xipadcomany.png', // (1278x2732) - iPad Pro 12.9\"/11\"/10.5\"/9.7\"/7.9\" - portrait mode\n    \n    // Android\n    'android_universal': 'splash/android_universal.png', // (320x480)\n});\n\n// Set PhoneGap/Cordova preferences.\nApp.setPreference('BackgroundColor', '0xff0000ff');\nApp.setPreference('HideKeyboardFormAccessoryBar', true);\nApp.setPreference('Orientation', 'default');\nApp.setPreference('Orientation', 'all', 'ios');\n\n// Pass preferences for a particular PhoneGap/Cordova plugin.\nApp.configurePlugin('com.phonegap.plugins.facebookconnect', {\n  APP_ID: '1234567890',\n  API_KEY: 'supersecretapikey'\n});\n\n// Add custom tags for a particular PhoneGap/Cordova plugin to the end of the\n// generated config.xml. 'Universal Links' is shown as an example here.\nApp.appendToConfig(`\n  <universal-links>\n    <host name=\"localhost:3000\" />\n  </universal-links>\n`);\n```\n\n----------------------------------------\n\nTITLE: Handling Reconnection in Meteor JavaScript\nDESCRIPTION: The DDP.onReconnect() function registers a callback to be called when a DDP connection reconnects. This allows for re-running subscriptions or performing other setup tasks after a reconnection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/connections.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDDP.onReconnect(function() {\n  // Handle reconnection\n})\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Modifiers\nDESCRIPTION: Examples of MongoDB update modifiers using $set and other operators to modify documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the `admin` property on the document to true.\n{ $set: { admin: true } }\n\n// Add 2 to the `votes` property and add 'Traz' to the end of the `supporters`\n// array.\n{ $inc: { votes: 2 }, $push: { supporters: 'Traz' } }\n```\n\n----------------------------------------\n\nTITLE: Supported Schema Syntax Examples in JavaScript\nDESCRIPTION: This snippet provides syntax examples of various schemas supported by Jam, including 'jam:easy-schema', 'check', 'zod', and 'simpl-schema'. It highlights how to define schema objects that can be used for method validation in a Meteor app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// jam:easy-schema. you'll attach to a Collection so you can reference one {Collection}.schema in your methods\nconst schema = {text: String, isPrivate: Optional(Boolean)}\n// check\nconst schema = {text: String, isPrivate: Match.Maybe(Boolean)}\n// zod\nconst schema = z.object({text: z.string(), isPrivate: z.boolean().optional()})\n// simpl-schema\nconst schema = new SimpleSchema({text: String, isPrivate: {type: Boolean, optional: true}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor App with TypeScript\nDESCRIPTION: Command to create a Meteor app with React, TypeScript, and MongoDB. Includes a list of npm and Meteor packages that are included by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --typescript app-name\n```\n\n----------------------------------------\n\nTITLE: Efficient List Rendering with useFind and React Memoization - JavaScript/JSX\nDESCRIPTION: This snippet integrates useFind with React.memo to optimize list rendering based on Mongo queries using Meteor. It demonstrates memoizing list items and observing only relevant data changes for fine-grained reactivity. Dependencies are meteor/react-meteor-data, a valid Mongo collection, and React. The useFind hook takes a cursor factory and dependencies; output is an array of documents with stable references. Caution: do not call .fetch() in useFind to maintain reference integrity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { memo } from \"react\";\nimport { useFind } from \"meteor/react-meteor-data\";\nimport TestDocs from \"/imports/api/collections/TestDocs\";\n\n// Memoize the list item\nconst ListItem = memo(({ doc }) => {\n  return (\n    <li>\n      {doc.id},{doc.updated}\n    </li>\n  );\n});\n\nconst Test = () => {\n  const docs = useFind(() => TestDocs.find(), []);\n  return (\n    <ul>\n      {docs.map((doc) => (\n        <ListItem key={doc.id} doc={doc} />\n      ))}\n    </ul>\n  );\n};\n\n// Later on, update a single document - notice only that single component is updated in the DOM\nTestDocs.update({ id: 2 }, { $inc: { someProp: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Fetching User Asynchronously with Meteor.userAsync (JS)\nDESCRIPTION: Shows how to retrieve the complete user document for the current user asynchronously using `Meteor.userAsync`. This function returns a Promise and is available on the server, useful in async contexts. Requires the `meteor/meteor` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nconst user = await Meteor.userAsync();\n```\n\n----------------------------------------\n\nTITLE: Importing Publication Strategies in Meteor\nDESCRIPTION: This snippet demonstrates how to import publication strategies from the DDPServer module in Meteor. It includes all four available strategies: SERVER_MERGE, NO_MERGE_NO_HISTORY, NO_MERGE, and NO_MERGE_MULTI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/pubsub.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DDPServer } from 'meteor/ddp-server'\n\nconst { SERVER_MERGE, NO_MERGE_NO_HISTORY, NO_MERGE, NO_MERGE_MULTI } = DDPServer.publicationStrategies\n```\n\n----------------------------------------\n\nTITLE: Subscribing in a Blaze Template's onCreated Callback in Meteor\nDESCRIPTION: This snippet demonstrates how to set up a subscription within a Blaze template's onCreated callback. It uses this.subscribe() and this.autorun() to create a reactive subscription that updates when the list ID changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.Lists_show_page.onCreated(function() {\n  this.getListId = () => FlowRouter.getParam('_id');\n\n  this.autorun(() => {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Typed RPC Client | meteor-rpc | TypeScript\nDESCRIPTION: Illustrates client-side usage by constructing a typed RPC client via createClient<Server>. Allows calling methods, such as 'bar' or namespaced 'chat.createChat', with full IntelliSense and type safety. Requires both meteor-rpc and TypeScript type import from the server API definition. Ensures strict client-server API matching.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"meteor-rpc\";\n// you must import the type of the server\nimport type { Server } from \"/imports/api/server\";\n\nconst api = createClient<Server>();\nconst bar: \"bar\" = await api.bar(\"some string\");\n// ?^ 'bar'\nconst newChatId = await api.chat.createChat(); // with intellisense\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Templates for Passwordless Login in Meteor\nDESCRIPTION: Shows how to customize the email template for the passwordless login token. The template receives the user object, URL, and a data object containing the sequence (code) that users need to enter for authentication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/accounts-passwordless.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsendLoginToken: {\n  text: (user, url, { sequence }) => {\n    /* text template */\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tasks Collection in Meteor\nDESCRIPTION: Creates a new MongoDB collection to store tasks by instantiating a Mongo.Collection and exporting it for use throughout the application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/2.collections.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mongo } from \"meteor/mongo\";\n\nexport const TasksCollection = new Mongo.Collection(\"tasks\");\n```\n\n----------------------------------------\n\nTITLE: Using Transform Functions with Meteor Collections\nDESCRIPTION: Shows how to use transform functions to modify documents retrieved from a collection, including creating class instances from document data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// An animal class that takes a document in its constructor.\nclass Animal {\n  constructor(doc) {\n    _.extend(this, doc);\n  }\n\n  makeNoise() {\n    console.log(this.sound);\n  }\n}\n\n// Define a collection that uses `Animal` as its document.\nconst Animals = new Mongo.Collection(\"animals\", {\n  transform: (doc) => new Animal(doc),\n});\n\n// Create an animal and call its `makeNoise` method.\nAnimals.insert({ name: \"raptor\", sound: \"roar\" });\nAnimals.findOne({ name: \"raptor\" }).makeNoise(); // Prints 'roar'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Reactive Variable using Tracker.Dependency in JavaScript\nDESCRIPTION: This code demonstrates how to implement a custom reactive data source using `Tracker.Dependency`. It defines a variable `weather`, a `Tracker.Dependency` instance `weatherDep`, a getter function `getWeather` that calls `weatherDep.depend()` to register dependencies, and a setter function `setWeather` that updates the value and calls `weatherDep.changed()` to invalidate dependent computations. This is the fundamental pattern for making arbitrary data reactive within Meteor's Tracker system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nlet weather = 'sunny';\nconst weatherDep = new Tracker.Dependency();\n\nfunction getWeather() {\n  weatherDep.depend();\n  return weather;\n}\n\nfunction setWeather(newWeather) {\n  weather = newWeather;\n\n  // Note: We could add logic here to only call `changed` if the new value is\n  // different from the old value.\n  weatherDep.changed();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript, HTML, and CSS in Meteor\nDESCRIPTION: Examples of importing various file types in a Meteor application using ES2015 import syntax. This shows how to import JavaScript modules, Blaze templates, and CSS files from both relative and absolute paths.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '../../api/lists/methods.js';  // import from relative path\nimport '/imports/startup/client';     // import module with index.js from absolute path\nimport './loading.html';              // import Blaze compiled HTML from relative path\nimport '/imports/ui/style.css';       // import CSS from absolute path\n```\n\n----------------------------------------\n\nTITLE: Converting Meteor.wrapAsync to async/await\nDESCRIPTION: Shows how to replace Meteor.wrapAsync utility with native async/await syntax. The migration removes the wrapper function and directly uses await with the async function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/removed-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n\nconst wrappedFunction = Meteor.wrapAsync(someAsyncFunction);\n\nfunction someFunction() {\n  const result = wrappedFunction();\n  return result;\n}\n\n// After\n\nasync function someFunction() {\n  const result = await someAsyncFunction();\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with a Custom Settings File Using the CLI (Shell)\nDESCRIPTION: Shows how to start a Meteor application locally using a custom settings file via the command-line interface. Uses the --settings argument to pass a JSON configuration (e.g., with API keys or environment parameters) to the app, reducing the need to store secrets in source code. This method is recommended for secure local development and deployment workflows.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n# Pass development settings when running your app locally\nmeteor --settings development.json\n```\n\n----------------------------------------\n\nTITLE: Reactive Subscription with Route Parameters\nDESCRIPTION: Demonstrates setting up a reactive subscription that responds to changes in route parameters using Template lifecycle hooks and autorun.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.Lists_show_page.onCreated(function() {\n  this.getListId = () => FlowRouter.getParam('_id');\n\n  this.autorun(() => {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Establishing DDP Connection\nDESCRIPTION: Example showing how to manually establish a DDP connection to a server using DDP.connect()\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmyconn = DDP.connect(url)\n```\n\n----------------------------------------\n\nTITLE: Forcing Immediate Reactive Updates with Tracker.flush() in JavaScript\nDESCRIPTION: This example shows how to override Tracker's default batched update behavior by calling Tracker.flush(), which triggers immediate processing of all pending reactive updates instead of waiting for the JavaScript execution to complete.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new ReactiveDict;\ndata.set(\"favoriteFood\", \"chicken\");\n\nTracker.autorun(function () {\n  console.log(data.get(\"favoriteFood\"));\n});\n\nconsole.log(\"start update\");\ndata.set(\"favoriteFood\", \"waffles\");\ndata.set(\"favoriteFood\", \"pie\");\nTracker.flush(); // ADDED LINE\nconsole.log(\"finish update\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Container with withTracker\nDESCRIPTION: Example of using withTracker HOC to subscribe to and fetch data from Meteor collections\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react-native.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyAppContainer = withTracker(() => {\n    \n    const myTodoTasks = Todos.find({completed:false}).fetch();\n    const handle = Meteor.subscribe(\"myTodos\");\n    \n    return {\n        myTodoTasks,\n        loading:!handle.ready()\n    };\n    \n})(MyApp);\n```\n\n----------------------------------------\n\nTITLE: Building a Meteor Project for Deployment using Shell\nDESCRIPTION: Packages the Meteor project for deployment to a specified output path. It builds for all added platforms (server, browser, mobile) unless overridden. Options allow for debug builds, outputting a directory instead of a tarball, building server-only, specifying mobile settings/server URLs, targeting specific architectures, allowing incompatible package updates, selecting specific platforms, and choosing Android package type (apk/bundle).\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nmeteor build <output path> [--debug] [--directory] [--server-only]\n          [--mobile-settings settings.json] [--server http://example.com:3000]\n```\n\n----------------------------------------\n\nTITLE: Using useSubscribe with React Suspense\nDESCRIPTION: Implementation of useSubscribe for React Suspense that suspends rendering until subscriptions are ready. The example shows integrating several reactive data sources in a component that supports suspense.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTracker } from \"meteor/react-meteor-data/suspense\";\nimport { useSubscribe } from \"meteor/react-meteor-data/suspense\";\n\nfunction Tasks() {\n  // this component will suspend\n  useSubscribe(\"tasks\");\n  const { username } = useTracker(\"user\", () => Meteor.user()); // Meteor.user() is async meteor 3.0\n  const tasksByUser = useTracker(\n    \"tasksByUser\",\n    () =>\n      TasksCollection.find(\n        { username },\n        { sort: { createdAt: -1 } }\n      ).fetchAsync() // async call\n  );\n\n  // render the tasks\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Meteor `fetch().length` vs `cursor.count()` for Reactivity (JavaScript)\nDESCRIPTION: Compares calculating the number of documents matching a query within a `Tracker.autorun`. Version 1 uses `fetch().length`, which depends on the actual documents and reruns if any matching document is added, removed, or *edited*. Version 2 uses `cursor.count()`, which depends only on the *number* of matching documents, making it more efficient as it only reruns when documents are added or removed, not merely edited.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// VERSION 1: INEFFICIENT\nTracker.autorun(function(){\n  console.log(Posts.find({tags:\"kittens\"}).fetch().length);\n});\n\n// VERSION 2: EFFICIENT\nTracker.autorun(function(){\n  console.log(Posts.find({tags:\"kittens\"}).count());\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Decrypting OAuth Credentials in Meteor\nDESCRIPTION: Shows how to decrypt sensitive service data fields when retrieving OAuth credentials using OAuth.openSecrets.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/oauth-encryption.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst credentials = Twitter.retrieveCredential(token);\nconst serviceData = OAuth.openSecrets(credentials.serviceData);\n```\n\n----------------------------------------\n\nTITLE: Using useSubscription Hook with Meteor-RPC in React\nDESCRIPTION: Demonstrates how to use the useSubscription hook to subscribe to a publication in a React component. The hook provides reactive data and manages the subscription lifecycle while using suspense for loading states.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Server } from \"/imports/api/server\"; // you must import the type\nconst app = createClient<Server>();\n\nexport const Component = () => {\n  // it will trigger suspense and `rooms` is reactive in this context.\n  // When there is a change in the collection it will rerender\n  const { data: rooms, collection: chatCollection } =\n    api.chatRooms.usePublication();\n\n  return (\n    <div>\n      {rooms.map((room) => (\n        <div key={room._id}>{room.name}</div>\n      ))}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Authorization with Composite Publications in JavaScript\nDESCRIPTION: This Meteor snippet uses the publish-composite package to create a reactive publication that considers user admin status for authorization. If the user object changes to match the admin field, associated data is published reactively. Requires reywood:publish-composite and user data schema with an admin field.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.publishComposite('Todos.admin.inList', function(listId) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  const userId = this.userId;\n  return {\n    find() {\n      return Meteor.users.find({_id: userId, admin: true}, {fields: {admin: 1}});\n    },\n    children: [{\n      find(user) {\n        return Lists.find(listId);\n      }\n    },\n    {\n      find(user) {\n        return Todos.find({listId});\n      }\n    }]\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing User Data Retrieval in Meteor\nDESCRIPTION: Examples of how to use the 'fields' parameter added in Meteor 1.10 to avoid retrieving entire user documents when only specific fields are needed, improving performance and reducing resource usage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch only the user's name from the database:\nconst name = Meteor.user({fields: {\"profile.name\": 1}}).profile.name;\n\n// check if an email exists without fetching their entire document from the database:\nconst userExists = !!Accounts.findUserByEmail(email, {fields: {_id: 1}});\n\n// get the user id from a userName:\nconst userId = Accounts.findUserByUsername(userName, {fields: {_id: 1}})?._id;\n```\n\n----------------------------------------\n\nTITLE: Custom Transport for Email Sending in Meteor\nDESCRIPTION: Illustrates setting a custom transport function using Email.customTransport for email dispatch via services like Mailgun. It processes outgoing email events and can modify behavior based on the running environment (e.g., development vs production).\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/email.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Email } from 'meteor/email'\nimport { Log } from 'meteor/logging'\nimport Mailgun from 'mailgun-js'\n\nEmail.customTransport = (data) => {\n  // `options.packageSettings` are settings from `Meteor.settings.packages.email`\n  // The rest of the options are from Email.send options\n  const mailgun = Mailgun({ apiKey: data.packageSettings.mailgun.privateKey, domain: 'mg.mygreatapp.com' })\n\n  // Since the data object that we receive already includes the correct key names for sending\n  // we can just pass it to the mailgun sending message.\n  mailgun.messages().send(data, (error, body) => {\n    if (error) Log.error(error)\n    if (body) Log.info(body)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating App Component with TaskForm in JSX\nDESCRIPTION: This snippet shows how to integrate the TaskForm component into the main App component. It also demonstrates using Meteor's useTracker and useSubscribe hooks for data management.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/3.forms-and-events.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { useTracker, useSubscribe } from \"meteor/react-meteor-data\";\nimport { TasksCollection } from \"/imports/api/TasksCollection\";\nimport { Task } from \"./Task\";\nimport { TaskForm } from \"./TaskForm\";\n\nexport const App = () => {\n  const isLoading = useSubscribe(\"tasks\");\n  const tasks = useTracker(() => TasksCollection.find({}).fetch());\n\n  if (isLoading()) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div>\n      <h1>Welcome to Meteor!</h1>\n\n      <TaskForm />\n\n      <ul>\n        {tasks.map((task) => (\n          <Task key={task._id} task={task} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Modular Meteor Methods: Validation and Custom Context in JavaScript\nDESCRIPTION: Presents usage patterns for a modularly defined Meteor Method. Shows how to call the method using its JS object reference, perform validation only, and invoke method logic directly with a custom userId (useful for testing). This approach assumes the modular method definition as shown previously and includes no additional dependencies beyond those required for method definition.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { updateText } from './path/to/methods.js';\\n\\n// Call the Method\\nupdateText.call({\\n  todoId: '12345',\\n  newText: 'This is a todo item.'\\n}, (err, res) => {\\n  if (err) {\\n    alert(err);\\n  } else {\\n    // success!\\n  }\\n});\\n\\n// Call the validation only\\nupdateText.validate({ wrong: 'args'});\\n\\n// Call the Method with custom userId in a test\\nupdateText.run.call({ userId: 'abcd' }, {\\n  todoId: '12345',\\n  newText: 'This is a todo item.'\\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Documents Against a Schema in Meteor\nDESCRIPTION: These snippets demonstrate how to validate documents against a defined schema in Meteor, both for valid and invalid documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = {\n  name: 'My list',\n  incompleteCount: 3\n};\n\nLists.schema.validate(list);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = {\n  name: 'My list',\n  incompleteCount: 3,\n  madeUpField: 'this should not be here'\n};\n\nLists.schema.validate(list);\n```\n\n----------------------------------------\n\nTITLE: Initializing Tasks Collection with Sample Data\nDESCRIPTION: Server-side code to initialize the tasks collection with sample data if it's empty. Uses Meteor's startup function to check the collection count and insert tasks asynchronously.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { TasksCollection } from '../imports/api/tasksCollection';\n\nconst insertTask = async text => await TasksCollection.insertAsync({text});\n\nMeteor.startup(async () => {\n  const tasksCount = await TasksCollection.find().countAsync();\n  if (tasksCount === 0) {\n    await insertTask('First Task');\n    await insertTask('Second Task');\n    await insertTask('Third Task');\n    await insertTask('Fourth Task');\n    await insertTask('Fifth Task');\n    await insertTask('Sixth Task');\n    await insertTask('Seventh Task');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Async Tracker Autoruns via firstRunPromise in JavaScript\nDESCRIPTION: This example illustrates awaiting the `firstRunPromise` property returned by `Tracker.autorun` when using an async function. This allows sequential execution, ensuring the first autorun's initial asynchronous operations (like `Meteor.userAsync()`) complete before the next `await` statement or subsequent `autorun` begins. It's a way to manually synchronize the startup of reactive computations involving async operations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait Tracker.autorun(async () => {\n  await Meteor.userAsync();\n  (...more async code...)\n}).firstRunPromise;\n\nawait Tracker.autorun(async () => {\n  await asyncSomeOrOther();\n  (...more async code...)\n}).firstRunPromise;\n```\n\n----------------------------------------\n\nTITLE: React 16 Stream Rendering Implementation\nDESCRIPTION: Example of using React 16's renderToNodeStream for improved performance through stream-based rendering.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/server-render/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { renderToNodeStream } from \"react-dom/server\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport App from \"/imports/Server.js\";\n\nonPageLoad(sink => {\n  sink.renderIntoElementById(\"app\", renderToNodeStream(\n    <App location={sink.request.url} />\n  ));\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Jam Methods to a Collection in JavaScript\nDESCRIPTION: Explains how to attach methods to a Mongo collection in a Meteor application. This approach avoids individually importing each method and instead attaches them dynamically to the collection, leveraging dynamic imports for efficiency.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// /imports/api/todos/collection\nimport { Mongo } from 'meteor/mongo';\nimport { schema } from './schema';\n\nexport const Todos = new Mongo.Collection('todos');\n\nTodos.attachSchema(schema); // if you're using jam:easy-schema\n\nconst attach = async () => {\n  const methods = await import('./methods.js') // dynamic import is recommended\n  return Todos.attachMethods(methods); // if you prefer not to use dynamic import, you can simply call attachMethods synchronously\n};\n\nattach().catch(error => console.error('Error attaching methods', error))\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Encryption in Accounts System\nDESCRIPTION: Server-side configuration to set up the OAuth encryption key using Accounts.config(). Should be placed at the top level of source file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/oauth-encryption.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({ oauthSecretKey: 'onsqJ+1e4iGFlV0nhZYobg==' });\n```\n\n----------------------------------------\n\nTITLE: Accessing VitePress Runtime Data via useData Hook (Vue)\nDESCRIPTION: Shows how to import the `useData` hook from 'vitepress' within a `<script setup>` block (typically used in `.vue` files or embedded in `.md` files processed by VitePress). It destructures `site`, `theme`, `page`, and `frontmatter` variables, making VitePress's runtime context data available for use within the component or page.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { site, theme, page, frontmatter } = useData()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Weibo OAuth in Meteor.settings (JSON)\nDESCRIPTION: This JSON snippet shows how OAuth credentials for the Weibo service can be provided in Meteor.settings under the service-configuration key. All required fields (loginStyle, clientId, secret) are specified and will be loaded into the service configuration at app startup. Place this in your settings file and start Meteor with --settings path/to/yourfile.json. Ensures settings are loaded automatically from disk.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"service-configuration\": {\n      \"weibo\": {\n        \"loginStyle\": \"popup\",\n        \"clientId\": \"1292962797\",\n        \"secret\": \"75a730b58f5691de5522789070c319bc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring bcrypt to Argon2 Migration Progress in Meteor\nDESCRIPTION: This snippet demonstrates how to track the progress of password migration from bcrypt to Argon2 by counting users still using bcrypt encryption versus the total number of users with password authentication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst bcryptUsers = await Meteor.users.find({ \"services.password.bcrypt\": { $exists: true } }).countAsync();\nconst totalUsers = await Meteor.users.find({ \"services.password\": { $exists: true } }).countAsync();\nconsole.log(\"Remaining users to migrate:\", bcryptUsers, \"/\", totalUsers);\n```\n\n----------------------------------------\n\nTITLE: Adding Role-Based Permissions with alanning:roles\nDESCRIPTION: Examples of assigning global and scoped roles to users using the alanning:roles package. Shows how to give admin and moderator permissions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Give Alice the 'admin' role\nRoles.addUsersToRoles(aliceUserId, 'admin', Roles.GLOBAL_GROUP);\n\n// Give Bob the 'moderator' role for a particular category\nRoles.addUsersToRoles(bobsUserId, 'moderator', categoryId);\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Method for Deleting Tasks\nDESCRIPTION: This snippet defines a Meteor method 'tasks.delete' that removes a task from the TasksCollection based on its _id.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/4.update-and-remove.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { TasksCollection } from \"./TasksCollection\";\n\nMeteor.methods({\n  ..\n  \"tasks.delete\"({ _id }) {\n    return TasksCollection.removeAsync(_id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Publication Security with Roles in Meteor\nDESCRIPTION: Example of a Meteor publication using role-based access control to publish secret documents. It checks if the user has 'view-secrets' or 'admin' role in the specified scope before publishing the documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/roles.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// server/publications.js\nMeteor.publish(\"secretDocuments\", async function (scope) {\n  check(scope, String);\n\n  const canView = await Roles.userIsInRoleAsync(\n    this.userId,\n    [\"view-secrets\", \"admin\"],\n    scope\n  );\n\n  if (canView) {\n    return SecretDocs.find({ scope: scope });\n  }\n\n  this.ready();\n});\n```\n\n----------------------------------------\n\nTITLE: Using observeChanges to Track Administrators in JavaScript\nDESCRIPTION: Example showing how to use observeChanges to track online administrators. The code establishes a live query that increments a counter when an admin comes online and decrements it when they go offline, with a timeout to stop the query after 5 seconds.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Keep track of how many administrators are online.\nlet count = 0;\nconst cursor = Users.find({ admin: true, onlineNow: true });\n\nconst handle = cursor.observeChanges({\n  added(id, user) {\n    count += 1;\n    console.log(`${user.name} brings the total to ${count} admins.`);\n  },\n\n  removed() {\n    count -= 1;\n    console.log(`Lost one. We're now down to ${count} admins.`);\n  },\n});\n\n// After five seconds, stop keeping the count.\nsetTimeout(() => handle.stop(), 5000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Delete Defaults in Meteor\nDESCRIPTION: Illustrates how to configure the global defaults for soft deleting in Meteor. This includes setting field names, timestamps, auto-filtering, and specifying excluded collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/soft-delete.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  deleted: 'deleted', // the field name used for the boolean flag. you can update to your preference, e.g. 'isDeleted'\n  deletedAt: '', // add the name of the field you'd like to use for a deletedAt timestamp, e.g. 'deletedAt', if you want to include it on your docs\n  autoFilter: true, // automatically adds the { [deleted]: false } filter to your queries\n  overrideRemove: true, // overrides the Collection.removeAsync method to make it a soft delete instead\n  exclude: ['roles', 'role-assignment'] // exclude specific collections from using soft delete. defaults to excluding the collections created the meteor roles package\n};\n```\n\n----------------------------------------\n\nTITLE: Securing Meteor Methods with Dynamic Import\nDESCRIPTION: Shows how to create a method that dynamically imports a function to prevent the code from being inspectable via browser console. This technique helps protect sensitive server-side logic.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  serverOnly: true,\n  async run(args) {\n    const { serviceFunction } = await import('./services');\n\n    serviceFunction(args);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Meteor Methods and Callbacks Example in JavaScript\nDESCRIPTION: Example of using Meteor.call and Meteor.apply with callbacks for handling method results. The onResultReceived callback allows processing method results as soon as they arrive from the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.apply(methodName, params, { onResultReceived: function(result) {\n  // Process result as soon as it arrives, even if method writes\n  // are not available yet\n}})\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Service in Meteor Server\nDESCRIPTION: This snippet demonstrates how to configure an OAuth service (Weibo in this example) on the server side of a Meteor application using the ServiceConfiguration package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ServiceConfiguration } from 'meteor/service-configuration';\nServiceConfiguration.configurations.upsert(\n  { service: 'weibo' },\n  {\n    $set: {\n      loginStyle: \"popup\",\n      clientId: \"1292962797\", // See table below for correct property name!\n      secret: \"75a730b58f5691de5522789070c319bc\"\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Custom EJSON Type toJSONValue Implementation (JavaScript)\nDESCRIPTION: Provides an example of a toJSONValue implementation for a user-defined EJSON type (such as Mongo.ObjectID), returning a serializable string representation. This function is required for custom types to work with EJSON serialization methods. Input: custom object; Output: HEX string suitable for storage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/EJSON.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction () {\n  return this.toHexString();\n}\n```\n\n----------------------------------------\n\nTITLE: ReactiveDict Equality Comparison\nDESCRIPTION: Example showing two different ways to compare values in ReactiveDict, with recommendation for better performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/reactive-dict.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = new ReactiveDict()\n// ... \nstate.get('key') === value\nstate.equals('key', value)\n```\n\n----------------------------------------\n\nTITLE: Creating a Method with Jam in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new method using the Jam package in a Meteor app. The method defines a schema for validation and contains a 'run' function that inserts a new todo item into the database. Dependencies include the Jam package and a collection defined in the application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMethod } from 'meteor/jam:method'; // can import { Methods } from 'meteor/jam:method' instead and use Methods.create if you prefer\n\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema, // using jam:easy-schema in this example\n  async run({ text }) {\n    const todo = {\n      text,\n      done: false,\n      createdAt: new Date(),\n      authorId: Meteor.userId(), // can also use this.userId instead of Meteor.userId()\n    }\n    const todoId = await Todos.insertAsync(todo);\n    return todoId;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Main Server Module | meteor-rpc | TypeScript\nDESCRIPTION: Applies a middleware to the main meteor-rpc module, logging a different message. This runs after submodule middleware (due to last in, first out middleware stack ordering). This setup chains effectful logic like request logging or throttling across both module levels.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { chatModule } from \"./server/chat\";\n\nconst server = createModule()\n  .addMiddlewares([\n    (raw, parsed) => {\n      console.log(\"runs second\");\n    },\n  ])\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .addSubmodule(chatModule)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Self-Stopping Autoruns Using Computation Argument (Meteor, JavaScript)\nDESCRIPTION: This example uses the Computation argument in Tracker.autorun to allow the autorun to stop itself reactively when a specific condition is met. It depends on Meteor's Tracker and ReactiveDict packages. The partyInfo reactive dictionary triggers stopping the autorun when 'status' is set to 'over'. Key parameter: comp (Computation object). Outputs relevant logs, then ceases further executions on stop.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar partyInfo = new ReactiveDict;\npartyInfo.set(\"status\", \"going-strong\");\n\nTracker.autorun(function (comp) {\n  if (partyInfo.equals(\"status\", \"over\")) {\n    console.log(\"Mom's home! Get out! The party's over!\");\n    comp.stop();\n    return;\n  }\n\n  runDiscoLights();\n  crankTheMusic();\n  eatPixieSticks();\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying to Galaxy with Meteor CLI\nDESCRIPTION: Command to deploy a Meteor application to Galaxy hosting platform. Requires settings file with MongoDB configuration and supports deployment to different regions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDEPLOY_HOSTNAME=galaxy.meteor.com meteor deploy your-app.com --settings production-settings.json\n```\n\n----------------------------------------\n\nTITLE: Adding Sample Tasks to App Component\nDESCRIPTION: Updating the App component to import the Task component and define sample tasks. The getTasks function returns an array of task objects with IDs and text descriptions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Task from './components/Task.vue'\n\nconst getTasks = () => {\n    return [\n      { _id: 1, text: 'Install Node.js 20' },\n      { _id: 2, text: 'Install Meteor 3' },\n      { _id: 3, text: 'Create and run your project' },\n    ];\n}\n</script>\n\n<template>\n  <div class=\"p-8\">\n    <h1>Hello Meteor</h1>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Method for Inserting Tasks\nDESCRIPTION: Creates a Meteor Method named `insertTask` in `imports/api/tasksMethods.js`. This asynchronous server-side function accepts a `text` argument, validates it using `check` to ensure it's a String, and then inserts a new document into the `TasksCollection` using `insertAsync`. The document includes the provided text and the current server timestamp (`createdAt`). The method is registered using `Meteor.methods`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { TasksCollection } from './tasksCollection';\n\nasync function insertTask(text) {\n    check(text, String);\n    return await TasksCollection.insertAsync({\n        text,\n        createdAt: new Date,\n    });\n}\n\nMeteor.methods({ insertTask });\n```\n\n----------------------------------------\n\nTITLE: React Component Unit Test\nDESCRIPTION: Unit test for a React todo item component using Enzyme for component testing and assertions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Factory } from 'meteor/dburles:factory';\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport chai from 'chai';\nimport TodoItem from './TodoItem.jsx';\n\ndescribe('TodoItem', () => {\n  it('should render', () => {\n    const todo = Factory.build('todo', { text: 'testing', checked: false });\n    const item = shallow(<TodoItem todo={todo} />);\n    chai.assert(item.hasClass('list-item'));\n    chai.assert(!item.hasClass('checked'));\n    chai.assert.equal(item.find('.editing').length, 0);\n\n```\n\n----------------------------------------\n\nTITLE: Using useMutation Hook with Meteor-RPC in React\nDESCRIPTION: Demonstrates how to use the useMutation hook from the Meteor-RPC client to call a server method in a React component. It shows handling loading, error states, and triggering the mutation on button click.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// you must import the type\nimport type { Server } from \"/imports/api/server\";\nconst app = createClient<Server>();\n\nexport const Component = () => {\n  const { mutate, isLoading, isError, error, data } = app.bar.useMutation();\n\n  return (\n    <button\n      onClick={() => {\n        mutation.mutate(\"str\");\n      }}\n    >\n      Click me\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs in Meteor\nDESCRIPTION: Returns a unique identifier string of specified length (defaults to 17 characters). The generated ID is designed to be globally unique.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/random/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.id([n])\n```\n\n----------------------------------------\n\nTITLE: Sending Email from Meteor Server and Client\nDESCRIPTION: Example of defining a server method to send emails and calling it from the client in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/email.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Server: Define a method that the client can call.\nMeteor.methods({\n  sendEmail(to, from, subject, text) {\n    // Make sure that all arguments are strings.\n    check([to, from, subject, text], [String]);\n\n    // Let other method calls from the same client start running, without\n    // waiting for the email sending to complete.\n    this.unblock();\n\n    Email.send({ to, from, subject, text });\n  }\n});\n\n// Client: Asynchronously send an email.\nMeteor.call(\n  'sendEmail',\n  'Alice <alice@example.com>',\n  'bob@example.com',\n  'Hello from Meteor!',\n  'This is a test of Email.send.'\n);\n```\n\n----------------------------------------\n\nTITLE: Using Cordova Plugins with Proper Initialization\nDESCRIPTION: Demonstrates how to properly initialize and use Cordova plugins by ensuring code runs after the deviceready event.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\n// The plugin may not have been initialized here\nnavigator.geolocation.getCurrentPosition(success);\n\nMeteor.startup(function() {\n    // Here we can be sure the plugin has been initialized\n    navigator.geolocation.getCurrentPosition(success);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Indexes in Meteor\nDESCRIPTION: Example of creating an index on a MongoDB collection in Meteor. Shows how to index the userId field in a Players collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPlayers.createIndex({ userId: 1 }, { name: 'user reference on players' });\n```\n\n----------------------------------------\n\nTITLE: Conditional Meteor Subscription with useSubscribe Hook - JavaScript/JSX\nDESCRIPTION: This example shows how to conditionally subscribe to a Meteor publication using useSubscribe. By passing a falsy value for the subscription name, the hook bypasses the subscription and always reports isLoading as false. This pattern is useful for optional data loading based on component logic. Inputs are a conditional boolean and optionally a publication name; output is the isLoading function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst needsData = false;\nconst isLoading = useSubscribe(needsData ? \"my-pub\" : null);\n\n// When a subscription is not used, isLoading() will always return false\n```\n\n----------------------------------------\n\nTITLE: Testing Meteor Packages\nDESCRIPTION: Runs unit tests for specified Meteor packages (or all available packages if none are specified). Packages can be identified by name or path. It starts a test runner with a browser dashboard (defaulting to localhost:3000) that updates on file changes. Options allow specifying the port, release, enabling debugging, configuring mobile testing, setting production mode, providing settings, controlling linting, adding extra packages, and choosing a test driver.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor test-packages [--release <release>] [options] [package...]\n```\n\nLANGUAGE: shell\nCODE:\n```\nOptions:\n  --port, -p        Port to listen on (instead of the default 3000). Also\n                    uses port N+1 and N+2.\n  --open, -o        Opens a browser window when the app starts.\n  --inspect[-brk][=<port>]\n                    Enable server-side debugging via debugging clients like\n                    the Node.js command-line debugger, Chrome DevTools, or\n                    Visual Studio Code. With --inspect-brk, the server will\n                    be paused at startup, waiting for clients to attach to\n                    the process on the specified port (default: 9229).\n  --mobile-server   If running tests in an emulator or on a mobile device,\n                    the location where mobile builds connect to the\n                    Meteor server. Defaults to your local IP and the\n                    port that the Meteor server binds to. Can include a\n                    URL scheme (for example,\n                    --mobile-server=https://example.com:443).\n  --cordova-server-port\n                    Local port where Cordova will serve the content. It's\n                    important when multiple Cordova apps are build from the same\n                    Meteor app source code as by default the port is generated\n                    using the id inside .meteor/.id file.\n  --production      Simulate production mode. Minify and bundle CSS, JS files.\n  --settings, -s    Set optional data for Meteor.settings on the server\n\n  --ios,            Run tests in an emulator or on a mobile device. All of\n  --android,        the tests for client and server will run in addition to\n  --ios-device,     mobile-specific tests.\n  --android-device\n  --test-app-path   Set the directory in which to create a temporary app used\n                    for tests. Defaults to the system's temporary directory,\n                    usually /tmp.\n  --verbose         Print all output from builds logs.\n  --no-lint         Don't run linters used by the tested packages on every\n                    test app rebuild.\n  --extra-packages  Run with additional packages (comma separated, for example:\n                    --extra-packages \"package-name1, package-name2@1.2.3\")\n  --driver-package  Test driver package to use to run tests and display results.\n                    For example: --driver-package meteortesting:mocha\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Meteor Method in v3 Server Code\nDESCRIPTION: Updated server-side implementation of a Meteor method using async/await pattern with fetchAsync to retrieve MongoDB data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/call-x-callAsync.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { Mongo } from \"meteor/mongo\";\n\nconst MyCollection = new Mongo.Collection(\"myCollection\");\n\nMeteor.methods({\n  async getAllData() {\n    return await MyCollection.find().fetchAsync(); // [!code highlight]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Example Meteor Applications with CLI\nDESCRIPTION: Commands to create three different example Meteor applications - a basic todos app with Blaze, React, and Angular versions. These are the official tutorial applications from meteor.com/tutorials.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_88\n\nLANGUAGE: sh\nCODE:\n```\nmeteor create --example simple-todos\nmeteor create --example simple-todos-react\nmeteor create --example simple-todos-angular\n```\n\n----------------------------------------\n\nTITLE: Configuring Accounts Package in Meteor Settings\nDESCRIPTION: Demonstrates how to apply Accounts.config settings using Meteor.settings.packages.accounts-base. This allows for configuration via JSON-compatible types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.settings.packages['accounts-base'] = {\n  // Add your Accounts.config options here\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Submodule | meteor-rpc | TypeScript\nDESCRIPTION: Defines a 'chat' submodule for the server using meteor-rpc. The submodule provides the 'createChat' method, adds a new chat document with server timestamp and empty messages via ChatCollection.insertAsync, and is finalized with buildSubmodule. Relies on the chat collection setup on the server. Required dependencies: meteor-rpc, a server-side chat collection, and zod.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { ChatCollection } from \"/imports/api/chat\";\nimport { z } from \"zod\";\n\nexport const Chat = createModule(\"chat\")\n  .addMethod(\"createChat\", z.void(), async () => {\n    return ChatCollection.insertAsync({ createdAt: new Date(), messages: [] });\n  })\n  .buildSubmodule();\n```\n\n----------------------------------------\n\nTITLE: Calling a Meteor Method from the Client in JavaScript\nDESCRIPTION: Demonstrates client-side invocation of the 'todos.updateText' Meteor Method using 'Meteor.call'. The function accepts the method name, an arguments object that includes 'todoId' and 'newText', and a callback for error and result handling. If the method throws an error, it is returned as the first argument to the callback. No additional dependencies are required apart from Meteor itself.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.call('todos.updateText', {\\n  todoId: '12345',\\n  newText: 'This is a todo item.'\\n}, (err, res) => {\\n  if (err) {\\n    alert(err);\\n  } else {\\n    // success!\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Session Reactively with Tracker - Meteor JavaScript\nDESCRIPTION: Shows how to import essential Meteor modules and leverage Tracker.autorun for managing reactive data subscriptions based on Session variable changes. The example subscribes to chatHistory with a parameter that updates when Session.set is called, causing the Tracker function to rerun. Requires 'meteor/session', 'meteor/tracker', and 'meteor/meteor' dependencies. Changing Session values causes automatic reruns and updates to subscriptions or templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/session.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Session } from 'meteor/session';\nimport { Tracker } from 'meteor/tracker';\nimport { Meteor } from 'meteor/meteor';\n\nTracker.autorun(() => {\n  Meteor.subscribe('chatHistory', { room: Session.get('currentRoomId') });\n});\n\n// Causes the function passed to `Tracker.autorun` to be rerun, so that the\n// 'chatHistory' subscription is moved to the room 'home'.\nSession.set('currentRoomId', 'home');\n```\n\n----------------------------------------\n\nTITLE: Using Session.get in Blaze Helpers - Meteor HTML and JavaScript\nDESCRIPTION: Illustrates binding Session state to a Blaze template helper, causing the template to update automatically when the session variable changes. The HTML template displays a variable, and the JavaScript helper retrieves its value using Session.get. Changing the session variable updates the rendered output reactively. Dependencies include 'meteor/session' and Blaze.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/session.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"main\">\n  <p>We've always been at war with {{theEnemy}}.</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Publication using DDP Messages in Meteor\nDESCRIPTION: This snippet demonstrates how to create a custom publication using Meteor's low-level DDP API. It shows how to add, change, and remove documents, handle subscription readiness, and clean up resources when the subscription stops.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('custom-publication', function() {\n  // We can add documents one at a time\n  this.added('collection-name', 'id', {field: 'values'});\n\n  // We can call ready to indicate to the client that the initial document sent has been sent\n  this.ready();\n\n  // We may respond to some 3rd party event and want to send notifications\n  Meteor.setTimeout(() => {\n    // If we want to modify a document that we've already added\n    this.changed('collection-name', 'id', {field: 'new-value'});\n\n    // Or if we don't want the client to see it any more\n    this.removed('collection-name', 'id');\n  });\n\n  // It's very important to clean up things in the subscription's onStop handler\n  this.onStop(() => {\n    // Perhaps kill the connection with the 3rd party server\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Promise-based Method Execution with Meteor.callAsync - Stub Promise (JavaScript/ES6+)\nDESCRIPTION: Demonstrates waiting for the client simulation (stub) promise yielded by Meteor.callAsync before reading from the local cache (optimistic UI). Completing stubPromise means the client's optimistic local changes are available before the real server response. Used for instant feedback UI patterns. Inputs: method call; outputs: update to local database (optimistic UI) visible after stubPromise resolves.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Meteor.callAsync('greetUser', 'John').stubPromise;\n\n// üîµ Client simulation\nGreetings.findOne({ name: 'John' }); // üßæ Data is available (Optimistic-UI)\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.2\nDESCRIPTION: This snippet provides the command to update your Meteor project to version 3.2.0. Ensure you are using this command to benefit from the latest features and fixes in this release. It's crucial to perform this update to maintain compatibility with the latest package versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.2\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Collection Methods in Meteor 3.0 Server-Side\nDESCRIPTION: Shows how to update MongoDB collection methods for Meteor 3.0 on the server side. The example demonstrates the transition from synchronous methods to asynchronous methods with the *Async suffix, which is required for server-side operations in Meteor 3.0.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/frequently-asked-questions/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 2.x in the server side\n\nMeteor.methods({\n  myMethod() {\n    const doc = MyCollection.findOne({ _id: '123' });\n  }\n});\n\n\n// v3.0 in the server side\n\nMeteor.methods({\n  async myMethod() {\n    const doc = await MyCollection.findOneAsync({ _id: '123' });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Top Level Await Usage in Meteor\nDESCRIPTION: Shows a simple example of using top level await in a Meteor module. The module waits for the setupLanguages function to complete before proceeding.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/top-level-await.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait setupLanguages();\n```\n\n----------------------------------------\n\nTITLE: Using the Log Utility with Global After Hook\nDESCRIPTION: Demonstrates how to use the logging utility function as a global after hook for all server methods, making it easy to monitor and debug method executions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Methods, server } from 'meteor/jam:method';\n\nMethods.configure({\n  after: server(log)\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mocha Test in Meteor\nDESCRIPTION: A basic example of writing a Mocha test in Meteor using describe and it blocks. Note that arrow functions are discouraged with Mocha testing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my module', function () {\n  it('does something that should be tested', function () {\n    // This code will be executed by the test driver when the app is started\n    // in the correct mode\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.onConnection for Client Connection Management\nDESCRIPTION: API for tracking client connections and storing data associated with individual clients between subscriptions and method calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.onConnection\n```\n\n----------------------------------------\n\nTITLE: Publication Test with PublicationCollector\nDESCRIPTION: Example of testing publications using the johanbrook:publication-collector package\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('notes', function () {\n  it('should return a users notes', function (done) {\n    const collector = new PublicationCollector({userId: noteOne.userId});\n\n    collector.collect('user.notes', (collections) => {\n      chai.assert.typeOf(collections.Lists, 'array');\n      chai.assert.equal(collections.Lists.length, 1);\n      done();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Meteor ValidatedMethod in JavaScript\nDESCRIPTION: Shows the recommended way to define a Meteor Method using the `ValidatedMethod` package. The method name (`todos.updateText`) is camelCased and namespaced (using a dot separator) to indicate the module it belongs to (`todos`). The JavaScript variable (`updateText`) is also camelCased.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// in imports/api/todos/methods.js\nupdateText = new ValidatedMethod({\n  name: 'todos.updateText',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from Promise.await to async/await in Meteor\nDESCRIPTION: Shows how to replace the deprecated Promise.await with native async/await syntax. The new approach uses standard JavaScript async/await functionality instead of Meteor's custom Promise.await implementation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/removed-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n\nfunction someFunction() {\n  const result = Promise.await(someAsyncFunction());\n  return result;\n}\n\n// After\n\nasync function someFunction() {\n  const result = await someAsyncFunction();\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side React Rendering Implementation\nDESCRIPTION: Example of implementing server-side rendering with React using the onPageLoad function to render an App component into a specific element.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/server-render/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { renderToString } from \"react-dom/server\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport App from \"/imports/Server.js\";\n\nonPageLoad(sink => {\n  sink.renderIntoElementById(\"app\", renderToString(\n    <App location={sink.request.url} />\n  ));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Dependency Class in JavaScript for Meteor Tracker\nDESCRIPTION: A simplified implementation of Meteor's Tracker.Dependency class that demonstrates how dependencies are tracked. It stores dependent computations and provides methods to register dependencies and notify when values change.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nDependency = function () {\n  this._nextId = 0;\n  this._dependents = {};\n};\n\nDependency.prototype.depend = function () {\n  var self = this;\n  if (Tracker.currentComputation) {\n    var id = self._nextId++;\n    self._dependents[id] = Tracker.currentComputation;\n    Tracker.currentComputation.onInvalidate(function () {\n      delete self._dependents[id];\n    });\n  }\n};\n\nDependency.prototype.changed = function () {\n  for (var id in this._dependents) {\n    this._dependents[id].invalidate();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ReactiveDict State and Tracker Subscription (JavaScript)\nDESCRIPTION: Demonstrates initializing a ReactiveDict, setting state, and using Tracker.autorun to automatically subscribe to chat history for the current room. Changing the state using set triggers reactivity, updating the subscription. Requires the reactive-dict, tracker, and meteor packages. The state key \\\"currentRoomId\\\" is monitored; changing it (via set) results in rerunning the Tracker.autorun block.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/ReactiveDict.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReactiveDict } from \\\"meteor/reactive-dict\\\";\nimport { Tracker } from \\\"meteor/tracker\\\";\nimport { Meteor } from \\\"meteor/meteor\\\";\n\nconst state = new ReactiveDict();\nstate.set(\\\"currentRoomId\\\", \\\"random\\\");\n\nTracker.autorun(() => {\n  Meteor.subscribe(\\\"chatHistory\\\", { room: state.get(\\\"currentRoomId\\\") });\n});\n\n// Causes the function passed to `Tracker.autorun` to be rerun, so that the\n// 'chatHistory' subscription is moved to the room 'general'.\nstate.set(\\\"currentRoomId\\\", \\\"general\\\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policies in Meteor using BrowserPolicy\nDESCRIPTION: API functions for creating content security policies to control where different types of content can be loaded from, helping to prevent cross-site scripting attacks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/browser-policy.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowContentTypeOrigin(origin)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowContentTypeDataUrl()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowContentTypeSameOrigin()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowContentType()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowSameOriginForAll()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowDataUrlForAll()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowOriginForAll(origin)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowAll()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowFont()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowImageOrigin(\"https://example.com\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowConnectOrigin(\"https://example.com\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowFrameOrigin(\"https://example.com\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowContentTypeSniffing()\n```\n\n----------------------------------------\n\nTITLE: Adding Pending Tasks Counter\nDESCRIPTION: Implementation of pending tasks counter using Meteor's tracking system and conditional rendering to display the count in the app header.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/6.filter-tasks.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n..\n  const pendingTasksCount = useTracker(() =>\n    TasksCollection.find(hideCompletedFilter).count()\n  );\n\n  const pendingTasksTitle = `${\n    pendingTasksCount ? ` (${pendingTasksCount})` : ''\n  }`;\n..\n\n    <h1>\n      üìùÔ∏è To Do List\n      {pendingTasksTitle}\n    </h1>\n..\n```\n\n----------------------------------------\n\nTITLE: Using Tracker with Derived Reactive Values\nDESCRIPTION: This example demonstrates how Tracker automatically tracks reactive dependencies through function calls. An autorun that uses a function that internally calls a reactive getter will still react to changes in the underlying value.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar getReversedFood = function () {\n  return getFavoriteFood().split(\"\").reverse().join(\"\");\n};\ngetReversedFood();\n// \"ekac\"\n\nvar handle = Tracker.autorun(function () {\n  console.log(\"Your favorite food is \" + getReversedFood() + \" when reversed\");\n});\n// Your favorite food is ekac when reversed\nsetFavoriteFood(\"pizza\");\n// Your favorite food is azzip when reversed\n```\n\n----------------------------------------\n\nTITLE: Converting Callback Functions to Promises with Meteor.promisify\nDESCRIPTION: Shows how to convert Meteor's callback-based functions like loginWithPassword to Promise-based functions using Meteor.promisify, enabling them to be used with async/await syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\n\nloginWithPasswordAsync = Meteor.promisify(Meteor.loginWithPassword);\n\nconst login = async () => {\n  try {\n    await loginWithPasswordAsync('username', 'password');\n    console.log('Logged in');\n  } catch (error) {\n    console.error('Login failed', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for Meteor Project Testing\nDESCRIPTION: This YAML configuration file sets up CircleCI to run tests for a Meteor project. It specifies the Node.js version, installs Meteor, and sets up the project dependencies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_27\n\nLANGUAGE: YAML\nCODE:\n```\nmachine:\n  node:\n    version: 0.10.43\ndependencies:\n  override:\n    - curl https://install.meteor.com | /bin/sh\n    - npm install\ncheckout:\n  post:\n    - git submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Denormalization Logic Implementation\nDESCRIPTION: Implementation of a denormalizer object that handles maintaining correct incomplete todo counts across collections when todos are modified.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst incompleteCountDenormalizer = {\n  _updateList(listId) {\n    // Recalculate the correct incomplete count direct from MongoDB\n    const incompleteCount = Todos.find({\n      listId,\n      checked: false\n    }).count();\n\n    Lists.update(listId, {$set: {incompleteCount}});\n  },\n  afterInsertTodo(todo) {\n    this._updateList(todo.listId);\n  },\n  afterUpdateTodo(selector, modifier) {\n    // We only support very limited operations on todos\n    check(modifier, {$set: Object});\n\n    // We can only deal with $set modifiers, but that's all we do in this app\n    if (_.has(modifier.$set, 'checked')) {\n      Todos.find(selector, {fields: {listId: 1}}).forEach(todo => {\n        this._updateList(todo.listId);\n      });\n    }\n  },\n  // Here we need to take the list of todos being removed, selected *before* the update\n  // because otherwise we can't figure out the relevant list id(s) (if the todo has been deleted)\n  afterRemoveTodos(todos) {\n    todos.forEach(todo => this._updateList(todo.listId));\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Client-Side React Hydration with Meteor\nDESCRIPTION: Shows client-side hydration implementation using React with Meteor's onPageLoad function and async/await pattern.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/server-render.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { onPageLoad } from \"meteor/server-render\";\n\nonPageLoad(async sink => {\n  const App = (await import(\"/imports/Client.js\")).default;\n  ReactDOM.hydrate(\n    <App />,\n    document.getElementById(\"app\")\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of build Method in Server Module | meteor-rpc | TypeScript\nDESCRIPTION: Illustrates the proper use of the build method in finalizing a meteor-rpc module to ensure accurate type exporting. Invokes a simple 'bar' method and exports the Server type, facilitating type-safe client usage. Required: build must always be called after methods are defined.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚úÖ it has the build method\nimport { createModule } from \"meteor-rpc\";\nimport { z } from \"zod\";\nconst server = createModule()\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .build();\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Document Permissions\nDESCRIPTION: Shows how to implement document-level permissions using collection helpers to check if a user can edit a specific document.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nLists.helpers({\n  // ...\n  editableBy(userId) {\n    if (!this.userId) {\n      return false;\n    }\n\n    return this.userId === userId;\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom EJSON Type in JavaScript\nDESCRIPTION: Shows how to create a custom 'Distance' type for EJSON. It includes the class definition with required methods and demonstrates how to add the type to EJSON for serialization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/ejson.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass Distance {\n  constructor(value, unit) {\n    this.value = value;\n    this.unit = unit;\n  }\n\n  // Convert our type to JSON.\n  toJSONValue() {\n    return {\n      value: this.value,\n      unit: this.unit\n    };\n  }\n\n  // Unique type name.\n  typeName() {\n    return 'Distance';\n  }\n}\n\nEJSON.addType('Distance', function fromJSONValue(json) {\n  return new Distance(json.value, json.unit);\n});\n\nEJSON.stringify(new Distance(10, 'm'));\n// Returns '{\"$type\":\"Distance\",\"$value\":{\"value\":10,\"unit\":\"m\"}}'\n```\n\n----------------------------------------\n\nTITLE: Recommended Template Lifecycle Callback Registration in Meteor JavaScript\nDESCRIPTION: Illustrates the recommended, modern way to register lifecycle callbacks in Meteor/Blaze using the `onCreated`, `onRendered`, and `onDestroyed` methods. These examples use function calls on the template instance (e.g., `Template.foo.onCreated(...)` or `Template[foo].onCreated(...)`) and are considered the correct approach, avoiding warnings from the 'no-template-lifecycle-assignments' rule. This method is preferred since Meteor v1.0.4.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-template-lifecycle-assignments.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nTemplate.foo.onCreated(function { /* .. */ })\nTemplate.foo.onRendered(function { /* .. */ })\nTemplate.foo.ondestroyed(function { /* .. */ })\n\nTemplate[foo].onCreated(function { /* .. */ })\nTemplate[foo].onRendered(function { /* .. */ })\nTemplate[foo].ondestroyed(function { /* .. */ })\n```\n\n----------------------------------------\n\nTITLE: Password-based Login with 2FA Check\nDESCRIPTION: Example of handling login attempt with password when 2FA is enabled\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/accounts-2fa.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<button\n  onClick={() => {\n    Meteor.loginWithPassword(username, password, (error) => {\n      if (error) {\n        if (error.error === \"no-2fa-code\") {\n          // send user to a page or show a component\n          // where they can provide a 2FA code\n          setShouldAskCode(true);\n          return;\n        }\n        console.error(\"Error trying to log in (user without 2fa)\", error);\n      }\n    });\n  }}\n>\n  Login\n</button>\n```\n\n----------------------------------------\n\nTITLE: Comparing State Values with ReactiveDict get vs equals (JavaScript)\nDESCRIPTION: Compares the conventional way of checking a key's value using get and strict equality versus using equals, which is more efficient for reactivity and template redraw. Demonstrates best practice for minimizing unnecessary UI invalidations. Requires reactive-dict and a reactive dictionary instance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/ReactiveDict.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReactiveDict } from \\\"meteor/reactive-dict\\\";\nconst state = new ReactiveDict();\n// ...\nstate.get(\\\"key\\\") === value;\nstate.equals(\\\"key\\\", value);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Subscriptions Before Routing in Meteor (JavaScript)\nDESCRIPTION: This snippet demonstrates using `this.autorun` and `this.subscriptionsReady()` within a Blaze template's `onCreated` lifecycle hook to wait for a specific subscription ('lists.public') to become ready before programmatically redirecting the user using FlowRouter. It ensures necessary data is available before navigating to the target route ('Lists.show').\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nTemplate.App_rootRedirector.onCreated(function rootRedirectorOnCreated() {\n  // If we needed to open this subscription here\n  this.subscribe('lists.public');\n\n  // Now we need to wait for the above subscription. We'll need the template to\n  // render some kind of loading state while we wait, too.\n  this.autorun(() => {\n    if (this.subscriptionsReady()) {\n      FlowRouter.go('Lists.show', Lists.findOne());\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing toJSONValue for Mongo.ObjectID in JavaScript\nDESCRIPTION: Provides an example of how to implement the toJSONValue method for the Mongo.ObjectID type in EJSON. This method is crucial for custom type serialization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/ejson.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction () {\n  return this.toHexString();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Login Buttons in HTML for Meteor Accounts-UI\nDESCRIPTION: This snippet demonstrates how to add login buttons to a Meteor application using the accounts-ui package. It shows the basic usage and an alignment option for positioning the login dropdown.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/accounts-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{> loginButtons}}\n```\n\nLANGUAGE: html\nCODE:\n```\n{{> loginButtons align=\"right\"}}\n```\n\n----------------------------------------\n\nTITLE: Promise-based Error Handling with then/catch\nDESCRIPTION: Shows how to handle errors using Promise chaining with .then() and .catch() methods. This approach provides an alternative to try/catch blocks while still providing structured error handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.callAsync('myMethod', 'arg1', 'arg2')\n  .then(result => console.log('Method result:', result))\n  .catch(error => console.error('Method error:', error));\n```\n\n----------------------------------------\n\nTITLE: Running a Manually Built Meteor Application\nDESCRIPTION: This Bash snippet outlines the commands to run a pre-built Meteor application bundle after extraction. It first changes into the bundle directory, then navigates into the server programs directory to install necessary Node.js modules using `npm install`. Finally, it starts the Node.js application (`main.js`) using the `node` command, providing essential environment variables: `MONGO_URL` for the database connection string, `ROOT_URL` for the application's base URL, and `PORT` for the listening port.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd my_build_bundle_directory\n(cd programs/server && npm install)\nMONGO_URL=mongodb://localhost:27017/myapp ROOT_URL=http://my-app.com PORT=3000 node main.js\n```\n\n----------------------------------------\n\nTITLE: Publishing Custom User Data Fields in Meteor\nDESCRIPTION: A secure way to publish custom user data by creating a targeted publication that only returns specific fields. This example publishes just the 'initials' field for a specified set of user IDs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('Meteor.users.initials', function ({ userIds }) {\n  // Validate the arguments to be what we expect\n  new SimpleSchema({\n    userIds: { type: [String] }\n  }).validate({ userIds });\n\n  // Select only the users that match the array of IDs passed in\n  const selector = {\n    _id: { $in: userIds }\n  };\n\n  // Only return one field, `initials`\n  const options = {\n    fields: { initials: 1 }\n  };\n\n  return Meteor.users.find(selector, options);\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Main App Layout with Tailwind CSS in Vue Template\nDESCRIPTION: This Vue template defines the main application layout using Tailwind CSS classes for styling. It includes a header with a title and a main content area that contains the `TaskForm` component and a list (`<ul>`) where `Task` components are rendered using `v-for` based on the `tasks` data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/App.vue]\n<template>\n  <header class=\"flex items-center justify-between px-4 py-4 bg-gray-100 border-t border-b border-gray-200\">\n    <h1 class=\"text-4xl font-bold text-gray-800 my-4\">üöÄ To-Do List</h1>\n  </header>\n  <div class=\"mx-auto max-w-2xl px-4 py-8 sm:px-6 lg:px-8\">\n    <div class=\"mb-8 md:w-96 md:mx-auto md:mb-0 md:mt-8 md:px-4 md:py-8 text-center md:bg-gray-100 md:rounded-lg\">\n      <TaskForm />\n      <ul class=\"list-none list-inside pt-4 md:w-96\">\n        <Task v-for=\"task of tasks\" :key=\"task._id\" :task=\"task\" />\n      </ul>\n    </div>\n  </div>\n</template>\n```\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Requests with WebApp in Meteor\nDESCRIPTION: This snippet demonstrates how to use WebApp.handlers to listen to incoming HTTP requests and handle a specific URL. It uses the express API to respond to requests at the '/hello' endpoint.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/webapp.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen to incoming HTTP requests (can only be used on the server).\nWebApp.handlers.use(\"/hello\", (req, res, next) => {\n  res.writeHead(200);\n  res.end(`Hello world from: ${Meteor.release}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Complex Objects with EJSON (JavaScript)\nDESCRIPTION: Demonstrates how EJSON serializes objects containing Date and binary data in a JSON-compatible way. No external dependencies are required beyond Meteor's EJSON module. The object contains a date (represented as a timestamp) and a binary buffer base64-encoded. Inputs: objects with Date and Binary data. Output: JSON-serializable representation suitable for storage or network transfer.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/EJSON.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"d\": { \"$date\": 1358205756553 },\n  \"b\": { \"$binary\": \"c3VyZS4=\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating 2FA with Custom Login Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to integrate the accounts-2fa package with a custom login method. It checks if 2FA is enabled, validates the 2FA code, and handles errors accordingly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/accounts-2fa.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  const result = validateLogin();\n  if (\n    !result.error &&\n    Accounts._check2faEnabled?.(user)\n  ) {\n    if (!code) {\n      Accounts._handleError('2FA code must be informed.');\n    }\n    if (\n      !Accounts._isTokenValid(user.services.twoFactorAuthentication.secret, code)\n    ) {\n      Accounts._handleError('Invalid 2FA code.');\n    }\n  }\n  \n  return result;\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Value Using ReactiveDict in JavaScript\nDESCRIPTION: A simple example showing how to create a reactive value using ReactiveDict with get() and set() methods. It demonstrates creating getter and setter functions for a 'favoriteFood' reactive value.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new ReactiveDict;\n\nvar getFavoriteFood = function () {\n  return data.get(\"favoriteFood\");\n};\n\nvar setFavoriteFood = function (newValue) {\n  data.set(\"favoriteFood\", newValue);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeExternalLogin Hook in Meteor\nDESCRIPTION: Example of using the beforeExternalLogin hook to validate login attempts from external services. This hook allows you to examine service data and the user record before allowing login or account creation from external authentication services.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AccountsServer } from \"meteor/accounts-base\";\nconst options = {\n  //...\n};\nconst accountsServer = new AccountsServer(options);\n\naccountsServer.beforeExternalLogin(({ type, data, user }) => {\n  console.log(type);\n  //       ÀÜÀÜÀÜÀÜÀÜÀÜ The service name, such as \"google\" or \"twitter\". Is a String\n\n  console.log(data);\n  //       ÀÜÀÜÀÜÀÜÀÜÀÜ Data retrieved from the service (eg: email, name, etc)\n  //              Is an Object.\n\n  console.log(user);\n  //       ÀÜÀÜÀÜÀÜÀÜÀÜ If user was found in the database that matches the criteria from the service,\n  //              their data will be provided here. Is an Object.\n});\n```\n\n----------------------------------------\n\nTITLE: Hydrating Vuex Store on Client-Side for SSR (JavaScript)\nDESCRIPTION: Demonstrates the client-side hydration process in a Meteor-Vue SSR setup. Within `Meteor.startup`, it retrieves the initial state (`window.__INITIAL_STATE__`) embedded in the HTML by the server and uses `store.replaceState()` to initialize the Vuex store, ensuring consistency between server-rendered content and the client-side application state. Requires a Vuex store instance and assumes `window.__INITIAL_STATE__` is populated by the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport createApp from './app';\n\nMeteor.startup(() => {\n  const { store, router } = createApp({ // Same function as the server\n    ssr: false,\n  });\n\n  // Hydrate the Vuex store with the JSON string\n  if (window.__INITIAL_STATE__) {\n    store.replaceState(window.__INITIAL_STATE__);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Accounts Package in Meteor\nDESCRIPTION: Adds the accounts-password package to enable username and password authentication in a Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add accounts-password\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for React Hooks\nDESCRIPTION: JSON configuration for eslint-plugin-react-hooks to validate useTracker hook dependencies\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"react-hooks/exhaustive-deps\": [\"warn\", { \"additionalHooks\": \"useTracker|useSomeOtherHook|...\" }]\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Meteor 3 TypeScript Support\nDESCRIPTION: This JSON configuration for tsconfig.json enables TypeScript support for Meteor core packages in the IDE. It preserves symlinks and sets up proper path mapping for Meteor types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/typescript/meteor-types.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"preserveSymlinks\": true,\n    \"paths\": {\n      \"meteor/*\": [\n        \".meteor/local/types/packages.d.ts\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Before and After Hooks in Jam Methods\nDESCRIPTION: Shows how to define 'before' and 'after' hook functions in a Jam method for Meteor. These hooks execute functions before/after the main 'run' logic, allowing extra processing such as permissions checks or post-processing of results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function checkOwnership({ _id }) { // the original input passed into the method is available here. destructuring for _id since that's all we need for this function\n  const todo = await Todos.findOneAsync(_id);\n  if (todo.authorId !== Meteor.userId()) {\n    throw new Meteor.Error('not-authorized')\n  }\n\n  return true; // any code executed as a before function will automatically return the original input passed into the method so that they are available in the run function\n}\n\nexport const markDone = createMethod({\n  name: 'todos.markDone',\n  schema: Todos.schema,\n  before: checkOwnership,\n  async run({ _id, done }) {\n    return await Todos.updateAsync(_id, {$set: {done}});\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction exampleAfter(result, context) {\n  const { originalInput } = context; // the name of the method is also available here\n  // do stuff\n\n  return 'success'; // any code executed as an after function will automatically return the result of the run function\n}\n\nexport const markDone = createMethod({\n  name: 'todos.markDone',\n  schema: Todos.schema,\n  before: checkOwnership,\n  async run({ _id, done }) {\n    return await Todos.updateAsync(_id, {$set: {done}});\n  },\n  after: exampleAfter\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Promise-based Asynchronous Tests with Tinytest\nDESCRIPTION: Shows how to write asynchronous tests using async/await syntax by returning a Promise from the test function, which eliminates the need to explicitly call onComplete().\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTinytest.addAsync(name, async (test) => {\n  test.equal(shouldReturnFoo(), \"foo\");\n  const bar = await shouldReturnBarAsync();\n  test.equal(bar, \"bar\");\n});\n```\n\n----------------------------------------\n\nTITLE: Money Transfer Function with Deferred Updates\nDESCRIPTION: This function transfers money between accounts while maintaining consistency. The autorun doesn't trigger until both account balances have been updated, ensuring the system remains in a consistent state.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar transferMoney = function (amount) {\n  bank.set(\"alice\", bank.get(\"alice\") - amount);\n  bank.set(\"bob\", bank.get(\"bob\") + amount);\n};\n\ntransferMoney(1);\n// \"Alice: 1 Bob: 2 Total: 3\"\n```\n\n----------------------------------------\n\nTITLE: Generating 2FA QR Code Implementation\nDESCRIPTION: Example of generating a QR code for 2FA activation using React hooks and Accounts API\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/accounts-2fa.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from \"buffer\";\nimport { Accounts } from 'meteor/accounts-base';\n\n\n// component\nconst [qrCode, setQrCode] = useState(null);\n\n\n<button\n  onClick={() => {\n    Accounts.generate2faActivationQrCode(\"My app name\", (err, result) => {\n      if (err) {console.error(\"...\", err);return;}\n      const { svg, secret, uri } = result;\n      /*\n        the svg can be converted to base64, then be used like:\n         <img\n            width=\"200\"\n            src={`data:image/svg+xml;base64,${qrCode}`}\n         />\n      */\n      setQrCode(Buffer.from(svg).toString('base64'));\n    })\n  }}\n>\n  Generate a new code\n</button>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Async Iterator Implementation\nDESCRIPTION: Example of using the new async iterator functionality for MongoDB collections in Meteor 2.8+. This allows asynchronous iteration over collection documents using for-await-of syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/3.0.0.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (const document of collection.find(query, options)) /* ... */\n```\n\n----------------------------------------\n\nTITLE: Converting a Value to Reactive Using Tracker.Dependency in JavaScript\nDESCRIPTION: A complete example showing how to convert a regular variable into a reactive value using Tracker.Dependency. It shows the implementation of depend() and changed() methods to track dependencies and trigger updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar favoriteFood = \"apples\";\nvar favoriteFoodDep = new Tracker.Dependency;  // FIRST ADDED LINE\n\nvar getFavoriteFood = function () {\n  favoriteFoodDep.depend();                 // SECOND ADDED LINE\n  return favoriteFood;\n};\n\nvar setFavoriteFood = function (newValue) {\n  if (newValue !== favoriteFood)            // THIRD ADDED LINE\n    favoriteFoodDep.changed();              // FOURTH ADDED LINE\n  favoriteFood = newValue;\n};\n```\n\n----------------------------------------\n\nTITLE: Client-Side Simulation Error Management (JavaScript)\nDESCRIPTION: Illustrates the use of the 'isSimulation' property to manage server-side logic separately from client-side simulations in Meteor Methods. It prevents unnecessary execution of server-side methods when client simulation fails, thus saving server resources.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (!this.isSimulation) {\n  // Logic that depends on server environment here\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Server Setup in Meteor\nDESCRIPTION: Configuration for setting up Apollo Server with Meteor, including user context and Express middleware integration\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/apollo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { WebApp } from 'meteor/webapp';\nimport { getUser } from 'meteor/apollo';\nimport typeDefs from '/imports/apollo/schema.graphql';\nimport { resolvers } from '/server/resolvers';\nimport express from 'express';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { json } from 'body-parser'\n\nconst context = async ({ req }) => ({\n  user: await getUser(req.headers.authorization)\n})\n\nconst server = new ApolloServer({\n  cache: 'bounded',\n  typeDefs,\n  resolvers,\n});\n\nexport async function startApolloServer() {\n  await server.start();\n\n  WebApp.connectHandlers.use(\n    '/graphql',                                     // Configure the path as you want.\n    express()                                       // Create new Express router.\n      .disable('etag')                     // We don't server GET requests, so there's no need for that.\n      .disable('x-powered-by')             // A small safety measure.\n      .use(json())                                  // From `body-parser`.\n      .use(expressMiddleware(server, { context })), // From `@apollo/server/express4`.\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Check Package in Meteor Publications and Methods\nDESCRIPTION: Demonstrates how to use the check package to validate arguments in Meteor publications and methods. The example shows validating that roomId is a String in a publication, and validating complex nested structures with optional fields in a method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/check/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish(\"chats-in-room\", function (roomId) {\n  // Make sure roomId is a string, not an arbitrary mongo selector object.\n  check(roomId, String);\n  return Chats.find({room: roomId});\n});\n\nMeteor.methods({addChat: function (roomId, message) {\n  check(roomId, String);\n  check(message, {\n    text: String,\n    timestamp: Date,\n    // Optional, but if present must be an array of strings.\n    tags: Match.Optional([String])\n  });\n\n  // ... do something with the message ...\n}});\n```\n\n----------------------------------------\n\nTITLE: Removing Autopublish in Meteor\nDESCRIPTION: Explains how to remove the autopublish package in Meteor, which is necessary for more fine-grained control over data publication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove autopublish\n```\n\n----------------------------------------\n\nTITLE: Method Tests Implementation\nDESCRIPTION: Test suite for Meteor methods showing how to test method handlers with various scenarios\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('notes', function () {\n    const noteOne = {\n      _id: 'testNote1',\n      title: 'Groceries',\n      body: 'Milk, Eggs and Oatmeal'\n      userId: 'testUserId1'\n    };\n    beforeEach(function () {\n      Notes.remove({});\n    });\n\n    it('should insert new note', function () {\n      const _id = Meteor.server.method_handlers['notes.insert'].apply({ userId: noteOne.userId, unblock: sinon.fake() }. [title: noteOne.title, body: noteOne.body]);\n\n      expect(Notes.findOne({ _id })).toMatchObject(\n\t\t\texpect.objectContaining(noteOne)\n\t\t);\n    });\n\n    it('should not insert note if not authenticated', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.insert']();\n      }).toThrow();\n    });\n\n    it('should remove note', function () {\n      Meteor.server.method_handlers['notes.remove'].apply({ userId: noteOne.userId }, [noteOne._id]);\n\n      expect(Notes.findOne({ _id: noteOne._id})).toNotExist();\n    });\n\n    it('should not remove note if invalid _id', function () {\n      expect(() => {\n        Meteor.server.method_handlers['notes.remove'].apply({ userId: noteOne.userId});\n      }).toThrow();\n    });\n\n    it('should update note', function () {\n      const title = 'To Buy';\n      const beef = 'Beef, Salmon'\n\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: noteOne.userId\n      }, [\n        noteOne._id,\n        {title, body}\n      ]);\n\n      const note = Notes.findOne(noteOne._id);\n\n      expect(note).toInclude({\n        title,\n        body\n      });\n    });\n\n    it('should not update note if user was not creator', function () {\n      const title = 'This is an updated title';\n\n      Meteor.server.method_handlers['notes.update'].apply({\n        userId: 'testid'\n      }, [\n        noteOne._id,\n        { title }\n      ]);\n\n      const note = Notes.findOne(noteOne._id);\n\n      expect(note).toInclude(noteOne);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth for Facebook in Meteor\nDESCRIPTION: This JavaScript code configures the Facebook OAuth service by upserting the necessary credentials into the ServiceConfiguration collection. It uses settings from the Meteor.settings object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nServiceConfiguration.configurations.upsert({\n  service: \"facebook\"\n}, {\n  $set: {\n    appId: Meteor.settings.facebook.appId,\n    loginStyle: \"popup\",\n    secret: Meteor.settings.facebook.secret\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Meteor Publication Example\nDESCRIPTION: This snippet shows a simple Meteor publication that returns a cursor. It's used to illustrate the subscription lifecycle in the following explanation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('Posts.all', function() {\n  return Posts.find({}, {limit: 10});\n});\n```\n\n----------------------------------------\n\nTITLE: Using useTracker Hook with Dependencies\nDESCRIPTION: Example of using useTracker hook in a React function component with dependency tracking and subscription handling\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTracker } from 'meteor/react-meteor-data';\n\n// React function component.\nfunction Foo({ listId }) {\n  // This computation uses no value from the outer scope,\n  // and thus does not needs to pass a 'deps' argument.\n  // However, we can optimize the use of the computation\n  // by providing an empty deps array. With it, the\n  // computation will be retained instead of torn down and\n  // rebuilt on every render. useTracker will produce the\n  // same results either way.\n  const currentUser = useTracker(() => Meteor.user(), []);\n\n  // The following two computations both depend on the\n  // listId prop. When deps are specified, the computation\n  // will be retained.\n  const listLoading = useTracker(() => {\n    // Note that this subscription will get cleaned up\n    // when your component is unmounted or deps change.\n    const handle = Meteor.subscribe('todoList', listId);\n    return !handle.ready();\n  }, [listId]);\n  const tasks = useTracker(() => Tasks.find({ listId }).fetch(), [listId]);\n\n  return (\n    <h1>Hello {currentUser.username}</h1>\n    {listLoading ? (\n        <div>Loading</div>\n      ) : (\n        <div>\n          Here is the Todo list {listId}:\n          <ul>\n            {tasks.map(task => (\n              <li key={task._id}>{task.label}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Advanced Field Specifiers\nDESCRIPTION: Advanced example of field specification with nested documents and arrays.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.insert({\n  alterEgos: [\n    { name: \"Kira\", alliance: \"murderer\" },\n    { name: \"L\", alliance: \"police\" },\n  ],\n  name: \"Yagami Light\",\n});\n\nUsers.findOne({}, { fields: { \"alterEgos.name\": 1, _id: 0 } });\n// Returns { alterEgos: [{ name: 'Kira' }, { name: 'L' }] }\n```\n\n----------------------------------------\n\nTITLE: Adding a Field via Meteor percolate:migrations Migration (JavaScript)\nDESCRIPTION: This migration uses the percolate:migrations package to add a 'todoCount' field to all Lists that do not have it by querying the Todos collection and updating each relevant document. The 'up' function performs the addition, while the 'down' function reverses the change by removing the field from all documents (using multi:true for batch operation). Dependencies are Meteor, MongoDB, and the percolate:migrations package; requires List and Todo collections to be defined. Inputs/outputs are list documents; works server-side.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nMigrations.add({\n  version: 1,\n  up() {\n    Lists.find({todoCount: {$exists: false}}).forEach(list => {\n      const todoCount = Todos.find({listId: list._id}).count();\n      Lists.update(list._id, {$set: {todoCount}});\n    });\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}}, {multi: true});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Task component in React\nDESCRIPTION: Defines a React component named Task that represents a single todo item. This component takes a task prop and renders it as a list item.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/1.creating-the-app.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\n\nexport const Task = ({ task }) => {\n  return <li>{task.text}</li>;\n};\n```\n\n----------------------------------------\n\nTITLE: Securing Users Collection Against Client-side Updates in Meteor\nDESCRIPTION: Shows how to deny all client-side updates to user documents for security. This prevents malicious users from modifying their own user documents, including the profile field which is writable by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Deny all client-side updates to user documents\nMeteor.users.deny({\n  update() { return true; }\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Meteor Method from Vue TaskForm\nDESCRIPTION: This updates the `<script setup>` section of the `TaskForm.vue` component. The `addTask` function is now asynchronous. It calls the `insertTask` Meteor Method using `Meteor.callAsync`, passing the trimmed value of the `newTask` input. After the method call completes successfully, it clears the `newTask` input field.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue';\nimport { Meteor } from 'meteor/meteor';\n\nconst newTask = ref('');\n\nconst addTask = async () => {\n  await Meteor.callAsync('insertTask', newTask.value.trim());\n  newTask.value = '';\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating New TypeScript Meteor Project\nDESCRIPTION: Command to create a new Meteor project with TypeScript support enabled from the start.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeteor create --typescript name-of-my-new-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Insertion Method in JavaScript\nDESCRIPTION: This snippet defines a Meteor method for inserting new tasks into the TasksCollection. It uses Meteor.methods to create a server-side function that can be called from the client.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/3.forms-and-events.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { TasksCollection } from \"./TasksCollection\";\n\nMeteor.methods({\n  \"tasks.insert\"(doc) {\n    return TasksCollection.insertAsync(doc);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Publication in JavaScript\nDESCRIPTION: Defines a Meteor publication to expose all customers to clients\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { CustomerCollection } from './collection';\n\nMeteor.publish('allCustomers', function publishCustomers() {\n  return CustomerCollection.find({});\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Task Checkbox Changes in Vue Component Script\nDESCRIPTION: This Vue 3 `<script setup>` block defines the logic for a `Task` component. It receives a `task` object as a prop, creates a reactive reference (`taskRef`), computes the `isChecked` state, and defines an asynchronous `handleCheckboxChange` method. This method updates the local `checked` state and calls the `setIsCheckedTask` Meteor method to persist the change.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/components/Task.vue]\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst props = defineProps({\n    task: {\n      type: Object,\n      required: true,\n    },\n});\n\nconst taskRef = ref({ ...props.task });\n\nconst isChecked = computed(() => taskRef.value.checked);\n\nconst handleCheckboxChange = async (event) => {\n    const newCheckedValue = event.target.checked;\n    taskRef.value.checked = newCheckedValue;\n    \n    try {\n      await Meteor.callAsync('setIsCheckedTask', taskRef.value._id, newCheckedValue);\n    } catch (error) {\n      console.error('Error updating task checked state:', error);\n    }\n};\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Collection Insert Method in Meteor\nDESCRIPTION: Example of extending Mongo.Collection to create a custom insert method that automatically generates unique list names before insertion. Demonstrates schema validation and document initialization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass ListsCollection extends Mongo.Collection {\n  insert(list, callback) {\n    if (!list.name) {\n      let nextLetter = 'A';\n      list.name = `List ${nextLetter}`;\n\n      while (!!this.findOne({name: list.name})) {\n        // not going to be too smart here, can't go past Z\n        nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n        list.name = `List ${nextLetter}`;\n      }\n    }\n\n    // Call the original `insert` method, which will validate\n    // against the schema\n    return super.insert(list, callback);\n  }\n}\n\nLists = new ListsCollection('lists');\n```\n\n----------------------------------------\n\nTITLE: Stringifying Objects with EJSON (JavaScript)\nDESCRIPTION: Illustrates importing the EJSON module and using EJSON.stringify to serialize JavaScript objects, optionally accepting an options parameter for custom stringification behavior. Depends on Meteor's EJSON package being installed. Inputs: a JavaScript object and optional options. Output: a stringified EJSON-compatible representation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/EJSON.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EJSON } from \"meteor/ejson\";\n\nEJSON.stringify(\n  { num: 42, someProp: \"foo\" },\n  options // this param is optional\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Meteor Methods with TypeScript\nDESCRIPTION: TypeScript code defining Meteor methods for CRUD operations on the 'another-customer' model.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nimport { AnotherCustomer, AnotherCustomerCollection } from './collection';\n\nexport async function create(data: AnotherCustomer) {\n  return AnotherCustomerCollection.insertAsync({ ...data });\n}\n\nexport async function update(_id: string, data: Mongo.Modifier<AnotherCustomer>) {\n  check(_id, String);\n  return AnotherCustomerCollection.updateAsync(_id, { ...data });\n}\n\nexport async function remove(_id: string) {\n  check(_id, String);\n  return AnotherCustomerCollection.removeAsync(_id);\n}\n\nexport async function findById(_id: string) {\n  check(_id, String);\n  return AnotherCustomerCollection.findOneAsync(_id);\n}\n\nMeteor.methods({\n  'AnotherCustomer.create': create,\n  'AnotherCustomer.update': update,\n  'AnotherCustomer.remove': remove,\n  'AnotherCustomer.find': findById\n});\n```\n\n----------------------------------------\n\nTITLE: Block Scoping with Let and Const\nDESCRIPTION: Example demonstrating block scoping behavior using let and const declarations\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction example(condition) {\n  let x = 0;\n  if (condition) {\n    let x = 1;\n    console.log(x);\n  } else {\n    console.log(x);\n    x = 2;\n  }\n  return x;\n}\n\nexample(true); // logs 1, returns 0\nexample(false); // logs 0, returns 2\n```\n\n----------------------------------------\n\nTITLE: Updating Publish Behavior with EnvironmentVariable in Meteor 3.0\nDESCRIPTION: This snippet demonstrates how to correctly use Meteor.EnvironmentVariable to preserve context in publish functions. It shows the before and after implementation, highlighting the necessary changes to ensure proper context propagation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/index.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst _publishConnectionId = new Meteor.EnvironmentVariable<\n  string | undefined\n  >();\n\n// Before\nfunction patchPublish(publish: typeof Meteor.publish) {\n  return function (this: typeof Meteor, name, func, ...args) {\n    return publish.call( // [!code error]\n      this,\n      name,\n      function (...args) {\n        return _publishConnectionId.withValue(this?.connection?.id, () =>\n          func.apply(this, args),\n        );\n      },\n      ...args,\n    ); // [!code error]\n  } as typeof Meteor.publish;\n}\n\n// After\nfunction patchPublish(publish: typeof Meteor.publish) {\n  return function (this: typeof Meteor, name, func, ...args) {\n    return _publishConnectionId.withValue(this?.connection?.id, () => { // [!code highlight]\n      return publish.call(\n        this,\n        name,\n        function (...args) {\n          return func.apply(this, args);\n        },\n        ...args,\n      );\n    }); // [!code highlight]\n  } as typeof Meteor.publish;\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Component with Meteor Data\nDESCRIPTION: Example React Native component showing how to render Meteor data with loading states\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react-native.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View, ScrollView, Text } from 'react-native';\n\nclass MyApp extends React.Component {\n    render() {\n        const { loading, myTodoTasks } = this.props;\n        \n        if(loading) {\n            return <View><Text>Loading your tasks...</Text></View>\n        }\n        \n        return (\n            <ScrollView>\n                {!myTodoTasks.length ?\n                    <Text>You don't have any tasks</Text>\n                :\n                    myTodoTasks.map(task => (\n                        <Text>{task.text}</Text>\n                    ))\n                }\n            </ScrollView>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.isAsyncCall in Methods (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Meteor.isAsyncCall within a Meteor method to determine if the current method invocation is asynchronous. It returns true for async calls and false for synchronous calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n\nMeteor.methods({\n  async foo() {\n    return Meteor.isAsyncCall();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Password and 2FA Code Login Implementation\nDESCRIPTION: Example of validating and logging in with both password and 2FA code\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/accounts-2fa.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<button\n  onClick={() => {\n    Meteor.loginWithPasswordAnd2faCode(username, password, code, (error) => {\n      if (error) {\n        console.error(\"Error trying to log in (user with 2fa)\", error);\n      }\n    });\n  }}\n>\n  Validate and log in\n</button>\n```\n\n----------------------------------------\n\nTITLE: Conditional Cursor Setup with useFind Hook - JavaScript/JSX\nDESCRIPTION: This snippet illustrates how to conditionally return a Mongo cursor or null from a useFind cursor factory based on props or configuration. If the condition (e.g., props.skip) is met, the factory returns null and no reactive cursor is set up. This approach allows efficient data fetching and avoids unnecessary subscriptions. Inputs are component props; outputs are either a list of documents or an empty array.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst docs = useFind(() => {\n  if (props.skip) {\n    return null;\n  }\n  return TestDocs.find();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Method Defaults\nDESCRIPTION: Shows the default global configuration options for methods and how to customize them, including hooks, server-only settings, authentication requirements, and error messages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  before: [], // global before function(s) that will run before all methods\n  after: [], // global after function(s) that will run after all methods\n  serverOnly: false, // globally make all methods serverOnly, aka disable Optimistic UI, by setting to true\n  open: false, // by default all methods will be protected by authentication, override it for all methods by setting this to true\n  loggedOutError: new Meteor.Error('logged-out', 'You must be logged in'), // customize the logged out error\n  options: {\n    returnStubValue: true, // make it possible to get the ID of an inserted item on the client before the server finishes\n    throwStubExceptions: true,  // don't call the server method if the client stub throws an error, so that we don't end up doing validations twice\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Meteor Methods Asynchronously in JavaScript\nDESCRIPTION: Example of calling a Meteor method asynchronously using Meteor.call. It demonstrates how to handle errors and results in the callback function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/methods.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Asynchronous call\nMeteor.call('foo', 1, 2, (error, result) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Migrating from Accounts.addEmail to Accounts.addEmailAsync in Meteor\nDESCRIPTION: Demonstrates how to update code from the deprecated Accounts.addEmail to the new asynchronous Accounts.addEmailAsync method. The method accepts the same parameters but requires await when calling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/renamed-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Accounts } from \"meteor/accounts-base\";\n\n// Before\n\nAccounts.addEmail(\n  \"userId\",\n  \"newEmail\",\n  false,  // this param is optional \n);\n// After\n\nawait Accounts.addEmailAsync(\n  \"userId\",\n  \"newEmail\",\n  false,  // this param is optional \n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Templates in Meteor Accounts\nDESCRIPTION: Example of customizing email templates for account-related emails in Meteor. This includes setting the site name, from address, and customizing subject lines and email content for different types of account emails.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/passwords.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.emailTemplates.siteName = 'AwesomeSite';\nAccounts.emailTemplates.from = 'AwesomeSite Admin <accounts@example.com>';\n\nAccounts.emailTemplates.enrollAccount.subject = (user) => {\n  return `Welcome to Awesome Town, ${user.profile.name}`;\n};\n\nAccounts.emailTemplates.enrollAccount.text = (user, url) => {\n  return 'You have been selected to participate in building a better future!'\n    + ' To activate your account, simply click the link below:\\n\\n'\n    + url;\n};\n\nAccounts.emailTemplates.resetPassword.from = () => {\n  // Overrides the value set in `Accounts.emailTemplates.from` when resetting\n  // passwords.\n  return 'AwesomeSite Password Reset <no-reply@example.com>';\n};\nAccounts.emailTemplates.verifyEmail = {\n   subject() {\n      return \"Activate your account now!\";\n   },\n   text(user, url) {\n      return `Hey ${user}! Verify your e-mail by following this link: ${url}`;\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Preserving Module State Across HMR Updates\nDESCRIPTION: This snippet demonstrates how to preserve the state of a module across HMR updates. It uses the dispose callback to store data and retrieves it when the module is re-run, maintaining the value of the 'color' variable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/hot-module-replacement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet color = 'blue';\n\nexport function getColor() {\n  return color;\n}\n\nexport function changeColor(newColor) {\n  color = newColor;\n}\n\nif (module.hot) {\n  if (module.hot.data) {\n    color = module.hot.data.color;\n  }\n\n  module.hot.dispose(data => {\n    data.color = color;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFind with React Suspense\nDESCRIPTION: Implementation of useFind hook compatible with React Suspense. It suspends rendering until data is fetched and maintains reactivity. Takes a collection as first parameter and find arguments as second parameter.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useFind } from \"meteor/react-meteor-data/suspense\";\nimport { useSubscribe } from \"meteor/react-meteor-data/suspense\";\n\nfunction Tasks() {\n  // this component will suspend\n  useSubscribe(\"tasks\");\n  const tasksByUser = useFind(TasksCollection, [\n    {},\n    { sort: { createdAt: -1 } },\n  ]);\n\n  // render the tasks\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Documents in MongoDB Collections (Server-side)\nDESCRIPTION: Server-side example of updating multiple documents in a MongoDB collection using Meteor's update operation with multi flag. Awards badges to players with high scores.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n  declareWinners() {\n    Players.update(\n      { score: { $gt: 10 } },\n      {\n        $addToSet: { badges: 'Winner' },\n      },\n      { multi: true }\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Vue Component Structure\nDESCRIPTION: Example of a Vue Single File Component (.vue) with template, script, and style sections showing a basic date display.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_5\n\nLANGUAGE: vuejs\nCODE:\n```\n<template>\n  <div>\n    <p>This is a Vue component and below is the current date:<br />{{date}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      date: new Date(),\n    };\n  }\n}\n</script>\n\n<style scoped>\n  p {\n    font-size: 2em;\n    text-align: center;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PostCSS Configuration with Autoprefixer\nDESCRIPTION: JavaScript configuration for PostCSS in a Meteor app using the autoprefixer plugin. This config should be placed in a postcss.config.js file in the project root.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/standard-minifier-css.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: List Navigation Link Template in HTML\nDESCRIPTION: Template for generating navigation links to different lists using Flow Router paths.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{pathFor 'Lists.show' _id=list._id}}\" title=\"{{list.name}}\"\n    class=\"list-todo {{activeListClass list}}\">\n```\n\n----------------------------------------\n\nTITLE: Using require to Load Async Modules with Promises (JavaScript)\nDESCRIPTION: Shows how CommonJS require returns a Promise when loading an async module in Meteor 3+, as opposed to direct exports. Promotes awareness of promise-based patterns when using require with TLA-enabled modules. Requires module './init.js' to exist and be asynchronous. Input: none. Output: variable 'promise' holds a Promise resolving to the exports of the module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/top-level-await.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// resolves to the exports of init.js\nconst promise = require('./init.js');\n```\n\n----------------------------------------\n\nTITLE: Example of Basic Test Implementation with Assertions\nDESCRIPTION: A complete example of a basic synchronous test that demonstrates how to use the test.equal assertion to verify function results. Shows the pattern of calling a function and checking its output.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTinytest.add('mypackage - basic tests', (test) => {\n\n  // Get the result from our function under test.\n  const result = myFunction(1);\n\n  // Do the test ... calling myFunction with 1 should return 2.\n  test.equal(result, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling New Version Readiness in Meteor WebApp\nDESCRIPTION: This JavaScript code listens for the onNewVersionReady event from WebAppLocalServer and triggers a reload when a new version is ready, which is crucial for implementing Hot Code Push.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nWebAppLocalServer.onNewVersionReady(() => {\n  console.log('new version is ready!');\n  // Copied from original in autoupdate/autoupdate_cordova.js because we overwrite it\n  if (Package.reload) {\n    Package.reload.Reload._reload();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Check with Multiple Error Handling\nDESCRIPTION: Example of using check with the throwAllErrors option to collect all validation errors instead of stopping at the first one.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/check.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncheck(message, {/* ... */}, {throwAllErrors: true})\n```\n\n----------------------------------------\n\nTITLE: Adding the ReactiveDict Package with Meteor CLI (Bash)\nDESCRIPTION: This command installs the reactive-dict package into your Meteor project using the command-line tool. It is a prerequisite for all subsequent JavaScript code snippets demonstrating ReactiveDict usage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/ReactiveDict.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add reactive-dict\n```\n\n----------------------------------------\n\nTITLE: Unit Testing React Component Event Handling and Method Calls with Enzyme and Sinon (JavaScript)\nDESCRIPTION: This test suite uses Enzyme's `shallow` rendering to test the `TodoItem` React component. It employs Sinon to stub the `setCheckedStatus` Meteor Method, simulating a 'change' event on the checkbox input and asserting that the stubbed method was called with the expected parameters (`todoId` and `newCheckedStatus`). The stub is restored after the assertion.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Factory } from 'meteor/dburles:factory';\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport sinon from 'sinon';\nimport TodoItem from './TodoItem.jsx';\nimport { setCheckedStatus } from '../../api/todos/methods.js';\n\ndescribe('TodoItem', () => {\n  it('should update status when checked', () => {\n    sinon.stub(setCheckedStatus, 'call');\n    const todo = Factory.create('todo', { checked: false });\n    const item = shallow(<TodoItem todo={todo} />);\n\n    item.find('input[type=\"checkbox\"]').simulate('change', {\n      target: { checked: true },\n    });\n\n    sinon.assert.calledWith(setCheckedStatus.call, {\n      todoId: todo._id,\n      newCheckedStatus: true,\n    });\n\n    setCheckedStatus.call.restore();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tracker.nonreactive to Ignore Reactive Data Changes in autorun (Meteor, JavaScript)\nDESCRIPTION: This example uses Tracker.nonreactive inside Tracker.autorun to ignore certain reactive data changes (umpire) while still responding to others (score). Dependencies: Tracker and ReactiveDict. Only changes to 'score' trigger the autorun, while 'umpire' updates inside nonreactive do not. Key variables: game, umpire, score. Output is debug and score print statements reflecting current values, only updated on score changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar game = new ReactiveDict;\ngame.set(\"score\", 42);\ngame.set(\"umpire\", \"Giraffe\");\n\nTracker.autorun(function () {\n  Tracker.nonreactive(function () {\n    console.log(\"DEBUG: current game umpire is \" + game.get(\"umpire\"));\n  });\n  console.log(\"The game score is now \" + game.get(\"score\") + \"!\");\n});\n// \"DEBUG: current game umpire is Giraffe\"\n// \"The game score is now 42!\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with User Context\nDESCRIPTION: Example of a GraphQL resolver utilizing Meteor user context for authentication\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/apollo.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Query: {\n    userUniverses: async (obj, { hideOrgs }, { user }) => {\n      if (!user) return null\n      const selector = { userId: user._id, }\n      if (hideOrgs) selector.organizationId = { $exists: false }\n      return UniversesCollection.find(selector).fetch()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Computation Invalidation Example\nDESCRIPTION: Example demonstrating how to handle cleanup when a computation is invalidated using Tracker.active and onInvalidate.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (Tracker.active) {\n  Tracker.onInvalidate(() => {\n    x.destroy();\n    y.finalize();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example Meteor User Document Structure (JS/JSON)\nDESCRIPTION: Illustrates the typical structure of a document within the `Meteor.users` collection, represented as a JavaScript object literal. It includes standard fields like `_id`, `username`, `emails`, `createdAt`, `profile`, and `services` which stores data from login services (like Facebook) and session resume tokens.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  _id: 'QwkSmTCZiw5KDx3L6',  // Meteor.userId()\n  username: 'cool_kid_13', // Unique name\n  emails: [\n    // Each email address can only belong to one user.\n    { address: 'cool@example.com', verified: true },\n    { address: 'another@different.com', verified: false }\n  ],\n  createdAt: new Date('Wed Aug 21 2013 15:16:52 GMT-0700 (PDT)'),\n  profile: {\n    // The profile is writable by the user by default.\n    name: 'Joe Schmoe'\n  },\n  services: {\n    facebook: {\n      id: '709050', // Facebook ID\n      accessToken: 'AAACCgdX7G2...AbV9AZDZD'\n    },\n    resume: {\n      loginTokens: [\n        { token: '97e8c205-c7e4-47c9-9bea-8e2ccc0694cd',\n          when: 1349761684048 }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor via NPM\nDESCRIPTION: Global installation of Meteor framework using npm package manager. This is the recommended method for Linux, macOS, and Windows.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g meteor\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.EnvironmentVariable to Track Request Context in JavaScript\nDESCRIPTION: This example demonstrates how to create and use a Meteor.EnvironmentVariable to maintain context across function calls. It creates a request tracking variable that preserves a request ID and makes it available to a logging function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/environment.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentRequest = new Meteor.EnvironmentVariable();\n\nfunction log(message) {\n  const requestId = currentRequest.get() || 'None';\n  console.log(`[${requestId}]`, message);\n}\n\n\ncurrentRequest.withValue('12345', () => {\n  log('Handling request'); // Logs: [12345] Handling request\n});\n\n```\n\n----------------------------------------\n\nTITLE: Adding Packages to a Meteor Project using Shell\nDESCRIPTION: Adds one or more specified packages to the current Meteor project. Version constraints can be specified using '@' (minimum version), '@=' (exact version), or '||' (or constraint). Running the command again for an existing package without a version specifier removes the constraint.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add <package> [package..]\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Integration with 2FA\nDESCRIPTION: Example of integrating 2FA validation into a custom authentication method\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/accounts-2fa.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = validateLogin();\nif (!result.error && Accounts._check2faEnabled?.(user)) {\n  if (!code) {\n    Accounts._handleError(\"2FA code must be informed.\");\n  }\n  if (\n    !Accounts._isTokenValid(user.services.twoFactorAuthentication.secret, code)\n  ) {\n    Accounts._handleError(\"Invalid 2FA code.\");\n  }\n}\n\nreturn result;\n```\n\n----------------------------------------\n\nTITLE: Passwordless Login with 2FA Token in JavaScript\nDESCRIPTION: This snippet shows how to implement a passwordless login flow with 2FA using Meteor.passwordlessLoginWithToken. It handles the 'no-2fa-code' error and redirects the user to provide a 2FA code if needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/accounts-2fa.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<button\n  onClick={() => {\n    // logging in just with token \n    Meteor.passwordlessLoginWithToken(\n      email,\n      token,\n      error => {\n        if (error) {\n          if (error.error === 'no-2fa-code') {\n            // send user to a page or show a component \n            // where they can provide a 2FA code\n            setShouldAskCode(true);\n            return;\n          }\n          console.error('Error verifying token', error);\n        }\n      }\n    );\n  }}\n>\n  Validate token\n</button>;\n```\n\n----------------------------------------\n\nTITLE: Validating 2FA Code and Logging in with JavaScript\nDESCRIPTION: This snippet demonstrates how to use Meteor.loginWithPasswordAnd2faCode to validate a 2FA code and log in a user. It includes error handling for invalid 2FA codes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/accounts-2fa.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => {\n  Meteor.loginWithPasswordAnd2faCode(username, password, code, error => {\n    if (error) {\n      console.error(\"Error trying to log in (user with 2fa)\", error);\n    }\n  })}}\n>\n  Validate and log in\n</button>\n```\n\n----------------------------------------\n\nTITLE: Checking Per-Document Permissions\nDESCRIPTION: Example of using collection helpers to verify if a user has permission to edit a specific list.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = Lists.findOne(listId);\n\nif (! list.editableBy(userId)) {\n  throw new Meteor.Error('unauthorized',\n    'Only list owners can edit private lists.');\n}\n```\n\n----------------------------------------\n\nTITLE: Example Meteor User Document Structure\nDESCRIPTION: Comprehensive example of a user document structure in Meteor showing standard fields including profile, emails, and service integrations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _id: 'QwkSmTCZiw5KDx3L6',  // Meteor.userId()\n  username: 'cool_kid_13', // Unique name\n  emails: [\n    // Each email address can only belong to one user.\n    { address: 'cool@example.com', verified: true },\n    { address: 'another@different.com', verified: false }\n  ],\n  createdAt: new Date('Wed Aug 21 2013 15:16:52 GMT-0700 (PDT)'),\n  profile: {\n    // The profile is writable by the user by default.\n    name: 'Joe Schmoe'\n  },\n  services: {\n    facebook: {\n      id: '709050', // Facebook ID\n      accessToken: 'AAACCgdX7G2...AbV9AZDZD'\n    },\n    resume: {\n      loginTokens: [\n        { token: '97e8c205-c7e4-47c9-9bea-8e2ccc0694cd',\n          when: 1349761684048 }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MongoDB Native API in Meteor\nDESCRIPTION: Shows how to access the raw MongoDB driver module and collection/database objects through MongoInternals and Mongo.Collection interfaces.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/mongo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMongoInternals.NpmModules.mongodb.module\nMongoInternals.NpmModules.mongodb.version\n\nc.rawCollection()\nc.rawDatabase()\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox to Task Component in React\nDESCRIPTION: This snippet shows how to add a checkbox to the Task component in React. It includes the checkbox input with readonly and checked properties, and handles a click event.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/4.update-and-remove.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\n\nexport const Task = ({ task, onCheckboxClick }) => {\n  return (\n    <li>\n      <input\n        type=\"checkbox\"\n        checked={!!task.isChecked}\n        onClick={() => onCheckboxClick(task)}\n        readOnly\n      />\n      <span>{task.text}</span>\n    </li>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic ReactiveDict Usage with Tracker\nDESCRIPTION: Example showing how to create a ReactiveDict instance, set values, and use it with Tracker.autorun for reactive computations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/reactive-dict.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = new ReactiveDict();\nstate.set('currentRoomId', 'random')\n\nTracker.autorun(() => {\n  Meteor.subscribe('chatHistory', { room: state.get('currentRoomId') });\n});\n\n// Causes the function passed to `Tracker.autorun` to be rerun, so that the\n// 'chatHistory' subscription is moved to the room 'general'.\nstate.set('currentRoomId', 'general');\n```\n\n----------------------------------------\n\nTITLE: Nested Imports and Dynamic Module Loading in Meteor (JavaScript)\nDESCRIPTION: Demonstrates Meteor's unique support for nested imports (import statements inside blocks and functions) and how they interact with module asynchronicity. The first import conditionally loads a client-only module, while the function-level import references a notifications module, showing flexibility in code loading locations. Inputs: runtime condition, function parameter. Limitations: does not support async modules with TLA for nested imports.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/top-level-await.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nif (Meteor.isClient) {\n  import './init-client.js';\n}\n\nexport function showNotification(message) {\n  import show from './notifications.js';\n\n  show(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Meteor Method Calls (JavaScript)\nDESCRIPTION: This snippet demonstrates a typical pattern of handling errors when calling a Meteor server method. It differentiates between unauthorized errors and unexpected errors, providing a structure for error management in the UI. Ensures client-side feedback enhances user experience.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Call the Method\nupdateText({\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) => {\n  if (err) {\n    if (err.error === 'todos.updateText.unauthorized') {\n      // Displaying an alert is probably not what you would do in\n      // a real app; you should have some nice UI to display this\n      // error, and probably use an i18n library to generate the\n      // message from the error code.\n      alert('You aren\\'t allowed to edit this todo item');\n    } else {\n      // Unexpected error, handle it in the UI somehow\n    }\n  } else {\n    // success!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Published Counts in JavaScript\nDESCRIPTION: This snippet shows the client-side code to access the total number of items published using the Counts.get() method. It assumes that you subscribe to the 'Lists.todoCount' publication elsewhere in your application. The listId parameter must be specified to retrieve the count for a particular list.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nCounts.get(`Lists.todoCount.${listId}`)\n```\n\n----------------------------------------\n\nTITLE: Importing Fetch API Components in Meteor\nDESCRIPTION: Example of importing the main components of the Fetch API (fetch, Headers, Request, Response) from the 'meteor/fetch' module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/fetch.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetch, Headers, Request, Response } from 'meteor/fetch';\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Exports in JavaScript\nDESCRIPTION: This snippet demonstrates how to use CommonJS module.exports to export values, equivalent to ES2015 export statements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports.insert = new ValidatedMethod({ ... });\nmodule.exports.default = incompleteCountDenormalizer;\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Aggregating Reactive Data with Tracker.autorun (Meteor, JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Tracker.autorun to monitor a collection of documents and update a related Session variable reactively. If the underlying data changes, such as entries in the Monkeys collection, the computation automatically reruns. Dependencies include Meteor, Underscore (for _.max), and the Session package. The computation tracks and stores the name of the oldest monkey on any database update. Inputs: Monkeys collection; Output: Session variable 'oldest' is updated. Limitation: Always recalculates on any Monkeys mutation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(() => {\n  const oldest = _.max(Monkeys.find().fetch(), (monkey) => {\n    return monkey.age;\n  });\n\n  if (oldest) {\n    Session.set('oldest', oldest.name);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Element Matching Query in Minimongo\nDESCRIPTION: Example of a complex query using $elemMatch with nested $or operators in Minimongo, Meteor's client-side MongoDB implementation. This pattern allows for matching array elements that satisfy multiple conditions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n{a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}}\n```\n\n----------------------------------------\n\nTITLE: Managing State and Events in Blaze with ReactiveDict (JavaScript)\nDESCRIPTION: Shows how to initialize a ReactiveDict in a template instance, provide a helper for displaying a reactive value, and handle events to mutate that state. When the button is clicked, \\\"enemy\\\" shifts from \\\"Eastasia\\\" to \\\"Eurasia\\\", and the UI updates automatically. Requires Blaze, Meteor, and reactive-dict.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/ReactiveDict.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.main.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.state.set(\\\"enemy\\\", \\\"Eastasia\\\");\n});\nTemplate.main.helpers({\n  theEnemy() {\n    const inst = Template.instance();\n    return inst.state.get(\\\"enemy\\\");\n  },\n});\nTemplate.main.events({\n  \\\"click .change-enemy\\\"(event, inst) {\n    inst.state.set(\\\"enemy\\\", \\\"Eurasia\\\");\n  },\n});\n\n// Clicking the button will change the page to say \"We've always been at war with Eurasia\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Field Exclusion in JavaScript\nDESCRIPTION: Example of excluding specific fields from MongoDB query results using the fields specifier. This is useful for hiding sensitive data like passwords.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.find({}, { fields: { password: 0, hash: 0 } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Modules in Meteor package.json\nDESCRIPTION: This snippet shows how to specify test modules in the 'meteor' section of package.json for use with 'meteor test' or 'meteor test --full-app' commands.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"mainModule\": {...},\n  \"testModule\": \"tests.js\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"testModule\": {\n    \"client\": \"client/tests.js\",\n    \"server\": \"server/tests.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Publications Before Collection Declaration (JavaScript)\nDESCRIPTION: Explains the order-agnostic subscription and collection declaration mechanism in Meteor. Shows that subscribing to a publication before declaring the corresponding client collection still queues data properly. Dependencies: Meteor core and Mongo. Inputs: publication name. Outputs: synchronizes incoming records into the declared collection after instantiation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// It's okay to subscribe (and possibly receive data) before declaring the\n// client collection that will hold it. Assume 'allPlayers' publishes data from\n// the server's 'players' collection.\nMeteor.subscribe(\\\"allPlayers\\\");\n\n// The client queues incoming 'players' records until the collection is created:\nconst Players = new Mongo.Collection(\\\"players\\\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reactive and Nonreactive Data Changes in autorun (Meteor, JavaScript)\nDESCRIPTION: This snippet continues from the Tracker.nonreactive example, demonstrating how changing the umpire does not trigger autorun, whereas changing score does. It requires the previously defined game ReactiveDict and associated autorun. Only 'score' updates lead to logs; 'umpire' changes are ignored for reactivity but still reflected in output when 'score' changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n  game.set(\"umpire\", \"Hippo\");\n  // (nothing printed)\n\n  game.set(\"score\", 137);\n  // \"DEBUG: current game umpire is Hippo\"\n  // \"The game score is now 137!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Management with Roles in Meteor\nDESCRIPTION: Example of a Meteor method for promoting a user to editor role. It checks if the current user has the 'admin' role in the specified scope before adding the 'editor' role to the target user.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/roles.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// server/users.js\nMeteor.methods({\n  promoteToEditor: async function (userId, scope) {\n    check(userId, String);\n    check(scope, String);\n\n    const canPromote = await Roles.userIsInRoleAsync(\n      this.userId,\n      \"admin\",\n      scope\n    );\n\n    if (!canPromote) {\n      throw new Meteor.Error(\"unauthorized\");\n    }\n\n    await Roles.addUsersToRolesAsync(userId, [\"editor\"], scope);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Data via a Meteor Method and Manual Insertion (JavaScript)\nDESCRIPTION: Describes a method of fetching data with Meteor Method and inserting the results into a local collection on the client. This pattern is useful for executing complex computations and managing their results without automatic synchronization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { calculateAverages } from '../api/games/methods.js';\n\nfunction updateAverages() {\n  // Clean out result cache\n  ScoreAverages.remove({});\n\n  // Call a Method that does an expensive computation\n  calculateAverages.call((err, res) => {\n    res.forEach((item) => {\n      ScoreAverages.insert(item);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Module Dependencies with Import Statements in Meteor\nDESCRIPTION: Demonstrates resolving load-order dependencies with import statements. Shows how to ensure modules are loaded in the correct order regardless of default file load order by explicitly importing required values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// a.js\nimport { bThing } from './b';\nconsole.log(bThing, 'in a.js');\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Route with Flow Router in JavaScript\nDESCRIPTION: Example of defining a basic route using Flow Router, including route parameters and an action function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFlowRouter.route('/lists/:_id', {\n  name: 'Lists.show',\n  action(params, queryParams) {\n    console.log(\"Looking at a list?\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Tags to config.xml in Meteor 1.3.4.2\nDESCRIPTION: New functionality added in Meteor 1.3.4.2 allowing custom tags to be added to config.xml using App.appendToConfig method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.appendToConfig\n```\n\n----------------------------------------\n\nTITLE: Handling Async Lists in Blaze Templates\nDESCRIPTION: Shows how to handle an asynchronous list operation in a Blaze template, including loading states and iteration over resolved results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/front-end/blaze.md#2025-04-22_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#let users=getUsersAsync}}\n  {{#if @pending 'users'}}\n    We are fetching your list...\n  {{/if}}\n  {{#if @rejected 'users'}}\n    Sorry, an error occured!\n  {{/if}}\n  {{if @resolved 'users'}}\n    {{#each user in users}}\n      Hi {{user.name}}!\n    {{/each}}\n  {{/if}}\n{{/let}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.user_list.helpers({\n  getUsersAsync() {\n    return Meteor.callAsync(\"getUsers\"); // returns a Promise<Array>\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming HTML with React renderToNodeStream\nDESCRIPTION: Example of streaming HTML implementation using React's renderToNodeStream and styled-components\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/server-render.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport { renderToNodeStream } from \"react-dom/server\";\nimport { ServerStyleSheet } from \"styled-components\";\nimport App from \"/imports/Server\";\n\nonPageLoad((sink) => {\n  const sheet = new ServerStyleSheet();\n  const appJSX = sheet.collectStyles(<App location={sink.request.url} />);\n  const htmlStream = sheet.interleaveWithNodeStream(renderToNodeStream(appJSX));\n  sink.renderIntoElementById(\"app\", htmlStream);\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Field Inclusion in JavaScript\nDESCRIPTION: Example of including only specific fields in MongoDB query results. This limits the returned data to just the specified fields plus the _id field.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.find({}, { fields: { firstname: 1, lastname: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Configuration for jam:offline in Meteor\nDESCRIPTION: This snippet provides the default global configuration object for 'jam:offline'. It specifies filters, sorting, limits, and other key settings for offline data management. Users can change these defaults using the 'Offline.configure' method. It is recommended to import the Offline module on both client and server sides.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\\n  filter: /** {} or { deleted: false } **/ // filter the documents to keep across all collections. if you're not using jam:archive or don't have the archive config below set, it will assume you're using soft deletes.\\n  sort: { updatedAt: -1 }, // keep the most recent documents assuming you have an updatedAt on each doc. if you're using a different field name for timestamps, you'll want to change this.\\n  limit: 100, // limit offline documents to a max of 100 for each collection\\n  keepAll: true, // keep data for offline use for all collections using the global filter, sort, limit. to keep data for only certain collections, set this to false and then use collection.keep() for the collections you want to use offline.\\n  autoSync: true, // auto sync changes made offline when the user comes back online\\n  handleSyncErrors: async ({ replayErrors, keepErrors }) => {\\n    if (replayErrors) console.error('replay', replayErrors); // if there are errors when the Meteor methods are replayed, they will be in array here with the name of the method, the method's args, and the error itself. you can use it to alert your user, logging purposes, etc.\\n\\n    if (keepErrors) { // when syncing, if you're using a .keep filter or you have a global filter in the config that isn't an empty object, and there are errors reconciling with the server, they will be in an array here with the name of the collection and the error itself. you can customize how you handle these. by default, we clear the offline database for the collection since it could have stale data and reload the page.\\n      await Promise.allSettled(keepErrors.map(({ name }) => clear(name)));\\n      console.error('keep', keepErrors)\\n    }\\n\\n    return;\\n  },\\n  ...(Archive && { // Archive is provided by jam:archive. if you're using a different archive mechanism, you'll need to configure these manually\\n    archive: {\\n      name: 'archives',\\n      collectionKey: '_collection',\\n      primaryIdKey: 'id',\\n      timestampKey: 'archivedAt'\\n    }\\n  })\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting and Updating Session Variables in Blaze - Meteor JavaScript\nDESCRIPTION: Shows how to define a Blaze template helper that reacts to Session.get calls, and how to update the session variable to rerender the UI. Session.set is called with different values to demonstrate automatic DOM updates. Requires 'meteor/session' and Blaze.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/session.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.main.helpers({\n  theEnemy() {\n    return Session.get('enemy');\n  }\n});\n\nSession.set('enemy', 'Eastasia');\n// Page will say \"We've always been at war with Eastasia\"\n\nSession.set('enemy', 'Eurasia');\n// Page will change to say \"We've always been at war with Eurasia\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FlowRouter for Dynamic Module Loading (JavaScript)\nDESCRIPTION: This snippet configures a FlowRouter route for the root path ('/'). It utilizes the `waitOn` property with a dynamic `import()` statement (available in Meteor 1.5+) to asynchronously load the '/imports/client/index.js' module only when this route is accessed. The `action` function then renders the 'index' template into the 'App_body' layout.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// /imports/lib/routes.js\nimport { FlowRouter } from 'meteor/ostrio:flow-router-extra';\n\nFlowRouter.route('/', {\n  name: 'index',\n  waitOn() {\n    // Wait for index.js load over the wire\n    return import('/imports/client/index.js');\n  },\n  action() {\n    BlazeLayout.render('App_body', {main: 'index'});\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Meteor CLI Usage\nDESCRIPTION: Core command syntax for running Meteor commands, including project execution, testing, debugging, and package management.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor [--release <release>] [--help] <built-in command> [args]\nmeteor help <built-in command>\nmeteor [--version] [--arch]\nmeteor [run | test | test-packages] --inspect[-brk][=<port>]\nmeteor <node | npm | other> [args]\n```\n\n----------------------------------------\n\nTITLE: Managing Meteor Subscriptions with useSubscribe Hook - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates using the useSubscribe React hook for Meteor to manage a subscription's loading state. It supports dynamic subscriptions and provides a function isLoading() for tracking loading updates. Required dependencies are meteor/react-meteor-data hooks and a compatible Meteor publication. Input parameters are the publication name and any arguments; output is a function reflecting loading status. The pattern avoids side effects and supports conditional subscriptions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Note: isLoading is a function!\nconst isLoading = useSubscribe(\"posts\", groupId);\nconst posts = useFind(() => Posts.find({ groupId }), [groupId]);\n\nif (isLoading()) {\n  return <Loading />;\n} else {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post._id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Values in ReactiveDict\nDESCRIPTION: Example demonstrating how to set multiple key-value pairs at once using an object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/reactive-dict.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = new ReactiveDict();\nstate.set({\n  a: 'foo',\n  b: 'bar'\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Default Rate Limit in Meteor\nDESCRIPTION: Code snippet showing how to remove the default rate limiting rules that are automatically applied when using accounts-base package. This removes the 5 requests per 10 seconds limit on login attempts, user registration, and password resets.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp-rate-limiter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.removeDefaultRateLimit()\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by User in Vue Component\nDESCRIPTION: This snippet updates the Vue component to filter tasks based on the logged-in user's ID. It uses Meteor's reactive data system to automatically update the task list when the user or filter changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_40\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n...\nconst userId = autorun(() => Meteor.userId()).result;\n\nwatch(\n  () => userId.value,\n  (newUserId) => {\n    isLogged.value = !!newUserId\n  },\n  { immediate: true }\n);\n\nsubscribe('tasks');\n\nconst tasks = autorun(() => {\n  const filter = hideCompleted.value ? { checked: { $ne: true }, userId: userId.value } : { userId: userId.value };\n  return TasksCollection.find(filter, { sort: { createdAt: -1 } }).fetch();\n}).result;\n\nconst incompleteTasksCount = autorun(() => {\n  return TasksCollection.find({ checked: { $ne: true }, userId: userId.value }).count()\n}).result;\n\n...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client and Server Entry Points in Meteor package.json\nDESCRIPTION: This snippet demonstrates how to specify client and server entry point modules in the 'meteor' section of package.json, overriding Meteor's default module loading semantics.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"mainModule\": {\n    \"client\": \"client/main.js\",\n    \"server\": \"server/main.js\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"mainModule\": {\n    \"client\": false,\n    \"server\": \"server/main.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue App in Meteor\nDESCRIPTION: JavaScript code for client startup that renders the Vue component hierarchy to the DOM, targeting the app element.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'guide/site/content/vue';\nimport App from './App.vue';\nimport './main.html';\n\nMeteor.startup(() => {\n  new Vue({\n    el: '#app',\n    ...App,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Time-Based Reactive Value with Direct Tracker.Computation Management\nDESCRIPTION: A function that returns a relative time string and makes it reactive by scheduling invalidation after one minute. This example bypasses Tracker.Dependency and works directly with Tracker.Computation for fine-grained control.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar minutesAgo = function (timeInPast) {\nvar now = new Date;\nvar millisecondsAgo = now.getTime() - timeInPast.getTime();\nvar minutesAgo = Math.floor(millisecondsAgo / 1000 / 60);\n\n  if (Tracker.active) {\n    // Save the computation to invalidate when the time changes.\n    // (If we just called Tracker.currentComputation inside the setTimeout callback,\n    // we would get the wrong result! We would get the *then-current* computation,\n    // if any, not the computation that called minutesAgo.)\n    var computation = Tracker.currentComputation;\n\n    var timer = setTimeout(function () {\n      computation.invalidate();\n    }, 60 * 1000 /* one minute */);\n    computation.onInvalidate(function () {\n      clearTimeout(timer);\n    });\n  }\n\n  if (minutesAgo < 1) {\n    return \"just now\";\n  } else {\n    return minutesAgo + \" minutes ago\";\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Collection, Methods and Publications in TypeScript\nDESCRIPTION: Basic index.ts file that exports all components from collection, methods, and publications modules, intended as part of the Meteor generate scaffolding system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './collection';\nexport * from './methods';\nexport * from './publications';\n```\n\n----------------------------------------\n\nTITLE: Aggregating Cursor Data with Tracker.autorun in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Tracker.autorun to monitor a reactive data source (a cursor) and aggregate it into a session variable. It finds the oldest monkey from a collection and sets its name to a session variable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(() => {\n  const oldest = _.max(Monkeys.find().fetch(), (monkey) => {\n    return monkey.age;\n  });\n\n  if (oldest) {\n    Session.set('oldest', oldest.name);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Meteor Methods Implementation\nDESCRIPTION: Implementation of Meteor methods for note operations including insert, remove, and update\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n  'notes.insert'(title, body) {\n    if (!this.userId || Meteor.users.findOne({ _id: this.userId })) {\n      throw new Meteor.Error('not-authorized', 'You have to be authorized');\n    }\n\n    check(title, String);\n    check(body, String);\n\n    this.unblock();\n\n    return Notes.insert({\n      title,\n      body,\n      userId: this.userId\n    });\n  },\n  'notes.remove'(_id) {\n    if (!this.userId || Meteor.users.findOne({ _id: this.userId })) {\n      throw new Meteor.Error('not-authorized', 'You have to be authorized');\n    }\n\n    check(_id, String);\n\n    Notes.remove({ _id, userId: this.userId });\n  },\n  'notes.update'(_id, {title, body}) {\n    if (!this.userId || Meteor.users.findOne({ _id: this.userId })) {\n      throw new Meteor.Error('not-authorized', 'You have to be authorized');\n    }\n\n    check(_id, String);\n    check(title, String);\n    check(body, String);\n\n    Notes.update({\n      _id,\n      userId: this.userId\n    }, {\n      $set: {\n        title,\n        body\n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Method with Meteor-RPC\nDESCRIPTION: Creates a server method using the createModule function from meteor-rpc that accepts a string argument and returns a constant value. The server module is built and exported as a type for client consumption.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\n\nconst server = createModule()\n  .addMethod(\"bar\", z.string(), (arg) => {\n    console.log(\"Server received\", arg);\n    return \"bar\" as const;\n  })\n  .build();\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Subscriptions with Tracker in JavaScript\nDESCRIPTION: This code demonstrates reactive subscription management based on a user's changing interests. Different interests trigger subscriptions to different magazines, with conditional logic determining which magazine to subscribe to.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = ReactiveDict;\ndata.set(\"currentInterest\", \"fashion\");\n\nTracker.autorun(function () {\n  var currentInterest = data.get(\"currentInterest\");\n  if (currentInterest === \"fashion\" || currentInterest === \"fitness\")\n    subscribeToMagazine(\"Cosmo\");\n  if (currentInterest === \"celebrities\" || currentInterest === \"gossip\")\n    subscribeToMagazine(\"People\");\n});\n// \"Putting a check in the mail to subscribe to Cosmo\"\n\ndata.set(\"currentInterest\", \"gossip\");\n// \"Putting a check in the mail to subscribe to People\"\n// \"Canceling our subscription to Cosmo\"\n\ndata.set(\"currentInterest\", \"celebrities\");\n// Nothing printed (People subscription is maintained, not canceled and restarted)\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor App with Tailwind CSS\nDESCRIPTION: Command to create a Meteor app with React, Tailwind CSS, and MongoDB. Includes a list of npm and Meteor packages that are included by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --tailwind app-name\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports from an Atmosphere Package in JavaScript\nDESCRIPTION: Illustrates importing specific named exports (like `Meteor`) from an Atmosphere package (`meteor/meteor`) using ES2015 destructuring assignment (`{ Meteor }`). This is necessary because Atmosphere packages might export multiple symbols.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// You'll need to destructure here, as Meteor could export more symbols\nimport { Meteor } from 'meteor/meteor';\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor Project with Vue 3 Integration\nDESCRIPTION: Command to initialize a new Meteor project with Vue 3 integration using Meteor 3.0.2. This creates a project structure with Vue, Vite, and Tailwind CSS support.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor create --vue simple-todos-vue --release=3.0.2\n```\n\n----------------------------------------\n\nTITLE: HMR State Preservation Example\nDESCRIPTION: Demonstrates how to preserve module state across hot updates using dispose and data handlers\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/hot-module-replacement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet color = 'blue';\n\nexport function getColor() {\n  return color;\n}\n\nexport function changeColor(newColor) {\n  color = newColor;\n}\n\nif (module.hot) {\n  if (module.hot.data) {\n    color = module.hot.data.color;\n  }\n\n  module.hot.dispose(data => {\n    data.color = color;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Task List in App Component\nDESCRIPTION: Enhanced App component that renders a list of tasks using the Task component. Uses v-for directive to iterate through the tasks returned by getTasks(), providing a key and passing the task as a prop.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Task from './components/Task.vue'\n\nconst getTasks = () => {\n    return [\n      { _id: 1, text: 'Install Node.js 20' },\n      { _id: 2, text: 'Install Meteor 3' },\n      { _id: 3, text: 'Create and run your project' },\n    ];\n}\n</script>\n<template>\n  <div class=\"container\">\n    <header>\n      <h1 class=\"text-4xl font-bold text-gray-800 my-4\">Todo List</h1>\n    </header>\n    <ul class=\"list-disc list-inside p-4\">\n      <Task v-for=\"task in getTasks()\" :key=\"task._id\" :task=\"task\" />\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Exports with Dynamic Imports in JavaScript\nDESCRIPTION: This snippet demonstrates how to access the default export from a dynamically imported module using parameter destructuring for better clarity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/dynamic-import.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"another-tool\").then(({ default: thatTool }) => thatTool.go());\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Task Filtering in App Component Script (JavaScript/Meteor)\nDESCRIPTION: This snippet updates the task fetching logic in `App.vue` to be reactive and apply filtering. It uses `autorun` to re-run the query when `hideCompleted` changes. A `filter` object is created conditionally: if `hideCompleted` is true, it adds `{ checked: { $ne: true } }` to the query. `TasksCollection.find` fetches the tasks based on the filter, sorted by creation date.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n...\n\nsubscribe('tasks');\n\nconst tasks = autorun(() => {\n  const filter = hideCompleted.value ? { checked: { $ne: true } } : {};\n  return TasksCollection.find(filter, { sort: { createdAt: -1 } }).fetch();\n}).result;\n\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Working with Stub Results in Meteor 3.0+\nDESCRIPTION: Shows how to work with the stub result from method simulations in Meteor 3.0+, allowing developers to create more responsive UIs by taking action before the server responds.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n  const { stubPromise, serverPromise } = create();\n  const _id = await stubPromise.catch(error => {\n    // optionally handle a stub error\n  });\n\n  // take action with the _id stub result, for example, route to a new page\n  router.go(`/detail/${_id}`)\n\n  await serverPromise.catch(error => {\n    // handle server error, rollback changes as needed, for example route to home\n    router.go('/')\n    alert('sorry, could not create')\n  });\n```\n\n----------------------------------------\n\nTITLE: Checking Meteor Server Connection Status\nDESCRIPTION: Demonstrates how to use Meteor.status() to check the current connection status between the client and server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nconst status = Meteor.status();\n\nconsole.log(status);\n//          ^^^^\n// {\n//   connected: Boolean,\n//   status: String,\n//   retryCount: Number,\n//   retryTime: Number,\n//   reason: String,\n// }\n```\n\n----------------------------------------\n\nTITLE: Comparing ReactiveDict `get` vs `equals` in Meteor Autorun (JavaScript)\nDESCRIPTION: Demonstrates two ways to use `Tracker.autorun` with a `ReactiveDict`. Version 1 uses `data.get(\"favoriteFood\") === \"pizza\"`, causing the autorun to rerun whenever the 'favoriteFood' value changes. Version 2 uses `data.equals(\"favoriteFood\", \"pizza\")`, which is more efficient as it only causes a rerun when the 'favoriteFood' value changes specifically to or from 'pizza'. This illustrates fine-grained reactivity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nvar data = new ReactiveDict;\n\n// VERSION 1 (INEFFICIENT)\nTracker.autorun(function () {\n  if (data.get(\"favoriteFood\") === \"pizza\")\n    console.log(\"Inefficient code says: Time to get some pizza!\");\n  else\n    console.log(\"Inefficient code say: No pizza for you!\");\n});\n\n// VERSION 2 (MORE EFFICIENT)\nTracker.autorun(function () {\n  if (data.equals(\"favoriteFood\", \"pizza\")) // CHANGED LINE\n    console.log(\"Efficient code says: Time to get some pizza!\");\n  else\n    console.log(\"Efficient code says: No pizza for you!\");\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Working with Local and Server Collections in Meteor\nDESCRIPTION: Demonstrates the difference between server-synchronized collections and local-only collections. Shows immediate local changes and includes assertions to verify expected behavior.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a collection called `Posts` and put a document in it. The document\n// will be immediately visible in the local copy of the collection. It will be\n// written to the server-side database a fraction of a second later, and a\n// fraction of a second after that, it will be synchronized down to any other\n// clients that are subscribed to a query that includes it (see\n// `Meteor.subscribe` and `autopublish`).\nconst Posts = new Mongo.Collection('posts');\nPosts.insert({ title: 'Hello world', body: 'First post' });\n\n// Changes are visible immediately‚Äîno waiting for a round trip to the server.\nassert(Posts.find().count() === 1);\n\n// Create a temporary, local collection. It works just like any other collection\n// but it doesn't send changes to the server, and it can't receive any data from\n// subscriptions.\nconst Scratchpad = new Mongo.Collection();\n\nfor (let i = 0; i < 10; i += 1) {\n  Scratchpad.insert({ number: i * 2 });\n}\n\nassert(Scratchpad.find({ number: { $lt: 9 } }).count() === 5);\n```\n\n----------------------------------------\n\nTITLE: Client-Side Email Sending in Meteor\nDESCRIPTION: Illustrates how a client can asynchronously call a server method to send an email. This snippet demonstrates the use of Meteor.callAsync to send email details from the client side to the server. The usage relies on a predefined server method named 'sendEmail'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/email.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n// Client: Asynchronously send an email.\nMeteor.callAsync(\"sendEmail\", {\n  to: \"Alice <alice@example.com>\",\n  from: \"bob@example.com\",\n  subject: \"Hello from Meteor!\",\n  text: \"This is a test of Email.send.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom MongoDB Connection Options in JavaScript\nDESCRIPTION: Shows how to set custom MongoDB connection options using the Mongo.setConnectionOptions API. This allows for fine-tuning of the MongoDB connection parameters.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nMongo.setConnectionOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Performing Asynchronous HTTP POST Request in Meteor\nDESCRIPTION: Example of an asynchronous HTTP POST request using the HTTP.call method. It demonstrates sending JSON data and handling the response using a callback function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/http.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHTTP.call('POST', 'http://api.twitter.com/xyz', {\n  data: { some: 'json', stuff: 1 }\n}, (error, result) => {\n  if (!error) {\n    Session.set('twizzled', true);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.autorun for Reactive Computations\nDESCRIPTION: Example of using Meteor.autorun to create a reactive computation that will re-run automatically when its reactive data sources change.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_138\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.autorun(function() {\n  // This code will re-run whenever reactive data sources used inside change\n  var user = Meteor.user();\n  if (user) {\n    console.log(\"User is logged in: \" + user.username);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Meteor Version Dependencies\nDESCRIPTION: Shows how to specify compatibility with multiple Meteor releases using api.versionsFrom() in the package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\napi.versionsFrom('1.2.1');\napi.versionsFrom('1.4');\napi.versionsFrom('1.8');\n\n// or\n\napi.versionsFrom(['1.2.1', '1.4', '1.8']);\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Method for Toggling Task Checked State\nDESCRIPTION: This snippet defines a Meteor method 'tasks.toggleChecked' that updates the isChecked property of a task in the TasksCollection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/4.update-and-remove.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { TasksCollection } from \"./TasksCollection\";\n\nMeteor.methods({\n  ..\n  \"tasks.toggleChecked\"({ _id, isChecked }) {\n    return TasksCollection.updateAsync(_id, {\n      $set: { isChecked: !isChecked },\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Async Module Initialization with Top-Level Await (JavaScript)\nDESCRIPTION: Shows an example of a module using top-level await to asynchronously initialize by invoking a setup function. Demonstrates how a module can become asynchronous in Meteor 3+. Requires an async function 'setupLanguages' to be available in scope. No parameters; waits for setup to complete before further code runs. Input: none explicit; Output: ensures language setup before module continues.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/top-level-await.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait setupLanguages();\n```\n\n----------------------------------------\n\nTITLE: Writing Asynchronous Tests with Tinytest.addAsync\nDESCRIPTION: Demonstrates how to create asynchronous tests using Tinytest.addAsync. The test callback receives both a test object and an onComplete callback that must be called when asynchronous operations complete.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTinytest.addAsync(name, (test, onComplete) => {\n  someAsyncRequest((error, result) => {\n    // test body\n    onComplete(); // invoke when async function completes.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Change Streams-based Publication in Meteor\nDESCRIPTION: Defines a 'stream' publication to utilize MongoDB Change Streams for reactivity across all connected clients while avoiding traditional publish/subscribe.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// server\nMeteor.publish.stream('notes.all', function() {\n  return Notes.find();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// client\n// Since each view layer (Blaze, React, Svelte, Vue, etc) has a different way of using `Tracker.autorun`, I've omitted it for brevity. You'd subscribe just as you do currently in your view layer of choice.\nMeteor.subscribe('notes.all')\n\n// work with the Notes collection in Minimongo as you're accustomed to\nNotes.find().fetch();\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Server Method Completion in Meteor (JavaScript)\nDESCRIPTION: This snippet shows how to redirect using FlowRouter after a Meteor Method ('lists.insert') successfully completes on the server. The redirection logic is placed within the method's callback function, ensuring the navigation only happens after receiving confirmation (and potentially data like the new listId) from the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nTemplate.App_body.events({\n  'click .js-new-list'() {\n    lists.insert.call((err, listId) => {\n      if (!err) {\n        FlowRouter.go('Lists.show', { _id: listId });  \n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Async Conditional Rendering with #if in Blaze\nDESCRIPTION: Shows how to use #if with an async helper for conditional rendering based on a resolved boolean value.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/front-end/blaze.md#2025-04-22_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if isOkAsync}}\n  Resolved and truthy.\n{{else}}\n  Resolved and falsy.\n{{/if}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.profile.helpers({\n  isOkAsync() {\n    return Meteor.callAsync(\"condition\"); // returns a Promise<Boolean>\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Root Route Redirector Component in JavaScript\nDESCRIPTION: Implementation of dynamic route redirection based on loaded data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.App_rootRedirector.onCreated(function rootRedirectorOnCreated() {\n  Meteor.setTimeout(() => {\n    FlowRouter.go('Lists.show', Lists.findOne());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Local npm Package Dependencies\nDESCRIPTION: Shows how to include a local npm package during development by specifying a file path instead of version number.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nNpm.depends({\n  'my-package': 'file:///home/user/npms/my-package'\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Tasks Publication in React Component\nDESCRIPTION: Enhances the React component to subscribe to the tasks publication using the useSubscribe hook, with loading state handling while data is being fetched.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/2.collections.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useTracker, useSubscribe } from 'meteor/react-meteor-data'; // [!code highlight]\nimport { TasksCollection } from '/imports/api/TasksCollection';\nimport { Task } from './Task';\n\nexport const App = () => {\n\n  const isLoading = useSubscribe(\"tasks\");  // [!code highlight]\n  const tasks = useTracker(() => TasksCollection.find({}).fetch());\n\n  if (isLoading()) {\n    return <div>Loading...</div>;\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.js for Meteor 3\nDESCRIPTION: Example configuration for the package.js file that defines package metadata, dependencies, and testing setup for Meteor 3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.describe({\n name: 'user:package',\n version: '0.0.1',\n summary: 'A brief description of my package',\n git: 'https://github.com/myusername/my-package',\n documentation: 'README.md'\n});\n\nPackage.onUse(function(api) {\n api.versionsFrom('3.0');\n api.use('ecmascript');\n api.mainModule('my-package.js');\n});\n\nPackage.onTest(function(api) {\n api.use('ecmascript');\n api.use('tinytest');\n api.use('user:package');\n api.mainModule('my-package-tests.js');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Facebook Authentication with Access Token in Meteor\nDESCRIPTION: Uses the Facebook.handleAuthFromAccessToken method to handle Facebook authentication when the access token is obtained through an out-of-band process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_73\n\nLANGUAGE: JavaScript\nCODE:\n```\nFacebook.handleAuthFromAccessToken\n```\n\n----------------------------------------\n\nTITLE: Using ECMAScript Promise\nDESCRIPTION: Example of Promise usage in Meteor that allows callback functions to run in recycled Fibers, enabling the use of any Meteor API including those that yield.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nHTTP.get\nMeteor.call\nMongoCollection\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Startup in Meteor\nDESCRIPTION: Server-side startup configuration including fixtures, security settings, and API definitions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// This defines a starting set of data to be loaded if the app is loaded with an empty db.\nimport '../imports/startup/server/fixtures.js';\n\n// This file configures the Accounts package to define the UI of the reset password email.\nimport '../imports/startup/server/reset-password-email.js';\n\n// Set up some rate limiting and other important security settings.\nimport '../imports/startup/server/security.js';\n\n// This defines all the collections, publications and methods that the application provides\n// as an API to the client.\nimport '../imports/api/api.js';\n```\n\n----------------------------------------\n\nTITLE: Using Match.test for Type Validation\nDESCRIPTION: Examples of using Match.test to validate variable structures and types without throwing errors\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/check.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Will return true for `{ foo: 1, bar: 'hello' }` or similar.\nMatch.test(value, { foo: Match.Integer, bar: String });\n\n// Will return true if `value` is a string.\nMatch.test(value, String);\n\n// Will return true if `value` is a string or an array of numbers.\nMatch.test(value, Match.OneOf(String, [Number]));\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Document in Meteor Collections on the Client - JavaScript\nDESCRIPTION: Implements a template event that allows a user to remove a message document by its _id when clicking a corresponding UI button. Dependencies: Blaze templates, Messages collection, and Mongo package. Inputs: Document context (usually contains _id) from the template; triggered on button click. Outputs: Number of removed documents (should be 1); triggers reactivity for other clients. Limitations: Untrusted client-side code may only remove by _id and is subject to allow/deny security rules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// When the 'remove' button is clicked on a chat message, delete that message.\nTemplate.chat.events({\n  \"click .remove\"() {\n    Messages.remove(this._id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing a Meteor Application\nDESCRIPTION: Runs tests for the entire Meteor application using a specified test driver package. Can run in either test mode or full application mode ('--full-app'). Requires specifying a '--driver-package'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor test --driver-package <driver> [options]\n       meteor test --full-app --driver-package <driver> [options]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote DDP Endpoints in Meteor Server\nDESCRIPTION: Shows how to connect to a remote DDP (Distributed Data Protocol) endpoint from a Meteor server using the Meteor.connect method. This enables server-to-server DDP communication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_135\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.connect\n```\n\n----------------------------------------\n\nTITLE: Adding Mocha Test Driver Package in Meteor\nDESCRIPTION: Command to add the meteortesting:mocha package to a Meteor application. This package runs client and/or server tests and reports results in the server console.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add meteortesting:mocha\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous HTTP GET Request in Meteor Method\nDESCRIPTION: Example of a Meteor method that performs a synchronous HTTP GET request to check a Twitter API. It demonstrates error handling and the use of this.unblock() for performance optimization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/http.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n  checkTwitter(userId) {\n    check(userId, String);\n    this.unblock();\n\n    try {\n      const result = HTTP.call('GET', 'http://api.twitter.com/xyz', {\n        params: { user: userId }\n      });\n\n      return true;\n    } catch (e) {\n      // Got a network error, timeout, or HTTP error in the 400 or 500 range.\n      return false;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Local Collections in Meteor\nDESCRIPTION: This snippet demonstrates how to create local collections in Meteor, which are Minimongo collections with no database connection, useful for in-memory storage and complex querying.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSelectedTodos = new Mongo.Collection(null);\nSelectedTodos = new Mongo.Collection('selectedtodos', {connection: null});\n```\n\n----------------------------------------\n\nTITLE: Using MongoDB Collection Methods in Meteor 3.0 Client-Side\nDESCRIPTION: Demonstrates how to use MongoDB collection methods in Meteor 3.0 on the client side, showing both synchronous and asynchronous approaches. The example illustrates that client-side code can remain unchanged or optionally use new async methods for isomorphic code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/frequently-asked-questions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 2.x in the client side\n\nconst docs = MyCollection.find({ _id: '123' }).fetch();\n\n// v3.0 in the client side\n\nconst docs = MyCollection.find({ _id: '123' }).fetch();\n\n// v3.0 in the client side, this will work anywhere\n\nconst docs = await MyCollection.find({ _id: '123' }).fetchAsync();\n```\n\n----------------------------------------\n\nTITLE: Generating User ID and Creating Associated Data in Meteor\nDESCRIPTION: Demonstrates how to generate a user ID inside the onCreateUser hook before the user is created, useful when you need to create associated data that references the user ID during registration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate a todo list for each new user\nAccounts.onCreateUser((options, user) => {\n  // Generate a user ID ourselves\n  user._id = Random.id(); // Need to add the `random` package\n\n  // Use the user ID we generated\n  Lists.createListForUser(user._id);\n\n  // Don't forget to return the new user object at the end!\n  return user;\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Meteor\nDESCRIPTION: Default tsconfig.json configuration file for TypeScript in Meteor projects, including compiler options and module resolution settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    /* Basic Options */\n    \"target\": \"es2018\",\n    \"module\": \"esNext\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"allowJs\": true,\n    \"checkJs\": false,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"noEmit\": true,\n\n    /* Strict Type-Checking Options */\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n\n    /* Additional Checks */\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": false,\n    \"noFallthroughCasesInSwitch\": false,\n\n    /* Module Resolution Options */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      /* Support absolute /imports/* with a leading '/' */\n      \"/*\": [\"*\"]\n    },\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"types\": [\"node\", \"mocha\"],\n    \"esModuleInterop\": true,\n    \"preserveSymlinks\": true\n  },\n  \"exclude\": [\n    \"./.meteor/**\",\n    \"./packages/**\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Alert with Tracker.autorun in JavaScript\nDESCRIPTION: This example shows how to use Tracker.autorun to wait for a session variable to have a certain value, then perform an action once and stop the computation. It checks if 'shouldAlert' is true, then displays an alert and stops the computation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun((computation) => {\n  if (!Session.equals('shouldAlert', true)) {\n    return;\n  }\n\n  computation.stop();\n  alert('Oh no!');\n});\n```\n\n----------------------------------------\n\nTITLE: Sink Class Interface Definition for Server Rendering\nDESCRIPTION: Defines the interface for ClientSink and ServerSink objects used in server-side rendering, including methods for appending content to head, body, and specific elements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/server-render/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Sink {\n  // Appends content to the <head>.\n  appendToHead(content)\n\n  // Appends content to the <body>.\n  appendToBody(content)\n\n  // Appends content to the identified element.\n  appendToElementById(id, content)\n\n  // Replaces the content of the identified element.\n  renderIntoElementById(id, content)\n\n  // Redirects request to new location.\n  redirect(location, code)\n\n\n  // server only methods\n\n  // sets the status code of the response.\n  setStatusCode(code)\n\n  // sets a header of the response.\n  setHeader(key, value)\n\n  // gets request headers\n  getHeaders()\n\n  // gets request cookies\n  getCookies()\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming HTML Rendering with React\nDESCRIPTION: Demonstrates streaming HTML rendering using React's renderToNodeStream with styled-components integration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/server-render.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport { renderToNodeStream } from \"react-dom/server\";\nimport { ServerStyleSheet } from \"styled-components\"\nimport App from \"/imports/Server\";\n\nonPageLoad(sink => {\n  const sheet = new ServerStyleSheet();\n  const appJSX = sheet.collectStyles(\n    <App location={sink.request.url} />\n  );\n  const htmlStream = sheet.interleaveWithNodeStream(\n    renderToNodeStream(appJSX)\n  );\n  sink.renderIntoElementById(\"app\", htmlStream);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Top Level Await with MongoDB in Meteor\nDESCRIPTION: Demonstrates how to use top level await with a Mongo collection in Meteor. The code waits for an asynchronous count operation and conditionally inserts a document if the collection is empty.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/top-level-await.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Links = new Mongo.Collection('links');\n\n// Async code using top level await.\n// The module waits for this to finish before continuing\nconst count = await Links.find().countAsync();\n\nif (count === 0) {\n  await Links.insertAsync({ url: 'https://meteor.com' });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Status in Meteor JavaScript\nDESCRIPTION: The Meteor.status() function returns an object with information about the current connection status between the client and server. It includes fields such as connected, status, retryCount, retryTime, and reason.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/connections.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.status()\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Meteor Core Types (JSON)\nDESCRIPTION: This JSON configuration snippet needs to be added to the project's `tsconfig.json` file. It ensures TypeScript correctly resolves Meteor core types by setting `preserveSymlinks` to true and defining path aliases (`paths`) for `meteor/*` modules. These paths point to the type definitions provided by `@types/meteor` and the locally generated types file (`packages.d.ts`) created by `zodern:types` after running `meteor lint`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/using-core-types.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"preserveSymlinks\": true,\n    \"paths\": {\n      \"meteor/*\": [\n        \"node_modules/@types/meteor/*\",\n        \".meteor/local/types/packages.d.ts\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Helpers with Tracker in JavaScript\nDESCRIPTION: JavaScript code implementing template helpers for temperature display and freezing condition check using Tracker reactivity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tracker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In demo.js\nTemplate.demo.helpers({\n  currentTemp: function () {\n    return currentTemperatureFahrenheit();\n  },\n  belowFreezing: function () {\n    return currentTemperatureFahrenheit() < 32.0;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Keys with ReactiveDict (JavaScript)\nDESCRIPTION: Shows how to use the set method with an object to assign multiple key-value pairs atomically. This pattern avoids repetitive set calls for each property. The dependencies are the same as above, and keys \\\"a\\\" and \\\"b\\\" are set to \\\"foo\\\" and \\\"bar\\\", respectively.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/ReactiveDict.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReactiveDict } from \\\"meteor/reactive-dict\\\";\nconst state = new ReactiveDict();\nstate.set({\n  a: \\\"foo\\\",\n  b: \\\"bar\\\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Method with meteor-rpc | TypeScript\nDESCRIPTION: Declares a server module with the method 'foo' using meteor-rpc. The method expects a string argument (validated by zod) and returns a static string value. The .build call ensures types are exported correctly. Dependencies: meteor-rpc, zod.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { z } from \"zod\";\n\nconst server = createModule()\n  .addMethod(\"foo\", z.string(), (arg) => \"foo\" as const)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: MongoDB Complex Query Selectors in JavaScript\nDESCRIPTION: Examples of more advanced MongoDB selectors using comparison operators like $gt and $in. These patterns allow for more complex matching conditions beyond simple equality.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Matches documents where `age` is greater than 18.\n{\n  age: {\n    $gt: 18;\n  }\n}\n\n// Matches documents where `tags` is an array containing 'popular'.\n{\n  tags: 'popular';\n}\n\n// Matches documents where `fruit` is one of three possibilities.\n{\n  fruit: {\n    $in: ['peach', 'plum', 'pear'];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting Documents in a Meteor Collection\nDESCRIPTION: Overrides the default soft delete behavior to remove documents permanently from the collection. The `soft` option is set to `false`, bypassing the soft delete and executing a hard delete instead.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/soft-delete.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.removeAsync(/* your filter */, { soft: false })\n```\n\n----------------------------------------\n\nTITLE: Content Security Policy Configuration in Meteor\nDESCRIPTION: Implementation of Content Security Policy (CSP) headers using Helmet, with recommended default settings for Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// With other import statements\nimport helmet from \"helmet\";\n\n// Within server side Meter.startup()\nWebApp.handlers.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n      connectSrc: [\"*\"],\n      imgSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"]\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tasks Publication in Meteor\nDESCRIPTION: Creates a Meteor publication for the tasks collection, making the data available for clients to subscribe to. This is essential for Meteor's data synchronization system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/2.collections.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { TasksCollection } from \"./TasksCollection\";\n\nMeteor.publish(\"tasks\", () => {\n  return TasksCollection.find();\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Meteor 2.x Project to 3.0\nDESCRIPTION: Commands to upgrade an existing Meteor 2.x project to version 3.0. This includes updating to the latest release and resetting the project to a fresh state.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release {{ $frontmatter.meteor_version }}\nmeteor reset # resets project to a fresh state\n```\n\n----------------------------------------\n\nTITLE: Collection Remove Hook Implementation\nDESCRIPTION: Shows how to implement a remove hook in a custom collection class to handle cascading deletes of related documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass ListsCollection extends Mongo.Collection {\n  // ...\n  remove(selector, callback) {\n    Package.todos.Todos.remove({listId: selector});\n    return super.remove(selector, callback);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding URL Prefixes from Meteor AppCache in JavaScript\nDESCRIPTION: Illustrates configuring the `appcache` package using `Meteor.AppCache.config` to specify URL prefixes (e.g., `/online/`) that should be excluded from the Application Cache. Files matching these prefixes, such as those in the `public/online` directory, will only be available when the user is online and fetched directly from the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/appcache.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nMeteor.AppCache.config({ onlineOnly: ['/online/'] });\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Collection for Tasks\nDESCRIPTION: Defining a MongoDB collection for storing tasks. Uses Meteor's Mongo integration to create and export a collection named 'tasks'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mongo } from 'meteor/mongo';\n \nexport const TasksCollection = new Mongo.Collection('tasks');\n```\n\n----------------------------------------\n\nTITLE: Batching Dynamic Imports in Meteor\nDESCRIPTION: Example of how multiple dynamic imports are automatically batched into a single HTTP request in Meteor 1.6.1 when called within the same tick of the event loop.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [\n  React,\n  ReactDOM\n] = await Promise.all([\n  import(\"react\"),\n  import(\"react-dom\")\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import with Promise then() Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use dynamic imports with the Promise's then() method to load a module at runtime and then execute a function from it.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/dynamic-import.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"tool\").then((tool) => tool.task());\n```\n\n----------------------------------------\n\nTITLE: Logging in with Password and 2FA in JavaScript\nDESCRIPTION: This snippet shows how to implement a login flow with 2FA using Meteor.loginWithPassword. It checks for the 'no-2fa-code' error and redirects the user to provide a 2FA code if needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/accounts-2fa.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<button \n  onClick={() => {\n    Meteor.loginWithPassword(username, password, error => {\n      if (error) {\n        if (error.error === 'no-2fa-code') {\n            // send user to a page or show a component \n            // where they can provide a 2FA code\n            setShouldAskCode(true);\n            return;\n        }\n        console.error(\"Error trying to log in (user without 2fa)\", error);\n      }\n    });\n  }\n}>\n  Login\n</button>\n```\n\n----------------------------------------\n\nTITLE: Publishing Custom User Data Fields from Server (JS)\nDESCRIPTION: Defines a Meteor publication named `userData` on the server (`server.js`). It publishes specific fields (`other`, `things`) from the `Meteor.users` collection only for the currently logged-in user (identified by `this.userId`). If no user is logged in, it marks the publication as ready without sending data. Requires the `meteor/meteor` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nMeteor.publish(\"userData\", function () {\n  if (this.userId) {\n    return Meteor.users.find(\n      { _id: this.userId },\n      {\n        fields: { other: 1, things: 1 },\n      }\n    );\n  } else {\n    this.ready();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Filter State with React useState\nDESCRIPTION: Implementation of task filtering using React's useState hook to toggle visibility of completed tasks. Includes button implementation that changes text based on current filter state.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/6.filter-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\n..\nexport const App = () => {\n  const [hideCompleted, setHideCompleted] = useState(false);\n\n  ..\n    <div className=\"main\">\n      <TaskForm />\n       <div className=\"filter\">\n         <button onClick={() => setHideCompleted(!hideCompleted)}>\n           {hideCompleted ? 'Show All' : 'Hide Completed'}\n         </button>\n       </div>\n  ..\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for Flowbite\nDESCRIPTION: Tailwind configuration setup to include Flowbite plugin and necessary template paths\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  content: [\n    './imports/ui/**/*.{js,jsx,ts,tsx}',\n    './client/*.html',\n    'node_modules/flowbite-react/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [require('flowbite/plugin')],\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Runtime Configuration Hook in Meteor WebApp\nDESCRIPTION: Illustrates how to use WebApp.addRuntimeConfigHook to dynamically modify the __meteor_runtime_config__ variable at runtime. This example checks the request headers and modifies the configuration based on specific conditions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/webapp.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nWebApp.addRuntimeConfigHook(({arch, request, encodedCurrentConfig, updated}) => {\n // check the request to see if this is a request that requires\n // modifying the runtime configuration\n  if(request.headers.domain === 'calling.domain') {\n    // make changes to the config for this domain\n    // decode the current runtime config string into an object\n    const config = WebApp.decodeRuntimeConfig(current);\n    // make your changes\n    config.newVar = 'some value';\n    config.oldVar = 'new value';\n    // encode the modified object to the runtime config string\n    // and return it\n    return WebApp.encodeRuntimeConfig(config);\n  }\n  // Not modifying other domains so return undefined\n  return undefined;\n})\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Templates in Meteor\nDESCRIPTION: Demonstrates the use of Handlebars templates in Meteor, including the #each helper and constant blocks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_141\n\nLANGUAGE: HTML\nCODE:\n```\n{{#each}}\n{{#constant}}\n```\n\n----------------------------------------\n\nTITLE: Cypress Acceptance Test for User Signup\nDESCRIPTION: Cypress test that visits the homepage and tests the user registration flow by entering email and password.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"sign-up\", () => {\n  beforeEach(() => {\n    cy.visit(\"http://localhost:3000/\");\n  });\n\n  it(\"should create and log the new user\", () => {\n    cy.contains(\"Register\").click();\n    cy.get(\"input#at-field-email\").type(\"jean-peter.mac.calloway@gmail.com\");\n    cy.get(\"input#at-field-password\").type(\"awesome-password\");\n    cy.get(\"input#at-field-password_again\").type(\"awesome-password\");\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Async Autorun\nDESCRIPTION: Example showing how autorun with async callback maintains reactivity when reactive data access precedes async calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(async function example2()  {\n  let users = Meteor.users.find({}).fetch();\n  let asyncData = await asyncDataFunction();\n});\n```\n\n----------------------------------------\n\nTITLE: Denying User Document Updates (JS)\nDESCRIPTION: Implements a Meteor security rule using `Meteor.users.deny` to prevent any client-side updates to user documents. The function `() => true` ensures that the deny rule always applies to all update operations attempted by clients, effectively making user profiles read-only from the client-side unless specific allow rules are defined. Requires the `meteor/meteor` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nMeteor.users.deny({ update: () => true });\n```\n\n----------------------------------------\n\nTITLE: Styled Components Server-Side Implementation\nDESCRIPTION: Implementation of server-side rendering with styled-components integration\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/server-render.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport { renderToString } from \"react-dom/server\";\nimport { ServerStyleSheet } from \"styled-components\";\nimport App from \"/imports/Server\";\n\nonPageLoad((sink) => {\n  const sheet = new ServerStyleSheet();\n  const html = renderToString(\n    sheet.collectStyles(<App location={sink.request.url} />)\n  );\n\n  sink.renderIntoElementById(\"app\", html);\n  sink.appendToHead(sheet.getStyleTags());\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Fibers with Promises in Meteor\nDESCRIPTION: Demonstrates how to migrate from Fibers-based asynchronous code to modern Promise-based implementations. Shows conversion from Future pattern to Promise constructor pattern for handling callbacks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/removed-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconst Future = Npm.require('fibers/future');\n\nfunction someFunction() {\n  const future = new Future();\n  someAsyncFunction((error, result) => {\n    if (error) {\n      future.throw(error);\n    } else {\n      future.return(result);\n    }\n  });\n  return future.wait();\n}\n\n// After\n\nasync function someFunction() {\n  return new Promise((resolve, reject) => {\n    someAsyncFunction((error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side React Rendering Implementation\nDESCRIPTION: Example of server-side rendering implementation using React and the onPageLoad function\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/server-render.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport from \"react\";\nimport { renderToString } from \"react-dom/server\";\nimport { onPageLoad } from \"meteor/server-render\";\n\nimport App from \"/imports/Server.js\";\n\nonPageLoad(sink => {\n  sink.renderIntoElementById(\"app\", renderToString(\n    <App location={sink.request.url} />\n  ));\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Documents from MongoDB Collections (Client-side)\nDESCRIPTION: Client-side example of removing documents from a MongoDB collection in Meteor. Demonstrates removing chat messages based on user interaction.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.chat.events({\n  'click .remove'() {\n    Messages.remove(this._id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Out Other Clients in Meteor\nDESCRIPTION: Method to log out all other connections logged in as the current user, maintaining only the current session.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.logoutOtherClients()\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.setTimeout\nDESCRIPTION: Meteor's implementation of setTimeout that maintains environment variables and runs within a Fiber. Returns a handle that can be used with clearTimeout.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/timers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.setTimeout(function() {\n  // your code here\n}, delay);\n```\n\n----------------------------------------\n\nTITLE: Defining a Method-based Publication in Meteor\nDESCRIPTION: Defines a 'once' publication on the server to fetch data via Meteor methods and merge into Minimongo, preserving reactivity for database writes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// server\nMeteor.publish.once('notes.all', function() {\n  return Notes.find();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// client\n// Since each view layer (Blaze, React, Svelte, Vue, etc) has a different way of using `Tracker.autorun`, I've omitted it for brevity. You'd subscribe just as you do currently in your view layer of choice.\nMeteor.subscribe('notes.all')\n\n// work with the Notes collection in Minimongo as you're accustomed to\nNotes.find().fetch();\n```\n\n----------------------------------------\n\nTITLE: Sending Email in Meteor\nDESCRIPTION: New email smart package with Email.send API for sending emails from Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_137\n\nLANGUAGE: JavaScript\nCODE:\n```\nEmail.send()\n```\n\n----------------------------------------\n\nTITLE: Combining Default and Named Imports in ES2015 JavaScript\nDESCRIPTION: These snippets show how to combine default and named imports in ES2015 modules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport Value, { a, F } from './exporter';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport { default as Value, a, F } from './exporter';\n```\n\n----------------------------------------\n\nTITLE: Declaring Package Dependencies on NPM Modules in Meteor\nDESCRIPTION: Demonstrates how to declare dependencies on NPM modules in a Meteor package. This is done using the Npm.depends directive in the package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_132\n\nLANGUAGE: JavaScript\nCODE:\n```\nNpm.depends\n```\n\n----------------------------------------\n\nTITLE: Basic Meteor Package Definition Structure\nDESCRIPTION: Demonstrates the core structure of a Meteor package.js file including package description, dependencies, testing configuration and npm dependencies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/packagejs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Information about this package:\nPackage.describe({\n  // Short two-sentence summary\n  summary: 'What this does',\n  // Version number\n  version: '1.0.0',\n  // Optional, default is package directory name\n  name: 'username:package-name',\n  // Optional GitHub URL to your source repository\n  git: 'https://github.com/something/something.git'\n});\n\n// This defines your actual package:\nPackage.onUse((api) => {\n  // If no version is specified for an `api.use` dependency, use the one defined\n  // in Meteor 1.12.1.\n  api.versionsFrom('1.12.1');\n  // Use the `underscore` package, but only on the server. Version not\n  // specified, so it will be as of Meteor 1.12.1.\n  api.use('underscore', 'server');\n  // Use `ostrio:flow-router-extra`, version 3.9.0 or newer.\n  api.use('ostrio:flow-router-extra@3.9.0');\n  // Give users of this package access to active-route's JavaScript helpers.\n  api.imply('zimme:active-route@2.3.2')\n  // Export the object `Email` to packages or apps that use this package.\n  api.export('Email', 'server');\n  // Specify the source code for the package.\n  api.addFiles('email.js', 'server');\n  // When using `ecmascript` or `modules` packages, you can use this instead of\n  // `api.export` and `api.addFiles`.\n  api.mainModule('email.js', 'server');\n});\n\n// This defines the tests for the package:\nPackage.onTest((api) => {\n  // Sets up a dependency on this package.\n  api.use('username:package-name');\n  // Use the Mocha test framework.\n  api.use('practicalmeteor:mocha@2.4.5_6');\n  // Specify the source code for the package tests.\n  api.addFiles('email_tests.js', 'server');\n});\n\n// This lets you use npm packages in your package:\nNpm.depends({\n  simplesmtp: '0.3.10',\n  'stream-buffers': '0.2.5'\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Password Reset Email Content in JavaScript\nDESCRIPTION: This snippet demonstrates how to create custom content for password reset emails using ES2015 template strings. It includes methods for setting the email subject, plain text content, and a placeholder for HTML content.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn \"Reset your password on Meteor Todos\";\n  },\n  text(user, url) {\n    return `Hello!\nClick the link below to reset your password on Meteor Todos.\n${url}\nIf you didn't request this email, please ignore it.\nThanks,\nThe Meteor Todos team\n`\n  },\n  html(user, url) {\n    // This is where HTML email content would go.\n    // See the section about html emails below.\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Login in Meteor Client\nDESCRIPTION: This JavaScript snippet shows how to implement GitHub login on the client side of a Meteor application using the Meteor.loginWithGithub function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.loginWithGithub({\n  requestPermissions: ['user', 'public_repo']\n}, (error) => {\n  if (error) {\n    Session.set('errorMessage', error.reason || 'Unknown error');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Meteor Logging Functions\nDESCRIPTION: Examples of using different logging methods including default (info), error, warn, and debug levels.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nLog(\"starting up\"); // or Log.info('starting up')\nLog.error(\"error message\");\nLog.warn(\"warning\");\nLog.debug(\"this will show only in development\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Module Entry Points in package.json\nDESCRIPTION: Sets up the main module entry points for client and server code in a Meteor application using the meteor.mainModule configuration in package.json. This approach replaces the traditional eager loading behavior with explicit entry points.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default DDP Connection Operations\nDESCRIPTION: Examples of using the default DDP connection through Meteor's convenience methods\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.subscribe(\"newsFeed\")\nMeteor.call(\"transferBalance\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Modules in package.json for Meteor Applications\nDESCRIPTION: Defines entry points for client and server code in Meteor applications using the meteor.mainModule configuration in package.json. This configuration tells Meteor which files to use as starting points for each architecture.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DDP Data Management Messages in JSON\nDESCRIPTION: JSON structure for messages used in DDP data management, including subscription, document changes, and notifications. These messages enable clients to maintain synchronized collections with the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n * `sub` (client -> server):\n   - `id`: string (an arbitrary client-determined identifier for this subscription)\n   - `name`: string (the name of the subscription)\n   - `params`: optional array of EJSON items (parameters to the subscription)\n * `unsub` (client -> server):\n   - `id`: string (the id passed to 'sub')\n * `nosub` (server -> client):\n   - `id`: string (the id passed to 'sub')\n   - `error`: optional Error (an error raised by the subscription as it\n    concludes, or sub-not-found)\n * `added` (server -> client):\n   - `collection`: string (collection name)\n   - `id`: string (document ID)\n   - `fields`: optional object with EJSON values\n * `changed` (server -> client):\n   - `collection`: string (collection name)\n   - `id`: string (document ID)\n   - `fields`: optional object with EJSON values\n   - `cleared`: optional array of strings (field names to delete)\n * `removed` (server -> client):\n   - `collection`: string (collection name)\n   - `id`: string (document ID)\n * `ready` (server -> client):\n   - `subs`: array of strings (ids passed to 'sub' which have sent their\n     initial batch of data)\n * `addedBefore` (server -> client):\n   - `collection`: string (collection name)\n   - `id`: string (document ID)\n   - `fields`: optional object with EJSON values\n   - `before`: string or null (the document ID to add the document before,\n     or null to add at the end)\n * `movedBefore` (server -> client):\n   - `collection`: string\n   - `id`: string (the document ID)\n   - `before`: string or null (the document ID to move the document before, or\n     null to move to the end)\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Login with Facebook in Meteor\nDESCRIPTION: This code snippet shows how to programmatically log in a user with Facebook OAuth in a Meteor application. It demonstrates requesting specific permissions and handling the login result.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.loginWithFacebook({\n  requestPermissions: ['user_friends', 'public_profile', 'email']\n}, (err) => {\n  if (err) {\n    // handle error\n  } else {\n    // successful login!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Practical Custom Replacer Implementation for meteor generate (JavaScript)\nDESCRIPTION: Provides a realistic JavaScript example for a file used with `--replaceFn`. It defines `toPascalCase` and `toCamelCase` helpers and uses a shared `transformName` function within the exported `transformFilename` and `transformContents` functions. This allows replacing placeholders like `$$name$$`, `$$PascalName$$`, and `$$camelName$$` in template filenames and contents based on the provided `scaffoldName`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst toPascalCase = (str) => {\n  if(!str.includes('-')) return str.charAt(0).toUpperCase() + str.slice(1);\n  else return str.split('-').map(toPascalCase).join('');\n}\nconst toCamelCase = (str) => {\n  if(!str.includes('-')) return str.charAt(0).toLowerCase() + str.slice(1);\n  else return str.split('-').map(toPascalCase).join('');\n}\n\nconst transformName = (scaffoldName, str) => {\n    return str.replace(/\\$\\$name\\$\\$|\\$\\$PascalName\\$\\$|\\$\\$camelName\\$\\$/g, function (substring, args) {\n      if (substring === '$$name$$') return scaffoldName;\n      if (substring === '$$PascalName$$') return toPascalCase(scaffoldName);\n      if (substring === '$$camelName$$') return toCamelCase(scaffoldName);\n    })\n\n}\n\nexport function transformFilename(scaffoldName, filename) {\n  return transformName(scaffoldName, filename);\n}\n\nexport function transformContents(scaffoldName, contents, fileName) {\n  return transformName(scaffoldName, contents);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Global Method Configuration\nDESCRIPTION: Shows how to change the global defaults for all methods using the Methods.configure function, allowing developers to set project-wide method behavior.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// put this in a file that's imported on both the client and server\nimport { Methods } from 'meteor/jam:method';\n\nMethods.configure({\n  // ... change the defaults here ... //\n});\n```\n\n----------------------------------------\n\nTITLE: Using Express with WebApp in Meteor 3.x\nDESCRIPTION: Demonstrates how to use Express features with WebApp in Meteor 3.x, including setting up routes and using middleware. This change is due to WebApp switching from Connect to Express 5.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebApp } from 'meteor/webapp';\n\nconst app = WebApp.express(); // [!code highlight] you can use as a normal express app\n\napp.get('/hello', (req, res) => {\n  res.send('Hello World');\n});\n\nWebApp.handlers.use(app);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebApp } from 'meteor/webapp';\n\nWebApp.handlers.get('/hello', (req, res) => {\n  res.send('Hello World');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebApp } from 'meteor/webapp';\n\nconst app = WebApp.express();\nconst router = WebApp.express.Router();\n\n// This middleware is executed every time the app receives a request\nrouter.use((req, res, next) => {\n    console.log('Router-level - Time:', Date.now());\n    next();\n})\n\n// This middleware shows request info for any type of HTTP request to the /hello/:name path\nrouter.use('/hello/:name', (req, res, next) => {\n    console.log('Router-level - Request URL:', req.originalUrl);\n    next();\n}, (req, res, next) => {\n    console.log('Router-level - Request Type:', req.method);\n    next();\n})\n\n// mount the router on the app\napp.use('/', router);\n\nWebApp.handlers.use(app);\n```\n\n----------------------------------------\n\nTITLE: Default Exports in ES2015 JavaScript\nDESCRIPTION: Demonstrates how to use default exports and imports in ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nexport default any.arbitrary(expression);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport Value from './exporter';\n// Value is identical to the exported expression\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Helper in Meteor\nDESCRIPTION: This snippet shows how to create an association helper 'todos()' for the Lists collection. The helper returns a cursor for all todos associated with the current list, sorted by creation date.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nLists.helpers({\n  todos() {\n    return Todos.find({listId: this._id}, {sort: {createdAt: -1}});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor Server Startup\nDESCRIPTION: Server-side Meteor code that imports collections, publications, and methods, and initializes data on startup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\n\nimport '/imports/collections/Time';\nimport '/imports/publications/Time';\nimport '/imports/methods/UpdateTime';\n\nMeteor.startup(() => {\n  // Update the current time\n  Meteor.call('UpdateTime');\n  // Add a new doc on each start.\n  Time.insert({ time: new Date() });\n  // Print the current time from the database\n  console.log(`The time is now ${Time.findOne().time}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor Applications for Mobile Platforms\nDESCRIPTION: Complete example of a mobile-config.js file for Meteor applications targeting mobile platforms. Demonstrates how to set app metadata, configure icons, launch screens, PhoneGap/Cordova preferences, plugin configuration, and append custom XML to the generated config file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/app.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This section sets up some basic app metadata, the entire section is optional.\nApp.info({\n  id: 'com.example.matt.uber',\n  name: '√ºber',\n  description: 'Get √ºber power in one button click',\n  author: 'Matt Development Group',\n  email: 'contact@example.com',\n  website: 'http://example.com'\n});\n\n// Set up resources such as icons and launch screens.\nApp.icons({\n  'iphone_2x': 'icons/icon-60@2x.png',\n  'iphone_3x': 'icons/icon-60@3x.png',\n  // More screen sizes and platforms...\n});\n\n// Before Meteor 2.6 we had to pass device specific splash screens for iOS, but this behavior was dropped in favor of story board images.\nApp.launchScreens({\n    // iOS\n    // For most cases you will only need to use the 'ios_universal' and 'ios_universal_3x'.\n    'ios_universal': { src: 'splash/Default@2x.png', srcDarkMode: 'splash/Default@2x~dark.png' }, // (2732x2732) - All @2x devices, if device/mode specific is not declared\n    'ios_universal_3x': 'splash/Default@3x.png', // (2208x2208) - All @3x devices, if device/mode specific is not declared\n\n    // If you still want to use a universal splash, but want to fine-tune for the device mode (landscape, portrait), then use the following keys:\n    'Default@2x~universal~comany': 'splash/Default@2x~universal~comany.png', // (1278x2732) - All @2x devices in portrait mode.\n    'Default@2x~universal~comcom': 'splash/Default@2x~universal~comcom.png', // (1334x750) - All @2x devices in landscape (narrow) mode.\n    'Default@3x~universal~anycom': 'splash/Default@3x~universal~anycom.png', // (2208x1242) - All @3x devices in landscape (wide) mode.\n    'Default@3x~universal~comany': 'splash/Default@3x~universal~comany.png', // (1242x2208) - All @3x devices in portrait mode.\n\n    // However, if you need to fine tune the splash screens for the device idiom (iPhone, iPad, etc).\n    'Default@2x~iphone~anyany': 'splash/Default@2xiphoneanyany.png', // (1334x1334) - iPhone SE/6s/7/8/XR\n    'Default@2x~iphone~comany': 'splash/Default@2xiphonecomany.png', // (750x1334) - iPhone SE/6s/7/8/XR - portrait mode\n    'Default@2x~iphone~comcom': 'splash/Default@2xiphonecomcom.png', // (1334x750) - iPhone SE/6s/7/8/XR - landscape (narrow) mode\n    'Default@3x~iphone~anyany': 'Default@3xiphoneanyany.png', // (2208x2208) - iPhone 6s Plus/7 Plus/8 Plus/X/XS/XS Max\n    'Default@3x~iphone~anycom': { src: 'splash/Default@3xiphoneanycom.png', srcDarkMode: 'splash/Default@3xiphoneanycom~dark.png' }, // (2208x1242) - iPhone 6s Plus/7 Plus/8 Plus/X/XS/XS Max - landscape (wide) mode\n    'Default@3x~iphone~comany': 'Default@3xiphonecomany.png', // (1242x2208) - iPhone 6s Plus/7 Plus/8 Plus/X/XS/XS Max - portrait mode\n    'Default@2x~ipad~anyany': 'Default@2xipadanyany.png', // (2732x2732) - iPad Pro 12.9\"/11\"/10.5\"/9.7\"/7.9\"\n    'Default@2x~ipad~comany': 'Default@2xipadcomany.png', // (1278x2732) - iPad Pro 12.9\"/11\"/10.5\"/9.7\"/7.9\" - portrait mode\n\n    // Android\n    'android_universal': 'splash/android_universal.png', // (320x480)\n});\n\n// Set PhoneGap/Cordova preferences.\nApp.setPreference('BackgroundColor', '0xff0000ff');\nApp.setPreference('HideKeyboardFormAccessoryBar', true);\nApp.setPreference('Orientation', 'default');\nApp.setPreference('Orientation', 'all', 'ios');\n\n// Pass preferences for a particular PhoneGap/Cordova plugin.\nApp.configurePlugin('com.phonegap.plugins.facebookconnect', {\n  APP_ID: '1234567890',\n  API_KEY: 'supersecretapikey'\n});\n\n// Add custom tags for a particular PhoneGap/Cordova plugin to the end of the\n// generated config.xml. 'Universal Links' is shown as an example here.\nApp.appendToConfig(`\n  <universal-links>\n    <host name=\"localhost:3000\" />\n  </universal-links>\n`);\n```\n\n----------------------------------------\n\nTITLE: Insecure User-Scoped Data Publication in Meteor (JavaScript)\nDESCRIPTION: Shows a Meteor publication with user-based authorization handled outside the reactive query, which can expose sensitive data if ownership changes. Uses check to validate the listId argument and compares the list's userId to this.userId, but since the query does not filter by user, stale data may leak when user permissions change. Highlights the risk of non-reactive security checks in publications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// #1: Bad! If the owner of the list changes, the old owner will still see it\nMeteor.publish('list', function (listId) {\n  check(listId, String);\n\n  const list = Lists.findOne(listId);\n\n  if (list.userId !== this.userId) {\n    throw new Meteor.Error('list.unauthorized',\n      'This list doesn\\'t belong to you.');\n  }\n\n  return Lists.find(listId, {\n    fields: {\n      name: 1,\n      incompleteCount: 1,\n      userId: 1\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Argon2 Encryption in Meteor\nDESCRIPTION: This snippet shows the server-side configuration needed to enable Argon2 password encryption in a Meteor application using the Accounts.config method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({\n    argon2Enabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping a Tracker.autorun Computation\nDESCRIPTION: This snippet demonstrates how to stop an autorun using the handle returned when creating it. Once stopped, the autorun no longer responds to changes in the reactive values it was tracking.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetFavoriteFood(\"peaches\");\n// \"Your favorite food is peaches\"\nsetFavoriteFood(\"bananas\");\n// \"Your favorite food is bananas\"\nhandle.stop();\nsetFavoriteFood(\"cake\");\n// (nothing printed)\n```\n\n----------------------------------------\n\nTITLE: Updating TaskForm with Submit Handler in JSX\nDESCRIPTION: This snippet enhances the TaskForm component with a submit handler that calls the Meteor method to insert a new task. It also implements controlled input using React state.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/3.forms-and-events.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { TasksCollection } from \"/imports/api/TasksCollection\";\n\nexport const TaskForm = () => {\n  const [text, setText] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!text) return;\n\n    await Meteor.callAsync(\"tasks.insert\", {\n      text: text.trim(),\n      createdAt: new Date(),\n    });\n\n    setText(\"\");\n  };\n\n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to add new tasks\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n\n      <button type=\"submit\">Add Task</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Meteor List Component\nDESCRIPTION: Integration test checking list rendering with stubbed router and subscription. Creates test data using Factory and verifies todo list items render correctly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nFlowRouter.getParam.restore();\nMeteor.subscribe.restore();\n});\n\nit('renders correctly with simple data', function () {\n  Factory.create('list', { _id: listId });\n  const timestamp = new Date();\n  const todos = [...Array(3).keys()].forEach(i => Factory.create('todo', {\n    listId,\n    createdAt: new Date(timestamp - (3 - i)),\n  }));\n\n  withRenderedTemplate('Lists_show_page', {}, el => {\n    const todosText = todos.map(t => t.text).reverse();\n    const renderedText = $(el).find('.list-items input[type=text]')\n      .map((i, e) => $(e).val())\n      .toArray();\n    chai.assert.deepEqual(renderedText, todosText);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform Support to Meteor Project\nDESCRIPTION: This command is used within a Meteor project directory to add the necessary configuration and dependencies for building and running the application on the iOS platform. Executing this command may trigger prompts related to Xcode installation if it's not properly set up.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add-platform ios\n```\n\n----------------------------------------\n\nTITLE: Queueing Methods When Offline in Meteor\nDESCRIPTION: This example illustrates how to queue methods for execution when offline, using the 'queueMethod' function provided by 'jam:offline'. It requires the user to be offline and allows delayed execution of Meteor methods until reconnection. It recommends the use of 'Meteor.applyAsync' with 'noRetry: true'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { queueMethod } from 'meteor/jam:offline';\\n\\nif (!Meteor.status().connected) { // check that the user is offline\\n  queueMethod(name, arg1, arg2...) // the arguments should be the same form that you'd use for Meteor.callAsync\\n}\n```\n\n----------------------------------------\n\nTITLE: Reconnecting to Server in Meteor JavaScript\nDESCRIPTION: The Meteor.reconnect() function attempts to re-establish a connection with the server if it has been disconnected.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/connections.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.reconnect()\n```\n\n----------------------------------------\n\nTITLE: Recovering Soft Deleted Documents in Meteor\nDESCRIPTION: Shows how to recover documents that have been soft deleted using the `recoverAsync` method. This method restores documents that were marked as deleted by removing the soft delete flag.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/soft-delete.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.recoverAsync(/* your filter */)\n```\n\n----------------------------------------\n\nTITLE: Creating an Index in a Meteor Collection - JavaScript\nDESCRIPTION: Demonstrates efficient index creation on a collection to optimize query performance for a specified field. Dependencies: Mongo package on server; only effective for server-side MongoDB, not available in client-side Minimongo. Inputs: index specification object and an options object with index metadata (e.g., name). Outputs: Index is created in MongoDB. Limitations: No effect on client-side Minimongo collections; available only on the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlayers.createIndex({ userId: 1 }, { name: \"user reference on players\" });\n```\n\n----------------------------------------\n\nTITLE: Using Collection Helper in Meteor\nDESCRIPTION: This example demonstrates how to use the 'isPrivate()' helper method after it has been attached to the Lists collection. It retrieves a list document and checks if it's private.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = Lists.findOne();\nif (list.isPrivate()) {\n  console.log('The first list is private!');\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Meteor Methods Without Execution\nDESCRIPTION: Shows how to validate method arguments against a schema without executing the method, useful for pre-validating data or checking partial schemas before committing to a full method call.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  async run({ text }) {\n    // ... //\n  }\n});\n\n// validate against the schema without executing the method\ncreate.validate({...})\n\n// validate against only the relevant part of the schema based on the data passed in without executing the method\ncreate.validate.only({...})\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Methods in JavaScript\nDESCRIPTION: Defines async CRUD operations for Customer entity including create, update, remove, and findById methods\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { CustomerCollection } from './collection';\n\nexport async function create(data) {\n  return CustomerCollection.insertAsync({ ...data });\n}\n\nexport async function update(_id, data) {\n  check(_id, String);\n  return CustomerCollection.updateAsync(_id, { ...data });\n}\n\nexport async function remove(_id) {\n  check(_id, String);\n  return CustomerCollection.removeAsync(_id);\n}\n\nexport async function findById(_id) {\n  check(_id, String);\n  return CustomerCollection.findOneAsync(_id);\n}\n\nMeteor.methods({\n  'Customer.create': create,\n  'Customer.update': update,\n  'Customer.remove': remove,\n  'Customer.find': findById\n});\n```\n\n----------------------------------------\n\nTITLE: Using Match.Maybe for Optional Types in JavaScript\nDESCRIPTION: Introduces the new Match.Maybe matcher in the Check package, which allows matching null in addition to undefined and the specified type.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_80\n\nLANGUAGE: JavaScript\nCODE:\n```\nMatch.Maybe(type)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Uniqueness with Pairwise Inequality Constraints using Logic Solver in JavaScript\nDESCRIPTION: Adds explicit constraints prohibiting any two locations from holding the same digit by forbidding Logic.equalBits for all location pairs. Nested iteration over all unique variable pairs ensures all are mutually distinct, which yields only valid magic squares. Inputs: location variables; Outputs: additional constraints, stricter solution set.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.each(locations, function (loc1, i) {\n  _.each(locations, function (loc2, j) {\n    if (i !== j) {\n      solver.forbid(Logic.equalBits(loc1, loc2));\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection URL\nDESCRIPTION: Environment variable configuration for connecting to MongoDB server with authentication details\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/environment-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_URL=\"mongodb://user:password@myserver.com:10139\"\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Custom Headers in Meteor\nDESCRIPTION: Demonstrates how to send emails with custom headers using the Email.send method in Meteor. The headers option allows setting arbitrary headers for the email.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_134\n\nLANGUAGE: JavaScript\nCODE:\n```\nEmail.send({ headers: /* custom headers */ })\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Methods/Publications with Argument Checks (Valid Examples) in JavaScript\nDESCRIPTION: These JavaScript snippets illustrate patterns in Meteor method and publish function definitions that satisfy the `audit-argument-checks` ESLint rule and will not generate warnings. The examples show arguments being correctly passed to `check` unconditionally at the top level of the function body, either as a standalone expression or within an assignment statement.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/audit-argument-checks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n\nMeteor.publish(\"foo\", function (bar) {\n  check(bar, Match.Any)\n})\n\nMeteor.methods({\n  foo: function (bar) {\n    check(bar, Match.Any)\n  }\n})\n\nMeteor.methods({\n  foo: function (bar) {\n    var ret;\n    ret = check(bar, Match.Any)\n  }\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Meteor Mongo Collection in JavaScript\nDESCRIPTION: Demonstrates the recommended convention for defining a Meteor Mongo collection. The collection variable (`Lists`) uses PascalCase, and the database collection name (first argument, 'lists') matches the variable name but typically starts lowercase. This establishes a link between the application code and the underlying MongoDB collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Defining a collection\nLists = new Mongo.Collection('lists');\n```\n\n----------------------------------------\n\nTITLE: Handling Default Exports with Dynamic Import in JavaScript\nDESCRIPTION: Demonstrates destructuring default exports from dynamically imported modules\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/dynamic-import.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"another-tool\").then(({ default: thatTool }) => thatTool.go());\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Message for Rate Limiting Rule in Meteor\nDESCRIPTION: Example of adding a rate limiting rule for Google Authenticator setup and setting a custom error message. The rule allows 1 setup attempt every 60 seconds and provides a dynamic error message with the time remaining.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/methods.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst setupGoogleAuthenticatorRule = {\n  userId(userId) {\n    const user = Meteor.users.findOne(userId);\n    return user;\n  },\n  type: 'method',\n  name: 'Users.setupGoogleAuthenticator',\n};\n\n// Add the rule, allowing up to 1 google auth setup message every 60 seconds\nconst ruleId = DDPRateLimiter.addRule(setupGoogleAuthenticatorRule, 1, 60000);\nDDPRateLimiter.setErrorMessageOnRule(ruleId, function (data) {\n  return `You have reached the maximum number of Google Authenticator attempts. Please try again in ${Math.ceil(data.timeToReset / 1000)} seconds.`;\n});\n```\n\n----------------------------------------\n\nTITLE: Legacy Fiber/Callback-style Meteor Method Call (JavaScript/ES5)\nDESCRIPTION: Demonstrates legacy (Meteor 2.x and below) method invocation using callbacks and fibers. The callback receives either an error object or the result, maintaining compatibility with older Meteor projects. Includes in-line client simulation for optimistic UI behavior. Inputs: method name (string), arguments, callback function; outputs: callback called with error or result, local database simulates changes optimistically.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.call('greetUser', 'John', function(error, result) {\n  if (error) {\n    console.error(\"Error:\", error.reason); // üî¥ Server ended with error\n  } else {\n    console.log(\"Result:\", result); // üü¢ Server ended with success\n  }\n\n  Greetings.findOne({ name: 'John' }); // üóëÔ∏è Data is NOT available\n});\n\n// üîµ Client simulation\nGreetings.findOne({ name: 'John' }); // üßæ Data is available (Optimistic-UI)\n```\n\n----------------------------------------\n\nTITLE: Disallowing Framing in Browser Policy (JavaScript)\nDESCRIPTION: Prevents the app from rendering inside any frame or iframe.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.disallow()\n```\n\n----------------------------------------\n\nTITLE: React Server-Side Streaming Rendering Example\nDESCRIPTION: Example of using the server-render package with React 16's streaming capabilities. This code shows how to set up server-side rendering that streams content to the client using renderToNodeStream.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { renderToNodeStream } from \"react-dom/server\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport App from \"/imports/Server.js\";\n\nonPageLoad(sink => {\n  sink.renderIntoElementById(\"app\", renderToNodeStream(\n    <App location={sink.request.url} />\n  ));\n});\n```\n\n----------------------------------------\n\nTITLE: ReactiveDict Integration with Meteor Templates\nDESCRIPTION: Complete example showing ReactiveDict usage in Meteor templates, including HTML template and JavaScript handlers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/reactive-dict.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- main.html -->\n<template name=\"main\">\n  <p>We've always been at war with {{theEnemy}}.</p>\n  <button class=\"change-enemy\">Change Enemy</button>\n</template>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nTemplate.main.onCreated(function () {\n    this.state = new ReactiveDict();\n    this.state.set('enemy', 'Eastasia');\n});\nTemplate.main.helpers({\n  theEnemy() {\n    const inst = Template.instance();\n    return inst.state.get('enemy');\n  }\n});\nTemplate.main.events({\n  'click .change-enemy'(event, inst) {\n    inst.state.set('enemy', 'Eurasia')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Utilizing BuildMessage for Error Handling in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of `buildmessage.markBoundary` to define the entry point of user code and `buildmessage.exception` to capture and rethrow exceptions with modified stack traces. The snippet uses a try-catch block to orchestrate error handling and continuation, showcasing error recovery and message collection capabilities.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/utils/buildmessage.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = null;\nf = function () { user provided code };\ntry {\n  var markedF = buildmessage.markBoundary(f);\n  result = markedF();\n} catch (e) {\n  buildmessage.exception(e);\n  // clean up\n  ...\n  // pretend nothing happened so we can recover and move on to find other errors\n  result = { name: \"dummy\" };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Component in Vue\nDESCRIPTION: A Vue component representing an individual task item. Uses the script setup syntax and defines props to accept a task object with text content.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineProps({\n  task: {\n    type: Object,\n    required: true,\n  },\n});\n</script>\n\n<template>\n  <li>{{ task.text }}</li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Publishing Meteor Tasks Collection\nDESCRIPTION: Defines a Meteor publication named 'tasks' on the server within `imports/api/tasksPublications.js`. It uses `Meteor.publish` to make data available to clients. The publication function returns a cursor from `TasksCollection.find()`, publishing all documents in the collection to subscribed clients.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { TasksCollection } from './tasksCollection';\n\nMeteor.publish('tasks', function publishTasks() {\n    return TasksCollection.find();\n});\n```\n\n----------------------------------------\n\nTITLE: Running a Meteor Project Locally using Shell\nDESCRIPTION: These commands first navigate into the newly created project directory ('myapp') and then start the Meteor development server. The `meteor` command, when run without arguments inside a project directory, launches the application in development mode, typically accessible at http://localhost:3000/. This requires being inside the project directory.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/web-apps.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd myapp\nmeteor\n```\n\n----------------------------------------\n\nTITLE: Using ReactiveVar.get() Method in Meteor\nDESCRIPTION: This snippet demonstrates how to use the get() method of a ReactiveVar instance. It shows how ReactiveVars can be attached to template instances for local use.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/reactive-var.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.foo.get()\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Function in Jam Methods\nDESCRIPTION: This code demonstrates how to define a custom validation function for a Jam method in a Meteor app. The 'validate' parameter accepts a function that will check the method's arguments against the provided schema. The method uses async operations for database interactions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import your schema from somewhere\n// import your validator function from somewhere\n\nexport const create = createMethod({\n  name: 'todos.create',\n  validate(args) {\n    validator(args, schema)\n  },\n  async run({ text }) {\n    const todo = {\n      text,\n      done: false,\n      createdAt: new Date(),\n      authorId: Meteor.userId() // can also use this.userId instead of Meteor.userId()\n    }\n    const todoId = await Todos.insertAsync(todo);\n    return todoId;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Text File with Assets in Meteor\nDESCRIPTION: Demonstrates how to asynchronously read a text file from the private/nested directory using Assets.getTextAsync(). The file path is relative to the private directory.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/assets.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await Assets.getTextAsync('nested/data.txt');\n```\n\n----------------------------------------\n\nTITLE: Creating Compound MongoDB Index in Meteor\nDESCRIPTION: Example of creating a compound index in MongoDB using the ESR (equality, sort, range) pattern with unique constraint. The index is created on pageId, language, and date fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/performance-improvement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nStatistics.createIndexAsync(\n  {\n    pageId: 1,\n    language: 1,\n    date: 1\n  },\n  { unique: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Disposing Tracker Computation in HMR Context\nDESCRIPTION: This example shows how to properly dispose of a Tracker computation when a module is about to be replaced. It ensures that the old instance of the module no longer affects the app, preventing unexpected behavior.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/hot-module-replacement.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLocale } from '/imports/utils/locale';\n\nconst computation = Tracker.autorun(() => {\n  const user = Meteor.user();\n\n  if (user && user.locale) {\n    setLocale(user.locale);\n  }\n});\n\nif (module.hot) {\n  module.hot.dispose(() => {\n    computation.stop();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Temperature Source in JavaScript\nDESCRIPTION: Example implementation of a reactive temperature source using Tracker.Dependency, showing how to make data sources Tracker-aware.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tracker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar temperatureDep = new Tracker.Dependency;\n\nvar currentTemperatureCelsius = function () {\n  temperatureDep.depend();\n  return Thermometer.read();\n};\n\nThermometer.onChange(function () {\n  temperatureDep.changed();\n});\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Development Server\nDESCRIPTION: Demonstrates how to run a Meteor development server with the 'meteor run' command, including an example of specifying a custom port.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run --port 4000\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Creation Date in JSX\nDESCRIPTION: This snippet updates the App component to sort tasks by creation date in descending order, showing the newest tasks first.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/3.forms-and-events.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const App = () => {\n  const tasks = useTracker(() => TasksCollection.find({}, { sort: { createdAt: -1 } }).fetch());\n  ..\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports in ES2015 JavaScript\nDESCRIPTION: This snippet demonstrates how to import named exports from another module using ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport { a, c, F, h } from './exporter';\nnew F(a, c).method(h);\n```\n\n----------------------------------------\n\nTITLE: Streaming Server-Side Rendering with React 16 in Meteor\nDESCRIPTION: Example of how to use streaming server-side rendering with React 16 in Meteor 1.6.1 using the server-render package and renderToNodeStream from react-dom/server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { renderToNodeStream } from \"react-dom/server\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport App from \"/imports/Server.js\";\n\nonPageLoad(sink => {\n  sink.renderIntoElementById(\"app\", renderToNodeStream(\n    <App location={sink.request.url} />\n  ));\n});\n```\n\n----------------------------------------\n\nTITLE: Email Validation in Meteor Accounts\nDESCRIPTION: Server-side validation to ensure every user has an email address using SimpleSchema validation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nAccounts.validateNewUser((user) => {\n  new SimpleSchema({\n    _id: { type: String },\n    emails: { type: Array },\n    'emails.$': { type: Object },\n    'emails.$.address': { type: String },\n    'emails.$.verified': { type: Boolean },\n    createdAt: { type: Date },\n    services: { type: Object, blackbox: true }\n  }).validate(user);\n\n  // Return true to allow user creation to proceed\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from Accounts.setPassword to Accounts.setPasswordAsync in Meteor\nDESCRIPTION: Shows how to update code that uses the deprecated Accounts.setPassword function to the new asynchronous version Accounts.setPasswordAsync. The new implementation requires the function to be marked as async and the call to be awaited.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/renamed-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n\nfunction someFunction(userId, newPassword) {\n  Accounts.setPassword(userId, newPassword);\n}\n\n// After\n\nasync function someFunction(userId, newPassword) {\n  await Accounts.setPasswordAsync(userId, newPassword);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Accounts Login Validation in Meteor\nDESCRIPTION: Example of the Accounts.validateLoginAttempt hook that allows for custom validation logic during login attempts. This can be used for implementing rate limiting, audit trails, or account lockout functionality.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.validateLoginAttempt\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Framework using NPX\nDESCRIPTION: Command to install the Meteor framework using NPX package runner.\nSOURCE: https://github.com/meteor/meteor/blob/devel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> npx meteor\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor using npm\nDESCRIPTION: Alternative method to install Meteor globally using npm. This method is recommended if npx installation fails. Requires Node.js v20 or higher.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g meteor --foreground-script\n```\n\n----------------------------------------\n\nTITLE: Creating a New React-based Meteor Application\nDESCRIPTION: Command for creating a new Meteor application using the React template, which was contributed by community members and will continue to evolve in future releases.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --react new-react-app\n```\n\n----------------------------------------\n\nTITLE: Registering Blaze UI Hooks\nDESCRIPTION: Example configuration of UI hooks for managing DOM element insertion, movement and removal in Blaze. These hooks allow custom handling of DOM manipulations like animations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_98\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  insertElement: function (node, next) {},\n  moveElement: function (node, next) {},\n  removeElement: function (node) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Time-Based Reactive Value Using ReactiveDict in JavaScript\nDESCRIPTION: An example showing how to create a reactive value that updates with the current time every second using ReactiveDict. It uses setTimeout to trigger updates to the reactive value.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new ReactiveDict;\n\ndata.set(\"now\", new Date);\nsetTimeout(function () {\n  data.set(\"now\", new Date);\n}, 1000);\n\nvar currentTime = function () {\n  data.get(\"now\");\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Whitelist for Dynamic Imports in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a module whitelist that allows Meteor's build process to include modules that might be dynamically imported using computed expressions later.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/dynamic-import.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (false) {\n  import(\"/libs/example.js\");\n  import(\"/libs/another-example.js\");\n  import(\"/libs/yet-another-example.js\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Files to Atmosphere Package\nDESCRIPTION: Demonstrates how to add JavaScript files to an Atmosphere package using api.mainModule() in the package.js file. Shows both single and multiple entry points for client and server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function(api) {\n  api.mainModule('my-package.js');\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function(api) {\n  api.mainModule('my-package-client.js', 'client');\n  api.mainModule('my-package-server.js', 'server');\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Status in Meteor\nDESCRIPTION: Demonstrates how to use Mongo.inTransaction() to determine if the current code is running within a transaction context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/mongo-transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMongo.inTransaction(); // returns true or false\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Helper in Meteor\nDESCRIPTION: This snippet shows how to add a helper method 'isPrivate()' to the Lists collection using the dburles:collection-helpers package. The method checks if a list is private based on the presence of a userId.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nLists.helpers({\n  // A list is considered to be private if it has a userId set\n  isPrivate() {\n    return !!this.userId;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local node_modules in a Meteor Application\nDESCRIPTION: Shell commands for creating a Meteor application with local node_modules. Shows how to install and use an npm package (moment) directly within a Meteor app without wrapper packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmeteor create modular-app\ncd modular-app\nmkdir node_modules\nnpm install moment\necho \"import moment from 'moment';\" >> modular-app.js\necho 'console.log(moment().calendar());' >> modular-app.js\nmeteor\n```\n\n----------------------------------------\n\nTITLE: Using Submodule in Main Server Module | meteor-rpc | TypeScript\nDESCRIPTION: Illustrates main server module construction with a prebuilt chat submodule included. Ensures that the submodule's methods are namespaced under 'server.chat' for type-safe client usage. build must finalize composition. Requires both meteor-rpc and exported chatModule.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { chatModule } from \"./server/chat\";\n\nconst server = createModule()\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .addSubmodule(chatModule)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Accessing Connect Handlers in Meteor WebApp Package\nDESCRIPTION: WebApp.connectHandlers provides access to register Connect middlewares after HTTP serving was moved out of server bootstrap.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_127\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebApp.connectHandlers\n```\n\n----------------------------------------\n\nTITLE: Simplified Async Autorun Synchronization\nDESCRIPTION: Example demonstrating automatic firstRunPromise handling with async autoruns.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait Tracker.autorun(async () => {\n  await Meteor.userAsync();\n  (...more async code...)\n});\n\nawait Tracker.autorun(async () => {\n  await asyncSomeOrOther();\n  (...more async code...)\n});\n```\n\n----------------------------------------\n\nTITLE: Profiling Meteor Application Performance\nDESCRIPTION: Demonstrates various ways to use the 'meteor profile' command for analyzing build and bundling performance, including options for monitoring bundle size and setting custom entrypoints.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeteor profile\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor profile --size-only\n```\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_IDLE_TIMEOUT=120 meteor profile --settings settings.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_CLIENT_ENTRYPOINT=client/main.js METEOR_SERVER_ENTRYPOINT=server/main.js meteor profile\n```\n\n----------------------------------------\n\nTITLE: Registering Accounts Callbacks in JavaScript\nDESCRIPTION: This snippet shows how to register callbacks for account-related events like password reset, enrollment, and email verification. These callbacks should be registered before Meteor.startup fires.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_91\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.onResetPasswordLink(callback);\nAccounts.onEnrollmentLink(callback);\nAccounts.onEmailVerificationLink(callback);\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Package Styles\nDESCRIPTION: Examples of importing styles from NPM packages using both Less and JavaScript imports.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_7\n\nLANGUAGE: less\nCODE:\n```\n@import '{}/node_modules/npm-package-name/button.less';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'npm-package-name/stylesheets/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Data Setter with Meteor Tracker\nDESCRIPTION: A setter function that updates weather data and triggers reactivity through Tracker.Dependency. It updates the weather value and calls changed() on the weatherDep dependency to invalidate dependent computations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setWeather(newWeather) {\n  weather = newWeather;\n\n  // Note: We could add logic here to only call `changed` if the new value is\n  // different from the old value.\n  weatherDep.changed();\n}\n```\n\n----------------------------------------\n\nTITLE: Reacting to First Run Using Computation.firstRun (Meteor, JavaScript)\nDESCRIPTION: This code demonstrates how to detect the first execution of an autorun using the firstRun property on its Computation argument. It requires Tracker and ReactiveDict. On the first run, initialization logic occurs; subsequent updates (book.set) only trigger the non-initialization logging. Inputs: changes to the book reactive dictionary, particularly the 'title' key.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar book = new ReactiveDict;\nbook.set(\"title\", \"A Game of Thrones\");\nTracker.autorun(function (c) {\n  if (c.firstRun) {\n    console.log(\"Curling up on the couch to read.\");\n  }\n  console.log(\"Now reading: \" + book.get(\"title\"));\n});\n// \"Curling up on the couch to read.\"\n// \"Now reading: A Game of Thrones\"\n```\n\n----------------------------------------\n\nTITLE: Using Tracker.afterFlush for Post-Update Callbacks\nDESCRIPTION: This example demonstrates how to use Tracker.afterFlush() to run a callback after the next reactive update cycle completes. The afterFlush handler runs once after the next flush, making it useful for actions that should happen after view updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new ReactiveDict;\ndata.set(\"favoriteFood\", \"cake\");\n\nTracker.autorun(function () {\n  console.log(\"My favorite food is \" + data.get(\"favoriteFood\") + \"!\");\n});\n\nvar setUnpopularFood = function (what) {\n  data.set(\"favoriteFood\", what);\n  Tracker.afterFlush(function () {\n    console.log(\"Sounds gross to you, but from where I'm from it's considered a delicacy!\");\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: MongoDB 3.x Aggregation with Callback Style\nDESCRIPTION: Example of using the aggregate method with MongoDB 3.x using callback style. This shows the new pattern where aggregate returns an AggregationCursor that requires calling toArray() to get results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nrawCollection.aggregate(\n  pipeline,\n  (error, aggregationCursor) => {\n    ...\n    const results = aggregationCursor.toArray();\n    ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Smart Subscription Manager with Tracker in JavaScript\nDESCRIPTION: This function implements the 'wait and see' approach for magazine subscriptions, using reference counting to track active subscriptions. It efficiently maintains existing subscriptions when appropriate and only cancels them when truly no longer needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar subscriptions = {}; // keys are names of magazines\nvar subscribeToMagazine = function (magazineName) {\n  if (! _.has(subscriptions, magazineName)) {\n    // We're not currently subscribed to this magazine. Go start a subscription.\n    console.log(\"Putting a check in the mail to subscribe to\", magazineName);\n    subscriptions[magazineName] = {\n      references: 1,\n      stop: function () {\n        // Wait for all autoruns to finish rerunning before processing the unsubscription\n        // request. It's possible that stop() was called because an autorun is rerunning,\n        // so before doing anything drastic, we should wait to see if the autorun\n        // recreates the subscription when it is rerun.\n        this.references--;\n        Tracker.afterFlush(function () {\n          if (this.references === 0) {\n            // Nope, either the autorun did not recreate the subscription, or there\n            // were multiple calls to subscribeToMagazine() in the first place and not all\n            // of them have been stopped. Go ahead and cancel.\n            console.log(\"Canceling our subscription to\", magazineName);\n            delete subscriptions[magazineName];\n          }\n        });\n      }\n    };\n  }) else {\n    // We already have a subscription to this magazine running. Increment the reference\n    // count to stop it from going away.\n    subscriptions[magazineName].references++;\n  }\n\n  if (Tracker.active) {\n    Tracker.onInvalidate(function (c) {\n      // subscribeToMagazine was called from inside an autorun, and the autorun is\n      // about to rerun itself. Tentatively plan to cancel the subscription. If the\n      // autorun resubscribes to that same magazine when it is rerun, the logic in\n      // in stop() is smart enough to leave the subscription alone rather than\n      // canceling and immediately recreating it.\n      //\n      // (Tracker.onInvalidate is a shortcut for Tracker.currentComputation.onInvalidate.)\n      if (_.has(subscriptions, magazineName)) {\n        subscriptions[magazineName].stop();\n      }\n    });\n  }\n\n  return subscriptions[magazineName];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Submodule for Namespacing | meteor-rpc | TypeScript\nDESCRIPTION: Defines a chat submodule using meteor-rpc with a method 'createChat' to insert a chat document. buildSubmodule exports it for namespaced inclusion in the main module. Emphasizes the need to invoke buildSubmodule for proper registration. Requires ChatCollection and zod.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChatCollection } from \"/imports/api/chat\";\nimport { createModule } from \"meteor-rpc\";\n\nexport const chatModule = createModule(\"chat\")\n  .addMethod(\"createChat\", z.void(), async () => {\n    return ChatCollection.insertAsync({ createdAt: new Date(), messages: [] });\n  })\n  .buildSubmodule(); // <-- This is important so that this module can be added as a submodule\n```\n\n----------------------------------------\n\nTITLE: Using Jam Methods on the Client Side in JavaScript\nDESCRIPTION: Example of how to import and use a Jam method from the client side in a Meteor application. The 'submit' function calls the 'create' method to add a new todo item, demonstrating client-side error handling for the 'create' method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '/imports/api/todos/methods';\n\nasync function submit() {\n  try {\n    await create({text: 'book flight to Hawaii'})\n  } catch(error) {\n    alert(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Meteor application locally\nDESCRIPTION: These commands navigate to the project directory, install dependencies, and start the Meteor server. The application will be accessible at http://localhost:3000/.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd myapp\nmeteor npm install\nmeteor\n# Meteor server running on: http://localhost:3000/\n```\n\n----------------------------------------\n\nTITLE: Negating Formulas and Terms using Logic.not in JavaScript\nDESCRIPTION: This snippet demonstrates the use of Logic.not to negate various operands, including NameTerms, negated NameTerms, and Formulas. The output type matches the input (Term or Formula), and the API handles direct negation of variables or more complex logical expressions. No external dependencies are needed beyond the Logic module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nLogic.not(\\\"A\\\") // => \\\"-A\\\"\\nLogic.not(\\\"-A\\\") // => \\\"A\\\"\\nLogic.not(Logic.and(\\\"A\\\", \\\"B\\\")) // => a Formula object\n```\n\n----------------------------------------\n\nTITLE: Creating a Static HTML Landing Page for Meteor\nDESCRIPTION: Shows how to create a static HTML file for a fast-loading landing page in Meteor. This example includes basic HTML structure with placeholders for content, stylesheets, and JavaScript functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/webapp.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Fast Landing Page</title>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0 user-scalable=no\" />   \n    <link rel=\"stylesheet\" href=\"path to your style sheet etc\">\n</head>\n\n    <body>\n        <!-- your content -->\n    </body>\n\n    <script>\n\n    // any functions you need to support your landing page\n \n    </script>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Publishing Additional User Data in Meteor\nDESCRIPTION: Example of publishing additional user fields from server to client using Meteor's publish/subscribe system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Server\nMeteor.publish('userData', function () {\n  if (this.userId) {\n    return Meteor.users.find({ _id: this.userId }, {\n      fields: { other: 1, things: 1 }\n    });\n  } else {\n    this.ready();\n  }\n});\n\n// Client\nMeteor.subscribe('userData');\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collection Access Example\nDESCRIPTION: Example showing how to access raw MongoDB collection and database objects using the new rawCollection and rawDatabase methods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nMongo.Collection.rawCollection()\nMongo.Collection.rawDatabase()\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with Autoprefixer in Meteor\nDESCRIPTION: Basic PostCSS configuration setup in postcss.config.js file that enables the autoprefixer plugin. This configuration file should be placed in the root of your Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/standard-minifier-css.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Creation Date in App.vue\nDESCRIPTION: This snippet modifies the reactive data fetching logic within the `App.vue` component's `<script setup>`. The `autorun` function now fetches tasks from `TasksCollection` using `find({}, { sort: { createdAt: -1 } })`. This sorts the results in descending order based on the `createdAt` field, ensuring the newest tasks appear first in the list.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\nconst tasks = autorun(() => {\n  return TasksCollection.find({}, { sort: { createdAt: -1 } }).fetch();\n}).result;\n\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Routes in Meteor\nDESCRIPTION: Client-side route configuration importing required templates and setting up user account configurations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FlowRouter } from 'meteor/ostrio:flow-router-extra';\nimport { BlazeLayout } from 'meteor/kadira:blaze-layout';\nimport { AccountsTemplates } from 'meteor/useraccounts:core';\n\n// Import to load these templates\nimport '../../ui/layouts/app-body.js';\nimport '../../ui/pages/root-redirector.js';\nimport '../../ui/pages/lists-show-page.js';\nimport '../../ui/pages/app-not-found.js';\n\n// Import to override accounts templates\nimport '../../ui/accounts/accounts-templates.js';\n\n// Below here are the route definitions\n```\n\n----------------------------------------\n\nTITLE: Implementing Meteor Reload Permission Handler\nDESCRIPTION: Demonstrates how to listen for reload migration requests using Reload._onMigrate(). The handler must return [true] to allow the hot code push reload to proceed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nReload._onMigrate(() => {\n  console.log('going to reload now');\n  return [true];\n});\n```\n\n----------------------------------------\n\nTITLE: Using Async Functions in Meteor Publications\nDESCRIPTION: Example of using async functions in Meteor.publish() context, which is now supported as of DDP server 2.4.0. This enables use of await syntax for asynchronous operations in publications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('asyncExample', async function() {\n  // Async publication code using await\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Field Selection in Meteor Accounts\nDESCRIPTION: Shows how to configure default field selection for user documents to avoid fetching unnecessary data. Demonstrates setting a blacklist of fields to exclude.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({ defaultFieldSelector: { myBigArray: 0 }})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Messages for Rate-Limit Rules in DDPRateLimiter (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to define a new rate-limit rule and associate a custom error message with it in DDPRateLimiter. The example focuses on limiting Google Authenticator setups, accommodating one attempt per minute, providing a user-friendly feedback mechanism by displaying a customized error message. Necessary prerequisites include adding the ddp-rate-limiter package and having valid user data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/DDPRateLimiter.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst setupGoogleAuthenticatorRule = {\n  userId(userId) {\n    const user = Meteor.users.findOne(userId);\n    return user;\n  },\n  type: 'method',\n  name: 'Users.setupGoogleAuthenticator',\n};\n\n// Add the rule, allowing up to 1 google auth setup message every 60 seconds\nconst ruleId = DDPRateLimiter.addRule(setupGoogleAuthenticatorRule, 1, 60000);\nDDPRateLimiter.setErrorMessageOnRule(ruleId, function (data) {\n  return `You have reached the maximum number of Google Authenticator attempts. Please try again in ${Math.ceil(data.timeToReset / 1000)} seconds.`;\n});\n```\n\n----------------------------------------\n\nTITLE: Test Data Factory Definition\nDESCRIPTION: Example of defining a test data factory using dburles:factory package with faker for generating random test data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport faker from '@faker-js/faker';\n\nFactory.define('todo', Todos, {\n  listId: () => Factory.get('list'),\n  text: () => faker.lorem.sentence(),\n  createdAt: () => new Date(),\n});\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Tests with meteortesting:mocha Package\nDESCRIPTION: This snippet demonstrates how to add the meteortesting:mocha package to a Meteor project and run tests using the command line. It also shows how to configure the test command in package.json.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_26\n\nLANGUAGE: Bash\nCODE:\n```\nmeteor add meteortesting:mocha\nmeteor test --once --driver-package meteortesting:mocha\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"meteor test --once --driver-package meteortesting:mocha\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Task Publication for User-Specific Data in Meteor\nDESCRIPTION: Modifies the task publication to only publish tasks belonging to the currently logged-in user.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish(\"tasks\", function () {\n  const userId = this.userId;\n  if (!userId) {\n    return this.ready();\n  }\n  return TasksCollection.find({ userId });\n});\n```\n\n----------------------------------------\n\nTITLE: Modal Component Implementation\nDESCRIPTION: Example of implementing a modal dialog using Flowbite React components\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, Modal } from 'flowbite-react';\n\nexport default function DefaultModal() {\n  const [openModal, setOpenModal] = useState<string | undefined>();\n  const props = { openModal, setOpenModal };\n\n  return (\n    <>\n      <Button onClick={() => props.setOpenModal('default')}>Toggle modal</Button>\n      <Modal show={props.openModal === 'default'} onClose={() => props.setOpenModal(undefined)}>\n        <Modal.Header>Terms of Service</Modal.Header>\n        <Modal.Body>\n          <div className=\"space-y-6\">\n            <p className=\"text-base leading-relaxed text-gray-500 dark:text-gray-400\">\n              With less than a month to go before the European Union enacts new consumer privacy laws for its citizens,\n              companies around the world are updating their terms of service agreements to comply.\n            </p>\n            <p className=\"text-base leading-relaxed text-gray-500 dark:text-gray-400\">\n              The European Union's General Data Protection Regulation (G.D.P.R.) goes into effect on May 25 and is meant to\n              ensure a common set of data rights in the European Union. It requires organizations to notify users as soon as\n              possible of high-risk data breaches that could personally affect them.\n            </p>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => props.setOpenModal(undefined)}>I accept</Button>\n          <Button color=\"gray\" onClick={() => props.setOpenModal(undefined)}>\n            Decline\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB 3.x Aggregation with wrapAsync Style\nDESCRIPTION: Example of using the aggregate method with MongoDB 3.x using Meteor's wrapAsync pattern. This demonstrates how to get the results array using the new API that returns a cursor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = Meteor.wrapAsync(\n  rawCollection.aggregate,\n  rawCollection\n)(pipeline).toArray();\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Requests with WebApp in Meteor\nDESCRIPTION: Demonstrates how to use WebApp.handlers to listen to incoming HTTP requests and respond with a custom message. This example shows how to handle a specific URL '/hello' and send a response with the current Meteor release.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/webapp.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen to incoming HTTP requests (can only be used on the server).\nWebApp.handlers.use('/hello', (req, res, next) => {\n  res.writeHead(200);\n  res.end(`Hello world from: ${Meteor.release}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting Weibo OAuth Service Configuration in Meteor (JavaScript)\nDESCRIPTION: This snippet imports the ServiceConfiguration object and upserts (inserts or updates) the Weibo OAuth credentials (clientId and secret) into the Meteor database on the server side. The provided configuration uses the popup login style and requires the correct property names as per the target service. 'service-configuration' package must be added; options include 'loginStyle', 'clientId', and 'secret'. Input: service name and credentials. Effect: Makes the Weibo login service available for clients.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ServiceConfiguration } from \"meteor/service-configuration\";\nServiceConfiguration.configurations.upsert(\n  { service: \"weibo\" },\n  {\n    $set: {\n      loginStyle: \"popup\",\n      clientId: \"1292962797\", // See table below for correct property name!\n      secret: \"75a730b58f5691de5522789070c319bc\",\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Login Service Configurations via Accounts API (JavaScript)\nDESCRIPTION: This snippet shows how to use Accounts.loginServiceConfiguration to access the collection of OAuth service configurations, allowing inspection or manipulation inside application code. Useful for debugging or administratively altering service configs at runtime. Requires the accounts-base package; no input parameters.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Accounts } from \"meteor/accounts-base\";\nAccounts.loginServiceConfiguration.find();\n```\n\n----------------------------------------\n\nTITLE: Importing Styles from npm - Relative Path\nDESCRIPTION: Example of importing Less styles from an npm package using relative path\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_6\n\nLANGUAGE: less\nCODE:\n```\n@import '../../node_modules/npm-package-name/colors.less';\n```\n\n----------------------------------------\n\nTITLE: Configuring Offline Package in Meteor Applications\nDESCRIPTION: This snippet shows how to override the default configuration for the 'jam:offline' package in Meteor. It's important to use the 'Offline.configure' method on both the client and server sides to customize offline behavior globally or for specific collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// put this in a file that's imported on both the client and server\\nimport { Offline } from 'meteor/jam:offline';\\n\\nOffline.configure({\\n  // ... change the defaults here ... //\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Offline Data Retention for Meteor Collections\nDESCRIPTION: This code snippet demonstrates how to configure a Meteor collection to retain offline data based on specific filters, limits, and sort options. It requires importing the collection and defining the conditions under which data is kept offline. It involves specifying user permissions and limits data retention to 200 records.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Todos = new Mongo.Collection('todos');\\nTodos.keep({ $or: [ { isPrivate: { $ne: true } }, { owner: Meteor.userId() } ]}, { limit: 200 }) // this will override any global defaults\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Call with curl\nDESCRIPTION: Example of making an authenticated API call to a Meteor endpoint using curl with a Bearer token. The response returns a list of private items for the authenticated user.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000/publications/lists.private -H \"Authorization: Bearer 6PN4EIlwxuVua9PFoaImEP9qzysY64zM6AfpBJCE6bs\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Server Selection Timeout in Meteor\nDESCRIPTION: This JSON configuration increases the server selection timeout for MongoDB to 120 seconds (120000 milliseconds). This can help resolve 'MongoTopologyClosedError: Topology is closed' errors that may occur after migrating to Meteor 3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/troubleshooting/mongodb-connection.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"mongo\": {\n      \"options\": {\n        \"serverSelectionTimeoutMS\": 120000\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Security Configuration in Meteor\nDESCRIPTION: Example of using collection.allow and collection.deny to configure security rules for database operations. This pattern is required after upgrading to Meteor 0.5.0 to restore client-side database writes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.allow({\n  insert: function(userId, doc) {\n    // Return true to allow insert\n  },\n  update: function(userId, doc, fieldNames, modifier) {\n    // Return true to allow update\n  },\n  remove: function(userId, doc) {\n    // Return true to allow remove\n  }\n});\n\ncollection.deny({\n  insert: function(userId, doc) {\n    // Return true to deny insert\n  },\n  update: function(userId, doc, fieldNames, modifier) {\n    // Return true to deny update\n  },\n  remove: function(userId, doc) {\n    // Return true to deny remove\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating User Lookup in Meteor 1.2 (JavaScript)\nDESCRIPTION: In Meteor 1.2, the accounts-password package ensures case-insensitive uniqueness for usernames and emails. This snippet demonstrates the new API methods for finding users by username or email in a case-insensitive manner.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/breaking-changes-1.2.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old way (case-sensitive)\nMeteor.users.findOne({username: x})\n\n// New way (case-insensitive)\nAccounts.findUserByUsername(x)\n\n// For email addresses\nAccounts.findUserByEmail(x)\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Routes with FlowRouter (JavaScript)\nDESCRIPTION: This JavaScript code defines a global 'notFound' handler for FlowRouter. When a user navigates to a URL that does not match any defined routes, the specified `action` function will execute, rendering the 'App_notFound' template into the main content area of the 'App_body' layout.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// the App_notFound template is used for unknown routes and missing lists\nFlowRouter.notFound = {\n  action() {\n    BlazeLayout.render('App_body', {main: 'App_notFound'});\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Meteor CLI Command in JavaScript\nDESCRIPTION: Defines a sample Meteor CLI command named 'some-command' using `main.registerCommand`. It specifies dependencies like `requiresApp`, argument counts (`minArgs`, `maxArgs`), and defines command-line options (`--long-option` with short form `-s`, and `--with-string` with short form `-w`). The handler function receives parsed options and arguments.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmain.registerCommand({\n  name: 'some-command',\n  requiresRelease: false,\n  requiresApp: true,\n  // requiresPackage: true,\n  // requiresAppOrPackage: true,\n  pretty: true, // optional\n  minArgs: 1, // optional\n  maxArgs: 10, // optional\n  options: {\n    'long-option': { type: Boolean, short: 's', default: true, required: true },\n    'with-string': { type: String, short: 'w' }\n  }\n}, function (options) {\n  var {appDir, packageDir, args} = options;\n  var longOption = options['long-option'];\n  var withString = options['with-string'];\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Packages - Meteor CLI - Bash\nDESCRIPTION: Illustrates how to list all packages included in the current Meteor project along with versions. Flags can customize the output: '--tree' for hierarchy, '--json' for machine readability, '--weak' to include weak dependencies, '--details' for extended package info. No dependencies besides Meteor CLI. Outputs package inventory to the terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmeteor list [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating App Component to Handle Task Checkbox Toggle\nDESCRIPTION: This snippet shows how to update the App component to handle toggling the checked state of a task. It includes a handleToggleChecked function and passes it to the Task component.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/4.update-and-remove.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const App = () => {\n  const handleToggleChecked = ({ _id, isChecked }) =>\n    Meteor.callAsync(\"tasks.toggleChecked\", { _id, isChecked });\n  ..\n  <ul>\n    { tasks.map(task => <Task key={ task._id } task={ task } onCheckboxClick={handleToggleChecked} />) }\n  </ul>\n  ..\n```\n\n----------------------------------------\n\nTITLE: Customizing User Creation with onCreateUser in Meteor\nDESCRIPTION: Example demonstrating how to use Accounts.onCreateUser to customize new user documents. This code adds a custom dexterity field with a random value while preserving the default profile handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts-multi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Support for playing D&D: Roll 3d6 for dexterity.\nAccounts.onCreateUser((options, user) => {\n  const customizedUser = Object.assign({\n    dexterity: _.random(1, 6) + _.random(1, 6) + _.random(1, 6),\n  }, user);\n\n  // We still want the default hook's 'profile' behavior.\n  if (options.profile) {\n    customizedUser.profile = options.profile;\n  }\n\n  return customizedUser;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Meteor Method in v2 Server Code\nDESCRIPTION: Server-side implementation of a Meteor method that fetches data from a MongoDB collection using synchronous calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/call-x-callAsync.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { Mongo } from \"meteor/mongo\";\n\nconst MyCollection = new Mongo.Collection(\"myCollection\");\n\nMeteor.methods({\n  getAllData() {\n    return MyCollection.find().fetch(); // [!code highlight]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing from Modular Meteor Packages\nDESCRIPTION: Shows how to import symbols from a Meteor package that uses modular structure. Demonstrates both auto-imported symbols (via api.export) and explicitly imported symbols from the package's main module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// In an application that uses 'my-modular-package':\nimport { Foo as ExplicitFoo, bar } from 'meteor/my-modular-package';\nconsole.log(Foo); // Auto-imported because of `api.export`.\nconsole.log(ExplicitFoo); // Explicitly imported, but identical to `Foo`.\nconsole.log(bar); // Exported by server.js or client.js, but not auto-imported.\n```\n\n----------------------------------------\n\nTITLE: Setting CDN Prefix for Bundled Assets in Meteor\nDESCRIPTION: API for controlling where clients load bundled JavaScript and CSS files from, enabling CDN integration to improve page load times.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\nWebAppInternals.setBundledJsCssPrefix()\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection Options in Meteor Applications\nDESCRIPTION: The Mongo.setConnectionOptions method allows developers to configure MongoDB connection settings. This method must be called before any other packages that use Mongo connections are initialized, requiring careful placement in the dependency order within the .meteor/packages file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nMongo.setConnectionOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tracker's Flush Cycle in JavaScript\nDESCRIPTION: This example demonstrates Tracker's batched update mechanism (flush cycle). By default, all reactive updates are batched and applied once JavaScript execution completes, but this behavior can be overridden using Tracker.flush().\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new ReactiveDict;\ndata.set(\"favoriteFood\", \"chicken\");\n\nTracker.autorun(function () {\n  console.log(data.get(\"favoriteFood\"));\n});\n\nconsole.log(\"start update\");\ndata.set(\"favoriteFood\", \"waffles\");\ndata.set(\"favoriteFood\", \"pie\");\nconsole.log(\"finish update\");\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Publication with TypeScript\nDESCRIPTION: TypeScript code to create a Meteor publication for the 'another-customer' model.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { AnotherCustomerCollection } from './collection';\n\nMeteor.publish('allAnotherCustomers', function publishAnotherCustomers() {\n  return AnotherCustomerCollection.find({});\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Modular Package Structure with Package.js\nDESCRIPTION: Shows how to structure a Meteor package with modular architecture using api.mainModule to specify entry points, api.export for global exports, and Npm.depends for package dependencies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nPackage.describe({\n  name: 'my-modular-package'\n});\n\nNpm.depends({\n  moment: '2.10.6'\n});\n\nPackage.onUse((api) => {\n  api.use('modules');\n  api.mainModule('server.js', 'server');\n  api.mainModule('client.js', 'client');\n  api.export('Foo');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom MongoDB Connection Options in Meteor\nDESCRIPTION: Uses the Mongo.setConnectionOptions API to specify custom MongoDB connection options in a Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_74\n\nLANGUAGE: JavaScript\nCODE:\n```\nMongo.setConnectionOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Checking Login Status in Meteor Templates\nDESCRIPTION: Example of using the Meteor.loggingIn() reactive function and its template helper {{loggingIn}} to check if a login process is currently underway.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_136\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if loggingIn}}\n  <!-- Show login animation or message -->\n  <div class=\"login-in-progress\">Logging in...</div>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Exporting Named Declarations in ES2015 JavaScript\nDESCRIPTION: Demonstrates how to export various named declarations using ES2015 syntax in a module file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nexport var a = ...;\nexport let b = ...;\nexport const c = ...;\nexport function d() { ... }\nexport function* e() { ... }\nexport class F { ... }\n```\n\n----------------------------------------\n\nTITLE: Initializing Tasks Collection with Sample Data in Meteor Server\nDESCRIPTION: Server startup code that initializes the TasksCollection with sample data if it's empty. It defines an insertTask function and adds several task items during application startup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/2.collections.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { TasksCollection } from \"/imports/api/TasksCollection\";\n\nconst insertTask = (taskText) =>\n  TasksCollection.insertAsync({ text: taskText });\n\nMeteor.startup(async () => {\n  if ((await TasksCollection.find().countAsync()) === 0) {\n    [\n      \"First Task\",\n      \"Second Task\",\n      \"Third Task\",\n      \"Fourth Task\",\n      \"Fifth Task\",\n      \"Sixth Task\",\n      \"Seventh Task\",\n    ].forEach(insertTask);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Async Module in Meteor\nDESCRIPTION: Demonstrates how importing an async module (one that uses top level await) makes the importing module also async. This affects the execution order of the modules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/top-level-await.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport './setup.js';\n\nconsole.log('in main.js');\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation Avoiding Infinite Loop in JavaScript\nDESCRIPTION: This example shows the correct implementation of reactive dependencies, avoiding the infinite loop problem by only calling Tracker.changed() when the values actually change. It follows the rule of not triggering unnecessary updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// RIGHT\nvar firstVar = 0;\nvar firstDep = new Tracker.Dependency();\nvar secondVar = 0;\nvar secondDep = new Tracker.Dependency();\n\nvar setFirstVar = function(newValue) {\n  firstVar = newValue;\n  firstDep.changed();\n};\n\nvar setSecondVar = function(newValue) {\n  secondVar = newValue;\n  secondDep.changed();\n};\n\nvar handle1 = Tracker.autorun(function () {\n  secondDep.depend();\n  if (firstVar !== secondVar) { // ADDED LINE\n    firstVar = secondVar;\n    firstDep.changed();\n  }\n});\n\nvar handle2 = Tracker.autorun(function () {\n  firstDep.depend();\n  if (secondVar !== firstVar) { // ADDED LINE\n    secondVar = firstVar;\n    secondDep.changed();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Subscription Cache in Meteor\nDESCRIPTION: This snippet details how to programmatically clear all cached subscriptions in a Meteor application using the 'PubSub.clearCache' method from the 'jam:pub-sub' package. It ensures that all cached subscriptions can be manually cleared when needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PubSub } from 'meteor/jam:pub-sub';\\n\\nPubSub.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Detecting HCP Reloads Using Session State\nDESCRIPTION: Shows how to detect if a Meteor.startup execution was triggered by a hot code push reload by utilizing Session persistence. Uses a boolean flag that gets set before reload and checked after startup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.startup(() => {\n  console.log('Was HCP:', Session.get('wasHCP'));\n  Session.set('wasHCP', false);\n\n  Reload._onMigrate(() => {\n    Session.set('wasHCP', true);\n    return [true];\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Meteor Blaze Template Helper\nDESCRIPTION: JavaScript helper function for the weather template that provides reactive data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// In app.js\nTemplate.weather.forecast = function () {\n  return forecasts.get(\"san-francisco\");\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project via Command Line - Bash\nDESCRIPTION: This code snippet shows the command required to update a Meteor.js project to a specific release version. It must be run in a terminal within the Meteor project directory. The main parameter is the desired release version (e.g., 2.13.3 or 2.13.1). The command upgrades all relevant dependencies and adjusts the project to the named release. Output includes update progress and any prompted manual steps. No additional dependencies are needed beyond Meteor CLI. Ensure your environment supports the target Node.js versions if specified by the referenced release notes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 2.13.3\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Session Values at Once - Meteor JavaScript\nDESCRIPTION: Demonstrates passing an object to Session.set to update multiple session variables simultaneously. This has the same effect as calling Session.set separately for each key/value pair and is useful for concise state updates. Requires 'meteor/session'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/session.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSession.set({\n  a: 'foo',\n  b: 'bar'\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Random Hex Strings in Meteor\nDESCRIPTION: Generates a random string of specified length containing hexadecimal digits.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/random/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.hexString(n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables and Functions in Meteor\nDESCRIPTION: Examples of exporting variables, functions, and default exports using ES2015 export syntax in a Meteor application. This demonstrates named exports and default exports for various scenarios.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const listRenderHold = LaunchScreen.hold();  // named export\nexport { Todos };                                   // named export\nexport default Lists;                               // default export\nexport default new Collection('lists');             // default export\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Deletion Logic in Vue Component Script\nDESCRIPTION: This snippet defines the asynchronous `deleteTask` method within the `Task` component's `<script setup>`. When called (e.g., by clicking the delete button), it invokes the `removeTask` Meteor method using `Meteor.callAsync`, passing the ID of the task (`taskRef.value._id`). Basic error logging is included.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript [imports/ui/components/Task.vue]\n...\nconst deleteTask = async () => {\n  try {\n    await Meteor.callAsync('removeTask', taskRef.value._id);\n  } catch (error) {\n    console.error('Error deleting task:', error);\n  }\n};\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection Options in Meteor\nDESCRIPTION: Updates to MongoDB connection options in Meteor 2.6, including changes to poolSize, useUnifiedTopology, and other connection parameters.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Old options (no longer supported)\nMongoClient.connect(url, {\n  useUnifiedTopology: true,\n  poolSize: 10,\n  native_parser: true\n});\n\n// New options\nMongoClient.connect(url, {\n  maxPoolSize: 10,\n  minPoolSize: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Service Configuration Package in Meteor\nDESCRIPTION: This command adds the service-configuration package to a Meteor project, which is necessary for configuring OAuth services.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add service-configuration\n```\n\n----------------------------------------\n\nTITLE: Styling Task Form with Tailwind CSS in Vue Template\nDESCRIPTION: This Vue template defines the structure and styling for the `TaskForm` component using Tailwind CSS. It includes a text input field (`<input>`) bound with `v-model` to `newTask` and a submit button (`<button>`). The form prevents default submission behavior using `@submit.prevent`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_26\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/components/TaskForm.vue]\n<template>\n  <form @submit.prevent=\"addTask\">\n    <input\n        v-model=\"newTask\"\n        class=\" border border-gray-300 rounded-md py-2 px-4 mr-2 text-gray-600 text-sm focus:outline-none focus:border-gray-400 focus:ring-0\"\n        type=\"text\" placeholder=\"Type to add new tasks\" />\n    <button class=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-1.5 px-4 rounded\" type=\"submit\">Add Task</button>\n  </form>\n</template>\n```\n```\n\n----------------------------------------\n\nTITLE: Reading a Text Asset Asynchronously with Assets.getTextAsync in JavaScript\nDESCRIPTION: Demonstrates how to asynchronously read the content of a text file located within the application's `private` directory using the `Assets.getTextAsync` method. This example reads 'data.txt' from the 'nested' subdirectory within 'private'. This code must run on the server. Note that packages can only access their own assets by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/assets.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst data = await Assets.getTextAsync('nested/data.txt');\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Default Field Selector for Accounts in Meteor\nDESCRIPTION: Shows how to configure Accounts to include only specific fields by default when retrieving user documents, using the defaultFieldSelector option introduced in Meteor 1.10.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({\n  defaultFieldSelector: {\n    username: 1,\n    emails: 1,\n    createdAt: 1,\n    profile: 1,\n```\n\n----------------------------------------\n\nTITLE: Launching an Interactive Meteor Server Shell using Shell\nDESCRIPTION: Starts an interactive Node.js Read-Eval-Print Loop (REPL) connected to the running Meteor application's server-side environment. This allows developers to execute server code interactively for debugging or exploration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nmeteor shell\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Before and After Hooks\nDESCRIPTION: Demonstrates how to configure global before and after hooks that run for all methods, useful for cross-cutting concerns like logging, authorization, or performance monitoring.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Methods } from 'meteor/jam:method';\n\nconst hello = () => { console.log('hello') }\nconst there = () => { console.log('there') }\nconst world = () => { console.log('world') }\n\nMethods.configure({\n  before: [hello, there],\n  after: world\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Creation Restrictions\nDESCRIPTION: Use the restrictCreationByEmailDomain option in Accounts.config to limit new user registrations to specific email domains or custom validators.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_112\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.config({\n  restrictCreationByEmailDomain: \"meteor.com\"\n});\n\n// Or use a custom validator function\nAccounts.config({\n  restrictCreationByEmailDomain: function(email) {\n    return /^[a-zA-Z0-9._%+-]+@meteordevelopment\\.com$/.test(email);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking MongoDB Feature Compatibility Version in JavaScript\nDESCRIPTION: MongoDB shell command to check the current feature compatibility version when migrating to Meteor 1.10.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ndb.adminCommand({ getParameter: 1, featureCompatibilityVersion: 1 })\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tracker Flush Cycle Behavior in JavaScript\nDESCRIPTION: This example showcases the behavior of Tracker's flush cycle, including autoruns, afterFlush handlers, and reactive updates. It simulates a simple banking system with overdraft protection and check writing privileges.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar bank = new ReactiveDict;\nbank.set(\"checking\", 10);\nbank.set(\"savings\", 50);\nbank.set(\"checkWritingAllowed\", true);\n\nTracker.autorun(function () {\n  console.log(\"There is $\" + bank.get(\"checking\") + \" in your checking account.\");\n\n  Tracker.afterFlush(function () {\n    // Since this is inside afterFlush, it only runs after every autorun affected\n    // by the most recent update has finished rerunning. So the overdraft protection\n    // code below will run before this check happens.\n    if (bank.get(\"checking\") < 0) {\n      console.log(\"Insufficient funds! No more checks for you!\");\n      bank.set(\"checkWritingAllowed\", false);\n    }\n  });\n});\n\nTracker.autorun(function () {\n  if (bank.get(\"checking\") < 0 &&\n      bank.get(\"savings\") >= 25) {\n    bank.set(\"checking\", bank.get(\"checking\") + 25);\n    bank.set(\"savings\", bank.get(\"savings\") - 25);\n    console.log(\"Automatically transferred $25 from savings to checking.\");\n  }\n});\n\nTracker.autorun(function () {\n if (bank.get(\"checkWritingAllowed\"))\n   console.log(\"Go ahead, write some checks!\");\n else\n   console.log(\"Your check writing privileges have been suspended!\");\n});\n\nvar writeACheck = function (amount) {\n  if (bank.get(\"checkWritingAllowed\"))\n    bank.set(\"checking\", bank.get(\"checking\") - amount);\n};\n\n// \"There is $10 in your checking account.\"\n// \"Go ahead, write some checks!\"\nwriteACheck(5);\n// \"There is $5 in your checking account.\"\nwriteACheck(20);\n// \"There is $-15 in your checking account.\"\n// \"Automatically transferred $25 from savings to checking.\"\n// \"There is $10 in your checking account.\"\nwriteACheck(30);\n// \"There is $-20 in your checking account.\"\n// \"Automatically transferred $25 from savings to checking.\"\n// \"There is $5 in your checking account.\"\nwriteACheck(15);\n// \"There is $-10 in your checking account.\"\n// \"Insufficient funds! No more checks for you!\"\n// \"Your check writing privileges have been suspended!\"\n```\n\n----------------------------------------\n\nTITLE: Restricting User Creation by Email Domain\nDESCRIPTION: Accounts configuration option to restrict new user registration to specific email domains or using a custom validator function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({ restrictCreationByEmailDomain: /* domain or validator */ })\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Options for Meteor\nDESCRIPTION: Shows how to pass additional options to Node.js using the SERVER_NODE_OPTIONS environment variable in Windows PowerShell and Linux/macOS.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$env:SERVER_NODE_OPTIONS = '--inspect' | meteor run\n```\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_NODE_OPTIONS=--inspect-brk meteor run\n```\n\n----------------------------------------\n\nTITLE: Finding All Possible Solutions\nDESCRIPTION: Demonstrates how to iterate through and collect all possible solutions by forbidding previous solutions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar solutions = [];\nvar curSol;\nwhile ((curSol = solver.solve())) {\n  solutions.push(curSol.getTrueVars());\n  solver.forbid(curSol.getFormula()); // forbid the current solution\n}\n\nsolutions\n// => [[\"Alice\", \"Charlie\"], [\"Charlie\"], [\"Bob\", \"Charlie\"], [\"Bob\"]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Subscription Caching in Meteor\nDESCRIPTION: This snippet shows how to configure caching on a per-subscription basis in Meteor when using 'Meteor.subscribe'. You can set individual cache durations or enable caching per subscription, overriding global defaults. Requires the 'meteor/jam:pub-sub' package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.subscribe('todos.single', _id, { cacheDuration: 30 }) // caches for 30 seconds, overriding the global default\\nMeteor.subscribe('notes.all', { cache: true }) // turns caching on, overriding the global default, and uses the global default cacheDuration\n```\n\n----------------------------------------\n\nTITLE: Hashing Strings Using SHA256 in Meteor (JavaScript)\nDESCRIPTION: Demonstrates how to hash a string using the SHA256 function provided by the Meteor SHA package. No external dependencies are necessary except for the inclusion of the SHA256 implementation itself within the Meteor environment. The key parameter is a string input, and the function returns the SHA256 hash of that string as a hexadecimal string. The implementation works in all supported Meteor JavaScript environments, and output format is fixed as a 64-character hexadecimal string.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/sha/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSHA256(string)\n```\n\n----------------------------------------\n\nTITLE: Using Unblock Method in Meteor Publications\nDESCRIPTION: Example of using the this.unblock() method in Meteor.publish() context, which is now supported as of DDP server 2.4.0. This allows publication functions to continue processing without waiting for previous calls to complete.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('example', function() {\n  this.unblock();\n  // Publication code\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Publication for Time Data\nDESCRIPTION: Definition of a Meteor Publication that makes the Time collection available to clients via subscription.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('Time', function () {\n  return Time.find({});\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Roles in Meteor JavaScript\nDESCRIPTION: Code snippet showing how to import the Roles object from the core roles package in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Roles } from \"meteor/roles\";\n```\n\n----------------------------------------\n\nTITLE: Simulating Mobile Devices with ReactiveDict in JavaScript\nDESCRIPTION: This snippet defines a mutator function simulateMobile on a ReactiveDict to simulate resizing for different mobile devices, primarily using hardcoded dimensions for an iPhone 6s. The function adjusts the WindowSize dictionary. No external dependencies are required beyond a reactive-dict package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nWindowSize.simulateMobile = (device) => {\n  if (device === 'iphone6s') {\n    this.set({width: 750, height: 1334});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Function Examples\nDESCRIPTION: Examples of different logging levels including info, error, warn, and debug. Shows various ways to call the Log function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nLog('starting up') // or Log.info('starting up')\nLog.error('error message')\nLog.warn('warning')\nLog.debug('this will show only in development')\n```\n\n----------------------------------------\n\nTITLE: Changing Global Defaults for Archive Configuration\nDESCRIPTION: Code snippet showing how to change the global configuration defaults for the archive functionality in a Meteor app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// put this in a file that's imported on both the client and server\nimport { Archive } from 'meteor/jam:archive';\n\nArchive.configure({\n  // ... change the defaults here ... //\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Fields During User Registration with Accounts.onCreateUser in Meteor\nDESCRIPTION: Shows how to generate user initials from Facebook login data during user creation. This code uses the Accounts.onCreateUser hook to modify the user object before it's inserted into the database.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate user initials after Facebook login\nAccounts.onCreateUser((options, user) => {\n  if (! user.services.facebook) {\n    throw new Error('Expected login with Facebook only.');\n  }\n\n  const { first_name, last_name } = user.services.facebook;\n  user.initials = first_name[0].toUpperCase() + last_name[0].toUpperCase();\n\n  // We still want the default hook's 'profile' behavior.\n  if (options.profile) {\n    user.profile = options.profile;\n  }\n  \n  // Don't forget to return the new user object at the end!\n  return user;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Service Configuration Package with Meteor CLI (Bash)\nDESCRIPTION: This snippet adds the service-configuration package to your Meteor project using the Meteor CLI, enabling you to store third-party OAuth configurations in your database. Run this command in your project directory before adding any specific service configuration. No parameters required; ensure the Meteor CLI is installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add service-configuration\n```\n\n----------------------------------------\n\nTITLE: Connecting to Meteor Server\nDESCRIPTION: Establishing WebSocket connection to Meteor server\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react-native.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.connect(\"wss://myapp.meteor.com/websocket\");\n```\n\n----------------------------------------\n\nTITLE: Importing Meteor Task Methods on Server\nDESCRIPTION: This snippet updates the main server entry point (`server/main.js`) to import the newly created `tasksMethods.js` file. This side-effect import ensures that the `insertTask` Meteor Method defined within that file is registered and made available for client-side calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { TasksCollection } from '../imports/api/tasksCollection';\nimport '../imports/api/tasksPublications';\nimport '../imports/api/tasksMethods';\n```\n\n----------------------------------------\n\nTITLE: DDP Heartbeat Messages in JSON\nDESCRIPTION: JSON structure for ping and pong messages used in the DDP heartbeat mechanism, showing how clients and servers can verify connection liveness.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n * `ping`\n   - `id`: optional string (identifier used to correlate with response)\n * `pong`\n   - `id`: optional string (same as received in the `ping` message)\n```\n\n----------------------------------------\n\nTITLE: Customizing MongoDB Transaction Options in Meteor\nDESCRIPTION: Example of passing custom options to Mongo.withTransaction, such as write concern settings. Refers to MongoDB Node.js driver documentation for available options.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/mongo-transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Mongo.withTransaction(async () => {\n  ...\n}, { writeConcern: { w: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP module in Meteor JavaScript\nDESCRIPTION: Demonstrates how to import and use the HTTP module in Meteor after the removal of the deprecated Meteor.http object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HTTP } from \"meteor/http\";\nHTTP.call(\"GET\", url, ...);\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Overlay for Meteor HMR in JavaScript\nDESCRIPTION: Sets up the error overlay functionality for Meteor's Hot Module Replacement. It creates a container for the overlay, manages its visibility, and handles error message display.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/dev-error-overlay/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet errorOverlay;\nlet errorContainer;\n\nconst styles = {\n  'dev-error-overlay': {\n    position: 'fixed',\n    zIndex: 9999,\n    left: 0,\n    top: 0,\n    width: '100vw',\n    height: '100vh',\n    background: 'rgba(0, 0, 0, 0.6)',\n    color: 'white',\n    'font-family': 'monospace',\n    overflow: 'auto',\n  },\n  'dev-error-overlay-content': {\n    'white-space': 'pre-wrap',\n    padding: '2rem',\n  },\n};\n\nfunction createOverlay() {\n  errorOverlay = document.createElement('div');\n  errorOverlay.id = 'dev-error-overlay';\n  Object.assign(errorOverlay.style, styles['dev-error-overlay']);\n\n  errorContainer = document.createElement('div');\n  errorContainer.id = 'dev-error-overlay-content';\n  Object.assign(errorContainer.style, styles['dev-error-overlay-content']);\n\n  errorOverlay.appendChild(errorContainer);\n  document.body.appendChild(errorOverlay);\n}\n\nfunction showErrorOverlay(message) {\n  if (!errorOverlay) {\n    createOverlay();\n  }\n  errorContainer.textContent = message;\n  errorOverlay.style.display = 'block';\n}\n\nfunction hideErrorOverlay() {\n  if (errorOverlay) {\n    errorOverlay.style.display = 'none';\n  }\n}\n\nmodule.exports = {\n  showErrorOverlay,\n  hideErrorOverlay,\n};\n```\n\n----------------------------------------\n\nTITLE: Recommended Use of Session.equals in Conditionals - JavaScript\nDESCRIPTION: This snippet provides examples of recommended patterns using Session.equals for conditional checks. This method reduces the number of invalidations as compared to Session.get when comparing scalar types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/prefer-session-equals.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (Session.equals(\"foo\", true)) {/* ... */}\n\nif (Session.equals(\"foo\", 1)) {/* ... */}\n\nif (Session.equals(\"foo\", \"hello\")) {/* ... */}\n\nif (Session.equals(\"foo\", bar)) {/* ... */}\n\nif (_.isEqual(Session.get(\"foo\"), otherValue)) {/* ... */}\n\nSession.equals(\"foo\", true) ? true : false\n```\n\n----------------------------------------\n\nTITLE: Defining a Meteor Publication in JavaScript\nDESCRIPTION: Provides an example of naming a Meteor publication according to the recommended style. The publication name (`lists.public`) passed to `Meteor.publish` is camelCased and namespaced. The associated function name (`listsPublic`) is also descriptive and typically camelCased.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// Naming a publication\nMeteor.publish('lists.public', function listsPublic() {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic HMR Accept Implementation\nDESCRIPTION: Shows the basic pattern for checking HMR availability and accepting updates\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/hot-module-replacement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (module.hot) {\n  module.hot.accept();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies in Meteor\nDESCRIPTION: Command to install React and ReactDOM as npm dependencies in a Meteor project\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install --save react react-dom\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Method Implementation for Meteor\nDESCRIPTION: Example usage of the Module.prototype.dynamicImport(id) API which enables dynamic module fetching in Meteor applications. The implementation allows for caching of fetched modules for improved performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/dynamic-import/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nModule.prototype.dynamicImport(id)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport(...)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.dynamicImport(...)\n```\n\n----------------------------------------\n\nTITLE: Balanced Websocket Compression Configuration\nDESCRIPTION: A general-purpose configuration that balances compression efficiency and performance overhead, suitable for typical applications with mixed message sizes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/performance/websocket-compression.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Balance between compression and performance\nSERVER_WEBSOCKET_COMPRESSION='{\"threshold\": 1536, \"level\": 3, \"memLevel\": 4}'\n```\n\n----------------------------------------\n\nTITLE: Finding All Solutions in JavaScript\nDESCRIPTION: Demonstrates how to find all solutions to a logic problem using a Logic.Solver instance. It uses a loop to iteratively solve and forbid previous solutions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar solver = new Logic.Solver;\nsolver.require(Logic.or('A', 'B'));\n\nvar allSolutions = [];\nvar curSolution = null;\nwhile ((curSolution = solver.solve())) {\n  allSolutions.push(curSolution.getTrueVars());\n  solver.forbid(curSolution.getFormula());\n}\n\nallSolutions // [[\"A\"], [\"A\", \"B\"], [\"B\"]]\n```\n\n----------------------------------------\n\nTITLE: ES2015 Object Literal Shorthand and Computed Properties\nDESCRIPTION: Shows the use of shorthand syntax for object literals and computed property names, features enabled by the `ecmascript` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar counter = 0;\nfunction getKeyName() {\n  return 'key' + counter++;\n}\n\nvar obj = {\n  [getKeyName()]: 'zero',\n  [getKeyName()]: 'one',\n};\n\nobj.key0; // 'zero'\nobj.key1; // 'one'\n```\n\n----------------------------------------\n\nTITLE: Configuring reCreateIndexOnOptionMismatch Setting - Meteor Mongo - JSON\nDESCRIPTION: This JSON snippet configures the 'reCreateIndexOnOptionMismatch' option for the 'mongo' package in a Meteor application's settings.json. By setting this flag to true, the application will automatically re-create indexes if their definitions mismatch, which can be helpful when many indexes need updating and manual intervention is not practical. This should be used cautiously since it will delete and rebuild affected indexes during startup. The expected input is a JSON object placed in settings.json; there are no outputs beyond configuration changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"mongo\": {\n      \"reCreateIndexOnOptionMismatch\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling MongoDB Oplog Tailing in Production\nDESCRIPTION: To enable oplog tailing in production, set the MONGO_OPLOG_URL environment variable. This allows Meteor to detect database changes instantly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_107\n\nLANGUAGE: Shell\nCODE:\n```\nMONGO_OPLOG_URL=mongodb://...\n```\n\n----------------------------------------\n\nTITLE: OAuth Registration with Async/Await (New Method)\nDESCRIPTION: Updated OAuth registration using async/await syntax in Meteor 2.9. This approach allows for more straightforward handling of asynchronous operations without relying on Fibers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.9-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nOAuth.registerService('github', 2, null, async (query) => {\n  const accessToken = await getAccessToken(query);\n  const identity = await getIdentity(accessToken);\n  const emails = await getEmails(accessToken);\n‚Ä¶\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing Boolean Formulas with Logic Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to construct complex logical Formulas with the Logic API by combining named variables using AND, IMPLIES, NOT, EQUIV, and GREATERTHAN constructors. It shows the use of both direct string variable names and arrays to build composite boolean expressions. The snippet does not require any external dependencies except the Logic module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// A and B\\nLogic.and(\\\"A\\\", \\\"B\\\")\\n\\n// If exactly one of (A, B, C) is true, then A does not equal D.\\nLogic.implies(Logic.exactlyOne(\\\"A\\\", \\\"B\\\", \\\"C\\\"),\\n              Logic.not(Logic.equiv(\\\"A\\\", \\\"D\\\")))\\n\\n// More of (x1, x2, x3) are true than (y1, y2, y3)\\nvar xs = [\\\"x1\\\", \\\"x2\\\", \\\"x3\\\"];\\nvar ys = [\\\"y1\\\", \\\"y2\\\", \\\"y3\\\"];\\nLogic.greaterThan(Logic.sum(xs), Logic.sum(ys))\n```\n\n----------------------------------------\n\nTITLE: Using Babel API in Meteor\nDESCRIPTION: Demonstrates how to use the Babel API exposed by the babel-compiler package to transpile ES6+ code. It shows how to get default options, modify them, and compile code using these options.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/babel-compiler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar babelOptions = Babel.getDefaultOptions();\n\n// Modify the default options, if necessary:\nbabelOptions.whitelist = [\n  \"es6.blockScoping\", // For `let`\n  \"es6.arrowFunctions\" // For `=>`\n];\n\nvar result = Babel.compile(\n  \"let square = (x) => x*x;\",\n  babelOptions\n);\n\n// result.code will be something like\n// \"var square = function (x) {\\n  return x * x;\\n};\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Async Iteration with MongoDB Collection Cursor\nDESCRIPTION: Example of using the new async iterator functionality with MongoDB collections in Meteor 2.8+. This allows using for-await loops to iterate through cursor results asynchronously.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (const document of collection.find(query, options)) /* ... */\n```\n\n----------------------------------------\n\nTITLE: Async Method Updates in accounts-password Package\nDESCRIPTION: List of methods in accounts-password package that are now asynchronous in version 3.0.0.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/3.0.0.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.sendResetPasswordEmail\nAccounts.sendEnrollmentEmail\nAccounts.sendVerificationEmail\nAccounts.addEmail\nAccounts.removeEmail\nAccounts.verifyEmail\nAccounts.createUserVerifyingEmail\nAccounts.createUser\nAccounts.generateVerificationToken\nAccounts.generateResetToken\nAccounts.forgotPassword\nAccounts.setPassword\nAccounts.changePassword\nAccounts.setUsername\nAccounts.findUserByEmail\nAccounts.findUserByUsername\n```\n\n----------------------------------------\n\nTITLE: Configuring maxPoolSize for MongoDB in Meteor\nDESCRIPTION: Example JSON configuration to set the 'maxPoolSize' for MongoDB Change Streams in a Meteor application's settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...//\n  \"packages\": {\n    \"mongo\": {\n      \"options\": {\n        \"maxPoolSize\": 200 // or whatever is appropriate for your application\n      }\n    }\n  }\n  // ... //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Alignment for Login Dropdown with Meteor Blaze UI Helper - HTML\nDESCRIPTION: This snippet shows how to use the loginButtons helper with the 'align' attribute set to 'right', ensuring the dropdown menu is properly positioned on the right edge of the screen. This is useful for responsive layout scenarios, preventing the menu from overflowing beyond the viewport when placed on the right.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/accounts-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{> loginButtons align=\"right\"}}\n```\n\n----------------------------------------\n\nTITLE: Galaxy Deployment Command with Free MongoDB\nDESCRIPTION: Shell command to deploy a Meteor application to Galaxy hosting using a free subdomain and free MongoDB hosting provided by Galaxy.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/8.deploying.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor deploy react-meteor-3.meteorapp.com --free --mongo\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and Related Packages for Meteor Projects\nDESCRIPTION: This command installs ESLint and related packages necessary for linting Meteor projects, including configurations for Airbnb style guide and Meteor-specific plugins.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save-dev babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-meteor eslint-plugin-react eslint-plugin-jsx-a11y eslint-import-resolver-meteor eslint @meteorjs/eslint-config-meteor\n```\n\n----------------------------------------\n\nTITLE: Creating a Window Size Reactive Value Using ReactiveDict in JavaScript\nDESCRIPTION: An example demonstrating how to create reactive values that track browser window dimensions. It sets up an event listener for window resize and updates reactive values accordingly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = new ReactiveDict;\n\nvar updateWindowSize = function () {\n  data.set(\"width\", window.innerWidth);\n  data.set(\"height\", window.innerHeight);\n};\nupdateWindowSize();\nwindow.addEventListener(\"resize\", updateWindowSize);\n\nvar windowSize = function () {\n  return {\n    width: data.get(\"width\"),\n    height: data.get(\"height\")\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundle Visualizer in Meteor Project\nDESCRIPTION: Command to enable the bundle-visualizer package using the --extra-packages flag in production mode. This allows temporary usage of the package for bundle analysis without permanently adding it to the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/bundle-visualizer.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd app/\n$ meteor --extra-packages bundle-visualizer --production\n```\n\n----------------------------------------\n\nTITLE: Generating Let's Encrypt Certificate with Alternative Chain\nDESCRIPTION: Command for manually generating a Let's Encrypt certificate specifying an alternative chain (ISRG Root X1) using certbot. This helps maintain compatibility with certain clients.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/troubleshooting/expired-certificate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot certonly --manual --preferred-chain \"ISRG Root X1\" --preferred-challenges dns\n```\n\n----------------------------------------\n\nTITLE: Defining Publication with meteor-rpc | TypeScript\nDESCRIPTION: Declares a publication named 'chatRooms' through meteor-rpc. Validates arguments with zod, though none (void) are expected. Returns a cursor by calling ChatCollection.find. Use build to complete the server module. Dependencies: meteor-rpc, a server-side chat collection, zod.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { ChatCollection } from \"/imports/api/chat\";\nimport { z } from \"zod\";\n\nconst server = createModule()\n  .addPublication(\"chatRooms\", z.void(), () => {\n    return ChatCollection.find();\n  })\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Using RPC Client with Middleware-Enabled Modules | meteor-rpc | TypeScript\nDESCRIPTION: Shows how a client can invoke namespaced methods and implicitly trigger module middlewares. Calling api.chat.createChat logs 'runs first' and then 'runs second', illustrating middleware composition. Also verifies that calling api.bar only logs the main module middleware.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"meteor-rpc\";\nimport type { Server } from \"/imports/api/server\"; // you must import the type\n\nconst api = createClient<Server>();\nawait api.chat.createChat(); // logs \"runs first\" then \"runs second\"\nawait api.bar(\"str\"); // logs \"runs second\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Autoupdate Client Availability in Meteor\nDESCRIPTION: This JavaScript code uses Tracker.autorun to reactively log whether a new client version is available for update, which is useful for debugging Hot Code Push issues.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(() => {\n  console.log('new client available:', Autoupdate.newClientAvailable());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Schema with Functional-Style Syntax\nDESCRIPTION: Demonstrates how to specify a schema for method validation using the functional-style syntax, where schema constraints are applied through function composition.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { schema } from 'meteor/jam:method';\n\nexport const doSomething = schema({thing: String, num: Number})(async ({ thing, num }) => {\n  // ... //\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Templates in Blaze Layout\nDESCRIPTION: HTML template using Blaze's Template.dynamic to render a dynamic template based on the current route.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"App_body\">\n  ...\n  {{> Template.dynamic template=main}}\n  ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Async States in Blaze Templates\nDESCRIPTION: Demonstrates how to handle different states of an asynchronous operation in a Blaze template using @pending, @rejected, and @resolved helpers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/front-end/blaze.md#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#let name=getNameAsynchronously}}\n  {{#if @pending 'name'}}\n    We are fetching your name...\n  {{/if}}\n  {{#if @rejected 'name'}}\n    Sorry, an error occured!\n  {{/if}}\n  {{#if @resolved 'name'}}\n    Hi, {{name}}!\n  {{/if}}\n{{/let}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.profile.helpers({\n  getNameAsynchronously() {\n    return Meteor.callAsync(\"getName\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CSS from JavaScript\nDESCRIPTION: Example of importing CSS directly from a JavaScript file for load order control\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'npm-package-name/stylesheets/styles.css';\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection with Absolute Certificate Path\nDESCRIPTION: Shows how Meteor converts the relative certificate path to an absolute path when the option key ends with 'Asset'. The final option name removes 'Asset' suffix as expected by MongoDB.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"mongo\": {\n      \"options\": {\n        \"tls\": true,\n        \"tlsCAFile\": \"/absolute/path/certificate.pem\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Restricting Package Usage to Meteor 3+ via isobuild:top-level-await (JavaScript)\nDESCRIPTION: Illustrates package configuration in Meteor that restricts usage to versions supporting top-level await by declaring a dependency on 'isobuild:top-level-await@3.0.0'. Used in a package.js file, this ensures pre-Meteor 3 apps cannot use the package. Dependencies: none besides standard Meteor packaging. No input parameters; output: blocks use in unsupported app versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/top-level-await.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function (api) {\n  // Do not allow this package to be used in pre-Meteor 3 apps.\n  api.use(\"isobuild:top-level-await@3.0.0\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Service Using Meteor Settings\nDESCRIPTION: This JSON snippet shows how to configure an OAuth service (Weibo) using Meteor settings, which is the preferred method since Meteor 2.7.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"service-configuration\": {\n      \"weibo\": {\n        \"loginStyle\": \"popup\",\n        \"clientId\": \"1292962797\",\n        \"secret\": \"75a730b58f5691de5522789070c319bc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Role-Based Permissions\nDESCRIPTION: Demonstrates how to verify if a user has the required roles to perform an action like deleting a forum post.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst forumPost = Posts.findOne(postId);\n\nconst canDelete = Roles.userIsInRole(userId,\n  ['admin', 'moderator'], forumPost.categoryId);\n\nif (! canDelete) {\n  throw new Meteor.Error('unauthorized',\n    'Only admins and moderators can delete posts.');\n}\n\nPosts.remove(postId);\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for zodern:types in MeteorJS\nDESCRIPTION: JSON configuration to be added to tsconfig.json file. It sets up compiler options and path mappings for using Meteor types with zodern:types package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/using-core-types.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"preserveSymlinks\": true,\n    \"paths\": {\n      \"meteor/*\": [\n        \"node_modules/@types/meteor/*\",\n        \".meteor/local/types/packages.d.ts\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Promise Then Method for Dynamic Import in JavaScript\nDESCRIPTION: Demonstrates how to use the Promise .then() method to handle dynamically imported modules\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/dynamic-import.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"tool\").then(tool => tool.task());\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button in Vue3 Component\nDESCRIPTION: Adds a logout button to the application header with Meteor authentication integration. Includes styling with Tailwind CSS classes and click handler implementation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_41\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n...\nconst logout = () => Meteor.logout();\n...\n</script>\n\n<h1 class=\"text-4xl font-bold text-gray-800 my-4\">üöÄ To-Do List\n  <span v-if=\"incompleteTasksCount > 0\" class=\"text-xl font-light text-gray-600\">({{ incompleteTasksCount }})</span>\n</h1>\n\n<button\n  class=\"bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n  @click=\"logout\">\n      Logout\n</button>\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for MongoDB Oplog in Meteor\nDESCRIPTION: Configuration for enabling MongoDB oplog tailing in production by setting the MONGO_OPLOG_URL environment variable. This improves real-time database update performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_114\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_OPLOG_URL\n```\n\n----------------------------------------\n\nTITLE: Meteor Build Command - Incomplete\nDESCRIPTION: Partial command showing the beginning of a meteor build instruction. Note: This snippet appears to be cut off in the original text.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeteor build\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Subscription Handles in Meteor\nDESCRIPTION: Shows how to check readiness status for multiple subscription handles using Array.every() within a reactive computation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst handles = [\n  Meteor.subscribe('lists.public'),\n  Meteor.subscribe('todos.inList'),\n];\n\nTracker.autorun(() => {\n  const areReady = handles.every(handle => handle.ready());\n  console.log(`Handles are ${areReady ? 'ready' : 'not ready'}`);\n});\n```\n\n----------------------------------------\n\nTITLE: ES2015 Template Literals Example\nDESCRIPTION: Demonstrates the use of template literals, a feature enabled by the `ecmascript` package. It shows multi-line strings with variable interpolation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = 'Ben';\nvar message = `My name is:\n${name}`;\n```\n\n----------------------------------------\n\nTITLE: Importing and using a custom npm package\nDESCRIPTION: Example showing how to import and use a function from a custom npm package in a Meteor application. Demonstrates ES6 import syntax and function invocation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { myPackageLog } from 'my-package'\n\nmyPackageLog(); // > \"logged from my-package\"\n```\n\n----------------------------------------\n\nTITLE: Setting Publication Strategy for a Collection in Meteor\nDESCRIPTION: This code snippet shows how to set a specific publication strategy (NO_MERGE in this case) for a collection named 'foo' using the setPublicationStrategy method in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/pubsub.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DDPServer } from \"meteor/ddp-server\";\nMeteor.server.setPublicationStrategy('foo', DDPServer.publicationStrategies.NO_MERGE);\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers for Webfonts in Meteor\nDESCRIPTION: Implements CORS headers handling for webfonts when serving through a CDN using Meteor's WebApp.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebApp } from 'meteor/webapp';\n\nWebApp.rawHandlers.use(function(req, res, next) {\n  if (req._parsedUrl.pathname.match(/\\.(ttf|ttc|otf|eot|woff|woff2|font\\.css|css)$/)) {\n    res.setHeader('Access-Control-Allow-Origin', /* your hostname, or just '*' */);\n  }\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: Efficiently Tracking Item Selection with Session.equals - Meteor JavaScript\nDESCRIPTION: Defines Blaze helpers and event handlers for managing selected post state using Session.equals and Session.set. Session.equals optimizes reactivity by only rerendering the necessary components, rather than all items, when selection changes. Uses Posts.find for data context and relies on Blaze's reactivity. Requires 'meteor/session', Blaze, and a Posts Minimongo collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/session.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.postsView.helpers({\n  posts() {\n    return Posts.find();\n  }\n});\n\nTemplate.postItem.helpers({\n  postClass() {\n    return Session.equals('selectedPost', this._id)\n      ? 'selected'\n      : '';\n  }\n});\n\nTemplate.postItem.events({\n  'click'() {\n    Session.set('selectedPost', this._id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing npm Package - Named Export\nDESCRIPTION: Example of importing a specific named function from an npm package using destructuring syntax\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isArray } from 'lodash';\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Mail Configuration\nDESCRIPTION: Environment variable configuration for SMTP server connection using various providers\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/environment-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsmtp://user:pass@yourservice.com:587\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Custom User Data on Client (JS)\nDESCRIPTION: Subscribes the client (`client.js`) to the `userData` publication defined on the server. This makes the specific user data fields (`other`, `things`) published by the server available on the client for the logged-in user. Requires the `meteor/meteor` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nMeteor.subscribe(\"userData\");\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Server Startup for User-Owned Tasks\nDESCRIPTION: This snippet modifies the server startup code to create tasks with user ownership. It assigns the created user's ID to each task and includes a createdAt timestamp.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { TasksCollection } from '../imports/api/tasksCollection';\nimport '../imports/api/tasksPublications';\nimport '../imports/api/tasksMethods';\n\nconst SEED_USERNAME = 'meteorite';\nconst SEED_PASSWORD = 'password';\n\nconst createFirstUser = async () => {\n  const user = await Accounts.findUserByUsername(SEED_USERNAME);\n  if (!user) {\n    await Accounts.createUserAsync({\n      username: SEED_USERNAME,\n      password: SEED_PASSWORD,\n    });\n  }\n}\n\nconst insertTask = async (text, userId) => {\n  await TasksCollection.insertAsync({text, userId, createdAt: new Date()});\n}\n\nconst createTasks = async () => {\n  const tasksCount = await TasksCollection.find().countAsync();\n  if (tasksCount === 0) {\n    const user = await Accounts.findUserByUsername(SEED_USERNAME);\n\n    await insertTask('First Task', user._id);\n    await insertTask('Second Task', user._id);\n    await insertTask('Third Task', user._id);\n    await insertTask('Fourth Task', user._id);\n    await insertTask('Fifth Task', user._id);\n    await insertTask('Sixth Task', user._id);\n    await insertTask('Seventh Task', user._id);\n  }\n}\n\nMeteor.startup(async () => {\n  await createFirstUser();\n  await createTasks();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mongo Collection with DDP Integration\nDESCRIPTION: Example of creating a MongoDB collection that automatically registers with DDP for data synchronization between client and server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMyCollection = new Mongo.Collection(\"mycollection\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Weibo Login Service in Meteor\nDESCRIPTION: Example showing how to configure Weibo authentication service by upserting configuration details including clientId and secret into ServiceConfiguration.configurations collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/service-configuration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nServiceConfiguration.configurations.upsert(\n  { service: \"weibo\" },\n  { $set: { clientId: \"1292962797\", secret: \"75a730b58f5691de5522789070c319bc\" } }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Client and Server Test Modules\nDESCRIPTION: Expands the testModule configuration to specify separate entry points for client and server tests, using the same syntax as mainModule.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    },\n    \"testModule\": {\n      \"client\": \"client/tests.js\",\n      \"server\": \"server/tests.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK Environment Variables for Mac\nDESCRIPTION: Sets up ANDROID_HOME environment variable and adds Android SDK tools to system PATH\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_HOME=\"$HOME/Library/Android/sdk\"\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Importing Meteor Core Packages\nDESCRIPTION: Example of importing Meteor's pseudo-global packages using ES2015 module syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { EJSON } from 'meteor/ejson';\n```\n\n----------------------------------------\n\nTITLE: Sending Email in Meteor\nDESCRIPTION: Demonstrates how to send an email using the new Email.send API introduced in Meteor v0.4.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_139\n\nLANGUAGE: JavaScript\nCODE:\n```\nEmail.send()\n```\n\n----------------------------------------\n\nTITLE: Async Method Updates in accounts-base Package\nDESCRIPTION: List of methods in accounts-base package that are now asynchronous in version 3.0.0.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/3.0.0.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmethods.removeOtherTokens\nAccounts.destroyToken\nAccounts.insertUserDoc\nAccounts.updateOrCreateUserFromExternalService\nAccounts.expirePasswordToken\nAccounts.setupUsersCollection\nMeteor.user\n```\n\n----------------------------------------\n\nTITLE: Piping Functions in Jam Methods\nDESCRIPTION: Illustrates piping functions in a Jam method, allowing a series of functions to be composed together, where each function's output becomes the input for the next. Ensure that function outputs match expected inputs for the subsequent function in the pipeline.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// you'd define the functions in the pipe and then place them in the order you'd like them to execute within .pipe\n// be sure that each function in the pipe returns what the next one expects, otherwise you can add an arrow function to the pipe to massage the data, e.g. (input) => manipulate(input)\n\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema\n}).pipe(\n  checkOwnership,\n  createTodo,\n  sendNotification\n)\n```\n\n----------------------------------------\n\nTITLE: Using Association Helper in Meteor\nDESCRIPTION: This example shows how to use the 'todos()' association helper. It retrieves a list document and then counts the number of associated todos using the helper method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = Lists.findOne();\nconsole.log(`The first list has ${list.todos().count()} todos`);\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Server Startup for User-Owned Tasks\nDESCRIPTION: Modifies the server startup code to create tasks associated with a default user account.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport { TasksCollection } from \"/imports/api/TasksCollection\";\n\nconst insertTask = (taskText, user) =>\n  TasksCollection.insertAsync({\n    text: taskText,\n    userId: user._id,\n    createdAt: new Date(),\n  });\n\nconst SEED_USERNAME = \"meteorite\";\nconst SEED_PASSWORD = \"password\";\n\nMeteor.startup(async () => {\n  if (!(await Accounts.findUserByUsername(SEED_USERNAME))) {\n    await Accounts.createUser({\n      username: SEED_USERNAME,\n      password: SEED_PASSWORD,\n    });\n  }\n\n  const user = await Accounts.findUserByUsername(SEED_USERNAME);\n\n  if ((await TasksCollection.find().countAsync()) === 0) {\n    [\n      \"First Task\",\n      \"Second Task\",\n      \"Third Task\",\n      \"Fourth Task\",\n      \"Fifth Task\",\n      \"Sixth Task\",\n      \"Seventh Task\",\n    ].forEach((taskText) => insertTask(taskText, user));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Passwordless Login with 2FA Check\nDESCRIPTION: Example of handling passwordless login attempt when 2FA is enabled\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/accounts-2fa.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<button\n  onClick={() => {\n    // logging in just with token\n    Meteor.passwordlessLoginWithToken(email, token, (error) => {\n      if (error) {\n        if (error.error === \"no-2fa-code\") {\n          // send user to a page or show a component\n          // where they can provide a 2FA code\n          setShouldAskCode(true);\n          return;\n        }\n        console.error(\"Error verifying token\", error);\n      }\n    });\n  }}\n>\n  Validate token\n</button>\n```\n\n----------------------------------------\n\nTITLE: Styling Login Form in Meteor React App\nDESCRIPTION: Updates the login form JSX structure and adds CSS styles to improve the appearance of the login form.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<form onSubmit={submit} className=\"login-form\">\n  <div>\n    <label htmlFor=\"username\">Username</label>\n\n    <input\n      type=\"text\"\n      placeholder=\"Username\"\n      name=\"username\"\n      required\n      onChange={(e) => setUsername(e.target.value)}\n    />\n  </div>\n\n  <div>\n    <label htmlFor=\"password\">Password</label>\n\n    <input\n      type=\"password\"\n      placeholder=\"Password\"\n      name=\"password\"\n      required\n      onChange={(e) => setPassword(e.target.value)}\n    />\n  </div>\n\n  <div>\n    <button type=\"submit\">Log In</button>\n  </div>\n</form>\n```\n\nLANGUAGE: css\nCODE:\n```\n.login-form {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  justify-content: center;\n  align-items: center;\n}\n\n.login-form > div {\n  margin: 8px;\n}\n\n.login-form > div > label {\n  font-weight: bold;\n}\n\n.login-form > div > input {\n  flex-grow: 1;\n  box-sizing: border-box;\n  padding: 10px 6px;\n  background: transparent;\n  border: 1px solid #aaa;\n  width: 100%;\n  font-size: 1em;\n  margin-right: 16px;\n  margin-top: 4px;\n}\n\n.login-form > div > input:focus {\n  outline: 0;\n}\n\n.login-form > div > button {\n  background-color: #62807e;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset Token Expiration in JavaScript\nDESCRIPTION: Sets the expiration time for password reset tokens using the Accounts.config method. The expiration is set to 3 days by default but can be customized.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.config({ passwordResetTokenExpirationInDays: ... })\n```\n\n----------------------------------------\n\nTITLE: ES2015 Object Rest and Spread Properties\nDESCRIPTION: Demonstrates the use of rest and spread properties in object literals and destructuring assignments, features provided by the `ecmascript` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet { x, y, ...rest } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\ny; // 2\nrest; // { a: 3, b: 4 }\n\nlet n = { x, y, ...rest };\nn; // { x: 1, y: 2, a: 3, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: Async/Await with Promises\nDESCRIPTION: Modern async/await syntax usage with Promise-based APIs in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function sendTextMessage(user) {\n  const toNumber = await phoneLookup.findFromEmail(user.emails[0].address);\n  return await client.sendMessage({\n    to: toNumber,\n    from: '+14506667788',\n    body: 'Hello world!'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Oplog Configuration\nDESCRIPTION: Basic Redis Oplog configuration in settings.json file to enable the Redis-based pub/sub system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"redisOplog\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Oplog Configuration\nDESCRIPTION: JSON configuration for MongoDB Oplog collection filtering settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"mongo\": {\n      \"oplogExcludeCollections\": [\"products\", \"prices\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using the share object for cross-file variable sharing in CoffeeScript\nDESCRIPTION: An example of using the experimental 'share' object to share variables between CoffeeScript files within the same package. This feature allows data sharing between .coffee files without needing to declare variables in separate .js files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/coffeescript.md#2025-04-22_snippet_0\n\nLANGUAGE: coffeescript\nCODE:\n```\nshare.foo\n```\n\n----------------------------------------\n\nTITLE: Logging Objects with Special Keys\nDESCRIPTION: Example of logging an object with special keys 'message' and 'app' that get displayed prominently in the output.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/logging.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nLog.info({\n  message: \"warning\",\n  app: \"DESKTOP\",\n  error: { property1: \"foo\", property2: \"bar\", property3: { foo: \"bar\" } },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing from a Lazy-Loaded Package Module\nDESCRIPTION: Shows the syntax for importing a method from a package with lazy-loaded modules. The package name must be prefixed with 'meteor/'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport { exportedPackageMethod } from \"meteor/<package name>\";\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt in Meteor Project\nDESCRIPTION: Installs the bcrypt node module using meteor npm to avoid warnings about using a pure-Javascript implementation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install --save bcrypt\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Side Effects in Meteor\nDESCRIPTION: Shows how to import a module solely for its side effects without importing any specific exports. This ensures the module is evaluated before the importing module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// c.js\nimport './a';\nconsole.log('in c.js');\n```\n\n----------------------------------------\n\nTITLE: Implementing Meteor Methods for CRUD Operations\nDESCRIPTION: JavaScript code defining Meteor methods for creating, updating, removing, and finding customer records.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { CustomerCollection } from './collection';\n\nexport async function create(data) {\n  return CustomerCollection.insertAsync({ ...data });\n}\n\nexport async function update(_id, data) {\n  check(_id, String);\n  return CustomerCollection.updateAsync(_id, { ...data });\n}\n\nexport async function remove(_id) {\n  check(_id, String);\n  return CustomerCollection.removeAsync(_id);\n}\n\nexport async function findById(_id) {\n  check(_id, String);\n  return CustomerCollection.findOneAsync(_id);\n}\n\nMeteor.methods({\n  'Customer.create': create,\n  'Customer.update': update,\n  'Customer.remove': remove,\n  'Customer.find': findById\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependency in Meteor Tracker Autorun\nDESCRIPTION: An example showing how an autorun can have different dependencies each time it runs based on conditional logic, highlighting why proper invalidation handling is crucial.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar comp = Tracker.autorun(function () {\n  if (data.get(\"favoriteFood\") === \"banana\")\n    console.log(minutesAgo(someTime));\n  else\n    console.log(\"you should really give bananas a chance\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling New Connections in Meteor Server\nDESCRIPTION: Shows how to use Meteor.onConnection to handle new client connections on the server, including how to access connection information and unregister the callback.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n\nconst handle = Meteor.onConnection((connection) => {\n  console.log(connection);\n  //          ^^^^^^^^^^^\n  // {\n  //   id: String,\n  //   close: Function,\n  //   onClose: Function,\n  //   clientAddress: String,\n  //   httpHeaders: Object,\n  // }\n});\n\nhandle.stop(); // Unregister the callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Scripts in Meteor using BrowserPolicy\nDESCRIPTION: API functions for controlling whether inline JavaScript is allowed in your application, which can help mitigate cross-site scripting attacks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/browser-policy.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowInlineScripts()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowInlineScripts()\n```\n\n----------------------------------------\n\nTITLE: Restore Archived Documents with restoreAsync\nDESCRIPTION: Illustrates the use of the restoreAsync method to restore documents that have been archived.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.restoreAsync(/* your filter */)\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor without PATH modification\nDESCRIPTION: Installs Meteor globally without modifying the PATH environment variable. Uses the --ignore-meteor-setup-exec-path flag to prevent automatic PATH updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g meteor --ignore-meteor-setup-exec-path --foreground-script\n```\n\n----------------------------------------\n\nTITLE: Setting MAIL_URL Environment Variable in Meteor Apps\nDESCRIPTION: Configuration for email sending in Meteor applications by setting the MAIL_URL environment variable in application code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.MAIL_URL\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Accounts Instances in Meteor\nDESCRIPTION: Defines reusable AccountsClient and AccountsServer constructors to create multiple independent instances of the Accounts namespace.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_83\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccountsClient\nAccountsServer\n```\n\n----------------------------------------\n\nTITLE: Explicitly Soft Deleting Documents in Meteor\nDESCRIPTION: Demonstrates how to use the `softRemoveAsync` method to explicitly soft delete documents in a Meteor collection. This method sets the soft delete flag without permanently removing the documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/soft-delete.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.softRemoveAsync(/* your filter */)\n```\n\n----------------------------------------\n\nTITLE: Advanced Launch Screen Control in Meteor\nDESCRIPTION: Example of manually controlling when the launch screen is dismissed by using LaunchScreen.hold() and handle.release(). This allows waiting for specific templates or other UI elements to render.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/launch-screen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in a client-only javascript file\nvar handle = LaunchScreen.hold();\n\nTemplate.myUI.onRendered(function () {\n  handle.release();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Meteor Projects\nDESCRIPTION: Shows how to create a new Meteor project using the 'meteor create' command, including an example of specifying a project name.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create [options] app-name\n```\n\n----------------------------------------\n\nTITLE: Using require for Conditional Imports in Meteor\nDESCRIPTION: Example of using require() for conditional imports in a Meteor application. This demonstrates how to import client-only code within an if statement, which is not possible with import statements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (Meteor.isClient) {\n  require('./client-only-file.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Login Handler in Meteor\nDESCRIPTION: Example showing how to configure additional user lookup during external authentication. This allows existing users who used their Google email to sign in with Google authentication later without creating a new account.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts-multi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.setAdditionalFindUserOnExternalLogin(({serviceName, serviceData}) => {\n  if (serviceName === \"google\") {\n     // Note: Consider security implications. If someone other than the owner\n     // gains access to the account on the third-party service they could use\n     // the e-mail set there to access the account on your app.\n     // Most often this is not an issue, but as a developer you should be aware\n     // of how bad actors could play.\n    return Accounts.findUserByEmail(serviceData.email)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB TLS Connection with Certificate\nDESCRIPTION: Example of configuring MongoDB connection with TLS certificate using a relative path that Meteor converts to absolute path. The certificate file should be placed in the private folder of the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"mongo\": {\n      \"options\": {\n        \"tls\": true,\n        \"tlsCAFileAsset\": \"certificate.pem\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Publication for Customer Data\nDESCRIPTION: JavaScript code to create a Meteor publication that publishes all customer records.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { CustomerCollection } from './collection';\n\nMeteor.publish('allCustomers', function publishCustomers() {\n  return CustomerCollection.find({});\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Events with okgrow:analytics in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to track a custom event within a Meteor `ValidatedMethod` using the `okgrow:analytics` package. Inside the `run` function, it checks if the code is running on the client (`Meteor.isClient`) to avoid tracking server-to-server calls. If it's a client call, it uses `analytics.track()` to send an event named 'todos.updateText' along with relevant data (`todoId`, `newText`) to the configured analytics provider.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateText = new ValidatedMethod({\n  ...\n  run({ todoId, newText }) {\n    // We use `isClient` here because we only want to track\n    // attempted method calls from the client, not server to\n    // server method calls\n    if (Meteor.isClient) {\n      analytics.track('todos.updateText', { todoId, newText });\n    }\n\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks During Method Creation in Meteor-RPC\nDESCRIPTION: Demonstrates how to add custom hooks directly when creating a method with createModule. Shows implementing multiple hooks for before resolution, after resolution, and error handling in a single method definition.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { z } from \"zod\";\n\nconst server = createModule()\n  // Or you can add hooks when creating the method\n  .addMethod(\"bar\", z.any(), () => \"str\", {\n    hooks: {\n      onBeforeResolve: [\n        (raw, parsed) => {\n          console.log(\"before resolve\", raw, parsed);\n        },\n      ],\n      onAfterResolve: [\n        (raw, parsed, result) => {\n          console.log(\"after resolve\", raw, parsed, result);\n        },\n      ],\n      onErrorResolve: [\n        (err, raw, parsed) => {\n          console.log(\"on error\", err, raw, parsed);\n        },\n      ],\n    },\n  })\n  .build();\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Disabling Module Loading for Specific Architectures in Meteor\nDESCRIPTION: Shows how to disable eager loading of modules on a specific architecture by setting the mainModule value to false. This allows selectively implementing modular structure on only certain parts of an application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": false,\n      \"server\": \"server/main.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Literal String 'meteor' with SHA256 in Meteor (JavaScript)\nDESCRIPTION: Shows example invocation of the SHA256 function on the literal string 'meteor' within the Meteor JavaScript environment. No configuration or special dependencies are needed besides access to the SHA256 function. The expected input is any string; in this example, 'meteor' is used. The output is a fixed 64-character hexadecimal hash string. This demonstrates the expected result for a given fixed input.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/sha/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSHA256('meteor')\n```\n\n----------------------------------------\n\nTITLE: Exporting Values from a Module\nDESCRIPTION: Shows how to export values from a module (b.js) so they can be imported by other modules. The exported variable is available for import in other files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n// b.js\nexport var bThing = 'a thing defined in b.js';\nconsole.log(bThing, 'in b.js');\n```\n\n----------------------------------------\n\nTITLE: Serving Static Landing Page with WebApp in Meteor\nDESCRIPTION: This JavaScript snippet demonstrates how to serve a static HTML landing page using WebApp in Meteor. It reads the HTML file from the private folder, handles ETag for caching, and serves the content with proper headers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/webapp.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* global WebApp Assets */\nimport crypto from \"crypto\";\nimport express from \"express\";\n\nconst router = express.Router();\n\nrouter.get(\"/\", async function (req, res, next) {\n  const buf = await Assets.getTextAsync(\"index.html\");\n\n  if (buf.length > 0) {\n    const eTag = crypto.createHash(\"md5\").update(buf).digest(\"hex\");\n\n    if (req.headers[\"if-none-match\"] === eTag) {\n      res.writeHead(304, \"Not Modified\");\n      return res.end();\n    }\n\n    res.writeHead(200, {\n      ETag: eTag,\n      \"Content-Type\": \"text/html\",\n    });\n\n    return res.end(buf);\n  }\n\n  return res.end(\"<html><body>Index page not found!</body></html>\");\n});\n\nWebApp.handlers.use(router);\n```\n\n----------------------------------------\n\nTITLE: Interception Hook for Email Sending in Meteor\nDESCRIPTION: Defines an interception hook using Email.hookSend to control email sending logic. It can stop emails from being sent based on custom conditions, e.g., filtering recipient addresses. This allows conditional processing and is useful for operating with unmodifiable email code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/email.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Email } from 'meteor/email'\n\nEmail.hookSend(({to}) => {\n  if (to === 'ceo@company.com') {\n    console.log(`Let's not send email to the CEO`);\n    return false;\n  }\n  return true;\n})\n```\n\n----------------------------------------\n\nTITLE: Solving for a Fully Constrained Magic Square with Logic Solver in JavaScript\nDESCRIPTION: Solves for a magic square after adding all required constraints, including uniqueness. Evaluates each location in the produced solution showing a valid digit arrangement. Inputs: all sum, range, and uniqueness constraints; Outputs: a proper 3x3 magic square.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sol5 = solver.solve();\n_.map(locations, function (loc) { return sol5.evaluate(loc); })\n// => [6, 7, 2,\n//     1, 5, 9,\n//     8, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Simplifying Vue SSR Setup with akryum:vue-ssr (JavaScript)\nDESCRIPTION: Demonstrates using the `akryum:vue-ssr` package to streamline Vue SSR configuration in Meteor. It defines a `VueSSR.createApp` function that initializes and returns the core Vue application instance, abstracting away the manual rendering setup shown previously. Assumes `akryum:vue-ssr` is installed and an `app.js` file exports a `createApp` function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VueSSR } from 'meteor/akryum:vue-ssr';\nimport createApp from './app';\n\nVueSSR.createApp = function () {\n  // Initialize the Vue app instance and return the app instance\n  const { app } = createApp(); \n  return { app };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Random Secrets in Meteor\nDESCRIPTION: Generates a random string of printable characters with 6 bits of entropy per character. Default length is 43 characters (256 bits of entropy). Intended for machine-consumed security-critical secrets.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/random/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.secret([n])\n```\n\n----------------------------------------\n\nTITLE: Customizing Account Email Templates in Meteor\nDESCRIPTION: Example of customizing the email templates used for account-related notifications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nAccounts.emailTemplates.siteName = \"Meteor Guide Todos Example\";\nAccounts.emailTemplates.from = \"Meteor Todos Accounts <accounts@example.com>\";\n\nAccounts.emailTemplates.resetPassword = {\n  subject(user) {\n\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Settings for Galaxy Deployment\nDESCRIPTION: JSON configuration file for setting MongoDB URL in a Galaxy deployment. This file is placed in a private folder to ensure it's not published to the client side.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/8.deploying.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"galaxy.meteor.com\": {\n    \"env\": {\n      \"MONGO_URL\": \"Your MongoDB URL\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking npm Peer Dependencies\nDESCRIPTION: Shows how to verify npm peer dependencies using check-npm-versions package, with example for React dependency checking.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n\ncheckNpmVersions({\n  'react': '0.14.x'\n}, 'my:awesome-package');\n\n// If you are using the dependency in the same file, you'll need to use require, otherwise\n// you can continue to `import` in another file.\nconst React = require('react');\n```\n\n----------------------------------------\n\nTITLE: Removing Packages - Meteor CLI - Bash\nDESCRIPTION: Shows how to remove one or more packages from a Meteor project via the CLI. This command modifies project dependencies and can be used in conjunction with 'meteor add' for full version constraint management. No additional dependencies beyond Meteor CLI. Parameters: list of package names. Outputs confirmation and updates dependency list. Removing a package does not affect transitive dependencies unless needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove [package1] [package2] ...\n```\n\n----------------------------------------\n\nTITLE: Publishing Item Counts with Meteor in JavaScript\nDESCRIPTION: The snippet demonstrates how to publish the total number of items in a collection using the tmeasday:publish-counts package. It sets up a publication that validates the 'listId' parameter and uses the Counts.publish function to publish the count of Todos items associated with the given listId. You must have the tmeasday:publish-counts package and SimpleSchema installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.publish('Lists.todoCount', function({ listId }) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  Counts.publish(this, `Lists.todoCount.${listId}`, Todos.find({listId}));\n});\n```\n\n----------------------------------------\n\nTITLE: Meteor Run Command\nDESCRIPTION: Command options for running a Meteor project in development mode, including port configuration, mobile device targeting, and production simulation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run [target..] [options]\n  --port, -p\n  --open, -o\n  --inspect[-brk][=<port>]\n  --mobile-server\n  --production\n  --settings, -s\n  --release\n```\n\n----------------------------------------\n\nTITLE: TypeScript Publication Definition\nDESCRIPTION: Creates a typed Meteor publication for AnotherCustomer collection\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { AnotherCustomerCollection } from './collection';\n\nMeteor.publish('allAnotherCustomers', function publishAnotherCustomers() {\n  return AnotherCustomerCollection.find({});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Collection for Time Data\nDESCRIPTION: Definition of a Meteor Collection named 'Time' to store time data that will be used in the Vue application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nTime = new Mongo.Collection(\"time\");\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document into a Meteor Collection in JavaScript\nDESCRIPTION: Illustrates inserting a document into a Meteor collection (`Widgets`). It emphasizes the convention of using camelCase for field names within the document, consistent with JavaScript variable naming standards.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Inserting a document with camelCased field names\nWidgets.insert({\n  myFieldName: 'Hello, world!',\n  otherFieldName: 'Goodbye.'\n});\n```\n\n----------------------------------------\n\nTITLE: Sink Class Interface Definition in JavaScript\nDESCRIPTION: Defines the interface for ClientSink and ServerSink classes with methods for manipulating HTML content and handling HTTP responses.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/server-render.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Sink {\n  // Appends content to the <head>.\n  appendToHead(content)\n\n  // Appends content to the <body>.\n  appendToBody(content)\n\n  // Appends content to the identified element.\n  appendToElementById(id, content)\n\n  // Replaces the content of the identified element.\n  renderIntoElementById(id, content)\n\n  // Redirects request to new location.\n  redirect(location, code)\n\n\n  // server only methods\n\n  // sets the status code of the response.\n  setStatusCode(code)\n\n  // sets a header of the response.\n  setHeader(key, value)\n\n  // gets request headers\n  getHeaders()\n\n  // gets request cookies\n  getCookies()\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Dual Parameter Naming in Meteor Event Map (JavaScript)\nDESCRIPTION: This example demonstrates a compliant event handler using both standard parameter names: 'event' for the event object and 'templateInstance' for the template instance object, as expected by the default `eventmap-params` rule.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nTemplate.foo.events({\n  'submit form': function (event, templateInstance) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Meteor Username (Bash)\nDESCRIPTION: Demonstrates the `meteor whoami` command. When executed, it outputs the username of the currently logged-in Meteor developer account, confirming the active session.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmeteor whoami\n```\n\n----------------------------------------\n\nTITLE: Installing Authentication Packages in Meteor\nDESCRIPTION: Commands to add various authentication packages to a Meteor project including password, Facebook, Google, GitHub, Twitter, Meetup and Meteor Developer accounts.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add accounts-password\nmeteor add accounts-facebook\nmeteor add accounts-google\nmeteor add accounts-github\nmeteor add accounts-twitter\nmeteor add accounts-meetup\nmeteor add accounts-meteor-developer\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods using RubyGems\nDESCRIPTION: Installs the CocoaPods dependency manager for Swift and Objective-C projects using RubyGems. This is mentioned as potentially required for Cordova iOS 4.3.0+ due to dependencies in certain plugins like the PhoneGap Push Plugin. Requires administrator privileges (`sudo`) and Ruby environment with Gems.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Renaming Exports and Imports in ES2015 JavaScript\nDESCRIPTION: Shows how to rename exports and imports using the 'as' keyword in ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nexport { g as x };\ng(); // Same as calling `y()` in importer.js\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport { x as y } from './exporter';\ny(); // Same as calling `g()` in exporter.js\n```\n\n----------------------------------------\n\nTITLE: Optimized Compiler Plugin Implementation (JavaScript)\nDESCRIPTION: New implementation of BabelCompiler#processFilesForTarget method in Meteor compiler plugins, supporting lazy compilation for improved performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nprocessFilesForTarget(inputFiles) {\n  inputFiles.forEach(inputFile => {\n    if (inputFile.supportsLazyCompilation) {\n      inputFile.addJavaScript({\n        path: inputFile.getPathInPackage(),\n        hash: inputFile.getSourceHash(),\n      }, function () {\n        return this.processOneFileForTarget(inputFile);\n      });\n    } else {\n      var toBeAdded = this.processOneFileForTarget(inputFile);\n      if (toBeAdded) {\n        inputFile.addJavaScript(toBeAdded);\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Readiness in Meteor\nDESCRIPTION: Demonstrates how to check if a subscription is ready using the subscription handle's ready() method within a Tracker.autorun.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst handle = Meteor.subscribe('lists.public');\nTracker.autorun(() => {\n  const isReady = handle.ready();\n  console.log(`Handle is ${isReady ? 'ready' : 'not ready'}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific User Profile Fields with Meteor.user (JS)\nDESCRIPTION: Demonstrates retrieving only the `profile.name` field for the currently logged-in user using `Meteor.user` with the `fields` option on the client. This approach minimizes database load on the server and reduces over-reactivity on the client by fetching only necessary data. Requires the `meteor/meteor` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nconst userName = Meteor.user({ fields: { \"profile.name\": 1 } }).profile.name;\n```\n\n----------------------------------------\n\nTITLE: Client-Side React Hydration Implementation\nDESCRIPTION: Example of client-side React hydration using async/await with dynamic imports to hydrate the server-rendered content.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/server-render/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { onPageLoad } from \"meteor/server-render\";\n\nonPageLoad(async sink => {\n  const App = (await import(\"/imports/Client.js\")).default;\n  ReactDOM.hydrate(\n    <App />,\n    document.getElementById(\"app\")\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Batching Example\nDESCRIPTION: Example demonstrating how multiple import() calls within the same event loop tick are automatically batched into a single HTTP request to improve performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nconst [\n  React,\n  ReactDOM\n] = await Promise.all([\n  import(\"react\"),\n  import(\"react-dom\")\n]);\n```\n\n----------------------------------------\n\nTITLE: ES2015 Spread Operator Usage\nDESCRIPTION: Demonstrates the use of the spread operator in function calls, array literals, and object literals, a feature enabled by the `ecmascript` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nadd(1, ...[2, 3, 4], 5); // 15\nnew Node('name', ...children);\n[1, ...[2, 3, 4], 5]; // [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Generating Random Secrets in Meteor\nDESCRIPTION: Random.secret() generates cryptographically strong random strings suitable for security-sensitive contexts like access tokens or encryption keys.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/random.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.secret()\n```\n\n----------------------------------------\n\nTITLE: Inspecting True Bit Variables and Bitwise Representation of Integers with Logic Solver in JavaScript\nDESCRIPTION: Demonstrates how to extract the underlying boolean variables contributing to a particular integer encoding in the solution, using sol5.getTrueVars and evaluating individual bits. Reveals correspondence between integer digits and sets of boolean literals used by Logic Solver internally.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nsol5.getTrueVars()\n// => [\"A$1\", \"A$2\", \"B$0\", \"B$1\", \"B$2\", \"C$1\", \"D$0\", \"E$0\", \"E$2\",\n//     \"F$0\", \"F$3\", \"G$3\", \"H$0\", \"H$1\", \"I$2\"]\n\n_.map(A.bits, function (v) { return sol5.evaluate(v); })\n// => [false, true, true, false]\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collection Query Example\nDESCRIPTION: Example of using RegExp objects in MongoDB collection queries on the client side\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_134\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyCollection.remove({foo: /bar/})\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset Token Expiration in Meteor\nDESCRIPTION: Sets the expiration time for password reset tokens in Meteor using the Accounts.config method. The expiration is set to 3 days by default but can be customized.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.config({ passwordResetTokenExpirationInDays: ... })\n```\n\n----------------------------------------\n\nTITLE: Configuring App Metadata in Meteor (JavaScript)\nDESCRIPTION: Defines basic application metadata like ID, name, and version within the `mobile-config.js` file for a Meteor mobile app. This information is used by Meteor to generate Cordova's `config.xml` during the build process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nApp.info({\n  id: 'com.meteor.examples.todos',\n  name: 'Todos',\n  version: \"0.0.1\"\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Code on the Server Only in Jam Methods\nDESCRIPTION: Demonstrates how to ensure certain parts of a Jam method execute only on the server for security or performance reasons. Wrap server-side code in 'if (Meteor.isServer)' blocks, or configure the entire method for server-only execution using 'serverOnly: true'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  async run(args) {\n    // rest of your function\n    // code running on both client and server\n    if (Meteor.isServer) {\n      // code running on the server only\n      import { secretCode } from '/server/secretCode'; // since it's in a /server folder the code will not be shipped to the client\n      // do something with secretCode\n    }\n\n    // code running on both client and server\n    return Todos.insertAsync(todo)\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  serverOnly: true,\n  async run(args) {\n    // all code here will execute only on the server\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Unencrypted Twitter Tokens in Meteor\nDESCRIPTION: Finds and encrypts existing unencrypted Twitter access tokens in user documents. It uses OAuthEncryption.seal to encrypt sensitive fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/oauth-encryption.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cursor = Meteor.users.find({\n  $and: [\n    { 'services.twitter.accessToken': { $exists: true } },\n    { 'services.twitter.accessToken.algorithm': { $exists: false } }\n  ]\n});\n\ncursor.forEach((userDoc) => {\n  const set = {};\n\n  ['accessToken', 'accessTokenSecret', 'refreshToken'].forEach((field) => {\n    const plaintext = userDoc.services.twitter[field];\n\n    if (!_.isString(plaintext)) {\n      return;\n    }\n\n    set[`services.twitter.${field}`] = OAuthEncryption.seal(\n      plaintext,\n      userDoc._id\n    );\n  });\n\n  Meteor.users.update(userDoc._id, { $set: set });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Template Path with Meteor Generate\nDESCRIPTION: Command to generate a new 'feed' component using a custom template path, allowing developers to use their own scaffolding templates instead of the default ones.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmeteor generate feed --templatePath=/scaffolds-ts\n```\n\n----------------------------------------\n\nTITLE: Customizing Websocket Compression Settings in Meteor\nDESCRIPTION: Demonstrates how to set custom compression parameters using a JSON string in the environment variable. This example sets a higher compression threshold and a low compression level.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/performance/websocket-compression.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example with custom settings\nSERVER_WEBSOCKET_COMPRESSION='{\"threshold\": 2048, \"level\": 1}'\n```\n\n----------------------------------------\n\nTITLE: Verifying Websocket Compression Status in Meteor\nDESCRIPTION: JavaScript code snippet for checking whether websocket compression is enabled through the Meteor shell. Returns an empty array if disabled or an array with an object if enabled.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/performance/websocket-compression.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.server.stream_server.server.options.faye_server_options.extensions\n```\n\n----------------------------------------\n\nTITLE: Customizing Reset Password URLs in Meteor\nDESCRIPTION: Configuration to customize the reset password URL format used in email notifications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nAccounts.urls.resetPassword = (token) => {\n  return Meteor.absoluteUrl(`reset-password/${token}`);\n};\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Replacement in JavaScript\nDESCRIPTION: Example of replacing an entire document with a new one using update() without $-operators. This completely replaces the existing document rather than modifying specific fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Find the document with ID '123' and completely replace it.\nUsers.update({ _id: '123' }, { name: 'Alice', friends: ['Bob'] });\n```\n\n----------------------------------------\n\nTITLE: Registering a Minifier Plugin in Meteor\nDESCRIPTION: Demonstrates how to register a minifier plugin for JavaScript files. The minifier class implements the processFilesForBundle method to minify files in production mode while preserving them in development mode.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/packagejs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlugin.registerMinifier({\n  extensions: ['js']\n}, () => new UglifyJsMinifier);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass UglifyJsMinifier {\n  processFilesForBundle(files, options) {\n    const { minifyMode } = options;\n\n    if (minifyMode === 'development') {\n      // Don't minify in development.\n      file.forEach((file) => {\n        file.addJavaScript({\n          data: file.getContentsAsBuffer(),\n          sourceMap: file.getSourceMap(),\n          path: file.getPathInBundle()\n        });\n      });\n\n      return;\n    }\n\n    // Minify in production.\n    files.forEach((file) => {\n      file.addJavaScript({\n        data: uglifyjs.minify(file.getContentsAsBuffer()),\n        path: file.getPathInBundle()\n      });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Runtime Configuration Hook in Meteor WebApp\nDESCRIPTION: This snippet demonstrates how to use WebApp.addUpdatedNotifyHook to get notifications when the runtime configuration is updated for each architecture. It compares the new configuration with a cached version and performs actions based on changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/webapp.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst autoupdateCache;\n// Get a notification when the runtime configuration is updated\n// for each arch\nWebApp.addUpdatedNotifyHook(({arch, manifest, runtimeConfig}) => {\n  // Example, see if runtimeConfig.autoupdate has changed and if so\n  // do something\n  if(!_.isEqual(autoupdateCache, runtimeConfig.autoupdate)) {\n    autoupdateCache = runtimeConfig.autoupdate;\n    // do something...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Reactive Template with Session Data\nDESCRIPTION: Example of using Session in a Meteor template with both HTML and JavaScript components.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/session.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- main.html -->\n<template name=\"main\">\n  <p>We've always been at war with {{theEnemy}}.</p>\n</template>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nTemplate.main.helpers({\n  theEnemy() {\n    return Session.get('enemy');\n  }\n});\n\nSession.set('enemy', 'Eastasia');\n// Page will say \"We've always been at war with Eastasia\"\n\nSession.set('enemy', 'Eurasia');\n// Page will change to say \"We've always been at war with Eurasia\"\n```\n\n----------------------------------------\n\nTITLE: Combining Default and Named Exports in ES2015 JavaScript\nDESCRIPTION: Shows how to combine default and named exports in a single import statement using ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport Value, { a, F } from './exporter';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport { default as Value, a, F } from './exporter';\n```\n\n----------------------------------------\n\nTITLE: Module Dependency Example with Explicit Imports\nDESCRIPTION: Example of how to handle file dependencies using ES modules. This shows a.js importing a value from b.js, making the load order explicit regardless of alphabetical file loading.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n// a.js\nimport { bThing } from './b';\nconsole.log(bThing, 'in a.js');\n```\n\n----------------------------------------\n\nTITLE: Tracking Autoupdate Subscription Readiness in Meteor\nDESCRIPTION: This JavaScript code uses Tracker.autorun to reactively log the ready status of the autoupdate subscription, which can help identify when the client is prepared to receive updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst hcpSub = _.chain(Meteor)\n  .get('default_connection._subscriptions', {})\n  .toPairs()\n  .map(1)\n  .find({ name: 'meteor_autoupdate_clientVersions' })\n  .value(); // no .pick() this time; return whole subscription object\n\nTracker.autorun(() => {\n  hcpSub.readyDeps.depend(); // Rerun when something changes in the subscription\n  console.log('hcpSub.ready', hcpSub.ready);\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring Magic Square Row, Column, and Diagonal Sums with Logic Solver in JavaScript\nDESCRIPTION: Expresses the constraints that every row, column, and diagonal in the magic square must sum to 15. This is achieved by calling solver.require with Logic.equalBits on all relevant triplets. Prerequisites: a Logic.Solver instance, a defined list of 4-bit variables and the 'fifteen' bits. Input: groups of three variables; Output: constraints added to the solver. Implicitly, runs for all line groupings relevant to magic squares.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar solver = new Logic.Solver();\n\n_.each([[A,B,C], [D,E,F], [G,H,I], [A,D,G], [B,E,H], [C,F,I],\n        [A,E,I], [G,E,C]],\n       function (terms) {\n         solver.require(Logic.equalBits(Logic.sum(terms), fifteen));\n       });\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Meteor 3 Applications\nDESCRIPTION: The recommended approach for defining global variables in Meteor 3 applications. This uses the 'global' object to properly define globals in a way that's compatible with strict mode.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/global-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.GlobalVar = { ... };\n```\n\n----------------------------------------\n\nTITLE: MongoDB Cursor Count Workaround\nDESCRIPTION: Demonstration of how to get both limited results and total count in MongoDB 5.0 by creating separate cursors with and without limits.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.6-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cursorWithLimit = collection.find({}, { limit: 25 });\nconst cursorWithNoLimit = collection.find({});\n// cursorWithLimit.fetch() => returns 25 documents\n// cursorWithNoLimit.count() => returns 50\n```\n\n----------------------------------------\n\nTITLE: ES2015 Default Parameters and Rest Syntax\nDESCRIPTION: Illustrates the use of default parameter values and rest parameters in function definitions, features provided by the `ecmascript` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(a = 0, ...rest) {\n  rest.forEach(n => a += n);\n  return a;\n}\n\nadd(); // 0\nadd(1, 2, 3); // 6\n```\n\n----------------------------------------\n\nTITLE: Specifying Cordova plugin dependencies in Meteor package\nDESCRIPTION: JavaScript code to declare Cordova plugin dependencies in a Meteor package. This ensures the required Cordova plugins are installed when the Meteor package is added to a project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nCordova.depends({\n    'cordova-plugin-camera': '1.2.0'\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Atmosphere Package Exports in Meteor\nDESCRIPTION: JavaScript code demonstrating how to import specific exports from an Atmosphere package using ES2015 import syntax with the 'meteor/' prefix. This example imports the Mongo symbol from Meteor's mongo package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-atmosphere-packages.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Mongo } from \"meteor/mongo\";\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools and Accepting License - Shell\nDESCRIPTION: Installs the required Xcode command-line developer tools and accepts the Xcode license agreement on macOS for iOS builds. This is mandatory prior to building or running Cordova iOS apps via Meteor and Xcode.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo xcodebuild -license accept\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Dependencies for Meteor\nDESCRIPTION: Command to install required npm peer dependencies for PostCSS integration in Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/standard-minifier-css.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install -D postcss postcss-load-config\n```\n\n----------------------------------------\n\nTITLE: Defining Publication Directly on Meteor | TypeScript\nDESCRIPTION: Implements the standard Meteor.publish mechanism for 'chatRooms', returning a Mongo cursor. This traditional approach does not provide compile-time type checks or argument validation by default. Used as a contrast to the meteor-rpc publication structure. Depends on meteor/meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\nimport { ChatCollection } from \"/imports/api/chat\";\n\nMeteor.publish(\"chatRooms\", function () {\n  return ChatCollection.find();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Meteor Collection in JavaScript\nDESCRIPTION: Creates a new Mongo Collection for the Customer entity in JavaScript\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mongo } from 'meteor/mongo';\n\nexport const CustomerCollection = new Mongo.Collection('customer');\n```\n\n----------------------------------------\n\nTITLE: Using Promises with Tinytest.addAsync\nDESCRIPTION: Example of using async/await with Tinytest.addAsync, leveraging the new support for Promise-returning test functions instead of using callback patterns.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nTinytest.addAsync(\"some async stuff\", async function (test) {\n  test.equal(shouldReturnFoo(), \"foo\");\n  const bar = await shouldReturnBarAsync();\n  test.equal(bar, \"bar\");\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Field Specifiers\nDESCRIPTION: Examples of including and excluding specific fields in query results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.find({}, { fields: { password: 0, hash: 0 } });\n\nUsers.find({}, { fields: { firstname: 1, lastname: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Implementing Temperature Conversion Function in JavaScript\nDESCRIPTION: Basic JavaScript function that converts temperature from Celsius to Fahrenheit, demonstrating a simple use case for reactive programming.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tracker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar currentTemperatureFahrenheit = function () {\n  return currentTemperatureCelsius() * 9/5 + 32;\n};\n```\n\n----------------------------------------\n\nTITLE: Serializing Date and Binary in EJSON\nDESCRIPTION: Demonstrates how EJSON serializes an object containing a date and a binary buffer. This example shows the JSON-compatible format used by EJSON for extended types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/ejson.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"d\": { \"$date\": 1358205756553 },\n  \"b\": { \"$binary\": \"c3VyZS4=\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vue-Meteor-Tracker Plugin\nDESCRIPTION: Updated client main.js that imports and configures the Vue-Meteor-Tracker plugin to enable Meteor reactivity in Vue components.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport VueMeteorTracker from 'vue-meteor-tracker'; // import the integration package!\nimport App from './App.vue';\nimport './main.html';\n\nVue.use(VueMeteorTracker);                         // Add the plugin to Vue!\n\nMeteor.startup(() => {\n  new Vue({\n    el: '#app',\n    ...App,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Misleading Code Indentation in JavaScript\nDESCRIPTION: This snippet shows how inconsistent indentation can lead to misleading code structure, where it appears that both statements are inside the conditional but only the first one actually is.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This code is misleading because it looks like both statements\n// are inside the conditional.\nif (condition)\n  firstStatement();\n  secondStatement();\n```\n\n----------------------------------------\n\nTITLE: Importing Less Styles Relative to Package/App Root in Meteor\nDESCRIPTION: Less code example demonstrating how to import styles relative to the current package or application root in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/less/README.md#2025-04-22_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n@import \"/path/to/style.import.less\";\n```\n\n----------------------------------------\n\nTITLE: Disabling Collection Transformation in Validators\nDESCRIPTION: Option to disable transformation in collection validators by passing transform: null to the allow() method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.allow({ transform: null })\n```\n\n----------------------------------------\n\nTITLE: Callback-based Method Call in Meteor 2\nDESCRIPTION: Shows the previous callback-based approach for calling Meteor methods in Meteor 2. This pattern uses nested callbacks to handle responses and errors from method calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\n\nconst someFunction = () => { // [!code ++]\n  Meteor.call('myMethod', 'arg1', 'arg2', (error, result) => { // [!code ++]\n    if (error) {\n      console.error('Method error:', error);\n    } else {\n      console.log('Method result:', result);\n      // do something with the result\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Server-Only Meteor Method Using Function-Style Syntax\nDESCRIPTION: This snippet demonstrates how to define a server-only Meteor method using the function-style syntax with the server() wrapper. It combines the simplified method definition with server-side execution.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport const setDone = server(async ({ _id, done }) => {\n  await checkOwnership({ _id });\n  return Todos.updateAsync({ _id }, { $set: { done } });\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Advanced Field Projection with Nested Fields in JavaScript\nDESCRIPTION: Example demonstrating how to use field specifiers with nested documents and arrays. The query retrieves only the 'name' field from each object in the 'alterEgos' array.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.insert({\n  alterEgos: [\n    { name: 'Kira', alliance: 'murderer' },\n    { name: 'L', alliance: 'police' },\n  ],\n  name: 'Yagami Light',\n});\n\nUsers.findOne({}, { fields: { 'alterEgos.name': 1, _id: 0 } });\n// Returns { alterEgos: [{ name: 'Kira' }, { name: 'L' }] }\n```\n\n----------------------------------------\n\nTITLE: Adding a Submodule to Main Module | meteor-rpc | TypeScript\nDESCRIPTION: Shows how to add a prebuilt submodule to a main meteor-rpc server module for hierarchical method organization. After adding chatModule and other methods, the build method is called. Ensures methods like server.chat.createChat can be correctly namespaced and autocompleted. Dependencies: previously exported chatModule, meteor-rpc, zod.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { chatModule } from \"./server/chat\";\n\nconst server = createModule()\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .addSubmodule(chatModule)\n  .build();\n\nserver.chat; // <-- this is the namespace for the chat module\nserver.chat.createChat(); // <-- this is the method from the chat module and it gets autocompleted\n```\n\n----------------------------------------\n\nTITLE: Using Blaze Template Login Buttons\nDESCRIPTION: Shows the updated syntax for including login buttons in Blaze templates. Previous versions used Handlebars syntax {{loginButtons}}, but Blaze requires the inclusion syntax with angle brackets.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_102\n\nLANGUAGE: html\nCODE:\n```\n{{> loginButtons}}\n```\n\n----------------------------------------\n\nTITLE: Associating a Basic Error Message to DDPRateLimiter Rule (JavaScript)\nDESCRIPTION: This simpler example shows how to attach a basic string error message to an existing DDPRateLimiter rule using its ID. It serves as a demonstration of a straightforward method to enhance user interaction by providing a static error feedback message when rate limits are exceeded.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/DDPRateLimiter.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ruleId = DDPRateLimiter.addRule(setupGoogleAuthenticatorRule, 1, 60000);\nDDPRateLimiter.setErrorMessageOnRule(ruleId, 'Example as a single string error message');\n```\n\n----------------------------------------\n\nTITLE: Setting API Versions for Package Compatibility in Meteor 2.3\nDESCRIPTION: Examples of how to update package dependencies to be compatible with accounts packages that had major version bumps in Meteor 2.3. Shows different approaches to version specification for cross-version compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napi.versionsFrom('2.3')\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.versionsFrom(['1.12', '2.3'])\n```\n\nLANGUAGE: javascript\nCODE:\n```\napi.use('accounts-base@1.0.1 || 2.0.0')\n```\n\n----------------------------------------\n\nTITLE: Isolating Reactive Sections in Templates\nDESCRIPTION: New isolate block helper allows parts of a template to be independently reactive.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_142\n\nLANGUAGE: HTML\nCODE:\n```\n{{#isolate}}\n```\n\n----------------------------------------\n\nTITLE: Installing Local npm Package from Imports Directory in Meteor\nDESCRIPTION: This shell command demonstrates how to install an npm package from the local imports directory, which enables Meteor to compile the package code with your application's build settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install imports/the-package\n```\n\n----------------------------------------\n\nTITLE: New Handlebars Sub-expression Syntax in Blaze Templates\nDESCRIPTION: Example of the new Handlebars sub-expression syntax supported in Meteor 1.2. This allows nesting helpers within other helpers for more complex template operations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_86\n\nLANGUAGE: handlebars\nCODE:\n```\n{{helper (anotherHelper arg1 arg2)}}\n```\n\n----------------------------------------\n\nTITLE: Importing fetch from Meteor package\nDESCRIPTION: Shows how to import the fetch function from the Meteor fetch package. This is an alternative to using fetch as a global function in applications or packages that depend on the Meteor fetch package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetch } from \"meteor/fetch\"\n```\n\n----------------------------------------\n\nTITLE: Using EJSON.stringify with Options in Meteor\nDESCRIPTION: Example of using EJSON.stringify with configuration options. The canonical option causes object keys to be stringified in sorted order, while indent allows formatting control over the stringification.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_132\n\nLANGUAGE: JavaScript\nCODE:\n```\nEJSON.stringify(obj, { canonical: true, indent: \"  \" })\n```\n\n----------------------------------------\n\nTITLE: Installing React-Meteor-Data Package\nDESCRIPTION: Command to add the react-meteor-data package for integrating Meteor's reactivity system with React\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add react-meteor-data\n```\n\n----------------------------------------\n\nTITLE: Simple Autorun Example with Reactive Data in Meteor\nDESCRIPTION: A simple example demonstrating how a Tracker.autorun establishes and re-establishes dependencies with reactive data sources when it runs and reruns.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar comp = Tracker.autorun(function () {\n  console.log(data.get(\"favoriteFood\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Unified Topology\nDESCRIPTION: Example of setting MongoDB connection options in Meteor settings to override the default useUnifiedTopology value\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.settings?.packages?.mongo?.options\n```\n\n----------------------------------------\n\nTITLE: Setting Network Binding Configuration\nDESCRIPTION: Environment variables for configuring network binding and port settings\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/environment-variables.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nBIND_IP=192.168.0.2\nPORT=3030\n```\n\n----------------------------------------\n\nTITLE: MongoDB Sort Specifier Syntax in JavaScript\nDESCRIPTION: Examples of different syntax options for specifying sort order in MongoDB queries. These can be used with find() and other cursor methods to control the order of returned documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// All of these do the same thing (sort in ascending order by key `a`, breaking\n// ties in descending order of key `b`).\n[['a', 'asc'], ['b', 'desc']]\n['a', ['b', 'desc']]\n{ a: 1, b: -1 }\n\n// Sorted by `createdAt` descending.\nUsers.find({}, { sort: { createdAt: -1 } });\n\n// Sorted by `createdAt` descending and by `name` ascending.\nUsers.find({}, { sort: [['createdAt', 'desc'], ['name', 'asc']] });\n```\n\n----------------------------------------\n\nTITLE: Meteor callAsync Method Usage Examples\nDESCRIPTION: Examples demonstrating proper and improper usage of callAsync with method stubs, including async/sync method combinations and timing considerations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.8-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This is ok, because methodWithoutStubAsync and methodWithoutStub \n// does not have a stub inside them:\nMeteor.callAsync('methodWithoutStubAsync', { id }).then(result => {\n   // do something\n});\n\nMeteor.call('methodWithoutStub', { id }, (error, result) => {\n   // do something\n})\n\n// This is ok as well, because even though removeByIDAsync has a stub,\n// methodWithoutStub does not have one, so both methods can run \n// at the same time:\nMeteor.callAsync('removeByIDAsync', { id }).then(result => {\n   // do something\n});\nMeteor.call('methodWithoutStub', { id }, (error, result) => {\n   // do something\n})\n\n// This is also ok, because even though removeByID has a stub\n// (SomeCollection.remove({ _id: id })), it is a sync method, \n// so by the time removeByIDAsync runs, no stub will be running:\n\nMeteor.call('removeByID', { id }, (error, result) => {\n   // do something\n});\nMeteor.callAsync('removeByIDAsync', { id }).then(result => {\n   // do something\n});\n\n\n// But, this is NOT ok, because you would have 2 stubs running at the same time:\nMeteor.callAsync('removeByIDAsync', { id }).then(result => {\n   // do something\n});\nMeteor.call('removeByID', { id }, (error, result) => {\n  // do something\n});\n\n// instead, do it like this:\n\nawait Meteor.callAsync('removeByIDAsync', { id });\nMeteor.call('removeByID', { id }, (error, result) => {\n   // do something\n});\n\n// or this\n\nMeteor.callAsync('removeByIDAsync', { id }).then(result => {\n   // do something\n   Meteor.call('removeByID', { id }, (error, result) => {\n      // do something\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Integration Test Setup\nDESCRIPTION: Setup for integration testing of a Meteor component using stub collections and helpers\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport { Random } from 'meteor/random';\nimport chai from 'chai';\nimport StubCollections from 'meteor/hwillson:stub-collections';\nimport { Template } from 'meteor/templating';\nimport $ from 'jquery';\nimport { FlowRouter } from 'meteor/ostrio:flow-router-extra';\nimport sinon from 'sinon';\n\nimport { withRenderedTemplate } from '../../test-helpers.js';\nimport '../lists-show-page.js';\n\nimport { Todos } from '../../../api/todos/todos.js';\nimport { Lists } from '../../../api/lists/lists.js';\n\ndescribe('Lists_show_page', function () {\n  const listId = Random.id();\n\n  beforeEach(function () {\n    StubCollections.stub([Todos, Lists]);\n    Template.registerHelper('_', key => key);\n    sinon.stub(FlowRouter, 'getParam').returns(listId);\n    sinon.stub(Meteor, 'subscribe').returns.({\n      subscriptionId: 0,\n      ready: () => true,\n    });\n  });\n\n  afterEach(function () {\n    StubCollections.restore();\n    Template.deregisterHelper('_');\n```\n\n----------------------------------------\n\nTITLE: Deploying a Meteor Application to Galaxy\nDESCRIPTION: Deploys the Meteor project from the current directory to a specified site on Galaxy, Meteor's hosting service. Supports deploying to *.meteorapp.com subdomains or custom domains (requires DNS configuration). Options allow specifying settings, deleting deployments, enabling debug mode, managing updates, controlling deployment timing, caching builds, choosing free/paid plans, managing database creation, and setting container sizes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor deploy <site> [--settings settings.json] [--debug] [--delete]\n```\n\nLANGUAGE: shell\nCODE:\n```\nOptions:\n  --delete, -D    permanently delete this deployment\n  --debug         deploy in debug mode (don't minify, etc)\n  --settings, -s  set optional data for Meteor.settings\n  --allow-incompatible-update   Allow packages in your project to be upgraded or\n                  downgraded to versions that are potentially incompatible with\n                  the current versions, if required to satisfy all package version\n                  constraints.\n  --deploy-polling-timeout  The number of milliseconds to wait for build/deploy\n                  success or failure after a successful upload of your app's\n                  minified code; defaults to 15 minutes.\n  --no-wait       Exits when Meteor has uploaded the app's code instead of\n                  waiting for the deploy to conclude.\n  --cache-build   Reuses the build already created if the git commit hash is the\n                  same\n  --free          When deploying an app for the first time, you can pass this option\n                  to deploy your app in the Galaxy's free mode.\n  --plan          You can change the app plan by providing this argument with one of\n                  the following values: professional, essentials, or free. Be aware\n                  that this argument overwrites the --free argument.\n  --mongo         If this flag is true and it's not provided a mongo url in the settings\n                  ('galaxy.meteor.com'.env.MONGO_URL), when deploying, Galaxy will create\n                  a database to your app in its shared cluster and will insert the URL in\n                  your app's settings for you.\n  --container-size         With the argument `--container-size` you can change your app's\n                  container size using the deploy command. The valid arguments are: tiny,\n                  compact, standard, double, quad, octa, and dozen.\n```\n\n----------------------------------------\n\nTITLE: Registering a Linter Plugin in JavaScript for Meteor Build System\nDESCRIPTION: Demonstrates how to register a linter plugin that processes JavaScript files and reads a configuration file named '.linterrc'. The plugin factory returns an instance of a custom linter class.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlugin.registerLinter({\n  extensions: ['js'],\n  filenames: ['.linterrc']\n}, () => new MyLinter);\n```\n\n----------------------------------------\n\nTITLE: Enabling Meteor Inspector Profiling for Specific Functions (Bash)\nDESCRIPTION: Demonstrates enabling Meteor's inspector profiling for multiple functions (`bundler.bundle`, `compiler.compile`) by setting the `METEOR_INSPECT` environment variable before running a `meteor build` command. This requires the Meteor CLI and a Bash-compatible shell environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/PERFORMANCE.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Profile multiple functions\nMETEOR_INSPECT=bundler.bundle,compiler.compile meteor build ./output-build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server Publication with Meteor-RPC\nDESCRIPTION: Creates a server publication using the createModule function that returns data from a ChatCollection. The publication doesn't require parameters and is exported as a type for client-side type safety.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// server/main.ts\nimport { createModule } from \"meteor-rpc\";\nimport { ChatCollection } from \"/imports/api/chat\";\nimport { z } from \"zod\";\n\nconst server = createModule()\n  .addPublication(\"chatRooms\", z.void(), () => {\n    return ChatCollection.find();\n  })\n  .build();\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Using Async Iterator with MongoDB Collections in Meteor\nDESCRIPTION: Example of using the new Symbol.asyncIterator with MongoDB collections for asynchronous iteration over query results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.8-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (const document of collection.find(query, options)) /* ... */\n```\n\n----------------------------------------\n\nTITLE: Stopping Autoruns and Chained Cleanup (Meteor, JavaScript)\nDESCRIPTION: This snippet shows how stopping a parent autorun (weatherPrinter) also stops a nested autorun (temperaturePrinter) due to Tracker's automatic cleanup convention. Requires Meteor's Tracker and a reactive data source ('weather'). Upon stopping the parent, further reactive updates (like weather.set) do not trigger log output. Demonstrates resource cleanup cascade.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nweatherPrinter.stop();\nweather.set(\"temperature\", \"chilly\");\n// Nothing happens\n```\n\n----------------------------------------\n\nTITLE: Registering a Compiler Plugin in Meteor\nDESCRIPTION: Shows how to register a compiler plugin for Pug templates. The compiler class implements the processFilesForTarget method to compile each file and add the output as JavaScript.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/packagejs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlugin.registerCompiler({\n  extensions: ['pug', 'tpl.pug'],\n  filenames: []\n}, () => new PugCompiler);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass PugCompiler {\n  processFilesForTarget(files) {\n    files.forEach((file) => {\n      // Process and add the output.\n      const output = compilePug(file.getContentsAsString());\n\n      file.addJavaScript({\n        data: output,\n        path: `${file.getPathInPackage()}.js`\n      });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Meteor packages using ES2015 modules\nDESCRIPTION: Use ES2015 module syntax to import Meteor 'pseudo-globals' from their respective packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { EJSON } from 'meteor/ejson';\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting for Meteor Methods\nDESCRIPTION: Demonstrates how to add rate limiting to a method by specifying the maximum number of requests allowed within a given time period, helping protect against abuse and denial-of-service attacks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  rateLimit: { // rate limit to a max of 5 requests every second\n    limit: 5,\n    interval: 1000\n  },\n  async run({ text }) {\n    // ... //\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sink Class Interface Definition\nDESCRIPTION: Definition of the Sink class interface showing available methods for both client and server implementations\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/server-render.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Sink {\n  // Appends content to the <head>.\n  appendToHead(content)\n\n  // Appends content to the <body>.\n  appendToBody(content)\n\n  // Appends content to the identified element.\n  appendToElementById(id, content)\n\n  // Replaces the content of the identified element.\n  renderIntoElementById(id, content)\n\n  // Redirects request to new location.\n  redirect(location, code)\n\n\n  // server only methods\n\n  // sets the status code of the response.\n  setStatusCode(code)\n\n  // sets a header of the response.\n  setHeader(key, value)\n\n  // gets request headers\n  getHeaders()\n\n  // gets request cookies\n  getCookies()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating allow-deny Package in Meteor\nDESCRIPTION: Command to update the allow-deny package to patch a security vulnerability in Meteor 1.5.2.1. This is recommended if unable to update to the full Meteor 1.5.2.1 version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\nmeteor update allow-deny\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Frame-Options with Helmet in Meteor\nDESCRIPTION: Implementation of Helmet's frameguard middleware in a Meteor application to set X-Frame-Options header for same-origin policy. This prevents the webpage from being embedded in iframes from different origins.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// With other import statements\nimport helmet from \"helmet\";\n\n// Within server side Meter.startup()\nWebApp.handlers.use(helmet.frameguard());  // defaults to sameorigin\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with AUTOUPDATE_VERSION (Bash)\nDESCRIPTION: Starts a Meteor application while setting the `AUTOUPDATE_VERSION` environment variable to 'abc'. This configuration prevents the client from automatically reloading when client-side files (like HTML) are changed, allowing developers to test scenarios where automatic updates are disabled or controlled.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ AUTOUPDATE_VERSION=abc meteor\n```\n\n----------------------------------------\n\nTITLE: Using Archive Configuration for Data Reconciliation\nDESCRIPTION: This snippet outlines the 'archive' data mechanism for reconciling offline with server data. It involves organizing removed documents into an 'archive' collection. Assumes integration with the 'jam:archive' package and provides an example data structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  _id, // auto-generated by Meteor as with other collection _ids\\n  _collection, // the name of the collection, e.g. 'todos', that the doc belonged to originally\\n  archivedAt, // the timestamp when the document was removed from its original collection and inserted into the archive\\n  id, // the original doc _id renamed to prevent conflict with the auto-generated one above. when restored, it will be renamed back to _id automatically by this package\\n  /*\\n  ...rest of original doc\\n  */\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.callAsync for Promise-based Method Calls on Server\nDESCRIPTION: Demonstrates how to use Meteor.callAsync or Meteor.applyAsync on the server to get a Promise when calling Meteor methods, instead of the resolved value returned by Meteor.call.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.callAsync(/* method name and arguments */)\nMeteor.applyAsync(/* method name and arguments */)\n```\n\n----------------------------------------\n\nTITLE: Integrating Denormalizer with Collection\nDESCRIPTION: Shows how to wire up the denormalizer into collection mutations by extending the collection class.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass TodosCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.createdAt = doc.createdAt || new Date();\n    const result = super.insert(doc, callback);\n    incompleteCountDenormalizer.afterInsertTodo(doc);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Bundler Package for Meteor 3\nDESCRIPTION: Command to add the beta version of jorgenvatle:vite-bundler package to a Meteor project for using Vite as the bundler.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/vite-bundler/setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add jorgenvatle:vite-bundler@2.0.0-beta.12\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Sending with Supported Services in Meteor\nDESCRIPTION: This JSON configuration specifies email sending options for supported services like Mailgun within a Meteor app. It includes essential authentication details such as service provider, user, and password. This setup relies on the supported services by Nodemailer.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/email.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"email\": {\n      \"service\": \"Mailgun\",\n      \"user\": \"postmaster@meteor.com\",\n      \"password\": \"superDuperPassword\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Cordova Apps on Emulator - Shell\nDESCRIPTION: Runs a Meteor Cordova app on the Android or iOS emulator, enabling quick testing during development. The 'android' command uses the currently configured Android emulator, while 'ios' requires Xcode and only works on macOS.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# Android\nmeteor run android\n\n# iOS (only works on macOS)\nmeteor run ios\n```\n\n----------------------------------------\n\nTITLE: Disabling Client-Side Updates on a Collection in Meteor\nDESCRIPTION: This snippet shows how to deny all client-side updates on a collection called 'Lists' to ensure no other part of the app can use 'allow'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Deny all client-side updates on the Lists collection\nLists.deny({\n  insert() { return true; },\n  update() { return true; },\n  remove() { return true; },\n});\n```\n\n----------------------------------------\n\nTITLE: Reserved Object Keys in Logging\nDESCRIPTION: List of reserved keys that cannot be used in the root of logging objects.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/logging.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'time', 'timeInexact', 'level', 'file', 'line', 'program', 'originApp', 'satellite', 'stderr'\n```\n\n----------------------------------------\n\nTITLE: Extending Acorn Parser with Plugins\nDESCRIPTION: Example of extending the Acorn parser with a JSX plugin.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar acorn = require(\"acorn\");\nvar jsx = require(\"acorn-jsx\");\nvar JSXParser = acorn.Parser.extend(jsx());\nJSXParser.parse(\"foo(<bar/>\");\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Type Imports in Meteor 1.12\nDESCRIPTION: Example showing how to modify type imports due to enabled emitDecoratorsMetadata. The 'type' qualifier is now required when importing types in TypeScript.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.12-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Point } from 'react-easy-crop/types';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Point } from 'react-easy-crop/types';\n```\n\n----------------------------------------\n\nTITLE: Creating Unmanaged Collections in Meteor\nDESCRIPTION: Example of creating named unmanaged collections by passing null for the connection parameter.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_122\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Meteor.Collection(\"name\", {connection: null})\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Tokens with Acorn Tokenizer\nDESCRIPTION: The snippet demonstrates how to iterate over tokens using Acorn's tokenizer in ES6 environments. The tokenizer returns tokens which can be iterated directly as well as converted to an array.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/packages/modules-test-package/node_modules/acorn/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let token of acorn.tokenizer(str)) {\n  // iterate over the tokens\n}\n\n// transform code to array of tokens:\nvar tokens = [...acorn.tokenizer(str)];\n```\n\n----------------------------------------\n\nTITLE: Using Custom Templates with meteor generate (Bash)\nDESCRIPTION: Demonstrates how to specify a custom template directory using the `--templatePath` option when running `meteor generate`. This allows using user-defined `.js` or `.ts` files for scaffolding instead of the default ones. Requires a valid path to a directory containing template files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmeteor generate feed --templatePath=/scaffolds-ts\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages in Child Process\nDESCRIPTION: Demonstrates how to register message listeners in a child process. The callback function can return a Promise, and all results will be collected and sent back to the parent process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/inter-process-messaging/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nonMessage(topic, callback)\n```\n\n----------------------------------------\n\nTITLE: Exporting Values from Modules in Meteor\nDESCRIPTION: Shows how to export values from a module that can be imported by other modules. Uses ES6 export syntax to make variables available to importing modules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// b.js\nexport var bThing = 'a thing defined in b.js';\nconsole.log(bThing, 'in b.js');\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in Meteor\nDESCRIPTION: JSON configuration for setting up email options using a supported service in Meteor app settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/email.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"email\": {\n      \"service\": \"Mailgun\",\n      \"user\": \"postmaster@meteor.com\",\n      \"password\": \"superDuperPassword\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Query in Minimongo\nDESCRIPTION: Example of a query using regex with options in Minimongo. This pattern allows for case-insensitive string matching using regular expressions within MongoDB queries.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n{a: {$regex: '', $options: 'i'}}\n```\n\n----------------------------------------\n\nTITLE: Implementing AwesomeCompiler using CachingCompiler in Meteor\nDESCRIPTION: This snippet demonstrates how to create a custom compiler class (AwesomeCompiler) that extends CachingCompiler. It implements required methods such as getCacheKey, compileResultSize, compileOneFile, and addCompileResult. The compiler is then registered with Meteor's Plugin system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/caching-compiler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// CompileResult is a {source, sourceMap} object.\nclass AwesomeCompiler extends CachingCompiler {\n  constructor() {\n    super({\n      compilerName: 'awesome',\n      defaultCacheSize: 1024*1024*10,\n    });\n  }\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  }\n  compileResultSize(compileResult) {\n    return compileResult.source.length + compileResult.sourceMap.length;\n  }\n  compileOneFile(inputFile) {\n    return Awesomifier.compile(inputFile.getContentsAsString());\n  }\n  addCompileResult(inputFile, compileResult) {\n    inputFile.addJavaScript({\n      path: inputFile.getPathInPackage() + '.js',\n      sourcePath: inputFile.getPathInPackage(),\n      data: compileResult.source,\n      sourceMap: compileResult.sourceMap,\n    });\n  }\n}\nPlugin.registerCompile({\n  extensions: ['awesome'],\n}, () => new AwesomeCompiler());\n```\n\n----------------------------------------\n\nTITLE: Exporting Symbols from Atmosphere Package\nDESCRIPTION: Demonstrates how to export symbols from an Atmosphere package using ES2015 export syntax, and how to import them in a Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// in my-package.js:\nexport const myName = 'my-package';\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { myName } from 'meteor/username:my-package';\n```\n\n----------------------------------------\n\nTITLE: Implementing CDN Asset Helper in Meteor\nDESCRIPTION: Shows how to create a template helper for CDN asset URLs and its usage in templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.registerHelper(\"assetUrl\", (asset) => {\n  return \"http://mycdn.com/\" + asset\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{assetUrl 'cats.gif'}}\">\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Session Values\nDESCRIPTION: Example showing how to set multiple session values using an object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/session.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSession.set({\n  a: 'foo',\n  b: 'bar'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Open Authentication Meteor Methods\nDESCRIPTION: Illustrates creating a method that doesn't require authentication by setting 'open: true'. This allows non-logged-in users to access specific methods while maintaining authentication for others.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  open: true,\n  async run({ text }) {\n    // ... //\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Launch Screen Package Usage in Meteor\nDESCRIPTION: Basic usage of the Launch Screen package which automatically waits for the body template to render or the first Iron Router route to load before dismissing the launch screen.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/launch-screen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// just add the package, no special configuration required\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to Task Component in React\nDESCRIPTION: This snippet updates the Task component to include a delete button. It adds an onDeleteClick prop to handle the deletion of a task.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/4.update-and-remove.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nexport const Task = ({ task, onCheckboxClick, onDeleteClick }) => {\n  return (\n..\n      <span>{task.text}</span>\n      <button onClick={ () => onDeleteClick(task) }>&times;</button>\n..\n```\n\n----------------------------------------\n\nTITLE: Synchronous API with Meteor.wrapAsync\nDESCRIPTION: Converting async callback API to synchronous style using Meteor.wrapAsync.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Setup sync API\nconst getFollowingFromUserFiber =\n  Meteor.wrapAsync(github.user.getFollowingFromUser, github.user);\n\n// Inside a Meteor method definition\nupdateGitHubFollowers() {\n  const res = getFollowingFromUserFiber({\n    user: 'stubailo'\n  });\n\n  Followers.insert(res);\n\n  // Return how many followers we have\n  return res.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Input for Rate Limiting in JavaScript\nDESCRIPTION: This snippet provides an example of an input object that would be checked against the rate limiting rules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/rate-limit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  username: 'meteor'\n  methodName: 'hello'\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Task Retrieval in Meteor React App\nDESCRIPTION: Modifies the task retrieval logic in the React component to only fetch tasks when a user is logged in.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n..\n    const tasks = useTracker(() => {\n      if (!user) {\n        return [];\n      }\n\n      return TasksCollection.find(\n        hideCompleted ? hideCompletedFilter : {},\n        {\n          sort: { createdAt: -1 },\n        }\n      ).fetch();\n    });\n\n    const pendingTasksCount = useTracker(() => {\n      if (!user) {\n        return 0;\n      }\n      ..\n    });\n..\n```\n\n----------------------------------------\n\nTITLE: Adding Platforms - Meteor CLI - Bash\nDESCRIPTION: Details how to add one or more platforms (e.g., android, ios, web) to a Meteor project to enable targeting those environments. No additional dependencies apart from the Meteor CLI. Parameters: platform names. Outputs a confirmation message; platforms are referenced for cross-platform builds and deploys.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add-platform [platform1] [platform2] ...\n```\n\n----------------------------------------\n\nTITLE: Collection Upsert Method in Meteor\nDESCRIPTION: Collection method that performs an update with upsert and returns the ID of the newly inserted document if applicable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.upsert\n```\n\n----------------------------------------\n\nTITLE: Declaring Meteor Types for Server and Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how TypeScript interface merging is used to create combined type declarations that work for both server and client environments in Meteor. It shows the common pattern used throughout Meteor's TypeScript definitions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/package-tests/packages/tilde-constraints/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// In a shared module:\ninterface IMeteor {\n  isClient: boolean;\n  isServer: boolean;\n}\n\n// In the client module:\ninterface IMeteor {\n  // Client-only APIs\n  absoluteUrl(): string;\n}\n\n// In the server module:\ninterface IMeteor {\n  // Server-only APIs\n  release: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Babel Flow Plugins in JavaScript\nDESCRIPTION: Configuration to enable Babel's Flow plugins in a .babelrc file for applications or packages that rely on Flow syntax after upgrading to Meteor 1.10.2.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-syntax-flow\",\n    \"@babel/plugin-transform-flow-strip-types\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random IDs in Meteor\nDESCRIPTION: Random.id() generates random hex strings for use as unique identifiers. The length parameter determines the number of characters in the string.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/random.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.id()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.id(n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tracker.afterFlush One-Shot Behavior\nDESCRIPTION: This code snippet shows how Tracker.afterFlush is a one-shot operation. The afterFlush handler only runs once after being registered, and subsequent reactive updates won't trigger it unless it's registered again.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nset(\"favoriteFood\", \"candy\");\n// \"My favorite food is candy!\"\nsetUnpopularFood(\"lizards\");\n// \"My favorite food is lizards!\"\n// \"Sounds gross to you, but from where I'm from it's considered a delicacy!\"\nset(\"favoriteFood\", \"ice cream\");\n// \"My favorite food is ice cream!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vue SSR in Meteor with server-render (JavaScript)\nDESCRIPTION: Implements basic server-side rendering for a Vue application within a Meteor project. It uses the `onPageLoad` function from `meteor/server-render` and `vue-server-renderer` to create a Vue instance, render it to a string based on the request URL, and inject the resulting HTML into the `#app` element on the server-rendered page. Requires `server-render` and `vue-server-renderer` to be installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport Vue from 'vue';\nimport { onPageLoad } from 'meteor/server-render';\nimport { createRenderer } from 'vue-server-renderer';\n\nconst renderer = createRenderer();\n\nonPageLoad(sink => {\n  console.log('onPageLoad');\n  \n  const url = sink.request.url.path;\n  \n  const app = new Vue({\n    data: {\n      url\n    },\n    template: `<div>The visited URL is: {{ url }}</div>`\n  });\n\n  renderer.renderToString(app, (err, html) => {\n    if (err) {\n      res.status(500).end('Internal Server Error');\n      return\n    }\n    console.log('html', html);\n    \n    sink.renderIntoElementById('app', html);\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating to Meteor.userAsync in 3.x\nDESCRIPTION: Shows the transition from using Meteor.user() to Meteor.userAsync() for better isomorphism and server-side user retrieval in Meteor 3.x.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/index.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconst user = Meteor.user(); // [!code error]\n// After\nconst user = await Meteor.userAsync(); // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Importing npm Package - Specific Path\nDESCRIPTION: Example of importing from a specific path within an npm package\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from 'graphql/language';\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Self-Tests\nDESCRIPTION: Commands for setting up and running Meteor's self-test system, including dependency installation and timeout configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# download all npm dependencies, etc\n./meteor --get-ready\n\n# set the multiplier for time-outs\nset TIMEOUT_SCALE_FACTOR=3\n\n# run the tests\n./meteor self-test\n```\n\n----------------------------------------\n\nTITLE: Reporting Security Issues in Meteor\nDESCRIPTION: Instructions for reporting security-related issues in Meteor, emphasizing the need to email the security team directly rather than filing a public issue.\nSOURCE: https://github.com/meteor/meteor/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> There is a separate procedure for security-related issues.  If the\n> issue you've found contains sensitive information or raises a security\n> concern, email <code>security[]()@[]()meteor.com</code> instead, which\n> will page the security team.\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Line Emphasis in JavaScript using VitePress\nDESCRIPTION: Demonstrates syntax highlighting in VitePress using Shiki, with line 4 emphasized. The code snippet shows a simple Vue.js component structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/markdown-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data () {\n    return {\n      msg: 'Highlighted!'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Atmosphere Package Dependencies\nDESCRIPTION: Shows how to declare dependencies on other Atmosphere packages using api.use() in the package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function(api) {\n  // This package depends on 1.2.0 or above of validated-method\n  api.use('mdg:validated-method@1.2.0');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Configuration in Meteor Settings\nDESCRIPTION: Shows how to define service configurations using Meteor.settings.packages.service-configuration. Each service is defined as a key with its settings as the value.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.settings.packages['service-configuration'] = {\n  serviceName: {\n    secret: 'yourSecret',\n    appId: 'yourAppId'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Block Comments in Spacebars Templates\nDESCRIPTION: Shows the syntax for block comments in Spacebars templates. Block comments can contain closing braces, making them more useful than normal comments for commenting out sections of templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_104\n\nLANGUAGE: html\nCODE:\n```\n{{!-- block comments --}}\n```\n\n----------------------------------------\n\nTITLE: Installing React-Meteor Dependencies\nDESCRIPTION: Commands for installing react-meteor-data package and React dependency using Meteor and npm\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add react-meteor-data\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install react\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in Meteor 2.4\nDESCRIPTION: Example configuration for the email package in Meteor 2.4 using settings.json. Shows how to configure email services like Mailgun without using MAIL_URL environment variable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.4-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"email\": {\n      \"service\": \"Mailgun\",\n      \"user\": \"postmaster@meteor.com\",\n      \"password\": \"superDuperPassword\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field Selectors with Meteor Collection `find()` (JavaScript)\nDESCRIPTION: Shows how to use field selectors (`{fields: {author: 1, ...}}`) with `Collection.find()` inside a `Tracker.autorun`. This fetches only the specified fields (in this case, 'author') for all documents. The autorun becomes reactive only to changes in the selected fields ('author'), not other fields like 'title' or 'tag', further optimizing reactivity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nTracker.autorun(function(){\n  var postAuthors = Posts.find({}, {fields: {tag: 0, author: 1, title: 0}}).fetch();\n  postAuthors.forEach(function (post) {\n    console.log(post.author);\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Package in Meteor Template\nDESCRIPTION: JavaScript code demonstrating how to import the Markdown package in a Meteor template file. This is necessary because the package is lazy loaded and not included in the initial bundle.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/markdown.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// myTemplate.js\nimport 'meteor/markdown';\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Only Business Logic Module in Meteor (JavaScript)\nDESCRIPTION: Provides an example of defining sensitive business logic in a server-only file in a Meteor app, ensuring that secret algorithms are not bundled or accessible on the client side. The MMR object is exported with an updateWithSecretAlgorithm method, intended for import and invocation from trusted server methods. Assumes ES6 modules and a server-only directory structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In a server-only file, for example /imports/server/mmr.js\nexport const MMR = {\n  updateWithSecretAlgorithm(userId) {\n    // your secret code here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Content Origin in Meteor Browser Policy\nDESCRIPTION: Allows specific types of content to be loaded from a given origin. Can be called multiple times for a whitelist.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allow<ContentType>Origin(origin)\n```\n\n----------------------------------------\n\nTITLE: Checking Meteor Version in Bash\nDESCRIPTION: This snippet demonstrates how to check the installed Meteor version using the command line. It's a prerequisite step to ensure the correct Meteor version before starting the async migration process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/migrating-to-async-in-v2/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor --version\n```\n\n----------------------------------------\n\nTITLE: Using URL with Fetch in Meteor\nDESCRIPTION: JavaScript code demonstrating how to use the URL class from the 'url' package in conjunction with the fetch function from the 'fetch' package in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/url.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URL } from 'meteor/url';\nimport { fetch } from 'meteor/fetch';\n\nconst url = new URL('https://www.example.com/api/reportVisit');\n\nfetch(url, {\n    method: 'POST',\n    body: JSON.stringify({ siteId: 11 })\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Object Method Shorthand Syntax\nDESCRIPTION: Example of ES2015 object method shorthand syntax\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = {\n  oldWay: function (a, b) { ... },\n  newWay(a, b) { ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Applications and Packages (Bash)\nDESCRIPTION: Lists various forms of the `meteor update` command. These commands are used to update the Meteor platform release and/or the packages within a project. Options allow for default updates, patch-only updates (`--patch`), updating to a specific release (`--release`), updating only packages (`--packages-only`), updating specific named packages, or updating all direct and indirect dependencies (`--all-packages`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update\nmeteor update --patch\nmeteor update --release <release>\nmeteor update --packages-only\nmeteor update [packageName packageName2 ...]\nmeteor update --all-packages\n```\n\n----------------------------------------\n\nTITLE: Adding Meteor Password Authentication Package via Shell\nDESCRIPTION: This shell command adds the official Meteor package for handling username/password-based user authentication (`accounts-password`) to the Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nmeteor add accounts-password\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Active Route Helper in JavaScript\nDESCRIPTION: Helper function to determine if a list is active based on the current route and parameters.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.App_body.helpers({\n  activeListClass(list) {\n    const active = ActiveRoute.name('Lists.show')\n      && FlowRouter.getParam('_id') === list._id;\n\n    return active && 'active';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new npm package with Meteor\nDESCRIPTION: Commands to create a directory and initialize a new npm package using Meteor's npm integration. This creates the package.json file with basic configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-package\ncd my-package/\nmeteor npm init\n```\n\n----------------------------------------\n\nTITLE: Using Logic.Solver to Require Formulas and Solve in JavaScript\nDESCRIPTION: This example illustrates instantiating a Logic.Solver, adding formulas and terms as constraints via 'require', and solving for an assignment that satisfies the constraints. Formulas can be reused and recognized by the solver to avoid recompilation. The example assumes the Logic module is available and highlights how merely constructing formulas does not affect the solver until explicitly required.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar solver = new Logic.Solver();\\nsolver.require(\\\"A\\\");\\n\\nLogic.exactlyOne(\\\"A\\\", \\\"B\\\"); // no effect, just creates a Formula\\n\\nsolver.require(Logic.exactlyOne(\\\"A\\\", \\\"B\\\")); // this works\\n\\nvar myFormula = Logic.exactlyOne(\\\"A\\\", \\\"B\\\");\\nsolver.require(myFormula); // this also works\n```\n\n----------------------------------------\n\nTITLE: Setting Global Cache Duration in Meteor\nDESCRIPTION: This snippet configures the global cache duration for subscriptions in Meteor. The cacheDuration determines how long a subscription's cache should be retained. A dependency on the 'meteor/jam:pub-sub' package is required. The duration is set in seconds.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PubSub } from 'meteor/jam:pub-sub';\\n\\nPubSub.configure({\\n  cacheDuration: 5 * 60 // sets the cacheDuration to 5 minutes. defaults to 1 min\\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing User Document Modifications in Meteor\nDESCRIPTION: Example of using deny rules to prevent users from modifying their user documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.deny({ update: () => true });\n```\n\n----------------------------------------\n\nTITLE: Accounts Logout Hook Implementation\nDESCRIPTION: Adds a new hook Accounts.onLogout() that works similarly to the existing Accounts.onLogin() hook for handling logout events\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.onLogout()\n```\n\n----------------------------------------\n\nTITLE: Explicit Archiving using archiveAsync\nDESCRIPTION: Demonstrates how to explicitly archive documents in a collection using the archiveAsync method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.archiveAsync(/* your filter */)\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Generate in Wizard Mode\nDESCRIPTION: Command to run Meteor's generate tool in interactive wizard mode, which prompts the user with a series of questions to scaffold new components.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmeteor generate\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Migrations Using the Shell (JavaScript)\nDESCRIPTION: This code snippet shows the command to execute all outstanding database schema migrations by running 'Migrations.migrateTo('latest')' in the Meteor shell. It is intended for use during development or while administrating production environments and assumes the percolate:migrations package is installed and properly configured. Outputs migration logs to console if any; requires shell access to the Meteor app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// After running `meteor shell` on the command line:\nMigrations.migrateTo('latest');\n```\n\n----------------------------------------\n\nTITLE: Traditional Sync React Hooks in Meteor\nDESCRIPTION: Example showing the traditional synchronous approach using useTracker and useSubscribe hooks for handling Meteor subscriptions and data fetching.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/front-end/react.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTracker, useSubscribe } from 'meteor/react-meteor-data'\nfunction Tasks() {\n  const isLoading = useSubscribe(\"tasks\");\n  const { username } = useTracker(() => Meteor.user())\n  const tasksByUser = useTracker(() =>\n          TasksCollection.find({username}, { sort: { createdAt: -1 } }).fetch()\n  );\n\n\n  if (isLoading()) {\n    return <Loading />\n  }\n\n  // render the tasks\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive DOM Updates with Tracker.autorun\nDESCRIPTION: Example showing how to reactively update DOM elements when reactive values change using jQuery and Tracker.autorun.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('body').html(\"The weather here is <span class='forecast'></span>!\");\nTracker.autorun(function () {\n  $('.forecast').text(forecasts.get('san-francisco'));\n});\n// Page now says \"The weather here is cloudy!\"\n\nforecasts.set(\"san-francisco\", \"foggy\");\n// Page updates to say \"The weather here is foggy!\"\n```\n\n----------------------------------------\n\nTITLE: Reporting Detailed Failure Messages with Meteor Test JavaScript\nDESCRIPTION: Outputs detailed diagnostic messages for failures, including path and value, by passing a documentation object. Useful for deeply nested structures or custom error output. Example demonstrates use with a match error, but any object with descriptive fields can be used.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.fail(doc);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.fail({\n          type: 'match-error-path',\n          message: \"The path of Match.Error doesn't match.\",\n          pattern: JSON.stringify(pattern),\n          value: JSON.stringify(value),\n          path: err.path,\n          expectedPath,\n        });\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Matchers in JavaScript\nDESCRIPTION: This snippet shows how to define matchers for a rule that checks for a specific method name and any username.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/rate-limit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  username: function(username)  {\n    return true;\n  },\n  methodName: 'hello'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reload Behavior in Meteor\nDESCRIPTION: This JavaScript snippet shows how to implement a custom reload behavior using Meteor's Reload._onMigrate function. It allows for conditional reloading based on custom logic.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nReload._onMigrate((retry) => {\n  if (/* not ready */) {\n    window.setTimeout(retry, 5 * 1000); // Check again in 5 seconds\n    return [false];\n  }\n  // ready\n  return [true];\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Default Configuration for Soft Delete\nDESCRIPTION: Details how to alter the default configuration settings for the Soft Delete package by importing and configuring the library. This is done by importing the `SoftDelete` module and adjusting settings in the configure method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/soft-delete.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// put this in a file that's imported on both the client and server\nimport { SoftDelete } from 'meteor/jam:soft-delete';\n\nSoftDelete.configure({\n  // ... change the defaults here ... //\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Upsert Operation in Meteor Collections\nDESCRIPTION: Support for upsert operations in MongoDB collections, allowing documents to be inserted if they don't exist or updated if they do.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_124\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.update({ /* selector */ }, { /* update */ }, { upsert: true })\n```\n\n----------------------------------------\n\nTITLE: React Component Rendering with Meteor\nDESCRIPTION: Example showing how to render a React component to the DOM using react-dom within a Meteor startup function\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { HelloWorld } from './HelloWorld.js';\n\nMeteor.startup(() => {\n  render(<HelloWorld />, document.getElementById('app'));\n});\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Module with Default Export in JavaScript\nDESCRIPTION: Example showing how to correctly re-export a module's exports including its default export. With Reify 0.12.0, `export *` statements no longer include the `default` export, requiring an explicit re-export.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from \"./wrapped/module\";\nexport { default } \"./wrapped/module\";\n```\n\n----------------------------------------\n\nTITLE: Asserting NaN Values with Meteor Test JavaScript\nDESCRIPTION: Checks if the given value is NaN by using isNaN(actual). Can take an optional failure message. Test will fail if the value is not NaN. Requires Meteor test framework.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.isNaN(actual[, message]);\n```\n\n----------------------------------------\n\nTITLE: Running ESLint in a Meteor Project\nDESCRIPTION: This command runs the ESLint linter on a Meteor project, assuming the configuration has been set up as described in the previous snippets.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm run lint\n```\n\n----------------------------------------\n\nTITLE: Default Placeholder Replacement Logic in meteor generate (JavaScript)\nDESCRIPTION: Displays the default JavaScript `transformName` function used internally by `meteor generate`. This function replaces placeholders (`$$name$$`, `$$PascalName$$`, `$$camelName$$`) in template file names and contents based on the provided scaffold name (`scaffoldName`), converting it to PascalCase and camelCase using helper functions (`toPascalCase`, `toCamelCase`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst transformName = (name) => {\n    return name.replace(/\\$\\$name\\$\\$|\\$\\$PascalName\\$\\$|\\$\\$camelName\\$\\$/g, function (substring, args) {\n      if (substring === '$$name$$') return scaffoldName;\n      if (substring === '$$PascalName$$') return toPascalCase(scaffoldName);\n      if (substring === '$$camelName$$') return toCamelCase(scaffoldName);\n    })\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting WebApp Package Options in Meteor Settings\nDESCRIPTION: Demonstrates how to set the alwaysReturnContent option for the webapp package using Meteor.settings. This option affects the behavior of certain HTTP requests.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.settings.packages.webapp = {\n  alwaysReturnContent: true\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin from Local File System via Command Line\nDESCRIPTION: Shows how to add a Cordova plugin from the local filesystem using the meteor add command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add cordova:cordova-plugin-underdevelopment@file://../plugins/cordova-plugin-underdevelopment\n```\n\n----------------------------------------\n\nTITLE: Basic Meteor Project Deployment to Galaxy (Bash)\nDESCRIPTION: Illustrates the fundamental `meteor deploy` command. This command deploys the Meteor project located in the current directory to the specified hostname (e.g., `your-app.meteorapp.com`) hosted on Meteor Galaxy.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nmeteor deploy your-app.meteorapp.com\n```\n\n----------------------------------------\n\nTITLE: Creating Vue3 App with Meteor CLI\nDESCRIPTION: Command to create a new Vue3 project using Meteor's CLI with the Vue template.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor create --vue\n```\n\n----------------------------------------\n\nTITLE: Using exact version in package.json\nDESCRIPTION: Example showing how to specify an exact version in package.json to prevent npm from updating the package. This ensures your modified version doesn't get overwritten during updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"left-pad\": \"1.0.2\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router for Meteor Application\nDESCRIPTION: Setting up Vue Router with a single route pointing to the main App component. Creates a router instance with HTML5 history mode for clean URLs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router';\nimport App from './App.vue';\n\nexport const router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: App,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Email Asynchronously in Meteor\nDESCRIPTION: Example of using Email.sendAsync to send emails asynchronously on the server in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/email.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Server: Define a method that the client can call.\nMeteor.methods({\n  sendEmail(to, from, subject, text) {\n    // Make sure that all arguments are strings.\n    check([to, from, subject, text], [String]);\n\n    // Let other method calls from the same client start running, without\n    // waiting for the email sending to complete.\n    this.unblock();\n\n    return Email.sendAsync({ to, from, subject, text }).catch(err => {\n      // \n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in JavaScript for Meteor Core Package Listing\nDESCRIPTION: This code snippet demonstrates the structure used to define a package in the Meteor core package listing script. It includes the package name and a link to its GitHub repository.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/packages-listing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'package-name',\n  link: 'https://link-to-github.com/meteor/meteor/tree/devel/packages/package-name'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Flow Plugins in Meteor\nDESCRIPTION: Configuration for enabling Flow type annotations support in Meteor applications using a custom .babelrc file. This setup includes the necessary Babel plugins for Flow syntax and type stripping.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-syntax-flow\",\n    \"@babel/plugin-transform-flow-strip-types\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor Package Structure\nDESCRIPTION: Command to create a new Meteor package directory with the specified package name.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --package user:package\ncd package\n```\n\n----------------------------------------\n\nTITLE: Template Subscription Pattern\nDESCRIPTION: New template instance subscription method that automatically stops when template is destroyed, with reactive ready state checking.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.instance().subscribe()\nTemplate.instance().subscriptionsReady()\nTemplate.subscriptionsReady\n```\n\n----------------------------------------\n\nTITLE: Importing React in Meteor 1.3\nDESCRIPTION: Shows how to import React directly from npm instead of relying on a global React symbol in a Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.setInterval\nDESCRIPTION: Meteor's implementation of setInterval that maintains environment variables and runs within a Fiber. Returns a handle that can be used with clearInterval.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/timers.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.setInterval(function() {\n  // your code here\n}, interval);\n```\n\n----------------------------------------\n\nTITLE: Eclipse Public License v1.0 Full Text\nDESCRIPTION: The complete text of the Eclipse Public License version 1.0, which governs the use and distribution of certain libraries in the Meteor project. It outlines definitions, rights granted, requirements, and limitations for contributors and recipients.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Eclipse.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nEclipse Public License - v 1.0\n\nTHE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n\n1. DEFINITIONS\n\n\"Contribution\" means:\n\na) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and\nb) in the case of each subsequent Contributor:\ni) changes to the Program, and\nii) additions to the Program;\nwhere such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.\n\"Contributor\" means any person or entity that distributes the Program.\n\n\"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.\n\n\"Program\" means the Contributions distributed in accordance with this Agreement.\n\n\"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors.\n\n2. GRANT OF RIGHTS\n\na) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.\nb) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.\nc) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.\nd) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.\n3. REQUIREMENTS\n\nA Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:\n\na) it complies with the terms and conditions of this Agreement; and\nb) its license agreement:\ni) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;\nii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;\niii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and\niv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.\nWhen the Program is made available in source code form:\n\na) it must be made available under this Agreement; and\nb) a copy of this Agreement must be included with each copy of the Program.\nContributors may not remove or alter any copyright notices contained within the Program.\n\nEach Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.\n\n4. COMMERCIAL DISTRIBUTION\n\nCommercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.\n\nFor example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.\n\n5. NO WARRANTY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.\n\n6. DISCLAIMER OF LIABILITY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n7. GENERAL\n\nIf any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.\n\nIf Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.\n```\n\n----------------------------------------\n\nTITLE: Allowing Data URL for Content in Meteor Browser Policy\nDESCRIPTION: Allows specific types of content to be loaded from a data: URL.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allow<ContentType>DataUrl()\n```\n\n----------------------------------------\n\nTITLE: Updating meteor-node-stubs in Meteor 2.7\nDESCRIPTION: Updates the meteor-node-stubs package to version 1.2.1 to support node: imports in Meteor 2.7.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.7-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install meteor-node-stubs@1.2.1\n```\n\n----------------------------------------\n\nTITLE: Using LocalStorage in Meteor Applications\nDESCRIPTION: Shows how to use the Meteor._localStorage API for local storage operations in Meteor applications. This replaces the previous localstorage-polyfill package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_133\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor._localStorage\n```\n\n----------------------------------------\n\nTITLE: Illustrating Correct Usage of Meteor Template Naming Conventions\nDESCRIPTION: This JavaScript snippet shows examples of template names that adhere to the specified naming conventions (`camel-case`, `pascal-case`, `snake-case`) for the `meteor/template-names` ESLint rule. These patterns would not trigger warnings when the rule is configured accordingly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/template-names.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n\n/*eslint meteor/template-names: [2, \"camel-case\"]*/\nTemplate.fooBar.onCreated\nTemplate.fooBar.onRendered\nTemplate.fooBar.onDestroyed\nTemplate.fooBar.events\nTemplate.fooBar.helpers\n\n/*eslint meteor/template-names: [2, \"pascal-case\"]*/\nTemplate.FooBar.onCreated\n/* .. */\n\n/*eslint meteor/template-names: [2, \"snake-case\"]*/\nTemplate.foo.onCreated\nTemplate.foo_bar.onCreated\n\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Dependencies for Meteor 3\nDESCRIPTION: Commands to install Vite and meteor-vite as development dependencies in a Meteor project. This is required for setting up Vite bundler with Meteor 3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/vite-bundler/setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm i -D vite@4\nmeteor npm i meteor-vite\n```\n\n----------------------------------------\n\nTITLE: Debugging Meteor Applications\nDESCRIPTION: Illustrates the modern approach to debugging Meteor applications using the --inspect and --inspect-brk flags with the 'meteor run' command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run --inspect\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run --inspect-brk\n```\n\n----------------------------------------\n\nTITLE: Detecting Cordova in JavaScript Code\nDESCRIPTION: Shows how to use Meteor.isCordova to write platform-specific code for Cordova mobile apps.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nif (Meteor.isServer) {\n  console.log(\"Printed on the server\");\n}\n\nif (Meteor.isClient) {\n  console.log(\"Printed in browsers and mobile apps\");\n}\n\nif (Meteor.isCordova) {\n  console.log(\"Printed only in mobile Cordova apps\");\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Functions and Blocks with Profile API - JavaScript\nDESCRIPTION: This collection of code patterns demonstrates how to annotate functions and methods in Meteor\\'s codebase for profiling purposes. The Profile API supports function and method wrapping (preserving arguments and context), as well as inline timing for blocks of code. Required dependency is the global Profile API (which may need guarding with typeof checks in plugin contexts). Inputs are arbitrary functions or code blocks, and instrumentation results in inclusion of timing data in profiler reports. Outputs remain the original return values, but performance is now measurable. Extensions or plugins using Profile should verify its presence before usage to avoid errors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/PERFORMANCE.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Profile(.) takes a function and wraps it, preserving arguments\\n// and this.  You can often get away without introducing any extra\\n// indentation in your text editor.\\nvar doIt = Profile(\"doIt\", function (...) {\\n  ...\\n});\\n\\n// Wrap a method\\nMyClass.prototype.doIt =\\n  Profile(\"MyClass doIt\", MyClass.prototype.doIt);\\n\\n// Profile.time(.) invokes a block immediately and times it,\\n// passing the return value through.\\nfunction doIt() {\\n  ...\\n  var result = Profile.time(\"doIt\", () => {\\n    ...\\n  });\\n  ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Autorun Without Reactivity\nDESCRIPTION: Example showing how autorun with async callback is not dependent on reactive changes when async call precedes reactive data access.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(async function example1() {\n  let asyncData = await asyncDataFunction();\n  let users = Meteor.users.find({}).fetch();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub OAuth Package in Meteor\nDESCRIPTION: This bash command demonstrates how to add the GitHub OAuth package to a Meteor application using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add accounts-github\n```\n\n----------------------------------------\n\nTITLE: Defining Helpers and Event Handlers for Body Template\nDESCRIPTION: Demonstrates how to define helpers and event handlers for the <body> tag, which now acts as a template in Blaze.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_104\n\nLANGUAGE: JavaScript\nCODE:\n```\nUI.body\n```\n\n----------------------------------------\n\nTITLE: Decrypting OAuth Service Data\nDESCRIPTION: Example showing how to decrypt encrypted service data after retrieving OAuth credentials.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/oauth-encryption.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst credentials = Twitter.retrieveCredential(token);\nconst serviceData = OAuth.openSecrets(credentials.serviceData);\n```\n\n----------------------------------------\n\nTITLE: Using Require with Async Modules in Meteor\nDESCRIPTION: Shows how to use require with an async module in Meteor. The require function returns a promise that resolves to the module's exports when used with an async module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/top-level-await.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// resolves to the exports of init.js\nconst promise = require('./init.js');\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.1.1\nDESCRIPTION: Execute this command to upgrade your project to Meteor version 3.1.1. Updating ensures you are operating with the most recent enhancements and patches, important for maintaining optimal performance and security.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.1.1\n```\n\n----------------------------------------\n\nTITLE: ES2015 Block Scoping with Let and Const\nDESCRIPTION: Demonstrates the use of `let` and `const` for block-scoped variable declarations, a feature enabled by the `ecmascript` package. It shows how these differ from `var` in terms of scope.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction example(condition) {\n  let x = 0;\n  if (condition) {\n    let x = 1;\n    console.log(x);\n  } else {\n    console.log(x);\n    x = 2;\n  }\n  return x;\n}\n\nexample(true); // logs 1, returns 0\nexample(false); // logs 0, returns 2\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - Meteor CLI\nDESCRIPTION: Command to install all project dependencies from package.json\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install\n```\n\n----------------------------------------\n\nTITLE: Expecting and Qualifying Failures with Meteor Test JavaScript\nDESCRIPTION: Enables marking a failed assertion as an expected, qualified pass, so the test suite counts it as passing but the specific failure details are still available for inspection. No input parameters required. Used for negative test cases or to acknowledge known issues.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.expect_fail();\n```\n\n----------------------------------------\n\nTITLE: Using Upsert in Meteor Collections\nDESCRIPTION: Collection.update now supports upsert operations. A new Collection.upsert method is also available, returning the ID of newly inserted documents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_111\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using update with upsert option\nCollection.update({_id: \"someId\"}, {$set: {field: \"value\"}}, {upsert: true});\n\n// Using the new upsert method\nvar result = Collection.upsert({_id: \"someId\"}, {$set: {field: \"value\"}});\nconsole.log(result.insertedId); // If a new document was inserted\n```\n\n----------------------------------------\n\nTITLE: Creating a New Meteor 3.0 Project\nDESCRIPTION: Command to create a new Meteor 3.0 project using the specified release version. This allows developers to start fresh with the latest Meteor version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create my-new-project --release {{ $frontmatter.meteor_version }}\n```\n\n----------------------------------------\n\nTITLE: Extending EJSON.stringify in JavaScript\nDESCRIPTION: Demonstrates new options for EJSON.stringify, allowing control over object key sorting and indentation formatting. This enhances the flexibility of EJSON serialization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_113\n\nLANGUAGE: JavaScript\nCODE:\n```\nEJSON.stringify(obj, {\n  canonical: true, // Sorts object keys\n  indent: 2 // Controls indentation\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json for npm in Meteor project\nDESCRIPTION: Create a package.json file in your Meteor project to enable npm package management.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm init -y\n```\n\n----------------------------------------\n\nTITLE: Installing zodern:types Package in MeteorJS\nDESCRIPTION: Command to add the zodern:types package to a Meteor project. This package provides TypeScript types for Meteor core packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/using-core-types.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add zodern:types\n```\n\n----------------------------------------\n\nTITLE: Configure Global Defaults for Archive\nDESCRIPTION: Snippet showing the default configuration for the archive package, allowing for customization such as changing the name of the archive collection or excluding collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  name: 'archives', // if your Archives collection uses a different name, you'll want to change this\n  overrideRemove: true, // overrides the Collection.removeAsync method to make it an archive instead\n  exclude: ['roles', 'role-assignment'] // exclude specific collections from using archive so that when they are removed, the are permanently removed from the db. defaults to excluding the collections created by the meteor roles package\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Posts with Reactive Session Selection - Blaze HTML\nDESCRIPTION: Displays a posts list and each item using Blaze templates, with the selection state visually indicated. This setup takes advantage of Meteor's reactivity to optimize rendering. Works in tandem with the JavaScript logic for class assignment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/session.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"postsView\">\n  {{#each posts}}\n    {{> postItem}}\n  {{/each}}\n</template>\n\n<template name=\"postItem\">\n  <div class=\"{{postClass}}\">{{title}}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: ES2015 Destructuring Assignment\nDESCRIPTION: Shows various examples of destructuring assignment for arrays and objects, including nested destructuring and renaming. This feature is enabled by the `ecmascript` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[a, b] = [b, a];\n\nlet { username: name } = user;\n// is equivalent to\nlet name = user.username;\n\nfunction run({ command, args, callback }) { ... }\n\nrun({\n  command: 'git',\n  args: ['status', '.'],\n  callback(error, status) { ... },\n  unused: 'whatever'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Lazy Module Loading in Meteor\nDESCRIPTION: Example showing how to configure a package's main module to be loaded lazily, meaning it will only be evaluated when imported and may be excluded from the client bundle if unused. This feature requires Meteor 1.4.2.2 or later.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse(function (api) {\n  api.mainModule(\"client.js\", \"client\", { lazy: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Range Constraints to Each Magic Square Location with Logic Solver in JavaScript\nDESCRIPTION: Adds new requirements such that each digit variable must take values between 1 and 9 inclusive. Calls solver.require for both greaterThanOrEqual and lessThanOrEqual constraints per location, then solves again to ensure all digits are within range. Outputs: valid magic square where all values are 1-9.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.each(locations, function (loc) {\n  solver.require(Logic.greaterThanOrEqual(loc, Logic.constantBits(1)));\n  solver.require(Logic.lessThanOrEqual(loc, Logic.constantBits(9)));\n});\n\nvar sol2 = solver.solve();\n_.map(locations, function (loc) { return sol2.evaluate(loc); })\n// => [8, 1, 6,\n//     3, 5, 7,\n//     4, 9, 2]\n```\n\n----------------------------------------\n\nTITLE: Using Markdown in Meteor Template\nDESCRIPTION: Demonstrates how to use markdown syntax within Meteor template tags.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/markdown.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- myTemplate.html -->\n{{#markdown}}I am using __markdown__.{{/markdown}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tinytest in Package.js for Meteor Package Testing\nDESCRIPTION: This snippet demonstrates how to configure Tinytest in a package.js file using Package.onTest(). It shows how to include required dependencies, add test files for different environments (client/server), and make packages globally available with api.imply().\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Define test section\nPackage.onTest(function(api) {\n  // We will need the following packages to run our tests.\n  // Note that we also need to include the package to be tested (myname:mypackage).\n  api.use(['tinytest', 'underscore', 'ecmascript', 'myname:mypackage']);\n  // In v1.2 test-packages no longer include any packages globally.\n  // You may need to make some exports global for your tests to run, for example:\n  api.imply('underscore');\n  // This file contains the tests we want to run (these will run on the client and the server)\n  api.addFiles('tests.js');\n  // You can add as many test files as you want and choose where they are to run:\n  api.addFiles('server-tests.js', 'server');\n  // and these only run on the client:\n  api.addFiles('client-tests.js', 'client');\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling OplogObserveDriver for Specific Query\nDESCRIPTION: Example of how to disable oplog tailing for a specific Meteor publish function using the _disableOplog option.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/oplog-observe-driver.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish(\"comments\", function (postId) {\n  return Comments.find({post: postId}, {_disableOplog: true, fields: {secret: 0}});\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Mongo Shell - Meteor CLI - Bash\nDESCRIPTION: Opens a local MongoDB shell pointing to the Meteor application's development database. Requires application to be running locally via 'meteor run'. No parameters; outputs connection to the database for interactive use. Shell session is limited to the local development environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nmeteor mongo\n```\n\n----------------------------------------\n\nTITLE: Example Custom Replacer File Structure for meteor generate (JavaScript)\nDESCRIPTION: Illustrates the structure of a custom JavaScript file used with `meteor generate --replaceFn`. It must export `transformFilename` and `transformContents` functions to customize file name and content transformations, respectively. This simple example logs the inputs and returns the original values without modification.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport function transformFilename(scaffoldName, filename) {\n  console.log(scaffoldName, filename);\n  return filename;\n}\n\nexport function transformContents(scaffoldName, fileContents, filename) {\n  console.log(filename, fileContents);\n  return contents;\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing JavaScript URLs in Blaze Templates\nDESCRIPTION: Function to enable JavaScript URLs in attribute values which are disabled by default in Blaze for security reasons. This helps prevent cross-site scripting vulnerabilities.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nUI._allowJavascriptUrls()\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Instance Type with Meteor Test JavaScript\nDESCRIPTION: Validates that an object is not an instance of the specified class/constructor. Takes object, class, and optional message. Assertion fails if obj instanceof klass is true.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.notInstanceOf(obj, klass[, message]);\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Collection in JavaScript\nDESCRIPTION: JavaScript code to define a Meteor collection for the 'customer' model.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mongo } from 'meteor/mongo';\n\nexport const CustomerCollection = new Mongo.Collection('customer');\n```\n\n----------------------------------------\n\nTITLE: Using Escaped Curly Braces in Spacebars Templates\nDESCRIPTION: Special syntax for escaping curly braces in Spacebars templates. Use {{| to insert a literal {{ and {{{| to insert a literal {{{.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_98\n\nLANGUAGE: handlebars\nCODE:\n```\n{{|\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{|\n```\n\n----------------------------------------\n\nTITLE: Migrating from Assets.getText to Assets.getTextAsync in Meteor\nDESCRIPTION: Demonstrates the transition from the synchronous Assets.getText method to the asynchronous Assets.getTextAsync. The updated code must be in an async function and the result needs to be awaited.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/renamed-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n\nfunction someFunction() {\n  const text = Assets.getText('some-file.txt');\n  return text;\n}\n\n// After\n\nasync function someFunction() {\n  const text = await Assets.getTextAsync('some-file.txt');\n  return text;\n}\n```\n\n----------------------------------------\n\nTITLE: Async Tracker.autorun Reactivity Preserved Example (Meteor, JavaScript, <2.10)\nDESCRIPTION: This pattern shows that by accessing a reactive datasource (like Meteor.users.find) before the first await in an async Tracker.autorun, the computation becomes dependent on that data and will rerun on changes. Dependencies: Meteor, Tracker, and asyncDataFunction. Inputs: Meteor.users, asyncDataFunction. Output: users variable updates on reactivity. Limitation: loses reactivity for any statements after the first await.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  Tracker.autorun(async function example2()  {\n    let users = Meteor.users.find({}).fetch();\n    let asyncData = await asyncDataFunction();\n  });\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific User Fields in Meteor\nDESCRIPTION: Example of efficiently retrieving specific user fields using the options parameter to reduce database load and over-reactivity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst userName = Meteor.user({fields: {'profile.name': 1}}).profile.name;\n```\n\n----------------------------------------\n\nTITLE: Using forceApprovalPrompt with Google OAuth in Meteor\nDESCRIPTION: Adding the forceApprovalPrompt option when logging in with Google to require user approval each time.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_124\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.loginWithGoogle\n```\n\n----------------------------------------\n\nTITLE: Installing jam:mongo-transactions Package in Meteor\nDESCRIPTION: Command to add the jam:mongo-transactions package to a Meteor application using the Meteor package manager.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/mongo-transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add jam:mongo-transactions\n```\n\n----------------------------------------\n\nTITLE: Registering Babel Require Hook for Meteor Tool - JavaScript\nDESCRIPTION: This code registers Babel's require hook to enable on-the-fly ES2015+ JavaScript transpilation for the Meteor tool during local development. The require hook allows Node.js 'require' to load files using Babel, supporting modern JavaScript syntax without precompilation. This setup is suitable only in development environments and should be removed in production.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tool-env/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Register Babel require hook for local development\nrequire('babel-register')();\n```\n\n----------------------------------------\n\nTITLE: Adding Packages - Meteor CLI - Bash\nDESCRIPTION: Demonstrates how to add one or more packages to a Meteor project using the Meteor CLI. Optionally, a package version constraint can be specified. Dependencies: Requires Meteor CLI installed and a Meteor project directory. Parameters: package names, optionally with version constraints (e.g., package@version). Outputs direct CLI feedback and alters your .meteor/packages file. Does not handle package removals; see meteor remove.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add [package1] [package2] ...\nmeteor add package@version\n```\n\n----------------------------------------\n\nTITLE: Basic Promise Usage with await Keyword\nDESCRIPTION: Demonstrates how to use the await keyword to pause execution until a Promise resolves. This example creates a delay function that waits for one second before continuing execution.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst delay = async () => {\n  console.log('Waiting...');\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('Done waiting');\n};\n\nawait delay(); // it will wait for 1 second before logging 'Done waiting'\n```\n\n----------------------------------------\n\nTITLE: Adding Session Package via Meteor CLI - Bash\nDESCRIPTION: Demonstrates how to install the Session package in a Meteor project using the meteor command-line interface. This is a prerequisite for using the Session API and its features in client-side JavaScript code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/session.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add session\n```\n\n----------------------------------------\n\nTITLE: Deploying Meteor App to Cloud\nDESCRIPTION: Command line examples for deploying Meteor apps to Cloud hosting\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmeteor deploy myapp.meteorapp.com --free\nmeteor deploy myapp.meteorapp.com --free --mongo\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Import in CommonJS JavaScript\nDESCRIPTION: This snippet shows how to conditionally import a module using CommonJS require, which is not possible with ES2015 import statements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (Meteor.isClient) {\n  require('./client-only-file.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting UI Hooks for DOM Manipulation in Blaze\nDESCRIPTION: Code example showing how to register hooks on container DOM elements to customize insertion, movement, and removal of elements. These hooks override Blaze's default DOM operations and allow for custom behaviors like animations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n_uihooks: {\n  insertElement: function (node, next) {}, // called when Blaze intends to insert node before next\n  moveElement: function (node, next) {}, // called when Blaze intends to move node before next\n  removeElement: function (node) {} // called when Blaze intends to remove node\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Meteor Project\nDESCRIPTION: Command to create a new Meteor project using the CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> meteor create\n```\n\n----------------------------------------\n\nTITLE: Allowing Eval in Browser Policy (JavaScript)\nDESCRIPTION: Permits the creation of JavaScript code from strings using functions like eval().\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowEval()\n```\n\n----------------------------------------\n\nTITLE: Creating a Static HTML Landing Page in Meteor\nDESCRIPTION: This HTML snippet shows a sample static landing page that can be served quickly for improved TTFB (time to first byte). It includes basic HTML structure and placeholders for styles and scripts.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/webapp.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Fast Landing Page</title>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0 user-scalable=no\" />\n    <link rel=\"stylesheet\" href=\"path to your style sheet etc\">\n</head>\n\n    <body>\n        <!-- your content -->\n    </body>\n\n    <script>\n\n    // any functions you need to support your landing page\n\n    </script>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Galaxy APM Package for Meteor\nDESCRIPTION: Command to add the Galaxy APM agent package to a Meteor application for performance monitoring. This package allows your app to send data to Galaxy APM for analysis.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/performance-improvement.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add mdg:meteor-apm-agent\n```\n\n----------------------------------------\n\nTITLE: MongoDB Cursor Find with Limit Example\nDESCRIPTION: Example showing how to handle cursor count behavior changes in MongoDB 5.0 when using find with limits. The new version always applies skip/limit to count() results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.6-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cursor = collection.find({}, { limit: 25 });\n```\n\n----------------------------------------\n\nTITLE: Creating Public Methods with Functional-Style Syntax\nDESCRIPTION: Demonstrates how to create publicly accessible methods (not requiring authentication) using the functional-style syntax with the 'open' helper function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { open } from 'meteor/jam:method';\n\nexport const aPublicMethod = open(async data => {\n  // ... //\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing List Show Page Template in HTML\nDESCRIPTION: Basic template structure for displaying lists with support for page transitions and handling not found cases.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"Lists_show_page\">\n  {{#each listId in listIdArray}}\n    {{> Lists_show (listArgs listId)}}\n  {{else}}\n    {{> App_notFound}}\n  {{/each}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to Version 3.0.1\nDESCRIPTION: Command to update a Meteor project to version 3.0.1. This update includes patch bumps for several packages to ensure they are published using Meteor 3 tooling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/3.0.1.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.1\n```\n\n----------------------------------------\n\nTITLE: Initializing Persistent ReactiveDict in JavaScript\nDESCRIPTION: This snippet shows how to create a ReactiveDict with an optional name argument to enable data persistence during hot code push in Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_97\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ReactiveDict('persistentDictName');\n```\n\n----------------------------------------\n\nTITLE: Handling Login Attempt Validation in Meteor\nDESCRIPTION: Example of a validateLoginAttempt callback that first checks if the login is already allowed. This pattern is useful when you don't need to override previous validation failures.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts-multi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (!attempt.allowed) {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DDP Default Connection URL for Cordova Apps\nDESCRIPTION: Example of using the environment variable DDP_DEFAULT_CONNECTION_URL to set the default DDP server for Meteor applications. This behavior has changed to now work with Cordova apps during the build process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nDDP_DEFAULT_CONNECTION_URL=https://example.com meteor build\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Access Rules for iOS\nDESCRIPTION: Shows how to configure access rules with custom TLS settings for specific domains in Cordova applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nApp.accessRule('https://domain.com', {\n  'minimum-tls-version': 'TLSv1.0',\n  'requires-forward-secrecy': false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Negated Terms in Requirements with Logic Solver in JavaScript\nDESCRIPTION: Illustrates three equivalent ways to require that 'A' is false: directly, via Logic.not, and via forbid. Demonstrates that Logic.not(A) returns a string with '-' prefix, and that negation nesting is handled correctly by Logic.not. Directly related to term manipulation in the Logic Solver constraint system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nsolver.require(\"-A\");\nsolver.require(Logic.not(\"A\"));\nsolver.forbid(\"A\");\n```\n\n----------------------------------------\n\nTITLE: DDP Remote Procedure Call Messages in JSON\nDESCRIPTION: JSON structure for messages used in DDP remote procedure calls, including method invocation, result handling, and update notifications to track when writes have been applied.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n * `method` (client -> server):\n   - `method`: string (method name)\n   - `params`: optional array of EJSON items (parameters to the method)\n   - `id`: string (an arbitrary client-determined identifier for this method call)\n   - `randomSeed`: optional JSON value (an arbitrary client-determined seed\n     for pseudo-random generators)\n * `result` (server -> client):\n   - `id`: string (the id passed to 'method')\n   - `error`: optional Error (an error thrown by the method (or method-not-found)\n   - `result`: optional EJSON item (the return value of the method, if any)\n * `updated` (server -> client):\n   - `methods`: array of strings (ids passed to 'method', all of whose writes\n     have been reflected in data messages)\n```\n\n----------------------------------------\n\nTITLE: Babel Compiler Plugin Caller Option Format\nDESCRIPTION: The structure of the caller option passed to Babel compiler plugins, which includes the name 'meteor' and the target architecture. This helps compilers identify the target environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{ name: \"meteor\", arch }\n```\n\n----------------------------------------\n\nTITLE: Designing a Schema for Efficient DDP Communication in Meteor\nDESCRIPTION: This snippet illustrates a potential schema design that could lead to inefficient DDP communication in Meteor, highlighting the importance of considering Meteor's data loading protocol when designing schemas.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nLists.schema = new SimpleSchema({\n  name: {type: String},\n  todos: {type: [Object]}\n});\n```\n\n----------------------------------------\n\nTITLE: Ensuring Cordova Dependencies for Meteor using Shell\nDESCRIPTION: Checks if the necessary Cordova dependencies required for building and running mobile apps are installed on the system. If dependencies are missing, it attempts to install them.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmeteor ensure-cordova-dependencies\n```\n\n----------------------------------------\n\nTITLE: Calling Meteor Methods Synchronously in JavaScript\nDESCRIPTION: Example of calling a Meteor method synchronously on the server. It shows how to capture the return value or handle exceptions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/methods.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Synchronous call\nconst result = Meteor.call('foo', 1, 2);\n```\n\n----------------------------------------\n\nTITLE: Asserting Array or String Length with Meteor Test JavaScript\nDESCRIPTION: Confirms that the .length property of an object (such as an array or string) matches the expected value. Uses Meteor's test utilities and takes an object, expected length, and an optional message. Fails the test if actual length differs from expected.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.length(obj, expected_length[, message]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Base CSS Styles for Meteor Todo App\nDESCRIPTION: Comprehensive CSS styling for the todo application including app layout, form elements, task list, and responsive design using Flexbox. Includes styling for the app bar, buttons, task form, and task list items.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/5.styles.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family: sans-serif;\n  background-color: #315481;\n  background-image: linear-gradient(to bottom, #315481, #918e82 100%);\n  background-attachment: fixed;\n\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  padding: 0;\n  margin: 0;\n\n  font-size: 14px;\n}\n\nbutton {\n  font-weight: bold;\n  font-size: 1em;\n  border: none;\n  color: white;\n  box-shadow: 0 3px 3px rgba(34, 25, 25, 0.4);\n  padding: 5px;\n  cursor: pointer;\n}\n\nbutton:focus {\n  outline: 0;\n}\n\n.app {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\n.app-header {\n  flex-grow: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  overflow: auto;\n  background: white;\n}\n\n.main::-webkit-scrollbar {\n  width: 0;\n  height: 0;\n  background: inherit;\n}\n\nheader {\n  background: #d2edf4;\n  background-image: linear-gradient(to bottom, #d0edf5, #e1e5f0 100%);\n  padding: 20px 15px 15px 15px;\n  position: relative;\n  box-shadow: 0 3px 3px rgba(34, 25, 25, 0.4);\n}\n\n.app-bar {\n  display: flex;\n  justify-content: space-between;\n}\n\n.app-bar h1 {\n  font-size: 1.5em;\n  margin: 0;\n  display: inline-block;\n  margin-right: 1em;\n}\n\n.task-form {\n  display: flex;\n  margin: 16px;\n}\n\n.task-form > input {\n  flex-grow: 1;\n  box-sizing: border-box;\n  padding: 10px 6px;\n  background: transparent;\n  border: 1px solid #aaa;\n  width: 100%;\n  font-size: 1em;\n  margin-right: 16px;\n}\n\n.task-form > input:focus {\n  outline: 0;\n}\n\n.task-form > button {\n  min-width: 100px;\n  height: 95%;\n  background-color: #315481;\n}\n\n.tasks {\n  list-style-type: none;\n  padding-inline-start: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-block-start: 0;\n  margin-block-end: 0;\n}\n\n.tasks > li {\n  display: flex;\n  padding: 16px;\n  border-bottom: #eee solid 1px;\n  align-items: center;\n}\n\n.tasks > li > span {\n  flex-grow: 1;\n}\n\n.tasks > li > button {\n  justify-self: flex-end;\n  background-color: #ff3046;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TaskForm Component with React Hooks in JSX\nDESCRIPTION: This snippet defines a TaskForm component using React hooks to manage form state. It includes an input field for task text and a submit button.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/3.forms-and-events.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from \"react\";\n\nexport const TaskForm = () => {\n  const [text, setText] = useState(\"\");\n\n  return (\n    <form className=\"task-form\">\n      <input type=\"text\" placeholder=\"Type to add new tasks\" />\n\n      <button type=\"submit\">Add Task</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Filter State in App Component Script (Vue/JavaScript)\nDESCRIPTION: This snippet initializes a reactive state variable `hideCompleted` using `ref(false)` within the `<script setup>` block of the `App.vue` component. This variable controls whether completed tasks should be hidden.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript [imports/ui/App.vue]\n...\nimport { ref } from 'vue';\n\nconst hideCompleted = ref(false);\n\nsubscribe('tasks');\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Renaming Exports and Imports in ES2015 JavaScript\nDESCRIPTION: These snippets show how to rename exports and imports using the 'as' keyword in ES2015 modules.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nexport { g as x };\ng(); // Same as calling `y()` in importer.js\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport { x as y } from './exporter';\ny(); // Same as calling `g()` in exporter.js\n```\n\n----------------------------------------\n\nTITLE: Styled Components Server-Side Rendering Integration\nDESCRIPTION: Advanced example showing integration with styled-components package for handling CSS-in-JS during server-side rendering.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/server-render/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport { renderToString } from \"react-dom/server\";\nimport { ServerStyleSheet } from \"styled-components\"\nimport App from \"/imports/Server\";\n\nonPageLoad(sink => {\n  const sheet = new ServerStyleSheet();\n  const html = renderToString(sheet.collectStyles(\n    <App location={sink.request.url} />\n  ));\n\n  sink.renderIntoElementById(\"app\", html);\n  sink.appendToHead(sheet.getStyleTags());\n});\n```\n\n----------------------------------------\n\nTITLE: Using CommonJS Require in JavaScript\nDESCRIPTION: Demonstrates how to use CommonJS require syntax as an alternative to ES2015 import statements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar UserAccountsCore = require('meteor/useraccounts:core');\nrequire('../imports/startup/client/routes.js');\n```\n\n----------------------------------------\n\nTITLE: Downloading Meteor documentation for AI tools\nDESCRIPTION: Downloads the Meteor documentation in a format optimized for LLMs (Language Model tools). Saves the documentation as a local text file for querying with AI tools.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://docs.meteor.com/llms-full.txt  -o meteor-docs.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Eval in Meteor using BrowserPolicy\nDESCRIPTION: API functions for controlling whether JavaScript eval() and related functions are allowed in your application, which can help mitigate code injection attacks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/browser-policy.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowEval()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowEval()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Module in package.json\nDESCRIPTION: JSON configuration for specifying custom test module paths in package.json. Allows defining separate client and server test files or a single shared test file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"testModule\": {\n      \"client\": \"client/tests.js\",\n      \"server\": \"server/tests.js\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"testModule\": \"tests.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Related Component Files\nDESCRIPTION: Illustrates the recommended directory structure for organizing files related to a single UI component or template (like `Lists_show`). It suggests placing HTML, JavaScript, and CSS/Less files together in the same directory, using consistent base names (e.g., `show.html`, `show.js`, `show.less`). The directory path itself provides the module context (`Lists`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n# The Lists_show template from the Todos example app has 3 files:\nshow.html\nshow.js\nshow.less\n```\n\n----------------------------------------\n\nTITLE: Migrating from Deprecated Meteor.http to HTTP Module\nDESCRIPTION: Example of how to replace the deprecated Meteor.http object with the HTTP module. This involves importing the HTTP module and using its call method for HTTP requests.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HTTP } from \"meteor/http\";\nHTTP.call(\"GET\", url, ...);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection with Invalid Certificate Allowance\nDESCRIPTION: Configuration to allow invalid certificates in MongoDB connection, which is an alternative way to handle self-signed certificate errors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"mongo\": {\n      \"options\": {\n        \"tlsAllowInvalidCertificates\": true\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding the Soft Delete Package with Meteor\nDESCRIPTION: This snippet demonstrates how to add the Soft Delete package to a Meteor application using the command line interface. The package is installed with zero configuration and is ready to use immediately.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/soft-delete.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add jam:soft-delete\n```\n\n----------------------------------------\n\nTITLE: Sharing Variables Between CoffeeScript Files in Meteor Packages\nDESCRIPTION: Demonstrates the use of the experimental 'share' object to share variables between CoffeeScript files within the same Meteor package. This feature allows for package-scoped variables without needing to declare them in separate JavaScript files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/coffeescript.md#2025-04-22_snippet_0\n\nLANGUAGE: CoffeeScript\nCODE:\n```\nshare.foo\n```\n\n----------------------------------------\n\nTITLE: Importing Meteor Task Publications on Server\nDESCRIPTION: This snippet shows how to import the `tasksPublications.js` file in the main server entry point (`server/main.js`). This side-effect import ensures that the 'tasks' publication defined in the imported file is registered and executed by the Meteor server upon startup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport '../imports/api/tasksPublications';\n```\n\n----------------------------------------\n\nTITLE: Customizing External Service User Lookup in Meteor\nDESCRIPTION: Example of the setAdditionalFindUserOnExternalLogin hook structure, which allows customizing how users are found when authenticating through external services. This function is called when no user is found with the default service ID selector.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AccountsServer } from \"meteor/accounts-base\";\nconst options = {\n  //...\n};\nconst accountsServer = new AccountsServer(options);\n\naccountsServer.setAdditionalFindUserOnExternalLogin(\n  ({ serviceName, serviceData, options }) => {\n    // serviceName: String\n    //   The external service name, such as \"google\" or \"twitter\".\n    // serviceData: Object\n    //   The data returned by the service oauth request.\n    // options: Object\n    //   An optional arugment passed down from the oauth service that may contain\n    //   additional user profile information. As the data in `options` comes from an\n    //   external source, make sure you validate any values you read from it.\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Meteor Create Command\nDESCRIPTION: Project creation command with various templates and frameworks support including React, Vue, Apollo, and Svelte.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create [--release <release>] [--bare|--minimal|--full|--react|--vue|--apollo|--svelte|--blaze|--tailwind|--chakra-ui|--solid] <path>\nmeteor create [--release <release>] --example <example_name> [<path>]\nmeteor create [--release <release>] --from <git_url> [<path>]\nmeteor create --list\nmeteor create --package [<package_name>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Meteor Project with React using Shell\nDESCRIPTION: This command initializes a new Meteor project named 'myapp' in the current directory. By default, Meteor includes React as the front-end framework. No specific dependencies are needed beyond having Meteor installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/web-apps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor create myapp\n```\n\n----------------------------------------\n\nTITLE: Adding Apollo Package to Meteor\nDESCRIPTION: Command to add the Apollo integration package to a Meteor project\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/apollo.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add apollo\n```\n\n----------------------------------------\n\nTITLE: Clearing All Offline Data with Meteor and jam:offline\nDESCRIPTION: This snippet shows how to clear all offline data stored using the 'jam:offline' package in a Meteor application. It requires importing the 'clearAll' function from the package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clearAll } from 'meteor/jam:offline';\\n\\nclearAll();\n```\n\n----------------------------------------\n\nTITLE: Authentication Wrapper Template in HTML\nDESCRIPTION: Template for enforcing user authentication before displaying protected content.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"App_forceLoggedIn\">\n  {{#if currentUser}}\n    {{> Template.contentBlock}}\n  {{else}}\n    Please log in see this page.\n  {{/if}}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating New Meteor Project\nDESCRIPTION: Command to create a new Meteor project which can then be configured for Vue integration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmeteor create vue-meteor-app\n```\n\n----------------------------------------\n\nTITLE: Linting a Meteor Project using Shell\nDESCRIPTION: Performs a full build of the Meteor application and executes all configured linters. Any build errors or linting warnings identified during the process are printed to standard output. The '--allow-incompatible-update' option can be used if needed during the build phase.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmeteor lint\n```\n\n----------------------------------------\n\nTITLE: Using Plugin.fs and Plugin.path for Cross-Platform File Operations in Meteor\nDESCRIPTION: Demonstrates how to use Plugin.fs and Plugin.path for cross-platform file operations in Meteor build plugins. It shows path joining, file writing, and path conversion between Unix and OS-specific formats.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/packagejs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// On Windows\nconst fs = Plugin.fs;\nconst path = Plugin.path;\n\nconst filePath = path.join('/C/Program Files', 'Program/file.txt');\nconsole.log(filePath); // Prints '/C/Program Files/Program/file.txt'\n\nfs.writeFileSync(filePath, 'Hello.'); // Writes to 'C:\\Program Files\\Program\\file.txt'\n\nconsole.log(Plugin.convertToOsPath(filePath)); // Prints 'C:\\Program Files\\Program\\file.txt'\n```\n\n----------------------------------------\n\nTITLE: Installing Monti APM Package in Meteor\nDESCRIPTION: Command to add the Monti APM agent package to a Meteor project for application performance monitoring.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/performance-improvement.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add montiapm:agent\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor App with Svelte\nDESCRIPTION: Command to create a Meteor app with Svelte and MongoDB. Includes a list of npm and Meteor packages that are included by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --svelte app-name\n```\n\n----------------------------------------\n\nTITLE: DDP Connection Messages in JSON\nDESCRIPTION: JSON structure for the messages exchanged during DDP connection establishment, including 'connect', 'connected', and 'failed' messages with their respective fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n * `connect` (client -> server)\n   - `session`: string (if trying to reconnect to an existing DDP session)\n   - `version`: string (the proposed protocol version)\n   - `support`: array of strings (protocol versions supported by the client,\n      in order of preference)\n * `connected` (server->client)\n   - `session`: string (an identifier for the DDP session)\n * `failed` (server->client)\n   - `version`: string (a suggested protocol version to connect with)\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor to a Specific Release using Bash\nDESCRIPTION: This Bash command utilizes the Meteor CLI tool to update the current project to a specific release version, in this case, v2.15. It ensures the project uses the dependencies and features associated with that release. This command should be run within a Meteor project directory and requires the Meteor tool to be installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 2.15\n\n```\n\n----------------------------------------\n\nTITLE: Sending Messages from Parent Process\nDESCRIPTION: Example of enabling message sending capability on a child process object. The enable function adds a sendMessage method to the child process that can send topic-based messages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/inter-process-messaging/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchildProcess.sendMessage(topic, payload)\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables by Name in ES2015 JavaScript\nDESCRIPTION: This snippet shows how to export variables by name at the end of a module file, rather than prefixing their declarations with the export keyword.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nfunction g() { ... }\nlet h = g();\n\n// At the end of the file\nexport { g, h };\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Server in Meteor JavaScript\nDESCRIPTION: The Meteor.disconnect() function disconnects the client from the server and stops all live data updates. This can be useful for saving battery on mobile devices when real-time updates are not required.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/connections.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Reserved Keys in Meteor Logging Objects\nDESCRIPTION: List of keys that are reserved and cannot be used in the root of objects passed to logging functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/logging.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  \"time\",\n  \"timeInexact\",\n  \"level\",\n  \"file\",\n  \"line\",\n  \"program\",\n  \"originApp\",\n  \"satellite\",\n  \"stderr\";\n```\n\n----------------------------------------\n\nTITLE: Securing Meteor Methods with Server-Only Import\nDESCRIPTION: Demonstrates how to create a method that imports a function from a server folder to ensure the server function code is not shipped to the client. This pattern helps maintain security for server-side operations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  serverOnly: true,\n  async run(args) {\n    import { serverFunction } from '/server/serverFunction';\n\n    serverFunction(args);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Imports in Meteor\nDESCRIPTION: Illustrates nested imports in Meteor, which are imports used outside the root of a module. This feature is unique to Meteor but has limitations with async modules when using top level await.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/top-level-await.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (Meteor.isClient) {\n  import './init-client.js';\n}\n\nexport function showNotification(message) {\n  import show from './notifications.js';\n\n  show(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Meteor with Redis Oplog\nDESCRIPTION: Command to start Meteor with the Redis Oplog configuration using the settings file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run --settings settings.json\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Collection in TypeScript\nDESCRIPTION: TypeScript code to define a Meteor collection with type definitions for the 'another-customer' model.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mongo } from 'meteor/mongo';\n\nexport type AnotherCustomer = {\n  _id?: string;\n  name: string;\n  createdAt: Date;\n}\n\nexport const AnotherCustomerCollection = new Mongo.Collection<AnotherCustomer, AnotherCustomer>('another-customer');\n```\n\n----------------------------------------\n\nTITLE: Specifying Meteor Version Dependencies\nDESCRIPTION: Demonstrates how to specify dependencies on Meteor core packages from a specific Meteor release using api.versionsFrom() in the package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// Use versions of core packages from Meteor 1.2.1\napi.versionsFrom('1.2.1');\n\napi.use([\n  // Don't need to specify version because of versionsFrom above\n  'ecmascript',\n  'check',\n\n  // Still need to specify versions of non-core packages\n  'mdg:validated-method@1.2.0',\n  'mdg:validation-error@0.1.0'\n]);\n```\n\nLANGUAGE: js\nCODE:\n```\napi.use([\n  'ecmascript@0.1.6',\n  'check@1.1.0',\n  'mdg:validated-method@1.2.0',\n  'mdg:validation-error@0.1.0'\n]);\n```\n\n----------------------------------------\n\nTITLE: Displaying Incomplete Task Count in App Component Template (Vue)\nDESCRIPTION: This snippet updates the `<h1>` tag in the `App.vue` template to conditionally display the count of incomplete tasks. A `<span>` with the count (`({{ incompleteTasksCount }})`) is rendered using `v-if` only when `incompleteTasksCount` is greater than 0.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_33\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/App.vue]\n<template>\n...\n  <h1 class=\"text-4xl font-bold text-gray-800 my-4\">üöÄ To-Do List\n    <span v-if=\"incompleteTasksCount > 0\" class=\"text-xl font-light text-gray-600\">({{ incompleteTasksCount }})</span>\n  </h1>\n...\n</template>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Module Whitelist for Dynamic Imports in JavaScript\nDESCRIPTION: Shows how to create a module whitelist to enable dynamic imports with computed paths\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/dynamic-import.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (false) {\n  import(\"/libs/example.js\");\n  import(\"/libs/another-example.js\");\n  import(\"/libs/yet-another-example.js\");\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Find Method Options\nDESCRIPTION: Exposes polling interval options for collection find operations when disabling oplog\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\ncoll.find({ _disableOplog: true, _pollingInterval: Number })\n```\n\n----------------------------------------\n\nTITLE: Rendering Routes with BlazeLayout in JavaScript\nDESCRIPTION: Using BlazeLayout to render a specific template when a route is accessed in Flow Router.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFlowRouter.route('/lists/:_id', {\n  name: 'Lists.show',\n  action() {\n    BlazeLayout.render('App_body', {main: 'Lists_show_page'});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Object Logging Example\nDESCRIPTION: Example of logging an object with special keys 'message' and 'app' along with nested error object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/logging.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nLog.info({message: 'warning', app: 'DESKTOP', error: { property1: 'foo', property2: 'bar', property3: { foo: 'bar' }} })\n```\n\n----------------------------------------\n\nTITLE: Installing Flowbite Dependencies\nDESCRIPTION: Command to install Flowbite and Flowbite React packages via npm\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save flowbite flowbite-react\n```\n\n----------------------------------------\n\nTITLE: Modern Error Handling with try/catch and await\nDESCRIPTION: Demonstrates error handling in async/await code with try/catch blocks. This pattern is more readable and follows standard JavaScript error handling conventions compared to callback-based approaches.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\n\ntry {\n  const result = await Meteor.callAsync('myMethod', 'arg1', 'arg2');\n  console.log('Method result:', result);\n} catch (error) {\n  console.error('Method error:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Helmet Package in Meteor\nDESCRIPTION: Basic installation command for adding the Helmet security package to a Meteor project using npm.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nmeteor npm install helmet --save\n```\n\n----------------------------------------\n\nTITLE: Programmatic Route Navigation in JavaScript\nDESCRIPTION: Example of programmatically changing routes when creating new lists.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { insert } from '../../api/lists/methods.js';\n\nTemplate.App_body.events({\n  'click .js-new-list'() {\n    const listId = insert.call();\n    FlowRouter.go('Lists.show', { _id: listId });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/runtime in Meteor 1.6.1\nDESCRIPTION: Command to install the @babel/runtime package, which replaces the babel-runtime package in Meteor 1.6.1 due to the upgrade to Babel 7.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nmeteor npm install @babel/runtime\n```\n\n----------------------------------------\n\nTITLE: Create Archives Collection in Meteor\nDESCRIPTION: This snippet demonstrates how to create an Archives collection in a Meteor application to store archived documents. The collection uses MongoDB under the hood.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Archives = new Mongo.Collection('archives');\n```\n\n----------------------------------------\n\nTITLE: Importing Tasks Publication in Server Code\nDESCRIPTION: Updates server startup code to import the tasks publication, which makes the publication available when the server starts.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/2.collections.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n...\nimport { TasksCollection } from '/imports/api/TasksCollection';\n\nimport \"../imports/api/TasksPublications\"; // [!code highlight]\n\nconst insertTask = taskText => TasksCollection.insertAsync({ text: taskText });\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Globals for ESLint - JS\nDESCRIPTION: Example for adding global variables to ESLint configuration. Used to inform ESLint of global variables defined in the application. Globals can be set to true (writable) or false (readonly). Intended to be part of the JSON configuration file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/setup.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  /* ... */\n  \"globals\": {\n    \"MyCollection\": true,\n    \"moment\": false\n  },\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK preferences in Meteor Cordova project\nDESCRIPTION: Configuration for mobile-config.js file that sets the required Android SDK version preferences for Meteor 2.14 Cordova compatibility. It specifies target SDK version 33 and minimum SDK version 28.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.14-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nApp.setPreference('android-targetSdkVersion', '33')\nApp.setPreference('android-minSdkVersion', '28')\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Storage for Meteor Accounts (JSON)\nDESCRIPTION: Configures Meteor's accounts system to use Session Storage instead of the default Local Storage for persisting login tokens. This setting is placed within the `public.packages.accounts` section of the Meteor settings file (`settings.json`). Session Storage does not persist across browser sessions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ... all other settings,\n  \"public\": {\n    // ... all your public settings\n    \"packages\": {\n      \"accounts\": {\n        \"clientStorage\": \"session\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Adding a Custom Rate Limiting Rule in Meteor\nDESCRIPTION: Example of defining a rate limiting rule for login attempts by non-admin users and adding it to DDPRateLimiter. The rule allows up to 5 login attempts every 1000 milliseconds.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/methods.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Define a rule that matches login attempts by non-admin users.\nconst loginRule = {\n  userId(userId) {\n    const user = Meteor.users.findOne(userId);\n    return user && user.type !== 'admin';\n  },\n\n  type: 'method',\n  name: 'login'\n};\n\n// Add the rule, allowing up to 5 messages every 1000 milliseconds.\nDDPRateLimiter.addRule(loginRule, 5, 1000);\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor using curl on Linux and OS X\nDESCRIPTION: Alternative installation method for Linux and OS X using curl. Fetches and runs the installation script directly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://install.meteor.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Toggle Logic in App Component Script (Vue/JavaScript)\nDESCRIPTION: This snippet defines the `toggleHideCompleted` function within the `<script setup>` block of `App.vue`. This function simply inverts the boolean value of the reactive `hideCompleted` ref.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript [imports/ui/App.vue]\n...\nconst toggleHideCompleted = () => {\n  hideCompleted.value = !hideCompleted.value\n};\n</script>\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Importing npm Package - Default Export\nDESCRIPTION: Examples of importing a default export from an npm package using both ES6 import and CommonJS require syntax\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\n\n// this is equivalent to the standard node require:\nconst moment = require('moment');\n```\n\n----------------------------------------\n\nTITLE: OAuth Registration with Fibers (Old Method)\nDESCRIPTION: Example of OAuth registration using Fibers and synchronous methods in older Meteor versions. This approach uses Meteor.wrapAsync to handle asynchronous operations synchronously.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.9-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nOAuth.registerService('github', 2, null, (query) => {\n  const accessTokenCall = Meteor.wrapAsync(getAccessToken);\n  const accessToken = accessTokenCall(query);\n  const identityCall = Meteor.wrapAsync(getIdentity);\n‚Ä¶\n});\n```\n\n----------------------------------------\n\nTITLE: Session.equals vs Session.get Comparison\nDESCRIPTION: Example demonstrating the equivalent usage of Session.equals and Session.get for scalar values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/session.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSession.get('key') === value\nSession.equals('key', value)\n```\n\n----------------------------------------\n\nTITLE: Logging into a Meteor Developer Account\nDESCRIPTION: Logs the user into their Meteor developer account via the command line. Prompts for username and password. The '--email' flag allows logging in using the associated email address instead of the username.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor login [--email]\n```\n\n----------------------------------------\n\nTITLE: Cloning Meteor.Error Objects with EJSON\nDESCRIPTION: Support for properly cloning Meteor.Error objects with EJSON, ensuring they are correctly serialized in DDP even when thrown through Futures.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nEJSON.clone\n```\n\n----------------------------------------\n\nTITLE: Importing Less Stylesheets in Meteor\nDESCRIPTION: Examples showing how to import Less files using both relative and absolute paths with Meteor's {} syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n@import '../stylesheets/colors.less';\n@import '{}/imports/ui/stylesheets/button.less';\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor using NPX\nDESCRIPTION: This snippet demonstrates how to install the latest version of Meteor using the npx command. The command is presented for shell environments. No permanent installation to global npm packages is performed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/meteor-installer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor\n```\n\n----------------------------------------\n\nTITLE: Basic User Services Object Structure for 2FA\nDESCRIPTION: Shows the structure of the services object in user document after generating 2FA secret\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/accounts-2fa.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nservices: {\n  ...\n  twoFactorAuthentication: {\n    secret: \"***\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Node.js Memory Limit for Meteor Inspector Profiling (Bash)\nDESCRIPTION: Provides a Bash command example to increase the Node.js heap memory limit using `NODE_OPTIONS=\"--max-old-space-size=4096\"`. This is recommended when using Meteor's inspector profiling (`METEOR_INSPECT`) to prevent potential out-of-memory errors caused by the profiler's increased memory consumption.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/PERFORMANCE.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS=\"--max-old-space-size=4096\" METEOR_INSPECT=bundler.bundle meteor ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Module Entry Points in package.json for Meteor\nDESCRIPTION: JSON configuration for specifying client and server entry point modules in package.json, which overrides Meteor's default module loading semantics and eliminates the need for imports directories.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"mainModule\": {\n    \"client\": \"client/main.js\",\n    \"server\": \"server/main.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Satisfying audit-argument-checks in Meteor Methods\nDESCRIPTION: This snippet demonstrates how to satisfy the `audit-argument-checks` coverage checker in Meteor methods or publish functions that don't need to validate their arguments.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/audit-argument-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncheck(arguments, [Match.Any])\n```\n\n----------------------------------------\n\nTITLE: Connecting to DDP Servers in Meteor\nDESCRIPTION: DDP.connect replaces Meteor.connect for creating server-to-server DDP connections using websockets.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_118\n\nLANGUAGE: JavaScript\nCODE:\n```\nDDP.connect\n```\n\n----------------------------------------\n\nTITLE: Importing Angular in Meteor 1.3\nDESCRIPTION: Shows how to import Angular and angular-meteor directly from npm instead of relying on global variables in a Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport angular from 'angular';\nimport angular-meteor from 'angular-meteor';\n```\n\n----------------------------------------\n\nTITLE: Importing Client Startup Files in Meteor\nDESCRIPTION: Index file that imports all client-side startup configurations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport './useraccounts-configuration.js';\nimport './routes.js';\n```\n\n----------------------------------------\n\nTITLE: Default Meteor.applyAsync Options Configuration\nDESCRIPTION: Shows the default options used by the package for Meteor.applyAsync, including returning stub values and throwing stub exceptions to improve client-side development experience.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Make it possible to get the ID of an inserted item\n  returnStubValue: true,\n\n  // Don't call the server method if the client stub throws an error, so that we don't end\n  // up doing validations twice\n  throwStubExceptions: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Hook in Meteor 1.3.3.1\nDESCRIPTION: Introduction of Accounts.onLogout() hook in Meteor 1.3.3.1, analogous to the existing Accounts.onLogin() hook.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.onLogout()\n```\n\n----------------------------------------\n\nTITLE: Allowing Inline Styles in Browser Policy (JavaScript)\nDESCRIPTION: Permits inline style tags and style attributes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowInlineStyles()\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Globally with Path Management Disabled\nDESCRIPTION: This snippet outlines how to install Meteor globally using npm while preventing automatic PATH modification by setting 'ignore-meteor-setup-exec-path'. The environment variable 'npm_config_ignore_meteor_setup_exec_path' can alternatively be set to 'true'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/meteor-installer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g meteor --ignore-meteor-setup-exec-path\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Oplog URL\nDESCRIPTION: Environment variable setup for MongoDB oplog connection with replica set configuration\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/environment-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_OPLOG_URL=\"mongodb://user:password@myserver.com:10139/local?replicaSet=(your replica set)&authSource=(your auth source)\"\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Package in Meteor Application\nDESCRIPTION: Command to add the TypeScript package to an existing Meteor application. This enables support for .ts and .tsx files in the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/typescript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add typescript\n```\n\n----------------------------------------\n\nTITLE: Importing Styles from Atmosphere Packages in LESS\nDESCRIPTION: LESS syntax for importing style files from Atmosphere packages. This uses the '{package-name}' syntax to reference files designated as 'import' files within the package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-atmosphere-packages.md#2025-04-22_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n@import '{prefix:package-name}/buttons/styles.import.less';\n```\n\n----------------------------------------\n\nTITLE: Detecting Synchronization in Meteor with isSyncing\nDESCRIPTION: Shows how to detect when the auto sync process is occurring in a Meteor application. It uses the 'isSyncing' reactive variable from the 'jam:offline' package. No special setup is required beyond the package import.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isSyncing } from 'meteor/jam:offline';\\n\\nisSyncing(); // you can wrap this in a Tracker.autorun to detect when it changes\n```\n\n----------------------------------------\n\nTITLE: Meteor Update Command\nDESCRIPTION: Dependency update commands for upgrading Meteor projects, including package updates and release management.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update\nmeteor update --patch\nmeteor update --release <release>\nmeteor update --packages-only\nmeteor update [packageName packageName2 ...]\nmeteor update --all-packages\n```\n\n----------------------------------------\n\nTITLE: Atmosphere Package Variable Scoping in JavaScript\nDESCRIPTION: JavaScript example demonstrating the difference between local scope and package scope variables in Atmosphere packages. Local variables are not visible outside their block, while package scope variables are visible to all files in the package and to the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-atmosphere-packages.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/**\n * local scope - this variable is not visible outside of the block it is\n * declared in and other packages and your app won't see it\n */\nconst alicePerson = {name: \"alice\"};\n\n/**\n * package scope - this variable is visible to every file inside of the\n * package where it is declared and to your app\n */\nbobPerson = {name: \"bob\"};\n```\n\n----------------------------------------\n\nTITLE: Publication Test Implementation\nDESCRIPTION: Test suite for the notes publication showing how to test publication handlers using expect assertions\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport expect from 'expect';\n\nimport { Notes } from './notes';\n\n describe('notes', function () {\n   const noteOne = {\n     _id: 'testNote1',\n     title: 'Groceries',\n     body: 'Milk, Eggs and Oatmeal'\n     userId: 'userId1'\n   };\n\n   beforeEach(function () {\n     Notes.remove({});\n     Notes.insert(noteOne);\n   });\n\n it('should return a users notes', function () {\n      const res = Meteor.server.publish_handlers['user.notes'].apply({ userId: noteOne.userId });\n      const notes = res.fetch();\n\n      expect(notes.length).toBe(1);\n      expect(notes[0]).toEqual(noteOne);\n    });\n\n  it('should return no notes for user that has none', function () {\n      const res = Meteor.server.publish_handlers.notes.apply({ userId: 'testid' });\n      const notes = res.fetch();\n\n      expect(notes.length).toBe(0);\n    });  \n });\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Using YAML\nDESCRIPTION: Full ESLint configuration example in YAML format, providing an alternative to JSON. Requires renaming the configuration file to .eslint.yaml. Features include ECMAScript 6 support, environments and plugins for Meteor and Airbnb style guide.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/setup.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\n  root: true\n\n  env:\n    es6: true\n    browser: true\n    node: true\n    meteor: true\n\n  parserOptions:\n    ecmaVersion: 6\n    sourceType: module\n    ecmaFeatures:\n      jsx: true\n\n  plugins:\n    - meteor\n\n  extends:\n    - airbnb/base\n    - plugin:meteor/recommended\n\n  globals:\n    # Collections\n    MyCollection: true\n    # ..\n\n    # Packages\n    moment: false # exported by momentjs:moment\n    # ..\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks After Method Creation in Meteor-RPC\nDESCRIPTION: Shows how to add custom hooks to a method after it has been created. Includes hooks for before resolution, after resolution, and error handling to provide advanced control over method execution lifecycle.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { z } from \"zod\";\n\nconst server = createModule()\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .build();\n\n// you can add hooks after the method has been created\nserver.bar.addBeforeResolveHook((raw, parsed) => {\n  console.log(\"before resolve\", raw, parsed);\n});\n\nserver.bar.addAfterResolveHook((raw, parsed, result) => {\n  console.log(\"after resolve\", raw, parsed, result);\n});\n\nserver.bar.addErrorResolveHook((err, raw, parsed) => {\n  console.log(\"on error\", err, raw, parsed);\n});\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Importing Publication Strategies in Meteor\nDESCRIPTION: Demonstrates how to import publication strategies from the DDPServer module in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DDPServer } from \"meteor/ddp-server\";\n\nconst { SERVER_MERGE, NO_MERGE_NO_HISTORY, NO_MERGE } =\n  DDPServer.publicationStrategies;\n```\n\n----------------------------------------\n\nTITLE: Installing Atom ESLint Packages using APM\nDESCRIPTION: Installs necessary Atom packages (`language-babel`, `linter`, `linter-eslint`) using the Atom Package Manager (apm) command line tool to enable ESLint integration within the Atom editor for JavaScript and JSX linting.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napm install language-babel\napm install linter\napm install linter-eslint\n```\n\n----------------------------------------\n\nTITLE: Setting Cordova WebAppStartupTimeout Preference\nDESCRIPTION: Example of how to set the WebAppStartupTimeout preference in mobile-config.js for Cordova apps.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.setPreference(\"WebAppStartupTimeout\", \"10000\");\n```\n\n----------------------------------------\n\nTITLE: Implementing a Linter Class for Meteor Build Plugin\nDESCRIPTION: Shows the implementation of a linter class with the required 'processFilesForPackage' method that checks each file for linting errors and reports them using the file.error method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLinter {\n  processFilesForPackage(files, options) {\n    files.forEach((file) => {\n      // Lint the file.\n      const lint = lintFile(file.getContentsAsString());\n\n      if (lint) {\n        // If there are linting errors, output them.\n        const { message, line, column } = lint;\n        file.error({ message, line, column });\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Logging Package\nDESCRIPTION: Command to add the logging package to a Meteor project using the meteor package manager.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add logging\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery Dependencies for Meteor 1.8.3\nDESCRIPTION: Command to install jQuery npm package required for applications using blaze-html-templates after upgrading to Meteor 1.8.3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm i jquery\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering a Not-Found Template in Blaze (HTML)\nDESCRIPTION: This Blaze template snippet (`Lists_show_page`) demonstrates how to handle cases where a route is valid but the expected data is missing. It uses an `{{#each ... else}}` block: if the `listIdArray` contains items, it iterates and renders the `Lists_show` template for each; otherwise (if `listIdArray` is empty), it renders the `App_notFound` template.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"Lists_show_page\">\n  {{#each listId in listIdArray}}\n    {{> Lists_show (listArgs listId)}}\n  {{else}}\n    {{> App_notFound}}\n  {{/each}}\n<template>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Query with Undefined Values Example\nDESCRIPTION: Example MongoDB query demonstrating the breaking change in Meteor 1.6.1 where undefined values are now removed from queries instead of being converted to null.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// return data pertaining to the current user\ndb.privateUserData.find({\n    userId: currentUser._id // undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Circular Reference Causing Infinite Loop in JavaScript\nDESCRIPTION: This example illustrates a circular reference in reactive computations that leads to an infinite loop. It demonstrates the importance of avoiding circular dependencies in reactive code to prevent the Tracker flush cycle from getting stuck.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar scores = new ReactiveDict;\n\nTracker.autorun(function () {\n  scores.set(\"a\", scores.get(\"b\") + 1);\n});\n\nTracker.autorun(function () {\n  scores.set(\"b\", scores.get(\"a\") + 1);\n});\n\nTracker.flush();\n```\n\n----------------------------------------\n\nTITLE: Blaze Template Test Helper\nDESCRIPTION: Helper utility for rendering and testing Blaze templates in an isolated environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport isString from 'lodash.isString';\nimport { Template } from 'meteor/templating';\nimport { Blaze } from 'meteor/blaze';\nimport { Tracker } from 'meteor/tracker';\n\nconst withDiv = function withDiv(callback) {\n  const el = document.createElement('div');\n  document.body.appendChild(el);\n  let view = null\n  try {\n    view = callback(el);\n  } finally {\n    if (view) Blaze.remove(view)\n    document.body.removeChild(el);\n  }\n};\n\nexport const withRenderedTemplate = function withRenderedTemplate(template, data, callback) {\n  withDiv((el) => {\n    const ourTemplate = isString(template) ? Template[template] : template;\n    const view = Blaze.renderWithData(ourTemplate, data, el);\n    Tracker.flush();\n    callback(el);\n    return view\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Appending iOS Launch Storyboard Images in Meteor (JavaScript/XML)\nDESCRIPTION: Uses `App.appendToConfig` within `mobile-config.js` to directly insert XML configuration into the generated Cordova `config.xml`. This specific example demonstrates adding `<splash>` elements for iOS launch storyboard images, Apple's recommended approach, referencing universal image assets.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nApp.appendToConfig(`\n  <splash src=\"../../../app/path/to/Default@2x~universal~anyany.png\" />\n  <splash src=\"../../../app/path/to/Default@3x~universal~anyany.png\" />\n`);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collection Definition with Mutation Methods\nDESCRIPTION: Creating a new Mongo collection with option to disable default mutation methods\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nnew Mongo.Collection(name, { defineMutationMethods: false })\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.0.4\nDESCRIPTION: Update your project to Meteor version 3.0.4 using this command. It's essential to ensure your project remains up-to-date with recent changes and improvements in this release.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.4\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.clearTimeout\nDESCRIPTION: Clears a timeout previously set with Meteor.setTimeout using the returned handle.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/timers.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.clearTimeout(timeoutHandle);\n```\n\n----------------------------------------\n\nTITLE: Enforcing Avoidance of Meteor.setTimeout with Zero Delay in Meteor (JavaScript)\nDESCRIPTION: These snippets demonstrate various usages of Meteor.setTimeout and Meteor.defer relevant to the no-zero-timeout linting rule. The first group contains examples that will trigger a warning for using Meteor.setTimeout with a zero delay or unspecified delay (interpreted as zero), either directly or via bracket notation. These highlight situations where Meteor.defer is preferred for asynchronous execution. No external dependencies are required beyond the Meteor framework. Inputs are callbacks and delay amounts; the problematic input is a delay of 0. These usages add unnecessary delay or can lead to non-ideal queuing behavior.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-zero-timeout.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nMeteor.setTimeout(function () {}, 0)\nMeteor.setTimeout(function () {})\nMeteor[\"setTimeout\"](function () {}, 0)\n\nMeteor.setTimeout(foo, 0)\nMeteor.setTimeout(foo)\nMeteor[\"setTimeout\"](foo, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dinner Guest Constraints\nDESCRIPTION: Demonstrates how to create a solver instance and add logical constraints for a dinner guest selection problem.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar solver = new Logic.Solver();\n\nsolver.require(Logic.atMostOne(\"Alice\", \"Bob\"));\nsolver.require(Logic.or(\"Bob\", \"Charlie\"));\n```\n\n----------------------------------------\n\nTITLE: Blaze Template Helper for React Component\nDESCRIPTION: JavaScript code showing how to create a Blaze template helper that provides a React component\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { Template } from 'meteor/templating';\n\nimport './userDisplay.html';\nimport UserAvatar from './UserAvatar.js';\n\nTemplate.userDisplay.helpers({\n  UserAvatar() {\n    return UserAvatar;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing specific version of Meteor using curl\nDESCRIPTION: Installs a specific version of Meteor.js (2.8 in this example) using curl. Useful when you need a particular version for compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://install.meteor.com/\\?release\\=2.8 | sh\n```\n\n----------------------------------------\n\nTITLE: Advanced AppCache Configuration with Callback\nDESCRIPTION: Demonstrates how to implement advanced AppCache enabling/disabling logic using a callback function that evaluates conditions on each request.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/appcache.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.AppCache.config({\n  // This option is available starting from appcache@1.2.4\n  enableCallback: () => {\n    if (!getSettingsFromDb(\"public.appcache_enabled\")) {\n      return false;\n    }\n\n    const validation = validateClientCert({\n      clientCertPayload: req.headers[\"x-client-cert\"],\n      url: req.url.href,\n    });\n\n    return validation.passed;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.1.2\nDESCRIPTION: Run this command to update your Meteor project to version 3.1.2. This ensures your project includes the latest security updates, performance improvements, and fixes provided in this release.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.1.2\n```\n\n----------------------------------------\n\nTITLE: Adding Cordova Platforms in Meteor - Shell\nDESCRIPTION: Adds Android and iOS platforms to a Meteor Cordova project, allowing cross-platform mobile app development. Each command registers the platform for subsequent build or run commands. No additional dependencies are required except Meteor and its Cordova integration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Android\nmeteor add-platform android\n\n# iOS (only works on macOS)\nmeteor add-platform ios\n```\n\n----------------------------------------\n\nTITLE: Using Tinytest.only for Selective Test Execution\nDESCRIPTION: Shows how to use Tinytest.only and Tinytest.onlyAsync to selectively run tests in Meteor's Tinytest framework. This allows developers to focus on specific tests during development.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nTinytest.only\nTinytest.onlyAsync\n```\n\n----------------------------------------\n\nTITLE: React Component in Blaze Template\nDESCRIPTION: Example of using React components within Blaze templates using the react-template-helper\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"userDisplay\">\n  <div>Hello, {{username}}</div>\n  <div>{{> React component=UserAvatar userId=_id}}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Logging Autoupdate Subscription Status in Meteor\nDESCRIPTION: This JavaScript snippet logs the ready and inactive status of the autoupdate subscription, helping to diagnose issues with version updates not being received by the client.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ready, inactive } = _.chain(Meteor)\n  .get('default_connection._subscriptions', {})\n  .toPairs()\n  .map(1)\n  .find({ name: 'meteor_autoupdate_clientVersions' })\n  .pick(['inactive', 'ready']) // comment this to see all options\n  .value();\nconsole.log('ready:', ready);\nconsole.log('inactive:', inactive);\n```\n\n----------------------------------------\n\nTITLE: Using Template Helpers in Meteor\nDESCRIPTION: Demonstrates how to define helpers for Meteor templates to avoid conflicts with new template functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_143\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.helpers()\n```\n\n----------------------------------------\n\nTITLE: Installing zodern:types Package in MeteorJS (Bash)\nDESCRIPTION: This command uses the Meteor command-line interface (CLI) to add the `zodern:types` package as a dependency to the current MeteorJS project. This package is essential for providing TypeScript type definitions for Meteor's core packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/using-core-types.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add zodern:types\n```\n\n----------------------------------------\n\nTITLE: Setting testOnly Flag for Meteor Packages\nDESCRIPTION: Example of how to mark a Meteor package as testOnly in Package.describe, so it only runs during app testing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_80\n\nLANGUAGE: JavaScript\nCODE:\n```\nPackage.describe({\n  testOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Collection Index Creation Method in MongoDB\nDESCRIPTION: Shows the migration step to replace the deprecated _ensureIndex method with createIndex for MongoDB collections. This change aligns with new MongoDB naming conventions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Old method\n// collection._ensureIndex(...);\n\n// New method\ncollection.createIndex(...);\n```\n\n----------------------------------------\n\nTITLE: Object Method Shorthand Syntax\nDESCRIPTION: Example of ES2015 object method shorthand syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = {\n  oldWay: function (a, b) { ... },\n  newWay(a, b) { ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Restricting Frame Origin in Browser Policy (JavaScript)\nDESCRIPTION: Allows the app to render only inside frames loaded by a specific origin. Limited to one origin and not supported in Chrome or Safari.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.restrictToOrigin(origin)\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Login Service with Meteor CLI (Bash)\nDESCRIPTION: This snippet adds the accounts-github package to your Meteor project via the CLI, enabling login with GitHub through Meteor's OAuth system. Required before you can invoke the GitHub login method in client or server code. No parameters needed; the Meteor CLI must be available.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add accounts-github\n```\n\n----------------------------------------\n\nTITLE: Using URL with Fetch in Meteor\nDESCRIPTION: Example showing how to use URL object with fetch API for making HTTP requests in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/url.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URL } from 'meteor/url';\nimport { fetch } from 'meteor/fetch';\n\nconst url = new URL('https://www.example.com/api/reportVisit');\n\nfetch(url, {\n    method: 'POST',\n    body: JSON.stringify({ siteId: 11 })\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor App with Specific Release\nDESCRIPTION: Command to create a Meteor app with a specified release version. Can be combined with other flags for different frameworks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create app-name --release {meteor-version}\n```\n\n----------------------------------------\n\nTITLE: Using UUID package in Meteor JavaScript\nDESCRIPTION: Shows how to use the uuid npm package as a replacement for the deprecated Meteor.uuid function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nimport uuid from \"uuid\";\nconsole.log(uuid());\n```\n\n----------------------------------------\n\nTITLE: Installing CoffeeScript in Meteor\nDESCRIPTION: Command to add CoffeeScript support to a Meteor project via package installation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add coffeescript\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Module Entry Points in package.json\nDESCRIPTION: Specifies both main modules and test modules in package.json, allowing control over which test files are loaded by the meteor test command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    },\n    \"testModule\": \"tests.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Client Startup Module in Meteor\nDESCRIPTION: Main client entry point importing all startup code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport '/imports/startup/client';\n```\n\n----------------------------------------\n\nTITLE: ES2015 Class Definition Example\nDESCRIPTION: Example showing class definition syntax with inheritance in ES2015.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Base {\n  constructor(a, b) {\n    this.value = a * b;\n  }\n}\n\nclass Derived extends Base {\n  constructor(a, b) {\n    super(a + 1, b + 1);\n  }\n}\n\nvar d = new Derived(2, 3);\nd.value; // 12\n```\n\n----------------------------------------\n\nTITLE: Adding Password Support to Meteor Application\nDESCRIPTION: Command to add the accounts-password package to a Meteor project. This enables password-based authentication functionality.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/passwords.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add accounts-password\n```\n\n----------------------------------------\n\nTITLE: Setting ANDROID_HOME, ANDROID_SDK_ROOT, and PATH for Android SDK - Shell\nDESCRIPTION: Configures the ANDROID_HOME and ANDROID_SDK_ROOT variables, adding Android SDK command-line utilities to the user's PATH for Unix-based systems. These settings should be included in .bashrc/.zshrc for repeatable environment initialization, enabling the use of build, emulator, and device management commands.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport ANDROID_SDK_ROOT=${ANDROID_HOME}\nexport PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH\n```\n\n----------------------------------------\n\nTITLE: MongoDB Aggregation Update Example\nDESCRIPTION: Examples showing how to handle MongoDB aggregation results in both MongoDB 2.x and 3.x versions using different callback styles.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// With MongoDB 2.x, callback style:\nrawCollection.aggregate(\n  pipeline,\n  (error, results) => {...}\n);\n\n// With MongoDB 2.x, wrapAsync style:\nconst results = Meteor.wrapAsync(\n  rawCollection.aggregate,\n  rawCollection\n)(pipeline);\n\n// With MongoDB 3.x, callback style:\nrawCollection.aggregate(\n  pipeline,\n  (error, aggregationCursor) => {\n    ...\n    const results = aggregationCursor.toArray();\n    ...\n  }\n);\n\n// With MongoDB 3.x, wrapAsync style:\nconst results = Meteor.wrapAsync(\n  rawCollection.aggregate,\n  rawCollection\n)(pipeline).toArray();\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Sub-expressions in Meteor Templates\nDESCRIPTION: Shows the new syntax for using Handlebars sub-expressions in Meteor templates, allowing for nested helper calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{helper (anotherHelper arg1 arg2)}}\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Application\nDESCRIPTION: Commands to navigate to the project directory and start the Meteor application server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app\nmeteor\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor to Version 2.15\nDESCRIPTION: Command to update Meteor framework to version 2.15. This update includes MongoDB 7.0.5 and requires g++ 11 or higher on Linux systems.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/2.15.0.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 2.15\n```\n\n----------------------------------------\n\nTITLE: Implementing a JavaScript Minifier Class for Meteor\nDESCRIPTION: Shows implementation of a minifier class with the required 'processFilesForBundle' method that either passes through files in development mode or minifies them in production mode using UglifyJS.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass UglifyJsMinifier {\n  processFilesForBundle(files, options) {\n    const { minifyMode } = options;\n\n    if (minifyMode === 'development') {\n      // Don't minify in development.\n      file.forEach((file) => {\n        file.addJavaScript({\n          data: file.getContentsAsBuffer(),\n          sourceMap: file.getSourceMap(),\n          path: file.getPathInBundle()\n        });\n      });\n\n      return;\n    }\n\n    // Minify in production.\n    files.forEach((file) => {\n      file.addJavaScript({\n        data: uglifyjs.minify(file.getContentsAsBuffer()),\n        path: file.getPathInBundle()\n      });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Framing in Meteor Browser Policy\nDESCRIPTION: Prevents the app from being rendered inside a frame or iframe.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.disallow()\n```\n\n----------------------------------------\n\nTITLE: Requesting Camera Authorization\nDESCRIPTION: Demonstrates how to check and request camera authorization using the diagnostic plugin.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nif (Meteor.isCordova) {\n  cordova.plugins.diagnostic.isCameraAuthorized(\n    authorized => {\n      if (!authorized) {\n        cordova.plugins.diagnostic.requestCameraAuthorization(\n          granted => {\n            console.log( \"Authorization request for camera use was \" +\n              (granted ? \"granted\" : \"denied\"));\n          },\n          error => { console.error(error); }\n        );\n      }\n    },\n    error => { console.error(error); }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Policy Content Configuration\nDESCRIPTION: Example showing how to configure browser content policy to allow scripts with nonce support for security.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowScriptOrigin(`nonce-${nonce}`);\n```\n\n----------------------------------------\n\nTITLE: Using Match.Integer for Type Checking in Meteor\nDESCRIPTION: The Match.Integer check validator for ensuring values are 32-bit signed integers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_117\n\nLANGUAGE: JavaScript\nCODE:\n```\nMatch.Integer\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to Version 3.0.1\nDESCRIPTION: Command to update a Meteor project to version 3.0.1. This should be run in the project directory to apply the latest updates and package changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.1\n```\n\n----------------------------------------\n\nTITLE: Importing from a Meteor Package\nDESCRIPTION: Example showing how to import specific exports from a Meteor package in an application. Note the use of the 'meteor/' prefix in the import path to distinguish from npm packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// In an application that uses 'my-modular-package':\nimport { Foo as ExplicitFoo, bar } from 'meteor/my-modular-package';\nconsole.log(Foo); // Auto-imported because of `api.export`.\nconsole.log(ExplicitFoo); // Explicitly imported, but identical to `Foo`.\nconsole.log(bar); // Exported by server.js or client.js, but not auto-imported.\n```\n\n----------------------------------------\n\nTITLE: Adding Meteor Package via Command Line\nDESCRIPTION: Command to add the react-meteor-data package to a Meteor project, which provides React hooks for Meteor's reactivity system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/2.collections.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add react-meteor-data\n```\n\n----------------------------------------\n\nTITLE: Evaluating Formulas and Bits in JavaScript\nDESCRIPTION: Demonstrates how to evaluate formulas and Bits objects using a Logic.Solution instance. Shows examples of evaluating boolean formulas and integer representations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nsolution.evaluate('A')\nsolution.evaluate('-A')\nsolution.evaluate(Logic.or('A', 'B'))\nsolution.evaluate(myFormula) // Formula given to the Solver earlier\n\nvar x = Logic.variableBits('x', 3); // 3-digit binary variable\nvar y = Logic.variableBits('y', 3);\nvar xySum = Logic.sum(x, y);\nvar five = Logic.constantBits(5);\n\nvar solver = new Logic.Solver;\nsolver.require(Logic.equalBits(xySum, five));\nvar solution = solver.solve();\nsolution.evaluate(x) // 2 (for example)\nsolution.evaluate(y) // 3 (for example)\nsolution.evaluate(five) // 5\n```\n\n----------------------------------------\n\nTITLE: Validating New Users with Meteor Accounts\nDESCRIPTION: Example showing how to validate new user registrations by implementing validation callbacks. The first example throws a specific error message when the username is too short, while the second example simply rejects usernames that match 'root'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts-multi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Validate username, sending a specific error message on failure.\nAccounts.validateNewUser((user) => {\n  if (user.username && user.username.length >= 3) {\n    return true;\n  } else {\n    throw new Meteor.Error(403, 'Username must have at least 3 characters');\n  }\n});\n\n// Validate username, without a specific error message.\nAccounts.validateNewUser((user) => {\n  return user.username !== 'root';\n});\n```\n\n----------------------------------------\n\nTITLE: List Show Page Helper Functions in JavaScript\nDESCRIPTION: Helper functions for the Lists_show_page template that handle reactive data management and list rendering optimizations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.Lists_show_page.helpers({\n  listIdArray() {\n    const instance = Template.instance();\n    const listId = instance.getListId();\n    return Lists.findOne(listId) ? [listId] : [];\n  },\n  listArgs(listId) {\n    const instance = Template.instance();\n    return {\n      todosReady: instance.subscriptionsReady(),\n      list() {\n        return Lists.findOne(listId);\n      },\n      todos: Lists.findOne(listId, {fields: {_id: true}}).todos()\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Android Signing Key using keytool (Shell)\nDESCRIPTION: Shows the `keytool` command (part of the Java Development Kit) used to generate a new private key store for signing Android applications. It specifies the alias for the key, the algorithm (RSA), key size, and validity period. This key is crucial for publishing and updating apps on the Google Play Store. A keystore file (defaulting to `~/.keystore` unless specified otherwise) is created.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nkeytool -genkey -alias your-app-name -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Async Method Updates in accounts-2fa Package\nDESCRIPTION: List of methods in accounts-2fa package that are now asynchronous in version 3.0.0.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/3.0.0.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts._is2faEnabledForUser\ngenerate2faActivationQrCode\nenableUser2fa\ndisableUser2fa\nhas2faEnabled\n```\n\n----------------------------------------\n\nTITLE: Nested Import Declaration Example in Meteor 1.4\nDESCRIPTION: Example showing nested import declarations which are now fully supported in both application and package modules thanks to the reify library. Particularly useful for client-only or server-only code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.4-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (Meteor.isClient) {\n  import { symbol } from './client-only/file';\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Runtime Configuration Hook in Meteor WebApp\nDESCRIPTION: Shows how to use WebApp.addUpdatedNotifyHook to receive notifications when the runtime configuration is updated for each architecture. This example demonstrates checking for changes in the autoupdate configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/webapp.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst autoupdateCache;\n// Get a notification when the runtime configuration is updated\n// for each arch\nWebApp.addUpdatedNotifyHook(({arch, manifest, runtimeConfig}) => {\n  // Example, see if runtimeConfig.autoupdate has changed and if so\n  // do something\n  if(!_.isEqual(autoupdateCache, runtimeConfig.autoupdate)) {\n    autoupdateCache = runtimeConfig.autoupdate;\n    // do something...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin from Git URL with SHA Reference in Meteor\nDESCRIPTION: Demonstrates how to install a Cordova plugin from a Git URL with a specific SHA reference, which is the supported method for installing plugins from external sources.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\nmeteor add cordova:plugin-name@https://github.com/apache/cordova-plugin-file#c452f1a67f41cb1165c92555f0e721fbb07329cc\n```\n\n----------------------------------------\n\nTITLE: Required MongoDB Connection Settings for Free Shared Cluster (JSON)\nDESCRIPTION: Provides the JSON configuration snippet necessary in `settings.json` when connecting to Galaxy's free shared MongoDB cluster. The `tlsAllowInvalidCertificates: true` setting under `packages.mongo.options` is required to bypass certificate validation issues with the shared cluster provider.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"mongo\": {\n      \"options\": {\n        \"tlsAllowInvalidCertificates\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build-Only Flag for Meteor Deploy\nDESCRIPTION: Example of using the new --build-only flag with Meteor deploy command to build the application without proceeding to upload and deploy, allowing for validation steps in between.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmeteor deploy --build-only\n```\n\n----------------------------------------\n\nTITLE: Using Blaze Templates in React Components\nDESCRIPTION: Example of incorporating Blaze templates within React components using the blaze-react-component package\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Blaze from 'meteor/gadicc:blaze-react-component';\n\nconst App = () => (\n  <div>\n    <Blaze template=\"itemsList\" items={items} />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Allowing Content Type Data URL in Browser Policy (JavaScript)\nDESCRIPTION: Permits loading of specific content types from data: URLs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allow<ContentType>DataUrl()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Fractions in Meteor\nDESCRIPTION: Returns a random floating-point number between 0 and 1, similar to Math.random().\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/random/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.fraction()\n```\n\n----------------------------------------\n\nTITLE: Testing Meteor Packages\nDESCRIPTION: Command to run tests for a Meteor package using the Mocha testing framework.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeteor test-packages ./ --driver-package meteortesting:mocha\n```\n\n----------------------------------------\n\nTITLE: Setting Meteor Account Password Length\nDESCRIPTION: Configuration option to modify the maximum password length limit for Meteor accounts\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.settings.packages.accounts.passwordMaxLength\n```\n\n----------------------------------------\n\nTITLE: Disallowed Usage of Template.parentData() in Meteor JavaScript\nDESCRIPTION: This snippet demonstrates patterns that trigger the `no-template-parent-data` ESLint rule. Using `Template.parentData()` with or without numeric or variable arguments is considered a warning because it tightly couples child templates to their parent's data context, hindering reusability and potentially causing unintended errors when the parent changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-template-parent-data.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n\nTemplate.parentData()\nTemplate.parentData(0)\nTemplate.parentData(1)\nTemplate.parentData(foo)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting Inclusion with Meteor Test JavaScript\nDESCRIPTION: Determines whether a value appears in an array, as an object property/key, or as a substring in a string. Parameters: haystack (array/object/string), needle (element/key/substring), optional message, and an optional boolean not flag. If not is true, reverses the logic. Intended for internal use; direct use of not parameter in production tests is discouraged.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.include(haystack, needle[, message[, not]]);\n```\n\n----------------------------------------\n\nTITLE: Cordova Platform Build Method\nDESCRIPTION: Method to build the app for a specific platform with options and extra paths. Similar to 'cordova build <platform>' command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cordova/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCordovaProject#buildForPlatform(platform, options = {}, extraPaths)\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Accounts UI Package\nDESCRIPTION: Command to add the accounts-ui package to a Meteor project for quick implementation of user authentication interface.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmeteor add accounts-ui\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Meteor Application\nDESCRIPTION: Command to create a new Meteor application with TypeScript support. The created application includes a recommended tsconfig.json file and serves as a reference for TypeScript integration with Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nmeteor create --typescript new-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Installing React npm packages for Meteor 1.3\nDESCRIPTION: Install React and related packages from npm to use with Meteor 1.3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save react react-dom react-addons-transition-group \\\n react-addons-css-transition-group react-addons-linked-state-mixin \\\n react-addons-create-fragment react-addons-update react-addons-pure-render-mixin \\\n\n```\n\n----------------------------------------\n\nTITLE: Installing DDPRateLimiter Package in Meteor\nDESCRIPTION: Command to add the ddp-rate-limiter package to a Meteor project using the terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/methods.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add ddp-rate-limiter\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for Package Modules\nDESCRIPTION: Shows how to define a lazy-loaded main module in a package, which means the module is only evaluated when imported and may not be included in the client bundle if not used.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function (api) {\n  api.mainModule(\"client.js\", \"client\", { lazy: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Solution: Manual Installation of Meteor 2.13.3\nDESCRIPTION: This command provides a workaround for the update issue by manually installing Meteor 2.13.3 using curl. It bypasses the standard update process and directly installs the specified version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/known-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://install.meteor.com/\\?release\\=2.13.3 | sh\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Form for Invoice Entry (HTML)\nDESCRIPTION: Presents an HTML form designed to collect user input for invoice details such as email, description, and amount. The form handles real-time error display using Blaze template features.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/methods.md#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<template name=\"Invoices_newInvoice\">\n  <form class=\"Invoices_newInvoice\">\n    <label for=\"email\">Recipient email</label>\n    <input type=\"email\" name=\"email\" />\n    {{#each error in errors \"email\"}}\n      <div class=\"form-error\">{{error}}</div>\n    {{/each}}\n\n    <label for=\"description\">Item description</label>\n    <input type=\"text\" name=\"description\" />\n    {{#each error in errors \"description\"}}\n      <div class=\"form-error\">{{error}}</div>\n    {{/each}}\n\n    <label for=\"amount\">Amount owed</label>\n    <input type=\"text\" name=\"amount\" />\n    {{#each error in errors \"amount\"}}\n      <div class=\"form-error\">{{error}}</div>\n    {{/each}}\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Async Tracker.autorun Reactivity Loss Example (Meteor, JavaScript, <2.10)\nDESCRIPTION: This snippet illustrates that when an asyncTracker.autorun callback awaits a promise before any reactive data access, the computation does not become dependent on later reactive changes. The autorun will run only once as Meteor.users.find() is not tracked reactively. Dependencies: Meteor, Tracker, and a hypothetical asyncDataFunction. Inputs: asyncDataFunction and whatever is fetched from Meteor.users. Limitation: No reactivity for data after the await.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/Tracker.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  Tracker.autorun(async function example1() {\n    let asyncData = await asyncDataFunction();\n    let users = Meteor.users.find({}).fetch();\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing and Using UUID Package as Replacement for Deprecated Meteor.uuid\nDESCRIPTION: Instructions for installing the uuid npm package to replace deprecated Meteor.uuid functionality, along with example code showing how to generate UUIDs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install uuid\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport uuid from \"uuid\";\nconsole.log(uuid());\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor-RPC, React Query, and Zod | Bash\nDESCRIPTION: Installs the meteor-rpc, @tanstack/react-query, and zod packages as project dependencies using npm. These are all required: meteor-rpc provides the RPC infrastructure, react-query handles client-side data fetching, and zod is used for runtime schema validation of method arguments and outputs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm i meteor-rpc @tanstack/react-query zod\n```\n\n----------------------------------------\n\nTITLE: Setting ANDROID_HOME, ANDROID_SDK_ROOT, and PATH for Android SDK - PowerShell\nDESCRIPTION: Temporarily sets the ANDROID_HOME and ANDROID_SDK_ROOT environment variables and prepends Android SDK tools to the PATH for the current PowerShell session on Windows. This ensures Cordova and Android CLI tools can locate the SDK components needed for builds and emulators.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$env:ANDROID_HOME = \"C:\\\\Users\\\\<USER>\\\\AppData\\\\Local\\\\Android\\\\Sdk\"\n$env:ANDROID_SDK_ROOT = $env:ANDROID_HOME\n$env:PATH = \"$env:ANDROID_HOME\\\\cmdline-tools\\\\latest\\\\bin;$env:ANDROID_HOME\\\\tools;$env:ANDROID_HOME\\\\tools\\\\bin;$env:ANDROID_HOME\\\\platform-tools;$env:ANDROID_HOME\\\\emulator;$env:PATH\"\n```\n\n----------------------------------------\n\nTITLE: Meteor Create Command Examples\nDESCRIPTION: Various examples of the meteor create command with different options for deploying apps and MongoDB instances.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create my-app\nmeteor create --react my-app\nmeteor deploy myapp.meteorapp.com --free\nmeteor deploy myapp.meteorapp.com --free --mongo\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Shrinkpack\nDESCRIPTION: Commands to install and use Shrinkpack for more reliable NPM dependency management.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g shrinkpack\n\nmeteor npm install --save moment\nmeteor npm shrinkwrap\nshrinkpack\n```\n\n----------------------------------------\n\nTITLE: Installing Atmosphere Packages in Meteor\nDESCRIPTION: Command to add a specific Atmosphere package to a Meteor application. This will install the latest compatible version of the package and update the application's dependencies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-atmosphere-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add ostrio:flow-router-extra\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor App with Solid.js\nDESCRIPTION: Command to create a Meteor app with Solid.js, Vite, and MongoDB. Includes a list of npm and Meteor packages that are included by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --solid app-name\n```\n\n----------------------------------------\n\nTITLE: Importing Compiled npm Package in Meteor\nDESCRIPTION: Example showing different ways to import an npm package that has been installed from the local imports directory, where Meteor will use the compiled version of the package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport stuff from \"the-package\"\nrequire(\"the-package\") === require(\"/imports/the-package\")\nimport(\"the-package\").then(...)\n```\n\n----------------------------------------\n\nTITLE: Installing babel-runtime npm Package in Meteor\nDESCRIPTION: Command to install the required babel-runtime npm package in a Meteor application directory. This is necessary for most Babel-transformed code to work properly as of Meteor v1.4.2.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install --save babel-runtime\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key Using Node Crypto\nDESCRIPTION: Command to generate a 16-byte Base64 encoded encryption key using Node's crypto module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/oauth-encryption.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ meteor node -e 'console.log(require(\"crypto\").randomBytes(16).toString(\"base64\"))'\n```\n\n----------------------------------------\n\nTITLE: Using Logging in Meteor\nDESCRIPTION: The Log function in the logging package prints messages with timestamps, color, filenames, and line numbers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_123\n\nLANGUAGE: JavaScript\nCODE:\n```\nLog\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Iterator Using Symbol.iterator in JavaScript\nDESCRIPTION: Example demonstrating how to access an array's iterator using the Symbol.iterator property, which is one of the ES2015 features polyfilled by Meteor's ecmascript package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[1,2,3][Symbol.iterator]()\n```\n\n----------------------------------------\n\nTITLE: Configuring Frame Options in Meteor using BrowserPolicy\nDESCRIPTION: API functions for controlling how your Meteor application can be framed by other websites using the X-Frame-Options header, helping to prevent clickjacking attacks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/browser-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.disallow()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.restrictToOrigin(origin)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.allowAll()\n```\n\n----------------------------------------\n\nTITLE: Increasing inotify Watch Limit on Linux for Meteor (Bash)\nDESCRIPTION: This command increases the system-wide limit for the number of files that can be watched using inotify. It adds a configuration line to /etc/sysctl.conf and applies the changes immediately.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/file-change-watcher-efficiency.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n```\n\n----------------------------------------\n\nTITLE: Logging into Meteor Developer Account (Bash)\nDESCRIPTION: Demonstrates the `meteor login` command used to authenticate with a Meteor developer account. It prompts for username and password interactively. The optional `--email` flag allows logging in using an email address instead of a username.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmeteor login [--email]\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Secret Key in Meteor\nDESCRIPTION: Sets up the OAuth secret key using Accounts.config on the server side. This should be done at load time, not inside Meteor.startup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/oauth-encryption.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({ oauthSecretKey: 'onsqJ+1e4iGFlV0nhZYobg==' });\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Object in Method Invocations\nDESCRIPTION: Reference to the client connection object available within method invocations and publish functions, allowing access to connection-specific data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\nthis.connection\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Oplog Packages\nDESCRIPTION: Meteor commands for installing the Redis Oplog package and disabling the default MongoDB Oplog functionality.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add cultofcoders:redis-oplog\nmeteor add disable-oplog\n```\n\n----------------------------------------\n\nTITLE: Allowing Data URLs in Cordova\nDESCRIPTION: Demonstrates how to configure access rules to allow loading data URLs in iframes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nApp.accessRule('data:*', { type: 'navigation' });\n```\n\n----------------------------------------\n\nTITLE: Setting CDN Prefix for Bundled Assets\nDESCRIPTION: Use WebAppInternals.setBundledJsCssPrefix() to control where clients load bundled JavaScript and CSS files, allowing the use of a CDN to improve load times.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_109\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebAppInternals.setBundledJsCssPrefix(\"https://cdn.example.com/assets\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Catalog Refresh for a Meteor CLI Command in JavaScript\nDESCRIPTION: Shows how to prevent the automatic catalog refresh when running a specific Meteor command. By setting the `catalogRefresh` property to `new catalog.Refresh.Never()`, the command can execute faster if it doesn't need updated package information from the server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmain.registerCommand({\n  ...\n  catalogRefresh: new catalog.Refresh.Never()\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to Task Component Template in Vue\nDESCRIPTION: This snippet shows adding a delete button (`<button>`) within the `Task` component's template. The button uses Tailwind CSS classes for styling and is positioned using `ml-auto`. Its click event (`@click`) is bound to the `deleteTask` method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/components/Task.vue]\n...\n<span class=\"text-gray-600 pl-2\" :class=\"{ 'text-gray-400 italic line-through': taskRef.checked }\">\n  {{ task.text }}\n</span>\n\n<button \n    class=\"ml-auto bg-red-500 hover:bg-red-600 text-white font-bold py-0.5 px-2 rounded\"\n    @click=\"deleteTask\"> &times; \n</button>\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Meta Tag for Mobile Browsers\nDESCRIPTION: HTML meta tag to set the viewport for mobile browsers, which removes the 300ms tap delay without needing the deprecated fastclick package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_59\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width\">\n```\n\n----------------------------------------\n\nTITLE: Building Meteor Cordova Apps for Production Distribution - Shell\nDESCRIPTION: Builds the Meteor Cordova project for distribution, outputting artifacts to a specified directory. The '--server' option points the app to the production server URL; the command produces APK, AAB, or IPA files suitable for app store uploads. Requires all setup dependencies for the target platform.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmeteor build ../build-output --server=https://your-server-url.com\n```\n\n----------------------------------------\n\nTITLE: Allowing Content Type Origin in Browser Policy (JavaScript)\nDESCRIPTION: Allows specific types of content to be loaded from a given origin. Can be called multiple times to specify a whitelist.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allow<ContentType>Origin(origin)\n```\n\n----------------------------------------\n\nTITLE: Allowing Inline Scripts in Meteor Browser Policy\nDESCRIPTION: Allows inline <script> tags, javascript: URLs, and inline event handlers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowInlineScripts()\n```\n\n----------------------------------------\n\nTITLE: Correctly Scoped DOM Lookups in Meteor Blaze Templates (JavaScript)\nDESCRIPTION: Examples of DOM lookups that are properly scoped to the template instance, which are not considered warnings by this ESLint rule. These patterns improve performance and reduce the risk of accidental side-effects.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/scope-dom-lookups.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.onRendered(function () {\n  this.$('.bar').focus()\n})\n\nTemplate.foo.onRendered(function () {\n  Template.instance().$('.bar').focus()\n})\n\nTemplate.foo.events({\n  'click .bar': function (event, instance) {\n    instance.$('.baz').focus()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating New Meteor Project\nDESCRIPTION: Commands to create a new Meteor project with Tailwind CSS support\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create flowbite-app --tailwind\ncd flowbite-app\n```\n\n----------------------------------------\n\nTITLE: Unscoped DOM Lookups in Meteor Blaze Templates (JavaScript)\nDESCRIPTION: Examples of DOM lookups that are not scoped to the template instance, which are considered warnings by this ESLint rule. These patterns can lead to performance issues and accidental side-effects.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/scope-dom-lookups.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.onRendered(function () {\n  $('.bar').focus()\n})\n\nTemplate.foo.onRendered(function () {\n  const $bar = $('.bar')\n  // ..\n})\n\nTemplate.foo.events({\n  'click .bar': function (event, instance) {\n    $('.baz').focus()\n  }\n})\n\nTemplate.foo.helpers({\n  'bar': function () {\n    $('.baz').focus()\n  }\n})\n\nTemplate.foo.onDestroyed(function () {\n  $('.bar').focus()\n})\n\nTemplate.foo.onRendered(function () {\n  jQuery('.bar').focus()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Meteor Log Utility\nDESCRIPTION: JavaScript import statement to include the Log utility from the meteor/logging package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Log } from 'meteor/logging'\n```\n\n----------------------------------------\n\nTITLE: Cordova Run Method\nDESCRIPTION: Async method to run the built app on a device or emulator/simulator. Requires prior preparation via prepareForPlatform().\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cordova/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync CordovaProject#run(platform, isDevice, options = [], extraPaths)\n```\n\n----------------------------------------\n\nTITLE: Making Random Choices in Meteor\nDESCRIPTION: Random.choice() randomly selects and returns an element from an array. Provides uniform random selection from a set of options.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/random.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.choice(array)\n```\n\n----------------------------------------\n\nTITLE: Excluding Meteor Packages from PostCSS Processing\nDESCRIPTION: Extended PostCSS configuration that demonstrates how to exclude specific Meteor packages from PostCSS processing using the excludedMeteorPackages option.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/standard-minifier-css.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n  },\n  excludedMeteorPackages: [\n    'github-config-ui',\n    'constellation:console'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Password Support in Meteor\nDESCRIPTION: Command to add password authentication functionality to a Meteor application using the accounts-password package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add accounts-password\n```\n\n----------------------------------------\n\nTITLE: Listing Packages in a Meteor Project using Shell\nDESCRIPTION: Lists packages explicitly added to the project. The '--tree' option displays all dependencies (including transitive) in a tree structure. '--weak' includes weakly referenced dependencies in the tree. '--json' outputs the list or tree in JSON format, and '--details' adds more package information to the JSON output.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmeteor list\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeteor list --tree [--weak]\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeteor list --json [--weak] [--details]\n```\n\n----------------------------------------\n\nTITLE: Galaxy Deployment Command Output\nDESCRIPTION: Example output from the Meteor deployment command showing the deployment process from uploading the app bundle to completing the deployment on Galaxy.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/8.deploying.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeteor deploy react-meteor-3.meteorapp.com --settings private/settings.json\nTalking to Galaxy servers at https://us-east-1.galaxy-deploy.meteor.com\nPreparing to build your app...                \nPreparing to upload your app... \nUploaded app bundle for new app at vue-tutorial.meteorapp.com.\nGalaxy is building the app into a native image.\nWaiting for deployment updates from Galaxy... \nBuilding app image...                         \nDeploying app...                              \nYou have successfully deployed the first version of your app.\nFor details, visit https://galaxy.meteor.com/app/react-meteor-3.meteorapp.com\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Temperature Display Template in Handlebars\nDESCRIPTION: Handlebars template that displays temperature and conditional freezing message, showing how Tracker can be used with Blaze templating.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tracker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<!-- In demo.html -->\n<template name=\"demo\">\n  The current temperature is {{currentTemp}} degrees Fahrenheit.\n  {{#if belowFreezing}}\n    That's below freezing!\n  {{/if}}\n</templates>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Browser Versions for Modern Features in Meteor\nDESCRIPTION: This code demonstrates how to use the setMinimumBrowserVersions function to configure which browser versions should receive the modern bundle based on their support for specific ECMAScript features.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setMinimumBrowserVersions } from \"meteor/modern-browsers\";\n\nsetMinimumBrowserVersions({\n  chrome: 49,\n  firefox: 45,\n  firefoxIOS: 100,\n  edge: 12,\n  ie: Infinity, // Sorry, IE11.\n  mobile_safari: [9, 2], // 9.2.0+\n  opera: 36,\n  safari: 9,\n  electron: 1,\n}, \"classes\");\n```\n\n----------------------------------------\n\nTITLE: Installing Vue SSR Dependencies in Meteor (Shell)\nDESCRIPTION: Shows the Meteor commands to add the `server-render` package and install the `vue-server-renderer` npm package. These are prerequisites for implementing basic server-side rendering with Vue in a Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add server-render\nmeteor npm install --save vue-server-renderer\n```\n\n----------------------------------------\n\nTITLE: Using Online-Only Resources in HTML\nDESCRIPTION: Example of referencing resources that have been configured as online-only in HTML markup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/appcache.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/online/bigimage.jpg\">\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Cordova Apps on Physical Devices - Shell\nDESCRIPTION: Deploys and runs the Meteor Cordova project on a physical Android or iOS device connected via USB or Wi-Fi. This enables real-device testing, which may surface compatibility or performance issues not visible in emulators.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# Android\nmeteor run android-device\n\n# iOS (only works on macOS)\nmeteor run ios-device\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Main Module in Meteor Package\nDESCRIPTION: Demonstrates how to specify a lazy main module in a Meteor package definition. The lazy module will only be evaluated when imported and may be excluded from the client bundle if unused. This feature requires Meteor 1.4.2.2 or later.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse(function (api) {\n  api.mainModule(\"client.js\", \"client\", { lazy: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Package Implementation in JavaScript\nDESCRIPTION: Example code for a simple JavaScript module that exports a greeting function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const greet = (name) => {\n  return `Hello, ${name}!`;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Fetch Package in Meteor Application\nDESCRIPTION: Command to add the 'fetch' package to an existing Meteor application using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add fetch\n```\n\n----------------------------------------\n\nTITLE: Generating Meteor Scaffolding with Custom Path\nDESCRIPTION: Command to generate Meteor scaffolding for a model in a custom path using TypeScript.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmeteor generate another-customer --path=server/admin\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage\nDESCRIPTION: Example showing the usage of environment variables for controlling Reify cache behavior in Meteor build process\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_TOOL_ENABLE_REIFY_RUNTIME_CACHE\nMETEOR_REIFY_CACHE_DIR\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.0.3 using Bash\nDESCRIPTION: This command updates the current Meteor project to the specified release version, 3.0.3. It should be executed within the root directory of the Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.0.3.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.3\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-NaN Values with Meteor Test JavaScript\nDESCRIPTION: Ensures that the provided value is not NaN. Depends on Meteor's test methods. Inputs are the value to test and an optional message. The assertion fails if isNaN(actual) is true.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.isNotNaN(actual[, message]);\n```\n\n----------------------------------------\n\nTITLE: Listing Platforms in a Meteor Project using Shell\nDESCRIPTION: Lists all target platforms that have been added to the current Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmeteor list-platforms\n```\n\n----------------------------------------\n\nTITLE: Using Passwordless Login Token Method in Meteor 2.5\nDESCRIPTION: Updated method name for passwordless login functionality. The method was renamed from Meteor.loginWithToken to Meteor.passwordlessLoginWithToken in Meteor 2.5.1 to avoid conflicts with accounts-base package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.5-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.passwordlessLoginWithToken\n```\n\n----------------------------------------\n\nTITLE: Random Element Selection in Meteor\nDESCRIPTION: Selects and returns a random element from the provided array or string.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/random/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.choice(arrayOrString)\n```\n\n----------------------------------------\n\nTITLE: Updating allow-deny Package for Security\nDESCRIPTION: Command to update the allow-deny package to patch a security vulnerability in Meteor 1.4.4.4 without updating the entire Meteor framework.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update allow-deny\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Client and Server Test Modules in Meteor\nDESCRIPTION: Expands the testModule configuration to specify different test files for client and server architectures, enabling architecture-specific testing while maintaining the modular structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    },\n    \"testModule\": {\n      \"client\": \"client/tests.js\",\n      \"server\": \"server/tests.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Structure\nDESCRIPTION: Example JSON response structure from the authenticated API call showing a private list with its properties including ID, name, incomplete count, and user ID.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/data-loading.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Lists\": [\n    {\n      \"_id\": \"92XAn3rWhjmPEga4P\",\n      \"name\": \"My Private List\",\n      \"incompleteCount\": 5,\n      \"userId\": \"wq5oLMLi2KMHy5rR6\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Less Package to Meteor Package Dependencies\nDESCRIPTION: JavaScript code snippet showing how to add the Less package as a dependency in a Meteor package's control file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/less/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse(function (api) {\n  ...\n  api.use('less');\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Apps in JavaScript\nDESCRIPTION: This snippet references the mobile-config.js file used to configure mobile app metadata, icons, splash screens, preferences, and PhoneGap/Cordova plugin settings without needing a cordova_build_override directory.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_92\n\nLANGUAGE: JavaScript\nCODE:\n```\n// <APP>/mobile-config.js\n// Configuration code goes here\n```\n\n----------------------------------------\n\nTITLE: Exiting a Meteor Command with a Specific Code via Exception in JavaScript\nDESCRIPTION: Illustrates how to terminate a Meteor command with a specific non-zero exit code (e.g., 2) by throwing the `main.ExitWithCode` exception within the command's handler function. This is an alternative method to returning a numeric exit code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmain.registerCommand({...}, function (options) {\n  throw new main.ExitWithCode(2);\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Runtime for Meteor 1.8.2\nDESCRIPTION: Command to update @babel/runtime npm package to latest version for Meteor 1.8.2 compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install @babel/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: Defining exports in an npm package\nDESCRIPTION: Example of how to define and export functions from an npm package using the index.js entry point. This creates a simple logging function that will be available to consuming applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// my-package/index.js\nexports.myPackageLog = function() {\n  console.log(\"logged from my-package\");\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Express Module in Meteor Webapp\nDESCRIPTION: Code reference showing how to access the Express.js module and its version from within Meteor's webapp package. This is considered an internal API and may change between Meteor versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/webapp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWebAppInternals.NpmModules.express.module\nWebAppInternals.NpmModules.express.version\n```\n\n----------------------------------------\n\nTITLE: Using Custom Replacer Functions with meteor generate (Bash)\nDESCRIPTION: Shows the command to run `meteor generate` using a custom JavaScript file specified by the `--replaceFn` option for advanced template transformations. Meteor will use the exported functions from the specified file instead of its default transformation logic. Requires a valid path to a JS file exporting `transformFilename` and `transformContents`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n meteor generate feed --replaceFn=/fn/replace.js\n```\n\n----------------------------------------\n\nTITLE: Extending Parser Method with Acorn Plugin in JavaScript\nDESCRIPTION: Demonstrates how to extend parser methods in Acorn using the `parser.extend` method. Custom functionality is added to the `readToken` method by wrapping the existing method, useful for building plugins that modify parser behavior.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/packages/modules-test-package/node_modules/acorn/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nparser.extend(\"readToken\", function(nextMethod) {\n  return function(code) {\n    console.log(\"Reading a token!\")\n    return nextMethod.call(this, code)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing CSS from JavaScript\nDESCRIPTION: Demonstrates how to import CSS files directly from JavaScript modules when using the ecmascript package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport '../stylesheets/styles.css';\n```\n\n----------------------------------------\n\nTITLE: MongoDB Update Modifiers in Minimongo\nDESCRIPTION: Implementation of $each, $sort, and $slice options for the $push modifier in Minimongo, Meteor's client-side MongoDB implementation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\n$each, $sort, and $slice options for minimongo's $push\n```\n\n----------------------------------------\n\nTITLE: Deploying with Custom AUTOUPDATE_VERSION in Meteor\nDESCRIPTION: This command demonstrates how to set a custom AUTOUPDATE_VERSION environment variable when deploying a Meteor application. This can be used to control when clients should update.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/hot-code-push.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ AUTOUPDATE_VERSION=abc meteor deploy example.com\n```\n\n----------------------------------------\n\nTITLE: Resetting a Meteor Project State\nDESCRIPTION: Resets the current Meteor project to a clean state, clearing the local build cache. The optional '--db' flag also removes the local development database associated with the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor reset [--db]\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Destructuring Template Instance When Event Destructuring Forbidden (JavaScript)\nDESCRIPTION: This example shows a pattern not considered a problem when `eventmap-params` is configured with `{\"preventDestructuring\": \"event\"}`. Only the event parameter destructuring is forbidden, so destructuring the template instance parameter ({ data }) is allowed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"preventDestructuring\": \"event\"}]\n */\nTemplate.foo.events({\n  'submit form': function (event, { data }) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Manual Flushing for Immediate Updates\nDESCRIPTION: This example shows how to manually trigger updates with Tracker.flush() after each change. It demonstrates how manually flushing can reveal intermediate inconsistent states that would normally be hidden with batched updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nbank.set(\"alice\", bank.get(\"alice\") + 1);\nTracker.flush();\n// \"Alice: 2 Bob: 2 Total: 4\"\nbank.set(\"bob\", bank.get(\"bob\") - 1);\nTracker.flush();\n\n// \"Alice: 2 Bob: 1 Total: 3\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Loading with CommonJS in JavaScript\nDESCRIPTION: Demonstrates how to conditionally load a module using CommonJS require within an if block.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (Meteor.isClient) {\n  require('./client-only-file.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MONGO_OPLOG_URL Environment Variable\nDESCRIPTION: Environment variable configuration for connecting to MongoDB oplog with authentication and replica set settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/oplog-observe-driver.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_OPLOG_URL=mongodb://oplogger:PasswordForOplogger@mongo-server-1.example.com,mongo-server-2.example.com,mongo-server-3.example.com/local?authSource=admin&replicaSet=replicaSetName\n```\n\n----------------------------------------\n\nTITLE: Optimizing Compression for Large Data Transfers\nDESCRIPTION: Configuration optimized for applications transferring large datasets, balancing compression ratio and performance by using higher compression level and memory settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/performance/websocket-compression.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Optimize for large data transfers\nSERVER_WEBSOCKET_COMPRESSION='{\"threshold\": 1024, \"level\": 6, \"memLevel\": 8}'\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Methods/Publications without Argument Checks (Warning Examples) in JavaScript\nDESCRIPTION: These JavaScript snippets demonstrate patterns in Meteor method and publish function definitions that will trigger warnings from the `audit-argument-checks` ESLint rule. Warnings occur when arguments are not passed to `check` or when `check` is called conditionally (e.g., within an `if` block), failing to ensure unconditional validation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/audit-argument-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n\nMeteor.publish(\"foo\", function (bar) {})\n\nMeteor.methods({\n  foo: function (bar) {}\n})\n\nMeteor.methods({\n  foo: function (bar) {\n    if (Math.random() > 0.5) {\n      check(bar, Match.Any)\n    }\n  }\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests with Tinytest\nDESCRIPTION: Command for running package tests using Meteor's built-in Tinytest framework.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmeteor test-packages ./\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Method for useQuery\nDESCRIPTION: Sets up a simple server method using createModule that accepts a string argument and returns a constant value. The method is designed to be queried by the client using the useQuery hook.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\n\nconst server = createModule()\n  .addMethod(\"bar\", z.string(), (arg) => \"bar\" as const)\n  .build();\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Using VitePress useData() API in Markdown Files\nDESCRIPTION: This code snippet demonstrates how to import and use the useData() API in VitePress markdown files. The useData() function provides access to theme data, page data, and frontmatter information that can be displayed in the rendered output.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { theme, page, frontmatter } = useData()\n</script>\n\n## Results\n\n### Theme Data\n<pre>{{ theme }}</pre>\n\n### Page Data\n<pre>{{ page }}</pre>\n\n### Page Frontmatter\n<pre>{{ frontmatter }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Email Transport in Meteor\nDESCRIPTION: Demonstrates how to add a custom email transport method in Meteor using the Email.customTransport API. This allows developers to implement their own email sending logic.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nEmail.customTransport\n```\n\n----------------------------------------\n\nTITLE: Highlighting Active Route in Blaze Template\nDESCRIPTION: Example of using a helper function to highlight the active route in a navigation component.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{{#each list in lists}}\n  <a class=\"list-todo {{activeListClass list}}\">\n    ...\n    {{list.name}}\n  </a>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Server in Meteor\nDESCRIPTION: Meteor.server is the renamed reference to the default server (previously Meteor.default_server).\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_120\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.server\n```\n\n----------------------------------------\n\nTITLE: Rest Parameters and Default Values\nDESCRIPTION: Example showing rest parameters and default parameter values in functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(a = 0, ...rest) {\n  rest.forEach(n => a += n);\n  return a;\n}\n\nadd(); // 0\nadd(1, 2, 3); // 6\n```\n\n----------------------------------------\n\nTITLE: Using Buffer API on Client After v1.5 Update\nDESCRIPTION: After Meteor 1.5, the Buffer polyfill is no longer automatically available to modules in node_modules. This code shows how to explicitly require the Buffer API on the client when needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"buffer\").Buffer\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Usage\nDESCRIPTION: Example of importing and using a basic Flowbite Alert component\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert } from 'flowbite-react';\n\nexport default function MyPage() {\n  return <Alert color=\"info\">Alert!</Alert>;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Output: Meteor 2.13 Update Failure\nDESCRIPTION: This code snippet shows the error message that some users may encounter when trying to update to Meteor 2.13. The error indicates a problem with data extraction, possibly related to the zlib package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/known-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nError: incorrect data check\n    at Zlib.zlibOnError [as onerror] (zlib.js:187:17)\n => awaited here:\n ...\n    at /tools/cli/main.js:1165:7 {\n  errno: -3,\n  code: 'Z_DATA_ERROR'\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Meteor User\nDESCRIPTION: Prints the username of the Meteor developer account currently logged in via the CLI. Used in conjunction with `meteor login` and `meteor logout`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor whoami\n```\n\n----------------------------------------\n\nTITLE: Running Meteor on Custom Port\nDESCRIPTION: Command to start Meteor development server on a specific port instead of the default 3000\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run --port 4000\n```\n\n----------------------------------------\n\nTITLE: Deploying a Free Meteor App with MongoDB on Galaxy (Bash)\nDESCRIPTION: Demonstrates using the `--free` and `--mongo` flags with `meteor deploy`. This command deploys an application to Galaxy using the free tier limitations and automatically provisions a free shared MongoDB database, providing its connection URI upon completion.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmeteor deploy your-app.meteorapp.com --free --mongo\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme-Specific Splash Screens in Meteor (JavaScript)\nDESCRIPTION: This JavaScript object literal demonstrates how to configure different splash screen images for light and dark modes in Meteor applications targeting iOS and Android. It should be used as the value for the corresponding platform key within the `App.launchScreens` configuration object. The `src` property specifies the path to the light mode image, and `srcDarkMode` specifies the path to the dark mode image.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{src: 'light-image-src-here.png', srcDarkMode: 'dark-mode-src-here.png'}\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to Version 3.0.1\nDESCRIPTION: Command to update a Meteor project to version 3.0.1. This step is part of the migration process for the new release.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing a Published Package\nDESCRIPTION: Command to add a published Meteor package to a Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add user:package\n```\n\n----------------------------------------\n\nTITLE: Installing Scoped Cordova Packages\nDESCRIPTION: Example of how to add a scoped Cordova package to a Meteor project using the meteor add command with the cordova: prefix and package scope.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add cordova:@somescope/some-cordova-plugin@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Query Projections in Meteor\nDESCRIPTION: Changes to MongoDB query projections in Meteor 2.6, with 'fields' option being deprecated in favor of 'projection'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Old syntax (deprecated)\nCollection.find({}, { fields: { field1: 1, field2: 1 } });\n\n// New syntax\nCollection.find({}, { projection: { field1: 1, field2: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Starting Meteor with Settings File\nDESCRIPTION: Command to start Meteor with a specific settings.json file to provide configuration options to the application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nmeteor --settings=settings.json \n```\n\n----------------------------------------\n\nTITLE: Migrating app-local packages to use ES2015 modules\nDESCRIPTION: Convert app-local packages to use ES2015 module syntax for imports and exports.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove from package.js\napi.export('Foo');\n\n// localPackage/foo.js\n// Foo must be explicitly exported\nexport default Foo;\n\n// client/main.js\nimport '/imports/localPackage';\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ReactiveDict in JavaScript\nDESCRIPTION: Basic example of creating and using a ReactiveDict object to store reactive values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar forecasts = new ReactiveDict;\nforecasts.set(\"san-francisco\", \"cloudy\");\nforecasts.get(\"san-francisco\");\n// \"cloudy\"\n```\n\n----------------------------------------\n\nTITLE: Including npm Dependencies in Meteor Package\nDESCRIPTION: Demonstrates how to specify npm package dependencies using Npm.depends in a Meteor package.js file. Shows version number specification for remote packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nNpm.depends({\n  github: '0.2.4'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating URL Instance in Meteor\nDESCRIPTION: Example of importing and instantiating a URL object using the Meteor URL package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/url.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URL } from \"meteor/url\";\n\nconst url = new URL(\"https://www.meteor.com\");\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Build Number in Cordova mobile-config.js\nDESCRIPTION: JavaScript code to manually set the build number for Cordova apps in the mobile-config.js file. This helps manage version numbers for iOS and Android apps.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nApp.info('buildNumber', 'XXX');\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS Dependency Management - Shell\nDESCRIPTION: Installs CocoaPods, the dependency manager required for iOS Cordova projects, using Ruby's gem on macOS. Required so that all native iOS dependencies are installed and linked correctly during builds.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Client and Server Test Modules in Meteor\nDESCRIPTION: JSON configuration showing how to specify different test modules for client and server architectures in package.json using the expanded syntax for testModule.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"testModule\": {\n    \"client\": \"client/tests.js\",\n    \"server\": \"server/tests.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Meteor Cloud Free Tier with MongoDB\nDESCRIPTION: Command to deploy a Meteor application to Cloud's free tier including a shared MongoDB instance. This provides a complete deployment solution with database support.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.0-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor deploy myapp.meteorapp.com --free --mongo\n```\n\n----------------------------------------\n\nTITLE: Displaying Source Code Links for Binary Heap Package in Markdown\nDESCRIPTION: This snippet shows the markdown formatting for displaying links to the source code of the binary-heap package. It includes links for both the released and development versions of the package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/binary-heap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# binary-heap\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/binary-heap) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/binary-heap)\n***\n\nThis is an internal Meteor package.\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v2.13.3\nDESCRIPTION: Command to update a Meteor project to version 2.13.3. This step is necessary to apply the latest changes and fixes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/2.13.3.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 2.13.3\n```\n\n----------------------------------------\n\nTITLE: Handling Facebook Authentication with Access Token in JavaScript\nDESCRIPTION: Demonstrates how to handle Facebook authentication using an access token obtained through an out-of-band process using the Facebook.handleAuthFromAccessToken method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\nFacebook.handleAuthFromAccessToken\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules for Meteor Docs\nDESCRIPTION: Command to update and initialize git submodules after cloning or updating the repository. This ensures both the theme and Meteor repository submodules are properly set up.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Reloading Page in JavaScript for Efficient Caching\nDESCRIPTION: This code snippet demonstrates how to reload a page in JavaScript to ensure efficient caching. It uses window.location.replace() instead of window.location.reload() to respect max-age caching directives.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.location.replace(window.location.href)\n```\n\n----------------------------------------\n\nTITLE: Configuring Terser Options for Meteor JavaScript Minification\nDESCRIPTION: This code snippet shows the custom Terser minifier options used by the standard-minifier-js package. It configures Terser to keep debugger statements, avoid removing unused variables, and maintain compatibility with Safari 10.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/standard-minifier-js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndrop_debugger: false\nunused:        false \nsafari10:       true\n```\n\n----------------------------------------\n\nTITLE: Deploying to Meteor Cloud Free Tier\nDESCRIPTION: Command to deploy a Meteor application to Cloud's free tier without MongoDB. This allows developers to quickly deploy their applications to a meteorapp.com subdomain.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.0-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor deploy myapp.meteorapp.com --free\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Meteor Plugin - JSON\nDESCRIPTION: Minimal ESLint configuration example enabling Meteor plugin rules. Depends on ESLint installation. Includes parser options for ECMAScript 6 and module source type, with additional JSX feature support. Outputs a JSON configuration file for ESLint.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/setup.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"plugins\": [\"meteor\"],\n  \"extends\": [\"plugin:meteor/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration for Migration Guide\nDESCRIPTION: YAML front matter configuration for the migration guide page, defining the title and description metadata.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/3.0-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Migrating to Meteor 3.0\ndescription: How to migrate your application to Meteor 3.0.\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK Environment Variables on Mac\nDESCRIPTION: Example lines to be added to a shell configuration file (like `~/.bash_profile` or `~/.zshrc`) on macOS. These lines set the `ANDROID_HOME` environment variable to the location of the Android SDK (assuming default Android Studio installation path) and add the SDK's `tools` and `platform-tools` directories to the system `PATH`, making Android command-line utilities accessible from the terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Platform SDKs for Meteor using Shell\nDESCRIPTION: Installs the required Software Development Kit (SDK) for a specified mobile platform ('android' or 'ios') and verifies that platform requirements are met. The 'ios' platform requires OS X.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmeteor install-sdk <platform>\n```\n\n----------------------------------------\n\nTITLE: Exporting Named Declarations in ES2015 JavaScript\nDESCRIPTION: This snippet demonstrates how to export various named declarations including variables, functions, and classes using ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nexport var a = ...;\nexport let b = ...;\nexport const c = ...;\nexport function d() { ... }\nexport function* e() { ... }\nexport class F { ... }\n```\n\n----------------------------------------\n\nTITLE: Create Oplog User (MongoDB 2.4)\nDESCRIPTION: MongoDB 2.4 command to create a dedicated user with read access to the oplog in the local database.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/oplog-observe-driver.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.addUser({user: \"oplogger\", pwd: \"PasswordForOplogger\", roles: [], otherDBRoles: {local: [\"read\"]}})\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Tests Command\nDESCRIPTION: Command to run Meteor tests using meteortesting:mocha package on port 3100\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmeteor test --driver-package meteortesting:mocha --port 3100\n```\n\n----------------------------------------\n\nTITLE: MongoDB 2.x Aggregation with wrapAsync Style\nDESCRIPTION: Example of using the aggregate method with MongoDB 2.x using Meteor's wrapAsync pattern. This demonstrates synchronous-style code with the older MongoDB API.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = Meteor.wrapAsync(\n  rawCollection.aggregate,\n  rawCollection\n)(pipeline);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Presets in .babelrc\nDESCRIPTION: Illustrates how to use Babel presets in a .babelrc file. This example shows how to include all Stage 1 transforms using the stage-1 preset.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/babel-compiler/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"presets\": [\"stage-1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rest Parameters and Spread Operator\nDESCRIPTION: Example of rest parameters and spread operator usage in functions\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(a = 0, ...rest) {\n  rest.forEach(n => a += n);\n  return a;\n}\n\nadd(); // 0\nadd(1, 2, 3); // 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Storage for Accounts in Meteor\nDESCRIPTION: JSON configuration to set client storage type to session storage instead of local storage for account tokens.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/accounts.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"public\": {\n    \"packages\": {\n      \"accounts\": {\n        \"clientStorage\": \"session\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Settings\nDESCRIPTION: JSON string configuration for server and client settings in production environment\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/environment-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_SETTINGS='{ \"server_only_setting\": \"foo\", \"public\": { \"client_and_server_setting\": \"bar\" } }'\n```\n\n----------------------------------------\n\nTITLE: Importing Package Styles in Less\nDESCRIPTION: Shows how to import styles from Atmosphere packages using the {} package name syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_6\n\nLANGUAGE: less\nCODE:\n```\n@import '{my-package:pretty-buttons}/buttons/styles.import.less';\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Release Version Record Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of a Meteor release version record, detailing various fields such as track, version, description, tool version, and included packages. It also notes important considerations regarding package names with periods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/package-server-api.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Release versions\n\nStores one record for each release version. Records have the following keys:\n\n* `track`: (String) name of the track, such as `METEOR`\n* `version`: (String) release version, such as `1.0` or `1.0.1-albatross`\n* `description`: (String) short description of the release version\n* `recommended`: (Boolean) true for recommended releases\n* `tool`: (String) version of the Meteor tool to be used in this release, such as `meteor-tool@1.0.39`\n* `packages`: (Object, keyed from package name to version) Package versions included in this release.\n* `orderKey`: (String) an order key for this release, automatically generated for semver-like release names. Meteor uses this to pick the correct release for `meteor update`.\n* `published`: (Date) date of publication of this release version\n* `publishedBy`: (Object with key `username`) user who published this release\n* `lastUpdated`: (Date) last time this record was updated\n\n> Note: Meteor package names can include periods. This means that the keys in the `packages` field may include periods, which is an invalid object schema in many databases, including Mongo.\n```\n\n----------------------------------------\n\nTITLE: Disallowing Content Types in Browser Policy (JavaScript)\nDESCRIPTION: Prohibits specific types of content on the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallow<ContentType>()\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.0.4 via CLI using Bash\nDESCRIPTION: This command updates the current Meteor project to the specified release version 3.0.4 using the Meteor command-line interface. It requires the Meteor CLI to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.0.4.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.4\n```\n\n----------------------------------------\n\nTITLE: Listing Platforms - Meteor CLI - Bash\nDESCRIPTION: Shows the command to enumerate all the platforms currently added to your Meteor project. Simple to use, requires Meteor CLI, and returns a list of platforms to the terminal. No parameters or flags required.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmeteor list-platforms\n```\n\n----------------------------------------\n\nTITLE: Installing and Compiling npm Packages in Meteor\nDESCRIPTION: This snippet shows two methods for enabling compilation of specific npm packages in Meteor: cloning the package into the imports directory or creating a symbolic link to the installed package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install imports/the-package\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install the-package\ncd imports\nln -s ../node_modules/the-package .\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Reinstalling Node Modules\nDESCRIPTION: Commands to remove existing node_modules and package-lock.json, then reinstall packages using the latest Node.js version from Meteor 3. This ensures compatibility with the new Meteor version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules package-lock.json\nmeteor npm install\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Meteor Version\nDESCRIPTION: Command to install a particular version of Meteor.js using curl, example shows version 2.8 installation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://install.meteor.com/\\?release\\=2.8 | sh\n```\n\n----------------------------------------\n\nTITLE: Creating Reproducible Random Sequences in Meteor\nDESCRIPTION: Constructing new Random instances with a specified seed to create repeatable test cases for randomized code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_125\n\nLANGUAGE: JavaScript\nCODE:\n```\nRandom\n```\n\n----------------------------------------\n\nTITLE: Template Literals Example\nDESCRIPTION: Demonstration of ES2015 template literals with variable interpolation\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = 'Ben';\nvar message = `My name is:\n${name}`;\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Meteor + Vue3 Project\nDESCRIPTION: These commands clone the repository, install dependencies, and start the Meteor server for the Vue3 project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/static-assets/skel-vue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Clone this repo\n2. Run `meteor npm install`\n3. Run `meteor`\n4. Open `http://localhost:3000` in your browser\n```\n\n----------------------------------------\n\nTITLE: Configuring Unknown Browsers as Modern in Meteor Settings\nDESCRIPTION: This snippet shows how to configure Meteor settings to treat unknown browsers as modern by default. It sets the 'unknownBrowsersAssumedModern' option to true in the 'modern-browsers' package settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modern-browsers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.settings.packages = {\n    \"modern-browsers\": {\n        \"unknownBrowsersAssumedModern\": true\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Support Package for Meteor 3\nDESCRIPTION: This command adds the zodern:types package to a Meteor project, which provides TypeScript support for Meteor 3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/typescript/meteor-types.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add zodern:types\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Check for Meteor 3.0 Compatibility\nDESCRIPTION: Demonstrates how to use Meteor.isFibersDisabled to maintain compatibility between Meteor 2.x and 3.0 versions, allowing different code paths based on the Meteor version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/upgrading-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (Meteor.isFibersDisabled) {\n  // Meteor 3.0\n} else {\n  // Meteor 2.x\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Eager Loading for Specific Architecture\nDESCRIPTION: Demonstrates how to disable eager loading of modules on a specific architecture (in this case, the client) by setting the mainModule value to false.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": false,\n      \"server\": \"server/main.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Namespace and Default from Module in JavaScript\nDESCRIPTION: New syntax extensions for exporting namespaces and default exports from modules. These are based on ECMA262 proposals for enhanced module export capabilities.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport * as namespace from \"./module\"\nexport def from \"./module\"\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Support to a Meteor Package\nDESCRIPTION: Code snippet demonstrating how to include TypeScript support in a Meteor package by adding it to the package.js file. This allows the package to contain TypeScript files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/typescript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse(function (api) {\n  api.use('typescript');\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Meteor Accounts Packages in Markdown\nDESCRIPTION: This snippet lists the core and additional packages for the Meteor Accounts system. It includes the base package and various login provider packages for different third-party services.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/accounts.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`accounts-base`\n`accounts-password`, `accounts-facebook`,\n`accounts-github`, `accounts-google`, `accounts-meetup`,\n`accounts-twitter`, or `accounts-weibo`\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox and State Management to Task Component\nDESCRIPTION: This updates the `Task.vue` component's `<script setup>` and `<template>` sections to handle task completion status. It defines `props` to receive the `task` object. A reactive copy `taskRef` is created using `ref` for local state management. A computed property `isChecked` reflects the `checked` status of `taskRef`. The template includes a checkbox bound to `taskRef.checked` using `v-model` and triggers `handleCheckboxChange` on change (implementation not shown). Conditional styling (`line-through`) is applied based on `taskRef.checked`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst props = defineProps({\n  task: {\n    type: Object,\n    required: true,\n  },\n});\n\nconst taskRef = ref({ ...props.task }); // Create a reactive copy of the task\n\nconst isChecked = computed(() => taskRef.value.checked);\n\n</script>\n\n<template>\n  <div class=\"flex items-center rounded px-4 py-2 mb-2\">\n    <li>\n      <input v-model=\"taskRef.checked\" type=\"checkbox\" :checked=\"isChecked\" @change=\"handleCheckboxChange\" />\n    </li>\n    <span class=\"text-gray-600 pl-2\" :class=\"{ 'text-gray-400 italic line-through': taskRef.checked }\">\n      {{ task.text }}\n    </span>\n  </div>\n</template>\n ..\n```\n\n----------------------------------------\n\nTITLE: Nested Autoruns Example\nDESCRIPTION: Demonstration of nested autoruns showing granular reactivity control.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar weather = new ReactiveDict;\n\nweather.set(\"sky\", \"sunny\");\nweather.set(\"temperature\", \"cool\");\n\nvar weatherPrinter = Tracker.autorun(function () {\n  console.log(\"The sky is \" + weather.get(\"sky\"));\n  var temperaturePrinter = Tracker.autorun(function () {\n    console.log(\"The temperature is \" + weather.get(\"temperature\"));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Modular Package Structure in Meteor\nDESCRIPTION: Demonstrates how to configure a modular package structure using api.mainModule to specify entry points for client and server code. Includes Npm dependency configuration and module exports.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.describe({\n  name: 'my-modular-package'\n});\n\nNpm.depends({\n  moment: '2.10.6'\n});\n\nPackage.onUse((api) => {\n  api.use('modules');\n  api.mainModule('server.js', 'server');\n  api.mainModule('client.js', 'client');\n  api.export('Foo');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing npm Package - Meteor CLI\nDESCRIPTION: Command to install an npm package and save it to package.json dependencies\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save moment\n```\n\n----------------------------------------\n\nTITLE: Accessing ReactiveDict Clear Method\nDESCRIPTION: Fix for ReactiveDict.prototype.clear method to prevent crashes when accessing unaccessed properties\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nReactiveDict.prototype.clear\n```\n\n----------------------------------------\n\nTITLE: Importing Less Styles from Another Package in Meteor\nDESCRIPTION: Less code example demonstrating how to import styles from a different Meteor package using the package import syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/less/README.md#2025-04-22_snippet_2\n\nLANGUAGE: less\nCODE:\n```\n@import \"{my-package:pretty-buttons}/buttons/styles.import.less\"\n\n.my-button {\n  // use the styles imported from a package\n  .pretty-button;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing npm Dependencies in Package Code\nDESCRIPTION: Example of importing an npm dependency within Meteor package code using ES6 import syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport github from 'github';\n```\n\n----------------------------------------\n\nTITLE: DDP Connection Operations\nDESCRIPTION: Examples of common operations performed on a DDP connection like subscribing to data and calling methods\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyconn.subscribe(\"newsFeed\")\nmyconn.call(\"transferBalance\")\n```\n\n----------------------------------------\n\nTITLE: Using Symbol Iterator in JavaScript Arrays\nDESCRIPTION: Demonstrates the usage of Symbol.iterator with arrays in ECMAScript 2015.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n[1,2,3][Symbol.iterator]()\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB with Complex Minimongo Pattern\nDESCRIPTION: Example of a complex MongoDB query pattern using $elemMatch with nested $or operator supported in minimongo.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n{a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}}\n```\n\n----------------------------------------\n\nTITLE: Solving for Initial Solution\nDESCRIPTION: Shows how to solve the constraint system and get the first solution.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sol1 = solver.solve();\nsol1.getTrueVars() // => [\"Bob\"]\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Inclusion with Meteor Test JavaScript\nDESCRIPTION: Ensures that a value/key/substring is not included in the array/object/string under test. Internally, it calls include with the not flag set. Accepts haystack, needle, and optional message parameters.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.notInclude(haystack, needle[,message]);\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor with Sudo Permissions\nDESCRIPTION: Installation command with sudo privileges when user doesn't have permission to install global binaries. Includes unsafe-perm flag for elevated permissions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/install.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g meteor --unsafe-perm\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundle Visualizer in Meteor Application\nDESCRIPTION: Command to enable the bundle-visualizer package using the --extra-packages flag in production mode. This temporarily adds the package for analysis purposes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/bundle-visualizer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cd app/\n$ meteor --extra-packages bundle-visualizer --production\n```\n\n----------------------------------------\n\nTITLE: Using HTML Tags with static-html in Meteor\nDESCRIPTION: Demonstrates the top-level tags supported by the static-html package. The plugin parses HTML files and handles <head> and <body> tags, appending their content to the respective sections of the final HTML output. Body tags can have attributes, but head tags cannot.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/static-html/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `<head>` - appended to the `head` section of your HTML\n- `<body>` - appended to the `body` section of your HTML\n```\n\n----------------------------------------\n\nTITLE: MongoDB 2.x Aggregation with Callback Style\nDESCRIPTION: Example of using the aggregate method with MongoDB 2.x using callback style. This shows the old pattern before the breaking change in MongoDB 3.x where aggregate returned results directly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nrawCollection.aggregate(\n  pipeline,\n  (error, results) => {...}\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Compiler Plugin for Pug Templates in Meteor\nDESCRIPTION: Shows how to register a compiler plugin that processes Pug template files with extensions '.pug' and '.tpl.pug'. The factory function returns an instance of PugCompiler that will transform these files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlugin.registerCompiler({\n  extensions: ['pug', 'tpl.pug'],\n  filenames: []\n}, () => new PugCompiler);\n```\n\n----------------------------------------\n\nTITLE: Installing Latest meteor-node-stubs Package in Meteor\nDESCRIPTION: Command to install the latest version of the meteor-node-stubs package, which provides stub implementations for Node built-in modules used by the client.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install meteor-node-stubs@latest\n```\n\n----------------------------------------\n\nTITLE: Creating New Meteor Project\nDESCRIPTION: Command to create a new Meteor project named 'try-meteor'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create try-meteor\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Filtering Logic\nDESCRIPTION: Implementation of the filtering logic using Meteor's Mini Mongo query to filter tasks based on their completion status.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/6.filter-tasks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n..\n  const hideCompletedFilter = { isChecked: { $ne: true } };\n\n  const tasks = useTracker(() =>\n    TasksCollection.find(hideCompleted ? hideCompletedFilter : {}, {\n      sort: { createdAt: -1 },\n    }).fetch()\n  );\n..\n```\n\n----------------------------------------\n\nTITLE: Importing LESS Files in Meteor\nDESCRIPTION: To import a LESS file without Meteor processing it independently, use the .import.less extension. This allows for modular LESS file organization in Meteor projects.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/less.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n> If you want to `@import` a file, give it the extension `.import.less`\nto prevent Meteor from processing it independently.\n```\n\n----------------------------------------\n\nTITLE: OAuth Secret Key Configuration in Settings\nDESCRIPTION: JSON configuration for providing the OAuth secret key through Meteor.settings to avoid storing it in source code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/oauth-encryption.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"accounts-base\": {\n      \"oauthSecretKey\": \"onsqJ+1e4iGFlV0nhZYobg==\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin from Atmosphere Package\nDESCRIPTION: Demonstrates how to use Cordova.depends to include Cordova plugins in a Meteor package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nCordova.depends({\n    'com.phonegap.plugins.facebookconnect': 'https://github.com/Wizcorp/phonegap-facebook-plugin.git#5dbb1583168558b4447a13235283803151cb04ec'\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Login Token Expiration in Meteor\nDESCRIPTION: Configuration to disable the expiration of login tokens in Meteor accounts, overriding the default 90-day expiration period.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({ loginExpirationInDays: null })\n```\n\n----------------------------------------\n\nTITLE: Adding Cordova Diagnostic Plugin\nDESCRIPTION: Shows how to add the cordova.plugins.diagnostic plugin for handling system permissions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add cordova:cordova.plugins.diagnostic@3.0.2\n```\n\n----------------------------------------\n\nTITLE: Browser Policy Content Configuration\nDESCRIPTION: Example of configuring browser content policy to allow script origin with nonce support.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowScriptOrigin(`nonce-${nonce}`);\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Dependencies\nDESCRIPTION: Command to install Meteor dependencies by running the help command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ ./meteor --help\n```\n\n----------------------------------------\n\nTITLE: Inspector Profiling Configuration\nDESCRIPTION: Commands for advanced inspector profiling, including function targeting and output configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Profile a specific function (e.g. bundler.bundle)\nMETEOR_INSPECT=bundler.bundle meteor run\n\n# Profile multiple functions\nMETEOR_INSPECT=bundler.bundle,compiler.compile meteor build\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Index in Meteor Collections\nDESCRIPTION: Demonstrates the use of createIndex method to create an index on a Meteor collection. This replaces the deprecated _ensureIndex method in MongoDB 5.0 and later versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateIndex\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode (Shell)\nDESCRIPTION: Provides shell commands to first change the directory (`cd`) to the iOS project location generated by the `meteor build` command and then open the corresponding Xcode project file (`.xcodeproj`) using the `open` command on macOS. This is a step in the manual iOS deployment process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\ncd <build-output-directory>/ios/project\nopen MyApp.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Meteor Application via Command Line\nDESCRIPTION: Command for creating a new Meteor application with TypeScript support using the CLI. This creates a properly configured app with a recommended tsconfig.json file that serves as a reference for TypeScript and Meteor integration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nmeteor create --typescript new-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Specifying Interface for Meteor Development Server\nDESCRIPTION: Allows specifying a particular interface for the development mode runner to bind to using the command-line tool.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_102\n\nLANGUAGE: Shell\nCODE:\n```\nmeteor -p host:port\n```\n\n----------------------------------------\n\nTITLE: Adding Sass Files to Atmosphere Package\nDESCRIPTION: Demonstrates how to add Sass files to an Atmosphere package, including both eagerly and lazily evaluated files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function(api) {\n  api.addFiles('my-package.scss', 'client');\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function(api) {\n  api.addFiles([\n    'stylesheets/_util.scss',\n    'stylesheets/_variables.scss'\n  ], 'client', {isImport: true});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Modules in package.json for Meteor Applications\nDESCRIPTION: Specifies test module configuration in package.json to control which test files are loaded by 'meteor test' commands. This allows separate specification of test files from main application code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"client/main.js\",\n      \"server\": \"server/main.js\"\n    },\n    \"testModule\": \"tests.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Runtime for Meteor 1.8\nDESCRIPTION: Updates the @babel/runtime npm package to version 7.0.0 or later which is required for Meteor 1.8 compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.8-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install @babel/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform to Meteor Project\nDESCRIPTION: Command to add the iOS platform to a Meteor project using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add-platform ios\n```\n\n----------------------------------------\n\nTITLE: Generating Random Hex Strings in Meteor\nDESCRIPTION: Random.hexString() generates random hexadecimal strings of specified length, useful for creating random identifiers or hash-like strings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/random.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.hexString(n)\n```\n\n----------------------------------------\n\nTITLE: Adding npm package to source control\nDESCRIPTION: Command to forcefully add a node_modules package to git source control, which is typically ignored by default. This ensures your modified version is tracked and shared with teammates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit add -f node_modules/left_pad/\n```\n\n----------------------------------------\n\nTITLE: Meteor Blaze Template Definition\nDESCRIPTION: Example of defining a reactive template using Meteor Blaze's templating syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n<template name=\"weather\">\n  The weather here is {{forecast}}!\n</template>\n```\n\n----------------------------------------\n\nTITLE: Galaxy Deployment Settings Configuration\nDESCRIPTION: JSON configuration file for deploying the Meteor application to Galaxy hosting. Includes MongoDB connection settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"galaxy.meteor.com\": {\n    \"env\": {\n      \"MONGO_URL\": \"Your MongoDB URL\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Diagnosing MongoDB Startup Failure in Meteor on Windows\nDESCRIPTION: This code snippet demonstrates the error messages displayed when the embedded MongoDB server fails to start in a Meteor application on Windows. The error is typically caused by missing Visual C++ Redistributable packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/windows.md#2025-04-22_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\nC:\\Users\\user\\app> meteor\n=> Started proxy.\nUnexpected mongo exit code 3221225781. Restarting.\nUnexpected mongo exit code 3221225781. Restarting.\nUnexpected mongo exit code 3221225781. Restarting.\nCan't start Mongo server.\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Flow Support in Meteor 1.10.2\nDESCRIPTION: Custom .babelrc configuration to enable Flow type annotations support in Meteor 1.10.2. This configuration is required after the babel-compiler package removed default Flow support.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.10.2-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"plugins\": [\n  \"@babel/plugin-syntax-flow\",\n  \"@babel/plugin-transform-flow-strip-types\"\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Inline Scripts in Meteor Browser Policy\nDESCRIPTION: Disallows inline Javascript, resulting in an extra round-trip on page load.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowInlineScripts()\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt NPM Package via Meteor Shell\nDESCRIPTION: This shell command uses `meteor npm install` (recommended over plain `npm` in Meteor projects) to install the `bcrypt` package. This provides a native implementation for password hashing, improving performance and security compared to the default pure-JavaScript fallback.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nmeteor npm install --save bcrypt\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Cordova plugins with compatibility version exclusion\nDESCRIPTION: Commands to add Cordova plugins while excluding them from the compatibility version calculation. This allows adding new plugins without changing the compatibility version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add cordova:cordova-plugin-camera@4.1.0\nmeteor add cordova:cordova-plugin-gyroscope@0.1.4\nMETEOR_CORDOVA_COMPAT_VERSION_EXCLUDE='cordova-plugin-camera,cordova-plugin-gyroscope' meteor run ios-device\n```\n\n----------------------------------------\n\nTITLE: Adding URL Package to Meteor Package Dependencies\nDESCRIPTION: JavaScript code snippet demonstrating how to add the 'url' package as a dependency in a Meteor package's 'package.js' file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/url.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.use('url');\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB $near Query Example\nDESCRIPTION: Example showing how MongoDB and Minimongo handle $near queries differently with documents containing multiple points.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/minimongo/NOTES.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nc.find({$near: 'a'})\n// Document: {a: [[1,1], [2, 2]]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Test Environment\nDESCRIPTION: Example of setting up package test configuration using Package.onTest, including necessary dependencies and test entry point.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onTest(function(api) {\n  // You almost definitely want to depend on the package itself,\n  // this is what you are testing!\n  api.use('my-package');\n\n  // You should also include any packages you need to use in the test code\n  api.use(['ecmascript', 'random', 'meteortesting:mocha']);\n\n  // Finally add an entry point for tests\n  api.mainModule('my-package-tests.js');\n});\n```\n\n----------------------------------------\n\nTITLE: Callback Function in Blaze Template\nDESCRIPTION: Example of creating a callback function in a Blaze template helper to pass to React components\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nTemplate.userDisplay.helpers({\n  onClick() {\n    const instance = Template.instance();\n\n    // Return a function from this helper, where the template instance is in\n    // a closure\n    return () => {\n      instance.hasBeenClicked.set(true)\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for HMR Availability in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if the HMR API is available before using it. This check is important as the API isn't always available, such as in production or unsupported architectures.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/hot-module-replacement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (module.hot) {\n  module.hot.accept();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Match.Maybe in Meteor 1.3\nDESCRIPTION: Example of using the new Match.Maybe matcher in Meteor 1.3, which allows matching null in addition to undefined.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\nMatch.Maybe(type)\n```\n\n----------------------------------------\n\nTITLE: React Component with Meteor Method Calls\nDESCRIPTION: Example of a React component implementing user status tracking with async Meteor method calls, demonstrating potential timing issues with multiple method calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.8-migration.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// this is a React example\nconst MyComponent1 = () => {\n  ...\n   // If the user do not type anything in 5 seconds\n   // set its status to offile\n   useEffect(() => {\n      const interval = setInterval(() => {\n         const now = new Date();\n         const timeWithoutTexting = now.getTime() - lastType.getTime();\n         if (isUserOn && timeWithoutTexting >= 5000) {\n            Meteor.callAsync(\"changeUserStatus\", 'OFFLINE');\n         }\n      }, 1000);\n      return () => clearInterval(interval);\n   }, [isUserOn, lastTyped]);\n  \n  return <div>\n        <input onChange={async ({ target: { value }}) => {\n           // Every time the use type something, save the value in database,\n           // change the user status to online, and set a new lastTyped:\n           await Meteor.callAsync(\"updateText\", value);\n           if (userStatus === 'OFFLINE') {\n              Meteor.callAsync(\"changeUserStatus\", 'ONLINE'); \n           }\n           setLastTyped(new Date());\n        }}/>\n     </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React from npm in Meteor 1.3\nDESCRIPTION: Commands for removing the Atmosphere React package and installing React directly from npm. This includes installing the core React packages and the react-meteor-data package for data integration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove react\n\n# if you are using our data integration\nmeteor add react-meteor-data\n\nnpm install --save react react-dom react-addons-pure-render-mixin\n```\n\n----------------------------------------\n\nTITLE: Navbar Component Implementation\nDESCRIPTION: Example of implementing a navigation bar using Flowbite React components\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Navbar } from 'flowbite-react';\n\n<Navbar fluid={true} rounded={true}>\n  <Navbar.Brand href=\"https://flowbite.com/\">\n    <img\n      src=\"https://flowbite.com/docs/images/logo.svg\"\n      className=\"mr-3 h-6 sm:h-9\"\n      alt=\"Flowbite Logo\"\n    />\n    <span className=\"self-center whitespace-nowrap text-xl font-semibold dark:text-white\">\n      Flowbite\n    </span>\n  </Navbar.Brand>\n  <Navbar.Toggle />\n  <Navbar.Collapse>\n    <Navbar.Link href=\"/navbars\" active={true}>\n      Home\n    </Navbar.Link>\n    <Navbar.Link href=\"/navbars\">About</Navbar.Link>\n    <Navbar.Link href=\"/navbars\">Services</Navbar.Link>\n    <Navbar.Link href=\"/navbars\">Pricing</Navbar.Link>\n    <Navbar.Link href=\"/navbars\">Contact</Navbar.Link>\n  </Navbar.Collapse>\n</Navbar>;\n```\n\n----------------------------------------\n\nTITLE: Installing Fetch Polyfill in Meteor\nDESCRIPTION: Command to add the fetch polyfill package to a Meteor project, which is required after the HTTP package's internal changes from http to fetch API.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.3-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add fetch\n```\n\n----------------------------------------\n\nTITLE: Accessing Facts Package Data on Server\nDESCRIPTION: Code showing how to access the facts package data on the server side through the Facts._factsByPackage object, which contains collected statistics about the Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nFacts._factsByPackage\n```\n\n----------------------------------------\n\nTITLE: Handling Item Removal in Subscription Shutdown\nDESCRIPTION: Reference to the removed method available during session shutdown, used for handling item removal in publish functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\nthis.removed\n```\n\n----------------------------------------\n\nTITLE: Adding ECMAScript Package to Meteor Package\nDESCRIPTION: Code snippet to include the `ecmascript` package in a Meteor package definition. This is done by adding `api.use('ecmascript')` in the `Package.onUse` callback.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.use('ecmascript');\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting a Class using ES2015 Default Export in JavaScript\nDESCRIPTION: Demonstrates exporting a single class (`ClickCounter`) as the default export from a JavaScript module using ES2015 syntax. This is recommended when a file primarily defines one main entity.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport default class ClickCounter { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor App with Vue 3\nDESCRIPTION: Command to create a Meteor app with Vue 3, Tailwind CSS, Vite, and MongoDB. Includes a list of npm and Meteor packages that are included by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --vue app-name\n```\n\n----------------------------------------\n\nTITLE: Allowing Inline Scripts in Browser Policy (JavaScript)\nDESCRIPTION: Permits inline <script> tags, javascript: URLs, and inline event handlers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowInlineScripts()\n```\n\n----------------------------------------\n\nTITLE: Installing npm Package with Meteor\nDESCRIPTION: Example of installing a package using meteor npm command, which ensures proper dependency management and binary compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install lodash --save\n```\n\n----------------------------------------\n\nTITLE: Setting Meteor Environment Variables\nDESCRIPTION: Environment variables for configuring custom client and server entrypoints, and log directory location in Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_CLIENT_ENTRYPOINT=<path-to-file>\nMETEOR_SERVER_ENTRYPOINT=<path-to-file>\nMETEOR_LOG_DIR=<path-to-directory>\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression for Real-Time Dashboard Applications\nDESCRIPTION: Configuration recommended for applications with frequent small updates like real-time dashboards or trading platforms, where compression overhead might impact performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/performance/websocket-compression.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Disable compression for optimal performance with small, frequent updates\nSERVER_WEBSOCKET_COMPRESSION=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor Inspector Profiling Options (Bash)\nDESCRIPTION: Shows how to customize Meteor's inspector profiling behavior by setting various environment variables in Bash. These include `METEOR_INSPECT_CONTEXT` for profile file identifiers, `METEOR_INSPECT_OUTPUT` for the save directory, `METEOR_INSPECT_INTERVAL` for sampling frequency, and `METEOR_INSPECT_MAX_SIZE` for the maximum profile size limit. Requires Meteor CLI and Bash.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/PERFORMANCE.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Identifier for profile files\nMETEOR_INSPECT_CONTEXT=context_name\n\n# Directory where .cpuprofile files will be saved (default: ./profiling)\nMETEOR_INSPECT_OUTPUT=/path/to/directory\n\n# Sampling interval in ms - lower values = more details but uses more memory\nMETEOR_INSPECT_INTERVAL=500\n\n# Maximum profile size in MB (default: 2000)\nMETEOR_INSPECT_MAX_SIZE=1000\n```\n\n----------------------------------------\n\nTITLE: Generating Random Fractions in Meteor\nDESCRIPTION: Random.fraction() generates a random floating point number between 0 and 1, useful for probability calculations and random number generation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/random.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRandom.fraction()\n```\n\n----------------------------------------\n\nTITLE: Documents Structure in Archives Collection\nDESCRIPTION: Example structure of documents in the Archives collection, including metadata such as the original collection name, archive timestamp, and adjusted document ID.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _id, // auto-generated by Meteor as with other collection _ids\n  _collection, // the name of the collection, e.g. 'todos', that the doc belonged to originally\n  archivedAt, // the timestamp when the document was removed from its original collection and inserted into the archive\n  id, // the original doc _id renamed to prevent conflict with the auto-generated one above. when restored, it will be renamed back to _id automatically by this package\n  /*\n  ...rest of original doc\n  */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New React-based Meteor Application\nDESCRIPTION: Command to create a new Meteor application using the React-based template introduced in Meteor 1.8.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --react new-react-app\n```\n\n----------------------------------------\n\nTITLE: Installing and Verifying Gradle for Android Builds - Shell\nDESCRIPTION: Installs Gradle via Homebrew, apt-get, or SDKMAN! on Unix-like platforms and verifies the installation with 'gradle --version'. Gradle automates Android app builds; one of these methods should be chosen based on system environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# On Mac OSX:\nbrew install gradle\n\n# On Debian/Ubuntu:\nsudo apt-get install gradle\n\n# using sdkman\ncurl -s \"https://get.sdkman.io\" | bash\nsource \"$HOME/.sdkman/bin/sdkman-init.sh\"\nsdk install gradle 8.7\n\ngradle --version  # Verify installation\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Version Preference in JavaScript\nDESCRIPTION: Code to set the Swift version preference in mobile-config.js for Cordova apps after upgrading to Meteor 1.10.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nApp.setPreference('SwiftVersion', 4.2);\n```\n\n----------------------------------------\n\nTITLE: Importing from npm and Atmosphere Packages in Meteor\nDESCRIPTION: Examples of importing from both npm and Meteor Atmosphere packages in a Meteor application. This shows the syntax difference for importing from these two package sources.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';          // default import from npm\nimport { HTTP } from 'meteor/http';   // named import from Atmosphere\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.js for Compatibility with Meteor 2 and 3\nDESCRIPTION: Code snippet demonstrating how to configure a package to be compatible with both Meteor 2.3 and Meteor 3.0.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napi.versionsFrom(['2.3', '3.0']);\n```\n\n----------------------------------------\n\nTITLE: Adding Platforms to a Meteor Project using Shell\nDESCRIPTION: Adds specified target platforms (e.g., 'android', 'ios') to the Meteor project. The 'server' and 'browser' platforms are default and cannot be removed. Added platforms determine the targets for 'meteor run' and 'meteor build'. The 'ios' platform requires OS X.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add-platform <platform> [platform..]\n```\n\n----------------------------------------\n\nTITLE: Template Parent Data Access\nDESCRIPTION: Default behavior for Template.parentData when called with no arguments, selecting the first parent data context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.parentData() // Returns first parent data context\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Update\nDESCRIPTION: Example showing how to update document _id field using $set operator\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_113\n\nLANGUAGE: JavaScript\nCODE:\n```\n{$set: {'x._id': 1}}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Blaze Template Helper with Dependency (JavaScript)\nDESCRIPTION: This JavaScript code defines the client-side logic for the 'index' Blaze template. It imports the 'moment' library and the template's HTML definition. It then defines a 'time' helper function that uses 'moment' to format and return the current time, intended for display within the 'index' template.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// /imports/client/index.js\nimport moment       from 'moment';\nimport { Template } from 'meteor/templating';\nimport './index.html';\n\nTemplate.index.helpers({\n  time() {\n    return moment().format('LTS');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accounts Password Breaking Change - v2.9.1\nDESCRIPTION: Changes to resetPassword and verifyEmail authentication methods for 2FA enabled users.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naccounts-password@2.3.3\n- resetPassword and verifyEmail no longer automatically log in users with 2FA\n- throws '2fa-enabled' error instead of auto-login\n```\n\n----------------------------------------\n\nTITLE: Setting Development Bundle Cache in Bash\nDESCRIPTION: Command to enable indefinite caching of downloaded dev_bundle versions by setting an environment variable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nset SAVE_DEV_BUNDLE_TARBALL=t\n```\n\n----------------------------------------\n\nTITLE: Updating Babel and meteor-node-stubs packages in Meteor 1.7\nDESCRIPTION: This command updates the @babel/runtime and meteor-node-stubs npm packages to their latest versions, which is recommended after upgrading to Meteor 1.7 or 1.7.0.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.7-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install @babel/runtime@latest meteor-node-stubs@latest\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Meteor to Avoid Package Installation Issues\nDESCRIPTION: If experiencing package installation issues, especially after having the Meteor setup for over a year, it is recommended to reinstall. Execute these commands to remove existing setup and reinstall Meteor cleanly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor uninstall // or rm -rf ~/.meteor\nnpx meteor\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Iterator using Symbol.iterator in JavaScript\nDESCRIPTION: This snippet demonstrates how to access the iterator method of an array using the polyfilled `Symbol.iterator`. This is often used implicitly with features like `for...of` loops. The `ecmascript` package in Meteor provides the necessary polyfill for `Symbol`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[1,2,3][Symbol.iterator]()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Collection Definition\nDESCRIPTION: Creates a typed Mongo Collection for AnotherCustomer entity with TypeScript interface\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mongo } from 'meteor/mongo';\n\nexport type AnotherCustomer = {\n  _id?: string;\n  name: string;\n  createdAt: Date;\n}\n\nexport const AnotherCustomerCollection = new Mongo.Collection<AnotherCustomer>('another-customer');\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Meteor using NPX\nDESCRIPTION: This snippet shows how to install a specific version of Meteor using the npx command. The exact version needs to be specified in place of '<version>'. The installation does not affect global npm packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/meteor-installer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor@<version>\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Meteor Package Update Constraints using Shell\nDESCRIPTION: This command helps diagnose why a specific Meteor package is not updating to the desired version. By attempting to add the package explicitly with the target version, Meteor's constraint solver provides feedback on conflicting dependencies or other reasons preventing the update.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add <package>@<target-version>\n```\n\n----------------------------------------\n\nTITLE: Request Data Processing for Meta Tags\nDESCRIPTION: Implementation of request data processing to generate dynamic meta tags for social previews\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/server-render.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onPageLoad } from \"meteor/server-render\";\n\nconst getBaseUrlFromHeaders = (headers) => {\n  const protocol = headers[\"x-forwarded-proto\"];\n  const { host } = headers;\n  // we need to have '//' to findOneByHost work as expected\n  return `${protocol ? `${protocol}:` : \"\"}//${host}`;\n};\n\nconst getContext = (sink) => {\n  // more details about this implementation here\n  // https://github.com/meteor/meteor/issues/9765\n  const { headers, url, browser } = sink.request;\n  // no useful data will be found for galaxybot requests\n  if (browser && browser.name === \"galaxybot\") {\n    return null;\n  }\n\n  // when we are running inside cordova we don't want to resolve meta tags\n  if (url && url.pathname && url.pathname.includes(\"cordova/\")) {\n    return null;\n  }\n\n  const baseUrl = getBaseUrlFromHeaders(headers);\n  const fullUrl = `${baseUrl}${url.pathname || \"\"}`;\n\n  return { baseUrl, fullUrl };\n};\n\nonPageLoad((sink) => {\n  const { baseUrl, fullUrl } = getContext(sink);\n\n  // product URL contains /product on it\n  const urlParseArray = fullUrl.split(\"/\");\n\n  const productPosition = urlParseArray.indexOf(\"product\");\n  const productId =\n    productPosition !== -1 &&\n    urlParseArray[productPosition + 1].replace(\"?\", \"\");\n  const product = productId && ProductsCollection.findOne(productId);\n\n  const productTitle = product && `Buy now ${product.name}, ${product.price}`;\n  if (productTitle) {\n    sink.appendToHead(`<title>${productTitle}</title>\\n`);\n    sink.appendToHead(`<meta property=\"og:title\" content=\"${productTitle}\">\\n`);\n    if (product.imageUrl) {\n      sink.appendToHead(\n        `<meta property=\"og:image\" content=\"${product.imageUrl}\">\\n`\n      );\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags to Cordova config.xml\nDESCRIPTION: App.appendToConfig allows adding custom tags to the Cordova config.xml file\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.appendToConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Memory-Constrained Environments\nDESCRIPTION: Settings designed for deployments with limited memory resources, minimizing memory usage while still providing some compression benefits.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/performance/websocket-compression.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Minimize memory usage while maintaining compression\nSERVER_WEBSOCKET_COMPRESSION='{\"threshold\": 2048, \"level\": 1, \"memLevel\": 1, \"maxWindowBits\": 9}'\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Meteor npx\nDESCRIPTION: Examples of using the new 'meteor npx' command to execute various npm packages directly. This feature allows running commands from local node_modules/.bin or the npm cache.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npx cowsay mooooo\nmeteor npx uuid\nmeteor npx nyancat\nmeteor npx yarn\n```\n\n----------------------------------------\n\nTITLE: Adding ReactiveVar Package with Meteor CLI\nDESCRIPTION: This bash command adds the ReactiveVar package to a Meteor project using the Meteor command line interface. It is the first step in utilizing ReactiveVar functionalities within the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/ReactiveVar.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add reactive-var\n```\n\n----------------------------------------\n\nTITLE: Template Literals Example\nDESCRIPTION: Demonstration of ES2015 template literals with string interpolation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar name = \"Ben\";\nvar message = `My name is:\n${name}`;\n```\n\n----------------------------------------\n\nTITLE: EJSON User-Specified Type Format\nDESCRIPTION: The format for representing custom user-specified types in EJSON with typename and value.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"$type\": TYPENAME, \"$value\": VALUE}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript in Meteor\nDESCRIPTION: Command to add TypeScript support to a Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/build-tool.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add typescript\n```\n\n----------------------------------------\n\nTITLE: Unregistering OAuth Services in Meteor Accounts\nDESCRIPTION: Adds a method to unregister OAuth services in Meteor accounts. This ensures users can only log in with currently registered services.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_82\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.oauth.unregisterService\n```\n\n----------------------------------------\n\nTITLE: Repairing MongoDB After Version Downgrade\nDESCRIPTION: Example command to repair a MongoDB database after attempting to run an application with an older version of Meteor that uses an older version of MongoDB.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\n~/.meteor/packages/meteor-tool/1.6.0_1/mt-os.osx.x86_64/dev_bundle/mongodb/bin/mongod --dbpath /my-app/.meteor/local/db --repair\n```\n\n----------------------------------------\n\nTITLE: Running Specific Package Tests\nDESCRIPTION: Example of running tests for a specific package (mongo) and filtering tests using TINYTEST_FILTER.\nSOURCE: https://github.com/meteor/meteor/blob/devel/DEVELOPMENT.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ ./meteor test-packages mongo\n\nTINYTEST_FILTER=\"collection - call new Mongo.Collection\" ./meteor test-packages\n```\n\n----------------------------------------\n\nTITLE: Generating Meteor Project Scaffolding\nDESCRIPTION: Command to generate scaffolding for a Meteor project. Creates a model with associated collection, methods, and publications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmeteor generate customer\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Meteor Submodule for Local Development\nDESCRIPTION: Series of commands to remove the existing Meteor submodule and replace it with a local Meteor folder for development purposes. This allows testing documentation changes with local Meteor source code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# REMOVE submodule\n# Remove the submodule entry from .git/config\ngit submodule deinit -f code\n\n# Remove the submodule directory from the superproject's\n# .git/modules directory\nrm -rf .git/modules/code\n\n# Remove the entry in .gitmodules and remove the submodule directory\n# located at path/to/submodule\ngit rm -f code\n\n# ADD your local meteor submodule\ngit submodule add /path/to/local/meteor code\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Browser Versions for ECMAScript Features in Meteor\nDESCRIPTION: This snippet demonstrates how to use the setMinimumBrowserVersions function to specify minimum browser versions for native ECMAScript class support in Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setMinimumBrowserVersions } from \"meteor/modern-browsers\";\n\nsetMinimumBrowserVersions({\n  chrome: 49,\n  firefox: 45,\n  firefoxIOS: 100,\n  edge: 12,\n  ie: Infinity, // Sorry, IE11.\n  mobile_safari: [9, 2], // 9.2.0+\n  opera: 36,\n  safari: 9,\n  electron: 1,\n}, \"classes\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in Meteor\nDESCRIPTION: Shows how to configure email settings in Meteor using Meteor.settings. This allows for easy setup of email services using known providers supported by Nodemailer.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.settings\n```\n\n----------------------------------------\n\nTITLE: Installing older Meteor versions on Apple M1\nDESCRIPTION: Special installation command for Apple M1 computers to run older versions of Meteor (before 2.5.1) using Rosetta 2 emulation with architecture specification.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\narch -x86_64 npm install -g meteor\n```\n\n----------------------------------------\n\nTITLE: Disallowing Inline Scripts in Browser Policy (JavaScript)\nDESCRIPTION: Prohibits inline JavaScript, resulting in an extra round-trip on page load for Meteor runtime configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowInlineScripts()\n```\n\n----------------------------------------\n\nTITLE: Installing ReactiveDict Package in Meteor\nDESCRIPTION: Command to add the reactive-dict package to a Meteor project using the terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/reactive-dict.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add reactive-dict\n```\n\n----------------------------------------\n\nTITLE: Importing Less Styles from Target Meteor Application\nDESCRIPTION: Less code example showing how to import styles from the target Meteor application using the app import syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/less/README.md#2025-04-22_snippet_3\n\nLANGUAGE: less\nCODE:\n```\n@import \"{}/client/styles/imports/colors.less\"\n\n.my-nav {\n  // use a color from the app style pallete\n  background-color: @primary-branding-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Meteor Local Directory Configuration\nDESCRIPTION: Environment variable configuration to specify custom location for .meteor/local directory\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_LOCAL_DIR=/custom/path\n```\n\n----------------------------------------\n\nTITLE: Cordova Platform Preparation Method\nDESCRIPTION: Method to synchronize project contents with a platform directory and handle platform-specific plugin installations. Similar to 'cordova prepare <platform>' command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cordova/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCordovaProject#prepareForPlatform(platform)\n```\n\n----------------------------------------\n\nTITLE: Asserting Undefined Values with Meteor Test JavaScript\nDESCRIPTION: Validates that the provided value is exactly undefined. Utilizes Meteor's test methods. Requires the value to evaluate and accepts an optional message. Will fail the test if the value is defined or any other type.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.isUndefined(actual[, message]);\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin from Git URL with SHA Reference\nDESCRIPTION: Example showing how to install a specific version of a Cordova plugin using a Git URL with SHA reference, which is the supported method for version pinning in Meteor 1.2.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/apache/cordova-plugin-file#c452f1a67f41cb1165c92555f0e721fbb07329cc\n```\n\n----------------------------------------\n\nTITLE: Installing and adding a package to source control\nDESCRIPTION: Commands to install an npm package and add it to source control for local modification. This example uses left-pad and ensures the modified version is tracked in your repository.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save left-pad\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Tinytest in Meteor\nDESCRIPTION: Example of using async/await with Tinytest.addAsync in Meteor 1.6.1, which now accepts test functions that return Promise objects.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nTinytest.addAsync(\"some async stuff\", async function (test) {\n  test.equal(shouldReturnFoo(), \"foo\");\n  const bar = await shouldReturnBarAsync();\n  test.equal(bar, \"bar\");\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Meteor Version | Bash\nDESCRIPTION: Determines the Meteor version currently installed in the project. This is a prerequisite for using meteor-rpc, which requires Meteor v2.8 or higher. The command outputs the version as a string in the terminal; ensure this meets the minimum requirement before proceeding.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor --version\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Fetch Package\nDESCRIPTION: Shell command to add WHATWG fetch() API implementation package to a Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add fetch\n```\n\n----------------------------------------\n\nTITLE: Correct Usage in Strict Mode - JavaScript\nDESCRIPTION: This snippet demonstrates correct implementation in strict mode where only prefixed class selectors are used for eventmap selections, ensuring compliance with the strict mode requirements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/prefix-eventmap-selectors.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefix-eventmap-selectors: [2, \"js-\", \"strict\"]*/\n\nTemplate.foo.events({\n  'click .js-foo': function () {}\n})\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Meteor AppCache with a Callback in JavaScript\nDESCRIPTION: Shows how to use the `enableCallback` option within `Meteor.AppCache.config` (available from `appcache@1.2.4`) to dynamically enable or disable the Application Cache based on custom logic evaluated per request. This example checks a database setting and validates a client certificate. Assumes the existence of `getSettingsFromDb` and `validateClientCert` functions and access to the request object (`req`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/appcache.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Enable offline mode using a value from database and certificate validation\nMeteor.AppCache.config({\n  // This option is available starting from appcache@1.2.4\n  enableCallback: () => {\n    if (!getSettingsFromDb(\"public.appcache_enabled\")) {\n      return false;\n    }\n\n    const validation = validateClientCert({\n      clientCertPayload: req.headers[\"x-client-cert\"],\n      url: req.url.href,\n    });\n\n    return validation.passed;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Package Directories Environment Variable in Meteor\nDESCRIPTION: Demonstrates how to use the PACKAGE_DIRS environment variable to override package location in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_145\n\nLANGUAGE: Shell\nCODE:\n```\nPACKAGE_DIRS\n```\n\n----------------------------------------\n\nTITLE: Displaying Meteor Help Information\nDESCRIPTION: Shows how to use the 'meteor help' command to get general help or specific command information.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor help\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor help <command>\n```\n\n----------------------------------------\n\nTITLE: Disallowing Eval in Browser Policy (JavaScript)\nDESCRIPTION: Prohibits eval and related functions. Note that the default policy disallows eval, but it's often enabled by the dynamic-imports package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowEval()\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Runtime for Meteor 1.6.1\nDESCRIPTION: Command to install the @babel/runtime package which is required after upgrading to Babel 7. This replaces the previous babel-runtime dependency.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nmeteor npm install @babel/runtime\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Files to Atmosphere Package\nDESCRIPTION: Shows how to include asset files like fonts and images in an Atmosphere package using api.addAssets() in the package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function(api) {\n  api.addAssets([\n    'font/OpenSans-Regular-webfont.eot',\n    'font/OpenSans-Regular-webfont.svg',\n    'font/OpenSans-Regular-webfont.ttf',\n    'font/OpenSans-Regular-webfont.woff',\n  ], 'client');\n});\n```\n\n----------------------------------------\n\nTITLE: Meteor Account Enrollment Email\nDESCRIPTION: Example of sending enrollment email with extra parameters in Meteor accounts system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.sendEnrollmentEmail(userId, email, null, extraParams);\n```\n\n----------------------------------------\n\nTITLE: Exporting from CoffeeScript in Meteor\nDESCRIPTION: Example of exporting a variable from a CoffeeScript file in a Meteor application. This shows how to use the export keyword in CoffeeScript syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_4\n\nLANGUAGE: coffeescript\nCODE:\n```\n# lists.coffee\n\nexport Lists = new Collection 'lists'\n```\n\n----------------------------------------\n\nTITLE: Marking Debug-Only Packages in JavaScript\nDESCRIPTION: This snippet shows how to mark a package as debug-only by adding the debugOnly flag to Package.describe(). Debug-only packages are not included in production builds.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_95\n\nLANGUAGE: JavaScript\nCODE:\n```\nPackage.describe({\n  // Other metadata\n  debugOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Meteor Core Components\nDESCRIPTION: Import statement for core Meteor components from @meteorrn/core package\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react-native.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Meteor, { Mongo, withTracker } from '@meteorrn/core';\n```\n\n----------------------------------------\n\nTITLE: Resetting Project State - Meteor CLI - Bash\nDESCRIPTION: Resets the Meteor project to a clean state, clearing all local caches. The optional '--db' flag deletes the local MongoDB database as well. Must be run with no development server active. Outputs status of reset; use with caution as data removal is permanent when '--db' is specified.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nmeteor reset [--db]\n```\n\n----------------------------------------\n\nTITLE: Galaxy Deployment Command\nDESCRIPTION: Shell command for deploying the Meteor application to Galaxy hosting with free tier and MongoDB configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\nmeteor deploy vue3-meteor-3.meteorapp.com --free --mongo\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Atmosphere Packages in Meteor\nDESCRIPTION: Command to display all currently installed Atmosphere packages in a Meteor application. This helps developers track which packages are being used in their project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-atmosphere-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor list\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Type Example\nDESCRIPTION: Shows how to properly import types in TypeScript after enabling emitDecoratorsMetadata. Demonstrates the change from regular import to using the 'type' qualifier.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Point } from 'react-easy-crop/types';\n```\n\n----------------------------------------\n\nTITLE: MongoDB Oplog Collection Exclusion Configuration\nDESCRIPTION: Settings to exclude specific collections from Oplog watching, useful for collections with high write operations to prevent CPU spikes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"mongo\": {\n      \"oplogExcludeCollections\": [\"products\", \"prices\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Archive Package to a Meteor App\nDESCRIPTION: Command to add the 'jam:archive' package to a Meteor application. This package enables document archiving functionalities for the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add jam:archive\n```\n\n----------------------------------------\n\nTITLE: Using Camel Case in Meteor APIs\nDESCRIPTION: Updated public APIs to use camelCase naming convention instead of under_scores. Old spellings still supported for backwards compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_138\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.isClient\nMeteor.isServer\nthis.isSimulation\nMeteor.deps.Context.onInvalidate\nMeteor.status().retryCount\nMeteor.status().retryTime\n```\n\n----------------------------------------\n\nTITLE: Allowing Inline Styles in Meteor Browser Policy\nDESCRIPTION: Allows inline style tags and style attributes. This is the default policy.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowInlineStyles()\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Imports in JavaScript\nDESCRIPTION: This snippet shows how to use CommonJS require statements to import modules, equivalent to ES2015 import statements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar UserAccountsCore = require('meteor/useraccounts:core');\nrequire('../imports/startup/client/routes.js');\n```\n\n----------------------------------------\n\nTITLE: Accepting Xcode License Agreement via Command Line\nDESCRIPTION: This command allows developers to accept the Xcode and Apple SDKs license agreement non-interactively through the terminal. It requires administrator privileges (`sudo`) and is often necessary after installing or updating Xcode before using its command-line tools.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo xcodebuild -license accept\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor without PATH Updates\nDESCRIPTION: Installation command that prevents Meteor from automatically updating system PATH variables.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/install.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g meteor --ignore-meteor-setup-exec-path\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for Meteor Package Modules\nDESCRIPTION: Shows how to specify a lazy main module in a Meteor package. The module won't be evaluated during startup unless explicitly imported, and won't be included in the bundle if not referenced.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse(function (api) {\n  api.mainModule(\"client.js\", \"client\", { lazy: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Reactive Updates Example\nDESCRIPTION: More complex example showing multiple reactive values and conditional updates based on user settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar forecasts = new ReactiveDict;\nforecasts.set(\"Chicago\", \"cloudy\");\nforecasts.set(\"Tokyo\", \"sunny\");\n\nvar settings = new ReactiveDict;\nsettings.set(\"city\", \"Chicago\");\n\n$('body').html(\"The weather in <span class='city'></span> is <span class='weather'></span>.\");\nTracker.autorun(function () {\n  console.log(\"Updating\");\n  var currentCity = settings.get('city');\n  $('.city').text(currentCity);\n  $('.weather').text(forecasts.get(currentCity).toUpperCase());\n});\n```\n\n----------------------------------------\n\nTITLE: Adding ddp-rate-limiter Package in Meteor\nDESCRIPTION: This Bash command adds the ddp-rate-limiter package to a Meteor project, enabling developers to customize rate-limit rules. It is a prerequisite for using DDPRateLimiter functionalities.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/DDPRateLimiter.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add ddp-rate-limiter\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Meteor Guide's Static Site Generator\nDESCRIPTION: Provides shell commands for initializing and running the Hexo-based static site generator used for the Meteor Guide locally.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init --recursive\ncd site\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating @babel/runtime to latest version in Meteor 1.8.2\nDESCRIPTION: This command updates the @babel/runtime npm package to its latest version (7.7.2 at the time of writing), which is a required dependency update for Meteor 1.8.2.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.8.2-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install @babel/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Computed Path (Error Example) in JavaScript\nDESCRIPTION: Shows an example of attempting to use dynamic expressions in import paths, which results in an error\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/dynamic-import.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet path = 'example';\nconst module = await import(`/libs/${path}.js`);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nError: Cannot find module '/libs/example.js'\n```\n\n----------------------------------------\n\nTITLE: Setting Cordova Build Number in mobile-config.js\nDESCRIPTION: Example of manually setting the build number in mobile-config.js for Cordova apps to avoid issues with app updates on user devices after changes in Cordova version number generation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nApp.info('buildNumber', 'XXX');\n```\n\n----------------------------------------\n\nTITLE: Accessing Meteor Build Machines for Different Platforms\nDESCRIPTION: Commands to access pre-configured Meteor build machines for different operating systems and architectures. These commands require authentication with a Meteor developer account and provide secure shell access for package publishing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/build-machines.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# OS X\nmeteor admin get-machine os.osx.x86_64\n\n# Linux on 64-bit Intel\nmeteor admin get-machine os.linux.x86_64\n\n# Linux on 32-bit Intel\nmeteor admin get-machine os.linux.x86_32\n\n# Windows on 32-bit Intel\nmeteor admin get-machine os.windows.x86_32\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Usage Help via Exception in JavaScript\nDESCRIPTION: Demonstrates how to trigger the display of the command's help text by throwing the `main.ShowUsage` exception. This is typically used within the command handler to indicate invalid option usage or missing arguments, prompting the user with correct usage instructions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmain.registerCommand({...}, function (options) {\n  if (options.bla === 'bad-value')\n    throw new main.ShowUsage;\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/runtime Package with npm\nDESCRIPTION: Command to update the @babel/runtime npm package to the latest version, which is required when upgrading to Meteor 1.6.1.1 with its updated babel-meteor package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install @babel/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with Node.js Options (Linux)\nDESCRIPTION: Command to run Meteor with additional Node.js options in Linux environment\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_NODE_OPTIONS=--inspect-brk meteor run\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova package in Meteor CLI\nDESCRIPTION: Demonstrates how to install a scoped Cordova package using the Meteor command-line interface.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_55\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add cordova:@somescope/some-cordova-plugin@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Migrating from juliancwirko:postcss to standard-minifier-css in Meteor 2.7\nDESCRIPTION: Removes the juliancwirko:postcss package and adds the standard-minifier-css package to use the built-in PostCSS support in Meteor 2.7.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.7-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove juliancwirko:postcss\nmeteor add standard-minifier-css\n```\n\n----------------------------------------\n\nTITLE: Embedding Non-Meteor Widgets in Templates\nDESCRIPTION: New constant block helper allows embedding non-Meteor widgets like Google Maps in Meteor templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_141\n\nLANGUAGE: HTML\nCODE:\n```\n{{#constant}}\n```\n\n----------------------------------------\n\nTITLE: Executing commands with meteor npx\nDESCRIPTION: Examples of using the new 'meteor npx' command to execute various packages directly without installation. This demonstrates the flexibility of the new npx integration in Meteor 1.6.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_55\n\nLANGUAGE: Shell\nCODE:\n```\nmeteor npx cowsay mooooo\nmeteor npx uuid\nmeteor npx nyancat\nmeteor npx yarn\n```\n\n----------------------------------------\n\nTITLE: Object Rest/Spread Properties\nDESCRIPTION: Examples of object rest and spread properties in declarations and expressions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet { x, y, ...rest } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\ny; // 2\nrest; // { a: 3, b: 4 }\n\nlet n = { x, y, ...rest };\nn; // { x: 1, y: 2, a: 3, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Major Version Dependencies\nDESCRIPTION: Demonstrates how to specify dependencies on multiple major versions of a package using the OR operator in api.use().\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\napi.use('blaze@1.0.0 || 2.0.0');\n```\n\n----------------------------------------\n\nTITLE: Installing Android Development Environment using Ubuntu Make\nDESCRIPTION: Uses the `umake` command (Ubuntu Make) to automatically install Android Studio and its dependencies (including JDK and Android SDK) on Ubuntu systems. This simplifies the setup process for Android development.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\numake android\n```\n\n----------------------------------------\n\nTITLE: Accessing Meteor Release Version in JavaScript\nDESCRIPTION: Shows how to access the currently used Meteor release version in JavaScript code. This allows developers to check or display the Meteor version their app is using.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_131\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.release\n```\n\n----------------------------------------\n\nTITLE: MongoDB Update Operation\nDESCRIPTION: Example of MongoDB update operation using the positional $ operator to update array elements\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_112\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ $set: { 'a.$.b': 5 } }\n```\n\n----------------------------------------\n\nTITLE: Supporting both Meteor 1.2 and 1.3 in Angular packages\nDESCRIPTION: Code example for package authors showing how to make Angular packages compatible with both Meteor 1.2 and 1.3 by using weak dependencies and runtime checks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napi.use('angular:angular@1.5.3', 'client', { weak: true });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (!window.angular) {\n  try {\n    if (Package['modules-runtime']) {\n      var require = Package['modules-runtime'].meteorInstall();\n      require('angular');\n    }\n  } catch(e) {\n    throw new Error('angular package is missing');\n  }\n}\n\nangular.module('your.module', []);\n```\n\n----------------------------------------\n\nTITLE: Handling MongoDB Bulk Write Errors in Meteor\nDESCRIPTION: Update to the allow-deny package to handle MongoBulkWriteError in addition to BulkWriteError.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Inside allow-deny package\nif (error instanceof Meteor.Error || \n    error instanceof Mongo.Error || \n    error.name === \"BulkWriteError\" ||\n    error.name === \"MongoBulkWriteError\") {\n  // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL Instance in Meteor\nDESCRIPTION: JavaScript code showing how to import and create a new URL instance using the 'url' package in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/url.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URL } from 'meteor/url';\n\nconst url = new URL('https://www.meteor.com');\n```\n\n----------------------------------------\n\nTITLE: Installing Check Package in Meteor\nDESCRIPTION: Command to add the check package to a Meteor application\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/check.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add check\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with Node.js Options (PowerShell)\nDESCRIPTION: Command to run Meteor with additional Node.js inspection options in Windows PowerShell\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$env:SERVER_NODE_OPTIONS = '--inspect' | meteor run\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor CLI Globally\nDESCRIPTION: Command to install Meteor.js CLI tool globally using npm\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g meteor\n```\n\n----------------------------------------\n\nTITLE: Installing ECMAScript Package in Meteor App\nDESCRIPTION: Command to add the `ecmascript` package to an existing Meteor application. This enables ECMAScript 2015+ features in the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add ecmascript\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Cleartext Traffic for Meteor Autoupdate\nDESCRIPTION: Configuration snippet for enabling cleartext traffic in Android 9+ devices to allow hot code push functionality during development. This needs to be added to the mobile-config.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/autoupdate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nApp.appendToConfig(`<edit-config file=\"app/src/main/AndroidManifest.xml\"\n                     mode=\"merge\"\n                     target=\"/manifest/application\"\n                     xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <application android:usesCleartextTraffic=\"true\"></application>\n    </edit-config>\n`);\n```\n\n----------------------------------------\n\nTITLE: Building Meteor app with Cordova compatibility version for iOS\nDESCRIPTION: Command to build a Meteor app with a specific Cordova compatibility version for iOS. This ensures the app continues to receive hot code pushes while maintaining plugin compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nMETEOR_CORDOVA_COMPAT_VERSION_IOS=3ed5b9318b2916b595f7721759ead4d708dfbd46 meteor build ../build --server=127.0.0.1:3000\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Files to Atmosphere Package\nDESCRIPTION: Shows how to include CSS files in an Atmosphere package using api.addFiles() in the package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nPackage.onUse(function(api) {\n  api.addFiles('my-package.css', 'client');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Example Apps via CLI\nDESCRIPTION: Commands to create new Meteor example applications based on official tutorials using Blaze, React, and Angular frameworks\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_91\n\nLANGUAGE: sh\nCODE:\n```\nmeteor create --example simple-todos\nmeteor create --example simple-todos-react\nmeteor create --example simple-todos-angular\n```\n\n----------------------------------------\n\nTITLE: Dropdown Component Implementation\nDESCRIPTION: Example of implementing a dropdown menu using Flowbite React components\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/flowbite.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dropdown } from 'flowbite-react';\n\n<Dropdown label=\"Dropdown button\">\n  <Dropdown.Item>Dashboard</Dropdown.Item>\n  <Dropdown.Item>Settings</Dropdown.Item>\n  <Dropdown.Item>Earnings</Dropdown.Item>\n  <Dropdown.Item>Sign out</Dropdown.Item>\n</Dropdown>;\n```\n\n----------------------------------------\n\nTITLE: Adding ECMAScript Package to Meteor Package Definition\nDESCRIPTION: Code showing how to include the ecmascript package as a dependency in a Meteor package's package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse(function (api) {\n  api.use('ecmascript');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Database Reset Method Definition\nDESCRIPTION: Shows how to create a custom Meteor method that wraps the resetDatabase functionality with additional code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\n// NOTE: Before writing a method like this you'll want to double check\n// that this file is only going to be loaded in test mode!!\nMeteor.methods({\n  'test.resetDatabase': () => {\n    // custom code goes here... \n    resetDatabase()\n    // or here\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Disallowing Eval in Meteor Browser Policy\nDESCRIPTION: Disallows eval and related functions. This is the default policy.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowEval()\n```\n\n----------------------------------------\n\nTITLE: Example Meteor Settings File Structure\nDESCRIPTION: This snippet shows the structure of a Meteor settings file containing API keys. These settings can be accessed in the app's JavaScript code via Meteor.settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"facebook\": {\n    \"appId\": \"12345\",\n    \"secret\": \"1234567\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication-Required Methods with Functional-Style Syntax\nDESCRIPTION: Shows how to explicitly create methods that require authentication using the functional-style syntax with the 'close' helper function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { close } from 'meteor/jam:method';\n\nexport const closedMethod = close(async data => {\n  // ... //\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Platforms from a Meteor Project using Shell\nDESCRIPTION: Removes one or more specified platforms (e.g., 'android', 'ios') previously added to the Meteor project. Use 'meteor list-platforms' to see currently added platforms.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmeteor remove-platform <platform> [platform..]\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics in Meteor Settings (JSON)\nDESCRIPTION: This JSON snippet illustrates how to configure the `okgrow:analytics` package within a Meteor application's settings file (e.g., `settings.json`). It defines a public object containing `analyticsSettings`, where specific provider configurations are placed. In this case, it sets the `trackingId` for Google Analytics, making it accessible on the client-side for the package to use.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"public\": {\n    \"analyticsSettings\": {\n      // Add your analytics tracking id's here\n      \"Google Analytics\" : {\"trackingId\": \"Your tracking ID\"}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Vue App Component\nDESCRIPTION: A simple Vue App component with a basic heading. Serves as the main entry point for the application after cleaning up the initial project structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"p-8\">\n    <h1>Hello Meteor</h1>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Email Package to Meteor Project\nDESCRIPTION: This command installs the email package to a Meteor project, enabling functionality related to email operations. It requires a Meteor environment with the necessary permissions to add packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/email.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add email\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.1\nDESCRIPTION: Use this command to update your Meteor project to version 3.1. This update is necessary to adopt improvements and feature changes, including those related to updated dependencies like Express and the MongoDB driver.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.1\n```\n\n----------------------------------------\n\nTITLE: Example Callback in onComment Option for Acorn\nDESCRIPTION: This JavaScript object format demonstrates how to collect comment information when using Acorn's onComment option. The function captures comment type, text, start, and end positions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/packages/modules-test-package/node_modules/acorn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"Line\" | \"Block\",\n  \"value\": \"comment text\",\n  \"start\": Number,\n  \"end\": Number,\n  // If `locations` option is on:\n  \"loc\": {\n    \"start\": {line: Number, column: Number}\n    \"end\": {line: Number, column: Number}\n  },\n  // If `ranges` option is on:\n  \"range\": [Number, Number]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating meteor-node-stubs for Meteor 1.8.2 compatibility\nDESCRIPTION: This command updates the meteor-node-stubs package to version 1.0.0, which is now used by default in new Meteor 1.8.2 applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.8.2-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install meteor-node-stubs@next\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Location Usage Description\nDESCRIPTION: Shows how to add privacy usage description for geolocation in iOS using mobile-config.js.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nApp.appendToConfig(`\n  <edit-config target=\"NSLocationWhenInUseUsageDescription\" file=\"*-Info.plist\" mode=\"merge\">\n    <string>My app needs access to your location for navigation purposes</string>\n  </edit-config>\n`);\n```\n\n----------------------------------------\n\nTITLE: Documenting Facebook OAuth Package Updates in Markdown\nDESCRIPTION: This snippet shows the changelog entries for the Facebook OAuth package in Meteor. It includes version numbers, dates, and descriptions of changes made in each release.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/facebook-oauth/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n## 1.11.3 - 2023-08-XX\n### Changes\n- Updated default version of Facebook GraphAPI to v17\n\n## 1.11.2 - 2022-12-07\n### Changes\n- Updated internal code to use new Meteor async format from Meteor 2.9\n\n## 1.11.1 - 2022-11-14\n### Changes\n- Updated default version of Facebook GraphAPI to v15\n\n## 1.11.0 - 2022-03-24\n### Changes\n- Updated default version of Facebook GraphAPI to v12\n\n## 1.10.0 - 2021-09-14\n### Changes\n- Added login handler hook, like in the Google package for easier management in React Native and similar apps. [PR](https://github.com/meteor/meteor/pull/11603)\n\n## 1.9.1 - 2021-08-12\n### Changes\n- Allow usage of `http` package both v1 and v2 for backward compatibility\n\n## 1.9.0 - 2021-06-24\n### Changes\n- Upgrade default Facebook API to v10 [#11362](https://github.com/meteor/meteor/pull/11362)\n\n## 1.8.0 - 2021-04-15\n### Changes\n- You can now override the default API version by setting `Meteor.settings.public.packages.facebook-oauth.apiVersion` to for example `8.0` \n\n## 1.7.3 - 2020-10-05\n### Breaking changes\n- N/A\n\n### Changes\n- Updated to `1.8` now using Facebook GraphAPI v8.\n\n## 1.7.2 - 2020-09-30\n### Breaking changes\n- N/A\n\n### Changes\n- Supports a new way to call the token from Facebook using a URL that is different from the ROOT_URL. With `overrideRootUrlFromStateRedirectUrl` as `true` in the settings (`packages.facebook-oauth.overrideRootUrlFromStateRedirectUrl`) we are going to use the redirect URL provided in the initial call. So the redirect URL will be used again in the server to get the token, this information will come from the state. This is important to authenticate using Facebook using different domains in the same server.\n\n## 1.7.1 - 2020-09-29\n### Breaking changes\n- N/A\n\n### Changes\n- Supports `params` and `absoluteUrlOptions` as options and pass along to `OAuth._redirectUri`, this is important to authenticate using Facebook using different domains in the same server.\n```\n\n----------------------------------------\n\nTITLE: Adding Required Plugins to Test Application\nDESCRIPTION: Commands to add the test framework plugin and the Meteor webapp plugin (and its tests) to the test application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd test-app\ncordova plugin add https://github.com/apache/cordova-plugin-test-framework.git\ncordova plugin add ../cordova-plugin-meteor-webapp/\ncordova plugin add ../cordova-plugin-meteor-webapp/tests\n```\n\n----------------------------------------\n\nTITLE: Defining Task Component Template in Vue\nDESCRIPTION: This Vue template defines the structure for displaying a single task. It includes a list item `<li>` containing a checkbox bound using `:checked` and `@change` to handle updates via the `handleCheckboxChange` method. The task text is displayed in a `<span>`, with conditional styling (`:class`) applied based on the task's checked status.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/components/Task.vue]\n<template>\n  <div class=\"flex items-center rounded px-4 py-2 mb-2\">\n    <li>\n      <input v-model=\"taskRef.checked\" type=\"checkbox\" :checked=\"isChecked\" @change=\"handleCheckboxChange\" />\n    </li>\n    <span class=\"text-gray-600 pl-2\" :class=\"{ 'text-gray-400 italic line-through': taskRef.checked }\">\n      {{ task.text }}\n    </span>\n  </div>\n</template>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME and PATH for Android Development - PowerShell\nDESCRIPTION: Temporarily sets JAVA_HOME and appends the Java bin directory to the PATH for the current PowerShell session on Windows. This approach is convenient for per-session configuration, allowing Cordova and Gradle tools to find the Java installation without system-wide changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$env:JAVA_HOME = \"C:\\\\Program Files\\\\Java\\\\jdk-17\"\n$env:PATH += \";%JAVA_HOME%\\\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Correct Single Parameter Naming in Meteor Event Map (JavaScript)\nDESCRIPTION: This snippet shows a correctly defined event handler according to the `eventmap-params` rule. It uses the standard name 'event' for the first parameter and omits the optional second parameter.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nTemplate.foo.events({\n  'submit form': function (event) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Count with Limit in Meteor Queries\nDESCRIPTION: Support for chaining count() after find() with a limit option on the client, allowing for counting documents in a limited result set.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\nc.find(query, { limit: N }).count()\n```\n\n----------------------------------------\n\nTITLE: Removing alanning:roles Package in Meteor\nDESCRIPTION: Command to remove the alanning:roles package from a Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove alanning:roles\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor Logging Options\nDESCRIPTION: Configuration options for customizing the logging output format and timestamp display. Options include outputFormat (json or colored-text) and showTime.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/logging.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Either 'json' or 'colored-text'. Defaults to 'json'.\n//\n// When this is set to 'json', print JSON documents to the console.\n//\n// When this is set to 'colored-text', call 'Log.format' before printing.\n// This should be used for logging to the console in a human-readable format.\nLog.outputFormat = \"json\";\n\n// Boolean. Defaults to true.\n// for cloud environments is interesting to leave it false as most of them have the timestamp in the console.\n// Only works in server with colored-text output format.\nLog.showTime = true;\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Previous Meteor Versions\nDESCRIPTION: The traditional way of defining global variables in Meteor applications before version 3. This approach no longer works with strict mode enforcement in Meteor 3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/global-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nGlobalVar = { ... };\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Package in Meteor\nDESCRIPTION: Command to add the HTTP package to a Meteor project using the terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/http.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add http\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile Access Rules in Meteor\nDESCRIPTION: Usage of App.accessRule method in mobile-config.js to configure domain access whitelist for Meteor Cordova applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_96\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.accessRule\n```\n\n----------------------------------------\n\nTITLE: Block Scoping with Let Example\nDESCRIPTION: Demonstration of block scoping behavior using the let keyword.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction example(condition) {\n  let x = 0;\n  if (condition) {\n    let x = 1;\n    console.log(x);\n  } else {\n    console.log(x);\n    x = 2;\n  }\n  return x;\n}\n\nexample(true); // logs 1, returns 0\nexample(false); // logs 0, returns 2\n```\n\n----------------------------------------\n\nTITLE: Disabling Eager Module Loading in Meteor package.json\nDESCRIPTION: JSON configuration showing how to disable eager loading of modules on a specific architecture (client in this example) by setting the mainModule value to false in package.json.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"mainModule\": {\n    \"client\": false,\n    \"server\": \"server/main.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.call in Meteor v2 Client Code\nDESCRIPTION: Client-side code using Meteor.call with callback pattern to fetch data from a method and handle errors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/call-x-callAsync.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\";\n\nlet data, error;\n\nMeteor.call(\"getAllData\", (err, res) => {\n  // [!code highlight]\n  if (err) {\n    error = err;\n  } else {\n    data = res;\n  }\n});\n\n// render data or error\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.onConnection for Client-Specific Data\nDESCRIPTION: Meteor.onConnection allows storing data associated with individual clients. The connection is also available in method invocations and publish functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_108\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.onConnection(function(connection) {\n  // Store connection-specific data\n});\n\nMeteor.methods({\n  someMethod: function() {\n    // Access connection data\n    console.log(this.connection);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Method Context for Testing\nDESCRIPTION: Demonstrates how to mock the method invocation context (the 'this' value) for testing purposes, particularly useful for unit testing methods that rely on userId or other context properties.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = {\n  userId: 'fakeUserId',\n  // ... //\n}\n\nawait create.call(context, {...})\n```\n\n----------------------------------------\n\nTITLE: Installing Less Package in Meteor Application\nDESCRIPTION: Command to add the Less package to a Meteor application using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/less/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add less\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Only Methods with Functional-Style Syntax\nDESCRIPTION: Shows how to create server-only methods using the functional-style syntax, which ensures the method runs exclusively on the server for security-sensitive operations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { server } from 'meteor/jam:method';\n\nexport const aServerOnlyMethod = server(async data => {\n  // ... //\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Replacement Function Example\nDESCRIPTION: Example of a custom replacement function file that can be used with the --replaceFn option. This basic version simply logs the inputs and returns them unchanged.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nexport function transformFilename(scaffoldName, filename) {\n  console.log(scaffoldName, filename);\n  return filename\n}\n\nexport function transformContents(scaffoldName, contents, fileName) {\n  console.log(fileName, contents);\n  return contents\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Fibers in Meteor\nDESCRIPTION: Code showing how to access Fibers and Future symbols after the upgrade to Fibers 1.0.0, where these are no longer exposed globally.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_133\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Fiber = __meteor_bootstrap__.require('fibers');\nvar Future = __meteor_bootstrap__.require('fibers/future');\n```\n\n----------------------------------------\n\nTITLE: Asserting Defined Values with Meteor Test JavaScript\nDESCRIPTION: Ensures that the given value is not undefined. Relies on Meteor's test framework. Input is the value in question, with an optional message for clarification. The test fails if the value is undefined.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.isNotUndefined(actual[, message]);\n```\n\n----------------------------------------\n\nTITLE: Installing Flow Router Extra in Meteor\nDESCRIPTION: Command to add the ostrio:flow-router-extra package to a Meteor project for routing functionality.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add ostrio:flow-router-extra\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth Encryption Key in Bash\nDESCRIPTION: Generates a 16-byte encryption key encoded in Base64 using Node.js crypto module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/oauth-encryption.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ meteor node -e 'console.log(require(\"crypto\").randomBytes(16).toString(\"base64\"))'\n```\n\n----------------------------------------\n\nTITLE: Meteor Build Platform Command\nDESCRIPTION: Example of using the new --platforms flag with meteor build command to specify target platforms\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmeteor build . --platforms=android\n```\n\n----------------------------------------\n\nTITLE: Importing Code in Conditional Blocks\nDESCRIPTION: Example of conditional module importing based on environment\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nif (Meteor.isServer) { import ... }\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages for Meteor 1.5 Compatibility\nDESCRIPTION: Command to publish a package using Meteor 1.5.3 release to maintain compatibility with older Meteor versions. This is important for package maintainers when upgrading to Meteor 1.6.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\nmeteor --release 1.5.3 publish\n```\n\n----------------------------------------\n\nTITLE: Synchronous Module Example Logging to Console (JavaScript)\nDESCRIPTION: Illustrates a simple synchronous module by logging a message. This snippet exemplifies how a module without top-level await behaves synchronously in Meteor. No dependencies or parameters; it logs to the JavaScript console as soon as the module is evaluated.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/top-level-await.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('in main.js');\n```\n\n----------------------------------------\n\nTITLE: Allowing Eval in Meteor Browser Policy\nDESCRIPTION: Allows the creation of Javascript code from strings using functions like eval().\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowEval()\n```\n\n----------------------------------------\n\nTITLE: Defining a Rule Matcher Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a matcher function for a rule in the Rate Limiter. It shows an example of matching even IDs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/rate-limit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  id: function (id) {\n    return id % 2 === 0;\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Publication Strategy for a Collection in Meteor\nDESCRIPTION: Shows how to set the NO_MERGE publication strategy for a collection named 'foo' using Meteor's setPublicationStrategy method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DDPServer } from \"meteor/ddp-server\";\nMeteor.server.setPublicationStrategy(\n  \"foo\",\n  DDPServer.publicationStrategies.NO_MERGE\n);\n```\n\n----------------------------------------\n\nTITLE: Setting WebApp startup timeout in Meteor mobile config\nDESCRIPTION: JavaScript code to set the WebApp startup timeout preference in Meteor's mobile configuration. This adjusts the time allowed for app startup before considering a version faulty.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// The timeout is specified in milliseconds!\nApp.setPreference('WebAppStartupTimeout', 30000);\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.0.3\nDESCRIPTION: Run this command to update your project to Meteor version 3.0.3, ensuring your setup uses the latest patches and enhancements for improved functionality.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.3\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Missing buildSubmodule in Submodule | meteor-rpc | TypeScript\nDESCRIPTION: Demonstrates incorrect creation of submodules by either calling build instead of buildSubmodule, or omitting both. This leads to submodules that won't be properly attached or namespaced and should be avoided. Highlights the requirement to use buildSubmodule for any submodule intended for hierarchical composition.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå it is missing the buildSubmodule method\nimport { createModule } from \"meteor-rpc\";\nimport { z } from \"zod\";\n\nexport const otherSubmodule = createModule(\"other\")\n  .addMethod(\"otherMethod\", z.void(), async () => {\n    return \"other\" as const;\n  })\n  // ‚ùå it is missing the buildSubmodule method\n  .build();\n\nexport const otherSubmodule = createModule(\"other\").addMethod(\n  \"otherMethod\",\n  z.void(),\n  async () => {\n    return \"other\" as const;\n  }\n); // ‚ùå it is missing the buildSubmodule method\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery from npm for Meteor 1.8.3\nDESCRIPTION: This command installs the jQuery npm package, which is required for applications using blaze-html-templates in Meteor 1.8.3. The Meteor jquery package no longer bundles its own copy of jQuery.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.8.3-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm i jquery\n```\n\n----------------------------------------\n\nTITLE: Installing core-js Dependency for ECMAScript Runtime\nDESCRIPTION: Command to install the core-js dependency needed by ecmascript-runtime-client package in Meteor 1.5. This is necessary if the package isn't already available via babel-runtime.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save core-js\n```\n\n----------------------------------------\n\nTITLE: Generating Package List for Meteor using JavaScript\nDESCRIPTION: This JavaScript snippet specifies the format for defining Meteor core packages, including their names and GitHub links. It is part of a script designed to update the package listing file located at `docs/source/packages/packages-listing.md`. The package objects must contain 'name' and 'link' properties.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/packages-listing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  name: 'package-name',\n  link: 'https://link-to-github.com/meteor/meteor/tree/devel/packages/package-name'\n}\n```\n\n----------------------------------------\n\nTITLE: Running NPM Tests\nDESCRIPTION: Command to run the test suite using npm.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Enabling Meteor Profiling\nDESCRIPTION: Command to enable profiling with a custom cut-off point for performance measurement.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset METEOR_PROFILE=200\n```\n\n----------------------------------------\n\nTITLE: TypeScript Package Configuration for Meteor\nDESCRIPTION: This snippet shows how to configure the package.json file to properly export TypeScript declarations for Meteor. It demonstrates the use of the 'types' field and conditional exports for different JavaScript environments.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/package-tests/packages/tilde-constraints/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"meteor\",\n  \"types\": \"./index.d.ts\",\n  \"exports\": {\n    \"node\": {\n      \"types\": \"./server.d.ts\"\n    },\n    \"browser\": {\n      \"types\": \"./client.d.ts\"\n    },\n    \"default\": {\n      \"types\": \"./index.d.ts\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Package Ordering Script using Node.js (Bash)\nDESCRIPTION: Shows how to execute the `order-packages.js` script using Node.js to automatically reorder package entries within a specified version's markdown file (e.g., `versions/3.0.md`). This ensures consistent ordering in the generated changelog. Requires Node.js and the script file. The script will modify the specified file in place. Replace `<your-version>.md` with the actual filename.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode order-packages.js versions/3.0.md\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode order-packages.js versions/<your-version>.md\n```\n\n----------------------------------------\n\nTITLE: Warnings for Using Session.get in Conditionals - JavaScript\nDESCRIPTION: This snippet shows examples where using Session.get directly in conditionals is discouraged because it may lead to superfluous invalidations, especially with scalar types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/prefer-session-equals.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (Session.get(\"foo\")) {/* ... */}\n\nif (Session.get(\"foo\") == bar) {/* ... */}\n\nif (Session.get(\"foo\") === bar) {/* ... */}\n\nSession.get(\"foo\") ? true : false\n\nSession.get(\"foo\") === bar ? true : false\n```\n\n----------------------------------------\n\nTITLE: Overriding Cordova Compatibility Version for iOS Hot Code Push\nDESCRIPTION: This command demonstrates how to override the default compatibility version hash for iOS apps using an environment variable. This allows hot code push updates to reach older app versions that don't have the latest native code from the app store.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nMETEOR_CORDOVA_COMPAT_VERSION_IOS=3ed5b9318b2916b595f7721759ead4d708dfbd46 meteor run ios-device\n```\n\n----------------------------------------\n\nTITLE: HMR Dispose Handler with Tracker Computation\nDESCRIPTION: Example showing how to properly clean up Tracker computations when using HMR to prevent memory leaks\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/hot-module-replacement.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLocale } from '/imports/utils/locale';\n\nconst computation = Tracker.autorun(() => {\n  const user = Meteor.user();\n  \n  if (user && user.locale) {\n    setLocale(user.locale);\n  }\n});\n\nif (module.hot) {\n  module.hot.dispose(() => {\n    computation.stop();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Logging Package\nDESCRIPTION: Command to install the logging package in a Meteor project using the Meteor package manager.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add logging\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Blaze Template (HTML)\nDESCRIPTION: This HTML snippet defines a basic Blaze template named 'index'. It contains a heading that displays data provided by a corresponding JavaScript helper named 'time'. This template is used in the dynamic module loading example.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/routing.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!-- /imports/client/index.html -->\n<template name=\"index\">\n  <h1>Current time is: {{time}}</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Core Roles Package in Meteor\nDESCRIPTION: Command to add the core roles package to a Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add roles\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor 3.x Using NPM\nDESCRIPTION: Shows the updated npm installer commands for Meteor 3.x, including options for installing the official release or specific versions. Requires Node version 20.0.0 or higher.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor@<version>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Online-Only Files\nDESCRIPTION: Demonstrates how to exclude multiple specific files from AppCache using their file names as URL prefixes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/appcache.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.AppCache.config({\n  onlineOnly: [\n    '/bigimage.jpg',\n    '/largedata.json'\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Spacebars Template Literal Escaping\nDESCRIPTION: Special sequences for escaping curly braces in Spacebars templates. Use {{| to insert literal {{ and {{{| to insert literal {{{.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_89\n\nLANGUAGE: HTML\nCODE:\n```\n{{|   <!-- Renders as {{ -->\n{{{|   <!-- Renders as {{{ -->\n```\n\n----------------------------------------\n\nTITLE: Blaze Template with React Callback\nDESCRIPTION: HTML template showing how to use a callback function with a React component in Blaze\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"userDisplay\">\n  <div>\n    {{> React component=UserAvatar userId=_id onClick=onClick}}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Allowing Same Origin Content in Meteor Browser Policy\nDESCRIPTION: Allows specific types of content to be loaded from the same origin as the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allow<ContentType>SameOrigin()\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugins in .babelrc\nDESCRIPTION: Shows how to configure Babel plugins in a .babelrc file. This example demonstrates adding support for class properties using the transform-class-properties plugin.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/babel-compiler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\"transform-class-properties\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Main Meteor Application (Bash)\nDESCRIPTION: This simple command is used in a terminal window to start the Meteor application in its standard development mode, typically alongside another terminal running tests.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# in one terminal window\nmeteor\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor via npx\nDESCRIPTION: Command to install Meteor using npx. This is the first step in setting up the development environment for the Todo app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/1.creating-the-app.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx meteor\n```\n\n----------------------------------------\n\nTITLE: Installing Session Package in Meteor\nDESCRIPTION: Command to add the Session package to a Meteor application using the terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/session.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add session\n```\n\n----------------------------------------\n\nTITLE: Destructuring Assignment Examples\nDESCRIPTION: Various examples of destructuring assignment syntax for arrays and objects.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[a, b] = [b, a];\n\nlet { username: name } = user;\n// is equivalent to\nlet name = user.username;\n\nfunction run({ command, args, callback }) { ... }\n\nrun({\n  command: \"git\",\n  args: [\"status\", \".\"],\n  callback(error, status) { ... },\n  unused: \"whatever\"\n});\n```\n\n----------------------------------------\n\nTITLE: Index Recreation Configuration in Meteor\nDESCRIPTION: JSON configuration example for enabling automatic recreation of indexes when options mismatch in Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"mongo\": {\n      \"reCreateIndexOnOptionMismatch\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with Raw Logs\nDESCRIPTION: Command-line option to disable log coloring and timestamps when running Meteor applications for easier log processing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_118\n\nLANGUAGE: bash\nCODE:\n```\n--raw-logs\n```\n\n----------------------------------------\n\nTITLE: Importing from CoffeeScript in Meteor\nDESCRIPTION: Example of importing a named export from a CoffeeScript file in a Meteor application. This demonstrates how to use the import syntax to import from a .coffee file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/structure.md#2025-04-22_snippet_5\n\nLANGUAGE: coffeescript\nCODE:\n```\nimport { Lists } from './lists.coffee'\n```\n\n----------------------------------------\n\nTITLE: Adding Check Package to a Meteor Project\nDESCRIPTION: Installs the 'check' package in a Meteor project for type checking. Running this command in the terminal adds the 'check' library to your application for enhanced argument type validation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/check.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add check\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor Package Definition in package.js\nDESCRIPTION: This is a template for a Meteor package.js file that defines package metadata, dependencies, and exports. It shows how to configure package information, specify version constraints, add files to the package, and export API elements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/package-tests/packages/tilde-dependent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.describe({\n  // Fill in the metadata fields.\n  // There are required fields but you can delete optional fields.\n  name: \"username:package-name\",  // [*]                 // [*] Required\n  version: \"1.2.3\",                                    // [*] Required\n  // Brief, one-line summary of the package.\n  summary: \"What this does\",                            // [*] Required\n  // URL to the Git repository containing the source code for this package.\n  git: \"https://github.com/something/something.git\",    // [*] Required\n  // By default, Meteor will default to using README.md for documentation.\n  // To avoid submitting documentation, set this field to null.\n  documentation: \"README.md\"                           //     Optional\n});\n\nPackage.onUse(function(api) {\n  // Fill in the semver restrictions.\n  // Delete the restriction if it's in the core package.\n  api.versionsFrom(\"METEOR@1.0\");                     // [*] Required\n  api.use(\"ecmascript\");                              // [*] Required\n  api.use(\"some:package@1.0.0\");                      //     Optional\n  api.addFiles(\"file/relative/to/your/package.js\");   //     Optional\n  api.mainModule(\"client/main.js\", \"client\");         //     Optional\n  api.mainModule(\"server/main.js\", \"server\");         //     Optional\n  api.export(\"ExportedObject\");                        //     Optional\n});\n\nPackage.onTest(function(api) {\n  api.use(\"ecmascript\");                              // [*] Required\n  api.use(\"tinytest\");                                //     Optional\n  api.use(\"username:package-name\");                   // [*] Required\n  api.addFiles(\"tests/your-package-tests.js\");        //     Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Meteor Developer Account Login\nDESCRIPTION: Updated login options for Meteor Developer Accounts with renamed parameter\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.loginWithMeteorDeveloperAccount({ loginHint: String })\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules for Meteor Checkout\nDESCRIPTION: Command to update git submodules when running Meteor from a checkout. This is necessary due to the extraction of Blaze-related packages to a separate repository.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Repairing Mongo Database for Older Meteor Versions\nDESCRIPTION: Command to repair a Mongo database when downgrading to an older Meteor version that uses an older version of Mongo. This fixes issues with starting the application after upgrading to Mongo 3.6.4.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\n~/.meteor/packages/meteor-tool/1.6.0_1/mt-os.osx.x86_64/dev_bundle/mongodb/bin/mongod --dbpath /my-app/.meteor/local/db --repair\n```\n\n----------------------------------------\n\nTITLE: Getting the Parent Context in Blaze Templates\nDESCRIPTION: Using Template.parentData with no arguments to select the first parent context in Blaze templates. This provides a convenient way to access parent template data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.parentData\n```\n\n----------------------------------------\n\nTITLE: Installing and Symlinking npm Package for Compilation in Meteor\nDESCRIPTION: Shell commands demonstrating how to install an npm package normally and then create a symbolic link to expose it for compilation by Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install the-package\ncd imports\nln -s ../node_modules/the-package .\n```\n\n----------------------------------------\n\nTITLE: Creating a Method Logging Utility\nDESCRIPTION: Shows how to create a utility function for logging method execution results and errors, which can be used as a global after hook for debugging and monitoring purposes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// log will simply console.log or console.error when the Method finishes\nfunction log(input, pipeline) {\n  pipeline.onResult((result) => {\n    console.log(`Method ${pipeline.name} finished`, input);\n    console.log('Result', result);\n  });\n\n  pipeline.onError((err) => {\n    console.error(`Method ${pipeline.name} failed`);\n    console.error('Error', err);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Accounts UI Behavior via JavaScript API - JavaScript\nDESCRIPTION: This snippet references the use of the Accounts.ui.config API call for application-level UI configuration. Developers can use this method in client-side JavaScript to customize the behavior of the loginButtons widget, such as setting password signup fields, enabling or disabling options, and other UI behaviors. Refer to Meteor documentation for the specific configuration object structure and available options.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/accounts-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.ui.config({\n  // configuration options here (e.g., passwordSignupFields: \"USERNAME_AND_EMAIL\")\n});\n```\n\n----------------------------------------\n\nTITLE: Installing meteor-node-stubs for npm compatibility\nDESCRIPTION: Install the meteor-node-stubs package to allow using npm packages written for Node.js in the browser.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save meteor-node-stubs\n```\n\n----------------------------------------\n\nTITLE: TypeScript CRUD Methods Implementation\nDESCRIPTION: Implements typed CRUD operations for AnotherCustomer entity with proper TypeScript types\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\nimport { AnotherCustomer, AnotherCustomerCollection } from './collection';\n\nexport async function create(data: AnotherCustomer) {\n  return AnotherCustomerCollection.insertAsync({ ...data });\n}\n\nexport async function update(_id: string, data: Mongo.Modifier<AnotherCustomer>) {\n  check(_id, String);\n  return AnotherCustomerCollection.updateAsync(_id, { ...data });\n}\n\nexport async function remove(_id: string) {\n  check(_id, String);\n  return AnotherCustomerCollection.removeAsync(_id);\n}\n\nexport async function findById(_id: string) {\n  check(_id, String);\n  return AnotherCustomerCollection.findOneAsync(_id);\n}\n\nMeteor.methods({\n  'AnotherCustomer.create': create,\n  'AnotherCustomer.update': update,\n  'AnotherCustomer.remove': remove,\n  'AnotherCustomer.find': findById\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Vue-Meteor-Tracker Integration\nDESCRIPTION: Command to install the vue-meteor-tracker package which enables Vue components to use Meteor's reactive data system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install --save vue-meteor-tracker\n```\n\n----------------------------------------\n\nTITLE: Adding a Package with Meteor Command Line\nDESCRIPTION: This snippet shows how to add the 'jam:offline' package to a Meteor application using the command line. There are no specific dependencies or parameters besides having the Meteor framework installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add jam:offline\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of await Outside Async Function\nDESCRIPTION: Shows an incorrect example attempting to use await outside an async function, which will result in a syntax error. This highlights the importance of having an async context for await expressions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst myFunction = () => { // [!code error] syntax error!\n  console.log('Waiting...');\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('Done waiting');\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin from Local Filesystem in Meteor\nDESCRIPTION: Shows how to install a Cordova plugin from the local filesystem using a file:// URL, which is useful for developing custom plugins or as a workaround for the Facebook plugin.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\nmeteor add cordova:phonegap-facebook-plugin@file://../phonegap-facebook-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor via Shell Script\nDESCRIPTION: Alternative installation method for Meteor using curl on macOS and Linux systems.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://install.meteor.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Asserting Falsy Values with Meteor Test JavaScript\nDESCRIPTION: Checks that the actual value is falsy, without requiring it to be the Boolean value false. Required dependency is the Meteor test framework. Input is the value to assess; optional message can provide clarification on failure. Returns nothing but will cause the test to fail if the value is truthy.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.isFalse(actual[, message]);\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Installing Dependencies using Bash\nDESCRIPTION: These commands clone the `eslint-plugin-meteor` Git repository from GitHub and then install the necessary Node.js project dependencies using npm. This is the initial step to set up the project locally.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/development.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# clone repository\n$ git clone git@github.com:dferber90/eslint-plugin-meteor.git\n\n# install dependencies\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Piping Statements to Meteor Shell in JavaScript\nDESCRIPTION: Shows how to pipe multiple statements to the Meteor shell, including an import statement and accessing a property from the imported package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pkg from \"babel-runtime/package.json\";\npkg.version\n```\n\n----------------------------------------\n\nTITLE: Using xolvio:cleaner to Reset the Database in Meteor Tests\nDESCRIPTION: Example of using the xolvio:cleaner package to reset the entire database before each test. This is useful for ensuring a clean test environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\ndescribe('my module', function () {\n  beforeEach(function () {\n\n\n```\n\n----------------------------------------\n\nTITLE: Updating App Title in React Component\nDESCRIPTION: Simple update to the application title in the React component, replacing the default Meteor welcome message with a more appropriate todo list title.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/5.styles.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<h1>üìùÔ∏è To Do List</h1>\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Command in Windows\nDESCRIPTION: Simple command to verify Meteor installation and launch the Meteor CLI\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/alternate-windows-installation.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nmeteor\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Package in Meteor\nDESCRIPTION: HTTP is the renamed module for making HTTP requests (previously Meteor.http).\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_121\n\nLANGUAGE: JavaScript\nCODE:\n```\nHTTP\n```\n\n----------------------------------------\n\nTITLE: Including Login Buttons in Blaze Template\nDESCRIPTION: HTML template code to include the pre-built login buttons interface in a Meteor application using Blaze templating system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{> loginButtons}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar Preferences in mobile-config.js\nDESCRIPTION: Example configuration for setting status bar preferences in a Meteor mobile app. Shows how to disable status bar overlay and set background color using App.setPreference() in the mobile-config.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/mobile-status-bar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nApp.setPreference('StatusBarOverlaysWebView', 'false');\nApp.setPreference('StatusBarBackgroundColor', '#000000');\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor.js to version 2.13.1\nDESCRIPTION: Command to update a Meteor.js project to version 2.13.1. This update resolves a zlib issue with ESM Node.js 14.21.4.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/2.13.1.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 2.13.1\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor to v3.2.0\nDESCRIPTION: Command to update an existing Meteor project to version 3.2.0. This updates the Meteor framework along with all the bundled packages mentioned in the release notes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.2.0.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.2\n```\n\n----------------------------------------\n\nTITLE: Traditional Callback-based Error Handling in Meteor\nDESCRIPTION: Shows the traditional callback-based approach to error handling in Meteor methods prior to async/await. This pattern requires a callback function that checks for errors as the first parameter.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.call('myMethod', 'arg1', 'arg2', (error, result) => {\n  if (error) {\n    console.error('Method error:', error);\n  } else {\n    console.log('Method result:', result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Hexo Server\nDESCRIPTION: Commands for initializing git submodules, installing Hexo CLI globally, and starting the local development server at localhost:4000.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n\nnpm install -g hexo-cli\n\nnpm install\n# serve at localhost:4000\nhexo server\n```\n\n----------------------------------------\n\nTITLE: Removing Babel Require Hook in Production - JavaScript\nDESCRIPTION: This code removes the Babel require hook to disable runtime transpilation of JavaScript files for the Meteor tool in production builds. With the hook removed, all necessary files must be explicitly transpiled ahead of time, ensuring performance and compatibility in deployment scenarios. This is typically handled by the isopack.js Isopack#_writeTool method during packaging.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tool-env/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// #RemoveInProd\n// In production, unregister Babel require hook and ensure all files are precompiled\nrequire('babel-register').unregister();\n```\n\n----------------------------------------\n\nTITLE: Generating Dev Bundle\nDESCRIPTION: Command to rebuild the Meteor dev bundle from scratch, requiring C/C++ compiler, autotools, and scons.\nSOURCE: https://github.com/meteor/meteor/blob/devel/DEVELOPMENT.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ ./scripts/generate-dev-bundle.sh\n```\n\n----------------------------------------\n\nTITLE: Installing the okgrow:analytics Meteor Package\nDESCRIPTION: This command uses the Meteor CLI tool to add the `okgrow:analytics` package to the current Meteor project. This package provides an abstraction layer for integrating various third-party analytics services, like Google Analytics, into a Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add okgrow:analytics\n```\n\n----------------------------------------\n\nTITLE: Adding Package to Meteor App\nDESCRIPTION: Command to add the 'jam:pub-sub' package to a Meteor application, enabling enhanced publish/subscribe capabilities.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/pub-sub.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add jam:pub-sub\n```\n\n----------------------------------------\n\nTITLE: Styling User Information in CSS\nDESCRIPTION: This CSS snippet styles the user information display. It sets the layout, alignment, margins, font weight, and cursor style for the username and logout button.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/7.adding-user-accounts.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.user {\n  display: flex;\n\n  align-self: flex-end;\n\n  margin: 8px 16px 0;\n  font-weight: bold;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing JavaScript URLs in Blaze\nDESCRIPTION: Disallows 'javascript:' URLs in URL attribute values by default to prevent cross-site scripting. Provides a method to allow them if needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_100\n\nLANGUAGE: JavaScript\nCODE:\n```\nUI._allowJavascriptUrls()\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New ESLint Rule using Bash\nDESCRIPTION: This command runs an npm script designed to scaffold the necessary files (implementation, tests, documentation) for creating a new ESLint rule within the `eslint-plugin-meteor` project, simplifying the rule creation process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/development.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run rule\n```\n\n----------------------------------------\n\nTITLE: MongoDB Unified Topology Configuration\nDESCRIPTION: MongoDB driver configuration change setting useUnifiedTopology to true by default to address driver warnings\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.2-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseUnifiedTopology\n```\n\n----------------------------------------\n\nTITLE: jQuery Plugin Reference\nDESCRIPTION: Reference to additional jQuery plugin package available in Meteor ecosystem.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/jquery/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\njquery-waypoints\n```\n\n----------------------------------------\n\nTITLE: Generating Type Definitions with MeteorJS Lint Command\nDESCRIPTION: Command to run Meteor's lint tool, which creates type definition files for core packages in the .meteor folder when using zodern:types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/using-core-types.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor lint\n```\n\n----------------------------------------\n\nTITLE: Checking MongoDB Feature Compatibility Version in Meteor Shell\nDESCRIPTION: This command checks the current feature compatibility version of the local MongoDB instance used by Meteor. It's used to diagnose and resolve issues related to unexpected MongoDB exit codes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.10-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.adminCommand({ getParameter: 1, featureCompatibilityVersion: 1 })\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor via Curl\nDESCRIPTION: Alternative installation method using curl, specifically for Linux and OS X systems.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://install.meteor.com/ | sh\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Destructuring Event Parameter When Forbidden (JavaScript)\nDESCRIPTION: This snippet shows a pattern considered problematic when the `eventmap-params` rule is configured with `{\"preventDestructuring\": \"event\"}`. Destructuring the first parameter ({ target: form }) violates this specific configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"preventDestructuring\": \"event\"}]\n */\nTemplate.foo.events({\n  'submit form': function ({ target: form }, templateInstance) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Cleartext Traffic for Autoupdate in Cordova Applications\nDESCRIPTION: Code snippet for enabling cleartext traffic in Android 9+ applications via mobile-config.js, which is necessary for hot code push functionality during development.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/autoupdate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nApp.appendToConfig(`<edit-config file=\"app/src/main/AndroidManifest.xml\"\n                     mode=\"merge\"\n                     target=\"/manifest/application\"\n                     xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <application android:usesCleartextTraffic=\"true\"></application>\n    </edit-config>\n`);\n```\n\n----------------------------------------\n\nTITLE: Allowing All Framing in Browser Policy (JavaScript)\nDESCRIPTION: Unsets the X-Frame-Options header, allowing the app to be framed by any webpage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.allowAll()\n```\n\n----------------------------------------\n\nTITLE: Installing Autoprefixer Plugin for PostCSS\nDESCRIPTION: Command to install the autoprefixer plugin which is referenced in the PostCSS configuration example.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/standard-minifier-css.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install -D autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Sample Meteor Settings JSON\nDESCRIPTION: Example settings.json file with public settings that can be accessed from both client and server code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{ \"public\": { \"hello\": \"world\" } }\n```\n\n----------------------------------------\n\nTITLE: Removing Atmosphere Packages from Meteor\nDESCRIPTION: Command to remove a specific Atmosphere package from a Meteor application. This will update the application's dependencies and remove the package from the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-atmosphere-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove ostrio:flow-router-extra\n```\n\n----------------------------------------\n\nTITLE: Checking Meteor Version with bash\nDESCRIPTION: Command to verify the installed Meteor version and automatically download version 3.0.3 if missing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor --version --release=3.0.3\n```\n\n----------------------------------------\n\nTITLE: Updating package-lock.json using npm in Shell\nDESCRIPTION: This snippet shows the shell command needed to update the package-lock.json file when synchronizing package versions. It should be run in the project root directory and requires that npm is installed in the environment. The command updates only the package-lock.json without modifying node_modules or installed packages, helping resolve consistency issues in CI/CD pipelines.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/meteor-babel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --package-lock-only\n```\n\n----------------------------------------\n\nTITLE: Publishing Meteor 1.5-compatible packages\nDESCRIPTION: Command to publish a package compatible with Meteor 1.5 using the Meteor 1.5.3 release. This is important for package maintainers to ensure compatibility with older Meteor versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_54\n\nLANGUAGE: Shell\nCODE:\n```\nmeteor --release 1.5.3 publish\n```\n\n----------------------------------------\n\nTITLE: Meteor Package Structure for TypeScript Declarations\nDESCRIPTION: This snippet shows the directory structure for Meteor TypeScript declaration files, divided into common, client, and server interfaces. It demonstrates how the package.json file is configured for TypeScript declarations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/package-tests/packages/tilde-constraints/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmeteor/\n|- index.d.ts     // Re-exports from client or server as appropriate\n|- client.d.ts   // Client-only declarations, imports common\n|- server.d.ts   // Server-only declarations, imports common\n|- common.d.ts   // Shared declarations\n|- package.json  // Configured to point to the right entry point\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in package.json for Meteor Projects\nDESCRIPTION: This JSON snippet shows how to configure ESLint in the package.json file, including specifying the Meteor ESLint config and adding npm scripts for linting.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"pretest\": \"npm run lint --silent\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"@meteorjs/eslint-config-meteor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Name Transformation Function for Templates\nDESCRIPTION: JavaScript function that handles name transformations in templates, replacing placeholder variables ($$name$$, $$PascalName$$, $$camelName$$) with appropriate case variations of the scaffold name.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst transformName = (name) => {\n    return name.replace(/\\$\\$name\\$\\$|\\$\\$PascalName\\$\\$|\\$\\$camelName\\$\\$/g, function (substring, args) {\n      if (substring === '$$name$$') return scaffoldName;\n      if (substring === '$$PascalName$$') return toPascalCase(scaffoldName);\n      if (substring === '$$camelName$$') return toCamelCase(scaffoldName);\n    })\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Node Stubs for Meteor 1.8.2\nDESCRIPTION: Command to update meteor-node-stubs to version 1.0.0 for new Meteor 1.8.2 applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install meteor-node-stubs@next\n```\n\n----------------------------------------\n\nTITLE: Babel Compiler Caller Configuration\nDESCRIPTION: Structure of the caller option passed to Babel compiler plugins showing target architecture information.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{ name: \"meteor\", arch }\n```\n\n----------------------------------------\n\nTITLE: Importing Meteor Logging Utility\nDESCRIPTION: Code snippet showing how to import the Log utility from the Meteor logging package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Log } from \"meteor/logging\";\n```\n\n----------------------------------------\n\nTITLE: Setting App Preferences in Meteor (JavaScript)\nDESCRIPTION: Sets Cordova preferences using `App.setPreference` within the `mobile-config.js` file. These preferences control various native behaviors of the mobile app. The examples show how to set a background color and orientation, including platform-specific overrides (e.g., for iOS).\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nApp.setPreference('BackgroundColor', '0xff0000ff');\nApp.setPreference('Orientation', 'default');\nApp.setPreference('Orientation', 'all', 'ios');\n```\n\n----------------------------------------\n\nTITLE: Adding Filter Toggle Button to App Component Template in Vue\nDESCRIPTION: This snippet adds a button to the `App.vue` template for toggling the visibility of completed tasks. The button's text changes based on the `hideCompleted` state variable using `v-if`/`v-else`. Clicking the button triggers the `toggleHideCompleted` method via `@click`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_28\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/App.vue]\n<div class=\"mb-8 md:w-96 md:mx-auto md:mb-0 md:mt-8 md:px-4 md:py-8 text-center md:bg-gray-100 md:rounded-lg\">\n    <TaskForm />\n    <div>\n      <button class=\"text-sm font-semibold text-gray-600 hover:text-gray-800\" @click=\"toggleHideCompleted\">\n        <span v-if=\"hideCompleted\">Show all</span>\n        <span v-else>Hide completed</span>\n      </button>\n    </div>\n    <ul class=\"list-none list-inside pt-4 md:w-96\">\n      <Task v-for=\"task of tasks\" :key=\"task._id\" :task=\"task\" />\n    </ul>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor 2.13.3 to Resolve Update Issues\nDESCRIPTION: Command to install Meteor 2.13.3, which resolves the zlib error issue that some users encountered when migrating to Meteor 2.13.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.13-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://install.meteor.com/\\?release\\=2.13.3 | sh\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to Version 3.0.2\nDESCRIPTION: Command to update a Meteor project to version 3.0.2. This should be run in the project directory to apply the latest updates and package changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/history.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.2\n```\n\n----------------------------------------\n\nTITLE: Package Configuration Options in Settings\nDESCRIPTION: Shows how to define package options using Meteor's settings file structure for runtime configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/packagejs.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": {\n    \"quave:collections\": {\n      \"isServerOnly\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery Package in Meteor 1.8.3\nDESCRIPTION: Command to install the jquery npm package, which is required for applications using blaze-html-templates after updating to Meteor 1.8.3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm i jquery\n```\n\n----------------------------------------\n\nTITLE: Publishing Package Updates for Meteor 1.8.2\nDESCRIPTION: Commands for package authors to republish their packages using Meteor 1.8.2 to ensure compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/your/package\n# Add api.versionsFrom(\"1.8.2\") to Package.onUse in package.js...\nmeteor --release 1.8.2 publish\n```\n\n----------------------------------------\n\nTITLE: Async Conditional Rendering with #unless in Blaze\nDESCRIPTION: Demonstrates the use of #unless with an async helper for inverse conditional rendering based on a resolved boolean value.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/front-end/blaze.md#2025-04-22_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#unless isOkAsync}}\n  Resolved and falsy.\n{{else}}\n  Resolved and truthy.\n{{/unless}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.profile.helpers({\n  isOkAsync() {\n    return Meteor.callAsync(\"condition\"); // returns a Promise<Boolean>\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Event Maps for Templates\nDESCRIPTION: New syntax for declaring event maps on templates using Template.foo.events(). Old syntax still supported for backwards compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_143\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.events({...})\n```\n\n----------------------------------------\n\nTITLE: Updating allow-deny Package in Meteor\nDESCRIPTION: Command to update the allow-deny package to patch a security vulnerability in Meteor applications without requiring a full Meteor update\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\nmeteor update allow-deny\n```\n\n----------------------------------------\n\nTITLE: Importing a Default Export using ES2015 in JavaScript\nDESCRIPTION: Shows how to import a default export (`ClickCounter`) from another module (`./ClickCounter.js`) using ES2015 import syntax. It highlights the use of relative paths and the inclusion of the `.js` file extension.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport ClickCounter from './ClickCounter.js';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Client-Side Database Operations with Insecure Package in Meteor\nDESCRIPTION: This snippet illustrates the types of database operations that become possible on the client-side when the 'insecure' package is installed. It shows examples of insert, update, and remove operations that can be performed directly from the client.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/insecure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninsert\nupdate\nremove\n```\n\n----------------------------------------\n\nTITLE: Installing ECMAScript Package in Meteor CLI\nDESCRIPTION: Command to add the ecmascript package to an existing Meteor application via command line.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add ecmascript\n```\n\n----------------------------------------\n\nTITLE: Using npm link for package development\nDESCRIPTION: Commands to create and link a package using npm link, which is useful for development across multiple applications. This creates the package in a separate directory and creates a symbolic link to it.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/\nmkdir my-package\ncd my-package/\nmeteor npm init\ncd ~/my-app/\nmeteor npm link ~/my-package\n```\n\n----------------------------------------\n\nTITLE: Ensuring Cordova Dependencies - Meteor CLI - Bash\nDESCRIPTION: Checks for required Cordova dependencies in the project and installs any missing dependencies automatically. Only needs Meteor CLI. No parameters required. Outputs status of dependency checks and installations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmeteor ensure-cordova-dependencies\n```\n\n----------------------------------------\n\nTITLE: Modifying Meteor Packages for Autoupdate Testing (Bash)\nDESCRIPTION: Shows two consecutive Meteor CLI commands. The first removes the `meteor-base` metapackage (which includes `hot-code-push`), and the second adds back essential packages (`meteor`, `webapp`, `ddp`, `autoupdate`). This setup disables automatic client reloads while keeping the core autoupdate mechanism, allowing observation of the `Autoupdate.newClientAvailable` variable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ meteor remove meteor-base\n$ meteor add meteor webapp ddp autoupdate\n```\n\n----------------------------------------\n\nTITLE: Updating allow-deny package in Meteor 1.4.4.4\nDESCRIPTION: Command to update the allow-deny package to patch a security vulnerability in Meteor 1.4.4.4.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\nmeteor update allow-deny\n```\n\n----------------------------------------\n\nTITLE: Cordova Plugin Synchronization Method\nDESCRIPTION: Method to ensure installed plugins match app-level Cordova plugins, handling plugin versions and configuration from mobile-config.js.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cordova/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCordovaProject#ensurePluginsAreSynchronized(pluginVersions, pluginsConfiguration = {})\n```\n\n----------------------------------------\n\nTITLE: Adding Accounts Login Button with Meteor Blaze UI Helper - HTML\nDESCRIPTION: This snippet demonstrates how to insert the accounts-ui package's loginButtons Blaze UI helper into an HTML file. Adding \"{{> loginButtons}}\" displays the login widget provided by accounts-ui to enable user authentication. The helper adapts its UI based on configured login services and supports optional parameters, such as the 'align' attribute for layout customization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/accounts-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{> loginButtons}}\n```\n\n----------------------------------------\n\nTITLE: Setting Gradle Binary Path for Android Builds - PowerShell\nDESCRIPTION: Appends the Gradle binary directory to the PATH variable in the current PowerShell session on Windows, allowing Gradle commands to be run without a full system PATH update. Useful for developers who want to keep build tools isolated to certain sessions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PATH += \";C:\\\\Gradle\\\\gradle-8.10.2\\\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Dependencies in Meteor\nDESCRIPTION: Command to install the required npm peer dependencies for using PostCSS with Meteor's standard CSS minifier.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/standard-minifier-css.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install -D postcss postcss-load-config\n```\n\n----------------------------------------\n\nTITLE: Deprecated Template Lifecycle Callback Assignments in Meteor JavaScript\nDESCRIPTION: Shows examples of the deprecated patterns for assigning lifecycle callbacks (`created`, `rendered`, `destroyed`) directly to template properties in Meteor/Blaze. These patterns involve direct assignment using dot notation (`Template.foo.created = ...`) or bracket notation (`Template[bar].created = ...`) and are flagged as warnings by the 'no-template-lifecycle-assignments' rule.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-template-lifecycle-assignments.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nTemplate.foo.created = function { /* .. */ }\nTemplate.foo.rendered = function { /* .. */ }\nTemplate.foo.destroyed = function { /* .. */ }\n\nTemplate[bar].created = function { /* .. */ }\nTemplate[bar].rendered = function { /* .. */ }\nTemplate[bar].destroyed = function { /* .. */ }\n```\n\n----------------------------------------\n\nTITLE: Invalid DOM Lookup in Template.onCreated (JavaScript)\nDESCRIPTION: Examples of code patterns that trigger warnings. These patterns attempt to access DOM elements using jQuery selectors within the onCreated callback, which is not allowed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-dom-lookup-on-created.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.onCreated(function () {\n  $('.bar').focus()\n})\n\nTemplate.foo.onCreated(function () {\n  Template.instance().$('.bar').focus()\n})\n```\n\n----------------------------------------\n\nTITLE: Updating App Component to Handle Task Deletion\nDESCRIPTION: This snippet shows how to update the App component to handle deleting a task. It includes a handleDelete function and passes it to the Task component.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/4.update-and-remove.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const App = () => {\n  ..\n  const handleDelete = ({ _id }) =>\n    Meteor.callAsync(\"tasks.delete\", { _id });\n  ..\n  <ul>\n    { tasks.map(task => <Task\n      key={ task._id }\n      task={ task }\n      onCheckboxClick={handleToggleChecked}\n      onDeleteClick={handleDelete}\n    />) }\n  </ul>\n  ..\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Destructuring Any Parameter When Both Forbidden (JavaScript)\nDESCRIPTION: This snippet demonstrates a problematic pattern when `eventmap-params` is configured with `{\"preventDestructuring\": \"both\"}`. Destructuring the second parameter ({ data }) violates the rule, as destructuring is forbidden for both parameters.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"preventDestructuring\": \"both\"}]\n */\nTemplate.foo.events({\n  'submit form': function (event, { data }) {}\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Publishing a Meteor Package\nDESCRIPTION: Command to publish a Meteor package to the package repository, specifying Meteor 3.0.3 release.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeteor publish --release=3.0.3\n```\n\n----------------------------------------\n\nTITLE: Template Dynamic Block Helper\nDESCRIPTION: Usage of Template.dynamic as a block helper in templates\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n{{#Template.dynamic}} ... {{/Template.dynamic}}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Sort Behavior with Array Example\nDESCRIPTION: Example demonstrating the difference in sort behavior between MongoDB and Minimongo when dealing with arrays and query selectors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/minimongo/NOTES.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nc.find({a: {$gt: 7}}).sort({a: 1})\n// Document: {a: [5, 10]}\n// MongoDB uses 10 as sort key\n// Minimongo uses 5 as sort key\n```\n\n----------------------------------------\n\nTITLE: Using Custom Replacement Function with Meteor Generate\nDESCRIPTION: Command to generate a 'feed' component using a custom replacement function file that overrides the default templating behavior.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmeteor generate feed --replaceFn=/fn/replace.js\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Submodule | meteor-rpc | TypeScript\nDESCRIPTION: Demonstrates attaching a middleware function to a submodule using addMiddlewares. This middleware logs a message before the method handler runs. Middleware functions receive 'raw' and 'parsed' arguments, supporting effects like logging or validation. Middleware ordering is stack-based (last in, first out).\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChatCollection } from \"/imports/api/chat\";\nimport { createModule } from \"meteor-rpc\";\n\nexport const chatModule = createModule(\"chat\")\n  .addMiddlewares([\n    (raw, parsed) => {\n      console.log(\"runs first\");\n    },\n  ])\n  .addMethod(\"createChat\", z.void(), async () => {\n    return ChatCollection.insertAsync({ createdAt: new Date(), messages: [] });\n  })\n  .buildSubmodule();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Module Tests in Meteor\nDESCRIPTION: Shell commands to install npm dependencies and run the Meteor modules test application. After running these commands, the test application will be available at localhost:3000 in a web browser.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm test # just does `meteor run`\n```\n\n----------------------------------------\n\nTITLE: Meteor Debug Command\nDESCRIPTION: Debugging configuration options for Meteor applications, supporting various debugging clients like Node.js debugger and Chrome DevTools.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor debug [run options]\nmeteor --inspect[-brk][=<port>] [run | test | test-packages] [options]\n```\n\n----------------------------------------\n\nTITLE: HTML Image Tag Example for CDN Usage\nDESCRIPTION: Demonstrates the basic HTML image tag usage before CDN implementation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"http://myapp.com/cats.gif\">\n```\n\n----------------------------------------\n\nTITLE: Deferring Execution in Meteor\nDESCRIPTION: Meteor.defer allows deferring execution of a function, now working properly in inactive tabs in iOS.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_126\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.defer\n```\n\n----------------------------------------\n\nTITLE: Importing from Lazy-Loaded Meteor Packages\nDESCRIPTION: Demonstrates how to import methods from a Meteor package that uses lazy loading. Imports are done using the meteor/ prefix followed by the package name.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exportedPackageMethod } from \"meteor/<package name>\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Event Parameter Naming in Meteor Event Map (JavaScript)\nDESCRIPTION: This snippet demonstrates an incorrect pattern according to the `eventmap-params` rule. The event handler function uses 'foo' as the first parameter name instead of the expected 'event', which would trigger an ESLint warning.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nTemplate.foo.events({\n  // 'foo' does not match 'event'\n  'submit form': function (foo) {}\n})\n```\n```\n\n----------------------------------------\n\nTITLE: NPM Package Installation Command\nDESCRIPTION: Command to update Babel runtime and meteor-node-stubs packages to their latest versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install @babel/runtime@latest meteor-node-stubs@latest\n```\n\n----------------------------------------\n\nTITLE: Inspector Profiling Options\nDESCRIPTION: Additional configuration options for inspector profiling, including output directory and sampling interval settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Output directory for .cpuprofile files\nMETEOR_INSPECT_OUTPUT=/path/to/directory\n\n# Name to identify profile files\nMETEOR_INSPECT_CONTEXT=project_xyz\n\n# Sampling interval (lower = more details, more memory)\nMETEOR_INSPECT_INTERVAL=500\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Validation Settings in Galaxy Environment\nDESCRIPTION: How to add environment variables to Galaxy settings to bypass certificate validation for server requests. This should be used temporarily as it compromises security by accepting all SSL certificates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/troubleshooting/expired-certificate.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"galaxy.meteor.com\": {\n    \"env\": {\n      \"NODE_TLS_REJECT_UNAUTHORIZED\": \"0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Meteor Package with 1.8.2 Compatibility\nDESCRIPTION: Commands to update and republish a Meteor package using Meteor 1.8.2, ensuring compatibility with Meteor 1.8.2 applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/your/package\n# Add api.versionsFrom(\"1.8.2\") to Package.onUse in package.js...\nmeteor --release 1.8.2 publish\n```\n\n----------------------------------------\n\nTITLE: Starting a Meteor Application\nDESCRIPTION: Command to run the Meteor application using npm script. This starts the development server with hot module reloading for Vue components.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm run start\n```\n\n----------------------------------------\n\nTITLE: Using Deps.flush with Error Throwing Option\nDESCRIPTION: Example of using the _throwFirstError option with Deps.flush to make it throw the first error encountered during dependency flushing rather than collecting all errors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nDeps.flush({_throwFirstError: true})\n```\n\n----------------------------------------\n\nTITLE: Adding Android Platform to Meteor Project\nDESCRIPTION: Command to add the Android platform to a Meteor project using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add-platform android\n```\n\n----------------------------------------\n\nTITLE: Creating Package Files\nDESCRIPTION: Commands to create the main module file and test file for a Meteor package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/guide/publishing-packages.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch my-package.js\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch my-package-tests.js\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Null Values with Meteor Test JavaScript\nDESCRIPTION: Confirms that the actual value is not null. Uses Meteor's test utilities. Takes the value to check and an optional message. Test fails if the value is null.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.isNotNull(actual[, message]);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pug Compiler Class for Meteor Build System\nDESCRIPTION: Demonstrates implementation of a compiler class with the required 'processFilesForTarget' method that compiles Pug template files into JavaScript and adds the output to the build.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass PugCompiler {\n  processFilesForTarget(files) {\n    files.forEach((file) => {\n      // Process and add the output.\n      const output = compilePug(file.getContentsAsString());\n\n      file.addJavaScript({\n        data: output,\n        path: `${file.getPathInPackage()}.js`\n      });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Feature Compatibility Version in JavaScript\nDESCRIPTION: MongoDB shell command to update the feature compatibility version to 4.2 when migrating to Meteor 1.10.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndb.adminCommand({ setFeatureCompatibilityVersion: \"4.2\" })\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Development Environment for Meteor using Shell\nDESCRIPTION: Launches the Android configuration tool within the context of Meteor's Android Development Kit (ADK) environment. This allows configuring Android Virtual Devices (AVDs), Hardware Accelerated Execution Manager (HAXM), and updating the Android SDK.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmeteor configure-android\n```\n\n----------------------------------------\n\nTITLE: Configuring Both Custom Parameter Names ('evt', 'tmplInst') with ESLint (JavaScript)\nDESCRIPTION: This example shows how to set custom names for both parameters simultaneously using an ESLint configuration comment. The rule now expects 'evt' for the event and 'tmplInst' for the template instance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"eventParamName\": \"evt\", \"templateInstanceParamName\": \"tmplInst\"}]\n */\nTemplate.foo.events({\n  'submit form': function (evt, tmplInst) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for File System Polling in Meteor CLI\nDESCRIPTION: Sets the METEOR_WATCH_FORCE_POLLING environment variable to force polling-based file system watching, useful for file systems that don't support kernel notification events like NFS or Vagrant shared folders.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_97\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_WATCH_FORCE_POLLING\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.clearInterval\nDESCRIPTION: Clears an interval previously set with Meteor.setInterval using the returned handle.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/timers.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.clearInterval(intervalHandle);\n```\n\n----------------------------------------\n\nTITLE: Defining a Meteor Self-Test (JavaScript)\nDESCRIPTION: Demonstrates how to define a new self-test using `selftest.define`. It defines a test named \"mongo failover\", creates a `Sandbox` instance to isolate the test environment, sets environment variables specific to the test (`METEOR_TEST_MULTIPLE_MONGOD_REPLSET`), creates a test application (\"failover-test\") from a template, runs it with specific flags (`--once`, `--raw-logs`), waits up to 120 seconds, and asserts the expected output (\"SUCCESS\\n\") and exit code (0). Requires Meteor's internal testing utilities (`selftest`, `Sandbox`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tool-testing/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselftest.define(\"mongo failover\", [/* tags */], function () {\n  var s = new Sandbox();\n  s.set('METEOR_TEST_MULTIPLE_MONGOD_REPLSET', 't');\n  s.createApp(\"failover-test\", \"failover-test\");\n  s.cd(\"failover-test\");\n\n  var run = s.run(\"--once\", \"--raw-logs\");\n  run.waitSecs(120);\n  run.match(\"SUCCESS\\n\");\n  run.expectEnd();\n  run.expectExit(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Meteor installed via npx\nDESCRIPTION: Removes Meteor that was installed using npx. This command uninstalls the Meteor command line tool completely.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor uninstall\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests with Mocha\nDESCRIPTION: Command for running package tests using the Mocha test driver package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmeteor test-packages ./ --driver-package meteortesting:mocha\n```\n\n----------------------------------------\n\nTITLE: Disallowing Inline Styles in Browser Policy (JavaScript)\nDESCRIPTION: Prohibits inline CSS.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowInlineStyles()\n```\n\n----------------------------------------\n\nTITLE: Installing meteor-node-stubs Package with npm\nDESCRIPTION: Command to install the latest version of meteor-node-stubs package (v0.4.1) which provides stub implementations for Node built-in modules used by the client.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install meteor-node-stubs@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Vue Component Support to Meteor\nDESCRIPTION: Command to add the akryum:vue-component package that adds support for Vue Single File Components with .vue extension.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add akryum:vue-component\n```\n\n----------------------------------------\n\nTITLE: Non-reactive Async Autorun in Meteor (Pre-2.10)\nDESCRIPTION: This snippet demonstrates a non-reactive async autorun in Meteor versions before 2.10. The async call is not reactive and only runs once.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.10-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(async function example1() {\n  let asyncData = await asyncDataFunction();\n  let users = Meteor.users.find({}).fetch();\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Task Filter Button\nDESCRIPTION: CSS styles for the filter button component, including flexbox layout and background color customization.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/6.filter-tasks.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.filter {\n  display: flex;\n  justify-content: center;\n}\n\n.filter > button {\n  background-color: #62807e;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Xcode Command Line Tools Path\nDESCRIPTION: Sets the active developer directory path for Xcode, ensuring that the command-line tools (like `xcodebuild`) are correctly located and usable from the terminal environment. This step is often required after installing Xcode via the Mac App Store. Requires administrator privileges (`sudo`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n    sudo xcode-select -s /Applications/Xcode.app/Contents/Developer\n```\n\n----------------------------------------\n\nTITLE: Installing ECMAScript Package in Meteor\nDESCRIPTION: Command to add the ECMAScript package to an existing Meteor application\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add ecmascript\n```\n\n----------------------------------------\n\nTITLE: Meteor Services Overview - Markdown Documentation\nDESCRIPTION: Documents the main services provided by Meteor platform including Meteor Developer Accounts, Free Deployments, Package Server and Build Farms. All services communicate through DDP protocol from the Meteor tool.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/meteor-services/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Meteor Services\n\nFiles in this folder implement the features related to the Meteor-provided\nservices, such as:\n\n- Meteor Developer Accounts\n- Meteor's Free Deployments\n- Package Server\n- Build Farms\n\nAll of the services are connected to through DDP from tool.\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Destructuring Event When Template Instance Destructuring Forbidden (JavaScript)\nDESCRIPTION: This snippet illustrates a valid pattern when `eventmap-params` rule is configured with `{\"preventDestructuring\": \"templateInstance\"}`. Only the template instance destructuring is forbidden, allowing the event parameter ({ target: form }) to be destructured.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"preventDestructuring\": \"templateInstance\"}]\n */\nTemplate.foo.events({\n  'submit form': function ({ target: form }, templateInstance) {}\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Updated Node.js Dependencies (v1.1.0)\nDESCRIPTION: Lists Node.js package dependencies updated to their specified latest versions as part of the v1.1.0 release. This includes core Node.js polyfills and utilities commonly used in browser environments like 'buffer', 'events', 'stream-browserify', etc.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/meteor-node-stubs/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- `assert@2.0.0`\n- `buffer@6.0.3`\n- `console-browserify@1.2.0`\n- `domain-browser@4.19.0`\n- `events@3.3.0`\n- `readable-stream@3.6.0`\n- `stream-browserify@3.0.0`\n- `stream-http@3.2.0`\n- `string_decoder@1.3.0`\n- `timers-browserify@2.0.12`\n- `util@0.12.4`\n- `vm-browserify@1.1.2`\n```\n\n----------------------------------------\n\nTITLE: Installing Gradle Build Tool using Package Managers\nDESCRIPTION: Provides commands to install the Gradle build automation tool system-wide on macOS using Homebrew and on Debian/Ubuntu Linux using apt-get. This might be needed if the Android development environment setup doesn't correctly locate or include Gradle. Requires the respective package manager and potentially administrator privileges (`sudo`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# On Mac OSX:\nbrew install gradle\n\n# On Debian/Ubuntu:\nsudo apt-get install gradle\n```\n\n----------------------------------------\n\nTITLE: Generating Let's Encrypt Certificate with Alternative Chain\nDESCRIPTION: Command to manually generate a Let's Encrypt certificate using certbot with an alternative preferred chain. This can be used to create a certificate compatible with older clients.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/expired-certificate.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot certonly --manual --preferred-chain \"ISRG Root X1\" --preferred-challenges dns\n```\n\n----------------------------------------\n\nTITLE: Meteor Logging Console Output Example\nDESCRIPTION: Example of how the log output appears in the console, showing timestamp, app name, file location, and formatted message content.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/logging.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nE20200519-17:57:41.655(9) [DESKTOP] (main.js:36) warning {\"error\":{\"property1\":\"foo\",\"property2\":\"bar\",\"property3\":{\"foo\":\"bar\"}}}\n```\n\n----------------------------------------\n\nTITLE: Adding ECMAScript to Meteor Package Dependencies\nDESCRIPTION: Configuration code to include ECMAScript as a dependency in a Meteor package\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.use('ecmascript');\n});\n```\n\n----------------------------------------\n\nTITLE: Meteor CLI Monitoring Options\nDESCRIPTION: Command line options for monitoring bundle size and runtime performance in Meteor applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n--size         monitor both bundle runtime and size\n--size-only    monitor only the bundle size\n```\n\n----------------------------------------\n\nTITLE: Structuring Meteor CLI Output Libraries\nDESCRIPTION: Documentation structure describing two main files: progress.ts for progress bar implementation and console.js for message output management with progress bar coordination.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/console/README.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Registering Build Plugins in Meteor\nDESCRIPTION: The _transitional_registerBuildPlugin API allows declaring compilers, preprocessors, and file extension handlers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_130\n\nLANGUAGE: JavaScript\nCODE:\n```\n_transitional_registerBuildPlugin\n```\n\n----------------------------------------\n\nTITLE: Invoking a Registered Meteor CLI Command in Bash\nDESCRIPTION: Provides usage examples for the previously defined 'some-command'. It demonstrates invoking the command with long options (`--long-option`), short options (`-s`), and options requiring string values (`--with-string`, `-w`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor some-command --long-option\nmeteor some-command -s\nmeteor some-command -s --with-string \"some value\"\nmeteor some-command -s -w \"some value\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Clear Code Indentation in JavaScript\nDESCRIPTION: This snippet shows the same logic as the previous example, but with clear and consistent indentation that accurately represents the code structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Much clearer!\nif (condition) {\n  firstStatement();\n}\n\nsecondStatement();\n```\n\n----------------------------------------\n\nTITLE: Defining Mongo Collections\nDESCRIPTION: Creating a new Mongo collection instance\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react-native.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Todos = new Mongo.Collection(\"todos\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Module in package.json for Meteor\nDESCRIPTION: JSON configuration demonstrating how to specify test modules to be loaded by 'meteor test' or 'meteor test --full-app' commands using the testModule property in package.json.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n\"meteor\": {\n  \"mainModule\": {...},\n  \"testModule\": \"tests.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cordova Project Preparation Method\nDESCRIPTION: Method to prepare the Cordova project from an app bundle with plugin versions and options. Part of the CordovaProject class.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cordova/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCordovaProject#prepareFromAppBundle(bundlePath, pluginVersions, options = {})\n```\n\n----------------------------------------\n\nTITLE: Clearing Offline Data for a Specific Meteor Collection\nDESCRIPTION: This code clarifies how to remove offline data for an individual Meteor collection using the 'clear' function. No special dependencies are required beyond having the 'jam:offline' package installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/offline.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTodos.clear();\n```\n\n----------------------------------------\n\nTITLE: Executing Specific Meteor Upgraders using Shell\nDESCRIPTION: Runs a named upgrader function on the current Meteor application. This command is primarily intended for internal testing and development of the Meteor framework itself.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmeteor admin run-upgrader <upgrader>\n```\n\n----------------------------------------\n\nTITLE: Implying Package Dependencies in Meteor\nDESCRIPTION: The api.imply method allows one package to implicitly include another package's dependencies and exports.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_129\n\nLANGUAGE: JavaScript\nCODE:\n```\napi.imply\n```\n\n----------------------------------------\n\nTITLE: Spread Operator Examples\nDESCRIPTION: Various uses of the spread operator in function calls and arrays.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nadd(1, ...[2, 3, 4], 5); // 15\nnew Node(\"name\", ...children);\n[1, ...[2, 3, 4], 5]; // [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Registering a JavaScript Minifier Plugin in Meteor\nDESCRIPTION: Shows how to register a minifier plugin for JavaScript files. The factory function returns an instance of UglifyJsMinifier that will process JavaScript files in the final bundle.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlugin.registerMinifier({\n  extensions: ['js']\n}, () => new UglifyJsMinifier);\n```\n\n----------------------------------------\n\nTITLE: Importing Blaze from Meteor Package in JavaScript\nDESCRIPTION: Demonstrates the new syntax for importing Meteor packages using absolute identifiers with the '/node_modules/meteor/' prefix.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Blaze} from \"meteor/blaze\"\n```\n\n----------------------------------------\n\nTITLE: Registering Build Plugins in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of Package.registerBuildPlugin() for registering build plugins in Meteor packages. This function is now part of the public API and has been documented.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_94\n\nLANGUAGE: JavaScript\nCODE:\n```\nPackage.registerBuildPlugin({\n  // Plugin configuration\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Regex Query Pattern\nDESCRIPTION: Example of a MongoDB query pattern using regex with case-insensitive option in minimongo.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n{a: {$regex: '', $options: 'i'}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor Package Options via settings.json (JSON)\nDESCRIPTION: This JSON snippet illustrates the recommended method for providing configuration options to Meteor packages, using the application's settings file (e.g., `settings.json`). Options for a specific package (here, `quave:collections`) are defined within the `packages` key, nested under the package name. This example shows setting an `isServerOnly` flag to `true`. This approach is preferred over runtime function calls for setting options that don't change during runtime, promoting clearer configuration and avoiding dependency on code execution order. Options intended for the client should be placed under a `public` key within the settings structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"quave:collections\": {\n      \"isServerOnly\": true\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in CoffeeScript\nDESCRIPTION: Shows how to use import statements in CoffeeScript, which is similar to ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_9\n\nLANGUAGE: CoffeeScript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor'\nimport SimpleSchema from 'simpl-schema'\nimport { Lists } from './lists.coffee'\n```\n\n----------------------------------------\n\nTITLE: EJSON Binary Data Format\nDESCRIPTION: The format for representing binary data in EJSON using Base64 encoding.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"$binary\": BASE_64_STRING}\n```\n\n----------------------------------------\n\nTITLE: Adding the Promise Package in Meteor (Shell)\nDESCRIPTION: This shell command is executed within a Meteor project's directory to add the `meteor/promise` package as a dependency. This automatically integrates the Promise polyfill and its Fiber-related features into the Meteor application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/meteor-promise/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add promise\n```\n\n----------------------------------------\n\nTITLE: EJSON Escape Example\nDESCRIPTION: Example of escaping a literal $date key-value pair in EJSON to prevent it from being interpreted as a date object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"$escape\": {\"$date\": 10000}}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Violations of Meteor Template Naming Convention (camel-case)\nDESCRIPTION: This JavaScript snippet demonstrates code patterns that would trigger warnings from the `meteor/template-names` ESLint rule when configured with the `camel-case` option. It shows incorrect template names like `foo_bar` and `FooBar` being used to access template properties and methods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/template-names.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n\n/*eslint meteor/template-names: [2, \"camel-case\"]*/\nTemplate.foo_bar.onCreated\nTemplate.foo_bar.onRendered\nTemplate.foo_bar.onDestroyed\nTemplate.foo_bar.events\nTemplate.foo_bar.helpers\n\nTemplate.foo_bar.onCreated()\n/* .. */\n\nTemplate.FooBar.onCreated\n/* .. */\n\n```\n```\n\n----------------------------------------\n\nTITLE: Module Imports in CoffeeScript\nDESCRIPTION: This snippet demonstrates how to use import statements in CoffeeScript, which are nearly identical to ES2015 JavaScript syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_9\n\nLANGUAGE: CoffeeScript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor'\nimport SimpleSchema from 'simpl-schema'\nimport { Lists } from './lists.coffee'\n```\n\n----------------------------------------\n\nTITLE: Removing Cordova Plugins via Command Line\nDESCRIPTION: Shows how to remove previously installed Cordova plugins using the meteor remove command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nmeteor remove cordova:cordova-plugin-camera\nmeteor remove cordova:com.phonegap.plugins.facebookconnect\nmeteor remove cordova:cordova-plugin-underdevelopment\n```\n\n----------------------------------------\n\nTITLE: ES2015 Class Implementation\nDESCRIPTION: Example of ES2015 class syntax with inheritance\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Base {\n  constructor(a, b) {\n    this.value = a * b;\n  }\n}\n\nclass Derived extends Base {\n  constructor(a, b) {\n    super(a + 1, b + 1);\n  }\n}\n\nvar d = new Derived(2, 3);\nd.value; // 12\n```\n\n----------------------------------------\n\nTITLE: Running CoffeeScript Package Tests in Meteor\nDESCRIPTION: Command to run tests for the CoffeeScript package in Meteor. This requires the Meteor repository to be checked out and the test-packages script to be available.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/coffeescript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./meteor test-packages packages/non-core/coffeescript\n```\n\n----------------------------------------\n\nTITLE: Triggering ReactiveDict Autoruns with `set` (JavaScript)\nDESCRIPTION: Illustrates the console output generated by the autoruns defined in the previous snippet when the 'favoriteFood' key in the `ReactiveDict` is updated using `data.set()`. It shows how the 'Inefficient' version logs on every change, while the 'Efficient' version logs only when the value becomes or stops being 'pizza'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n```js\ndata.set(\"favoriteFood\", \"apples\");\n// Inefficient code says: No pizza for you!\n// Efficient code says: No pizza for you!\ndata.set(\"favoriteFood\", \"pears\");\n// Inefficient code says: No pizza for you!\ndata.set(\"favoriteFood\", \"oranges\");\n// Inefficient code says: No pizza for you!\ndata.set(\"favoriteFood\", \"pizza\");\n// Inefficient code says: Time to get some pizza!\n// Efficient code says: Time to get some pizza!\ndata.set(\"favoriteFood\", \"pancakes\");\n// Inefficient code says: No pizza for you!\n// Efficient code says: No pizza for you!\n```\n```\n\n----------------------------------------\n\nTITLE: Setting MAIL_URL in Meteor 1.3.3.1\nDESCRIPTION: Added support for smtps:// protocol in MAIL_URL configuration in Meteor 1.3.3.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\nMAIL_URL\n```\n\n----------------------------------------\n\nTITLE: Installing Fetch Package via Meteor CLI\nDESCRIPTION: Command to add the fetch package to an existing Meteor application using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add fetch\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Shell commands for setting up and running the Hexo static site generator locally for development.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init --recursive\ncd site\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Non-Warning Pattern with Session.get - JavaScript\nDESCRIPTION: This snippet shows an exception to the rule where Session.get usage in assigning variables for subsequent comparison is not warned against, as it doesn\\u0027t involve direct usage in a conditional.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/prefer-session-equals.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = Session.get(\"foo\")\nif (foo === 'bar') {/* ... */}\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Vue Root Element\nDESCRIPTION: Basic HTML structure needed in the main.html file, which provides the mounting point for the Vue application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div id=\"app\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Referencing Online-Only Images in HTML\nDESCRIPTION: Provides an example HTML `<img>` tag referencing an image (`bigimage.jpg`) located within a directory (`/online/`) configured to be excluded from the Meteor AppCache using the `onlineOnly` setting. This ensures the image is fetched from the server and not served from the offline cache.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/appcache.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/online/bigimage.jpg\">\n```\n\n----------------------------------------\n\nTITLE: Setting WKWebViewOnly Preference in JavaScript\nDESCRIPTION: Code to set the WKWebViewOnly preference to false in mobile-config.js for Cordova apps that rely on UIWebView APIs after upgrading to Meteor 1.10.1.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nApp.setPreference('WKWebViewOnly', false);\n```\n\n----------------------------------------\n\nTITLE: Listing Mobile Platforms in Meteor Project\nDESCRIPTION: Command to list the mobile platforms currently added to a Meteor project using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeteor list-platforms\n```\n\n----------------------------------------\n\nTITLE: Adding Crosswalk Plugin in Meteor Mobile App\nDESCRIPTION: Demonstrates how to add the Crosswalk plugin to a Meteor mobile app, which improves web view performance on older Android versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\nmeteor add crosswalk\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Docs Version Generator via Node.js Script - Bash\nDESCRIPTION: This bash command executes a Node.js script (script.js) to generate a JSON file (versions.generated.json) containing versioned documentation links. Dependencies include Node.js installed in the environment and access to the 'changelog' directory. The script scans versions in 'changelog' and outputs a structured JSON file for use by the Meteor documentation system. Inputs: none required; Output: the generated JSON file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/meteor-versions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode script.js\n```\n\n----------------------------------------\n\nTITLE: Writing Synchronous Tests with Tinytest.add\nDESCRIPTION: Shows the basic structure of a synchronous test using Tinytest.add. The test callback receives a test object that provides assertion methods to verify expected results.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTinytest.add(name, (test) => {\n  // test body\n});\n```\n\n----------------------------------------\n\nTITLE: Ordering Package Updates for Custom Version\nDESCRIPTION: Similar to the previous command, this one allows specifying a custom version file for reordering package updates in the changelog.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode order-packages.js versions/<your-version>.md\n```\n\n----------------------------------------\n\nTITLE: Incorrect Self-Stop in Autorun by Outer Variable Reference (Meteor, JavaScript)\nDESCRIPTION: This snippet illustrates a common pitfall when attempting to stop an autorun by referencing its outer assignment before Tracker.autorun has returned. It depends on Tracker and ReactiveDict. The problem arises because partyRunner is undefined during the first run, causing the stop call to fail if the condition is reached immediately. Key variables: partyInfo, partyRunner. No correct autorun cessation if 'status' is 'over' on first run.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// WRONG\nvar partyRunner = Tracker.autorun(function () {\n  if (partyInfo.equals(\"status\", \"over\")) {\n    partyRunner.stop(); // WRONG\n    return;\n  }\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Make on Ubuntu 14.04 LTS\nDESCRIPTION: Sequence of commands for Ubuntu 14.04 LTS to add the necessary PPA (Personal Package Archive), update the package list, and install the `ubuntu-make` utility. Ubuntu Make simplifies setting up development environments. Requires administrator privileges (`sudo`).\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install ubuntu-make\n```\n\n----------------------------------------\n\nTITLE: EJSON Nested Escape Example\nDESCRIPTION: Example showing how escaping only affects one level, with a literal $date key mapped to an actual Date object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"$escape\": {\"$date\": {\"$date\": 32491}}}\n```\n\n----------------------------------------\n\nTITLE: Showcasing Block Comment Without Leading Asterisks in JavaScript\nDESCRIPTION: Example of a block comment where the first line doesn't have an asterisk. In this case, no stripping of asterisks occurs on any line.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\nA block comment whose first line doesn't have a `*` receives\nno stripping of `*` characters on any line.\n\n* This is a bullet\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Cloning the Meteor Webapp Cordova Plugin Repository\nDESCRIPTION: Commands to clone the cordova-plugin-meteor-webapp repository to the home directory.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\ngit clone https://github.com/meteor/cordova-plugin-meteor-webapp.git\n```\n\n----------------------------------------\n\nTITLE: Using Blaze Login Buttons in Templates\nDESCRIPTION: Updates the syntax for including login buttons from accounts-ui package in Blaze templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_103\n\nLANGUAGE: Spacebars\nCODE:\n```\n{{> loginButtons}}\n```\n\n----------------------------------------\n\nTITLE: Importing Named Exports in ES2015 JavaScript\nDESCRIPTION: Demonstrates how to import named exports from another module using ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importer.js\nimport { a, c, F, h } from './exporter';\nnew F(a, c).method(h);\n```\n\n----------------------------------------\n\nTITLE: Setting Facts User Filter\nDESCRIPTION: Server-side configuration to control which users can access Meteor Facts metrics for monitoring oplog usage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/oplog-observe-driver.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nFacts.setUserIdFilter(function (userId) {\n  var user = Meteor.users.findOne(userId);\n  return user && user.admin;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Package API to Export Symbols in Meteor\nDESCRIPTION: Packages must explicitly declare exported symbols using api.export in their package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_128\n\nLANGUAGE: JavaScript\nCODE:\n```\napi.export\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Package in Meteor Template\nDESCRIPTION: Shows how to import the lazy-loaded markdown package in a Meteor template file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/markdown.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// myTemplate.js\nimport 'meteor/markdown';\n```\n\n----------------------------------------\n\nTITLE: Failing Asynchronous Tests with Exception Reporting in Meteor Test JavaScript\nDESCRIPTION: Call this function inside async callbacks to fail a test with a recorded exception, ensuring test state is properly managed. Should only be used in tests that do not otherwise call their completion callbacks or directly raise exceptions. Input is the exception object.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.exception(exception);\n```\n\n----------------------------------------\n\nTITLE: Installing Peer npm Dependencies for Atmosphere Packages\nDESCRIPTION: Command to install required peer npm dependencies alongside an Atmosphere package. This example shows installing React dependencies needed for the react-meteor-data package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-atmosphere-packages.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save react react-addons-pure-render-mixin\nmeteor add react-meteor-data\n```\n\n----------------------------------------\n\nTITLE: Diagnosing MongoDB Server Startup Failure in Meteor on Windows\nDESCRIPTION: This code snippet demonstrates the error messages encountered when the MongoDB server fails to start while running Meteor on Windows. The error indicates repeated unsuccessful attempts to start the MongoDB server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/troubleshooting/windows.md#2025-04-22_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\nC:\\Users\\user\\app> meteor\n=> Started proxy.\nUnexpected mongo exit code 3221225781. Restarting.\nUnexpected mongo exit code 3221225781. Restarting.\nUnexpected mongo exit code 3221225781. Restarting.\nCan't start Mongo server.\n```\n\n----------------------------------------\n\nTITLE: Applying Enhanced Styles to Task Component Template in Vue\nDESCRIPTION: This Vue template update applies more refined Tailwind CSS styles to the `Task` component. It uses flexbox (`flex items-center`) for layout, adds padding, rounded corners, borders, and shadows (`rounded p-4 py-2 mb-2 shadow-sm border border-gray-200`). The checkbox, text span, and delete button are arranged within this styled container.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_27\n\nLANGUAGE: vue\nCODE:\n```\n```vue [imports/ui/components/Task.vue]\n<template>\n  <div class=\"flex items-center rounded p-4 py-2 mb-2 shadow-sm border border-gray-200 md:mr-8\">\n    <li>\n      <input v-model=\"taskRef.checked\" type=\"checkbox\" readonly :checked=\"isChecked\" @change=\"handleCheckboxChange\" />\n    </li>\n    <span class=\"text-gray-600 pl-2\" :class=\"{ 'text-gray-400 italic line-through': taskRef.checked }\">\n      {{ task.text }}\n    </span>\n    <button class=\"ml-auto bg-red-500 hover:bg-red-600 text-white font-bold py-0.5 px-2 rounded\" @click=\"deleteTask\">\n      &times;\n    </button>\n  </div>\n</template>\n```\n```\n\n----------------------------------------\n\nTITLE: Using camelCase in Meteor APIs\nDESCRIPTION: Shows examples of the new camelCase naming convention for Meteor APIs, replacing the previous under_score style.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_140\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.isClient\nMeteor.isServer\nthis.isSimulation\nMeteor.deps.Context.onInvalidate\nMeteor.status().retryCount\nMeteor.status().retryTime\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests with mtest\nDESCRIPTION: Command for testing packages using the mtest tool, useful for CI/CD environments.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmtest --package ./ --once 2.14\n```\n\n----------------------------------------\n\nTITLE: Permitted Usage: Meteor.defer and Non-Zero setTimeout in Meteor (JavaScript)\nDESCRIPTION: These snippets illustrate patterns that are permitted under the lint rule. They show the correct usage of Meteor.defer for immediate asynchronous execution, as well as Meteor.setTimeout with delays greater than zero, which are allowed. These patterns clarify the distinction between deferring execution and actual timed delays. Only Meteor framework functions are used; inputs are callbacks and optional delay values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-zero-timeout.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nMeteor.defer(function () {}, 0)\nMeteor.setTimeout(function () {}, 100)\n\nMeteor.defer(foo, 0)\nMeteor.setTimeout(foo, 100)\n```\n\n----------------------------------------\n\nTITLE: Using Variables with Special Characters and Space in Names with Logic Solver in JavaScript\nDESCRIPTION: Shows how to directly use string variable names, including those with spaces or punctuation, in logic formulas like implies or exactlyOne. These variables do not need to be predeclared; the Logic Solver manages their allocation as needed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nLogic.implies('it is raining', 'take an umbrella');\n\nLogic.exactlyOne(\"1,1\", \"1,2\", \"1,3\")\n```\n\n----------------------------------------\n\nTITLE: Valid Usage in Template Callbacks (JavaScript)\nDESCRIPTION: Examples of code patterns that do not trigger warnings. These include non-DOM operations in onCreated, proper DOM access in onRendered, and a case that's hard to check statically.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-dom-lookup-on-created.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.onCreated(function () {\n  console.log('hello')\n})\n\n\nTemplate.foo.onRendered(function () {\n  $('.bar').focus()\n  Template.instance().$('.bar').focus()\n})\n\n// should be a warning, but is too hard to check for statically,\n// so the rule ignores it\nTemplate.foo.onCreated(function () {\n  this.$('.bar').focus()\n})\n```\n\n----------------------------------------\n\nTITLE: Including Changelog Content in Markdown\nDESCRIPTION: This snippet uses a custom templating tag to include the contents of a 'history.md' file, likely containing the actual changelog entries for the Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{%- changelog 'history.md' %}\n```\n\n----------------------------------------\n\nTITLE: Header Formatting in Markdown\nDESCRIPTION: Examples demonstrating correct and incorrect header formatting with specific IDs for maintainability.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n// bad\n## Using schemas with collections\n\n// good\n<h2 id=\"schemas-with-collections\">Using schemas with collections</h2>\n```\n\n----------------------------------------\n\nTITLE: Installing and Verifying JDK for Android Development - Shell\nDESCRIPTION: These commands install OpenJDK 17 (required for Android builds) on Debian/Ubuntu or macOS. They also provide SDKMAN! commands to install and manage Java versions, and verify the installation with 'java -version'. Prerequisites: access to apt-get, Homebrew or SDKMAN! as suitable, and administrative privileges.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# On Debian/Ubuntu:\nsudo apt-get update\nsudo apt-get install openjdk-17-jdk\n\n# On Mac OSX\nbrew install openjdk@17\nsudo ln -sfn $(brew --prefix)/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk\n\n# using sdkman\ncurl -s \"https://get.sdkman.io\" | bash\nsource \"$HOME/.sdkman/bin/sdkman-init.sh\"\nsdk install java 17\nsdk default java 17\n\njava -version  # Verify installation\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin from Local File System in Package Dependencies\nDESCRIPTION: Shows how to include a local Cordova plugin in a Meteor package's dependencies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nCordova.depends({\n    'cordova-plugin-underdevelopment': 'file://../plugins/cordova-plugin-underdevelopment'\n});\n```\n\n----------------------------------------\n\nTITLE: Updating to Meteor 1.8.1 Beta Using Command Line\nDESCRIPTION: Command for updating to Meteor 1.8.1 beta release, which will enable Galaxy customers to use Node 8.12.0 instead of Node 8.11.4 that comes with Meteor 1.8.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 1.8.1-beta.n\n```\n\n----------------------------------------\n\nTITLE: Setting up CoffeeScript Presence Flag and Test Case in Meteor\nDESCRIPTION: Imports required Meteor dependencies, sets a flag to indicate CoffeeScript presence, and implements a basic test case to verify CoffeeScript compilation. The code works in conjunction with coffeescript_tests.js to validate CoffeeScript integration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/coffeescript/tests/litcoffeescript_tests.coffee.md#2025-04-22_snippet_0\n\nLANGUAGE: coffeescript\nCODE:\n```\nimport { Meteor } from \"meteor/meteor\"\nimport { Tinytest } from \"meteor/tinytest\"\n\nMeteor.__COFFEEMDSCRIPT_PRESENT = true\nTinytest.add \"markdown coffeescript - compile\", (test) -> test.isTrue true\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Support for Meteor AppCache\nDESCRIPTION: Shows how to disable AppCache for specific browsers using the config method. Allows selective enabling/disabling for browsers like Chrome and Firefox.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/appcache.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.AppCache.config({\n  chrome: false,\n  firefox: false\n});\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Isolate Block in Meteor\nDESCRIPTION: Shows how to use the {{#isolate}} block helper to make parts of a template independently reactive.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_144\n\nLANGUAGE: HTML\nCODE:\n```\n{{#isolate}}\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Package with Shrinkwrap\nDESCRIPTION: Commands to install an NPM package and create a shrinkwrap file for version locking.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save moment\nmeteor npm shrinkwrap\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Config for Meteor\nDESCRIPTION: Command to install the Meteor ESLint configuration package using meteor npm.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-config-meteor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install --save-dev @meteorjs/eslint-config-meteor\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in package.json\nDESCRIPTION: JSON configuration to add to package.json to enable the Meteor ESLint configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-config-meteor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"eslintConfig\": {\n  \"extends\": \"@meteorjs/eslint-config-meteor\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.9.1\nDESCRIPTION: Notes the removal of Swift version setting hook\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.9.1, 2020-03-05\nRemoves hook to set Swift version\n```\n\n----------------------------------------\n\nTITLE: Listing Babel Helpers in Markdown\nDESCRIPTION: A markdown list of Babel helpers needed for different transforms, including notes on which helpers are excluded and why.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/babel-runtime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* es3.propertyLiterals: None\n* es3.memberExpressionLiterals: None\n* es6.arrowFunctions: None\n* es6.templateLiterals\n  * `taggedTemplateLiteralLoose`\n* es6.classes\n  * `inherits`\n  * `classCallCheck`\n  * `createClass` (only for getter/setters)\n  * Excluded because only for decorator support(2): `createDecoratedClass`, `defineDecoratedPropertyDescriptor`\n* es6.constants: None\n* es6.blockScoping: None\n  * Excluded because only for spec mode(1): `temporalUndefined`, `temporalAssertDefined`\n* es6.properties.shorthand: None\n* es6.properties.computed: None\n  * Excluded because only for non-loose mode(1): `defineProperty`\n* es6.parameters: None\n* es6.spread\n  * `bind` (for `new A(...b)`)\n* es6.forOf: None\n* es7.objectRestSpread\n  * `_extends`\n  * Everything in es6.destructuring\n* es6.destructuring\n  * `objectWithoutProperties`\n  * `objectDestructuringEmpty`\n* es7.trailingFunctionCommas: None\n* flow: None\n```\n\n----------------------------------------\n\nTITLE: Removing Autopublish from Meteor\nDESCRIPTION: Command to remove the autopublish package which is important for security as it prevents automatic publication of all collections to all clients.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmeteor remove autopublish\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova Access Rules in Meteor\nDESCRIPTION: Example of how to configure Cordova whitelist access rules in mobile-config.js, showing both the XML syntax and the equivalent JavaScript API calls to control network access in your mobile app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/app.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<access origin=\"https://www.google-analytics.com\" />\n<allow-navigation href=\"https://example.com\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nApp.accessRule('https://www.google-analytics.com');\nApp.accessRule('https://example.com', { type: 'navigation' });\n```\n\n----------------------------------------\n\nTITLE: Example of Block Comment without Star Prefixes in JavaScript Documentation\nDESCRIPTION: Demonstrates a block comment where the first line doesn't have an asterisk, resulting in no stripping of asterisks on any line. This format allows for more flexible formatting of documentation text with Markdown elements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/scripts/doctool.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\nA block comment whose first line doesn't have a `*` receives\nno stripping of `*` characters on any line.\n\n* This is a bullet\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Reverting Local Changes with Git (Bash)\nDESCRIPTION: Executes the `git checkout .` command to discard all uncommitted changes in the current working directory and subdirectories, resetting tracked files to their state in the last commit. This is useful for returning to a clean project state before running specific tests.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout .\n```\n\n----------------------------------------\n\nTITLE: Triggering Autorun on First and Subsequent Reactive Data Changes (Meteor, JavaScript)\nDESCRIPTION: This follow-up snippet for the book autorun triggers a rerun by changing the title property of the book ReactiveDict. It relies on the prior Tracker.autorun being set up. The firstRun logic is bypassed; only the current title is logged. Shows the fine-grained reactivity of Tracker.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nbook.set(\"title\", \"A Clash of Kings\");\n// \"Now reading: A Clash of Kings\"\n```\n\n----------------------------------------\n\nTITLE: Zlib License for Meteor Project\nDESCRIPTION: This is the license for Zlib, a compression library used in the Meteor project. It outlines the terms of use, including permissions for commercial use and redistribution, as well as restrictions on misrepresentation of origin.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Node.txt#2025-04-22_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n/* zlib.h -- interface of the 'zlib' general purpose compression library\n  version 1.2.4, March 14th, 2010\n\n  Copyright (C) 1995-2010 Jean-loup Gailly and Mark Adler\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n\n  Jean-loup Gailly\n  Mark Adler\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating a new Meteor project\nDESCRIPTION: This command creates a new Meteor project named 'myapp'. It initializes the project structure and necessary files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor Package Manifest\nDESCRIPTION: Configuration file (manifest.json) for Meteor 0.9.0's package system that defines package metadata and dependencies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/admin/old-banner.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n# Copy this into manifest.json.\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Meteor Server\nDESCRIPTION: Call Meteor.disconnect() to disconnect from the server and stop all live data updates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_116\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.disconnect\n```\n\n----------------------------------------\n\nTITLE: Importing LESS Files in Meteor\nDESCRIPTION: Demonstrates how to properly import LESS files in a Meteor application to prevent independent processing. Files with the .import.less extension are not processed independently by Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/less.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> If you want to `@import` a file, give it the extension `.import.less`\nto prevent Meteor from processing it independently.\n```\n\n----------------------------------------\n\nTITLE: Linking to Meteor Package Source Code in Markdown\nDESCRIPTION: This snippet provides markdown links to the source code of the Meteor package for both released and development versions. It demonstrates how to structure links in a GitHub repository context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/meteor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/meteor) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/meteor)\n```\n\n----------------------------------------\n\nTITLE: EJSON Serialization Example in JSON\nDESCRIPTION: An example showing how EJSON serializes an object containing a Date and a binary buffer. The date is represented with a '$date' marker and timestamp, while binary data is encoded with a '$binary' marker and base64 encoded string.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ejson/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"d\": {\"$date\": 1358205756553},\n  \"b\": {\"$binary\": \"c3VyZS4=\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Styles from npm - Absolute Path\nDESCRIPTION: Example of importing Less styles from an npm package using absolute path\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_5\n\nLANGUAGE: less\nCODE:\n```\n@import '{}/node_modules/npm-package-name/button.less';\n```\n\n----------------------------------------\n\nTITLE: Creating URLSearchParams Instance in Meteor\nDESCRIPTION: JavaScript code showing how to import and create a new URLSearchParams instance using the 'url' package in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/url.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URLSearchParams } from 'meteor/url';\n\nconst searchParams = new URLSearchParams({ query: 'WHATWG', location: 'MDN' })\n```\n\n----------------------------------------\n\nTITLE: Creating Apollo Meteor Application\nDESCRIPTION: Command to create a new Meteor application with Apollo skeleton\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/apollo.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor create apollo-app --apollo\n```\n\n----------------------------------------\n\nTITLE: Generating Meteor Type Definitions with Meteor Lint (Bash)\nDESCRIPTION: This command executes the Meteor linter. After installing `zodern:types` and configuring `tsconfig.json` as described, running `meteor lint` triggers the generation of necessary type definition files (e.g., `.meteor/local/types/packages.d.ts`). These files enable TypeScript to understand and type-check Meteor's core package APIs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/using-core-types.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor lint\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting Documents\nDESCRIPTION: This snippet modifies the default behavior of the removeAsync method to delete documents permanently by passing the 'forever' option as true.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/archive.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.removeAsync(/* your filter */, { forever: true })\n```\n\n----------------------------------------\n\nTITLE: Installing ReactiveVar Package in Meteor\nDESCRIPTION: This command adds the reactive-var package to a Meteor project. It should be run in the terminal within the project directory.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/reactive-var.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add reactive-var\n```\n\n----------------------------------------\n\nTITLE: Using Platform Flag with Meteor Build Command\nDESCRIPTION: Example of using the new --platforms flag with the Meteor build command to specify which platforms to build for, which is useful for CI scenarios or when building only for specific platforms.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmeteor build . --platforms=android\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Commands with Certificate Validation Disabled\nDESCRIPTION: A workaround for executing Meteor commands when facing expired certificate errors in older Meteor versions. This bypasses certificate validation but creates security risks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/troubleshooting/expired-certificate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNODE_TLS_REJECT_UNAUTHORIZED=0 meteor deploy\n```\n\n----------------------------------------\n\nTITLE: Importing React in Meteor 1.3\nDESCRIPTION: Import React and ReactDOM from npm packages in your Meteor 1.3 application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Instance Parameter Naming in Meteor Event Map (JavaScript)\nDESCRIPTION: This snippet shows an incorrect pattern where the second parameter in the event handler is named 'bar' instead of the expected 'templateInstance'. This violates the default `eventmap-params` rule and would generate an ESLint warning.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nTemplate.foo.events({\n  // 'bar' does not match 'templateInstance'\n  'submit form': function (event, bar) {}\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Solving Initial Underspecified Magic Square Constraint Set in JavaScript\nDESCRIPTION: Solves the initial version of the magic square problem without digit range constraints, demonstrating that results can be incorrect due to the underspecification. sol1.evaluate is called to get the integer value for each variable. Inputs: previously set up logic constraints for sums only. Outputs: arbitrary integer values; may fall outside the valid range 1-9.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sol1 = solver.solve();\nsol1.evaluate(A) // => 3\nsol1.evaluate(B) // => 10 (uh oh)\n_.map(locations, function (loc) { return sol1.evaluate(loc); })\n// => [3, 10, 2,\n//     4,  5, 6,\n//     8,  0, 7]\n```\n\n----------------------------------------\n\nTITLE: Iterating Collections in Spark Templates\nDESCRIPTION: Spark now supports {{#each}} iteration over collections of objects without _id fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_139\n\nLANGUAGE: HTML\nCODE:\n```\n{{#each}}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest @babel/runtime Package in Meteor\nDESCRIPTION: Command to update the @babel/runtime npm package to version 7.0.0 or later as part of migration steps for Meteor v1.8.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install @babel/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: Log Output Format Example\nDESCRIPTION: Example of how the formatted log output appears in the console with timestamp and metadata.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/logging.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nE20200519-17:57:41.655(9) [DESKTOP] (main.js:36) warning {\"error\":{\"property1\":\"foo\",\"property2\":\"bar\",\"property3\":{\"foo\":\"bar\"}}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Triple-Slash Comments for JavaScript Documentation\nDESCRIPTION: Example of triple-slash comments, which start with '///' followed by an optional space. Consecutive lines with triple-slash are treated as a single doc comment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/// A triple-slash comment starts with `///` followed by an\n/// optional space (i.e. one space is removed if present).\n/// Multiple consecutive lines that start with `///` are\n/// treated together as a single doc comment.\n/** Separate doc comments get separate paragraphs. */\n```\n\n----------------------------------------\n\nTITLE: Managing Authorized Users for a Meteor Site\nDESCRIPTION: Views or modifies the list of authorized users and organizations for a deployed Meteor site. By default (or with '--list'), it lists administrators. '--add' grants access to a user/organization, '--remove' revokes access, and '--transfer' changes ownership (for Galaxy-hosted apps).\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor authorized <site> [--list]\n       meteor authorized <site> --add <username>\n       meteor authorized <site> --remove <username>\n       meteor authorized <site> --transfer <username>\n```\n\nLANGUAGE: shell\nCODE:\n```\nOptions:\n  --add         add an authorized user or organization\n  --remove      remove an authorized user or organization\n  --transfer    transfer the (Galaxy) app to a new user or organization\n  --list        list authorized users and organizations (the default)\n```\n\n----------------------------------------\n\nTITLE: Supporting Literate CoffeeScript in Meteor\nDESCRIPTION: Shows the added support for literate CoffeeScript files with the .coffee.md extension, in addition to the existing .litcoffee extension. This expands Meteor's support for different CoffeeScript file formats.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_114\n\nLANGUAGE: CoffeeScript\nCODE:\n```\n# File: example.coffee.md\n\nThis is a literate CoffeeScript file.\n\n    console.log \"Hello from literate CoffeeScript\"\n```\n\n----------------------------------------\n\nTITLE: Error Message for Dynamic Import with Computed Expressions in JavaScript\nDESCRIPTION: This snippet shows the error message that occurs when trying to import modules using dynamically computed paths that weren't statically analyzed by Meteor's build process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/dynamic-import.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nError: Cannot find module '/libs/example.js'\n```\n\n----------------------------------------\n\nTITLE: Updating Symbolic Link in Meteor 1.3.4.2\nDESCRIPTION: Code snippet showing the creation of a symbolic link to the dev bundle in Meteor 1.3.4.2. This link is updated whenever .meteor/release is read.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_69\n\nLANGUAGE: Shell\nCODE:\n```\n.meteor/dev_bundle\n```\n\n----------------------------------------\n\nTITLE: Updating @babel/runtime Package in Meteor\nDESCRIPTION: Command to update the @babel/runtime npm package to the latest version in a Meteor project. This is a migration step for Meteor v1.8.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install @babel/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Introduction\nDESCRIPTION: Introductory markdown documentation explaining the purpose and functionality of the reload package in Meteor's ecosystem.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/reload/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# reload\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/reload) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/reload)\n***\n\nThe `reload` package handles the process of *migrating* an app:\nserializing the app's state, then shutting down and restarting the app\n(for example, to load updated client code or to move the client\nsession from one JavaScript virtual machine to another), and finally\nrestoring its state.\n\nPackages that want to participate in the migration process register\nwith `reload`. They can make the migration process wait until they are\nready and include whatever state they may possess in the serialization\nand deserialization process.\n\n`reload` is part of the [Webapp](https://github.com/meteor/meteor/tree/master/packages/webapp) project.\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Feature Compatibility Version in Meteor Shell\nDESCRIPTION: This command updates the feature compatibility version of the local MongoDB instance to 4.2. It's necessary to resolve compatibility issues when upgrading to Meteor 1.10.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.10-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.adminCommand({ setFeatureCompatibilityVersion: \"4.2\" })\n```\n\n----------------------------------------\n\nTITLE: Session.equals Usage Example\nDESCRIPTION: Comprehensive example showing efficient use of Session.equals for managing selected items in a list.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/session.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"postsView\">\n  {{! Show a dynamically updating list of items. Let the user click on an item\n      to select it. The selected item is given a CSS class, so it can be\n      rendered differently. }}\n\n  {{#each posts}}\n    {{> postItem}}\n  {{/each}}\n</template>\n\n<template name=\"postItem\">\n  <div class=\"{{postClass}}\">{{title}}</div>\n</template>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.postsView.helpers({\n  posts() {\n    return Posts.find();\n  }\n});\n\nTemplate.postItem.helpers({\n  postClass() {\n    return Session.equals('selectedPost', this._id)\n      ? 'selected'\n      : '';\n  }\n});\n\nTemplate.postItem.events({\n  'click'() {\n    Session.set('selectedPost', this._id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage in Strict Mode - JavaScript\nDESCRIPTION: This snippet shows incorrect examples in strict mode, where event selectors must strictly adhere to prefixed class selectors only. The snippet highlights common mistakes made when not using the required prefix.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/prefix-eventmap-selectors.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefix-eventmap-selectors: [2, \"js-\", \"strict\"]*/\n\nTemplate.foo.events({\n  'click .foo': function () {},\n  'click #foo': function () {},\n  'click input': function () {},\n  'click': function () {},\n  'click [data-foo=\"bar\"]': function () {},\n})\n\n```\n\n----------------------------------------\n\nTITLE: Registering Template Helpers in JavaScript\nDESCRIPTION: This snippet shows the new recommended syntax for registering template helpers using Template.someTemplate.helpers() instead of the deprecated Template.someTemplate.myHelper = ... syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_93\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.someTemplate.helpers({\n  // Helper functions go here\n});\n```\n\n----------------------------------------\n\nTITLE: Blaze Component Unit Test\nDESCRIPTION: Unit test for a Blaze todo item component demonstrating template rendering and assertion testing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-env mocha */\n/* eslint-disable func-names, prefer-arrow-callback */\n\nimport { Factory } from 'meteor/dburles:factory';\nimport chai from 'chai';\nimport { Template } from 'meteor/templating';\nimport $ from 'jquery';\nimport { Todos } from '../../../api/todos/todos';\n\n\nimport { withRenderedTemplate } from '../../test-helpers.js';\nimport '../todos-item.js';\n\ndescribe('Todos_item', function () {\n  beforeEach(function () {\n    Template.registerHelper('_', key => key);\n  });\n\n  afterEach(function () {\n    Template.deregisterHelper('_');\n  });\n\n  it('renders correctly with simple data', function () {\n    const todo = Factory.build('todo', { checked: false });\n    const data = {\n      todo: Todos._transform(todo),\n      onEditingChange: () => 0,\n    };\n\n    withRenderedTemplate('Todos_item', data, el => {\n      chai.assert.equal($(el).find('input[type=text]').val(), todo.text);\n      chai.assert.equal($(el).find('.list-item.checked').length, 0);\n      chai.assert.equal($(el).find('.list-item.editing').length, 0);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Runtime and Node Stubs Packages\nDESCRIPTION: Command to update the @babel/runtime and meteor-node-stubs packages to their latest versions, which is required after updating to Meteor 1.7 or 1.7.0.1 to ensure compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install @babel/runtime@latest meteor-node-stubs@latest\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and ESLint-plugin-Meteor - Bash\nDESCRIPTION: Command to install ESLint and the Meteor plugin as development dependencies using npm. Prerequisites include having npm installed on your system. No inputs or outputs are required as this is a setup command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install eslint eslint-plugin-meteor --save-dev\n```\n\n----------------------------------------\n\nTITLE: Starting Meteor App\nDESCRIPTION: Command to start the Meteor application server for local development.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nmeteor\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Connection in Meteor\nDESCRIPTION: Meteor.connection is the renamed reference to the default DDP connection (previously Meteor.default_connection).\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_119\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.connection\n```\n\n----------------------------------------\n\nTITLE: Example of Triple-slash Comments in JavaScript Documentation\nDESCRIPTION: Shows how to use triple-slash comments (///) for documentation. When multiple consecutive lines start with triple slashes, they are treated as a single documentation comment. The example also demonstrates how separate doc comments generate separate paragraphs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/scripts/doctool.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/// A triple-slash comment starts with `///` followed by an\n/// optional space (i.e. one space is removed if present).\n/// Multiple consecutive lines that start with `///` are\n/// treated together as a single doc comment.\n/** Separate doc comments get separate paragraphs. */\n```\n\n----------------------------------------\n\nTITLE: Simplified Async List Iteration in Blaze\nDESCRIPTION: Demonstrates a simplified approach to handling async lists in Blaze templates, using #each with an else block for all states.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/front-end/blaze.md#2025-04-22_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each user in getUsersAsync}}\n  {{user}}.\n{{else}}\n  Pending, rejected, or resolved and empty.\n{{/if}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nTemplate.profile.helpers({\n  getUsersAsync() {\n    return Meteor.callAsync(\"getUsers\"); // returns a Promise<Array>\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating XML Configuration for Test Runner in config.xml\nDESCRIPTION: XML content changes needed in the config.xml file to point to the test runner instead of the default index.html.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<content src=\"index.html\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<content src=\"cdvtests/index.html\" />\n```\n\n----------------------------------------\n\nTITLE: MongoDB Admin User Authentication\nDESCRIPTION: Command to authenticate as admin user to MongoDB server for configuring oplog access.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/oplog-observe-driver.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mongo -u YourExistingAdminUserName -p YourExistingAdminPassword mongo-server-1.example.com/admin\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-meteor via npm\nDESCRIPTION: Command to install the babel-preset-meteor package as a development dependency using npm.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/babel-preset-meteor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save-dev babel-preset-meteor\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.8.0\nDESCRIPTION: Outlines Cordova 9 compatibility changes and dependency updates\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.8.0, 2020-01-16\nIt makes cordova-plugin-meteor-webapp ready for Cordova 9.\n- changes context.requireCordovaModule to require for non-Cordova modules\n- removes .woff content type test because it never worked\n- updates travis test to use recent versions\n- removes .paramedic.config.js and use options directly on package.json\n- declares xcode as npm dependency\n- updates dev dependencies\n- updates DEVELOPMENT.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Policy in Meteor\nDESCRIPTION: The new browser-policy package allows configuration of Content-Security-Policy and X-Frame-Options HTTP headers for improved security.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_110\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage (refer to docs for full API)\nBrowserPolicy.content.allowImageOrigin(\"https://example.com\");\n```\n\n----------------------------------------\n\nTITLE: Starting Meteor with a Specific Host and Port\nDESCRIPTION: Command-line parameter syntax for specifying a particular interface and port for the Meteor development server to bind to when running locally.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_105\n\nLANGUAGE: bash\nCODE:\n```\nmeteor -p host:port\n```\n\n----------------------------------------\n\nTITLE: Acorn Token Iterator Usage\nDESCRIPTION: Example of iterating over tokens using ES6 iteration protocol.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let token of acorn.tokenizer(str)) {\n  // iterate over the tokens\n}\n\n// transform code to array of tokens:\nvar tokens = [...acorn.tokenizer(str)];\n```\n\n----------------------------------------\n\nTITLE: Adding URL Package to Meteor Package Dependencies\nDESCRIPTION: Configuration code to include the URL package as a dependency in a Meteor package definition file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/url.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.use(\"url\");\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Data Without Field Restrictions in Meteor (JavaScript)\nDESCRIPTION: Demonstrates an insecure Meteor publication that returns all fields of a collection without restriction. This pattern exposes the risk that adding secret fields to the collection later would result in them being automatically published to clients. No field filtering or argument validation is present, and this approach should be avoided in favor of explicitly restricting fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// #1: Bad! If we add a secret field to Lists later, the client\n// will see it\nMeteor.publish('lists.public', function () {\n  return Lists.find({userId: {$exists: false}});\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronous User Account Creation (Old Method)\nDESCRIPTION: Example of creating a user account using the synchronous Accounts.createUserVerifyingEmail method in older Meteor versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.9-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.methods({\n  createUserAccount (user) {\n    /**\n     * This seems to be the issue.\n     * Using the other method `createUser` works as expected.\n     */\n    Accounts.createUserVerifyingEmail({\n      username: user.username,\n      email: user.email,\n      password: user.password,\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using WARN_WHEN_USING_OLD_API Environment Variable in Meteor - Markdown\nDESCRIPTION: This markdown snippet explains how to enable warnings when using old-style API methods in Meteor by setting the WARN_WHEN_USING_OLD_API environment variable before starting the Meteor process. This helps developers identify outdated API usage during migration. The expected input is any shell or deployment environment where one can set environment variables, and the expected output is that Meteor will print warnings when deprecated APIs are used. There are no direct dependencies but requires a recent Meteor version that supports this variable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```WARN_WHEN_USING_OLD_API```\n\n```\n\n----------------------------------------\n\nTITLE: Non-Warning Patterns with Session in JavaScript (Meteor)\nDESCRIPTION: This snippet shows patterns that do not trigger warnings. The exemption exists when Session is not used as a global accessor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-session.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSession = true\nconsole.log(Session)\n```\n\n----------------------------------------\n\nTITLE: Create Oplog User (MongoDB 2.6)\nDESCRIPTION: MongoDB 2.6 command to create a dedicated user with read access to the oplog in the local database.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/oplog-observe-driver.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createUser({user: \"oplogger\", pwd: \"PasswordForOplogger\", roles: [{role: \"read\", db: \"local\"}]})\n```\n\n----------------------------------------\n\nTITLE: Parsing Single-Line Block Comments\nDESCRIPTION: Demonstrates a block comment written on a single line using the `/* ... */` syntax. The parsing rules described for multi-line block comments generally apply.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/* Single-line block comments are also ok. */\n```\n\n----------------------------------------\n\nTITLE: Experimental String Comparison for Test Display with Meteor Test JavaScript\nDESCRIPTION: Performs a string comparison intended to provide improved display formatting within the test runner, especially for multiline strings. This method is experimental. Requires actual and expected strings, plus an optional message parameter. Mainly for internal display, not general assertion.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest._stringEqual: function (actual, expected[, message]);\n```\n\n----------------------------------------\n\nTITLE: Resetting Local MongoDB Database\nDESCRIPTION: Command to reset the local MongoDB database when upgrading from an older Meteor version. This can help resolve issues related to different MongoDB driver versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor reset --db # resets local db\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundle Visualizer in Meteor\nDESCRIPTION: Command to enable the bundle-visualizer package in a Meteor application using the --extra-packages option and --production flag.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/bundle-visualizer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd app/\n$ meteor --extra-packages bundle-visualizer --production\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage in Relaxed Mode - JavaScript\nDESCRIPTION: This snippet demonstrates an incorrect example of setting up events using class selectors without the specified prefix in relaxed mode. It emphasizes the need to follow the prefix convention when using class selectors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/prefix-eventmap-selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefix-eventmap-selectors: [2, \"js-\", \"relaxed\"]*/\n\nTemplate.foo.events({\n  'click .foo': function () {}\n})\n\n```\n\n----------------------------------------\n\nTITLE: MongoDB Sort Specifications\nDESCRIPTION: Different syntax options for specifying sort orders in MongoDB queries.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// All of these do the same thing (sort in ascending order by key `a`, breaking\n// ties in descending order of key `b`).\n[['a', 'asc'], ['b', 'desc']]\n['a', ['b', 'desc']]\n{ a: 1, b: -1 }\n\n// Sorted by `createdAt` descending.\nUsers.find({}, { sort: { createdAt: -1 } });\n\n// Sorted by `createdAt` descending and by `name` ascending.\nUsers.find({}, { sort: [['createdAt', 'desc'], ['name', 'asc']] });\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Runtime in Meteor 1.8.2\nDESCRIPTION: Command to update the @babel/runtime npm package to the latest version, which is recommended when upgrading to Meteor 1.8.2.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install @babel/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for JSESSIONID Cookies in Meteor\nDESCRIPTION: Configuration for enabling JSESSIONID cookies for sticky sessions in Meteor. Set the USE_JSESSIONID environment variable to enable placing a JSESSIONID cookie on sockjs requests.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_131\n\nLANGUAGE: bash\nCODE:\n```\nUSE_JSESSIONID=true\n```\n\n----------------------------------------\n\nTITLE: Example of Single-line Block Comment in JavaScript Documentation\nDESCRIPTION: Shows how to write a single-line block comment that will be processed by the documentation tool. This format is more concise for brief documentation notes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/scripts/doctool.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** Single-line block comments are also ok. */\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with Excluded Meteor Packages\nDESCRIPTION: Extended PostCSS configuration that excludes specific Meteor packages from being processed by PostCSS plugins. Useful when package CSS is incompatible with your PostCSS setup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/standard-minifier-css.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n  },\n  excludedMeteorPackages: [\n    'github-config-ui',\n    'constellation:console'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Self-Test Commands\nDESCRIPTION: Commands for listing and running Meteor Tool self-tests with various filtering options.\nSOURCE: https://github.com/meteor/meteor/blob/devel/DEVELOPMENT.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ ./meteor self-test --list\n\n$ ./meteor self-test \"^[a-b]\" --list\n\n$ ./meteor self-test --exclude \"^[a-b]\" --list\n\n$ ./meteor self-test --retries 0\n```\n\n----------------------------------------\n\nTITLE: Removing Rate Limiting for Meteor Accounts\nDESCRIPTION: Removes the default rate limiting for login attempts in Meteor accounts. This allows unlimited login attempts by default.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_81\n\nLANGUAGE: JavaScript\nCODE:\n```\nAccounts.removeDefaultRateLimit();\n```\n\n----------------------------------------\n\nTITLE: Testing Impossible Combination\nDESCRIPTION: Shows how to test if a combination of constraints is impossible to satisfy.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsolver.solveAssuming(Logic.and(\"Alice\", \"-Charlie\")) // => null\n```\n\n----------------------------------------\n\nTITLE: Installing Acorn via NPM\nDESCRIPTION: Command to install Acorn package using NPM package manager.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install acorn\n```\n\n----------------------------------------\n\nTITLE: Accessing Facebook Access Token in Meteor User Data\nDESCRIPTION: This snippet demonstrates how to retrieve a user's Facebook access token from the Meteor.users collection. This is useful for making API calls to Facebook on behalf of the user.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/accounts.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Given a userId, get the user's Facebook access token\nconst user = Meteor.users.findOne(userId);\nconst fbAccessToken = user.services.facebook.accessToken;\n```\n\n----------------------------------------\n\nTITLE: Disallowing Content Types in Meteor Browser Policy\nDESCRIPTION: Disallows specific types of content on the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallow<ContentType>()\n```\n\n----------------------------------------\n\nTITLE: Asserting Instance Type with Meteor Test JavaScript\nDESCRIPTION: Checks if an object is an instance of a particular class or constructor. Requires the object, the class/constructor, and optionally a failure message. Fails the test if obj is not instanceof klass.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.instanceOf(obj, klass[, message]);\n```\n\n----------------------------------------\n\nTITLE: Installing core-js package with npm in Meteor 1.5\nDESCRIPTION: Command to install the core-js npm package, which is required for the ecmascript-runtime-client package in Meteor 1.5.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install --save core-js\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to v3.1 using Bash\nDESCRIPTION: This Bash command updates the current Meteor project to the specific release version 3.1. It uses the `meteor update` command with the `--release` flag to target the desired version. Requires the Meteor command-line tool to be installed and executed within a Meteor project directory.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.1.0.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.1\n\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor.js via npx\nDESCRIPTION: Command for installing the latest version of Meteor.js using npx. Requires Node.js version 20 to be pre-installed on the system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/vue/meteorjs3-vue3-vue-meteor-tracker.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx meteor\n```\n\n----------------------------------------\n\nTITLE: Profiler Output Example with Uninstrumented Code Blocks - Text Log\nDESCRIPTION: This example profiler log demonstrates the output when code blocks lack sufficient instrumentation. Some functions (e.g., files.readFile, sha1) are measured, while others are summarized as 'other <function>'. The output is a nested plain text report, requiring no dependencies to read, and helps guide further profiling annotation. Developers can use this pattern to identify which functions need more granular instrumentation for accurate performance profiles.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/PERFORMANCE.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n| ImportScanner#_readFile...............1,338 ms (329)\\n|    files.readFile                       100 ms (329)\\n|    sha1                                   3 ms (329)\\n|    other ImportScanner#_readFile      1,235 ms\n```\n\n----------------------------------------\n\nTITLE: Installing Logic Solver via NPM\nDESCRIPTION: Shows how to require the Logic Solver package in a Node.js environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Logic = require('logic-solver');\n```\n\n----------------------------------------\n\nTITLE: Logging out of a Meteor Developer Account\nDESCRIPTION: Logs the user out of their currently authenticated Meteor developer account in the command line.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor logout\n```\n\n----------------------------------------\n\nTITLE: Allowed Usage of Template.currentData() in Meteor JavaScript\nDESCRIPTION: This snippet shows an allowed pattern that does not trigger the `no-template-parent-data` ESLint rule. Using `Template.currentData()` accesses the data context of the current template itself, which is a standard practice and does not introduce coupling with the parent template's data.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-template-parent-data.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n\nTemplate.currentData()\n\n```\n```\n\n----------------------------------------\n\nTITLE: Header Spacing in Markdown\nDESCRIPTION: Examples showing proper spacing after headers to ensure correct parsing of subsequent paragraphs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n// bad\n<h2 id=\"schemas-with-collections\">Using schemas with collections</h2>\nThis is some text\n\n// good\n<h2 id=\"schemas-with-collections\">Using schemas with collections</h2>\n\nThis is some text\n```\n\n----------------------------------------\n\nTITLE: Registering Build Plugin with Caching Compiler in Meteor\nDESCRIPTION: This snippet demonstrates how to register a build plugin that uses the caching-compiler package. It shows the structure of the Package.registerBuildPlugin method, including specifying dependencies and source files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/package.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.registerBuildPlugin({\n  name: 'compileGG',\n  use: ['caching-compiler@1.0.0'],\n  sources: ['plugin/compile-gg.js']\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Output HTML Example\nDESCRIPTION: Shows the HTML output generated from the markdown template example.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/markdown.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>I am using <strong>markdown</strong>.</p>\n```\n\n----------------------------------------\n\nTITLE: Extending Loose Parser Method with Acorn Plugin in JavaScript\nDESCRIPTION: Illustrates extending the `readToken` method of a loose parser in Acorn using plugins. This approach similarly wraps the existing method to inject custom logic, suitable for supporting plugins in the loose parser context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/packages/modules-test-package/node_modules/acorn/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlooseParser.extend(\"readToken\", function(nextMethod) {\n  return function() {\n    console.log(\"Reading a token in the loose parser!\")\n    return nextMethod.call(this)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Exceptions with Meteor Test JavaScript\nDESCRIPTION: Verifies that the provided function throws an exception. The 'expected' argument may be undefined (any exception), a substring, regexp, or predicate function tested against the thrown error. Recommended to use a predicate function if checking for error instances. Does not directly distinguish constructor-based error classes due to JavaScript limitations.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.throws(func, expected);\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform to Test Application\nDESCRIPTION: Command to add the iOS platform to the Cordova test application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncordova platform add ios\n```\n\n----------------------------------------\n\nTITLE: Adding Fetch Package to Meteor Package Dependencies\nDESCRIPTION: Code snippet showing how to include the 'fetch' package as a dependency in a Meteor package definition file (package.js).\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.use('fetch');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Plugin from Local Filesystem\nDESCRIPTION: Example of how to install a Cordova plugin from a local filesystem using file:// URLs. This approach is useful for plugin development and as a workaround for certain plugins like Facebook.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add cordova:phonegap-facebook-plugin@file://../phonegap-facebook-plugin\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Retries for MongoDB Transactions in Meteor\nDESCRIPTION: Example of disabling automatic retries for transactions by setting autoRetry to false. This switches to using the Transactions Core API instead of the Callback API.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/mongo-transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Mongo.withTransaction(async () => {\n  ...\n}, { autoRetry: false });\n```\n\n----------------------------------------\n\nTITLE: Parsing Standard Multi-Line Block Comments\nDESCRIPTION: Illustrates a multi-line block comment structure (`/* ... */`). The parser strips the sequence of optional whitespace, an asterisk (`*`), and an optional single space from the beginning of each line within the comment block, except for the first line. Leading whitespace on lines without this pattern is preserved. Bullet lists using `*` can be created within the comment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\n *This file is automatically generated from [`doctool.md`](doctool.md).*\n *\n * This is a block comment.  The parser strips the sequence,\n * [optional whitespace, `*`, optional single space] from\n * every line that has it.\n *\n * For lines that don't, no big deal.\n *\n *     Leading whitspace will be preserved here.\n *\n * We can create a bullet list in here:\n *\n * * This is a bullet\n */\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Test Run Identifiers with Meteor Test JavaScript\nDESCRIPTION: Returns a unique string ID representing the current test run, which can be useful for tracking or parallelization. Takes no parameters and returns a string such as 'ZmXxMPyoWGFy5wEiB'. Requires Meteor's test utilities.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.runId();\n```\n\n----------------------------------------\n\nTITLE: Viewing Meteor Installation Directory in Windows Command Prompt\nDESCRIPTION: Command to display the required installation directory path for Meteor using Windows environment variables\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/alternate-windows-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\necho %LocalAppData%\\.meteor\n```\n\n----------------------------------------\n\nTITLE: Old Implementation of BabelCompiler#processFilesForTarget\nDESCRIPTION: The original implementation of the BabelCompiler's processFilesForTarget method that processes all input files and adds JavaScript to the bundle immediately.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nprocessFilesForTarget(inputFiles) {\n  inputFiles.forEach(inputFile => {\n    var toBeAdded = this.processOneFileForTarget(inputFile);\n    if (toBeAdded) {\n      inputFile.addJavaScript(toBeAdded);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Atmosphere Package with Meteor CLI\nDESCRIPTION: Command to create a new Atmosphere package using the Meteor command line tool. The package name should be in the format 'username:my-package' if publishing to Atmosphere.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor create --package my-package\n```\n\n----------------------------------------\n\nTITLE: Accessing Fibers in Meteor v0.5.5\nDESCRIPTION: Code showing how to access Fiber and Future symbols after the upgrade to Fibers v1.0.0, where these symbols are no longer exposed globally.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\nvar Fiber = __meteor_bootstrap__.require('fibers');\nvar Future = __meteor_bootstrap__.require('fibers/future');\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of buildSubmodule in Chat Submodule | meteor-rpc | TypeScript\nDESCRIPTION: Shows correct submodule creation and export, finalized with buildSubmodule. After adding the 'createChat' method, buildSubmodule exports a namespaced module suitable for main module attachment. Omitting buildSubmodule will cause submodule registration errors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule } from \"meteor-rpc\";\nimport { z } from \"zod\";\n\nexport const chatModule = createModule(\"chat\")\n  .addMethod(\"createChat\", z.void(), async () => {\n    return \"chat\" as const;\n  })\n  // ‚úÖ it has the buildSubmodule method\n  .buildSubmodule();\n```\n\n----------------------------------------\n\nTITLE: Migrating from Atmosphere to npm for Angular\nDESCRIPTION: Commands for removing Atmosphere Angular packages while keeping the angular-templates package, and installing Angular from npm.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove angular\nmeteor add angular-templates\n\nnpm install --save angular angular-meteor\n```\n\n----------------------------------------\n\nTITLE: Cloning Meteor Repository\nDESCRIPTION: Commands to clone the Meteor repository from GitHub with Git submodules included.\nSOURCE: https://github.com/meteor/meteor/blob/devel/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone --recursive https://github.com/meteor/meteor.git\n$ cd meteor\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Cordova Application\nDESCRIPTION: Commands to create a new Cordova test application for running the plugin tests.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\ncordova create test-app\n```\n\n----------------------------------------\n\nTITLE: Running Local Meteor Instance\nDESCRIPTION: Example of running a Meteor app using a local checkout instead of the system installation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/DEVELOPMENT.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cd my-app/\n$ /path/to/meteor-checkout/meteor run\n```\n\n----------------------------------------\n\nTITLE: Installing Global DevDependencies for Testing\nDESCRIPTION: Command to install devDependencies globally, with a note about why this approach is being used.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g xxx\n```\n\n----------------------------------------\n\nTITLE: Querying Merged GitHub PRs (Web Search Syntax)\nDESCRIPTION: Provides a GitHub search query string to find all Pull Requests that have been merged into a specific release branch. This helps identify contributions to include in the changelog for that release. Replace `<release-branch-name>` with the actual name of the target branch.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    is:pr base:<release-branch-name> is:merged\n```\n\n----------------------------------------\n\nTITLE: MongoDB Query Operator Example\nDESCRIPTION: Example of MongoDB query using $elemMatch operator for matching array elements that meet specified criteria\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_111\n\nLANGUAGE: JavaScript\nCODE:\n```\n{x: {$elemMatch: {$gt: 5}}}\n```\n\n----------------------------------------\n\nTITLE: Executing Documentation Generation Tool for JavaScript Files\nDESCRIPTION: Command-line usage instruction for running the doctool.js script to process JavaScript files and generate Markdown documentation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndoctool.js ...jsfiles...\n```\n\n----------------------------------------\n\nTITLE: Linking to Meteor Documentation Website in Markdown\nDESCRIPTION: This snippet provides a markdown link to the Meteor documentation website where the changelog is published.\nSOURCE: https://github.com/meteor/meteor/blob/devel/History.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[https://docs.meteor.com/history.html](https://docs.meteor.com/history.html)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Splash Screen in Cordova config.xml\nDESCRIPTION: Update the config.xml file to create two themes for the Android splash screen, as the splash screen API has changed and is now part of cordova-android core.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/2.14.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<config.xml>\n  <!-- Add splash screen themes here -->\n</config.xml>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Session Values in Meteor Tracker\nDESCRIPTION: Example of using Session.set() to set multiple key-value pairs simultaneously in Meteor's Tracker functionality.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_95\n\nLANGUAGE: JavaScript\nCODE:\n```\nSession.set({k1: v1, k2: v2})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Block Comment Format for JavaScript Documentation\nDESCRIPTION: Example of a block comment format used for documentation. The parser strips asterisks and leading spaces from each line, preserving content structure including whitespace and bullet lists.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This is a block comment.  The parser strips the sequence,\n * [optional whitespace, `*`, optional single space] from\n * every line that has it.\n *\nFor lines that don't, no big deal.\n\n    Leading whitespace will be preserved here.\n\n * We can create a bullet list in here:\n *\n * * This is a bullet\n */\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Self-Tests (Bash)\nDESCRIPTION: Executes the Meteor self-test suite using the `./meteor` command-line tool. An optional regular expression `<regexp>` can be provided to filter which tests are run. This command is the primary way to trigger end-to-end tests for the Meteor tools.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tool-testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./meteor self-test <regexp>\n```\n\n----------------------------------------\n\nTITLE: Connecting to the Local MongoDB with Meteor CLI\nDESCRIPTION: Opens an interactive Mongo shell (mongosh) connected to the local development database of the current Meteor project. Requires the application to be running and 'mongosh' to be installed. The '--url' or '-U' option returns the connection URL instead of opening a shell.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nUsage: meteor mongo [--url]\n```\n\nLANGUAGE: shell\nCODE:\n```\nOptions:\n  --url, -U return a Mongo database URL\n  --verbose, -v to show the errors that have occurred while connecting to the\n\t\t\t\t\t\t\t\tdatabase\n```\n\n----------------------------------------\n\nTITLE: Disabling Meteor AppCache for Specific Browsers in JavaScript\nDESCRIPTION: Demonstrates how to use `Meteor.AppCache.config` to selectively disable the Application Cache functionality for specific browsers like Chrome and Firefox within a Meteor application. Supported browser keys include `android`, `chrome`, `chromium`, `chromeMobileIOS`, `firefox`, `ie`, `mobileSafari`, and `safari`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/appcache.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nMeteor.AppCache.config({\n  chrome: false,\n  firefox: false\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Build Settings with build.json\nDESCRIPTION: JSON configuration for the build.json file that includes Apple Developer Team ID for building the iOS application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"debug\": {\n      \"developmentTeam\": \"ABC123DEF456\"\n    },\n    \"release\": {\n      \"developmentTeam\": \"ABC123DEF456\",\n      \"codeSignIdentity\": \"iPhone Developer\",\n      \"packageType\": \"ad-hoc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor via NPM\nDESCRIPTION: Standard installation command for Meteor.js using NPM package manager, suitable for Windows, Linux, and OS X.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g meteor\n```\n\n----------------------------------------\n\nTITLE: Escaping Handlebars Syntax in Inline Markdown Code Snippets\nDESCRIPTION: Illustrates how to properly escape Handlebars syntax within inline code snippets in Markdown to prevent rendering issues.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n// will break\nRender multiple items in your template with `{{#each}}`\n\n// good\nRender multiple items in your template with `{% raw %}{{#each}}{% endraw %}`\n```\n\n----------------------------------------\n\nTITLE: Rendering Autoupdate Status in Blaze Template (Handlebars)\nDESCRIPTION: Includes the `{{available}}` Handlebars expression within a Blaze template file (likely `leaderboard.html`). This expression invokes the corresponding JavaScript helper function (`available`) and renders its return value (either 'true' or 'false') directly into the HTML, making the autoupdate status visible to the user.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n{{available}}\n```\n\n----------------------------------------\n\nTITLE: Bundling a Meteor Project (Deprecated) using Shell\nDESCRIPTION: Deprecated command. Packs the Meteor project into a single tarball (`.tar.gz`) file for deployment. Users should now use the 'meteor build' command instead, which offers more flexibility and platform support.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nmeteor bundle <output_file.tar.gz>\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Status Badge for ECMAScript Runtime Package\nDESCRIPTION: This markdown snippet shows the build status badge from Travis CI for the ecmascript-runtime package. It provides a visual indicator of the current build status of the package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript-runtime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Build Status](https://travis-ci.org/meteor/ecmascript-runtime.svg?branch=master)](https://travis-ci.org/meteor/ecmascript-runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Data for Meteor Tests\nDESCRIPTION: Example of preparing the database for testing by cleaning and inserting test data in a beforeEach block. This ensures each test starts with a known database state.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor';\nimport expect from 'expect';\n\nimport { Notes } from './notes';\n\n describe('notes', function () {\n   const noteOne = {\n     _id: 'testNote1',\n     title: 'Groceries',\n     body: 'Milk, Eggs and Oatmeal'\n   };\n\n   beforeEach(function () {\n     Notes.remove({});\n     Notes.insert(noteOne);\n   });\n    ...\n```\n\n----------------------------------------\n\nTITLE: Listing Merged GitHub PRs using GH CLI (Bash)\nDESCRIPTION: Demonstrates how to use the GitHub Command Line Interface (gh) to list merged Pull Requests targeting a specific base branch. This is an alternative to the web UI search query but might provide less detailed information like authors directly in the output. Requires `gh` CLI to be installed and configured. Replace `<release-branch-name>` with the actual target branch.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  gh pr list --state merged --base <release-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Declaring Magic Square Digit Variables with Logic Solver in JavaScript\nDESCRIPTION: This snippet illustrates the declaration of position variables for each digit of the magic square using Logic.variableBits, allocating a 4-bit-wide representation for each, and grouping them collectively in an array. Required dependency: the Logic Solver JavaScript library. Each variable acts as a set of boolean bits representing an integer value (1-9) at each square location, required for later constraint definition.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar A = Logic.variableBits('A', 4);\nvar B = Logic.variableBits('B', 4);\nvar C = Logic.variableBits('C', 4);\nvar D = Logic.variableBits('D', 4);\nvar E = Logic.variableBits('E', 4);\nvar F = Logic.variableBits('F', 4);\nvar G = Logic.variableBits('G', 4);\nvar H = Logic.variableBits('H', 4);\nvar I = Logic.variableBits('I', 4);\n\nvar locations = [A, B, C, D, E, F, G, H, I];\n\nA.bits // => [\"A$0\", \"A$1\", \"A$2\", \"A$3\"]\n```\n\n----------------------------------------\n\nTITLE: Handlebars Syntax Escaping in Markdown\nDESCRIPTION: Examples showing how to properly escape Handlebars syntax within inline code snippets to prevent rendering issues.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n// will break\nRender multiple items in your template with `{{#each}}`\n\n// good\nRender multiple items in your template with `{% raw %}{{#each}}{% endraw %}`\n```\n\n----------------------------------------\n\nTITLE: Markdown Helper Output in HTML\nDESCRIPTION: Example of the HTML output produced by the markdown helper when processing Markdown syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/markdown.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>I am using <strong>markdown</strong>.</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for API Warning\nDESCRIPTION: Example showing how to enable warnings for usage of old-style API methods by setting an environment variable before starting the Meteor process\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/2.12.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWARN_WHEN_USING_OLD_API=true\n```\n\n----------------------------------------\n\nTITLE: Styling TaskForm with CSS\nDESCRIPTION: This CSS snippet adds a top margin to the task form for better visual spacing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/3.forms-and-events.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.task-form {\n  margin-top: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node Stubs in Meteor 1.8.2\nDESCRIPTION: Command to update the meteor-node-stubs package to version 1.0.0, which is recommended for new Meteor 1.8.2 applications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nmeteor npm install meteor-node-stubs@next\n```\n\n----------------------------------------\n\nTITLE: Parsing Triple-Slash Documentation Comments\nDESCRIPTION: Illustrates the use of triple-slash (`///`) comments, often used for documentation. An optional single space immediately following the `///` sequence is removed by the parser. Multiple consecutive lines starting with `///` are concatenated to form a single documentation comment block, treated as one paragraph. Separate sequences of `///` comments result in distinct paragraphs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/// A triple-slash comment starts with `///` followed by an\n/// optional space (i.e. one space is removed if present).\n/// Multiple consecutive lines that start with `///` are\n/// treated together as a single doc comment.\n\n/// Separate doc comments get separate paragraphs.\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor with sudo for permission issues\nDESCRIPTION: Installs Meteor globally with sudo when facing permission issues. Uses the --unsafe-perm flag to bypass permission restrictions. Not recommended unless necessary.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g meteor --unsafe-perm\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Meteor Version Support Status\nDESCRIPTION: A markdown table showing supported Meteor versions and their security support status, including current version 3.x.y with full support, version 2.x.y with limited support until 2025-07, and versions 1.12.x and below with no support.\nSOURCE: https://github.com/meteor/meteor/blob/devel/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Support Status\n| ------- | --------------\n| 3.x.y   | ‚úÖ  all security issues\n| 2.x.y   | ‚ö†Ô∏è  only major security issues (Until 2025-07)\n| <= 1.12.x   | ‚ùå  no longer supported\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Importing from an Atmosphere Package using Default Import\nDESCRIPTION: Shows an incorrect attempt to import from an Atmosphere package (`meteor/meteor`) using the default import syntax. This will fail because Atmosphere packages often use named exports rather than a single default export.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// This will not work\nimport Meteor from 'meteor/meteor';\n```\n\n----------------------------------------\n\nTITLE: Adding Direct Dependency 'elliptic' (v1.0.3)\nDESCRIPTION: Specifies 'elliptic' version 6.5.4 being added as a direct project dependency. This action was necessary to enforce an upgrade and address a security vulnerability, bypassing issues with indirect updates via the un-updated 'crypto-browserify' package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/meteor-node-stubs/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nelliptic@6.5.4\n```\n\n----------------------------------------\n\nTITLE: EJSON Date Format\nDESCRIPTION: The format for representing Date objects in EJSON, showing milliseconds since epoch.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"$date\": MILLISECONDS_SINCE_EPOCH}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Styles in Meteor using BrowserPolicy\nDESCRIPTION: API functions for controlling whether inline CSS styles are allowed in your application, which can help enforce content security policies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/browser-policy.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allowInlineStyles()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowInlineStyles()\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Markdown Package\nDESCRIPTION: Command to add the deprecated Markdown package to a Meteor project using the Meteor package manager.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/markdown.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add markdown\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Meteor\nDESCRIPTION: Package name reference for jQuery in Meteor applications. This is used within package management system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/jquery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\njquery\n```\n\n----------------------------------------\n\nTITLE: Running the Meteor application\nDESCRIPTION: Command to start the Meteor application. This launches the development server and allows you to view your app in the browser.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/1.creating-the-app.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeteor run\n```\n\n----------------------------------------\n\nTITLE: Installing babel-runtime Package in Meteor Application\nDESCRIPTION: Command to install the babel-runtime npm package in a Meteor application directory. This is now required for most Babel-transformed code to work properly.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save babel-runtime\n```\n\n----------------------------------------\n\nTITLE: Specifying caret version range in package.json\nDESCRIPTION: Example showing the default caret version range notation in package.json. This allows automatic updates to minor and patch versions, which might override local modifications.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"left-pad\": \"^1.0.2\",\n```\n\n----------------------------------------\n\nTITLE: Legacy Compiler Plugin Implementation (JavaScript)\nDESCRIPTION: Example of the old implementation of BabelCompiler#processFilesForTarget method in Meteor compiler plugins.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nprocessFilesForTarget(inputFiles) {\n  inputFiles.forEach(inputFile => {\n    var toBeAdded = this.processOneFileForTarget(inputFile);\n    if (toBeAdded) {\n      inputFile.addJavaScript(toBeAdded);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v2.0.0\nDESCRIPTION: Documents WebViewAssetLoader implementation for Android with AndroidX webview support\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v2.0.0, 2020-10-04\nUse WebViewAssetLoader on Android with newest cordova AndroidX webview usage\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables by Name in ES2015 JavaScript\nDESCRIPTION: Shows how to export variables by name at the end of a module file using ES2015 syntax.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// exporter.js\nfunction g() { ... }\nlet h = g();\n\n// At the end of the file\nexport { g, h };\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-preset-meteor in .babelrc\nDESCRIPTION: Example configuration for using the Meteor preset in a .babelrc file, which is the recommended approach.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/babel-preset-meteor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"meteor\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Frame Origin in Meteor Browser Policy\nDESCRIPTION: Allows the app to be framed only by a specific origin. Note that this is not supported in Chrome or Safari.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.restrictToOrigin(origin)\n```\n\n----------------------------------------\n\nTITLE: Querying Merged Pull Requests using GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI to list merged pull requests for a specific release branch. It helps in gathering information for changelog entries.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh pr list --state merged --base <release-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor using npx\nDESCRIPTION: The simplest way to install the latest official version of Meteor using npx. This command works across Windows, Linux, and OS X platforms.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor\n```\n\n----------------------------------------\n\nTITLE: Proper Markdown Formatting for Headers and Paragraphs\nDESCRIPTION: Shows the correct way to format headers and paragraphs in Markdown, emphasizing the importance of blank lines after headers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n// bad\n<h2 id=\"schemas-with-collections\">Using schemas with collections</h2>\nThis is some text\n\n// good\n<h2 id=\"schemas-with-collections\">Using schemas with collections</h2>\n\nThis is some text\n```\n\n----------------------------------------\n\nTITLE: Repairing Mongo database after downgrading Meteor version\nDESCRIPTION: This command demonstrates how to repair a Mongo database using the mongod binary when downgrading to an older Meteor version. It's necessary when an application upgraded to use Mongo 3.6.4 encounters issues with older Meteor versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.7-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n~/.meteor/packages/meteor-tool/1.6.0_1/mt-os.osx.x86_64/dev_bundle/mongodb/bin/mongod --dbpath /my-app/.meteor/local/db --repair\n```\n\n----------------------------------------\n\nTITLE: Removing Autopublish in Meteor\nDESCRIPTION: Shows how to remove the autopublish package from a Meteor application to gain control over which documents are published to clients.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove autopublish\n```\n\n----------------------------------------\n\nTITLE: ISC License Text\nDESCRIPTION: The full text of the ISC License, which is used by several libraries in the Meteor project. It grants permission to use, copy, modify, and distribute the software, with a disclaimer of warranties and limitations of liability.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/ISC.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nThe ISC License\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Logging out of Meteor Developer Account (Bash)\nDESCRIPTION: Shows the simple `meteor logout` command. Running this command terminates the current authenticated session with the Meteor developer account on the local machine.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmeteor logout\n```\n\n----------------------------------------\n\nTITLE: Activating Profiler via Shell Environment Variable - Bash\nDESCRIPTION: This code snippet demonstrates how to enable Meteor\\'s built-in profiler by setting the METEOR_PROFILE environment variable. The value (e.g. 1) specifies a time threshold (in milliseconds); all function calls taking longer than this value will be reported. This command must be executed in a terminal supporting environment variable assignment, with Meteor installed, and outputs performance profiling information to the console for the executed Meteor process.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/PERFORMANCE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_PROFILE=1 meteor ...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Type Declaration\nDESCRIPTION: Example showing the change in type imports required after enabling emitDecoratorsMetadata in TypeScript 4.1.2. Shows migration from regular import to using the 'type' qualifier.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Point } from 'react-easy-crop/types';\n```\n\n----------------------------------------\n\nTITLE: Running Development Scripts (Tests, Linter) using Bash\nDESCRIPTION: These commands demonstrate how to execute various npm scripts defined in the project's `package.json` for development tasks. They include running unit tests, linting the codebase, running unit tests in watch mode, and executing the complete test suite.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/development.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run unit-tests only\n$ npm run unit-test\n\n# run linter only\n$ npm run lint\n\n# run unit-tests only\n$ npm run unit-test\n\n# run unit-tests in watch mode\n$ npm run unit-test:watch\n\n# run complete test suite\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor on Apple M1 (Legacy Versions)\nDESCRIPTION: Installation command for older Meteor versions on Apple M1 machines using Rosetta 2 compatibility.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/install.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\narch -x86_64 npm install -g meteor\n```\n\n----------------------------------------\n\nTITLE: Installing Vue in Meteor Project\nDESCRIPTION: Command to install Vue.js as an NPM dependency in a Meteor project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmeteor npm install --save vue\n```\n\n----------------------------------------\n\nTITLE: Installing Meteor Fetch API Package\nDESCRIPTION: Command to install the isomorphic implementation of the WHATWG fetch() API package in a Meteor application. This package demonstrates the modern/legacy bundling system with different implementations across environments.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add fetch\n```\n\n----------------------------------------\n\nTITLE: Displaying File Change Watcher Efficiency Message in Meteor (Bash)\nDESCRIPTION: This snippet shows the message displayed by Meteor when it detects that the Linux inotify API cannot be used due to system limits. It suggests a configuration change to improve efficiency.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/file-change-watcher-efficiency.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n=> It looks like a simple tweak to your system's configuration will make many\n   tools (including this Meteor command) more efficient. To learn more, see\n   https://github.com/meteor/meteor/wiki/File-Change-Watcher-Efficiency\n```\n\n----------------------------------------\n\nTITLE: Installing MeteorRN Core Package\nDESCRIPTION: NPM command to install the @meteorrn/core package in a React Native project\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/react-native.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @meteorrn/core\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Meteor Migrations to Initial State (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to revert all applied migrations by migrating the database schema back to version 0 using 'Migrations.migrateTo(0)'. Use this when rolling back releases or undoing breaking changes. It should be executed in the Meteor shell, with percolate:migrations set up. It will trigger the 'down()' method of each migration in reverse order.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/collections.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The \"0\" migration is the unmigrated (before the first migration) state\nMigrations.migrateTo(0);\n```\n\n----------------------------------------\n\nTITLE: Using CommonJS Module Exports in JavaScript\nDESCRIPTION: Shows how to use CommonJS module.exports syntax as an alternative to ES2015 export statements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/modules.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports.insert = new ValidatedMethod({ ... });\nmodule.exports.default = incompleteCountDenormalizer;\n```\n\n----------------------------------------\n\nTITLE: Defining a Blaze Template Name in HTML\nDESCRIPTION: Demonstrates the recommended naming convention for Blaze templates. The template name (`Lists_show`) uses underscores to separate namespace or path components, ensuring uniqueness across the application and allowing it to be referenced as a single identifier in JavaScript.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"Lists_show\">\n  ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Meteor\nDESCRIPTION: Commands to completely remove Meteor from a Unix-based system by removing the installation directory and launcher script.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/.meteor/\nsudo rm /usr/local/bin/meteor\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Destructuring Template Instance Parameter When Forbidden (JavaScript)\nDESCRIPTION: This example illustrates a violation when the `eventmap-params` rule is set with `{\"preventDestructuring\": \"templateInstance\"}`. Destructuring the second parameter ({ data }) is disallowed by this configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"preventDestructuring\": \"templateInstance\"}]\n */\nTemplate.foo.events({\n  'submit form': function (event, { data }) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for ESLint template-names Rule\nDESCRIPTION: This JSON snippet shows the default configuration for the `meteor/template-names` ESLint rule within an ESLint configuration file. By default, it enforces the `camel-case` naming convention with a severity level of 2 (error).\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/template-names.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n    \"rules\": {\n        \"template-names\": [2, \"camel-case\"]\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Twitter OAuth Package Documentation Header\nDESCRIPTION: Markdown documentation header explaining the package's purpose and linking to the Meteor Guide for detailed documentation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/twitter-oauth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# twitter-oauth\n\nAn implementation of the Twitter OAuth flow. See the [Meteor Guide](https://guide.meteor.com/accounts.html) for more details.\n```\n\n----------------------------------------\n\nTITLE: Installing URL Package in Meteor Application\nDESCRIPTION: Command to add the URL package to an existing Meteor application using the meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/url.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add url\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor to version 2.16\nDESCRIPTION: Command to update Meteor from version 2.15 to 2.16. This command updates the Meteor release to the specified version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/2.16.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor update --release 2.16\n```\n\n----------------------------------------\n\nTITLE: Linking to Meteor Changelog in Markdown\nDESCRIPTION: This snippet provides a markdown link to the new location of the Meteor project's changelog file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/History.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[history.md](./docs/history.md)\n```\n\n----------------------------------------\n\nTITLE: Markdown Links to IdMap Source Code\nDESCRIPTION: Markdown links pointing to the released and development versions of the IdMap package source code in the Meteor repository.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/id-map/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/id-map) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/id-map)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.7.4\nDESCRIPTION: Documents version tag creation for pre-Cordova 9 compatibility\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.7.4, 2020-01-16\nWe didn't had a tag for 1.7.0 that was the last version before the updates for \nCordova 9 then we published 1.7.4 from this revision d5a7377c.\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Compression in Meteor DDP Server\nDESCRIPTION: Demonstrates how to configure websocket compression options for the Meteor DDP server using an environment variable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\n$SERVER_WEBSOCKET_COMPRESSION = JSON.stringify({ /* compression options */ })\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Styled Components\nDESCRIPTION: Implements server-side rendering with styled-components integration, including style tag injection into document head.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/server-render.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport { renderToString } from \"react-dom/server\";\nimport { ServerStyleSheet } from \"styled-components\"\nimport App from \"/imports/Server\";\n\nonPageLoad(sink => {\n  const sheet = new ServerStyleSheet();\n  const html = renderToString(sheet.collectStyles(\n    <App location={sink.request.url} />\n  ));\n\n  sink.renderIntoElementById(\"app\", html);\n  sink.appendToHead(sheet.getStyleTags());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for SockJS CORS in Meteor\nDESCRIPTION: Set an environment variable to disable SockJS CORS headers in Meteor applications. This should not be used if DDP clients from other origins need to connect to the DDP server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/2.14.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nDISABLE_SOCKJS_CORS=1\n```\n\n----------------------------------------\n\nTITLE: Using Force-SSL Package in Meteor\nDESCRIPTION: Shows how to use the force-ssl package to require a Meteor site to load over HTTPS.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_146\n\nLANGUAGE: JavaScript\nCODE:\n```\nmeteor add force-ssl\n```\n\n----------------------------------------\n\nTITLE: Using meteor admin Command for Cross-platform Publishing\nDESCRIPTION: Command to publish packages with binary dependencies for all architectures. This replaces the previous automatic publishing of builds for packages with binary NPM dependencies.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_100\n\nLANGUAGE: bash\nCODE:\n```\nmeteor admin get-machine\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: Repository links for both released and development versions of the package-version-parser module\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/package-version-parser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# package-version-parser\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/package-version-parser) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/package-version-parser)\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Testing\nDESCRIPTION: Command to install the npm dependencies required for running tests.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Environment Variables for M1 Macs\nDESCRIPTION: Sets up extended Android environment variables including SDK root and emulator paths for M1 Mac systems\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport ANDROID_SDK_ROOT=${ANDROID_HOME}\nexport PATH=${PATH}:${ANDROID_HOME}/emulator\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Package Definition in Markdown\nDESCRIPTION: Package header and description for the ecmascript-runtime-client Meteor package, including links to source code and build status.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript-runtime-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ecmascript-runtime-client\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/ecmascript-runtime-client) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/ecmascript-runtime-client)\n***\n\n[![Build Status](https://travis-ci.org/meteor/ecmascript-runtime.svg?branch=master)](https://travis-ci.org/meteor/ecmascript-runtime)\nPolyfills for new ECMAScript 2015 APIs like Map and Set\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules for Meteor Checkout\nDESCRIPTION: Command to update git submodules in the root directory of a Meteor checkout. This is required as of v1.4.2 since Blaze-related packages have been extracted to a separate repository.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_64\n\nLANGUAGE: sh\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Defining Template Events in Meteor\nDESCRIPTION: Shows the new syntax for declaring event maps in Meteor templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_142\n\nLANGUAGE: JavaScript\nCODE:\n```\nTemplate.foo.events({...})\n```\n\n----------------------------------------\n\nTITLE: Allowing All Framing in Meteor Browser Policy\nDESCRIPTION: Unsets the X-Frame-Options header, allowing the app to be framed by any webpage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.framing.allowAll()\n```\n\n----------------------------------------\n\nTITLE: Loading OAuth Encryption Key Directly\nDESCRIPTION: Direct method to load the OAuth encryption key when using OAuth packages without the Accounts system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/oauth-encryption.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nOAuthEncryption.loadKey('onsqJ+1e4iGFlV0nhZYobg==');\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with Old API Warning Flag\nDESCRIPTION: This command runs a Meteor application with warnings enabled for deprecated API usage. Setting the WARN_WHEN_USING_OLD_API environment variable to true will show console warnings whenever old API methods are used in the application code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.12-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWARN_WHEN_USING_OLD_API=true meteor\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v1.9.0\nDESCRIPTION: Details Swift code migration to version 5\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.9.0, 2020-03-04\nMigrates Swift code to be compatible with Swift version 5\n```\n\n----------------------------------------\n\nTITLE: Using babel-preset-meteor via Node API\nDESCRIPTION: JavaScript code example showing how to use the Meteor preset programmatically with the Babel Core API.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/babel-preset-meteor/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"babel-core\").transform(\"code\", {\n  presets: [\"meteor\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Reactive Async Autorun with Tracker.withComputation in Meteor 2.10\nDESCRIPTION: This snippet demonstrates how to use Tracker.withComputation in Meteor 2.10 to make async calls reactive within autoruns. It includes examples for both async function calls and MongoDB queries.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.10-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(async function example1(computation) {\n  let asyncData = await Tracker.withComputation(computation, () => asyncDataFunction());\n  let users = Meteor.users.find({}).fetch();\n});\n\nTracker.autorun(async function example2(computation) {\n  let users = await Tracker.withComputation(computation, () => Meteor.users.find({}).fetch());\n  let asyncData = await Tracker.withComputation(computation, () => asyncDataFunction());\n  \n});\n\n// using async mongo api\nTracker.autorun(async function example2(computation) {\n  let asyncData = await Tracker.withComputation(computation, () => asyncDataFunction());\n  let users = await Tracker.withComputation(computation, () => Meteor.users.find({}).fetchAsync());\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Static HTML with WebApp in Meteor\nDESCRIPTION: Demonstrates how to serve a static HTML file using WebApp handlers in Meteor. This example reads an 'index.html' file from the private folder, implements ETag caching, and serves the content with proper headers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/webapp.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* global WebApp Assets */\nimport crypto from 'crypto'\nimport express from 'express'\n\nconst router = express.Router()\n\nrouter.get('/', function (req, res, next) {\n    const buf = Assets.getText('index.html')\n\n    if (buf.length > 0) {\n        const eTag = crypto.createHash('md5').update(buf).digest('hex')\n\n        if (req.headers['if-none-match'] === eTag) {\n            res.writeHead(304, 'Not Modified')\n            return res.end()\n        }\n\n        res.writeHead(200, {\n            ETag: eTag,\n            'Content-Type': 'text/html'\n        })\n\n        return res.end(buf)\n    }\n\n    return res.end('<html><body>Index page not found!</body></html>')\n})\n\nWebApp.handlers.use(router)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Text\nDESCRIPTION: The standard Apache License 2.0 text that applies to multiple libraries used in the Meteor project. It outlines usage rights, conditions, and limitations for the licensed software.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Apache.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Displaying Meteor Developer OAuth Information in Markdown\nDESCRIPTION: This snippet provides a brief description of the meteor-developer-oauth package and directs users to the Meteor Guide for more detailed information on accounts and authentication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/meteor-developer-oauth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# meteor-developer-oauth\n\nAn implementation of the Meteor developer accounts OAuth flow. See the [Meteor Guide](https://guide.meteor.com/accounts.html) for more details.\n```\n\n----------------------------------------\n\nTITLE: Adding the Appcache Package to Meteor (Bash)\nDESCRIPTION: Uses the Meteor command-line interface to add the `appcache` package to the current project. This enables HTML5 Application Cache functionality, and the command is used here to facilitate testing the interaction between Meteor's autoupdate features and the browser's app cache.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ meteor add appcache\n```\n\n----------------------------------------\n\nTITLE: Running Meteor Project\nDESCRIPTION: Commands to navigate to project directory and start the Meteor application server.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd try-meteor\nmeteor\n```\n\n----------------------------------------\n\nTITLE: Testing CoffeeScript Compiler Package in Meteor\nDESCRIPTION: Command to run tests for the CoffeeScript package which also tests the coffeescript-compiler package. The tests are executed using Meteor's test-packages command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/coffeescript-compiler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./meteor test-packages packages/non-core/coffeescript\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor via CLI - Bash\nDESCRIPTION: This snippet provides the command required to update your project to Meteor v3.1.1 using the command line interface. It assumes the Meteor CLI is already installed and available in your environment. Running this command in your project's directory will fetch and apply the specified release update, ensuring all packages are upgraded as defined in the release notes. No parameters are required, and the output will indicate the upgrade progress or any encountered issues.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.1.1.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.1.1\n```\n\n----------------------------------------\n\nTITLE: Formatting Headers in Markdown for Meteor Guide\nDESCRIPTION: Demonstrates the correct way to format headers in Markdown for the Meteor Guide, using specific IDs for future reference.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n// bad\n## Using schemas with collections\n\n// good\n<h2 id=\"schemas-with-collections\">Using schemas with collections</h2>\n```\n\n----------------------------------------\n\nTITLE: Configuration for Manual Deployment Keys\nDESCRIPTION: JSON configuration file structure for manual deployment authentication containing API key and secret credentials.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"xxx\",\n  \"secret\": \"xxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Callback Hooks in Meteor\nDESCRIPTION: Demonstrates the use of forEach iterator for callback hooks in Meteor. This new method is more aligned with ES6 standards and replaces the deprecated each method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nforEach\n```\n\n----------------------------------------\n\nTITLE: Custom Containers in Markdown using VitePress\nDESCRIPTION: Illustrates the usage of various custom containers in VitePress markdown, including info, tip, warning, danger, and details blocks. Each container type is demonstrated with example content.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/markdown-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: info\nThis is an info box.\n:::\n\n::: tip\nThis is a tip.\n:::\n\n::: warning\nThis is a warning.\n:::\n\n::: danger\nThis is a dangerous warning.\n:::\n\n::: details\nThis is a details block.\n:::\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Template Instance Parameter Name ('tmplInst') with ESLint (JavaScript)\nDESCRIPTION: This snippet demonstrates configuring the `eventmap-params` rule via an ESLint comment to require 'tmplInst' as the name for the template instance parameter, overriding the default 'templateInstance'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"templateInstanceParamName\": \"tmplInst\"}]\n */\nTemplate.foo.events({\n  'submit form': function (event, tmplInst) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: MIT License Template\nDESCRIPTION: Standard MIT license text that applies to all listed external libraries. Defines terms for software use, modification, and distribution while disclaiming warranties.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/MIT.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js ESM 14 on Linux\nDESCRIPTION: This bash script downloads and installs the Meteor-provided Node.js ESM v14.21.4 on a Linux x64 system. It sets up environment variables, downloads the Node.js package, extracts it to the appropriate directory, and updates the system PATH.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-node-v14.21.4.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Set environment variables\nNODE_VERSION=\"14.21.4\"\nNODE_URL=\"https://static.meteor.com/dev-bundle-node-os/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\"\nDIR_NODE=\"/usr/local\"\n\n# Download and install Node.js using wget\nwget -qO- \"$NODE_URL\" | tar -xz -C \"$DIR_NODE\"/ && mv \"$DIR_NODE\"/node-v${NODE_VERSION}-linux-x64 \"$DIR_NODE\"/v$NODE_VERSION\n\n# Add node and npm to the PATH so the commands are available\nexport NODE_PATH=\"$DIR_NODE/v$NODE_VERSION/lib/node_modules\"\nexport PATH=\"$DIR_NODE/v$NODE_VERSION/bin:$PATH\"\n\n# Confirm the installation\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Files from Meteor AppCache by Name Prefix in JavaScript\nDESCRIPTION: Demonstrates using `Meteor.AppCache.config` with the `onlineOnly` option to exclude specific files (e.g., `/bigimage.jpg`, `/largedata.json`) from the Application Cache by treating their paths as prefixes. This prevents these files, and any other URLs starting with these strings (e.g., `/largedata.json.orig`), from being cached. This is useful for large files when moving them to a dedicated directory is not feasible.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/appcache.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nMeteor.AppCache.config({\n  onlineOnly: [\n    '/bigimage.jpg',\n    '/largedata.json'\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Mail URL Configuration\nDESCRIPTION: Allows smtps:// protocol in MAIL_URL configuration for secure SMTP connections\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\nsmtps://\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Examples (JavaScript)\nDESCRIPTION: Examples of regular expression patterns and escapes discussed in release notes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/\\8/  // Invalid escape\n/\\9/  // Invalid escape\n/%*/  // Invalid operator pattern\n```\n\n----------------------------------------\n\nTITLE: WTFPL License Text Version 2\nDESCRIPTION: The full text of the DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE (WTFPL) Version 2, which is used by several libraries in the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/DWTFYWT.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n```\n\n----------------------------------------\n\nTITLE: For...of Loop Example\nDESCRIPTION: Example of the for...of loop syntax for iterating over collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet sum = 0;\nfor (var x of [1, 2, 3]) {\n  sum += x;\n}\nx; // 6\n```\n\n----------------------------------------\n\nTITLE: Simple Reactive useTracker Implementation\nDESCRIPTION: A simplified example of useTracker that remains reactive without Tracker.withComputation. Direct calls to reactive functions like find().fetchAsync() maintain reactivity automatically.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst docs = useTracker(\"name\", () => LinksCollection.find().fetchAsync());\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME and PATH for Android Development - Shell\nDESCRIPTION: Sets the JAVA_HOME environment variable and prepends the Java bin directory to PATH for Unix-based systems. This is typically added to shell configuration files such as .bashrc or .zshrc to ensure the shell recognizes the Java installation during Cordova or Gradle builds.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/about/cordova.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: OAuth Async Methods - v2.9\nDESCRIPTION: Internal OAuth methods that have been converted to async functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nOAuth._attemptLogin()\nOAuth._loginMethod()\nOAuth._runLoginHandlers()\nOAuth.registerService() // now accepts async functions\n```\n\n----------------------------------------\n\nTITLE: Client-Side Mixin for asyncData Fetching on Navigation (JavaScript)\nDESCRIPTION: Defines a global Vue mixin to handle client-side data fetching for components with an `asyncData` method. It hooks into the `beforeMount` lifecycle hook to call the component's `asyncData` method when the component is about to be mounted during client-side navigation, ensuring data is fetched for routes navigated to after the initial server-rendered page load. Requires Vue, Vuex, Vue Router, and components implementing the `asyncData` pattern.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nVue.mixin({\n  beforeMount () {\n    const { asyncData } = this.$options\n    if (asyncData) {\n      // assign the fetch operation to a promise\n      // so that in components we can do `this.dataPromise.then(...)` to\n      // perform other tasks after data is ready\n      this.dataPromise = asyncData({\n        store: this.$store,\n        route: this.$route\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using export * as namespace Syntax Extension in JavaScript\nDESCRIPTION: Example of new export syntax extensions supported in Meteor 1.4.4. These extensions allow exporting all members from a module as a namespace or exporting the default export from a module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as namespace from \"./module\"\nexport def from \"./module\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Naming for Both Parameters in Meteor Event Map (JavaScript)\nDESCRIPTION: This example illustrates a violation where neither the first parameter ('foo' instead of 'event') nor the second parameter ('bar' instead of 'templateInstance') adheres to the standard naming convention enforced by the `eventmap-params` rule.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nTemplate.foo.events({\n  // neither 'foo' nor 'bar' are correct\n  'submit form': function (foo, bar) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring React Components with CSS Classes\nDESCRIPTION: Implementation of React component structure to apply CSS styles, including the addition of className attributes and proper HTML hierarchy for the todo app layout.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/5.styles.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n    <div className=\"app\">\n      <header>\n        <div className=\"app-bar\">\n          <div className=\"app-header\">\n            <h1>Welcome to Meteor!</h1>\n          </div>\n        </div>\n      </header>\n      <div className=\"main\">\n        <TaskForm />\n\n        <ul className=\"tasks\">\n          {tasks.map((task) => (\n            <Task\n              key={task._id}\n              task={task}\n              onCheckboxClick={handleToggleChecked}\n              onDeleteClick={handleDelete}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Signing Android APK using jarsigner (Shell)\nDESCRIPTION: Demonstrates how to sign an unsigned Android application package (`.apk`) using the `jarsigner` tool (part of the Java Development Kit). It requires navigating to the directory containing the unsigned APK and specifying signing/digest algorithms and the alias of the key previously generated with `keytool`. This step is mandatory before submitting to the Google Play Store.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\ncd ~/build-output-directory/android/\njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 release-unsigned.apk your-app-name\n```\n\n----------------------------------------\n\nTITLE: NPM Module Import\nDESCRIPTION: New support for requiring nested NPM module paths in package.js files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nNpm.require('foo/bar')\n```\n\n----------------------------------------\n\nTITLE: Fair Oaks Labs License for Meteor Project\nDESCRIPTION: This is the license text for Fair Oaks Labs, Inc. It outlines the terms for redistribution and use of the software in source and binary forms, including conditions for retaining copyright notices and disclaimers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Node.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  * Redistributions of source code must retain the above copyright notice,\n//    this list of conditions and the following disclaimer.\n//\n//  * Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n//    may be used to endorse or promote products derived from this software\n//    without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: EJSON Escape Format\nDESCRIPTION: The format for escaping values that might otherwise be interpreted as EJSON types.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"$escape\": THING}\n```\n\n----------------------------------------\n\nTITLE: Configuring Online-Only URLs in AppCache\nDESCRIPTION: Shows how to configure certain URL prefixes to be excluded from the AppCache, making them only available when online.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/appcache.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.AppCache.config({ onlineOnly: ['/online/'] });\n```\n\n----------------------------------------\n\nTITLE: Basic Acorn Parser Usage\nDESCRIPTION: Example of using Acorn to parse a simple JavaScript expression.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet acorn = require(\"acorn\");\nconsole.log(acorn.parse(\"1 + 1\"));\n```\n\n----------------------------------------\n\nTITLE: Marked License for Meteor Project\nDESCRIPTION: This is the MIT license for Marked, a Markdown parser used in the Meteor project. It outlines the permissions for use, modification, and distribution of the software, as well as the disclaimer of warranty.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Node.txt#2025-04-22_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) 2011-2012, Christopher Jeffrey (https://github.com/chjj/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Example Meteor Version Output in Bash\nDESCRIPTION: This snippet shows the expected output when checking the Meteor version. It displays the version number, which is crucial for determining compatibility with async features.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/migrating-to-async-in-v2/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeteor --version\nMeteor <version>\n```\n\n----------------------------------------\n\nTITLE: Configuring Galaxy Environment for TLS Certificate Verification Bypass\nDESCRIPTION: JSON configuration for Galaxy to disable TLS certificate verification. This workaround allows server requests to external resources using Let's Encrypt certificates when running an old Meteor version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/expired-certificate.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"galaxy.meteor.com\": {\n    \"env\": {\n      \"NODE_TLS_REJECT_UNAUTHORIZED\": \"0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading OAuth Encryption Key Without Accounts in Meteor\nDESCRIPTION: Demonstrates how to load the OAuth encryption key directly using OAuthEncryption.loadKey when not using Meteor accounts packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/oauth-encryption.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nOAuthEncryption.loadKey('onsqJ+1e4iGFlV0nhZYobg==');\n```\n\n----------------------------------------\n\nTITLE: GYP License for Meteor Project\nDESCRIPTION: This is the license for GYP (Generate Your Projects), a meta-build system used in the Meteor project. It outlines the terms for redistribution and use, including conditions for retaining copyright notices and disclaimers.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Node.txt#2025-04-22_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) 2009 Google Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Cloning Acorn Source Code\nDESCRIPTION: This shell command clones the Acorn JavaScript parser repository from GitHub. It requires git to be installed on the system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/packages/modules-test-package/node_modules/acorn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ternjs/acorn.git\n```\n\n----------------------------------------\n\nTITLE: Referencing Browser Policy Common Package in Meteor\nDESCRIPTION: This snippet shows how to reference the source code for both the released and development versions of the browser-policy-common package in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy-common/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/browser-policy-common) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/browser-policy-common)\n```\n\n----------------------------------------\n\nTITLE: Adding Named Default Export with ES Modules in JavaScript\nDESCRIPTION: Example showing how to correctly re-export another module's exports including the default export. When using `export *`, default exports are skipped, so you need to explicitly re-export the default using a separate statement.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from \"./wrapped/module\";\nexport { default } \"./wrapped/module\";\n```\n\n----------------------------------------\n\nTITLE: Using babel-preset-meteor via CLI\nDESCRIPTION: Example command for using the Meteor preset directly with the Babel CLI to transform JavaScript files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/babel-preset-meteor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ babel script.js --presets meteor \n```\n\n----------------------------------------\n\nTITLE: Package Reference Path in Meteor\nDESCRIPTION: Package reference path showing the location of es5-shim in Meteor's default packages configuration.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/es5-shim/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntools/static-assets/skel/.meteor/packages#L11\n```\n\n----------------------------------------\n\nTITLE: Attaching Comments using Escodegen\nDESCRIPTION: This JavaScript snippet demonstrates how to attach comments to AST nodes for code generation using Escodegen and comment/tokens collection from the Acorn parser. Dependencies include acorn and escodegen libraries.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/packages/modules-test-package/node_modules/acorn/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar comments = [], tokens = [];\n\nvar ast = acorn.parse('var x = 42; // answer', {\n\t// collect ranges for each node\n\tranges: true,\n\t// collect comments in Esprima's format\n\tonComment: comments,\n\t// collect token ranges\n\tonToken: tokens\n});\n\n// attach comments using collected information\nescodegen.attachComments(ast, comments, tokens);\n\n// generate code\nconsole.log(escodegen.generate(ast, {comment: true}));\n// > 'var x = 42;    // answer'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Missing build Method in Server Module | meteor-rpc | TypeScript\nDESCRIPTION: Demonstrates a meteor-rpc server module that forgets to call build after method creation. Without build, type inference and correct exports are not guaranteed, leading to incomplete or incorrect client types. This is an antipattern: always finalize modules with build.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/meteor-rpc.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå it is missing the build method\nimport { createModule } from \"meteor-rpc\";\nimport { z } from \"zod\";\nconst server = createModule().addMethod(\n  \"bar\",\n  z.string(),\n  (arg) => \"bar\" as const\n);\n\nexport type Server = typeof server;\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Methods to Use callAsync in 3.x\nDESCRIPTION: Illustrates the change from using 'call' to 'callAsync' in Meteor methods for better async/await support. This affects both method definitions and method calls.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor'\n\nMeteor.methods({\n  async getAllData() {\n    return await MyCollection.find().fetch(); //  [!code error]\n  },\n  async otherMethod() {\n    return await MyCollection.find().fetch(); //  [!code error]\n  }\n});\n\n\nMeteor.call('getAllData') // [!code error]\nMeteor.call('otherMethod') // [!code error]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meteor } from 'meteor/meteor'\n\nMeteor.methods({\n  async getAllData() {\n    return await MyCollection.find().fetchAsync(); //  [!code highlight]\n  },\n  async otherMethod() {\n    return await MyCollection.find().fetchAsync(); //  [!code highlight]\n  }\n});\n\nawait Meteor.callAsync('getAllData') // [!code highlight]\nawait Meteor.callAsync('otherMethod') // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Removing Packages from a Meteor Project using Shell\nDESCRIPTION: Removes one or more specified packages that were previously added to the current Meteor project. Use 'meteor list' to see currently added packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/cli/help.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmeteor remove <package> [package..]\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests\nDESCRIPTION: Commands for running Meteor package tests using both browser and console methods.\nSOURCE: https://github.com/meteor/meteor/blob/devel/DEVELOPMENT.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ ./meteor test-packages\n\n$ PUPPETEER_DOWNLOAD_PATH=~/.npm/chromium ./packages/test-in-console/run.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page for Meteor Documentation in YAML\nDESCRIPTION: This YAML configuration sets up the home page for Meteor documentation using VitePress. It defines the layout, hero section with text, tagline, image, and action buttons, as well as a list of key features of Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  text: \"Meteor Docs\"\n  tagline: \"Documentation, resources, and API references to help you build and deploy with Meteor.\"\n  image:\n    src: /logo.png\n    alt: Meteor\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /about/what-is\n    - theme: alt\n      text: Install\n      link: /about/install\n\n# TODO: Update with Docs features and links as they are added\nfeatures:\n  - title: Zero Config\n    icon: üõ†Ô∏è\n    details: Use popular frameworks and tools right out-of-the-box. Focus on building features instead of configuring tools.\n\n  - title: Front-end Agnostic\n    icon: üé®\n    details: Choose your preferred front-end framework like React, VueJS, Blaze, Svelte, or Solid.\n\n  - title: RPCs API\n    icon: üì°\n    details: Easily connect back-end and front-end with Methods. Our Remote Procedure Call (RPC) system\n\n  - title: Easy to Deploy\n    icon: üöÄ\n    details: Deploy using one command from the CLI or directly from your Git repository by using Meteor Cloud.\n\n  - title: Real-time Features\n    icon: ‚ö°\n    details: Develop apps with real-time features like chats and collaborative apps with ease by using publications and subscriptions.\n\n  - title: TypeScript Support\n    icon: üìù\n    details: Experience the power of TypeScript inference to boost productivity for your full-stack application.\n\n  - title: Built-in Accounts\n    icon: üë§\n    details: Login and Accounts package ready to use with your app. Never rebuild an authentication system again.\n\n  - title: Pioneering and Reliable\n    icon: üèÜ\n    details: Developed for over a decade and trusted by industry giants. Alows you to build and scale efficiently.\n```\n\n----------------------------------------\n\nTITLE: Modifying URL Configuration for Local Development\nDESCRIPTION: Configuration change in _config.yml to ensure links remain within localhost during local development instead of redirecting to the production docs site.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- url: http://docs.meteor.com/\n+ url: http://localhost:4000/\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Links for Boilerplate Generator Source Code\nDESCRIPTION: This snippet presents Markdown-formatted links to the source code repositories for the boilerplate-generator package, including both the released and development versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/boilerplate-generator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# boilerplate-generator\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/boilerplate-generator) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/boilerplate-generator)\n***\n\nThis is an internal Meteor package.\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout Scale Factor Environment Variable (Bash)\nDESCRIPTION: Sets the `TIMEOUT_SCALE_FACTOR` environment variable, typically used to increase timeouts for Meteor self-tests on slower systems. This example sets the multiplier to 3, increasing default timeouts threefold. This command is specific to shells like Bash or similar command prompts.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tool-testing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# set the multiplier for time-outs\nset TIMEOUT_SCALE_FACTOR=3\n```\n\n----------------------------------------\n\nTITLE: Meteor Roadmap Content Structure in Markdown\nDESCRIPTION: Structured markdown document detailing Meteor's roadmap including planned features for version 3.0, future releases, candidate items, educational initiatives and completed items.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/roadmap.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Roadmap\ndescription: Describes the high-level features and actions for the Meteor project in the near-to-medium term future.\n---\n\n## Introduction\n\n**Quick update moving items to Finished: June 1, 2023**\n\n**Last new items added: September 14, 2022.**\n\nThis document describes the high-level features and actions for the Meteor project in the near-to-medium term future.\nThe description of many items include sentences and ideas from Meteor community members.\n\nContributors are encouraged to focus their efforts on work that aligns with the roadmap then we can work together in these areas.\n\n\n> As with any roadmap, this is a living document that will evolve as priorities and dependencies shift.\n\n> If you have new feature requests or ideas you should open a new [discussion](https://github.com/meteor/meteor/discussions/new).\n```\n\n----------------------------------------\n\nTITLE: Setting Cordova WebAppStartupTimeout Preference in JavaScript\nDESCRIPTION: Shows how to configure the timeout for Cordova app startup callbacks using App.setPreference in mobile-config.js.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.setPreference(\"WebAppStartupTimeout\", \"10000\");\n```\n\n----------------------------------------\n\nTITLE: Atmosphere Package File Structure\nDESCRIPTION: Shows the default file structure created when initializing a new Atmosphere package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-atmosphere-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nmy-package\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ package.js\n‚îú‚îÄ‚îÄ my-package-tests.js\n‚îî‚îÄ‚îÄ my-package.js\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Helper in Meteor HTML Template\nDESCRIPTION: Example of using the markdown helper in a Meteor HTML template to render Markdown content as HTML.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/markdown.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- myTemplate.html -->\n{{#markdown}}I am using __markdown__.{{/markdown}}\n```\n\n----------------------------------------\n\nTITLE: Allowing Same Origin Content in Browser Policy (JavaScript)\nDESCRIPTION: Allows specific types of content to be loaded from the same origin as the app.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/browser-policy.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.allow<ContentType>SameOrigin()\n```\n\n----------------------------------------\n\nTITLE: Package Version Configuration for Non-Breaking Changes\nDESCRIPTION: Configuration example for packages that don't use Meteor packages with breaking changes, showing version compatibility setup.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/upgrading-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.versionsFrom(['1.10', '2.3', '3.0']);\n  //                               ^^^^^^^ for testing your package with meteor 3.0\n\n  api.versionsFrom(['1.10', '2.3', '3.0']);\n  //                     ^^^^^^^ for meteor 3.0\n});\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests on Emulator\nDESCRIPTION: Command to run the tests on the iOS emulator.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncordova emulate ios\n```\n\n----------------------------------------\n\nTITLE: Piping Commands to Meteor Shell\nDESCRIPTION: Example showing how to pipe multiple statements to the Meteor shell CLI, demonstrating the new ability to handle statements rather than just expressions\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\necho 'import pkg from \"babel-runtime/package.json\";\npkg.version' |\nmeteor shell\n```\n\n----------------------------------------\n\nTITLE: Computed Property Names\nDESCRIPTION: Example of dynamically computed object property names\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar counter = 0;\nfunction getKeyName() {\n  return 'key' + counter++;\n}\n\nvar obj = {\n  [getKeyName()]: 'zero',\n  [getKeyName()]: 'one',\n};\n\nobj.key0; // 'zero'\nobj.key1; // 'one'\n```\n\n----------------------------------------\n\nTITLE: Configuring Package for Top Level Await Support in Meteor\nDESCRIPTION: Demonstrates how to configure a Meteor package to ensure it only runs in versions of Meteor that support top level await. This is done by using the 'isobuild:top-level-await' package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/top-level-await.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse(function (api) {\n  // Do not allow this package to be used in pre-Meteor 3 apps.\n  api.use(\"isobuild:top-level-await@3.0.0\");\n});\n```\n\n----------------------------------------\n\nTITLE: New Implementation of BabelCompiler#processFilesForTarget with Lazy Compilation\nDESCRIPTION: The updated implementation that supports lazy compilation, allowing expensive compilation work to be delayed until the module is known to be included in the bundle, improving build performance.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nprocessFilesForTarget(inputFiles) {\n  inputFiles.forEach(inputFile => {\n    if (inputFile.supportsLazyCompilation) {\n      inputFile.addJavaScript({\n        path: inputFile.getPathInPackage(),\n        hash: inputFile.getSourceHash(),\n      }, function () {\n        return this.processOneFileForTarget(inputFile);\n      });\n    } else {\n      var toBeAdded = this.processOneFileForTarget(inputFile);\n      if (toBeAdded) {\n        inputFile.addJavaScript(toBeAdded);\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Acorn from Source\nDESCRIPTION: Commands to clone and install Acorn from its GitHub repository.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/acornjs/acorn.git\ncd acorn\nnpm install\n```\n\n----------------------------------------\n\nTITLE: GNU License Terms for Object Code Distribution\nDESCRIPTION: Outlines various methods for distributing object code including physical products and network access. Details requirements for providing corresponding source code and installation information.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/MongoDB.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nb) Convey the object code in, or embodied in, a physical product\nd) Convey the object code by offering access from a designated place\ne) Convey the object code using peer-to-peer transmission\n```\n\n----------------------------------------\n\nTITLE: Configuring checkEquivalents for audit-argument-checks Rule in JSON\nDESCRIPTION: This JSON snippet shows an example configuration for the `meteor/audit-argument-checks` ESLint rule within an `.eslintrc.json` file. It demonstrates how to use the `checkEquivalents` option to specify custom function names (e.g., `checkId`, `checkName`) that the rule should recognize as performing argument checks equivalent to Meteor's `check` function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/audit-argument-checks.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n  \"meteor/audit-argument-checks\": [\n    \"error\",\n    {\n      \"checkEquivalents\": [\n        \"checkId\",\n        \"checkName\"\n      ]\n    }\n  ]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Non-Reactive Value in JavaScript\nDESCRIPTION: A simple example showing a non-reactive variable with getter and setter functions. This represents the starting point before adding reactivity with Tracker.Dependency.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar favoriteFood = \"apples\";\n\nvar getFavoriteFood = function () {\n  return favoriteFood;\n};\n\nvar setFavoriteFood = function (newValue) {\n  favoriteFood = newValue;\n};\n```\n\n----------------------------------------\n\nTITLE: Package Version Override Example in Meteor 1.8\nDESCRIPTION: Demonstrates the new syntax for overriding package version constraints in .meteor/packages file using the exclamation mark (!) suffix to weaken version restrictions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.8-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncoffeescript@2.2.1_1! # note the !\n```\n\n----------------------------------------\n\nTITLE: Importing Fetch Classes\nDESCRIPTION: Example showing how to import the main fetch classes from the Meteor fetch package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/fetch.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetch, Headers, Request, Response } from \"meteor/fetch\";\n```\n\n----------------------------------------\n\nTITLE: Async Tracker.autorun with Reactive Preservation in JavaScript\nDESCRIPTION: This snippet illustrates how to use Tracker.autorun with an async callback function. It demonstrates maintaining reactivity for variables inside the async function using Tracker.withComputation, showing both reactive and non-reactive parts of the code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(async function example1(computation) {\n  // Code before the first await will stay reactive.\n  reactiveVar1.get(); // This will trigger a rerun.\n\n  let links = await LinksCollection.find({}).fetchAsync(); // First async call will stay reactive.\n\n  // Code after the first await looses Tracker.currentComputation: no reactivity.\n  reactiveVar2.get(); // This won't trigger a rerun.\n\n  // You can bring back reactivity with the Tracker.withCompuation wrapper:\n  let users = await Tracker.withComputation(computation, () => Meteor.users.find({}).fetchAsync());\n\n  // Code below will again not be reactive, so you will need another Tracker.withComputation.\n  const value = Tracker.withComputation(computation, () => reactiveVar3.get()); // This will trigger a rerun.\n});\n```\n\n----------------------------------------\n\nTITLE: Setting METEOR_WATCH_PRIORITIZE_CHANGED Environment Variable in Shell\nDESCRIPTION: Demonstrates how to disable the new file watching behavior by setting the METEOR_WATCH_PRIORITIZE_CHANGED environment variable to 'false'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_61\n\nLANGUAGE: Shell\nCODE:\n```\nMETEOR_WATCH_PRIORITIZE_CHANGED=\"false\"\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Header Comment Block\nDESCRIPTION: Standard copyright and license header block used in OpenSSL source files detailing terms of use and redistribution requirements.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/BSD.txt#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Template Replacement Implementation\nDESCRIPTION: Advanced example of a custom replacement function file that implements case conversion utilities and template variable replacement for both filenames and contents.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst toPascalCase = (str) => {\n  if(!str.includes('-')) return str.charAt(0).toUpperCase() + str.slice(1);\n  else return str.split('-').map(toPascalCase).join('');\n}\nconst toCamelCase = (str) => {\n  if(!str.includes('-')) return str.charAt(0).toLowerCase() + str.slice(1);\n  else return str.split('-').map(toPascalCase).join('');\n}\n\nconst transformName = (scaffoldName, str) => {\n    return str.replace(/\\$\\$name\\$\\$|\\$\\$PascalName\\$\\$|\\$\\$camelName\\$\\$/g, function (substring, args) {\n      if (substring === '$$name$$') return scaffoldName;\n      if (substring === '$$PascalName$$') return toPascalCase(scaffoldName);\n      if (substring === '$$camelName$$') return toCamelCase(scaffoldName);\n    })\n\n}\n\nexport function transformFilename(scaffoldName, filename) {\n  return transformName(scaffoldName, filename);\n}\n\nexport function transformContents(scaffoldName, contents, fileName) {\n  return transformName(scaffoldName, contents);\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Meteor Method Call (JavaScript - Server Side)\nDESCRIPTION: Shows how to execute a Meteor method synchronously on the server. The call blocks until completion, returning the result or throwing an error if one occurs. This pattern is only available on the server due to fibers. Requires that the method is defined and the arguments match its expected signature. Inputs: method name and arguments; outputs: returned result value or throws exception.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/meteor.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Synchronous call\nconst result = Meteor.call(\"foo\", 1, 2);\n```\n\n----------------------------------------\n\nTITLE: GNU License Additional Terms Section\nDESCRIPTION: Defines additional permissions and restrictions that can supplement the main license terms, including warranty disclaimers, legal notices, and trademark usage.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/MongoDB.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\na) Disclaiming warranty or limiting liability\nb) Requiring preservation of legal notices\nc) Prohibiting misrepresentation\nd) Limiting publicity usage\ne) Declining trademark rights\nf) Requiring indemnification\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Event Parameter Name ('evt') with ESLint (JavaScript)\nDESCRIPTION: This example shows how to configure the `eventmap-params` rule using an ESLint comment to accept 'evt' as the valid name for the event parameter, instead of the default 'event'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n/*\n eslint meteor/eventmap-params: [2, {\"eventParamName\": \"evt\"}]\n */\nTemplate.foo.events({\n  'submit form': function (evt) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Angular from npm in Meteor 1.3\nDESCRIPTION: Command for installing Angular and angular-meteor packages directly from npm in a Meteor 1.3 application.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.3-migration.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save angular angular-meteor\n```\n\n----------------------------------------\n\nTITLE: Validating Method Arguments in Meteor\nDESCRIPTION: Example of using check() to validate method arguments when no specific validation is needed. This satisfies the audit-argument-checks requirement by accepting any argument type.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/audit-argument-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncheck(arguments, [Match.Any])\n```\n\n----------------------------------------\n\nTITLE: MongoDB Count Method Change - v2.8.2\nDESCRIPTION: Update to MongoDB count implementation to not create cursors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmongo@1.16.2\n- Make count NOT create a cursor\n```\n\n----------------------------------------\n\nTITLE: Verifying Client Reload Status in Console (JavaScript)\nDESCRIPTION: Assigns a boolean value to a global variable `a` within the browser's JavaScript console. This serves as a simple marker to verify whether the client page has undergone a full reload; if the variable `a` is still defined after a potential reload trigger (like a server-only code change), it indicates the client did not reload.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\na = true\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependencies with install-peerdeps\nDESCRIPTION: Commands to install peer dependencies automatically using the install-peerdeps tool.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-config-meteor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ # Install `install-peerdeps` within the current Meteor tool version.\n$ meteor npm install --global install-peerdeps\n$ # Run the newly installed `install-peerdeps` to install this package and its dependencies.\n$ meteor npx install-peerdeps --dev @meteorjs/eslint-config-meteor\n```\n\n----------------------------------------\n\nTITLE: Adding Fetch Package to Meteor Package Definition\nDESCRIPTION: Code to include the fetch package as a dependency in a Meteor package's package.js file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.use(\"fetch\");\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Android APK using zipalign (Shell)\nDESCRIPTION: Shows the command to run `zipalign`, a tool from the Android SDK Build Tools, on a signed Android APK. This process optimizes the `.apk` file by ensuring uncompressed data starts on specific byte alignments, reducing RAM consumption. It requires the path to the `zipalign` executable (often found using `$ANDROID_HOME`) and specifies the alignment (4 bytes). The output is the final, optimized APK ready for distribution.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\n$ANDROID_HOME/build-tools/<build-tools-version>/zipalign 4 release-unsigned.apk <your-app-name>.apk\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Match.test\nDESCRIPTION: Illustrates using 'Match.test' to verify if a value conforms to a specific structure or type pattern in a Meteor application. It accepts diverse patterns including strings, arrays, and custom conditions, providing more flexible type validations. Requires 'meteor/check'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/check.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Match } from \"meteor/check\";\n\n// Will return true for `{ foo: 1, bar: 'hello' }` or similar.\nMatch.test(value, { foo: Match.Integer, bar: String });\n\n// Will return true if `value` is a string.\nMatch.test(value, String);\n\n// Will return true if `value` is a string or an array of numbers.\nMatch.test(value, Match.OneOf(String, [Number]));\n```\n\n----------------------------------------\n\nTITLE: Generating 2FA Activation QR Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to generate a QR code for 2FA activation using the Accounts.generate2faActivationQrCode method. It includes error handling and displays the QR code as a base64-encoded image.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/accounts-2fa.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from \"buffer\";\nimport { Accounts } from 'meteor/accounts-base';\n\n--\n  \nconst [qrCode, setQrCode] = useState(null);\n\n--\n  \n<button\n  onClick={() => {\n    Accounts.generate2faActivationQrCode(\"My app name\", (err, result) => {\n      if (err) {console.error(\"...\", err);return;}\n      const { svg, secret, uri } = result;\n      /*\n        the svg can be converted to base64, then be used like: \n         <img \n            width=\"200\"\n            src={`data:image/svg+xml;base64,${qrCode}`}\n         />\n      */\n      setQrCode(Buffer.from(svg).toString('base64'));\n    })\n  }}\n>\n  Generate a new code\n</button>\n```\n\n----------------------------------------\n\nTITLE: Adding Cordova plugin from Git repository in Meteor\nDESCRIPTION: Command to add a Cordova plugin directly from a Git repository in a Meteor project. This allows using unreleased plugin versions or custom forks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nmeteor add cordova:com.phonegap.plugins.facebookconnect@https://github.com/Wizcorp/phonegap-facebook-plugin.git#5dbb1583168558b4447a13235283803151cb04ec\n```\n\n----------------------------------------\n\nTITLE: Updating to Meteor 1.8.1 Beta\nDESCRIPTION: Command to update Meteor to the latest 1.8.1 beta release. The '-beta.n' should be replaced with the latest beta version number from the releases page.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 1.8.1-beta.n\n```\n\n----------------------------------------\n\nTITLE: Adding Environments for ESLint - JS\nDESCRIPTION: Configuration example adding environments for ESLint. Environments configured include ECMAScript 6, browser, node, and Meteor environment. Assumes initial ESLint setup is completed. Modifies a JSON configuration file for ESLint.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/setup.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  /* ... */\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\"\n  },\n  \"env\": {\n    \"es6\": true,\n    \"browser\": true,\n    \"node\": true,\n    \"meteor\": true\n  },\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Local Development Package using Bash\nDESCRIPTION: These commands use `npm link` to make the locally developed version of `eslint-plugin-meteor` available globally and then link it into another project. This allows testing new rules or changes on real projects without publishing.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/guides/development.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Make this package available globally\n# by running this command from the root of this package\n$ npm link\n\n# In a project using this plugin, install the linked version\n$ npm link eslint-plugin-meteor\n```\n\n----------------------------------------\n\nTITLE: Running Specific Meteor Tests\nDESCRIPTION: Command to run specific tests by matching a regular expression pattern against test names.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./meteor self-test \"login.*\"\n```\n\n----------------------------------------\n\nTITLE: Preserving Elements in Spark Templates\nDESCRIPTION: New preserve helper for explicitly controlling which nodes are preserved during re-rendering in Spark templates.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_140\n\nLANGUAGE: HTML\nCODE:\n```\n{{preserve}}\n```\n\n----------------------------------------\n\nTITLE: Warning Patterns Using Session in JavaScript (Meteor)\nDESCRIPTION: The code snippets demonstrate patterns that trigger warnings under this rule, preventing the use of the global Session object. Dependencies include the Meteors framework and reactive-dict package as a preferred alternative.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/no-session.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSession.set('foo')\nSession.get('foo')\nSession.all()\nSession.clear()\n```\n\n----------------------------------------\n\nTITLE: Deploying Meteor with TLS Certificate Verification Disabled\nDESCRIPTION: Workaround for deploying Meteor versions older than v1.9 by disabling TLS certificate verification. This is a temporary solution and not recommended for long-term use due to security risks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/expired-certificate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNODE_TLS_REJECT_UNAUTHORIZED=0 meteor deploy\n```\n\n----------------------------------------\n\nTITLE: Asserting Default Input Value in React Component Test (JavaScript)\nDESCRIPTION: This snippet demonstrates using Chai assertions within a test to verify that a text input element, located within a React component rendered using Enzyme's `shallow` function (implied by context), has the correct `defaultValue` property set to 'testing'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n    chai.assert.equal(item.find('input[type=\"text\"]').prop('defaultValue'), 'testing');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tracker.withComputation for Maintained Reactivity in Async Calls\nDESCRIPTION: Example of using useTracker with Tracker.withComputation to ensure that reactivity is maintained when making async calls. This pattern ensures the computation keeps running for reactive data changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// needs Tracker.withComputation because otherwise it would be only called once, and the computation would never run again\nconst docs = useTracker(\"name\", async (c) => {\n  const placeholders = await fetch(\n    \"https://jsonplaceholder.typicode.com/todos\"\n  ).then((x) => x.json());\n  console.log(placeholders);\n  return await Tracker.withComputation(c, () =>\n    LinksCollection.find().fetchAsync()\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Simple Custom Error Message for Rate Limiting Rule in Meteor\nDESCRIPTION: A simpler example of setting a custom error message for a rate limiting rule using a static string instead of a function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/methods.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ruleId = DDPRateLimiter.addRule(setupGoogleAuthenticatorRule, 1, 60000);\nDDPRateLimiter.setErrorMessageOnRule(ruleId, 'Example as a single string error message');\n```\n\n----------------------------------------\n\nTITLE: Getting Meteor Release Info - Meteor CLI - Bash\nDESCRIPTION: Commands to show details on meteor releases or packages, including metadata, maintainers, homepage, and git url. With '--show-all', lists all intermediate releases. Requires Meteor CLI. Parameters: package or release name, optional '--show-all' flag. Outputs extended info to terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nmeteor show METEOR\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeteor show --show-all METEOR\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collection Update Command\nDESCRIPTION: Database command to clear all login tokens from user sessions for security purposes after OAuth implementation fixes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_99\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.users.update({}, { $set: { 'services.resume.loginTokens': [] } }, { multi: true });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Package Statistics via HTTP GET\nDESCRIPTION: Makes an HTTP GET request to obtain daily package usage statistics for a specific date. The endpoint returns newline-separated JSON objects containing usage data for each package, showing direct and total additions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/package-server-api.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   { \"name\": \"tracker\", \"version\": \"1.0.1\", \"directAdds\": 250, \"totalAdds\": 1000 }\n   { \"name\": \"iron:router\", \"version\": \"1.0.0\", \"directAdds\": 200, \"totalAdds\": 800 }\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project via CLI (Bash)\nDESCRIPTION: This Bash command uses the Meteor Command Line Interface (CLI) tool to update the current project to the specific release version 3.0.1. Executing this command within a Meteor project directory instructs the tool to fetch and apply the updates associated with release 3.0.1. Requires the Meteor CLI to be installed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.0.1.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.1\n```\n\n----------------------------------------\n\nTITLE: Migrating Unencrypted Twitter Tokens\nDESCRIPTION: Script to find and encrypt existing unencrypted Twitter access tokens in user documents. Handles accessToken, accessTokenSecret, and refreshToken fields.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/oauth-encryption.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cursor = Meteor.users.find({\n  $and: [\n    { 'services.twitter.accessToken': { $exists: true } },\n    { 'services.twitter.accessToken.algorithm': { $exists: false } }\n  ]\n});\n\ncursor.forEach((userDoc) => {\n  const set = {};\n\n  ['accessToken', 'accessTokenSecret', 'refreshToken'].forEach((field) => {\n    const plaintext = userDoc.services.twitter[field];\n\n    if (!_.isString(plaintext)) {\n      return;\n    }\n\n    set[`services.twitter.${field}`] = OAuthEncryption.seal(\n      plaintext,\n      userDoc._id\n    );\n  });\n\n  Meteor.users.update(userDoc._id, { $set: set });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Meteor Project to Release 3.1.2\nDESCRIPTION: This command updates a Meteor project to the specified release version 3.1.2. It is necessary to use this command to apply the latest changes and improvements introduced in the update, including any updated packages and enhancements. Before running the command, ensure that the Meteor CLI is installed and configured.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.1.2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.1.2\n```\n\n----------------------------------------\n\nTITLE: Resetting Database with Client-Side Method Call\nDESCRIPTION: Demonstrates how to reset the database from client-side tests using xolvio:cleaner package's resetDatabase method.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my module', function (done) {\n  beforeEach(function (done) {\n    // We need to wait until the method call is done before moving on, so we\n    // use Mocha's async mechanism (calling a done callback)\n    Meteor.call('xolvio:cleaner/resetDatabase', done);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Meteor's Bundled npm\nDESCRIPTION: Demonstrates how to use the npm version bundled with Meteor without needing to install it separately. This snippet shows that Meteor includes npm, allowing developers to run npm commands directly through Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/atmosphere-vs-npm.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Meteor comes with npm bundled so that you can type `meteor npm` without worrying about installing it yourself. If you like, you can also use a globally installed npm to manage your packages.\n```\n\n----------------------------------------\n\nTITLE: Updating Project to Meteor v3.0.2\nDESCRIPTION: Command to update a project to Meteor version 3.0.2, which is required to gain the latest features and fixes of this release. This command should be run in the terminal within the root directory of a Meteor project. This update ensures compatibility with the packages listed in the release notes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.0.2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor update --release 3.0.2\n```\n\n----------------------------------------\n\nTITLE: Defining a 'Smart' Blaze Template Name in HTML\nDESCRIPTION: Illustrates the naming convention for a 'smart' Blaze template, which typically handles data loading or routing. The name (`Lists_show_page`) follows the standard underscore convention but appends `_page` to signify its role as a page-level component.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/code-style.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<template name=\"Lists_show_page\">\n  ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining sample tasks in the App component\nDESCRIPTION: Creates an array of sample tasks to be used for initial rendering. Each task has an id and text property.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/1.creating-the-app.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nconst tasks = [\n  {_id: 1, text: 'First Task'},\n  {_id: 2, text: 'Second Task'},\n  {_id: 3, text: 'Third Task'},\n];\n\nexport const App = () => ...\n```\n\n----------------------------------------\n\nTITLE: Disallowing Inline Styles in Meteor Browser Policy\nDESCRIPTION: Disallows inline CSS.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/browser-policy/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBrowserPolicy.content.disallowInlineStyles()\n```\n\n----------------------------------------\n\nTITLE: Setting WKWebViewOnly Preference in Cordova Configuration\nDESCRIPTION: This code sets the WKWebViewOnly preference to false in the mobile-config.js file. It's used to maintain compatibility with UIWebView or plugins that depend on UIWebView APIs, though it's not recommended due to potential App Store rejection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.10-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nApp.setPreference('WKWebViewOnly', false);\n```\n\n----------------------------------------\n\nTITLE: Using Promise.then() as an Alternative to await\nDESCRIPTION: Shows how to use the Promise.then() method as an alternative to await when handling Promise resolutions. This approach doesn't pause execution flow, allowing code to continue while the Promise resolves in the background.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst delay = () => {\n  console.log('Waiting...');\n  return new Promise(resolve => setTimeout(resolve, 1000));\n};\n\ndelay().then(() => console.log('Done waiting'));\nconsole.log('End of the function'); // this will be logged before 'Done waiting'\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Version Compatibility for Meteor 3.0\nDESCRIPTION: Shows how to configure package.js to support multiple Meteor versions including 3.0. This configuration allows testing and compatibility with various Meteor versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/breaking-changes/upgrading-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.onUse((api) => {\n  api.versionsFrom(['1.10', '2.3', '3.0']);\n  //                               ^^^^^^^ for testing your package with meteor 3.0\n\n  api.versionsFrom(['1.10', '2.3', '3.0']);\n  //                              ^^^^^^^ for meteor 3.0\n});\n```\n\n----------------------------------------\n\nTITLE: Using async/await with Meteor Methods\nDESCRIPTION: Demonstrates how to call Meteor methods asynchronously using await syntax. The callMethod function handles both successful responses and errors when interacting with Meteor's method system.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst callMethod = async () => {\n  try {\n    const result = await Meteor.callAsync('myMethod', 'arg1', 'arg2');\n    console.log('Method result:', result);\n  } catch (error) {\n    console.error('Method error:', error);\n  }\n};\n\nawait callMethod();\n```\n\n----------------------------------------\n\nTITLE: MongoDB Query Example with $pull Limitation\nDESCRIPTION: Example showing the limitation of $pull operator in Minimongo where it cannot directly use comparison operators like $gt without being nested in a document structure.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/minimongo/NOTES.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Won't work\n{$pull: {$gt: 3}}\n\n// Will work\n{$pull: {x: 3}}\n{$pull: {x: {$gt: 3}}}\n```\n\n----------------------------------------\n\nTITLE: Using useTracker with Skip Update Function\nDESCRIPTION: Example of useTracker implementation with a skip update function for optimization\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/react-meteor-data.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTracker } from 'meteor/react-meteor-data';\n\n// React function component.\nfunction Foo({ listId }) {\n  const tasks = useTracker(\n    () => Tasks.find({ listId }).fetch(), [listId],\n    (prev, next) => {\n      // prev and next will match the type returned by the reactiveFn\n      return prev.every((doc, i) => (\n        doc._id === next[i] && doc.updatedAt === next[i]\n      )) && prev.length === next.length;\n    }\n  );\n\n  return (\n    <h1>Hello {currentUser.username}</h1>\n    <div>\n      Here is the Todo list {listId}:\n      <ul>\n        {tasks.map(task => (\n          <li key={task._id}>{task.label}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Assets.getBinary to Assets.getBinaryAsync in Meteor\nDESCRIPTION: Shows how to update code that uses the deprecated Assets.getBinary function to the new asynchronous version Assets.getBinaryAsync. The implementation requires the function to be async and the call to be awaited.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/renamed-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n\nfunction someFunction() {\n  const binary = Assets.getBinary('some-file.txt');\n  return binary;\n}\n\n// After\n\nasync function someFunction() {\n  const binary = await Assets.getBinaryAsync('some-file.txt');\n  return binary;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing AND Formula with Flat, Nested Arrays or Arguments in JavaScript\nDESCRIPTION: This snippet shows how the Logic.and constructor function in JavaScript can accept operands as individual arguments or as arrays (including nested arrays). It demonstrates the equivalence of calling Logic.and with several arguments, a flat array, or an array of arrays. This provides flexibility in building AND Formulas from dynamic data structures or static lists, depending on the use case.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nLogic.and(\\\"A\\\", \\\"B\\\", \\\"C\\\")\\nLogic.and([\\\"A\\\", \\\"B\\\", \\\"C\\\"])\\nLogic.and(\\\"A\\\", [[\\\"B\\\", \\\"C\\\"]], [])\n```\n\n----------------------------------------\n\nTITLE: Solving for Magic Squares with Equal Digits using solveAssuming in JavaScript\nDESCRIPTION: Demonstrates how to ask Logic Solver for a solution assuming certain locations are forced to be equal (violating uniqueness). solveAssuming is called with an equality constraint between A and B, or a conjunction of A, B, C equal. Shows that solutions become non-distinct. Inputs: custom equality assumption; Outputs: evaluated locations with possible duplicate values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sol3 = solver.solveAssuming(Logic.equalBits(A, B));\n_.map(locations, function (loc) { return sol3.evaluate(loc); })\n// => [4, 4, 7,\n//     8, 5, 2,\n//     3, 6, 6]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sol4 = solver.solveAssuming(Logic.and(Logic.equalBits(A, B),\n                                          Logic.equalBits(B, C)));\n_.map(locations, function (loc) { return sol4.evaluate(loc); })\n// => [5, 5, 5,\n//     5, 5, 5,\n//     5, 5, 5]\n```\n\n----------------------------------------\n\nTITLE: Adding the Jam Method Package to a Meteor Project\nDESCRIPTION: This command adds the 'jam:method' package to a Meteor project, enabling the use of the Jam method tools and features within the application. Ensure Meteor is installed before running this command.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add jam:method\n```\n\n----------------------------------------\n\nTITLE: HMR Module Requirement Handler\nDESCRIPTION: Shows how to implement onRequire handlers for detecting and automatically handling module updates\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/hot-module-replacement.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (module.hot) {\n  module.hot.onRequire({\n    before(requiredModule, parentId) {\n      return {\n        importedBy: parentId,\n        previouslyEvaluated: !requiredModule.loaded\n      }\n    },\n    after(requiredModule, data) {\n      if (!data.previouslyEvaluated) {\n        console.log(`Finished evaluating ${requiredModule.id}`);\n        console.log(`It was imported by ${data.importedBy}`);\n        console.log(`Its exports are ${requiredModule.exports}`);\n      }\n\n      if (requiredModule.hot && canAcceptUpdates(requiredModule)) {\n        requiredModule.hot.accept();\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Including a package directly in node_modules\nDESCRIPTION: Commands for creating a package directly within an app's node_modules directory. This approach is useful when you want to keep everything in a single repository and adds the package to source control.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/writing-npm-packages.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app/node_modules/\nmkdir my-package\ncd my-package/\nmeteor npm init\ngit add -f ./ # or use a git submodule\n```\n\n----------------------------------------\n\nTITLE: Using Check in Meteor Publications and Methods\nDESCRIPTION: Examples of using check to validate arguments in Meteor publications and methods. Shows type checking for strings and complex objects.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/check.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.publish('chatsInRoom', function (roomId) {\n  // Make sure `roomId` is a string, not an arbitrary Mongo selector object.\n  check(roomId, String);\n  return Chats.find({ room: roomId });\n});\n\nMeteor.methods({\n  addChat(roomId, message) {\n    check(roomId, String);\n    check(message, {\n      text: String,\n      timestamp: Date,\n      // Optional, but if present must be an array of strings.\n      tags: Match.Maybe([String])\n    });\n\n    // Do something with the message...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: ES2015 Class Syntax Example\nDESCRIPTION: Illustrates the use of ES2015 class syntax, including class definition, inheritance, and constructor methods. This feature is enabled by the `ecmascript` package.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/ecmascript.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Base {\n  constructor(a, b) {\n    this.value = a * b;\n  }\n}\n\nclass Derived extends Base {\n  constructor(a, b) {\n    super(a + 1, b + 1);\n  }\n}\n\nvar d = new Derived(2, 3);\nd.value; // 12\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Template for Passwordless Login in JavaScript\nDESCRIPTION: Demonstrates how to define a custom email template for sending login tokens. The template receives user data, URL, and a sequence code that users need to enter for authentication.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/accounts-passwordless.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsendLoginToken: {\n  text: (user, url, { sequence }) => { /* text template */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAIL_URL for SMTP/SMTPS in Meteor 1.5\nDESCRIPTION: Examples of MAIL_URL configuration patterns for different SMTP scenarios. For port 465, use 'smtps://' for TLS/SSL connections. For ports 587 or 25 with STARTTLS support, use 'smtp://'.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.5-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsmtps://user:pass@smtp.example.com:465  # TLS/SSL-only connections\nsmtp://user:pass@smtp.example.com:587   # STARTTLS support\n```\n\n----------------------------------------\n\nTITLE: Meteor Warehouse URL Configuration\nDESCRIPTION: Environment variable to override default Meteor warehouse URL\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\nMETEOR_WAREHOUSE_URLBASE=https://custom-warehouse-url\n```\n\n----------------------------------------\n\nTITLE: Checking for Updates in Meteor WebApp Cordova Plugin\nDESCRIPTION: This code snippet shows how to check for updates using the WebAppLocalServer interface in the Meteor WebApp Cordova plugin. It's called after detecting new versions through the meteor_autoupdate_clientVersions subscription.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebAppLocalServer.checkForUpdates()\n```\n\n----------------------------------------\n\nTITLE: Creating a Meteor Package README.md\nDESCRIPTION: A template for a Meteor package README.md file that includes sections for package description, installation instructions, API documentation, and examples. This provides a structured format for documenting a Meteor package for users.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/package-tests/packages/tilde-dependent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# username:package-name\n\n## Why / About\n\nFill in information about your package here. What does it do? How is it\nused in an application?\n\n## Installation\n\n```bash\nmeteor add username:package-name\n```\n\n## API\n\nDescribe your package API here. How is the package used after it's\ninstalled?\n\n## Examples\n\nShow examples of your package in action.\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Function Context\nDESCRIPTION: Demonstrates the correct way to define an async function, which is required to use the await keyword. The async keyword is placed before the function declaration to enable await usage inside.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/v3-migration-docs/api/async-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst myFunction = async () => { // [!code highlight]\n  console.log('Waiting...');\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('Done waiting');\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Logic Solver Constant for the Magic Sum in JavaScript\nDESCRIPTION: Defines a 4-bit representation for the number 15, corresponding to the magic sum, and demonstrates its bit values. Requires Logic Solver. This value is used as the target for row, column, and diagonal sums in further constraint definitions. Inputs: none; Output: Logic constant bits array for 15.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar fifteen = Logic.constantBits(15);\nfifteen.bits // => [\"$T\", \"$T\", \"$T\", \"$T\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Meteor App with Production Settings\nDESCRIPTION: This command demonstrates how to deploy a Meteor application to Galaxy using production settings.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/security.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmeteor deploy myapp.com --settings production.json\n```\n\n----------------------------------------\n\nTITLE: Registering a Linter Plugin in Meteor\nDESCRIPTION: Demonstrates how to register a linter plugin that processes JavaScript files and reads a configuration file. The linter class implements the processFilesForPackage method to lint each file and report errors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/packagejs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlugin.registerLinter({\n  extensions: ['js'],\n  filenames: ['.linterrc']\n}, () => new MyLinter);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLinter {\n  processFilesForPackage(files, options) {\n    files.forEach((file) => {\n      // Lint the file.\n      const lint = lintFile(file.getContentsAsString());\n\n      if (lint) {\n        // If there are linting errors, output them.\n        const { message, line, column } = lint;\n        file.error({ message, line, column });\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Component in Blaze Template\nDESCRIPTION: Shows the special syntax for using React components within Blaze templates, noting that Meteor prevents using {{> React}} with siblings since React.render requires an empty container.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_87\n\nLANGUAGE: handlebars\nCODE:\n```\n{{> React}}\n```\n\n----------------------------------------\n\nTITLE: Punycode.js MIT License\nDESCRIPTION: This is the MIT license for Punycode.js, a component used in the Meteor project. It specifies the copyright holder and provides a link to the full license text.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Node.txt#2025-04-22_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n* Punycode.js <http://mths.be/punycode>\n* Copyright 2011 Mathias Bynens <http://mathiasbynens.be/>\n* Available under MIT license <http://mths.be/mit>\n```\n\n----------------------------------------\n\nTITLE: Disabling Websocket Compression in Meteor\nDESCRIPTION: Shows how to completely disable websocket compression by setting the SERVER_WEBSOCKET_COMPRESSION environment variable to false.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/performance/websocket-compression.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_WEBSOCKET_COMPRESSION=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Meteor.applyAsync Options for Methods\nDESCRIPTION: Demonstrates how to customize options for Meteor.applyAsync when creating methods, allowing fine-tuning of how Meteor handles method execution and error handling.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport const create = createMethod({\n  name: 'todos.create',\n  schema: Todos.schema,\n  options: {\n    // ... //\n  },\n  async run({ text }) {\n    // ... //\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Solving with Additional Assumption\nDESCRIPTION: Demonstrates solving under an additional temporary constraint using solveAssuming.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/logic-solver/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar sol2 = solver.solveAssuming(\"Alice\");\nsol2.getTrueVars() // => [\"Alice\", \"Charlie\"]\n```\n\n----------------------------------------\n\nTITLE: Installing babel-runtime NPM Package for Meteor 1.4\nDESCRIPTION: Command to install the required babel-runtime npm package as a dependency for Meteor 1.4 applications. This package is necessary since Meteor no longer provides custom implementations of Babel helper functions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.4-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor npm install --save babel-runtime\n```\n\n----------------------------------------\n\nTITLE: Using Match.Maybe Pattern\nDESCRIPTION: Examples demonstrating the usage of Match.Maybe pattern for handling optional values and undefined/null cases\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/check.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// In an object\nconst pattern = { name: Match.Maybe(String) };\n\ncheck({ name: 'something' }, pattern); // OK\ncheck({}, pattern); // OK\ncheck({ name: undefined }, pattern); // Throws an exception\ncheck({ name: null }, pattern); // Throws an exception\n\n// Outside an object\ncheck(null, Match.Maybe(String)); // OK\ncheck(undefined, Match.Maybe(String)); // OK\n```\n\n----------------------------------------\n\nTITLE: Attempting Dynamic Import with Computed Expressions in JavaScript\nDESCRIPTION: This snippet shows an example of trying to use dynamic imports with computed expressions, which will result in an error because Meteor can't statically analyze these paths.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/dynamic-import.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet path = \"example\";\nconst module = await import(`/libs/${path}.js`);\n```\n\n----------------------------------------\n\nTITLE: Displaying Mongo-Decimal Package Information in Markdown\nDESCRIPTION: This markdown snippet provides links to the source code of the mongo-decimal package for Meteor, including both the released and development versions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/non-core/mongo-decimal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# mongo-decimal\n[Source code of released version](https://github.com/meteor/meteor/tree/master/packages/non-core/mongo-decimal) | [Source code of development version](https://github.com/meteor/meteor/tree/devel/packages/non-core/mongo-decimal)\n***\n```\n\n----------------------------------------\n\nTITLE: Ordering Package Updates in Changelog\nDESCRIPTION: This command runs a Node.js script to update the ordering of package entries in a specific version's changelog file. It ensures consistent and organized presentation of changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode order-packages.js versions/3.0.md\n```\n\n----------------------------------------\n\nTITLE: Markdown Comment Block for File Generation Notice\nDESCRIPTION: A series of markdown comments indicating that this is an auto-generated file and providing instructions for making changes.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/packages-listing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (Do not edit this file by hand.)\n\n[//]: # (This is a generated file.)\n\n[//]: # (If you want to change something in this file)\n\n[//]: # (go to meteor/docs/generators/packages-listing)\n```\n\n----------------------------------------\n\nTITLE: Creating Methods with Functional-Style Syntax\nDESCRIPTION: Shows an alternative functional-style syntax for creating methods by composing functions, which can provide a more concise approach for certain method definitions.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchGifs = async({ searchTerm, limit }) => {...}\n\nexport const getGifs = createMethod(server(schema({ searchTerm: String, limit: Number })(fetchGifs)))\n```\n\n----------------------------------------\n\nTITLE: Acorn Comment Object Structure\nDESCRIPTION: Example structure of a comment object when using the onComment option with locations enabled.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"Line\" | \"Block\",\n  \"value\": \"comment text\",\n  \"start\": Number,\n  \"end\": Number,\n  // If `locations` option is on:\n  \"loc\": {\n    \"start\": {line: Number, column: Number}\n    \"end\": {line: Number, column: Number}\n  },\n  // If `ranges` option is on:\n  \"range\": [Number, Number]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Documents on Server Startup\nDESCRIPTION: Server-side example of removing documents from MongoDB collections during Meteor server startup. Clears logs and removes players with low karma scores.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.startup(() => {\n  if (Meteor.isServer) {\n    Logs.remove({});\n    Players.remove({ karma: { $lt: -2 } });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing a Module for Side Effects\nDESCRIPTION: Demonstrates how to import a module solely for its side effects without importing any specific exports. This ensures the imported module is evaluated before the importing module.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/modules.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n// c.js\nimport './a';\nconsole.log('in c.js');\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.wrapAsync in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of Meteor.wrapAsync, which is now officially supported. It allows wrapping asynchronous functions and optionally binding a this context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_96\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.wrapAsync(asyncFunction, context);\n```\n\n----------------------------------------\n\nTITLE: Generating Consistent IDs for Inserts in Meteor Methods\nDESCRIPTION: Extends latency compensation to support consistent ID generation for inserts in method stubs and server-side execution. Provides a random stream for generating consistent IDs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_101\n\nLANGUAGE: JavaScript\nCODE:\n```\nDDP.randomStream\n```\n\n----------------------------------------\n\nTITLE: Reactive Async Autorun in Meteor (Pre-2.10)\nDESCRIPTION: This snippet shows how to achieve reactivity in async autoruns before Meteor 2.10 by calling reactive data sources before the async call.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.10-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTracker.autorun(async function example2() {\n  let users = Meteor.users.find({}).fetch();\n  let asyncData = await asyncDataFunction();\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Null Values with Meteor Test JavaScript\nDESCRIPTION: Checks that the actual value strictly equals null. Requires Meteor's test framework. Accepts the value to test and an optional failure message. Fails the test if the value is not null.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/tinytest/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest.isNull(actual[, message]);\n```\n\n----------------------------------------\n\nTITLE: Correct Parameter Destructuring in Meteor Event Map (JavaScript)\nDESCRIPTION: This snippet illustrates that using parameter destructuring for the 'event' and 'templateInstance' parameters is allowed by default according to the `eventmap-params` rule. It does not trigger a warning unless destructuring is explicitly forbidden via rule options.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/eventmap-params.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nTemplate.foo.events({\n  'submit form': function ({ target: form }, { data }) {}\n})\n\n```\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Meteor using Bash\nDESCRIPTION: These commands provide instructions for reinstalling Meteor, recommended for installations older than a year. The first command uninstalls Meteor using `npx` or alternatively by manually removing the `~/.meteor` directory. The second command reinstalls the latest version of Meteor using `npx`.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/generators/changelog/versions/3.0.3.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx meteor uninstall // or rm -rf ~/.meteor\nnpx meteor\n```\n\n----------------------------------------\n\nTITLE: Server-Side React Rendering with Meteor\nDESCRIPTION: Demonstrates basic server-side rendering implementation using React with Meteor's onPageLoad function.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/server-render.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \nfrom \"react\";\nimport { renderToString } from \"react-dom/server\";\nimport { onPageLoad } from \"meteor/server-render\";\n\nimport App from \"/imports/Server.js\";\n\nonPageLoad(sink => {\n  sink.renderIntoElementById(\"app\", renderToString(\n    <App location={sink.request.url} />\n  ));\n});\n```\n\n----------------------------------------\n\nTITLE: Using VitePress useData in Markdown with Vue Script (Markdown/Vue)\nDESCRIPTION: Demonstrates embedding a Vue `<script setup>` block within a VitePress Markdown file. It imports and uses the `useData` hook to access `theme`, `page`, and `frontmatter` data. This data is then displayed directly in the Markdown using Vue's template syntax within `<pre>` tags.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```md\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { theme, page, frontmatter } = useData()\n</script>\n\n## Results\n\n### Theme Data\n<pre>{{ theme }}</pre>\n\n### Page Data\n<pre>{{ page }}</pre>\n\n### Page Frontmatter\n<pre>{{ frontmatter }}</pre>\n```\n```\n\n----------------------------------------\n\nTITLE: Correct Usage in Relaxed Mode - JavaScript\nDESCRIPTION: This snippet presents a correct implementation in relaxed mode where eventmap class selectors are prefixed properly. It shows flexibility in selector usage while maintaining prefix convention for class selectors.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/docs/rules/prefix-eventmap-selectors.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*eslint prefix-eventmap-selectors: [2, \"js-\", \"relaxed\"]*/\n\nTemplate.foo.events({\n  'click .js-foo': function () {},\n  'blur .js-bar': function () {},\n  'click #foo': function () {},\n  'click [data-foo=\"bar\"]': function () {},\n  'click input': function () {},\n  'click': function () {},\n})\n\n```\n\n----------------------------------------\n\nTITLE: Package Version Migration Example in JavaScript\nDESCRIPTION: Example showing how to update package version dependencies for Meteor 2.3 compatibility using api.versionsFrom() and api.use()\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napi.versionsFrom(['1.12', '2.3'])\napi.use('accounts-base@1.0.1 || 2.0.0')\n```\n\n----------------------------------------\n\nTITLE: MongoDB Oplog Collection Inclusion Configuration\nDESCRIPTION: Settings to explicitly include only specific collections for Oplog watching, limiting Oplog operations to selected collections.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/collections.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n  \"packages\": {\n    \"mongo\": {\n      \"oplogIncludeCollections\": [\"chats\", \"messages\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: MongoDB Basic Selectors in JavaScript\nDESCRIPTION: Examples of basic MongoDB selector patterns for querying documents based on field values.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/api/collections.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Matches all documents where `deleted` is false.\n{ deleted: false }\n\n// Matches all documents where the `name` and `cognomen` are as given.\n{ name: 'Rhialto', cognomen: 'the Marvelous' }\n\n// Matches every document.\n{}\n```\n\n----------------------------------------\n\nTITLE: Async Callback with Meteor.bindEnvironment\nDESCRIPTION: Fixed version of async callback using Meteor.bindEnvironment to maintain fiber context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Inside a Meteor method definition\nupdateGitHubFollowers() {\n  github.user.getFollowingFromUser({\n    user: 'stubailo'\n  }, Meteor.bindEnvironment((err, res) => {\n    // Everything is good now\n    Followers.insert(res);\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Async Autoruns\nDESCRIPTION: Example showing how to manually synchronize multiple async autoruns using firstRunPromise.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/tracker.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait Tracker.autorun(async () => {\n  await Meteor.userAsync();\n  (...more async code...)\n}).firstRunPromise;\n\nawait Tracker.autorun(async () => {\n  await asyncSomeOrOther();\n  (...more async code...)\n}).firstRunPromise;\n```\n\n----------------------------------------\n\nTITLE: Computed Property Names Example\nDESCRIPTION: Demonstration of dynamically computed property names in object literals.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar counter = 0;\nfunction getKeyName() {\n  return \"key\" + counter++;\n}\n\nvar obj = {\n  [getKeyName()]: \"zero\",\n  [getKeyName()]: \"one\",\n};\n\nobj.key0; // \"zero\"\nobj.key1; // \"one\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Meteor Collection and Methods\nDESCRIPTION: JavaScript code to export the customer collection, methods, and publications from a single file.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from './collection';\nexport * from './methods';\nexport * from './publications';\n```\n\n----------------------------------------\n\nTITLE: Synchronous Module Example in Meteor\nDESCRIPTION: Illustrates a synchronous module in Meteor that doesn't use top level await. This module simply logs a message to the console.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/top-level-await.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('in main.js');\n```\n\n----------------------------------------\n\nTITLE: Creating Meteor Method to Update Time\nDESCRIPTION: Definition of a Meteor Method that updates or inserts the current time document in the Time collection.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/vue.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n  UpdateTime() {\n    Time.upsert('currentTime', { $set: { time: new Date() } });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Meteor Release Information\nDESCRIPTION: Commands to show information about Meteor releases, including recommended releases and all available releases including intermediate ones.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nmeteor show METEOR\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeteor show --show-all METEOR\n```\n\n----------------------------------------\n\nTITLE: Importing Blaze in Meteor 1.3\nDESCRIPTION: Example of how to import the Blaze module in Meteor 1.3 using the new package prefix.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Blaze} from \"meteor/blaze\"\n```\n\n----------------------------------------\n\nTITLE: Removing Mobile Platforms from Meteor Project\nDESCRIPTION: Command to remove both iOS and Android platforms from a Meteor project using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/cordova.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove-platform ios android\n```\n\n----------------------------------------\n\nTITLE: Re-publishing Meteor packages for 1.8.2 compatibility\nDESCRIPTION: These commands demonstrate how to republish a Meteor package using Meteor 1.8.2 to ensure compatibility. Package authors should update their versionsFrom constraint and republish to avoid errors like 'module.watch' being undefined.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/1.8.2-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/your/package\n# Add api.versionsFrom(\"1.8.2\") to Package.onUse in package.js...\nmeteor --release 1.8.2 publish\n```\n\n----------------------------------------\n\nTITLE: Creating URLSearchParams in Meteor\nDESCRIPTION: Example of importing and using URLSearchParams for handling URL query parameters in Meteor.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/url.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { URLSearchParams } from \"meteor/url\";\n\nconst searchParams = new URLSearchParams({ query: \"WHATWG\", location: \"MDN\" });\n```\n\n----------------------------------------\n\nTITLE: Creating Assets API Access in Meteor\nDESCRIPTION: Example of using the Assets API to access static assets stored in the private subdirectory on the server side.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/0-before-2.10.md#2025-04-22_snippet_115\n\nLANGUAGE: JavaScript\nCODE:\n```\nAssets\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script with Meteor\nDESCRIPTION: Example of executing a Node.js command using meteor node to access Meteor's bundled Node.js version.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nmeteor node -e \"console.log(process.versions)\"\n```\n\n----------------------------------------\n\nTITLE: Using Meteor.settings for OAuth Secret Key\nDESCRIPTION: Configures the OAuth secret key using Meteor.settings to avoid storing the key in source code.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/oauth-encryption.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAccounts.config({ oauthSecretKey: Meteor.settings.oauthSecretKey });\n```\n\n----------------------------------------\n\nTITLE: Destructuring Assignment\nDESCRIPTION: Examples of object and array destructuring patterns\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/packages/ecmascript.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction run({ command, args, callback }) { ... }\n\nrun({\n  command: 'git',\n  args: ['status', '.'],\n  callback(error, status) { ... },\n  unused: 'whatever'\n});\n```\n\n----------------------------------------\n\nTITLE: Node.js Console Log Statement\nDESCRIPTION: JavaScript code snippet showing the console.log statement executed within the Meteor Node.js environment.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.versions)\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules for GCDWebServer\nDESCRIPTION: Commands to initialize and update the GCDWebServer submodule in the cordova-plugin-meteor-webapp repository.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/cordova-plugin-meteor-webapp/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cordova-plugin-meteor-webapp\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Removing Platforms - Meteor CLI - Bash\nDESCRIPTION: Explains how to remove a platform from your project's configuration using Meteor CLI. Useful when you no longer wish to support or build for a specific platform. Requires only the Meteor CLI. Parameter: single platform name. Removes all associated references for the platform from the project.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/cli/index.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmeteor remove-platform [platform]\n```\n\n----------------------------------------\n\nTITLE: Defining Meteor Package Dependencies\nDESCRIPTION: This code snippet defines the package dependencies for the Meteor project, specifying version constraints for various core packages.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/boilerplate-generator-tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPackage.describe({\n  summary: \"Meteor platform\",\n  version: '2.13.3'\n});\n\nPackage.registerBuildPlugin({\n  name: \"basicFileTypes\",\n  sources: ['plugin/basic-file-types.js']\n});\n\nPackage.onUse(function (api) {\n  api.use('isobuild:compiler-plugin@1.0.0');\n\n  api.use('underscore', ['client', 'server']);\n\n  api.use('modules', ['client', 'server']);\n  api.use('ecmascript', ['client', 'server']);\n  api.use('ejson', ['client', 'server']);\n  api.use('check', ['client', 'server']);\n  api.use('mongo');\n  api.use('optimism', ['client', 'server']);\n  api.use('retry', 'client');\n  api.use('ddp', ['client', 'server']);\n  api.use('logging', ['client', 'server']);\n  api.use('tracker');\n  api.use('reload', 'client', {weak: true});\n  api.use('base64', ['client', 'server']);\n  api.use('diff-sequence', ['client', 'server']);\n  api.use('random', ['client', 'server']);\n\n  // default browser policy - do nothing\n  api.use('browser-policy', {weak: true});\n\n  // backward compatibility packages\n  api.use('fastclick', {weak: true});\n\n  var displayName = function (displayName) {\n    // There is no use in displaying runtime dependency warnings for core\n    // packages, so suppress version.js warnings for core packages.\n    return (displayName || '').startsWith('meteor:')\n      ? null\n      : displayName;\n  };\n\n  // These two packages replace the old `meteor` package\n  api.imply('meteor-base', ['client', 'server'], {displayName: displayName});\n  api.imply('mobile-experience', 'web.cordova', {displayName: displayName});\n\n  // These packages are part of the Meteor stack. A lot of them used to be\n  // included by the `meteor` package, but now they are broken up so you can\n  // use parts of the Meteor stack separately.\n  api.imply('mongo', ['client', 'server'], {displayName: displayName});\n  api.imply('static-html@1.3.2', 'server', {weak: true});\n  api.imply('reactive-var@1.0.12');\n  api.imply('standard-minifier-css@1.9.2', 'web', {displayName: displayName});\n  api.imply('standard-minifier-js@2.8.1', 'web', {displayName: displayName});\n  api.imply('typescript@4.9.4', 'server', {weak: true});\n  api.imply('shell-server@0.5.0', 'server', {displayName: displayName});\n  api.imply('hot-module-replacement@0.5.3', 'web.browser', {displayName: displayName});\n\n  // These packages are implied by `meteor-base`, which is in turn implied\n  // by this package. We pass `{displayName: null}` to disable the\n  // warnings; the `meteor` package's dependencies are documented\n  // explicitly.\n  api.imply('ddp', {displayName: displayName});\n  api.imply('livedata', {displayName: displayName});\n  api.imply('ddp-client', {displayName: displayName});\n  api.imply('ddp-server', {displayName: displayName});\n\n  // This package is implied by ddp-server, but we don't want to display\n  // its dependency warnings.\n  api.imply('ddp-rate-limiter', {displayName: displayName});\n});\n```\n\n----------------------------------------\n\nTITLE: Running Meteor with Browser Auto-open\nDESCRIPTION: Command to start Meteor development server and automatically open the default browser\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/commandline.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeteor run --open\n```\n\n----------------------------------------\n\nTITLE: Installing URL Package in Meteor Application\nDESCRIPTION: Command to add the 'url' package to an existing Meteor application using the Meteor CLI.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/packages/url.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add url\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Dependency Class in Meteor Tracker\nDESCRIPTION: An example of an incorrect implementation of the Dependency class that fails to properly handle the many-to-many relationship between computations and dependencies, leading to memory leaks.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// WRONG\nDependency = function () {\n  this._nextId = 0;\n  this._dependents = {};\n};\n\nDependency.prototype.depend = function () {\n  if (Tracker.currentComputation) {\n    var id = self._nextId++;\n    this._dependents[id] = Tracker.currentComputation;\n  }\n};\n\nDependency.prototype.changed = function () {\n  for (var id in this._dependents) {\n    this._dependents[id].invalidate();\n  }\n  this._dependents = {};\n};\n// WRONG\n```\n\n----------------------------------------\n\nTITLE: Meetup OAuth Documentation Link in Markdown\nDESCRIPTION: Markdown link pointing to the Meteor Guide's accounts documentation section for OAuth implementation details.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/meetup-oauth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# meetup-oauth\n\nAn implementation of the Meetup OAuth flow. See the [Meteor Guide](https://guide.meteor.com/accounts.html) for more details.\n```\n\n----------------------------------------\n\nTITLE: Creating a new Meteor React project\nDESCRIPTION: Command to create a new Meteor project with React integration. This sets up the initial project structure and necessary files.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/tutorials/react/1.creating-the-app.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeteor create simple-todos-react\n```\n\n----------------------------------------\n\nTITLE: Installing Email Package in Meteor\nDESCRIPTION: Command to add the email package to a Meteor project using the terminal.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/source/api/email.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add email\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation Leading to Infinite Loop in JavaScript\nDESCRIPTION: This example demonstrates an incorrect implementation of reactive dependencies that results in an infinite loop during the Tracker flush cycle. It violates the rule of not calling Tracker.changed() unless something has actually changed.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/long-form/tracker-manual.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// WRONG\nvar firstVar = 0;\nvar firstDep = new Tracker.Dependency();\nvar secondVar = 0;\nvar secondDep = new Tracker.Dependency();\n\nvar setFirstVar = function(newValue) {\n  firstVar = newValue;\n  firstDep.changed();\n};\n\nvar setSecondVar = function(newValue) {\n  secondVar = newValue;\n  secondDep.changed();\n};\n\nTracker.autorun(function () {\n  secondDep.depend();\n  firstVar = secondVar;\n  firstDep.changed();\n});\n\nTracker.autorun(function () {\n  firstDep.depend();\n  secondVar = firstVar;\n  secondDep.changed();\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RoutePolicy Usage with DDP and SockJS in Markdown\nDESCRIPTION: This snippet demonstrates how the DDP package uses RoutePolicy to declare that the '/sockjs' route should always be fetched from the Internet and never included in the appcache. It explains the necessity of this configuration for long polling when websockets are unavailable.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/routepolicy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor example, [DDP](https://www.meteor.com/ddp) uses sockjs to emulate\nwebsockets when they are not available. sockjs emulates websockets\nusing HTTP long polling, and it uses URLs under `/sockjs` to perform\nthis long polling. So the [ddp](https://atmospherejs.com/meteor/ddp)\npackage uses RoutePolicy to declare that the `/sockjs` route is of\ntype \"network\" and should always be fetched live from the Internet and\nnever included in the appcache.\n```\n\n----------------------------------------\n\nTITLE: Updating dependency versions for babel-preset-meteor\nDESCRIPTION: Commands to navigate to the babel-preset-meteor directory and run the version update script.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/babel-preset-meteor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd path/to/babel-preset-meteor\n$ npm run update-versions\n```\n\n----------------------------------------\n\nTITLE: Markdown Comments for Generated Changelog\nDESCRIPTION: These comments provide instructions and metadata for the generated changelog file. They indicate that the file should not be edited manually and specify the location for making changes to the changelog content.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/generators/changelog/versions/99999-generated-code-warning.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[//]: # (Do not edit this file by hand.)\n\n[//]: # (This is a generated file.)\n\n[//]: # (If you want to change something in this file)\n\n[//]: # (go to meteor/docs/generators/changelog/docs)\n```\n\n----------------------------------------\n\nTITLE: Forcing DDP Version Negotiation Failure (JavaScript)\nDESCRIPTION: Modifies the Meteor `Connection` constructor (likely in `livedata_connection.js`) to intentionally cause a DDP version negotiation failure. By adding the line `options.supportedDDPVersions = ['abc'];`, the client reports supporting only an invalid DDP version ('abc'), preventing a successful connection and triggering the client's reload-with-backoff behavior.\nSOURCE: https://github.com/meteor/meteor/blob/devel/packages/autoupdate/QA.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n var Connection = function (url, options) {\n    var self = this;\n+   options.supportedDDPVersions = ['abc'];\n```\n\n----------------------------------------\n\nTITLE: Profiler Output Example - Text Log\nDESCRIPTION: This snippet shows a sample output produced by the Meteor built-in profiler. It uses a hierarchical, indented, and dotted-line format to display function calls, cumulative wall-clock times in milliseconds, and call counts. No dependencies are required to interpret this log beyond basic familiarity with Meteor\\'s profiler conventions. Inputs are profiling results from an actual Meteor run; output is strictly formatted console text. The log helps developers identify performance hotspots and instrumentation coverage gaps.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/PERFORMANCE.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| (#1) Profiling: ProjectContext prepareProjectForBuild\\n| ProjectContext prepareProjectForBuild..........9,207 ms (1)\\n|    _initializeCatalog.............................24 ms (1)\\n|       files.readFile                               7 ms (2)\\n|       runJavaScript package.js                     2 ms (1)\\n|       files.rm_recursive                           4 ms (4)\\n|       other _initializeCatalog                    11 ms\\n|    _resolveConstraints.........................6,702 ms (1)\\n|       bundler.readJsImage.........................42 ms (1)\\n...\\n| (#1) Total: 9,544 ms (ProjectContext prepareProjectForBuild)\n```\n\n----------------------------------------\n\nTITLE: Simplified Meteor Method Definition with jam:easy-schema\nDESCRIPTION: This snippet shows a simplified way to define the same Meteor method using jam:easy-schema integration. It assumes the method is attached to its collection and uses automatic schema validation.\nSOURCE: https://github.com/meteor/meteor/blob/devel/v3-docs/docs/community-packages/jam-method.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nexport const setDone = async ({ _id, done }) => {\n  await checkOwnership({ _id });\n  return Todos.updateAsync({ _id }, { $set: { done } });\n};\n```\n\n----------------------------------------\n\nTITLE: Unicode Escape Examples (JavaScript)\nDESCRIPTION: Examples of Unicode escape sequences and patterns referenced in release notes, including handling of \\u180e and UTF16 surrogate pairs.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/imports/links/acorn/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"\\u180e\"      // No longer treated as whitespace\n\"\\u2028\\u2029\" // Allowed in strings in ECMAVersion >= 10\n```\n\n----------------------------------------\n\nTITLE: Example of Block Comment with Star Prefixes in JavaScript Documentation\nDESCRIPTION: Demonstrates a multi-line block comment format where each line is prefixed with an asterisk. The parser strips the sequence of optional whitespace, asterisk, and optional single space from each line. This format allows for structured documentation with preserved whitespace and Markdown formatting like bullet lists.\nSOURCE: https://github.com/meteor/meteor/blob/devel/npm-packages/eslint-plugin-meteor/scripts/doctool.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This is a block comment.  The parser strips the sequence,\n * [optional whitespace, `*`, optional single space] from\n * every line that has it.\n *\nFor lines that don't, no big deal.\n\n    Leading whitespace will be preserved here.\n\n * We can create a bullet list in here:\n *\n * * This is a bullet\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Acorn via npm\nDESCRIPTION: This shell command installs the Acorn JavaScript parser package using npm, a package manager for JavaScript. No special dependencies are required.\nSOURCE: https://github.com/meteor/meteor/blob/devel/tools/tests/apps/modules/packages/modules-test-package/node_modules/acorn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install acorn\n```\n\n----------------------------------------\n\nTITLE: Parsing Block Comments Without Initial Asterisk\nDESCRIPTION: Shows a block comment where the first line immediately following the opening `/*` does not start with an asterisk (`*`). In this specific case, the parser does not perform any stripping of leading asterisks on any subsequent lines within the comment block.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/* A block comment whose first line doesn't have a `*` receives\n * no stripping of `*` characters on any line.\n *\n * * This is a bullet\n */\n```\n\n----------------------------------------\n\nTITLE: Async Callback Without Fiber\nDESCRIPTION: Example showing problematic async callback usage in Meteor that fails due to missing fiber context.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/using-npm-packages.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Inside a Meteor method definition\nupdateGitHubFollowers() {\n  github.user.getFollowingFromUser({\n    user: 'stubailo'\n  }, (err, res) => {\n    // Using a collection here will throw an error\n    // because the asynchronous code is not in a fiber\n    Followers.insert(res);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message When Updating to Meteor 2.13\nDESCRIPTION: Common error message encountered when updating to Meteor 2.13 related to incorrect data check in the zlib module. This issue was solved in Meteor 2.13.3.\nSOURCE: https://github.com/meteor/meteor/blob/devel/guide/source/2.13-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nError: incorrect data check\n    at Zlib.zlibOnError [as onerror] (zlib.js:187:17)\n => awaited here:\n ...\n    at /tools/cli/main.js:1165:7 {\n  errno: -3,\n  code: 'Z_DATA_ERROR'\n  }\n```\n\n----------------------------------------\n\nTITLE: Illustrating Single-Line Block Comment in JavaScript\nDESCRIPTION: Example of a single-line block comment, which is also supported by the documentation tool.\nSOURCE: https://github.com/meteor/meteor/blob/devel/scripts/doctool.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** Single-line block comments are also ok. */\n```\n\n----------------------------------------\n\nTITLE: npm License for Meteor Project\nDESCRIPTION: This is the license for npm, a package manager used in the Meteor project. It outlines the terms of use under the MIT +no-false-attribs License, including permissions for modification and distribution, as well as trademark information.\nSOURCE: https://github.com/meteor/meteor/blob/devel/LICENSES/Node.txt#2025-04-22_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nCopyright 2009-2012, Isaac Z. Schlueter (the \"Original Author\")\nAll rights reserved.\n\nMIT +no-false-attribs License\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nDistributions of all or part of the Software intended to be used\nby the recipients as they would use the unmodified Software,\ncontaining modifications that substantially alter, remove, or\ndisable functionality of the Software, outside of the documented\nconfiguration mechanisms provided by the Software, shall be\nmodified such that the Original Author's bug reporting email\naddresses and urls are either replaced with the contact information\nof the parties responsible for the changes, or removed entirely.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\nExcept where noted, this license applies to any and all software\nprograms and associated documentation files created by the\nOriginal Author, when distributed with the Software.\n\n\"Node.js\" and \"node\" trademark Joyent, Inc. npm is not officially\npart of the Node.js project, and is neither owned by nor\nofficially affiliated with Joyent, Inc.\n\nPackages published in the npm registry are not part of npm\nitself, are the sole property of their respective maintainers,\nand are not covered by this license.\n\n\"npm Logo\" created by Mathias Pettersson and Brian Hammond,\nused with permission.\n\nThis program uses \"node-uuid\", Copyright (c) 2010 Robert Kieffer,\naccording to the terms of the MIT license.\n\nThis program uses \"request\", Copyright (c) 2011 Mikeal Rogers,\naccording to the terms of the Apache license.\n\nThis program uses \"mkdirp\",  Copyright (c) 2010 James Halliday,\naccording to the terms of the MIT/X11 license.\n```\n\n----------------------------------------\n\nTITLE: Using throwStubExceptions Option in Meteor Method Calls\nDESCRIPTION: Shows how to use the new throwStubExceptions option when calling Meteor methods, which allows exceptions from method stubs to be thrown instead of logged.\nSOURCE: https://github.com/meteor/meteor/blob/devel/docs/history.md#2025-04-22_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\nMeteor.call('methodName', arg1, arg2, { throwStubExceptions: true }, callback)\n```"
  }
]