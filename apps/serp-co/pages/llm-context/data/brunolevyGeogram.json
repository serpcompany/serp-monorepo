[
  {
    "owner": "brunolevy",
    "repo": "geogram",
    "content": "TITLE: Configuring and Building the Geogram Library with CMake\nDESCRIPTION: This comprehensive CMake script sets up the Geogram computational geometry library, including source file collection, dependency handling, compiler definitions, and installation rules. It handles conditional inclusion of components like GeogramPlus and LUA, manages platform-specific requirements, and configures version information.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Tetgen (by Hang Si) is currently included by default.\n# Triangle (by Jonathan Shewchuk) is currently included by default.\n\nconfigure_file(geogram.pc.in ${PROJECT_BINARY_DIR}/geogram${VORPALINE_VERSION_MAJOR}.pc @ONLY)\n\nif(GEOGRAM_WITH_GEOGRAMPLUS)\nadd_subdirectory(geogramplus)\nlist(APPEND SOURCES $<TARGET_OBJECTS:geogramplus> $<TARGET_OBJECTS:geogramplus_third_party>)\ntarget_include_directories(\ngeogramplus PRIVATE\n${PROJECT_SOURCE_DIR}/src/lib/geogram/\n${PROJECT_SOURCE_DIR}/src/lib/geogram/geogramplus/third_party\n)\nendif()\n\nadd_subdirectory(third_party)\n\naux_source_directories(SOURCES \"Source Files\"           .)\naux_source_directories(SOURCES \"Source Files\\\\basic\"    basic)\naux_source_directories(SOURCES \"Source Files\\\\numerics\" numerics)\naux_source_directories(SOURCES \"Source Files\\\\mesh\"     mesh)\naux_source_directories(SOURCES \"Source Files\\\\delaunay\" delaunay)\naux_source_directories(SOURCES \"Source Files\\\\voronoi\"  voronoi)\naux_source_directories(SOURCES \"Source Files\\\\points\"   points)\naux_source_directories(SOURCES \"Source Files\\\\api\"      api)\naux_source_directories(SOURCES \"Source Files\\\\NL\"       NL)\naux_source_directories(SOURCES \"Source Files\\\\image\"    image)\naux_source_directories(SOURCES \"Source Files\\\\parameterization\" parameterization)\naux_source_directories(SOURCES \"Source Files\\\\bibliography\" bibliography)\n\nif(GEOGRAM_WITH_LUA)\naux_source_directories(SOURCES \"Source Files\\\\lua\"      lua)\nendif()\n\n# Parallel Delaunay now works on both Windows and Unix !\nadd_definitions(-DGEOGRAM_WITH_PDEL)\n\n# Activate AMGCL support in OpenNL (algebraic multigrid solver)\nadd_definitions(-DNL_WITH_AMGCL)\n\n# Copy the default version info to the build directory\nconfigure_file(basic/version.h.in version.h @ONLY)\nlist(APPEND SOURCES version.h)\nset_source_files_properties(version.h PROPERTIES GENERATED true)\n\ninclude_directories(${PROJECT_BINARY_DIR}/src/lib)\n\nadd_library(geogram ${SOURCES} $<TARGET_OBJECTS:geogram_third_party>)\n\ntarget_compile_features(geogram PUBLIC cxx_std_17)\n\ntarget_include_directories(geogram PRIVATE\n${PROJECT_SOURCE_DIR}/src/lib/geogram/third_party/amgcl\n)\n\nif(GEOGRAM_WITH_GEOGRAMPLUS)\ntarget_include_directories(geogram PUBLIC\n${PROJECT_SOURCE_DIR}/src/lib/geogram/\n${PROJECT_SOURCE_DIR}/src/lib/geogram/geogramplus/third_party\n)\nendif()\n\nif(GEOGRAM_WITH_TBB)\ntarget_link_libraries(geogram TBB::tbb) # TODO: Use PRIVATE keyword here\ntarget_compile_definitions(geogram PRIVATE -DGEO_TBB)\nendif()\n\n# Jeremie/Maxence: avoids the need to redeclare geogram include\n# path for targets that depend on geogram.\n# See: https://cmake.org/cmake/help/v3.3/command/target_include_directories.html\n# https://stackoverflow.com/questions/26243169/cmake-target-include-directories-meaning-of-scope\ntarget_include_directories(geogram PUBLIC ${PROJECT_SOURCE_DIR}/src/lib)\n\nif(ANDROID)\ntarget_include_directories(geogram PRIVATE\n${ANDROID_NDK}/sources/android/native_app_glue\n)\nmessage(STATUS \"building for Android\")\nendif()\n\n\nset_target_properties(geogram PROPERTIES\nVERSION ${VORPALINE_VERSION}\nSOVERSION ${VORPALINE_VERSION_MAJOR}\nFOLDER \"GEOGRAM\")\n\nif(UNIX AND VORPALINE_BUILD_DYNAMIC)\nif (ANDROID)\ntarget_link_libraries(geogram dl)\nelse()\ntarget_link_libraries(geogram pthread dl)\nendif()\nendif()\n\nif(WIN32)\ntarget_link_libraries(geogram psapi)\nendif()\n\nif(GEOGRAM_WITH_GEOGRAMPLUS)\ntarget_link_libraries(geogram ${GEOGRAMPLUS_LIBS})\nendif()\n\n# Install the library\ninstall_devkit_targets(geogram)\n\n# Install include files for the standard devkit\ninstall(\nDIRECTORY api\nDESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${VORPALINE_INCLUDE_SUBPATH}/geogram\nCOMPONENT devkit\nFILES_MATCHING PATTERN *.h\n)\n\n# Install include files for the full devkit\ninstall(\nDIRECTORY .\nDESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${VORPALINE_INCLUDE_SUBPATH}/geogram\nCOMPONENT devkit-full\nFILES_MATCHING PATTERN *.h\n# Exclude all files related to licensing\nREGEX /license/ EXCLUDE\n)\n\ninstall(\nFILES \"${PROJECT_BINARY_DIR}/geogram${VORPALINE_VERSION_MAJOR}.pc\"\nDESTINATION ${GEOGRAM_INSTALL_PKGCONFIG_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Version Information in CMake for Geogram/Vorpaline\nDESCRIPTION: Defines the version information for Geogram/Vorpaline project, including major, minor, and patch versions. Sets up version strings with optional release candidate designation.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(VORPALINE_VERSION_RC TRUE)\nset(VORPALINE_VERSION_MAJOR 1)\nset(VORPALINE_VERSION_MINOR 9)\nset(VORPALINE_VERSION_PATCH 5)\n\nset(VORPALINE_VERSION_PLAIN ${VORPALINE_VERSION_MAJOR}.${VORPALINE_VERSION_MINOR}.${VORPALINE_VERSION_PATCH})\nif(VORPALINE_VERSION_RC)\nset(VORPALINE_VERSION ${VORPALINE_VERSION_PLAIN}-rc)\nelse()\nset(VORPALINE_VERSION ${VORPALINE_VERSION_PLAIN})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Geogram Graphics Library with CMake\nDESCRIPTION: This CMake script sets up the geogram_gfx library build, including source directories, dependencies, compilation settings, and installation rules. It handles platform-specific configurations (Android/non-Android), manages third-party dependencies like ImGui and GLFW, and creates proper package configuration files.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\n\nconfigure_file(geogram_gfx.pc.in ${PROJECT_BINARY_DIR}/geogram_gfx${VORPALINE_VERSION_MAJOR}.pc @ONLY)\n\nadd_definitions(-DIMGUI_USER_CONFIG=\"geogram_imconfig.h\")\n\nadd_subdirectory(third_party)\n\naux_source_directories(SOURCES \"Source Files\"                .)\naux_source_directories(SOURCES \"Source Files\\\\imgui_ext\"     imgui_ext)\naux_source_directories(SOURCES \"Source Files\\\\api\"           api)\naux_source_directories(SOURCES \"Source Files\\\\basic\"         basic)\naux_source_directories(SOURCES \"Source Files\\\\mesh\"          mesh)\naux_source_directories(SOURCES \"Source Files\\\\GLUP\"          GLUP)\naux_source_directories(SOURCES \"Source Files\\\\GLUP\\\\shaders\" GLUP/shaders)\naux_source_directories(SOURCES \"Source Files\\\\full_screen_effects\" full_screen_effects)\naux_source_directories(SOURCES \"Source Files\\\\gui\"           gui)\n\nif(GEOGRAM_WITH_LUA)\naux_source_directories(SOURCES \"Source Files\\\\lua\"           lua)\nendif()\n\nif(GEOGRAM_USE_SYSTEM_GLFW3)\nadd_definitions(-DGEO_USE_SYSTEM_GLFW3)\nendif()\n\nadd_library(geogram_gfx ${SOURCES} $<TARGET_OBJECTS:geogram_gfx_third_party>)\n\ntarget_include_directories(geogram_gfx PUBLIC ${PROJECT_SOURCE_DIR}/src/lib/geogram_gfx/third_party)\ntarget_include_directories(geogram_gfx PRIVATE ${PROJECT_SOURCE_DIR}/src/lib/geogram_gfx/third_party/imgui)\n\nif(ANDROID)\ntarget_include_directories(geogram_gfx PRIVATE\n${ANDROID_NDK}/sources/android/native_app_glue\n)\nmessage(STATUS \"building for Android\")\nendif()\n\nset_target_properties(geogram_gfx PROPERTIES\nVERSION ${VORPALINE_VERSION}\nSOVERSION ${VORPALINE_VERSION_MAJOR}\nFOLDER \"GEOGRAM\")\n\nif(NOT ANDROID)\ntarget_link_libraries(geogram_gfx glfw)\nendif()\n\nif(VORPALINE_BUILD_DYNAMIC)\n# Must provide all symbols at link time\ntarget_link_libraries(geogram_gfx geogram)\ntarget_link_libraries(geogram_gfx ${OPENGL_LIBRARIES})\nendif()\n\n# Install the library\ninstall_devkit_targets(geogram_gfx)\n\n# Install include files for the standard devkit\ninstall(\nDIRECTORY .\nDESTINATION include/${VORPALINE_INCLUDE_SUBPATH}/geogram_gfx\nCOMPONENT devkit\nFILES_MATCHING PATTERN *.h\n)\n\n# Install include files for the full devkit\ninstall(\nDIRECTORY .\nDESTINATION include/${VORPALINE_INCLUDE_SUBPATH}/geogram_gfx\nCOMPONENT devkit-full\nFILES_MATCHING PATTERN *.h\n)\n\ninstall(\nFILES \"${PROJECT_BINARY_DIR}/geogram_gfx${VORPALINE_VERSION_MAJOR}.pc\"\nDESTINATION lib${LIB_SUFFIX}/pkgconfig\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH for Dynamic Libraries\nDESCRIPTION: Sets up runtime path (RPATH) for executable and dynamic libraries to reference the installation directory. Enables RPATH support for macOS and configures install name directory.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(VORPALINE_BUILD_DYNAMIC)\nset(CMAKE_MACOSX_RPATH 1)\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\nendif()\n\nset(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Modules for Geogram\nDESCRIPTION: Sets up configurable options for Geogram features when not used as a subproject. Defines toggles for graphics, numerical libraries, solvers, meshers, and other components.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT GEOGRAM_SUB_BUILD)\noption(GEOGRAM_WITH_GRAPHICS \"Viewers and geogram_gfx library\" ON)\noption(GEOGRAM_WITH_LEGACY_NUMERICS \"Legacy numerical libraries\" ON)\noption(GEOGRAM_WITH_HLBFGS \"Non-linear solver (Yang Liu's HLBFGS)\" ON)\noption(GEOGRAM_WITH_TETGEN \"Tetrahedral mesher (Hang Si's TetGen)\" ON)\noption(GEOGRAM_WITH_TRIANGLE \"Triangle mesher (Jonathan Shewchuk's triangle)\" ON)\noption(GEOGRAM_WITH_LUA \"Built-in LUA interpreter\" ON)\noption(GEOGRAM_LIB_ONLY \"Libraries only (no example programs/no viewer)\" OFF)\noption(GEOGRAM_WITH_FPG \"Predicate generator (Sylvain Pion's FPG)\" OFF)\noption(GEOGRAM_USE_SYSTEM_GLFW3 \"Use the version of GLFW3 installed in the system if found\" OFF)\noption(GEOGRAM_WITH_GARGANTUA \"64-bit indices\" OFF)\noption(GEOGRAM_WITH_TBB \"Use TBB for multi-threading\" OFF)\ninclude(cmake/geo_detect_platform.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Geogram Project with CMake\nDESCRIPTION: This CMake script configures a simple project that uses the Geogram library. It sets the minimum CMake version to 2.8.11, defines a default Release build configuration, locates the Geogram package, and creates an executable that links against the Geogram library.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tutorial/01_basics/hello_geogram/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.11)\nproject(hello_geogram)\n\nif (NOT CMAKE_BUILD_TYPE)\nmessage (STATUS \"No build type selected, default to Release\")\nset (CMAKE_BUILD_TYPE \"Release\")\nendif ()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})\nfind_package(Geogram REQUIRED)\n\nadd_executable(hello_geogram main.cpp)\ntarget_link_libraries(hello_geogram Geogram::geogram)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library and Application Subdirectories\nDESCRIPTION: Adds subdirectories for libraries, applications, tests, and examples based on build configuration. Core libraries are always included, while optional components depend on configuration variables.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src/lib/geogram)\nif(GEOGRAM_WITH_VORPALINE)\nadd_subdirectory(src/lib/vorpalib)\nendif()\n\nadd_subdirectory(src/lib/third_party)\n\nif(GEOGRAM_WITH_GRAPHICS)\nadd_subdirectory(src/lib/geogram_gfx)\nendif()\n\nif(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/lib/exploragram)\nif(GEOGRAM_WITH_EXPLORAGRAM)\nadd_subdirectory(src/lib/exploragram)\nendif()\nendif()\n\nif(NOT GEOGRAM_LIB_ONLY)\nadd_subdirectory(src/bin)\nadd_subdirectory(src/tests)\nadd_subdirectory(src/examples)\nadd_subdirectory(tests)\nendif()\n\nadd_subdirectory(doc)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for Geogram Project\nDESCRIPTION: This CMake snippet adds multiple subdirectories to the project build. Each subdirectory likely contains its own CMakeLists.txt file and represents a distinct component or example within the Geogram project.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(compute_delaunay)\nadd_subdirectory(compute_RVD)\nadd_subdirectory(compute_CSG)\nadd_subdirectory(opennl_LSCM)\nadd_subdirectory(opennl_mesh_smooth)\nadd_subdirectory(manifold_harmonics)\nadd_subdirectory(opennl_basic_example)\nadd_subdirectory(simple_raytrace)\nadd_subdirectory(boolean_operations)\nadd_subdirectory(intersect)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geogram SimpleApp Demo in CMake\nDESCRIPTION: This CMake script configures the build process for the Geogram SimpleApp demo. It includes OpenGL-related configurations, collects all source files in the current directory, defines dependencies on Geogram libraries, and sets up installation rules for the built executable.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_SimpleApplication/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_SimpleApp)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories in Geogram Project with CMake\nDESCRIPTION: This CMake script controls which subdirectories (components) are included in the build process for the Geogram project. It uses conditional statements to include graphics-related components, Lua-dependent components, and FPG-related components based on build configuration flags.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(vorpastat)\nadd_subdirectory(vorpacomp)\nadd_subdirectory(geodump)\n\nif(GEOGRAM_WITH_GRAPHICS)\nadd_subdirectory(vorpaview)\nadd_subdirectory(geobox)\nadd_subdirectory(geoCSG)\nif(GEOGRAM_WITH_LUA)\nadd_subdirectory(geocod)\nendif()\nadd_subdirectory(geoshade)\nendif()\n\nadd_subdirectory(vorpalite)\n\n# if(GEOGRAM_WITH_VORPALINE)\n#  add_subdirectory(vorpaline)\n# endif()\n\nif(GEOGRAM_WITH_FPG)\nadd_subdirectory(fpg)\nadd_subdirectory(pck)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Managing GLFW3 Dependencies for Graphics in CMake\nDESCRIPTION: Configures GLFW3 library inclusion for the graphics component. First checks for system installation if GEOGRAM_USE_SYSTEM_GLFW3 is enabled, then falls back to using existing target if available, and finally includes the built-in version if necessary. Also handles Emscripten platform specifically.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(GEOGRAM_WITH_GRAPHICS AND NOT ANDROID)\n  \n  if(GEOGRAM_WITH_EMSCRIPTEN)\n    set(GEOGRAM_USE_BUILTIN_GLFW3 FALSE)\n  else()\n    if(GEOGRAM_USE_SYSTEM_GLFW3)\n        find_package(glfw3 QUIET)\n    endif()\n    if(glfw3_FOUND)\n      message(STATUS \"Found GLFW3 installed in the system, using it.\")\n      set(GEOGRAM_USE_BUILTIN_GLFW3 FALSE PARENT_SCOPE)\n    else()\n      if(TARGET glfw)\n         message(STATUS \"Geogram is included in another project that already has GLFW3, using it.\")\t\n      else()\n         message(STATUS \"Did not find GLFW3 in the system, using built-in GLFW3.\")\n         set(GEOGRAM_USE_BUILTIN_GLFW3 TRUE PARENT_SCOPE)\n         option(GLFW_INSTALL \"Generate GLFW installation target\" TRUE)\n\t option(GLFW_BUILD_DOCS \"Build the GLFW documentation\" FALSE)\n\t option(GLFW_BUILD_WAYLAND \"Build GLFW for wayland\" FALSE)\n         add_subdirectory(glfw)\n      endif()\t \n    endif()\n  endif()\n  \nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Geogram Project Components with CMake\nDESCRIPTION: This CMake snippet specifies which components of the Geogram project should be built. It unconditionally includes the core geogram library and conditionally adds graphics and exploragram components based on the GEOGRAM_WITH_GRAPHICS and GEOGRAM_WITH_EXPLORAGRAM flags. The vorpaline component is currently commented out and not included in the build.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(geogram)\n\nif(GEOGRAM_WITH_GRAPHICS)\nadd_subdirectory(graphics)\nendif()\n\nif(GEOGRAM_WITH_EXPLORAGRAM)\nadd_subdirectory(exploragram)\nendif()\n\n#if(GEOGRAM_WITH_VORPALINE)\n#   add_subdirectory(vorpaline)\n#endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Geogram Demo Subdirectories in CMake\nDESCRIPTION: Adds multiple subdirectories containing Geogram demo applications to the CMake build system. Each subdirectory contains a separate demo application that showcases different features of the Geogram library, such as GPU programming (GLUP), Delaunay triangulation in 2D and 3D, raytracing, and application frameworks.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(demo_GLUP)\nadd_subdirectory(demo_Delaunay2d)\nadd_subdirectory(demo_Delaunay3d)\nadd_subdirectory(demo_Evert)\nadd_subdirectory(demo_Raytrace)\nadd_subdirectory(demo_Application)\nadd_subdirectory(demo_SimpleApplication)\nadd_subdirectory(demo_Picking)\n```\n\n----------------------------------------\n\nTITLE: Configuring TBB Support for Multi-threading\nDESCRIPTION: Sets up Thread Building Blocks (TBB) support if the GEOGRAM_WITH_TBB option is enabled and TBB is not already available as a CMake target.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(GEOGRAM_WITH_TBB AND NOT TARGET TBB::tbb)\ninclude(cmake/onetbb.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geogram Picking Demo with CMake\nDESCRIPTION: This CMake script configures the geogram_demo_Picking application by including OpenGL configuration, setting the application name, collecting source files, and linking required libraries. It also specifies installation and organization properties.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_Picking/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_Picking)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring a GLUP Application with CMake\nDESCRIPTION: This CMake script configures a project called 'hello_GLUP_app' that depends on the Geogram library. It sets the default build type to Release, finds the Geogram package, and links the necessary Geogram libraries to the application.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tutorial/01_basics/hello_GLUP_app/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.11)\nproject(hello_GLUP_app)\n\nif (NOT CMAKE_BUILD_TYPE)\nmessage (STATUS \"No build type selected, default to Release\")\nset (CMAKE_BUILD_TYPE \"Release\")\nendif ()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})\nfind_package(Geogram REQUIRED)\n\nadd_executable(hello_GLUP_app main.cpp)\ntarget_link_libraries(hello_GLUP_app Geogram::geogram_gfx Geogram::geogram)\n```\n\n----------------------------------------\n\nTITLE: Configuring Geogram Delaunay3d Demo Build\nDESCRIPTION: CMake configuration that sets up a build target for the Geogram Delaunay3d demonstration. It includes OpenGL dependencies, sets the application name, compiles source files, links required libraries including Geogram and GLFW, and configures installation and project organization settings.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_Delaunay3d/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_Delaunay3d)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geogram Demo Application with CMake\nDESCRIPTION: This CMake script sets up a Geogram demo application named 'geogram_demo_Application'. It includes OpenGL dependencies, collects source files from the current directory, links against Geogram libraries, and configures installation and organization within the project.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_Application/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_Application)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Creating Numerical Third-Party Library in CMake\nDESCRIPTION: Creates the geogram_num_3rdparty library from the collected sources, links with the math library on Unix systems, and sets library properties including version and folder organization.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(geogram_num_3rdparty ${SOURCES})\n\nif(UNIX)\n    target_link_libraries(geogram_num_3rdparty m)\nendif()\n\nset_target_properties(geogram_num_3rdparty PROPERTIES\n                      VERSION ${VORPALINE_VERSION}\n                      SOVERSION ${VORPALINE_VERSION_MAJOR}\n\t\t      FOLDER \"GEOGRAM\")\n\ninstall_devkit_targets(geogram_num_3rdparty)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Executable and Dependencies\nDESCRIPTION: Sets up the main executable target and configures dependencies including threads, Geogram, and Eigen libraries.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/contrib/topopt/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Target executable\nAdd_Executable(${PROJECT_NAME} main.cpp mesh_primitives.cpp topopt.cpp)\n\n# Link to the standard thread library\nFind_Package (Threads REQUIRED)\nTarget_Link_Libraries (${PROJECT_NAME} ${CMAKE_THREAD_LIBS_INIT})\n\n# Link to Geogram\nFind_Package(Geogram)\nTarget_Link_Libraries(${PROJECT_NAME} Geogram::geogram_gfx Geogram::geogram)\n\n# Link to Eigen\nFind_Package(Eigen3)\nTarget_Include_Directories(${PROJECT_NAME} SYSTEM PUBLIC ${EIGEN3_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files from Third-Party Libraries\nDESCRIPTION: Collects source files from various third-party libraries using the aux_source_directories command. Conditionally includes additional libraries based on build configuration options.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram/third_party/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"               .)\naux_source_directories(SOURCES \"Source Files\\\\libMeshb\"     libMeshb/sources)\naux_source_directories(SOURCES \"Source Files\\\\rply\"         rply)\naux_source_directories(SOURCES \"Source Files\\\\shewchuk\"     shewchuk)\naux_source_directories(SOURCES \"Source Files\\\\zlib\"         zlib)\naux_source_directories(SOURCES \"Source Files\\\\PoissonRecon\" PoissonRecon)\naux_source_directories(SOURCES \"Source Files\\\\xatlas\"       xatlas)\n\nif(GEOGRAM_WITH_LUA)\n   aux_source_directories(SOURCES \"Source Files\\\\lua\"          lua)\nendif()\n\nif(GEOGRAM_WITH_HLBFGS)\n    aux_source_directories(SOURCES \"Source Files\\\\HLBFGS\"       HLBFGS)\nendif()\n\nif(GEOGRAM_WITH_TETGEN)\n    aux_source_directories(SOURCES \"Source Files\\\\tetgen\" tetgen)\nendif()\n\nif(GEOGRAM_WITH_TRIANGLE)\n    aux_source_directories(SOURCES \"Source Files\\\\triangle\" triangle)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geogram GLUP Demo Application with CMake\nDESCRIPTION: This CMake snippet configures the geogram_demo_GLUP application by including OpenGL dependencies, gathering source files, setting up the executable, linking libraries, and configuring installation targets. It also organizes the target within the GEOGRAM/Examples folder in the IDE project structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_GLUP/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_GLUP)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vorpaview Application Build with CMake\nDESCRIPTION: This CMake script configures the build process for the 'vorpaview' application. It includes OpenGL dependencies, collects source files from the current directory, links against geogram libraries, and sets up installation and organization properties.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/vorpaview/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME vorpaview)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring geogram_demo_Raytrace CMake Build\nDESCRIPTION: This CMake script configures the build process for the geogram_demo_Raytrace application. It includes OpenGL dependencies, collects source files from the current directory, defines an executable target, links against the geogram libraries and GLFW, sets up installation, and organizes the target within the project structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_Raytrace/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_Raytrace)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Setting up CGAL Project with Dependencies in CMake\nDESCRIPTION: Configures a CMake project named 'CGAL_with_GEOGRAM' that requires CGAL and Boost libraries. The script checks for these dependencies and exits if they are not found.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_expansion_nt/CGAL/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject( CGAL_with_GEOGRAM )\n\ncmake_minimum_required(VERSION 2.8.11)\n\n# CGAL and its components\nfind_package( CGAL QUIET COMPONENTS  )\n\nif ( NOT CGAL_FOUND )\nmessage(STATUS \"This project requires the CGAL library, and will not be compiled.\")\nreturn()\nendif()\n\n# include helper file\ninclude( ${CGAL_USE_FILE} )\n\n# Boost and its components\nfind_package( Boost REQUIRED )\n\nif ( NOT Boost_FOUND )\nmessage(STATUS \"This project requires the Boost library, and will not be compiled.\")\nreturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Vorpalite Application with CMake\nDESCRIPTION: This CMake snippet sets up the Vorpalite application. It defines the application name, collects source files, creates the executable, links it with the Geogram library, and configures installation and project organization settings.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/vorpalite/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME vorpalite)\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geoshade Application with CMake\nDESCRIPTION: This CMake script configures the Geoshade application, sets up source directories, defines the executable, links required libraries, and sets project properties. It includes OpenGL configuration, defines source directories, and sets up installation targets.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/geoshade/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geoshade)\n\naux_source_directories(SOURCES \"\" .)\naux_source_directories(SOURCES \"glsl\" glsl)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geocod Application with CMake\nDESCRIPTION: This CMake script configures the build process for the Geocod application. It includes OpenGL dependencies, sets the application name, defines source directories, creates the executable, links required libraries, and sets up installation and project organization properties.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/geocod/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geocod)\n\naux_source_directories(SOURCES \"\" .)\naux_source_directories(SOURCES \"lua\" lua)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the geodump Application with CMake\nDESCRIPTION: This CMake script sets up the geodump application, collects source files from the current directory, creates an executable, links it with the geogram library, configures installation, and organizes it in the GEOGRAM/Programs project folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/geodump/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME geodump)\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geobox Executable with CMake\nDESCRIPTION: Configures the build process for the Geobox executable by including OpenGL configuration, gathering source files, linking required libraries, and setting up installation targets. Dependencies include Geogram graphics library, core Geogram library, and GLFW.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/geobox/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(geobox ${SOURCES})\ntarget_link_libraries(geobox geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(geobox)\n\nset_target_properties(geobox PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Delaunay Computation Executable with CMake\nDESCRIPTION: CMake configuration that creates a 'compute_delaunay' executable. The configuration collects source files from the current directory, builds the executable with a custom 'vor_add_executable' macro, links against the geogram library, and places the executable in the 'GEOGRAM/Examples' folder in the IDE.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/compute_delaunay/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME compute_delaunay)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building geoCSG Application with CMake\nDESCRIPTION: This CMake script configures the geoCSG application. It includes OpenGL configuration, sets the application name, compiles sources, links with Geogram libraries, and sets up installation and project organization.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/geoCSG/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geoCSG)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geogram Demo Evert Application with CMake\nDESCRIPTION: This CMake script configures the build for the Geogram Demo Evert application. It includes OpenGL dependencies, sets the application name, collects source files, defines the executable, links required libraries, and sets up installation and organization properties.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_Evert/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_Evert)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring PCK Application Build in CMake\nDESCRIPTION: Sets up build configuration for the PCK application, including source directory scanning, executable creation, library linking, and installation settings. Configures the target to be organized in the GEOGRAM/Programs folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/pck/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_NAME pck)\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Compute RVD Executable with CMake\nDESCRIPTION: This CMake script sets up the 'compute_RVD' executable. It defines the project name, collects source files, adds the executable using a custom command, links against the 'geogram' library, and sets properties for organization in IDEs.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/compute_RVD/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME compute_RVD)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Boolean Operations Executable Build in CMake\nDESCRIPTION: Configures the build settings for a boolean operations executable. Sets up the executable name, scans for source files in the current directory, links against the geogram library, and organizes the target in the GEOGRAM/Examples folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/boolean_operations/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_NAME boolean_op)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Geogram Delaunay2d Demo Build\nDESCRIPTION: Sets up the build configuration for a Geogram demo application. Includes OpenGL dependencies, configures source files, creates an executable, and links necessary libraries including geogram_gfx and GLFW.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/graphics/demo_Delaunay2d/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/opengl.cmake)\nset(APP_NAME geogram_demo_Delaunay2d)\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram_gfx geogram ${GLFW_LIBRARIES})\ninstall_runtime_targets(${APP_NAME})\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNL Basic Example Build with CMake\nDESCRIPTION: This CMake script configures the build for an OpenNL basic example. It sets the application name, adds source files, creates an executable, links against the Geogram library, and sets project properties.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/opennl_basic_example/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME opennl_basic_example)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Hexdom Pipeline\nDESCRIPTION: Configures a CMake build target for the hexdom_pipeline executable. Sets up source directories, links required libraries (exploragram and geogram), and organizes the target within the GEOGRAM/Examples folder structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/exploragram/hexdom_pipeline/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_NAME hexdom_pipeline)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} exploragram geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring test_expansion_nt Executable in CMake for GEOGRAM\nDESCRIPTION: This CMake script sets up the test_expansion_nt executable by collecting source files from the current directory, creating the executable with a custom command (vor_add_executable), linking it against the geogram library, and organizing it in the GEOGRAM/Tests folder in the IDE.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_expansion_nt/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_expansion_nt ${SOURCES})\ntarget_link_libraries(test_expansion_nt geogram)\n\nset_target_properties(test_expansion_nt PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNL Mesh Smoothing Application with CMake\nDESCRIPTION: Defines a CMake build configuration for the 'opennl_mesh_smooth' application. The script collects all source files from the current directory, creates an executable target, links it with the geogram library, and organizes it within the 'GEOGRAM/Examples' folder in the IDE project structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/opennl_mesh_smooth/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_NAME opennl_mesh_smooth)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building OpenNL LSCM Example with CMake\nDESCRIPTION: This snippet configures a CMake build for the 'opennl_LSCM' executable. It gathers all source files from the current directory, creates the executable using a custom 'vor_add_executable' function, links against the 'geogram' library, and sets the IDE folder property for organization.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/opennl_LSCM/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME opennl_LSCM)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Manifold Harmonics\nDESCRIPTION: Configures CMake build settings for the manifold_harmonics executable. Sets up the application name, adds source files from the current directory, links against the geogram library, and organizes the target in the GEOGRAM/Examples folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/manifold_harmonics/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_NAME manifold_harmonics)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake Configuration\nDESCRIPTION: CMake directives that add the hexdom_pipeline and compute_OTM subdirectories to the build process. These commands tell CMake to look for CMakeLists.txt files in these directories and process them as part of the project build.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/exploragram/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(hexdom_pipeline)\nadd_subdirectory(compute_OTM)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geogram Intersect Example with CMake\nDESCRIPTION: This CMake script configures the 'intersect' example application for the Geogram project. It sets the application name, collects source files, creates an executable, links against the Geogram library, and sets project organization properties.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/intersect/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME intersect)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring simple_raytrace Example in CMake for GEOGRAM\nDESCRIPTION: This CMake script configures a simple raytracing example application. It sets the application name, collects all source files from the current directory, creates an executable using a custom GEOGRAM command, links it with the geogram library, and organizes it in the GEOGRAM/Examples folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/simple_raytrace/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME simple_raytrace)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring compute_OTM Executable Build in CMake\nDESCRIPTION: This CMake configuration sets up the compute_OTM executable by collecting source files from the current directory, adding the executable to the build system, and configuring appropriate library dependencies. It includes conditional linking based on whether GEOGRAM_WITH_VORPALINE is enabled.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/exploragram/compute_OTM/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_NAME compute_OTM)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\n\nif(GEOGRAM_WITH_VORPALINE)\nadd_definitions(-DGEOGRAM_WITH_VORPALINE)\ntarget_link_libraries(${APP_NAME} exploragram geogram vorpalib)\nelse()\ntarget_link_libraries(${APP_NAME} exploragram geogram)\nendif()\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building compute_CSG Application with CMake\nDESCRIPTION: This CMake script configures the compute_CSG application build process. It sets the application name, collects source files from the current directory, creates an executable, links against the geogram library, and organizes the project structure by placing the application in the 'GEOGRAM/Examples' folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/geogram/compute_CSG/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME compute_CSG)\n\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Examples\")\n```\n\n----------------------------------------\n\nTITLE: Building and Installing SuperLU Library\nDESCRIPTION: Creates the SuperLU library target, links required dependencies, and sets up installation rules for library and header files using GNUInstallDirs for standard paths.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/SUPERLU/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(superlu ${sources} ${HEADERS})\n\ntarget_link_libraries(superlu ${BLAS_LIB} m)\nset_target_properties(superlu PROPERTIES\n  VERSION ${PROJECT_VERSION} SOVERSION ${VERSION_MAJOR}\n  )\n\ninclude(GNUInstallDirs)\n\ninstall(TARGETS superlu\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\ninstall(FILES ${headers}\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test and Benchmark Subdirectories in CMake\nDESCRIPTION: This CMake code snippet adds multiple subdirectories to the project build. These subdirectories contain various tests and benchmarks for different components of the project, including nearest neighbor search, convex cell operations, loading performance, concurrency mechanisms, numerical methods, and geometry processing algorithms.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(test_nn_search)\nadd_subdirectory(test_convex_cell)\nadd_subdirectory(bench_load)\nadd_subdirectory(test_locks)\nadd_subdirectory(test_expansion_nt)\nadd_subdirectory(test_HLBFGS)\nadd_subdirectory(test_RVC)\nadd_subdirectory(test_logger)\nadd_subdirectory(test_CDT_2d)\nadd_subdirectory(test_geofile)\nadd_subdirectory(test_mesh_syntaxic_sugar)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Cholmod Support\nDESCRIPTION: Adds optional support for Cholmod library if enabled and found in the system.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/contrib/topopt/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Link to Cholmod\nIf (ENABLE_CHOLMOD)\nFind_Package (SuiteSparse)\nEndif ()\nIf (CHOLMOD_FOUND)\nTarget_Include_Directories(${PROJECT_NAME} PUBLIC ${CHOLMOD_INCLUDE_DIR})\nTarget_Link_Libraries (${PROJECT_NAME} ${CHOLMOD_LIBRARY})\nTarget_Compile_Definitions (${PROJECT_NAME} PUBLIC -DUSE_CHOLMOD)\nEndif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a 2D Constrained Delaunay Triangulation Test in CMake\nDESCRIPTION: This CMake script configures a test executable for 2D Constrained Delaunay Triangulation. It collects source files from the current directory, creates an executable named test_CDT_2d, links it with the geogram library, and organizes it into the GEOGRAM/Tests folder in IDEs that support folder organization.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_CDT_2d/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_CDT_2d ${SOURCES})\ntarget_link_libraries(test_CDT_2d geogram)\n\nset_target_properties(test_CDT_2d PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Adding ImGui Core Source Files\nDESCRIPTION: Explicitly adds ImGui core source files to the library target including the main implementation, demo, drawing, tables, widgets, and C++ standard library integration.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(\n  geogram_gfx_third_party PRIVATE\n    imgui/imgui.cpp\n    imgui/imgui_demo.cpp\n    imgui/imgui_draw.cpp\n    imgui/imgui_tables.cpp\n    imgui/imgui_widgets.cpp\n    imgui/misc/cpp/imgui_stdlib.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for CGAL and GEOGRAM\nDESCRIPTION: Sets up include directories for the project, adding the current directory, parent directory, and include subdirectory to the include path.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_expansion_nt/CGAL/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories (BEFORE \"./\" \"../\" \"./include\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building test_RVC Executable with CMake\nDESCRIPTION: This CMake snippet configures the test_RVC executable by setting up source directories, adding the executable, linking required libraries, and setting target properties. It uses custom commands like aux_source_directories and vor_add_executable, likely defined elsewhere in the project.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_RVC/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_RVC ${SOURCES})\ntarget_link_libraries(test_RVC geogram)\n\nset_target_properties(test_RVC PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Logger Executable in CMake for Geogram Project\nDESCRIPTION: This CMake code configures the test_logger executable by adding source files from the current directory, creating the executable, linking it with the geogram library, and setting its folder property for organization in IDEs.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_logger/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_logger ${SOURCES})\ntarget_link_libraries(test_logger geogram)\n\nset_target_properties(test_logger PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories and Building test_nn_search Executable in CMake\nDESCRIPTION: This CMake script collects source files from the current directory and the ANN third-party library, then configures and builds the test_nn_search executable. It sets compiler-specific warning suppression flags for Clang, links the executable against the geogram library, and organizes it into the GEOGRAM/Tests folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_nn_search/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\n\nvor_reset_warning_level()\n\n#if(\n#    \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n#    \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\"\n#)\n#  add_definitions(-Wno-zero-as-null-pointer-constant)\n#  add_definitions(-Wno-suggest-override)\n#  add_definitions(-Wno-suggest-destructor-override)\n#  add_definitions(-Wno-weak-vtables)\n#endif()\n\naux_source_directories(SOURCES \"\" ./third_party/ANN)\n\nvor_add_executable(test_nn_search ${SOURCES})\ntarget_link_libraries(test_nn_search geogram)\n\nset_target_properties(test_nn_search PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Vorpastat Application with CMake\nDESCRIPTION: This CMake script configures the Vorpastat application. It sets the application name, collects source files, creates an executable, links it with the GEOGRAM library, and sets the project folder for organization in IDEs.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/vorpastat/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME vorpastat)\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for Non-Windows Systems in CMake\nDESCRIPTION: Sets compiler flags to disable specific warnings on non-Windows platforms using CMake's add_definitions directive. These warnings are related to unused variables, parameters, sign comparisons, strict aliasing, and missing field initializers.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\nelse()\n   add_definitions(-Wno-unused \n                   -Wno-unused-parameter \n\t\t   -Wno-sign-compare \n\t\t   -Wno-strict-aliasing\n\t\t   -Wno-missing-field-initializers\n\t           )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring the HLBFGS Test Executable in CMake\nDESCRIPTION: This CMake snippet configures the test_HLBFGS executable by gathering source files, creating the executable, linking it with the geogram library, and setting its properties within the project structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_HLBFGS/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_HLBFGS ${SOURCES})\ntarget_link_libraries(test_HLBFGS geogram)\n\nset_target_properties(test_HLBFGS PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Locks Executable in CMake\nDESCRIPTION: Sets up a test executable for locks testing in Geogram. Configures source directories, creates the executable, links against the geogram library, and sets project organization properties.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_locks/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_locks ${SOURCES})\ntarget_link_libraries(test_locks geogram)\n\nset_target_properties(test_locks PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring test_convex_cell CMake Build\nDESCRIPTION: Sets up CMake build configuration for the test_convex_cell executable. Collects source files from current directory, creates the executable, links against the geogram library, and organizes it in the GEOGRAM/Tests folder structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_convex_cell/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_convex_cell ${SOURCES})\ntarget_link_libraries(test_convex_cell geogram)\n\nset_target_properties(test_convex_cell PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building test_geofile Executable with CMake\nDESCRIPTION: This CMake snippet collects source files from the current directory, creates the test_geofile executable, links it against the geogram library, and organizes it into the GEOGRAM/Tests folder in the IDE project structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_geofile/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_geofile ${SOURCES})\ntarget_link_libraries(test_geofile geogram)\n\nset_target_properties(test_geofile PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building MCC Executable with CMake\nDESCRIPTION: Sets up the build configuration for the MCC program, including resetting warning levels, defining source directories, setting include paths, and linking against the geogram library. The executable is placed in the 'GEOGRAM/Programs' folder.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/fpg/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nvor_reset_warning_level()\nset(APP_NAME mcc)\naux_source_directories(SOURCES \"\" .)\ninclude_directories(.)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Precision Support\nDESCRIPTION: Conditionally adds single precision (float) support files when enable_single is set. Includes specialized headers and implementation files for single precision operations.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/SUPERLU/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(enable_single)\n  list(APPEND headers\n    slu_sdefs.h\n  )\n\n  list(APPEND sources\n    slacon2.c\n    smach.c\n    sgssv.c\n    sgssvx.c\n    ssp_blas2.c\n    ssp_blas3.c\n    sgscon.c\n    slangs.c\n    sgsequ.c\n    slaqgs.c\n    spivotgrowth.c\n    sgsrfs.c\n    sgstrf.c\n    sgstrs.c\n    scopy_to_ucol.c\n    ssnode_dfs.c\n    ssnode_bmod.c\n    spanel_dfs.c\n    spanel_bmod.c\n    sreadhb.c\n    sreadrb.c\n    sreadtriple.c\n    scolumn_dfs.c\n    scolumn_bmod.c\n    spivotL.c\n    spruneL.c\n    smemory.c\n    sutil.c\n    smyblas2.c\n    sgsisx.c\n    sgsitrf.c\n    sldperm.c\n    ilu_sdrop_row.c\n    ilu_ssnode_dfs.c\n    ilu_scolumn_dfs.c\n    ilu_spanel_dfs.c\n    ilu_scopy_to_ucol.c\n    ilu_spivotL.c\n    sdiagonal.c\n  )\n  set_source_files_properties(smach.c PROPERTIES COMPILE_FLAGS -O0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building vorpacomp Executable with CMake\nDESCRIPTION: This CMake snippet sets up the vorpacomp executable by defining its name, gathering source files from the current directory, creating the executable, linking it with the geogram library, and organizing it within the GEOGRAM/Programs folder structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/bin/vorpacomp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME vorpacomp)\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} geogram)\n\nset_target_properties(${APP_NAME} PROPERTIES FOLDER \"GEOGRAM/Programs\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Legacy Numerics Module in CMake\nDESCRIPTION: Conditionally adds the numerics subdirectory to the build if the GEOGRAM_WITH_LEGACY_NUMERICS option is enabled. This handles BLAS, LAPACK, CHOLDMOD, SUPERLU and ARPACK libraries used as plug-ins by OpenNL.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(GEOGRAM_WITH_LEGACY_NUMERICS)\n   add_subdirectory(numerics)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building test_mesh_syntaxic_sugar Executable in CMake\nDESCRIPTION: This CMake snippet configures the test_mesh_syntaxic_sugar executable by collecting source files from the current directory, creating the executable target, linking it against the geogram library, and organizing it in the GEOGRAM/Tests folder in the IDE.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_mesh_syntaxic_sugar/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(test_mesh_syntaxic_sugar ${SOURCES})\ntarget_link_libraries(test_mesh_syntaxic_sugar geogram)\n\nset_target_properties(test_mesh_syntaxic_sugar PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project Configuration\nDESCRIPTION: Initializes CMake project configuration with minimum version requirement, module path setup, and default build type settings.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/contrib/topopt/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nCMake_Minimum_Required(VERSION 3.0)\n\n# Module path\nSet(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/\")\n\nIf (EMSCRIPTEN)\nInclude(SetEmscripten)\nEndif ()\n\n# Project name\nProject(topopt_demo)\n\n# Default to Release mode\nIf (NOT CMAKE_BUILD_TYPE)\nMessage (STATUS \"No build type selected, default to Release\")\nSet (CMAKE_BUILD_TYPE \"Release\")\nEndif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Targets\nDESCRIPTION: Creates custom documentation targets with different levels of detail for the development kit. It utilizes the add_doc_target function which is likely defined in the included doxygen.cmake file.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/doc/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_doc_target(devkit)\nadd_doc_target(devkit-full)\nadd_doc_target(devkit-internal)\nadd_doc_target(devkit-internal-light)\n```\n\n----------------------------------------\n\nTITLE: Configuring Geogram Benchmark Build with CMake\nDESCRIPTION: Sets up a CMake build configuration for the bench_load executable. Scans source directories, creates the executable, links against the geogram library, and organizes it within the GEOGRAM/Tests folder structure.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/bench_load/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nvor_add_executable(bench_load ${SOURCES})\ntarget_link_libraries(bench_load geogram)\n\nset_target_properties(bench_load PROPERTIES FOLDER \"GEOGRAM/Tests\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Emscripten Configuration\nDESCRIPTION: Configures C++11 standard requirement and includes optional Emscripten-specific settings for web deployment.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/examples/contrib/topopt/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Use C++11\nSet_Target_Properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 11)\nSet_Target_Properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD_REQUIRED ON)\n\n# Embed files\nif (EMSCRIPTEN)\n#set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS \"--preload-file ${CMAKE_CURRENT_SOURCE_DIR}/assets/@/\")\n#set_target_properties(${PROJECT_NAME} PROPERTIES SUFFIX \".html\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Based on Directory Structure\nDESCRIPTION: Configures project name as either Vorpaline or Geogram based on the presence of the vorpalib directory. Sets project version using the previously defined version variables.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(IS_DIRECTORY ${CMAKE_SOURCE_DIR}/src/lib/vorpalib)\nproject(Vorpaline VERSION \"${VORPALINE_VERSION_PLAIN}\")\nelse()\nproject(Geogram VERSION \"${VORPALINE_VERSION_PLAIN}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files with Auxiliary Directories\nDESCRIPTION: Collects source files from various directories including the main directory, GLAD, ImGuiColorTextEdit, and conditionally includes Lua bindings if enabled.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"            .)\naux_source_directories(SOURCES \"Source Files\\\\glad\"      glad)\naux_source_directories(SOURCES \"Source Files\\\\ImGuiColorTextEdit\" ImGuiColorTextEdit )\n\nif(GEOGRAM_WITH_LUA)\n   aux_source_directories(SOURCES \"Source Files\\\\imgui_lua_bindings\" imgui_lua_bindings)\nendif()\n\nadd_library(geogram_gfx_third_party OBJECT ${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack for Package Generation\nDESCRIPTION: Sets up CPack configuration for building distribution packages. Defines package naming, versioning, components, and generator-specific settings for different package formats like DEB, ZIP, and TGZ.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_PACKAGE_NAME ${CMAKE_PROJECT_NAME})\nset(CPACK_SYSTEM_NAME ${VORPALINE_OS})\nset(CPACK_PACKAGE_VENDOR \"INRIA - ALICE\")\n\n\nif(${GEOGRAM_WITH_VORPALINE})\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A flexible mesh generator\")\nelse()\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"fast, simple and easy-to-use primitives for geometric programming\")\nendif()\n\nset(CPACK_PACKAGE_VERSION_MAJOR ${VORPALINE_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${VORPALINE_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${VORPALINE_VERSION_PATCH})\nset(CPACK_PACKAGE_VERSION ${VORPALINE_VERSION})\nset(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION})\nset(CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY true)\n\nif(CPACK_GENERATOR STREQUAL \"DEB\")\nset(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})\nset(CPACK_PACKAGE_CONTACT Bruno.Levy@inria.fr)\n# set(CPACK_PACKAGE_DEPENDS \"libglfw3 (>= 3.2-1), libc6 (>= 2.22-11), libstdc++ (>= 6.1.1-4)\")\n#   TODO: use objdump -p | grep NEEDED to automate...\n#   or GET_PROPERTY(result GLOBAL ENABLED_FEATURES)  (successful FIND_PACKAGE())\nendif()\n\nif(NOT DEFINED CPACK_GENERATOR)\nif(WIN32)\nset(CPACK_GENERATOR ZIP)\nelse()\nset(CPACK_GENERATOR TGZ)\nendif()\nendif()\n\n# Enable component-based packaging for archive generators (TGZ, ZIP)\nset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\n\nset(CPACK_COMPONENTS_ALL runtime devkit devkit-full doc-devkit doc-devkit-full)\nset(CPACK_COMPONENTS_GROUPING \"IGNORE\")\n\nset(CPACK_COMPONENT_RUNTIME_DISPLAY_NAME \"Vorpaline Application\")\nset(CPACK_COMPONENT_RUNTIME_GROUP \"Runtime\")\n\nset(CPACK_COMPONENT_DEVKIT_DISPLAY_NAME \"Vorpaline Developer Kit\")\nset(CPACK_COMPONENT_DEVKIT_GROUP \"Development\")\n\nset(CPACK_COMPONENT_DEVKIT-FULL_DISPLAY_NAME \"Vorpaline Full Developer Kit\")\nset(CPACK_COMPONENT_DEVKIT-FULL_GROUP \"Development\")\n\nset(CPACK_COMPONENT_DOC-DEVKIT_DISPLAY_NAME \"Vorpaline API Developer Kit Documentation\")\nset(CPACK_COMPONENT_DOC-DEVKIT_GROUP \"Documentation\")\n\nset(CPACK_COMPONENT_DOC-DEVKIT-FULL_DISPLAY_NAME \"Vorpaline Full Developer Kit Documentation\")\nset(CPACK_COMPONENT_DOC-DEVKIT-FULL_GROUP \"Documentation\")\n\nset(CPACK_COMPONENT_DOC-DEVKIT-INTERNAL_DISPLAY_NAME \"Vorpaline Internal Developer Kit Documentation\")\nset(CPACK_COMPONENT_DOC-DEVKIT-INTERNAL_GROUP \"Documentation\")\n```\n\n----------------------------------------\n\nTITLE: Including Doxygen Configuration in CMake\nDESCRIPTION: Imports the Doxygen-specific CMake configuration for the project and defines the minimum required CMake version.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/doc/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${PROJECT_SOURCE_DIR}/cmake/doxygen.cmake)\n\ncmake_minimum_required(VERSION 3.5...3.30)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uninstall Target\nDESCRIPTION: Creates an uninstall target that can be used to remove the installed files. This is configured before any subdirectories to ensure it takes precedence over GLFW's uninstall target.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n\"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\nIMMEDIATE @ONLY)\n\nadd_custom_target(uninstall\nCOMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warning Flags for Clang\nDESCRIPTION: Sets specific warning suppression flags for Clang and AppleClang compilers to prevent unnecessary warnings during compilation.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(\n    ${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\" OR\n    ${CMAKE_CXX_COMPILER_ID} STREQUAL \"AppleClang\"\n)\n  add_definitions(-Wno-unknown-warning-option)\n  add_definitions(-Wno-zero-as-null-pointer-constant)\n  add_definitions(-Wno-unused-parameter)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Exports\nDESCRIPTION: Sets up the geogram_gfx_EXPORTS definition when building as a shared library to ensure proper symbol visibility in the object library.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Since we are in a CMake \"object library\" (i.e.,\n# a set of object files compiled with same options),\n# the automatically generated geogram_gfx_EXPORTS\n# pre-processor definition of the parent library\n# is not automatically inherited (this is why\n# I set it manually)\nif(BUILD_SHARED_LIBS)\n   add_definitions(-Dgeogram_gfx_EXPORTS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration for Android\nDESCRIPTION: Sets up Android-specific include directories for the native app glue, which is required for Android platform integration.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n#  target_sources(\n#    geogram_gfx_third_party PRIVATE\n#       imgui/backends/imgui_impl_android.cpp\n#  )\n  target_include_directories(geogram_gfx_third_party PRIVATE\n    ${ANDROID_NDK}/sources/android/native_app_glue\n  )\nelse()\n  target_sources(\n    geogram_gfx_third_party PRIVATE\n       imgui/backends/imgui_impl_glfw.cpp\n  )\n  target_include_directories(\n    geogram_gfx_third_party PRIVATE\n    ${PROJECT_SOURCE_DIR}/src/lib/third_party/glfw/include\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Numerical Libraries in CMake\nDESCRIPTION: Collects source files from various numerical library directories including LIBF2C, CBLAS, CLAPACK, SUPERLU, ARPACK, and ARPACK_UTIL using the aux_source_directories function.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\" .)\naux_source_directories(SOURCES \"Source Files\\\\LIBF2C\" LIBF2C)\naux_source_directories(SOURCES \"Source Files\\\\CBLAS\" CBLAS)\naux_source_directories(SOURCES \"Source Files\\\\CLAPACK\" CLAPACK)\naux_source_directories(SOURCES \"Source Files\\\\SUPERLU\" SUPERLU)\naux_source_directories(SOURCES \"Source Files\\\\ARPACK\" ARPACK)\naux_source_directories(SOURCES \"Source Files\\\\ARPACK_UTIL\" ARPACK_UTIL)\n```\n\n----------------------------------------\n\nTITLE: Including ImGui OpenGL3 Backend\nDESCRIPTION: Adds the ImGui OpenGL3 backend implementation to the target, which is needed for rendering ImGui with OpenGL 3+ contexts.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(\n  geogram_gfx_third_party PRIVATE\n    imgui/backends/imgui_impl_opengl3.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting ImGui Include Directories\nDESCRIPTION: Configures the include directories for ImGui to ensure the compiler can find the necessary header files during build.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  geogram_gfx_third_party PRIVATE\n  ${PROJECT_SOURCE_DIR}/src/lib/geogram_gfx/third_party/imgui\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up SuperLU Core Headers and Sources\nDESCRIPTION: Defines the core header and source files needed for the SuperLU library base functionality. Sets special compilation flags for timer implementation.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/SUPERLU/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(headers \n    supermatrix.h\n    slu_Cnames.h\n    slu_dcomplex.h\n    slu_scomplex.h\n    slu_util.h\n    superlu_enum_consts.h)\n\nset(sources\n  superlu_timer.c\n  util.c\n  memory.c\n  get_perm_c.c\n  mmd.c\n  sp_coletree.c\n  sp_preorder.c\n  sp_ienv.c\n  relax_snode.c\n  heap_relax_snode.c\n  colamd.c\n  ilu_relax_snode.c\n  ilu_heap_relax_snode.c\n  mark_relax.c\n  mc64ad.c\n  qselect.c\n  input_error.c)\nset_source_files_properties(superlu_timer.c PROPERTIES COMPILE_FLAGS -O0)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Organization\nDESCRIPTION: Sets properties on the target to place it in the \"GEOGRAM\" folder, which helps with IDE organization of the build targets.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(\n    geogram_gfx_third_party PROPERTIES\n    FOLDER \"GEOGRAM\"\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling 3D Delaunay Triangulation Program with CMake\nDESCRIPTION: Commands to compile the 3D Delaunay triangulation program using CMake and make. It sets the build type to Release for optimal performance.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_expansion_nt/CGAL/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncmake . -D CMAKE_BUILD_TYPE=Release\nmake\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the Third-Party Object Library\nDESCRIPTION: Creates the geogram_third_party object library using the collected source files and applies Android-specific configuration when targeting that platform.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram/third_party/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(geogram_third_party OBJECT ${SOURCES})\n\nif(ANDROID)\n  target_include_directories(geogram_third_party PRIVATE\n    ${ANDROID_NDK}/sources/android/native_app_glue\n  )\n  message(STATUS \"building for Android\")\nendif()  \n\n\nset_target_properties(\n    geogram_third_party PROPERTIES\n    FOLDER \"GEOGRAM\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running 3D Delaunay Triangulation Benchmark\nDESCRIPTION: Command to run the 3D Delaunay triangulation benchmark. It uses an input file 'ocean_r.xyz' and specifies the number of times (10) to construct the triangulation for timing measurements.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_expansion_nt/CGAL/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncat ocean_r.xyz ./benchmark 10\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Files\nDESCRIPTION: Sets up the installation of documentation files and directories. Includes conditional installation of README and LICENSE for the Vorpaline component and installation of generated documentation to appropriate directories.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/doc/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(GEOGRAM_WITH_VORPALINE)\ninstall(FILES README.txt DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT runtime)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT runtime OPTIONAL)\nendif()\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/VERSION.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/geogram COMPONENT runtime OPTIONAL)\n\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/devkit/html DESTINATION ${CMAKE_INSTALL_DOCDIR}/devkit COMPONENT doc-devkit OPTIONAL)\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/devkit-full/html DESTINATION ${CMAKE_INSTALL_DOCDIR}/devkit COMPONENT doc-devkit-full OPTIONAL)\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/devkit-internal/html DESTINATION ${CMAKE_INSTALL_DOCDIR}/devkit COMPONENT doc-devkit-internal OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Creating CGAL Program from Source Files\nDESCRIPTION: Creates an executable from benchmark.cpp and MultiPrecision_psm.cpp using CGAL's single source program creation function.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_expansion_nt/CGAL/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncreate_single_source_cgal_program( benchmark.cpp ../MultiPrecision_psm.cpp )\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Exports and Lua Dynamic Loading\nDESCRIPTION: Sets up compiler definitions for shared library builds, handling platform-specific requirements for exports and Lua dynamic loading capabilities.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram/third_party/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n   add_definitions(-Dgeogram_EXPORTS)\n   if(WIN32)\n# For Windows, nothing to do, because\n# LUA_DL_DLL is by-default activated in luaconf.h\n   else()\n      add_definitions(-DLUA_USE_DLOPEN)   \n   endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Excluding iOS-Incompatible Source File in CMake\nDESCRIPTION: Removes a specific source file (system_.c) from the compilation list because it uses the system() function which is not available on iOS.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# This file uses system() which is not available on iOS. The caller function is not used elsewhere\n# so just remove source file from the set of files to compile\nlist(REMOVE_ITEM SOURCES \"LIBF2C/system_.c\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Include Directories for Third-Party Libraries\nDESCRIPTION: Configures include directories for third-party libraries, specifically adding the libMeshb sources directory to the include path.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram/third_party/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n    ${PROJECT_SOURCE_DIR}/src/lib/geogram/third_party/libMeshb/sources\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings and Definitions for Windows\nDESCRIPTION: Sets up compiler definitions and warning suppressions specifically for Windows builds. Disables specific warnings related to hash deprecation and third-party library issues.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram/third_party/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS)\n  add_definitions(/wd4005) # libMeshb redefines _CRT_SECURE_NO_WARNINGS\n  add_definitions(/wd4244) # libMeshb has int64->int conversion (calls to GmfStatKw)\nelse()\n  add_definitions(-Wno-deprecated) # PoissonRecon uses hash map\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    add_definitions(-Wno-maybe-uninitialized)\n    add_definitions(-Wno-clobbered)    # libMeshb\n    add_definitions(-Wno-sign-compare) # libMeshb\n  endif()\n  if(\n      \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n      \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\"\n  )\n    add_definitions(-Wno-unknown-warning-option)\n    add_definitions(-Wno-zero-as-null-pointer-constant)\n    add_definitions(-Wno-sign-compare)             # libMeshb\n    add_definitions(-Wno-string-plus-int)          # lua\n    add_definitions(-Wno-unused-but-set-variable)  # xatlas\n    add_definitions(-Wno-deprecated-non-prototype) # triangle\n  endif()\n  if(ANDROID)\n    add_definitions(-Wno-unused-but-set-variable)\n    add_definitions(-Wno-implicit-function-declaration)\n    add_definitions(-Wno-unused-comparison)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Notice for Geogram\nDESCRIPTION: Standard BSD-style license terms detailing the conditions for redistribution and use of the software. Includes copyright holder information (Inria), permissions, disclaimers, and contact information for Bruno Levy.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/tools/header.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/*\n*  Copyright (c) 2000-2022 Inria\n*  All rights reserved.\n*\n*  Redistribution and use in source and binary forms, with or without\n*  modification, are permitted provided that the following conditions are met:\n*\n*  * Redistributions of source code must retain the above copyright notice,\n*  this list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation\n*  and/or other materials provided with the distribution.\n*  * Neither the name of the ALICE Project-Team nor the names of its\n*  contributors may be used to endorse or promote products derived from this\n*  software without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n*  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*\n*  Contact: Bruno Levy\n*\n*     https://www.inria.fr/fr/bruno-levy\n*\n*     Inria,\n*     Domaine de Voluceau,\n*     78150 Le Chesnay - Rocquencourt\n*     FRANCE\n*\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Numerical Libraries in CMake\nDESCRIPTION: Configures the include path for numerical libraries in the Geogram project, pointing to the third-party numerics directory.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${GEOGRAM_SOURCE_DIR}/src/lib/third_party/numerics/INCLUDE)\n```\n\n----------------------------------------\n\nTITLE: Generating ImGui Bindings Iterator File\nDESCRIPTION: Command to generate the imgui_iterator.cpp file, which contains information about ImGui functions extracted from imgui.h.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/imgui_lua_bindings/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./generate_imgui_bindings.pl <../imgui/imgui.h >imgui_iterator.cpp\n```\n\n----------------------------------------\n\nTITLE: Disabling Compiler Warnings for Generated Code in CMake\nDESCRIPTION: Disables compiler warnings for platform-specific environments. For Windows, it replaces warning level flags with /W0. For non-Windows platforms, it adds the -w flag to disable all warnings, and for non-Emscripten platforms it also adds -fcommon to merge uninitialized variable declarations.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/third_party/numerics/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvor_reset_warning_level()\n\n#Disable all warnings (for this generated code, we got too many of them)\nif(WIN32)\n#  code below did not work:\n#    remove_definitions(/W3)\n#    add_definitions(/W0)\n#  so I'm doing that instead (I know it is not good CMake practice,\n#  but I know no other option...)\n    string(REGEX REPLACE \"/W[0-4]\" \"/W0\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\nelse()\n  if(VORPALINE_PLATFORM STREQUAL \"Emscripten-clang\")\n# -fcommon is broken in latest clang\n     add_definitions(-w)\n  else()\n# -fcommon: merges uninitialized variables declarations (supposes that the\n#  'extern' keyword was missing, avoid duplicated symbols errors in legacy\n#  code that was not properly declaring extern variables).\n     add_definitions(-w -fcommon)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Pointers in ImGui Lua Bindings\nDESCRIPTION: Shows how to handle C++ pointer arguments in Lua using multiple return values, exemplified by the ShowTestWindow function.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/imgui_lua_bindings/README.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nopened = imgui.ShowTestWindow(opened)\n```\n\n----------------------------------------\n\nTITLE: Handling ImVec2 Arguments in Lua\nDESCRIPTION: Demonstrates how ImVec2 arguments are expanded into separate variables in Lua, using the SetNextWindowPos function as an example.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/imgui_lua_bindings/README.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nimgui.SetNextWindowPos(100, 50)\n```\n\n----------------------------------------\n\nTITLE: Calling ImGui RadioButton in Lua\nDESCRIPTION: Demonstrates how to call the ImGui RadioButton function from Lua, which is similar to the C++ version but adapted for Lua syntax.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/imgui_lua_bindings/README.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nret = imgui.RadioButton(\"String goes here\", isActive)\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Information File\nDESCRIPTION: Configures the VERSION.txt file by copying from VERSION.txt.in and replacing variables with their values.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/doc/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(VERSION.txt.in VERSION.txt @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Setting C++14 and AVX2 Compiler Flags\nDESCRIPTION: Configures compiler flags for the project, enabling C++14 standard, AVX2 instruction set for advanced vector extensions, and disabling floating-point contraction operations.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/tests/test_expansion_nt/CGAL/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++14 -mavx2 -ffp-contract=off\")\n```\n\n----------------------------------------\n\nTITLE: Copying RobotFramework Wrapper Scripts in CMake\nDESCRIPTION: Iterates through a list of test script names and uses configure_file_with_native_paths to copy each script from the source to the build directory. The script extension is determined by the SHELL_SUFFIX variable which likely varies by platform.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/tests/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(test_scripts testenv runpybot runride)\n\nforeach(script ${test_scripts})\nconfigure_file_with_native_paths(\n${PROJECT_SOURCE_DIR}/tools/${script}.${SHELL_SUFFIX}.in\n${PROJECT_BINARY_DIR}/tests/${script}.${SHELL_SUFFIX}\nAUTODETECT\nOPTIONS @ONLY\n)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Copying Valgrind Suppression File for Unix Systems in CMake\nDESCRIPTION: Conditionally copies the valgrind suppression file from the source to the build directory only on Unix systems. Uses the standard configure_file CMake command with the COPYONLY option to copy without substitution.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/tests/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\nconfigure_file(\n${PROJECT_SOURCE_DIR}/tools/valgrind.supp\n${PROJECT_BINARY_DIR}/tests/valgrind.supp\nCOPYONLY\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Android-Specific Compiler Flags\nDESCRIPTION: Adds Android-specific compiler flags to suppress unused variable warnings when building for Android platforms.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n  add_definitions(-Wno-unused-variable)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using DrawList Functions in Lua\nDESCRIPTION: Shows how to use DrawList functions in Lua, which are prefixed with 'DrawList_'. The example uses AddLine function with color specified in hexadecimal.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/imgui_lua_bindings/README.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nimgui.DrawList_AddLine(imgui.DrawList_AddLine(minX, minY, maxX, maxY, 0xFF0000FF, 2)\n```\n\n----------------------------------------\n\nTITLE: Using ImGui Begin Function in Lua\nDESCRIPTION: Illustrates the usage of the ImGui Begin function in Lua, which returns multiple values to handle both the draw state and window open state.\nSOURCE: https://github.com/brunolevy/geogram/blob/main/src/lib/geogram_gfx/third_party/imgui_lua_bindings/README.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nshoulddraw, p_opened = imgui.Begin(\"Name\", p_opened)\n```"
  }
]