[
  {
    "owner": "patrick-kidger",
    "repo": "torchtyping",
    "content": "TITLE: Demonstrating Basic Tensor Shape Annotation in Python\nDESCRIPTION: Shows the transformation from a standard tensor function with comments to one using torchtyping annotations. The function performs a batch outer product between two tensors.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef batch_outer_product(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor:\n    # x has shape (batch, x_channels)\n    # y has shape (batch, y_channels)\n    # return has shape (batch, x_channels, y_channels)\n\n    return x.unsqueeze(-1) * y.unsqueeze(-2)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef batch_outer_product(x:   TensorType[\"batch\", \"x_channels\"],\n                        y:   TensorType[\"batch\", \"y_channels\"]\n                        ) -> TensorType[\"batch\", \"x_channels\", \"y_channels\"]:\n\n    return x.unsqueeze(-1) * y.unsqueeze(-2)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example with Runtime Type Checking\nDESCRIPTION: Demonstrates how to use torchtyping with typeguard to perform runtime checking of tensor shapes. The example shows a function that adds two tensors with matching batch dimensions.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# EXAMPLE\n\nfrom torch import rand\nfrom torchtyping import TensorType, patch_typeguard\nfrom typeguard import typechecked\n\npatch_typeguard()  # use before @typechecked\n\n@typechecked\ndef func(x: TensorType[\"batch\"],\n         y: TensorType[\"batch\"]) -> TensorType[\"batch\"]:\n    return x + y\n\nfunc(rand(3), rand(3))  # works\nfunc(rand(3), rand(1))\n# TypeError: Dimension 'batch' of inconsistent size. Got both 1 and 3.\n```\n\n----------------------------------------\n\nTITLE: Basic Shape Checking with TorchTyping\nDESCRIPTION: Demonstrates basic tensor shape validation using TorchTyping, including fixed dimensions, dynamic batch dimensions, and wildcard dimensions.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef func(x: TensorType[\"batch\", 5],\n         y: TensorType[\"batch\", 3]):\n    # x has shape (batch, 5)\n    # y has shape (batch, 3)\n    # batch dimension is the same for both\n\ndef func(x: TensorType[2, -1, -1]):\n\t# x has shape (2, any_one, any_two)\n\t# -1 is a special value to represent any size.\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Dynamic Dimensions with TorchTyping\nDESCRIPTION: Demonstrates how to use TorchTyping to annotate tensors with multiple dynamic dimensions that maintain dimensional consistency between input and output tensors.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef func(x:  TensorType[\"dim1\": ..., \"dim2\": ...],\n         y:  TensorType[\"dim2\": ...]\n        ) -> TensorType[\"dim1\": ...]:\n    sum_dims = [-i - 1 for i in range(y.dim())]\n    return (x * y).sum(dim=sum_dims)\n```\n\n----------------------------------------\n\nTITLE: Checking Arbitrary Batch Dimensions with TorchTyping\nDESCRIPTION: Shows how to annotate tensors with arbitrary batch dimensions using ellipsis notation and named dimensions to ensure consistency between inputs.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef func(x: TensorType[..., 2, 3]):\n    # x has shape (..., 2, 3)\n\ndef func(x: TensorType[..., 2, \"channels\"],\n         y: TensorType[..., \"channels\"]):\n    # x has shape (..., 2, channels)\n    # y has shape (..., channels)\n    # \"channels\" is checked to be the same size for both arguments.\n\ndef func(x: TensorType[\"batch\": ..., \"channels_x\"],\n         y: TensorType[\"batch\": ..., \"channels_y\"]):\n    # x has shape (..., channels_x)\n    # y has shape (..., channels_y)\n    # the ... batch dimensions are checked to be of the same size.\n```\n\n----------------------------------------\n\nTITLE: Combined Shape and Dtype Checking with TorchTyping\nDESCRIPTION: Shows how to simultaneously check both tensor shape and data type using a single annotation.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef func(x: TensorType[3, 4, float]):\n    # x has shape (3, 4) and has dtype torch.float32\n```\n\n----------------------------------------\n\nTITLE: Return Value Checking with TorchTyping\nDESCRIPTION: Shows how to annotate function return types to validate tensor shapes for function outputs.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef func(x: TensorType[3, 4]) -> TensorType[()]:\n    # x has shape (3, 4)\n    # return has shape ()\n```\n\n----------------------------------------\n\nTITLE: Data Type Checking with TorchTyping\nDESCRIPTION: Demonstrates how to validate tensor data types using TorchTyping annotations.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef func(x: TensorType[float]):\n    # x has dtype torch.float32\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tensor Validation Extensions for TorchTyping\nDESCRIPTION: Shows how to create custom validation rules by extending TorchTyping's TensorDetail class, with an example that checks for a specific attribute value on tensors.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom torch import rand, Tensor\nfrom torchtyping import TensorDetail, TensorType\nfrom typeguard import typechecked\n\n# Write the extension\n\nclass FooDetail(TensorDetail):\n    def __init__(self, foo):\n        super().__init__()\n        self.foo = foo\n        \n    def check(self, tensor: Tensor) -> bool:\n        return hasattr(tensor, \"foo\") and tensor.foo == self.foo\n\n    # reprs used in error messages when the check is failed\n    \n    def __repr__(self) -> str:\n        return f\"FooDetail({self.foo})\"\n\n    @classmethod\n    def tensor_repr(cls, tensor: Tensor) -> str:\n        # Should return a representation of the tensor with respect\n        # to what this detail is checking\n        if hasattr(tensor, \"foo\"):\n            return f\"FooDetail({tensor.foo})\"\n       \telse:\n            return \"\"\n\n# Test the extension\n\n@typechecked\ndef foo_checker(tensor: TensorType[float, FooDetail(\"good-foo\")]):\n    pass\n\n\ndef valid_foo():\n    x = rand(3)\n    x.foo = \"good-foo\"\n    foo_checker(x)\n\n\ndef invalid_foo_one():\n    x = rand(3)\n    x.foo = \"bad-foo\"\n    foo_checker(x)\n\n\ndef invalid_foo_two():\n    x = rand(2).int()\n    x.foo = \"good-foo\"\n    foo_checker(x)\n```\n\n----------------------------------------\n\nTITLE: Named Tensor Dimension Checking with TorchTyping\nDESCRIPTION: Demonstrates how to validate dimensions in named tensors, checking both dimension names and sizes.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef func(x: TensorType[\"a\": 3, \"b\", is_named]):\n    # x has has names (\"a\", \"b\")\n    # x has shape (3, Any)\n```\n\n----------------------------------------\n\nTITLE: Tensor Layout Checking with TorchTyping\nDESCRIPTION: Shows how to validate tensor storage layouts, such as sparse tensors.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef func(x: TensorType[torch.sparse_coo]):\n    # x is a sparse tensor with layout sparse_coo\n```\n\n----------------------------------------\n\nTITLE: Running pytest with torchtyping integration\nDESCRIPTION: Command to run pytest with the torchtyping-patch-typeguard flag enabled, which automatically runs patch_typeguard() before tests for tensor type checking.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest --torchtyping-patch-typeguard\n```\n\n----------------------------------------\n\nTITLE: Installing torchtyping via pip\nDESCRIPTION: Command to install the torchtyping package using pip. Requires Python >=3.7 and PyTorch >=1.7.0, with typeguard <3.0.0 if used.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install torchtyping\n```\n\n----------------------------------------\n\nTITLE: Silencing flake8 Warnings for TorchTyping String Annotations\nDESCRIPTION: Shows how to handle flake8 warnings when using string-based tensor annotations by adding a type ignore comment to silence mypy errors.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom torchtyping import TensorType  # type: ignore\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing torchtyping in Development Mode\nDESCRIPTION: Commands to clone the forked repository and install the library in development mode. This allows changes to the code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username-here/torchtyping.git\ncd torchtyping\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Code Quality\nDESCRIPTION: Commands to install pre-commit and set up hooks that automatically check code formatting using Black and flake8 before commits.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pytest\nDESCRIPTION: Commands to install pytest and run the test suite to verify all tests pass before submitting changes.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest\npytest\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub Fork\nDESCRIPTION: Command to push local changes back to the forked repository on GitHub before creating a pull request.\nSOURCE: https://github.com/patrick-kidger/torchtyping/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```"
  }
]